
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   0:	50 62 00 20 35 50 01 00 45 76 02 00 09 50 01 00     Pb. 5P..Ev...P..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	09 50 01 00 09 50 01 00 09 50 01 00 00 00 00 00     .P...P...P......
	...
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
  2c:	a5 49 01 00 09 50 01 00 00 00 00 00 5d 49 01 00     .I...P......]I..
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	09 50 01 00                                         .P..

00000040 <_irq_vector_table>:
  40:	21 4a 01 00 9b a2 02 00 21 4a 01 00 21 4a 01 00     !J......!J..!J..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  50:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
  60:	49 a2 02 00 21 4a 01 00 21 4a 01 00 81 a2 02 00     I...!J..!J......
	if (!fs->sector_size || fs->sector_size % info.size) {
  70:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
	if (fs->sector_count < 2) {
  80:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  90:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
  a0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
	for (i = 0; i < fs->sector_count; i++) {
  b0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
  c0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
			nvs_sector_advance(fs, &addr);
  d0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
	rc = nvs_recover_last_ate(fs, &addr);
  e0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..
	fs->data_wra = addr & ADDR_SECT_MASK;
  f0:	21 4a 01 00 21 4a 01 00 21 4a 01 00 21 4a 01 00     !J..!J..!J..!J..

Disassembly of section text:

00000100 <__aeabi_frsub>:
	while (fs->ate_wra >= fs->data_wra) {
     100:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     104:	e002      	b.n	10c <__addsf3>
     106:	bf00      	nop

00000108 <__aeabi_fsub>:
     108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000010c <__addsf3>:
     10c:	0042      	lsls	r2, r0, #1
		if (rc) {
     10e:	bf1f      	itttt	ne
     110:	ea5f 0341 	movsne.w	r3, r1, lsl #1
		if (data8[i] != value) {
     114:	ea92 0f03 	teqne	r2, r3
     118:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     11c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     120:	d06a      	beq.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     122:	ea4f 6212 	mov.w	r2, r2, lsr #24
	nvs_sector_advance(fs, &addr);
     126:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
     12a:	bfc1      	itttt	gt
	nvs_sector_advance(fs, &addr);
     12c:	18d2      	addgt	r2, r2, r3
     12e:	4041      	eorgt	r1, r0
	addr = fs->ate_wra & ADDR_SECT_MASK;
     130:	4048      	eorgt	r0, r1
	nvs_sector_advance(fs, &addr);
     132:	4041      	eorgt	r1, r0
     134:	bfb8      	it	lt
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     136:	425b      	neglt	r3, r3
     138:	2b19      	cmp	r3, #25
     13a:	bf88      	it	hi
     13c:	4770      	bxhi	lr
     13e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
	if (rc < 0) {
     142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		       (uint16_t)(fs->sector_size - ate_size);
     14a:	bf18      	it	ne
		addr = (i << ADDR_SECT_SHIFT) +
     14c:	4240      	negne	r0, r0
		       (uint16_t)(fs->sector_size - ate_size);
     14e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
		addr = (i << ADDR_SECT_SHIFT) +
     152:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     156:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		addr = (i << ADDR_SECT_SHIFT) +
     15a:	bf18      	it	ne
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     15c:	4249      	negne	r1, r1
     15e:	ea92 0f03 	teq	r2, r3
			nvs_sector_advance(fs, &addr);
     162:	d03f      	beq.n	1e4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x77>
     164:	f1a2 0201 	sub.w	r2, r2, #1
     168:	fa41 fc03 	asr.w	ip, r1, r3
			closed_sectors++;
     16c:	eb10 000c 	adds.w	r0, r0, ip
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     170:	f1c3 0320 	rsb	r3, r3, #32
     174:	fa01 f103 	lsl.w	r1, r1, r3
			closed_sectors++;
     178:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     17c:	d502      	bpl.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     17e:	4249      	negs	r1, r1
			if (!rc) {
     180:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
	for (i = 0; i < fs->sector_count; i++) {
     184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     188:	d313      	bcc.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     18a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
				rc = -ESPIPE;
     18e:	d306      	bcc.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     190:	0840      	lsrs	r0, r0, #1
     192:	ea4f 0131 	mov.w	r1, r1, rrx
		addr = fs->ate_wra + ate_size;
     196:	f102 0201 	add.w	r2, r2, #1
     19a:	2afe      	cmp	r2, #254	; 0xfe
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     19c:	d251      	bcs.n	242 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4e>
     19e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1a6:	bf08      	it	eq
     1a8:	f020 0001 	biceq.w	r0, r0, #1
		LOG_INF("No GC Done marker found: restarting gc");
     1ac:	ea40 0003 	orr.w	r0, r0, r3
     1b0:	4770      	bx	lr
     1b2:	0049      	lsls	r1, r1, #1
     1b4:	eb40 0000 	adc.w	r0, r0, r0
     1b8:	3a01      	subs	r2, #1
     1ba:	bf28      	it	cs
     1bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1c0:	d2ed      	bcs.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     1c2:	fab0 fc80 	clz	ip, r0
     1c6:	f1ac 0c08 	sub.w	ip, ip, #8
		if (rc) {
     1ca:	ebb2 020c 	subs.w	r2, r2, ip
		fs->ate_wra &= ADDR_SECT_MASK;
     1ce:	fa00 f00c 	lsl.w	r0, r0, ip
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d2:	bfaa      	itet	ge
		fs->ate_wra &= ADDR_SECT_MASK;
     1d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d8:	4252      	neglt	r2, r2
     1da:	4318      	orrge	r0, r3
     1dc:	bfbc      	itt	lt
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     1de:	40d0      	lsrlt	r0, r2
     1e0:	4318      	orrlt	r0, r3
		rc = nvs_gc(fs);
     1e2:	4770      	bx	lr
     1e4:	f092 0f00 	teq	r2, #0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     1e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1ec:	bf06      	itte	eq
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     1ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1f2:	3201      	addeq	r2, #1
     1f4:	3b01      	subne	r3, #1
     1f6:	e7b5      	b.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     1f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
			if (rc) {
     1fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     200:	bf18      	it	ne
     202:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     206:	d021      	beq.n	24c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x58>
     208:	ea92 0f03 	teq	r2, r3
     20c:	d004      	beq.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     20e:	f092 0f00 	teq	r2, #0
			    (gc_done_ate.id == 0xffff) &&
     212:	bf08      	it	eq
     214:	4608      	moveq	r0, r1
     216:	4770      	bx	lr
			addr += ate_size;
     218:	ea90 0f01 	teq	r0, r1
     21c:	bf1c      	itt	ne
     21e:	2000      	movne	r0, #0
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     220:	4770      	bxne	lr
     222:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     226:	d104      	bne.n	232 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3e>
     228:	0040      	lsls	r0, r0, #1
		if (rc < 0) {
     22a:	bf28      	it	cs
     22c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
		fs->data_wra += fs->flash_parameters->write_block_size;
     230:	4770      	bx	lr
     232:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     236:	bf3c      	itt	cc
     238:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
	while (fs->ate_wra > fs->data_wra) {
     23c:	4770      	bxcc	lr
     23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     242:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     24a:	4770      	bx	lr
     24c:	ea7f 6222 	mvns.w	r2, r2, asr #24
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     250:	bf16      	itet	ne
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     252:	4608      	movne	r0, r1
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     254:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     258:	4601      	movne	r1, r0
     25a:	0242      	lsls	r2, r0, #9
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     25c:	bf06      	itte	eq
     25e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
		if (rc) {
     262:	ea90 0f01 	teqeq	r0, r1
     266:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     26a:	4770      	bx	lr

0000026c <__aeabi_ui2f>:
     26c:	f04f 0300 	mov.w	r3, #0
		      (fs->sector_size - 2 * ate_size))) {
     270:	e004      	b.n	27c <__aeabi_i2f+0x8>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     272:	bf00      	nop

00000274 <__aeabi_i2f>:
		      (fs->sector_size - 2 * ate_size))) {
     274:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     278:	bf48      	it	mi
     27a:	4240      	negmi	r0, r0
		rc = nvs_add_gc_done_ate(fs);
     27c:	ea5f 0c00 	movs.w	ip, r0
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     288:	4601      	mov	r1, r0
     28a:	f04f 0000 	mov.w	r0, #0
     28e:	e01c      	b.n	2ca <__aeabi_l2f+0x2a>

00000290 <__aeabi_ul2f>:
     290:	ea50 0201 	orrs.w	r2, r0, r1
     294:	bf08      	it	eq
     296:	4770      	bxeq	lr
     298:	f04f 0300 	mov.w	r3, #0
     29c:	e00a      	b.n	2b4 <__aeabi_l2f+0x14>
     29e:	bf00      	nop

000002a0 <__aeabi_l2f>:
     2a0:	ea50 0201 	orrs.w	r2, r0, r1
		rc = -EDEADLK;
     2a4:	bf08      	it	eq
     2a6:	4770      	bxeq	lr
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     2ac:	d502      	bpl.n	2b4 <__aeabi_l2f+0x14>
	if (rc) {
     2ae:	4240      	negs	r0, r0
     2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	fs->ready = true;
     2b4:	ea5f 0c01 	movs.w	ip, r1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2b8:	bf02      	ittt	eq
	fs->ready = true;
     2ba:	4684      	moveq	ip, r0
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2bc:	4601      	moveq	r1, r0
     2be:	2000      	moveq	r0, #0
     2c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2c4:	bf08      	it	eq
     2c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ce:	fabc f28c 	clz	r2, ip
     2d2:	3a08      	subs	r2, #8
     2d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2d8:	db10      	blt.n	2fc <__aeabi_l2f+0x5c>
     2da:	fa01 fc02 	lsl.w	ip, r1, r2
     2de:	4463      	add	r3, ip
     2e0:	fa00 fc02 	lsl.w	ip, r0, r2
	LOG_INF("alloc wra: %d, %x",
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2ec:	fa20 f202 	lsr.w	r2, r0, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	f020 0001 	biceq.w	r0, r0, #1
     2fa:	4770      	bx	lr
     2fc:	f102 0220 	add.w	r2, r2, #32
     300:	fa01 fc02 	lsl.w	ip, r1, r2
	LOG_INF("data wra: %d, %x",
     304:	f1c2 0220 	rsb	r2, r2, #32
     308:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     30c:	fa21 f202 	lsr.w	r2, r1, r2
     310:	eb43 0002 	adc.w	r0, r3, r2
     314:	bf08      	it	eq
     316:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     31a:	4770      	bx	lr

0000031c <__aeabi_fmul>:
     31c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     320:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     324:	bf1e      	ittt	ne
	return 0;
     326:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
			LOG_INF("GC Done marker found");
     32a:	ea92 0f0c 	teqne	r2, ip
     32e:	ea93 0f0c 	teqne	r3, ip
     332:	d06f      	beq.n	414 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x14>
     334:	441a      	add	r2, r3
     336:	ea80 0c01 	eor.w	ip, r0, r1
     33a:	0240      	lsls	r0, r0, #9
     33c:	bf18      	it	ne
			addr = fs->ate_wra & ADDR_SECT_MASK;
     33e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     342:	d01e      	beq.n	382 <CONFIG_BT_DEVICE_APPEARANCE+0x41>
     344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
			nvs_sector_advance(fs, &addr);
     348:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     34c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
			rc = nvs_flash_erase_sector(fs, addr);
     350:	fba0 3101 	umull	r3, r1, r0, r1
     354:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
			goto end;
     358:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
		if (nvs_ate_valid(fs, &last_ate)) {
     35c:	bf3e      	ittt	cc
     35e:	0049      	lslcc	r1, r1, #1
     360:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     364:	005b      	lslcc	r3, r3, #1
     366:	ea40 0001 	orr.w	r0, r0, r1
			fs->data_wra = addr & ADDR_SECT_MASK;
     36a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     36e:	2afd      	cmp	r2, #253	; 0xfd
     370:	d81d      	bhi.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
			fs->data_wra = addr & ADDR_SECT_MASK;
     376:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37a:	bf08      	it	eq
     37c:	f020 0001 	biceq.w	r0, r0, #1
     380:	4770      	bx	lr
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     382:	f090 0f00 	teq	r0, #0
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     386:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     38a:	bf08      	it	eq
		fs->ate_wra -= ate_size;
     38c:	0249      	lsleq	r1, r1, #9
     38e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     392:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     396:	3a7f      	subs	r2, #127	; 0x7f
     398:	bfc2      	ittt	gt
     39a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     39e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     3a2:	4770      	bxgt	lr
     3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3a8:	f04f 0300 	mov.w	r3, #0
     3ac:	3a01      	subs	r2, #1
     3ae:	dc5d      	bgt.n	46c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x6c>
     3b0:	f112 0f19 	cmn.w	r2, #25
     3b4:	bfdc      	itt	le
     3b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     3ba:	4770      	bxle	lr
     3bc:	f1c2 0200 	rsb	r2, r2, #0
     3c0:	0041      	lsls	r1, r0, #1
     3c2:	fa21 f102 	lsr.w	r1, r1, r2
     3c6:	f1c2 0220 	rsb	r2, r2, #32
     3ca:	fa00 fc02 	lsl.w	ip, r0, r2
     3ce:	ea5f 0031 	movs.w	r0, r1, rrx
     3d2:	f140 0000 	adc.w	r0, r0, #0
     3d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3da:	bf08      	it	eq
     3dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3e0:	4770      	bx	lr
     3e2:	f092 0f00 	teq	r2, #0
     3e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ea:	bf02      	ittt	eq
     3ec:	0040      	lsleq	r0, r0, #1
     3ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3f2:	3a01      	subeq	r2, #1
     3f4:	d0f9      	beq.n	3ea <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x2>
     3f6:	ea40 000c 	orr.w	r0, r0, ip
     3fa:	f093 0f00 	teq	r3, #0
     3fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     402:	bf02      	ittt	eq
     404:	0049      	lsleq	r1, r1, #1
     406:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     40a:	3b01      	subeq	r3, #1
     40c:	d0f9      	beq.n	402 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2>
     40e:	ea41 010c 	orr.w	r1, r1, ip
     412:	e78f      	b.n	334 <__aeabi_fmul+0x18>
     414:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     418:	ea92 0f0c 	teq	r2, ip
     41c:	bf18      	it	ne
     41e:	ea93 0f0c 	teqne	r3, ip
     422:	d00a      	beq.n	43a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3a>
     424:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     428:	bf18      	it	ne
     42a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     42e:	d1d8      	bne.n	3e2 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5e>
     430:	ea80 0001 	eor.w	r0, r0, r1
     434:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     438:	4770      	bx	lr
     43a:	f090 0f00 	teq	r0, #0
     43e:	bf17      	itett	ne
     440:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     444:	4608      	moveq	r0, r1
     446:	f091 0f00 	teqne	r1, #0
     44a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     44e:	d014      	beq.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     450:	ea92 0f0c 	teq	r2, ip
     454:	d101      	bne.n	45a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5a>
     456:	0242      	lsls	r2, r0, #9
     458:	d10f      	bne.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     45a:	ea93 0f0c 	teq	r3, ip
     45e:	d103      	bne.n	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     460:	024b      	lsls	r3, r1, #9
     462:	bf18      	it	ne
     464:	4608      	movne	r0, r1
     466:	d108      	bne.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     468:	ea80 0001 	eor.w	r0, r0, r1
     46c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     478:	4770      	bx	lr
     47a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     47e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     482:	4770      	bx	lr

00000484 <__aeabi_fdiv>:
     484:	f04f 0cff 	mov.w	ip, #255	; 0xff
     488:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     48c:	bf1e      	ittt	ne
     48e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     492:	ea92 0f0c 	teqne	r2, ip
     496:	ea93 0f0c 	teqne	r3, ip
     49a:	d069      	beq.n	570 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x5c>
     49c:	eba2 0203 	sub.w	r2, r2, r3
     4a0:	ea80 0c01 	eor.w	ip, r0, r1
     4a4:	0249      	lsls	r1, r1, #9
     4a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
     4aa:	d037      	beq.n	51c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x8>
     4ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     4b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     4b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     4b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     4bc:	428b      	cmp	r3, r1
     4be:	bf38      	it	cc
     4c0:	005b      	lslcc	r3, r3, #1
     4c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4ca:	428b      	cmp	r3, r1
     4cc:	bf24      	itt	cs
     4ce:	1a5b      	subcs	r3, r3, r1
     4d0:	ea40 000c 	orrcs.w	r0, r0, ip
     4d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4d8:	bf24      	itt	cs
     4da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4e6:	bf24      	itt	cs
     4e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4f4:	bf24      	itt	cs
     4f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4fe:	011b      	lsls	r3, r3, #4
     500:	bf18      	it	ne
     502:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     506:	d1e0      	bne.n	4ca <__aeabi_fdiv+0x46>
     508:	2afd      	cmp	r2, #253	; 0xfd
     50a:	f63f af50 	bhi.w	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     50e:	428b      	cmp	r3, r1
     510:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     514:	bf08      	it	eq
     516:	f020 0001 	biceq.w	r0, r0, #1
     51a:	4770      	bx	lr
     51c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     520:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     524:	327f      	adds	r2, #127	; 0x7f
     526:	bfc2      	ittt	gt
     528:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     52c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     530:	4770      	bxgt	lr
     532:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     536:	f04f 0300 	mov.w	r3, #0
     53a:	3a01      	subs	r2, #1
     53c:	e737      	b.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     53e:	f092 0f00 	teq	r2, #0
     542:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     546:	bf02      	ittt	eq
     548:	0040      	lsleq	r0, r0, #1
     54a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     54e:	3a01      	subeq	r2, #1
     550:	d0f9      	beq.n	546 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x32>
     552:	ea40 000c 	orr.w	r0, r0, ip
     556:	f093 0f00 	teq	r3, #0
     55a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     55e:	bf02      	ittt	eq
     560:	0049      	lsleq	r1, r1, #1
     562:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     566:	3b01      	subeq	r3, #1
     568:	d0f9      	beq.n	55e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     56a:	ea41 010c 	orr.w	r1, r1, ip
     56e:	e795      	b.n	49c <__aeabi_fdiv+0x18>
     570:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     574:	ea92 0f0c 	teq	r2, ip
     578:	d108      	bne.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     57a:	0242      	lsls	r2, r0, #9
     57c:	f47f af7d 	bne.w	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     580:	ea93 0f0c 	teq	r3, ip
     584:	f47f af70 	bne.w	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     588:	4608      	mov	r0, r1
     58a:	e776      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     58c:	ea93 0f0c 	teq	r3, ip
     590:	d104      	bne.n	59c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x88>
     592:	024b      	lsls	r3, r1, #9
     594:	f43f af4c 	beq.w	430 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x30>
     598:	4608      	mov	r0, r1
     59a:	e76e      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     59c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5a0:	bf18      	it	ne
     5a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5a6:	d1ca      	bne.n	53e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x2a>
     5a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     5ac:	f47f af5c 	bne.w	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     5b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     5b4:	f47f af3c 	bne.w	430 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x30>
     5b8:	e75f      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     5ba:	bf00      	nop

000005bc <__gesf2>:
     5bc:	f04f 3cff 	mov.w	ip, #4294967295
     5c0:	e006      	b.n	5d0 <__cmpsf2+0x4>
     5c2:	bf00      	nop

000005c4 <__lesf2>:
     5c4:	f04f 0c01 	mov.w	ip, #1
     5c8:	e002      	b.n	5d0 <__cmpsf2+0x4>
     5ca:	bf00      	nop

000005cc <__cmpsf2>:
     5cc:	f04f 0c01 	mov.w	ip, #1
     5d0:	f84d cd04 	str.w	ip, [sp, #-4]!
     5d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     5dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     5e0:	bf18      	it	ne
     5e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     5e6:	d011      	beq.n	60c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     5e8:	b001      	add	sp, #4
     5ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     5ee:	bf18      	it	ne
     5f0:	ea90 0f01 	teqne	r0, r1
     5f4:	bf58      	it	pl
     5f6:	ebb2 0003 	subspl.w	r0, r2, r3
     5fa:	bf88      	it	hi
     5fc:	17c8      	asrhi	r0, r1, #31
     5fe:	bf38      	it	cc
     600:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     604:	bf18      	it	ne
     606:	f040 0001 	orrne.w	r0, r0, #1
     60a:	4770      	bx	lr
     60c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     610:	d102      	bne.n	618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     612:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     616:	d105      	bne.n	624 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     618:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     61c:	d1e4      	bne.n	5e8 <__cmpsf2+0x1c>
     61e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     622:	d0e1      	beq.n	5e8 <__cmpsf2+0x1c>
     624:	f85d 0b04 	ldr.w	r0, [sp], #4
     628:	4770      	bx	lr
     62a:	bf00      	nop

0000062c <__aeabi_cfrcmple>:
     62c:	4684      	mov	ip, r0
     62e:	4608      	mov	r0, r1
     630:	4661      	mov	r1, ip
     632:	e7ff      	b.n	634 <__aeabi_cfcmpeq>

00000634 <__aeabi_cfcmpeq>:
     634:	b50f      	push	{r0, r1, r2, r3, lr}
     636:	f7ff ffc9 	bl	5cc <__cmpsf2>
     63a:	2800      	cmp	r0, #0
     63c:	bf48      	it	mi
     63e:	f110 0f00 	cmnmi.w	r0, #0
     642:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000644 <__aeabi_fcmpeq>:
     644:	f84d ed08 	str.w	lr, [sp, #-8]!
     648:	f7ff fff4 	bl	634 <__aeabi_cfcmpeq>
     64c:	bf0c      	ite	eq
     64e:	2001      	moveq	r0, #1
     650:	2000      	movne	r0, #0
     652:	f85d fb08 	ldr.w	pc, [sp], #8
     656:	bf00      	nop

00000658 <__aeabi_fcmplt>:
     658:	f84d ed08 	str.w	lr, [sp, #-8]!
     65c:	f7ff ffea 	bl	634 <__aeabi_cfcmpeq>
     660:	bf34      	ite	cc
     662:	2001      	movcc	r0, #1
     664:	2000      	movcs	r0, #0
     666:	f85d fb08 	ldr.w	pc, [sp], #8
     66a:	bf00      	nop

0000066c <__aeabi_fcmple>:
     66c:	f84d ed08 	str.w	lr, [sp, #-8]!
     670:	f7ff ffe0 	bl	634 <__aeabi_cfcmpeq>
     674:	bf94      	ite	ls
     676:	2001      	movls	r0, #1
     678:	2000      	movhi	r0, #0
     67a:	f85d fb08 	ldr.w	pc, [sp], #8
     67e:	bf00      	nop

00000680 <__aeabi_fcmpge>:
     680:	f84d ed08 	str.w	lr, [sp, #-8]!
     684:	f7ff ffd2 	bl	62c <__aeabi_cfrcmple>
     688:	bf94      	ite	ls
     68a:	2001      	movls	r0, #1
     68c:	2000      	movhi	r0, #0
     68e:	f85d fb08 	ldr.w	pc, [sp], #8
     692:	bf00      	nop

00000694 <__aeabi_fcmpgt>:
     694:	f84d ed08 	str.w	lr, [sp, #-8]!
     698:	f7ff ffc8 	bl	62c <__aeabi_cfrcmple>
     69c:	bf34      	ite	cc
     69e:	2001      	movcc	r0, #1
     6a0:	2000      	movcs	r0, #0
     6a2:	f85d fb08 	ldr.w	pc, [sp], #8
     6a6:	bf00      	nop

000006a8 <__aeabi_f2iz>:
     6a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     6ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     6b0:	d30f      	bcc.n	6d2 <__aeabi_f2iz+0x2a>
     6b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     6b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     6ba:	d90d      	bls.n	6d8 <__aeabi_f2iz+0x30>
     6bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
     6c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     6c8:	fa23 f002 	lsr.w	r0, r3, r2
     6cc:	bf18      	it	ne
     6ce:	4240      	negne	r0, r0
     6d0:	4770      	bx	lr
     6d2:	f04f 0000 	mov.w	r0, #0
     6d6:	4770      	bx	lr
     6d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     6dc:	d101      	bne.n	6e2 <__aeabi_f2iz+0x3a>
     6de:	0242      	lsls	r2, r0, #9
     6e0:	d105      	bne.n	6ee <__aeabi_f2iz+0x46>
     6e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     6e6:	bf08      	it	eq
     6e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     6ec:	4770      	bx	lr
     6ee:	f04f 0000 	mov.w	r0, #0
     6f2:	4770      	bx	lr

000006f4 <__aeabi_f2uiz>:
     6f4:	0042      	lsls	r2, r0, #1
     6f6:	d20e      	bcs.n	716 <__aeabi_f2uiz+0x22>
     6f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     6fc:	d30b      	bcc.n	716 <__aeabi_f2uiz+0x22>
     6fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
     702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     706:	d409      	bmi.n	71c <__aeabi_f2uiz+0x28>
     708:	ea4f 2300 	mov.w	r3, r0, lsl #8
     70c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     710:	fa23 f002 	lsr.w	r0, r3, r2
     714:	4770      	bx	lr
     716:	f04f 0000 	mov.w	r0, #0
     71a:	4770      	bx	lr
     71c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     720:	d101      	bne.n	726 <__aeabi_f2uiz+0x32>
     722:	0242      	lsls	r2, r0, #9
     724:	d102      	bne.n	72c <__aeabi_f2uiz+0x38>
     726:	f04f 30ff 	mov.w	r0, #4294967295
     72a:	4770      	bx	lr
     72c:	f04f 0000 	mov.w	r0, #0
     730:	4770      	bx	lr
     732:	bf00      	nop

00000734 <__aeabi_uldivmod>:
     734:	b953      	cbnz	r3, 74c <__aeabi_uldivmod+0x18>
     736:	b94a      	cbnz	r2, 74c <__aeabi_uldivmod+0x18>
     738:	2900      	cmp	r1, #0
     73a:	bf08      	it	eq
     73c:	2800      	cmpeq	r0, #0
     73e:	bf1c      	itt	ne
     740:	f04f 31ff 	movne.w	r1, #4294967295
     744:	f04f 30ff 	movne.w	r0, #4294967295
     748:	f000 b80c 	b.w	764 <__aeabi_idiv0>
     74c:	f1ad 0c08 	sub.w	ip, sp, #8
     750:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     754:	f00b ff32 	bl	c5bc <__udivmoddi4>
     758:	f8dd e004 	ldr.w	lr, [sp, #4]
     75c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     760:	b004      	add	sp, #16
     762:	4770      	bx	lr

00000764 <__aeabi_idiv0>:
     764:	4770      	bx	lr
     766:	bf00      	nop

00000768 <ocrypto_bigint_add256>:
     768:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     76c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     770:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     774:	185b      	adds	r3, r3, r1
     776:	eb54 040c 	adcs.w	r4, r4, ip
     77a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     77e:	414d      	adcs	r5, r1
     780:	eb56 060c 	adcs.w	r6, r6, ip
     784:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     788:	414f      	adcs	r7, r1
     78a:	eb58 080c 	adcs.w	r8, r8, ip
     78e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     792:	eb59 0901 	adcs.w	r9, r9, r1
     796:	eb5a 0a0c 	adcs.w	sl, sl, ip
     79a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     79e:	4180      	sbcs	r0, r0
     7a0:	3001      	adds	r0, #1
     7a2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7a6:	4770      	bx	lr

000007a8 <ocrypto_bigint_sub256>:
     7a8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7ac:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     7b0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7b4:	1a5b      	subs	r3, r3, r1
     7b6:	eb74 040c 	sbcs.w	r4, r4, ip
     7ba:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7be:	418d      	sbcs	r5, r1
     7c0:	eb76 060c 	sbcs.w	r6, r6, ip
     7c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7c8:	418f      	sbcs	r7, r1
     7ca:	eb78 080c 	sbcs.w	r8, r8, ip
     7ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7d2:	eb79 0901 	sbcs.w	r9, r9, r1
     7d6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     7da:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     7de:	4180      	sbcs	r0, r0
     7e0:	4240      	negs	r0, r0
     7e2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7e6:	4770      	bx	lr

000007e8 <ocrypto_bigint_cadd256>:
     7e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7ec:	4252      	negs	r2, r2
     7ee:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     7f2:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     7f6:	4017      	ands	r7, r2
     7f8:	19db      	adds	r3, r3, r7
     7fa:	ea18 0802 	ands.w	r8, r8, r2
     7fe:	eb54 0408 	adcs.w	r4, r4, r8
     802:	ea19 0902 	ands.w	r9, r9, r2
     806:	eb55 0509 	adcs.w	r5, r5, r9
     80a:	ea1a 0a02 	ands.w	sl, sl, r2
     80e:	eb56 060a 	adcs.w	r6, r6, sl
     812:	c078      	stmia	r0!, {r3, r4, r5, r6}
     814:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     818:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     81c:	4017      	ands	r7, r2
     81e:	417b      	adcs	r3, r7
     820:	ea18 0802 	ands.w	r8, r8, r2
     824:	eb54 0408 	adcs.w	r4, r4, r8
     828:	ea19 0902 	ands.w	r9, r9, r2
     82c:	eb55 0509 	adcs.w	r5, r5, r9
     830:	ea1a 0a02 	ands.w	sl, sl, r2
     834:	eb56 060a 	adcs.w	r6, r6, sl
     838:	c078      	stmia	r0!, {r3, r4, r5, r6}
     83a:	4180      	sbcs	r0, r0
     83c:	3001      	adds	r0, #1
     83e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     842:	4770      	bx	lr

00000844 <ocrypto_bigint_csub256>:
     844:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     848:	4252      	negs	r2, r2
     84a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     84e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     852:	4017      	ands	r7, r2
     854:	1bdb      	subs	r3, r3, r7
     856:	ea18 0802 	ands.w	r8, r8, r2
     85a:	eb74 0408 	sbcs.w	r4, r4, r8
     85e:	ea19 0902 	ands.w	r9, r9, r2
     862:	eb75 0509 	sbcs.w	r5, r5, r9
     866:	ea1a 0a02 	ands.w	sl, sl, r2
     86a:	eb76 060a 	sbcs.w	r6, r6, sl
     86e:	c078      	stmia	r0!, {r3, r4, r5, r6}
     870:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     874:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     878:	4017      	ands	r7, r2
     87a:	41bb      	sbcs	r3, r7
     87c:	ea18 0802 	ands.w	r8, r8, r2
     880:	eb74 0408 	sbcs.w	r4, r4, r8
     884:	ea19 0902 	ands.w	r9, r9, r2
     888:	eb75 0509 	sbcs.w	r5, r5, r9
     88c:	ea1a 0a02 	ands.w	sl, sl, r2
     890:	eb76 060a 	sbcs.w	r6, r6, sl
     894:	c078      	stmia	r0!, {r3, r4, r5, r6}
     896:	4180      	sbcs	r0, r0
     898:	4240      	negs	r0, r0
     89a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     89e:	4770      	bx	lr

000008a0 <ocrypto_bigint_cswap256>:
     8a0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     8a4:	4252      	negs	r2, r2
     8a6:	f04f 0804 	mov.w	r8, #4

000008aa <cswap256_loop>:
     8aa:	e890 0030 	ldmia.w	r0, {r4, r5}
     8ae:	e891 00c0 	ldmia.w	r1, {r6, r7}
     8b2:	1ba3      	subs	r3, r4, r6
     8b4:	4013      	ands	r3, r2
     8b6:	1ae4      	subs	r4, r4, r3
     8b8:	18f6      	adds	r6, r6, r3
     8ba:	1beb      	subs	r3, r5, r7
     8bc:	4013      	ands	r3, r2
     8be:	1aed      	subs	r5, r5, r3
     8c0:	18ff      	adds	r7, r7, r3
     8c2:	c030      	stmia	r0!, {r4, r5}
     8c4:	c1c0      	stmia	r1!, {r6, r7}
     8c6:	f1b8 0801 	subs.w	r8, r8, #1
     8ca:	d1ee      	bne.n	8aa <cswap256_loop>
     8cc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     8d0:	4770      	bx	lr
     8d2:	bf00      	nop

000008d4 <ocrypto_mul256_noframe>:
     8d4:	b500      	push	{lr}
     8d6:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     8da:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     8de:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     8e2:	b402      	push	{r1}
     8e4:	fba7 5102 	umull	r5, r1, r7, r2
     8e8:	950a      	str	r5, [sp, #40]	; 0x28
     8ea:	fba8 0b02 	umull	r0, fp, r8, r2
     8ee:	fbe7 1063 	umaal	r1, r0, r7, r3
     8f2:	fbe9 b062 	umaal	fp, r0, r9, r2
     8f6:	910b      	str	r1, [sp, #44]	; 0x2c
     8f8:	fba8 5103 	umull	r5, r1, r8, r3
     8fc:	fbea 0162 	umaal	r0, r1, sl, r2
     900:	fbe7 b564 	umaal	fp, r5, r7, r4
     904:	fbe7 0566 	umaal	r0, r5, r7, r6
     908:	fbe8 1566 	umaal	r1, r5, r8, r6
     90c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     910:	fba9 b603 	umull	fp, r6, r9, r3
     914:	fbea 1663 	umaal	r1, r6, sl, r3
     918:	fbec 5663 	umaal	r5, r6, ip, r3
     91c:	fbe8 0b64 	umaal	r0, fp, r8, r4
     920:	fbe9 1b64 	umaal	r1, fp, r9, r4
     924:	fbea 5b64 	umaal	r5, fp, sl, r4
     928:	fbec 6b64 	umaal	r6, fp, ip, r4
     92c:	900d      	str	r0, [sp, #52]	; 0x34
     92e:	fbac 3002 	umull	r3, r0, ip, r2
     932:	9c05      	ldr	r4, [sp, #20]
     934:	fbee 5062 	umaal	r5, r0, lr, r2
     938:	fbe9 6064 	umaal	r6, r0, r9, r4
     93c:	fbea b064 	umaal	fp, r0, sl, r4
     940:	fbe7 3164 	umaal	r3, r1, r7, r4
     944:	fbe8 5164 	umaal	r5, r1, r8, r4
     948:	9c06      	ldr	r4, [sp, #24]
     94a:	fbe8 6164 	umaal	r6, r1, r8, r4
     94e:	fbe9 b164 	umaal	fp, r1, r9, r4
     952:	fbea 0164 	umaal	r0, r1, sl, r4
     956:	930e      	str	r3, [sp, #56]	; 0x38
     958:	fba7 3204 	umull	r3, r2, r7, r4
     95c:	9c07      	ldr	r4, [sp, #28]
     95e:	fbe7 6264 	umaal	r6, r2, r7, r4
     962:	fbe8 b264 	umaal	fp, r2, r8, r4
     966:	fbe9 0264 	umaal	r0, r2, r9, r4
     96a:	fbea 1264 	umaal	r1, r2, sl, r4
     96e:	9c04      	ldr	r4, [sp, #16]
     970:	fbe9 5364 	umaal	r5, r3, r9, r4
     974:	fbea 6364 	umaal	r6, r3, sl, r4
     978:	9c08      	ldr	r4, [sp, #32]
     97a:	fbe7 b364 	umaal	fp, r3, r7, r4
     97e:	fbe8 0364 	umaal	r0, r3, r8, r4
     982:	fbe9 1364 	umaal	r1, r3, r9, r4
     986:	fbea 2364 	umaal	r2, r3, sl, r4
     98a:	950f      	str	r5, [sp, #60]	; 0x3c
     98c:	f85d 9b04 	ldr.w	r9, [sp], #4
     990:	e899 0600 	ldmia.w	r9, {r9, sl}
     994:	f8dd 8000 	ldr.w	r8, [sp]
     998:	fba9 5408 	umull	r5, r4, r9, r8
     99c:	fbea b468 	umaal	fp, r4, sl, r8
     9a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     9a4:	fbec 0468 	umaal	r0, r4, ip, r8
     9a8:	fbee 1468 	umaal	r1, r4, lr, r8
     9ac:	fbe9 2468 	umaal	r2, r4, r9, r8
     9b0:	fbea 3468 	umaal	r3, r4, sl, r8
     9b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
     9b8:	fbee 6568 	umaal	r6, r5, lr, r8
     9bc:	fbe9 b568 	umaal	fp, r5, r9, r8
     9c0:	fbea 0568 	umaal	r0, r5, sl, r8
     9c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
     9c8:	fbec 1568 	umaal	r1, r5, ip, r8
     9cc:	fbee 2568 	umaal	r2, r5, lr, r8
     9d0:	fbe9 3568 	umaal	r3, r5, r9, r8
     9d4:	fbea 4568 	umaal	r4, r5, sl, r8
     9d8:	960f      	str	r6, [sp, #60]	; 0x3c
     9da:	f8dd 8008 	ldr.w	r8, [sp, #8]
     9de:	fbae 7608 	umull	r7, r6, lr, r8
     9e2:	fbe9 0668 	umaal	r0, r6, r9, r8
     9e6:	fbea 1668 	umaal	r1, r6, sl, r8
     9ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
     9ee:	fbec 2668 	umaal	r2, r6, ip, r8
     9f2:	fbee 3668 	umaal	r3, r6, lr, r8
     9f6:	fbe9 4668 	umaal	r4, r6, r9, r8
     9fa:	fbea 5668 	umaal	r5, r6, sl, r8
     9fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a02:	fbec b768 	umaal	fp, r7, ip, r8
     a06:	fbee 0768 	umaal	r0, r7, lr, r8
     a0a:	fbe9 1768 	umaal	r1, r7, r9, r8
     a0e:	fbea 2768 	umaal	r2, r7, sl, r8
     a12:	f8dd 801c 	ldr.w	r8, [sp, #28]
     a16:	fbec 3768 	umaal	r3, r7, ip, r8
     a1a:	fbee 4768 	umaal	r4, r7, lr, r8
     a1e:	fbe9 5768 	umaal	r5, r7, r9, r8
     a22:	fbea 6768 	umaal	r6, r7, sl, r8
     a26:	b008      	add	sp, #32
     a28:	bd00      	pop	{pc}
     a2a:	bf00      	nop

00000a2c <ocrypto_bigint_mul256>:
     a2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a30:	b087      	sub	sp, #28
     a32:	f7ff ff4f 	bl	8d4 <ocrypto_mul256_noframe>
     a36:	f8dd 801c 	ldr.w	r8, [sp, #28]
     a3a:	f108 0820 	add.w	r8, r8, #32
     a3e:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     a42:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     a44:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a4c <ocrypto_sqr256_noframe>:
     a4c:	b500      	push	{lr}
     a4e:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     a52:	fba3 5203 	umull	r5, r2, r3, r3
     a56:	9501      	str	r5, [sp, #4]
     a58:	fba3 0104 	umull	r0, r1, r3, r4
     a5c:	fbe3 2064 	umaal	r2, r0, r3, r4
     a60:	fbe3 1067 	umaal	r1, r0, r3, r7
     a64:	9202      	str	r2, [sp, #8]
     a66:	fba3 5207 	umull	r5, r2, r3, r7
     a6a:	fbe3 0268 	umaal	r0, r2, r3, r8
     a6e:	fbe4 1564 	umaal	r1, r5, r4, r4
     a72:	fbe3 0568 	umaal	r0, r5, r3, r8
     a76:	fbe3 2569 	umaal	r2, r5, r3, r9
     a7a:	9103      	str	r1, [sp, #12]
     a7c:	fba4 b607 	umull	fp, r6, r4, r7
     a80:	fbe3 2669 	umaal	r2, r6, r3, r9
     a84:	fbe3 566a 	umaal	r5, r6, r3, sl
     a88:	fbe4 0b67 	umaal	r0, fp, r4, r7
     a8c:	fbe4 2b68 	umaal	r2, fp, r4, r8
     a90:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     a94:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     a98:	9004      	str	r0, [sp, #16]
     a9a:	fba4 1008 	umull	r1, r0, r4, r8
     a9e:	fbe4 5069 	umaal	r5, r0, r4, r9
     aa2:	fbe3 606c 	umaal	r6, r0, r3, ip
     aa6:	fbe3 b06e 	umaal	fp, r0, r3, lr
     aaa:	fbe7 2167 	umaal	r2, r1, r7, r7
     aae:	fbe4 5169 	umaal	r5, r1, r4, r9
     ab2:	fbe4 616a 	umaal	r6, r1, r4, sl
     ab6:	fbe3 b16e 	umaal	fp, r1, r3, lr
     aba:	fbe4 016e 	umaal	r0, r1, r4, lr
     abe:	9205      	str	r2, [sp, #20]
     ac0:	fba7 3208 	umull	r3, r2, r7, r8
     ac4:	fbe4 626a 	umaal	r6, r2, r4, sl
     ac8:	fbe4 b26c 	umaal	fp, r2, r4, ip
     acc:	fbe4 026e 	umaal	r0, r2, r4, lr
     ad0:	fbe7 126e 	umaal	r1, r2, r7, lr
     ad4:	fbe7 5368 	umaal	r5, r3, r7, r8
     ad8:	fbe7 6369 	umaal	r6, r3, r7, r9
     adc:	fbe4 b36c 	umaal	fp, r3, r4, ip
     ae0:	fbe7 036c 	umaal	r0, r3, r7, ip
     ae4:	fbe7 136e 	umaal	r1, r3, r7, lr
     ae8:	fbe8 236e 	umaal	r2, r3, r8, lr
     aec:	9506      	str	r5, [sp, #24]
     aee:	fba7 5409 	umull	r5, r4, r7, r9
     af2:	fbe7 b46a 	umaal	fp, r4, r7, sl
     af6:	fbe7 046c 	umaal	r0, r4, r7, ip
     afa:	fbe8 146c 	umaal	r1, r4, r8, ip
     afe:	fbe8 246e 	umaal	r2, r4, r8, lr
     b02:	fbe9 346e 	umaal	r3, r4, r9, lr
     b06:	fbe8 6568 	umaal	r6, r5, r8, r8
     b0a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     b0e:	fbe8 056a 	umaal	r0, r5, r8, sl
     b12:	fbe8 156c 	umaal	r1, r5, r8, ip
     b16:	fbe9 256c 	umaal	r2, r5, r9, ip
     b1a:	fbe9 356e 	umaal	r3, r5, r9, lr
     b1e:	fbea 456e 	umaal	r4, r5, sl, lr
     b22:	9607      	str	r6, [sp, #28]
     b24:	fba8 7609 	umull	r7, r6, r8, r9
     b28:	fbe8 066a 	umaal	r0, r6, r8, sl
     b2c:	fbe9 166a 	umaal	r1, r6, r9, sl
     b30:	fbe9 266c 	umaal	r2, r6, r9, ip
     b34:	fbea 366c 	umaal	r3, r6, sl, ip
     b38:	fbea 466e 	umaal	r4, r6, sl, lr
     b3c:	fbec 566e 	umaal	r5, r6, ip, lr
     b40:	fbe8 b769 	umaal	fp, r7, r8, r9
     b44:	fbe9 0769 	umaal	r0, r7, r9, r9
     b48:	fbe9 176a 	umaal	r1, r7, r9, sl
     b4c:	fbea 276a 	umaal	r2, r7, sl, sl
     b50:	fbea 376c 	umaal	r3, r7, sl, ip
     b54:	fbec 476c 	umaal	r4, r7, ip, ip
     b58:	fbec 576e 	umaal	r5, r7, ip, lr
     b5c:	fbee 676e 	umaal	r6, r7, lr, lr
     b60:	bd00      	pop	{pc}
     b62:	bf00      	nop

00000b64 <ocrypto_bigint_sqr256>:
     b64:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b68:	b087      	sub	sp, #28
     b6a:	f7ff ff6f 	bl	a4c <ocrypto_sqr256_noframe>
     b6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
     b72:	f108 0820 	add.w	r8, r8, #32
     b76:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     b7a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     b7c:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b84 <ocrypto_constant_time_equal>:
     b84:	b430      	push	{r4, r5}
     b86:	f04f 0300 	mov.w	r3, #0

00000b8a <constant_time_equal_loop>:
     b8a:	f810 4b01 	ldrb.w	r4, [r0], #1
     b8e:	f811 5b01 	ldrb.w	r5, [r1], #1
     b92:	3a01      	subs	r2, #1
     b94:	ea84 0405 	eor.w	r4, r4, r5
     b98:	ea43 0304 	orr.w	r3, r3, r4
     b9c:	d1f5      	bne.n	b8a <constant_time_equal_loop>
     b9e:	f1a3 0301 	sub.w	r3, r3, #1
     ba2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     ba6:	bc30      	pop	{r4, r5}
     ba8:	4770      	bx	lr
     baa:	bf00      	nop

00000bac <ocrypto_constant_time_is_zero>:
     bac:	f04f 0300 	mov.w	r3, #0

00000bb0 <constant_time_is_zero_loop>:
     bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
     bb4:	3901      	subs	r1, #1
     bb6:	ea43 0302 	orr.w	r3, r3, r2
     bba:	d1f9      	bne.n	bb0 <constant_time_is_zero_loop>
     bbc:	f1a3 0301 	sub.w	r3, r3, #1
     bc0:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop

00000bc8 <ocrypto_constant_time_xor>:
     bc8:	b430      	push	{r4, r5}

00000bca <constant_time_xor_loop>:
     bca:	f811 4b01 	ldrb.w	r4, [r1], #1
     bce:	f812 5b01 	ldrb.w	r5, [r2], #1
     bd2:	406c      	eors	r4, r5
     bd4:	f800 4b01 	strb.w	r4, [r0], #1
     bd8:	3b01      	subs	r3, #1
     bda:	d1f6      	bne.n	bca <constant_time_xor_loop>
     bdc:	bc30      	pop	{r4, r5}
     bde:	4770      	bx	lr

00000be0 <ocrypto_mod_p256_add>:
     be0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     be4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     be8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     bec:	185b      	adds	r3, r3, r1
     bee:	eb54 040c 	adcs.w	r4, r4, ip
     bf2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     bf6:	414d      	adcs	r5, r1
     bf8:	eb56 060c 	adcs.w	r6, r6, ip
     bfc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c00:	414f      	adcs	r7, r1
     c02:	eb58 080c 	adcs.w	r8, r8, ip
     c06:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c0a:	eb59 0901 	adcs.w	r9, r9, r1
     c0e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     c12:	4189      	sbcs	r1, r1
     c14:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     c18:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     c1c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     c20:	f176 0600 	sbcs.w	r6, r6, #0
     c24:	f177 0700 	sbcs.w	r7, r7, #0
     c28:	f178 0800 	sbcs.w	r8, r8, #0
     c2c:	f179 0901 	sbcs.w	r9, r9, #1
     c30:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     c34:	f151 0100 	adcs.w	r1, r1, #0
     c38:	185b      	adds	r3, r3, r1
     c3a:	414c      	adcs	r4, r1
     c3c:	414d      	adcs	r5, r1
     c3e:	f156 0600 	adcs.w	r6, r6, #0
     c42:	f157 0700 	adcs.w	r7, r7, #0
     c46:	f158 0800 	adcs.w	r8, r8, #0
     c4a:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     c4e:	eb5a 0a01 	adcs.w	sl, sl, r1
     c52:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     c56:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     c5a:	4770      	bx	lr

00000c5c <ocrypto_mod_p256_sub>:
     c5c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     c60:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     c64:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c68:	1a5b      	subs	r3, r3, r1
     c6a:	eb74 040c 	sbcs.w	r4, r4, ip
     c6e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c72:	418d      	sbcs	r5, r1
     c74:	eb76 060c 	sbcs.w	r6, r6, ip
     c78:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c7c:	418f      	sbcs	r7, r1
     c7e:	eb78 080c 	sbcs.w	r8, r8, ip
     c82:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c86:	eb79 0901 	sbcs.w	r9, r9, r1
     c8a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     c8e:	4189      	sbcs	r1, r1
     c90:	185b      	adds	r3, r3, r1
     c92:	414c      	adcs	r4, r1
     c94:	414d      	adcs	r5, r1
     c96:	f156 0600 	adcs.w	r6, r6, #0
     c9a:	f157 0700 	adcs.w	r7, r7, #0
     c9e:	f158 0800 	adcs.w	r8, r8, #0
     ca2:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     ca6:	eb5a 0a01 	adcs.w	sl, sl, r1
     caa:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     cae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     cb2:	4770      	bx	lr

00000cb4 <mul_reduce>:
     cb4:	eb18 0804 	adds.w	r8, r8, r4
     cb8:	eb59 0905 	adcs.w	r9, r9, r5
     cbc:	eb5a 0a06 	adcs.w	sl, sl, r6
     cc0:	eb5b 0b07 	adcs.w	fp, fp, r7
     cc4:	f05f 0c00 	movs.w	ip, #0
     cc8:	f14c 0c00 	adc.w	ip, ip, #0
     ccc:	eb18 0805 	adds.w	r8, r8, r5
     cd0:	eb59 0906 	adcs.w	r9, r9, r6
     cd4:	eb5a 0a07 	adcs.w	sl, sl, r7
     cd8:	eb5b 0b07 	adcs.w	fp, fp, r7
     cdc:	eb50 000c 	adcs.w	r0, r0, ip
     ce0:	f05f 0c00 	movs.w	ip, #0
     ce4:	eb51 010c 	adcs.w	r1, r1, ip
     ce8:	eb52 020c 	adcs.w	r2, r2, ip
     cec:	4163      	adcs	r3, r4
     cee:	f14c 0c00 	adc.w	ip, ip, #0
     cf2:	ebb8 0807 	subs.w	r8, r8, r7
     cf6:	f179 0900 	sbcs.w	r9, r9, #0
     cfa:	f17a 0a00 	sbcs.w	sl, sl, #0
     cfe:	eb7b 0b04 	sbcs.w	fp, fp, r4
     d02:	41a8      	sbcs	r0, r5
     d04:	41b1      	sbcs	r1, r6
     d06:	41a2      	sbcs	r2, r4
     d08:	41b3      	sbcs	r3, r6
     d0a:	f16c 0c00 	sbc.w	ip, ip, #0
     d0e:	ebbb 0b05 	subs.w	fp, fp, r5
     d12:	41b0      	sbcs	r0, r6
     d14:	41b9      	sbcs	r1, r7
     d16:	41aa      	sbcs	r2, r5
     d18:	41bb      	sbcs	r3, r7
     d1a:	f16c 0c00 	sbc.w	ip, ip, #0
     d1e:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     d22:	ebb8 0804 	subs.w	r8, r8, r4
     d26:	eb79 0904 	sbcs.w	r9, r9, r4
     d2a:	eb7a 0a04 	sbcs.w	sl, sl, r4
     d2e:	f17b 0b00 	sbcs.w	fp, fp, #0
     d32:	f170 0000 	sbcs.w	r0, r0, #0
     d36:	f171 0100 	sbcs.w	r1, r1, #0
     d3a:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     d3e:	41a3      	sbcs	r3, r4
     d40:	f16c 0c00 	sbc.w	ip, ip, #0
     d44:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     d48:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     d4c:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     d50:	f15b 0b00 	adcs.w	fp, fp, #0
     d54:	f150 0400 	adcs.w	r4, r0, #0
     d58:	f151 0500 	adcs.w	r5, r1, #0
     d5c:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     d60:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     d64:	f14c 0c00 	adc.w	ip, ip, #0
     d68:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     d6c:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     d70:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     d74:	f15b 0300 	adcs.w	r3, fp, #0
     d78:	f154 0400 	adcs.w	r4, r4, #0
     d7c:	f155 0500 	adcs.w	r5, r5, #0
     d80:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     d84:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     d88:	4770      	bx	lr
     d8a:	bf00      	nop

00000d8c <ocrypto_mod_p256_mul>:
     d8c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d90:	b087      	sub	sp, #28
     d92:	f7ff fd9f 	bl	8d4 <ocrypto_mul256_noframe>
     d96:	f8dd 8010 	ldr.w	r8, [sp, #16]
     d9a:	f8dd 9014 	ldr.w	r9, [sp, #20]
     d9e:	f8dd a018 	ldr.w	sl, [sp, #24]
     da2:	f7ff ff87 	bl	cb4 <mul_reduce>
     da6:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     daa:	f7ff ff83 	bl	cb4 <mul_reduce>
     dae:	b003      	add	sp, #12
     db0:	f85d 8b04 	ldr.w	r8, [sp], #4
     db4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000dbc <ocrypto_mod_p256_sqr>:
     dbc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc0:	b087      	sub	sp, #28
     dc2:	f7ff fe43 	bl	a4c <ocrypto_sqr256_noframe>
     dc6:	f8dd 8010 	ldr.w	r8, [sp, #16]
     dca:	f8dd 9014 	ldr.w	r9, [sp, #20]
     dce:	f8dd a018 	ldr.w	sl, [sp, #24]
     dd2:	f7ff ff6f 	bl	cb4 <mul_reduce>
     dd6:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     dda:	f7ff ff6b 	bl	cb4 <mul_reduce>
     dde:	b003      	add	sp, #12
     de0:	f85d 8b04 	ldr.w	r8, [sp], #4
     de4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000dec <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     dec:	4801      	ldr	r0, [pc, #4]	; (df4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     dee:	7800      	ldrb	r0, [r0, #0]
     df0:	4770      	bx	lr
     df2:	0000      	.short	0x0000
     df4:	20000028 	.word	0x20000028

00000df8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     df8:	b570      	push	{r4, r5, r6, lr}
     dfa:	f00c f8bb 	bl	cf74 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     dfe:	4c13      	ldr	r4, [pc, #76]	; (e4c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
     e00:	f06f 0527 	mvn.w	r5, #39	; 0x27
     e04:	b928      	cbnz	r0, e12 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     e06:	f00c f8eb 	bl	cfe0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     e0a:	b910      	cbnz	r0, e12 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     e0c:	f00c f8f2 	bl	cff4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     e10:	b120      	cbz	r0, e1c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     e12:	480f      	ldr	r0, [pc, #60]	; (e50 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     e14:	6060      	str	r0, [r4, #4]
     e16:	7065      	strb	r5, [r4, #1]
     e18:	2008      	movs	r0, #8
     e1a:	e010      	b.n	e3e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     e1c:	f00c f87f 	bl	cf1e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     e20:	b940      	cbnz	r0, e34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     e22:	f00c f886 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     e26:	b928      	cbnz	r0, e34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     e28:	f00c f89a 	bl	cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     e2c:	b910      	cbnz	r0, e34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     e2e:	f00c f8ab 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     e32:	b130      	cbz	r0, e42 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
     e34:	4806      	ldr	r0, [pc, #24]	; (e50 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     e36:	3031      	adds	r0, #49	; 0x31
     e38:	6060      	str	r0, [r4, #4]
     e3a:	7065      	strb	r5, [r4, #1]
     e3c:	2004      	movs	r0, #4
     e3e:	70a0      	strb	r0, [r4, #2]
     e40:	bd70      	pop	{r4, r5, r6, pc}
     e42:	21e8      	movs	r1, #232	; 0xe8
     e44:	2074      	movs	r0, #116	; 0x74
     e46:	f003 fbbf 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e4a:	0000      	.short	0x0000
     e4c:	20000028 	.word	0x20000028
     e50:	00010f48 	.word	0x00010f48

00000e54 <mpsl_tx_power_radio_supported_power_adjust>:
     e54:	4907      	ldr	r1, [pc, #28]	; (e74 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     e56:	f991 2002 	ldrsb.w	r2, [r1, #2]
     e5a:	4290      	cmp	r0, r2
     e5c:	da03      	bge.n	e66 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     e5e:	f991 2001 	ldrsb.w	r2, [r1, #1]
     e62:	4290      	cmp	r0, r2
     e64:	dc01      	bgt.n	e6a <mpsl_tx_power_radio_supported_power_adjust+0x16>
     e66:	4610      	mov	r0, r2
     e68:	4770      	bx	lr
     e6a:	6849      	ldr	r1, [r1, #4]
     e6c:	1a80      	subs	r0, r0, r2
     e6e:	5608      	ldrsb	r0, [r1, r0]
     e70:	4770      	bx	lr
     e72:	0000      	.short	0x0000
     e74:	20000028 	.word	0x20000028

00000e78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e7c:	461c      	mov	r4, r3
     e7e:	4690      	mov	r8, r2
     e80:	460d      	mov	r5, r1
     e82:	4606      	mov	r6, r0
     e84:	f06f 0715 	mvn.w	r7, #21
     e88:	2804      	cmp	r0, #4
     e8a:	d804      	bhi.n	e96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     e8c:	b11c      	cbz	r4, e96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     e8e:	f00b fce8 	bl	c862 <__udivmoddi4+0x2a6>
     e92:	42a8      	cmp	r0, r5
     e94:	d802      	bhi.n	e9c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     e96:	4638      	mov	r0, r7
     e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e9c:	4805      	ldr	r0, [pc, #20]	; (eb4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     e9e:	4642      	mov	r2, r8
     ea0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     ea4:	b118      	cbz	r0, eae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     ea6:	5740      	ldrsb	r0, [r0, r5]
     ea8:	4282      	cmp	r2, r0
     eaa:	dd00      	ble.n	eae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     eac:	4602      	mov	r2, r0
     eae:	7022      	strb	r2, [r4, #0]
     eb0:	2000      	movs	r0, #0
     eb2:	e7f1      	b.n	e98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     eb4:	20000da8 	.word	0x20000da8
     eb8:	2800      	cmp	r0, #0
     eba:	d019      	beq.n	ef0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
     ebc:	7803      	ldrb	r3, [r0, #0]
     ebe:	4913      	ldr	r1, [pc, #76]	; (f0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
     ec0:	4a13      	ldr	r2, [pc, #76]	; (f10 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
     ec2:	b113      	cbz	r3, eca <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
     ec4:	2b01      	cmp	r3, #1
     ec6:	d00e      	beq.n	ee6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
     ec8:	e011      	b.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     eca:	7903      	ldrb	r3, [r0, #4]
     ecc:	2b01      	cmp	r3, #1
     ece:	d000      	beq.n	ed2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
     ed0:	b96b      	cbnz	r3, eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     ed2:	7943      	ldrb	r3, [r0, #5]
     ed4:	b10b      	cbz	r3, eda <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
     ed6:	2b01      	cmp	r3, #1
     ed8:	d109      	bne.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     eda:	6883      	ldr	r3, [r0, #8]
     edc:	3b64      	subs	r3, #100	; 0x64
     ede:	428b      	cmp	r3, r1
     ee0:	d205      	bcs.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     ee2:	68c0      	ldr	r0, [r0, #12]
     ee4:	e00e      	b.n	f04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
     ee6:	7903      	ldrb	r3, [r0, #4]
     ee8:	2b01      	cmp	r3, #1
     eea:	d002      	beq.n	ef2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     eec:	b10b      	cbz	r3, ef2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     eee:	2000      	movs	r0, #0
     ef0:	4770      	bx	lr
     ef2:	7943      	ldrb	r3, [r0, #5]
     ef4:	b10b      	cbz	r3, efa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
     ef6:	2b01      	cmp	r3, #1
     ef8:	d1f9      	bne.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     efa:	68c3      	ldr	r3, [r0, #12]
     efc:	3b64      	subs	r3, #100	; 0x64
     efe:	428b      	cmp	r3, r1
     f00:	d2f5      	bcs.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f02:	6880      	ldr	r0, [r0, #8]
     f04:	4290      	cmp	r0, r2
     f06:	d8f2      	bhi.n	eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f08:	2001      	movs	r0, #1
     f0a:	4770      	bx	lr
     f0c:	0001863d 	.word	0x0001863d
     f10:	0f423fff 	.word	0x0f423fff
     f14:	b510      	push	{r4, lr}
     f16:	4c05      	ldr	r4, [pc, #20]	; (f2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
     f18:	6820      	ldr	r0, [r4, #0]
     f1a:	b110      	cbz	r0, f22 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
     f1c:	4780      	blx	r0
     f1e:	2000      	movs	r0, #0
     f20:	6020      	str	r0, [r4, #0]
     f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f26:	f002 b8bd 	b.w	30a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     f2a:	0000      	.short	0x0000
     f2c:	20000030 	.word	0x20000030

00000f30 <mpsl_timeslot_session_open>:
     f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f34:	460e      	mov	r6, r1
     f36:	0005      	movs	r5, r0
     f38:	d004      	beq.n	f44 <mpsl_timeslot_session_open+0x14>
     f3a:	f000 f847 	bl	fcc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     f3e:	4607      	mov	r7, r0
     f40:	2400      	movs	r4, #0
     f42:	e00b      	b.n	f5c <mpsl_timeslot_session_open+0x2c>
     f44:	f06f 0015 	mvn.w	r0, #21
     f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f4c:	4620      	mov	r0, r4
     f4e:	f000 f843 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     f52:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     f56:	b130      	cbz	r0, f66 <mpsl_timeslot_session_open+0x36>
     f58:	1c64      	adds	r4, r4, #1
     f5a:	b2e4      	uxtb	r4, r4
     f5c:	42bc      	cmp	r4, r7
     f5e:	d3f5      	bcc.n	f4c <mpsl_timeslot_session_open+0x1c>
     f60:	f06f 000b 	mvn.w	r0, #11
     f64:	e7f0      	b.n	f48 <mpsl_timeslot_session_open+0x18>
     f66:	4627      	mov	r7, r4
     f68:	2cff      	cmp	r4, #255	; 0xff
     f6a:	d0f9      	beq.n	f60 <mpsl_timeslot_session_open+0x30>
     f6c:	4620      	mov	r0, r4
     f6e:	f000 f833 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     f72:	4604      	mov	r4, r0
     f74:	f00b fe41 	bl	cbfa <__udivmoddi4+0x63e>
     f78:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     f7c:	4621      	mov	r1, r4
     f7e:	4808      	ldr	r0, [pc, #32]	; (fa0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD>)
     f80:	f002 f868 	bl	3054 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     f84:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     f88:	2820      	cmp	r0, #32
     f8a:	d006      	beq.n	f9a <mpsl_timeslot_session_open+0x6a>
     f8c:	2001      	movs	r0, #1
     f8e:	6225      	str	r5, [r4, #32]
     f90:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     f94:	7037      	strb	r7, [r6, #0]
     f96:	2000      	movs	r0, #0
     f98:	e7d6      	b.n	f48 <mpsl_timeslot_session_open+0x18>
     f9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
     f9e:	e7d3      	b.n	f48 <mpsl_timeslot_session_open+0x18>
     fa0:	0000c925 	.word	0x0000c925

00000fa4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     fa4:	b510      	push	{r4, lr}
     fa6:	0782      	lsls	r2, r0, #30
     fa8:	d002      	beq.n	fb0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     faa:	f06f 000d 	mvn.w	r0, #13
     fae:	bd10      	pop	{r4, pc}
     fb0:	4a05      	ldr	r2, [pc, #20]	; (fc8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     fb2:	7011      	strb	r1, [r2, #0]
     fb4:	6050      	str	r0, [r2, #4]
     fb6:	b128      	cbz	r0, fc4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     fb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     fbc:	010a      	lsls	r2, r1, #4
     fbe:	2100      	movs	r1, #0
     fc0:	f00c f89c 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     fc4:	2000      	movs	r0, #0
     fc6:	bd10      	pop	{r4, pc}
     fc8:	20000034 	.word	0x20000034

00000fcc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     fcc:	4801      	ldr	r0, [pc, #4]	; (fd4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     fce:	7800      	ldrb	r0, [r0, #0]
     fd0:	4770      	bx	lr
     fd2:	0000      	.short	0x0000
     fd4:	20000034 	.word	0x20000034

00000fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     fd8:	4905      	ldr	r1, [pc, #20]	; (ff0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     fda:	780a      	ldrb	r2, [r1, #0]
     fdc:	4290      	cmp	r0, r2
     fde:	d301      	bcc.n	fe4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     fe0:	2000      	movs	r0, #0
     fe2:	4770      	bx	lr
     fe4:	6849      	ldr	r1, [r1, #4]
     fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     fea:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     fee:	4770      	bx	lr
     ff0:	20000034 	.word	0x20000034

00000ff4 <MPSL_IRQ_RADIO_Handler>:
     ff4:	490e      	ldr	r1, [pc, #56]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     ff6:	b510      	push	{r4, lr}
     ff8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     ffc:	2820      	cmp	r0, #32
     ffe:	d012      	beq.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    1000:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    1004:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    1008:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    100c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1010:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    1014:	6840      	ldr	r0, [r0, #4]
    1016:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    101a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    101e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1022:	2104      	movs	r1, #4
    1024:	4710      	bx	r2
    1026:	f640 0187 	movw	r1, #2183	; 0x887
    102a:	2070      	movs	r0, #112	; 0x70
    102c:	f003 facc 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1030:	200011bc 	.word	0x200011bc
    1034:	b570      	push	{r4, r5, r6, lr}
    1036:	4605      	mov	r5, r0
    1038:	2a20      	cmp	r2, #32
    103a:	d028      	beq.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    103c:	4819      	ldr	r0, [pc, #100]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
    103e:	4c1a      	ldr	r4, [pc, #104]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1040:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1044:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1048:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    104c:	4423      	add	r3, r4
    104e:	2920      	cmp	r1, #32
    1050:	d022      	beq.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1052:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1056:	7840      	ldrb	r0, [r0, #1]
    1058:	784c      	ldrb	r4, [r1, #1]
    105a:	7048      	strb	r0, [r1, #1]
    105c:	4620      	mov	r0, r4
    105e:	4601      	mov	r1, r0
    1060:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1064:	4291      	cmp	r1, r2
    1066:	7005      	strb	r5, [r0, #0]
    1068:	7840      	ldrb	r0, [r0, #1]
    106a:	d1f8      	bne.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    106c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1070:	2a20      	cmp	r2, #32
    1072:	bf1a      	itte	ne
    1074:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1078:	7054      	strbne	r4, [r2, #1]
    107a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    107e:	2220      	movs	r2, #32
    1080:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1084:	f88c 2001 	strb.w	r2, [ip, #1]
    1088:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    108c:	bd70      	pop	{r4, r5, r6, pc}
    108e:	f240 2192 	movw	r1, #658	; 0x292
    1092:	2070      	movs	r0, #112	; 0x70
    1094:	f003 fa98 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1098:	f893 4020 	ldrb.w	r4, [r3, #32]
    109c:	7840      	ldrb	r0, [r0, #1]
    109e:	f883 0020 	strb.w	r0, [r3, #32]
    10a2:	e7db      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    10a4:	2000113c 	.word	0x2000113c
    10a8:	200011bc 	.word	0x200011bc
    10ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	b085      	sub	sp, #20
    10b2:	4615      	mov	r5, r2
    10b4:	460c      	mov	r4, r1
    10b6:	f002 f9e3 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    10ba:	4428      	add	r0, r5
    10bc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    10c0:	9102      	str	r1, [sp, #8]
    10c2:	6820      	ldr	r0, [r4, #0]
    10c4:	1a40      	subs	r0, r0, r1
    10c6:	0200      	lsls	r0, r0, #8
    10c8:	17c1      	asrs	r1, r0, #31
    10ca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10ce:	1200      	asrs	r0, r0, #8
    10d0:	2800      	cmp	r0, #0
    10d2:	f300 80f0 	bgt.w	12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
    10d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
    10da:	48ca      	ldr	r0, [pc, #808]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    10dc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    10e0:	4408      	add	r0, r1
    10e2:	9003      	str	r0, [sp, #12]
    10e4:	f890 5020 	ldrb.w	r5, [r0, #32]
    10e8:	2020      	movs	r0, #32
    10ea:	4ec7      	ldr	r6, [pc, #796]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    10ec:	46ea      	mov	sl, sp
    10ee:	f10d 0904 	add.w	r9, sp, #4
    10f2:	f88d 0000 	strb.w	r0, [sp]
    10f6:	2d20      	cmp	r5, #32
    10f8:	bf1c      	itt	ne
    10fa:	48c4      	ldrne	r0, [pc, #784]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    10fc:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1100:	d039      	beq.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
    1102:	bf00      	nop
    1104:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1108:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    110c:	f100 0108 	add.w	r1, r0, #8
    1110:	68c0      	ldr	r0, [r0, #12]
    1112:	6827      	ldr	r7, [r4, #0]
    1114:	1a38      	subs	r0, r7, r0
    1116:	0200      	lsls	r0, r0, #8
    1118:	17c2      	asrs	r2, r0, #31
    111a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    111e:	1200      	asrs	r0, r0, #8
    1120:	d429      	bmi.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
    1122:	89e0      	ldrh	r0, [r4, #14]
    1124:	b300      	cbz	r0, 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    1126:	89c8      	ldrh	r0, [r1, #14]
    1128:	b9f0      	cbnz	r0, 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    112a:	6808      	ldr	r0, [r1, #0]
    112c:	9004      	str	r0, [sp, #16]
    112e:	f003 f8a1 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1132:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1136:	bf08      	it	eq
    1138:	200d      	moveq	r0, #13
    113a:	d00b      	beq.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    113c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1140:	3856      	subs	r0, #86	; 0x56
    1142:	bf08      	it	eq
    1144:	201c      	moveq	r0, #28
    1146:	d005      	beq.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1148:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    114c:	389f      	subs	r0, #159	; 0x9f
    114e:	bf14      	ite	ne
    1150:	2000      	movne	r0, #0
    1152:	2032      	moveq	r0, #50	; 0x32
    1154:	1c41      	adds	r1, r0, #1
    1156:	9804      	ldr	r0, [sp, #16]
    1158:	1a38      	subs	r0, r7, r0
    115a:	0200      	lsls	r0, r0, #8
    115c:	17c2      	asrs	r2, r0, #31
    115e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1162:	1200      	asrs	r0, r0, #8
    1164:	4288      	cmp	r0, r1
    1166:	db06      	blt.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
    1168:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    116c:	f88a 5000 	strb.w	r5, [sl]
    1170:	7845      	ldrb	r5, [r0, #1]
    1172:	2d20      	cmp	r5, #32
    1174:	d1c6      	bne.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    1176:	f89a 0000 	ldrb.w	r0, [sl]
    117a:	f889 0000 	strb.w	r0, [r9]
    117e:	2d20      	cmp	r5, #32
    1180:	bf1c      	itt	ne
    1182:	48a2      	ldrne	r0, [pc, #648]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    1184:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1188:	f000 8138 	beq.w	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    118c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1190:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1194:	6860      	ldr	r0, [r4, #4]
    1196:	f8d7 8008 	ldr.w	r8, [r7, #8]
    119a:	f107 0108 	add.w	r1, r7, #8
    119e:	eba8 0000 	sub.w	r0, r8, r0
    11a2:	0200      	lsls	r0, r0, #8
    11a4:	17c2      	asrs	r2, r0, #31
    11a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11aa:	1200      	asrs	r0, r0, #8
    11ac:	d427      	bmi.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    11ae:	89c8      	ldrh	r0, [r1, #14]
    11b0:	2800      	cmp	r0, #0
    11b2:	f000 8123 	beq.w	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    11b6:	89e0      	ldrh	r0, [r4, #14]
    11b8:	2800      	cmp	r0, #0
    11ba:	f040 811f 	bne.w	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    11be:	f8d4 a000 	ldr.w	sl, [r4]
    11c2:	f003 f857 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11ca:	bf08      	it	eq
    11cc:	200d      	moveq	r0, #13
    11ce:	d00b      	beq.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11d4:	3856      	subs	r0, #86	; 0x56
    11d6:	bf08      	it	eq
    11d8:	201c      	moveq	r0, #28
    11da:	d005      	beq.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11e0:	389f      	subs	r0, #159	; 0x9f
    11e2:	bf14      	ite	ne
    11e4:	2000      	movne	r0, #0
    11e6:	2032      	moveq	r0, #50	; 0x32
    11e8:	1c41      	adds	r1, r0, #1
    11ea:	eba8 000a 	sub.w	r0, r8, sl
    11ee:	0200      	lsls	r0, r0, #8
    11f0:	17c2      	asrs	r2, r0, #31
    11f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11f6:	1200      	asrs	r0, r0, #8
    11f8:	4288      	cmp	r0, r1
    11fa:	f280 80ff 	bge.w	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    11fe:	f889 5000 	strb.w	r5, [r9]
    1202:	7e39      	ldrb	r1, [r7, #24]
    1204:	7c20      	ldrb	r0, [r4, #16]
    1206:	4281      	cmp	r1, r0
    1208:	d906      	bls.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    120a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    120e:	7845      	ldrb	r5, [r0, #1]
    1210:	2d20      	cmp	r5, #32
    1212:	d1bb      	bne.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1214:	f000 b8f2 	b.w	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    1218:	f89d 0004 	ldrb.w	r0, [sp, #4]
    121c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1220:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1224:	8ac1      	ldrh	r1, [r0, #22]
    1226:	68c5      	ldr	r5, [r0, #12]
    1228:	bbe1      	cbnz	r1, 12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    122a:	89e1      	ldrh	r1, [r4, #14]
    122c:	b3d1      	cbz	r1, 12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    122e:	6887      	ldr	r7, [r0, #8]
    1230:	f003 f820 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1234:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1238:	bf08      	it	eq
    123a:	200d      	moveq	r0, #13
    123c:	d00b      	beq.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    123e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1242:	3856      	subs	r0, #86	; 0x56
    1244:	bf08      	it	eq
    1246:	201c      	moveq	r0, #28
    1248:	d005      	beq.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    124a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    124e:	389f      	subs	r0, #159	; 0x9f
    1250:	bf14      	ite	ne
    1252:	2000      	movne	r0, #0
    1254:	2032      	moveq	r0, #50	; 0x32
    1256:	1c41      	adds	r1, r0, #1
    1258:	1be8      	subs	r0, r5, r7
    125a:	0200      	lsls	r0, r0, #8
    125c:	17c2      	asrs	r2, r0, #31
    125e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1262:	1200      	asrs	r0, r0, #8
    1264:	4288      	cmp	r0, r1
    1266:	da1d      	bge.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1268:	f003 f804 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    126c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1270:	bf08      	it	eq
    1272:	200d      	moveq	r0, #13
    1274:	d00b      	beq.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
    1276:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    127a:	3856      	subs	r0, #86	; 0x56
    127c:	bf08      	it	eq
    127e:	201c      	moveq	r0, #28
    1280:	d005      	beq.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
    1282:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1286:	389f      	subs	r0, #159	; 0x9f
    1288:	bf14      	ite	ne
    128a:	2000      	movne	r0, #0
    128c:	2032      	moveq	r0, #50	; 0x32
    128e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1292:	1c40      	adds	r0, r0, #1
    1294:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1298:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    129c:	6889      	ldr	r1, [r1, #8]
    129e:	4408      	add	r0, r1
    12a0:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    12a4:	9802      	ldr	r0, [sp, #8]
    12a6:	1a28      	subs	r0, r5, r0
    12a8:	0200      	lsls	r0, r0, #8
    12aa:	17c1      	asrs	r1, r0, #31
    12ac:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    12b0:	1200      	asrs	r0, r0, #8
    12b2:	2800      	cmp	r0, #0
    12b4:	dd03      	ble.n	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    12b6:	b009      	add	sp, #36	; 0x24
    12b8:	2000      	movs	r0, #0
    12ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12be:	e9d4 1000 	ldrd	r1, r0, [r4]
    12c2:	1a40      	subs	r0, r0, r1
    12c4:	4428      	add	r0, r5
    12c6:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    12ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12ce:	e9c4 1000 	strd	r1, r0, [r4]
    12d2:	9808      	ldr	r0, [sp, #32]
    12d4:	9004      	str	r0, [sp, #16]
    12d6:	9803      	ldr	r0, [sp, #12]
    12d8:	46ea      	mov	sl, sp
    12da:	f10d 0804 	add.w	r8, sp, #4
    12de:	f890 5020 	ldrb.w	r5, [r0, #32]
    12e2:	2020      	movs	r0, #32
    12e4:	f88d 0000 	strb.w	r0, [sp]
    12e8:	2d20      	cmp	r5, #32
    12ea:	d03c      	beq.n	1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    12ec:	4847      	ldr	r0, [pc, #284]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    12ee:	9904      	ldr	r1, [sp, #16]
    12f0:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    12f4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    12f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    12fc:	f100 0108 	add.w	r1, r0, #8
    1300:	68c0      	ldr	r0, [r0, #12]
    1302:	6827      	ldr	r7, [r4, #0]
    1304:	1a38      	subs	r0, r7, r0
    1306:	0200      	lsls	r0, r0, #8
    1308:	17c2      	asrs	r2, r0, #31
    130a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    130e:	1200      	asrs	r0, r0, #8
    1310:	d429      	bmi.n	1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    1312:	89e0      	ldrh	r0, [r4, #14]
    1314:	b300      	cbz	r0, 1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    1316:	89c8      	ldrh	r0, [r1, #14]
    1318:	b9f0      	cbnz	r0, 1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    131a:	f8d1 9000 	ldr.w	r9, [r1]
    131e:	f002 ffa9 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1322:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1326:	bf08      	it	eq
    1328:	200d      	moveq	r0, #13
    132a:	d00b      	beq.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    132c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1330:	3856      	subs	r0, #86	; 0x56
    1332:	bf08      	it	eq
    1334:	201c      	moveq	r0, #28
    1336:	d005      	beq.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    1338:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    133c:	389f      	subs	r0, #159	; 0x9f
    133e:	bf14      	ite	ne
    1340:	2000      	movne	r0, #0
    1342:	2032      	moveq	r0, #50	; 0x32
    1344:	1c41      	adds	r1, r0, #1
    1346:	eba7 0009 	sub.w	r0, r7, r9
    134a:	0200      	lsls	r0, r0, #8
    134c:	17c2      	asrs	r2, r0, #31
    134e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1352:	1200      	asrs	r0, r0, #8
    1354:	4288      	cmp	r0, r1
    1356:	db06      	blt.n	1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    1358:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    135c:	f88a 5000 	strb.w	r5, [sl]
    1360:	7845      	ldrb	r5, [r0, #1]
    1362:	2d20      	cmp	r5, #32
    1364:	d1c6      	bne.n	12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    1366:	f89a 0000 	ldrb.w	r0, [sl]
    136a:	f888 0000 	strb.w	r0, [r8]
    136e:	9804      	ldr	r0, [sp, #16]
    1370:	2d20      	cmp	r5, #32
    1372:	bf1c      	itt	ne
    1374:	4925      	ldrne	r1, [pc, #148]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    1376:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    137a:	d03f      	beq.n	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    137c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1380:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1384:	6861      	ldr	r1, [r4, #4]
    1386:	f8d7 9008 	ldr.w	r9, [r7, #8]
    138a:	f107 0008 	add.w	r0, r7, #8
    138e:	eba9 0101 	sub.w	r1, r9, r1
    1392:	0209      	lsls	r1, r1, #8
    1394:	17ca      	asrs	r2, r1, #31
    1396:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    139a:	1209      	asrs	r1, r1, #8
    139c:	d422      	bmi.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    139e:	89c0      	ldrh	r0, [r0, #14]
    13a0:	b360      	cbz	r0, 13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13a2:	89e0      	ldrh	r0, [r4, #14]
    13a4:	bb50      	cbnz	r0, 13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13a6:	f8d4 a000 	ldr.w	sl, [r4]
    13aa:	f002 ff63 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    13ae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    13b2:	bf08      	it	eq
    13b4:	200d      	moveq	r0, #13
    13b6:	d00b      	beq.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    13b8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    13bc:	3856      	subs	r0, #86	; 0x56
    13be:	bf08      	it	eq
    13c0:	201c      	moveq	r0, #28
    13c2:	d005      	beq.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    13c4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    13c8:	389f      	subs	r0, #159	; 0x9f
    13ca:	bf14      	ite	ne
    13cc:	2000      	movne	r0, #0
    13ce:	2032      	moveq	r0, #50	; 0x32
    13d0:	1c41      	adds	r1, r0, #1
    13d2:	eba9 000a 	sub.w	r0, r9, sl
    13d6:	0200      	lsls	r0, r0, #8
    13d8:	17c2      	asrs	r2, r0, #31
    13da:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13de:	1200      	asrs	r0, r0, #8
    13e0:	4288      	cmp	r0, r1
    13e2:	da0b      	bge.n	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13e4:	f888 5000 	strb.w	r5, [r8]
    13e8:	7e38      	ldrb	r0, [r7, #24]
    13ea:	7c21      	ldrb	r1, [r4, #16]
    13ec:	4288      	cmp	r0, r1
    13ee:	f67f af13 	bls.w	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    13f2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    13f6:	7845      	ldrb	r5, [r0, #1]
    13f8:	2d20      	cmp	r5, #32
    13fa:	d1bf      	bne.n	137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>
    13fc:	b009      	add	sp, #36	; 0x24
    13fe:	2001      	movs	r0, #1
    1400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1404:	200011bc 	.word	0x200011bc
    1408:	20000dbc 	.word	0x20000dbc
    140c:	2000113c 	.word	0x2000113c
    1410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1414:	460f      	mov	r7, r1
    1416:	4606      	mov	r6, r0
    1418:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    141c:	494b      	ldr	r1, [pc, #300]	; (154c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c4>)
    141e:	4699      	mov	r9, r3
    1420:	4408      	add	r0, r1
    1422:	4692      	mov	sl, r2
    1424:	f890 4020 	ldrb.w	r4, [r0, #32]
    1428:	2020      	movs	r0, #32
    142a:	7010      	strb	r0, [r2, #0]
    142c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1430:	2c20      	cmp	r4, #32
    1432:	bf1c      	itt	ne
    1434:	4846      	ldrne	r0, [pc, #280]	; (1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>)
    1436:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    143a:	d038      	beq.n	14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    143c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1440:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1444:	f100 0108 	add.w	r1, r0, #8
    1448:	68c0      	ldr	r0, [r0, #12]
    144a:	6835      	ldr	r5, [r6, #0]
    144c:	1a28      	subs	r0, r5, r0
    144e:	0200      	lsls	r0, r0, #8
    1450:	17c2      	asrs	r2, r0, #31
    1452:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1456:	1200      	asrs	r0, r0, #8
    1458:	d429      	bmi.n	14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    145a:	89f0      	ldrh	r0, [r6, #14]
    145c:	b300      	cbz	r0, 14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    145e:	89c8      	ldrh	r0, [r1, #14]
    1460:	b9f0      	cbnz	r0, 14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    1462:	6808      	ldr	r0, [r1, #0]
    1464:	9000      	str	r0, [sp, #0]
    1466:	f002 ff05 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    146a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    146e:	bf08      	it	eq
    1470:	200d      	moveq	r0, #13
    1472:	d00b      	beq.n	148c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x104>
    1474:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1478:	3856      	subs	r0, #86	; 0x56
    147a:	bf08      	it	eq
    147c:	201c      	moveq	r0, #28
    147e:	d005      	beq.n	148c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x104>
    1480:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1484:	389f      	subs	r0, #159	; 0x9f
    1486:	bf14      	ite	ne
    1488:	2000      	movne	r0, #0
    148a:	2032      	moveq	r0, #50	; 0x32
    148c:	1c41      	adds	r1, r0, #1
    148e:	9800      	ldr	r0, [sp, #0]
    1490:	1a28      	subs	r0, r5, r0
    1492:	0200      	lsls	r0, r0, #8
    1494:	17c2      	asrs	r2, r0, #31
    1496:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    149a:	1200      	asrs	r0, r0, #8
    149c:	4288      	cmp	r0, r1
    149e:	db06      	blt.n	14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    14a0:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    14a4:	f88a 4000 	strb.w	r4, [sl]
    14a8:	7844      	ldrb	r4, [r0, #1]
    14aa:	2c20      	cmp	r4, #32
    14ac:	d1c6      	bne.n	143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    14ae:	f89a 0000 	ldrb.w	r0, [sl]
    14b2:	f889 0000 	strb.w	r0, [r9]
    14b6:	2c20      	cmp	r4, #32
    14b8:	bf1c      	itt	ne
    14ba:	4825      	ldrne	r0, [pc, #148]	; (1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>)
    14bc:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    14c0:	d040      	beq.n	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    14c2:	bf00      	nop
    14c4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    14c8:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    14cc:	6870      	ldr	r0, [r6, #4]
    14ce:	68bd      	ldr	r5, [r7, #8]
    14d0:	f107 0108 	add.w	r1, r7, #8
    14d4:	1a28      	subs	r0, r5, r0
    14d6:	0200      	lsls	r0, r0, #8
    14d8:	17c2      	asrs	r2, r0, #31
    14da:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14de:	1200      	asrs	r0, r0, #8
    14e0:	d422      	bmi.n	1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
    14e2:	89c8      	ldrh	r0, [r1, #14]
    14e4:	b370      	cbz	r0, 1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    14e6:	89f0      	ldrh	r0, [r6, #14]
    14e8:	bb60      	cbnz	r0, 1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    14ea:	f8d6 b000 	ldr.w	fp, [r6]
    14ee:	f002 fec1 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    14f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    14f6:	bf08      	it	eq
    14f8:	200d      	moveq	r0, #13
    14fa:	d00b      	beq.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    14fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1500:	3856      	subs	r0, #86	; 0x56
    1502:	bf08      	it	eq
    1504:	201c      	moveq	r0, #28
    1506:	d005      	beq.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    1508:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    150c:	389f      	subs	r0, #159	; 0x9f
    150e:	bf14      	ite	ne
    1510:	2000      	movne	r0, #0
    1512:	2032      	moveq	r0, #50	; 0x32
    1514:	1c41      	adds	r1, r0, #1
    1516:	eba5 000b 	sub.w	r0, r5, fp
    151a:	0200      	lsls	r0, r0, #8
    151c:	17c2      	asrs	r2, r0, #31
    151e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1522:	1200      	asrs	r0, r0, #8
    1524:	4288      	cmp	r0, r1
    1526:	da0d      	bge.n	1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>
    1528:	f889 4000 	strb.w	r4, [r9]
    152c:	7e38      	ldrb	r0, [r7, #24]
    152e:	7c31      	ldrb	r1, [r6, #16]
    1530:	4288      	cmp	r0, r1
    1532:	d802      	bhi.n	153a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b2>
    1534:	2000      	movs	r0, #0
    1536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    153a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    153e:	7844      	ldrb	r4, [r0, #1]
    1540:	2c20      	cmp	r4, #32
    1542:	d1bf      	bne.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1544:	2001      	movs	r0, #1
    1546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    154a:	0000      	.short	0x0000
    154c:	200011bc 	.word	0x200011bc
    1550:	2000113c 	.word	0x2000113c
    1554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1558:	b082      	sub	sp, #8
    155a:	4605      	mov	r5, r0
    155c:	4614      	mov	r4, r2
    155e:	4688      	mov	r8, r1
    1560:	89d0      	ldrh	r0, [r2, #14]
    1562:	aa01      	add	r2, sp, #4
    1564:	4669      	mov	r1, sp
    1566:	f001 ffa7 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    156a:	f002 fcb5 	bl	3ed8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    156e:	f001 ff87 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1572:	4607      	mov	r7, r0
    1574:	4820      	ldr	r0, [pc, #128]	; (15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>)
    1576:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    157a:	2920      	cmp	r1, #32
    157c:	d004      	beq.n	1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
    157e:	68c0      	ldr	r0, [r0, #12]
    1580:	1d40      	adds	r0, r0, #5
    1582:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1586:	e024      	b.n	15d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24a>
    1588:	89e0      	ldrh	r0, [r4, #14]
    158a:	f105 0609 	add.w	r6, r5, #9
    158e:	b1b0      	cbz	r0, 15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    1590:	f002 ffa2 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1594:	b998      	cbnz	r0, 15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    1596:	f002 fe6d 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    159a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    159e:	bf08      	it	eq
    15a0:	200d      	moveq	r0, #13
    15a2:	d00b      	beq.n	15bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x234>
    15a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    15a8:	3856      	subs	r0, #86	; 0x56
    15aa:	bf08      	it	eq
    15ac:	201c      	moveq	r0, #28
    15ae:	d005      	beq.n	15bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x234>
    15b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    15b4:	389f      	subs	r0, #159	; 0x9f
    15b6:	bf14      	ite	ne
    15b8:	2000      	movne	r0, #0
    15ba:	2032      	moveq	r0, #50	; 0x32
    15bc:	4406      	add	r6, r0
    15be:	f1b8 0f00 	cmp.w	r8, #0
    15c2:	d104      	bne.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    15c4:	9800      	ldr	r0, [sp, #0]
    15c6:	4287      	cmp	r7, r0
    15c8:	bf84      	itt	hi
    15ca:	1a38      	subhi	r0, r7, r0
    15cc:	4406      	addhi	r6, r0
    15ce:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    15d2:	e9d4 2000 	ldrd	r2, r0, [r4]
    15d6:	1a80      	subs	r0, r0, r2
    15d8:	4408      	add	r0, r1
    15da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15de:	e9c4 1000 	strd	r1, r0, [r4]
    15e2:	42a9      	cmp	r1, r5
    15e4:	bf24      	itt	cs
    15e6:	b002      	addcs	sp, #8
    15e8:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    15ec:	68a0      	ldr	r0, [r4, #8]
    15ee:	1c40      	adds	r0, r0, #1
    15f0:	60a0      	str	r0, [r4, #8]
    15f2:	b002      	add	sp, #8
    15f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f8:	200011bc 	.word	0x200011bc
    15fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1600:	b097      	sub	sp, #92	; 0x5c
    1602:	4617      	mov	r7, r2
    1604:	468b      	mov	fp, r1
    1606:	4605      	mov	r5, r0
    1608:	f002 f9e8 	bl	39dc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    160c:	4604      	mov	r4, r0
    160e:	f002 fc63 	bl	3ed8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1612:	4606      	mov	r6, r0
    1614:	f1bb 0f01 	cmp.w	fp, #1
    1618:	bf18      	it	ne
    161a:	f1bb 0f02 	cmpne.w	fp, #2
    161e:	d005      	beq.n	162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
    1620:	f640 115d 	movw	r1, #2397	; 0x95d
    1624:	f04f 0070 	mov.w	r0, #112	; 0x70
    1628:	f002 ffce 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    162c:	49f8      	ldr	r1, [pc, #992]	; (1a10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x688>)
    162e:	2001      	movs	r0, #1
    1630:	6008      	str	r0, [r1, #0]
    1632:	49f8      	ldr	r1, [pc, #992]	; (1a14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68c>)
    1634:	6889      	ldr	r1, [r1, #8]
    1636:	6008      	str	r0, [r1, #0]
    1638:	2000      	movs	r0, #0
    163a:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    163e:	900c      	str	r0, [sp, #48]	; 0x30
    1640:	1e40      	subs	r0, r0, #1
    1642:	900d      	str	r0, [sp, #52]	; 0x34
    1644:	49f4      	ldr	r1, [pc, #976]	; (1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>)
    1646:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    164a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    164e:	f100 0108 	add.w	r1, r0, #8
    1652:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    1656:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    165a:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    165e:	6980      	ldr	r0, [r0, #24]
    1660:	9012      	str	r0, [sp, #72]	; 0x48
    1662:	a80e      	add	r0, sp, #56	; 0x38
    1664:	f000 fbc4 	bl	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1668:	9007      	str	r0, [sp, #28]
    166a:	48ec      	ldr	r0, [pc, #944]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    166c:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    1670:	8b80      	ldrh	r0, [r0, #28]
    1672:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1676:	f1b8 0f00 	cmp.w	r8, #0
    167a:	bf04      	itt	eq
    167c:	2000      	moveq	r0, #0
    167e:	9006      	streq	r0, [sp, #24]
    1680:	d00b      	beq.n	169a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x312>
    1682:	2001      	movs	r0, #1
    1684:	9006      	str	r0, [sp, #24]
    1686:	48e5      	ldr	r0, [pc, #916]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    1688:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    168c:	b928      	cbnz	r0, 169a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x312>
    168e:	f002 ff23 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1692:	2800      	cmp	r0, #0
    1694:	bf08      	it	eq
    1696:	2701      	moveq	r7, #1
    1698:	d000      	beq.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    169a:	2700      	movs	r7, #0
    169c:	f002 fdea 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    16a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    16a4:	bf08      	it	eq
    16a6:	200d      	moveq	r0, #13
    16a8:	d00b      	beq.n	16c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33a>
    16aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    16ae:	3856      	subs	r0, #86	; 0x56
    16b0:	bf08      	it	eq
    16b2:	201c      	moveq	r0, #28
    16b4:	d005      	beq.n	16c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33a>
    16b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    16ba:	389f      	subs	r0, #159	; 0x9f
    16bc:	bf14      	ite	ne
    16be:	2000      	movne	r0, #0
    16c0:	2032      	moveq	r0, #50	; 0x32
    16c2:	f04f 0900 	mov.w	r9, #0
    16c6:	46ca      	mov	sl, r9
    16c8:	900b      	str	r0, [sp, #44]	; 0x2c
    16ca:	4546      	cmp	r6, r8
    16cc:	d938      	bls.n	1740 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b8>
    16ce:	9907      	ldr	r1, [sp, #28]
    16d0:	f8df 934c 	ldr.w	r9, [pc, #844]	; 1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>
    16d4:	ea6f 0c06 	mvn.w	ip, r6
    16d8:	466b      	mov	r3, sp
    16da:	aa16      	add	r2, sp, #88	; 0x58
    16dc:	eb01 000c 	add.w	r0, r1, ip
    16e0:	4549      	cmp	r1, r9
    16e2:	d904      	bls.n	16ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x366>
    16e4:	f240 516f 	movw	r1, #1391	; 0x56f
    16e8:	2070      	movs	r0, #112	; 0x70
    16ea:	f002 ff6d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ee:	49cd      	ldr	r1, [pc, #820]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    16f0:	458c      	cmp	ip, r1
    16f2:	dd04      	ble.n	16fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x376>
    16f4:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    16f8:	2070      	movs	r0, #112	; 0x70
    16fa:	f002 ff65 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fe:	49ca      	ldr	r1, [pc, #808]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    1700:	458c      	cmp	ip, r1
    1702:	da04      	bge.n	170e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x386>
    1704:	f240 5171 	movw	r1, #1393	; 0x571
    1708:	2070      	movs	r0, #112	; 0x70
    170a:	f002 ff5d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170e:	49c7      	ldr	r1, [pc, #796]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    1710:	4281      	cmp	r1, r0
    1712:	bfdc      	itt	le
    1714:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1718:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    171c:	dd05      	ble.n	172a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a2>
    171e:	2800      	cmp	r0, #0
    1720:	bfbc      	itt	lt
    1722:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1726:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    172a:	4619      	mov	r1, r3
    172c:	f001 fec4 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1730:	9800      	ldr	r0, [sp, #0]
    1732:	990e      	ldr	r1, [sp, #56]	; 0x38
    1734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1738:	9000      	str	r0, [sp, #0]
    173a:	1a08      	subs	r0, r1, r0
    173c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    1740:	2f00      	cmp	r7, #0
    1742:	bf18      	it	ne
    1744:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    1748:	d105      	bne.n	1756 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ce>
    174a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    174e:	2800      	cmp	r0, #0
    1750:	bf18      	it	ne
    1752:	f04f 0a02 	movne.w	sl, #2
    1756:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    175a:	d008      	beq.n	176e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e6>
    175c:	980e      	ldr	r0, [sp, #56]	; 0x38
    175e:	1b00      	subs	r0, r0, r4
    1760:	0200      	lsls	r0, r0, #8
    1762:	17c1      	asrs	r1, r0, #31
    1764:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1768:	1200      	asrs	r0, r0, #8
    176a:	2801      	cmp	r0, #1
    176c:	da01      	bge.n	1772 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ea>
    176e:	2003      	movs	r0, #3
    1770:	e00d      	b.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
    1772:	b157      	cbz	r7, 178a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x402>
    1774:	48a9      	ldr	r0, [pc, #676]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    1776:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    177a:	b130      	cbz	r0, 178a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x402>
    177c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1780:	f110 0a00 	adds.w	sl, r0, #0
    1784:	bf18      	it	ne
    1786:	f04f 0a02 	movne.w	sl, #2
    178a:	4625      	mov	r5, r4
    178c:	2000      	movs	r0, #0
    178e:	4482      	add	sl, r0
    1790:	980e      	ldr	r0, [sp, #56]	; 0x38
    1792:	eba0 0009 	sub.w	r0, r0, r9
    1796:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    179a:	1e50      	subs	r0, r2, #1
    179c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17a0:	1b41      	subs	r1, r0, r5
    17a2:	0209      	lsls	r1, r1, #8
    17a4:	17cb      	asrs	r3, r1, #31
    17a6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    17aa:	1209      	asrs	r1, r1, #8
    17ac:	4551      	cmp	r1, sl
    17ae:	db04      	blt.n	17ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x432>
    17b0:	f1b9 0f00 	cmp.w	r9, #0
    17b4:	bf18      	it	ne
    17b6:	920e      	strne	r2, [sp, #56]	; 0x38
    17b8:	e02d      	b.n	1816 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48e>
    17ba:	f1b9 0f00 	cmp.w	r9, #0
    17be:	d005      	beq.n	17cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x444>
    17c0:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    17c4:	b920      	cbnz	r0, 17d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x448>
    17c6:	f002 fb7d 	bl	3ec4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    17ca:	b108      	cbz	r0, 17d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x448>
    17cc:	b9af      	cbnz	r7, 17fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x472>
    17ce:	e00c      	b.n	17ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x462>
    17d0:	b92f      	cbnz	r7, 17de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x456>
    17d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    17d6:	2800      	cmp	r0, #0
    17d8:	bf18      	it	ne
    17da:	f1aa 0a02 	subne.w	sl, sl, #2
    17de:	f04f 0900 	mov.w	r9, #0
    17e2:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    17e6:	464e      	mov	r6, r9
    17e8:	e007      	b.n	17fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x472>
    17ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    17ee:	b120      	cbz	r0, 17fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x472>
    17f0:	2000      	movs	r0, #0
    17f2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    17f6:	f1aa 0a02 	sub.w	sl, sl, #2
    17fa:	980e      	ldr	r0, [sp, #56]	; 0x38
    17fc:	eba0 0009 	sub.w	r0, r0, r9
    1800:	1e40      	subs	r0, r0, #1
    1802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1806:	1b41      	subs	r1, r0, r5
    1808:	0209      	lsls	r1, r1, #8
    180a:	17ca      	asrs	r2, r1, #31
    180c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1810:	1209      	asrs	r1, r1, #8
    1812:	4551      	cmp	r1, sl
    1814:	db7e      	blt.n	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
    1816:	9714      	str	r7, [sp, #80]	; 0x50
    1818:	4605      	mov	r5, r0
    181a:	f04f 0900 	mov.w	r9, #0
    181e:	9f06      	ldr	r7, [sp, #24]
    1820:	f001 ffb4 	bl	378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1824:	1a28      	subs	r0, r5, r0
    1826:	0200      	lsls	r0, r0, #8
    1828:	17c1      	asrs	r1, r0, #31
    182a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    182e:	ea4f 2a20 	mov.w	sl, r0, asr #8
    1832:	f002 fd1f 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1836:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    183a:	bf08      	it	eq
    183c:	200d      	moveq	r0, #13
    183e:	d00b      	beq.n	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    1840:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1844:	3856      	subs	r0, #86	; 0x56
    1846:	bf08      	it	eq
    1848:	201c      	moveq	r0, #28
    184a:	d005      	beq.n	1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    184c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1850:	389f      	subs	r0, #159	; 0x9f
    1852:	bf14      	ite	ne
    1854:	2000      	movne	r0, #0
    1856:	2032      	moveq	r0, #50	; 0x32
    1858:	300b      	adds	r0, #11
    185a:	4582      	cmp	sl, r0
    185c:	da20      	bge.n	18a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x518>
    185e:	f1bb 0f01 	cmp.w	fp, #1
    1862:	d002      	beq.n	186a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e2>
    1864:	9814      	ldr	r0, [sp, #80]	; 0x50
    1866:	b140      	cbz	r0, 187a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f2>
    1868:	e012      	b.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    186a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    186e:	d11c      	bne.n	18aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x522>
    1870:	f640 01de 	movw	r1, #2270	; 0x8de
    1874:	2070      	movs	r0, #112	; 0x70
    1876:	f002 fea7 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    187a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    187e:	d007      	beq.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    1880:	1b60      	subs	r0, r4, r5
    1882:	0200      	lsls	r0, r0, #8
    1884:	17c1      	asrs	r1, r0, #31
    1886:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    188a:	1200      	asrs	r0, r0, #8
    188c:	2804      	cmp	r0, #4
    188e:	dd04      	ble.n	189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    1890:	462c      	mov	r4, r5
    1892:	4620      	mov	r0, r4
    1894:	f001 ffa0 	bl	37d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1898:	e007      	b.n	18aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x522>
    189a:	2800      	cmp	r0, #0
    189c:	dc63      	bgt.n	1966 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5de>
    189e:	e004      	b.n	18aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x522>
    18a0:	462c      	mov	r4, r5
    18a2:	4620      	mov	r0, r4
    18a4:	f001 ff98 	bl	37d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    18a8:	46b9      	mov	r9, r7
    18aa:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    18ae:	d055      	beq.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    18b0:	980e      	ldr	r0, [sp, #56]	; 0x38
    18b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    18b4:	1b00      	subs	r0, r0, r4
    18b6:	1b12      	subs	r2, r2, r4
    18b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    18c0:	2801      	cmp	r0, #1
    18c2:	d350      	bcc.n	1966 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5de>
    18c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    18c8:	bf98      	it	ls
    18ca:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    18ce:	d84a      	bhi.n	1966 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5de>
    18d0:	4620      	mov	r0, r4
    18d2:	f00b fa3f 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18d6:	9907      	ldr	r1, [sp, #28]
    18d8:	4a52      	ldr	r2, [pc, #328]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    18da:	1a0d      	subs	r5, r1, r0
    18dc:	f04f 0a00 	mov.w	sl, #0
    18e0:	1aaa      	subs	r2, r5, r2
    18e2:	f17a 0200 	sbcs.w	r2, sl, #0
    18e6:	d318      	bcc.n	191a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x592>
    18e8:	4b4e      	ldr	r3, [pc, #312]	; (1a24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69c>)
    18ea:	1a42      	subs	r2, r0, r1
    18ec:	1ad3      	subs	r3, r2, r3
    18ee:	f17a 0300 	sbcs.w	r3, sl, #0
    18f2:	d312      	bcc.n	191a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x592>
    18f4:	4b4a      	ldr	r3, [pc, #296]	; (1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>)
    18f6:	42ab      	cmp	r3, r5
    18f8:	bf3e      	ittt	cc
    18fa:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    18fe:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1902:	1845      	addcc	r5, r0, r1
    1904:	d309      	bcc.n	191a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x592>
    1906:	4293      	cmp	r3, r2
    1908:	d231      	bcs.n	196e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e6>
    190a:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    190e:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1912:	e000      	b.n	1916 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58e>
    1914:	e027      	b.n	1966 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5de>
    1916:	4408      	add	r0, r1
    1918:	4245      	negs	r5, r0
    191a:	4f40      	ldr	r7, [pc, #256]	; (1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>)
    191c:	7fb8      	ldrb	r0, [r7, #30]
    191e:	b358      	cbz	r0, 1978 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5f0>
    1920:	f1bb 0f01 	cmp.w	fp, #1
    1924:	d005      	beq.n	1932 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5aa>
    1926:	2002      	movs	r0, #2
    1928:	f002 f992 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    192c:	2001      	movs	r0, #1
    192e:	f002 f98f 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1932:	45b0      	cmp	r8, r6
    1934:	d22c      	bcs.n	1990 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x608>
    1936:	eba5 0106 	sub.w	r1, r5, r6
    193a:	f04f 0002 	mov.w	r0, #2
    193e:	f002 f8d1 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1942:	b390      	cbz	r0, 19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    1944:	f1b8 0f00 	cmp.w	r8, #0
    1948:	bf1c      	itt	ne
    194a:	eba5 0108 	subne.w	r1, r5, r8
    194e:	2001      	movne	r0, #1
    1950:	d034      	beq.n	19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>
    1952:	bf00      	nop
    1954:	f002 f8c6 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1958:	b338      	cbz	r0, 19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    195a:	e02f      	b.n	19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>
    195c:	f640 11f1 	movw	r1, #2545	; 0x9f1
    1960:	2070      	movs	r0, #112	; 0x70
    1962:	f002 fe31 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1966:	b017      	add	sp, #92	; 0x5c
    1968:	2000      	movs	r0, #0
    196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    196e:	f640 21c2 	movw	r1, #2754	; 0xac2
    1972:	2070      	movs	r0, #112	; 0x70
    1974:	f002 fe28 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1978:	45b0      	cmp	r8, r6
    197a:	bf34      	ite	cc
    197c:	4630      	movcc	r0, r6
    197e:	4640      	movcs	r0, r8
    1980:	301e      	adds	r0, #30
    1982:	42a8      	cmp	r0, r5
    1984:	dbcc      	blt.n	1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>
    1986:	f640 2105 	movw	r1, #2565	; 0xa05
    198a:	2070      	movs	r0, #112	; 0x70
    198c:	f002 fe1c 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1990:	d90c      	bls.n	19ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x624>
    1992:	eba5 0108 	sub.w	r1, r5, r8
    1996:	2001      	movs	r0, #1
    1998:	f002 f8a4 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    199c:	b128      	cbz	r0, 19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    199e:	2e00      	cmp	r6, #0
    19a0:	bf1c      	itt	ne
    19a2:	1ba9      	subne	r1, r5, r6
    19a4:	2002      	movne	r0, #2
    19a6:	d009      	beq.n	19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>
    19a8:	e7d4      	b.n	1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    19aa:	e030      	b.n	1a0e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x686>
    19ac:	ea56 0008 	orrs.w	r0, r6, r8
    19b0:	d004      	beq.n	19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>
    19b2:	f640 1141 	movw	r1, #2369	; 0x941
    19b6:	2070      	movs	r0, #112	; 0x70
    19b8:	f002 fe06 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19bc:	4629      	mov	r1, r5
    19be:	2000      	movs	r0, #0
    19c0:	f002 f890 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19c4:	b318      	cbz	r0, 1a0e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x686>
    19c6:	9806      	ldr	r0, [sp, #24]
    19c8:	2601      	movs	r6, #1
    19ca:	2800      	cmp	r0, #0
    19cc:	bf04      	itt	eq
    19ce:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    19d2:	2800      	cmpeq	r0, #0
    19d4:	d002      	beq.n	19dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x654>
    19d6:	f1b9 0f00 	cmp.w	r9, #0
    19da:	d033      	beq.n	1a44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6bc>
    19dc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    19e0:	b118      	cbz	r0, 19ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x662>
    19e2:	f002 fc4d 	bl	4280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    19e6:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    19ea:	f1b9 0f00 	cmp.w	r9, #0
    19ee:	d02c      	beq.n	1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
    19f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    19f2:	1a20      	subs	r0, r4, r0
    19f4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    19f8:	2005      	movs	r0, #5
    19fa:	f002 f873 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19fe:	b3e0      	cbz	r0, 1a7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f2>
    1a00:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1a04:	2800      	cmp	r0, #0
    1a06:	bf08      	it	eq
    1a08:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    1a0c:	e025      	b.n	1a5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d2>
    1a0e:	e00f      	b.n	1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>
    1a10:	40000508 	.word	0x40000508
    1a14:	2000003c 	.word	0x2000003c
    1a18:	20000dbc 	.word	0x20000dbc
    1a1c:	200011bc 	.word	0x200011bc
    1a20:	1e847fff 	.word	0x1e847fff
    1a24:	0f424000 	.word	0x0f424000
    1a28:	f0bdc000 	.word	0xf0bdc000
    1a2c:	1e848000 	.word	0x1e848000
    1a30:	2002      	movs	r0, #2
    1a32:	f002 f90d 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a36:	2001      	movs	r0, #1
    1a38:	f002 f90a 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a3c:	b017      	add	sp, #92	; 0x5c
    1a3e:	2000      	movs	r0, #0
    1a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a44:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1a48:	b190      	cbz	r0, 1a70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e8>
    1a4a:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1a4e:	b120      	cbz	r0, 1a5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d2>
    1a50:	2005      	movs	r0, #5
    1a52:	f002 f8fd 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a56:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    1a5a:	eba5 0008 	sub.w	r0, r5, r8
    1a5e:	f1a0 0119 	sub.w	r1, r0, #25
    1a62:	2900      	cmp	r1, #0
    1a64:	dc0f      	bgt.n	1a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fe>
    1a66:	f640 212e 	movw	r1, #2606	; 0xa2e
    1a6a:	2070      	movs	r0, #112	; 0x70
    1a6c:	f002 fdac 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a70:	f002 fc22 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1a74:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    1a78:	e7b7      	b.n	19ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x662>
    1a7a:	e7ff      	b.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a7c:	f240 21f2 	movw	r1, #754	; 0x2f2
    1a80:	2070      	movs	r0, #112	; 0x70
    1a82:	f002 fda1 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a86:	2003      	movs	r0, #3
    1a88:	f002 f82c 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a8c:	b1c0      	cbz	r0, 1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>
    1a8e:	480f      	ldr	r0, [pc, #60]	; (1acc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x744>)
    1a90:	6880      	ldr	r0, [r0, #8]
    1a92:	f8c0 a000 	str.w	sl, [r0]
    1a96:	480e      	ldr	r0, [pc, #56]	; (1ad0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x748>)
    1a98:	f8c0 a000 	str.w	sl, [r0]
    1a9c:	ac0c      	add	r4, sp, #48	; 0x30
    1a9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1aa2:	6038      	str	r0, [r7, #0]
    1aa4:	6079      	str	r1, [r7, #4]
    1aa6:	60ba      	str	r2, [r7, #8]
    1aa8:	60fb      	str	r3, [r7, #12]
    1aaa:	ac10      	add	r4, sp, #64	; 0x40
    1aac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1ab0:	6138      	str	r0, [r7, #16]
    1ab2:	6179      	str	r1, [r7, #20]
    1ab4:	61ba      	str	r2, [r7, #24]
    1ab6:	61fb      	str	r3, [r7, #28]
    1ab8:	b017      	add	sp, #92	; 0x5c
    1aba:	2001      	movs	r0, #1
    1abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ac0:	f640 2136 	movw	r1, #2614	; 0xa36
    1ac4:	2070      	movs	r0, #112	; 0x70
    1ac6:	f002 fd7f 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1aca:	0000      	.short	0x0000
    1acc:	2000003c 	.word	0x2000003c
    1ad0:	40000508 	.word	0x40000508
    1ad4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1ad8:	4606      	mov	r6, r0
    1ada:	7808      	ldrb	r0, [r1, #0]
    1adc:	7490      	strb	r0, [r2, #18]
    1ade:	7ac8      	ldrb	r0, [r1, #11]
    1ae0:	7450      	strb	r0, [r2, #17]
    1ae2:	7a88      	ldrb	r0, [r1, #10]
    1ae4:	7410      	strb	r0, [r2, #16]
    1ae6:	8908      	ldrh	r0, [r1, #8]
    1ae8:	81d0      	strh	r0, [r2, #14]
    1aea:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1c84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8fc>
    1aee:	6870      	ldr	r0, [r6, #4]
    1af0:	469a      	mov	sl, r3
    1af2:	fba0 7908 	umull	r7, r9, r0, r8
    1af6:	4614      	mov	r4, r2
    1af8:	460d      	mov	r5, r1
    1afa:	6830      	ldr	r0, [r6, #0]
    1afc:	f00b f92a 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b00:	19c1      	adds	r1, r0, r7
    1b02:	7828      	ldrb	r0, [r5, #0]
    1b04:	ea4f 0c68 	mov.w	ip, r8, asr #1
    1b08:	f149 0200 	adc.w	r2, r9, #0
    1b0c:	f1a8 0e01 	sub.w	lr, r8, #1
    1b10:	f1cc 0b00 	rsb	fp, ip, #0
    1b14:	b168      	cbz	r0, 1b32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7aa>
    1b16:	89e0      	ldrh	r0, [r4, #14]
    1b18:	7c67      	ldrb	r7, [r4, #17]
    1b1a:	43c0      	mvns	r0, r0
    1b1c:	f8d5 9004 	ldr.w	r9, [r5, #4]
    1b20:	f104 020c 	add.w	r2, r4, #12
    1b24:	4560      	cmp	r0, ip
    1b26:	dd5f      	ble.n	1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>
    1b28:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1b2c:	2070      	movs	r0, #112	; 0x70
    1b2e:	f002 fd4b 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b32:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    1b36:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    1b3a:	eb11 0a09 	adds.w	sl, r1, r9
    1b3e:	f142 0900 	adc.w	r9, r2, #0
    1b42:	ebb0 0a0a 	subs.w	sl, r0, sl
    1b46:	eb73 0909 	sbcs.w	r9, r3, r9
    1b4a:	d245      	bcs.n	1bd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x850>
    1b4c:	1a41      	subs	r1, r0, r1
    1b4e:	eb73 0102 	sbcs.w	r1, r3, r2
    1b52:	d341      	bcc.n	1bd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x850>
    1b54:	1bc7      	subs	r7, r0, r7
    1b56:	6870      	ldr	r0, [r6, #4]
    1b58:	60a0      	str	r0, [r4, #8]
    1b5a:	4547      	cmp	r7, r8
    1b5c:	d305      	bcc.n	1b6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e2>
    1b5e:	1c40      	adds	r0, r0, #1
    1b60:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    1b64:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    1b68:	60a0      	str	r0, [r4, #8]
    1b6a:	89e0      	ldrh	r0, [r4, #14]
    1b6c:	686d      	ldr	r5, [r5, #4]
    1b6e:	43c1      	mvns	r1, r0
    1b70:	7c66      	ldrb	r6, [r4, #17]
    1b72:	1878      	adds	r0, r7, r1
    1b74:	f104 020c 	add.w	r2, r4, #12
    1b78:	4577      	cmp	r7, lr
    1b7a:	d904      	bls.n	1b86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7fe>
    1b7c:	f240 516f 	movw	r1, #1391	; 0x56f
    1b80:	2070      	movs	r0, #112	; 0x70
    1b82:	f002 fd21 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b86:	4561      	cmp	r1, ip
    1b88:	dcce      	bgt.n	1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>
    1b8a:	4559      	cmp	r1, fp
    1b8c:	db2f      	blt.n	1bee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x866>
    1b8e:	4580      	cmp	r8, r0
    1b90:	bfdc      	itt	le
    1b92:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1b96:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1b9a:	dd05      	ble.n	1ba8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x820>
    1b9c:	2800      	cmp	r0, #0
    1b9e:	bfbc      	itt	lt
    1ba0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1ba4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1ba8:	4621      	mov	r1, r4
    1baa:	f001 fc85 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1bae:	6820      	ldr	r0, [r4, #0]
    1bb0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1bb4:	1978      	adds	r0, r7, r5
    1bb6:	1c40      	adds	r0, r0, #1
    1bb8:	6021      	str	r1, [r4, #0]
    1bba:	2e00      	cmp	r6, #0
    1bbc:	bf08      	it	eq
    1bbe:	307a      	addeq	r0, #122	; 0x7a
    1bc0:	d003      	beq.n	1bca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x842>
    1bc2:	2e01      	cmp	r6, #1
    1bc4:	bf08      	it	eq
    1bc6:	3048      	addeq	r0, #72	; 0x48
    1bc8:	d134      	bne.n	1c34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ac>
    1bca:	f001 fc59 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bd2:	6060      	str	r0, [r4, #4]
    1bd4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1bd8:	6830      	ldr	r0, [r6, #0]
    1bda:	1e40      	subs	r0, r0, #1
    1bdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be0:	6020      	str	r0, [r4, #0]
    1be2:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1be6:	e7f4      	b.n	1bd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84a>
    1be8:	4601      	mov	r1, r0
    1bea:	4558      	cmp	r0, fp
    1bec:	da04      	bge.n	1bf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x870>
    1bee:	f240 5171 	movw	r1, #1393	; 0x571
    1bf2:	2070      	movs	r0, #112	; 0x70
    1bf4:	f002 fce8 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bf8:	4580      	cmp	r8, r0
    1bfa:	bfdc      	itt	le
    1bfc:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1c00:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1c04:	dd05      	ble.n	1c12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88a>
    1c06:	2800      	cmp	r0, #0
    1c08:	bfbc      	itt	lt
    1c0a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1c0e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1c12:	4621      	mov	r1, r4
    1c14:	f001 fc50 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c18:	6820      	ldr	r0, [r4, #0]
    1c1a:	2f00      	cmp	r7, #0
    1c1c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c20:	f109 0001 	add.w	r0, r9, #1
    1c24:	6021      	str	r1, [r4, #0]
    1c26:	bf08      	it	eq
    1c28:	307a      	addeq	r0, #122	; 0x7a
    1c2a:	d008      	beq.n	1c3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8b6>
    1c2c:	2f01      	cmp	r7, #1
    1c2e:	bf08      	it	eq
    1c30:	3048      	addeq	r0, #72	; 0x48
    1c32:	d004      	beq.n	1c3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8b6>
    1c34:	f240 6124 	movw	r1, #1572	; 0x624
    1c38:	2070      	movs	r0, #112	; 0x70
    1c3a:	f002 fcc5 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c3e:	f001 fc1f 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c42:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c46:	6061      	str	r1, [r4, #4]
    1c48:	6870      	ldr	r0, [r6, #4]
    1c4a:	60a0      	str	r0, [r4, #8]
    1c4c:	2100      	movs	r1, #0
    1c4e:	4622      	mov	r2, r4
    1c50:	6830      	ldr	r0, [r6, #0]
    1c52:	f7ff fc7f 	bl	1554 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1cc>
    1c56:	6832      	ldr	r2, [r6, #0]
    1c58:	4653      	mov	r3, sl
    1c5a:	4621      	mov	r1, r4
    1c5c:	6928      	ldr	r0, [r5, #16]
    1c5e:	f7ff fa25 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1c62:	2800      	cmp	r0, #0
    1c64:	bf18      	it	ne
    1c66:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c6a:	e9d4 2100 	ldrd	r2, r1, [r4]
    1c6e:	6830      	ldr	r0, [r6, #0]
    1c70:	1a89      	subs	r1, r1, r2
    1c72:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1c76:	4408      	add	r0, r1
    1c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7c:	e9c4 2000 	strd	r2, r0, [r4]
    1c80:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c84:	1e848000 	.word	0x1e848000
    1c88:	0f424000 	.word	0x0f424000
    1c8c:	b570      	push	{r4, r5, r6, lr}
    1c8e:	4d1e      	ldr	r5, [pc, #120]	; (1d08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x980>)
    1c90:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1c94:	2820      	cmp	r0, #32
    1c96:	bf18      	it	ne
    1c98:	bd70      	popne	{r4, r5, r6, pc}
    1c9a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1c9e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1ca2:	4428      	add	r0, r5
    1ca4:	f890 4020 	ldrb.w	r4, [r0, #32]
    1ca8:	2c20      	cmp	r4, #32
    1caa:	d027      	beq.n	1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>
    1cac:	4b17      	ldr	r3, [pc, #92]	; (1d0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x984>)
    1cae:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1cb2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1cb6:	7849      	ldrb	r1, [r1, #1]
    1cb8:	f880 1020 	strb.w	r1, [r0, #32]
    1cbc:	20ff      	movs	r0, #255	; 0xff
    1cbe:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1cc2:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1cc6:	4621      	mov	r1, r4
    1cc8:	2002      	movs	r0, #2
    1cca:	f000 f8cb 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1cce:	2000      	movs	r0, #0
    1cd0:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1cd4:	77a8      	strb	r0, [r5, #30]
    1cd6:	490e      	ldr	r1, [pc, #56]	; (1d10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x988>)
    1cd8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1cdc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1ce0:	7e00      	ldrb	r0, [r0, #24]
    1ce2:	2800      	cmp	r0, #0
    1ce4:	bf08      	it	eq
    1ce6:	f002 fdc9 	bleq	487c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1cea:	2000      	movs	r0, #0
    1cec:	4909      	ldr	r1, [pc, #36]	; (1d14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98c>)
    1cee:	6849      	ldr	r1, [r1, #4]
    1cf0:	2900      	cmp	r1, #0
    1cf2:	bf08      	it	eq
    1cf4:	bd70      	popeq	{r4, r5, r6, pc}
    1cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1cfa:	4708      	bx	r1
    1cfc:	f44f 714b 	mov.w	r1, #812	; 0x32c
    1d00:	2070      	movs	r0, #112	; 0x70
    1d02:	f002 fc61 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d06:	0000      	.short	0x0000
    1d08:	200011bc 	.word	0x200011bc
    1d0c:	2000113c 	.word	0x2000113c
    1d10:	20000dbc 	.word	0x20000dbc
    1d14:	2000003c 	.word	0x2000003c
    1d18:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1d1c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1d20:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1d24:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1d28:	4440      	add	r0, r8
    1d2a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1d2e:	2c20      	cmp	r4, #32
    1d30:	bf08      	it	eq
    1d32:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1d3a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1d3e:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    1d42:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1d46:	2607      	movs	r6, #7
    1d48:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1d4c:	2801      	cmp	r0, #1
    1d4e:	d00e      	beq.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d50:	2804      	cmp	r0, #4
    1d52:	bf08      	it	eq
    1d54:	2602      	moveq	r6, #2
    1d56:	d00a      	beq.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d58:	2805      	cmp	r0, #5
    1d5a:	bf0c      	ite	eq
    1d5c:	2603      	moveq	r6, #3
    1d5e:	2806      	cmpne	r0, #6
    1d60:	d005      	beq.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d62:	f640 01a8 	movw	r1, #2216	; 0x8a8
    1d66:	f04f 0070 	mov.w	r0, #112	; 0x70
    1d6a:	f002 fc2d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d6e:	f1bb 0f00 	cmp.w	fp, #0
    1d72:	bf18      	it	ne
    1d74:	f3af 8000 	nopne.w
    1d78:	f3ef 8010 	mrs	r0, PRIMASK
    1d7c:	b672      	cpsid	i
    1d7e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1d82:	784a      	ldrb	r2, [r1, #1]
    1d84:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1d88:	4441      	add	r1, r8
    1d8a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1d8e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1d92:	42a2      	cmp	r2, r4
    1d94:	bf04      	itt	eq
    1d96:	2220      	moveq	r2, #32
    1d98:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1d9c:	b1c0      	cbz	r0, 1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1d9e:	462a      	mov	r2, r5
    1da0:	4621      	mov	r1, r4
    1da2:	2001      	movs	r0, #1
    1da4:	f000 f85e 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1da8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1dac:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1db0:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1db4:	6840      	ldr	r0, [r0, #4]
    1db6:	4631      	mov	r1, r6
    1db8:	4790      	blx	r2
    1dba:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1dbe:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1dc2:	4440      	add	r0, r8
    1dc4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1dc8:	2c20      	cmp	r4, #32
    1dca:	d1ba      	bne.n	1d42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ba>
    1dcc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1dd0:	4806      	ldr	r0, [pc, #24]	; (1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>)
    1dd2:	2800      	cmp	r0, #0
    1dd4:	bf18      	it	ne
    1dd6:	f3af 8000 	nopne.w
    1dda:	b662      	cpsie	i
    1ddc:	e7df      	b.n	1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1dde:	0000      	.short	0x0000
    1de0:	200011bc 	.word	0x200011bc
    1de4:	00000000 	.word	0x00000000
    1de8:	2000113c 	.word	0x2000113c
    1dec:	00000000 	.word	0x00000000
    1df0:	b510      	push	{r4, lr}
    1df2:	4604      	mov	r4, r0
    1df4:	6800      	ldr	r0, [r0, #0]
    1df6:	f00a ffad 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dfa:	4602      	mov	r2, r0
    1dfc:	89e0      	ldrh	r0, [r4, #14]
    1dfe:	7b21      	ldrb	r1, [r4, #12]
    1e00:	4b14      	ldr	r3, [pc, #80]	; (1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>)
    1e02:	4408      	add	r0, r1
    1e04:	1c41      	adds	r1, r0, #1
    1e06:	1850      	adds	r0, r2, r1
    1e08:	429a      	cmp	r2, r3
    1e0a:	d904      	bls.n	1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e0c:	f240 516f 	movw	r1, #1391	; 0x56f
    1e10:	2070      	movs	r0, #112	; 0x70
    1e12:	f002 fbd9 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e16:	4a10      	ldr	r2, [pc, #64]	; (1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1e18:	4291      	cmp	r1, r2
    1e1a:	dd04      	ble.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e1c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f002 fbd1 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	4a0d      	ldr	r2, [pc, #52]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1e28:	4291      	cmp	r1, r2
    1e2a:	da04      	bge.n	1e36 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xea>
    1e2c:	f240 5171 	movw	r1, #1393	; 0x571
    1e30:	2070      	movs	r0, #112	; 0x70
    1e32:	f002 fbc9 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e36:	490a      	ldr	r1, [pc, #40]	; (1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1e38:	4281      	cmp	r1, r0
    1e3a:	bfde      	ittt	le
    1e3c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e40:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e44:	bd10      	pople	{r4, pc}
    1e46:	2800      	cmp	r0, #0
    1e48:	bfbc      	itt	lt
    1e4a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e4e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e52:	bd10      	pop	{r4, pc}
    1e54:	1e847fff 	.word	0x1e847fff
    1e58:	0f424000 	.word	0x0f424000
    1e5c:	f0bdc000 	.word	0xf0bdc000
    1e60:	1e848000 	.word	0x1e848000
    1e64:	f8df c058 	ldr.w	ip, [pc, #88]	; 1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1e68:	b510      	push	{r4, lr}
    1e6a:	2300      	movs	r3, #0
    1e6c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1e70:	2807      	cmp	r0, #7
    1e72:	d21f      	bcs.n	1eb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1e74:	e8df f000 	tbb	[pc, r0]
    1e78:	05050505 	.word	0x05050505
    1e7c:	00040404 	.word	0x00040404
    1e80:	2301      	movs	r3, #1
    1e82:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1e86:	2b00      	cmp	r3, #0
    1e88:	bf08      	it	eq
    1e8a:	bd10      	popeq	{r4, pc}
    1e8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e90:	480c      	ldr	r0, [pc, #48]	; (1ec4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>)
    1e92:	4402      	add	r2, r0
    1e94:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1e98:	2820      	cmp	r0, #32
    1e9a:	bf0e      	itee	eq
    1e9c:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1ea0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1ea4:	7041      	strbne	r1, [r0, #1]
    1ea6:	2020      	movs	r0, #32
    1ea8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1eac:	7058      	strb	r0, [r3, #1]
    1eae:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1eb2:	bd10      	pop	{r4, pc}
    1eb4:	f44f 711a 	mov.w	r1, #616	; 0x268
    1eb8:	2070      	movs	r0, #112	; 0x70
    1eba:	f002 fb85 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ebe:	0000      	.short	0x0000
    1ec0:	2000113c 	.word	0x2000113c
    1ec4:	200011bc 	.word	0x200011bc
    1ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ecc:	4617      	mov	r7, r2
    1ece:	f8df a158 	ldr.w	sl, [pc, #344]	; 2028 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28>
    1ed2:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    1ed6:	4450      	add	r0, sl
    1ed8:	4688      	mov	r8, r1
    1eda:	f890 4020 	ldrb.w	r4, [r0, #32]
    1ede:	2901      	cmp	r1, #1
    1ee0:	4625      	mov	r5, r4
    1ee2:	bf18      	it	ne
    1ee4:	f1b8 0f02 	cmpne.w	r8, #2
    1ee8:	d005      	beq.n	1ef6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1aa>
    1eea:	f640 216c 	movw	r1, #2668	; 0xa6c
    1eee:	f04f 0070 	mov.w	r0, #112	; 0x70
    1ef2:	f002 fb69 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ef6:	f04f 0b00 	mov.w	fp, #0
    1efa:	2d20      	cmp	r5, #32
    1efc:	d044      	beq.n	1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    1efe:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1f02:	2600      	movs	r6, #0
    1f04:	2800      	cmp	r0, #0
    1f06:	bf08      	it	eq
    1f08:	2602      	moveq	r6, #2
    1f0a:	f001 fc3f 	bl	378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f0e:	4b47      	ldr	r3, [pc, #284]	; (202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>)
    1f10:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1f14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f18:	688a      	ldr	r2, [r1, #8]
    1f1a:	68c9      	ldr	r1, [r1, #12]
    1f1c:	1a12      	subs	r2, r2, r0
    1f1e:	1a09      	subs	r1, r1, r0
    1f20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f28:	4296      	cmp	r6, r2
    1f2a:	bf99      	ittee	ls
    1f2c:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1f30:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1f34:	4a3e      	ldrhi	r2, [pc, #248]	; (2030 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30>)
    1f36:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1f3a:	d923      	bls.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f3c:	4622      	mov	r2, r4
    1f3e:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1f42:	784c      	ldrb	r4, [r1, #1]
    1f44:	2c20      	cmp	r4, #32
    1f46:	d015      	beq.n	1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>
    1f48:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1f4c:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1f50:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1f54:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1f58:	1a09      	subs	r1, r1, r0
    1f5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f5e:	ebac 0c00 	sub.w	ip, ip, r0
    1f62:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1f66:	428e      	cmp	r6, r1
    1f68:	bf9c      	itt	ls
    1f6a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1f6e:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    1f72:	d8e3      	bhi.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f74:	2a20      	cmp	r2, #32
    1f76:	d005      	beq.n	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	463b      	mov	r3, r7
    1f7a:	2120      	movs	r1, #32
    1f7c:	2004      	movs	r0, #4
    1f7e:	f7ff f859 	bl	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    1f82:	4604      	mov	r4, r0
    1f84:	42ac      	cmp	r4, r5
    1f86:	d10f      	bne.n	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1f88:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1f8c:	2820      	cmp	r0, #32
    1f8e:	d00f      	beq.n	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1f90:	9900      	ldr	r1, [sp, #0]
    1f92:	f8da 0008 	ldr.w	r0, [sl, #8]
    1f96:	1c89      	adds	r1, r1, #2
    1f98:	1a08      	subs	r0, r1, r0
    1f9a:	0200      	lsls	r0, r0, #8
    1f9c:	17c1      	asrs	r1, r0, #31
    1f9e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1fa2:	1200      	asrs	r0, r0, #8
    1fa4:	2800      	cmp	r0, #0
    1fa6:	dd03      	ble.n	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1fa8:	b003      	add	sp, #12
    1faa:	2000      	movs	r0, #0
    1fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fb0:	2d20      	cmp	r5, #32
    1fb2:	d016      	beq.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fb4:	462a      	mov	r2, r5
    1fb6:	4641      	mov	r1, r8
    1fb8:	9800      	ldr	r0, [sp, #0]
    1fba:	f7ff fb1f 	bl	15fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x274>
    1fbe:	2800      	cmp	r0, #0
    1fc0:	bf1f      	itttt	ne
    1fc2:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1fc6:	2002      	movne	r0, #2
    1fc8:	b003      	addne	sp, #12
    1fca:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fce:	463b      	mov	r3, r7
    1fd0:	462a      	mov	r2, r5
    1fd2:	2120      	movs	r1, #32
    1fd4:	2004      	movs	r0, #4
    1fd6:	f7ff f82d 	bl	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    1fda:	b003      	add	sp, #12
    1fdc:	2000      	movs	r0, #0
    1fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fe2:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1fe6:	b118      	cbz	r0, 1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>
    1fe8:	f002 f94a 	bl	4280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1fec:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1ff0:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1ff4:	b120      	cbz	r0, 2000 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE>
    1ff6:	2005      	movs	r0, #5
    1ff8:	f001 fe2a 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ffc:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    2000:	2004      	movs	r0, #4
    2002:	f001 fe25 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2006:	f001 fe93 	bl	3d30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    200a:	2020      	movs	r0, #32
    200c:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    2010:	4808      	ldr	r0, [pc, #32]	; (2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>)
    2012:	6880      	ldr	r0, [r0, #8]
    2014:	f8c0 b000 	str.w	fp, [r0]
    2018:	4807      	ldr	r0, [pc, #28]	; (2038 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38>)
    201a:	f8c0 b000 	str.w	fp, [r0]
    201e:	b003      	add	sp, #12
    2020:	2001      	movs	r0, #1
    2022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2026:	0000      	.short	0x0000
    2028:	200011bc 	.word	0x200011bc
    202c:	20000dbc 	.word	0x20000dbc
    2030:	2000113c 	.word	0x2000113c
    2034:	2000003c 	.word	0x2000003c
    2038:	40000508 	.word	0x40000508

0000203c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    203c:	4906      	ldr	r1, [pc, #24]	; (2058 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    203e:	b510      	push	{r4, lr}
    2040:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    2044:	2a20      	cmp	r2, #32
    2046:	bf1c      	itt	ne
    2048:	7788      	strbne	r0, [r1, #30]
    204a:	bd10      	popne	{r4, pc}
    204c:	f240 317a 	movw	r1, #890	; 0x37a
    2050:	2070      	movs	r0, #112	; 0x70
    2052:	f002 fab9 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2056:	0000      	.short	0x0000
    2058:	200011bc 	.word	0x200011bc

0000205c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2060:	4e69      	ldr	r6, [pc, #420]	; (2208 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2062:	4607      	mov	r7, r0
    2064:	b08d      	sub	sp, #52	; 0x34
    2066:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    206a:	4688      	mov	r8, r1
    206c:	2820      	cmp	r0, #32
    206e:	d055      	beq.n	211c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2070:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2074:	f106 0408 	add.w	r4, r6, #8
    2078:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    207c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2080:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2084:	2020      	movs	r0, #32
    2086:	f88d 0020 	strb.w	r0, [sp, #32]
    208a:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    208e:	aa0a      	add	r2, sp, #40	; 0x28
    2090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2094:	4430      	add	r0, r6
    2096:	a909      	add	r1, sp, #36	; 0x24
    2098:	f890 5020 	ldrb.w	r5, [r0, #32]
    209c:	68f0      	ldr	r0, [r6, #12]
    209e:	9002      	str	r0, [sp, #8]
    20a0:	6830      	ldr	r0, [r6, #0]
    20a2:	4438      	add	r0, r7
    20a4:	f001 fa08 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    20a8:	f8da 000c 	ldr.w	r0, [sl, #12]
    20ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    20ae:	2f65      	cmp	r7, #101	; 0x65
    20b0:	4408      	add	r0, r1
    20b2:	d338      	bcc.n	2126 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    20b4:	4a55      	ldr	r2, [pc, #340]	; (220c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    20b6:	2100      	movs	r1, #0
    20b8:	1bd2      	subs	r2, r2, r7
    20ba:	eb71 0201 	sbcs.w	r2, r1, r1
    20be:	d332      	bcc.n	2126 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    20c0:	6822      	ldr	r2, [r4, #0]
    20c2:	1a82      	subs	r2, r0, r2
    20c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    20c8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    20cc:	d82b      	bhi.n	2126 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    20ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20d2:	6060      	str	r0, [r4, #4]
    20d4:	4630      	mov	r0, r6
    20d6:	f884 8010 	strb.w	r8, [r4, #16]
    20da:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    20de:	f10d 0a20 	add.w	sl, sp, #32
    20e2:	2d20      	cmp	r5, #32
    20e4:	bf1c      	itt	ne
    20e6:	494a      	ldrne	r1, [pc, #296]	; (2210 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    20e8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    20ec:	d050      	beq.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    20ee:	bf00      	nop
    20f0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    20f4:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    20f8:	6861      	ldr	r1, [r4, #4]
    20fa:	f8d8 6008 	ldr.w	r6, [r8, #8]
    20fe:	f108 0008 	add.w	r0, r8, #8
    2102:	1a71      	subs	r1, r6, r1
    2104:	0209      	lsls	r1, r1, #8
    2106:	17ca      	asrs	r2, r1, #31
    2108:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    210c:	1209      	asrs	r1, r1, #8
    210e:	d42d      	bmi.n	216c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    2110:	89c0      	ldrh	r0, [r0, #14]
    2112:	2800      	cmp	r0, #0
    2114:	d03c      	beq.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2116:	89e0      	ldrh	r0, [r4, #14]
    2118:	b148      	cbz	r0, 212e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    211a:	e039      	b.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    211c:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    2120:	2070      	movs	r0, #112	; 0x70
    2122:	f002 fa51 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2126:	b00d      	add	sp, #52	; 0x34
    2128:	2001      	movs	r0, #1
    212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    212e:	6820      	ldr	r0, [r4, #0]
    2130:	900c      	str	r0, [sp, #48]	; 0x30
    2132:	f002 f89f 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2136:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    213a:	bf08      	it	eq
    213c:	200d      	moveq	r0, #13
    213e:	d00b      	beq.n	2158 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2140:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2144:	3856      	subs	r0, #86	; 0x56
    2146:	bf08      	it	eq
    2148:	201c      	moveq	r0, #28
    214a:	d005      	beq.n	2158 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    214c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2150:	389f      	subs	r0, #159	; 0x9f
    2152:	bf14      	ite	ne
    2154:	2000      	movne	r0, #0
    2156:	2032      	moveq	r0, #50	; 0x32
    2158:	1c41      	adds	r1, r0, #1
    215a:	980c      	ldr	r0, [sp, #48]	; 0x30
    215c:	1a30      	subs	r0, r6, r0
    215e:	0200      	lsls	r0, r0, #8
    2160:	17c2      	asrs	r2, r0, #31
    2162:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2166:	1200      	asrs	r0, r0, #8
    2168:	4288      	cmp	r0, r1
    216a:	da11      	bge.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    216c:	f88a 5000 	strb.w	r5, [sl]
    2170:	f898 1018 	ldrb.w	r1, [r8, #24]
    2174:	7c20      	ldrb	r0, [r4, #16]
    2176:	4281      	cmp	r1, r0
    2178:	d805      	bhi.n	2186 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    217a:	9802      	ldr	r0, [sp, #8]
    217c:	6060      	str	r0, [r4, #4]
    217e:	b00d      	add	sp, #52	; 0x34
    2180:	2002      	movs	r0, #2
    2182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2186:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    218a:	7845      	ldrb	r5, [r0, #1]
    218c:	2d20      	cmp	r5, #32
    218e:	d1af      	bne.n	20f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2190:	2005      	movs	r0, #5
    2192:	f001 fd5d 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2196:	4c1c      	ldr	r4, [pc, #112]	; (2208 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2198:	f04f 30ff 	mov.w	r0, #4294967295
    219c:	6060      	str	r0, [r4, #4]
    219e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    21a2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    21a6:	2120      	movs	r1, #32
    21a8:	2a20      	cmp	r2, #32
    21aa:	d003      	beq.n	21b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    21ac:	2005      	movs	r0, #5
    21ae:	f7fe ff41 	bl	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    21b2:	e004      	b.n	21be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    21b4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    21b8:	4420      	add	r0, r4
    21ba:	f890 0020 	ldrb.w	r0, [r0, #32]
    21be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    21c2:	4913      	ldr	r1, [pc, #76]	; (2210 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    21c4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    21c8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    21cc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    21d0:	7048      	strb	r0, [r1, #1]
    21d2:	6820      	ldr	r0, [r4, #0]
    21d4:	4438      	add	r0, r7
    21d6:	6020      	str	r0, [r4, #0]
    21d8:	20ff      	movs	r0, #255	; 0xff
    21da:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    21de:	7e60      	ldrb	r0, [r4, #25]
    21e0:	2801      	cmp	r0, #1
    21e2:	d105      	bne.n	21f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    21e4:	68e0      	ldr	r0, [r4, #12]
    21e6:	1e40      	subs	r0, r0, #1
    21e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ec:	f001 fb94 	bl	3918 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    21f0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    21f4:	2820      	cmp	r0, #32
    21f6:	d003      	beq.n	2200 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    21f8:	4806      	ldr	r0, [pc, #24]	; (2214 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    21fa:	7840      	ldrb	r0, [r0, #1]
    21fc:	f002 fab8 	bl	4770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2200:	b00d      	add	sp, #52	; 0x34
    2202:	2000      	movs	r0, #0
    2204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2208:	200011bc 	.word	0x200011bc
    220c:	0f424000 	.word	0x0f424000
    2210:	2000113c 	.word	0x2000113c
    2214:	2000003c 	.word	0x2000003c

00002218 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2218:	4806      	ldr	r0, [pc, #24]	; (2234 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    221a:	b510      	push	{r4, lr}
    221c:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    2220:	2920      	cmp	r1, #32
    2222:	bf1c      	itt	ne
    2224:	7e00      	ldrbne	r0, [r0, #24]
    2226:	bd10      	popne	{r4, pc}
    2228:	f640 312a 	movw	r1, #2858	; 0xb2a
    222c:	2070      	movs	r0, #112	; 0x70
    222e:	f002 f9cb 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2232:	0000      	.short	0x0000
    2234:	200011bc 	.word	0x200011bc

00002238 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2238:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    223c:	b570      	push	{r4, r5, r6, lr}
    223e:	4807      	ldr	r0, [pc, #28]	; (225c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2240:	4a07      	ldr	r2, [pc, #28]	; (2260 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2246:	6901      	ldr	r1, [r0, #16]
    2248:	3008      	adds	r0, #8
    224a:	fba1 4502 	umull	r4, r5, r1, r2
    224e:	f7ff fdcf 	bl	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    2252:	1900      	adds	r0, r0, r4
    2254:	f145 0100 	adc.w	r1, r5, #0
    2258:	bd70      	pop	{r4, r5, r6, pc}
    225a:	0000      	.short	0x0000
    225c:	20000dbc 	.word	0x20000dbc
    2260:	1e848000 	.word	0x1e848000

00002264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2266:	4d6b      	ldr	r5, [pc, #428]	; (2414 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2268:	4a6b      	ldr	r2, [pc, #428]	; (2418 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    226a:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    226e:	2601      	movs	r6, #1
    2270:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2274:	2808      	cmp	r0, #8
    2276:	d27c      	bcs.n	2372 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2278:	e8df f000 	tbb	[pc, r0]
    227c:	a9977004 	.word	0xa9977004
    2280:	b3ae41c7 	.word	0xb3ae41c7
    2284:	b919      	cbnz	r1, 228e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2286:	f002 f817 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    228a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    228e:	8ae0      	ldrh	r0, [r4, #22]
    2290:	b110      	cbz	r0, 2298 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2292:	f002 f921 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2296:	b180      	cbz	r0, 22ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2298:	f7ff fcf8 	bl	1c8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x904>
    229c:	20ff      	movs	r0, #255	; 0xff
    229e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    22a2:	6861      	ldr	r1, [r4, #4]
    22a4:	f1b1 3fff 	cmp.w	r1, #4294967295
    22a8:	d003      	beq.n	22b2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    22aa:	2005      	movs	r0, #5
    22ac:	f001 fc1a 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    22b0:	b140      	cbz	r0, 22c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    22b2:	7e60      	ldrb	r0, [r4, #25]
    22b4:	2801      	cmp	r0, #1
    22b6:	d110      	bne.n	22da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    22b8:	e009      	b.n	22ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    22ba:	f640 0134 	movw	r1, #2100	; 0x834
    22be:	2070      	movs	r0, #112	; 0x70
    22c0:	f002 f982 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22c4:	f640 0139 	movw	r1, #2105	; 0x839
    22c8:	2070      	movs	r0, #112	; 0x70
    22ca:	f002 f97d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22ce:	68e0      	ldr	r0, [r4, #12]
    22d0:	1e40      	subs	r0, r0, #1
    22d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22d6:	f001 fb1f 	bl	3918 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    22da:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22de:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    22e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    22e6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    22ea:	6840      	ldr	r0, [r0, #4]
    22ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    22f0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    22f4:	b001      	add	sp, #4
    22f6:	2101      	movs	r1, #1
    22f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    22fc:	4710      	bx	r2
    22fe:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2302:	b140      	cbz	r0, 2316 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2304:	b919      	cbnz	r1, 230e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    2306:	f001 ffd7 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    230a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    230e:	2000      	movs	r0, #0
    2310:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2316:	f7ff fcb9 	bl	1c8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x904>
    231a:	f04f 30ff 	mov.w	r0, #4294967295
    231e:	6060      	str	r0, [r4, #4]
    2320:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2324:	f88d 0000 	strb.w	r0, [sp]
    2328:	f89d 0000 	ldrb.w	r0, [sp]
    232c:	b188      	cbz	r0, 2352 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    232e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2332:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2336:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    233a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    233e:	6840      	ldr	r0, [r0, #4]
    2340:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2344:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2348:	b001      	add	sp, #4
    234a:	2106      	movs	r1, #6
    234c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2350:	4710      	bx	r2
    2352:	f44f 6105 	mov.w	r1, #2128	; 0x850
    2356:	2070      	movs	r0, #112	; 0x70
    2358:	f002 f936 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    235c:	f7ff fc96 	bl	1c8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x904>
    2360:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2364:	f002 f8b8 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2368:	b120      	cbz	r0, 2374 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    236a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    236e:	b130      	cbz	r0, 237e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2370:	e009      	b.n	2386 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2372:	e04a      	b.n	240a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2374:	f640 015e 	movw	r1, #2142	; 0x85e
    2378:	2070      	movs	r0, #112	; 0x70
    237a:	f002 f925 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    237e:	f001 ff9b 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2382:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2386:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    238a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    238e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2392:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2396:	6840      	ldr	r0, [r0, #4]
    2398:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    239c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    23a0:	b001      	add	sp, #4
    23a2:	2100      	movs	r1, #0
    23a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    23a8:	4710      	bx	r2
    23aa:	f001 fd77 	bl	3e9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    23ae:	8ae0      	ldrh	r0, [r4, #22]
    23b0:	b110      	cbz	r0, 23b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    23b2:	f002 f891 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    23b6:	b128      	cbz	r0, 23c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    23b8:	f001 fd84 	bl	3ec4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    23bc:	2800      	cmp	r0, #0
    23be:	bf18      	it	ne
    23c0:	7766      	strbne	r6, [r4, #29]
    23c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23c4:	f640 0168 	movw	r1, #2152	; 0x868
    23c8:	2070      	movs	r0, #112	; 0x70
    23ca:	f002 f8fd 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ce:	4813      	ldr	r0, [pc, #76]	; (241c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    23d0:	6006      	str	r6, [r0, #0]
    23d2:	6890      	ldr	r0, [r2, #8]
    23d4:	6006      	str	r6, [r0, #0]
    23d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23d8:	7810      	ldrb	r0, [r2, #0]
    23da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    23de:	f002 b9c7 	b.w	4770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    23e2:	f7ff fc53 	bl	1c8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x904>
    23e6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23ea:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    23ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23f2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    23f6:	6840      	ldr	r0, [r0, #4]
    23f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    23fc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2400:	b001      	add	sp, #4
    2402:	2105      	movs	r1, #5
    2404:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2408:	4710      	bx	r2
    240a:	f640 017b 	movw	r1, #2171	; 0x87b
    240e:	2070      	movs	r0, #112	; 0x70
    2410:	f002 f8da 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2414:	20000dbc 	.word	0x20000dbc
    2418:	2000003c 	.word	0x2000003c
    241c:	40000508 	.word	0x40000508

00002420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2420:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2424:	4682      	mov	sl, r0
    2426:	48f0      	ldr	r0, [pc, #960]	; (27e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2428:	b095      	sub	sp, #84	; 0x54
    242a:	6800      	ldr	r0, [r0, #0]
    242c:	4def      	ldr	r5, [pc, #956]	; (27ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    242e:	05c0      	lsls	r0, r0, #23
    2430:	0dc0      	lsrs	r0, r0, #23
    2432:	d00e      	beq.n	2452 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2434:	3810      	subs	r0, #16
    2436:	b240      	sxtb	r0, r0
    2438:	2800      	cmp	r0, #0
    243a:	bfb8      	it	lt
    243c:	f000 000f 	andlt.w	r0, r0, #15
    2440:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2444:	bfac      	ite	ge
    2446:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    244a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    244e:	0940      	lsrs	r0, r0, #5
    2450:	d00d      	beq.n	246e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2452:	9816      	ldr	r0, [sp, #88]	; 0x58
    2454:	f04f 0b00 	mov.w	fp, #0
    2458:	7800      	ldrb	r0, [r0, #0]
    245a:	2800      	cmp	r0, #0
    245c:	bf18      	it	ne
    245e:	2801      	cmpne	r0, #1
    2460:	d018      	beq.n	2494 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2462:	f240 7104 	movw	r1, #1796	; 0x704
    2466:	f04f 0070 	mov.w	r0, #112	; 0x70
    246a:	f002 f8ad 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    246e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2472:	f04f 0b01 	mov.w	fp, #1
    2476:	2820      	cmp	r0, #32
    2478:	d007      	beq.n	248a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    247a:	9816      	ldr	r0, [sp, #88]	; 0x58
    247c:	7800      	ldrb	r0, [r0, #0]
    247e:	b148      	cbz	r0, 2494 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2480:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2484:	2070      	movs	r0, #112	; 0x70
    2486:	f002 f89f 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    248a:	f240 61fd 	movw	r1, #1789	; 0x6fd
    248e:	2070      	movs	r0, #112	; 0x70
    2490:	f002 f89a 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2494:	4cd6      	ldr	r4, [pc, #856]	; (27f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2496:	b124      	cbz	r4, 24a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2498:	2100      	movs	r1, #0
    249a:	f240 7007 	movw	r0, #1799	; 0x707
    249e:	f3af 8000 	nop.w
    24a2:	2000      	movs	r0, #0
    24a4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    24a8:	49d2      	ldr	r1, [pc, #840]	; (27f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    24aa:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    24ae:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    24b2:	f04f 0901 	mov.w	r9, #1
    24b6:	9000      	str	r0, [sp, #0]
    24b8:	b124      	cbz	r4, 24c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    24ba:	2100      	movs	r1, #0
    24bc:	f240 7012 	movw	r0, #1810	; 0x712
    24c0:	f3af 8000 	nop.w
    24c4:	f1b9 0f00 	cmp.w	r9, #0
    24c8:	d00a      	beq.n	24e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    24ca:	bf00      	nop
    24cc:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    24d0:	f04f 0800 	mov.w	r8, #0
    24d4:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    24d8:	f1bb 0f00 	cmp.w	fp, #0
    24dc:	d007      	beq.n	24ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    24de:	e038      	b.n	2552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    24e0:	48c5      	ldr	r0, [pc, #788]	; (27f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    24e2:	2800      	cmp	r0, #0
    24e4:	bf18      	it	ne
    24e6:	f3af 8000 	nopne.w
    24ea:	b662      	cpsie	i
    24ec:	e7ee      	b.n	24cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    24ee:	4637      	mov	r7, r6
    24f0:	2001      	movs	r0, #1
    24f2:	ea20 0607 	bic.w	r6, r0, r7
    24f6:	48c1      	ldr	r0, [pc, #772]	; (27fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    24f8:	2240      	movs	r2, #64	; 0x40
    24fa:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    24fe:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2502:	f00a fd81 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2506:	b124      	cbz	r4, 2512 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    2508:	2100      	movs	r1, #0
    250a:	f240 502f 	movw	r0, #1327	; 0x52f
    250e:	f3af 8000 	nop.w
    2512:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2516:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    251a:	4429      	add	r1, r5
    251c:	4428      	add	r0, r5
    251e:	8c0a      	ldrh	r2, [r1, #32]
    2520:	8402      	strh	r2, [r0, #32]
    2522:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2526:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    252a:	b124      	cbz	r4, 2536 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    252c:	2100      	movs	r1, #0
    252e:	f240 5033 	movw	r0, #1331	; 0x533
    2532:	f3af 8000 	nop.w
    2536:	b124      	cbz	r4, 2542 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    2538:	2100      	movs	r1, #0
    253a:	f240 701c 	movw	r0, #1820	; 0x71c
    253e:	f3af 8000 	nop.w
    2542:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2546:	f88d 0008 	strb.w	r0, [sp, #8]
    254a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    254e:	2800      	cmp	r0, #0
    2550:	d1b2      	bne.n	24b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2552:	b124      	cbz	r4, 255e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2554:	2100      	movs	r1, #0
    2556:	f240 7026 	movw	r0, #1830	; 0x726
    255a:	f3af 8000 	nop.w
    255e:	a802      	add	r0, sp, #8
    2560:	f001 f91a 	bl	3798 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2568:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    256c:	4633      	mov	r3, r6
    256e:	aa09      	add	r2, sp, #36	; 0x24
    2570:	a80e      	add	r0, sp, #56	; 0x38
    2572:	9916      	ldr	r1, [sp, #88]	; 0x58
    2574:	f7ff faae 	bl	1ad4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74c>
    2578:	b124      	cbz	r4, 2584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    257a:	2100      	movs	r1, #0
    257c:	f240 702d 	movw	r0, #1837	; 0x72d
    2580:	f3af 8000 	nop.w
    2584:	4a9d      	ldr	r2, [pc, #628]	; (27fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2586:	990e      	ldr	r1, [sp, #56]	; 0x38
    2588:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    258c:	a809      	add	r0, sp, #36	; 0x24
    258e:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2592:	2a01      	cmp	r2, #1
    2594:	bf18      	it	ne
    2596:	2a02      	cmpne	r2, #2
    2598:	d138      	bne.n	260c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    259a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    259c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    259e:	eba2 0201 	sub.w	r2, r2, r1
    25a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    25a6:	eba3 0101 	sub.w	r1, r3, r1
    25aa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    25ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    25b2:	2a02      	cmp	r2, #2
    25b4:	d364      	bcc.n	2680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    25b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    25ba:	bf98      	it	ls
    25bc:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    25c0:	d85e      	bhi.n	2680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    25c2:	f04f 0801 	mov.w	r8, #1
    25c6:	ab14      	add	r3, sp, #80	; 0x50
    25c8:	aa13      	add	r2, sp, #76	; 0x4c
    25ca:	4631      	mov	r1, r6
    25cc:	f7fe ff20 	bl	1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    25d0:	2800      	cmp	r0, #0
    25d2:	d05d      	beq.n	2690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    25d4:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    25d8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    25dc:	4633      	mov	r3, r6
    25de:	428a      	cmp	r2, r1
    25e0:	d05a      	beq.n	2698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    25e2:	2005      	movs	r0, #5
    25e4:	f7fe fd26 	bl	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    25e8:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    25ec:	7048      	strb	r0, [r1, #1]
    25ee:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    25f2:	2820      	cmp	r0, #32
    25f4:	bf1c      	itt	ne
    25f6:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    25fa:	f880 a001 	strbne.w	sl, [r0, #1]
    25fe:	d057      	beq.n	26b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2600:	4632      	mov	r2, r6
    2602:	4651      	mov	r1, sl
    2604:	f05f 0003 	movs.w	r0, #3
    2608:	f7ff fc2c 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    260c:	b124      	cbz	r4, 2618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    260e:	2100      	movs	r1, #0
    2610:	f240 7032 	movw	r0, #1842	; 0x732
    2614:	f3af 8000 	nop.w
    2618:	4879      	ldr	r0, [pc, #484]	; (2800 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    261a:	2800      	cmp	r0, #0
    261c:	bf18      	it	ne
    261e:	f3af 8000 	nopne.w
    2622:	f3ef 8910 	mrs	r9, PRIMASK
    2626:	b672      	cpsid	i
    2628:	b124      	cbz	r4, 2634 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    262a:	2100      	movs	r1, #0
    262c:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    2630:	f3af 8000 	nop.w
    2634:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2638:	f88d 0008 	strb.w	r0, [sp, #8]
    263c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2640:	2800      	cmp	r0, #0
    2642:	f47f af39 	bne.w	24b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2646:	b124      	cbz	r4, 2652 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    2648:	2100      	movs	r1, #0
    264a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    264e:	f3af 8000 	nop.w
    2652:	af09      	add	r7, sp, #36	; 0x24
    2654:	9800      	ldr	r0, [sp, #0]
    2656:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    265a:	f100 0708 	add.w	r7, r0, #8
    265e:	f1b8 0f00 	cmp.w	r8, #0
    2662:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    2666:	990d      	ldr	r1, [sp, #52]	; 0x34
    2668:	6181      	str	r1, [r0, #24]
    266a:	d053      	beq.n	2714 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    266c:	b124      	cbz	r4, 2678 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    266e:	2100      	movs	r1, #0
    2670:	f240 704d 	movw	r0, #1869	; 0x74d
    2674:	f3af 8000 	nop.w
    2678:	f1bb 0f00 	cmp.w	fp, #0
    267c:	d13a      	bne.n	26f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    267e:	e01f      	b.n	26c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    2680:	4632      	mov	r2, r6
    2682:	4651      	mov	r1, sl
    2684:	2004      	movs	r0, #4
    2686:	f7ff fbed 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    268a:	f04f 0801 	mov.w	r8, #1
    268e:	e7bd      	b.n	260c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2690:	4632      	mov	r2, r6
    2692:	4651      	mov	r1, sl
    2694:	2004      	movs	r0, #4
    2696:	e7b7      	b.n	2608 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    2698:	2920      	cmp	r1, #32
    269a:	bf19      	ittee	ne
    269c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    26a0:	7840      	ldrbne	r0, [r0, #1]
    26a2:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    26a6:	4428      	addeq	r0, r5
    26a8:	bf08      	it	eq
    26aa:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    26ae:	e79b      	b.n	25e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    26b0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26b4:	4429      	add	r1, r5
    26b6:	f881 a020 	strb.w	sl, [r1, #32]
    26ba:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    26be:	e79f      	b.n	2600 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    26c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    26c2:	f010 0fff 	tst.w	r0, #255	; 0xff
    26c6:	d015      	beq.n	26f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    26c8:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    26cc:	2820      	cmp	r0, #32
    26ce:	d111      	bne.n	26f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    26d0:	b124      	cbz	r4, 26dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    26d2:	2100      	movs	r1, #0
    26d4:	f240 7052 	movw	r0, #1874	; 0x752
    26d8:	f3af 8000 	nop.w
    26dc:	4632      	mov	r2, r6
    26de:	2102      	movs	r1, #2
    26e0:	980e      	ldr	r0, [sp, #56]	; 0x38
    26e2:	f7ff fbf1 	bl	1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    26e6:	9010      	str	r0, [sp, #64]	; 0x40
    26e8:	b920      	cbnz	r0, 26f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    26ea:	9816      	ldr	r0, [sp, #88]	; 0x58
    26ec:	7800      	ldrb	r0, [r0, #0]
    26ee:	b1f0      	cbz	r0, 272e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    26f0:	2801      	cmp	r0, #1
    26f2:	d02b      	beq.n	274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    26f4:	b124      	cbz	r4, 2700 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    26f6:	2100      	movs	r1, #0
    26f8:	f240 706f 	movw	r0, #1903	; 0x76f
    26fc:	f3af 8000 	nop.w
    2700:	20ff      	movs	r0, #255	; 0xff
    2702:	f1bb 0f00 	cmp.w	fp, #0
    2706:	bf18      	it	ne
    2708:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    270c:	d027      	beq.n	275e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    270e:	bf00      	nop
    2710:	f04f 0801 	mov.w	r8, #1
    2714:	b124      	cbz	r4, 2720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    2716:	2100      	movs	r1, #0
    2718:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    271c:	f3af 8000 	nop.w
    2720:	9810      	ldr	r0, [sp, #64]	; 0x40
    2722:	4e38      	ldr	r6, [pc, #224]	; (2804 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    2724:	2802      	cmp	r0, #2
    2726:	d023      	beq.n	2770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    2728:	2801      	cmp	r0, #1
    272a:	d029      	beq.n	2780 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    272c:	e02d      	b.n	278a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    272e:	b124      	cbz	r4, 273a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    2730:	2100      	movs	r1, #0
    2732:	f240 705a 	movw	r0, #1882	; 0x75a
    2736:	f3af 8000 	nop.w
    273a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    273e:	4651      	mov	r1, sl
    2740:	2004      	movs	r0, #4
    2742:	f7ff fb8f 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    2746:	f04f 0801 	mov.w	r8, #1
    274a:	e7e3      	b.n	2714 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    274c:	2c00      	cmp	r4, #0
    274e:	f43f aeb3 	beq.w	24b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2752:	2100      	movs	r1, #0
    2754:	f240 7065 	movw	r0, #1893	; 0x765
    2758:	f3af 8000 	nop.w
    275c:	e6ac      	b.n	24b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    275e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2762:	2101      	movs	r1, #1
    2764:	4391      	bics	r1, r2
    2766:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    276a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    276e:	e7cf      	b.n	2710 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    2770:	68a8      	ldr	r0, [r5, #8]
    2772:	990e      	ldr	r1, [sp, #56]	; 0x38
    2774:	1a40      	subs	r0, r0, r1
    2776:	f00a faed 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    277a:	6871      	ldr	r1, [r6, #4]
    277c:	b921      	cbnz	r1, 2788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    277e:	e004      	b.n	278a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2780:	6871      	ldr	r1, [r6, #4]
    2782:	f04f 30ff 	mov.w	r0, #4294967295
    2786:	b101      	cbz	r1, 278a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2788:	4788      	blx	r1
    278a:	f1b9 0f00 	cmp.w	r9, #0
    278e:	d024      	beq.n	27da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    2790:	b124      	cbz	r4, 279c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    2792:	2100      	movs	r1, #0
    2794:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    2798:	f3af 8000 	nop.w
    279c:	f1b8 0f00 	cmp.w	r8, #0
    27a0:	d011      	beq.n	27c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    27a2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    27a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27aa:	4428      	add	r0, r5
    27ac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    27b0:	2820      	cmp	r0, #32
    27b2:	d008      	beq.n	27c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    27b4:	b124      	cbz	r4, 27c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    27b6:	2100      	movs	r1, #0
    27b8:	f240 7097 	movw	r0, #1943	; 0x797
    27bc:	f3af 8000 	nop.w
    27c0:	7870      	ldrb	r0, [r6, #1]
    27c2:	f001 ffd5 	bl	4770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    27c6:	b124      	cbz	r4, 27d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    27c8:	2100      	movs	r1, #0
    27ca:	f240 709c 	movw	r0, #1948	; 0x79c
    27ce:	f3af 8000 	nop.w
    27d2:	b017      	add	sp, #92	; 0x5c
    27d4:	4640      	mov	r0, r8
    27d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27da:	4807      	ldr	r0, [pc, #28]	; (27f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    27dc:	2800      	cmp	r0, #0
    27de:	bf18      	it	ne
    27e0:	f3af 8000 	nopne.w
    27e4:	b662      	cpsie	i
    27e6:	e7d3      	b.n	2790 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    27e8:	e000ed04 	.word	0xe000ed04
    27ec:	200011bc 	.word	0x200011bc
    27f0:	00000000 	.word	0x00000000
    27f4:	20000dbc 	.word	0x20000dbc
    27f8:	00000000 	.word	0x00000000
    27fc:	2000113c 	.word	0x2000113c
    2800:	00000000 	.word	0x00000000
    2804:	2000003c 	.word	0x2000003c

00002808 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2808:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    280c:	48c9      	ldr	r0, [pc, #804]	; (2b34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    280e:	b08a      	sub	sp, #40	; 0x28
    2810:	6800      	ldr	r0, [r0, #0]
    2812:	05c0      	lsls	r0, r0, #23
    2814:	0dc0      	lsrs	r0, r0, #23
    2816:	d011      	beq.n	283c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2818:	3810      	subs	r0, #16
    281a:	b240      	sxtb	r0, r0
    281c:	2800      	cmp	r0, #0
    281e:	bfb8      	it	lt
    2820:	f000 000f 	andlt.w	r0, r0, #15
    2824:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2828:	bfac      	ite	ge
    282a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    282e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2832:	0940      	lsrs	r0, r0, #5
    2834:	bf08      	it	eq
    2836:	f04f 0b01 	moveq.w	fp, #1
    283a:	d001      	beq.n	2840 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    283c:	f04f 0b00 	mov.w	fp, #0
    2840:	980a      	ldr	r0, [sp, #40]	; 0x28
    2842:	7800      	ldrb	r0, [r0, #0]
    2844:	2800      	cmp	r0, #0
    2846:	bf1e      	ittt	ne
    2848:	2000      	movne	r0, #0
    284a:	b00b      	addne	sp, #44	; 0x2c
    284c:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2850:	f04f 0a00 	mov.w	sl, #0
    2854:	4db8      	ldr	r5, [pc, #736]	; (2b38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    2856:	4cb9      	ldr	r4, [pc, #740]	; (2b3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    2858:	46d1      	mov	r9, sl
    285a:	b125      	cbz	r5, 2866 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    285c:	2100      	movs	r1, #0
    285e:	f240 50b9 	movw	r0, #1465	; 0x5b9
    2862:	f3af 8000 	nop.w
    2866:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    286a:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    286e:	f04f 0800 	mov.w	r8, #0
    2872:	b125      	cbz	r5, 287e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2874:	2100      	movs	r1, #0
    2876:	f240 50be 	movw	r0, #1470	; 0x5be
    287a:	f3af 8000 	nop.w
    287e:	f1bb 0f00 	cmp.w	fp, #0
    2882:	d123      	bne.n	28cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2884:	4637      	mov	r7, r6
    2886:	2001      	movs	r0, #1
    2888:	ea20 0607 	bic.w	r6, r0, r7
    288c:	48ac      	ldr	r0, [pc, #688]	; (2b40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    288e:	2240      	movs	r2, #64	; 0x40
    2890:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2894:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2898:	f00a fbb6 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    289c:	b125      	cbz	r5, 28a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    289e:	2100      	movs	r1, #0
    28a0:	f240 502f 	movw	r0, #1327	; 0x52f
    28a4:	f3af 8000 	nop.w
    28a8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    28ac:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    28b0:	4421      	add	r1, r4
    28b2:	4420      	add	r0, r4
    28b4:	8c0a      	ldrh	r2, [r1, #32]
    28b6:	8402      	strh	r2, [r0, #32]
    28b8:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    28bc:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    28c0:	b125      	cbz	r5, 28cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    28c2:	2100      	movs	r1, #0
    28c4:	f240 5033 	movw	r0, #1331	; 0x533
    28c8:	f3af 8000 	nop.w
    28cc:	b125      	cbz	r5, 28d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    28ce:	2100      	movs	r1, #0
    28d0:	f240 50c6 	movw	r0, #1478	; 0x5c6
    28d4:	f3af 8000 	nop.w
    28d8:	a808      	add	r0, sp, #32
    28da:	f000 ff5d 	bl	3798 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    28de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    28e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    28e6:	4633      	mov	r3, r6
    28e8:	466a      	mov	r2, sp
    28ea:	a806      	add	r0, sp, #24
    28ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    28ee:	f7ff f8f1 	bl	1ad4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74c>
    28f2:	b125      	cbz	r5, 28fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    28f4:	2100      	movs	r1, #0
    28f6:	f240 50cc 	movw	r0, #1484	; 0x5cc
    28fa:	f3af 8000 	nop.w
    28fe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2902:	2820      	cmp	r0, #32
    2904:	d019      	beq.n	293a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    2906:	68e0      	ldr	r0, [r4, #12]
    2908:	9900      	ldr	r1, [sp, #0]
    290a:	1a09      	subs	r1, r1, r0
    290c:	0209      	lsls	r1, r1, #8
    290e:	17ca      	asrs	r2, r1, #31
    2910:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2914:	1209      	asrs	r1, r1, #8
    2916:	d510      	bpl.n	293a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    2918:	e9dd 2100 	ldrd	r2, r1, [sp]
    291c:	1a89      	subs	r1, r1, r2
    291e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2922:	4408      	add	r0, r1
    2924:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2928:	e9cd 3000 	strd	r3, r0, [sp]
    292c:	4293      	cmp	r3, r2
    292e:	d202      	bcs.n	2936 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2930:	9802      	ldr	r0, [sp, #8]
    2932:	1c40      	adds	r0, r0, #1
    2934:	9002      	str	r0, [sp, #8]
    2936:	f04f 0801 	mov.w	r8, #1
    293a:	b14d      	cbz	r5, 2950 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    293c:	2100      	movs	r1, #0
    293e:	f240 50df 	movw	r0, #1503	; 0x5df
    2942:	f3af 8000 	nop.w
    2946:	2100      	movs	r1, #0
    2948:	f240 50e5 	movw	r0, #1509	; 0x5e5
    294c:	f3af 8000 	nop.w
    2950:	9900      	ldr	r1, [sp, #0]
    2952:	9806      	ldr	r0, [sp, #24]
    2954:	9a01      	ldr	r2, [sp, #4]
    2956:	1a09      	subs	r1, r1, r0
    2958:	1a10      	subs	r0, r2, r0
    295a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    295e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2962:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2966:	bf98      	it	ls
    2968:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    296c:	d803      	bhi.n	2976 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    296e:	f1bb 0f00 	cmp.w	fp, #0
    2972:	d10c      	bne.n	298e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    2974:	e003      	b.n	297e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    2976:	f1bb 0f00 	cmp.w	fp, #0
    297a:	d039      	beq.n	29f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    297c:	e0c0      	b.n	2b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    297e:	4633      	mov	r3, r6
    2980:	4669      	mov	r1, sp
    2982:	4870      	ldr	r0, [pc, #448]	; (2b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2984:	9a06      	ldr	r2, [sp, #24]
    2986:	f7fe fb91 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    298a:	ea48 0800 	orr.w	r8, r8, r0
    298e:	f1b8 0f00 	cmp.w	r8, #0
    2992:	d023      	beq.n	29dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    2994:	9800      	ldr	r0, [sp, #0]
    2996:	f00a f9dd 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    299a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    299e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    29a2:	4b69      	ldr	r3, [pc, #420]	; (2b48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    29a4:	4411      	add	r1, r2
    29a6:	1c49      	adds	r1, r1, #1
    29a8:	1842      	adds	r2, r0, r1
    29aa:	4298      	cmp	r0, r3
    29ac:	d856      	bhi.n	2a5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    29ae:	4865      	ldr	r0, [pc, #404]	; (2b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    29b0:	4281      	cmp	r1, r0
    29b2:	dc7c      	bgt.n	2aae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    29b4:	4240      	negs	r0, r0
    29b6:	4281      	cmp	r1, r0
    29b8:	db7a      	blt.n	2ab0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    29ba:	1c58      	adds	r0, r3, #1
    29bc:	4290      	cmp	r0, r2
    29be:	bfdc      	itt	le
    29c0:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    29c4:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    29c8:	dd05      	ble.n	29d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    29ca:	2a00      	cmp	r2, #0
    29cc:	bfbc      	itt	lt
    29ce:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    29d2:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    29d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    29d8:	e9c0 2904 	strd	r2, r9, [r0, #16]
    29dc:	f04f 0a01 	mov.w	sl, #1
    29e0:	2d00      	cmp	r5, #0
    29e2:	d07c      	beq.n	2ade <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    29e4:	2100      	movs	r1, #0
    29e6:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    29ea:	f3af 8000 	nop.w
    29ee:	e087      	b.n	2b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    29f0:	9807      	ldr	r0, [sp, #28]
    29f2:	9002      	str	r0, [sp, #8]
    29f4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    29f8:	aa08      	add	r2, sp, #32
    29fa:	a905      	add	r1, sp, #20
    29fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
    2a00:	f000 fd5a 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2a04:	f001 fa68 	bl	3ed8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2a08:	f000 fd3a 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2a0c:	4607      	mov	r7, r0
    2a0e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a12:	2820      	cmp	r0, #32
    2a14:	d027      	beq.n	2a66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2a16:	68e0      	ldr	r0, [r4, #12]
    2a18:	1d40      	adds	r0, r0, #5
    2a1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a1e:	bf00      	nop
    2a20:	e9dd 2100 	ldrd	r2, r1, [sp]
    2a24:	1a89      	subs	r1, r1, r2
    2a26:	9000      	str	r0, [sp, #0]
    2a28:	4408      	add	r0, r1
    2a2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a2e:	9001      	str	r0, [sp, #4]
    2a30:	9800      	ldr	r0, [sp, #0]
    2a32:	4540      	cmp	r0, r8
    2a34:	d202      	bcs.n	2a3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2a36:	9802      	ldr	r0, [sp, #8]
    2a38:	1c40      	adds	r0, r0, #1
    2a3a:	9002      	str	r0, [sp, #8]
    2a3c:	201f      	movs	r0, #31
    2a3e:	f88d 000c 	strb.w	r0, [sp, #12]
    2a42:	9800      	ldr	r0, [sp, #0]
    2a44:	f00a f986 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a48:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2a4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2a50:	4b3d      	ldr	r3, [pc, #244]	; (2b48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2a52:	4411      	add	r1, r2
    2a54:	1c49      	adds	r1, r1, #1
    2a56:	1842      	adds	r2, r0, r1
    2a58:	4298      	cmp	r0, r3
    2a5a:	d92a      	bls.n	2ab2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    2a5c:	f240 516f 	movw	r1, #1391	; 0x56f
    2a60:	2070      	movs	r0, #112	; 0x70
    2a62:	f001 fdb1 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2a6a:	f108 0609 	add.w	r6, r8, #9
    2a6e:	b1b0      	cbz	r0, 2a9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2a70:	f001 fd32 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a74:	b998      	cbnz	r0, 2a9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2a76:	f001 fbfd 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2a7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2a7e:	bf08      	it	eq
    2a80:	200d      	moveq	r0, #13
    2a82:	d00b      	beq.n	2a9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2a84:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2a88:	3856      	subs	r0, #86	; 0x56
    2a8a:	bf08      	it	eq
    2a8c:	201c      	moveq	r0, #28
    2a8e:	d005      	beq.n	2a9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2a90:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2a94:	389f      	subs	r0, #159	; 0x9f
    2a96:	bf14      	ite	ne
    2a98:	4648      	movne	r0, r9
    2a9a:	2032      	moveq	r0, #50	; 0x32
    2a9c:	4406      	add	r6, r0
    2a9e:	9805      	ldr	r0, [sp, #20]
    2aa0:	4287      	cmp	r7, r0
    2aa2:	bf84      	itt	hi
    2aa4:	1a38      	subhi	r0, r7, r0
    2aa6:	4406      	addhi	r6, r0
    2aa8:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2aac:	e7b8      	b.n	2a20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    2aae:	e003      	b.n	2ab8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    2ab0:	e00a      	b.n	2ac8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    2ab2:	4824      	ldr	r0, [pc, #144]	; (2b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2ab4:	4281      	cmp	r1, r0
    2ab6:	dd04      	ble.n	2ac2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    2ab8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2abc:	2070      	movs	r0, #112	; 0x70
    2abe:	f001 fd83 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ac2:	4822      	ldr	r0, [pc, #136]	; (2b4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    2ac4:	4281      	cmp	r1, r0
    2ac6:	da04      	bge.n	2ad2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    2ac8:	f240 5171 	movw	r1, #1393	; 0x571
    2acc:	2070      	movs	r0, #112	; 0x70
    2ace:	f001 fd7b 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ad2:	481f      	ldr	r0, [pc, #124]	; (2b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2ad4:	4290      	cmp	r0, r2
    2ad6:	bfd8      	it	le
    2ad8:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2adc:	e000      	b.n	2ae0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    2ade:	e00f      	b.n	2b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2ae0:	bfd8      	it	le
    2ae2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2ae6:	dd05      	ble.n	2af4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    2ae8:	2a00      	cmp	r2, #0
    2aea:	bfbc      	itt	lt
    2aec:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2af0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2af4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2af6:	f04f 0a01 	mov.w	sl, #1
    2afa:	46d0      	mov	r8, sl
    2afc:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2b00:	ea1a 0f08 	tst.w	sl, r8
    2b04:	d009      	beq.n	2b1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    2b06:	980a      	ldr	r0, [sp, #40]	; 0x28
    2b08:	4911      	ldr	r1, [pc, #68]	; (2b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2b0a:	9b02      	ldr	r3, [sp, #8]
    2b0c:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    2b10:	fbe3 2001 	umlal	r2, r0, r3, r1
    2b14:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b16:	e9c1 2004 	strd	r2, r0, [r1, #16]
    2b1a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2b1e:	f88d 0014 	strb.w	r0, [sp, #20]
    2b22:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2b26:	2800      	cmp	r0, #0
    2b28:	f47f ae97 	bne.w	285a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2b2c:	b00b      	add	sp, #44	; 0x2c
    2b2e:	4650      	mov	r0, sl
    2b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b34:	e000ed04 	.word	0xe000ed04
    2b38:	00000000 	.word	0x00000000
    2b3c:	200011bc 	.word	0x200011bc
    2b40:	2000113c 	.word	0x2000113c
    2b44:	0f424000 	.word	0x0f424000
    2b48:	1e847fff 	.word	0x1e847fff
    2b4c:	f0bdc000 	.word	0xf0bdc000
    2b50:	1e848000 	.word	0x1e848000

00002b54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2b54:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b58:	4d94      	ldr	r5, [pc, #592]	; (2dac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2b5a:	b08c      	sub	sp, #48	; 0x30
    2b5c:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2b60:	2000      	movs	r0, #0
    2b62:	9009      	str	r0, [sp, #36]	; 0x24
    2b64:	9006      	str	r0, [sp, #24]
    2b66:	2001      	movs	r0, #1
    2b68:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2b6c:	f04f 0800 	mov.w	r8, #0
    2b70:	4607      	mov	r7, r0
    2b72:	4c8f      	ldr	r4, [pc, #572]	; (2db0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2b74:	f8cd 001c 	str.w	r0, [sp, #28]
    2b78:	f000 fe08 	bl	378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2b7c:	9008      	str	r0, [sp, #32]
    2b7e:	b124      	cbz	r4, 2b8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    2b80:	2100      	movs	r1, #0
    2b82:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    2b86:	f3af 8000 	nop.w
    2b8a:	9807      	ldr	r0, [sp, #28]
    2b8c:	2800      	cmp	r0, #0
    2b8e:	d03c      	beq.n	2c0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    2b90:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2b94:	b124      	cbz	r4, 2ba0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    2b96:	2100      	movs	r1, #0
    2b98:	f240 70b5 	movw	r0, #1973	; 0x7b5
    2b9c:	f3af 8000 	nop.w
    2ba0:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2ba4:	2240      	movs	r2, #64	; 0x40
    2ba6:	ea27 060a 	bic.w	r6, r7, sl
    2baa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    2bae:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    2bb2:	4683      	mov	fp, r0
    2bb4:	f00a fa28 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bb8:	b124      	cbz	r4, 2bc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    2bba:	2100      	movs	r1, #0
    2bbc:	f240 502f 	movw	r0, #1327	; 0x52f
    2bc0:	f3af 8000 	nop.w
    2bc4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2bc8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2bcc:	4428      	add	r0, r5
    2bce:	4429      	add	r1, r5
    2bd0:	9000      	str	r0, [sp, #0]
    2bd2:	8c0a      	ldrh	r2, [r1, #32]
    2bd4:	8402      	strh	r2, [r0, #32]
    2bd6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2bda:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2bde:	b124      	cbz	r4, 2bea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2be0:	2100      	movs	r1, #0
    2be2:	f240 5033 	movw	r0, #1331	; 0x533
    2be6:	f3af 8000 	nop.w
    2bea:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2bee:	f88d 0008 	strb.w	r0, [sp, #8]
    2bf2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2bf6:	b178      	cbz	r0, 2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    2bf8:	2c00      	cmp	r4, #0
    2bfa:	bf1c      	itt	ne
    2bfc:	2100      	movne	r1, #0
    2bfe:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    2c02:	d0b9      	beq.n	2b78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2c04:	f3af 8000 	nop.w
    2c08:	e7b6      	b.n	2b78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2c0a:	486a      	ldr	r0, [pc, #424]	; (2db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2c0c:	2800      	cmp	r0, #0
    2c0e:	bf18      	it	ne
    2c10:	f3af 8000 	nopne.w
    2c14:	b662      	cpsie	i
    2c16:	e7bb      	b.n	2b90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    2c18:	b124      	cbz	r4, 2c24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    2c1a:	2100      	movs	r1, #0
    2c1c:	f240 70bf 	movw	r0, #1983	; 0x7bf
    2c20:	f3af 8000 	nop.w
    2c24:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c26:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2c2a:	2803      	cmp	r0, #3
    2c2c:	d17d      	bne.n	2d2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    2c2e:	9a00      	ldr	r2, [sp, #0]
    2c30:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c32:	f892 0020 	ldrb.w	r0, [r2, #32]
    2c36:	4288      	cmp	r0, r1
    2c38:	bf14      	ite	ne
    2c3a:	f04f 0a00 	movne.w	sl, #0
    2c3e:	f04f 0a01 	moveq.w	sl, #1
    2c42:	f102 0c20 	add.w	ip, r2, #32
    2c46:	4683      	mov	fp, r0
    2c48:	2220      	movs	r2, #32
    2c4a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2c4e:	e003      	b.n	2c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    2c50:	4602      	mov	r2, r0
    2c52:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2c56:	7840      	ldrb	r0, [r0, #1]
    2c58:	4288      	cmp	r0, r1
    2c5a:	d002      	beq.n	2c62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2c5c:	2820      	cmp	r0, #32
    2c5e:	d00a      	beq.n	2c76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2c60:	e7f6      	b.n	2c50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2c62:	2820      	cmp	r0, #32
    2c64:	d007      	beq.n	2c76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2c66:	4583      	cmp	fp, r0
    2c68:	d107      	bne.n	2c7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2c6a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    2c6e:	7840      	ldrb	r0, [r0, #1]
    2c70:	f88c 0000 	strb.w	r0, [ip]
    2c74:	e007      	b.n	2c86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2c76:	4640      	mov	r0, r8
    2c78:	e00c      	b.n	2c94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2c7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2c7e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2c82:	7840      	ldrb	r0, [r0, #1]
    2c84:	7048      	strb	r0, [r1, #1]
    2c86:	b124      	cbz	r4, 2c92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    2c88:	2100      	movs	r1, #0
    2c8a:	f240 409a 	movw	r0, #1178	; 0x49a
    2c8e:	f3af 8000 	nop.w
    2c92:	4638      	mov	r0, r7
    2c94:	46c3      	mov	fp, r8
    2c96:	ea10 0f0a 	tst.w	r0, sl
    2c9a:	bf18      	it	ne
    2c9c:	46bb      	movne	fp, r7
    2c9e:	2800      	cmp	r0, #0
    2ca0:	d04f      	beq.n	2d42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2ca2:	b124      	cbz	r4, 2cae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    2ca4:	2100      	movs	r1, #0
    2ca6:	f240 70c4 	movw	r0, #1988	; 0x7c4
    2caa:	f3af 8000 	nop.w
    2cae:	4632      	mov	r2, r6
    2cb0:	2001      	movs	r0, #1
    2cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cb4:	f7ff f8d6 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    2cb8:	b124      	cbz	r4, 2cc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2cba:	2100      	movs	r1, #0
    2cbc:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2cc0:	f3af 8000 	nop.w
    2cc4:	483c      	ldr	r0, [pc, #240]	; (2db8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    2cc6:	2800      	cmp	r0, #0
    2cc8:	bf18      	it	ne
    2cca:	f3af 8000 	nopne.w
    2cce:	f3ef 8010 	mrs	r0, PRIMASK
    2cd2:	b672      	cpsid	i
    2cd4:	9007      	str	r0, [sp, #28]
    2cd6:	b124      	cbz	r4, 2ce2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2cd8:	2100      	movs	r1, #0
    2cda:	f240 70d2 	movw	r0, #2002	; 0x7d2
    2cde:	f3af 8000 	nop.w
    2ce2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2ce6:	f88d 0008 	strb.w	r0, [sp, #8]
    2cea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2cee:	b138      	cbz	r0, 2d00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2cf0:	2c00      	cmp	r4, #0
    2cf2:	bf1c      	itt	ne
    2cf4:	2100      	movne	r1, #0
    2cf6:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    2cfa:	f43f af3d 	beq.w	2b78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2cfe:	e781      	b.n	2c04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2d00:	f1bb 0f00 	cmp.w	fp, #0
    2d04:	d00a      	beq.n	2d1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2d06:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2d0a:	2820      	cmp	r0, #32
    2d0c:	d106      	bne.n	2d1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2d0e:	4632      	mov	r2, r6
    2d10:	2102      	movs	r1, #2
    2d12:	9808      	ldr	r0, [sp, #32]
    2d14:	f7ff f8d8 	bl	1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    2d18:	9006      	str	r0, [sp, #24]
    2d1a:	b1f8      	cbz	r0, 2d5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    2d1c:	b124      	cbz	r4, 2d28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2d1e:	2100      	movs	r1, #0
    2d20:	f240 70ea 	movw	r0, #2026	; 0x7ea
    2d24:	f3af 8000 	nop.w
    2d28:	e000      	b.n	2d2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    2d2a:	e00a      	b.n	2d42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2d2c:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2d30:	ea27 0000 	bic.w	r0, r7, r0
    2d34:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2d38:	20ff      	movs	r0, #255	; 0xff
    2d3a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2d3e:	2001      	movs	r0, #1
    2d40:	9009      	str	r0, [sp, #36]	; 0x24
    2d42:	b124      	cbz	r4, 2d4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    2d44:	2100      	movs	r1, #0
    2d46:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2d4a:	f3af 8000 	nop.w
    2d4e:	9806      	ldr	r0, [sp, #24]
    2d50:	4e1a      	ldr	r6, [pc, #104]	; (2dbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    2d52:	2802      	cmp	r0, #2
    2d54:	d009      	beq.n	2d6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    2d56:	2801      	cmp	r0, #1
    2d58:	d00f      	beq.n	2d7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2d5a:	e013      	b.n	2d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2d5c:	b194      	cbz	r4, 2d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2d5e:	2100      	movs	r1, #0
    2d60:	f240 70e5 	movw	r0, #2021	; 0x7e5
    2d64:	f3af 8000 	nop.w
    2d68:	e7ec      	b.n	2d44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    2d6a:	68a9      	ldr	r1, [r5, #8]
    2d6c:	9808      	ldr	r0, [sp, #32]
    2d6e:	1a08      	subs	r0, r1, r0
    2d70:	f009 fff0 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d74:	6871      	ldr	r1, [r6, #4]
    2d76:	b921      	cbnz	r1, 2d82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    2d78:	e004      	b.n	2d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2d7a:	6871      	ldr	r1, [r6, #4]
    2d7c:	f04f 30ff 	mov.w	r0, #4294967295
    2d80:	b101      	cbz	r1, 2d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2d82:	4788      	blx	r1
    2d84:	9807      	ldr	r0, [sp, #28]
    2d86:	b148      	cbz	r0, 2d9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    2d88:	b124      	cbz	r4, 2d94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2d8a:	2100      	movs	r1, #0
    2d8c:	f640 0007 	movw	r0, #2055	; 0x807
    2d90:	f3af 8000 	nop.w
    2d94:	9809      	ldr	r0, [sp, #36]	; 0x24
    2d96:	b00d      	add	sp, #52	; 0x34
    2d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d9c:	4805      	ldr	r0, [pc, #20]	; (2db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2d9e:	2800      	cmp	r0, #0
    2da0:	bf18      	it	ne
    2da2:	f3af 8000 	nopne.w
    2da6:	b662      	cpsie	i
    2da8:	e7ee      	b.n	2d88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    2daa:	0000      	.short	0x0000
    2dac:	200011bc 	.word	0x200011bc
	...
    2dbc:	2000003c 	.word	0x2000003c

00002dc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2dc0:	2820      	cmp	r0, #32
    2dc2:	bf24      	itt	cs
    2dc4:	2000      	movcs	r0, #0
    2dc6:	4770      	bxcs	lr
    2dc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2dcc:	4b03      	ldr	r3, [pc, #12]	; (2ddc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2dce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2dd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2dd6:	6042      	str	r2, [r0, #4]
    2dd8:	2001      	movs	r0, #1
    2dda:	4770      	bx	lr
    2ddc:	20000dbc 	.word	0x20000dbc

00002de0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2de0:	b510      	push	{r4, lr}
    2de2:	2820      	cmp	r0, #32
    2de4:	d211      	bcs.n	2e0a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2de6:	490e      	ldr	r1, [pc, #56]	; (2e20 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2de8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2dec:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2df0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2df4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2df8:	b13b      	cbz	r3, 2e0a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2dfa:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2dfe:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2e02:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2e06:	2a01      	cmp	r2, #1
    2e08:	d001      	beq.n	2e0e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2e0a:	2000      	movs	r0, #0
    2e0c:	bd10      	pop	{r4, pc}
    2e0e:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2e12:	4601      	mov	r1, r0
    2e14:	2000      	movs	r0, #0
    2e16:	f7ff f825 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    2e1a:	2001      	movs	r0, #1
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	0000      	.short	0x0000
    2e20:	200011bc 	.word	0x200011bc

00002e24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e28:	4e86      	ldr	r6, [pc, #536]	; (3044 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2e2a:	4680      	mov	r8, r0
    2e2c:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2e30:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2e34:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2e38:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d071      	beq.n	2f24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2e40:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2e44:	4d80      	ldr	r5, [pc, #512]	; (3048 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2e46:	b125      	cbz	r5, 2e52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2e48:	2100      	movs	r1, #0
    2e4a:	f640 3076 	movw	r0, #2934	; 0xb76
    2e4e:	f3af 8000 	nop.w
    2e52:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2e56:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2e5a:	2801      	cmp	r0, #1
    2e5c:	d018      	beq.n	2e90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2e5e:	b2c0      	uxtb	r0, r0
    2e60:	2804      	cmp	r0, #4
    2e62:	bf1c      	itt	ne
    2e64:	2805      	cmpne	r0, #5
    2e66:	2806      	cmpne	r0, #6
    2e68:	d061      	beq.n	2f2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2e6a:	b12d      	cbz	r5, 2e78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2e6c:	f04f 0100 	mov.w	r1, #0
    2e70:	f640 3082 	movw	r0, #2946	; 0xb82
    2e74:	f3af 8000 	nop.w
    2e78:	f001 fcd0 	bl	481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2e7c:	b125      	cbz	r5, 2e88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2e7e:	2100      	movs	r1, #0
    2e80:	f640 3086 	movw	r0, #2950	; 0xb86
    2e84:	f3af 8000 	nop.w
    2e88:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2e8c:	2801      	cmp	r0, #1
    2e8e:	d1e6      	bne.n	2e5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2e90:	2401      	movs	r4, #1
    2e92:	b125      	cbz	r5, 2e9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2e94:	2100      	movs	r1, #0
    2e96:	f640 308d 	movw	r0, #2957	; 0xb8d
    2e9a:	f3af 8000 	nop.w
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d04b      	beq.n	2f3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2ea2:	2000      	movs	r0, #0
    2ea4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2ea8:	b125      	cbz	r5, 2eb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2eaa:	2100      	movs	r1, #0
    2eac:	f640 3092 	movw	r0, #2962	; 0xb92
    2eb0:	f3af 8000 	nop.w
    2eb4:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2eb8:	2001      	movs	r0, #1
    2eba:	ea20 090b 	bic.w	r9, r0, fp
    2ebe:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2ec2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2ec6:	2240      	movs	r2, #64	; 0x40
    2ec8:	f00a f89e 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ecc:	b125      	cbz	r5, 2ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2ece:	2100      	movs	r1, #0
    2ed0:	f240 502f 	movw	r0, #1327	; 0x52f
    2ed4:	f3af 8000 	nop.w
    2ed8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2edc:	eb00 0a06 	add.w	sl, r0, r6
    2ee0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2ee4:	4430      	add	r0, r6
    2ee6:	8c01      	ldrh	r1, [r0, #32]
    2ee8:	f8aa 1020 	strh.w	r1, [sl, #32]
    2eec:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2ef0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2ef4:	b125      	cbz	r5, 2f00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2ef6:	2100      	movs	r1, #0
    2ef8:	f240 5033 	movw	r0, #1331	; 0x533
    2efc:	f3af 8000 	nop.w
    2f00:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2f04:	f88d 0000 	strb.w	r0, [sp]
    2f08:	f89d 0000 	ldrb.w	r0, [sp]
    2f0c:	b1e0      	cbz	r0, 2f48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2f0e:	2d00      	cmp	r5, #0
    2f10:	bf1c      	itt	ne
    2f12:	2100      	movne	r1, #0
    2f14:	f640 3098 	movwne	r0, #2968	; 0xb98
    2f18:	d0bb      	beq.n	2e92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2f1a:	bf00      	nop
    2f1c:	f3af 8000 	nop.w
    2f20:	e7b7      	b.n	2e92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2f22:	e7ff      	b.n	2f24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2f24:	f640 316d 	movw	r1, #2925	; 0xb6d
    2f28:	2070      	movs	r0, #112	; 0x70
    2f2a:	f001 fb4d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f2e:	464a      	mov	r2, r9
    2f30:	4641      	mov	r1, r8
    2f32:	2001      	movs	r0, #1
    2f34:	f7fe ff96 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    2f38:	e7a0      	b.n	2e7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2f3a:	4844      	ldr	r0, [pc, #272]	; (304c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2f3c:	2800      	cmp	r0, #0
    2f3e:	bf18      	it	ne
    2f40:	f3af 8000 	nopne.w
    2f44:	b662      	cpsie	i
    2f46:	e7ac      	b.n	2ea2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2f48:	b125      	cbz	r5, 2f54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2f4a:	2100      	movs	r1, #0
    2f4c:	f640 309c 	movw	r0, #2972	; 0xb9c
    2f50:	f3af 8000 	nop.w
    2f54:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2f58:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2f5c:	4640      	mov	r0, r8
    2f5e:	461c      	mov	r4, r3
    2f60:	f04f 0b20 	mov.w	fp, #32
    2f64:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2f68:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2f6c:	e004      	b.n	2f78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2f6e:	46a3      	mov	fp, r4
    2f70:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2f74:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2f78:	4284      	cmp	r4, r0
    2f7a:	d002      	beq.n	2f82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2f7c:	2c20      	cmp	r4, #32
    2f7e:	d02b      	beq.n	2fd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2f80:	e7f5      	b.n	2f6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2f82:	2c20      	cmp	r4, #32
    2f84:	d028      	beq.n	2fd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2f86:	42a3      	cmp	r3, r4
    2f88:	d104      	bne.n	2f94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2f8a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2f8e:	7840      	ldrb	r0, [r0, #1]
    2f90:	7008      	strb	r0, [r1, #0]
    2f92:	e005      	b.n	2fa0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2f94:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2f98:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2f9c:	7840      	ldrb	r0, [r0, #1]
    2f9e:	7048      	strb	r0, [r1, #1]
    2fa0:	f1ba 0f00 	cmp.w	sl, #0
    2fa4:	d011      	beq.n	2fca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2fa6:	b125      	cbz	r5, 2fb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2fa8:	2100      	movs	r1, #0
    2faa:	f240 4092 	movw	r0, #1170	; 0x492
    2fae:	f3af 8000 	nop.w
    2fb2:	f89a 0000 	ldrb.w	r0, [sl]
    2fb6:	42a0      	cmp	r0, r4
    2fb8:	d107      	bne.n	2fca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2fba:	b125      	cbz	r5, 2fc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2fbc:	2100      	movs	r1, #0
    2fbe:	f240 4095 	movw	r0, #1173	; 0x495
    2fc2:	f3af 8000 	nop.w
    2fc6:	f88a b000 	strb.w	fp, [sl]
    2fca:	b15d      	cbz	r5, 2fe4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2fcc:	2100      	movs	r1, #0
    2fce:	f240 409a 	movw	r0, #1178	; 0x49a
    2fd2:	f3af 8000 	nop.w
    2fd6:	e000      	b.n	2fda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2fd8:	b125      	cbz	r5, 2fe4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2fda:	2100      	movs	r1, #0
    2fdc:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    2fe0:	f3af 8000 	nop.w
    2fe4:	481a      	ldr	r0, [pc, #104]	; (3050 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2fe6:	2800      	cmp	r0, #0
    2fe8:	bf18      	it	ne
    2fea:	f3af 8000 	nopne.w
    2fee:	f3ef 8410 	mrs	r4, PRIMASK
    2ff2:	b672      	cpsid	i
    2ff4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2ff8:	f88d 0000 	strb.w	r0, [sp]
    2ffc:	f89d 0000 	ldrb.w	r0, [sp]
    3000:	b138      	cbz	r0, 3012 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    3002:	2d00      	cmp	r5, #0
    3004:	bf1c      	itt	ne
    3006:	2100      	movne	r1, #0
    3008:	f640 30a6 	movwne	r0, #2982	; 0xba6
    300c:	f43f af41 	beq.w	2e92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3010:	e784      	b.n	2f1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    3012:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    3016:	20ff      	movs	r0, #255	; 0xff
    3018:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    301c:	b154      	cbz	r4, 3034 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    301e:	2d00      	cmp	r5, #0
    3020:	bf08      	it	eq
    3022:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3026:	2100      	movs	r1, #0
    3028:	f640 30b3 	movw	r0, #2995	; 0xbb3
    302c:	f3af 8000 	nop.w
    3030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3034:	4805      	ldr	r0, [pc, #20]	; (304c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    3036:	2800      	cmp	r0, #0
    3038:	bf18      	it	ne
    303a:	f3af 8000 	nopne.w
    303e:	b662      	cpsie	i
    3040:	e7ed      	b.n	301e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3042:	0000      	.short	0x0000
    3044:	200011bc 	.word	0x200011bc
	...

00003054 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3054:	b570      	push	{r4, r5, r6, lr}
    3056:	460d      	mov	r5, r1
    3058:	4606      	mov	r6, r0
    305a:	f001 fa2b 	bl	44b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    305e:	480f      	ldr	r0, [pc, #60]	; (309c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3060:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    3064:	2400      	movs	r4, #0
    3066:	3880      	subs	r0, #128	; 0x80
    3068:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    306c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3070:	b129      	cbz	r1, 307e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3072:	1c61      	adds	r1, r4, #1
    3074:	b2cc      	uxtb	r4, r1
    3076:	2c20      	cmp	r4, #32
    3078:	d3f8      	bcc.n	306c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    307a:	2020      	movs	r0, #32
    307c:	bd70      	pop	{r4, r5, r6, pc}
    307e:	4808      	ldr	r0, [pc, #32]	; (30a0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3080:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3084:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    308c:	4621      	mov	r1, r4
    308e:	6045      	str	r5, [r0, #4]
    3090:	2001      	movs	r0, #1
    3092:	f7fe fee7 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    3096:	4620      	mov	r0, r4
    3098:	bd70      	pop	{r4, r5, r6, pc}
    309a:	0000      	.short	0x0000
    309c:	200011bc 	.word	0x200011bc
    30a0:	20000dbc 	.word	0x20000dbc

000030a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    30a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a8:	f000 fb70 	bl	378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    30ac:	4605      	mov	r5, r0
    30ae:	f000 fe3f 	bl	3d30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    30b2:	4c60      	ldr	r4, [pc, #384]	; (3234 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    30b4:	6860      	ldr	r0, [r4, #4]
    30b6:	f1b0 3fff 	cmp.w	r0, #4294967295
    30ba:	bf1c      	itt	ne
    30bc:	f04f 30ff 	movne.w	r0, #4294967295
    30c0:	6060      	strne	r0, [r4, #4]
    30c2:	7fa0      	ldrb	r0, [r4, #30]
    30c4:	4f5c      	ldr	r7, [pc, #368]	; (3238 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    30c6:	b990      	cbnz	r0, 30ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    30c8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    30cc:	1a40      	subs	r0, r0, r1
    30ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30d2:	f44f 710c 	mov.w	r1, #560	; 0x230
    30d6:	f009 fe68 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    30da:	68e1      	ldr	r1, [r4, #12]
    30dc:	4408      	add	r0, r1
    30de:	1a28      	subs	r0, r5, r0
    30e0:	0200      	lsls	r0, r0, #8
    30e2:	17c1      	asrs	r1, r0, #31
    30e4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    30e8:	1200      	asrs	r0, r0, #8
    30ea:	0fc0      	lsrs	r0, r0, #31
    30ec:	d012      	beq.n	3114 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    30ee:	7e60      	ldrb	r0, [r4, #25]
    30f0:	b320      	cbz	r0, 313c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    30f2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    30f6:	f88d 0000 	strb.w	r0, [sp]
    30fa:	f89d 0000 	ldrb.w	r0, [sp]
    30fe:	b1e8      	cbz	r0, 313c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3100:	f000 fc72 	bl	39e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3104:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3108:	b1f0      	cbz	r0, 3148 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    310a:	f240 31d5 	movw	r1, #981	; 0x3d5
    310e:	2070      	movs	r0, #112	; 0x70
    3110:	f001 fa5a 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3114:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3118:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    311c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3120:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3124:	6840      	ldr	r0, [r0, #4]
    3126:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    312a:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    312e:	2108      	movs	r1, #8
    3130:	4790      	blx	r2
    3132:	f240 31bd 	movw	r1, #957	; 0x3bd
    3136:	2070      	movs	r0, #112	; 0x70
    3138:	f001 fa46 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    313c:	1ce8      	adds	r0, r5, #3
    313e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3142:	f000 fb49 	bl	37d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3146:	e7dd      	b.n	3104 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    3148:	2001      	movs	r0, #1
    314a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    314e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3152:	2820      	cmp	r0, #32
    3154:	d021      	beq.n	319a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    3156:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    315a:	2020      	movs	r0, #32
    315c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3160:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3164:	2600      	movs	r6, #0
    3166:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    316a:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    316e:	6026      	str	r6, [r4, #0]
    3170:	f000 feb8 	bl	3ee4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3174:	7720      	strb	r0, [r4, #28]
    3176:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    317a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    317e:	eb00 0a04 	add.w	sl, r0, r4
    3182:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3186:	2820      	cmp	r0, #32
    3188:	d012      	beq.n	31b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    318a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    318e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3192:	7e81      	ldrb	r1, [r0, #26]
    3194:	2901      	cmp	r1, #1
    3196:	d005      	beq.n	31a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3198:	e00a      	b.n	31b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    319a:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    319e:	2070      	movs	r0, #112	; 0x70
    31a0:	f001 fa12 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31a4:	f100 0208 	add.w	r2, r0, #8
    31a8:	2101      	movs	r1, #1
    31aa:	4628      	mov	r0, r5
    31ac:	f7fe f9d2 	bl	1554 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1cc>
    31b0:	4642      	mov	r2, r8
    31b2:	2101      	movs	r1, #1
    31b4:	4628      	mov	r0, r5
    31b6:	f7fe fe87 	bl	1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    31ba:	0007      	movs	r7, r0
    31bc:	d0f8      	beq.n	31b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    31be:	481f      	ldr	r0, [pc, #124]	; (323c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    31c0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    31c4:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    31c8:	2802      	cmp	r0, #2
    31ca:	d104      	bne.n	31d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    31cc:	4642      	mov	r2, r8
    31ce:	4649      	mov	r1, r9
    31d0:	2006      	movs	r0, #6
    31d2:	f7fe fe47 	bl	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    31d6:	20ff      	movs	r0, #255	; 0xff
    31d8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    31dc:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    31e0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3240 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    31e4:	2820      	cmp	r0, #32
    31e6:	bf1c      	itt	ne
    31e8:	f898 0001 	ldrbne.w	r0, [r8, #1]
    31ec:	f001 fac0 	blne	4770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    31f0:	7f20      	ldrb	r0, [r4, #28]
    31f2:	b118      	cbz	r0, 31fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    31f4:	f000 fe52 	bl	3e9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    31f8:	7726      	strb	r6, [r4, #28]
    31fa:	7766      	strb	r6, [r4, #29]
    31fc:	2f02      	cmp	r7, #2
    31fe:	d00f      	beq.n	3220 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    3200:	2f01      	cmp	r7, #1
    3202:	bf18      	it	ne
    3204:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3208:	f04f 30ff 	mov.w	r0, #4294967295
    320c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3210:	2900      	cmp	r1, #0
    3212:	bf08      	it	eq
    3214:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3218:	b001      	add	sp, #4
    321a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    321e:	4708      	bx	r1
    3220:	68a0      	ldr	r0, [r4, #8]
    3222:	1b40      	subs	r0, r0, r5
    3224:	f009 fd96 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3228:	f8d8 1004 	ldr.w	r1, [r8, #4]
    322c:	2900      	cmp	r1, #0
    322e:	d1f3      	bne.n	3218 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3234:	200011bc 	.word	0x200011bc
    3238:	20000dbc 	.word	0x20000dbc
    323c:	2000113c 	.word	0x2000113c
    3240:	2000003c 	.word	0x2000003c

00003244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3244:	b530      	push	{r4, r5, lr}
    3246:	4c36      	ldr	r4, [pc, #216]	; (3320 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3248:	4605      	mov	r5, r0
    324a:	b083      	sub	sp, #12
    324c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3250:	2820      	cmp	r0, #32
    3252:	d008      	beq.n	3266 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3254:	6860      	ldr	r0, [r4, #4]
    3256:	f1b0 3fff 	cmp.w	r0, #4294967295
    325a:	d009      	beq.n	3270 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    325c:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3260:	2070      	movs	r0, #112	; 0x70
    3262:	f001 f9b1 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3266:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    326a:	2070      	movs	r0, #112	; 0x70
    326c:	f001 f9ac 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3270:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3274:	492b      	ldr	r1, [pc, #172]	; (3324 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3276:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    327a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    327e:	3008      	adds	r0, #8
    3280:	f7fe fdb6 	bl	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    3284:	4601      	mov	r1, r0
    3286:	4a28      	ldr	r2, [pc, #160]	; (3328 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3288:	4428      	add	r0, r5
    328a:	4291      	cmp	r1, r2
    328c:	d904      	bls.n	3298 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    328e:	f240 516f 	movw	r1, #1391	; 0x56f
    3292:	2070      	movs	r0, #112	; 0x70
    3294:	f001 f998 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3298:	4924      	ldr	r1, [pc, #144]	; (332c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    329a:	428d      	cmp	r5, r1
    329c:	dd04      	ble.n	32a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    329e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    32a2:	2070      	movs	r0, #112	; 0x70
    32a4:	f001 f990 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32a8:	4921      	ldr	r1, [pc, #132]	; (3330 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    32aa:	428d      	cmp	r5, r1
    32ac:	da04      	bge.n	32b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    32ae:	f240 5171 	movw	r1, #1393	; 0x571
    32b2:	2070      	movs	r0, #112	; 0x70
    32b4:	f001 f988 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32b8:	491e      	ldr	r1, [pc, #120]	; (3334 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    32ba:	4281      	cmp	r1, r0
    32bc:	bfdc      	itt	le
    32be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    32c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    32c6:	dd05      	ble.n	32d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    32c8:	2800      	cmp	r0, #0
    32ca:	bfbc      	itt	lt
    32cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    32d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    32d4:	aa01      	add	r2, sp, #4
    32d6:	4669      	mov	r1, sp
    32d8:	f000 f8ee 	bl	34b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    32dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    32e0:	280f      	cmp	r0, #15
    32e2:	bf8c      	ite	hi
    32e4:	2001      	movhi	r0, #1
    32e6:	2000      	movls	r0, #0
    32e8:	9900      	ldr	r1, [sp, #0]
    32ea:	4408      	add	r0, r1
    32ec:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    32f0:	6061      	str	r1, [r4, #4]
    32f2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    32f6:	f88d 0000 	strb.w	r0, [sp]
    32fa:	f89d 0000 	ldrb.w	r0, [sp]
    32fe:	2800      	cmp	r0, #0
    3300:	bf04      	itt	eq
    3302:	b003      	addeq	sp, #12
    3304:	bd30      	popeq	{r4, r5, pc}
    3306:	2005      	movs	r0, #5
    3308:	f000 fbec 	bl	3ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    330c:	2800      	cmp	r0, #0
    330e:	bf1c      	itt	ne
    3310:	b003      	addne	sp, #12
    3312:	bd30      	popne	{r4, r5, pc}
    3314:	f640 21a8 	movw	r1, #2728	; 0xaa8
    3318:	2070      	movs	r0, #112	; 0x70
    331a:	f001 f955 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    331e:	0000      	.short	0x0000
    3320:	200011bc 	.word	0x200011bc
    3324:	20000dbc 	.word	0x20000dbc
    3328:	1e847fff 	.word	0x1e847fff
    332c:	0f424000 	.word	0x0f424000
    3330:	f0bdc000 	.word	0xf0bdc000
    3334:	1e848000 	.word	0x1e848000

00003338 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3338:	b570      	push	{r4, r5, r6, lr}
    333a:	4c1c      	ldr	r4, [pc, #112]	; (33ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    333c:	2120      	movs	r1, #32
    333e:	f884 1020 	strb.w	r1, [r4, #32]
    3342:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3346:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    334a:	2000      	movs	r0, #0
    334c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3350:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3354:	1e42      	subs	r2, r0, #1
    3356:	e9c4 0200 	strd	r0, r2, [r4]
    335a:	77a0      	strb	r0, [r4, #30]
    335c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3360:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3364:	7720      	strb	r0, [r4, #28]
    3366:	7760      	strb	r0, [r4, #29]
    3368:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    336c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3370:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3374:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3378:	2210      	movs	r2, #16
    337a:	7088      	strb	r0, [r1, #2]
    337c:	f801 0f04 	strb.w	r0, [r1, #4]!
    3380:	1e52      	subs	r2, r2, #1
    3382:	d1fa      	bne.n	337a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3384:	f000 fdb8 	bl	3ef8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3388:	4d09      	ldr	r5, [pc, #36]	; (33b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    338a:	2601      	movs	r6, #1
    338c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3390:	20ff      	movs	r0, #255	; 0xff
    3392:	7028      	strb	r0, [r5, #0]
    3394:	4807      	ldr	r0, [pc, #28]	; (33b4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3396:	f001 f9cd 	bl	4734 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    339a:	7068      	strb	r0, [r5, #1]
    339c:	f001 fa28 	bl	47f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    33a0:	60a8      	str	r0, [r5, #8]
    33a2:	f000 fd33 	bl	3e0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    33a6:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    33aa:	bd70      	pop	{r4, r5, r6, pc}
    33ac:	200011bc 	.word	0x200011bc
    33b0:	2000003c 	.word	0x2000003c
    33b4:	00001d19 	.word	0x00001d19

000033b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    33b8:	b500      	push	{lr}
    33ba:	b083      	sub	sp, #12
    33bc:	4668      	mov	r0, sp
    33be:	f000 f9eb 	bl	3798 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    33c2:	9800      	ldr	r0, [sp, #0]
    33c4:	f009 fcc6 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    33c8:	9a01      	ldr	r2, [sp, #4]
    33ca:	4b03      	ldr	r3, [pc, #12]	; (33d8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    33cc:	2100      	movs	r1, #0
    33ce:	fbe2 0103 	umlal	r0, r1, r2, r3
    33d2:	b003      	add	sp, #12
    33d4:	bd00      	pop	{pc}
    33d6:	0000      	.short	0x0000
    33d8:	1e848000 	.word	0x1e848000

000033dc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    33dc:	b570      	push	{r4, r5, r6, lr}
    33de:	4606      	mov	r6, r0
    33e0:	b082      	sub	sp, #8
    33e2:	461d      	mov	r5, r3
    33e4:	4610      	mov	r0, r2
    33e6:	f009 fcb5 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    33ea:	4604      	mov	r4, r0
    33ec:	4668      	mov	r0, sp
    33ee:	f000 f9d3 	bl	3798 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    33f2:	4920      	ldr	r1, [pc, #128]	; (3474 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    33f4:	9801      	ldr	r0, [sp, #4]
    33f6:	fba0 0201 	umull	r0, r2, r0, r1
    33fa:	1a30      	subs	r0, r6, r0
    33fc:	bf44      	itt	mi
    33fe:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    3402:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    3406:	d504      	bpl.n	3412 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3408:	f640 31c8 	movw	r1, #3016	; 0xbc8
    340c:	2070      	movs	r0, #112	; 0x70
    340e:	f001 f8db 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3412:	4288      	cmp	r0, r1
    3414:	db04      	blt.n	3420 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    3416:	f640 31c9 	movw	r1, #3017	; 0xbc9
    341a:	2070      	movs	r0, #112	; 0x70
    341c:	f001 f8d4 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3420:	4a15      	ldr	r2, [pc, #84]	; (3478 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    3422:	1a21      	subs	r1, r4, r0
    3424:	2300      	movs	r3, #0
    3426:	1a8a      	subs	r2, r1, r2
    3428:	f173 0200 	sbcs.w	r2, r3, #0
    342c:	d318      	bcc.n	3460 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    342e:	f8df c048 	ldr.w	ip, [pc, #72]	; 3478 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3432:	1b02      	subs	r2, r0, r4
    3434:	ebb2 0c0c 	subs.w	ip, r2, ip
    3438:	f173 0300 	sbcs.w	r3, r3, #0
    343c:	d310      	bcc.n	3460 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    343e:	4b0f      	ldr	r3, [pc, #60]	; (347c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3440:	428b      	cmp	r3, r1
    3442:	bf3e      	ittt	cc
    3444:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3448:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    344c:	1901      	addcc	r1, r0, r4
    344e:	d307      	bcc.n	3460 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3450:	4293      	cmp	r3, r2
    3452:	d20a      	bcs.n	346a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3454:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3458:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    345c:	4408      	add	r0, r1
    345e:	4241      	negs	r1, r0
    3460:	f101 000f 	add.w	r0, r1, #15
    3464:	b002      	add	sp, #8
    3466:	1a28      	subs	r0, r5, r0
    3468:	bd70      	pop	{r4, r5, r6, pc}
    346a:	f640 21c2 	movw	r1, #2754	; 0xac2
    346e:	2070      	movs	r0, #112	; 0x70
    3470:	f001 f8aa 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3474:	1e848000 	.word	0x1e848000
    3478:	0f424000 	.word	0x0f424000
    347c:	1e847fff 	.word	0x1e847fff

00003480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3480:	0b41      	lsrs	r1, r0, #13
    3482:	f248 6237 	movw	r2, #34359	; 0x8637
    3486:	4351      	muls	r1, r2
    3488:	0c0a      	lsrs	r2, r1, #16
    348a:	4b09      	ldr	r3, [pc, #36]	; (34b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    348c:	0251      	lsls	r1, r2, #9
    348e:	fb02 0203 	mla	r2, r2, r3, r0
    3492:	4808      	ldr	r0, [pc, #32]	; (34b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3494:	4350      	muls	r0, r2
    3496:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    349a:	306e      	adds	r0, #110	; 0x6e
    349c:	0d40      	lsrs	r0, r0, #21
    349e:	425b      	negs	r3, r3
    34a0:	fb10 f303 	smulbb	r3, r0, r3
    34a4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    34a8:	bf88      	it	hi
    34aa:	1c49      	addhi	r1, r1, #1
    34ac:	4408      	add	r0, r1
    34ae:	4770      	bx	lr
    34b0:	ffffc2f7 	.word	0xffffc2f7
    34b4:	00010c6f 	.word	0x00010c6f

000034b8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    34b8:	0b43      	lsrs	r3, r0, #13
    34ba:	f248 6c37 	movw	ip, #34359	; 0x8637
    34be:	fb03 f30c 	mul.w	r3, r3, ip
    34c2:	b430      	push	{r4, r5}
    34c4:	0c1b      	lsrs	r3, r3, #16
    34c6:	f8df c044 	ldr.w	ip, [pc, #68]	; 350c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    34ca:	025c      	lsls	r4, r3, #9
    34cc:	fb03 030c 	mla	r3, r3, ip, r0
    34d0:	480f      	ldr	r0, [pc, #60]	; (3510 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    34d2:	4358      	muls	r0, r3
    34d4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    34d8:	eb04 000c 	add.w	r0, r4, ip
    34dc:	f643 5409 	movw	r4, #15625	; 0x3d09
    34e0:	fb1c f404 	smulbb	r4, ip, r4
    34e4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    34e8:	f643 5508 	movw	r5, #15624	; 0x3d08
    34ec:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    34f0:	442c      	add	r4, r5
    34f2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    34f6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    34fa:	bf84      	itt	hi
    34fc:	f04f 0c00 	movhi.w	ip, #0
    3500:	1c40      	addhi	r0, r0, #1
    3502:	6008      	str	r0, [r1, #0]
    3504:	f882 c000 	strb.w	ip, [r2]
    3508:	bc30      	pop	{r4, r5}
    350a:	4770      	bx	lr
    350c:	ffffc2f7 	.word	0xffffc2f7
    3510:	00010c6f 	.word	0x00010c6f

00003514 <MPSL_IRQ_RTC0_Handler>:
    3514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3518:	4d3b      	ldr	r5, [pc, #236]	; (3608 <MPSL_IRQ_RTC0_Handler+0xf4>)
    351a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    351e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 360c <MPSL_IRQ_RTC0_Handler+0xf8>
    3522:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3526:	f44f 6600 	mov.w	r6, #2048	; 0x800
    352a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    352e:	f04f 0400 	mov.w	r4, #0
    3532:	d019      	beq.n	3568 <MPSL_IRQ_RTC0_Handler+0x54>
    3534:	4836      	ldr	r0, [pc, #216]	; (3610 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3536:	6800      	ldr	r0, [r0, #0]
    3538:	b1b0      	cbz	r0, 3568 <MPSL_IRQ_RTC0_Handler+0x54>
    353a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    353e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3542:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    3546:	f8d8 1000 	ldr.w	r1, [r8]
    354a:	1a40      	subs	r0, r0, r1
    354c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3550:	2802      	cmp	r0, #2
    3552:	d302      	bcc.n	355a <MPSL_IRQ_RTC0_Handler+0x46>
    3554:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3558:	d906      	bls.n	3568 <MPSL_IRQ_RTC0_Handler+0x54>
    355a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    355e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3562:	2004      	movs	r0, #4
    3564:	f7fe fe7e 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3568:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    356c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3570:	d01a      	beq.n	35a8 <MPSL_IRQ_RTC0_Handler+0x94>
    3572:	4828      	ldr	r0, [pc, #160]	; (3614 <MPSL_IRQ_RTC0_Handler+0x100>)
    3574:	6800      	ldr	r0, [r0, #0]
    3576:	b1b8      	cbz	r0, 35a8 <MPSL_IRQ_RTC0_Handler+0x94>
    3578:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    357c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3580:	4825      	ldr	r0, [pc, #148]	; (3618 <MPSL_IRQ_RTC0_Handler+0x104>)
    3582:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3586:	f8d8 1000 	ldr.w	r1, [r8]
    358a:	1a40      	subs	r0, r0, r1
    358c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3590:	2802      	cmp	r0, #2
    3592:	d302      	bcc.n	359a <MPSL_IRQ_RTC0_Handler+0x86>
    3594:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3598:	d906      	bls.n	35a8 <MPSL_IRQ_RTC0_Handler+0x94>
    359a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    359e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    35a2:	2005      	movs	r0, #5
    35a4:	f7fe fe5e 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35a8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    35ac:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    35b0:	d01a      	beq.n	35e8 <MPSL_IRQ_RTC0_Handler+0xd4>
    35b2:	481a      	ldr	r0, [pc, #104]	; (361c <MPSL_IRQ_RTC0_Handler+0x108>)
    35b4:	6800      	ldr	r0, [r0, #0]
    35b6:	b1b8      	cbz	r0, 35e8 <MPSL_IRQ_RTC0_Handler+0xd4>
    35b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    35bc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    35c0:	4817      	ldr	r0, [pc, #92]	; (3620 <MPSL_IRQ_RTC0_Handler+0x10c>)
    35c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35c6:	f8d8 1000 	ldr.w	r1, [r8]
    35ca:	1a40      	subs	r0, r0, r1
    35cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35d0:	2802      	cmp	r0, #2
    35d2:	d302      	bcc.n	35da <MPSL_IRQ_RTC0_Handler+0xc6>
    35d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    35d8:	d906      	bls.n	35e8 <MPSL_IRQ_RTC0_Handler+0xd4>
    35da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35de:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    35e2:	2006      	movs	r0, #6
    35e4:	f7fe fe3e 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35e8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    35ec:	2800      	cmp	r0, #0
    35ee:	bf08      	it	eq
    35f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f4:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    35f8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    35fc:	4809      	ldr	r0, [pc, #36]	; (3624 <MPSL_IRQ_RTC0_Handler+0x110>)
    35fe:	68c1      	ldr	r1, [r0, #12]
    3600:	1c49      	adds	r1, r1, #1
    3602:	60c1      	str	r1, [r0, #12]
    3604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3608:	4000b000 	.word	0x4000b000
    360c:	4000b504 	.word	0x4000b504
    3610:	4000b140 	.word	0x4000b140
    3614:	4000b144 	.word	0x4000b144
    3618:	4000b004 	.word	0x4000b004
    361c:	4000b148 	.word	0x4000b148
    3620:	4000b008 	.word	0x4000b008
    3624:	20000048 	.word	0x20000048

00003628 <MPSL_IRQ_TIMER0_Handler>:
    3628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    362c:	4d38      	ldr	r5, [pc, #224]	; (3710 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    362e:	7828      	ldrb	r0, [r5, #0]
    3630:	2804      	cmp	r0, #4
    3632:	d068      	beq.n	3706 <MPSL_IRQ_TIMER0_Handler+0xde>
    3634:	1ca8      	adds	r0, r5, #2
    3636:	2201      	movs	r2, #1
    3638:	7801      	ldrb	r1, [r0, #0]
    363a:	b159      	cbz	r1, 3654 <MPSL_IRQ_TIMER0_Handler+0x2c>
    363c:	2901      	cmp	r1, #1
    363e:	bf08      	it	eq
    3640:	706a      	strbeq	r2, [r5, #1]
    3642:	d002      	beq.n	364a <MPSL_IRQ_TIMER0_Handler+0x22>
    3644:	7869      	ldrb	r1, [r5, #1]
    3646:	2900      	cmp	r1, #0
    3648:	d058      	beq.n	36fc <MPSL_IRQ_TIMER0_Handler+0xd4>
    364a:	2102      	movs	r1, #2
    364c:	7001      	strb	r1, [r0, #0]
    364e:	7840      	ldrb	r0, [r0, #1]
    3650:	f000 fafe 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3654:	4c2f      	ldr	r4, [pc, #188]	; (3714 <MPSL_IRQ_TIMER0_Handler+0xec>)
    3656:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    365a:	f04f 0800 	mov.w	r8, #0
    365e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3662:	f44f 7780 	mov.w	r7, #256	; 0x100
    3666:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    366a:	d00a      	beq.n	3682 <MPSL_IRQ_TIMER0_Handler+0x5a>
    366c:	482a      	ldr	r0, [pc, #168]	; (3718 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    366e:	6800      	ldr	r0, [r0, #0]
    3670:	b138      	cbz	r0, 3682 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3672:	2003      	movs	r0, #3
    3674:	f000 faec 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3678:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    367c:	2003      	movs	r0, #3
    367e:	f7fe fdf1 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3682:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3686:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    368a:	d00a      	beq.n	36a2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    368c:	4823      	ldr	r0, [pc, #140]	; (371c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    368e:	6800      	ldr	r0, [r0, #0]
    3690:	b138      	cbz	r0, 36a2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3692:	2002      	movs	r0, #2
    3694:	f000 fadc 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3698:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    369c:	2002      	movs	r0, #2
    369e:	f7fe fde1 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36a2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36a6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    36aa:	d00a      	beq.n	36c2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    36ac:	481c      	ldr	r0, [pc, #112]	; (3720 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    36ae:	6800      	ldr	r0, [r0, #0]
    36b0:	b138      	cbz	r0, 36c2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    36b2:	2001      	movs	r0, #1
    36b4:	f000 facc 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    36b8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    36bc:	2001      	movs	r0, #1
    36be:	f7fe fdd1 	bl	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36c2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    36ca:	bf08      	it	eq
    36cc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    36d0:	4814      	ldr	r0, [pc, #80]	; (3724 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    36d2:	6800      	ldr	r0, [r0, #0]
    36d4:	2800      	cmp	r0, #0
    36d6:	bf08      	it	eq
    36d8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    36dc:	2000      	movs	r0, #0
    36de:	f000 fab7 	bl	3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    36e2:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    36e6:	2004      	movs	r0, #4
    36e8:	7028      	strb	r0, [r5, #0]
    36ea:	f8c5 8004 	str.w	r8, [r5, #4]
    36ee:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    36f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36f6:	2000      	movs	r0, #0
    36f8:	f7fe bdb4 	b.w	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    36fc:	f240 419f 	movw	r1, #1183	; 0x49f
    3700:	206c      	movs	r0, #108	; 0x6c
    3702:	f000 ff61 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    370a:	2007      	movs	r0, #7
    370c:	f7fe bdaa 	b.w	2264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3710:	20000048 	.word	0x20000048
    3714:	40008000 	.word	0x40008000
    3718:	4000814c 	.word	0x4000814c
    371c:	40008148 	.word	0x40008148
    3720:	40008144 	.word	0x40008144
    3724:	40008140 	.word	0x40008140
    3728:	2201      	movs	r2, #1
    372a:	0211      	lsls	r1, r2, #8
    372c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3730:	2000      	movs	r0, #0
    3732:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3736:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    373a:	f3bf 8f4f 	dsb	sy
    373e:	f3bf 8f6f 	isb	sy
    3742:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3746:	490e      	ldr	r1, [pc, #56]	; (3780 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3748:	f841 2f04 	str.w	r2, [r1, #4]!
    374c:	1e43      	subs	r3, r0, #1
    374e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3752:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3756:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    375a:	4b0a      	ldr	r3, [pc, #40]	; (3784 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    375c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3760:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3764:	1d1b      	adds	r3, r3, #4
    3766:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    376a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    376e:	1d1b      	adds	r3, r3, #4
    3770:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3774:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3778:	60ca      	str	r2, [r1, #12]
    377a:	4903      	ldr	r1, [pc, #12]	; (3788 <MPSL_IRQ_TIMER0_Handler+0x160>)
    377c:	7048      	strb	r0, [r1, #1]
    377e:	4770      	bx	lr
    3780:	40008000 	.word	0x40008000
    3784:	40008004 	.word	0x40008004
    3788:	20000048 	.word	0x20000048

0000378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    378c:	4801      	ldr	r0, [pc, #4]	; (3794 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    378e:	6800      	ldr	r0, [r0, #0]
    3790:	4770      	bx	lr
    3792:	0000      	.short	0x0000
    3794:	4000b504 	.word	0x4000b504

00003798 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3798:	b430      	push	{r4, r5}
    379a:	f3ef 8c10 	mrs	ip, PRIMASK
    379e:	b672      	cpsid	i
    37a0:	2500      	movs	r5, #0
    37a2:	4b0b      	ldr	r3, [pc, #44]	; (37d0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    37a4:	4a0b      	ldr	r2, [pc, #44]	; (37d4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    37a6:	bf00      	nop
    37a8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    37ac:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    37b0:	b12c      	cbz	r4, 37be <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    37b2:	68d1      	ldr	r1, [r2, #12]
    37b4:	1c49      	adds	r1, r1, #1
    37b6:	60d1      	str	r1, [r2, #12]
    37b8:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    37bc:	e7f4      	b.n	37a8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    37be:	68d2      	ldr	r2, [r2, #12]
    37c0:	f1bc 0f00 	cmp.w	ip, #0
    37c4:	d100      	bne.n	37c8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    37c6:	b662      	cpsie	i
    37c8:	e9c0 1200 	strd	r1, r2, [r0]
    37cc:	bc30      	pop	{r4, r5}
    37ce:	4770      	bx	lr
    37d0:	4000b000 	.word	0x4000b000
    37d4:	20000048 	.word	0x20000048

000037d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    37d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37dc:	4e46      	ldr	r6, [pc, #280]	; (38f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    37de:	4605      	mov	r5, r0
    37e0:	1eb7      	subs	r7, r6, #2
    37e2:	7833      	ldrb	r3, [r6, #0]
    37e4:	68b9      	ldr	r1, [r7, #8]
    37e6:	2b01      	cmp	r3, #1
    37e8:	bf04      	itt	eq
    37ea:	42a9      	cmpeq	r1, r5
    37ec:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37f0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    37f4:	4a41      	ldr	r2, [pc, #260]	; (38fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    37f6:	6010      	str	r0, [r2, #0]
    37f8:	4a42      	ldr	r2, [pc, #264]	; (3904 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    37fa:	4841      	ldr	r0, [pc, #260]	; (3900 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    37fc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3800:	f102 0c04 	add.w	ip, r2, #4
    3804:	f04f 0400 	mov.w	r4, #0
    3808:	2b00      	cmp	r3, #0
    380a:	d062      	beq.n	38d2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    380c:	483e      	ldr	r0, [pc, #248]	; (3908 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    380e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3812:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    3816:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    381a:	bf00      	nop
    381c:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    3820:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3824:	f04f 0801 	mov.w	r8, #1
    3828:	2800      	cmp	r0, #0
    382a:	bf01      	itttt	eq
    382c:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3830:	2800      	cmpeq	r0, #0
    3832:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    3836:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    383a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    383e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3842:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3846:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    384a:	4830      	ldr	r0, [pc, #192]	; (390c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    384c:	f8d0 c000 	ldr.w	ip, [r0]
    3850:	eba5 0c0c 	sub.w	ip, r5, ip
    3854:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3858:	f1bc 0f02 	cmp.w	ip, #2
    385c:	d344      	bcc.n	38e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    385e:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3862:	d841      	bhi.n	38e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3864:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3868:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    386c:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3870:	b12b      	cbz	r3, 387e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    3872:	6802      	ldr	r2, [r0, #0]
    3874:	1a8a      	subs	r2, r1, r2
    3876:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    387a:	2a02      	cmp	r2, #2
    387c:	d3f9      	bcc.n	3872 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    387e:	f8c7 8004 	str.w	r8, [r7, #4]
    3882:	703c      	strb	r4, [r7, #0]
    3884:	f7ff ff50 	bl	3728 <MPSL_IRQ_TIMER0_Handler+0x100>
    3888:	4821      	ldr	r0, [pc, #132]	; (3910 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    388a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    388e:	f364 0101 	bfi	r1, r4, #0, #2
    3892:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3896:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    389a:	2102      	movs	r1, #2
    389c:	f361 0201 	bfi	r2, r1, #0, #2
    38a0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    38a4:	2104      	movs	r1, #4
    38a6:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    38aa:	f8c0 800c 	str.w	r8, [r0, #12]
    38ae:	6879      	ldr	r1, [r7, #4]
    38b0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38b4:	1580      	asrs	r0, r0, #22
    38b6:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    38ba:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    38be:	4915      	ldr	r1, [pc, #84]	; (3914 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    38c0:	05c0      	lsls	r0, r0, #23
    38c2:	6008      	str	r0, [r1, #0]
    38c4:	2004      	movs	r0, #4
    38c6:	60bd      	str	r5, [r7, #8]
    38c8:	7070      	strb	r0, [r6, #1]
    38ca:	f886 8000 	strb.w	r8, [r6]
    38ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38d2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    38d6:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    38da:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    38de:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    38e2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    38e6:	e799      	b.n	381c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    38e8:	2000      	movs	r0, #0
    38ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    38ee:	f240 2193 	movw	r1, #659	; 0x293
    38f2:	206c      	movs	r0, #108	; 0x6c
    38f4:	f000 fe68 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38f8:	2000004a 	.word	0x2000004a
    38fc:	4001f508 	.word	0x4001f508
    3900:	fffbfffd 	.word	0xfffbfffd
    3904:	4000b000 	.word	0x4000b000
    3908:	fffafffd 	.word	0xfffafffd
    390c:	4000b504 	.word	0x4000b504
    3910:	40008000 	.word	0x40008000
    3914:	4001f504 	.word	0x4001f504

00003918 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3918:	b570      	push	{r4, r5, r6, lr}
    391a:	4c2a      	ldr	r4, [pc, #168]	; (39c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    391c:	68a1      	ldr	r1, [r4, #8]
    391e:	4281      	cmp	r1, r0
    3920:	bf14      	ite	ne
    3922:	2201      	movne	r2, #1
    3924:	2200      	moveq	r2, #0
    3926:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 39c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    392a:	f89c 5000 	ldrb.w	r5, [ip]
    392e:	2d02      	cmp	r5, #2
    3930:	d002      	beq.n	3938 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3932:	2a00      	cmp	r2, #0
    3934:	d034      	beq.n	39a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    3936:	e002      	b.n	393e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3938:	2a00      	cmp	r2, #0
    393a:	bf08      	it	eq
    393c:	bd70      	popeq	{r4, r5, r6, pc}
    393e:	7862      	ldrb	r2, [r4, #1]
    3940:	b39a      	cbz	r2, 39aa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3942:	4b22      	ldr	r3, [pc, #136]	; (39cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3948:	601a      	str	r2, [r3, #0]
    394a:	4b21      	ldr	r3, [pc, #132]	; (39d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    394c:	1392      	asrs	r2, r2, #14
    394e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3952:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3956:	2200      	movs	r2, #0
    3958:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    395c:	4a1d      	ldr	r2, [pc, #116]	; (39d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    395e:	6816      	ldr	r6, [r2, #0]
    3960:	1b86      	subs	r6, r0, r6
    3962:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3966:	2e02      	cmp	r6, #2
    3968:	d324      	bcc.n	39b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    396a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    396e:	d821      	bhi.n	39b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3970:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3974:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3978:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    397c:	b12d      	cbz	r5, 398a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    397e:	6813      	ldr	r3, [r2, #0]
    3980:	1acb      	subs	r3, r1, r3
    3982:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3986:	2b02      	cmp	r3, #2
    3988:	d3f9      	bcc.n	397e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    398a:	4b13      	ldr	r3, [pc, #76]	; (39d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    398c:	2102      	movs	r1, #2
    398e:	074a      	lsls	r2, r1, #29
    3990:	601a      	str	r2, [r3, #0]
    3992:	60a0      	str	r0, [r4, #8]
    3994:	2004      	movs	r0, #4
    3996:	f88c 0001 	strb.w	r0, [ip, #1]
    399a:	f88c 1000 	strb.w	r1, [ip]
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	f240 21a1 	movw	r1, #673	; 0x2a1
    39a4:	206c      	movs	r0, #108	; 0x6c
    39a6:	f000 fe0f 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39aa:	f240 21a5 	movw	r1, #677	; 0x2a5
    39ae:	206c      	movs	r0, #108	; 0x6c
    39b0:	f000 fe0a 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39b4:	2000      	movs	r0, #0
    39b6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    39ba:	f240 21b1 	movw	r1, #689	; 0x2b1
    39be:	206c      	movs	r0, #108	; 0x6c
    39c0:	f000 fe02 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39c4:	20000048 	.word	0x20000048
    39c8:	2000004a 	.word	0x2000004a
    39cc:	4001f508 	.word	0x4001f508
    39d0:	4000b000 	.word	0x4000b000
    39d4:	4000b504 	.word	0x4000b504
    39d8:	4001f504 	.word	0x4001f504

000039dc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    39dc:	4801      	ldr	r0, [pc, #4]	; (39e4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    39de:	6880      	ldr	r0, [r0, #8]
    39e0:	4770      	bx	lr
    39e2:	0000      	.short	0x0000
    39e4:	20000048 	.word	0x20000048

000039e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    39e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39ec:	4836      	ldr	r0, [pc, #216]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    39ee:	4a35      	ldr	r2, [pc, #212]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    39f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    39f4:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    39f8:	1d03      	adds	r3, r0, #4
    39fa:	2100      	movs	r1, #0
    39fc:	f89c 4000 	ldrb.w	r4, [ip]
    3a00:	b184      	cbz	r4, 3a24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    3a02:	4a33      	ldr	r2, [pc, #204]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a04:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3a08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3a0c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3a10:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3a14:	2301      	movs	r3, #1
    3a16:	2a00      	cmp	r2, #0
    3a18:	bf04      	itt	eq
    3a1a:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3a1e:	2800      	cmpeq	r0, #0
    3a20:	d111      	bne.n	3a46 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    3a22:	e00a      	b.n	3a3a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    3a24:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3a28:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3a2c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3a30:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3a34:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3a38:	e7ea      	b.n	3a10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3a3a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3a3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3a42:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3a46:	2c02      	cmp	r4, #2
    3a48:	d004      	beq.n	3a54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3a4a:	f240 21bd 	movw	r1, #701	; 0x2bd
    3a4e:	206c      	movs	r0, #108	; 0x6c
    3a50:	f000 fdba 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a54:	4e1f      	ldr	r6, [pc, #124]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a56:	6830      	ldr	r0, [r6, #0]
    3a58:	4c1f      	ldr	r4, [pc, #124]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a5a:	1cc0      	adds	r0, r0, #3
    3a5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a60:	68a2      	ldr	r2, [r4, #8]
    3a62:	4d1e      	ldr	r5, [pc, #120]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3a64:	4290      	cmp	r0, r2
    3a66:	d00b      	beq.n	3a80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3a68:	6837      	ldr	r7, [r6, #0]
    3a6a:	1bd7      	subs	r7, r2, r7
    3a6c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3a70:	2f04      	cmp	r7, #4
    3a72:	d305      	bcc.n	3a80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3a74:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3a78:	d802      	bhi.n	3a80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3a7a:	f7ff fead 	bl	37d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3a7e:	e01b      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3a80:	6830      	ldr	r0, [r6, #0]
    3a82:	1a10      	subs	r0, r2, r0
    3a84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a88:	2802      	cmp	r0, #2
    3a8a:	d313      	bcc.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3a8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a90:	d810      	bhi.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3a92:	4a13      	ldr	r2, [pc, #76]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3a98:	6010      	str	r0, [r2, #0]
    3a9a:	6063      	str	r3, [r4, #4]
    3a9c:	7021      	strb	r1, [r4, #0]
    3a9e:	606b      	str	r3, [r5, #4]
    3aa0:	60eb      	str	r3, [r5, #12]
    3aa2:	0040      	lsls	r0, r0, #1
    3aa4:	1f11      	subs	r1, r2, #4
    3aa6:	6008      	str	r0, [r1, #0]
    3aa8:	2004      	movs	r0, #4
    3aaa:	f88c 0001 	strb.w	r0, [ip, #1]
    3aae:	f88c 3000 	strb.w	r3, [ip]
    3ab2:	e001      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3ab4:	6063      	str	r3, [r4, #4]
    3ab6:	7021      	strb	r1, [r4, #0]
    3ab8:	6860      	ldr	r0, [r4, #4]
    3aba:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ac2:	0000      	.short	0x0000
    3ac4:	fffbfffd 	.word	0xfffbfffd
    3ac8:	4000b000 	.word	0x4000b000
    3acc:	2000004a 	.word	0x2000004a
    3ad0:	fffafffd 	.word	0xfffafffd
    3ad4:	4000b504 	.word	0x4000b504
    3ad8:	20000048 	.word	0x20000048
    3adc:	40008000 	.word	0x40008000
    3ae0:	4001f508 	.word	0x4001f508

00003ae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ae8:	4a54      	ldr	r2, [pc, #336]	; (3c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    3aea:	2500      	movs	r5, #0
    3aec:	2401      	movs	r4, #1
    3aee:	f892 c000 	ldrb.w	ip, [r2]
    3af2:	7853      	ldrb	r3, [r2, #1]
    3af4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    3af8:	2807      	cmp	r0, #7
    3afa:	d27d      	bcs.n	3bf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3afc:	e8df f000 	tbb	[pc, r0]
    3b00:	04040404 	.word	0x04040404
    3b04:	00585858 	.word	0x00585858
    3b08:	4a4d      	ldr	r2, [pc, #308]	; (3c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    3b0a:	6897      	ldr	r7, [r2, #8]
    3b0c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    3b10:	bf04      	itt	eq
    3b12:	7852      	ldrbeq	r2, [r2, #1]
    3b14:	2a00      	cmpeq	r2, #0
    3b16:	d003      	beq.n	3b20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3b18:	f1bc 0f02 	cmp.w	ip, #2
    3b1c:	d005      	beq.n	3b2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3b1e:	e026      	b.n	3b6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3b20:	f240 314d 	movw	r1, #845	; 0x34d
    3b24:	206c      	movs	r0, #108	; 0x6c
    3b26:	f000 fd4f 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b2a:	1f1a      	subs	r2, r3, #4
    3b2c:	b2d2      	uxtb	r2, r2
    3b2e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    3b32:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    3b36:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3b3a:	2200      	movs	r2, #0
    3b3c:	f1bc 0f01 	cmp.w	ip, #1
    3b40:	d003      	beq.n	3b4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    3b42:	f1bc 0f02 	cmp.w	ip, #2
    3b46:	d008      	beq.n	3b5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3b48:	e00e      	b.n	3b68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3b4a:	2b04      	cmp	r3, #4
    3b4c:	bf24      	itt	cs
    3b4e:	6837      	ldrcs	r7, [r6, #0]
    3b50:	2f00      	cmpcs	r7, #0
    3b52:	bf08      	it	eq
    3b54:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3b58:	e006      	b.n	3b68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3b5a:	2b04      	cmp	r3, #4
    3b5c:	bf24      	itt	cs
    3b5e:	6837      	ldrcs	r7, [r6, #0]
    3b60:	2f00      	cmpcs	r7, #0
    3b62:	bf08      	it	eq
    3b64:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3b68:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3b6c:	d1e5      	bne.n	3b3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3b6e:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    3b72:	f100 0210 	add.w	r2, r0, #16
    3b76:	fa04 f202 	lsl.w	r2, r4, r2
    3b7a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3b7e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3b82:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3b86:	b2db      	uxtb	r3, r3
    3b88:	4463      	add	r3, ip
    3b8a:	601c      	str	r4, [r3, #0]
    3b8c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3b90:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3b94:	eba1 0303 	sub.w	r3, r1, r3
    3b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b9c:	2b03      	cmp	r3, #3
    3b9e:	bf26      	itte	cs
    3ba0:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3ba4:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3ba8:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3bac:	d237      	bcs.n	3c1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3bae:	e03c      	b.n	3c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3bb0:	f1bc 0f00 	cmp.w	ip, #0
    3bb4:	d006      	beq.n	3bc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3bb6:	4283      	cmp	r3, r0
    3bb8:	d104      	bne.n	3bc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3bba:	f240 316d 	movw	r1, #877	; 0x36d
    3bbe:	206c      	movs	r0, #108	; 0x6c
    3bc0:	f000 fd02 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bc4:	1f02      	subs	r2, r0, #4
    3bc6:	b2d3      	uxtb	r3, r2
    3bc8:	2b03      	cmp	r3, #3
    3bca:	d304      	bcc.n	3bd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3bcc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    3bd0:	206c      	movs	r0, #108	; 0x6c
    3bd2:	f000 fcf9 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd6:	f8df c070 	ldr.w	ip, [pc, #112]	; 3c48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    3bda:	f103 0210 	add.w	r2, r3, #16
    3bde:	fa04 f202 	lsl.w	r2, r4, r2
    3be2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3be6:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3bea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3bee:	f84c 5003 	str.w	r5, [ip, r3]
    3bf2:	4b16      	ldr	r3, [pc, #88]	; (3c4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	e000      	b.n	3bfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3bf8:	e01a      	b.n	3c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    3bfa:	1f00      	subs	r0, r0, #4
    3bfc:	1acb      	subs	r3, r1, r3
    3bfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3c02:	b2c0      	uxtb	r0, r0
    3c04:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3c08:	2b02      	cmp	r3, #2
    3c0a:	d30b      	bcc.n	3c24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    3c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3c10:	d808      	bhi.n	3c24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    3c12:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c16:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3c1a:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3c1e:	2001      	movs	r0, #1
    3c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c24:	2100      	movs	r1, #0
    3c26:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c2a:	2000      	movs	r0, #0
    3c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c30:	f240 3171 	movw	r1, #881	; 0x371
    3c34:	206c      	movs	r0, #108	; 0x6c
    3c36:	f000 fcc7 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c3a:	0000      	.short	0x0000
    3c3c:	2000004a 	.word	0x2000004a
    3c40:	20000048 	.word	0x20000048
    3c44:	40008000 	.word	0x40008000
    3c48:	4000b000 	.word	0x4000b000
    3c4c:	4000b504 	.word	0x4000b504

00003c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c54:	2601      	movs	r6, #1
    3c56:	2700      	movs	r7, #0
    3c58:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3c5c:	2807      	cmp	r0, #7
    3c5e:	d251      	bcs.n	3d04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3c60:	e8df f000 	tbb	[pc, r0]
    3c64:	04040404 	.word	0x04040404
    3c68:	00191919 	.word	0x00191919
    3c6c:	f100 0110 	add.w	r1, r0, #16
    3c70:	fa06 f201 	lsl.w	r2, r6, r1
    3c74:	4926      	ldr	r1, [pc, #152]	; (3d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3c76:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3c7a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3c7e:	2200      	movs	r2, #0
    3c80:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3c84:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3c88:	508f      	str	r7, [r1, r2]
    3c8a:	4922      	ldr	r1, [pc, #136]	; (3d14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3c8c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3c90:	9000      	str	r0, [sp, #0]
    3c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c96:	4d20      	ldr	r5, [pc, #128]	; (3d18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3c98:	1f01      	subs	r1, r0, #4
    3c9a:	b2cc      	uxtb	r4, r1
    3c9c:	7829      	ldrb	r1, [r5, #0]
    3c9e:	b179      	cbz	r1, 3cc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3ca0:	786a      	ldrb	r2, [r5, #1]
    3ca2:	4282      	cmp	r2, r0
    3ca4:	d10c      	bne.n	3cc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3ca6:	4a1d      	ldr	r2, [pc, #116]	; (3d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3ca8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3cac:	6010      	str	r0, [r2, #0]
    3cae:	2901      	cmp	r1, #1
    3cb0:	bf08      	it	eq
    3cb2:	f7ff fd39 	bleq	3728 <MPSL_IRQ_TIMER0_Handler+0x100>
    3cb6:	702f      	strb	r7, [r5, #0]
    3cb8:	4919      	ldr	r1, [pc, #100]	; (3d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3cba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3cbe:	6088      	str	r0, [r1, #8]
    3cc0:	4918      	ldr	r1, [pc, #96]	; (3d24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3cc2:	f104 0010 	add.w	r0, r4, #16
    3cc6:	fa06 f000 	lsl.w	r0, r6, r0
    3cca:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3cce:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3cd2:	00a0      	lsls	r0, r4, #2
    3cd4:	4408      	add	r0, r1
    3cd6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3cda:	4a13      	ldr	r2, [pc, #76]	; (3d28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3cdc:	6812      	ldr	r2, [r2, #0]
    3cde:	1a80      	subs	r0, r0, r2
    3ce0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ce4:	2802      	cmp	r0, #2
    3ce6:	d307      	bcc.n	3cf8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3ce8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3cec:	2000      	movs	r0, #0
    3cee:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3cf2:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    3cf6:	500f      	str	r7, [r1, r0]
    3cf8:	480c      	ldr	r0, [pc, #48]	; (3d2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3cfa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3cfe:	9000      	str	r0, [sp, #0]
    3d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d04:	f240 31f5 	movw	r1, #1013	; 0x3f5
    3d08:	206c      	movs	r0, #108	; 0x6c
    3d0a:	f000 fc5d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d0e:	0000      	.short	0x0000
    3d10:	40008000 	.word	0x40008000
    3d14:	40008140 	.word	0x40008140
    3d18:	2000004a 	.word	0x2000004a
    3d1c:	4001f508 	.word	0x4001f508
    3d20:	20000048 	.word	0x20000048
    3d24:	4000b000 	.word	0x4000b000
    3d28:	4000b504 	.word	0x4000b504
    3d2c:	4000b140 	.word	0x4000b140

00003d30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3d30:	4825      	ldr	r0, [pc, #148]	; (3dc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    3d32:	4a24      	ldr	r2, [pc, #144]	; (3dc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    3d34:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3d38:	4924      	ldr	r1, [pc, #144]	; (3dcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3d3a:	1d03      	adds	r3, r0, #4
    3d3c:	f891 c000 	ldrb.w	ip, [r1]
    3d40:	2100      	movs	r1, #0
    3d42:	f1bc 0f00 	cmp.w	ip, #0
    3d46:	d010      	beq.n	3d6a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3d48:	4a21      	ldr	r2, [pc, #132]	; (3dd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3d4a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3d4e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3d52:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3d56:	bf00      	nop
    3d58:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3d5c:	2a00      	cmp	r2, #0
    3d5e:	bf04      	itt	eq
    3d60:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3d64:	2800      	cmpeq	r0, #0
    3d66:	d111      	bne.n	3d8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3d68:	e00a      	b.n	3d80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3d6a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3d6e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3d72:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3d76:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3d7a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3d7e:	e7eb      	b.n	3d58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3d80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3d84:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3d88:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3d8c:	4811      	ldr	r0, [pc, #68]	; (3dd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3d8e:	f04f 32ff 	mov.w	r2, #4294967295
    3d92:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3d96:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3d9a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3d9e:	f100 0204 	add.w	r2, r0, #4
    3da2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3da6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3daa:	f102 0204 	add.w	r2, r2, #4
    3dae:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3db2:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3db6:	f102 0204 	add.w	r2, r2, #4
    3dba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3dbe:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    3dc2:	4770      	bx	lr
    3dc4:	fffbfffd 	.word	0xfffbfffd
    3dc8:	4000b000 	.word	0x4000b000
    3dcc:	2000004a 	.word	0x2000004a
    3dd0:	fffafffd 	.word	0xfffafffd
    3dd4:	40008000 	.word	0x40008000

00003dd8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3dd8:	b510      	push	{r4, lr}
    3dda:	2807      	cmp	r0, #7
    3ddc:	d20d      	bcs.n	3dfa <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3dde:	e8df f000 	tbb	[pc, r0]
    3de2:	0404      	.short	0x0404
    3de4:	06060404 	.word	0x06060404
    3de8:	0006      	.short	0x0006
    3dea:	4906      	ldr	r1, [pc, #24]	; (3e04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3dec:	e002      	b.n	3df4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3dee:	1f00      	subs	r0, r0, #4
    3df0:	4905      	ldr	r1, [pc, #20]	; (3e08 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3df2:	b2c0      	uxtb	r0, r0
    3df4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	f240 3195 	movw	r1, #917	; 0x395
    3dfe:	206c      	movs	r0, #108	; 0x6c
    3e00:	f000 fbe2 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e04:	40008140 	.word	0x40008140
    3e08:	4000b140 	.word	0x4000b140

00003e0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3e0c:	b570      	push	{r4, r5, r6, lr}
    3e0e:	481f      	ldr	r0, [pc, #124]	; (3e8c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3e10:	2400      	movs	r4, #0
    3e12:	2104      	movs	r1, #4
    3e14:	7004      	strb	r4, [r0, #0]
    3e16:	1e80      	subs	r0, r0, #2
    3e18:	7001      	strb	r1, [r0, #0]
    3e1a:	0589      	lsls	r1, r1, #22
    3e1c:	60c4      	str	r4, [r0, #12]
    3e1e:	6081      	str	r1, [r0, #8]
    3e20:	f7ff fc82 	bl	3728 <MPSL_IRQ_TIMER0_Handler+0x100>
    3e24:	2501      	movs	r5, #1
    3e26:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3e2a:	02eb      	lsls	r3, r5, #11
    3e2c:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3e30:	f3bf 8f4f 	dsb	sy
    3e34:	f3bf 8f6f 	isb	sy
    3e38:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3e3c:	4814      	ldr	r0, [pc, #80]	; (3e90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3e3e:	6045      	str	r5, [r0, #4]
    3e40:	6085      	str	r5, [r0, #8]
    3e42:	4914      	ldr	r1, [pc, #80]	; (3e94 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3e44:	680a      	ldr	r2, [r1, #0]
    3e46:	2a00      	cmp	r2, #0
    3e48:	d1fc      	bne.n	3e44 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3e4a:	1e51      	subs	r1, r2, #1
    3e4c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3e50:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3e54:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3e58:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3e5c:	490e      	ldr	r1, [pc, #56]	; (3e98 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3e5e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3e62:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3e66:	1d09      	adds	r1, r1, #4
    3e68:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3e6c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3e70:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3e74:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3e78:	6005      	str	r5, [r0, #0]
    3e7a:	f44f 7182 	mov.w	r1, #260	; 0x104
    3e7e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3e82:	2102      	movs	r1, #2
    3e84:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3e88:	bd70      	pop	{r4, r5, r6, pc}
    3e8a:	0000      	.short	0x0000
    3e8c:	2000004a 	.word	0x2000004a
    3e90:	4000b000 	.word	0x4000b000
    3e94:	4000b504 	.word	0x4000b504
    3e98:	4000b004 	.word	0x4000b004

00003e9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3e9c:	4808      	ldr	r0, [pc, #32]	; (3ec0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3e9e:	f990 0000 	ldrsb.w	r0, [r0]
    3ea2:	2800      	cmp	r0, #0
    3ea4:	bfb8      	it	lt
    3ea6:	4770      	bxlt	lr
    3ea8:	f000 011f 	and.w	r1, r0, #31
    3eac:	2201      	movs	r2, #1
    3eae:	fa02 f101 	lsl.w	r1, r2, r1
    3eb2:	0940      	lsrs	r0, r0, #5
    3eb4:	0080      	lsls	r0, r0, #2
    3eb6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3eba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3ebe:	4770      	bx	lr
    3ec0:	20000328 	.word	0x20000328

00003ec4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3ec4:	4803      	ldr	r0, [pc, #12]	; (3ed4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3ec6:	7800      	ldrb	r0, [r0, #0]
    3ec8:	2803      	cmp	r0, #3
    3eca:	bf0c      	ite	eq
    3ecc:	2001      	moveq	r0, #1
    3ece:	2000      	movne	r0, #0
    3ed0:	4770      	bx	lr
    3ed2:	0000      	.short	0x0000
    3ed4:	20000314 	.word	0x20000314

00003ed8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3ed8:	4801      	ldr	r0, [pc, #4]	; (3ee0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3eda:	8840      	ldrh	r0, [r0, #2]
    3edc:	4770      	bx	lr
    3ede:	0000      	.short	0x0000
    3ee0:	20000314 	.word	0x20000314

00003ee4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3ee4:	4803      	ldr	r0, [pc, #12]	; (3ef4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3ee6:	7800      	ldrb	r0, [r0, #0]
    3ee8:	2802      	cmp	r0, #2
    3eea:	bf16      	itet	ne
    3eec:	2803      	cmpne	r0, #3
    3eee:	2001      	moveq	r0, #1
    3ef0:	2000      	movne	r0, #0
    3ef2:	4770      	bx	lr
    3ef4:	20000314 	.word	0x20000314

00003ef8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3ef8:	4802      	ldr	r0, [pc, #8]	; (3f04 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3efa:	2100      	movs	r1, #0
    3efc:	7001      	strb	r1, [r0, #0]
    3efe:	8041      	strh	r1, [r0, #2]
    3f00:	4770      	bx	lr
    3f02:	0000      	.short	0x0000
    3f04:	20000314 	.word	0x20000314

00003f08 <MPSL_IRQ_CLOCK_Handler>:
    3f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f0c:	4c16      	ldr	r4, [pc, #88]	; (3f68 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3f0e:	7a60      	ldrb	r0, [r4, #9]
    3f10:	2800      	cmp	r0, #0
    3f12:	d027      	beq.n	3f64 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3f14:	f44f 7180 	mov.w	r1, #256	; 0x100
    3f18:	058d      	lsls	r5, r1, #22
    3f1a:	4628      	mov	r0, r5
    3f1c:	f008 ff69 	bl	cdf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f20:	4680      	mov	r8, r0
    3f22:	f44f 7182 	mov.w	r1, #260	; 0x104
    3f26:	4628      	mov	r0, r5
    3f28:	f008 ff63 	bl	cdf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f2c:	2600      	movs	r6, #0
    3f2e:	4607      	mov	r7, r0
    3f30:	f1b8 0f00 	cmp.w	r8, #0
    3f34:	d009      	beq.n	3f4a <MPSL_IRQ_CLOCK_Handler+0x42>
    3f36:	2001      	movs	r0, #1
    3f38:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f3c:	7920      	ldrb	r0, [r4, #4]
    3f3e:	b120      	cbz	r0, 3f4a <MPSL_IRQ_CLOCK_Handler+0x42>
    3f40:	7126      	strb	r6, [r4, #4]
    3f42:	69e0      	ldr	r0, [r4, #28]
    3f44:	b108      	cbz	r0, 3f4a <MPSL_IRQ_CLOCK_Handler+0x42>
    3f46:	4780      	blx	r0
    3f48:	61e6      	str	r6, [r4, #28]
    3f4a:	b137      	cbz	r7, 3f5a <MPSL_IRQ_CLOCK_Handler+0x52>
    3f4c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3f50:	2002      	movs	r0, #2
    3f52:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f56:	f000 fa6b 	bl	4430 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3f5a:	4640      	mov	r0, r8
    3f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f60:	f000 b858 	b.w	4014 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f68:	20000058 	.word	0x20000058
    3f6c:	b510      	push	{r4, lr}
    3f6e:	f008 ffea 	bl	cf46 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3f72:	b930      	cbnz	r0, 3f82 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3f74:	f009 f808 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f78:	b918      	cbnz	r0, 3f82 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3f7a:	f009 f83b 	bl	cff4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3f7e:	2800      	cmp	r0, #0
    3f80:	d002      	beq.n	3f88 <MPSL_IRQ_CLOCK_Handler+0x80>
    3f82:	4902      	ldr	r1, [pc, #8]	; (3f8c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3f84:	2002      	movs	r0, #2
    3f86:	6008      	str	r0, [r1, #0]
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	0000      	.short	0x0000
    3f8c:	40000c34 	.word	0x40000c34
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	f000 f991 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3f96:	f000 fa9f 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3f9a:	4c09      	ldr	r4, [pc, #36]	; (3fc0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3f9c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3fa0:	b130      	cbz	r0, 3fb0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3fa2:	f7ff ffe3 	bl	3f6c <MPSL_IRQ_CLOCK_Handler+0x64>
    3fa6:	2001      	movs	r0, #1
    3fa8:	6128      	str	r0, [r5, #16]
    3faa:	2004      	movs	r0, #4
    3fac:	72a0      	strb	r0, [r4, #10]
    3fae:	e004      	b.n	3fba <MPSL_IRQ_CLOCK_Handler+0xb2>
    3fb0:	2003      	movs	r0, #3
    3fb2:	72a0      	strb	r0, [r4, #10]
    3fb4:	2001      	movs	r0, #1
    3fb6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3fba:	2000      	movs	r0, #0
    3fbc:	71e0      	strb	r0, [r4, #7]
    3fbe:	bd70      	pop	{r4, r5, r6, pc}
    3fc0:	20000058 	.word	0x20000058
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	4c12      	ldr	r4, [pc, #72]	; (4010 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3fc8:	79a0      	ldrb	r0, [r4, #6]
    3fca:	b1e0      	cbz	r0, 4006 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3fcc:	79e1      	ldrb	r1, [r4, #7]
    3fce:	1e40      	subs	r0, r0, #1
    3fd0:	4281      	cmp	r1, r0
    3fd2:	da18      	bge.n	4006 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3fd4:	f000 fa80 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3fd8:	4605      	mov	r5, r0
    3fda:	f000 fb69 	bl	46b0 <mpsl_temperature_get>
    3fde:	79a1      	ldrb	r1, [r4, #6]
    3fe0:	2901      	cmp	r1, #1
    3fe2:	d902      	bls.n	3fea <MPSL_IRQ_CLOCK_Handler+0xe2>
    3fe4:	79e1      	ldrb	r1, [r4, #7]
    3fe6:	1c49      	adds	r1, r1, #1
    3fe8:	71e1      	strb	r1, [r4, #7]
    3fea:	b10d      	cbz	r5, 3ff0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3fec:	6961      	ldr	r1, [r4, #20]
    3fee:	e000      	b.n	3ff2 <MPSL_IRQ_CLOCK_Handler+0xea>
    3ff0:	6921      	ldr	r1, [r4, #16]
    3ff2:	1a41      	subs	r1, r0, r1
    3ff4:	2902      	cmp	r1, #2
    3ff6:	da02      	bge.n	3ffe <MPSL_IRQ_CLOCK_Handler+0xf6>
    3ff8:	f111 0f02 	cmn.w	r1, #2
    3ffc:	dc07      	bgt.n	400e <MPSL_IRQ_CLOCK_Handler+0x106>
    3ffe:	b10d      	cbz	r5, 4004 <MPSL_IRQ_CLOCK_Handler+0xfc>
    4000:	6160      	str	r0, [r4, #20]
    4002:	e000      	b.n	4006 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4004:	6120      	str	r0, [r4, #16]
    4006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    400a:	f7ff bfc1 	b.w	3f90 <MPSL_IRQ_CLOCK_Handler+0x88>
    400e:	bd70      	pop	{r4, r5, r6, pc}
    4010:	20000058 	.word	0x20000058
    4014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4018:	4606      	mov	r6, r0
    401a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    401e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4022:	4628      	mov	r0, r5
    4024:	f008 fee5 	bl	cdf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4028:	4680      	mov	r8, r0
    402a:	f44f 7188 	mov.w	r1, #272	; 0x110
    402e:	4628      	mov	r0, r5
    4030:	f008 fedf 	bl	cdf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4034:	4c27      	ldr	r4, [pc, #156]	; (40d4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4036:	4682      	mov	sl, r0
    4038:	7827      	ldrb	r7, [r4, #0]
    403a:	f104 0008 	add.w	r0, r4, #8
    403e:	f008 ff4c 	bl	ceda <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4042:	b110      	cbz	r0, 404a <MPSL_IRQ_CLOCK_Handler+0x142>
    4044:	f240 11b9 	movw	r1, #441	; 0x1b9
    4048:	e016      	b.n	4078 <MPSL_IRQ_CLOCK_Handler+0x170>
    404a:	f04f 0901 	mov.w	r9, #1
    404e:	b146      	cbz	r6, 4062 <MPSL_IRQ_CLOCK_Handler+0x15a>
    4050:	7aa0      	ldrb	r0, [r4, #10]
    4052:	2803      	cmp	r0, #3
    4054:	d105      	bne.n	4062 <MPSL_IRQ_CLOCK_Handler+0x15a>
    4056:	2004      	movs	r0, #4
    4058:	72a0      	strb	r0, [r4, #10]
    405a:	f7ff ff87 	bl	3f6c <MPSL_IRQ_CLOCK_Handler+0x64>
    405e:	f8c5 9010 	str.w	r9, [r5, #16]
    4062:	2600      	movs	r6, #0
    4064:	f1b8 0f00 	cmp.w	r8, #0
    4068:	d018      	beq.n	409c <MPSL_IRQ_CLOCK_Handler+0x194>
    406a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    406e:	7aa0      	ldrb	r0, [r4, #10]
    4070:	2804      	cmp	r0, #4
    4072:	d004      	beq.n	407e <MPSL_IRQ_CLOCK_Handler+0x176>
    4074:	f240 11cb 	movw	r1, #459	; 0x1cb
    4078:	206d      	movs	r0, #109	; 0x6d
    407a:	f000 faa5 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    407e:	f008 ff62 	bl	cf46 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4082:	b928      	cbnz	r0, 4090 <MPSL_IRQ_CLOCK_Handler+0x188>
    4084:	f008 ff80 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4088:	b910      	cbnz	r0, 4090 <MPSL_IRQ_CLOCK_Handler+0x188>
    408a:	f008 ffb3 	bl	cff4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    408e:	b108      	cbz	r0, 4094 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4090:	4811      	ldr	r0, [pc, #68]	; (40d8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4092:	6006      	str	r6, [r0, #0]
    4094:	2002      	movs	r0, #2
    4096:	72a0      	strb	r0, [r4, #10]
    4098:	f000 f8f2 	bl	4280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    409c:	f1ba 0f00 	cmp.w	sl, #0
    40a0:	d008      	beq.n	40b4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    40a2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    40a6:	7aa0      	ldrb	r0, [r4, #10]
    40a8:	2802      	cmp	r0, #2
    40aa:	d101      	bne.n	40b0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    40ac:	f7ff ff8a 	bl	3fc4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    40b0:	f8c5 9014 	str.w	r9, [r5, #20]
    40b4:	b13f      	cbz	r7, 40c6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    40b6:	7026      	strb	r6, [r4, #0]
    40b8:	7aa0      	ldrb	r0, [r4, #10]
    40ba:	2802      	cmp	r0, #2
    40bc:	d101      	bne.n	40c2 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    40be:	f7ff ff67 	bl	3f90 <MPSL_IRQ_CLOCK_Handler+0x88>
    40c2:	f000 f8dd 	bl	4280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    40c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40ca:	4802      	ldr	r0, [pc, #8]	; (40d4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    40cc:	3008      	adds	r0, #8
    40ce:	f008 bf1b 	b.w	cf08 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    40d2:	0000      	.short	0x0000
    40d4:	20000058 	.word	0x20000058
    40d8:	40000c34 	.word	0x40000c34
    40dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40e0:	4c5f      	ldr	r4, [pc, #380]	; (4260 <MPSL_IRQ_CLOCK_Handler+0x358>)
    40e2:	2700      	movs	r7, #0
    40e4:	4606      	mov	r6, r0
    40e6:	61a7      	str	r7, [r4, #24]
    40e8:	7842      	ldrb	r2, [r0, #1]
    40ea:	7881      	ldrb	r1, [r0, #2]
    40ec:	7800      	ldrb	r0, [r0, #0]
    40ee:	72e0      	strb	r0, [r4, #11]
    40f0:	7162      	strb	r2, [r4, #5]
    40f2:	71a1      	strb	r1, [r4, #6]
    40f4:	71e7      	strb	r7, [r4, #7]
    40f6:	f04f 0801 	mov.w	r8, #1
    40fa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    40fe:	2805      	cmp	r0, #5
    4100:	d225      	bcs.n	414e <MPSL_IRQ_CLOCK_Handler+0x246>
    4102:	e8df f000 	tbb	[pc, r0]
    4106:	0310      	.short	0x0310
    4108:	00222006 	.word	0x00222006
    410c:	f8c4 8018 	str.w	r8, [r4, #24]
    4110:	e009      	b.n	4126 <MPSL_IRQ_CLOCK_Handler+0x21e>
    4112:	f000 f8d1 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4116:	2101      	movs	r1, #1
    4118:	4628      	mov	r0, r5
    411a:	f008 fe6f 	bl	cdfc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    411e:	2800      	cmp	r0, #0
    4120:	d0f9      	beq.n	4116 <MPSL_IRQ_CLOCK_Handler+0x20e>
    4122:	2002      	movs	r0, #2
    4124:	61a0      	str	r0, [r4, #24]
    4126:	f008 fe95 	bl	ce54 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    412a:	b1b0      	cbz	r0, 415a <MPSL_IRQ_CLOCK_Handler+0x252>
    412c:	f000 f9ee 	bl	450c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4130:	7e21      	ldrb	r1, [r4, #24]
    4132:	f001 0103 	and.w	r1, r1, #3
    4136:	4288      	cmp	r0, r1
    4138:	d10f      	bne.n	415a <MPSL_IRQ_CLOCK_Handler+0x252>
    413a:	79b0      	ldrb	r0, [r6, #6]
    413c:	b150      	cbz	r0, 4154 <MPSL_IRQ_CLOCK_Handler+0x24c>
    413e:	2002      	movs	r0, #2
    4140:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4144:	e070      	b.n	4228 <MPSL_IRQ_CLOCK_Handler+0x320>
    4146:	4847      	ldr	r0, [pc, #284]	; (4264 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4148:	e7ec      	b.n	4124 <MPSL_IRQ_CLOCK_Handler+0x21c>
    414a:	4847      	ldr	r0, [pc, #284]	; (4268 <MPSL_IRQ_CLOCK_Handler+0x360>)
    414c:	e7ea      	b.n	4124 <MPSL_IRQ_CLOCK_Handler+0x21c>
    414e:	f240 313a 	movw	r1, #826	; 0x33a
    4152:	e04d      	b.n	41f0 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4154:	f000 f9ae 	bl	44b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4158:	e066      	b.n	4228 <MPSL_IRQ_CLOCK_Handler+0x320>
    415a:	f8c5 800c 	str.w	r8, [r5, #12]
    415e:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4162:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4166:	69a0      	ldr	r0, [r4, #24]
    4168:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    416c:	f008 fed7 	bl	cf1e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4170:	b940      	cbnz	r0, 4184 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4172:	f008 fede 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4176:	b928      	cbnz	r0, 4184 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4178:	f008 fef2 	bl	cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    417c:	b910      	cbnz	r0, 4184 <MPSL_IRQ_CLOCK_Handler+0x27c>
    417e:	f008 ff03 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4182:	b138      	cbz	r0, 4194 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4184:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4188:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    418c:	4937      	ldr	r1, [pc, #220]	; (426c <MPSL_IRQ_CLOCK_Handler+0x364>)
    418e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4192:	6008      	str	r0, [r1, #0]
    4194:	f008 fec3 	bl	cf1e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4198:	b940      	cbnz	r0, 41ac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    419a:	f008 feca 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    419e:	b928      	cbnz	r0, 41ac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    41a0:	f008 fede 	bl	cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41a4:	b910      	cbnz	r0, 41ac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    41a6:	f008 feef 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41aa:	b118      	cbz	r0, 41b4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    41ac:	492f      	ldr	r1, [pc, #188]	; (426c <MPSL_IRQ_CLOCK_Handler+0x364>)
    41ae:	3110      	adds	r1, #16
    41b0:	f8c1 8000 	str.w	r8, [r1]
    41b4:	f8c5 8008 	str.w	r8, [r5, #8]
    41b8:	2002      	movs	r0, #2
    41ba:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    41be:	79b0      	ldrb	r0, [r6, #6]
    41c0:	bb90      	cbnz	r0, 4228 <MPSL_IRQ_CLOCK_Handler+0x320>
    41c2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    41c6:	f010 0f02 	tst.w	r0, #2
    41ca:	d00f      	beq.n	41ec <MPSL_IRQ_CLOCK_Handler+0x2e4>
    41cc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4270 <MPSL_IRQ_CLOCK_Handler+0x368>
    41d0:	f8d9 1000 	ldr.w	r1, [r9]
    41d4:	43c9      	mvns	r1, r1
    41d6:	f341 1100 	sbfx	r1, r1, #4, #1
    41da:	f101 0801 	add.w	r8, r1, #1
    41de:	f8d9 1000 	ldr.w	r1, [r9]
    41e2:	f041 0110 	orr.w	r1, r1, #16
    41e6:	f8c9 1000 	str.w	r1, [r9]
    41ea:	e007      	b.n	41fc <MPSL_IRQ_CLOCK_Handler+0x2f4>
    41ec:	f240 21fb 	movw	r1, #763	; 0x2fb
    41f0:	206d      	movs	r0, #109	; 0x6d
    41f2:	f000 f9e9 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41f6:	bf00      	nop
    41f8:	f000 fb10 	bl	481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    41fc:	4651      	mov	r1, sl
    41fe:	4628      	mov	r0, r5
    4200:	f008 fdf7 	bl	cdf2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4204:	2800      	cmp	r0, #0
    4206:	d0f7      	beq.n	41f8 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4208:	f000 f954 	bl	44b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    420c:	f1b8 0f00 	cmp.w	r8, #0
    4210:	d105      	bne.n	421e <MPSL_IRQ_CLOCK_Handler+0x316>
    4212:	f8d9 1000 	ldr.w	r1, [r9]
    4216:	f021 0110 	bic.w	r1, r1, #16
    421a:	f8c9 1000 	str.w	r1, [r9]
    421e:	2002      	movs	r0, #2
    4220:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4224:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4228:	79a0      	ldrb	r0, [r4, #6]
    422a:	b170      	cbz	r0, 424a <MPSL_IRQ_CLOCK_Handler+0x342>
    422c:	7830      	ldrb	r0, [r6, #0]
    422e:	b960      	cbnz	r0, 424a <MPSL_IRQ_CLOCK_Handler+0x342>
    4230:	f000 f952 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4234:	4606      	mov	r6, r0
    4236:	f000 fa3b 	bl	46b0 <mpsl_temperature_get>
    423a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    423e:	b116      	cbz	r6, 4246 <MPSL_IRQ_CLOCK_Handler+0x33e>
    4240:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4244:	e001      	b.n	424a <MPSL_IRQ_CLOCK_Handler+0x342>
    4246:	e9c4 0104 	strd	r0, r1, [r4, #16]
    424a:	2101      	movs	r1, #1
    424c:	4628      	mov	r0, r5
    424e:	f008 fdd5 	bl	cdfc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4252:	b108      	cbz	r0, 4258 <MPSL_IRQ_CLOCK_Handler+0x350>
    4254:	f000 f93a 	bl	44cc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4258:	72a7      	strb	r7, [r4, #10]
    425a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    425e:	0000      	.short	0x0000
    4260:	20000058 	.word	0x20000058
    4264:	00020001 	.word	0x00020001
    4268:	00030001 	.word	0x00030001
    426c:	4000053c 	.word	0x4000053c
    4270:	e000ed10 	.word	0xe000ed10

00004274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4274:	4801      	ldr	r0, [pc, #4]	; (427c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4276:	89c0      	ldrh	r0, [r0, #14]
    4278:	4770      	bx	lr
    427a:	0000      	.short	0x0000
    427c:	20000058 	.word	0x20000058

00004280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4280:	b510      	push	{r4, lr}
    4282:	f3ef 8410 	mrs	r4, PRIMASK
    4286:	b672      	cpsid	i
    4288:	480a      	ldr	r0, [pc, #40]	; (42b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    428a:	7841      	ldrb	r1, [r0, #1]
    428c:	b129      	cbz	r1, 429a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    428e:	7841      	ldrb	r1, [r0, #1]
    4290:	1e49      	subs	r1, r1, #1
    4292:	7041      	strb	r1, [r0, #1]
    4294:	7841      	ldrb	r1, [r0, #1]
    4296:	b129      	cbz	r1, 42a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4298:	e008      	b.n	42ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    429a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    429e:	206d      	movs	r0, #109	; 0x6d
    42a0:	f000 f992 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42a4:	7880      	ldrb	r0, [r0, #2]
    42a6:	b908      	cbnz	r0, 42ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    42a8:	f000 f924 	bl	44f4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    42ac:	2c00      	cmp	r4, #0
    42ae:	d100      	bne.n	42b2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    42b0:	b662      	cpsie	i
    42b2:	bd10      	pop	{r4, pc}
    42b4:	20000058 	.word	0x20000058

000042b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    42b8:	b510      	push	{r4, lr}
    42ba:	f3ef 8410 	mrs	r4, PRIMASK
    42be:	b672      	cpsid	i
    42c0:	4806      	ldr	r0, [pc, #24]	; (42dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    42c2:	7841      	ldrb	r1, [r0, #1]
    42c4:	1c49      	adds	r1, r1, #1
    42c6:	7041      	strb	r1, [r0, #1]
    42c8:	7840      	ldrb	r0, [r0, #1]
    42ca:	2801      	cmp	r0, #1
    42cc:	d101      	bne.n	42d2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    42ce:	f008 fdac 	bl	ce2a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    42d2:	2c00      	cmp	r4, #0
    42d4:	d100      	bne.n	42d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    42d6:	b662      	cpsie	i
    42d8:	bd10      	pop	{r4, pc}
    42da:	0000      	.short	0x0000
    42dc:	20000058 	.word	0x20000058

000042e0 <mpsl_clock_hfclk_release>:
    42e0:	4805      	ldr	r0, [pc, #20]	; (42f8 <mpsl_clock_hfclk_release+0x18>)
    42e2:	b510      	push	{r4, lr}
    42e4:	78c1      	ldrb	r1, [r0, #3]
    42e6:	b121      	cbz	r1, 42f2 <mpsl_clock_hfclk_release+0x12>
    42e8:	2100      	movs	r1, #0
    42ea:	7101      	strb	r1, [r0, #4]
    42ec:	70c1      	strb	r1, [r0, #3]
    42ee:	f7ff ffc7 	bl	4280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    42f2:	2000      	movs	r0, #0
    42f4:	bd10      	pop	{r4, pc}
    42f6:	0000      	.short	0x0000
    42f8:	20000058 	.word	0x20000058

000042fc <mpsl_clock_hfclk_request>:
    42fc:	b570      	push	{r4, r5, r6, lr}
    42fe:	4c0c      	ldr	r4, [pc, #48]	; (4330 <mpsl_clock_hfclk_request+0x34>)
    4300:	78e1      	ldrb	r1, [r4, #3]
    4302:	b961      	cbnz	r1, 431e <mpsl_clock_hfclk_request+0x22>
    4304:	2501      	movs	r5, #1
    4306:	70e5      	strb	r5, [r4, #3]
    4308:	61e0      	str	r0, [r4, #28]
    430a:	f7ff ffd5 	bl	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    430e:	f000 f8e3 	bl	44d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4312:	b130      	cbz	r0, 4322 <mpsl_clock_hfclk_request+0x26>
    4314:	69e0      	ldr	r0, [r4, #28]
    4316:	b110      	cbz	r0, 431e <mpsl_clock_hfclk_request+0x22>
    4318:	4780      	blx	r0
    431a:	2000      	movs	r0, #0
    431c:	61e0      	str	r0, [r4, #28]
    431e:	2000      	movs	r0, #0
    4320:	bd70      	pop	{r4, r5, r6, pc}
    4322:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4326:	7125      	strb	r5, [r4, #4]
    4328:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    432c:	e7f7      	b.n	431e <mpsl_clock_hfclk_request+0x22>
    432e:	0000      	.short	0x0000
    4330:	20000058 	.word	0x20000058

00004334 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4338:	0005      	movs	r5, r0
    433a:	f06f 0015 	mvn.w	r0, #21
    433e:	d03f      	beq.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4340:	7829      	ldrb	r1, [r5, #0]
    4342:	2904      	cmp	r1, #4
    4344:	d83c      	bhi.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4346:	2900      	cmp	r1, #0
    4348:	7869      	ldrb	r1, [r5, #1]
    434a:	d03b      	beq.n	43c4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    434c:	2900      	cmp	r1, #0
    434e:	d137      	bne.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4350:	78a9      	ldrb	r1, [r5, #2]
    4352:	2900      	cmp	r1, #0
    4354:	d134      	bne.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4356:	2000      	movs	r0, #0
    4358:	f008 fd16 	bl	cd88 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    435c:	2000      	movs	r0, #0
    435e:	f008 fd06 	bl	cd6e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4362:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4366:	f04f 31ff 	mov.w	r1, #4294967295
    436a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    436e:	2600      	movs	r6, #0
    4370:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4374:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4378:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    437c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4380:	4c14      	ldr	r4, [pc, #80]	; (43d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4382:	7066      	strb	r6, [r4, #1]
    4384:	88a8      	ldrh	r0, [r5, #4]
    4386:	81a0      	strh	r0, [r4, #12]
    4388:	f008 fd46 	bl	ce18 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    438c:	2701      	movs	r7, #1
    438e:	b108      	cbz	r0, 4394 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4390:	70e7      	strb	r7, [r4, #3]
    4392:	7067      	strb	r7, [r4, #1]
    4394:	2101      	movs	r1, #1
    4396:	4640      	mov	r0, r8
    4398:	f008 fd30 	bl	cdfc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    439c:	b108      	cbz	r0, 43a2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    439e:	f000 f895 	bl	44cc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    43a2:	f240 50f5 	movw	r0, #1525	; 0x5f5
    43a6:	81e0      	strh	r0, [r4, #14]
    43a8:	4628      	mov	r0, r5
    43aa:	f7ff fe97 	bl	40dc <MPSL_IRQ_CLOCK_Handler+0x1d4>
    43ae:	7267      	strb	r7, [r4, #9]
    43b0:	2000      	movs	r0, #0
    43b2:	f008 fcdc 	bl	cd6e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    43b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    43ba:	4630      	mov	r0, r6
    43bc:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    43c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43c4:	2900      	cmp	r1, #0
    43c6:	d0fb      	beq.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43c8:	2920      	cmp	r1, #32
    43ca:	d8f9      	bhi.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43cc:	78a9      	ldrb	r1, [r5, #2]
    43ce:	2921      	cmp	r1, #33	; 0x21
    43d0:	d9c1      	bls.n	4356 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    43d2:	e7f5      	b.n	43c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43d4:	20000058 	.word	0x20000058

000043d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    43d8:	4801      	ldr	r0, [pc, #4]	; (43e0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    43da:	8980      	ldrh	r0, [r0, #12]
    43dc:	4770      	bx	lr
    43de:	0000      	.short	0x0000
    43e0:	20000058 	.word	0x20000058

000043e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    43e4:	b510      	push	{r4, lr}
    43e6:	480d      	ldr	r0, [pc, #52]	; (441c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    43e8:	f008 fd77 	bl	ceda <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    43ec:	490b      	ldr	r1, [pc, #44]	; (441c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    43ee:	3908      	subs	r1, #8
    43f0:	b148      	cbz	r0, 4406 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    43f2:	2001      	movs	r0, #1
    43f4:	7008      	strb	r0, [r1, #0]
    43f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    43fa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    43fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4402:	f7ff bf59 	b.w	42b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4406:	7a88      	ldrb	r0, [r1, #10]
    4408:	2802      	cmp	r0, #2
    440a:	d101      	bne.n	4410 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    440c:	f7ff fdc0 	bl	3f90 <MPSL_IRQ_CLOCK_Handler+0x88>
    4410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4414:	4801      	ldr	r0, [pc, #4]	; (441c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4416:	f008 bd77 	b.w	cf08 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    441a:	0000      	.short	0x0000
    441c:	20000060 	.word	0x20000060

00004420 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4420:	4802      	ldr	r0, [pc, #8]	; (442c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4422:	7a80      	ldrb	r0, [r0, #10]
    4424:	2800      	cmp	r0, #0
    4426:	d000      	beq.n	442a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4428:	2001      	movs	r0, #1
    442a:	4770      	bx	lr
    442c:	20000058 	.word	0x20000058

00004430 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4432:	4d1f      	ldr	r5, [pc, #124]	; (44b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4434:	7ae8      	ldrb	r0, [r5, #11]
    4436:	2800      	cmp	r0, #0
    4438:	d10f      	bne.n	445a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    443a:	7e28      	ldrb	r0, [r5, #24]
    443c:	f000 0003 	and.w	r0, r0, #3
    4440:	f008 fcf8 	bl	ce34 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4444:	2800      	cmp	r0, #0
    4446:	d008      	beq.n	445a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4448:	f3ef 8110 	mrs	r1, PRIMASK
    444c:	b672      	cpsid	i
    444e:	f7ff ffe7 	bl	4420 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4452:	b118      	cbz	r0, 445c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4454:	2900      	cmp	r1, #0
    4456:	d100      	bne.n	445a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4458:	b662      	cpsie	i
    445a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    445c:	2601      	movs	r6, #1
    445e:	72ae      	strb	r6, [r5, #10]
    4460:	b901      	cbnz	r1, 4464 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4462:	b662      	cpsie	i
    4464:	2018      	movs	r0, #24
    4466:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    446a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    446e:	61a6      	str	r6, [r4, #24]
    4470:	f44f 7020 	mov.w	r0, #640	; 0x280
    4474:	f8ad 0000 	strh.w	r0, [sp]
    4478:	f8bd 0000 	ldrh.w	r0, [sp]
    447c:	1e41      	subs	r1, r0, #1
    447e:	f8ad 1000 	strh.w	r1, [sp]
    4482:	d2f9      	bcs.n	4478 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4484:	2700      	movs	r7, #0
    4486:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    448a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    448e:	4808      	ldr	r0, [pc, #32]	; (44b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4490:	3008      	adds	r0, #8
    4492:	f008 fd35 	bl	cf00 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4496:	702f      	strb	r7, [r5, #0]
    4498:	f7ff fd7a 	bl	3f90 <MPSL_IRQ_CLOCK_Handler+0x88>
    449c:	6166      	str	r6, [r4, #20]
    449e:	7968      	ldrb	r0, [r5, #5]
    44a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    44a4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    44a8:	2018      	movs	r0, #24
    44aa:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    44ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44b0:	20000058 	.word	0x20000058

000044b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    44b4:	b510      	push	{r4, lr}
    44b6:	4c04      	ldr	r4, [pc, #16]	; (44c8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    44b8:	7e20      	ldrb	r0, [r4, #24]
    44ba:	f000 0003 	and.w	r0, r0, #3
    44be:	f008 fcb9 	bl	ce34 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    44c2:	2800      	cmp	r0, #0
    44c4:	d0f8      	beq.n	44b8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    44c6:	bd10      	pop	{r4, pc}
    44c8:	20000058 	.word	0x20000058

000044cc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    44cc:	4901      	ldr	r1, [pc, #4]	; (44d4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    44ce:	2001      	movs	r0, #1
    44d0:	7008      	strb	r0, [r1, #0]
    44d2:	4770      	bx	lr
    44d4:	20000329 	.word	0x20000329

000044d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    44d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    44dc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    44e0:	b918      	cbnz	r0, 44ea <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    44e2:	4803      	ldr	r0, [pc, #12]	; (44f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    44e4:	7800      	ldrb	r0, [r0, #0]
    44e6:	2800      	cmp	r0, #0
    44e8:	d000      	beq.n	44ec <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    44ea:	2001      	movs	r0, #1
    44ec:	4770      	bx	lr
    44ee:	0000      	.short	0x0000
    44f0:	20000329 	.word	0x20000329

000044f4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    44f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    44f8:	2101      	movs	r1, #1
    44fa:	6041      	str	r1, [r0, #4]
    44fc:	2100      	movs	r1, #0
    44fe:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4502:	4801      	ldr	r0, [pc, #4]	; (4508 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4504:	7001      	strb	r1, [r0, #0]
    4506:	4770      	bx	lr
    4508:	20000329 	.word	0x20000329

0000450c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    450c:	4802      	ldr	r0, [pc, #8]	; (4518 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    450e:	6800      	ldr	r0, [r0, #0]
    4510:	f000 0003 	and.w	r0, r0, #3
    4514:	4770      	bx	lr
    4516:	0000      	.short	0x0000
    4518:	4000041c 	.word	0x4000041c
    451c:	b510      	push	{r4, lr}
    451e:	b131      	cbz	r1, 452e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4520:	2901      	cmp	r1, #1
    4522:	d007      	beq.n	4534 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4524:	f240 3102 	movw	r1, #770	; 0x302
    4528:	a005      	add	r0, pc, #20	; (adr r0, 4540 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    452a:	f000 f821 	bl	4570 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    452e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4532:	e001      	b.n	4538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4534:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4538:	f000 0001 	and.w	r0, r0, #1
    453c:	bd10      	pop	{r4, pc}
    453e:	0000      	.short	0x0000
    4540:	5f66726e 	.word	0x5f66726e
    4544:	636f6c63 	.word	0x636f6c63
    4548:	00682e6b 	.word	0x00682e6b
    454c:	f3bf 8f4f 	dsb	sy
    4550:	4805      	ldr	r0, [pc, #20]	; (4568 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4552:	6801      	ldr	r1, [r0, #0]
    4554:	4a05      	ldr	r2, [pc, #20]	; (456c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4556:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    455a:	4311      	orrs	r1, r2
    455c:	6001      	str	r1, [r0, #0]
    455e:	f3bf 8f4f 	dsb	sy
    4562:	bf00      	nop
    4564:	e7fd      	b.n	4562 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4566:	0000      	.short	0x0000
    4568:	e000ed0c 	.word	0xe000ed0c
    456c:	05fa0004 	.word	0x05fa0004

00004570 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4570:	b672      	cpsid	i
    4572:	4a03      	ldr	r2, [pc, #12]	; (4580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4574:	6852      	ldr	r2, [r2, #4]
    4576:	b102      	cbz	r2, 457a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4578:	4790      	blx	r2
    457a:	f7ff ffe7 	bl	454c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    457e:	0000      	.short	0x0000
    4580:	20000078 	.word	0x20000078
    4584:	4806      	ldr	r0, [pc, #24]	; (45a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4586:	b510      	push	{r4, lr}
    4588:	2100      	movs	r1, #0
    458a:	6001      	str	r1, [r0, #0]
    458c:	2101      	movs	r1, #1
    458e:	6001      	str	r1, [r0, #0]
    4590:	4608      	mov	r0, r1
    4592:	f008 fc76 	bl	ce82 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    459a:	2001      	movs	r0, #1
    459c:	f008 bc64 	b.w	ce68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    45a0:	40001ffc 	.word	0x40001ffc
    45a4:	4807      	ldr	r0, [pc, #28]	; (45c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    45a6:	b510      	push	{r4, lr}
    45a8:	2101      	movs	r1, #1
    45aa:	6041      	str	r1, [r0, #4]
    45ac:	1e89      	subs	r1, r1, #2
    45ae:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    45b2:	200c      	movs	r0, #12
    45b4:	f008 fc65 	bl	ce82 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    45b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45bc:	200c      	movs	r0, #12
    45be:	f008 bc53 	b.w	ce68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    45c2:	0000      	.short	0x0000
    45c4:	4000c000 	.word	0x4000c000

000045c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    45c8:	b50e      	push	{r1, r2, r3, lr}
    45ca:	b672      	cpsid	i
    45cc:	4a0f      	ldr	r2, [pc, #60]	; (460c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    45ce:	6855      	ldr	r5, [r2, #4]
    45d0:	b1d5      	cbz	r5, 4608 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    45d2:	2200      	movs	r2, #0
    45d4:	4603      	mov	r3, r0
    45d6:	466e      	mov	r6, sp
    45d8:	240a      	movs	r4, #10
    45da:	e003      	b.n	45e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    45dc:	fbb0 f0f4 	udiv	r0, r0, r4
    45e0:	1c52      	adds	r2, r2, #1
    45e2:	b2d2      	uxtb	r2, r2
    45e4:	2800      	cmp	r0, #0
    45e6:	d1f9      	bne.n	45dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    45e8:	54b0      	strb	r0, [r6, r2]
    45ea:	e009      	b.n	4600 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    45ec:	fbb3 f0f4 	udiv	r0, r3, r4
    45f0:	fb04 3010 	mls	r0, r4, r0, r3
    45f4:	fbb3 f3f4 	udiv	r3, r3, r4
    45f8:	1e52      	subs	r2, r2, #1
    45fa:	b2d2      	uxtb	r2, r2
    45fc:	3030      	adds	r0, #48	; 0x30
    45fe:	54b0      	strb	r0, [r6, r2]
    4600:	2a00      	cmp	r2, #0
    4602:	d1f3      	bne.n	45ec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4604:	4630      	mov	r0, r6
    4606:	47a8      	blx	r5
    4608:	f7ff ffa0 	bl	454c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    460c:	20000078 	.word	0x20000078

00004610 <mpsl_init>:
    4610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4614:	4c18      	ldr	r4, [pc, #96]	; (4678 <mpsl_init+0x68>)
    4616:	4606      	mov	r6, r0
    4618:	4617      	mov	r7, r2
    461a:	7860      	ldrb	r0, [r4, #1]
    461c:	460d      	mov	r5, r1
    461e:	b118      	cbz	r0, 4628 <mpsl_init+0x18>
    4620:	f04f 30ff 	mov.w	r0, #4294967295
    4624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4628:	f7fc fbe6 	bl	df8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    462c:	b906      	cbnz	r6, 4630 <mpsl_init+0x20>
    462e:	4e13      	ldr	r6, [pc, #76]	; (467c <mpsl_init+0x6c>)
    4630:	6067      	str	r7, [r4, #4]
    4632:	7025      	strb	r5, [r4, #0]
    4634:	f7ff ffa6 	bl	4584 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4638:	f7ff ffb4 	bl	45a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    463c:	4630      	mov	r0, r6
    463e:	f7ff fe79 	bl	4334 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4642:	0006      	movs	r6, r0
    4644:	d1ee      	bne.n	4624 <mpsl_init+0x14>
    4646:	f7fe fe77 	bl	3338 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    464a:	f7ff fef1 	bl	4430 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    464e:	f008 fadb 	bl	cc08 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4652:	4628      	mov	r0, r5
    4654:	f008 fc08 	bl	ce68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4658:	2001      	movs	r0, #1
    465a:	2d00      	cmp	r5, #0
    465c:	db09      	blt.n	4672 <mpsl_init+0x62>
    465e:	f005 011f 	and.w	r1, r5, #31
    4662:	fa00 f101 	lsl.w	r1, r0, r1
    4666:	096a      	lsrs	r2, r5, #5
    4668:	0092      	lsls	r2, r2, #2
    466a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    466e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4672:	7060      	strb	r0, [r4, #1]
    4674:	4630      	mov	r0, r6
    4676:	e7d5      	b.n	4624 <mpsl_init+0x14>
    4678:	20000078 	.word	0x20000078
    467c:	0000cea4 	.word	0x0000cea4

00004680 <mpsl_is_initialized>:
    4680:	4801      	ldr	r0, [pc, #4]	; (4688 <mpsl_is_initialized+0x8>)
    4682:	7840      	ldrb	r0, [r0, #1]
    4684:	4770      	bx	lr
    4686:	0000      	.short	0x0000
    4688:	20000078 	.word	0x20000078

0000468c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    468c:	4807      	ldr	r0, [pc, #28]	; (46ac <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    468e:	f990 0000 	ldrsb.w	r0, [r0]
    4692:	2800      	cmp	r0, #0
    4694:	db09      	blt.n	46aa <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4696:	f000 021f 	and.w	r2, r0, #31
    469a:	2101      	movs	r1, #1
    469c:	4091      	lsls	r1, r2
    469e:	0940      	lsrs	r0, r0, #5
    46a0:	0080      	lsls	r0, r0, #2
    46a2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    46a6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    46aa:	4770      	bx	lr
    46ac:	20000078 	.word	0x20000078

000046b0 <mpsl_temperature_get>:
    46b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46b4:	2601      	movs	r6, #1
    46b6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    46ba:	0331      	lsls	r1, r6, #12
    46bc:	f04f 0800 	mov.w	r8, #0
    46c0:	4640      	mov	r0, r8
    46c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    46c6:	f3bf 8f4f 	dsb	sy
    46ca:	f3bf 8f6f 	isb	sy
    46ce:	4c16      	ldr	r4, [pc, #88]	; (4728 <mpsl_temperature_get+0x78>)
    46d0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    46d4:	200c      	movs	r0, #12
    46d6:	f008 fbf3 	bl	cec0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    46da:	4d14      	ldr	r5, [pc, #80]	; (472c <mpsl_temperature_get+0x7c>)
    46dc:	6828      	ldr	r0, [r5, #0]
    46de:	43c0      	mvns	r0, r0
    46e0:	f340 1700 	sbfx	r7, r0, #4, #1
    46e4:	6828      	ldr	r0, [r5, #0]
    46e6:	f040 0010 	orr.w	r0, r0, #16
    46ea:	6028      	str	r0, [r5, #0]
    46ec:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    46f0:	6026      	str	r6, [r4, #0]
    46f2:	1c7f      	adds	r7, r7, #1
    46f4:	e002      	b.n	46fc <mpsl_temperature_get+0x4c>
    46f6:	bf00      	nop
    46f8:	f000 f890 	bl	481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    46fc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4700:	2800      	cmp	r0, #0
    4702:	d0f9      	beq.n	46f8 <mpsl_temperature_get+0x48>
    4704:	b91f      	cbnz	r7, 470e <mpsl_temperature_get+0x5e>
    4706:	6828      	ldr	r0, [r5, #0]
    4708:	f020 0010 	bic.w	r0, r0, #16
    470c:	6028      	str	r0, [r5, #0]
    470e:	4808      	ldr	r0, [pc, #32]	; (4730 <mpsl_temperature_get+0x80>)
    4710:	6805      	ldr	r5, [r0, #0]
    4712:	6066      	str	r6, [r4, #4]
    4714:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4718:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    471c:	200c      	movs	r0, #12
    471e:	f008 fbcf 	bl	cec0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4722:	4628      	mov	r0, r5
    4724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4728:	4000c000 	.word	0x4000c000
    472c:	e000ed10 	.word	0xe000ed10
    4730:	4000c508 	.word	0x4000c508

00004734 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4734:	b510      	push	{r4, lr}
    4736:	4602      	mov	r2, r0
    4738:	2005      	movs	r0, #5
    473a:	490c      	ldr	r1, [pc, #48]	; (476c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    473c:	e004      	b.n	4748 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    473e:	bf00      	nop
    4740:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4744:	791b      	ldrb	r3, [r3, #4]
    4746:	b133      	cbz	r3, 4756 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4748:	1e40      	subs	r0, r0, #1
    474a:	b2c0      	uxtb	r0, r0
    474c:	d2f8      	bcs.n	4740 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    474e:	2148      	movs	r1, #72	; 0x48
    4750:	2069      	movs	r0, #105	; 0x69
    4752:	f7ff ff39 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4756:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    475a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    475e:	2200      	movs	r2, #0
    4760:	714a      	strb	r2, [r1, #5]
    4762:	718a      	strb	r2, [r1, #6]
    4764:	2201      	movs	r2, #1
    4766:	710a      	strb	r2, [r1, #4]
    4768:	bd10      	pop	{r4, pc}
    476a:	0000      	.short	0x0000
    476c:	200011ec 	.word	0x200011ec

00004770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4770:	b510      	push	{r4, lr}
    4772:	2805      	cmp	r0, #5
    4774:	d301      	bcc.n	477a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4776:	2158      	movs	r1, #88	; 0x58
    4778:	e006      	b.n	4788 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    477a:	490a      	ldr	r1, [pc, #40]	; (47a4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    477c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4780:	7901      	ldrb	r1, [r0, #4]
    4782:	2901      	cmp	r1, #1
    4784:	d003      	beq.n	478e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4786:	2159      	movs	r1, #89	; 0x59
    4788:	2069      	movs	r0, #105	; 0x69
    478a:	f7ff ff1d 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    478e:	7941      	ldrb	r1, [r0, #5]
    4790:	7982      	ldrb	r2, [r0, #6]
    4792:	1c49      	adds	r1, r1, #1
    4794:	b2c9      	uxtb	r1, r1
    4796:	428a      	cmp	r2, r1
    4798:	d000      	beq.n	479c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    479a:	7141      	strb	r1, [r0, #5]
    479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47a0:	f7ff bf74 	b.w	468c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    47a4:	200011ec 	.word	0x200011ec

000047a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	2505      	movs	r5, #5
    47ac:	4e0e      	ldr	r6, [pc, #56]	; (47e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    47ae:	4c0f      	ldr	r4, [pc, #60]	; (47ec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    47b0:	e016      	b.n	47e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    47b2:	7821      	ldrb	r1, [r4, #0]
    47b4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    47b8:	7902      	ldrb	r2, [r0, #4]
    47ba:	2a01      	cmp	r2, #1
    47bc:	d108      	bne.n	47d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    47be:	7942      	ldrb	r2, [r0, #5]
    47c0:	7983      	ldrb	r3, [r0, #6]
    47c2:	429a      	cmp	r2, r3
    47c4:	d004      	beq.n	47d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    47c6:	7942      	ldrb	r2, [r0, #5]
    47c8:	7182      	strb	r2, [r0, #6]
    47ca:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    47ce:	4780      	blx	r0
    47d0:	7820      	ldrb	r0, [r4, #0]
    47d2:	1c40      	adds	r0, r0, #1
    47d4:	b2c0      	uxtb	r0, r0
    47d6:	7020      	strb	r0, [r4, #0]
    47d8:	2805      	cmp	r0, #5
    47da:	d301      	bcc.n	47e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    47dc:	2000      	movs	r0, #0
    47de:	7020      	strb	r0, [r4, #0]
    47e0:	1e6d      	subs	r5, r5, #1
    47e2:	b2ed      	uxtb	r5, r5
    47e4:	d2e5      	bcs.n	47b2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    47e6:	bd70      	pop	{r4, r5, r6, pc}
    47e8:	200011ec 	.word	0x200011ec
    47ec:	2000032a 	.word	0x2000032a

000047f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    47f0:	b500      	push	{lr}
    47f2:	f008 fb94 	bl	cf1e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    47f6:	b940      	cbnz	r0, 480a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    47f8:	f008 fb9b 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    47fc:	b928      	cbnz	r0, 480a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    47fe:	f008 fbaf 	bl	cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4802:	b910      	cbnz	r0, 480a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4804:	f008 fbc0 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4808:	b108      	cbz	r0, 480e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    480c:	bd00      	pop	{pc}
    480e:	4802      	ldr	r0, [pc, #8]	; (4818 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4810:	bd00      	pop	{pc}
    4812:	0000      	.short	0x0000
    4814:	4000050c 	.word	0x4000050c
    4818:	4001e700 	.word	0x4001e700

0000481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    481c:	b510      	push	{r4, lr}
    481e:	f008 fbb3 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4822:	b330      	cbz	r0, 4872 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4824:	f3ef 8010 	mrs	r0, PRIMASK
    4828:	b1c8      	cbz	r0, 485e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    482a:	2100      	movs	r1, #0
    482c:	b672      	cpsid	i
    482e:	4812      	ldr	r0, [pc, #72]	; (4878 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4830:	6802      	ldr	r2, [r0, #0]
    4832:	6803      	ldr	r3, [r0, #0]
    4834:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4838:	f043 0310 	orr.w	r3, r3, #16
    483c:	6003      	str	r3, [r0, #0]
    483e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4842:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4846:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    484a:	431c      	orrs	r4, r3
    484c:	d000      	beq.n	4850 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    484e:	bf40      	sev
    4850:	bf20      	wfe
    4852:	bf00      	nop
    4854:	bf00      	nop
    4856:	bf00      	nop
    4858:	bf00      	nop
    485a:	b112      	cbz	r2, 4862 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    485c:	e005      	b.n	486a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    485e:	2101      	movs	r1, #1
    4860:	e7e4      	b.n	482c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4862:	6802      	ldr	r2, [r0, #0]
    4864:	f022 0210 	bic.w	r2, r2, #16
    4868:	6002      	str	r2, [r0, #0]
    486a:	2900      	cmp	r1, #0
    486c:	d000      	beq.n	4870 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    486e:	b662      	cpsie	i
    4870:	bd10      	pop	{r4, pc}
    4872:	bf20      	wfe
    4874:	bd10      	pop	{r4, pc}
    4876:	0000      	.short	0x0000
    4878:	e000ed10 	.word	0xe000ed10

0000487c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    487c:	4901      	ldr	r1, [pc, #4]	; (4884 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    487e:	2001      	movs	r0, #1
    4880:	7088      	strb	r0, [r1, #2]
    4882:	4770      	bx	lr
    4884:	20000080 	.word	0x20000080

00004888 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4888:	0000d1d5 0000d20d 0000d1f7 0000d1e5     ................
    4898:	0000d1f1 0000d1df 0000d1d3 0000d1d1     ................
    48a8:	0000d209 0000d1fd 0000d1eb 0000d1d9     ................
    48b8:	0000d1cb 0000d1c3 0000d1c7 0000d1bd     ................

000048c8 <mpsl_fem_disable>:
    48c8:	4801      	ldr	r0, [pc, #4]	; (48d0 <mpsl_fem_disable+0x8>)
    48ca:	6800      	ldr	r0, [r0, #0]
    48cc:	6800      	ldr	r0, [r0, #0]
    48ce:	4700      	bx	r0
    48d0:	20000094 	.word	0x20000094

000048d4 <mpsl_fem_lna_configuration_clear>:
    48d4:	4801      	ldr	r0, [pc, #4]	; (48dc <mpsl_fem_lna_configuration_clear+0x8>)
    48d6:	6800      	ldr	r0, [r0, #0]
    48d8:	6940      	ldr	r0, [r0, #20]
    48da:	4700      	bx	r0
    48dc:	20000094 	.word	0x20000094

000048e0 <mpsl_fem_lna_configuration_set>:
    48e0:	4a01      	ldr	r2, [pc, #4]	; (48e8 <mpsl_fem_lna_configuration_set+0x8>)
    48e2:	6812      	ldr	r2, [r2, #0]
    48e4:	68d2      	ldr	r2, [r2, #12]
    48e6:	4710      	bx	r2
    48e8:	20000094 	.word	0x20000094

000048ec <mpsl_fem_lna_is_configured>:
    48ec:	4901      	ldr	r1, [pc, #4]	; (48f4 <mpsl_fem_lna_is_configured+0x8>)
    48ee:	6809      	ldr	r1, [r1, #0]
    48f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    48f2:	4708      	bx	r1
    48f4:	20000094 	.word	0x20000094

000048f8 <mpsl_fem_pa_configuration_clear>:
    48f8:	4801      	ldr	r0, [pc, #4]	; (4900 <mpsl_fem_pa_configuration_clear+0x8>)
    48fa:	6800      	ldr	r0, [r0, #0]
    48fc:	6900      	ldr	r0, [r0, #16]
    48fe:	4700      	bx	r0
    4900:	20000094 	.word	0x20000094

00004904 <mpsl_fem_pa_configuration_set>:
    4904:	4a01      	ldr	r2, [pc, #4]	; (490c <mpsl_fem_pa_configuration_set+0x8>)
    4906:	6812      	ldr	r2, [r2, #0]
    4908:	6892      	ldr	r2, [r2, #8]
    490a:	4710      	bx	r2
    490c:	20000094 	.word	0x20000094

00004910 <mpsl_fem_pa_gain_set>:
    4910:	4901      	ldr	r1, [pc, #4]	; (4918 <mpsl_fem_pa_gain_set+0x8>)
    4912:	6809      	ldr	r1, [r1, #0]
    4914:	6a49      	ldr	r1, [r1, #36]	; 0x24
    4916:	4708      	bx	r1
    4918:	20000094 	.word	0x20000094

0000491c <mpsl_fem_pa_is_configured>:
    491c:	4901      	ldr	r1, [pc, #4]	; (4924 <mpsl_fem_pa_is_configured+0x8>)
    491e:	6809      	ldr	r1, [r1, #0]
    4920:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4922:	4708      	bx	r1
    4924:	20000094 	.word	0x20000094

00004928 <mpsl_fem_tx_power_split>:
    4928:	4b01      	ldr	r3, [pc, #4]	; (4930 <mpsl_fem_tx_power_split+0x8>)
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	685b      	ldr	r3, [r3, #4]
    492e:	4718      	bx	r3
    4930:	20000094 	.word	0x20000094

00004934 <mpsl_fem_device_config_254_apply_get>:
    4934:	4801      	ldr	r0, [pc, #4]	; (493c <mpsl_fem_device_config_254_apply_get+0x8>)
    4936:	7800      	ldrb	r0, [r0, #0]
    4938:	4770      	bx	lr
    493a:	0000      	.short	0x0000
    493c:	2000032b 	.word	0x2000032b
    4940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4942:	4c14      	ldr	r4, [pc, #80]	; (4994 <mpsl_fem_device_config_254_apply_get+0x60>)
    4944:	7a20      	ldrb	r0, [r4, #8]
    4946:	f88d 0001 	strb.w	r0, [sp, #1]
    494a:	79e0      	ldrb	r0, [r4, #7]
    494c:	f88d 0000 	strb.w	r0, [sp]
    4950:	79a0      	ldrb	r0, [r4, #6]
    4952:	f8ad 0004 	strh.w	r0, [sp, #4]
    4956:	7960      	ldrb	r0, [r4, #5]
    4958:	f8ad 0002 	strh.w	r0, [sp, #2]
    495c:	4668      	mov	r0, sp
    495e:	f006 f973 	bl	ac48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4962:	b108      	cbz	r0, 4968 <mpsl_fem_device_config_254_apply_get+0x34>
    4964:	2183      	movs	r1, #131	; 0x83
    4966:	e010      	b.n	498a <mpsl_fem_device_config_254_apply_get+0x56>
    4968:	68e0      	ldr	r0, [r4, #12]
    496a:	9002      	str	r0, [sp, #8]
    496c:	a802      	add	r0, sp, #8
    496e:	f006 f981 	bl	ac74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4972:	b108      	cbz	r0, 4978 <mpsl_fem_device_config_254_apply_get+0x44>
    4974:	2187      	movs	r1, #135	; 0x87
    4976:	e008      	b.n	498a <mpsl_fem_device_config_254_apply_get+0x56>
    4978:	4807      	ldr	r0, [pc, #28]	; (4998 <mpsl_fem_device_config_254_apply_get+0x64>)
    497a:	6800      	ldr	r0, [r0, #0]
    497c:	9003      	str	r0, [sp, #12]
    497e:	a803      	add	r0, sp, #12
    4980:	f00b fe34 	bl	105ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4984:	2800      	cmp	r0, #0
    4986:	d003      	beq.n	4990 <mpsl_fem_device_config_254_apply_get+0x5c>
    4988:	218b      	movs	r1, #139	; 0x8b
    498a:	2003      	movs	r0, #3
    498c:	f000 f8ec 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4990:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4992:	0000      	.short	0x0000
    4994:	20001214 	.word	0x20001214
    4998:	00004c74 	.word	0x00004c74

0000499c <sdc_build_revision_get>:
    499c:	b510      	push	{r4, lr}
    499e:	b128      	cbz	r0, 49ac <sdc_build_revision_get+0x10>
    49a0:	2214      	movs	r2, #20
    49a2:	4904      	ldr	r1, [pc, #16]	; (49b4 <sdc_build_revision_get+0x18>)
    49a4:	f008 fb30 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    49a8:	2000      	movs	r0, #0
    49aa:	bd10      	pop	{r4, pc}
    49ac:	f06f 0015 	mvn.w	r0, #21
    49b0:	bd10      	pop	{r4, pc}
    49b2:	0000      	.short	0x0000
    49b4:	00004c90 	.word	0x00004c90

000049b8 <sdc_cfg_set>:
    49b8:	b570      	push	{r4, r5, r6, lr}
    49ba:	0003      	movs	r3, r0
    49bc:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    49c0:	d103      	bne.n	49ca <sdc_cfg_set+0x12>
    49c2:	4c2e      	ldr	r4, [pc, #184]	; (4a7c <sdc_cfg_set+0xc4>)
    49c4:	7863      	ldrb	r3, [r4, #1]
    49c6:	b10b      	cbz	r3, 49cc <sdc_cfg_set+0x14>
    49c8:	1180      	asrs	r0, r0, #6
    49ca:	bd70      	pop	{r4, r5, r6, pc}
    49cc:	b301      	cbz	r1, 4a10 <sdc_cfg_set+0x58>
    49ce:	f06f 0515 	mvn.w	r5, #21
    49d2:	b38a      	cbz	r2, 4a38 <sdc_cfg_set+0x80>
    49d4:	4b2a      	ldr	r3, [pc, #168]	; (4a80 <sdc_cfg_set+0xc8>)
    49d6:	290c      	cmp	r1, #12
    49d8:	d24b      	bcs.n	4a72 <sdc_cfg_set+0xba>
    49da:	e8df f001 	tbb	[pc, r1]
    49de:	064a      	.short	0x064a
    49e0:	1d1a0c09 	.word	0x1d1a0c09
    49e4:	31202e25 	.word	0x31202e25
    49e8:	3b36      	.short	0x3b36
    49ea:	7810      	ldrb	r0, [r2, #0]
    49ec:	7018      	strb	r0, [r3, #0]
    49ee:	e035      	b.n	4a5c <sdc_cfg_set+0xa4>
    49f0:	7810      	ldrb	r0, [r2, #0]
    49f2:	7058      	strb	r0, [r3, #1]
    49f4:	e032      	b.n	4a5c <sdc_cfg_set+0xa4>
    49f6:	7890      	ldrb	r0, [r2, #2]
    49f8:	b1f0      	cbz	r0, 4a38 <sdc_cfg_set+0x80>
    49fa:	78d0      	ldrb	r0, [r2, #3]
    49fc:	b1e0      	cbz	r0, 4a38 <sdc_cfg_set+0x80>
    49fe:	7810      	ldrb	r0, [r2, #0]
    4a00:	281b      	cmp	r0, #27
    4a02:	d336      	bcc.n	4a72 <sdc_cfg_set+0xba>
    4a04:	7850      	ldrb	r0, [r2, #1]
    4a06:	281b      	cmp	r0, #27
    4a08:	d333      	bcc.n	4a72 <sdc_cfg_set+0xba>
    4a0a:	6810      	ldr	r0, [r2, #0]
    4a0c:	f8c3 0005 	str.w	r0, [r3, #5]
    4a10:	e024      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a12:	6810      	ldr	r0, [r2, #0]
    4a14:	60d8      	str	r0, [r3, #12]
    4a16:	e021      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a18:	7810      	ldrb	r0, [r2, #0]
    4a1a:	7098      	strb	r0, [r3, #2]
    4a1c:	e01e      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a1e:	7811      	ldrb	r1, [r2, #0]
    4a20:	2900      	cmp	r1, #0
    4a22:	d1d2      	bne.n	49ca <sdc_cfg_set+0x12>
    4a24:	70d9      	strb	r1, [r3, #3]
    4a26:	e019      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a28:	78e0      	ldrb	r0, [r4, #3]
    4a2a:	b110      	cbz	r0, 4a32 <sdc_cfg_set+0x7a>
    4a2c:	7810      	ldrb	r0, [r2, #0]
    4a2e:	2802      	cmp	r0, #2
    4a30:	d31f      	bcc.n	4a72 <sdc_cfg_set+0xba>
    4a32:	7810      	ldrb	r0, [r2, #0]
    4a34:	7418      	strb	r0, [r3, #16]
    4a36:	e011      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a38:	e01b      	b.n	4a72 <sdc_cfg_set+0xba>
    4a3a:	8810      	ldrh	r0, [r2, #0]
    4a3c:	8258      	strh	r0, [r3, #18]
    4a3e:	e00d      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a40:	7811      	ldrb	r1, [r2, #0]
    4a42:	2900      	cmp	r1, #0
    4a44:	d1c1      	bne.n	49ca <sdc_cfg_set+0x12>
    4a46:	7119      	strb	r1, [r3, #4]
    4a48:	e008      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a4a:	7810      	ldrb	r0, [r2, #0]
    4a4c:	2802      	cmp	r0, #2
    4a4e:	d310      	bcc.n	4a72 <sdc_cfg_set+0xba>
    4a50:	7518      	strb	r0, [r3, #20]
    4a52:	e003      	b.n	4a5c <sdc_cfg_set+0xa4>
    4a54:	7811      	ldrb	r1, [r2, #0]
    4a56:	2900      	cmp	r1, #0
    4a58:	d1b7      	bne.n	49ca <sdc_cfg_set+0x12>
    4a5a:	7559      	strb	r1, [r3, #21]
    4a5c:	2201      	movs	r2, #1
    4a5e:	4908      	ldr	r1, [pc, #32]	; (4a80 <sdc_cfg_set+0xc8>)
    4a60:	2000      	movs	r0, #0
    4a62:	f008 fbed 	bl	d240 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4a66:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4a6a:	db04      	blt.n	4a76 <sdc_cfg_set+0xbe>
    4a6c:	f06f 000b 	mvn.w	r0, #11
    4a70:	bd70      	pop	{r4, r5, r6, pc}
    4a72:	4628      	mov	r0, r5
    4a74:	bd70      	pop	{r4, r5, r6, pc}
    4a76:	2101      	movs	r1, #1
    4a78:	70a1      	strb	r1, [r4, #2]
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
    4a7c:	20000098 	.word	0x20000098
    4a80:	20001214 	.word	0x20001214

00004a84 <sdc_enable>:
    4a84:	b570      	push	{r4, r5, r6, lr}
    4a86:	460c      	mov	r4, r1
    4a88:	0005      	movs	r5, r0
    4a8a:	d019      	beq.n	4ac0 <sdc_enable+0x3c>
    4a8c:	b1c4      	cbz	r4, 4ac0 <sdc_enable+0x3c>
    4a8e:	f000 f925 	bl	4cdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4a92:	b1c0      	cbz	r0, 4ac6 <sdc_enable+0x42>
    4a94:	4628      	mov	r0, r5
    4a96:	f7ff fe4d 	bl	4734 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4a9a:	4d0c      	ldr	r5, [pc, #48]	; (4acc <sdc_enable+0x48>)
    4a9c:	2200      	movs	r2, #0
    4a9e:	490c      	ldr	r1, [pc, #48]	; (4ad0 <sdc_enable+0x4c>)
    4aa0:	7028      	strb	r0, [r5, #0]
    4aa2:	4620      	mov	r0, r4
    4aa4:	f008 fbcc 	bl	d240 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4aa8:	f00c f9df 	bl	10e6a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4aac:	2100      	movs	r1, #0
    4aae:	7828      	ldrb	r0, [r5, #0]
    4ab0:	f006 fb28 	bl	b104 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4ab4:	f7ff ff44 	bl	4940 <mpsl_fem_device_config_254_apply_get+0xc>
    4ab8:	2001      	movs	r0, #1
    4aba:	7068      	strb	r0, [r5, #1]
    4abc:	2000      	movs	r0, #0
    4abe:	bd70      	pop	{r4, r5, r6, pc}
    4ac0:	f06f 0015 	mvn.w	r0, #21
    4ac4:	bd70      	pop	{r4, r5, r6, pc}
    4ac6:	f04f 30ff 	mov.w	r0, #4294967295
    4aca:	bd70      	pop	{r4, r5, r6, pc}
    4acc:	20000098 	.word	0x20000098
    4ad0:	20001214 	.word	0x20001214

00004ad4 <sdc_init>:
    4ad4:	b530      	push	{r4, r5, lr}
    4ad6:	b087      	sub	sp, #28
    4ad8:	0005      	movs	r5, r0
    4ada:	d00c      	beq.n	4af6 <sdc_init+0x22>
    4adc:	f7ff fdd0 	bl	4680 <mpsl_is_initialized>
    4ae0:	f04f 34ff 	mov.w	r4, #4294967295
    4ae4:	b120      	cbz	r0, 4af0 <sdc_init+0x1c>
    4ae6:	f7ff fc77 	bl	43d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4aea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4aee:	d905      	bls.n	4afc <sdc_init+0x28>
    4af0:	4620      	mov	r0, r4
    4af2:	b007      	add	sp, #28
    4af4:	bd30      	pop	{r4, r5, pc}
    4af6:	f06f 0015 	mvn.w	r0, #21
    4afa:	e7fa      	b.n	4af2 <sdc_init+0x1e>
    4afc:	4c15      	ldr	r4, [pc, #84]	; (4b54 <sdc_init+0x80>)
    4afe:	4816      	ldr	r0, [pc, #88]	; (4b58 <sdc_init+0x84>)
    4b00:	6065      	str	r5, [r4, #4]
    4b02:	f000 f9f5 	bl	4ef0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4b06:	2000      	movs	r0, #0
    4b08:	7060      	strb	r0, [r4, #1]
    4b0a:	70a0      	strb	r0, [r4, #2]
    4b0c:	70e0      	strb	r0, [r4, #3]
    4b0e:	4601      	mov	r1, r0
    4b10:	2218      	movs	r2, #24
    4b12:	4668      	mov	r0, sp
    4b14:	f008 faf2 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4b18:	2218      	movs	r2, #24
    4b1a:	4910      	ldr	r1, [pc, #64]	; (4b5c <sdc_init+0x88>)
    4b1c:	4668      	mov	r0, sp
    4b1e:	f008 fa73 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b22:	2218      	movs	r2, #24
    4b24:	4669      	mov	r1, sp
    4b26:	480e      	ldr	r0, [pc, #56]	; (4b60 <sdc_init+0x8c>)
    4b28:	f008 fa6e 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b2c:	f3ef 8410 	mrs	r4, PRIMASK
    4b30:	b672      	cpsid	i
    4b32:	f06f 000c 	mvn.w	r0, #12
    4b36:	f000 fd57 	bl	55e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4b3a:	480a      	ldr	r0, [pc, #40]	; (4b64 <sdc_init+0x90>)
    4b3c:	f000 fe22 	bl	5784 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4b40:	b118      	cbz	r0, 4b4a <sdc_init+0x76>
    4b42:	219e      	movs	r1, #158	; 0x9e
    4b44:	2003      	movs	r0, #3
    4b46:	f000 f80f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b4a:	b904      	cbnz	r4, 4b4e <sdc_init+0x7a>
    4b4c:	b662      	cpsie	i
    4b4e:	2000      	movs	r0, #0
    4b50:	e7cf      	b.n	4af2 <sdc_init+0x1e>
    4b52:	0000      	.short	0x0000
    4b54:	20000098 	.word	0x20000098
    4b58:	00004941 	.word	0x00004941
    4b5c:	00004c78 	.word	0x00004c78
    4b60:	20001214 	.word	0x20001214
    4b64:	00004d09 	.word	0x00004d09

00004b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4b68:	b50e      	push	{r1, r2, r3, lr}
    4b6a:	b672      	cpsid	i
    4b6c:	4a15      	ldr	r2, [pc, #84]	; (4bc4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4b6e:	6855      	ldr	r5, [r2, #4]
    4b70:	b1dd      	cbz	r5, 4baa <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4b72:	2200      	movs	r2, #0
    4b74:	4603      	mov	r3, r0
    4b76:	466e      	mov	r6, sp
    4b78:	240a      	movs	r4, #10
    4b7a:	e003      	b.n	4b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4b7c:	fbb0 f0f4 	udiv	r0, r0, r4
    4b80:	1c52      	adds	r2, r2, #1
    4b82:	b2d2      	uxtb	r2, r2
    4b84:	2800      	cmp	r0, #0
    4b86:	d1f9      	bne.n	4b7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4b88:	54b0      	strb	r0, [r6, r2]
    4b8a:	e00a      	b.n	4ba2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4b8c:	b2d8      	uxtb	r0, r3
    4b8e:	fbb0 f7f4 	udiv	r7, r0, r4
    4b92:	fbb3 f3f4 	udiv	r3, r3, r4
    4b96:	fb04 0017 	mls	r0, r4, r7, r0
    4b9a:	1e52      	subs	r2, r2, #1
    4b9c:	b2d2      	uxtb	r2, r2
    4b9e:	3030      	adds	r0, #48	; 0x30
    4ba0:	54b0      	strb	r0, [r6, r2]
    4ba2:	2a00      	cmp	r2, #0
    4ba4:	d1f2      	bne.n	4b8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4ba6:	4630      	mov	r0, r6
    4ba8:	47a8      	blx	r5
    4baa:	f3bf 8f4f 	dsb	sy
    4bae:	4806      	ldr	r0, [pc, #24]	; (4bc8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4bb0:	6801      	ldr	r1, [r0, #0]
    4bb2:	4a06      	ldr	r2, [pc, #24]	; (4bcc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4bb4:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4bb8:	4311      	orrs	r1, r2
    4bba:	6001      	str	r1, [r0, #0]
    4bbc:	f3bf 8f4f 	dsb	sy
    4bc0:	bf00      	nop
    4bc2:	e7fd      	b.n	4bc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4bc4:	20000098 	.word	0x20000098
    4bc8:	e000ed0c 	.word	0xe000ed0c
    4bcc:	05fa0004 	.word	0x05fa0004

00004bd0 <sdc_support_adv>:
    4bd0:	4806      	ldr	r0, [pc, #24]	; (4bec <sdc_support_adv+0x1c>)
    4bd2:	b510      	push	{r4, lr}
    4bd4:	7881      	ldrb	r1, [r0, #2]
    4bd6:	7840      	ldrb	r0, [r0, #1]
    4bd8:	4301      	orrs	r1, r0
    4bda:	d002      	beq.n	4be2 <sdc_support_adv+0x12>
    4bdc:	f04f 30ff 	mov.w	r0, #4294967295
    4be0:	bd10      	pop	{r4, pc}
    4be2:	f006 faad 	bl	b140 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4be6:	2000      	movs	r0, #0
    4be8:	bd10      	pop	{r4, pc}
    4bea:	0000      	.short	0x0000
    4bec:	20000098 	.word	0x20000098

00004bf0 <sdc_support_dle_peripheral>:
    4bf0:	4806      	ldr	r0, [pc, #24]	; (4c0c <sdc_support_dle_peripheral+0x1c>)
    4bf2:	b510      	push	{r4, lr}
    4bf4:	7881      	ldrb	r1, [r0, #2]
    4bf6:	7840      	ldrb	r0, [r0, #1]
    4bf8:	4301      	orrs	r1, r0
    4bfa:	d002      	beq.n	4c02 <sdc_support_dle_peripheral+0x12>
    4bfc:	f04f 30ff 	mov.w	r0, #4294967295
    4c00:	bd10      	pop	{r4, pc}
    4c02:	f006 f84f 	bl	aca4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    4c06:	2000      	movs	r0, #0
    4c08:	bd10      	pop	{r4, pc}
    4c0a:	0000      	.short	0x0000
    4c0c:	20000098 	.word	0x20000098

00004c10 <sdc_support_le_2m_phy>:
    4c10:	4807      	ldr	r0, [pc, #28]	; (4c30 <sdc_support_le_2m_phy+0x20>)
    4c12:	b510      	push	{r4, lr}
    4c14:	7881      	ldrb	r1, [r0, #2]
    4c16:	7840      	ldrb	r0, [r0, #1]
    4c18:	4301      	orrs	r1, r0
    4c1a:	d002      	beq.n	4c22 <sdc_support_le_2m_phy+0x12>
    4c1c:	f04f 30ff 	mov.w	r0, #4294967295
    4c20:	bd10      	pop	{r4, pc}
    4c22:	f00b feb0 	bl	10986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4c26:	f00b febe 	bl	109a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4c2a:	2000      	movs	r0, #0
    4c2c:	bd10      	pop	{r4, pc}
    4c2e:	0000      	.short	0x0000
    4c30:	20000098 	.word	0x20000098

00004c34 <sdc_support_peripheral>:
    4c34:	4806      	ldr	r0, [pc, #24]	; (4c50 <sdc_support_peripheral+0x1c>)
    4c36:	b510      	push	{r4, lr}
    4c38:	7881      	ldrb	r1, [r0, #2]
    4c3a:	7840      	ldrb	r0, [r0, #1]
    4c3c:	4301      	orrs	r1, r0
    4c3e:	d002      	beq.n	4c46 <sdc_support_peripheral+0x12>
    4c40:	f04f 30ff 	mov.w	r0, #4294967295
    4c44:	bd10      	pop	{r4, pc}
    4c46:	f006 fa8d 	bl	b164 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4c4a:	2000      	movs	r0, #0
    4c4c:	bd10      	pop	{r4, pc}
    4c4e:	0000      	.short	0x0000
    4c50:	20000098 	.word	0x20000098

00004c54 <sdc_support_phy_update_peripheral>:
    4c54:	4806      	ldr	r0, [pc, #24]	; (4c70 <sdc_support_phy_update_peripheral+0x1c>)
    4c56:	b510      	push	{r4, lr}
    4c58:	7881      	ldrb	r1, [r0, #2]
    4c5a:	7840      	ldrb	r0, [r0, #1]
    4c5c:	4301      	orrs	r1, r0
    4c5e:	d002      	beq.n	4c66 <sdc_support_phy_update_peripheral+0x12>
    4c60:	f04f 30ff 	mov.w	r0, #4294967295
    4c64:	bd10      	pop	{r4, pc}
    4c66:	f00b fe9e 	bl	109a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4c6a:	2000      	movs	r0, #0
    4c6c:	bd10      	pop	{r4, pc}
    4c6e:	0000      	.short	0x0000
    4c70:	20000098 	.word	0x20000098
    4c74:	00000001 	.word	0x00000001
    4c78:	00010101 	.word	0x00010101
    4c7c:	031b1b00 	.word	0x031b1b00
    4c80:	00000002 	.word	0x00000002
    4c84:	00001d4c 	.word	0x00001d4c
    4c88:	001f0003 	.word	0x001f0003
    4c8c:	00000000 	.word	0x00000000
    4c90:	f1925c29 	.word	0xf1925c29
    4c94:	d1928136 	.word	0xd1928136
    4c98:	f1f0a9b7 	.word	0xf1f0a9b7
    4c9c:	194ce999 	.word	0x194ce999
    4ca0:	4a83231f 	.word	0x4a83231f

00004ca4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4ca4:	4a05      	ldr	r2, [pc, #20]	; (4cbc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4ca6:	b510      	push	{r4, lr}
    4ca8:	6852      	ldr	r2, [r2, #4]
    4caa:	b112      	cbz	r2, 4cb2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cb0:	4710      	bx	r2
    4cb2:	2192      	movs	r1, #146	; 0x92
    4cb4:	2004      	movs	r0, #4
    4cb6:	f7ff ff57 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cba:	0000      	.short	0x0000
    4cbc:	2000122c 	.word	0x2000122c

00004cc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4cc0:	4a05      	ldr	r2, [pc, #20]	; (4cd8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4cc2:	b510      	push	{r4, lr}
    4cc4:	6892      	ldr	r2, [r2, #8]
    4cc6:	b112      	cbz	r2, 4cce <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ccc:	4710      	bx	r2
    4cce:	2198      	movs	r1, #152	; 0x98
    4cd0:	2004      	movs	r0, #4
    4cd2:	f7ff ff49 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cd6:	0000      	.short	0x0000
    4cd8:	2000122c 	.word	0x2000122c

00004cdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4cdc:	4805      	ldr	r0, [pc, #20]	; (4cf4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4cde:	6801      	ldr	r1, [r0, #0]
    4ce0:	b129      	cbz	r1, 4cee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ce2:	6841      	ldr	r1, [r0, #4]
    4ce4:	b119      	cbz	r1, 4cee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ce6:	6880      	ldr	r0, [r0, #8]
    4ce8:	b108      	cbz	r0, 4cee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4cea:	2001      	movs	r0, #1
    4cec:	4770      	bx	lr
    4cee:	2000      	movs	r0, #0
    4cf0:	4770      	bx	lr
    4cf2:	0000      	.short	0x0000
    4cf4:	2000122c 	.word	0x2000122c

00004cf8 <sdc_rand_source_register>:
    4cf8:	4902      	ldr	r1, [pc, #8]	; (4d04 <sdc_rand_source_register+0xc>)
    4cfa:	c80d      	ldmia	r0, {r0, r2, r3}
    4cfc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4d00:	2000      	movs	r0, #0
    4d02:	4770      	bx	lr
    4d04:	2000122c 	.word	0x2000122c

00004d08 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d0a:	4c12      	ldr	r4, [pc, #72]	; (4d54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4d0c:	2600      	movs	r6, #0
    4d0e:	6825      	ldr	r5, [r4, #0]
    4d10:	e011      	b.n	4d36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4d12:	9800      	ldr	r0, [sp, #0]
    4d14:	2802      	cmp	r0, #2
    4d16:	d002      	beq.n	4d1e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4d18:	2803      	cmp	r0, #3
    4d1a:	d10c      	bne.n	4d36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4d1c:	e006      	b.n	4d2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4d1e:	6820      	ldr	r0, [r4, #0]
    4d20:	b110      	cbz	r0, 4d28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4d22:	2000      	movs	r0, #0
    4d24:	6026      	str	r6, [r4, #0]
    4d26:	e005      	b.n	4d34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4d28:	2128      	movs	r1, #40	; 0x28
    4d2a:	e00c      	b.n	4d46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4d2c:	6820      	ldr	r0, [r4, #0]
    4d2e:	b168      	cbz	r0, 4d4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4d30:	2001      	movs	r0, #1
    4d32:	6026      	str	r6, [r4, #0]
    4d34:	47a8      	blx	r5
    4d36:	4668      	mov	r0, sp
    4d38:	f000 fcf6 	bl	5728 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d0e8      	beq.n	4d12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4d40:	2805      	cmp	r0, #5
    4d42:	d005      	beq.n	4d50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4d44:	2135      	movs	r1, #53	; 0x35
    4d46:	2004      	movs	r0, #4
    4d48:	f7ff ff0e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d4c:	212d      	movs	r1, #45	; 0x2d
    4d4e:	e7fa      	b.n	4d46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d52:	0000      	.short	0x0000
    4d54:	200000a0 	.word	0x200000a0
    4d58:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4d5a:	4c1f      	ldr	r4, [pc, #124]	; (4dd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4d5c:	4605      	mov	r5, r0
    4d5e:	7820      	ldrb	r0, [r4, #0]
    4d60:	b140      	cbz	r0, 4d74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4d62:	78a2      	ldrb	r2, [r4, #2]
    4d64:	1c61      	adds	r1, r4, #1
    4d66:	4628      	mov	r0, r5
    4d68:	1c92      	adds	r2, r2, #2
    4d6a:	f008 f94d 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d6e:	2000      	movs	r0, #0
    4d70:	7020      	strb	r0, [r4, #0]
    4d72:	e021      	b.n	4db8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4d74:	4819      	ldr	r0, [pc, #100]	; (4ddc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4d76:	f002 f821 	bl	6dbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4d7a:	2800      	cmp	r0, #0
    4d7c:	d01d      	beq.n	4dba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4d7e:	4c17      	ldr	r4, [pc, #92]	; (4ddc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4d80:	7820      	ldrb	r0, [r4, #0]
    4d82:	2811      	cmp	r0, #17
    4d84:	d104      	bne.n	4d90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4d86:	210a      	movs	r1, #10
    4d88:	203e      	movs	r0, #62	; 0x3e
    4d8a:	f008 fae4 	bl	d356 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4d8e:	b118      	cbz	r0, 4d98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4d90:	7820      	ldrb	r0, [r4, #0]
    4d92:	2808      	cmp	r0, #8
    4d94:	d005      	beq.n	4da2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4d96:	e009      	b.n	4dac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4d98:	4910      	ldr	r1, [pc, #64]	; (4ddc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4d9a:	4628      	mov	r0, r5
    4d9c:	f008 fce4 	bl	d768 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4da0:	e00a      	b.n	4db8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4da2:	2105      	movs	r1, #5
    4da4:	203e      	movs	r0, #62	; 0x3e
    4da6:	f008 fad6 	bl	d356 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4daa:	b138      	cbz	r0, 4dbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4dac:	490b      	ldr	r1, [pc, #44]	; (4ddc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4dae:	4628      	mov	r0, r5
    4db0:	f008 fb2d 	bl	d40e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4db4:	2800      	cmp	r0, #0
    4db6:	d000      	beq.n	4dba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4db8:	2001      	movs	r0, #1
    4dba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4dbc:	88a0      	ldrh	r0, [r4, #4]
    4dbe:	f8ad 0000 	strh.w	r0, [sp]
    4dc2:	a901      	add	r1, sp, #4
    4dc4:	4668      	mov	r0, sp
    4dc6:	f008 fe02 	bl	d9ce <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4dca:	2800      	cmp	r0, #0
    4dcc:	d0f5      	beq.n	4dba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4dce:	219c      	movs	r1, #156	; 0x9c
    4dd0:	2008      	movs	r0, #8
    4dd2:	f7ff fec9 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd6:	0000      	.short	0x0000
    4dd8:	200013ca 	.word	0x200013ca
    4ddc:	200012c8 	.word	0x200012c8
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	780a      	ldrb	r2, [r1, #0]
    4de4:	7082      	strb	r2, [r0, #2]
    4de6:	b33a      	cbz	r2, 4e38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4de8:	2a01      	cmp	r2, #1
    4dea:	d825      	bhi.n	4e38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4dec:	2313      	movs	r3, #19
    4dee:	7003      	strb	r3, [r0, #0]
    4df0:	2300      	movs	r3, #0
    4df2:	e00a      	b.n	4e0a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4df4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4df8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4dfc:	78a6      	ldrb	r6, [r4, #2]
    4dfe:	70ee      	strb	r6, [r5, #3]
    4e00:	8864      	ldrh	r4, [r4, #2]
    4e02:	0a24      	lsrs	r4, r4, #8
    4e04:	1c5b      	adds	r3, r3, #1
    4e06:	712c      	strb	r4, [r5, #4]
    4e08:	b2db      	uxtb	r3, r3
    4e0a:	4293      	cmp	r3, r2
    4e0c:	d3f2      	bcc.n	4df4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4e0e:	2300      	movs	r3, #0
    4e10:	e00b      	b.n	4e2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4e12:	bf00      	nop
    4e14:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4e18:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4e1c:	792e      	ldrb	r6, [r5, #4]
    4e1e:	7166      	strb	r6, [r4, #5]
    4e20:	88ad      	ldrh	r5, [r5, #4]
    4e22:	0a2d      	lsrs	r5, r5, #8
    4e24:	1c5b      	adds	r3, r3, #1
    4e26:	71a5      	strb	r5, [r4, #6]
    4e28:	b2db      	uxtb	r3, r3
    4e2a:	4293      	cmp	r3, r2
    4e2c:	d3f2      	bcc.n	4e14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4e2e:	2101      	movs	r1, #1
    4e30:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4e34:	b2c0      	uxtb	r0, r0
    4e36:	bd70      	pop	{r4, r5, r6, pc}
    4e38:	2000      	movs	r0, #0
    4e3a:	bd70      	pop	{r4, r5, r6, pc}

00004e3c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4e3c:	2840      	cmp	r0, #64	; 0x40
    4e3e:	d203      	bcs.n	4e48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4e40:	1e40      	subs	r0, r0, #1
    4e42:	b2c1      	uxtb	r1, r0
    4e44:	4805      	ldr	r0, [pc, #20]	; (4e5c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4e46:	e005      	b.n	4e54 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4e48:	28ff      	cmp	r0, #255	; 0xff
    4e4a:	d005      	beq.n	4e58 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4e4c:	3840      	subs	r0, #64	; 0x40
    4e4e:	b2c1      	uxtb	r1, r0
    4e50:	4802      	ldr	r0, [pc, #8]	; (4e5c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4e52:	3008      	adds	r0, #8
    4e54:	f008 bcb2 	b.w	d7bc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4e58:	2001      	movs	r0, #1
    4e5a:	4770      	bx	lr
    4e5c:	200000a4 	.word	0x200000a4

00004e60 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4e60:	1e40      	subs	r0, r0, #1
    4e62:	b2c1      	uxtb	r1, r0
    4e64:	4801      	ldr	r0, [pc, #4]	; (4e6c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4e66:	f008 bca9 	b.w	d7bc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4e6a:	0000      	.short	0x0000
    4e6c:	200000b4 	.word	0x200000b4

00004e70 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4e70:	4902      	ldr	r1, [pc, #8]	; (4e7c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4e72:	6802      	ldr	r2, [r0, #0]
    4e74:	610a      	str	r2, [r1, #16]
    4e76:	6840      	ldr	r0, [r0, #4]
    4e78:	6148      	str	r0, [r1, #20]
    4e7a:	4770      	bx	lr
    4e7c:	200000a4 	.word	0x200000a4

00004e80 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4e80:	4905      	ldr	r1, [pc, #20]	; (4e98 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4e82:	6802      	ldr	r2, [r0, #0]
    4e84:	600a      	str	r2, [r1, #0]
    4e86:	6840      	ldr	r0, [r0, #4]
    4e88:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4e8c:	600a      	str	r2, [r1, #0]
    4e8e:	4a03      	ldr	r2, [pc, #12]	; (4e9c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4e90:	4310      	orrs	r0, r2
    4e92:	6048      	str	r0, [r1, #4]
    4e94:	4770      	bx	lr
    4e96:	0000      	.short	0x0000
    4e98:	200000a4 	.word	0x200000a4
    4e9c:	024007f8 	.word	0x024007f8

00004ea0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4ea0:	4902      	ldr	r1, [pc, #8]	; (4eac <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4ea2:	6802      	ldr	r2, [r0, #0]
    4ea4:	608a      	str	r2, [r1, #8]
    4ea6:	6840      	ldr	r0, [r0, #4]
    4ea8:	60c8      	str	r0, [r1, #12]
    4eaa:	4770      	bx	lr
    4eac:	200000a4 	.word	0x200000a4

00004eb0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4eb0:	4807      	ldr	r0, [pc, #28]	; (4ed0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4eb2:	f04f 31ff 	mov.w	r1, #4294967295
    4eb6:	2200      	movs	r2, #0
    4eb8:	6001      	str	r1, [r0, #0]
    4eba:	0cc9      	lsrs	r1, r1, #19
    4ebc:	6041      	str	r1, [r0, #4]
    4ebe:	f100 0108 	add.w	r1, r0, #8
    4ec2:	201f      	movs	r0, #31
    4ec4:	600a      	str	r2, [r1, #0]
    4ec6:	604a      	str	r2, [r1, #4]
    4ec8:	3108      	adds	r1, #8
    4eca:	e9c1 0200 	strd	r0, r2, [r1]
    4ece:	4770      	bx	lr
    4ed0:	200000a4 	.word	0x200000a4

00004ed4 <sdc_hci_cmd_cb_reset>:
    4ed4:	b510      	push	{r4, lr}
    4ed6:	f7ff ffeb 	bl	4eb0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4eda:	f00b fccd 	bl	10878 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4ede:	4604      	mov	r4, r0
    4ee0:	4802      	ldr	r0, [pc, #8]	; (4eec <sdc_hci_cmd_cb_reset+0x18>)
    4ee2:	6800      	ldr	r0, [r0, #0]
    4ee4:	b100      	cbz	r0, 4ee8 <sdc_hci_cmd_cb_reset+0x14>
    4ee6:	4780      	blx	r0
    4ee8:	4620      	mov	r0, r4
    4eea:	bd10      	pop	{r4, pc}
    4eec:	200000bc 	.word	0x200000bc

00004ef0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4ef0:	4901      	ldr	r1, [pc, #4]	; (4ef8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4ef2:	6008      	str	r0, [r1, #0]
    4ef4:	4770      	bx	lr
    4ef6:	0000      	.short	0x0000
    4ef8:	200000bc 	.word	0x200000bc

00004efc <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4efc:	2102      	movs	r1, #2
    4efe:	8001      	strh	r1, [r0, #0]
    4f00:	8041      	strh	r1, [r0, #2]
    4f02:	2100      	movs	r1, #0
    4f04:	7101      	strb	r1, [r0, #4]
    4f06:	2129      	movs	r1, #41	; 0x29
    4f08:	7141      	strb	r1, [r0, #5]
    4f0a:	f249 215c 	movw	r1, #37468	; 0x925c
    4f0e:	80c1      	strh	r1, [r0, #6]
    4f10:	4901      	ldr	r1, [pc, #4]	; (4f18 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4f12:	6081      	str	r1, [r0, #8]
    4f14:	2000      	movs	r0, #0
    4f16:	4770      	bx	lr
    4f18:	928136f1 	.word	0x928136f1

00004f1c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4f1c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4f1e:	4604      	mov	r4, r0
    4f20:	4669      	mov	r1, sp
    4f22:	f009 f8ad 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4f26:	b170      	cbz	r0, 4f46 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4f28:	f240 215a 	movw	r1, #602	; 0x25a
    4f2c:	e008      	b.n	4f40 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4f2e:	bf00      	nop
    4f30:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4f34:	4621      	mov	r1, r4
    4f36:	f000 f8ab 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4f3a:	b120      	cbz	r0, 4f46 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4f3c:	f240 215f 	movw	r1, #607	; 0x25f
    4f40:	2017      	movs	r0, #23
    4f42:	f7ff fe11 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f46:	4668      	mov	r0, sp
    4f48:	f000 f852 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d0ef      	beq.n	4f30 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4f50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004f54 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4f54:	b510      	push	{r4, lr}
    4f56:	2802      	cmp	r0, #2
    4f58:	d304      	bcc.n	4f64 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4f5a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4f5e:	2017      	movs	r0, #23
    4f60:	f7ff fe02 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f64:	4901      	ldr	r1, [pc, #4]	; (4f6c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4f66:	5c08      	ldrb	r0, [r1, r0]
    4f68:	bd10      	pop	{r4, pc}
    4f6a:	0000      	.short	0x0000
    4f6c:	20001238 	.word	0x20001238

00004f70 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f72:	0005      	movs	r5, r0
    4f74:	9500      	str	r5, [sp, #0]
    4f76:	d010      	beq.n	4f9a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4f78:	2600      	movs	r6, #0
    4f7a:	7808      	ldrb	r0, [r1, #0]
    4f7c:	7849      	ldrb	r1, [r1, #1]
    4f7e:	4604      	mov	r4, r0
    4f80:	42a1      	cmp	r1, r4
    4f82:	d900      	bls.n	4f86 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4f84:	460c      	mov	r4, r1
    4f86:	1cea      	adds	r2, r5, #3
    4f88:	f022 0203 	bic.w	r2, r2, #3
    4f8c:	42aa      	cmp	r2, r5
    4f8e:	d006      	beq.n	4f9e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4f90:	f240 1179 	movw	r1, #377	; 0x179
    4f94:	2017      	movs	r0, #23
    4f96:	f7ff fde7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f9a:	2601      	movs	r6, #1
    4f9c:	e7ed      	b.n	4f7a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4f9e:	4f13      	ldr	r7, [pc, #76]	; (4fec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4fa0:	7038      	strb	r0, [r7, #0]
    4fa2:	7079      	strb	r1, [r7, #1]
    4fa4:	4631      	mov	r1, r6
    4fa6:	4668      	mov	r0, sp
    4fa8:	f000 f8ee 	bl	5188 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4fac:	2100      	movs	r1, #0
    4fae:	460b      	mov	r3, r1
    4fb0:	9800      	ldr	r0, [sp, #0]
    4fb2:	1cc0      	adds	r0, r0, #3
    4fb4:	f020 0003 	bic.w	r0, r0, #3
    4fb8:	9000      	str	r0, [sp, #0]
    4fba:	b96e      	cbnz	r6, 4fd8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4fbc:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4fc0:	60d0      	str	r0, [r2, #12]
    4fc2:	2000      	movs	r0, #0
    4fc4:	e006      	b.n	4fd4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4fc6:	bf00      	nop
    4fc8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4fcc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4fd0:	1c40      	adds	r0, r0, #1
    4fd2:	b2c0      	uxtb	r0, r0
    4fd4:	42a0      	cmp	r0, r4
    4fd6:	d3f7      	bcc.n	4fc8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4fd8:	9800      	ldr	r0, [sp, #0]
    4fda:	1c49      	adds	r1, r1, #1
    4fdc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4fe0:	b2c9      	uxtb	r1, r1
    4fe2:	9000      	str	r0, [sp, #0]
    4fe4:	2902      	cmp	r1, #2
    4fe6:	d3e3      	bcc.n	4fb0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4fe8:	1b40      	subs	r0, r0, r5
    4fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fec:	20001238 	.word	0x20001238

00004ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4ff0:	b570      	push	{r4, r5, r6, lr}
    4ff2:	4604      	mov	r4, r0
    4ff4:	f009 f9f3 	bl	e3de <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4ff8:	b108      	cbz	r0, 4ffe <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4ffa:	2010      	movs	r0, #16
    4ffc:	bd70      	pop	{r4, r5, r6, pc}
    4ffe:	7825      	ldrb	r5, [r4, #0]
    5000:	f000 f8fe 	bl	5200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5004:	4602      	mov	r2, r0
    5006:	480c      	ldr	r0, [pc, #48]	; (5038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5008:	8861      	ldrh	r1, [r4, #2]
    500a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    500e:	e00e      	b.n	502e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5010:	68c3      	ldr	r3, [r0, #12]
    5012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5016:	b143      	cbz	r3, 502a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5018:	1c4a      	adds	r2, r1, #1
    501a:	8062      	strh	r2, [r4, #2]
    501c:	80a1      	strh	r1, [r4, #4]
    501e:	68c0      	ldr	r0, [r0, #12]
    5020:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5024:	60a0      	str	r0, [r4, #8]
    5026:	2000      	movs	r0, #0
    5028:	bd70      	pop	{r4, r5, r6, pc}
    502a:	1c49      	adds	r1, r1, #1
    502c:	b289      	uxth	r1, r1
    502e:	4291      	cmp	r1, r2
    5030:	d3ee      	bcc.n	5010 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5032:	8061      	strh	r1, [r4, #2]
    5034:	2005      	movs	r0, #5
    5036:	bd70      	pop	{r4, r5, r6, pc}
    5038:	20001238 	.word	0x20001238

0000503c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5040:	b121      	cbz	r1, 504c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5042:	2901      	cmp	r1, #1
    5044:	d002      	beq.n	504c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5046:	2000      	movs	r0, #0
    5048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    504c:	4c0f      	ldr	r4, [pc, #60]	; (508c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    504e:	2700      	movs	r7, #0
    5050:	463b      	mov	r3, r7
    5052:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5056:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    505a:	f814 c001 	ldrb.w	ip, [r4, r1]
    505e:	e00a      	b.n	5076 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5060:	19dc      	adds	r4, r3, r7
    5062:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5066:	b2a4      	uxth	r4, r4
    5068:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    506c:	f1be 0f00 	cmp.w	lr, #0
    5070:	d004      	beq.n	507c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5072:	1c5b      	adds	r3, r3, #1
    5074:	b29b      	uxth	r3, r3
    5076:	459c      	cmp	ip, r3
    5078:	d8f2      	bhi.n	5060 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    507a:	4634      	mov	r4, r6
    507c:	8004      	strh	r4, [r0, #0]
    507e:	4620      	mov	r0, r4
    5080:	42b4      	cmp	r4, r6
    5082:	d0e0      	beq.n	5046 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5088:	f000 b834 	b.w	50f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    508c:	20001238 	.word	0x20001238

00005090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5094:	4606      	mov	r6, r0
    5096:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    509a:	460c      	mov	r4, r1
    509c:	f243 0702 	movw	r7, #12290	; 0x3002
    50a0:	38ff      	subs	r0, #255	; 0xff
    50a2:	d020      	beq.n	50e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    50a4:	2c02      	cmp	r4, #2
    50a6:	d302      	bcc.n	50ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    50a8:	2007      	movs	r0, #7
    50aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50ae:	4630      	mov	r0, r6
    50b0:	f000 f85a 	bl	5168 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    50b4:	0005      	movs	r5, r0
    50b6:	d016      	beq.n	50e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    50b8:	480c      	ldr	r0, [pc, #48]	; (50ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    50ba:	4629      	mov	r1, r5
    50bc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    50c0:	4630      	mov	r0, r6
    50c2:	4790      	blx	r2
    50c4:	480a      	ldr	r0, [pc, #40]	; (50f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    50c6:	2100      	movs	r1, #0
    50c8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    50cc:	68f8      	ldr	r0, [r7, #12]
    50ce:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    50d2:	4620      	mov	r0, r4
    50d4:	f000 f88a 	bl	51ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    50d8:	4602      	mov	r2, r0
    50da:	4629      	mov	r1, r5
    50dc:	6878      	ldr	r0, [r7, #4]
    50de:	f008 ffae 	bl	e03e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    50e2:	2000      	movs	r0, #0
    50e4:	e7e1      	b.n	50aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    50e6:	4638      	mov	r0, r7
    50e8:	e7df      	b.n	50aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    50ea:	0000      	.short	0x0000
    50ec:	00005220 	.word	0x00005220
    50f0:	20001238 	.word	0x20001238
    50f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50f8:	4690      	mov	r8, r2
    50fa:	460d      	mov	r5, r1
    50fc:	4607      	mov	r7, r0
    50fe:	f008 ffd0 	bl	e0a2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5102:	b148      	cbz	r0, 5118 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5104:	4816      	ldr	r0, [pc, #88]	; (5160 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5106:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    510a:	68f0      	ldr	r0, [r6, #12]
    510c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5110:	b128      	cbz	r0, 511e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5112:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5116:	e015      	b.n	5144 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5118:	f240 1139 	movw	r1, #313	; 0x139
    511c:	e012      	b.n	5144 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    511e:	6870      	ldr	r0, [r6, #4]
    5120:	2800      	cmp	r0, #0
    5122:	d01a      	beq.n	515a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5124:	4628      	mov	r0, r5
    5126:	f000 f861 	bl	51ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    512a:	4601      	mov	r1, r0
    512c:	6870      	ldr	r0, [r6, #4]
    512e:	f008 ff2e 	bl	df8e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5132:	0004      	movs	r4, r0
    5134:	d010      	beq.n	5158 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5136:	68f0      	ldr	r0, [r6, #12]
    5138:	2d02      	cmp	r5, #2
    513a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    513e:	d304      	bcc.n	514a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5140:	f240 1145 	movw	r1, #325	; 0x145
    5144:	2017      	movs	r0, #23
    5146:	f7ff fd0f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    514a:	4806      	ldr	r0, [pc, #24]	; (5164 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    514c:	4642      	mov	r2, r8
    514e:	4621      	mov	r1, r4
    5150:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5154:	4638      	mov	r0, r7
    5156:	4798      	blx	r3
    5158:	4620      	mov	r0, r4
    515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    515e:	0000      	.short	0x0000
    5160:	20001238 	.word	0x20001238
    5164:	00005218 	.word	0x00005218
    5168:	b570      	push	{r4, r5, r6, lr}
    516a:	460c      	mov	r4, r1
    516c:	4605      	mov	r5, r0
    516e:	f008 ff98 	bl	e0a2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5172:	2800      	cmp	r0, #0
    5174:	d005      	beq.n	5182 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5176:	4803      	ldr	r0, [pc, #12]	; (5184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5178:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    517c:	68c0      	ldr	r0, [r0, #12]
    517e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5182:	bd70      	pop	{r4, r5, r6, pc}
    5184:	20001238 	.word	0x20001238
    5188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    518c:	4e16      	ldr	r6, [pc, #88]	; (51e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    518e:	4688      	mov	r8, r1
    5190:	4605      	mov	r5, r0
    5192:	2400      	movs	r4, #0
    5194:	6828      	ldr	r0, [r5, #0]
    5196:	1cc0      	adds	r0, r0, #3
    5198:	f020 0003 	bic.w	r0, r0, #3
    519c:	6028      	str	r0, [r5, #0]
    519e:	4620      	mov	r0, r4
    51a0:	f000 f824 	bl	51ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    51a4:	5d31      	ldrb	r1, [r6, r4]
    51a6:	4348      	muls	r0, r1
    51a8:	f1b8 0f00 	cmp.w	r8, #0
    51ac:	d001      	beq.n	51b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    51ae:	2200      	movs	r2, #0
    51b0:	e000      	b.n	51b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    51b2:	682a      	ldr	r2, [r5, #0]
    51b4:	4601      	mov	r1, r0
    51b6:	9200      	str	r2, [sp, #0]
    51b8:	b132      	cbz	r2, 51c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    51ba:	2700      	movs	r7, #0
    51bc:	ea4f 000d 	mov.w	r0, sp
    51c0:	f008 ff16 	bl	dff0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    51c4:	b11f      	cbz	r7, 51ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    51c6:	e006      	b.n	51d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    51c8:	2701      	movs	r7, #1
    51ca:	2000      	movs	r0, #0
    51cc:	e7f8      	b.n	51c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    51ce:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    51d2:	9a00      	ldr	r2, [sp, #0]
    51d4:	604a      	str	r2, [r1, #4]
    51d6:	6829      	ldr	r1, [r5, #0]
    51d8:	1c64      	adds	r4, r4, #1
    51da:	4408      	add	r0, r1
    51dc:	b2e4      	uxtb	r4, r4
    51de:	6028      	str	r0, [r5, #0]
    51e0:	2c02      	cmp	r4, #2
    51e2:	d3d7      	bcc.n	5194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    51e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51e8:	20001238 	.word	0x20001238
    51ec:	4903      	ldr	r1, [pc, #12]	; (51fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    51ee:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    51f2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    51f6:	1cc0      	adds	r0, r0, #3
    51f8:	4008      	ands	r0, r1
    51fa:	4770      	bx	lr
    51fc:	00005214 	.word	0x00005214
    5200:	4903      	ldr	r1, [pc, #12]	; (5210 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5202:	7808      	ldrb	r0, [r1, #0]
    5204:	7849      	ldrb	r1, [r1, #1]
    5206:	4288      	cmp	r0, r1
    5208:	d200      	bcs.n	520c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    520a:	4608      	mov	r0, r1
    520c:	4770      	bx	lr
    520e:	0000      	.short	0x0000
    5210:	20001238 	.word	0x20001238
    5214:	011002a0 	.word	0x011002a0
    5218:	0000e0b7 	.word	0x0000e0b7
    521c:	0000e0b7 	.word	0x0000e0b7
    5220:	0000ff25 	.word	0x0000ff25
    5224:	0000f245 	.word	0x0000f245

00005228 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5228:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    522c:	4c27      	ldr	r4, [pc, #156]	; (52cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    522e:	4606      	mov	r6, r0
    5230:	b081      	sub	sp, #4
    5232:	6820      	ldr	r0, [r4, #0]
    5234:	469a      	mov	sl, r3
    5236:	4693      	mov	fp, r2
    5238:	b158      	cbz	r0, 5252 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    523a:	7a01      	ldrb	r1, [r0, #8]
    523c:	42b1      	cmp	r1, r6
    523e:	d903      	bls.n	5248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5240:	6840      	ldr	r0, [r0, #4]
    5242:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5246:	b140      	cbz	r0, 525a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5248:	f243 0002 	movw	r0, #12290	; 0x3002
    524c:	b005      	add	sp, #20
    524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5252:	21a5      	movs	r1, #165	; 0xa5
    5254:	2018      	movs	r0, #24
    5256:	f7ff fc87 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	4619      	mov	r1, r3
    525c:	9802      	ldr	r0, [sp, #8]
    525e:	f008 ff44 	bl	e0ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5262:	4680      	mov	r8, r0
    5264:	4658      	mov	r0, fp
    5266:	990e      	ldr	r1, [sp, #56]	; 0x38
    5268:	f008 ff35 	bl	e0d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    526c:	4605      	mov	r5, r0
    526e:	eb08 0005 	add.w	r0, r8, r5
    5272:	1d00      	adds	r0, r0, #4
    5274:	b287      	uxth	r7, r0
    5276:	6820      	ldr	r0, [r4, #0]
    5278:	46a1      	mov	r9, r4
    527a:	4639      	mov	r1, r7
    527c:	6800      	ldr	r0, [r0, #0]
    527e:	f008 fe86 	bl	df8e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5282:	0004      	movs	r4, r0
    5284:	d01f      	beq.n	52c6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5286:	8067      	strh	r7, [r4, #2]
    5288:	8025      	strh	r5, [r4, #0]
    528a:	4629      	mov	r1, r5
    528c:	1d20      	adds	r0, r4, #4
    528e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5290:	4607      	mov	r7, r0
    5292:	465a      	mov	r2, fp
    5294:	2301      	movs	r3, #1
    5296:	9500      	str	r5, [sp, #0]
    5298:	f008 fdd8 	bl	de4c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    529c:	8820      	ldrh	r0, [r4, #0]
    529e:	4641      	mov	r1, r8
    52a0:	4438      	add	r0, r7
    52a2:	230a      	movs	r3, #10
    52a4:	9a02      	ldr	r2, [sp, #8]
    52a6:	f8cd a000 	str.w	sl, [sp]
    52aa:	f008 fdcf 	bl	de4c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    52ae:	8820      	ldrh	r0, [r4, #0]
    52b0:	19c1      	adds	r1, r0, r7
    52b2:	4638      	mov	r0, r7
    52b4:	f008 fdfb 	bl	deae <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    52b8:	f8d9 0000 	ldr.w	r0, [r9]
    52bc:	6840      	ldr	r0, [r0, #4]
    52be:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    52c2:	2000      	movs	r0, #0
    52c4:	e7c2      	b.n	524c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    52c6:	2004      	movs	r0, #4
    52c8:	e7c0      	b.n	524c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    52ca:	0000      	.short	0x0000
    52cc:	200000c0 	.word	0x200000c0

000052d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    52d0:	b570      	push	{r4, r5, r6, lr}
    52d2:	4c14      	ldr	r4, [pc, #80]	; (5324 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    52d4:	6823      	ldr	r3, [r4, #0]
    52d6:	b18b      	cbz	r3, 52fc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    52d8:	7a19      	ldrb	r1, [r3, #8]
    52da:	4281      	cmp	r1, r0
    52dc:	d912      	bls.n	5304 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    52de:	685a      	ldr	r2, [r3, #4]
    52e0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    52e4:	b171      	cbz	r1, 5304 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    52e6:	2500      	movs	r5, #0
    52e8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    52ec:	884a      	ldrh	r2, [r1, #2]
    52ee:	6818      	ldr	r0, [r3, #0]
    52f0:	f008 fea5 	bl	e03e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    52f4:	6821      	ldr	r1, [r4, #0]
    52f6:	2000      	movs	r0, #0
    52f8:	7a0a      	ldrb	r2, [r1, #8]
    52fa:	e00c      	b.n	5316 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    52fc:	21c8      	movs	r1, #200	; 0xc8
    52fe:	2018      	movs	r0, #24
    5300:	f7ff fc32 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5304:	f243 0002 	movw	r0, #12290	; 0x3002
    5308:	bd70      	pop	{r4, r5, r6, pc}
    530a:	684b      	ldr	r3, [r1, #4]
    530c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5310:	b933      	cbnz	r3, 5320 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5312:	1c40      	adds	r0, r0, #1
    5314:	b2c0      	uxtb	r0, r0
    5316:	4282      	cmp	r2, r0
    5318:	d8f7      	bhi.n	530a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    531a:	6808      	ldr	r0, [r1, #0]
    531c:	f008 fe84 	bl	e028 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5320:	2000      	movs	r0, #0
    5322:	bd70      	pop	{r4, r5, r6, pc}
    5324:	200000c0 	.word	0x200000c0

00005328 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    532c:	460d      	mov	r5, r1
    532e:	0004      	movs	r4, r0
    5330:	4690      	mov	r8, r2
    5332:	f04f 0600 	mov.w	r6, #0
    5336:	d009      	beq.n	534c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5338:	2700      	movs	r7, #0
    533a:	1ce0      	adds	r0, r4, #3
    533c:	f020 0003 	bic.w	r0, r0, #3
    5340:	42a0      	cmp	r0, r4
    5342:	d005      	beq.n	5350 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5344:	2186      	movs	r1, #134	; 0x86
    5346:	2018      	movs	r0, #24
    5348:	f7ff fc0e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    534c:	2701      	movs	r7, #1
    534e:	e7f4      	b.n	533a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5350:	b1cd      	cbz	r5, 5386 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5352:	4611      	mov	r1, r2
    5354:	2000      	movs	r0, #0
    5356:	f008 fe4b 	bl	dff0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    535a:	300c      	adds	r0, #12
    535c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5360:	b98f      	cbnz	r7, 5386 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5362:	4f0a      	ldr	r7, [pc, #40]	; (538c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5364:	f104 000c 	add.w	r0, r4, #12
    5368:	00aa      	lsls	r2, r5, #2
    536a:	603c      	str	r4, [r7, #0]
    536c:	7225      	strb	r5, [r4, #8]
    536e:	6060      	str	r0, [r4, #4]
    5370:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5374:	6020      	str	r0, [r4, #0]
    5376:	2100      	movs	r1, #0
    5378:	6860      	ldr	r0, [r4, #4]
    537a:	f007 febf 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    537e:	4641      	mov	r1, r8
    5380:	6838      	ldr	r0, [r7, #0]
    5382:	f008 fe35 	bl	dff0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5386:	4630      	mov	r0, r6
    5388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    538c:	200000c0 	.word	0x200000c0

00005390 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5390:	b570      	push	{r4, r5, r6, lr}
    5392:	4d08      	ldr	r5, [pc, #32]	; (53b4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5394:	6828      	ldr	r0, [r5, #0]
    5396:	2800      	cmp	r0, #0
    5398:	d00a      	beq.n	53b0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    539a:	2400      	movs	r4, #0
    539c:	e004      	b.n	53a8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    539e:	4620      	mov	r0, r4
    53a0:	f7ff ff96 	bl	52d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    53a4:	1c64      	adds	r4, r4, #1
    53a6:	b2e4      	uxtb	r4, r4
    53a8:	6828      	ldr	r0, [r5, #0]
    53aa:	7a00      	ldrb	r0, [r0, #8]
    53ac:	42a0      	cmp	r0, r4
    53ae:	d8f6      	bhi.n	539e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    53b0:	bd70      	pop	{r4, r5, r6, pc}
    53b2:	0000      	.short	0x0000
    53b4:	200000c0 	.word	0x200000c0

000053b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    53b8:	4909      	ldr	r1, [pc, #36]	; (53e0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    53ba:	b510      	push	{r4, lr}
    53bc:	4602      	mov	r2, r0
    53be:	6809      	ldr	r1, [r1, #0]
    53c0:	2000      	movs	r0, #0
    53c2:	b149      	cbz	r1, 53d8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    53c4:	7a0b      	ldrb	r3, [r1, #8]
    53c6:	4293      	cmp	r3, r2
    53c8:	d905      	bls.n	53d6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    53ca:	6849      	ldr	r1, [r1, #4]
    53cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    53d0:	2900      	cmp	r1, #0
    53d2:	d000      	beq.n	53d6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    53d4:	1d08      	adds	r0, r1, #4
    53d6:	bd10      	pop	{r4, pc}
    53d8:	21ee      	movs	r1, #238	; 0xee
    53da:	2018      	movs	r0, #24
    53dc:	f7ff fbc4 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53e0:	200000c0 	.word	0x200000c0

000053e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    53e4:	490a      	ldr	r1, [pc, #40]	; (5410 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    53e6:	b510      	push	{r4, lr}
    53e8:	4602      	mov	r2, r0
    53ea:	6809      	ldr	r1, [r1, #0]
    53ec:	2000      	movs	r0, #0
    53ee:	b159      	cbz	r1, 5408 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    53f0:	7a0b      	ldrb	r3, [r1, #8]
    53f2:	4293      	cmp	r3, r2
    53f4:	d907      	bls.n	5406 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    53f6:	6849      	ldr	r1, [r1, #4]
    53f8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    53fc:	2900      	cmp	r1, #0
    53fe:	d002      	beq.n	5406 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5400:	f831 0b04 	ldrh.w	r0, [r1], #4
    5404:	4408      	add	r0, r1
    5406:	bd10      	pop	{r4, pc}
    5408:	21fc      	movs	r1, #252	; 0xfc
    540a:	2018      	movs	r0, #24
    540c:	f7ff fbac 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5410:	200000c0 	.word	0x200000c0
    5414:	b570      	push	{r4, r5, r6, lr}
    5416:	4b1e      	ldr	r3, [pc, #120]	; (5490 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5418:	6845      	ldr	r5, [r0, #4]
    541a:	4604      	mov	r4, r0
    541c:	2200      	movs	r2, #0
    541e:	b1a1      	cbz	r1, 544a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5420:	2001      	movs	r0, #1
    5422:	7060      	strb	r0, [r4, #1]
    5424:	8858      	ldrh	r0, [r3, #2]
    5426:	0881      	lsrs	r1, r0, #2
    5428:	f05f 0000 	movs.w	r0, #0
    542c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5430:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5434:	831a      	strh	r2, [r3, #24]
    5436:	8419      	strh	r1, [r3, #32]
    5438:	fb00 5301 	mla	r3, r0, r1, r5
    543c:	6073      	str	r3, [r6, #4]
    543e:	1823      	adds	r3, r4, r0
    5440:	1c40      	adds	r0, r0, #1
    5442:	751a      	strb	r2, [r3, #20]
    5444:	2804      	cmp	r0, #4
    5446:	d3f1      	bcc.n	542c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5448:	bd70      	pop	{r4, r5, r6, pc}
    544a:	7062      	strb	r2, [r4, #1]
    544c:	f05f 0000 	movs.w	r0, #0
    5450:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5454:	830a      	strh	r2, [r1, #24]
    5456:	840a      	strh	r2, [r1, #32]
    5458:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    545c:	604a      	str	r2, [r1, #4]
    545e:	1821      	adds	r1, r4, r0
    5460:	1c40      	adds	r0, r0, #1
    5462:	750a      	strb	r2, [r1, #20]
    5464:	2804      	cmp	r0, #4
    5466:	d3f3      	bcc.n	5450 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5468:	8858      	ldrh	r0, [r3, #2]
    546a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    546e:	d201      	bcs.n	5474 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5470:	0846      	lsrs	r6, r0, #1
    5472:	e000      	b.n	5476 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5474:	26ff      	movs	r6, #255	; 0xff
    5476:	f008 feac 	bl	e1d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    547a:	6065      	str	r5, [r4, #4]
    547c:	8420      	strh	r0, [r4, #32]
    547e:	1829      	adds	r1, r5, r0
    5480:	60a1      	str	r1, [r4, #8]
    5482:	8466      	strh	r6, [r4, #34]	; 0x22
    5484:	60e5      	str	r5, [r4, #12]
    5486:	84a0      	strh	r0, [r4, #36]	; 0x24
    5488:	6121      	str	r1, [r4, #16]
    548a:	84e6      	strh	r6, [r4, #38]	; 0x26
    548c:	bd70      	pop	{r4, r5, r6, pc}
    548e:	0000      	.short	0x0000
    5490:	200000c4 	.word	0x200000c4

00005494 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5498:	b170      	cbz	r0, 54b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    549a:	2500      	movs	r5, #0
    549c:	4411      	add	r1, r2
    549e:	b2cc      	uxtb	r4, r1
    54a0:	4e25      	ldr	r6, [pc, #148]	; (5538 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    54a2:	1cc1      	adds	r1, r0, #3
    54a4:	2700      	movs	r7, #0
    54a6:	f021 0103 	bic.w	r1, r1, #3
    54aa:	7034      	strb	r4, [r6, #0]
    54ac:	4281      	cmp	r1, r0
    54ae:	d005      	beq.n	54bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    54b0:	214e      	movs	r1, #78	; 0x4e
    54b2:	2009      	movs	r0, #9
    54b4:	f7ff fb58 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b8:	2501      	movs	r5, #1
    54ba:	e7ef      	b.n	549c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    54bc:	2b1f      	cmp	r3, #31
    54be:	d804      	bhi.n	54ca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    54c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    54c4:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    54c8:	e009      	b.n	54de <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    54ca:	0059      	lsls	r1, r3, #1
    54cc:	2bff      	cmp	r3, #255	; 0xff
    54ce:	d90c      	bls.n	54ea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    54d0:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    54d4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    54d8:	d200      	bcs.n	54dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    54da:	4611      	mov	r1, r2
    54dc:	b289      	uxth	r1, r1
    54de:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    54e2:	1cc9      	adds	r1, r1, #3
    54e4:	4011      	ands	r1, r2
    54e6:	b135      	cbz	r5, 54f6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    54e8:	e007      	b.n	54fa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    54ea:	227c      	movs	r2, #124	; 0x7c
    54ec:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    54f0:	d3f4      	bcc.n	54dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    54f2:	217c      	movs	r1, #124	; 0x7c
    54f4:	e7f2      	b.n	54dc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    54f6:	6070      	str	r0, [r6, #4]
    54f8:	8071      	strh	r1, [r6, #2]
    54fa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    54fe:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    5502:	2200      	movs	r2, #0
    5504:	6876      	ldr	r6, [r6, #4]
    5506:	f04f 0c01 	mov.w	ip, #1
    550a:	e00d      	b.n	5528 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    550c:	b94d      	cbnz	r5, 5522 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    550e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    5512:	eb00 0e03 	add.w	lr, r0, r3
    5516:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    551a:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    551e:	f8c7 e004 	str.w	lr, [r7, #4]
    5522:	1c52      	adds	r2, r2, #1
    5524:	440b      	add	r3, r1
    5526:	b2d2      	uxtb	r2, r2
    5528:	42a2      	cmp	r2, r4
    552a:	d3ef      	bcc.n	550c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    552c:	1ddb      	adds	r3, r3, #7
    552e:	f023 0007 	bic.w	r0, r3, #7
    5532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5536:	0000      	.short	0x0000
    5538:	200000c4 	.word	0x200000c4

0000553c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    553c:	b570      	push	{r4, r5, r6, lr}
    553e:	4a10      	ldr	r2, [pc, #64]	; (5580 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5540:	2000      	movs	r0, #0
    5542:	6851      	ldr	r1, [r2, #4]
    5544:	7812      	ldrb	r2, [r2, #0]
    5546:	e014      	b.n	5572 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5548:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    554c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5550:	b16b      	cbz	r3, 556e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5556:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    555a:	d00c      	beq.n	5576 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    555c:	2500      	movs	r5, #0
    555e:	70a5      	strb	r5, [r4, #2]
    5560:	2101      	movs	r1, #1
    5562:	4620      	mov	r0, r4
    5564:	f7ff ff56 	bl	5414 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5568:	7025      	strb	r5, [r4, #0]
    556a:	4620      	mov	r0, r4
    556c:	bd70      	pop	{r4, r5, r6, pc}
    556e:	1c40      	adds	r0, r0, #1
    5570:	b2c0      	uxtb	r0, r0
    5572:	4290      	cmp	r0, r2
    5574:	d3e8      	bcc.n	5548 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5576:	21a9      	movs	r1, #169	; 0xa9
    5578:	2009      	movs	r0, #9
    557a:	f7ff faf5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    557e:	0000      	.short	0x0000
    5580:	200000c4 	.word	0x200000c4

00005584 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5584:	4804      	ldr	r0, [pc, #16]	; (5598 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5586:	b510      	push	{r4, lr}
    5588:	8840      	ldrh	r0, [r0, #2]
    558a:	0884      	lsrs	r4, r0, #2
    558c:	f008 fe21 	bl	e1d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5590:	4284      	cmp	r4, r0
    5592:	d300      	bcc.n	5596 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5594:	4620      	mov	r0, r4
    5596:	bd10      	pop	{r4, pc}
    5598:	200000c4 	.word	0x200000c4
    559c:	b530      	push	{r4, r5, lr}
    559e:	490d      	ldr	r1, [pc, #52]	; (55d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    55a0:	2001      	movs	r0, #1
    55a2:	6048      	str	r0, [r1, #4]
    55a4:	1e82      	subs	r2, r0, #2
    55a6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    55aa:	490b      	ldr	r1, [pc, #44]	; (55d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    55ac:	6088      	str	r0, [r1, #8]
    55ae:	2300      	movs	r3, #0
    55b0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    55b4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    55b8:	4c08      	ldr	r4, [pc, #32]	; (55dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    55ba:	6023      	str	r3, [r4, #0]
    55bc:	1d25      	adds	r5, r4, #4
    55be:	6028      	str	r0, [r5, #0]
    55c0:	6088      	str	r0, [r1, #8]
    55c2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    55c6:	6023      	str	r3, [r4, #0]
    55c8:	6028      	str	r0, [r5, #0]
    55ca:	4906      	ldr	r1, [pc, #24]	; (55e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    55cc:	4804      	ldr	r0, [pc, #16]	; (55e0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    55ce:	6008      	str	r0, [r1, #0]
    55d0:	bd30      	pop	{r4, r5, pc}
    55d2:	0000      	.short	0x0000
    55d4:	4000e000 	.word	0x4000e000
    55d8:	4000f000 	.word	0x4000f000
    55dc:	4000f500 	.word	0x4000f500
    55e0:	3ff60000 	.word	0x3ff60000
    55e4:	4001f508 	.word	0x4001f508

000055e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    55e8:	b510      	push	{r4, lr}
    55ea:	4604      	mov	r4, r0
    55ec:	f7ff ffd6 	bl	559c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    55f0:	f008 fec2 	bl	e378 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    55f4:	f000 f888 	bl	5708 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    55f8:	4905      	ldr	r1, [pc, #20]	; (5610 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    55fa:	4804      	ldr	r0, [pc, #16]	; (560c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    55fc:	6008      	str	r0, [r1, #0]
    55fe:	4620      	mov	r0, r4
    5600:	f000 f8b8 	bl	5774 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5608:	f000 b8d0 	b.w	57ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    560c:	3ff60000 	.word	0x3ff60000
    5610:	4001f508 	.word	0x4001f508
    5614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5618:	4682      	mov	sl, r0
    561a:	4838      	ldr	r0, [pc, #224]	; (56fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    561c:	f007 fc5d 	bl	ceda <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5620:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 56fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5624:	b128      	cbz	r0, 5632 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5626:	2601      	movs	r6, #1
    5628:	f10b 0001 	add.w	r0, fp, #1
    562c:	21ff      	movs	r1, #255	; 0xff
    562e:	7001      	strb	r1, [r0, #0]
    5630:	e000      	b.n	5634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5632:	2600      	movs	r6, #0
    5634:	f44f 7580 	mov.w	r5, #256	; 0x100
    5638:	4c31      	ldr	r4, [pc, #196]	; (5700 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    563a:	f04f 0800 	mov.w	r8, #0
    563e:	1d2f      	adds	r7, r5, #4
    5640:	2101      	movs	r1, #1
    5642:	6061      	str	r1, [r4, #4]
    5644:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5648:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    564c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5650:	6021      	str	r1, [r4, #0]
    5652:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5704 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5656:	e01c      	b.n	5692 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5658:	f8d9 0000 	ldr.w	r0, [r9]
    565c:	06c0      	lsls	r0, r0, #27
    565e:	d518      	bpl.n	5692 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5660:	200e      	movs	r0, #14
    5662:	f008 fe98 	bl	e396 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5666:	f3ef 8010 	mrs	r0, PRIMASK
    566a:	9000      	str	r0, [sp, #0]
    566c:	b672      	cpsid	i
    566e:	2103      	movs	r1, #3
    5670:	4620      	mov	r0, r4
    5672:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5676:	4629      	mov	r1, r5
    5678:	f008 fe9a 	bl	e3b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    567c:	b930      	cbnz	r0, 568c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    567e:	4639      	mov	r1, r7
    5680:	4620      	mov	r0, r4
    5682:	f008 fe95 	bl	e3b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5686:	b908      	cbnz	r0, 568c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5688:	f7ff f8c8 	bl	481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    568c:	9800      	ldr	r0, [sp, #0]
    568e:	b900      	cbnz	r0, 5692 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5690:	b662      	cpsie	i
    5692:	4629      	mov	r1, r5
    5694:	4620      	mov	r0, r4
    5696:	f008 fe8b 	bl	e3b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    569a:	b928      	cbnz	r0, 56a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    569c:	4639      	mov	r1, r7
    569e:	4620      	mov	r0, r4
    56a0:	f008 fe86 	bl	e3b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    56a4:	2800      	cmp	r0, #0
    56a6:	d0d7      	beq.n	5658 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    56a8:	4639      	mov	r1, r7
    56aa:	4620      	mov	r0, r4
    56ac:	f008 fe80 	bl	e3b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    56b0:	2800      	cmp	r0, #0
    56b2:	d1c5      	bne.n	5640 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    56b4:	bb06      	cbnz	r6, 56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    56b6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    56ba:	f88d 1000 	strb.w	r1, [sp]
    56be:	9900      	ldr	r1, [sp, #0]
    56c0:	9100      	str	r1, [sp, #0]
    56c2:	f89d 1000 	ldrb.w	r1, [sp]
    56c6:	b109      	cbz	r1, 56cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    56c8:	2501      	movs	r5, #1
    56ca:	e000      	b.n	56ce <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    56cc:	2500      	movs	r5, #0
    56ce:	f10b 0001 	add.w	r0, fp, #1
    56d2:	f880 8000 	strb.w	r8, [r0]
    56d6:	2003      	movs	r0, #3
    56d8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    56dc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    56e0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    56e4:	200e      	movs	r0, #14
    56e6:	f008 fe56 	bl	e396 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    56ea:	4804      	ldr	r0, [pc, #16]	; (56fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    56ec:	f007 fc0c 	bl	cf08 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    56f0:	b115      	cbz	r5, 56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    56f2:	2011      	movs	r0, #17
    56f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56f8:	2000      	movs	r0, #0
    56fa:	e7fb      	b.n	56f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    56fc:	2000032c 	.word	0x2000032c
    5700:	4000e000 	.word	0x4000e000
    5704:	e000ed10 	.word	0xe000ed10

00005708 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5708:	b510      	push	{r4, lr}
    570a:	4806      	ldr	r0, [pc, #24]	; (5724 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    570c:	f007 fbf8 	bl	cf00 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5710:	b118      	cbz	r0, 571a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    5712:	2127      	movs	r1, #39	; 0x27
    5714:	201d      	movs	r0, #29
    5716:	f7ff fa27 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    571a:	4802      	ldr	r0, [pc, #8]	; (5724 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    571c:	2100      	movs	r1, #0
    571e:	7041      	strb	r1, [r0, #1]
    5720:	bd10      	pop	{r4, pc}
    5722:	0000      	.short	0x0000
    5724:	2000032c 	.word	0x2000032c

00005728 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5728:	b570      	push	{r4, r5, r6, lr}
    572a:	4911      	ldr	r1, [pc, #68]	; (5770 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    572c:	680a      	ldr	r2, [r1, #0]
    572e:	b1ea      	cbz	r2, 576c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5730:	2300      	movs	r3, #0
    5732:	461d      	mov	r5, r3
    5734:	2401      	movs	r4, #1
    5736:	684a      	ldr	r2, [r1, #4]
    5738:	1c52      	adds	r2, r2, #1
    573a:	604a      	str	r2, [r1, #4]
    573c:	2a09      	cmp	r2, #9
    573e:	d300      	bcc.n	5742 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5740:	604d      	str	r5, [r1, #4]
    5742:	790e      	ldrb	r6, [r1, #4]
    5744:	fa04 f206 	lsl.w	r2, r4, r6
    5748:	680e      	ldr	r6, [r1, #0]
    574a:	4216      	tst	r6, r2
    574c:	d00b      	beq.n	5766 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    574e:	f3ef 8310 	mrs	r3, PRIMASK
    5752:	b672      	cpsid	i
    5754:	680c      	ldr	r4, [r1, #0]
    5756:	4394      	bics	r4, r2
    5758:	600c      	str	r4, [r1, #0]
    575a:	b903      	cbnz	r3, 575e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    575c:	b662      	cpsie	i
    575e:	6849      	ldr	r1, [r1, #4]
    5760:	6001      	str	r1, [r0, #0]
    5762:	2000      	movs	r0, #0
    5764:	bd70      	pop	{r4, r5, r6, pc}
    5766:	1c5b      	adds	r3, r3, #1
    5768:	2b09      	cmp	r3, #9
    576a:	d3e4      	bcc.n	5736 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    576c:	2005      	movs	r0, #5
    576e:	bd70      	pop	{r4, r5, r6, pc}
    5770:	200000cc 	.word	0x200000cc

00005774 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5774:	4802      	ldr	r0, [pc, #8]	; (5780 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5776:	2100      	movs	r1, #0
    5778:	6001      	str	r1, [r0, #0]
    577a:	6041      	str	r1, [r0, #4]
    577c:	4770      	bx	lr
    577e:	0000      	.short	0x0000
    5780:	200000cc 	.word	0x200000cc

00005784 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5784:	b510      	push	{r4, lr}
    5786:	4c08      	ldr	r4, [pc, #32]	; (57a8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5788:	7861      	ldrb	r1, [r4, #1]
    578a:	b109      	cbz	r1, 5790 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    578c:	200f      	movs	r0, #15
    578e:	bd10      	pop	{r4, pc}
    5790:	f7fe ffd0 	bl	4734 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5794:	7020      	strb	r0, [r4, #0]
    5796:	28ff      	cmp	r0, #255	; 0xff
    5798:	d001      	beq.n	579e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    579a:	2000      	movs	r0, #0
    579c:	bd10      	pop	{r4, pc}
    579e:	2178      	movs	r1, #120	; 0x78
    57a0:	201f      	movs	r0, #31
    57a2:	f7ff f9e1 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57a6:	0000      	.short	0x0000
    57a8:	20000000 	.word	0x20000000

000057ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    57ac:	4901      	ldr	r1, [pc, #4]	; (57b4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    57ae:	2000      	movs	r0, #0
    57b0:	7048      	strb	r0, [r1, #1]
    57b2:	4770      	bx	lr
    57b4:	20000000 	.word	0x20000000

000057b8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    57b8:	4806      	ldr	r0, [pc, #24]	; (57d4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    57ba:	4a07      	ldr	r2, [pc, #28]	; (57d8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    57bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    57be:	8852      	ldrh	r2, [r2, #2]
    57c0:	4291      	cmp	r1, r2
    57c2:	d104      	bne.n	57ce <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    57c4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    57c8:	b108      	cbz	r0, 57ce <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    57ca:	2000      	movs	r0, #0
    57cc:	4770      	bx	lr
    57ce:	2001      	movs	r0, #1
    57d0:	4770      	bx	lr
    57d2:	0000      	.short	0x0000
    57d4:	200014cc 	.word	0x200014cc
    57d8:	20000318 	.word	0x20000318

000057dc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    57dc:	4901      	ldr	r1, [pc, #4]	; (57e4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    57de:	8048      	strh	r0, [r1, #2]
    57e0:	4770      	bx	lr
    57e2:	0000      	.short	0x0000
    57e4:	20000318 	.word	0x20000318

000057e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    57e8:	4808      	ldr	r0, [pc, #32]	; (580c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    57ea:	4a09      	ldr	r2, [pc, #36]	; (5810 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    57ec:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    57ee:	8852      	ldrh	r2, [r2, #2]
    57f0:	4291      	cmp	r1, r2
    57f2:	d109      	bne.n	5808 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    57f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    57f8:	8481      	strh	r1, [r0, #36]	; 0x24
    57fa:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    57fe:	b119      	cbz	r1, 5808 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5800:	2100      	movs	r1, #0
    5802:	7001      	strb	r1, [r0, #0]
    5804:	2001      	movs	r0, #1
    5806:	4770      	bx	lr
    5808:	2000      	movs	r0, #0
    580a:	4770      	bx	lr
    580c:	200014cc 	.word	0x200014cc
    5810:	20000318 	.word	0x20000318

00005814 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5814:	4807      	ldr	r0, [pc, #28]	; (5834 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5816:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    581a:	2901      	cmp	r1, #1
    581c:	d007      	beq.n	582e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    581e:	2101      	movs	r1, #1
    5820:	7001      	strb	r1, [r0, #0]
    5822:	4805      	ldr	r0, [pc, #20]	; (5838 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5824:	4903      	ldr	r1, [pc, #12]	; (5834 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5826:	8800      	ldrh	r0, [r0, #0]
    5828:	8488      	strh	r0, [r1, #36]	; 0x24
    582a:	2001      	movs	r0, #1
    582c:	4770      	bx	lr
    582e:	2000      	movs	r0, #0
    5830:	4770      	bx	lr
    5832:	0000      	.short	0x0000
    5834:	200014cc 	.word	0x200014cc
    5838:	20000318 	.word	0x20000318

0000583c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    583c:	4906      	ldr	r1, [pc, #24]	; (5858 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    583e:	4b07      	ldr	r3, [pc, #28]	; (585c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5840:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5842:	885b      	ldrh	r3, [r3, #2]
    5844:	429a      	cmp	r2, r3
    5846:	d105      	bne.n	5854 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5848:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    584c:	b112      	cbz	r2, 5854 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    584e:	6001      	str	r1, [r0, #0]
    5850:	2001      	movs	r0, #1
    5852:	4770      	bx	lr
    5854:	2000      	movs	r0, #0
    5856:	4770      	bx	lr
    5858:	200014cc 	.word	0x200014cc
    585c:	20000318 	.word	0x20000318

00005860 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5860:	4909      	ldr	r1, [pc, #36]	; (5888 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5862:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5864:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5868:	3bff      	subs	r3, #255	; 0xff
    586a:	d002      	beq.n	5872 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    586c:	2100      	movs	r1, #0
    586e:	6001      	str	r1, [r0, #0]
    5870:	e007      	b.n	5882 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5872:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5876:	4904      	ldr	r1, [pc, #16]	; (5888 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5878:	2a01      	cmp	r2, #1
    587a:	d002      	beq.n	5882 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    587c:	6001      	str	r1, [r0, #0]
    587e:	2001      	movs	r0, #1
    5880:	4770      	bx	lr
    5882:	2000      	movs	r0, #0
    5884:	4770      	bx	lr
    5886:	0000      	.short	0x0000
    5888:	200014cc 	.word	0x200014cc

0000588c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    588c:	4901      	ldr	r1, [pc, #4]	; (5894 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    588e:	8008      	strh	r0, [r1, #0]
    5890:	4770      	bx	lr
    5892:	0000      	.short	0x0000
    5894:	20000318 	.word	0x20000318

00005898 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5898:	4905      	ldr	r1, [pc, #20]	; (58b0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    589a:	2000      	movs	r0, #0
    589c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    58a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    58a4:	8488      	strh	r0, [r1, #36]	; 0x24
    58a6:	4903      	ldr	r1, [pc, #12]	; (58b4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    58a8:	8008      	strh	r0, [r1, #0]
    58aa:	8048      	strh	r0, [r1, #2]
    58ac:	4770      	bx	lr
    58ae:	0000      	.short	0x0000
    58b0:	200014cc 	.word	0x200014cc
    58b4:	20000318 	.word	0x20000318
    58b8:	4905      	ldr	r1, [pc, #20]	; (58d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    58ba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    58bc:	4282      	cmp	r2, r0
    58be:	d105      	bne.n	58cc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    58c0:	2000      	movs	r0, #0
    58c2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    58c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    58ca:	8488      	strh	r0, [r1, #36]	; 0x24
    58cc:	4770      	bx	lr
    58ce:	0000      	.short	0x0000
    58d0:	200014cc 	.word	0x200014cc

000058d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    58d4:	4a0a      	ldr	r2, [pc, #40]	; (5900 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    58d6:	b110      	cbz	r0, 58de <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    58d8:	2801      	cmp	r0, #1
    58da:	d007      	beq.n	58ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    58dc:	e00e      	b.n	58fc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    58de:	7850      	ldrb	r0, [r2, #1]
    58e0:	b160      	cbz	r0, 58fc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    58e2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    58e6:	6008      	str	r0, [r1, #0]
    58e8:	88d0      	ldrh	r0, [r2, #6]
    58ea:	e004      	b.n	58f6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    58ec:	7810      	ldrb	r0, [r2, #0]
    58ee:	b128      	cbz	r0, 58fc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    58f0:	6890      	ldr	r0, [r2, #8]
    58f2:	6008      	str	r0, [r1, #0]
    58f4:	8990      	ldrh	r0, [r2, #12]
    58f6:	8088      	strh	r0, [r1, #4]
    58f8:	2001      	movs	r0, #1
    58fa:	4770      	bx	lr
    58fc:	2000      	movs	r0, #0
    58fe:	4770      	bx	lr
    5900:	2000032e 	.word	0x2000032e

00005904 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5904:	4a08      	ldr	r2, [pc, #32]	; (5928 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5906:	2301      	movs	r3, #1
    5908:	b138      	cbz	r0, 591a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    590a:	2801      	cmp	r0, #1
    590c:	d104      	bne.n	5918 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    590e:	7013      	strb	r3, [r2, #0]
    5910:	6808      	ldr	r0, [r1, #0]
    5912:	6090      	str	r0, [r2, #8]
    5914:	8888      	ldrh	r0, [r1, #4]
    5916:	8190      	strh	r0, [r2, #12]
    5918:	4770      	bx	lr
    591a:	7053      	strb	r3, [r2, #1]
    591c:	6808      	ldr	r0, [r1, #0]
    591e:	f8c2 0002 	str.w	r0, [r2, #2]
    5922:	8888      	ldrh	r0, [r1, #4]
    5924:	80d0      	strh	r0, [r2, #6]
    5926:	4770      	bx	lr
    5928:	2000032e 	.word	0x2000032e

0000592c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    592c:	4906      	ldr	r1, [pc, #24]	; (5948 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    592e:	b110      	cbz	r0, 5936 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5930:	2801      	cmp	r0, #1
    5932:	d002      	beq.n	593a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5934:	e005      	b.n	5942 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5936:	7848      	ldrb	r0, [r1, #1]
    5938:	e000      	b.n	593c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    593a:	7808      	ldrb	r0, [r1, #0]
    593c:	b108      	cbz	r0, 5942 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    593e:	2001      	movs	r0, #1
    5940:	4770      	bx	lr
    5942:	2000      	movs	r0, #0
    5944:	4770      	bx	lr
    5946:	0000      	.short	0x0000
    5948:	2000032e 	.word	0x2000032e

0000594c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    594c:	4901      	ldr	r1, [pc, #4]	; (5954 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    594e:	7708      	strb	r0, [r1, #28]
    5950:	4770      	bx	lr
    5952:	0000      	.short	0x0000
    5954:	20000d82 	.word	0x20000d82

00005958 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5958:	4801      	ldr	r0, [pc, #4]	; (5960 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    595a:	78c0      	ldrb	r0, [r0, #3]
    595c:	4770      	bx	lr
    595e:	0000      	.short	0x0000
    5960:	200000d4 	.word	0x200000d4

00005964 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5964:	4801      	ldr	r0, [pc, #4]	; (596c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5966:	7900      	ldrb	r0, [r0, #4]
    5968:	4770      	bx	lr
    596a:	0000      	.short	0x0000
    596c:	200000d4 	.word	0x200000d4

00005970 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    5970:	4608      	mov	r0, r1
    5972:	2100      	movs	r1, #0
    5974:	7041      	strb	r1, [r0, #1]
    5976:	211a      	movs	r1, #26
    5978:	f800 1b04 	strb.w	r1, [r0], #4
    597c:	220e      	movs	r2, #14
    597e:	4901      	ldr	r1, [pc, #4]	; (5984 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    5980:	f007 bb42 	b.w	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5984:	20000d90 	.word	0x20000d90

00005988 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5988:	b510      	push	{r4, lr}
    598a:	4604      	mov	r4, r0
    598c:	f000 f952 	bl	5c34 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5990:	b118      	cbz	r0, 599a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5992:	21c2      	movs	r1, #194	; 0xc2
    5994:	2027      	movs	r0, #39	; 0x27
    5996:	f7ff f8e7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    599a:	4803      	ldr	r0, [pc, #12]	; (59a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    599c:	2101      	movs	r1, #1
    599e:	f009 f921 	bl	ebe4 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    59a2:	4802      	ldr	r0, [pc, #8]	; (59ac <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    59a4:	62c4      	str	r4, [r0, #44]	; 0x2c
    59a6:	bd10      	pop	{r4, pc}
    59a8:	20000d60 	.word	0x20000d60
    59ac:	200000d4 	.word	0x200000d4

000059b0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    59b0:	4901      	ldr	r1, [pc, #4]	; (59b8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    59b2:	2001      	movs	r0, #1
    59b4:	7188      	strb	r0, [r1, #6]
    59b6:	4770      	bx	lr
    59b8:	200000d4 	.word	0x200000d4

000059bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    59bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59c0:	4c5e      	ldr	r4, [pc, #376]	; (5b3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    59c2:	9d06      	ldr	r5, [sp, #24]
    59c4:	7826      	ldrb	r6, [r4, #0]
    59c6:	2e00      	cmp	r6, #0
    59c8:	d16b      	bne.n	5aa2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    59ca:	2a00      	cmp	r2, #0
    59cc:	d069      	beq.n	5aa2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    59ce:	2b00      	cmp	r3, #0
    59d0:	d067      	beq.n	5aa2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    59d2:	2d00      	cmp	r5, #0
    59d4:	d065      	beq.n	5aa2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    59d6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    59da:	f104 0614 	add.w	r6, r4, #20
    59de:	2000      	movs	r0, #0
    59e0:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    59e4:	71a0      	strb	r0, [r4, #6]
    59e6:	7160      	strb	r0, [r4, #5]
    59e8:	70e0      	strb	r0, [r4, #3]
    59ea:	70a0      	strb	r0, [r4, #2]
    59ec:	7120      	strb	r0, [r4, #4]
    59ee:	81a0      	strh	r0, [r4, #12]
    59f0:	81e0      	strh	r0, [r4, #14]
    59f2:	f000 f957 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    59f6:	4606      	mov	r6, r0
    59f8:	f000 f94e 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    59fc:	4605      	mov	r5, r0
    59fe:	f006 f813 	bl	ba28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5a02:	f005 fd6b 	bl	b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a06:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    5a0a:	f006 f891 	bl	bb30 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5a0e:	f105 001c 	add.w	r0, r5, #28
    5a12:	f006 f963 	bl	bcdc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5a16:	6968      	ldr	r0, [r5, #20]
    5a18:	f006 f956 	bl	bcc8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5a1c:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    5a20:	f006 f990 	bl	bd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5a24:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5a28:	6840      	ldr	r0, [r0, #4]
    5a2a:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    5a2e:	b108      	cbz	r0, 5a34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5a30:	f005 ff7a 	bl	b928 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5a34:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5a38:	2001      	movs	r0, #1
    5a3a:	f005 feb9 	bl	b7b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5a3e:	2800      	cmp	r0, #0
    5a40:	d075      	beq.n	5b2e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5a42:	483f      	ldr	r0, [pc, #252]	; (5b40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5a44:	f005 ff20 	bl	b888 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5a48:	8828      	ldrh	r0, [r5, #0]
    5a4a:	f7ff fccb 	bl	53e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5a4e:	6320      	str	r0, [r4, #48]	; 0x30
    5a50:	8828      	ldrh	r0, [r5, #0]
    5a52:	f7ff fcb1 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5a56:	6360      	str	r0, [r4, #52]	; 0x34
    5a58:	3678      	adds	r6, #120	; 0x78
    5a5a:	483a      	ldr	r0, [pc, #232]	; (5b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5a5c:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    5a5e:	f100 0808 	add.w	r8, r0, #8
    5a62:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5a66:	f856 1b04 	ldr.w	r1, [r6], #4
    5a6a:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5a6e:	f856 198c 	ldr.w	r1, [r6], #-140
    5a72:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    5a76:	f000 f999 	bl	5dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    5a7a:	4601      	mov	r1, r0
    5a7c:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5a7e:	f008 fe22 	bl	e6c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5a82:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5a84:	4281      	cmp	r1, r0
    5a86:	d200      	bcs.n	5a8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    5a88:	4608      	mov	r0, r1
    5a8a:	7220      	strb	r0, [r4, #8]
    5a8c:	46a0      	mov	r8, r4
    5a8e:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5a92:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    5a96:	7d37      	ldrb	r7, [r6, #20]
    5a98:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5a9c:	2908      	cmp	r1, #8
    5a9e:	d104      	bne.n	5aaa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5aa0:	e002      	b.n	5aa8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5aa2:	f44f 718d 	mov.w	r1, #282	; 0x11a
    5aa6:	e046      	b.n	5b36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    5aa8:	2104      	movs	r1, #4
    5aaa:	f008 fe0c 	bl	e6c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5aae:	b90f      	cbnz	r7, 5ab4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5ab0:	1d00      	adds	r0, r0, #4
    5ab2:	b280      	uxth	r0, r0
    5ab4:	4284      	cmp	r4, r0
    5ab6:	d200      	bcs.n	5aba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5ab8:	4620      	mov	r0, r4
    5aba:	b2c4      	uxtb	r4, r0
    5abc:	f888 4009 	strb.w	r4, [r8, #9]
    5ac0:	7d31      	ldrb	r1, [r6, #20]
    5ac2:	2900      	cmp	r1, #0
    5ac4:	d002      	beq.n	5acc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5ac6:	bf00      	nop
    5ac8:	f04f 0104 	mov.w	r1, #4
    5acc:	4421      	add	r1, r4
    5ace:	f888 1007 	strb.w	r1, [r8, #7]
    5ad2:	d014      	beq.n	5afe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    5ad4:	481b      	ldr	r0, [pc, #108]	; (5b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5ad6:	f04f 0701 	mov.w	r7, #1
    5ada:	f100 0008 	add.w	r0, r0, #8
    5ade:	7607      	strb	r7, [r0, #24]
    5ae0:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    5ae4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5ae8:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    5aec:	f008 fcf1 	bl	e4d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5af0:	4914      	ldr	r1, [pc, #80]	; (5b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5af2:	4603      	mov	r3, r0
    5af4:	4622      	mov	r2, r4
    5af6:	3108      	adds	r1, #8
    5af8:	4638      	mov	r0, r7
    5afa:	f005 fc5b 	bl	b3b4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5afe:	2001      	movs	r0, #1
    5b00:	f000 fb9a 	bl	6238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5b04:	4810      	ldr	r0, [pc, #64]	; (5b48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5b06:	6800      	ldr	r0, [r0, #0]
    5b08:	2803      	cmp	r0, #3
    5b0a:	d012      	beq.n	5b32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5b0c:	280b      	cmp	r0, #11
    5b0e:	d010      	beq.n	5b32 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5b10:	480c      	ldr	r0, [pc, #48]	; (5b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5b12:	220e      	movs	r2, #14
    5b14:	2100      	movs	r1, #0
    5b16:	3052      	adds	r0, #82	; 0x52
    5b18:	f007 faf0 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b1c:	4809      	ldr	r0, [pc, #36]	; (5b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5b1e:	88b1      	ldrh	r1, [r6, #4]
    5b20:	3052      	adds	r0, #82	; 0x52
    5b22:	8041      	strh	r1, [r0, #2]
    5b24:	8829      	ldrh	r1, [r5, #0]
    5b26:	8001      	strh	r1, [r0, #0]
    5b28:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    5b2c:	7101      	strb	r1, [r0, #4]
    5b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b32:	f240 11d5 	movw	r1, #469	; 0x1d5
    5b36:	2027      	movs	r0, #39	; 0x27
    5b38:	f7ff f816 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b3c:	200000d4 	.word	0x200000d4
    5b40:	00006438 	.word	0x00006438
    5b44:	20000d30 	.word	0x20000d30
    5b48:	40001550 	.word	0x40001550

00005b4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b50:	4605      	mov	r5, r0
    5b52:	f000 f8a7 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b56:	4e32      	ldr	r6, [pc, #200]	; (5c20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    5b58:	4604      	mov	r4, r0
    5b5a:	f04f 0800 	mov.w	r8, #0
    5b5e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5b60:	7847      	ldrb	r7, [r0, #1]
    5b62:	b10d      	cbz	r5, 5b68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5b64:	2d01      	cmp	r5, #1
    5b66:	d101      	bne.n	5b6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5b68:	f886 8001 	strb.w	r8, [r6, #1]
    5b6c:	7870      	ldrb	r0, [r6, #1]
    5b6e:	f04f 0901 	mov.w	r9, #1
    5b72:	b150      	cbz	r0, 5b8a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5b74:	2801      	cmp	r0, #1
    5b76:	d01a      	beq.n	5bae <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    5b78:	2802      	cmp	r0, #2
    5b7a:	d034      	beq.n	5be6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5b7c:	2803      	cmp	r0, #3
    5b7e:	d048      	beq.n	5c12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5b80:	f240 411d 	movw	r1, #1053	; 0x41d
    5b84:	2027      	movs	r0, #39	; 0x27
    5b86:	f7fe ffef 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b8a:	2d01      	cmp	r5, #1
    5b8c:	d032      	beq.n	5bf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5b8e:	f000 f8f9 	bl	5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5b92:	4639      	mov	r1, r7
    5b94:	2201      	movs	r2, #1
    5b96:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5b98:	f007 fff5 	bl	db86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5b9c:	e028      	b.n	5bf0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5b9e:	bf00      	nop
    5ba0:	f884 8008 	strb.w	r8, [r4, #8]
    5ba4:	e031      	b.n	5c0a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5ba6:	bf00      	nop
    5ba8:	f884 9008 	strb.w	r9, [r4, #8]
    5bac:	e02d      	b.n	5c0a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5bae:	2d01      	cmp	r5, #1
    5bb0:	d008      	beq.n	5bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5bb2:	f000 f8e7 	bl	5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5bb6:	4639      	mov	r1, r7
    5bb8:	2200      	movs	r2, #0
    5bba:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5bbc:	f007 ffe3 	bl	db86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5bc0:	2d02      	cmp	r5, #2
    5bc2:	d00b      	beq.n	5bdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5bc4:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5bc8:	1c40      	adds	r0, r0, #1
    5bca:	f141 0100 	adc.w	r1, r1, #0
    5bce:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5bd2:	7a20      	ldrb	r0, [r4, #8]
    5bd4:	2801      	cmp	r0, #1
    5bd6:	d003      	beq.n	5be0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5bd8:	f884 9008 	strb.w	r9, [r4, #8]
    5bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5be0:	f884 8008 	strb.w	r8, [r4, #8]
    5be4:	e7fa      	b.n	5bdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5be6:	2d01      	cmp	r5, #1
    5be8:	d004      	beq.n	5bf4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5bea:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5bec:	f008 f9ca 	bl	df84 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5bf0:	2d02      	cmp	r5, #2
    5bf2:	d0f3      	beq.n	5bdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5bf4:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5bf8:	1c40      	adds	r0, r0, #1
    5bfa:	f141 0100 	adc.w	r1, r1, #0
    5bfe:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5c02:	7a20      	ldrb	r0, [r4, #8]
    5c04:	2801      	cmp	r0, #1
    5c06:	d1cf      	bne.n	5ba8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    5c08:	e7ca      	b.n	5ba0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    5c0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c0e:	f001 b983 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5c12:	2d01      	cmp	r5, #1
    5c14:	d0e2      	beq.n	5bdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5c16:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5c18:	f008 f9b4 	bl	df84 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5c1c:	e7f5      	b.n	5c0a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5c1e:	0000      	.short	0x0000
    5c20:	200000d4 	.word	0x200000d4

00005c24 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5c24:	4802      	ldr	r0, [pc, #8]	; (5c30 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5c26:	89c0      	ldrh	r0, [r0, #14]
    5c28:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5c2c:	4770      	bx	lr
    5c2e:	0000      	.short	0x0000
    5c30:	200000d4 	.word	0x200000d4

00005c34 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5c34:	4804      	ldr	r0, [pc, #16]	; (5c48 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5c36:	7800      	ldrb	r0, [r0, #0]
    5c38:	b108      	cbz	r0, 5c3e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5c3a:	200c      	movs	r0, #12
    5c3c:	4770      	bx	lr
    5c3e:	4903      	ldr	r1, [pc, #12]	; (5c4c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5c40:	2000      	movs	r0, #0
    5c42:	7708      	strb	r0, [r1, #28]
    5c44:	4770      	bx	lr
    5c46:	0000      	.short	0x0000
    5c48:	200000d4 	.word	0x200000d4
    5c4c:	20000d82 	.word	0x20000d82

00005c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5c50:	480c      	ldr	r0, [pc, #48]	; (5c84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5c52:	b510      	push	{r4, lr}
    5c54:	7801      	ldrb	r1, [r0, #0]
    5c56:	b149      	cbz	r1, 5c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5c58:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5c5c:	7800      	ldrb	r0, [r0, #0]
    5c5e:	2802      	cmp	r0, #2
    5c60:	d008      	beq.n	5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5c62:	f240 11f1 	movw	r1, #497	; 0x1f1
    5c66:	2027      	movs	r0, #39	; 0x27
    5c68:	f7fe ff7e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c70:	f000 b9fe 	b.w	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5c74:	6848      	ldr	r0, [r1, #4]
    5c76:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    5c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c7e:	f005 be0b 	b.w	b898 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5c82:	0000      	.short	0x0000
    5c84:	200000d4 	.word	0x200000d4
    5c88:	4a02      	ldr	r2, [pc, #8]	; (5c94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5c8a:	8993      	ldrh	r3, [r2, #12]
    5c8c:	4303      	orrs	r3, r0
    5c8e:	8193      	strh	r3, [r2, #12]
    5c90:	6952      	ldr	r2, [r2, #20]
    5c92:	4710      	bx	r2
    5c94:	200000d4 	.word	0x200000d4
    5c98:	4801      	ldr	r0, [pc, #4]	; (5ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5c9a:	6840      	ldr	r0, [r0, #4]
    5c9c:	4770      	bx	lr
    5c9e:	0000      	.short	0x0000
    5ca0:	2000010c 	.word	0x2000010c
    5ca4:	4801      	ldr	r0, [pc, #4]	; (5cac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5ca6:	6840      	ldr	r0, [r0, #4]
    5ca8:	3078      	adds	r0, #120	; 0x78
    5caa:	4770      	bx	lr
    5cac:	2000010c 	.word	0x2000010c
    5cb0:	4a01      	ldr	r2, [pc, #4]	; (5cb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5cb2:	2100      	movs	r1, #0
    5cb4:	6952      	ldr	r2, [r2, #20]
    5cb6:	4710      	bx	r2
    5cb8:	200000d4 	.word	0x200000d4
    5cbc:	b570      	push	{r4, r5, r6, lr}
    5cbe:	f7ff fff1 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5cc2:	4604      	mov	r4, r0
    5cc4:	f7ff ffe8 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5cc8:	4605      	mov	r5, r0
    5cca:	4621      	mov	r1, r4
    5ccc:	f008 fd8c 	bl	e7e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5cd0:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    5cd4:	2901      	cmp	r1, #1
    5cd6:	d112      	bne.n	5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5cd8:	2800      	cmp	r0, #0
    5cda:	d010      	beq.n	5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5cdc:	4808      	ldr	r0, [pc, #32]	; (5d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    5cde:	882a      	ldrh	r2, [r5, #0]
    5ce0:	6841      	ldr	r1, [r0, #4]
    5ce2:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    5ce6:	8142      	strh	r2, [r0, #10]
    5ce8:	7a62      	ldrb	r2, [r4, #9]
    5cea:	7302      	strb	r2, [r0, #12]
    5cec:	7aa2      	ldrb	r2, [r4, #10]
    5cee:	7342      	strb	r2, [r0, #13]
    5cf0:	2218      	movs	r2, #24
    5cf2:	f001 f83f 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cfa:	f001 b90d 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5cfe:	bd70      	pop	{r4, r5, r6, pc}
    5d00:	2000010c 	.word	0x2000010c
    5d04:	b570      	push	{r4, r5, r6, lr}
    5d06:	4605      	mov	r5, r0
    5d08:	2901      	cmp	r1, #1
    5d0a:	d818      	bhi.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5d0c:	4c12      	ldr	r4, [pc, #72]	; (5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    5d0e:	69a1      	ldr	r1, [r4, #24]
    5d10:	4788      	blx	r1
    5d12:	b1a0      	cbz	r0, 5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5d14:	7960      	ldrb	r0, [r4, #5]
    5d16:	b990      	cbnz	r0, 5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5d18:	b9e5      	cbnz	r5, 5d54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5d1a:	f104 0010 	add.w	r0, r4, #16
    5d1e:	7801      	ldrb	r1, [r0, #0]
    5d20:	06c8      	lsls	r0, r1, #27
    5d22:	d405      	bmi.n	5d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5d24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5d26:	7800      	ldrb	r0, [r0, #0]
    5d28:	06c0      	lsls	r0, r0, #27
    5d2a:	d401      	bmi.n	5d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5d2c:	2001      	movs	r0, #1
    5d2e:	e000      	b.n	5d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5d30:	2000      	movs	r0, #0
    5d32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5d34:	b92a      	cbnz	r2, 5d42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5d36:	8962      	ldrh	r2, [r4, #10]
    5d38:	b11a      	cbz	r2, 5d42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5d3a:	06c9      	lsls	r1, r1, #27
    5d3c:	d401      	bmi.n	5d42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5d3e:	2001      	movs	r0, #1
    5d40:	bd70      	pop	{r4, r5, r6, pc}
    5d42:	89a1      	ldrh	r1, [r4, #12]
    5d44:	078a      	lsls	r2, r1, #30
    5d46:	d503      	bpl.n	5d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5d48:	6a22      	ldr	r2, [r4, #32]
    5d4a:	78d2      	ldrb	r2, [r2, #3]
    5d4c:	2a02      	cmp	r2, #2
    5d4e:	d001      	beq.n	5d54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5d50:	4308      	orrs	r0, r1
    5d52:	d1f4      	bne.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5d54:	2000      	movs	r0, #0
    5d56:	bd70      	pop	{r4, r5, r6, pc}
    5d58:	200000d4 	.word	0x200000d4
    5d5c:	b530      	push	{r4, r5, lr}
    5d5e:	4b08      	ldr	r3, [pc, #32]	; (5d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    5d60:	88dd      	ldrh	r5, [r3, #6]
    5d62:	891c      	ldrh	r4, [r3, #8]
    5d64:	b12a      	cbz	r2, 5d72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5d66:	b908      	cbnz	r0, 5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5d68:	b905      	cbnz	r5, 5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5d6a:	b114      	cbz	r4, 5d72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5d6c:	8958      	ldrh	r0, [r3, #10]
    5d6e:	1c40      	adds	r0, r0, #1
    5d70:	8158      	strh	r0, [r3, #10]
    5d72:	b111      	cbz	r1, 5d7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    5d74:	1c6d      	adds	r5, r5, #1
    5d76:	80dd      	strh	r5, [r3, #6]
    5d78:	bd30      	pop	{r4, r5, pc}
    5d7a:	1c64      	adds	r4, r4, #1
    5d7c:	811c      	strh	r4, [r3, #8]
    5d7e:	bd30      	pop	{r4, r5, pc}
    5d80:	20000d82 	.word	0x20000d82
    5d84:	b510      	push	{r4, lr}
    5d86:	4c08      	ldr	r4, [pc, #32]	; (5da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    5d88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d8a:	b138      	cbz	r0, 5d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    5d8c:	8962      	ldrh	r2, [r4, #10]
    5d8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5d90:	1cd2      	adds	r2, r2, #3
    5d92:	f007 f939 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5d96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d98:	6260      	str	r0, [r4, #36]	; 0x24
    5d9a:	bd10      	pop	{r4, pc}
    5d9c:	f240 4163 	movw	r1, #1123	; 0x463
    5da0:	2027      	movs	r0, #39	; 0x27
    5da2:	f7fe fee1 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5da6:	0000      	.short	0x0000
    5da8:	200000d4 	.word	0x200000d4
    5dac:	b510      	push	{r4, lr}
    5dae:	f7ff ff73 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5db2:	4604      	mov	r4, r0
    5db4:	f7ff ff76 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5db8:	4601      	mov	r1, r0
    5dba:	7b42      	ldrb	r2, [r0, #13]
    5dbc:	4815      	ldr	r0, [pc, #84]	; (5e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    5dbe:	2a24      	cmp	r2, #36	; 0x24
    5dc0:	d00e      	beq.n	5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5dc2:	7b89      	ldrb	r1, [r1, #14]
    5dc4:	2924      	cmp	r1, #36	; 0x24
    5dc6:	d00b      	beq.n	5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5dc8:	2a1f      	cmp	r2, #31
    5dca:	d00d      	beq.n	5de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5dcc:	2a20      	cmp	r2, #32
    5dce:	d00b      	beq.n	5de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5dd0:	2922      	cmp	r1, #34	; 0x22
    5dd2:	d00f      	beq.n	5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5dd4:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5dd8:	2804      	cmp	r0, #4
    5dda:	d100      	bne.n	5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    5ddc:	2008      	movs	r0, #8
    5dde:	bd10      	pop	{r4, pc}
    5de0:	6840      	ldr	r0, [r0, #4]
    5de2:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    5de6:	e00e      	b.n	5e06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    5de8:	2922      	cmp	r1, #34	; 0x22
    5dea:	d003      	beq.n	5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5dec:	6840      	ldr	r0, [r0, #4]
    5dee:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5df2:	e005      	b.n	5e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    5df4:	6841      	ldr	r1, [r0, #4]
    5df6:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    5dfa:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5dfe:	4008      	ands	r0, r1
    5e00:	f008 fb5d 	bl	e4be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5e04:	4601      	mov	r1, r0
    5e06:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e0e:	f008 bb6e 	b.w	e4ee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5e12:	0000      	.short	0x0000
    5e14:	2000010c 	.word	0x2000010c
    5e18:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5e1c:	468b      	mov	fp, r1
    5e1e:	4607      	mov	r7, r0
    5e20:	f7ff ff40 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e24:	f04f 0900 	mov.w	r9, #0
    5e28:	4c61      	ldr	r4, [pc, #388]	; (5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    5e2a:	4605      	mov	r5, r0
    5e2c:	f88d 9000 	strb.w	r9, [sp]
    5e30:	f8cd 9004 	str.w	r9, [sp, #4]
    5e34:	7820      	ldrb	r0, [r4, #0]
    5e36:	464e      	mov	r6, r9
    5e38:	2802      	cmp	r0, #2
    5e3a:	d004      	beq.n	5e46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    5e3c:	f240 41ea 	movw	r1, #1258	; 0x4ea
    5e40:	2027      	movs	r0, #39	; 0x27
    5e42:	f7fe fe91 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e46:	7ba0      	ldrb	r0, [r4, #14]
    5e48:	0640      	lsls	r0, r0, #25
    5e4a:	d406      	bmi.n	5e5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5e4c:	2040      	movs	r0, #64	; 0x40
    5e4e:	f7ff ff2f 	bl	5cb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5e52:	89e0      	ldrh	r0, [r4, #14]
    5e54:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5e58:	81e0      	strh	r0, [r4, #14]
    5e5a:	7d28      	ldrb	r0, [r5, #20]
    5e5c:	b3df      	cbz	r7, 5ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5e5e:	b180      	cbz	r0, 5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5e60:	f005 fb76 	bl	b550 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5e64:	f005 fb50 	bl	b508 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5e68:	b958      	cbnz	r0, 5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5e6c:	7841      	ldrb	r1, [r0, #1]
    5e6e:	b141      	cbz	r1, 5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5e70:	7800      	ldrb	r0, [r0, #0]
    5e72:	7a29      	ldrb	r1, [r5, #8]
    5e74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5e78:	4288      	cmp	r0, r1
    5e7a:	d102      	bne.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5e7c:	2001      	movs	r0, #1
    5e7e:	70a0      	strb	r0, [r4, #2]
    5e80:	e092      	b.n	5fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5e82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5e84:	7841      	ldrb	r1, [r0, #1]
    5e86:	8161      	strh	r1, [r4, #10]
    5e88:	b121      	cbz	r1, 5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5e8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5e8c:	f008 f847 	bl	df1e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5e90:	62a0      	str	r0, [r4, #40]	; 0x28
    5e92:	e000      	b.n	5e96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    5e94:	62a6      	str	r6, [r4, #40]	; 0x28
    5e96:	89e0      	ldrh	r0, [r4, #14]
    5e98:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5e9c:	81e0      	strh	r0, [r4, #14]
    5e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ea0:	79e9      	ldrb	r1, [r5, #7]
    5ea2:	7800      	ldrb	r0, [r0, #0]
    5ea4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5ea8:	4288      	cmp	r0, r1
    5eaa:	d007      	beq.n	5ebc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    5eac:	a801      	add	r0, sp, #4
    5eae:	f000 f975 	bl	619c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    5eb2:	89e0      	ldrh	r0, [r4, #14]
    5eb4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5eb8:	81e0      	strh	r0, [r4, #14]
    5eba:	e001      	b.n	5ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    5ebc:	f04f 0901 	mov.w	r9, #1
    5ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ec2:	7a29      	ldrb	r1, [r5, #8]
    5ec4:	7800      	ldrb	r0, [r0, #0]
    5ec6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5eca:	4288      	cmp	r0, r1
    5ecc:	d10e      	bne.n	5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5ece:	4668      	mov	r0, sp
    5ed0:	f000 f926 	bl	6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    5ed4:	e00a      	b.n	5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5ed6:	e7ff      	b.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5ed8:	b108      	cbz	r0, 5ede <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5eda:	f005 fb33 	bl	b544 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5ede:	78e0      	ldrb	r0, [r4, #3]
    5ee0:	1c40      	adds	r0, r0, #1
    5ee2:	70e0      	strb	r0, [r4, #3]
    5ee4:	89e0      	ldrh	r0, [r4, #14]
    5ee6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5eea:	81e0      	strh	r0, [r4, #14]
    5eec:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5ef0:	7ce8      	ldrb	r0, [r5, #19]
    5ef2:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    5ef6:	b188      	cbz	r0, 5f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    5ef8:	f7ff fece 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5efc:	492d      	ldr	r1, [pc, #180]	; (5fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5efe:	760e      	strb	r6, [r1, #24]
    5f00:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    5f04:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5f08:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    5f0c:	f008 fae1 	bl	e4d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5f10:	4603      	mov	r3, r0
    5f12:	22fb      	movs	r2, #251	; 0xfb
    5f14:	4927      	ldr	r1, [pc, #156]	; (5fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5f16:	4630      	mov	r0, r6
    5f18:	f005 fa4c 	bl	b3b4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5f1c:	f04f 0800 	mov.w	r8, #0
    5f20:	f1bb 0f00 	cmp.w	fp, #0
    5f24:	d104      	bne.n	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    5f26:	78e1      	ldrb	r1, [r4, #3]
    5f28:	2001      	movs	r0, #1
    5f2a:	f7ff feeb 	bl	5d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    5f2e:	b198      	cbz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    5f30:	f005 feb6 	bl	bca0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5f34:	f89d 0000 	ldrb.w	r0, [sp]
    5f38:	b110      	cbz	r0, 5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    5f3a:	2000      	movs	r0, #0
    5f3c:	f7ff fe06 	bl	5b4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5f40:	88a8      	ldrh	r0, [r5, #4]
    5f42:	464a      	mov	r2, r9
    5f44:	4639      	mov	r1, r7
    5f46:	f7ff ff09 	bl	5d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5f4a:	b117      	cbz	r7, 5f52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5f4c:	70e6      	strb	r6, [r4, #3]
    5f4e:	f7ff feb5 	bl	5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5f52:	f04f 0801 	mov.w	r8, #1
    5f56:	e017      	b.n	5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5f58:	f89d 0000 	ldrb.w	r0, [sp]
    5f5c:	b110      	cbz	r0, 5f64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    5f5e:	2001      	movs	r0, #1
    5f60:	f7ff fdf4 	bl	5b4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5f64:	2000      	movs	r0, #0
    5f66:	f000 f9a3 	bl	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    5f6a:	f89d 0000 	ldrb.w	r0, [sp]
    5f6e:	b110      	cbz	r0, 5f76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    5f70:	2002      	movs	r0, #2
    5f72:	f7ff fdeb 	bl	5b4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5f76:	88a8      	ldrh	r0, [r5, #4]
    5f78:	464a      	mov	r2, r9
    5f7a:	4639      	mov	r1, r7
    5f7c:	f7ff feee 	bl	5d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5f80:	b117      	cbz	r7, 5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5f82:	70e6      	strb	r6, [r4, #3]
    5f84:	f7ff fe9a 	bl	5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5f88:	9801      	ldr	r0, [sp, #4]
    5f8a:	b150      	cbz	r0, 5fa2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    5f8c:	f007 fe53 	bl	dc36 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5f90:	f8da 1004 	ldr.w	r1, [sl, #4]
    5f94:	1c40      	adds	r0, r0, #1
    5f96:	7206      	strb	r6, [r0, #8]
    5f98:	220b      	movs	r2, #11
    5f9a:	f000 feeb 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5f9e:	f000 ffbb 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5fa2:	f1b8 0f00 	cmp.w	r8, #0
    5fa6:	d001      	beq.n	5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5fa8:	f000 f862 	bl	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5fac:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5fb0:	200000d4 	.word	0x200000d4
    5fb4:	20000d38 	.word	0x20000d38
    5fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fbc:	460f      	mov	r7, r1
    5fbe:	4680      	mov	r8, r0
    5fc0:	f7ff fe70 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5fc4:	4d28      	ldr	r5, [pc, #160]	; (6068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5fc6:	4604      	mov	r4, r0
    5fc8:	7828      	ldrb	r0, [r5, #0]
    5fca:	2801      	cmp	r0, #1
    5fcc:	d004      	beq.n	5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5fce:	f240 4172 	movw	r1, #1138	; 0x472
    5fd2:	2027      	movs	r0, #39	; 0x27
    5fd4:	f7fe fdc8 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fd8:	7821      	ldrb	r1, [r4, #0]
    5fda:	2000      	movs	r0, #0
    5fdc:	2601      	movs	r6, #1
    5fde:	b129      	cbz	r1, 5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    5fe0:	7020      	strb	r0, [r4, #0]
    5fe2:	2100      	movs	r1, #0
    5fe4:	2004      	movs	r0, #4
    5fe6:	f7ff fe4f 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5fea:	70a6      	strb	r6, [r4, #2]
    5fec:	6a29      	ldr	r1, [r5, #32]
    5fee:	7808      	ldrb	r0, [r1, #0]
    5ff0:	43c0      	mvns	r0, r0
    5ff2:	0780      	lsls	r0, r0, #30
    5ff4:	d109      	bne.n	600a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    5ff6:	79a0      	ldrb	r0, [r4, #6]
    5ff8:	bb78      	cbnz	r0, 605a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    5ffa:	2002      	movs	r0, #2
    5ffc:	f7ff fe44 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6000:	6a28      	ldr	r0, [r5, #32]
    6002:	7800      	ldrb	r0, [r0, #0]
    6004:	43c0      	mvns	r0, r0
    6006:	0780      	lsls	r0, r0, #30
    6008:	d027      	beq.n	605a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    600a:	6a28      	ldr	r0, [r5, #32]
    600c:	7840      	ldrb	r0, [r0, #1]
    600e:	b110      	cbz	r0, 6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    6010:	2002      	movs	r0, #2
    6012:	71a0      	strb	r0, [r4, #6]
    6014:	e000      	b.n	6018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    6016:	71a6      	strb	r6, [r4, #6]
    6018:	7d20      	ldrb	r0, [r4, #20]
    601a:	b190      	cbz	r0, 6042 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    601c:	f7ff fe3c 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6020:	4912      	ldr	r1, [pc, #72]	; (606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6022:	7a6d      	ldrb	r5, [r5, #9]
    6024:	760e      	strb	r6, [r1, #24]
    6026:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    602a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    602e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    6032:	f008 fa4e 	bl	e4d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6036:	4603      	mov	r3, r0
    6038:	462a      	mov	r2, r5
    603a:	490c      	ldr	r1, [pc, #48]	; (606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    603c:	4630      	mov	r0, r6
    603e:	f005 f9b9 	bl	b3b4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6042:	ea37 0708 	bics.w	r7, r7, r8
    6046:	d004      	beq.n	6052 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    6048:	2100      	movs	r1, #0
    604a:	4608      	mov	r0, r1
    604c:	f7ff fe5a 	bl	5d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6050:	b128      	cbz	r0, 605e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    6052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6056:	f000 b80b 	b.w	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    605a:	2003      	movs	r0, #3
    605c:	e7d9      	b.n	6012 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6062:	2000      	movs	r0, #0
    6064:	f000 b8e8 	b.w	6238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    6068:	200000d4 	.word	0x200000d4
    606c:	20000d38 	.word	0x20000d38
    6070:	b510      	push	{r4, lr}
    6072:	f005 fb13 	bl	b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6076:	f005 fa31 	bl	b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    607a:	4c0e      	ldr	r4, [pc, #56]	; (60b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    607c:	89e0      	ldrh	r0, [r4, #14]
    607e:	f7ff fe17 	bl	5cb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6082:	69e2      	ldr	r2, [r4, #28]
    6084:	7961      	ldrb	r1, [r4, #5]
    6086:	78a0      	ldrb	r0, [r4, #2]
    6088:	4790      	blx	r2
    608a:	480b      	ldr	r0, [pc, #44]	; (60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    608c:	7f00      	ldrb	r0, [r0, #28]
    608e:	b168      	cbz	r0, 60ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6090:	4909      	ldr	r1, [pc, #36]	; (60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6092:	220e      	movs	r2, #14
    6094:	f101 000e 	add.w	r0, r1, #14
    6098:	f006 ffb6 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    609c:	4806      	ldr	r0, [pc, #24]	; (60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    609e:	221d      	movs	r2, #29
    60a0:	2100      	movs	r1, #0
    60a2:	301d      	adds	r0, #29
    60a4:	f000 fe66 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    60a8:	f000 ff36 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    60ac:	2000      	movs	r0, #0
    60ae:	7020      	strb	r0, [r4, #0]
    60b0:	bd10      	pop	{r4, pc}
    60b2:	0000      	.short	0x0000
    60b4:	200000d4 	.word	0x200000d4
    60b8:	20000d82 	.word	0x20000d82
    60bc:	4808      	ldr	r0, [pc, #32]	; (60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    60be:	b510      	push	{r4, lr}
    60c0:	7800      	ldrb	r0, [r0, #0]
    60c2:	2802      	cmp	r0, #2
    60c4:	d004      	beq.n	60d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    60c6:	f240 212a 	movw	r1, #554	; 0x22a
    60ca:	2027      	movs	r0, #39	; 0x27
    60cc:	f7fe fd4c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60d0:	4904      	ldr	r1, [pc, #16]	; (60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    60d2:	2001      	movs	r0, #1
    60d4:	7308      	strb	r0, [r1, #12]
    60d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    60da:	f7ff bfc9 	b.w	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    60de:	0000      	.short	0x0000
    60e0:	200000d4 	.word	0x200000d4
    60e4:	20000d82 	.word	0x20000d82
    60e8:	4b0c      	ldr	r3, [pc, #48]	; (611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    60ea:	b430      	push	{r4, r5}
    60ec:	79db      	ldrb	r3, [r3, #7]
    60ee:	b93a      	cbnz	r2, 6100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    60f0:	2bff      	cmp	r3, #255	; 0xff
    60f2:	d105      	bne.n	6100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    60f4:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    60f8:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    60fc:	42a2      	cmp	r2, r4
    60fe:	d00a      	beq.n	6116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    6100:	b129      	cbz	r1, 610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6102:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    6106:	bc30      	pop	{r4, r5}
    6108:	4618      	mov	r0, r3
    610a:	f005 bdf1 	b.w	bcf0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    610e:	23ff      	movs	r3, #255	; 0xff
    6110:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6114:	e7f7      	b.n	6106 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    6116:	bc30      	pop	{r4, r5}
    6118:	4770      	bx	lr
    611a:	0000      	.short	0x0000
    611c:	200000d4 	.word	0x200000d4
    6120:	b570      	push	{r4, r5, r6, lr}
    6122:	4606      	mov	r6, r0
    6124:	f7ff fdbe 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6128:	4a1b      	ldr	r2, [pc, #108]	; (6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    612a:	4604      	mov	r4, r0
    612c:	2501      	movs	r5, #1
    612e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6130:	7808      	ldrb	r0, [r1, #0]
    6132:	f000 0003 	and.w	r0, r0, #3
    6136:	2801      	cmp	r0, #1
    6138:	d00c      	beq.n	6154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    613a:	2802      	cmp	r0, #2
    613c:	d00a      	beq.n	6154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    613e:	2803      	cmp	r0, #3
    6140:	d121      	bne.n	6186 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6142:	7025      	strb	r5, [r4, #0]
    6144:	89d0      	ldrh	r0, [r2, #14]
    6146:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    614a:	81d0      	strh	r0, [r2, #14]
    614c:	2001      	movs	r0, #1
    614e:	f7ff fd9b 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6152:	e018      	b.n	6186 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6154:	7848      	ldrb	r0, [r1, #1]
    6156:	b1b0      	cbz	r0, 6186 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6158:	89d1      	ldrh	r1, [r2, #14]
    615a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    615e:	81d1      	strh	r1, [r2, #14]
    6160:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6162:	2900      	cmp	r1, #0
    6164:	d009      	beq.n	617a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6166:	28fb      	cmp	r0, #251	; 0xfb
    6168:	d808      	bhi.n	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    616a:	7990      	ldrb	r0, [r2, #6]
    616c:	b120      	cbz	r0, 6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6172:	2020      	movs	r0, #32
    6174:	f7ff bd9c 	b.w	5cb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6178:	7035      	strb	r5, [r6, #0]
    617a:	bd70      	pop	{r4, r5, r6, pc}
    617c:	7950      	ldrb	r0, [r2, #5]
    617e:	f040 0010 	orr.w	r0, r0, #16
    6182:	7150      	strb	r0, [r2, #5]
    6184:	bd70      	pop	{r4, r5, r6, pc}
    6186:	7a20      	ldrb	r0, [r4, #8]
    6188:	2801      	cmp	r0, #1
    618a:	d001      	beq.n	6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    618c:	7225      	strb	r5, [r4, #8]
    618e:	bd70      	pop	{r4, r5, r6, pc}
    6190:	2000      	movs	r0, #0
    6192:	7220      	strb	r0, [r4, #8]
    6194:	bd70      	pop	{r4, r5, r6, pc}
    6196:	0000      	.short	0x0000
    6198:	200000d4 	.word	0x200000d4
    619c:	b570      	push	{r4, r5, r6, lr}
    619e:	4605      	mov	r5, r0
    61a0:	f7ff fd80 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    61a4:	4604      	mov	r4, r0
    61a6:	7980      	ldrb	r0, [r0, #6]
    61a8:	2800      	cmp	r0, #0
    61aa:	d02d      	beq.n	6208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    61ac:	2802      	cmp	r0, #2
    61ae:	d10c      	bne.n	61ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    61b0:	481b      	ldr	r0, [pc, #108]	; (6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    61b2:	4629      	mov	r1, r5
    61b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
    61b6:	f007 fcba 	bl	db2e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    61ba:	b330      	cbz	r0, 620a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    61bc:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    61c0:	1c40      	adds	r0, r0, #1
    61c2:	f141 0100 	adc.w	r1, r1, #0
    61c6:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    61ca:	2500      	movs	r5, #0
    61cc:	71a5      	strb	r5, [r4, #6]
    61ce:	78a0      	ldrb	r0, [r4, #2]
    61d0:	b120      	cbz	r0, 61dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    61d2:	70a5      	strb	r5, [r4, #2]
    61d4:	2100      	movs	r1, #0
    61d6:	2010      	movs	r0, #16
    61d8:	f7ff fd56 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61dc:	7860      	ldrb	r0, [r4, #1]
    61de:	b170      	cbz	r0, 61fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    61e0:	7065      	strb	r5, [r4, #1]
    61e2:	f7ff fb01 	bl	57e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    61e6:	b198      	cbz	r0, 6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    61e8:	2100      	movs	r1, #0
    61ea:	2008      	movs	r0, #8
    61ec:	f7ff fd4c 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61f0:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    61f4:	1c40      	adds	r0, r0, #1
    61f6:	f141 0100 	adc.w	r1, r1, #0
    61fa:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    61fe:	79e0      	ldrb	r0, [r4, #7]
    6200:	2801      	cmp	r0, #1
    6202:	d00a      	beq.n	621a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    6204:	2001      	movs	r0, #1
    6206:	71e0      	strb	r0, [r4, #7]
    6208:	bd70      	pop	{r4, r5, r6, pc}
    620a:	f240 31b9 	movw	r1, #953	; 0x3b9
    620e:	e001      	b.n	6214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    6210:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6214:	2027      	movs	r0, #39	; 0x27
    6216:	f7fe fca7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    621a:	71e5      	strb	r5, [r4, #7]
    621c:	bd70      	pop	{r4, r5, r6, pc}
    621e:	0000      	.short	0x0000
    6220:	200000d4 	.word	0x200000d4
    6224:	4803      	ldr	r0, [pc, #12]	; (6234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6226:	7800      	ldrb	r0, [r0, #0]
    6228:	2800      	cmp	r0, #0
    622a:	d001      	beq.n	6230 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    622c:	f7ff bf20 	b.w	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6230:	4770      	bx	lr
    6232:	0000      	.short	0x0000
    6234:	200000d4 	.word	0x200000d4
    6238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    623c:	4606      	mov	r6, r0
    623e:	f7ff fd2b 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6242:	4680      	mov	r8, r0
    6244:	f7ff fd2e 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6248:	4c16      	ldr	r4, [pc, #88]	; (62a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    624a:	4605      	mov	r5, r0
    624c:	4632      	mov	r2, r6
    624e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6250:	6260      	str	r0, [r4, #36]	; 0x24
    6252:	2101      	movs	r1, #1
    6254:	4640      	mov	r0, r8
    6256:	f7ff ff47 	bl	60e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    625a:	7d28      	ldrb	r0, [r5, #20]
    625c:	2700      	movs	r7, #0
    625e:	b170      	cbz	r0, 627e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6260:	4811      	ldr	r0, [pc, #68]	; (62a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6262:	f005 fc87 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6266:	4811      	ldr	r0, [pc, #68]	; (62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6268:	2101      	movs	r1, #1
    626a:	7601      	strb	r1, [r0, #24]
    626c:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6270:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6274:	490c      	ldr	r1, [pc, #48]	; (62a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6276:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6278:	f005 f8ee 	bl	b458 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    627c:	e004      	b.n	6288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    627e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6280:	f005 fc78 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6284:	f005 f92a 	bl	b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6288:	b916      	cbnz	r6, 6290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    628a:	4638      	mov	r0, r7
    628c:	f005 fb28 	bl	b8e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6290:	2100      	movs	r1, #0
    6292:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6296:	4608      	mov	r0, r1
    6298:	f005 fce4 	bl	bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    629c:	2002      	movs	r0, #2
    629e:	7020      	strb	r0, [r4, #0]
    62a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62a4:	200000d4 	.word	0x200000d4
    62a8:	20000c30 	.word	0x20000c30
    62ac:	20000d38 	.word	0x20000d38
    62b0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    62b4:	4604      	mov	r4, r0
    62b6:	f7ff fcf5 	bl	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62ba:	4605      	mov	r5, r0
    62bc:	f7ff fcec 	bl	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    62c0:	2700      	movs	r7, #0
    62c2:	4606      	mov	r6, r0
    62c4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 642c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    62c8:	f88d 7000 	strb.w	r7, [sp]
    62cc:	4622      	mov	r2, r4
    62ce:	4639      	mov	r1, r7
    62d0:	f7ff ff0a 	bl	60e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    62d4:	79a8      	ldrb	r0, [r5, #6]
    62d6:	f04f 0801 	mov.w	r8, #1
    62da:	f1a9 0420 	sub.w	r4, r9, #32
    62de:	b140      	cbz	r0, 62f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    62e0:	2801      	cmp	r0, #1
    62e2:	d020      	beq.n	6326 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    62e4:	2802      	cmp	r0, #2
    62e6:	d02f      	beq.n	6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    62e8:	2803      	cmp	r0, #3
    62ea:	d03b      	beq.n	6364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    62ec:	f240 21d5 	movw	r1, #725	; 0x2d5
    62f0:	e057      	b.n	63a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    62f2:	7a20      	ldrb	r0, [r4, #8]
    62f4:	2154      	movs	r1, #84	; 0x54
    62f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    62fa:	5388      	strh	r0, [r1, r6]
    62fc:	4648      	mov	r0, r9
    62fe:	f7ff fa9d 	bl	583c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6302:	b130      	cbz	r0, 6312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    6304:	2080      	movs	r0, #128	; 0x80
    6306:	6a21      	ldr	r1, [r4, #32]
    6308:	f7ff fcbe 	bl	5c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    630c:	f885 8001 	strb.w	r8, [r5, #1]
    6310:	e02c      	b.n	636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6312:	466a      	mov	r2, sp
    6314:	a901      	add	r1, sp, #4
    6316:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6318:	f008 f8f3 	bl	e502 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    631c:	6220      	str	r0, [r4, #32]
    631e:	b110      	cbz	r0, 6326 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6320:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    6324:	b111      	cbz	r1, 632c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6326:	4842      	ldr	r0, [pc, #264]	; (6430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6328:	6220      	str	r0, [r4, #32]
    632a:	e01f      	b.n	636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    632c:	f89d 1000 	ldrb.w	r1, [sp]
    6330:	b921      	cbnz	r1, 633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6332:	8007      	strh	r7, [r0, #0]
    6334:	7087      	strb	r7, [r0, #2]
    6336:	2101      	movs	r1, #1
    6338:	f008 fc54 	bl	ebe4 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    633c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6340:	6a20      	ldr	r0, [r4, #32]
    6342:	f008 fc03 	bl	eb4c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6346:	e011      	b.n	636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6348:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    634c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6350:	466a      	mov	r2, sp
    6352:	a901      	add	r1, sp, #4
    6354:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6356:	f008 f8d4 	bl	e502 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    635a:	6220      	str	r0, [r4, #32]
    635c:	b930      	cbnz	r0, 636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    635e:	f240 21c6 	movw	r1, #710	; 0x2c6
    6362:	e01e      	b.n	63a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6364:	4648      	mov	r0, r9
    6366:	f7ff fa69 	bl	583c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    636a:	b1c0      	cbz	r0, 639e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    636c:	6a20      	ldr	r0, [r4, #32]
    636e:	2308      	movs	r3, #8
    6370:	7801      	ldrb	r1, [r0, #0]
    6372:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6376:	7001      	strb	r1, [r0, #0]
    6378:	79ea      	ldrb	r2, [r5, #7]
    637a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    637e:	4311      	orrs	r1, r2
    6380:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6384:	7001      	strb	r1, [r0, #0]
    6386:	7a2a      	ldrb	r2, [r5, #8]
    6388:	2304      	movs	r3, #4
    638a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    638e:	4311      	orrs	r1, r2
    6390:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6394:	7001      	strb	r1, [r0, #0]
    6396:	43c9      	mvns	r1, r1
    6398:	0789      	lsls	r1, r1, #30
    639a:	d005      	beq.n	63a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    639c:	e007      	b.n	63ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    639e:	f240 21cf 	movw	r1, #719	; 0x2cf
    63a2:	2027      	movs	r0, #39	; 0x27
    63a4:	f7fe fbe0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63a8:	78c0      	ldrb	r0, [r0, #3]
    63aa:	2802      	cmp	r0, #2
    63ac:	d00f      	beq.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    63ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63b0:	f007 fcd7 	bl	dd62 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    63b4:	b108      	cbz	r0, 63ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    63b6:	2101      	movs	r1, #1
    63b8:	e00a      	b.n	63d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    63ba:	6a20      	ldr	r0, [r4, #32]
    63bc:	7800      	ldrb	r0, [r0, #0]
    63be:	43c0      	mvns	r0, r0
    63c0:	0780      	lsls	r0, r0, #30
    63c2:	d004      	beq.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    63c4:	f7ff f9f8 	bl	57b8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    63c8:	f080 0101 	eor.w	r1, r0, #1
    63cc:	e000      	b.n	63d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    63ce:	2100      	movs	r1, #0
    63d0:	6a20      	ldr	r0, [r4, #32]
    63d2:	7802      	ldrb	r2, [r0, #0]
    63d4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    63d8:	7001      	strb	r1, [r0, #0]
    63da:	7ce9      	ldrb	r1, [r5, #19]
    63dc:	b181      	cbz	r1, 6400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    63de:	7841      	ldrb	r1, [r0, #1]
    63e0:	b171      	cbz	r1, 6400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    63e2:	4814      	ldr	r0, [pc, #80]	; (6434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    63e4:	f005 fbc6 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    63e8:	4811      	ldr	r0, [pc, #68]	; (6430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    63ea:	3828      	subs	r0, #40	; 0x28
    63ec:	7607      	strb	r7, [r0, #24]
    63ee:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    63f2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    63f6:	480f      	ldr	r0, [pc, #60]	; (6434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    63f8:	6a21      	ldr	r1, [r4, #32]
    63fa:	f005 f82d 	bl	b458 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    63fe:	e003      	b.n	6408 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    6400:	f005 fbb8 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6404:	f005 f86a 	bl	b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6408:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    640c:	2101      	movs	r1, #1
    640e:	2000      	movs	r0, #0
    6410:	f005 fc28 	bl	bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6414:	f884 8004 	strb.w	r8, [r4, #4]
    6418:	6a21      	ldr	r1, [r4, #32]
    641a:	880a      	ldrh	r2, [r1, #0]
    641c:	8222      	strh	r2, [r4, #16]
    641e:	7889      	ldrb	r1, [r1, #2]
    6420:	74a1      	strb	r1, [r4, #18]
    6422:	f884 8000 	strb.w	r8, [r4]
    6426:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    642a:	0000      	.short	0x0000
    642c:	200000f4 	.word	0x200000f4
    6430:	20000d60 	.word	0x20000d60
    6434:	20000c30 	.word	0x20000c30
    6438:	000060bd 	.word	0x000060bd
    643c:	00005e19 	.word	0x00005e19
    6440:	00005fb9 	.word	0x00005fb9
    6444:	00006225 	.word	0x00006225

00006448 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6448:	4800      	ldr	r0, [pc, #0]	; (644c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    644a:	4770      	bx	lr
    644c:	200016c5 	.word	0x200016c5

00006450 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6450:	4904      	ldr	r1, [pc, #16]	; (6464 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6452:	788a      	ldrb	r2, [r1, #2]
    6454:	4282      	cmp	r2, r0
    6456:	d903      	bls.n	6460 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6458:	4408      	add	r0, r1
    645a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    645e:	4770      	bx	lr
    6460:	2000      	movs	r0, #0
    6462:	4770      	bx	lr
    6464:	200014f2 	.word	0x200014f2

00006468 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6468:	4904      	ldr	r1, [pc, #16]	; (647c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    646a:	788a      	ldrb	r2, [r1, #2]
    646c:	4282      	cmp	r2, r0
    646e:	d903      	bls.n	6478 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6470:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6474:	3083      	adds	r0, #131	; 0x83
    6476:	4770      	bx	lr
    6478:	2000      	movs	r0, #0
    647a:	4770      	bx	lr
    647c:	200014f2 	.word	0x200014f2

00006480 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6480:	4a05      	ldr	r2, [pc, #20]	; (6498 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6482:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6486:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    648a:	6802      	ldr	r2, [r0, #0]
    648c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6490:	8880      	ldrh	r0, [r0, #4]
    6492:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6496:	4770      	bx	lr
    6498:	200014f2 	.word	0x200014f2

0000649c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64a0:	460e      	mov	r6, r1
    64a2:	4607      	mov	r7, r0
    64a4:	4615      	mov	r5, r2
    64a6:	2106      	movs	r1, #6
    64a8:	4630      	mov	r0, r6
    64aa:	f008 fa2b 	bl	e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    64ae:	4c0d      	ldr	r4, [pc, #52]	; (64e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    64b0:	b160      	cbz	r0, 64cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    64b2:	2000      	movs	r0, #0
    64b4:	e004      	b.n	64c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    64b6:	1821      	adds	r1, r4, r0
    64b8:	1c40      	adds	r0, r0, #1
    64ba:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    64be:	b2c0      	uxtb	r0, r0
    64c0:	78a1      	ldrb	r1, [r4, #2]
    64c2:	4281      	cmp	r1, r0
    64c4:	d8f7      	bhi.n	64b6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    64c6:	2001      	movs	r0, #1
    64c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64cc:	4631      	mov	r1, r6
    64ce:	4638      	mov	r0, r7
    64d0:	f008 f826 	bl	e520 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    64d4:	2808      	cmp	r0, #8
    64d6:	d003      	beq.n	64e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    64d8:	4420      	add	r0, r4
    64da:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    64de:	e7f2      	b.n	64c6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    64e0:	2000      	movs	r0, #0
    64e2:	e7f1      	b.n	64c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    64e4:	200014f2 	.word	0x200014f2

000064e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    64e8:	4904      	ldr	r1, [pc, #16]	; (64fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    64ea:	788a      	ldrb	r2, [r1, #2]
    64ec:	4282      	cmp	r2, r0
    64ee:	d903      	bls.n	64f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    64f0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    64f4:	1cc0      	adds	r0, r0, #3
    64f6:	4770      	bx	lr
    64f8:	2000      	movs	r0, #0
    64fa:	4770      	bx	lr
    64fc:	200014f2 	.word	0x200014f2

00006500 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6500:	b510      	push	{r4, lr}
    6502:	f240 12d3 	movw	r2, #467	; 0x1d3
    6506:	2100      	movs	r1, #0
    6508:	4808      	ldr	r0, [pc, #32]	; (652c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    650a:	f006 fdf7 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    650e:	2208      	movs	r2, #8
    6510:	21ff      	movs	r1, #255	; 0xff
    6512:	4807      	ldr	r0, [pc, #28]	; (6530 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6514:	f006 fdf2 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6518:	4805      	ldr	r0, [pc, #20]	; (6530 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    651a:	2100      	movs	r1, #0
    651c:	1f00      	subs	r0, r0, #4
    651e:	7001      	strb	r1, [r0, #0]
    6520:	7041      	strb	r1, [r0, #1]
    6522:	f44f 7161 	mov.w	r1, #900	; 0x384
    6526:	8041      	strh	r1, [r0, #2]
    6528:	bd10      	pop	{r4, pc}
    652a:	0000      	.short	0x0000
    652c:	200014f2 	.word	0x200014f2
    6530:	20000320 	.word	0x20000320

00006534 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6534:	4901      	ldr	r1, [pc, #4]	; (653c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    6536:	7008      	strb	r0, [r1, #0]
    6538:	4770      	bx	lr
    653a:	0000      	.short	0x0000
    653c:	2000031c 	.word	0x2000031c

00006540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6540:	4801      	ldr	r0, [pc, #4]	; (6548 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6542:	7800      	ldrb	r0, [r0, #0]
    6544:	4770      	bx	lr
    6546:	0000      	.short	0x0000
    6548:	2000031c 	.word	0x2000031c

0000654c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    654c:	4b0b      	ldr	r3, [pc, #44]	; (657c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    654e:	b510      	push	{r4, lr}
    6550:	789c      	ldrb	r4, [r3, #2]
    6552:	4284      	cmp	r4, r0
    6554:	d90f      	bls.n	6576 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6556:	4418      	add	r0, r3
    6558:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    655c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6560:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6564:	700b      	strb	r3, [r1, #0]
    6566:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    656a:	6011      	str	r1, [r2, #0]
    656c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6570:	8090      	strh	r0, [r2, #4]
    6572:	2001      	movs	r0, #1
    6574:	bd10      	pop	{r4, pc}
    6576:	2000      	movs	r0, #0
    6578:	bd10      	pop	{r4, pc}
    657a:	0000      	.short	0x0000
    657c:	200014f2 	.word	0x200014f2

00006580 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6580:	4907      	ldr	r1, [pc, #28]	; (65a0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6582:	788a      	ldrb	r2, [r1, #2]
    6584:	4282      	cmp	r2, r0
    6586:	d909      	bls.n	659c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6588:	4408      	add	r0, r1
    658a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    658e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6592:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6596:	f000 0001 	and.w	r0, r0, #1
    659a:	4770      	bx	lr
    659c:	2000      	movs	r0, #0
    659e:	4770      	bx	lr
    65a0:	200014f2 	.word	0x200014f2

000065a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    65a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65a8:	4698      	mov	r8, r3
    65aa:	4691      	mov	r9, r2
    65ac:	460c      	mov	r4, r1
    65ae:	4605      	mov	r5, r0
    65b0:	f000 f936 	bl	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    65b4:	4606      	mov	r6, r0
    65b6:	2810      	cmp	r0, #16
    65b8:	d006      	beq.n	65c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    65ba:	f000 f901 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    65be:	2810      	cmp	r0, #16
    65c0:	d002      	beq.n	65c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    65c2:	2012      	movs	r0, #18
    65c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65c8:	4f18      	ldr	r7, [pc, #96]	; (662c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    65ca:	78b8      	ldrb	r0, [r7, #2]
    65cc:	2808      	cmp	r0, #8
    65ce:	d22a      	bcs.n	6626 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    65d0:	2e10      	cmp	r6, #16
    65d2:	d105      	bne.n	65e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    65d4:	2200      	movs	r2, #0
    65d6:	4621      	mov	r1, r4
    65d8:	4628      	mov	r0, r5
    65da:	f000 f905 	bl	67e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    65de:	4606      	mov	r6, r0
    65e0:	78bc      	ldrb	r4, [r7, #2]
    65e2:	2210      	movs	r2, #16
    65e4:	1c60      	adds	r0, r4, #1
    65e6:	70b8      	strb	r0, [r7, #2]
    65e8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    65ec:	1ce8      	adds	r0, r5, #3
    65ee:	4649      	mov	r1, r9
    65f0:	f008 f8ed 	bl	e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    65f4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    65f8:	2210      	movs	r2, #16
    65fa:	4641      	mov	r1, r8
    65fc:	f008 f8e7 	bl	e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6600:	2110      	movs	r1, #16
    6602:	4640      	mov	r0, r8
    6604:	f008 f97e 	bl	e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6608:	443c      	add	r4, r7
    660a:	2110      	movs	r1, #16
    660c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6610:	4648      	mov	r0, r9
    6612:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6616:	f008 f975 	bl	e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    661a:	77e0      	strb	r0, [r4, #31]
    661c:	f804 6c29 	strb.w	r6, [r4, #-41]
    6620:	2000      	movs	r0, #0
    6622:	73e0      	strb	r0, [r4, #15]
    6624:	e7ce      	b.n	65c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6626:	2007      	movs	r0, #7
    6628:	e7cc      	b.n	65c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    662a:	0000      	.short	0x0000
    662c:	200014f2 	.word	0x200014f2

00006630 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6630:	4806      	ldr	r0, [pc, #24]	; (664c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6632:	b510      	push	{r4, lr}
    6634:	7880      	ldrb	r0, [r0, #2]
    6636:	1e40      	subs	r0, r0, #1
    6638:	b244      	sxtb	r4, r0
    663a:	e004      	b.n	6646 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    663c:	b2e0      	uxtb	r0, r4
    663e:	f000 f94d 	bl	68dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    6642:	1e64      	subs	r4, r4, #1
    6644:	b264      	sxtb	r4, r4
    6646:	2c00      	cmp	r4, #0
    6648:	daf8      	bge.n	663c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    664a:	bd10      	pop	{r4, pc}
    664c:	200014f2 	.word	0x200014f2

00006650 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6650:	4801      	ldr	r0, [pc, #4]	; (6658 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6652:	8840      	ldrh	r0, [r0, #2]
    6654:	4770      	bx	lr
    6656:	0000      	.short	0x0000
    6658:	2000031c 	.word	0x2000031c

0000665c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    665c:	b138      	cbz	r0, 666e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    665e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6662:	4288      	cmp	r0, r1
    6664:	d803      	bhi.n	666e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6666:	4903      	ldr	r1, [pc, #12]	; (6674 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6668:	8048      	strh	r0, [r1, #2]
    666a:	2001      	movs	r0, #1
    666c:	4770      	bx	lr
    666e:	2000      	movs	r0, #0
    6670:	4770      	bx	lr
    6672:	0000      	.short	0x0000
    6674:	2000031c 	.word	0x2000031c

00006678 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6678:	4905      	ldr	r1, [pc, #20]	; (6690 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    667a:	788a      	ldrb	r2, [r1, #2]
    667c:	4282      	cmp	r2, r0
    667e:	d903      	bls.n	6688 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6680:	4408      	add	r0, r1
    6682:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6686:	b108      	cbz	r0, 668c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6688:	2000      	movs	r0, #0
    668a:	4770      	bx	lr
    668c:	2001      	movs	r0, #1
    668e:	4770      	bx	lr
    6690:	200014f2 	.word	0x200014f2

00006694 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	460d      	mov	r5, r1
    6698:	4606      	mov	r6, r0
    669a:	f000 f8c1 	bl	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    669e:	4c10      	ldr	r4, [pc, #64]	; (66e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    66a0:	2810      	cmp	r0, #16
    66a2:	d007      	beq.n	66b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    66a4:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    66a8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    66ac:	07c9      	lsls	r1, r1, #31
    66ae:	d001      	beq.n	66b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    66b0:	2001      	movs	r0, #1
    66b2:	bd70      	pop	{r4, r5, r6, pc}
    66b4:	7861      	ldrb	r1, [r4, #1]
    66b6:	2908      	cmp	r1, #8
    66b8:	d210      	bcs.n	66dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    66ba:	2810      	cmp	r0, #16
    66bc:	d008      	beq.n	66d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    66be:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    66c2:	2101      	movs	r1, #1
    66c4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    66c8:	7860      	ldrb	r0, [r4, #1]
    66ca:	1c40      	adds	r0, r0, #1
    66cc:	7060      	strb	r0, [r4, #1]
    66ce:	e7ef      	b.n	66b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    66d0:	2201      	movs	r2, #1
    66d2:	4629      	mov	r1, r5
    66d4:	4630      	mov	r0, r6
    66d6:	f000 f887 	bl	67e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    66da:	e7f5      	b.n	66c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    66dc:	2000      	movs	r0, #0
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	200014f2 	.word	0x200014f2

000066e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    66e4:	b570      	push	{r4, r5, r6, lr}
    66e6:	4d0b      	ldr	r5, [pc, #44]	; (6714 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    66e8:	7828      	ldrb	r0, [r5, #0]
    66ea:	1e40      	subs	r0, r0, #1
    66ec:	b244      	sxtb	r4, r0
    66ee:	e00a      	b.n	6706 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    66f0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    66f4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    66f8:	07c0      	lsls	r0, r0, #31
    66fa:	d002      	beq.n	6702 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    66fc:	b2e0      	uxtb	r0, r4
    66fe:	f000 f935 	bl	696c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    6702:	1e64      	subs	r4, r4, #1
    6704:	b264      	sxtb	r4, r4
    6706:	2c00      	cmp	r4, #0
    6708:	daf2      	bge.n	66f0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    670a:	4903      	ldr	r1, [pc, #12]	; (6718 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    670c:	2000      	movs	r0, #0
    670e:	7048      	strb	r0, [r1, #1]
    6710:	bd70      	pop	{r4, r5, r6, pc}
    6712:	0000      	.short	0x0000
    6714:	200014f2 	.word	0x200014f2
    6718:	2000031c 	.word	0x2000031c

0000671c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6720:	2400      	movs	r4, #0
    6722:	4625      	mov	r5, r4
    6724:	4e18      	ldr	r6, [pc, #96]	; (6788 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6726:	e029      	b.n	677c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6728:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    672c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6730:	07c0      	lsls	r0, r0, #31
    6732:	d021      	beq.n	6778 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6734:	4628      	mov	r0, r5
    6736:	f000 f843 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    673a:	4603      	mov	r3, r0
    673c:	f7ff fed4 	bl	64e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6740:	4601      	mov	r1, r0
    6742:	2000      	movs	r0, #0
    6744:	2b10      	cmp	r3, #16
    6746:	d009      	beq.n	675c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6748:	18f2      	adds	r2, r6, r3
    674a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    674e:	f1bc 0f01 	cmp.w	ip, #1
    6752:	d002      	beq.n	675a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6754:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6758:	b102      	cbz	r2, 675c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    675a:	2001      	movs	r0, #1
    675c:	1e40      	subs	r0, r0, #1
    675e:	4201      	tst	r1, r0
    6760:	d10a      	bne.n	6778 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6762:	480a      	ldr	r0, [pc, #40]	; (678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6764:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6768:	5503      	strb	r3, [r0, r4]
    676a:	4620      	mov	r0, r4
    676c:	1c64      	adds	r4, r4, #1
    676e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6772:	b2e4      	uxtb	r4, r4
    6774:	f005 fb9e 	bl	beb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6778:	1c6d      	adds	r5, r5, #1
    677a:	b2ed      	uxtb	r5, r5
    677c:	7830      	ldrb	r0, [r6, #0]
    677e:	42a8      	cmp	r0, r5
    6780:	d8d2      	bhi.n	6728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6786:	0000      	.short	0x0000
    6788:	200014f2 	.word	0x200014f2
    678c:	20000320 	.word	0x20000320
    6790:	4602      	mov	r2, r0
    6792:	4809      	ldr	r0, [pc, #36]	; (67b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6794:	b510      	push	{r4, lr}
    6796:	7800      	ldrb	r0, [r0, #0]
    6798:	460b      	mov	r3, r1
    679a:	b158      	cbz	r0, 67b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    679c:	4807      	ldr	r0, [pc, #28]	; (67bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    679e:	7881      	ldrb	r1, [r0, #2]
    67a0:	b141      	cbz	r1, 67b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    67a2:	b10b      	cbz	r3, 67a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    67a4:	1cc0      	adds	r0, r0, #3
    67a6:	e001      	b.n	67ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    67a8:	4804      	ldr	r0, [pc, #16]	; (67bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    67aa:	3083      	adds	r0, #131	; 0x83
    67ac:	f004 fd5c 	bl	b268 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    67b0:	2001      	movs	r0, #1
    67b2:	bd10      	pop	{r4, pc}
    67b4:	2000      	movs	r0, #0
    67b6:	bd10      	pop	{r4, pc}
    67b8:	2000031c 	.word	0x2000031c
    67bc:	200014f2 	.word	0x200014f2
    67c0:	4908      	ldr	r1, [pc, #32]	; (67e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    67c2:	b510      	push	{r4, lr}
    67c4:	4603      	mov	r3, r0
    67c6:	2000      	movs	r0, #0
    67c8:	788a      	ldrb	r2, [r1, #2]
    67ca:	e006      	b.n	67da <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    67cc:	180c      	adds	r4, r1, r0
    67ce:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    67d2:	429c      	cmp	r4, r3
    67d4:	d004      	beq.n	67e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    67d6:	1c40      	adds	r0, r0, #1
    67d8:	b2c0      	uxtb	r0, r0
    67da:	4282      	cmp	r2, r0
    67dc:	d8f6      	bhi.n	67cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    67de:	2010      	movs	r0, #16
    67e0:	bd10      	pop	{r4, pc}
    67e2:	0000      	.short	0x0000
    67e4:	200014f2 	.word	0x200014f2
    67e8:	b570      	push	{r4, r5, r6, lr}
    67ea:	4b0c      	ldr	r3, [pc, #48]	; (681c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    67ec:	4604      	mov	r4, r0
    67ee:	7818      	ldrb	r0, [r3, #0]
    67f0:	1c45      	adds	r5, r0, #1
    67f2:	701d      	strb	r5, [r3, #0]
    67f4:	2810      	cmp	r0, #16
    67f6:	d303      	bcc.n	6800 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    67f8:	2146      	movs	r1, #70	; 0x46
    67fa:	2028      	movs	r0, #40	; 0x28
    67fc:	f7fe f9b4 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6800:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6804:	680d      	ldr	r5, [r1, #0]
    6806:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    680a:	8889      	ldrh	r1, [r1, #4]
    680c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6810:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6814:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6818:	bd70      	pop	{r4, r5, r6, pc}
    681a:	0000      	.short	0x0000
    681c:	200014f2 	.word	0x200014f2
    6820:	b5f0      	push	{r4, r5, r6, r7, lr}
    6822:	4c1a      	ldr	r4, [pc, #104]	; (688c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    6824:	4603      	mov	r3, r0
    6826:	2000      	movs	r0, #0
    6828:	7825      	ldrb	r5, [r4, #0]
    682a:	e02a      	b.n	6882 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    682c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6830:	780f      	ldrb	r7, [r1, #0]
    6832:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    6836:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    683a:	ea87 070c 	eor.w	r7, r7, ip
    683e:	405e      	eors	r6, r3
    6840:	443e      	add	r6, r7
    6842:	784f      	ldrb	r7, [r1, #1]
    6844:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    6848:	ea87 070c 	eor.w	r7, r7, ip
    684c:	443e      	add	r6, r7
    684e:	788f      	ldrb	r7, [r1, #2]
    6850:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    6854:	ea87 070c 	eor.w	r7, r7, ip
    6858:	443e      	add	r6, r7
    685a:	78cf      	ldrb	r7, [r1, #3]
    685c:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    6860:	ea87 070c 	eor.w	r7, r7, ip
    6864:	443e      	add	r6, r7
    6866:	790f      	ldrb	r7, [r1, #4]
    6868:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    686c:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    6870:	ea87 070c 	eor.w	r7, r7, ip
    6874:	443e      	add	r6, r7
    6876:	794f      	ldrb	r7, [r1, #5]
    6878:	4057      	eors	r7, r2
    687a:	42f7      	cmn	r7, r6
    687c:	d004      	beq.n	6888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    687e:	1c40      	adds	r0, r0, #1
    6880:	b2c0      	uxtb	r0, r0
    6882:	4285      	cmp	r5, r0
    6884:	d8d2      	bhi.n	682c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    6886:	2010      	movs	r0, #16
    6888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    688a:	0000      	.short	0x0000
    688c:	200014f2 	.word	0x200014f2
    6890:	b570      	push	{r4, r5, r6, lr}
    6892:	4605      	mov	r5, r0
    6894:	f7ff ff94 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6898:	2810      	cmp	r0, #16
    689a:	d11c      	bne.n	68d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    689c:	4c0e      	ldr	r4, [pc, #56]	; (68d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    689e:	7820      	ldrb	r0, [r4, #0]
    68a0:	1e40      	subs	r0, r0, #1
    68a2:	b2c0      	uxtb	r0, r0
    68a4:	7020      	strb	r0, [r4, #0]
    68a6:	42a8      	cmp	r0, r5
    68a8:	d015      	beq.n	68d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    68aa:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    68ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    68b2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    68b6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    68ba:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    68be:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    68c2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    68c6:	7820      	ldrb	r0, [r4, #0]
    68c8:	f7ff ff7a 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68cc:	2810      	cmp	r0, #16
    68ce:	d002      	beq.n	68d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    68d0:	4420      	add	r0, r4
    68d2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    68d6:	bd70      	pop	{r4, r5, r6, pc}
    68d8:	200014f2 	.word	0x200014f2
    68dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68e0:	4c21      	ldr	r4, [pc, #132]	; (6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24c>)
    68e2:	4606      	mov	r6, r0
    68e4:	19a7      	adds	r7, r4, r6
    68e6:	78a0      	ldrb	r0, [r4, #2]
    68e8:	1e40      	subs	r0, r0, #1
    68ea:	b2c5      	uxtb	r5, r0
    68ec:	70a5      	strb	r5, [r4, #2]
    68ee:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    68f2:	42ae      	cmp	r6, r5
    68f4:	d02a      	beq.n	694c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x230>
    68f6:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    68fa:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    68fe:	f10a 0103 	add.w	r1, sl, #3
    6902:	f109 0003 	add.w	r0, r9, #3
    6906:	2210      	movs	r2, #16
    6908:	f006 fb7e 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    690c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6910:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6914:	2210      	movs	r2, #16
    6916:	f006 fb77 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    691a:	1960      	adds	r0, r4, r5
    691c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6920:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6924:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6928:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    692c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6930:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6934:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6938:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    693c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6940:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6944:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6948:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    694c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6950:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6954:	07c0      	lsls	r0, r0, #31
    6956:	d104      	bne.n	6962 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x246>
    6958:	4640      	mov	r0, r8
    695a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    695e:	f7ff bf97 	b.w	6890 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6966:	0000      	.short	0x0000
    6968:	200014f2 	.word	0x200014f2
    696c:	4905      	ldr	r1, [pc, #20]	; (6984 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x268>)
    696e:	784a      	ldrb	r2, [r1, #1]
    6970:	1e52      	subs	r2, r2, #1
    6972:	704a      	strb	r2, [r1, #1]
    6974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6978:	2200      	movs	r2, #0
    697a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    697e:	f7ff bf87 	b.w	6890 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6982:	0000      	.short	0x0000
    6984:	200014f2 	.word	0x200014f2

00006988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    698c:	4604      	mov	r4, r0
    698e:	f04f 0801 	mov.w	r8, #1
    6992:	b181      	cbz	r1, 69b6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6994:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    6998:	1e75      	subs	r5, r6, #1
    699a:	f104 0078 	add.w	r0, r4, #120	; 0x78
    699e:	2901      	cmp	r1, #1
    69a0:	d022      	beq.n	69e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    69a2:	2902      	cmp	r1, #2
    69a4:	d045      	beq.n	6a32 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    69a6:	2903      	cmp	r1, #3
    69a8:	d11c      	bne.n	69e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    69aa:	4631      	mov	r1, r6
    69ac:	4628      	mov	r0, r5
    69ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69b2:	f007 bfd7 	b.w	e964 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    69b6:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    69ba:	2100      	movs	r1, #0
    69bc:	f006 fb9e 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    69c0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    69c4:	3484      	adds	r4, #132	; 0x84
    69c6:	f004 fc1f 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    69ca:	f644 122b 	movw	r2, #18731	; 0x492b
    69ce:	4010      	ands	r0, r2
    69d0:	6520      	str	r0, [r4, #80]	; 0x50
    69d2:	f001 0106 	and.w	r1, r1, #6
    69d6:	6561      	str	r1, [r4, #84]	; 0x54
    69d8:	20fe      	movs	r0, #254	; 0xfe
    69da:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    69de:	207f      	movs	r0, #127	; 0x7f
    69e0:	f804 0c03 	strb.w	r0, [r4, #-3]
    69e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69e8:	2700      	movs	r7, #0
    69ea:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    69ee:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    69f2:	4a14      	ldr	r2, [pc, #80]	; (6a44 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    69f4:	6921      	ldr	r1, [r4, #16]
    69f6:	440a      	add	r2, r1
    69f8:	fbb2 f2f1 	udiv	r2, r2, r1
    69fc:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    6a00:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6a04:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    6a08:	8b63      	ldrh	r3, [r4, #26]
    6a0a:	460a      	mov	r2, r1
    6a0c:	f000 f81c 	bl	6a48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    6a10:	4631      	mov	r1, r6
    6a12:	4628      	mov	r0, r5
    6a14:	f007 ffa6 	bl	e964 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6a18:	f006 fad2 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6a1c:	b118      	cbz	r0, 6a26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    6a1e:	6960      	ldr	r0, [r4, #20]
    6a20:	f000 fbae 	bl	7180 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6a24:	b110      	cbz	r0, 6a2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    6a26:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    6a2a:	e7db      	b.n	69e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6a2c:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    6a30:	e7d8      	b.n	69e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6a32:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    6a36:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    6a3a:	6921      	ldr	r1, [r4, #16]
    6a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a40:	f000 b802 	b.w	6a48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    6a44:	01c9c37f 	.word	0x01c9c37f
    6a48:	b530      	push	{r4, r5, lr}
    6a4a:	2400      	movs	r4, #0
    6a4c:	8784      	strh	r4, [r0, #60]	; 0x3c
    6a4e:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    6a52:	4d15      	ldr	r5, [pc, #84]	; (6aa8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6a54:	434c      	muls	r4, r1
    6a56:	fbb4 f4f2 	udiv	r4, r4, r2
    6a5a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    6a5e:	f242 7410 	movw	r4, #10000	; 0x2710
    6a62:	4363      	muls	r3, r4
    6a64:	fbb3 f3f2 	udiv	r3, r3, r2
    6a68:	1c5b      	adds	r3, r3, #1
    6a6a:	b29b      	uxth	r3, r3
    6a6c:	fb03 f402 	mul.w	r4, r3, r2
    6a70:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6a72:	42ac      	cmp	r4, r5
    6a74:	d901      	bls.n	6a7a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    6a76:	1e5b      	subs	r3, r3, #1
    6a78:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6a7a:	4b0c      	ldr	r3, [pc, #48]	; (6aac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    6a7c:	f240 2471 	movw	r4, #625	; 0x271
    6a80:	fbb3 f3f2 	udiv	r3, r3, r2
    6a84:	1c5b      	adds	r3, r3, #1
    6a86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    6a8a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    6a8c:	4363      	muls	r3, r4
    6a8e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6a92:	1e5b      	subs	r3, r3, #1
    6a94:	fbb3 f3f2 	udiv	r3, r3, r2
    6a98:	6343      	str	r3, [r0, #52]	; 0x34
    6a9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6a9c:	434b      	muls	r3, r1
    6a9e:	fbb3 f1f2 	udiv	r1, r3, r2
    6aa2:	6301      	str	r1, [r0, #48]	; 0x30
    6aa4:	bd30      	pop	{r4, r5, pc}
    6aa6:	0000      	.short	0x0000
    6aa8:	01e84800 	.word	0x01e84800
    6aac:	02625a00 	.word	0x02625a00

00006ab0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6ab0:	b570      	push	{r4, r5, r6, lr}
    6ab2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6ab6:	b28b      	uxth	r3, r1
    6ab8:	7ac5      	ldrb	r5, [r0, #11]
    6aba:	ea83 0102 	eor.w	r1, r3, r2
    6abe:	2200      	movs	r2, #0
    6ac0:	b2cc      	uxtb	r4, r1
    6ac2:	0a09      	lsrs	r1, r1, #8
    6ac4:	fa94 f4a4 	rbit	r4, r4
    6ac8:	fa91 f1a1 	rbit	r1, r1
    6acc:	0e24      	lsrs	r4, r4, #24
    6ace:	0e09      	lsrs	r1, r1, #24
    6ad0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6ad4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6ad8:	1c52      	adds	r2, r2, #1
    6ada:	4419      	add	r1, r3
    6adc:	b2d2      	uxtb	r2, r2
    6ade:	b289      	uxth	r1, r1
    6ae0:	2a03      	cmp	r2, #3
    6ae2:	d3ed      	bcc.n	6ac0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6ae4:	4059      	eors	r1, r3
    6ae6:	2225      	movs	r2, #37	; 0x25
    6ae8:	fbb1 f3f2 	udiv	r3, r1, r2
    6aec:	fb02 1213 	mls	r2, r2, r3, r1
    6af0:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6af4:	f002 0607 	and.w	r6, r2, #7
    6af8:	785b      	ldrb	r3, [r3, #1]
    6afa:	2401      	movs	r4, #1
    6afc:	fa04 f606 	lsl.w	r6, r4, r6
    6b00:	4233      	tst	r3, r6
    6b02:	d001      	beq.n	6b08 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6b04:	4610      	mov	r0, r2
    6b06:	bd70      	pop	{r4, r5, r6, pc}
    6b08:	434d      	muls	r5, r1
    6b0a:	0c29      	lsrs	r1, r5, #16
    6b0c:	1c49      	adds	r1, r1, #1
    6b0e:	b2c9      	uxtb	r1, r1
    6b10:	2200      	movs	r2, #0
    6b12:	1885      	adds	r5, r0, r2
    6b14:	79ab      	ldrb	r3, [r5, #6]
    6b16:	428b      	cmp	r3, r1
    6b18:	d312      	bcc.n	6b40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6b1a:	f895 5001 	ldrb.w	r5, [r5, #1]
    6b1e:	2300      	movs	r3, #0
    6b20:	fa04 f603 	lsl.w	r6, r4, r3
    6b24:	4235      	tst	r5, r6
    6b26:	d001      	beq.n	6b2c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6b28:	1e49      	subs	r1, r1, #1
    6b2a:	b2c9      	uxtb	r1, r1
    6b2c:	b121      	cbz	r1, 6b38 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6b2e:	1c5b      	adds	r3, r3, #1
    6b30:	b2db      	uxtb	r3, r3
    6b32:	2b08      	cmp	r3, #8
    6b34:	d3f4      	bcc.n	6b20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6b36:	e005      	b.n	6b44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6b38:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6b3c:	b2c0      	uxtb	r0, r0
    6b3e:	bd70      	pop	{r4, r5, r6, pc}
    6b40:	1ac9      	subs	r1, r1, r3
    6b42:	b2c9      	uxtb	r1, r1
    6b44:	1c52      	adds	r2, r2, #1
    6b46:	b2d2      	uxtb	r2, r2
    6b48:	2a05      	cmp	r2, #5
    6b4a:	d3e2      	bcc.n	6b12 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6b4c:	f240 110d 	movw	r1, #269	; 0x10d
    6b50:	2046      	movs	r0, #70	; 0x46
    6b52:	f7fe f809 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b56:	0000      	movs	r0, r0
    6b58:	b570      	push	{r4, r5, r6, lr}
    6b5a:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    6b5e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    6b62:	2401      	movs	r4, #1
    6b64:	fb03 2101 	mla	r1, r3, r1, r2
    6b68:	2225      	movs	r2, #37	; 0x25
    6b6a:	fbb1 f3f2 	udiv	r3, r1, r2
    6b6e:	fb02 1113 	mls	r1, r2, r3, r1
    6b72:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6b76:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6b7a:	f001 0307 	and.w	r3, r1, #7
    6b7e:	7dd2      	ldrb	r2, [r2, #23]
    6b80:	fa04 f303 	lsl.w	r3, r4, r3
    6b84:	421a      	tst	r2, r3
    6b86:	d003      	beq.n	6b90 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6b88:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    6b8c:	2000      	movs	r0, #0
    6b8e:	bd70      	pop	{r4, r5, r6, pc}
    6b90:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    6b94:	fbb1 f3f2 	udiv	r3, r1, r2
    6b98:	fb02 1113 	mls	r1, r2, r3, r1
    6b9c:	1c49      	adds	r1, r1, #1
    6b9e:	b2c9      	uxtb	r1, r1
    6ba0:	2300      	movs	r3, #0
    6ba2:	18c5      	adds	r5, r0, r3
    6ba4:	7f2a      	ldrb	r2, [r5, #28]
    6ba6:	428a      	cmp	r2, r1
    6ba8:	d311      	bcc.n	6bce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6baa:	f895 5017 	ldrb.w	r5, [r5, #23]
    6bae:	2200      	movs	r2, #0
    6bb0:	fa04 f602 	lsl.w	r6, r4, r2
    6bb4:	4235      	tst	r5, r6
    6bb6:	d001      	beq.n	6bbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6bb8:	1e49      	subs	r1, r1, #1
    6bba:	b2c9      	uxtb	r1, r1
    6bbc:	b121      	cbz	r1, 6bc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6bbe:	1c52      	adds	r2, r2, #1
    6bc0:	b2d2      	uxtb	r2, r2
    6bc2:	2a08      	cmp	r2, #8
    6bc4:	d3f4      	bcc.n	6bb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6bc6:	e004      	b.n	6bd2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6bc8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6bcc:	e7dc      	b.n	6b88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6bce:	1a89      	subs	r1, r1, r2
    6bd0:	b2c9      	uxtb	r1, r1
    6bd2:	1c5b      	adds	r3, r3, #1
    6bd4:	b2db      	uxtb	r3, r3
    6bd6:	2b05      	cmp	r3, #5
    6bd8:	d3e3      	bcc.n	6ba2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6bda:	201f      	movs	r0, #31
    6bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

00006be0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6be0:	7841      	ldrb	r1, [r0, #1]
    6be2:	b141      	cbz	r1, 6bf6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6be4:	78c0      	ldrb	r0, [r0, #3]
    6be6:	2826      	cmp	r0, #38	; 0x26
    6be8:	d203      	bcs.n	6bf2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6bea:	4a04      	ldr	r2, [pc, #16]	; (6bfc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6bec:	5c10      	ldrb	r0, [r2, r0]
    6bee:	4288      	cmp	r0, r1
    6bf0:	d101      	bne.n	6bf6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6bf2:	2001      	movs	r0, #1
    6bf4:	4770      	bx	lr
    6bf6:	2000      	movs	r0, #0
    6bf8:	4770      	bx	lr
    6bfa:	0000      	.short	0x0000
    6bfc:	00010fa6 	.word	0x00010fa6

00006c00 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6c00:	b510      	push	{r4, lr}
    6c02:	2201      	movs	r2, #1
    6c04:	70c1      	strb	r1, [r0, #3]
    6c06:	2926      	cmp	r1, #38	; 0x26
    6c08:	d202      	bcs.n	6c10 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6c0a:	4a06      	ldr	r2, [pc, #24]	; (6c24 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6c0c:	5c52      	ldrb	r2, [r2, r1]
    6c0e:	e006      	b.n	6c1e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6c10:	29ff      	cmp	r1, #255	; 0xff
    6c12:	d004      	beq.n	6c1e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6c14:	f240 411d 	movw	r1, #1053	; 0x41d
    6c18:	202a      	movs	r0, #42	; 0x2a
    6c1a:	f7fd ffa5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1e:	7042      	strb	r2, [r0, #1]
    6c20:	bd10      	pop	{r4, pc}
    6c22:	0000      	.short	0x0000
    6c24:	00010fa6 	.word	0x00010fa6

00006c28 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6c28:	4904      	ldr	r1, [pc, #16]	; (6c3c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6c2a:	7c89      	ldrb	r1, [r1, #18]
    6c2c:	0749      	lsls	r1, r1, #29
    6c2e:	d400      	bmi.n	6c32 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    6c30:	b108      	cbz	r0, 6c36 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    6c32:	2000      	movs	r0, #0
    6c34:	4770      	bx	lr
    6c36:	2001      	movs	r0, #1
    6c38:	4770      	bx	lr
    6c3a:	0000      	.short	0x0000
    6c3c:	2000124c 	.word	0x2000124c

00006c40 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    6c40:	4803      	ldr	r0, [pc, #12]	; (6c50 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    6c42:	7c80      	ldrb	r0, [r0, #18]
    6c44:	0780      	lsls	r0, r0, #30
    6c46:	d401      	bmi.n	6c4c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6c48:	2001      	movs	r0, #1
    6c4a:	4770      	bx	lr
    6c4c:	2000      	movs	r0, #0
    6c4e:	4770      	bx	lr
    6c50:	2000124c 	.word	0x2000124c

00006c54 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6c54:	4803      	ldr	r0, [pc, #12]	; (6c64 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6c56:	7c80      	ldrb	r0, [r0, #18]
    6c58:	07c0      	lsls	r0, r0, #31
    6c5a:	d001      	beq.n	6c60 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6c5c:	2000      	movs	r0, #0
    6c5e:	4770      	bx	lr
    6c60:	2001      	movs	r0, #1
    6c62:	4770      	bx	lr
    6c64:	2000124c 	.word	0x2000124c

00006c68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c6c:	4c12      	ldr	r4, [pc, #72]	; (6cb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6c6e:	4607      	mov	r7, r0
    6c70:	460e      	mov	r6, r1
    6c72:	7da0      	ldrb	r0, [r4, #22]
    6c74:	b110      	cbz	r0, 6c7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6c76:	8b20      	ldrh	r0, [r4, #24]
    6c78:	2800      	cmp	r0, #0
    6c7a:	d012      	beq.n	6ca2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6c7c:	480e      	ldr	r0, [pc, #56]	; (6cb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6c7e:	3014      	adds	r0, #20
    6c80:	4680      	mov	r8, r0
    6c82:	f008 f82e 	bl	ece2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6c86:	b9a8      	cbnz	r0, 6cb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6c88:	8aa5      	ldrh	r5, [r4, #20]
    6c8a:	8aa0      	ldrh	r0, [r4, #20]
    6c8c:	4632      	mov	r2, r6
    6c8e:	4639      	mov	r1, r7
    6c90:	f008 f86b 	bl	ed6a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6c94:	b138      	cbz	r0, 6ca6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6c96:	7da0      	ldrb	r0, [r4, #22]
    6c98:	b110      	cbz	r0, 6ca0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6c9a:	8b20      	ldrh	r0, [r4, #24]
    6c9c:	1e40      	subs	r0, r0, #1
    6c9e:	8320      	strh	r0, [r4, #24]
    6ca0:	2001      	movs	r0, #1
    6ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ca6:	4640      	mov	r0, r8
    6ca8:	f008 f81b 	bl	ece2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6cac:	b910      	cbnz	r0, 6cb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6cae:	8aa0      	ldrh	r0, [r4, #20]
    6cb0:	42a8      	cmp	r0, r5
    6cb2:	d1ea      	bne.n	6c8a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6cb4:	2000      	movs	r0, #0
    6cb6:	e7f4      	b.n	6ca2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6cb8:	2000124c 	.word	0x2000124c
    6cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6cc0:	468a      	mov	sl, r1
    6cc2:	4699      	mov	r9, r3
    6cc4:	4615      	mov	r5, r2
    6cc6:	4604      	mov	r4, r0
    6cc8:	a901      	add	r1, sp, #4
    6cca:	f007 fc6c 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cce:	bbe0      	cbnz	r0, 6d4a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6cd0:	9f02      	ldr	r7, [sp, #8]
    6cd2:	f04f 0800 	mov.w	r8, #0
    6cd6:	3778      	adds	r7, #120	; 0x78
    6cd8:	b18d      	cbz	r5, 6cfe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6cda:	4620      	mov	r0, r4
    6cdc:	f7fe fb82 	bl	53e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6ce0:	0004      	movs	r4, r0
    6ce2:	d00f      	beq.n	6d04 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6ce4:	4629      	mov	r1, r5
    6ce6:	f007 f80e 	bl	dd06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6cea:	0006      	movs	r6, r0
    6cec:	d003      	beq.n	6cf6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6cee:	481d      	ldr	r0, [pc, #116]	; (6d64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6cf0:	8840      	ldrh	r0, [r0, #2]
    6cf2:	42a8      	cmp	r0, r5
    6cf4:	d208      	bcs.n	6d08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6cf6:	2000      	movs	r0, #0
    6cf8:	b004      	add	sp, #16
    6cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cfe:	2001      	movs	r0, #1
    6d00:	7578      	strb	r0, [r7, #21]
    6d02:	e029      	b.n	6d58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6d04:	216e      	movs	r1, #110	; 0x6e
    6d06:	e02a      	b.n	6d5e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6d08:	4620      	mov	r0, r4
    6d0a:	4631      	mov	r1, r6
    6d0c:	aa03      	add	r2, sp, #12
    6d0e:	f006 fff3 	bl	dcf8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6d12:	9803      	ldr	r0, [sp, #12]
    6d14:	f8a0 8000 	strh.w	r8, [r0]
    6d18:	f880 8002 	strb.w	r8, [r0, #2]
    6d1c:	7d79      	ldrb	r1, [r7, #21]
    6d1e:	b109      	cbz	r1, 6d24 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6d20:	f04f 0a02 	mov.w	sl, #2
    6d24:	4651      	mov	r1, sl
    6d26:	f007 ff5d 	bl	ebe4 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6d2a:	4631      	mov	r1, r6
    6d2c:	2603      	movs	r6, #3
    6d2e:	4620      	mov	r0, r4
    6d30:	464a      	mov	r2, r9
    6d32:	462b      	mov	r3, r5
    6d34:	9600      	str	r6, [sp, #0]
    6d36:	f006 fed3 	bl	dae0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6d3a:	4620      	mov	r0, r4
    6d3c:	4629      	mov	r1, r5
    6d3e:	f006 ff94 	bl	dc6a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6d42:	b158      	cbz	r0, 6d5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6d44:	4644      	mov	r4, r8
    6d46:	a801      	add	r0, sp, #4
    6d48:	e000      	b.n	6d4c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6d4a:	e005      	b.n	6d58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6d4c:	f007 ffea 	bl	ed24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6d50:	9802      	ldr	r0, [sp, #8]
    6d52:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    6d56:	757c      	strb	r4, [r7, #21]
    6d58:	2001      	movs	r0, #1
    6d5a:	e7cd      	b.n	6cf8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6d5c:	2184      	movs	r1, #132	; 0x84
    6d5e:	202b      	movs	r0, #43	; 0x2b
    6d60:	f7fd ff02 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d64:	2000124c 	.word	0x2000124c

00006d68 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6d68:	4901      	ldr	r1, [pc, #4]	; (6d70 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6d6a:	2001      	movs	r0, #1
    6d6c:	7008      	strb	r0, [r1, #0]
    6d6e:	4770      	bx	lr
    6d70:	200016d5 	.word	0x200016d5

00006d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6d74:	b538      	push	{r3, r4, r5, lr}
    6d76:	b198      	cbz	r0, 6da0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    6d78:	7a03      	ldrb	r3, [r0, #8]
    6d7a:	f88d 3000 	strb.w	r3, [sp]
    6d7e:	9b00      	ldr	r3, [sp, #0]
    6d80:	9300      	str	r3, [sp, #0]
    6d82:	f89d 3000 	ldrb.w	r3, [sp]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d114      	bne.n	6db4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    6d8a:	6003      	str	r3, [r0, #0]
    6d8c:	6041      	str	r1, [r0, #4]
    6d8e:	f3ef 8310 	mrs	r3, PRIMASK
    6d92:	b672      	cpsid	i
    6d94:	4908      	ldr	r1, [pc, #32]	; (6db8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    6d96:	680c      	ldr	r4, [r1, #0]
    6d98:	b13c      	cbz	r4, 6daa <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    6d9a:	684c      	ldr	r4, [r1, #4]
    6d9c:	6020      	str	r0, [r4, #0]
    6d9e:	e005      	b.n	6dac <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    6da0:	f240 4141 	movw	r1, #1089	; 0x441
    6da4:	2010      	movs	r0, #16
    6da6:	f7fd fedf 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6daa:	6008      	str	r0, [r1, #0]
    6dac:	6048      	str	r0, [r1, #4]
    6dae:	b903      	cbnz	r3, 6db2 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    6db0:	b662      	cpsie	i
    6db2:	7202      	strb	r2, [r0, #8]
    6db4:	bd38      	pop	{r3, r4, r5, pc}
    6db6:	0000      	.short	0x0000
    6db8:	20000118 	.word	0x20000118

00006dbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dc0:	0004      	movs	r4, r0
    6dc2:	d00a      	beq.n	6dda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6dc4:	484d      	ldr	r0, [pc, #308]	; (6efc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    6dc6:	2600      	movs	r6, #0
    6dc8:	7801      	ldrb	r1, [r0, #0]
    6dca:	b149      	cbz	r1, 6de0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6dcc:	7066      	strb	r6, [r4, #1]
    6dce:	2103      	movs	r1, #3
    6dd0:	7021      	strb	r1, [r4, #0]
    6dd2:	2101      	movs	r1, #1
    6dd4:	7121      	strb	r1, [r4, #4]
    6dd6:	7006      	strb	r6, [r0, #0]
    6dd8:	e08d      	b.n	6ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6dda:	f240 315d 	movw	r1, #861	; 0x35d
    6dde:	e050      	b.n	6e82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6de0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6f00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    6de4:	f88d 6000 	strb.w	r6, [sp]
    6de8:	4668      	mov	r0, sp
    6dea:	f000 f8b9 	bl	6f60 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6dee:	f89d 1000 	ldrb.w	r1, [sp]
    6df2:	2900      	cmp	r1, #0
    6df4:	d1f8      	bne.n	6de8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    6df6:	2800      	cmp	r0, #0
    6df8:	d07e      	beq.n	6ef8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6dfa:	4605      	mov	r5, r0
    6dfc:	7a00      	ldrb	r0, [r0, #8]
    6dfe:	f88d 0000 	strb.w	r0, [sp]
    6e02:	9800      	ldr	r0, [sp, #0]
    6e04:	9000      	str	r0, [sp, #0]
    6e06:	f89d 7000 	ldrb.w	r7, [sp]
    6e0a:	2f1f      	cmp	r7, #31
    6e0c:	d26e      	bcs.n	6eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6e0e:	e8df f007 	tbb	[pc, r7]
    6e12:	3d6d      	.short	0x3d6d
    6e14:	3d6d106d 	.word	0x3d6d106d
    6e18:	3d3d4d3d 	.word	0x3d3d4d3d
    6e1c:	6d3d3d3d 	.word	0x6d3d3d3d
    6e20:	3d3d6d10 	.word	0x3d3d6d10
    6e24:	6d6d6d10 	.word	0x6d6d6d10
    6e28:	103d3d6d 	.word	0x103d3d6d
    6e2c:	626d3d3d 	.word	0x626d3d3d
    6e30:	0010      	.short	0x0010
    6e32:	4834      	ldr	r0, [pc, #208]	; (6f04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    6e34:	6803      	ldr	r3, [r0, #0]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d05c      	beq.n	6ef4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    6e3a:	6868      	ldr	r0, [r5, #4]
    6e3c:	463a      	mov	r2, r7
    6e3e:	4621      	mov	r1, r4
    6e40:	4798      	blx	r3
    6e42:	7820      	ldrb	r0, [r4, #0]
    6e44:	6869      	ldr	r1, [r5, #4]
    6e46:	2811      	cmp	r0, #17
    6e48:	d002      	beq.n	6e50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6e4a:	2814      	cmp	r0, #20
    6e4c:	d003      	beq.n	6e56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6e4e:	e01b      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e50:	7920      	ldrb	r0, [r4, #4]
    6e52:	b930      	cbnz	r0, 6e62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    6e54:	e018      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e56:	7920      	ldrb	r0, [r4, #4]
    6e58:	b1b0      	cbz	r0, 6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e5a:	4608      	mov	r0, r1
    6e5c:	f008 fa99 	bl	f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6e60:	b990      	cbnz	r0, 6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e62:	88e4      	ldrh	r4, [r4, #6]
    6e64:	2100      	movs	r1, #0
    6e66:	4620      	mov	r0, r4
    6e68:	f007 f900 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e6c:	b160      	cbz	r0, 6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e6e:	8800      	ldrh	r0, [r0, #0]
    6e70:	f007 faba 	bl	e3e8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6e74:	2100      	movs	r1, #0
    6e76:	4620      	mov	r0, r4
    6e78:	f7fe f90a 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6e7c:	b120      	cbz	r0, 6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6e7e:	f44f 71af 	mov.w	r1, #350	; 0x15e
    6e82:	2010      	movs	r0, #16
    6e84:	f7fd fe70 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e88:	722e      	strb	r6, [r5, #8]
    6e8a:	e034      	b.n	6ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6e8c:	f8d8 0000 	ldr.w	r0, [r8]
    6e90:	b358      	cbz	r0, 6eea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    6e92:	463a      	mov	r2, r7
    6e94:	4629      	mov	r1, r5
    6e96:	4620      	mov	r0, r4
    6e98:	f000 f892 	bl	6fc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    6e9c:	b110      	cbz	r0, 6ea4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    6e9e:	2f0b      	cmp	r7, #11
    6ea0:	d029      	beq.n	6ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6ea2:	e7f1      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ea4:	2f0b      	cmp	r7, #11
    6ea6:	d026      	beq.n	6ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6ea8:	722e      	strb	r6, [r5, #8]
    6eaa:	e79b      	b.n	6de4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    6eac:	f8d8 0000 	ldr.w	r0, [r8]
    6eb0:	b180      	cbz	r0, 6ed4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    6eb2:	6868      	ldr	r0, [r5, #4]
    6eb4:	7066      	strb	r6, [r4, #1]
    6eb6:	2108      	movs	r1, #8
    6eb8:	7021      	strb	r1, [r4, #0]
    6eba:	8801      	ldrh	r1, [r0, #0]
    6ebc:	80a1      	strh	r1, [r4, #4]
    6ebe:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    6ec2:	f8c4 1006 	str.w	r1, [r4, #6]
    6ec6:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    6eca:	f8c4 100a 	str.w	r1, [r4, #10]
    6ece:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    6ed2:	81e0      	strh	r0, [r4, #14]
    6ed4:	e7d8      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ed6:	480c      	ldr	r0, [pc, #48]	; (6f08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    6ed8:	6803      	ldr	r3, [r0, #0]
    6eda:	b11b      	cbz	r3, 6ee4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    6edc:	2200      	movs	r2, #0
    6ede:	4621      	mov	r1, r4
    6ee0:	4610      	mov	r0, r2
    6ee2:	4798      	blx	r3
    6ee4:	e7d0      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ee6:	e007      	b.n	6ef8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6ee8:	e000      	b.n	6eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6eea:	e002      	b.n	6ef2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    6eec:	f240 412d 	movw	r1, #1069	; 0x42d
    6ef0:	e7c7      	b.n	6e82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6ef2:	e7c9      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ef4:	e7c8      	b.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ef6:	2001      	movs	r0, #1
    6ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6efc:	200016d5 	.word	0x200016d5
    6f00:	20000124 	.word	0x20000124
    6f04:	20000120 	.word	0x20000120
    6f08:	20000128 	.word	0x20000128

00006f0c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6f0c:	4901      	ldr	r1, [pc, #4]	; (6f14 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6f0e:	7008      	strb	r0, [r1, #0]
    6f10:	f000 b928 	b.w	7164 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    6f14:	20000114 	.word	0x20000114

00006f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6f18:	4801      	ldr	r0, [pc, #4]	; (6f20 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6f1a:	7800      	ldrb	r0, [r0, #0]
    6f1c:	f7fd bc28 	b.w	4770 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6f20:	20000114 	.word	0x20000114

00006f24 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6f24:	4902      	ldr	r1, [pc, #8]	; (6f30 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6f26:	4801      	ldr	r0, [pc, #4]	; (6f2c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6f28:	6008      	str	r0, [r1, #0]
    6f2a:	4770      	bx	lr
    6f2c:	0000f2bd 	.word	0x0000f2bd
    6f30:	20000120 	.word	0x20000120

00006f34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6f34:	4905      	ldr	r1, [pc, #20]	; (6f4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6f36:	4804      	ldr	r0, [pc, #16]	; (6f48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6f38:	6008      	str	r0, [r1, #0]
    6f3a:	4906      	ldr	r1, [pc, #24]	; (6f54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6f3c:	4804      	ldr	r0, [pc, #16]	; (6f50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6f3e:	6008      	str	r0, [r1, #0]
    6f40:	4906      	ldr	r1, [pc, #24]	; (6f5c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6f42:	4805      	ldr	r0, [pc, #20]	; (6f58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6f44:	6008      	str	r0, [r1, #0]
    6f46:	4770      	bx	lr
    6f48:	0000f2bd 	.word	0x0000f2bd
    6f4c:	20000120 	.word	0x20000120
    6f50:	0000edfd 	.word	0x0000edfd
    6f54:	20000124 	.word	0x20000124
    6f58:	00005971 	.word	0x00005971
    6f5c:	20000128 	.word	0x20000128
    6f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f62:	4605      	mov	r5, r0
    6f64:	4c15      	ldr	r4, [pc, #84]	; (6fbc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    6f66:	2000      	movs	r0, #0
    6f68:	7028      	strb	r0, [r5, #0]
    6f6a:	6820      	ldr	r0, [r4, #0]
    6f6c:	2800      	cmp	r0, #0
    6f6e:	d023      	beq.n	6fb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6f70:	7a01      	ldrb	r1, [r0, #8]
    6f72:	2601      	movs	r6, #1
    6f74:	f88d 1000 	strb.w	r1, [sp]
    6f78:	9900      	ldr	r1, [sp, #0]
    6f7a:	9100      	str	r1, [sp, #0]
    6f7c:	f89d 1000 	ldrb.w	r1, [sp]
    6f80:	2908      	cmp	r1, #8
    6f82:	d107      	bne.n	6f94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    6f84:	6840      	ldr	r0, [r0, #4]
    6f86:	8800      	ldrh	r0, [r0, #0]
    6f88:	f7fe fa16 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f8c:	f006 fdbf 	bl	db0e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6f90:	2800      	cmp	r0, #0
    6f92:	d011      	beq.n	6fb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6f94:	f3ef 8110 	mrs	r1, PRIMASK
    6f98:	6820      	ldr	r0, [r4, #0]
    6f9a:	b672      	cpsid	i
    6f9c:	6802      	ldr	r2, [r0, #0]
    6f9e:	6022      	str	r2, [r4, #0]
    6fa0:	b901      	cbnz	r1, 6fa4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    6fa2:	b662      	cpsie	i
    6fa4:	7a01      	ldrb	r1, [r0, #8]
    6fa6:	f88d 1000 	strb.w	r1, [sp]
    6faa:	9900      	ldr	r1, [sp, #0]
    6fac:	9100      	str	r1, [sp, #0]
    6fae:	f89d 1000 	ldrb.w	r1, [sp]
    6fb2:	2900      	cmp	r1, #0
    6fb4:	d100      	bne.n	6fb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6fb6:	702e      	strb	r6, [r5, #0]
    6fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fba:	0000      	.short	0x0000
    6fbc:	20000118 	.word	0x20000118
    6fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fc4:	b086      	sub	sp, #24
    6fc6:	000f      	movs	r7, r1
    6fc8:	4604      	mov	r4, r0
    6fca:	4691      	mov	r9, r2
    6fcc:	d013      	beq.n	6ff6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    6fce:	6878      	ldr	r0, [r7, #4]
    6fd0:	b188      	cbz	r0, 6ff6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    6fd2:	f100 0578 	add.w	r5, r0, #120	; 0x78
    6fd6:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    6fda:	8806      	ldrh	r6, [r0, #0]
    6fdc:	4610      	mov	r0, r2
    6fde:	f04f 0800 	mov.w	r8, #0
    6fe2:	2a10      	cmp	r2, #16
    6fe4:	d079      	beq.n	70da <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    6fe6:	dc09      	bgt.n	6ffc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    6fe8:	f04f 0a01 	mov.w	sl, #1
    6fec:	2801      	cmp	r0, #1
    6fee:	d00a      	beq.n	7006 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    6ff0:	2a0b      	cmp	r2, #11
    6ff2:	d171      	bne.n	70d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6ff4:	e01a      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    6ff6:	f240 2182 	movw	r1, #642	; 0x282
    6ffa:	e0ad      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6ffc:	281a      	cmp	r0, #26
    6ffe:	d04d      	beq.n	709c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    7000:	2a1b      	cmp	r2, #27
    7002:	d169      	bne.n	70d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7004:	e027      	b.n	7056 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    7006:	2d00      	cmp	r5, #0
    7008:	d00f      	beq.n	702a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    700a:	f884 8001 	strb.w	r8, [r4, #1]
    700e:	f884 a000 	strb.w	sl, [r4]
    7012:	f884 8004 	strb.w	r8, [r4, #4]
    7016:	f8a4 6005 	strh.w	r6, [r4, #5]
    701a:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    701e:	71e0      	strb	r0, [r4, #7]
    7020:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    7024:	8120      	strh	r0, [r4, #8]
    7026:	8868      	ldrh	r0, [r5, #2]
    7028:	8160      	strh	r0, [r4, #10]
    702a:	e076      	b.n	711a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    702c:	4630      	mov	r0, r6
    702e:	f7fe f9d9 	bl	53e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7032:	b168      	cbz	r0, 7050 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    7034:	f884 8001 	strb.w	r8, [r4, #1]
    7038:	220d      	movs	r2, #13
    703a:	7022      	strb	r2, [r4, #0]
    703c:	80e6      	strh	r6, [r4, #6]
    703e:	4641      	mov	r1, r8
    7040:	f8a4 a008 	strh.w	sl, [r4, #8]
    7044:	f884 a004 	strb.w	sl, [r4, #4]
    7048:	460a      	mov	r2, r1
    704a:	f006 ff33 	bl	deb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    704e:	e064      	b.n	711a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7050:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    7054:	e080      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7056:	f7ff fdfd 	bl	6c54 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    705a:	b3e8      	cbz	r0, 70d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    705c:	f887 8008 	strb.w	r8, [r7, #8]
    7060:	4630      	mov	r0, r6
    7062:	f8ad 6000 	strh.w	r6, [sp]
    7066:	a902      	add	r1, sp, #8
    7068:	f007 fa9d 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    706c:	b110      	cbz	r0, 7074 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    706e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    7072:	e071      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7074:	9803      	ldr	r0, [sp, #12]
    7076:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    707a:	f88d 1002 	strb.w	r1, [sp, #2]
    707e:	7841      	ldrb	r1, [r0, #1]
    7080:	f88d 1003 	strb.w	r1, [sp, #3]
    7084:	8840      	ldrh	r0, [r0, #2]
    7086:	f8ad 0004 	strh.w	r0, [sp, #4]
    708a:	2102      	movs	r1, #2
    708c:	4668      	mov	r0, sp
    708e:	f009 fc1a 	bl	108c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7092:	2800      	cmp	r0, #0
    7094:	d034      	beq.n	7100 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7096:	f44f 71c2 	mov.w	r1, #388	; 0x184
    709a:	e05d      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    709c:	f7ff fdd0 	bl	6c40 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    70a0:	b1d0      	cbz	r0, 70d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    70a2:	f887 8008 	strb.w	r8, [r7, #8]
    70a6:	a903      	add	r1, sp, #12
    70a8:	4630      	mov	r0, r6
    70aa:	f009 fa83 	bl	105b4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    70ae:	b110      	cbz	r0, 70b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    70b0:	f240 118b 	movw	r1, #395	; 0x18b
    70b4:	e050      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    70b6:	f8ad 6000 	strh.w	r6, [sp]
    70ba:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    70be:	f8ad 0002 	strh.w	r0, [sp, #2]
    70c2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    70c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    70ca:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    70ce:	f8ad 0006 	strh.w	r0, [sp, #6]
    70d2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    70d6:	e001      	b.n	70dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    70d8:	e015      	b.n	7106 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    70da:	e009      	b.n	70f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    70dc:	f8ad 0008 	strh.w	r0, [sp, #8]
    70e0:	4668      	mov	r0, sp
    70e2:	f009 fa8b 	bl	105fc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    70e6:	2800      	cmp	r0, #0
    70e8:	d00a      	beq.n	7100 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    70ea:	f44f 71ca 	mov.w	r1, #404	; 0x194
    70ee:	e033      	b.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    70f0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    70f4:	f000 0001 	and.w	r0, r0, #1
    70f8:	f7ff fd96 	bl	6c28 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    70fc:	b130      	cbz	r0, 710c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    70fe:	2000      	movs	r0, #0
    7100:	b006      	add	sp, #24
    7102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7106:	f1b9 0f08 	cmp.w	r9, #8
    710a:	d008      	beq.n	711e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    710c:	4814      	ldr	r0, [pc, #80]	; (7160 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    710e:	6803      	ldr	r3, [r0, #0]
    7110:	b11b      	cbz	r3, 711a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7112:	6878      	ldr	r0, [r7, #4]
    7114:	464a      	mov	r2, r9
    7116:	4621      	mov	r1, r4
    7118:	4798      	blx	r3
    711a:	2001      	movs	r0, #1
    711c:	e7f0      	b.n	7100 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    711e:	4630      	mov	r0, r6
    7120:	f7fe f94a 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7124:	f006 fcf3 	bl	db0e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7128:	b1a0      	cbz	r0, 7154 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    712a:	4630      	mov	r0, r6
    712c:	f007 f95c 	bl	e3e8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7130:	2100      	movs	r1, #0
    7132:	4630      	mov	r0, r6
    7134:	f7fd ffac 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7138:	2d00      	cmp	r5, #0
    713a:	d0ee      	beq.n	711a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    713c:	f884 8001 	strb.w	r8, [r4, #1]
    7140:	210a      	movs	r1, #10
    7142:	7021      	strb	r1, [r4, #0]
    7144:	f884 8004 	strb.w	r8, [r4, #4]
    7148:	f8a4 6005 	strh.w	r6, [r4, #5]
    714c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    7150:	71e0      	strb	r0, [r4, #7]
    7152:	e7e2      	b.n	711a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7154:	f240 21c3 	movw	r1, #707	; 0x2c3
    7158:	2010      	movs	r0, #16
    715a:	f7fd fd05 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    715e:	0000      	.short	0x0000
    7160:	20000124 	.word	0x20000124
    7164:	4904      	ldr	r1, [pc, #16]	; (7178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    7166:	2000      	movs	r0, #0
    7168:	6048      	str	r0, [r1, #4]
    716a:	6088      	str	r0, [r1, #8]
    716c:	4903      	ldr	r1, [pc, #12]	; (717c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    716e:	6008      	str	r0, [r1, #0]
    7170:	6048      	str	r0, [r1, #4]
    7172:	8108      	strh	r0, [r1, #8]
    7174:	4770      	bx	lr
    7176:	0000      	.short	0x0000
    7178:	20000114 	.word	0x20000114
    717c:	200016d5 	.word	0x200016d5

00007180 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7180:	b5f0      	push	{r4, r5, r6, r7, lr}
    7182:	f06f 021f 	mvn.w	r2, #31
    7186:	0c01      	lsrs	r1, r0, #16
    7188:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    718c:	251f      	movs	r5, #31
    718e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7192:	3854      	subs	r0, #84	; 0x54
    7194:	d00d      	beq.n	71b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7196:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    719a:	3855      	subs	r0, #85	; 0x55
    719c:	d009      	beq.n	71b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    719e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    71a2:	38aa      	subs	r0, #170	; 0xaa
    71a4:	d005      	beq.n	71b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    71a6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    71aa:	38aa      	subs	r0, #170	; 0xaa
    71ac:	d001      	beq.n	71b2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    71ae:	2001      	movs	r0, #1
    71b0:	e000      	b.n	71b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    71b2:	2000      	movs	r0, #0
    71b4:	2200      	movs	r2, #0
    71b6:	4613      	mov	r3, r2
    71b8:	ea4f 0402 	mov.w	r4, r2
    71bc:	ea82 0701 	eor.w	r7, r2, r1
    71c0:	43ff      	mvns	r7, r7
    71c2:	431f      	orrs	r7, r3
    71c4:	1c7f      	adds	r7, r7, #1
    71c6:	d00f      	beq.n	71e8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    71c8:	f006 0701 	and.w	r7, r6, #1
    71cc:	0852      	lsrs	r2, r2, #1
    71ce:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    71d2:	f005 0701 	and.w	r7, r5, #1
    71d6:	085b      	lsrs	r3, r3, #1
    71d8:	0876      	lsrs	r6, r6, #1
    71da:	086d      	lsrs	r5, r5, #1
    71dc:	1c64      	adds	r4, r4, #1
    71de:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    71e2:	2c16      	cmp	r4, #22
    71e4:	d3ea      	bcc.n	71bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    71e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71e8:	2000      	movs	r0, #0
    71ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071ec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    71ec:	b510      	push	{r4, lr}
    71ee:	4804      	ldr	r0, [pc, #16]	; (7200 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    71f0:	f007 ffce 	bl	f190 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    71f4:	4802      	ldr	r0, [pc, #8]	; (7200 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    71f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71fa:	3008      	adds	r0, #8
    71fc:	f007 bfc8 	b.w	f190 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7200:	2000012c 	.word	0x2000012c

00007204 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    7204:	4801      	ldr	r0, [pc, #4]	; (720c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    7206:	f000 b809 	b.w	721c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    720a:	0000      	.short	0x0000
    720c:	2000012c 	.word	0x2000012c

00007210 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    7210:	4801      	ldr	r0, [pc, #4]	; (7218 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    7212:	f000 b803 	b.w	721c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7216:	0000      	.short	0x0000
    7218:	20000134 	.word	0x20000134
    721c:	b510      	push	{r4, lr}
    721e:	e9d0 2100 	ldrd	r2, r1, [r0]
    7222:	4b09      	ldr	r3, [pc, #36]	; (7248 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    7224:	4c09      	ldr	r4, [pc, #36]	; (724c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    7226:	4353      	muls	r3, r2
    7228:	4354      	muls	r4, r2
    722a:	4051      	eors	r1, r2
    722c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7230:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7234:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7238:	e9c0 2100 	strd	r2, r1, [r0]
    723c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7244:	4618      	mov	r0, r3
    7246:	bd10      	pop	{r4, pc}
    7248:	c6ef3760 	.word	0xc6ef3760
    724c:	9e3779bb 	.word	0x9e3779bb

00007250 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7250:	b570      	push	{r4, r5, r6, lr}
    7252:	4604      	mov	r4, r0
    7254:	7c00      	ldrb	r0, [r0, #16]
    7256:	b300      	cbz	r0, 729a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7258:	2802      	cmp	r0, #2
    725a:	d01e      	beq.n	729a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    725c:	f05f 0001 	movs.w	r0, #1
    7260:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7264:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7268:	460d      	mov	r5, r1
    726a:	b1c0      	cbz	r0, 729e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    726c:	7de0      	ldrb	r0, [r4, #23]
    726e:	b1f0      	cbz	r0, 72ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7270:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7274:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7278:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    727c:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7280:	7c20      	ldrb	r0, [r4, #16]
    7282:	f007 ffa6 	bl	f1d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7286:	7620      	strb	r0, [r4, #24]
    7288:	2008      	movs	r0, #8
    728a:	7660      	strb	r0, [r4, #25]
    728c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7290:	4629      	mov	r1, r5
    7292:	f007 ff8a 	bl	f1aa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7296:	b9a8      	cbnz	r0, 72c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7298:	e00e      	b.n	72b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    729a:	2000      	movs	r0, #0
    729c:	e7e0      	b.n	7260 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    729e:	2000      	movs	r0, #0
    72a0:	f7fe fb18 	bl	58d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    72a4:	2800      	cmp	r0, #0
    72a6:	d1eb      	bne.n	7280 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    72a8:	f240 418a 	movw	r1, #1162	; 0x48a
    72ac:	e001      	b.n	72b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    72ae:	f240 418e 	movw	r1, #1166	; 0x48e
    72b2:	202d      	movs	r0, #45	; 0x2d
    72b4:	f7fd fc58 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    72bc:	4629      	mov	r1, r5
    72be:	f007 ff7d 	bl	f1bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    72c2:	b100      	cbz	r0, 72c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    72c4:	2001      	movs	r0, #1
    72c6:	76a0      	strb	r0, [r4, #26]
    72c8:	7e20      	ldrb	r0, [r4, #24]
    72ca:	b130      	cbz	r0, 72da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    72cc:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    72d0:	f104 0150 	add.w	r1, r4, #80	; 0x50
    72d4:	f007 f924 	bl	e520 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    72d8:	7660      	strb	r0, [r4, #25]
    72da:	f7ff f9b9 	bl	6650 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    72de:	490c      	ldr	r1, [pc, #48]	; (7310 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    72e0:	fba0 2301 	umull	r2, r3, r0, r1
    72e4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    72e8:	f008 f90c 	bl	f504 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    72ec:	2100      	movs	r1, #0
    72ee:	4620      	mov	r0, r4
    72f0:	f008 f8b6 	bl	f460 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    72f4:	2000      	movs	r0, #0
    72f6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    72fa:	78a0      	ldrb	r0, [r4, #2]
    72fc:	0740      	lsls	r0, r0, #29
    72fe:	d505      	bpl.n	730c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    7300:	4620      	mov	r0, r4
    7302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7306:	2100      	movs	r1, #0
    7308:	f000 bdac 	b.w	7e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    730c:	bd70      	pop	{r4, r5, r6, pc}
    730e:	0000      	.short	0x0000
    7310:	000f4240 	.word	0x000f4240

00007314 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7314:	b530      	push	{r4, r5, lr}
    7316:	460c      	mov	r4, r1
    7318:	b08d      	sub	sp, #52	; 0x34
    731a:	4605      	mov	r5, r0
    731c:	4601      	mov	r1, r0
    731e:	2220      	movs	r2, #32
    7320:	a802      	add	r0, sp, #8
    7322:	f005 fe71 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7326:	a80a      	add	r0, sp, #40	; 0x28
    7328:	f008 f952 	bl	f5d0 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    732c:	7aa0      	ldrb	r0, [r4, #10]
    732e:	f88d 0018 	strb.w	r0, [sp, #24]
    7332:	7820      	ldrb	r0, [r4, #0]
    7334:	f88d 0008 	strb.w	r0, [sp, #8]
    7338:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    733c:	f8ad 0000 	strh.w	r0, [sp]
    7340:	f89d 0000 	ldrb.w	r0, [sp]
    7344:	f000 0101 	and.w	r1, r0, #1
    7348:	f3c0 0240 	ubfx	r2, r0, #1, #1
    734c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7350:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7354:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7358:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    735c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7360:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7364:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7368:	f3c0 1240 	ubfx	r2, r0, #5, #1
    736c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7370:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7374:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7378:	f8ad 000a 	strh.w	r0, [sp, #10]
    737c:	7d20      	ldrb	r0, [r4, #20]
    737e:	2801      	cmp	r0, #1
    7380:	d006      	beq.n	7390 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7382:	2802      	cmp	r0, #2
    7384:	d004      	beq.n	7390 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7386:	f240 21bb 	movw	r1, #699	; 0x2bb
    738a:	2006      	movs	r0, #6
    738c:	f7fd fbec 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7390:	f88d 000c 	strb.w	r0, [sp, #12]
    7394:	7a61      	ldrb	r1, [r4, #9]
    7396:	a80a      	add	r0, sp, #40	; 0x28
    7398:	f008 f901 	bl	f59e <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    739c:	7d20      	ldrb	r0, [r4, #20]
    739e:	2101      	movs	r1, #1
    73a0:	2802      	cmp	r0, #2
    73a2:	d102      	bne.n	73aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    73a4:	7d60      	ldrb	r0, [r4, #21]
    73a6:	1c40      	adds	r0, r0, #1
    73a8:	b2c1      	uxtb	r1, r0
    73aa:	7ea0      	ldrb	r0, [r4, #26]
    73ac:	1c40      	adds	r0, r0, #1
    73ae:	b2c2      	uxtb	r2, r0
    73b0:	a80a      	add	r0, sp, #40	; 0x28
    73b2:	f008 f8bb 	bl	f52c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    73b6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    73ba:	0700      	lsls	r0, r0, #28
    73bc:	d501      	bpl.n	73c2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    73be:	2000      	movs	r0, #0
    73c0:	e020      	b.n	7404 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    73c2:	a80a      	add	r0, sp, #40	; 0x28
    73c4:	f008 f8c4 	bl	f550 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    73c8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    73cc:	2228      	movs	r2, #40	; 0x28
    73ce:	f000 fdef 	bl	7fb0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    73d2:	f240 2171 	movw	r1, #625	; 0x271
    73d6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    73da:	fbb0 f0f1 	udiv	r0, r0, r1
    73de:	4348      	muls	r0, r1
    73e0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    73e4:	f240 2371 	movw	r3, #625	; 0x271
    73e8:	0a0a      	lsrs	r2, r1, #8
    73ea:	f240 2171 	movw	r1, #625	; 0x271
    73ee:	434a      	muls	r2, r1
    73f0:	f8d4 1005 	ldr.w	r1, [r4, #5]
    73f4:	0a09      	lsrs	r1, r1, #8
    73f6:	4359      	muls	r1, r3
    73f8:	4290      	cmp	r0, r2
    73fa:	d801      	bhi.n	7400 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    73fc:	9204      	str	r2, [sp, #16]
    73fe:	e004      	b.n	740a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7400:	4288      	cmp	r0, r1
    7402:	d801      	bhi.n	7408 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7404:	9004      	str	r0, [sp, #16]
    7406:	e000      	b.n	740a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7408:	9104      	str	r1, [sp, #16]
    740a:	7ca0      	ldrb	r0, [r4, #18]
    740c:	f88d 0017 	strb.w	r0, [sp, #23]
    7410:	7e20      	ldrb	r0, [r4, #24]
    7412:	2801      	cmp	r0, #1
    7414:	d000      	beq.n	7418 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7416:	2000      	movs	r0, #0
    7418:	f88d 0014 	strb.w	r0, [sp, #20]
    741c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    741e:	f006 fee6 	bl	e1ee <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7422:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7424:	f006 ff87 	bl	e336 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7428:	2220      	movs	r2, #32
    742a:	a902      	add	r1, sp, #8
    742c:	4628      	mov	r0, r5
    742e:	f005 fdeb 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7432:	980a      	ldr	r0, [sp, #40]	; 0x28
    7434:	6228      	str	r0, [r5, #32]
    7436:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    743a:	84a8      	strh	r0, [r5, #36]	; 0x24
    743c:	7ae0      	ldrb	r0, [r4, #11]
    743e:	b168      	cbz	r0, 745c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7440:	2802      	cmp	r0, #2
    7442:	d00b      	beq.n	745c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7444:	f05f 0001 	movs.w	r0, #1
    7448:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    744c:	68e0      	ldr	r0, [r4, #12]
    744e:	6528      	str	r0, [r5, #80]	; 0x50
    7450:	8a20      	ldrh	r0, [r4, #16]
    7452:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7456:	b00d      	add	sp, #52	; 0x34
    7458:	2000      	movs	r0, #0
    745a:	bd30      	pop	{r4, r5, pc}
    745c:	2000      	movs	r0, #0
    745e:	e7f3      	b.n	7448 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007460 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7460:	4a0a      	ldr	r2, [pc, #40]	; (748c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7462:	b510      	push	{r4, lr}
    7464:	2100      	movs	r1, #0
    7466:	7011      	strb	r1, [r2, #0]
    7468:	4c09      	ldr	r4, [pc, #36]	; (7490 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    746a:	6060      	str	r0, [r4, #4]
    746c:	f000 f822 	bl	74b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7470:	b110      	cbz	r0, 7478 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7472:	f240 310a 	movw	r1, #778	; 0x30a
    7476:	e004      	b.n	7482 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7478:	68a0      	ldr	r0, [r4, #8]
    747a:	2800      	cmp	r0, #0
    747c:	d104      	bne.n	7488 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    747e:	f240 310d 	movw	r1, #781	; 0x30d
    7482:	202d      	movs	r0, #45	; 0x2d
    7484:	f7fd fb70 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7488:	bd10      	pop	{r4, pc}
    748a:	0000      	.short	0x0000
    748c:	20001268 	.word	0x20001268
    7490:	2000013c 	.word	0x2000013c

00007494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7494:	4902      	ldr	r1, [pc, #8]	; (74a0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7496:	4801      	ldr	r0, [pc, #4]	; (749c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7498:	6088      	str	r0, [r1, #8]
    749a:	4770      	bx	lr
    749c:	00007f98 	.word	0x00007f98
    74a0:	2000013c 	.word	0x2000013c

000074a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    74a4:	4902      	ldr	r1, [pc, #8]	; (74b0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    74a6:	6008      	str	r0, [r1, #0]
    74a8:	6889      	ldr	r1, [r1, #8]
    74aa:	6809      	ldr	r1, [r1, #0]
    74ac:	4708      	bx	r1
    74ae:	0000      	.short	0x0000
    74b0:	2000013c 	.word	0x2000013c

000074b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    74b4:	4808      	ldr	r0, [pc, #32]	; (74d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    74b6:	b510      	push	{r4, lr}
    74b8:	7800      	ldrb	r0, [r0, #0]
    74ba:	b110      	cbz	r0, 74c2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    74bc:	240c      	movs	r4, #12
    74be:	4620      	mov	r0, r4
    74c0:	bd10      	pop	{r4, pc}
    74c2:	2400      	movs	r4, #0
    74c4:	2218      	movs	r2, #24
    74c6:	4621      	mov	r1, r4
    74c8:	4803      	ldr	r0, [pc, #12]	; (74d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    74ca:	f005 fe17 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    74ce:	f004 f8bd 	bl	b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    74d2:	f003 fee1 	bl	b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    74d6:	e7f2      	b.n	74be <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    74d8:	20001268 	.word	0x20001268

000074dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    74dc:	4904      	ldr	r1, [pc, #16]	; (74f0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    74de:	b510      	push	{r4, lr}
    74e0:	7809      	ldrb	r1, [r1, #0]
    74e2:	2901      	cmp	r1, #1
    74e4:	d101      	bne.n	74ea <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    74e6:	f000 fb7b 	bl	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    74ea:	2000      	movs	r0, #0
    74ec:	bd10      	pop	{r4, pc}
    74ee:	0000      	.short	0x0000
    74f0:	20001268 	.word	0x20001268

000074f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    74f4:	4902      	ldr	r1, [pc, #8]	; (7500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    74f6:	4801      	ldr	r0, [pc, #4]	; (74fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    74f8:	6008      	str	r0, [r1, #0]
    74fa:	4770      	bx	lr
    74fc:	00007d1d 	.word	0x00007d1d
    7500:	20000148 	.word	0x20000148
    7504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7508:	000f      	movs	r7, r1
    750a:	4604      	mov	r4, r0
    750c:	d023      	beq.n	7556 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    750e:	f104 0020 	add.w	r0, r4, #32
    7512:	4605      	mov	r5, r0
    7514:	f008 f845 	bl	f5a2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7518:	b9b0      	cbnz	r0, 7548 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    751a:	78a0      	ldrb	r0, [r4, #2]
    751c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7520:	b350      	cbz	r0, 7578 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7522:	4628      	mov	r0, r5
    7524:	f008 f814 	bl	f550 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7528:	4606      	mov	r6, r0
    752a:	4628      	mov	r0, r5
    752c:	f008 f839 	bl	f5a2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7530:	1a30      	subs	r0, r6, r0
    7532:	b2c0      	uxtb	r0, r0
    7534:	f008 f88a 	bl	f64c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7538:	4601      	mov	r1, r0
    753a:	4835      	ldr	r0, [pc, #212]	; (7610 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    753c:	6842      	ldr	r2, [r0, #4]
    753e:	4411      	add	r1, r2
    7540:	6041      	str	r1, [r0, #4]
    7542:	4628      	mov	r0, r5
    7544:	f008 f84b 	bl	f5de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7548:	4628      	mov	r0, r5
    754a:	f008 f80d 	bl	f568 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    754e:	4601      	mov	r1, r0
    7550:	4620      	mov	r0, r4
    7552:	f007 ffc1 	bl	f4d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7556:	4d2f      	ldr	r5, [pc, #188]	; (7614 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7558:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    755c:	2100      	movs	r1, #0
    755e:	6868      	ldr	r0, [r5, #4]
    7560:	8001      	strh	r1, [r0, #0]
    7562:	f007 ffda 	bl	f51a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7566:	8860      	ldrh	r0, [r4, #2]
    7568:	2813      	cmp	r0, #19
    756a:	d013      	beq.n	7594 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    756c:	dc09      	bgt.n	7582 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    756e:	2810      	cmp	r0, #16
    7570:	d036      	beq.n	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7572:	2812      	cmp	r0, #18
    7574:	d109      	bne.n	758a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7576:	e031      	b.n	75dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7578:	4620      	mov	r0, r4
    757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    757e:	f000 bb2f 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7582:	2815      	cmp	r0, #21
    7584:	d00f      	beq.n	75a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7586:	281d      	cmp	r0, #29
    7588:	d00d      	beq.n	75a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    758a:	f240 614a 	movw	r1, #1610	; 0x64a
    758e:	202d      	movs	r0, #45	; 0x2d
    7590:	f7fd faea 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7594:	2100      	movs	r1, #0
    7596:	6868      	ldr	r0, [r5, #4]
    7598:	f007 fb5c 	bl	ec54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    759c:	2101      	movs	r1, #1
    759e:	6868      	ldr	r0, [r5, #4]
    75a0:	f007 ffbb 	bl	f51a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    75a4:	e020      	b.n	75e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    75a6:	2101      	movs	r1, #1
    75a8:	6868      	ldr	r0, [r5, #4]
    75aa:	f007 fb53 	bl	ec54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    75ae:	2101      	movs	r1, #1
    75b0:	6868      	ldr	r0, [r5, #4]
    75b2:	f007 ffb2 	bl	f51a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    75b6:	b136      	cbz	r6, 75c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    75b8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    75bc:	6868      	ldr	r0, [r5, #4]
    75be:	f007 fb64 	bl	ec8a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    75c2:	2101      	movs	r1, #1
    75c4:	e006      	b.n	75d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    75c6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    75ca:	6868      	ldr	r0, [r5, #4]
    75cc:	f007 fb5d 	bl	ec8a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    75d0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    75d4:	6868      	ldr	r0, [r5, #4]
    75d6:	f007 fb5e 	bl	ec96 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    75da:	e005      	b.n	75e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    75dc:	2106      	movs	r1, #6
    75de:	e000      	b.n	75e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    75e0:	2102      	movs	r1, #2
    75e2:	6868      	ldr	r0, [r5, #4]
    75e4:	f007 fb36 	bl	ec54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    75e8:	4620      	mov	r0, r4
    75ea:	f000 fcb1 	bl	7f50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    75ee:	8860      	ldrh	r0, [r4, #2]
    75f0:	281d      	cmp	r0, #29
    75f2:	d007      	beq.n	7604 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    75f4:	2815      	cmp	r0, #21
    75f6:	d005      	beq.n	7604 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    75f8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    75fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    75fe:	6868      	ldr	r0, [r5, #4]
    7600:	f007 fb18 	bl	ec34 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7604:	4639      	mov	r1, r7
    7606:	4620      	mov	r0, r4
    7608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    760c:	f000 b9e4 	b.w	79d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7610:	20001268 	.word	0x20001268
    7614:	2000013c 	.word	0x2000013c
    7618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    761c:	4d2e      	ldr	r5, [pc, #184]	; (76d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    761e:	4607      	mov	r7, r0
    7620:	7828      	ldrb	r0, [r5, #0]
    7622:	2802      	cmp	r0, #2
    7624:	d005      	beq.n	7632 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7626:	7828      	ldrb	r0, [r5, #0]
    7628:	2803      	cmp	r0, #3
    762a:	d002      	beq.n	7632 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    762c:	f640 41b9 	movw	r1, #3257	; 0xcb9
    7630:	e028      	b.n	7684 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7632:	4c2a      	ldr	r4, [pc, #168]	; (76dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7634:	6820      	ldr	r0, [r4, #0]
    7636:	7b01      	ldrb	r1, [r0, #12]
    7638:	b109      	cbz	r1, 763e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    763a:	f007 ff58 	bl	f4ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    763e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7642:	f04f 0800 	mov.w	r8, #0
    7646:	f89c 0000 	ldrb.w	r0, [ip]
    764a:	f000 060f 	and.w	r6, r0, #15
    764e:	b33f      	cbz	r7, 76a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7650:	6821      	ldr	r1, [r4, #0]
    7652:	09c0      	lsrs	r0, r0, #7
    7654:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7658:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    765c:	f10c 0109 	add.w	r1, ip, #9
    7660:	f006 fec6 	bl	e3f0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7664:	b1e0      	cbz	r0, 76a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7666:	4641      	mov	r1, r8
    7668:	6860      	ldr	r0, [r4, #4]
    766a:	f007 fad3 	bl	ec14 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    766e:	b1b8      	cbz	r0, 76a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7670:	782a      	ldrb	r2, [r5, #0]
    7672:	6820      	ldr	r0, [r4, #0]
    7674:	4631      	mov	r1, r6
    7676:	2a02      	cmp	r2, #2
    7678:	d007      	beq.n	768a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    767a:	782a      	ldrb	r2, [r5, #0]
    767c:	2a03      	cmp	r2, #3
    767e:	d004      	beq.n	768a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7680:	f640 4192 	movw	r1, #3218	; 0xc92
    7684:	202d      	movs	r0, #45	; 0x2d
    7686:	f7fd fa6f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    768a:	68a2      	ldr	r2, [r4, #8]
    768c:	782b      	ldrb	r3, [r5, #0]
    768e:	6952      	ldr	r2, [r2, #20]
    7690:	f06f 0607 	mvn.w	r6, #7
    7694:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7698:	58d2      	ldr	r2, [r2, r3]
    769a:	4790      	blx	r2
    769c:	4606      	mov	r6, r0
    769e:	e000      	b.n	76a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    76a0:	2601      	movs	r6, #1
    76a2:	7ba8      	ldrb	r0, [r5, #14]
    76a4:	b118      	cbz	r0, 76ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    76a6:	f003 ffd1 	bl	b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    76aa:	f003 fdf5 	bl	b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    76ae:	2e00      	cmp	r6, #0
    76b0:	d00f      	beq.n	76d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    76b2:	6820      	ldr	r0, [r4, #0]
    76b4:	f007 ffe0 	bl	f678 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    76b8:	b130      	cbz	r0, 76c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    76ba:	f003 ffef 	bl	b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    76be:	68a0      	ldr	r0, [r4, #8]
    76c0:	6880      	ldr	r0, [r0, #8]
    76c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76c6:	4700      	bx	r0
    76c8:	6820      	ldr	r0, [r4, #0]
    76ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76ce:	f000 ba87 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    76d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76d6:	0000      	.short	0x0000
    76d8:	20001268 	.word	0x20001268
    76dc:	2000013c 	.word	0x2000013c
    76e0:	b510      	push	{r4, lr}
    76e2:	2903      	cmp	r1, #3
    76e4:	d002      	beq.n	76ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    76e6:	2905      	cmp	r1, #5
    76e8:	d10a      	bne.n	7700 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    76ea:	e002      	b.n	76f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    76ec:	f000 fb7e 	bl	7dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    76f0:	e003      	b.n	76fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    76f2:	4904      	ldr	r1, [pc, #16]	; (7704 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    76f4:	6809      	ldr	r1, [r1, #0]
    76f6:	b109      	cbz	r1, 76fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    76f8:	4788      	blx	r1
    76fa:	b108      	cbz	r0, 7700 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    76fc:	2000      	movs	r0, #0
    76fe:	bd10      	pop	{r4, pc}
    7700:	2001      	movs	r0, #1
    7702:	bd10      	pop	{r4, pc}
    7704:	20000148 	.word	0x20000148
    7708:	4a09      	ldr	r2, [pc, #36]	; (7730 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    770a:	0003      	movs	r3, r0
    770c:	6810      	ldr	r0, [r2, #0]
    770e:	d001      	beq.n	7714 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7710:	f000 ba66 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7714:	2900      	cmp	r1, #0
    7716:	d009      	beq.n	772c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7718:	6891      	ldr	r1, [r2, #8]
    771a:	4a06      	ldr	r2, [pc, #24]	; (7734 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    771c:	6909      	ldr	r1, [r1, #16]
    771e:	7812      	ldrb	r2, [r2, #0]
    7720:	f06f 030f 	mvn.w	r3, #15
    7724:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7728:	5889      	ldr	r1, [r1, r2]
    772a:	4708      	bx	r1
    772c:	4770      	bx	lr
    772e:	0000      	.short	0x0000
    7730:	2000013c 	.word	0x2000013c
    7734:	20001268 	.word	0x20001268
    7738:	b570      	push	{r4, r5, r6, lr}
    773a:	4604      	mov	r4, r0
    773c:	8840      	ldrh	r0, [r0, #2]
    773e:	2810      	cmp	r0, #16
    7740:	d019      	beq.n	7776 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7742:	4d10      	ldr	r5, [pc, #64]	; (7784 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7744:	7ba8      	ldrb	r0, [r5, #14]
    7746:	b120      	cbz	r0, 7752 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7748:	f003 fdc6 	bl	b2d8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    774c:	2040      	movs	r0, #64	; 0x40
    774e:	f003 ff8b 	bl	b668 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7752:	480d      	ldr	r0, [pc, #52]	; (7788 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7754:	6840      	ldr	r0, [r0, #4]
    7756:	f004 fa0d 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    775a:	78a0      	ldrb	r0, [r4, #2]
    775c:	0740      	lsls	r0, r0, #29
    775e:	d404      	bmi.n	776a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7760:	2100      	movs	r1, #0
    7762:	7922      	ldrb	r2, [r4, #4]
    7764:	4608      	mov	r0, r1
    7766:	f004 fa7d 	bl	bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    776a:	2000      	movs	r0, #0
    776c:	f004 f8b8 	bl	b8e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7770:	2002      	movs	r0, #2
    7772:	7028      	strb	r0, [r5, #0]
    7774:	bd70      	pop	{r4, r5, r6, pc}
    7776:	4620      	mov	r0, r4
    7778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    777c:	2101      	movs	r1, #1
    777e:	f7ff bec1 	b.w	7504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7782:	0000      	.short	0x0000
    7784:	20001268 	.word	0x20001268
    7788:	2000013c 	.word	0x2000013c
    778c:	b510      	push	{r4, lr}
    778e:	4c12      	ldr	r4, [pc, #72]	; (77d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7790:	6820      	ldr	r0, [r4, #0]
    7792:	f000 f825 	bl	77e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7796:	6820      	ldr	r0, [r4, #0]
    7798:	f007 ff6e 	bl	f678 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    779c:	2800      	cmp	r0, #0
    779e:	6820      	ldr	r0, [r4, #0]
    77a0:	d00b      	beq.n	77ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    77a2:	490e      	ldr	r1, [pc, #56]	; (77dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    77a4:	780a      	ldrb	r2, [r1, #0]
    77a6:	2a02      	cmp	r2, #2
    77a8:	d00b      	beq.n	77c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    77aa:	780a      	ldrb	r2, [r1, #0]
    77ac:	2a03      	cmp	r2, #3
    77ae:	d008      	beq.n	77c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    77b0:	f640 31c6 	movw	r1, #3014	; 0xbc6
    77b4:	202d      	movs	r0, #45	; 0x2d
    77b6:	f7fd f9d7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77be:	f000 ba0f 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    77c2:	68a2      	ldr	r2, [r4, #8]
    77c4:	7809      	ldrb	r1, [r1, #0]
    77c6:	68d2      	ldr	r2, [r2, #12]
    77c8:	f06f 0307 	mvn.w	r3, #7
    77cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    77d0:	5851      	ldr	r1, [r2, r1]
    77d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d6:	4708      	bx	r1
    77d8:	2000013c 	.word	0x2000013c
    77dc:	20001268 	.word	0x20001268
    77e0:	b510      	push	{r4, lr}
    77e2:	7b01      	ldrb	r1, [r0, #12]
    77e4:	b109      	cbz	r1, 77ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    77e6:	f007 fe82 	bl	f4ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    77ea:	4805      	ldr	r0, [pc, #20]	; (7800 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    77ec:	7b80      	ldrb	r0, [r0, #14]
    77ee:	2800      	cmp	r0, #0
    77f0:	d005      	beq.n	77fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    77f2:	f003 ff2b 	bl	b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    77f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77fa:	f003 bd4d 	b.w	b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    77fe:	bd10      	pop	{r4, pc}
    7800:	20001268 	.word	0x20001268

00007804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7804:	b5f0      	push	{r4, r5, r6, r7, lr}
    7806:	4d59      	ldr	r5, [pc, #356]	; (796c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    7808:	4604      	mov	r4, r0
    780a:	b08b      	sub	sp, #44	; 0x2c
    780c:	7828      	ldrb	r0, [r5, #0]
    780e:	bbe8      	cbnz	r0, 788c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    7810:	7820      	ldrb	r0, [r4, #0]
    7812:	28ff      	cmp	r0, #255	; 0xff
    7814:	d03d      	beq.n	7892 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7816:	2000      	movs	r0, #0
    7818:	81a8      	strh	r0, [r5, #12]
    781a:	6068      	str	r0, [r5, #4]
    781c:	7068      	strb	r0, [r5, #1]
    781e:	70a8      	strb	r0, [r5, #2]
    7820:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    7824:	4b52      	ldr	r3, [pc, #328]	; (7970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7826:	af06      	add	r7, sp, #24
    7828:	4e52      	ldr	r6, [pc, #328]	; (7974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    782a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    782c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7830:	68b0      	ldr	r0, [r6, #8]
    7832:	6840      	ldr	r0, [r0, #4]
    7834:	9009      	str	r0, [sp, #36]	; 0x24
    7836:	a806      	add	r0, sp, #24
    7838:	f004 f826 	bl	b888 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    783c:	f004 f8f4 	bl	ba28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7840:	f004 fb68 	bl	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7844:	f003 ff02 	bl	b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7848:	f003 fd26 	bl	b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    784c:	484a      	ldr	r0, [pc, #296]	; (7978 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    784e:	f004 fa3b 	bl	bcc8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7852:	4847      	ldr	r0, [pc, #284]	; (7970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7854:	1f00      	subs	r0, r0, #4
    7856:	f004 fa41 	bl	bcdc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    785a:	f104 0020 	add.w	r0, r4, #32
    785e:	4607      	mov	r7, r0
    7860:	f007 febd 	bl	f5de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7864:	4638      	mov	r0, r7
    7866:	f007 fe7f 	bl	f568 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    786a:	4601      	mov	r1, r0
    786c:	4620      	mov	r0, r4
    786e:	f007 fe33 	bl	f4d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7872:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7876:	f004 f95b 	bl	bb30 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    787a:	7921      	ldrb	r1, [r4, #4]
    787c:	2000      	movs	r0, #0
    787e:	f003 ff97 	bl	b7b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7882:	2101      	movs	r1, #1
    7884:	60a8      	str	r0, [r5, #8]
    7886:	b138      	cbz	r0, 7898 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7888:	7ea0      	ldrb	r0, [r4, #26]
    788a:	e000      	b.n	788e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    788c:	e001      	b.n	7892 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    788e:	b950      	cbnz	r0, 78a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    7890:	e004      	b.n	789c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    7892:	200c      	movs	r0, #12
    7894:	b00b      	add	sp, #44	; 0x2c
    7896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7898:	7029      	strb	r1, [r5, #0]
    789a:	e064      	b.n	7966 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    789c:	7e20      	ldrb	r0, [r4, #24]
    789e:	b910      	cbnz	r0, 78a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    78a0:	78a0      	ldrb	r0, [r4, #2]
    78a2:	0740      	lsls	r0, r0, #29
    78a4:	d522      	bpl.n	78ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    78a6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    78aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    78ae:	4050      	eors	r0, r2
    78b0:	ea70 0101 	orns	r1, r0, r1
    78b4:	d01a      	beq.n	78ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    78b6:	f7fb fd7f 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    78ba:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    78be:	1a80      	subs	r0, r0, r2
    78c0:	4199      	sbcs	r1, r3
    78c2:	d313      	bcc.n	78ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    78c4:	f7fe fec4 	bl	6650 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    78c8:	492c      	ldr	r1, [pc, #176]	; (797c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    78ca:	fba0 2301 	umull	r2, r3, r0, r1
    78ce:	f104 0040 	add.w	r0, r4, #64	; 0x40
    78d2:	f007 fe17 	bl	f504 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    78d6:	2101      	movs	r1, #1
    78d8:	4620      	mov	r0, r4
    78da:	f007 fdc1 	bl	f460 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    78de:	78a0      	ldrb	r0, [r4, #2]
    78e0:	0740      	lsls	r0, r0, #29
    78e2:	d503      	bpl.n	78ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    78e4:	2101      	movs	r1, #1
    78e6:	4620      	mov	r0, r4
    78e8:	f000 fabc 	bl	7e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    78ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
    78f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    78f2:	f006 fcef 	bl	e2d4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    78f6:	f104 0138 	add.w	r1, r4, #56	; 0x38
    78fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    78fc:	f006 fced 	bl	e2da <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7900:	f7fe ff0c 	bl	671c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7904:	6870      	ldr	r0, [r6, #4]
    7906:	1cc0      	adds	r0, r0, #3
    7908:	f006 fdfd 	bl	e506 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    790c:	73a8      	strb	r0, [r5, #14]
    790e:	78a0      	ldrb	r0, [r4, #2]
    7910:	07c0      	lsls	r0, r0, #31
    7912:	d028      	beq.n	7966 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7914:	a903      	add	r1, sp, #12
    7916:	2000      	movs	r0, #0
    7918:	f006 fbb2 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    791c:	b120      	cbz	r0, 7928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    791e:	f640 118c 	movw	r1, #2444	; 0x98c
    7922:	202d      	movs	r0, #45	; 0x2d
    7924:	f7fd f920 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7928:	20ff      	movs	r0, #255	; 0xff
    792a:	73e8      	strb	r0, [r5, #15]
    792c:	69e6      	ldr	r6, [r4, #28]
    792e:	f106 070a 	add.w	r7, r6, #10
    7932:	e013      	b.n	795c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7934:	9c05      	ldr	r4, [sp, #20]
    7936:	42b4      	cmp	r4, r6
    7938:	d010      	beq.n	795c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    793a:	7a72      	ldrb	r2, [r6, #9]
    793c:	7a60      	ldrb	r0, [r4, #9]
    793e:	463b      	mov	r3, r7
    7940:	f104 010a 	add.w	r1, r4, #10
    7944:	f006 fd54 	bl	e3f0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7948:	b140      	cbz	r0, 795c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    794a:	78a0      	ldrb	r0, [r4, #2]
    794c:	73e8      	strb	r0, [r5, #15]
    794e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7952:	6128      	str	r0, [r5, #16]
    7954:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    7958:	82a8      	strh	r0, [r5, #20]
    795a:	e004      	b.n	7966 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    795c:	a803      	add	r0, sp, #12
    795e:	f7fd fb47 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7962:	2800      	cmp	r0, #0
    7964:	d0e6      	beq.n	7934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    7966:	2000      	movs	r0, #0
    7968:	e794      	b.n	7894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    796a:	0000      	.short	0x0000
    796c:	20001268 	.word	0x20001268
    7970:	00007f78 	.word	0x00007f78
    7974:	2000013c 	.word	0x2000013c
    7978:	8e89bed6 	.word	0x8e89bed6
    797c:	000f4240 	.word	0x000f4240
    7980:	b510      	push	{r4, lr}
    7982:	4604      	mov	r4, r0
    7984:	f7ff ff3e 	bl	7804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7988:	2800      	cmp	r0, #0
    798a:	d108      	bne.n	799e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    798c:	4804      	ldr	r0, [pc, #16]	; (79a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    798e:	7800      	ldrb	r0, [r0, #0]
    7990:	2801      	cmp	r0, #1
    7992:	d003      	beq.n	799c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    7994:	2100      	movs	r1, #0
    7996:	4620      	mov	r0, r4
    7998:	f7ff fdb4 	bl	7504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    799c:	2000      	movs	r0, #0
    799e:	bd10      	pop	{r4, pc}
    79a0:	20001268 	.word	0x20001268
    79a4:	480a      	ldr	r0, [pc, #40]	; (79d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    79a6:	b510      	push	{r4, lr}
    79a8:	490a      	ldr	r1, [pc, #40]	; (79d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    79aa:	6804      	ldr	r4, [r0, #0]
    79ac:	7808      	ldrb	r0, [r1, #0]
    79ae:	2800      	cmp	r0, #0
    79b0:	d00d      	beq.n	79ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    79b2:	7808      	ldrb	r0, [r1, #0]
    79b4:	2802      	cmp	r0, #2
    79b6:	d002      	beq.n	79be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    79b8:	7808      	ldrb	r0, [r1, #0]
    79ba:	2803      	cmp	r0, #3
    79bc:	d102      	bne.n	79c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    79be:	4620      	mov	r0, r4
    79c0:	f7ff ff0e 	bl	77e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    79c4:	4620      	mov	r0, r4
    79c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79ca:	f000 b909 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    79ce:	bd10      	pop	{r4, pc}
    79d0:	2000013c 	.word	0x2000013c
    79d4:	20001268 	.word	0x20001268
    79d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79dc:	4604      	mov	r4, r0
    79de:	4827      	ldr	r0, [pc, #156]	; (7a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    79e0:	460d      	mov	r5, r1
    79e2:	6840      	ldr	r0, [r0, #4]
    79e4:	f004 f8c6 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    79e8:	4e25      	ldr	r6, [pc, #148]	; (7a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    79ea:	2004      	movs	r0, #4
    79ec:	7030      	strb	r0, [r6, #0]
    79ee:	b325      	cbz	r5, 7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    79f0:	8860      	ldrh	r0, [r4, #2]
    79f2:	2810      	cmp	r0, #16
    79f4:	d02a      	beq.n	7a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    79f6:	f104 0020 	add.w	r0, r4, #32
    79fa:	4680      	mov	r8, r0
    79fc:	68b5      	ldr	r5, [r6, #8]
    79fe:	f007 fda7 	bl	f550 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7a02:	4607      	mov	r7, r0
    7a04:	4640      	mov	r0, r8
    7a06:	f007 fdcc 	bl	f5a2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7a0a:	1a38      	subs	r0, r7, r0
    7a0c:	1e40      	subs	r0, r0, #1
    7a0e:	b2c0      	uxtb	r0, r0
    7a10:	8861      	ldrh	r1, [r4, #2]
    7a12:	2228      	movs	r2, #40	; 0x28
    7a14:	f000 faec 	bl	7ff0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7a18:	4405      	add	r5, r0
    7a1a:	78a0      	ldrb	r0, [r4, #2]
    7a1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7a20:	b130      	cbz	r0, 7a30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    7a22:	6870      	ldr	r0, [r6, #4]
    7a24:	4405      	add	r5, r0
    7a26:	f007 fe15 	bl	f654 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7a2a:	4428      	add	r0, r5
    7a2c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7a30:	7922      	ldrb	r2, [r4, #4]
    7a32:	4629      	mov	r1, r5
    7a34:	2000      	movs	r0, #0
    7a36:	f004 f8b3 	bl	bba0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7a3a:	8860      	ldrh	r0, [r4, #2]
    7a3c:	2813      	cmp	r0, #19
    7a3e:	d013      	beq.n	7a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7a40:	dc09      	bgt.n	7a56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    7a42:	2810      	cmp	r0, #16
    7a44:	d017      	beq.n	7a76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7a46:	2812      	cmp	r0, #18
    7a48:	d109      	bne.n	7a5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    7a4a:	e00d      	b.n	7a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7a4c:	7921      	ldrb	r1, [r4, #4]
    7a4e:	2000      	movs	r0, #0
    7a50:	f003 fe74 	bl	b73c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7a54:	e7f1      	b.n	7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7a56:	2815      	cmp	r0, #21
    7a58:	d006      	beq.n	7a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7a5a:	281d      	cmp	r0, #29
    7a5c:	d004      	beq.n	7a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7a5e:	f640 5148 	movw	r1, #3400	; 0xd48
    7a62:	202d      	movs	r0, #45	; 0x2d
    7a64:	f7fd f880 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a68:	7922      	ldrb	r2, [r4, #4]
    7a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a6e:	2101      	movs	r1, #1
    7a70:	2000      	movs	r0, #0
    7a72:	f004 b8f7 	b.w	bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a7a:	0000      	.short	0x0000
    7a7c:	2000013c 	.word	0x2000013c
    7a80:	20001268 	.word	0x20001268
    7a84:	b510      	push	{r4, lr}
    7a86:	4604      	mov	r4, r0
    7a88:	7800      	ldrb	r0, [r0, #0]
    7a8a:	460b      	mov	r3, r1
    7a8c:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    7a90:	29ff      	cmp	r1, #255	; 0xff
    7a92:	d010      	beq.n	7ab6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    7a94:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    7a98:	1e51      	subs	r1, r2, #1
    7a9a:	4618      	mov	r0, r3
    7a9c:	f7fe fd56 	bl	654c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7aa0:	b130      	cbz	r0, 7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    7aa2:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    7aa6:	f040 0002 	orr.w	r0, r0, #2
    7aaa:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    7aae:	e011      	b.n	7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    7ab0:	f640 7193 	movw	r1, #3987	; 0xf93
    7ab4:	e023      	b.n	7afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    7ab6:	4813      	ldr	r0, [pc, #76]	; (7b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    7ab8:	6840      	ldr	r0, [r0, #4]
    7aba:	7801      	ldrb	r1, [r0, #0]
    7abc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7ac0:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    7ac4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7ac8:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    7acc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7ad0:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    7ad4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7ad8:	287f      	cmp	r0, #127	; 0x7f
    7ada:	d00e      	beq.n	7afa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    7adc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7ae0:	207f      	movs	r0, #127	; 0x7f
    7ae2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7ae6:	2219      	movs	r2, #25
    7ae8:	4621      	mov	r1, r4
    7aea:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    7aee:	f7ff f941 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7af6:	f7ff ba0f 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7afa:	f640 51fb 	movw	r1, #3579	; 0xdfb
    7afe:	202d      	movs	r0, #45	; 0x2d
    7b00:	f7fd f832 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b04:	2000013c 	.word	0x2000013c
    7b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b0c:	4690      	mov	r8, r2
    7b0e:	460e      	mov	r6, r1
    7b10:	4604      	mov	r4, r0
    7b12:	2903      	cmp	r1, #3
    7b14:	d004      	beq.n	7b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7b16:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7b1a:	b108      	cbz	r0, 7b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7b1c:	2001      	movs	r0, #1
    7b1e:	e000      	b.n	7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    7b20:	2000      	movs	r0, #0
    7b22:	4681      	mov	r9, r0
    7b24:	f003 fdac 	bl	b680 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7b28:	4605      	mov	r5, r0
    7b2a:	2e03      	cmp	r6, #3
    7b2c:	d003      	beq.n	7b36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7b2e:	2701      	movs	r7, #1
    7b30:	2e05      	cmp	r6, #5
    7b32:	d005      	beq.n	7b40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7b34:	e008      	b.n	7b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    7b36:	78a0      	ldrb	r0, [r4, #2]
    7b38:	2702      	movs	r7, #2
    7b3a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7b3e:	e001      	b.n	7b44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7b40:	78a0      	ldrb	r0, [r4, #2]
    7b42:	07c0      	lsls	r0, r0, #31
    7b44:	2800      	cmp	r0, #0
    7b46:	d042      	beq.n	7bce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7b48:	f1b9 0f00 	cmp.w	r9, #0
    7b4c:	d13e      	bne.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7b4e:	4822      	ldr	r0, [pc, #136]	; (7bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    7b50:	7b80      	ldrb	r0, [r0, #14]
    7b52:	b140      	cbz	r0, 7b66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7b54:	f006 fcda 	bl	e50c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7b58:	f888 0000 	strb.w	r0, [r8]
    7b5c:	28ff      	cmp	r0, #255	; 0xff
    7b5e:	d002      	beq.n	7b66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7b60:	f7fe fd0e 	bl	6580 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7b64:	4305      	orrs	r5, r0
    7b66:	4e1d      	ldr	r6, [pc, #116]	; (7bdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    7b68:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7b6c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7b70:	6871      	ldr	r1, [r6, #4]
    7b72:	f811 0b03 	ldrb.w	r0, [r1], #3
    7b76:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7b7a:	f006 fc39 	bl	e3f0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7b7e:	f898 1000 	ldrb.w	r1, [r8]
    7b82:	29ff      	cmp	r1, #255	; 0xff
    7b84:	d004      	beq.n	7b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    7b86:	b990      	cbnz	r0, 7bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7b88:	7e60      	ldrb	r0, [r4, #25]
    7b8a:	4288      	cmp	r0, r1
    7b8c:	d00f      	beq.n	7bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7b8e:	e008      	b.n	7ba2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7b90:	b138      	cbz	r0, 7ba2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7b92:	6871      	ldr	r1, [r6, #4]
    7b94:	f811 0b03 	ldrb.w	r0, [r1], #3
    7b98:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7b9c:	f007 fc47 	bl	f42e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7ba0:	b128      	cbz	r0, 7bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7ba2:	2000      	movs	r0, #0
    7ba4:	78a1      	ldrb	r1, [r4, #2]
    7ba6:	0749      	lsls	r1, r1, #29
    7ba8:	d503      	bpl.n	7bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    7baa:	b990      	cbnz	r0, 7bd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7bac:	e00e      	b.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7bae:	2001      	movs	r0, #1
    7bb0:	e7f8      	b.n	7ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7bb2:	b975      	cbnz	r5, 7bd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7bb4:	7be0      	ldrb	r0, [r4, #15]
    7bb6:	b108      	cbz	r0, 7bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    7bb8:	42b8      	cmp	r0, r7
    7bba:	d107      	bne.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7bbc:	6871      	ldr	r1, [r6, #4]
    7bbe:	f811 0b03 	ldrb.w	r0, [r1], #3
    7bc2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7bc6:	f007 fc32 	bl	f42e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7bca:	b110      	cbz	r0, 7bd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7bcc:	2000      	movs	r0, #0
    7bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bd2:	2001      	movs	r0, #1
    7bd4:	e7fb      	b.n	7bce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7bd6:	0000      	.short	0x0000
    7bd8:	20001268 	.word	0x20001268
    7bdc:	2000013c 	.word	0x2000013c
    7be0:	b570      	push	{r4, r5, r6, lr}
    7be2:	4604      	mov	r4, r0
    7be4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    7be6:	4d13      	ldr	r5, [pc, #76]	; (7c34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    7be8:	1c40      	adds	r0, r0, #1
    7bea:	8520      	strh	r0, [r4, #40]	; 0x28
    7bec:	7ba8      	ldrb	r0, [r5, #14]
    7bee:	2600      	movs	r6, #0
    7bf0:	b120      	cbz	r0, 7bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    7bf2:	f003 fd2b 	bl	b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7bf6:	f003 fb4f 	bl	b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7bfa:	73ae      	strb	r6, [r5, #14]
    7bfc:	702e      	strb	r6, [r5, #0]
    7bfe:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7c02:	b108      	cbz	r0, 7c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    7c04:	2101      	movs	r1, #1
    7c06:	e00f      	b.n	7c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    7c08:	7b60      	ldrb	r0, [r4, #13]
    7c0a:	b160      	cbz	r0, 7c26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7c0c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    7c0e:	4288      	cmp	r0, r1
    7c10:	d809      	bhi.n	7c26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7c12:	2101      	movs	r1, #1
    7c14:	4620      	mov	r0, r4
    7c16:	f007 fd41 	bl	f69c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7c1a:	78a0      	ldrb	r0, [r4, #2]
    7c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c20:	07c0      	lsls	r0, r0, #31
    7c22:	f7ff b979 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c26:	2100      	movs	r1, #0
    7c28:	4620      	mov	r0, r4
    7c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c2e:	f007 bd35 	b.w	f69c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7c32:	0000      	.short	0x0000
    7c34:	20001268 	.word	0x20001268
    7c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c3a:	4604      	mov	r4, r0
    7c3c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    7c40:	4616      	mov	r6, r2
    7c42:	460d      	mov	r5, r1
    7c44:	f88d 0000 	strb.w	r0, [sp]
    7c48:	9800      	ldr	r0, [sp, #0]
    7c4a:	9000      	str	r0, [sp, #0]
    7c4c:	f89d 0000 	ldrb.w	r0, [sp]
    7c50:	b110      	cbz	r0, 7c58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    7c52:	f640 31fa 	movw	r1, #3066	; 0xbfa
    7c56:	e055      	b.n	7d04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    7c58:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    7c5c:	2700      	movs	r7, #0
    7c5e:	8828      	ldrh	r0, [r5, #0]
    7c60:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    7c64:	2b00      	cmp	r3, #0
    7c66:	d14a      	bne.n	7cfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    7c68:	6928      	ldr	r0, [r5, #16]
    7c6a:	f006 fcad 	bl	e5c8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7c6e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7c72:	8b28      	ldrh	r0, [r5, #24]
    7c74:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    7c78:	8b68      	ldrh	r0, [r5, #26]
    7c7a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    7c7e:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    7c82:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7c86:	7e20      	ldrb	r0, [r4, #24]
    7c88:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7c8c:	460d      	mov	r5, r1
    7c8e:	b120      	cbz	r0, 7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    7c90:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7c94:	f007 fa92 	bl	f1bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7c98:	b940      	cbnz	r0, 7cac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    7c9a:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7c9e:	b170      	cbz	r0, 7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7ca0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7ca4:	4629      	mov	r1, r5
    7ca6:	f007 fa80 	bl	f1aa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7caa:	b140      	cbz	r0, 7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7cac:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7cb0:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    7cb4:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7cb8:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7cbc:	e003      	b.n	7cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7cbe:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    7cc2:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    7cc6:	4814      	ldr	r0, [pc, #80]	; (7d18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    7cc8:	2eff      	cmp	r6, #255	; 0xff
    7cca:	6840      	ldr	r0, [r0, #4]
    7ccc:	7801      	ldrb	r1, [r0, #0]
    7cce:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7cd2:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    7cd6:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7cda:	d016      	beq.n	7d0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    7cdc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    7ce0:	8880      	ldrh	r0, [r0, #4]
    7ce2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    7ce6:	f104 0274 	add.w	r2, r4, #116	; 0x74
    7cea:	1e51      	subs	r1, r2, #1
    7cec:	4630      	mov	r0, r6
    7cee:	f7fe fc2d 	bl	654c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7cf2:	b128      	cbz	r0, 7d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    7cf4:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    7cf8:	f040 0002 	orr.w	r0, r0, #2
    7cfc:	7020      	strb	r0, [r4, #0]
    7cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d00:	f640 411b 	movw	r1, #3099	; 0xc1b
    7d04:	202d      	movs	r0, #45	; 0x2d
    7d06:	f7fc ff2f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d0a:	f844 1f74 	str.w	r1, [r4, #116]!
    7d0e:	8880      	ldrh	r0, [r0, #4]
    7d10:	80a0      	strh	r0, [r4, #4]
    7d12:	60e7      	str	r7, [r4, #12]
    7d14:	8227      	strh	r7, [r4, #16]
    7d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d18:	2000013c 	.word	0x2000013c
    7d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d1e:	4604      	mov	r4, r0
    7d20:	20ff      	movs	r0, #255	; 0xff
    7d22:	f88d 0000 	strb.w	r0, [sp]
    7d26:	2601      	movs	r6, #1
    7d28:	466a      	mov	r2, sp
    7d2a:	2105      	movs	r1, #5
    7d2c:	4620      	mov	r0, r4
    7d2e:	f7ff feeb 	bl	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7d32:	b160      	cbz	r0, 7d4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    7d34:	4d2c      	ldr	r5, [pc, #176]	; (7de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7d36:	4f2b      	ldr	r7, [pc, #172]	; (7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7d38:	6869      	ldr	r1, [r5, #4]
    7d3a:	7bfa      	ldrb	r2, [r7, #15]
    7d3c:	f107 0310 	add.w	r3, r7, #16
    7d40:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d44:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d48:	f006 fb52 	bl	e3f0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7d4c:	b110      	cbz	r0, 7d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    7d4e:	2600      	movs	r6, #0
    7d50:	4630      	mov	r0, r6
    7d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d54:	686a      	ldr	r2, [r5, #4]
    7d56:	69e0      	ldr	r0, [r4, #28]
    7d58:	7812      	ldrb	r2, [r2, #0]
    7d5a:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    7d5e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7d62:	4011      	ands	r1, r2
    7d64:	7001      	strb	r1, [r0, #0]
    7d66:	2201      	movs	r2, #1
    7d68:	4620      	mov	r0, r4
    7d6a:	69e1      	ldr	r1, [r4, #28]
    7d6c:	f000 f8a8 	bl	7ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    7d70:	2300      	movs	r3, #0
    7d72:	f89d 2000 	ldrb.w	r2, [sp]
    7d76:	4620      	mov	r0, r4
    7d78:	69e1      	ldr	r1, [r4, #28]
    7d7a:	f7ff ff5d 	bl	7c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    7d7e:	220e      	movs	r2, #14
    7d80:	4621      	mov	r1, r4
    7d82:	f104 0064 	add.w	r0, r4, #100	; 0x64
    7d86:	f7fe fff5 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7d8a:	69e0      	ldr	r0, [r4, #28]
    7d8c:	2203      	movs	r2, #3
    7d8e:	8801      	ldrh	r1, [r0, #0]
    7d90:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    7d94:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    7d98:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    7d9c:	4621      	mov	r1, r4
    7d9e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    7da2:	f7fe ffe7 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7da6:	f7ff f8b7 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7daa:	2000      	movs	r0, #0
    7dac:	7038      	strb	r0, [r7, #0]
    7dae:	2200      	movs	r2, #0
    7db0:	4621      	mov	r1, r4
    7db2:	69e0      	ldr	r0, [r4, #28]
    7db4:	f000 fa74 	bl	82a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7db8:	69e0      	ldr	r0, [r4, #28]
    7dba:	8800      	ldrh	r0, [r0, #0]
    7dbc:	f7fd fafc 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7dc0:	f006 f830 	bl	de24 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7dc4:	6868      	ldr	r0, [r5, #4]
    7dc6:	69e1      	ldr	r1, [r4, #28]
    7dc8:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7dcc:	f841 2f03 	str.w	r2, [r1, #3]!
    7dd0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7dd4:	808a      	strh	r2, [r1, #4]
    7dd6:	7800      	ldrb	r0, [r0, #0]
    7dd8:	69e1      	ldr	r1, [r4, #28]
    7dda:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7dde:	7088      	strb	r0, [r1, #2]
    7de0:	e7b6      	b.n	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    7de2:	0000      	.short	0x0000
    7de4:	20001268 	.word	0x20001268
    7de8:	2000013c 	.word	0x2000013c
    7dec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7df0:	4604      	mov	r4, r0
    7df2:	20ff      	movs	r0, #255	; 0xff
    7df4:	f88d 0000 	strb.w	r0, [sp]
    7df8:	2501      	movs	r5, #1
    7dfa:	466a      	mov	r2, sp
    7dfc:	2103      	movs	r1, #3
    7dfe:	4620      	mov	r0, r4
    7e00:	f7ff fe82 	bl	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7e04:	b330      	cbz	r0, 7e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    7e06:	7b20      	ldrb	r0, [r4, #12]
    7e08:	2700      	movs	r7, #0
    7e0a:	b168      	cbz	r0, 7e28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7e0c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    7e10:	f88d 0004 	strb.w	r0, [sp, #4]
    7e14:	9801      	ldr	r0, [sp, #4]
    7e16:	9001      	str	r0, [sp, #4]
    7e18:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7e1c:	b920      	cbnz	r0, 7e28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7e1e:	f89d 1000 	ldrb.w	r1, [sp]
    7e22:	4620      	mov	r0, r4
    7e24:	f7ff fe2e 	bl	7a84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7e28:	4e0c      	ldr	r6, [pc, #48]	; (7e5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7e2a:	2104      	movs	r1, #4
    7e2c:	6870      	ldr	r0, [r6, #4]
    7e2e:	8007      	strh	r7, [r0, #0]
    7e30:	f006 ff10 	bl	ec54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e34:	4620      	mov	r0, r4
    7e36:	f000 f88b 	bl	7f50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    7e3a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    7e3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7e40:	6870      	ldr	r0, [r6, #4]
    7e42:	f006 ff3e 	bl	ecc2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7e46:	4906      	ldr	r1, [pc, #24]	; (7e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    7e48:	2005      	movs	r0, #5
    7e4a:	7008      	strb	r0, [r1, #0]
    7e4c:	6870      	ldr	r0, [r6, #4]
    7e4e:	f003 fe91 	bl	bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7e52:	e000      	b.n	7e56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    7e54:	2500      	movs	r5, #0
    7e56:	4628      	mov	r0, r5
    7e58:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7e5c:	2000013c 	.word	0x2000013c
    7e60:	20001268 	.word	0x20001268
    7e64:	b570      	push	{r4, r5, r6, lr}
    7e66:	4604      	mov	r4, r0
    7e68:	460e      	mov	r6, r1
    7e6a:	7e40      	ldrb	r0, [r0, #25]
    7e6c:	f7fe fb3c 	bl	64e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7e70:	0005      	movs	r5, r0
    7e72:	d019      	beq.n	7ea8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7e74:	2110      	movs	r1, #16
    7e76:	f006 fd45 	bl	e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d114      	bne.n	7ea8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7e7e:	2001      	movs	r0, #1
    7e80:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7e84:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7e88:	4632      	mov	r2, r6
    7e8a:	460c      	mov	r4, r1
    7e8c:	4628      	mov	r0, r5
    7e8e:	f006 fadf 	bl	e450 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7e92:	4621      	mov	r1, r4
    7e94:	4c05      	ldr	r4, [pc, #20]	; (7eac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    7e96:	6860      	ldr	r0, [r4, #4]
    7e98:	f006 fef7 	bl	ec8a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7e9c:	6860      	ldr	r0, [r4, #4]
    7e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ea2:	2101      	movs	r1, #1
    7ea4:	f006 bef7 	b.w	ec96 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7ea8:	bd70      	pop	{r4, r5, r6, pc}
    7eaa:	0000      	.short	0x0000
    7eac:	2000013c 	.word	0x2000013c
    7eb0:	4802      	ldr	r0, [pc, #8]	; (7ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    7eb2:	2101      	movs	r1, #1
    7eb4:	6800      	ldr	r0, [r0, #0]
    7eb6:	f7ff bb25 	b.w	7504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7eba:	0000      	.short	0x0000
    7ebc:	2000013c 	.word	0x2000013c
    7ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec4:	4e21      	ldr	r6, [pc, #132]	; (7f4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    7ec6:	4680      	mov	r8, r0
    7ec8:	460c      	mov	r4, r1
    7eca:	6870      	ldr	r0, [r6, #4]
    7ecc:	4615      	mov	r5, r2
    7ece:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7ed2:	6161      	str	r1, [r4, #20]
    7ed4:	8881      	ldrh	r1, [r0, #4]
    7ed6:	83a1      	strh	r1, [r4, #28]
    7ed8:	7981      	ldrb	r1, [r0, #6]
    7eda:	77a1      	strb	r1, [r4, #30]
    7edc:	8940      	ldrh	r0, [r0, #10]
    7ede:	f006 fb6f 	bl	e5c0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7ee2:	4607      	mov	r7, r0
    7ee4:	6120      	str	r0, [r4, #16]
    7ee6:	6870      	ldr	r0, [r6, #4]
    7ee8:	4639      	mov	r1, r7
    7eea:	7d80      	ldrb	r0, [r0, #22]
    7eec:	f006 fd01 	bl	e8f2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7ef0:	8420      	strh	r0, [r4, #32]
    7ef2:	6870      	ldr	r0, [r6, #4]
    7ef4:	4639      	mov	r1, r7
    7ef6:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7efa:	f006 fcf6 	bl	e8ea <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7efe:	6260      	str	r0, [r4, #36]	; 0x24
    7f00:	6870      	ldr	r0, [r6, #4]
    7f02:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7f06:	8321      	strh	r1, [r4, #24]
    7f08:	8841      	ldrh	r1, [r0, #2]
    7f0a:	8361      	strh	r1, [r4, #26]
    7f0c:	6841      	ldr	r1, [r0, #4]
    7f0e:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    7f12:	7a01      	ldrb	r1, [r0, #8]
    7f14:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    7f18:	7a41      	ldrb	r1, [r0, #9]
    7f1a:	f001 011f 	and.w	r1, r1, #31
    7f1e:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7f22:	7a40      	ldrb	r0, [r0, #9]
    7f24:	0940      	lsrs	r0, r0, #5
    7f26:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    7f2a:	f104 0066 	add.w	r0, r4, #102	; 0x66
    7f2e:	7205      	strb	r5, [r0, #8]
    7f30:	7245      	strb	r5, [r0, #9]
    7f32:	21ff      	movs	r1, #255	; 0xff
    7f34:	7281      	strb	r1, [r0, #10]
    7f36:	2100      	movs	r1, #0
    7f38:	3836      	subs	r0, #54	; 0x36
    7f3a:	f007 f8a4 	bl	f086 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7f3e:	f898 000e 	ldrb.w	r0, [r8, #14]
    7f42:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    7f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f4a:	0000      	.short	0x0000
    7f4c:	2000013c 	.word	0x2000013c
    7f50:	b570      	push	{r4, r5, r6, lr}
    7f52:	4d07      	ldr	r5, [pc, #28]	; (7f70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    7f54:	4604      	mov	r4, r0
    7f56:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7f5a:	6868      	ldr	r0, [r5, #4]
    7f5c:	f006 fea2 	bl	eca4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7f60:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7f64:	6868      	ldr	r0, [r5, #4]
    7f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f6a:	f006 bea1 	b.w	ecb0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7f6e:	0000      	.short	0x0000
    7f70:	2000013c 	.word	0x2000013c
    7f74:	00555555 	.word	0x00555555
    7f78:	0000778d 	.word	0x0000778d
    7f7c:	00007619 	.word	0x00007619
    7f80:	00007709 	.word	0x00007709
    7f84:	00000000 	.word	0x00000000
    7f88:	000076e1 	.word	0x000076e1
    7f8c:	00007739 	.word	0x00007739
    7f90:	0000f455 	.word	0x0000f455
    7f94:	0000f45b 	.word	0x0000f45b
    7f98:	00007981 	.word	0x00007981
    7f9c:	000079a5 	.word	0x000079a5
    7fa0:	00007eb1 	.word	0x00007eb1
    7fa4:	00007f94 	.word	0x00007f94
    7fa8:	00007f8c 	.word	0x00007f8c
    7fac:	00007f88 	.word	0x00007f88

00007fb0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7fb0:	b510      	push	{r4, lr}
    7fb2:	1e42      	subs	r2, r0, #1
    7fb4:	2a02      	cmp	r2, #2
    7fb6:	d901      	bls.n	7fbc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7fb8:	21ca      	movs	r1, #202	; 0xca
    7fba:	e009      	b.n	7fd0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7fbc:	1e40      	subs	r0, r0, #1
    7fbe:	2910      	cmp	r1, #16
    7fc0:	d009      	beq.n	7fd6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7fc2:	2912      	cmp	r1, #18
    7fc4:	d00c      	beq.n	7fe0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7fc6:	2913      	cmp	r1, #19
    7fc8:	d00a      	beq.n	7fe0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7fca:	2915      	cmp	r1, #21
    7fcc:	d005      	beq.n	7fda <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7fce:	21d8      	movs	r1, #216	; 0xd8
    7fd0:	202f      	movs	r0, #47	; 0x2f
    7fd2:	f7fc fdc9 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fd6:	4905      	ldr	r1, [pc, #20]	; (7fec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7fd8:	e004      	b.n	7fe4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7fda:	4904      	ldr	r1, [pc, #16]	; (7fec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7fdc:	1d89      	adds	r1, r1, #6
    7fde:	e001      	b.n	7fe4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7fe0:	4902      	ldr	r1, [pc, #8]	; (7fec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7fe2:	1f89      	subs	r1, r1, #6
    7fe4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7fe8:	bd10      	pop	{r4, pc}
    7fea:	0000      	.short	0x0000
    7fec:	0000f66c 	.word	0x0000f66c

00007ff0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7ff0:	1e42      	subs	r2, r0, #1
    7ff2:	b510      	push	{r4, lr}
    7ff4:	b2d2      	uxtb	r2, r2
    7ff6:	2a01      	cmp	r2, #1
    7ff8:	d903      	bls.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7ffa:	291d      	cmp	r1, #29
    7ffc:	d001      	beq.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7ffe:	21ee      	movs	r1, #238	; 0xee
    8000:	e00d      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8002:	2913      	cmp	r1, #19
    8004:	d013      	beq.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8006:	dc04      	bgt.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    8008:	2910      	cmp	r1, #16
    800a:	d00b      	beq.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    800c:	2912      	cmp	r1, #18
    800e:	d104      	bne.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8010:	e00d      	b.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8012:	2915      	cmp	r1, #21
    8014:	d008      	beq.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    8016:	291d      	cmp	r1, #29
    8018:	d00e      	beq.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    801a:	f44f 7181 	mov.w	r1, #258	; 0x102
    801e:	202f      	movs	r0, #47	; 0x2f
    8020:	f7fc fda2 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8024:	4807      	ldr	r0, [pc, #28]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8026:	e004      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    8028:	4806      	ldr	r0, [pc, #24]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    802a:	3008      	adds	r0, #8
    802c:	e001      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    802e:	4805      	ldr	r0, [pc, #20]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8030:	1d00      	adds	r0, r0, #4
    8032:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8036:	bd10      	pop	{r4, pc}
    8038:	f240 315a 	movw	r1, #858	; 0x35a
    803c:	fb10 f001 	smulbb	r0, r0, r1
    8040:	bd10      	pop	{r4, pc}
    8042:	0000      	.short	0x0000
    8044:	0000f65a 	.word	0x0000f65a

00008048 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    804c:	4604      	mov	r4, r0
    804e:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    8052:	4616      	mov	r6, r2
    8054:	460f      	mov	r7, r1
    8056:	2800      	cmp	r0, #0
    8058:	d15e      	bne.n	8118 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    805a:	4621      	mov	r1, r4
    805c:	484d      	ldr	r0, [pc, #308]	; (8194 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    805e:	f7fa fff9 	bl	3054 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8062:	4605      	mov	r5, r0
    8064:	2820      	cmp	r0, #32
    8066:	d057      	beq.n	8118 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8068:	2250      	movs	r2, #80	; 0x50
    806a:	2100      	movs	r1, #0
    806c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8070:	f005 f844 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8074:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    8078:	2501      	movs	r5, #1
    807a:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    807e:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    8082:	b137      	cbz	r7, 8092 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    8084:	f7ff f8c4 	bl	7210 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8088:	f000 0007 	and.w	r0, r0, #7
    808c:	1c40      	adds	r0, r0, #1
    808e:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    8092:	4620      	mov	r0, r4
    8094:	f007 fcd4 	bl	fa40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    8098:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    809c:	2002      	movs	r0, #2
    809e:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    80a2:	46a8      	mov	r8, r5
    80a4:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    80a8:	2500      	movs	r5, #0
    80aa:	f804 5fe0 	strb.w	r5, [r4, #224]!
    80ae:	f7fc f8e1 	bl	4274 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    80b2:	4607      	mov	r7, r0
    80b4:	f004 fe45 	bl	cd42 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    80b8:	8921      	ldrh	r1, [r4, #8]
    80ba:	3ce0      	subs	r4, #224	; 0xe0
    80bc:	4288      	cmp	r0, r1
    80be:	d800      	bhi.n	80c2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    80c0:	4608      	mov	r0, r1
    80c2:	4438      	add	r0, r7
    80c4:	30cc      	adds	r0, #204	; 0xcc
    80c6:	b287      	uxth	r7, r0
    80c8:	4620      	mov	r0, r4
    80ca:	f007 f962 	bl	f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    80ce:	b330      	cbz	r0, 811e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    80d0:	f008 feb1 	bl	10e36 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    80d4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    80d8:	b281      	uxth	r1, r0
    80da:	4630      	mov	r0, r6
    80dc:	f004 fe65 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    80e0:	4430      	add	r0, r6
    80e2:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    80e6:	34c4      	adds	r4, #196	; 0xc4
    80e8:	f7fb f966 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    80ec:	19c0      	adds	r0, r0, r7
    80ee:	4169      	adcs	r1, r5
    80f0:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    80f4:	f804 5c03 	strb.w	r5, [r4, #-3]
    80f8:	f884 8004 	strb.w	r8, [r4, #4]
    80fc:	2001      	movs	r0, #1
    80fe:	f007 faa5 	bl	f64c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8102:	f500 7088 	add.w	r0, r0, #272	; 0x110
    8106:	1a30      	subs	r0, r6, r0
    8108:	60a0      	str	r0, [r4, #8]
    810a:	f04f 30ff 	mov.w	r0, #4294967295
    810e:	0841      	lsrs	r1, r0, #1
    8110:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    8114:	3cc4      	subs	r4, #196	; 0xc4
    8116:	e022      	b.n	815e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8118:	200c      	movs	r0, #12
    811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    811e:	4620      	mov	r0, r4
    8120:	f007 fbe1 	bl	f8e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    8124:	f844 0fe4 	str.w	r0, [r4, #228]!
    8128:	f804 8c23 	strb.w	r8, [r4, #-35]
    812c:	f7fb f944 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8130:	4680      	mov	r8, r0
    8132:	4689      	mov	r9, r1
    8134:	f7ff f86c 	bl	7210 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8138:	f242 7110 	movw	r1, #10000	; 0x2710
    813c:	fbb0 f2f1 	udiv	r2, r0, r1
    8140:	fb01 0012 	mls	r0, r1, r2, r0
    8144:	1839      	adds	r1, r7, r0
    8146:	eb11 0108 	adds.w	r1, r1, r8
    814a:	eb45 0009 	adc.w	r0, r5, r9
    814e:	e9c4 1003 	strd	r1, r0, [r4, #12]
    8152:	3ce4      	subs	r4, #228	; 0xe4
    8154:	b196      	cbz	r6, 817c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    8156:	1989      	adds	r1, r1, r6
    8158:	4168      	adcs	r0, r5
    815a:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    815e:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8162:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    8166:	f007 fc69 	bl	fa3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    816a:	b168      	cbz	r0, 8188 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    816c:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8170:	2100      	movs	r1, #0
    8172:	4620      	mov	r0, r4
    8174:	f007 f939 	bl	f3ea <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8178:	2000      	movs	r0, #0
    817a:	e7ce      	b.n	811a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    817c:	f04f 30ff 	mov.w	r0, #4294967295
    8180:	0841      	lsrs	r1, r0, #1
    8182:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    8186:	e7ea      	b.n	815e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8188:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    818c:	2030      	movs	r0, #48	; 0x30
    818e:	f7fc fceb 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8192:	0000      	.short	0x0000
    8194:	0000fbbd 	.word	0x0000fbbd

00008198 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8198:	4803      	ldr	r0, [pc, #12]	; (81a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    819a:	2100      	movs	r1, #0
    819c:	7001      	strb	r1, [r0, #0]
    819e:	2201      	movs	r2, #1
    81a0:	7082      	strb	r2, [r0, #2]
    81a2:	7041      	strb	r1, [r0, #1]
    81a4:	f007 baba 	b.w	f71c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    81a8:	2000014c 	.word	0x2000014c

000081ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    81ac:	4901      	ldr	r1, [pc, #4]	; (81b4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    81ae:	7008      	strb	r0, [r1, #0]
    81b0:	4770      	bx	lr
    81b2:	0000      	.short	0x0000
    81b4:	2000014c 	.word	0x2000014c

000081b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    81b8:	4908      	ldr	r1, [pc, #32]	; (81dc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    81ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    81be:	fbb1 f1f2 	udiv	r1, r1, r2
    81c2:	b510      	push	{r4, lr}
    81c4:	f501 7125 	add.w	r1, r1, #660	; 0x294
    81c8:	f006 ff76 	bl	f0b8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    81cc:	f640 0148 	movw	r1, #2120	; 0x848
    81d0:	4288      	cmp	r0, r1
    81d2:	d300      	bcc.n	81d6 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    81d4:	4608      	mov	r0, r1
    81d6:	b280      	uxth	r0, r0
    81d8:	bd10      	pop	{r4, pc}
    81da:	0000      	.short	0x0000
    81dc:	0001527d 	.word	0x0001527d

000081e0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    81e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81e4:	4c10      	ldr	r4, [pc, #64]	; (8228 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    81e6:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    81ea:	f003 fbdd 	bl	b9a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    81ee:	4606      	mov	r6, r0
    81f0:	7820      	ldrb	r0, [r4, #0]
    81f2:	b128      	cbz	r0, 8200 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    81f4:	4632      	mov	r2, r6
    81f6:	4639      	mov	r1, r7
    81f8:	4628      	mov	r0, r5
    81fa:	f006 f9eb 	bl	e5d4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    81fe:	4605      	mov	r5, r0
    8200:	6860      	ldr	r0, [r4, #4]
    8202:	4285      	cmp	r5, r0
    8204:	d005      	beq.n	8212 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8206:	68e1      	ldr	r1, [r4, #12]
    8208:	1a28      	subs	r0, r5, r0
    820a:	4408      	add	r0, r1
    820c:	60e0      	str	r0, [r4, #12]
    820e:	f7fb f819 	bl	3244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8212:	6065      	str	r5, [r4, #4]
    8214:	42ae      	cmp	r6, r5
    8216:	d801      	bhi.n	821c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8218:	7860      	ldrb	r0, [r4, #1]
    821a:	b110      	cbz	r0, 8222 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    821c:	2000      	movs	r0, #0
    821e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8222:	2001      	movs	r0, #1
    8224:	e7fb      	b.n	821e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8226:	0000      	.short	0x0000
    8228:	2000014c 	.word	0x2000014c

0000822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    822c:	b510      	push	{r4, lr}
    822e:	4604      	mov	r4, r0
    8230:	2906      	cmp	r1, #6
    8232:	d22e      	bcs.n	8292 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8234:	e8df f001 	tbb	[pc, r1]
    8238:	14031105 	.word	0x14031105
    823c:	2815      	.short	0x2815
    823e:	2100      	movs	r1, #0
    8240:	e006      	b.n	8250 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8242:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8246:	b110      	cbz	r0, 824e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8248:	4620      	mov	r0, r4
    824a:	f007 fb8a 	bl	f962 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    824e:	2101      	movs	r1, #1
    8250:	4620      	mov	r0, r4
    8252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8256:	f000 b8fb 	b.w	8450 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    825a:	2003      	movs	r0, #3
    825c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8260:	bd10      	pop	{r4, pc}
    8262:	f003 fba7 	bl	b9b4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8266:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    826a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    826e:	f003 fc65 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8272:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8276:	1a09      	subs	r1, r1, r0
    8278:	4808      	ldr	r0, [pc, #32]	; (829c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    827a:	6842      	ldr	r2, [r0, #4]
    827c:	440a      	add	r2, r1
    827e:	6042      	str	r2, [r0, #4]
    8280:	6882      	ldr	r2, [r0, #8]
    8282:	4411      	add	r1, r2
    8284:	6081      	str	r1, [r0, #8]
    8286:	bd10      	pop	{r4, pc}
    8288:	4620      	mov	r0, r4
    828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    828e:	f007 bb53 	b.w	f938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8292:	f240 715b 	movw	r1, #1883	; 0x75b
    8296:	2030      	movs	r0, #48	; 0x30
    8298:	f7fc fc66 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    829c:	2000014c 	.word	0x2000014c

000082a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    82a0:	b570      	push	{r4, r5, r6, lr}
    82a2:	460c      	mov	r4, r1
    82a4:	4605      	mov	r5, r0
    82a6:	b112      	cbz	r2, 82ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    82a8:	f240 7185 	movw	r1, #1925	; 0x785
    82ac:	e010      	b.n	82d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    82ae:	f003 fb7b 	bl	b9a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    82b2:	4601      	mov	r1, r0
    82b4:	2200      	movs	r2, #0
    82b6:	4620      	mov	r0, r4
    82b8:	f007 fc34 	bl	fb24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    82bc:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    82c0:	462a      	mov	r2, r5
    82c2:	4905      	ldr	r1, [pc, #20]	; (82d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    82c4:	f7fa fd7c 	bl	2dc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    82c8:	2800      	cmp	r0, #0
    82ca:	d104      	bne.n	82d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    82cc:	f240 716e 	movw	r1, #1902	; 0x76e
    82d0:	2030      	movs	r0, #48	; 0x30
    82d2:	f7fc fc49 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82d6:	bd70      	pop	{r4, r5, r6, pc}
    82d8:	0000fc5d 	.word	0x0000fc5d
    82dc:	b510      	push	{r4, lr}
    82de:	280c      	cmp	r0, #12
    82e0:	d304      	bcc.n	82ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    82e2:	f44f 7157 	mov.w	r1, #860	; 0x35c
    82e6:	2006      	movs	r0, #6
    82e8:	f7fc fc3e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82ec:	4901      	ldr	r1, [pc, #4]	; (82f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    82ee:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    82f2:	bd10      	pop	{r4, pc}
    82f4:	0000fe80 	.word	0x0000fe80
    82f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    82fa:	4c18      	ldr	r4, [pc, #96]	; (835c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    82fc:	2001      	movs	r0, #1
    82fe:	7060      	strb	r0, [r4, #1]
    8300:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8304:	e00b      	b.n	831e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8306:	2100      	movs	r1, #0
    8308:	f005 feb0 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    830c:	0006      	movs	r6, r0
    830e:	d010      	beq.n	8332 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8310:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    8314:	f7fa fd86 	bl	2e24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8318:	4630      	mov	r0, r6
    831a:	f007 fbf6 	bl	fb0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    831e:	4669      	mov	r1, sp
    8320:	2000      	movs	r0, #0
    8322:	f005 fead 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8326:	b180      	cbz	r0, 834a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8328:	f240 1103 	movw	r1, #259	; 0x103
    832c:	2030      	movs	r0, #48	; 0x30
    832e:	f7fc fc1b 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8332:	f240 1123 	movw	r1, #291	; 0x123
    8336:	e7f9      	b.n	832c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8338:	9802      	ldr	r0, [sp, #8]
    833a:	b130      	cbz	r0, 834a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    833c:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8340:	b119      	cbz	r1, 834a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8342:	8800      	ldrh	r0, [r0, #0]
    8344:	42a8      	cmp	r0, r5
    8346:	d1de      	bne.n	8306 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8348:	e004      	b.n	8354 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    834a:	4668      	mov	r0, sp
    834c:	f7fc fe50 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8350:	2800      	cmp	r0, #0
    8352:	d0f1      	beq.n	8338 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8354:	2000      	movs	r0, #0
    8356:	7060      	strb	r0, [r4, #1]
    8358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    835a:	0000      	.short	0x0000
    835c:	2000014c 	.word	0x2000014c
    8360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8364:	4604      	mov	r4, r0
    8366:	4839      	ldr	r0, [pc, #228]	; (844c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8368:	461e      	mov	r6, r3
    836a:	4690      	mov	r8, r2
    836c:	7880      	ldrb	r0, [r0, #2]
    836e:	4689      	mov	r9, r1
    8370:	2500      	movs	r5, #0
    8372:	2800      	cmp	r0, #0
    8374:	d063      	beq.n	843e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8376:	f7fc f853 	bl	4420 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    837a:	b3e0      	cbz	r0, 83f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    837c:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8380:	2802      	cmp	r0, #2
    8382:	d35c      	bcc.n	843e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8384:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8388:	2802      	cmp	r0, #2
    838a:	d058      	beq.n	843e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    838c:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8390:	bb88      	cbnz	r0, 83f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8392:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8396:	f7ff ffa1 	bl	82dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    839a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    839e:	b281      	uxth	r1, r0
    83a0:	8031      	strh	r1, [r6, #0]
    83a2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    83a6:	2700      	movs	r7, #0
    83a8:	2801      	cmp	r0, #1
    83aa:	d00d      	beq.n	83c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    83ac:	6920      	ldr	r0, [r4, #16]
    83ae:	f004 fcfc 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    83b2:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    83b6:	4442      	add	r2, r8
    83b8:	eba2 0109 	sub.w	r1, r2, r9
    83bc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    83c0:	1a82      	subs	r2, r0, r2
    83c2:	fb01 7502 	mla	r5, r1, r2, r7
    83c6:	e035      	b.n	8434 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    83c8:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    83cc:	2803      	cmp	r0, #3
    83ce:	d039      	beq.n	8444 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    83d0:	2101      	movs	r1, #1
    83d2:	2000      	movs	r0, #0
    83d4:	f006 f9b9 	bl	e74a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    83d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83da:	1847      	adds	r7, r0, r1
    83dc:	8831      	ldrh	r1, [r6, #0]
    83de:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    83e2:	f004 fce2 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    83e6:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    83ea:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    83ee:	1a82      	subs	r2, r0, r2
    83f0:	fb01 5502 	mla	r5, r1, r2, r5
    83f4:	e000      	b.n	83f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    83f6:	e022      	b.n	843e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    83f8:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    83fc:	8831      	ldrh	r1, [r6, #0]
    83fe:	4638      	mov	r0, r7
    8400:	f004 fcd3 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8404:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8408:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    840c:	1a41      	subs	r1, r0, r1
    840e:	440d      	add	r5, r1
    8410:	8831      	ldrh	r1, [r6, #0]
    8412:	6920      	ldr	r0, [r4, #16]
    8414:	f004 fcc9 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8418:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    841c:	4442      	add	r2, r8
    841e:	eba2 0109 	sub.w	r1, r2, r9
    8422:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8426:	1a89      	subs	r1, r1, r2
    8428:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    842c:	1a82      	subs	r2, r0, r2
    842e:	1e49      	subs	r1, r1, #1
    8430:	fb01 5502 	mla	r5, r1, r2, r5
    8434:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8438:	2001      	movs	r0, #1
    843a:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    843e:	4628      	mov	r0, r5
    8440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8444:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8448:	e7c6      	b.n	83d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    844a:	0000      	.short	0x0000
    844c:	2000014c 	.word	0x2000014c
    8450:	b538      	push	{r3, r4, r5, lr}
    8452:	2500      	movs	r5, #0
    8454:	4604      	mov	r4, r0
    8456:	2901      	cmp	r1, #1
    8458:	d102      	bne.n	8460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    845a:	4810      	ldr	r0, [pc, #64]	; (849c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    845c:	7840      	ldrb	r0, [r0, #1]
    845e:	b170      	cbz	r0, 847e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8460:	2004      	movs	r0, #4
    8462:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8466:	bf00      	nop
    8468:	f007 fa74 	bl	f954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    846c:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8470:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8474:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8478:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    847c:	bd38      	pop	{r3, r4, r5, pc}
    847e:	9500      	str	r5, [sp, #0]
    8480:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8484:	2301      	movs	r3, #1
    8486:	2200      	movs	r2, #0
    8488:	4620      	mov	r0, r4
    848a:	f000 f809 	bl	84a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    848e:	2800      	cmp	r0, #0
    8490:	d0ea      	beq.n	8468 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8492:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8496:	2030      	movs	r0, #48	; 0x30
    8498:	f7fc fb66 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849c:	2000014c 	.word	0x2000014c
    84a0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84a4:	b08b      	sub	sp, #44	; 0x2c
    84a6:	4604      	mov	r4, r0
    84a8:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    84ac:	4699      	mov	r9, r3
    84ae:	460f      	mov	r7, r1
    84b0:	9307      	str	r3, [sp, #28]
    84b2:	9005      	str	r0, [sp, #20]
    84b4:	f008 fcbf 	bl	10e36 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    84b8:	4605      	mov	r5, r0
    84ba:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    84be:	f7ff ff0d 	bl	82dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    84c2:	4428      	add	r0, r5
    84c4:	f8ad 0004 	strh.w	r0, [sp, #4]
    84c8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    84cc:	280d      	cmp	r0, #13
    84ce:	d004      	beq.n	84da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    84d0:	2000      	movs	r0, #0
    84d2:	9008      	str	r0, [sp, #32]
    84d4:	980d      	ldr	r0, [sp, #52]	; 0x34
    84d6:	b110      	cbz	r0, 84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    84d8:	e02e      	b.n	8538 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    84da:	2001      	movs	r0, #1
    84dc:	e7f9      	b.n	84d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    84de:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    84e2:	2803      	cmp	r0, #3
    84e4:	d128      	bne.n	8538 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    84e6:	9808      	ldr	r0, [sp, #32]
    84e8:	b330      	cbz	r0, 8538 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    84ea:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    84ee:	42b8      	cmp	r0, r7
    84f0:	d122      	bne.n	8538 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    84f2:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    84f6:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    84fa:	6920      	ldr	r0, [r4, #16]
    84fc:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    8500:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    8504:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8508:	4408      	add	r0, r1
    850a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    850e:	4620      	mov	r0, r4
    8510:	f007 fcd6 	bl	fec0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8514:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    8518:	6260      	str	r0, [r4, #36]	; 0x24
    851a:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    851e:	8420      	strh	r0, [r4, #32]
    8520:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    8524:	6120      	str	r0, [r4, #16]
    8526:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    852a:	8320      	strh	r0, [r4, #24]
    852c:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8530:	8360      	strh	r0, [r4, #26]
    8532:	2002      	movs	r0, #2
    8534:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8538:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    853c:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8540:	1a38      	subs	r0, r7, r0
    8542:	fa0f fa80 	sxth.w	sl, r0
    8546:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    854a:	1a38      	subs	r0, r7, r0
    854c:	fa0f f880 	sxth.w	r8, r0
    8550:	f1b8 0f00 	cmp.w	r8, #0
    8554:	da08      	bge.n	8568 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    8556:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    855a:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    855e:	46d0      	mov	r8, sl
    8560:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8564:	2001      	movs	r0, #1
    8566:	9007      	str	r0, [sp, #28]
    8568:	ab01      	add	r3, sp, #4
    856a:	4652      	mov	r2, sl
    856c:	4641      	mov	r1, r8
    856e:	4620      	mov	r0, r4
    8570:	f7ff fef6 	bl	8360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8574:	9004      	str	r0, [sp, #16]
    8576:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    857a:	f8df b334 	ldr.w	fp, [pc, #820]	; 88b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    857e:	b140      	cbz	r0, 8592 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8580:	2801      	cmp	r0, #1
    8582:	d07d      	beq.n	8680 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8584:	2802      	cmp	r0, #2
    8586:	d051      	beq.n	862c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8588:	2803      	cmp	r0, #3
    858a:	d07a      	beq.n	8682 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    858c:	f240 514b 	movw	r1, #1355	; 0x54b
    8590:	e18a      	b.n	88a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8592:	2101      	movs	r1, #1
    8594:	2000      	movs	r0, #0
    8596:	f006 f8d8 	bl	e74a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    859a:	4606      	mov	r6, r0
    859c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    859e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    85a2:	4430      	add	r0, r6
    85a4:	f004 fc01 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    85a8:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    85ac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    85b0:	6920      	ldr	r0, [r4, #16]
    85b2:	f004 fbfa 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    85b6:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    85ba:	a907      	add	r1, sp, #28
    85bc:	a806      	add	r0, sp, #24
    85be:	f003 f95b 	bl	b878 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    85c2:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    85c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    85ca:	f7fa ff07 	bl	33dc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    85ce:	4682      	mov	sl, r0
    85d0:	4620      	mov	r0, r4
    85d2:	f007 f9b1 	bl	f938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    85d6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    85da:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    85de:	f003 fad9 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    85e2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    85e6:	4401      	add	r1, r0
    85e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    85ec:	fbb1 f0f0 	udiv	r0, r1, r0
    85f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85f2:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    85f6:	4431      	add	r1, r6
    85f8:	1a08      	subs	r0, r1, r0
    85fa:	1a81      	subs	r1, r0, r2
    85fc:	4441      	add	r1, r8
    85fe:	3920      	subs	r1, #32
    8600:	eba1 060a 	sub.w	r6, r1, sl
    8604:	0050      	lsls	r0, r2, #1
    8606:	8c21      	ldrh	r1, [r4, #32]
    8608:	3060      	adds	r0, #96	; 0x60
    860a:	4401      	add	r1, r0
    860c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8610:	f007 fa02 	bl	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8614:	3022      	adds	r0, #34	; 0x22
    8616:	f8cb 0010 	str.w	r0, [fp, #16]
    861a:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    861e:	1a30      	subs	r0, r6, r0
    8620:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    8624:	d258      	bcs.n	86d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    8626:	f240 41e4 	movw	r1, #1252	; 0x4e4
    862a:	e13d      	b.n	88a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    862c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    862e:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8632:	4408      	add	r0, r1
    8634:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8638:	f004 fbb7 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    863c:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8640:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8644:	6920      	ldr	r0, [r4, #16]
    8646:	f004 fbb0 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    864a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    864e:	4620      	mov	r0, r4
    8650:	f007 f972 	bl	f938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8654:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8658:	bb10      	cbnz	r0, 86a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    865a:	f1b9 0f00 	cmp.w	r9, #0
    865e:	d01f      	beq.n	86a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8660:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8664:	4640      	mov	r0, r8
    8666:	f003 fa95 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    866a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    866e:	4401      	add	r1, r0
    8670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8674:	fbb1 f0f0 	udiv	r0, r1, r0
    8678:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    867c:	4408      	add	r0, r1
    867e:	e001      	b.n	8684 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8680:	e02b      	b.n	86da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8682:	e047      	b.n	8714 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8684:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8686:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    868a:	4411      	add	r1, r2
    868c:	1a0e      	subs	r6, r1, r0
    868e:	4640      	mov	r0, r8
    8690:	f003 fa54 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8694:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8698:	1a08      	subs	r0, r1, r0
    869a:	4406      	add	r6, r0
    869c:	3e20      	subs	r6, #32
    869e:	e006      	b.n	86ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    86a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    86a2:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    86a6:	4408      	add	r0, r1
    86a8:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    86ac:	1a46      	subs	r6, r0, r1
    86ae:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    86b2:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    86b6:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    86ba:	fb01 0002 	mla	r0, r1, r2, r0
    86be:	0040      	lsls	r0, r0, #1
    86c0:	8c21      	ldrh	r1, [r4, #32]
    86c2:	3060      	adds	r0, #96	; 0x60
    86c4:	4401      	add	r1, r0
    86c6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    86ca:	f007 f9a5 	bl	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    86ce:	f8cb 0010 	str.w	r0, [fp, #16]
    86d2:	2001      	movs	r0, #1
    86d4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    86d8:	e061      	b.n	879e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    86da:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    86de:	6920      	ldr	r0, [r4, #16]
    86e0:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    86e4:	1a86      	subs	r6, r0, r2
    86e6:	eb01 000a 	add.w	r0, r1, sl
    86ea:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    86ee:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    86f2:	1a40      	subs	r0, r0, r1
    86f4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    86f8:	1e40      	subs	r0, r0, #1
    86fa:	fb0c 3101 	mla	r1, ip, r1, r3
    86fe:	fb00 1002 	mla	r0, r0, r2, r1
    8702:	0040      	lsls	r0, r0, #1
    8704:	8c21      	ldrh	r1, [r4, #32]
    8706:	3060      	adds	r0, #96	; 0x60
    8708:	4401      	add	r1, r0
    870a:	fb06 f608 	mul.w	r6, r6, r8
    870e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8712:	e040      	b.n	8796 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    8714:	6920      	ldr	r0, [r4, #16]
    8716:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    871a:	fb00 f008 	mul.w	r0, r0, r8
    871e:	fb08 0611 	mls	r6, r8, r1, r0
    8722:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8726:	2824      	cmp	r0, #36	; 0x24
    8728:	d003      	beq.n	8732 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    872a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    872e:	2824      	cmp	r0, #36	; 0x24
    8730:	d109      	bne.n	8746 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8732:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8736:	1a38      	subs	r0, r7, r0
    8738:	b200      	sxth	r0, r0
    873a:	2800      	cmp	r0, #0
    873c:	db03      	blt.n	8746 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    873e:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    8742:	b100      	cbz	r0, 8746 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8744:	9005      	str	r0, [sp, #20]
    8746:	9807      	ldr	r0, [sp, #28]
    8748:	b1d8      	cbz	r0, 8782 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    874a:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    874e:	b9c0      	cbnz	r0, 8782 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8750:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8754:	2800      	cmp	r0, #0
    8756:	d07d      	beq.n	8854 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    8758:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    875c:	f003 fa1a 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8760:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8764:	4401      	add	r1, r0
    8766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    876a:	fbb1 f0f0 	udiv	r0, r1, r0
    876e:	1a36      	subs	r6, r6, r0
    8770:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8774:	f003 f9e2 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8778:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    877c:	1a08      	subs	r0, r1, r0
    877e:	4406      	add	r6, r0
    8780:	3e20      	subs	r6, #32
    8782:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8786:	eb01 000a 	add.w	r0, r1, sl
    878a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    878e:	4348      	muls	r0, r1
    8790:	0041      	lsls	r1, r0, #1
    8792:	3160      	adds	r1, #96	; 0x60
    8794:	9805      	ldr	r0, [sp, #20]
    8796:	f007 f93f 	bl	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    879a:	f8cb 0010 	str.w	r0, [fp, #16]
    879e:	9804      	ldr	r0, [sp, #16]
    87a0:	f8db 2010 	ldr.w	r2, [fp, #16]
    87a4:	1a31      	subs	r1, r6, r0
    87a6:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    87aa:	6920      	ldr	r0, [r4, #16]
    87ac:	1b80      	subs	r0, r0, r6
    87ae:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    87b2:	f8cb 0014 	str.w	r0, [fp, #20]
    87b6:	4282      	cmp	r2, r0
    87b8:	d800      	bhi.n	87bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    87ba:	4610      	mov	r0, r2
    87bc:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    87c0:	2600      	movs	r6, #0
    87c2:	702e      	strb	r6, [r5, #0]
    87c4:	2064      	movs	r0, #100	; 0x64
    87c6:	8128      	strh	r0, [r5, #8]
    87c8:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    87cc:	1851      	adds	r1, r2, r1
    87ce:	4170      	adcs	r0, r6
    87d0:	e9c5 1004 	strd	r1, r0, [r5, #16]
    87d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    87d8:	f006 fc3f 	bl	f05a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    87dc:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    87e0:	4408      	add	r0, r1
    87e2:	6068      	str	r0, [r5, #4]
    87e4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    87e8:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    87ec:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    87f0:	72ae      	strb	r6, [r5, #10]
    87f2:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    87f6:	1bc0      	subs	r0, r0, r7
    87f8:	b200      	sxth	r0, r0
    87fa:	2800      	cmp	r0, #0
    87fc:	dd01      	ble.n	8802 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    87fe:	2002      	movs	r0, #2
    8800:	72a8      	strb	r0, [r5, #10]
    8802:	9808      	ldr	r0, [sp, #32]
    8804:	b338      	cbz	r0, 8856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    8806:	f1b9 0f00 	cmp.w	r9, #0
    880a:	d01c      	beq.n	8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    880c:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    8810:	b3f1      	cbz	r1, 8890 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    8812:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8816:	bf00      	nop
    8818:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    881c:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    8820:	1c40      	adds	r0, r0, #1
    8822:	4342      	muls	r2, r0
    8824:	428a      	cmp	r2, r1
    8826:	d20e      	bcs.n	8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8828:	7aa8      	ldrb	r0, [r5, #10]
    882a:	b160      	cbz	r0, 8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    882c:	72ae      	strb	r6, [r5, #10]
    882e:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8832:	1c40      	adds	r0, r0, #1
    8834:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    8838:	f7fe fce4 	bl	7204 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    883c:	f000 0007 	and.w	r0, r0, #7
    8840:	1c40      	adds	r0, r0, #1
    8842:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    8846:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    884a:	4629      	mov	r1, r5
    884c:	f007 f8f6 	bl	fa3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    8850:	b340      	cbz	r0, 88a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    8852:	e001      	b.n	8858 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    8854:	e009      	b.n	886a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    8856:	e00b      	b.n	8870 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    8858:	980d      	ldr	r0, [sp, #52]	; 0x34
    885a:	f080 0001 	eor.w	r0, r0, #1
    885e:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    8862:	2000      	movs	r0, #0
    8864:	b00f      	add	sp, #60	; 0x3c
    8866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    886a:	f240 5136 	movw	r1, #1334	; 0x536
    886e:	e01b      	b.n	88a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8870:	f1b9 0f00 	cmp.w	r9, #0
    8874:	d1ca      	bne.n	880c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    8876:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    887a:	2800      	cmp	r0, #0
    887c:	d0e3      	beq.n	8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    887e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8882:	6920      	ldr	r0, [r4, #16]
    8884:	1a41      	subs	r1, r0, r1
    8886:	4628      	mov	r0, r5
    8888:	f005 ff71 	bl	e76e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    888c:	0400      	lsls	r0, r0, #16
    888e:	e000      	b.n	8892 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    8890:	e006      	b.n	88a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8892:	0c00      	lsrs	r0, r0, #16
    8894:	d0d7      	beq.n	8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8896:	9918      	ldr	r1, [sp, #96]	; 0x60
    8898:	b101      	cbz	r1, 889c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    889a:	8008      	strh	r0, [r1, #0]
    889c:	2001      	movs	r0, #1
    889e:	e7e1      	b.n	8864 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    88a0:	2000      	movs	r0, #0
    88a2:	e7b9      	b.n	8818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    88a4:	f240 5194 	movw	r1, #1428	; 0x594
    88a8:	2030      	movs	r0, #48	; 0x30
    88aa:	f7fc f95d 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ae:	0000      	.short	0x0000
    88b0:	2000014c 	.word	0x2000014c
    88b4:	b570      	push	{r4, r5, r6, lr}
    88b6:	4604      	mov	r4, r0
    88b8:	f004 fa43 	bl	cd42 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    88bc:	2864      	cmp	r0, #100	; 0x64
    88be:	d901      	bls.n	88c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    88c0:	4605      	mov	r5, r0
    88c2:	e000      	b.n	88c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    88c4:	2564      	movs	r5, #100	; 0x64
    88c6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88ca:	2128      	movs	r1, #40	; 0x28
    88cc:	f006 ffa4 	bl	f818 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    88d0:	4428      	add	r0, r5
    88d2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    88d6:	f500 7010 	add.w	r0, r0, #576	; 0x240
    88da:	180e      	adds	r6, r1, r0
    88dc:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88e0:	2128      	movs	r1, #40	; 0x28
    88e2:	f006 ff99 	bl	f818 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    88e6:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    88ea:	4620      	mov	r0, r4
    88ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    88ee:	f006 fb51 	bl	ef94 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    88f2:	4605      	mov	r5, r0
    88f4:	4632      	mov	r2, r6
    88f6:	4620      	mov	r0, r4
    88f8:	6921      	ldr	r1, [r4, #16]
    88fa:	f006 fb4b 	bl	ef94 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    88fe:	4907      	ldr	r1, [pc, #28]	; (891c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    8900:	4285      	cmp	r5, r0
    8902:	6088      	str	r0, [r1, #8]
    8904:	d200      	bcs.n	8908 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    8906:	4628      	mov	r0, r5
    8908:	6048      	str	r0, [r1, #4]
    890a:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    890e:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    8912:	60c8      	str	r0, [r1, #12]
    8914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8918:	f7fa bc94 	b.w	3244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    891c:	2000014c 	.word	0x2000014c

00008920 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8920:	4806      	ldr	r0, [pc, #24]	; (893c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8922:	4905      	ldr	r1, [pc, #20]	; (8938 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8924:	6501      	str	r1, [r0, #80]	; 0x50
    8926:	4906      	ldr	r1, [pc, #24]	; (8940 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8928:	6541      	str	r1, [r0, #84]	; 0x54
    892a:	4807      	ldr	r0, [pc, #28]	; (8948 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    892c:	4905      	ldr	r1, [pc, #20]	; (8944 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    892e:	6501      	str	r1, [r0, #80]	; 0x50
    8930:	4906      	ldr	r1, [pc, #24]	; (894c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8932:	6541      	str	r1, [r0, #84]	; 0x54
    8934:	4770      	bx	lr
    8936:	0000      	.short	0x0000
    8938:	00009d41 	.word	0x00009d41
    893c:	2000017c 	.word	0x2000017c
    8940:	00009e25 	.word	0x00009e25
    8944:	0000a4e1 	.word	0x0000a4e1
    8948:	20000214 	.word	0x20000214
    894c:	0000a511 	.word	0x0000a511

00008950 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8950:	481e      	ldr	r0, [pc, #120]	; (89cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8952:	491d      	ldr	r1, [pc, #116]	; (89c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8954:	6081      	str	r1, [r0, #8]
    8956:	491e      	ldr	r1, [pc, #120]	; (89d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8958:	6041      	str	r1, [r0, #4]
    895a:	491e      	ldr	r1, [pc, #120]	; (89d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    895c:	6001      	str	r1, [r0, #0]
    895e:	491e      	ldr	r1, [pc, #120]	; (89d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8960:	6281      	str	r1, [r0, #40]	; 0x28
    8962:	491e      	ldr	r1, [pc, #120]	; (89dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8964:	62c1      	str	r1, [r0, #44]	; 0x2c
    8966:	491e      	ldr	r1, [pc, #120]	; (89e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8968:	60c1      	str	r1, [r0, #12]
    896a:	491e      	ldr	r1, [pc, #120]	; (89e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    896c:	6181      	str	r1, [r0, #24]
    896e:	491e      	ldr	r1, [pc, #120]	; (89e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8970:	6301      	str	r1, [r0, #48]	; 0x30
    8972:	491e      	ldr	r1, [pc, #120]	; (89ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8974:	6201      	str	r1, [r0, #32]
    8976:	491e      	ldr	r1, [pc, #120]	; (89f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8978:	64c1      	str	r1, [r0, #76]	; 0x4c
    897a:	491e      	ldr	r1, [pc, #120]	; (89f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    897c:	6481      	str	r1, [r0, #72]	; 0x48
    897e:	491e      	ldr	r1, [pc, #120]	; (89f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8980:	6441      	str	r1, [r0, #68]	; 0x44
    8982:	491e      	ldr	r1, [pc, #120]	; (89fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8984:	6341      	str	r1, [r0, #52]	; 0x34
    8986:	491e      	ldr	r1, [pc, #120]	; (8a00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8988:	61c1      	str	r1, [r0, #28]
    898a:	491e      	ldr	r1, [pc, #120]	; (8a04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    898c:	6241      	str	r1, [r0, #36]	; 0x24
    898e:	481f      	ldr	r0, [pc, #124]	; (8a0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8990:	491d      	ldr	r1, [pc, #116]	; (8a08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8992:	6081      	str	r1, [r0, #8]
    8994:	491e      	ldr	r1, [pc, #120]	; (8a10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8996:	61c1      	str	r1, [r0, #28]
    8998:	491e      	ldr	r1, [pc, #120]	; (8a14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    899a:	6241      	str	r1, [r0, #36]	; 0x24
    899c:	491e      	ldr	r1, [pc, #120]	; (8a18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    899e:	62c1      	str	r1, [r0, #44]	; 0x2c
    89a0:	491e      	ldr	r1, [pc, #120]	; (8a1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    89a2:	6101      	str	r1, [r0, #16]
    89a4:	491e      	ldr	r1, [pc, #120]	; (8a20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    89a6:	6141      	str	r1, [r0, #20]
    89a8:	491e      	ldr	r1, [pc, #120]	; (8a24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    89aa:	6441      	str	r1, [r0, #68]	; 0x44
    89ac:	491e      	ldr	r1, [pc, #120]	; (8a28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    89ae:	6341      	str	r1, [r0, #52]	; 0x34
    89b0:	491e      	ldr	r1, [pc, #120]	; (8a2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    89b2:	6181      	str	r1, [r0, #24]
    89b4:	491e      	ldr	r1, [pc, #120]	; (8a30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    89b6:	6301      	str	r1, [r0, #48]	; 0x30
    89b8:	491e      	ldr	r1, [pc, #120]	; (8a34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    89ba:	6481      	str	r1, [r0, #72]	; 0x48
    89bc:	491e      	ldr	r1, [pc, #120]	; (8a38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    89be:	64c1      	str	r1, [r0, #76]	; 0x4c
    89c0:	491e      	ldr	r1, [pc, #120]	; (8a3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    89c2:	6381      	str	r1, [r0, #56]	; 0x38
    89c4:	4770      	bx	lr
    89c6:	0000      	.short	0x0000
    89c8:	0000a20d 	.word	0x0000a20d
    89cc:	2000017c 	.word	0x2000017c
    89d0:	00009a65 	.word	0x00009a65
    89d4:	00009ac9 	.word	0x00009ac9
    89d8:	00009ef9 	.word	0x00009ef9
    89dc:	00009f3d 	.word	0x00009f3d
    89e0:	00009b7d 	.word	0x00009b7d
    89e4:	0000a1e5 	.word	0x0000a1e5
    89e8:	0000a31d 	.word	0x0000a31d
    89ec:	00009c35 	.word	0x00009c35
    89f0:	00009ec9 	.word	0x00009ec9
    89f4:	00009e9d 	.word	0x00009e9d
    89f8:	0000a18d 	.word	0x0000a18d
    89fc:	0000a1bd 	.word	0x0000a1bd
    8a00:	0000a245 	.word	0x0000a245
    8a04:	00009c89 	.word	0x00009c89
    8a08:	0000a739 	.word	0x0000a739
    8a0c:	20000214 	.word	0x20000214
    8a10:	0000a761 	.word	0x0000a761
    8a14:	0000a4b1 	.word	0x0000a4b1
    8a18:	0000a589 	.word	0x0000a589
    8a1c:	0000a485 	.word	0x0000a485
    8a20:	0000a68d 	.word	0x0000a68d
    8a24:	0000a60d 	.word	0x0000a60d
    8a28:	0000a639 	.word	0x0000a639
    8a2c:	0000a6b1 	.word	0x0000a6b1
    8a30:	0000a7bd 	.word	0x0000a7bd
    8a34:	0000a541 	.word	0x0000a541
    8a38:	0000a571 	.word	0x0000a571
    8a3c:	0000a65d 	.word	0x0000a65d

00008a40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8a40:	4806      	ldr	r0, [pc, #24]	; (8a5c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8a42:	4905      	ldr	r1, [pc, #20]	; (8a58 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8a44:	6581      	str	r1, [r0, #88]	; 0x58
    8a46:	4906      	ldr	r1, [pc, #24]	; (8a60 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8a48:	6601      	str	r1, [r0, #96]	; 0x60
    8a4a:	4807      	ldr	r0, [pc, #28]	; (8a68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8a4c:	4905      	ldr	r1, [pc, #20]	; (8a64 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8a4e:	6581      	str	r1, [r0, #88]	; 0x58
    8a50:	4906      	ldr	r1, [pc, #24]	; (8a6c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8a52:	65c1      	str	r1, [r0, #92]	; 0x5c
    8a54:	4770      	bx	lr
    8a56:	0000      	.short	0x0000
    8a58:	00009f5d 	.word	0x00009f5d
    8a5c:	2000017c 	.word	0x2000017c
    8a60:	0000a03d 	.word	0x0000a03d
    8a64:	0000a5b5 	.word	0x0000a5b5
    8a68:	20000214 	.word	0x20000214
    8a6c:	0000a5e5 	.word	0x0000a5e5

00008a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a72:	4c7c      	ldr	r4, [pc, #496]	; (8c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8a74:	2101      	movs	r1, #1
    8a76:	f1a4 0610 	sub.w	r6, r4, #16
    8a7a:	7021      	strb	r1, [r4, #0]
    8a7c:	2500      	movs	r5, #0
    8a7e:	6060      	str	r0, [r4, #4]
    8a80:	8075      	strh	r5, [r6, #2]
    8a82:	7075      	strb	r5, [r6, #1]
    8a84:	7035      	strb	r5, [r6, #0]
    8a86:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    8a8a:	8800      	ldrh	r0, [r0, #0]
    8a8c:	f7fc fcaa 	bl	53e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8a90:	b180      	cbz	r0, 8ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    8a92:	6860      	ldr	r0, [r4, #4]
    8a94:	8800      	ldrh	r0, [r0, #0]
    8a96:	f7fc fef9 	bl	588c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8a9a:	6860      	ldr	r0, [r4, #4]
    8a9c:	8800      	ldrh	r0, [r0, #0]
    8a9e:	f7fc fe9d 	bl	57dc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8aa2:	6860      	ldr	r0, [r4, #4]
    8aa4:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    8aa8:	b1c9      	cbz	r1, 8ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8aaa:	3078      	adds	r0, #120	; 0x78
    8aac:	f007 fa4f 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ab0:	b118      	cbz	r0, 8aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    8ab2:	e014      	b.n	8ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8ab4:	f640 3166 	movw	r1, #2918	; 0xb66
    8ab8:	e06c      	b.n	8b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    8aba:	6860      	ldr	r0, [r4, #4]
    8abc:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8ac0:	f88d 1000 	strb.w	r1, [sp]
    8ac4:	9900      	ldr	r1, [sp, #0]
    8ac6:	9100      	str	r1, [sp, #0]
    8ac8:	f89d 1000 	ldrb.w	r1, [sp]
    8acc:	b139      	cbz	r1, 8ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8ace:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8ad2:	2301      	movs	r3, #1
    8ad4:	4619      	mov	r1, r3
    8ad6:	3078      	adds	r0, #120	; 0x78
    8ad8:	f005 fd8f 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8adc:	b180      	cbz	r0, 8b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    8ade:	6860      	ldr	r0, [r4, #4]
    8ae0:	3078      	adds	r0, #120	; 0x78
    8ae2:	f007 fa34 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ae6:	b128      	cbz	r0, 8af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8ae8:	6860      	ldr	r0, [r4, #4]
    8aea:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8aee:	bf00      	nop
    8af0:	f000 fbb2 	bl	9258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8af4:	6860      	ldr	r0, [r4, #4]
    8af6:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    8afa:	b189      	cbz	r1, 8b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    8afc:	80b5      	strh	r5, [r6, #4]
    8afe:	e01e      	b.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8b00:	6860      	ldr	r0, [r4, #4]
    8b02:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    8b06:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8b0a:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8b0e:	2100      	movs	r1, #0
    8b10:	2002      	movs	r0, #2
    8b12:	f000 fe53 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8b16:	6860      	ldr	r0, [r4, #4]
    8b18:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    8b1c:	2002      	movs	r0, #2
    8b1e:	e7e7      	b.n	8af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8b20:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    8b24:	f88d 1000 	strb.w	r1, [sp]
    8b28:	9900      	ldr	r1, [sp, #0]
    8b2a:	9100      	str	r1, [sp, #0]
    8b2c:	f89d 1000 	ldrb.w	r1, [sp]
    8b30:	b919      	cbnz	r1, 8b3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8b32:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    8b34:	8b02      	ldrh	r2, [r0, #24]
    8b36:	4291      	cmp	r1, r2
    8b38:	d800      	bhi.n	8b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8b3a:	8b01      	ldrh	r1, [r0, #24]
    8b3c:	80b1      	strh	r1, [r6, #4]
    8b3e:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    8b42:	1e49      	subs	r1, r1, #1
    8b44:	b28f      	uxth	r7, r1
    8b46:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    8b4a:	4439      	add	r1, r7
    8b4c:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    8b50:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    8b54:	4439      	add	r1, r7
    8b56:	8001      	strh	r1, [r0, #0]
    8b58:	f001 fe5e 	bl	a818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    8b5c:	b120      	cbz	r0, 8b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    8b5e:	6860      	ldr	r0, [r4, #4]
    8b60:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    8b64:	4439      	add	r1, r7
    8b66:	6001      	str	r1, [r0, #0]
    8b68:	6861      	ldr	r1, [r4, #4]
    8b6a:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    8b6e:	2801      	cmp	r0, #1
    8b70:	d802      	bhi.n	8b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8b72:	1c40      	adds	r0, r0, #1
    8b74:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    8b78:	b10f      	cbz	r7, 8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8b7a:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    8b7e:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    8b82:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    8b86:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8b8a:	f005 feca 	bl	e922 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8b8e:	b120      	cbz	r0, 8b9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    8b90:	f640 31ad 	movw	r1, #2989	; 0xbad
    8b94:	2031      	movs	r0, #49	; 0x31
    8b96:	f7fb ffe7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b9a:	6860      	ldr	r0, [r4, #4]
    8b9c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8ba0:	290b      	cmp	r1, #11
    8ba2:	d001      	beq.n	8ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8ba4:	290c      	cmp	r1, #12
    8ba6:	d119      	bne.n	8bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8ba8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    8bac:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    8bb0:	1ad2      	subs	r2, r2, r3
    8bb2:	b212      	sxth	r2, r2
    8bb4:	2a00      	cmp	r2, #0
    8bb6:	db11      	blt.n	8bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8bb8:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    8bbc:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    8bc0:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    8bc4:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    8bc8:	2103      	movs	r1, #3
    8bca:	f7fd fedd 	bl	6988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8bce:	6860      	ldr	r0, [r4, #4]
    8bd0:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8bd4:	21ff      	movs	r1, #255	; 0xff
    8bd6:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    8bda:	e026      	b.n	8c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8bdc:	2924      	cmp	r1, #36	; 0x24
    8bde:	d111      	bne.n	8c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8be0:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8be4:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8be8:	1a89      	subs	r1, r1, r2
    8bea:	b209      	sxth	r1, r1
    8bec:	2900      	cmp	r1, #0
    8bee:	db09      	blt.n	8c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8bf0:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8bf4:	f000 fe9c 	bl	9930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8bf8:	2800      	cmp	r0, #0
    8bfa:	6860      	ldr	r0, [r4, #4]
    8bfc:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    8c00:	d029      	beq.n	8c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8c02:	e012      	b.n	8c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8c04:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8c08:	2924      	cmp	r1, #36	; 0x24
    8c0a:	d001      	beq.n	8c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8c0c:	2925      	cmp	r1, #37	; 0x25
    8c0e:	d10c      	bne.n	8c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8c10:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8c14:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8c18:	1a89      	subs	r1, r1, r2
    8c1a:	b209      	sxth	r1, r1
    8c1c:	2900      	cmp	r1, #0
    8c1e:	db04      	blt.n	8c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8c20:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8c24:	f000 fe84 	bl	9930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8c28:	b1a8      	cbz	r0, 8c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8c2a:	480f      	ldr	r0, [pc, #60]	; (8c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8c2c:	9000      	str	r0, [sp, #0]
    8c2e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    8c32:	4b0e      	ldr	r3, [pc, #56]	; (8c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8c34:	4a0e      	ldr	r2, [pc, #56]	; (8c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8c36:	f7fc fec1 	bl	59bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8c3a:	6860      	ldr	r0, [r4, #4]
    8c3c:	2301      	movs	r3, #1
    8c3e:	2105      	movs	r1, #5
    8c40:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8c44:	3078      	adds	r0, #120	; 0x78
    8c46:	f005 fcd8 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c4a:	2800      	cmp	r0, #0
    8c4c:	d009      	beq.n	8c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8c52:	f7fc bead 	b.w	59b0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8c5a:	2100      	movs	r1, #0
    8c5c:	4608      	mov	r0, r1
    8c5e:	f000 bbd9 	b.w	9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    8c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c64:	20000174 	.word	0x20000174
    8c68:	00009415 	.word	0x00009415
    8c6c:	00008f35 	.word	0x00008f35
    8c70:	0000987d 	.word	0x0000987d
    8c74:	4804      	ldr	r0, [pc, #16]	; (8c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8c76:	2100      	movs	r1, #0
    8c78:	6840      	ldr	r0, [r0, #4]
    8c7a:	f820 1fc0 	strh.w	r1, [r0, #192]!
    8c7e:	7881      	ldrb	r1, [r0, #2]
    8c80:	1c49      	adds	r1, r1, #1
    8c82:	7081      	strb	r1, [r0, #2]
    8c84:	4770      	bx	lr
    8c86:	0000      	.short	0x0000
    8c88:	20000174 	.word	0x20000174
    8c8c:	4807      	ldr	r0, [pc, #28]	; (8cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8c8e:	b510      	push	{r4, lr}
    8c90:	6841      	ldr	r1, [r0, #4]
    8c92:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    8c96:	1e40      	subs	r0, r0, #1
    8c98:	b240      	sxtb	r0, r0
    8c9a:	7008      	strb	r0, [r1, #0]
    8c9c:	2800      	cmp	r0, #0
    8c9e:	da04      	bge.n	8caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    8ca0:	f240 118d 	movw	r1, #397	; 0x18d
    8ca4:	2031      	movs	r0, #49	; 0x31
    8ca6:	f7fb ff5f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8caa:	bd10      	pop	{r4, pc}
    8cac:	20000174 	.word	0x20000174
    8cb0:	491d      	ldr	r1, [pc, #116]	; (8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8cb2:	b508      	push	{r3, lr}
    8cb4:	6849      	ldr	r1, [r1, #4]
    8cb6:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    8cba:	b1b8      	cbz	r0, 8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    8cbc:	2a10      	cmp	r2, #16
    8cbe:	d006      	beq.n	8cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8cc0:	2a14      	cmp	r2, #20
    8cc2:	d007      	beq.n	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8cc4:	2a15      	cmp	r2, #21
    8cc6:	d008      	beq.n	8cda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    8cc8:	2a1b      	cmp	r2, #27
    8cca:	d127      	bne.n	8d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8ccc:	e008      	b.n	8ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    8cce:	2101      	movs	r1, #1
    8cd0:	200b      	movs	r0, #11
    8cd2:	e007      	b.n	8ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8cd4:	f001 fb88 	bl	a3e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    8cd8:	e006      	b.n	8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8cda:	f000 fd8d 	bl	97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    8cde:	e003      	b.n	8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8ce0:	2101      	movs	r1, #1
    8ce2:	2006      	movs	r0, #6
    8ce4:	f000 fd6a 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8ce8:	2001      	movs	r0, #1
    8cea:	bd08      	pop	{r3, pc}
    8cec:	2a21      	cmp	r2, #33	; 0x21
    8cee:	d004      	beq.n	8cfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    8cf0:	2a28      	cmp	r2, #40	; 0x28
    8cf2:	d113      	bne.n	8d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8cf4:	2101      	movs	r1, #1
    8cf6:	2011      	movs	r0, #17
    8cf8:	e7f4      	b.n	8ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8cfa:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8cfe:	2802      	cmp	r0, #2
    8d00:	d00e      	beq.n	8d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8d02:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8d06:	2801      	cmp	r0, #1
    8d08:	d108      	bne.n	8d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8d0a:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    8d0e:	f88d 0000 	strb.w	r0, [sp]
    8d12:	9800      	ldr	r0, [sp, #0]
    8d14:	9000      	str	r0, [sp, #0]
    8d16:	f89d 0000 	ldrb.w	r0, [sp]
    8d1a:	b108      	cbz	r0, 8d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8d1c:	2000      	movs	r0, #0
    8d1e:	bd08      	pop	{r3, pc}
    8d20:	2101      	movs	r1, #1
    8d22:	2017      	movs	r0, #23
    8d24:	e7de      	b.n	8ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8d26:	0000      	.short	0x0000
    8d28:	20000174 	.word	0x20000174
    8d2c:	b538      	push	{r3, r4, r5, lr}
    8d2e:	2800      	cmp	r0, #0
    8d30:	d16d      	bne.n	8e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8d32:	4c38      	ldr	r4, [pc, #224]	; (8e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    8d34:	6860      	ldr	r0, [r4, #4]
    8d36:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8d3a:	07ca      	lsls	r2, r1, #31
    8d3c:	d002      	beq.n	8d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    8d3e:	2101      	movs	r1, #1
    8d40:	2009      	movs	r0, #9
    8d42:	e05d      	b.n	8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8d44:	078a      	lsls	r2, r1, #30
    8d46:	d50a      	bpl.n	8d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8d48:	2101      	movs	r1, #1
    8d4a:	200c      	movs	r0, #12
    8d4c:	f000 fd36 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8d50:	6860      	ldr	r0, [r4, #4]
    8d52:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    8d56:	f041 0101 	orr.w	r1, r1, #1
    8d5a:	7001      	strb	r1, [r0, #0]
    8d5c:	e052      	b.n	8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8d5e:	074a      	lsls	r2, r1, #29
    8d60:	d502      	bpl.n	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8d62:	2101      	movs	r1, #1
    8d64:	2013      	movs	r0, #19
    8d66:	e04b      	b.n	8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8d68:	070a      	lsls	r2, r1, #28
    8d6a:	d506      	bpl.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8d6c:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    8d70:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8d74:	2101      	movs	r1, #1
    8d76:	2007      	movs	r0, #7
    8d78:	e042      	b.n	8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8d7a:	f011 0f30 	tst.w	r1, #48	; 0x30
    8d7e:	d046      	beq.n	8e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8d80:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8d84:	f88d 1000 	strb.w	r1, [sp]
    8d88:	9900      	ldr	r1, [sp, #0]
    8d8a:	9100      	str	r1, [sp, #0]
    8d8c:	f89d 1000 	ldrb.w	r1, [sp]
    8d90:	bbd1      	cbnz	r1, 8e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    8d92:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8d96:	2500      	movs	r5, #0
    8d98:	f88d 1000 	strb.w	r1, [sp]
    8d9c:	9900      	ldr	r1, [sp, #0]
    8d9e:	9100      	str	r1, [sp, #0]
    8da0:	f89d 1000 	ldrb.w	r1, [sp]
    8da4:	b1c1      	cbz	r1, 8dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8da6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8daa:	2924      	cmp	r1, #36	; 0x24
    8dac:	d02d      	beq.n	8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8dae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8db2:	2924      	cmp	r1, #36	; 0x24
    8db4:	d029      	beq.n	8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8db6:	2300      	movs	r3, #0
    8db8:	f200 2276 	addw	r2, r0, #630	; 0x276
    8dbc:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    8dc0:	f006 f8da 	bl	ef78 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8dc4:	6860      	ldr	r0, [r4, #4]
    8dc6:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    8dca:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8dce:	f041 0110 	orr.w	r1, r1, #16
    8dd2:	7001      	strb	r1, [r0, #0]
    8dd4:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    8dd8:	6860      	ldr	r0, [r4, #4]
    8dda:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8dde:	06c9      	lsls	r1, r1, #27
    8de0:	d515      	bpl.n	8e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8de2:	f006 f8e4 	bl	efae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8de6:	f000 f92b 	bl	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8dea:	6861      	ldr	r1, [r4, #4]
    8dec:	f101 0030 	add.w	r0, r1, #48	; 0x30
    8df0:	8bc2      	ldrh	r2, [r0, #30]
    8df2:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    8df6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8df8:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    8dfc:	2101      	movs	r1, #1
    8dfe:	2015      	movs	r0, #21
    8e00:	f000 fcdc 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8e04:	2001      	movs	r0, #1
    8e06:	bd38      	pop	{r3, r4, r5, pc}
    8e08:	e001      	b.n	8e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8e0a:	2301      	movs	r3, #1
    8e0c:	e7d4      	b.n	8db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8e0e:	2000      	movs	r0, #0
    8e10:	e7f9      	b.n	8e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    8e12:	0000      	.short	0x0000
    8e14:	20000174 	.word	0x20000174
    8e18:	b570      	push	{r4, r5, r6, lr}
    8e1a:	460d      	mov	r5, r1
    8e1c:	4606      	mov	r6, r0
    8e1e:	f005 fe71 	bl	eb04 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8e22:	4604      	mov	r4, r0
    8e24:	4630      	mov	r0, r6
    8e26:	f005 fe79 	bl	eb1c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8e2a:	4629      	mov	r1, r5
    8e2c:	f000 f81e 	bl	8e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    8e30:	b1b8      	cbz	r0, 8e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8e32:	4620      	mov	r0, r4
    8e34:	f005 fc7b 	bl	e72e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8e38:	0001      	movs	r1, r0
    8e3a:	d00d      	beq.n	8e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8e3c:	480a      	ldr	r0, [pc, #40]	; (8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    8e3e:	6840      	ldr	r0, [r0, #4]
    8e40:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    8e44:	428a      	cmp	r2, r1
    8e46:	d007      	beq.n	8e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8e48:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    8e4c:	2901      	cmp	r1, #1
    8e4e:	d005      	beq.n	8e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8e50:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8e54:	4220      	tst	r0, r4
    8e56:	d004      	beq.n	8e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8e58:	2001      	movs	r0, #1
    8e5a:	bd70      	pop	{r4, r5, r6, pc}
    8e5c:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    8e60:	e7f8      	b.n	8e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    8e62:	2000      	movs	r0, #0
    8e64:	bd70      	pop	{r4, r5, r6, pc}
    8e66:	0000      	.short	0x0000
    8e68:	20000174 	.word	0x20000174
    8e6c:	b570      	push	{r4, r5, r6, lr}
    8e6e:	460d      	mov	r5, r1
    8e70:	4604      	mov	r4, r0
    8e72:	f005 fc5c 	bl	e72e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8e76:	b350      	cbz	r0, 8ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8e78:	4916      	ldr	r1, [pc, #88]	; (8ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    8e7a:	6849      	ldr	r1, [r1, #4]
    8e7c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    8e80:	4282      	cmp	r2, r0
    8e82:	d024      	beq.n	8ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8e84:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    8e88:	2b01      	cmp	r3, #1
    8e8a:	d005      	beq.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8e8c:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    8e90:	4223      	tst	r3, r4
    8e92:	d013      	beq.n	8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8e94:	b11d      	cbz	r5, 8e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    8e96:	e01a      	b.n	8ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8e98:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    8e9c:	e7f8      	b.n	8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8e9e:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8ea2:	4221      	tst	r1, r4
    8ea4:	d113      	bne.n	8ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8ea6:	b15a      	cbz	r2, 8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    8ea8:	2a04      	cmp	r2, #4
    8eaa:	d00e      	beq.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8eac:	2804      	cmp	r0, #4
    8eae:	d00c      	beq.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8eb0:	2a08      	cmp	r2, #8
    8eb2:	d00a      	beq.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8eb4:	2808      	cmp	r0, #8
    8eb6:	d008      	beq.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8eb8:	4282      	cmp	r2, r0
    8eba:	d908      	bls.n	8ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8ebc:	2000      	movs	r0, #0
    8ebe:	bd70      	pop	{r4, r5, r6, pc}
    8ec0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    8ec4:	2006      	movs	r0, #6
    8ec6:	f7fb fe4f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8eca:	4282      	cmp	r2, r0
    8ecc:	d3f6      	bcc.n	8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8ece:	2001      	movs	r0, #1
    8ed0:	bd70      	pop	{r4, r5, r6, pc}
    8ed2:	0000      	.short	0x0000
    8ed4:	20000174 	.word	0x20000174
    8ed8:	b510      	push	{r4, lr}
    8eda:	4c10      	ldr	r4, [pc, #64]	; (8f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    8edc:	2301      	movs	r3, #1
    8ede:	2100      	movs	r1, #0
    8ee0:	6860      	ldr	r0, [r4, #4]
    8ee2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ee6:	3078      	adds	r0, #120	; 0x78
    8ee8:	f005 fb87 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8eec:	b140      	cbz	r0, 8f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    8eee:	6860      	ldr	r0, [r4, #4]
    8ef0:	2301      	movs	r3, #1
    8ef2:	2104      	movs	r1, #4
    8ef4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8ef8:	3078      	adds	r0, #120	; 0x78
    8efa:	f005 fb7e 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8efe:	b108      	cbz	r0, 8f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    8f00:	2000      	movs	r0, #0
    8f02:	bd10      	pop	{r4, pc}
    8f04:	6860      	ldr	r0, [r4, #4]
    8f06:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    8f0a:	2800      	cmp	r0, #0
    8f0c:	d0f9      	beq.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8f0e:	2100      	movs	r1, #0
    8f10:	2012      	movs	r0, #18
    8f12:	f000 fc53 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8f16:	2001      	movs	r0, #1
    8f18:	bd10      	pop	{r4, pc}
    8f1a:	0000      	.short	0x0000
    8f1c:	20000174 	.word	0x20000174
    8f20:	4903      	ldr	r1, [pc, #12]	; (8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    8f22:	2000      	movs	r0, #0
    8f24:	6849      	ldr	r1, [r1, #4]
    8f26:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    8f2a:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    8f2e:	4770      	bx	lr
    8f30:	20000174 	.word	0x20000174
    8f34:	490d      	ldr	r1, [pc, #52]	; (8f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    8f36:	4602      	mov	r2, r0
    8f38:	7848      	ldrb	r0, [r1, #1]
    8f3a:	b9a0      	cbnz	r0, 8f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8f3c:	f101 0010 	add.w	r0, r1, #16
    8f40:	6840      	ldr	r0, [r0, #4]
    8f42:	b142      	cbz	r2, 8f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    8f44:	7889      	ldrb	r1, [r1, #2]
    8f46:	0709      	lsls	r1, r1, #28
    8f48:	d503      	bpl.n	8f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    8f4a:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    8f4e:	2808      	cmp	r0, #8
    8f50:	d009      	beq.n	8f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8f52:	2001      	movs	r0, #1
    8f54:	4770      	bx	lr
    8f56:	f100 0130 	add.w	r1, r0, #48	; 0x30
    8f5a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8f5c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    8f5e:	428a      	cmp	r2, r1
    8f60:	d801      	bhi.n	8f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8f62:	f7ff b93d 	b.w	81e0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8f66:	2000      	movs	r0, #0
    8f68:	4770      	bx	lr
    8f6a:	0000      	.short	0x0000
    8f6c:	20000164 	.word	0x20000164
    8f70:	b538      	push	{r3, r4, r5, lr}
    8f72:	4c32      	ldr	r4, [pc, #200]	; (903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    8f74:	4605      	mov	r5, r0
    8f76:	6860      	ldr	r0, [r4, #4]
    8f78:	3078      	adds	r0, #120	; 0x78
    8f7a:	f006 ffe8 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8f7e:	2800      	cmp	r0, #0
    8f80:	d15b      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8f82:	2d00      	cmp	r5, #0
    8f84:	d159      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8f86:	6860      	ldr	r0, [r4, #4]
    8f88:	2301      	movs	r3, #1
    8f8a:	4619      	mov	r1, r3
    8f8c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8f90:	3078      	adds	r0, #120	; 0x78
    8f92:	f005 fb32 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f96:	2800      	cmp	r0, #0
    8f98:	d14f      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8f9a:	6860      	ldr	r0, [r4, #4]
    8f9c:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8fa0:	f88d 1000 	strb.w	r1, [sp]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	9100      	str	r1, [sp, #0]
    8fa8:	f89d 2000 	ldrb.w	r2, [sp]
    8fac:	2100      	movs	r1, #0
    8fae:	b142      	cbz	r2, 8fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    8fb0:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    8fb4:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8fb8:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8fbc:	2100      	movs	r1, #0
    8fbe:	2002      	movs	r0, #2
    8fc0:	e030      	b.n	9024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    8fc2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8fc6:	2301      	movs	r3, #1
    8fc8:	2104      	movs	r1, #4
    8fca:	3078      	adds	r0, #120	; 0x78
    8fcc:	f005 fb15 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fd0:	4605      	mov	r5, r0
    8fd2:	f7ff feab 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d12f      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8fda:	4628      	mov	r0, r5
    8fdc:	f7ff fe68 	bl	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8fe0:	2800      	cmp	r0, #0
    8fe2:	d12a      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8fe4:	f7ff ff78 	bl	8ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    8fe8:	2800      	cmp	r0, #0
    8fea:	d126      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8fec:	6860      	ldr	r0, [r4, #4]
    8fee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8ff2:	290a      	cmp	r1, #10
    8ff4:	d01a      	beq.n	902c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    8ff6:	2d00      	cmp	r5, #0
    8ff8:	d11f      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8ffa:	f000 fb2b 	bl	9654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    8ffe:	2800      	cmp	r0, #0
    9000:	d11b      	bne.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9002:	6860      	ldr	r0, [r4, #4]
    9004:	2301      	movs	r3, #1
    9006:	2100      	movs	r1, #0
    9008:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    900c:	3078      	adds	r0, #120	; 0x78
    900e:	f005 faf4 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9012:	2800      	cmp	r0, #0
    9014:	d011      	beq.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9016:	6860      	ldr	r0, [r4, #4]
    9018:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    901c:	2800      	cmp	r0, #0
    901e:	d00c      	beq.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9020:	2100      	movs	r1, #0
    9022:	20ff      	movs	r0, #255	; 0xff
    9024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9028:	f000 bbc8 	b.w	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    902c:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    9030:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9034:	2100      	movs	r1, #0
    9036:	2007      	movs	r0, #7
    9038:	e7f4      	b.n	9024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    903a:	bd38      	pop	{r3, r4, r5, pc}
    903c:	20000174 	.word	0x20000174
    9040:	480a      	ldr	r0, [pc, #40]	; (906c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    9042:	b510      	push	{r4, lr}
    9044:	6843      	ldr	r3, [r0, #4]
    9046:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    904a:	2801      	cmp	r0, #1
    904c:	d00a      	beq.n	9064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    904e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    9052:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9056:	8818      	ldrh	r0, [r3, #0]
    9058:	f005 ff66 	bl	ef28 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9060:	f7fd bf5a 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9064:	2002      	movs	r0, #2
    9066:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    906a:	bd10      	pop	{r4, pc}
    906c:	20000174 	.word	0x20000174
    9070:	b570      	push	{r4, r5, r6, lr}
    9072:	4c24      	ldr	r4, [pc, #144]	; (9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    9074:	0006      	movs	r6, r0
    9076:	f104 0510 	add.w	r5, r4, #16
    907a:	d12f      	bne.n	90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    907c:	f000 f8a2 	bl	91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    9080:	f000 f844 	bl	910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    9084:	0006      	movs	r6, r0
    9086:	d129      	bne.n	90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9088:	8860      	ldrh	r0, [r4, #2]
    908a:	0741      	lsls	r1, r0, #29
    908c:	d506      	bpl.n	909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    908e:	6869      	ldr	r1, [r5, #4]
    9090:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    9094:	2907      	cmp	r1, #7
    9096:	d101      	bne.n	909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9098:	2101      	movs	r1, #1
    909a:	7021      	strb	r1, [r4, #0]
    909c:	0780      	lsls	r0, r0, #30
    909e:	d512      	bpl.n	90c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    90a0:	68a0      	ldr	r0, [r4, #8]
    90a2:	78c0      	ldrb	r0, [r0, #3]
    90a4:	2826      	cmp	r0, #38	; 0x26
    90a6:	d205      	bcs.n	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    90a8:	4917      	ldr	r1, [pc, #92]	; (9108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    90aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    90ae:	b109      	cbz	r1, 90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    90b0:	4788      	blx	r1
    90b2:	e008      	b.n	90c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    90b4:	28ff      	cmp	r0, #255	; 0xff
    90b6:	d004      	beq.n	90c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    90b8:	f240 71c9 	movw	r1, #1993	; 0x7c9
    90bc:	2031      	movs	r0, #49	; 0x31
    90be:	f7fb fd53 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90c2:	f001 f9d3 	bl	a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    90c6:	78a0      	ldrb	r0, [r4, #2]
    90c8:	06c0      	lsls	r0, r0, #27
    90ca:	d507      	bpl.n	90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    90cc:	6868      	ldr	r0, [r5, #4]
    90ce:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    90d2:	290b      	cmp	r1, #11
    90d4:	d102      	bne.n	90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    90d6:	210c      	movs	r1, #12
    90d8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    90dc:	7860      	ldrb	r0, [r4, #1]
    90de:	0700      	lsls	r0, r0, #28
    90e0:	d50d      	bpl.n	90fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    90e2:	6868      	ldr	r0, [r5, #4]
    90e4:	2301      	movs	r3, #1
    90e6:	2105      	movs	r1, #5
    90e8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    90ec:	3078      	adds	r0, #120	; 0x78
    90ee:	f005 fa84 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90f2:	b108      	cbz	r0, 90f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    90f4:	2608      	movs	r6, #8
    90f6:	e002      	b.n	90fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    90f8:	2000      	movs	r0, #0
    90fa:	f7fc fd27 	bl	5b4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    90fe:	4630      	mov	r0, r6
    9100:	bd70      	pop	{r4, r5, r6, pc}
    9102:	0000      	.short	0x0000
    9104:	20000164 	.word	0x20000164
    9108:	20000214 	.word	0x20000214
    910c:	b570      	push	{r4, r5, r6, lr}
    910e:	4d2b      	ldr	r5, [pc, #172]	; (91bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    9110:	2000      	movs	r0, #0
    9112:	78a9      	ldrb	r1, [r5, #2]
    9114:	07c9      	lsls	r1, r1, #31
    9116:	d017      	beq.n	9148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    9118:	68e8      	ldr	r0, [r5, #12]
    911a:	f105 0410 	add.w	r4, r5, #16
    911e:	2301      	movs	r3, #1
    9120:	78c6      	ldrb	r6, [r0, #3]
    9122:	6860      	ldr	r0, [r4, #4]
    9124:	2105      	movs	r1, #5
    9126:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    912a:	3078      	adds	r0, #120	; 0x78
    912c:	f005 fa65 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9130:	b158      	cbz	r0, 914a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    9132:	1eb6      	subs	r6, r6, #2
    9134:	2e0a      	cmp	r6, #10
    9136:	d206      	bcs.n	9146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    9138:	e8df f006 	tbb	[pc, r6]
    913c:	05050707 	.word	0x05050707
    9140:	05050707 	.word	0x05050707
    9144:	0707      	.short	0x0707
    9146:	2008      	movs	r0, #8
    9148:	bd70      	pop	{r4, r5, r6, pc}
    914a:	68e8      	ldr	r0, [r5, #12]
    914c:	f7fd fd48 	bl	6be0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9150:	b138      	cbz	r0, 9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    9152:	68e8      	ldr	r0, [r5, #12]
    9154:	78c5      	ldrb	r5, [r0, #3]
    9156:	b145      	cbz	r5, 916a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9158:	2d01      	cmp	r5, #1
    915a:	d006      	beq.n	916a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    915c:	2d16      	cmp	r5, #22
    915e:	d118      	bne.n	9192 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9160:	e003      	b.n	916a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9166:	f000 bdd1 	b.w	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    916a:	6860      	ldr	r0, [r4, #4]
    916c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9170:	f005 fa91 	bl	e696 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9174:	b168      	cbz	r0, 9192 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9176:	6861      	ldr	r1, [r4, #4]
    9178:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    917c:	281f      	cmp	r0, #31
    917e:	d008      	beq.n	9192 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9180:	2820      	cmp	r0, #32
    9182:	d003      	beq.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9184:	2d16      	cmp	r5, #22
    9186:	d00c      	beq.n	91a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    9188:	2002      	movs	r0, #2
    918a:	bd70      	pop	{r4, r5, r6, pc}
    918c:	2027      	movs	r0, #39	; 0x27
    918e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9192:	2d26      	cmp	r5, #38	; 0x26
    9194:	d207      	bcs.n	91a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9196:	480a      	ldr	r0, [pc, #40]	; (91c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9198:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    919c:	b118      	cbz	r0, 91a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    919e:	4780      	blx	r0
    91a0:	e003      	b.n	91aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    91a2:	2020      	movs	r0, #32
    91a4:	bd70      	pop	{r4, r5, r6, pc}
    91a6:	f000 fdb1 	bl	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    91aa:	6861      	ldr	r1, [r4, #4]
    91ac:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    91b0:	1c52      	adds	r2, r2, #1
    91b2:	f143 0300 	adc.w	r3, r3, #0
    91b6:	e9c1 2300 	strd	r2, r3, [r1]
    91ba:	bd70      	pop	{r4, r5, r6, pc}
    91bc:	20000164 	.word	0x20000164
    91c0:	2000017c 	.word	0x2000017c
    91c4:	b570      	push	{r4, r5, r6, lr}
    91c6:	4e23      	ldr	r6, [pc, #140]	; (9254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    91c8:	78b0      	ldrb	r0, [r6, #2]
    91ca:	0700      	lsls	r0, r0, #28
    91cc:	d540      	bpl.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    91ce:	f106 0410 	add.w	r4, r6, #16
    91d2:	6860      	ldr	r0, [r4, #4]
    91d4:	3078      	adds	r0, #120	; 0x78
    91d6:	f006 feba 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    91da:	b148      	cbz	r0, 91f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    91dc:	6860      	ldr	r0, [r4, #4]
    91de:	21fe      	movs	r1, #254	; 0xfe
    91e0:	2500      	movs	r5, #0
    91e2:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    91e6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    91ea:	2919      	cmp	r1, #25
    91ec:	d10c      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    91ee:	e004      	b.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    91f0:	f240 71d3 	movw	r1, #2003	; 0x7d3
    91f4:	2031      	movs	r0, #49	; 0x31
    91f6:	f7fb fcb7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91fa:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    91fe:	f7ff fd45 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9202:	6860      	ldr	r0, [r4, #4]
    9204:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9208:	6860      	ldr	r0, [r4, #4]
    920a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    920e:	291f      	cmp	r1, #31
    9210:	d002      	beq.n	9218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9212:	2929      	cmp	r1, #41	; 0x29
    9214:	d113      	bne.n	923e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9216:	e00b      	b.n	9230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9218:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    921c:	f005 fa3b 	bl	e696 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9220:	b108      	cbz	r0, 9226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9222:	2027      	movs	r0, #39	; 0x27
    9224:	e000      	b.n	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9226:	2020      	movs	r0, #32
    9228:	6861      	ldr	r1, [r4, #4]
    922a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    922e:	e006      	b.n	923e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9230:	2101      	movs	r1, #1
    9232:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    9236:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    923a:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    923e:	6860      	ldr	r0, [r4, #4]
    9240:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9244:	2908      	cmp	r1, #8
    9246:	d103      	bne.n	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9248:	2102      	movs	r1, #2
    924a:	7031      	strb	r1, [r6, #0]
    924c:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9250:	bd70      	pop	{r4, r5, r6, pc}
    9252:	0000      	.short	0x0000
    9254:	20000164 	.word	0x20000164
    9258:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    925a:	4606      	mov	r6, r0
    925c:	4668      	mov	r0, sp
    925e:	f7fc faff 	bl	5860 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9262:	b310      	cbz	r0, 92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9264:	2222      	movs	r2, #34	; 0x22
    9266:	2100      	movs	r1, #0
    9268:	9800      	ldr	r0, [sp, #0]
    926a:	f003 ff47 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    926e:	2103      	movs	r1, #3
    9270:	9800      	ldr	r0, [sp, #0]
    9272:	f005 fcb7 	bl	ebe4 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9276:	9800      	ldr	r0, [sp, #0]
    9278:	7801      	ldrb	r1, [r0, #0]
    927a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    927e:	7001      	strb	r1, [r0, #0]
    9280:	4631      	mov	r1, r6
    9282:	f7fd fcbd 	bl	6c00 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9286:	4c62      	ldr	r4, [pc, #392]	; (9410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9288:	f644 152f 	movw	r5, #18735	; 0x492f
    928c:	2e0e      	cmp	r6, #14
    928e:	d079      	beq.n	9384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9290:	dc0e      	bgt.n	92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9292:	f1a6 0602 	sub.w	r6, r6, #2
    9296:	2e0c      	cmp	r6, #12
    9298:	d21c      	bcs.n	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    929a:	e8df f006 	tbb	[pc, r6]
    929e:	1b1e      	.short	0x1b1e
    92a0:	23aeae52 	.word	0x23aeae52
    92a4:	ae1b5f1b 	.word	0xae1b5f1b
    92a8:	363c      	.short	0x363c
    92aa:	f640 210a 	movw	r1, #2570	; 0xa0a
    92ae:	e0aa      	b.n	9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    92b0:	2e15      	cmp	r6, #21
    92b2:	d068      	beq.n	9386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    92b4:	dc08      	bgt.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    92b6:	2e11      	cmp	r6, #17
    92b8:	d01a      	beq.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    92ba:	2e12      	cmp	r6, #18
    92bc:	d017      	beq.n	92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    92be:	2e13      	cmp	r6, #19
    92c0:	d015      	beq.n	92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    92c2:	2e14      	cmp	r6, #20
    92c4:	d106      	bne.n	92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    92c6:	e05e      	b.n	9386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    92c8:	2e16      	cmp	r6, #22
    92ca:	d030      	beq.n	932e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    92cc:	2e17      	cmp	r6, #23
    92ce:	d075      	beq.n	93bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    92d0:	2eff      	cmp	r6, #255	; 0xff
    92d2:	d072      	beq.n	93ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    92d4:	f640 217b 	movw	r1, #2683	; 0xa7b
    92d8:	e095      	b.n	9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    92da:	6861      	ldr	r1, [r4, #4]
    92dc:	9800      	ldr	r0, [sp, #0]
    92de:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    92e2:	e016      	b.n	9312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    92e4:	6860      	ldr	r0, [r4, #4]
    92e6:	9900      	ldr	r1, [sp, #0]
    92e8:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    92ec:	7108      	strb	r0, [r1, #4]
    92ee:	e084      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    92f0:	6860      	ldr	r0, [r4, #4]
    92f2:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    92f6:	9800      	ldr	r0, [sp, #0]
    92f8:	f005 fc50 	bl	eb9c <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    92fc:	6860      	ldr	r0, [r4, #4]
    92fe:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    9302:	9800      	ldr	r0, [sp, #0]
    9304:	f005 fc4c 	bl	eba0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9308:	e077      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    930a:	6861      	ldr	r1, [r4, #4]
    930c:	9800      	ldr	r0, [sp, #0]
    930e:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    9312:	7101      	strb	r1, [r0, #4]
    9314:	e071      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	210c      	movs	r1, #12
    931a:	7101      	strb	r1, [r0, #4]
    931c:	2159      	movs	r1, #89	; 0x59
    931e:	7141      	strb	r1, [r0, #5]
    9320:	2100      	movs	r1, #0
    9322:	7181      	strb	r1, [r0, #6]
    9324:	21d8      	movs	r1, #216	; 0xd8
    9326:	71c1      	strb	r1, [r0, #7]
    9328:	2111      	movs	r1, #17
    932a:	7201      	strb	r1, [r0, #8]
    932c:	e065      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    932e:	9800      	ldr	r0, [sp, #0]
    9330:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9334:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    9338:	7102      	strb	r2, [r0, #4]
    933a:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    933e:	7141      	strb	r1, [r0, #5]
    9340:	e05b      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9342:	6861      	ldr	r1, [r4, #4]
    9344:	9800      	ldr	r0, [sp, #0]
    9346:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    934a:	f005 fc3c 	bl	ebc6 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    934e:	6861      	ldr	r1, [r4, #4]
    9350:	9800      	ldr	r0, [sp, #0]
    9352:	f501 7182 	add.w	r1, r1, #260	; 0x104
    9356:	f005 fc33 	bl	ebc0 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    935a:	e04e      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    935c:	f001 ff54 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9360:	4028      	ands	r0, r5
    9362:	f001 0106 	and.w	r1, r1, #6
    9366:	e9cd 0101 	strd	r0, r1, [sp, #4]
    936a:	6861      	ldr	r1, [r4, #4]
    936c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9370:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9374:	4008      	ands	r0, r1
    9376:	f88d 0004 	strb.w	r0, [sp, #4]
    937a:	a901      	add	r1, sp, #4
    937c:	9800      	ldr	r0, [sp, #0]
    937e:	f005 fc2c 	bl	ebda <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9382:	e03a      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9384:	e025      	b.n	93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9386:	6860      	ldr	r0, [r4, #4]
    9388:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    938c:	9800      	ldr	r0, [sp, #0]
    938e:	f005 fc31 	bl	ebf4 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9392:	6860      	ldr	r0, [r4, #4]
    9394:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9398:	9800      	ldr	r0, [sp, #0]
    939a:	f005 fc2f 	bl	ebfc <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    939e:	6860      	ldr	r0, [r4, #4]
    93a0:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	f005 fc2d 	bl	ec04 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    93aa:	6860      	ldr	r0, [r4, #4]
    93ac:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    93b0:	9800      	ldr	r0, [sp, #0]
    93b2:	f005 fc2b 	bl	ec0c <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    93b6:	e020      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93b8:	e000      	b.n	93bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    93ba:	e016      	b.n	93ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    93bc:	6861      	ldr	r1, [r4, #4]
    93be:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    93c2:	2801      	cmp	r0, #1
    93c4:	9800      	ldr	r0, [sp, #0]
    93c6:	d0b5      	beq.n	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    93c8:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    93cc:	7102      	strb	r2, [r0, #4]
    93ce:	7849      	ldrb	r1, [r1, #1]
    93d0:	e7b5      	b.n	933e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    93d2:	f001 ff19 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    93d6:	4028      	ands	r0, r5
    93d8:	f001 0106 	and.w	r1, r1, #6
    93dc:	e9cd 0101 	strd	r0, r1, [sp, #4]
    93e0:	a901      	add	r1, sp, #4
    93e2:	9800      	ldr	r0, [sp, #0]
    93e4:	f005 fbf4 	bl	ebd0 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    93e8:	e007      	b.n	93fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93ea:	6860      	ldr	r0, [r4, #4]
    93ec:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    93f0:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    93f4:	9800      	ldr	r0, [sp, #0]
    93f6:	f005 fbd5 	bl	eba4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    93fa:	f7fc fa0b 	bl	5814 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    93fe:	2800      	cmp	r0, #0
    9400:	d104      	bne.n	940c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9402:	f640 217f 	movw	r1, #2687	; 0xa7f
    9406:	2031      	movs	r0, #49	; 0x31
    9408:	f7fb fbae 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    940c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    940e:	0000      	.short	0x0000
    9410:	20000174 	.word	0x20000174
    9414:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9418:	4e8d      	ldr	r6, [pc, #564]	; (9650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    941a:	468a      	mov	sl, r1
    941c:	6870      	ldr	r0, [r6, #4]
    941e:	8800      	ldrh	r0, [r0, #0]
    9420:	f7fb ffe0 	bl	53e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9424:	0007      	movs	r7, r0
    9426:	d00c      	beq.n	9442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9428:	f1a6 0510 	sub.w	r5, r6, #16
    942c:	f04f 0400 	mov.w	r4, #0
    9430:	8868      	ldrh	r0, [r5, #2]
    9432:	05c0      	lsls	r0, r0, #23
    9434:	d50a      	bpl.n	944c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    9436:	6870      	ldr	r0, [r6, #4]
    9438:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    943c:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9440:	e009      	b.n	9456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9442:	f640 515c 	movw	r1, #3420	; 0xd5c
    9446:	2031      	movs	r0, #49	; 0x31
    9448:	f7fb fb8e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    944c:	6871      	ldr	r1, [r6, #4]
    944e:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9452:	1c40      	adds	r0, r0, #1
    9454:	8008      	strh	r0, [r1, #0]
    9456:	f001 f9df 	bl	a818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    945a:	f04f 0901 	mov.w	r9, #1
    945e:	b348      	cbz	r0, 94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9460:	8868      	ldrh	r0, [r5, #2]
    9462:	0500      	lsls	r0, r0, #20
    9464:	d506      	bpl.n	9474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9466:	6870      	ldr	r0, [r6, #4]
    9468:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    946c:	b111      	cbz	r1, 9474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    946e:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9472:	e01f      	b.n	94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9474:	6871      	ldr	r1, [r6, #4]
    9476:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    947a:	1c40      	adds	r0, r0, #1
    947c:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9480:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9484:	4282      	cmp	r2, r0
    9486:	d301      	bcc.n	948c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9488:	1a13      	subs	r3, r2, r0
    948a:	e000      	b.n	948e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    948c:	2300      	movs	r3, #0
    948e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9492:	f10c 0c05 	add.w	ip, ip, #5
    9496:	4563      	cmp	r3, ip
    9498:	d801      	bhi.n	949e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    949a:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    949e:	4290      	cmp	r0, r2
    94a0:	d308      	bcc.n	94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    94a2:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    94a6:	220c      	movs	r2, #12
    94a8:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    94ac:	f7fd fc62 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    94b0:	f7fd fd32 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    94b4:	8868      	ldrh	r0, [r5, #2]
    94b6:	f04f 0b02 	mov.w	fp, #2
    94ba:	f410 7f40 	tst.w	r0, #768	; 0x300
    94be:	d00e      	beq.n	94de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    94c0:	6870      	ldr	r0, [r6, #4]
    94c2:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    94c6:	b111      	cbz	r1, 94ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    94c8:	2903      	cmp	r1, #3
    94ca:	d108      	bne.n	94de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    94cc:	e002      	b.n	94d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    94ce:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    94d2:	e001      	b.n	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    94d4:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    94d8:	2101      	movs	r1, #1
    94da:	f7fe fea7 	bl	822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    94de:	6870      	ldr	r0, [r6, #4]
    94e0:	46b0      	mov	r8, r6
    94e2:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    94e6:	2901      	cmp	r1, #1
    94e8:	d104      	bne.n	94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    94ea:	8869      	ldrh	r1, [r5, #2]
    94ec:	0549      	lsls	r1, r1, #21
    94ee:	d501      	bpl.n	94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    94f0:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    94f4:	9900      	ldr	r1, [sp, #0]
    94f6:	2900      	cmp	r1, #0
    94f8:	d179      	bne.n	95ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    94fa:	78a9      	ldrb	r1, [r5, #2]
    94fc:	0649      	lsls	r1, r1, #25
    94fe:	d502      	bpl.n	9506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    9500:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    9504:	e004      	b.n	9510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    9506:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    950a:	1c49      	adds	r1, r1, #1
    950c:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    9510:	4650      	mov	r0, sl
    9512:	f7ff fdad 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    9516:	ea40 000a 	orr.w	r0, r0, sl
    951a:	4682      	mov	sl, r0
    951c:	f7ff fd28 	bl	8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    9520:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9524:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    9528:	1c40      	adds	r0, r0, #1
    952a:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    952e:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9532:	b128      	cbz	r0, 9540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9534:	f7fc fb76 	bl	5c24 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9538:	b1b0      	cbz	r0, 9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    953a:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    953e:	e013      	b.n	9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9540:	f7fc fa10 	bl	5964 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9544:	b108      	cbz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    9546:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    954a:	f7fc fa05 	bl	5958 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    954e:	b158      	cbz	r0, 9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9550:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9554:	1c40      	adds	r0, r0, #1
    9556:	b2c0      	uxtb	r0, r0
    9558:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    955c:	2802      	cmp	r0, #2
    955e:	d903      	bls.n	9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9560:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9564:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9568:	f8d8 0004 	ldr.w	r0, [r8, #4]
    956c:	4646      	mov	r6, r8
    956e:	2301      	movs	r3, #1
    9570:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9574:	2100      	movs	r1, #0
    9576:	3078      	adds	r0, #120	; 0x78
    9578:	f005 f83f 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    957c:	b920      	cbnz	r0, 9588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    957e:	6870      	ldr	r0, [r6, #4]
    9580:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9584:	280c      	cmp	r0, #12
    9586:	d160      	bne.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9588:	6870      	ldr	r0, [r6, #4]
    958a:	2301      	movs	r3, #1
    958c:	2100      	movs	r1, #0
    958e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9592:	3078      	adds	r0, #120	; 0x78
    9594:	f005 f831 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9598:	b350      	cbz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    959a:	6870      	ldr	r0, [r6, #4]
    959c:	2301      	movs	r3, #1
    959e:	2100      	movs	r1, #0
    95a0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    95a4:	3078      	adds	r0, #120	; 0x78
    95a6:	f005 f828 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95aa:	b308      	cbz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    95ac:	6870      	ldr	r0, [r6, #4]
    95ae:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    95b2:	2902      	cmp	r1, #2
    95b4:	d149      	bne.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    95b6:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    95ba:	b9c8      	cbnz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    95bc:	4638      	mov	r0, r7
    95be:	f004 faa6 	bl	db0e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    95c2:	b1a8      	cbz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    95c4:	6870      	ldr	r0, [r6, #4]
    95c6:	3078      	adds	r0, #120	; 0x78
    95c8:	f006 fcc1 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    95cc:	b980      	cbnz	r0, 95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    95ce:	6871      	ldr	r1, [r6, #4]
    95d0:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    95d4:	2801      	cmp	r0, #1
    95d6:	d938      	bls.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    95d8:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    95dc:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    95e0:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    95e4:	1e83      	subs	r3, r0, #2
    95e6:	429a      	cmp	r2, r3
    95e8:	db03      	blt.n	95f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    95ea:	2001      	movs	r0, #1
    95ec:	e004      	b.n	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    95ee:	e01d      	b.n	962c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    95f0:	e02b      	b.n	964a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    95f2:	1a80      	subs	r0, r0, r2
    95f4:	1e40      	subs	r0, r0, #1
    95f6:	b280      	uxth	r0, r0
    95f8:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    95fc:	88ab      	ldrh	r3, [r5, #4]
    95fe:	429a      	cmp	r2, r3
    9600:	d301      	bcc.n	9606 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    9602:	2201      	movs	r2, #1
    9604:	e002      	b.n	960c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9606:	1a9a      	subs	r2, r3, r2
    9608:	1c52      	adds	r2, r2, #1
    960a:	b292      	uxth	r2, r2
    960c:	4290      	cmp	r0, r2
    960e:	d900      	bls.n	9612 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    9610:	4610      	mov	r0, r2
    9612:	2801      	cmp	r0, #1
    9614:	d102      	bne.n	961c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    9616:	bf00      	nop
    9618:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    961c:	6871      	ldr	r1, [r6, #4]
    961e:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9622:	4410      	add	r0, r2
    9624:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    9628:	f001 f9ca 	bl	a9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    962c:	78a8      	ldrb	r0, [r5, #2]
    962e:	4652      	mov	r2, sl
    9630:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9634:	9800      	ldr	r0, [sp, #0]
    9636:	f001 f903 	bl	a840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    963a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    963e:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    9642:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9646:	f7fc b8cf 	b.w	57e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    964a:	2001      	movs	r0, #1
    964c:	6871      	ldr	r1, [r6, #4]
    964e:	e7e3      	b.n	9618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9650:	20000174 	.word	0x20000174
    9654:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9656:	4c58      	ldr	r4, [pc, #352]	; (97b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    9658:	2301      	movs	r3, #1
    965a:	2100      	movs	r1, #0
    965c:	6860      	ldr	r0, [r4, #4]
    965e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9662:	3078      	adds	r0, #120	; 0x78
    9664:	f004 ffc9 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9668:	2800      	cmp	r0, #0
    966a:	d07c      	beq.n	9766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    966c:	6860      	ldr	r0, [r4, #4]
    966e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9672:	2500      	movs	r5, #0
    9674:	b139      	cbz	r1, 9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    9676:	2100      	movs	r1, #0
    9678:	200e      	movs	r0, #14
    967a:	f000 f89f 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    967e:	6860      	ldr	r0, [r4, #4]
    9680:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9684:	e096      	b.n	97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9686:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    968a:	b119      	cbz	r1, 9694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    968c:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9690:	0789      	lsls	r1, r1, #30
    9692:	d016      	beq.n	96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9694:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9698:	f88d 1004 	strb.w	r1, [sp, #4]
    969c:	9901      	ldr	r1, [sp, #4]
    969e:	9101      	str	r1, [sp, #4]
    96a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    96a4:	b141      	cbz	r1, 96b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    96a6:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    96aa:	f88d 1000 	strb.w	r1, [sp]
    96ae:	9900      	ldr	r1, [sp, #0]
    96b0:	9100      	str	r1, [sp, #0]
    96b2:	f89d 1000 	ldrb.w	r1, [sp]
    96b6:	b189      	cbz	r1, 96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    96b8:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    96bc:	2901      	cmp	r1, #1
    96be:	d030      	beq.n	9722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    96c0:	e072      	b.n	97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    96c2:	2100      	movs	r1, #0
    96c4:	200c      	movs	r0, #12
    96c6:	f000 f879 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    96ca:	6860      	ldr	r0, [r4, #4]
    96cc:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    96d0:	f041 0101 	orr.w	r1, r1, #1
    96d4:	7001      	strb	r1, [r0, #0]
    96d6:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    96da:	e06b      	b.n	97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    96dc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    96e0:	2924      	cmp	r1, #36	; 0x24
    96e2:	d01c      	beq.n	971e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    96e4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    96e8:	2924      	cmp	r1, #36	; 0x24
    96ea:	d018      	beq.n	971e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    96ec:	f05f 0300 	movs.w	r3, #0
    96f0:	f200 2276 	addw	r2, r0, #630	; 0x276
    96f4:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    96f8:	f005 fc3e 	bl	ef78 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    96fc:	6860      	ldr	r0, [r4, #4]
    96fe:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    9702:	2100      	movs	r1, #0
    9704:	2014      	movs	r0, #20
    9706:	f000 f859 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    970a:	6861      	ldr	r1, [r4, #4]
    970c:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9710:	8bc2      	ldrh	r2, [r0, #30]
    9712:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9716:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9718:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    971c:	e04a      	b.n	97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    971e:	2301      	movs	r3, #1
    9720:	e7e6      	b.n	96f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    9722:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    9726:	f88d 1000 	strb.w	r1, [sp]
    972a:	9900      	ldr	r1, [sp, #0]
    972c:	9100      	str	r1, [sp, #0]
    972e:	f89d 1000 	ldrb.w	r1, [sp]
    9732:	bb31      	cbnz	r1, 9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9734:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9738:	2301      	movs	r3, #1
    973a:	210b      	movs	r1, #11
    973c:	3078      	adds	r0, #120	; 0x78
    973e:	f004 ff5c 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9742:	b9f0      	cbnz	r0, 9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9744:	6860      	ldr	r0, [r4, #4]
    9746:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    974a:	f006 fc08 	bl	ff5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    974e:	4605      	mov	r5, r0
    9750:	6860      	ldr	r0, [r4, #4]
    9752:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9756:	f006 fc02 	bl	ff5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    975a:	4606      	mov	r6, r0
    975c:	6860      	ldr	r0, [r4, #4]
    975e:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9762:	4628      	mov	r0, r5
    9764:	e000      	b.n	9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    9766:	e020      	b.n	97aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9768:	f006 fc04 	bl	ff74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    976c:	b150      	cbz	r0, 9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    976e:	6860      	ldr	r0, [r4, #4]
    9770:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9774:	4630      	mov	r0, r6
    9776:	f006 fbfd 	bl	ff74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    977a:	b118      	cbz	r0, 9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    977c:	2000      	movs	r0, #0
    977e:	f000 f929 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9782:	e011      	b.n	97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9784:	6860      	ldr	r0, [r4, #4]
    9786:	2301      	movs	r3, #1
    9788:	2103      	movs	r1, #3
    978a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    978e:	3078      	adds	r0, #120	; 0x78
    9790:	f004 ff33 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9794:	b940      	cbnz	r0, 97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9796:	6860      	ldr	r0, [r4, #4]
    9798:	2301      	movs	r3, #1
    979a:	2102      	movs	r1, #2
    979c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    97a0:	3078      	adds	r0, #120	; 0x78
    97a2:	f004 ff2a 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97a6:	b108      	cbz	r0, 97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    97a8:	2000      	movs	r0, #0
    97aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    97ac:	2100      	movs	r1, #0
    97ae:	2016      	movs	r0, #22
    97b0:	f000 f804 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    97b4:	2001      	movs	r0, #1
    97b6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    97b8:	20000174 	.word	0x20000174
    97bc:	b570      	push	{r4, r5, r6, lr}
    97be:	4c0d      	ldr	r4, [pc, #52]	; (97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    97c0:	4606      	mov	r6, r0
    97c2:	460d      	mov	r5, r1
    97c4:	6860      	ldr	r0, [r4, #4]
    97c6:	3078      	adds	r0, #120	; 0x78
    97c8:	f006 fbc1 	bl	ff4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    97cc:	b120      	cbz	r0, 97d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    97ce:	f640 2184 	movw	r1, #2692	; 0xa84
    97d2:	2031      	movs	r0, #49	; 0x31
    97d4:	f7fb f9c8 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97d8:	6862      	ldr	r2, [r4, #4]
    97da:	2000      	movs	r0, #0
    97dc:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    97e0:	b115      	cbz	r5, 97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    97e2:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    97e6:	bd70      	pop	{r4, r5, r6, pc}
    97e8:	f822 0fba 	strh.w	r0, [r2, #186]!
    97ec:	2001      	movs	r0, #1
    97ee:	7110      	strb	r0, [r2, #4]
    97f0:	bd70      	pop	{r4, r5, r6, pc}
    97f2:	0000      	.short	0x0000
    97f4:	20000174 	.word	0x20000174
    97f8:	b538      	push	{r3, r4, r5, lr}
    97fa:	4c1f      	ldr	r4, [pc, #124]	; (9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    97fc:	2500      	movs	r5, #0
    97fe:	6860      	ldr	r0, [r4, #4]
    9800:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    9804:	2901      	cmp	r1, #1
    9806:	d00a      	beq.n	981e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9808:	2902      	cmp	r1, #2
    980a:	d133      	bne.n	9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    980c:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    9810:	b1d9      	cbz	r1, 984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9812:	2106      	movs	r1, #6
    9814:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9818:	2101      	movs	r1, #1
    981a:	2002      	movs	r0, #2
    981c:	e025      	b.n	986a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    981e:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9822:	f88d 1000 	strb.w	r1, [sp]
    9826:	9900      	ldr	r1, [sp, #0]
    9828:	9100      	str	r1, [sp, #0]
    982a:	f89d 1000 	ldrb.w	r1, [sp]
    982e:	2900      	cmp	r1, #0
    9830:	d120      	bne.n	9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    9832:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    9836:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    983a:	2200      	movs	r2, #0
    983c:	f200 2059 	addw	r0, r0, #601	; 0x259
    9840:	f004 fe93 	bl	e56a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9844:	2101      	movs	r1, #1
    9846:	2005      	movs	r0, #5
    9848:	e00f      	b.n	986a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    984a:	2203      	movs	r2, #3
    984c:	2106      	movs	r1, #6
    984e:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    9852:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    9856:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    985a:	0880      	lsrs	r0, r0, #2
    985c:	f010 0f01 	tst.w	r0, #1
    9860:	d001      	beq.n	9866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    9862:	2011      	movs	r0, #17
    9864:	e000      	b.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9866:	200d      	movs	r0, #13
    9868:	2101      	movs	r1, #1
    986a:	f7ff ffa7 	bl	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    986e:	6860      	ldr	r0, [r4, #4]
    9870:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    9874:	bd38      	pop	{r3, r4, r5, pc}
    9876:	0000      	.short	0x0000
    9878:	20000174 	.word	0x20000174
    987c:	b570      	push	{r4, r5, r6, lr}
    987e:	4b2b      	ldr	r3, [pc, #172]	; (992c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    9880:	4602      	mov	r2, r0
    9882:	8858      	ldrh	r0, [r3, #2]
    9884:	4310      	orrs	r0, r2
    9886:	8058      	strh	r0, [r3, #2]
    9888:	f103 0010 	add.w	r0, r3, #16
    988c:	2a40      	cmp	r2, #64	; 0x40
    988e:	6840      	ldr	r0, [r0, #4]
    9890:	d00d      	beq.n	98ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    9892:	0796      	lsls	r6, r2, #30
    9894:	f04f 0500 	mov.w	r5, #0
    9898:	f04f 0401 	mov.w	r4, #1
    989c:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    98a0:	d50c      	bpl.n	98bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    98a2:	b14e      	cbz	r6, 98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    98a4:	f640 41c9 	movw	r1, #3273	; 0xcc9
    98a8:	2031      	movs	r0, #49	; 0x31
    98aa:	f7fb f95d 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98b2:	2104      	movs	r1, #4
    98b4:	f7fe bcba 	b.w	822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    98b8:	6099      	str	r1, [r3, #8]
    98ba:	e01c      	b.n	98f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    98bc:	b1c6      	cbz	r6, 98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    98be:	60d9      	str	r1, [r3, #12]
    98c0:	78c9      	ldrb	r1, [r1, #3]
    98c2:	2906      	cmp	r1, #6
    98c4:	d002      	beq.n	98cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    98c6:	290b      	cmp	r1, #11
    98c8:	d112      	bne.n	98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    98ca:	e009      	b.n	98e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    98cc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    98d0:	2917      	cmp	r1, #23
    98d2:	d10d      	bne.n	98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    98d4:	2100      	movs	r1, #0
    98d6:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    98da:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    98de:	e007      	b.n	98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    98e0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    98e4:	2911      	cmp	r1, #17
    98e6:	d103      	bne.n	98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    98e8:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    98ec:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    98f0:	0791      	lsls	r1, r2, #30
    98f2:	d516      	bpl.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    98f4:	6899      	ldr	r1, [r3, #8]
    98f6:	78c9      	ldrb	r1, [r1, #3]
    98f8:	2905      	cmp	r1, #5
    98fa:	d002      	beq.n	9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    98fc:	290b      	cmp	r1, #11
    98fe:	d110      	bne.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    9900:	e009      	b.n	9916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    9902:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9906:	2915      	cmp	r1, #21
    9908:	d10b      	bne.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    990a:	2100      	movs	r1, #0
    990c:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    9910:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    9914:	e005      	b.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    9916:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    991a:	2910      	cmp	r1, #16
    991c:	d101      	bne.n	9922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    991e:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    9922:	0690      	lsls	r0, r2, #26
    9924:	d501      	bpl.n	992a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    9926:	2008      	movs	r0, #8
    9928:	7058      	strb	r0, [r3, #1]
    992a:	bd70      	pop	{r4, r5, r6, pc}
    992c:	20000164 	.word	0x20000164
    9930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9934:	4c26      	ldr	r4, [pc, #152]	; (99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    9936:	2501      	movs	r5, #1
    9938:	6862      	ldr	r2, [r4, #4]
    993a:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    993e:	b108      	cbz	r0, 9944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    9940:	2701      	movs	r7, #1
    9942:	e000      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    9944:	2700      	movs	r7, #0
    9946:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    994a:	b109      	cbz	r1, 9950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    994c:	2601      	movs	r6, #1
    994e:	e000      	b.n	9952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    9950:	2600      	movs	r6, #0
    9952:	b90f      	cbnz	r7, 9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    9954:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    9958:	b90e      	cbnz	r6, 995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    995a:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    995e:	f102 0366 	add.w	r3, r2, #102	; 0x66
    9962:	7218      	strb	r0, [r3, #8]
    9964:	7259      	strb	r1, [r3, #9]
    9966:	20ff      	movs	r0, #255	; 0xff
    9968:	7298      	strb	r0, [r3, #10]
    996a:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    996e:	2801      	cmp	r0, #1
    9970:	d001      	beq.n	9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9972:	b907      	cbnz	r7, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9974:	b116      	cbz	r6, 997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    9976:	2000      	movs	r0, #0
    9978:	f000 f82c 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    997c:	6860      	ldr	r0, [r4, #4]
    997e:	3030      	adds	r0, #48	; 0x30
    9980:	f005 fb6b 	bl	f05a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9984:	4607      	mov	r7, r0
    9986:	2105      	movs	r1, #5
    9988:	6860      	ldr	r0, [r4, #4]
    998a:	f7fe fc4f 	bl	822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    998e:	6860      	ldr	r0, [r4, #4]
    9990:	3030      	adds	r0, #48	; 0x30
    9992:	f005 fb62 	bl	f05a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9996:	4606      	mov	r6, r0
    9998:	42b7      	cmp	r7, r6
    999a:	d20a      	bcs.n	99b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    999c:	f7f8 fc3c 	bl	2218 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    99a0:	4601      	mov	r1, r0
    99a2:	1bf0      	subs	r0, r6, r7
    99a4:	2865      	cmp	r0, #101	; 0x65
    99a6:	d200      	bcs.n	99aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    99a8:	2065      	movs	r0, #101	; 0x65
    99aa:	f7f8 fb57 	bl	205c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    99ae:	b100      	cbz	r0, 99b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    99b0:	2500      	movs	r5, #0
    99b2:	6860      	ldr	r0, [r4, #4]
    99b4:	f005 fafb 	bl	efae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    99b8:	b138      	cbz	r0, 99ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    99ba:	6863      	ldr	r3, [r4, #4]
    99bc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    99c0:	8818      	ldrh	r0, [r3, #0]
    99c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    99c6:	f005 faaf 	bl	ef28 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    99ca:	4628      	mov	r0, r5
    99cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99d0:	20000174 	.word	0x20000174
    99d4:	b510      	push	{r4, lr}
    99d6:	4c11      	ldr	r4, [pc, #68]	; (9a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    99d8:	6861      	ldr	r1, [r4, #4]
    99da:	880a      	ldrh	r2, [r1, #0]
    99dc:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    99e0:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    99e4:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    99e8:	f006 fab9 	bl	ff5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    99ec:	6861      	ldr	r1, [r4, #4]
    99ee:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    99f2:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    99f6:	f006 fab2 	bl	ff5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    99fa:	6861      	ldr	r1, [r4, #4]
    99fc:	2211      	movs	r2, #17
    99fe:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    9a02:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    9a06:	f7fd f9b5 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9a0a:	6861      	ldr	r1, [r4, #4]
    9a0c:	2000      	movs	r0, #0
    9a0e:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    9a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a16:	f7fd ba7f 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a1a:	0000      	.short	0x0000
    9a1c:	20000174 	.word	0x20000174
    9a20:	b570      	push	{r4, r5, r6, lr}
    9a22:	4d0f      	ldr	r5, [pc, #60]	; (9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    9a24:	686c      	ldr	r4, [r5, #4]
    9a26:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9a2a:	2920      	cmp	r1, #32
    9a2c:	d002      	beq.n	9a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9a2e:	2927      	cmp	r1, #39	; 0x27
    9a30:	d003      	beq.n	9a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    9a32:	e011      	b.n	9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    9a34:	f7ff ffce 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9a38:	e008      	b.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9a3a:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    9a3e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    9a42:	2301      	movs	r3, #1
    9a44:	210b      	movs	r1, #11
    9a46:	f004 fdd8 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a4a:	b138      	cbz	r0, 9a5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9a4c:	6869      	ldr	r1, [r5, #4]
    9a4e:	2000      	movs	r0, #0
    9a50:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a54:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9a58:	2000      	movs	r0, #0
    9a5a:	bd70      	pop	{r4, r5, r6, pc}
    9a5c:	202a      	movs	r0, #42	; 0x2a
    9a5e:	e7e9      	b.n	9a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9a60:	20000174 	.word	0x20000174
    9a64:	b570      	push	{r4, r5, r6, lr}
    9a66:	4c17      	ldr	r4, [pc, #92]	; (9ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    9a68:	2301      	movs	r3, #1
    9a6a:	2100      	movs	r1, #0
    9a6c:	6860      	ldr	r0, [r4, #4]
    9a6e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a72:	3078      	adds	r0, #120	; 0x78
    9a74:	f004 fdc1 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a78:	b1b0      	cbz	r0, 9aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    9a7a:	f1a4 0510 	sub.w	r5, r4, #16
    9a7e:	68e8      	ldr	r0, [r5, #12]
    9a80:	f005 f814 	bl	eaac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9a84:	6861      	ldr	r1, [r4, #4]
    9a86:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    9a8a:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9a8e:	f006 fa7f 	bl	ff90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9a92:	b158      	cbz	r0, 9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    9a94:	6861      	ldr	r1, [r4, #4]
    9a96:	2028      	movs	r0, #40	; 0x28
    9a98:	2208      	movs	r2, #8
    9a9a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9a9e:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9aa2:	f7fd f967 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9aa6:	e00b      	b.n	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    9aa8:	2001      	movs	r0, #1
    9aaa:	bd70      	pop	{r4, r5, r6, pc}
    9aac:	6861      	ldr	r1, [r4, #4]
    9aae:	68e8      	ldr	r0, [r5, #12]
    9ab0:	f201 2176 	addw	r1, r1, #630	; 0x276
    9ab4:	f004 fff5 	bl	eaa2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9ab8:	6861      	ldr	r1, [r4, #4]
    9aba:	200b      	movs	r0, #11
    9abc:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9ac0:	2000      	movs	r0, #0
    9ac2:	bd70      	pop	{r4, r5, r6, pc}
    9ac4:	20000174 	.word	0x20000174
    9ac8:	b570      	push	{r4, r5, r6, lr}
    9aca:	4d2b      	ldr	r5, [pc, #172]	; (9b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    9acc:	2301      	movs	r3, #1
    9ace:	2100      	movs	r1, #0
    9ad0:	6868      	ldr	r0, [r5, #4]
    9ad2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9ad6:	3078      	adds	r0, #120	; 0x78
    9ad8:	f004 fd8f 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9adc:	b1d8      	cbz	r0, 9b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    9ade:	f1a5 0410 	sub.w	r4, r5, #16
    9ae2:	2100      	movs	r1, #0
    9ae4:	68e0      	ldr	r0, [r4, #12]
    9ae6:	f004 ffb4 	bl	ea52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9aea:	b1b0      	cbz	r0, 9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    9aec:	68e0      	ldr	r0, [r4, #12]
    9aee:	6869      	ldr	r1, [r5, #4]
    9af0:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9af4:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    9af8:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9afc:	f006 fa48 	bl	ff90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9b00:	b178      	cbz	r0, 9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    9b02:	6869      	ldr	r1, [r5, #4]
    9b04:	2028      	movs	r0, #40	; 0x28
    9b06:	2208      	movs	r2, #8
    9b08:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9b0c:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9b10:	f7fd f930 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b14:	e02e      	b.n	9b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    9b16:	2001      	movs	r0, #1
    9b18:	bd70      	pop	{r4, r5, r6, pc}
    9b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9b1e:	f000 b8f5 	b.w	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9b22:	68e0      	ldr	r0, [r4, #12]
    9b24:	f004 ffc5 	bl	eab2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9b28:	f004 fd4a 	bl	e5c0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9b2c:	4606      	mov	r6, r0
    9b2e:	6868      	ldr	r0, [r5, #4]
    9b30:	4631      	mov	r1, r6
    9b32:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    9b36:	68e0      	ldr	r0, [r4, #12]
    9b38:	7900      	ldrb	r0, [r0, #4]
    9b3a:	f004 feda 	bl	e8f2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9b3e:	6869      	ldr	r1, [r5, #4]
    9b40:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    9b44:	68e0      	ldr	r0, [r4, #12]
    9b46:	4631      	mov	r1, r6
    9b48:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9b4c:	f004 fecd 	bl	e8ea <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9b50:	6869      	ldr	r1, [r5, #4]
    9b52:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    9b56:	68e0      	ldr	r0, [r4, #12]
    9b58:	f004 ffae 	bl	eab8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9b5c:	6869      	ldr	r1, [r5, #4]
    9b5e:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    9b62:	68e0      	ldr	r0, [r4, #12]
    9b64:	f004 ffab 	bl	eabe <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9b68:	6869      	ldr	r1, [r5, #4]
    9b6a:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    9b6e:	200d      	movs	r0, #13
    9b70:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9b74:	2000      	movs	r0, #0
    9b76:	bd70      	pop	{r4, r5, r6, pc}
    9b78:	20000174 	.word	0x20000174
    9b7c:	b538      	push	{r3, r4, r5, lr}
    9b7e:	4c2c      	ldr	r4, [pc, #176]	; (9c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9b80:	2301      	movs	r3, #1
    9b82:	2100      	movs	r1, #0
    9b84:	6860      	ldr	r0, [r4, #4]
    9b86:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b8a:	3078      	adds	r0, #120	; 0x78
    9b8c:	f004 fd35 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b90:	b970      	cbnz	r0, 9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9b92:	6860      	ldr	r0, [r4, #4]
    9b94:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b98:	2a12      	cmp	r2, #18
    9b9a:	d009      	beq.n	9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9b9c:	2301      	movs	r3, #1
    9b9e:	2105      	movs	r1, #5
    9ba0:	3078      	adds	r0, #120	; 0x78
    9ba2:	f004 fd2a 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ba6:	b108      	cbz	r0, 9bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    9ba8:	2008      	movs	r0, #8
    9baa:	bd38      	pop	{r3, r4, r5, pc}
    9bac:	2001      	movs	r0, #1
    9bae:	bd38      	pop	{r3, r4, r5, pc}
    9bb0:	6860      	ldr	r0, [r4, #4]
    9bb2:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9bb6:	b908      	cbnz	r0, 9bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    9bb8:	f7ff f85c 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9bbc:	4d1c      	ldr	r5, [pc, #112]	; (9c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9bbe:	6861      	ldr	r1, [r4, #4]
    9bc0:	3d10      	subs	r5, #16
    9bc2:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    9bc6:	68e8      	ldr	r0, [r5, #12]
    9bc8:	f004 ff88 	bl	eadc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9bcc:	6861      	ldr	r1, [r4, #4]
    9bce:	68e8      	ldr	r0, [r5, #12]
    9bd0:	f501 7180 	add.w	r1, r1, #256	; 0x100
    9bd4:	f004 ff79 	bl	eaca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9bd8:	6861      	ldr	r1, [r4, #4]
    9bda:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    9bde:	f88d 0000 	strb.w	r0, [sp]
    9be2:	9800      	ldr	r0, [sp, #0]
    9be4:	9000      	str	r0, [sp, #0]
    9be6:	f89d 0000 	ldrb.w	r0, [sp]
    9bea:	b120      	cbz	r0, 9bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    9bec:	f240 21a2 	movw	r1, #674	; 0x2a2
    9bf0:	2031      	movs	r0, #49	; 0x31
    9bf2:	f7fa ffb9 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bf6:	8808      	ldrh	r0, [r1, #0]
    9bf8:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    9bfc:	f501 7124 	add.w	r1, r1, #656	; 0x290
    9c00:	68e8      	ldr	r0, [r5, #12]
    9c02:	f004 ff66 	bl	ead2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9c06:	6861      	ldr	r1, [r4, #4]
    9c08:	68e8      	ldr	r0, [r5, #12]
    9c0a:	f501 7126 	add.w	r1, r1, #664	; 0x298
    9c0e:	f004 ff59 	bl	eac4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9c12:	6861      	ldr	r1, [r4, #4]
    9c14:	2207      	movs	r2, #7
    9c16:	f501 7021 	add.w	r0, r1, #644	; 0x284
    9c1a:	f7fd f8ab 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9c1e:	6861      	ldr	r1, [r4, #4]
    9c20:	2014      	movs	r0, #20
    9c22:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9c26:	f7fd f977 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c2a:	2000      	movs	r0, #0
    9c2c:	bd38      	pop	{r3, r4, r5, pc}
    9c2e:	0000      	.short	0x0000
    9c30:	20000174 	.word	0x20000174
    9c34:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9c36:	4c13      	ldr	r4, [pc, #76]	; (9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9c38:	6860      	ldr	r0, [r4, #4]
    9c3a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9c3e:	07c0      	lsls	r0, r0, #31
    9c40:	d001      	beq.n	9c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    9c42:	2001      	movs	r0, #1
    9c44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9c46:	480f      	ldr	r0, [pc, #60]	; (9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9c48:	4669      	mov	r1, sp
    9c4a:	3810      	subs	r0, #16
    9c4c:	68c0      	ldr	r0, [r0, #12]
    9c4e:	f004 ff4b 	bl	eae8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9c52:	f001 fad9 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c56:	f644 122f 	movw	r2, #18735	; 0x492f
    9c5a:	4010      	ands	r0, r2
    9c5c:	e9dd 5200 	ldrd	r5, r2, [sp]
    9c60:	6863      	ldr	r3, [r4, #4]
    9c62:	4005      	ands	r5, r0
    9c64:	f001 0106 	and.w	r1, r1, #6
    9c68:	f843 5fd4 	str.w	r5, [r3, #212]!
    9c6c:	400a      	ands	r2, r1
    9c6e:	605a      	str	r2, [r3, #4]
    9c70:	f7ff f800 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9c74:	6860      	ldr	r0, [r4, #4]
    9c76:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9c7a:	f041 0101 	orr.w	r1, r1, #1
    9c7e:	7001      	strb	r1, [r0, #0]
    9c80:	2000      	movs	r0, #0
    9c82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9c84:	20000174 	.word	0x20000174
    9c88:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9c8c:	4d1e      	ldr	r5, [pc, #120]	; (9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    9c8e:	2301      	movs	r3, #1
    9c90:	2107      	movs	r1, #7
    9c92:	6868      	ldr	r0, [r5, #4]
    9c94:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c98:	3078      	adds	r0, #120	; 0x78
    9c9a:	f004 fcae 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c9e:	b380      	cbz	r0, 9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    9ca0:	f1a5 0010 	sub.w	r0, r5, #16
    9ca4:	4669      	mov	r1, sp
    9ca6:	68c0      	ldr	r0, [r0, #12]
    9ca8:	f004 ff23 	bl	eaf2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9cac:	686e      	ldr	r6, [r5, #4]
    9cae:	f89d 7004 	ldrb.w	r7, [sp, #4]
    9cb2:	36d4      	adds	r6, #212	; 0xd4
    9cb4:	9c00      	ldr	r4, [sp, #0]
    9cb6:	f001 faa7 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9cba:	4004      	ands	r4, r0
    9cbc:	f644 102f 	movw	r0, #18735	; 0x492f
    9cc0:	4004      	ands	r4, r0
    9cc2:	400f      	ands	r7, r1
    9cc4:	f007 0006 	and.w	r0, r7, #6
    9cc8:	6034      	str	r4, [r6, #0]
    9cca:	6070      	str	r0, [r6, #4]
    9ccc:	6869      	ldr	r1, [r5, #4]
    9cce:	2000      	movs	r0, #0
    9cd0:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9cd4:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9cd8:	880a      	ldrh	r2, [r1, #0]
    9cda:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    9cde:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    9ce2:	9a00      	ldr	r2, [sp, #0]
    9ce4:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    9ce8:	9a01      	ldr	r2, [sp, #4]
    9cea:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    9cee:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    9cf2:	2205      	movs	r2, #5
    9cf4:	f7fd f83e 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cf8:	f7fd f90e 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cfc:	2000      	movs	r0, #0
    9cfe:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9d02:	e7ff      	b.n	9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    9d04:	2001      	movs	r0, #1
    9d06:	e7fa      	b.n	9cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    9d08:	20000174 	.word	0x20000174
    9d0c:	480b      	ldr	r0, [pc, #44]	; (9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9d0e:	b510      	push	{r4, lr}
    9d10:	6840      	ldr	r0, [r0, #4]
    9d12:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9d16:	070a      	lsls	r2, r1, #28
    9d18:	d501      	bpl.n	9d1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    9d1a:	2001      	movs	r0, #1
    9d1c:	bd10      	pop	{r4, pc}
    9d1e:	f041 0108 	orr.w	r1, r1, #8
    9d22:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    9d26:	4905      	ldr	r1, [pc, #20]	; (9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9d28:	3910      	subs	r1, #16
    9d2a:	68c9      	ldr	r1, [r1, #12]
    9d2c:	78c9      	ldrb	r1, [r1, #3]
    9d2e:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    9d32:	f7fe ff9f 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9d36:	2000      	movs	r0, #0
    9d38:	bd10      	pop	{r4, pc}
    9d3a:	0000      	.short	0x0000
    9d3c:	20000174 	.word	0x20000174
    9d40:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9d44:	4d36      	ldr	r5, [pc, #216]	; (9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9d46:	6868      	ldr	r0, [r5, #4]
    9d48:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9d4c:	f010 0f30 	tst.w	r0, #48	; 0x30
    9d50:	d002      	beq.n	9d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    9d52:	2001      	movs	r0, #1
    9d54:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9d58:	4c31      	ldr	r4, [pc, #196]	; (9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9d5a:	3c10      	subs	r4, #16
    9d5c:	68e0      	ldr	r0, [r4, #12]
    9d5e:	f004 fee3 	bl	eb28 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9d62:	b328      	cbz	r0, 9db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    9d64:	68e0      	ldr	r0, [r4, #12]
    9d66:	f004 fed1 	bl	eb0c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9d6a:	4607      	mov	r7, r0
    9d6c:	68e0      	ldr	r0, [r4, #12]
    9d6e:	f004 fed1 	bl	eb14 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9d72:	4680      	mov	r8, r0
    9d74:	68e0      	ldr	r0, [r4, #12]
    9d76:	f004 fec7 	bl	eb08 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9d7a:	4606      	mov	r6, r0
    9d7c:	68e0      	ldr	r0, [r4, #12]
    9d7e:	f004 fec7 	bl	eb10 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9d82:	4601      	mov	r1, r0
    9d84:	9700      	str	r7, [sp, #0]
    9d86:	6868      	ldr	r0, [r5, #4]
    9d88:	4643      	mov	r3, r8
    9d8a:	4632      	mov	r2, r6
    9d8c:	3030      	adds	r0, #48	; 0x30
    9d8e:	f005 f99e 	bl	f0ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9d92:	78a0      	ldrb	r0, [r4, #2]
    9d94:	0781      	lsls	r1, r0, #30
    9d96:	f04f 0001 	mov.w	r0, #1
    9d9a:	d503      	bpl.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    9d9c:	68a1      	ldr	r1, [r4, #8]
    9d9e:	78c9      	ldrb	r1, [r1, #3]
    9da0:	2914      	cmp	r1, #20
    9da2:	d009      	beq.n	9db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9da4:	6869      	ldr	r1, [r5, #4]
    9da6:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    9daa:	291c      	cmp	r1, #28
    9dac:	d004      	beq.n	9db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9dae:	e006      	b.n	9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9db0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9db4:	f7ff bfaa 	b.w	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9db8:	6869      	ldr	r1, [r5, #4]
    9dba:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    9dbe:	686b      	ldr	r3, [r5, #4]
    9dc0:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9dc4:	2801      	cmp	r0, #1
    9dc6:	d011      	beq.n	9dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9dc8:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    9dcc:	f88d 0004 	strb.w	r0, [sp, #4]
    9dd0:	9801      	ldr	r0, [sp, #4]
    9dd2:	9001      	str	r0, [sp, #4]
    9dd4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9dd8:	b940      	cbnz	r0, 9dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9dda:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    9dde:	f88d 0000 	strb.w	r0, [sp]
    9de2:	9800      	ldr	r0, [sp, #0]
    9de4:	9000      	str	r0, [sp, #0]
    9de6:	f89d 0000 	ldrb.w	r0, [sp]
    9dea:	b148      	cbz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    9dec:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    9df0:	f040 0010 	orr.w	r0, r0, #16
    9df4:	f883 0000 	strb.w	r0, [r3]
    9df8:	f7fe ff3c 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9dfc:	2000      	movs	r0, #0
    9dfe:	e7a9      	b.n	9d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    9e00:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    9e04:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    9e08:	f040 0020 	orr.w	r0, r0, #32
    9e0c:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    9e10:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9e14:	8818      	ldrh	r0, [r3, #0]
    9e16:	f005 f961 	bl	f0dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9e1a:	f7fd f87d 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e1e:	e7eb      	b.n	9df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    9e20:	20000174 	.word	0x20000174
    9e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e28:	4c1b      	ldr	r4, [pc, #108]	; (9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    9e2a:	2301      	movs	r3, #1
    9e2c:	210a      	movs	r1, #10
    9e2e:	6860      	ldr	r0, [r4, #4]
    9e30:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e34:	3078      	adds	r0, #120	; 0x78
    9e36:	f004 fbe0 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e3a:	b358      	cbz	r0, 9e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9e3c:	f1a4 0510 	sub.w	r5, r4, #16
    9e40:	68e8      	ldr	r0, [r5, #12]
    9e42:	f004 fe71 	bl	eb28 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9e46:	b1d0      	cbz	r0, 9e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    9e48:	68e8      	ldr	r0, [r5, #12]
    9e4a:	f004 fe5f 	bl	eb0c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9e4e:	4680      	mov	r8, r0
    9e50:	68e8      	ldr	r0, [r5, #12]
    9e52:	f004 fe5f 	bl	eb14 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9e56:	4607      	mov	r7, r0
    9e58:	68e8      	ldr	r0, [r5, #12]
    9e5a:	f004 fe55 	bl	eb08 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9e5e:	4606      	mov	r6, r0
    9e60:	68e8      	ldr	r0, [r5, #12]
    9e62:	f004 fe55 	bl	eb10 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9e66:	4601      	mov	r1, r0
    9e68:	f8cd 8000 	str.w	r8, [sp]
    9e6c:	6860      	ldr	r0, [r4, #4]
    9e6e:	463b      	mov	r3, r7
    9e70:	4632      	mov	r2, r6
    9e72:	3030      	adds	r0, #48	; 0x30
    9e74:	f005 f92b 	bl	f0ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9e78:	6860      	ldr	r0, [r4, #4]
    9e7a:	f005 f898 	bl	efae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9e7e:	6861      	ldr	r1, [r4, #4]
    9e80:	2000      	movs	r0, #0
    9e82:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9e86:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9e8a:	f7ff f8d9 	bl	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    9e8e:	2000      	movs	r0, #0
    9e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e94:	2001      	movs	r0, #1
    9e96:	e7fb      	b.n	9e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9e98:	20000174 	.word	0x20000174
    9e9c:	b510      	push	{r4, lr}
    9e9e:	4c09      	ldr	r4, [pc, #36]	; (9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    9ea0:	6860      	ldr	r0, [r4, #4]
    9ea2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9ea6:	0740      	lsls	r0, r0, #29
    9ea8:	d501      	bpl.n	9eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    9eaa:	2001      	movs	r0, #1
    9eac:	bd10      	pop	{r4, pc}
    9eae:	f7fe fee1 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9eb2:	6860      	ldr	r0, [r4, #4]
    9eb4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9eb8:	f041 0104 	orr.w	r1, r1, #4
    9ebc:	7001      	strb	r1, [r0, #0]
    9ebe:	2000      	movs	r0, #0
    9ec0:	bd10      	pop	{r4, pc}
    9ec2:	0000      	.short	0x0000
    9ec4:	20000174 	.word	0x20000174
    9ec8:	b510      	push	{r4, lr}
    9eca:	4c0a      	ldr	r4, [pc, #40]	; (9ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    9ecc:	2301      	movs	r3, #1
    9ece:	2109      	movs	r1, #9
    9ed0:	6860      	ldr	r0, [r4, #4]
    9ed2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ed6:	3078      	adds	r0, #120	; 0x78
    9ed8:	f004 fb8f 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9edc:	2800      	cmp	r0, #0
    9ede:	d007      	beq.n	9ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    9ee0:	6860      	ldr	r0, [r4, #4]
    9ee2:	2100      	movs	r1, #0
    9ee4:	f800 1fb2 	strb.w	r1, [r0, #178]!
    9ee8:	7301      	strb	r1, [r0, #12]
    9eea:	f800 1c2d 	strb.w	r1, [r0, #-45]
    9eee:	4608      	mov	r0, r1
    9ef0:	bd10      	pop	{r4, pc}
    9ef2:	0000      	.short	0x0000
    9ef4:	20000174 	.word	0x20000174
    9ef8:	b510      	push	{r4, lr}
    9efa:	4c0f      	ldr	r4, [pc, #60]	; (9f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    9efc:	2301      	movs	r3, #1
    9efe:	2100      	movs	r1, #0
    9f00:	6860      	ldr	r0, [r4, #4]
    9f02:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f06:	3078      	adds	r0, #120	; 0x78
    9f08:	f004 fb77 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f0c:	b138      	cbz	r0, 9f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9f0e:	f7fe feb1 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9f12:	6861      	ldr	r1, [r4, #4]
    9f14:	2010      	movs	r0, #16
    9f16:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9f1a:	2000      	movs	r0, #0
    9f1c:	bd10      	pop	{r4, pc}
    9f1e:	6860      	ldr	r0, [r4, #4]
    9f20:	2301      	movs	r3, #1
    9f22:	2105      	movs	r1, #5
    9f24:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f28:	3078      	adds	r0, #120	; 0x78
    9f2a:	f004 fb66 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f2e:	b108      	cbz	r0, 9f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    9f30:	2008      	movs	r0, #8
    9f32:	bd10      	pop	{r4, pc}
    9f34:	2001      	movs	r0, #1
    9f36:	bd10      	pop	{r4, pc}
    9f38:	20000174 	.word	0x20000174
    9f3c:	4806      	ldr	r0, [pc, #24]	; (9f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    9f3e:	6840      	ldr	r0, [r0, #4]
    9f40:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9f44:	2911      	cmp	r1, #17
    9f46:	d001      	beq.n	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    9f48:	2002      	movs	r0, #2
    9f4a:	4770      	bx	lr
    9f4c:	2112      	movs	r1, #18
    9f4e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9f52:	2000      	movs	r0, #0
    9f54:	4770      	bx	lr
    9f56:	0000      	.short	0x0000
    9f58:	20000174 	.word	0x20000174
    9f5c:	b538      	push	{r3, r4, r5, lr}
    9f5e:	4c36      	ldr	r4, [pc, #216]	; (a038 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    9f60:	2301      	movs	r3, #1
    9f62:	210b      	movs	r1, #11
    9f64:	6860      	ldr	r0, [r4, #4]
    9f66:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f6a:	3078      	adds	r0, #120	; 0x78
    9f6c:	f004 fb45 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f70:	bb80      	cbnz	r0, 9fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    9f72:	6860      	ldr	r0, [r4, #4]
    9f74:	2301      	movs	r3, #1
    9f76:	2100      	movs	r1, #0
    9f78:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f7c:	3078      	adds	r0, #120	; 0x78
    9f7e:	f004 fb3c 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f82:	b328      	cbz	r0, 9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    9f84:	6860      	ldr	r0, [r4, #4]
    9f86:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9f8a:	2824      	cmp	r0, #36	; 0x24
    9f8c:	d023      	beq.n	9fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    9f8e:	f1a4 0510 	sub.w	r5, r4, #16
    9f92:	68e8      	ldr	r0, [r5, #12]
    9f94:	f004 fde4 	bl	eb60 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9f98:	b1f8      	cbz	r0, 9fda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    9f9a:	6860      	ldr	r0, [r4, #4]
    9f9c:	2102      	movs	r1, #2
    9f9e:	30d4      	adds	r0, #212	; 0xd4
    9fa0:	f005 ff84 	bl	feac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    9fa4:	68e8      	ldr	r0, [r5, #12]
    9fa6:	7941      	ldrb	r1, [r0, #5]
    9fa8:	f001 0207 	and.w	r2, r1, #7
    9fac:	6861      	ldr	r1, [r4, #4]
    9fae:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    9fb2:	7900      	ldrb	r0, [r0, #4]
    9fb4:	f000 0007 	and.w	r0, r0, #7
    9fb8:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    9fbc:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    9fc0:	f88d 3000 	strb.w	r3, [sp]
    9fc4:	9b00      	ldr	r3, [sp, #0]
    9fc6:	9300      	str	r3, [sp, #0]
    9fc8:	f89d 3000 	ldrb.w	r3, [sp]
    9fcc:	bb5b      	cbnz	r3, a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    9fce:	e008      	b.n	9fe2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    9fd0:	2001      	movs	r0, #1
    9fd2:	bd38      	pop	{r3, r4, r5, pc}
    9fd4:	e7ff      	b.n	9fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    9fd6:	2020      	movs	r0, #32
    9fd8:	e7fb      	b.n	9fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    9fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9fde:	f7ff be95 	b.w	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9fe2:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    9fe6:	2b01      	cmp	r3, #1
    9fe8:	d01d      	beq.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    9fea:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    9fee:	785d      	ldrb	r5, [r3, #1]
    9ff0:	4285      	cmp	r5, r0
    9ff2:	d106      	bne.n	a002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    9ff4:	7818      	ldrb	r0, [r3, #0]
    9ff6:	4290      	cmp	r0, r2
    9ff8:	d103      	bne.n	a002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    9ffa:	2002      	movs	r0, #2
    9ffc:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a000:	e011      	b.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a002:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    a006:	880a      	ldrh	r2, [r1, #0]
    a008:	f820 2b02 	strh.w	r2, [r0], #2
    a00c:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a010:	f800 2b01 	strb.w	r2, [r0], #1
    a014:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a018:	f800 290d 	strb.w	r2, [r0], #-13
    a01c:	221b      	movs	r2, #27
    a01e:	f7fc fea9 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a022:	f7fc ff79 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a026:	6861      	ldr	r1, [r4, #4]
    a028:	2021      	movs	r0, #33	; 0x21
    a02a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a02e:	f7fe fe21 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a032:	2000      	movs	r0, #0
    a034:	e7cd      	b.n	9fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a036:	0000      	.short	0x0000
    a038:	20000174 	.word	0x20000174
    a03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a040:	4951      	ldr	r1, [pc, #324]	; (a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a042:	6848      	ldr	r0, [r1, #4]
    a044:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a048:	2a20      	cmp	r2, #32
    a04a:	d009      	beq.n	a060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    a04c:	f05f 0600 	movs.w	r6, #0
    a050:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a054:	2a22      	cmp	r2, #34	; 0x22
    a056:	d005      	beq.n	a064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    a058:	b3a6      	cbz	r6, a0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a05a:	f100 0485 	add.w	r4, r0, #133	; 0x85
    a05e:	e003      	b.n	a068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    a060:	2601      	movs	r6, #1
    a062:	e7f5      	b.n	a050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    a064:	f100 0486 	add.w	r4, r0, #134	; 0x86
    a068:	4688      	mov	r8, r1
    a06a:	2102      	movs	r1, #2
    a06c:	30d4      	adds	r0, #212	; 0xd4
    a06e:	f005 ff1d 	bl	feac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a072:	4d45      	ldr	r5, [pc, #276]	; (a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a074:	3d10      	subs	r5, #16
    a076:	68e8      	ldr	r0, [r5, #12]
    a078:	f004 fd7c 	bl	eb74 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a07c:	2700      	movs	r7, #0
    a07e:	b328      	cbz	r0, a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a080:	4631      	mov	r1, r6
    a082:	68e8      	ldr	r0, [r5, #12]
    a084:	f7fe fec8 	bl	8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    a088:	b300      	cbz	r0, a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a08a:	4646      	mov	r6, r8
    a08c:	466a      	mov	r2, sp
    a08e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a092:	68e9      	ldr	r1, [r5, #12]
    a094:	f004 fbe3 	bl	e85e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a098:	b3a8      	cbz	r0, a106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    a09a:	68e8      	ldr	r0, [r5, #12]
    a09c:	f004 fd3c 	bl	eb18 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a0a0:	6871      	ldr	r1, [r6, #4]
    a0a2:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a0a6:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a0aa:	f005 ff71 	bl	ff90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a0ae:	b358      	cbz	r0, a108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    a0b0:	6871      	ldr	r1, [r6, #4]
    a0b2:	2028      	movs	r0, #40	; 0x28
    a0b4:	2208      	movs	r2, #8
    a0b6:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a0ba:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a0be:	f7fc fe59 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a0c2:	e055      	b.n	a170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a0c4:	e7ff      	b.n	a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a0c6:	2002      	movs	r0, #2
    a0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a0d0:	f04f 0900 	mov.w	r9, #0
    a0d4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a0d8:	2901      	cmp	r1, #1
    a0da:	d016      	beq.n	a10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    a0dc:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a0e0:	b1fe      	cbz	r6, a122 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    a0e2:	68e8      	ldr	r0, [r5, #12]
    a0e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a0e8:	2201      	movs	r2, #1
    a0ea:	78c0      	ldrb	r0, [r0, #3]
    a0ec:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    a0f0:	4082      	lsls	r2, r0
    a0f2:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a0f6:	b160      	cbz	r0, a112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    a0f8:	200a      	movs	r0, #10
    a0fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0fe:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a102:	b9a0      	cbnz	r0, a12e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    a104:	e008      	b.n	a118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    a106:	e014      	b.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a108:	e027      	b.n	a15a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    a10a:	201e      	movs	r0, #30
    a10c:	f7ff fc62 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a110:	e7e6      	b.n	a0e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    a112:	f240 31fd 	movw	r1, #1021	; 0x3fd
    a116:	e001      	b.n	a11c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    a118:	f240 4105 	movw	r1, #1029	; 0x405
    a11c:	2031      	movs	r0, #49	; 0x31
    a11e:	f7fa fd23 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a122:	7027      	strb	r7, [r4, #0]
    a124:	f7fe fdb2 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a128:	f7ff fdf0 	bl	9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a12c:	4681      	mov	r9, r0
    a12e:	4648      	mov	r0, r9
    a130:	e7ca      	b.n	a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a132:	6870      	ldr	r0, [r6, #4]
    a134:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a138:	2901      	cmp	r1, #1
    a13a:	d009      	beq.n	a150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a13c:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a140:	6870      	ldr	r0, [r6, #4]
    a142:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a146:	42a1      	cmp	r1, r4
    a148:	d112      	bne.n	a170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a14a:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a14e:	e00f      	b.n	a170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a150:	2000      	movs	r0, #0
    a152:	f7ff fc3f 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a156:	7027      	strb	r7, [r4, #0]
    a158:	e7f2      	b.n	a140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a15a:	6870      	ldr	r0, [r6, #4]
    a15c:	f89d 1000 	ldrb.w	r1, [sp]
    a160:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a164:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a168:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a16c:	2024      	movs	r0, #36	; 0x24
    a16e:	7020      	strb	r0, [r4, #0]
    a170:	6870      	ldr	r0, [r6, #4]
    a172:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a176:	42a1      	cmp	r1, r4
    a178:	d102      	bne.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a17a:	f7fe fd87 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a17e:	e001      	b.n	a184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a180:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a184:	2000      	movs	r0, #0
    a186:	e79f      	b.n	a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a188:	20000174 	.word	0x20000174
    a18c:	b570      	push	{r4, r5, r6, lr}
    a18e:	480a      	ldr	r0, [pc, #40]	; (a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a190:	2102      	movs	r1, #2
    a192:	6840      	ldr	r0, [r0, #4]
    a194:	30d4      	adds	r0, #212	; 0xd4
    a196:	f005 fe89 	bl	feac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a19a:	4c07      	ldr	r4, [pc, #28]	; (a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a19c:	3c10      	subs	r4, #16
    a19e:	68e0      	ldr	r0, [r4, #12]
    a1a0:	f004 fcf8 	bl	eb94 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a1a4:	4605      	mov	r5, r0
    a1a6:	68e0      	ldr	r0, [r4, #12]
    a1a8:	f004 fcf6 	bl	eb98 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a1ac:	4601      	mov	r1, r0
    a1ae:	4628      	mov	r0, r5
    a1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a1b4:	f005 bef8 	b.w	ffa8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a1b8:	20000174 	.word	0x20000174
    a1bc:	4808      	ldr	r0, [pc, #32]	; (a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a1be:	68c0      	ldr	r0, [r0, #12]
    a1c0:	7901      	ldrb	r1, [r0, #4]
    a1c2:	4807      	ldr	r0, [pc, #28]	; (a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a1c4:	3010      	adds	r0, #16
    a1c6:	6840      	ldr	r0, [r0, #4]
    a1c8:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a1cc:	2820      	cmp	r0, #32
    a1ce:	d005      	beq.n	a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a1d0:	2827      	cmp	r0, #39	; 0x27
    a1d2:	d003      	beq.n	a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a1d4:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    a1d8:	f005 bee6 	b.w	ffa8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a1dc:	2016      	movs	r0, #22
    a1de:	e7fb      	b.n	a1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    a1e0:	20000164 	.word	0x20000164
    a1e4:	b510      	push	{r4, lr}
    a1e6:	4c08      	ldr	r4, [pc, #32]	; (a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a1e8:	6860      	ldr	r0, [r4, #4]
    a1ea:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a1ee:	2817      	cmp	r0, #23
    a1f0:	d001      	beq.n	a1f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    a1f2:	2002      	movs	r0, #2
    a1f4:	bd10      	pop	{r4, pc}
    a1f6:	f7fe fd49 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a1fa:	6861      	ldr	r1, [r4, #4]
    a1fc:	201b      	movs	r0, #27
    a1fe:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a202:	2000      	movs	r0, #0
    a204:	bd10      	pop	{r4, pc}
    a206:	0000      	.short	0x0000
    a208:	20000174 	.word	0x20000174
    a20c:	b510      	push	{r4, lr}
    a20e:	4c0c      	ldr	r4, [pc, #48]	; (a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a210:	2301      	movs	r3, #1
    a212:	4619      	mov	r1, r3
    a214:	6860      	ldr	r0, [r4, #4]
    a216:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a21a:	3078      	adds	r0, #120	; 0x78
    a21c:	f004 f9ed 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a220:	b108      	cbz	r0, a226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    a222:	2000      	movs	r0, #0
    a224:	bd10      	pop	{r4, pc}
    a226:	4806      	ldr	r0, [pc, #24]	; (a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a228:	3810      	subs	r0, #16
    a22a:	68c0      	ldr	r0, [r0, #12]
    a22c:	f004 fc78 	bl	eb20 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a230:	6861      	ldr	r1, [r4, #4]
    a232:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    a236:	2007      	movs	r0, #7
    a238:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a23c:	e7f1      	b.n	a222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    a23e:	0000      	.short	0x0000
    a240:	20000174 	.word	0x20000174
    a244:	b570      	push	{r4, r5, r6, lr}
    a246:	4834      	ldr	r0, [pc, #208]	; (a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a248:	4c33      	ldr	r4, [pc, #204]	; (a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a24a:	2500      	movs	r5, #0
    a24c:	68c0      	ldr	r0, [r0, #12]
    a24e:	3410      	adds	r4, #16
    a250:	6862      	ldr	r2, [r4, #4]
    a252:	7901      	ldrb	r1, [r0, #4]
    a254:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a258:	390e      	subs	r1, #14
    a25a:	290a      	cmp	r1, #10
    a25c:	d259      	bcs.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a25e:	e8df f001 	tbb	[pc, r1]
    a262:	5805      	.short	0x5805
    a264:	581a5858 	.word	0x581a5858
    a268:	442c5820 	.word	0x442c5820
    a26c:	2804      	cmp	r0, #4
    a26e:	d150      	bne.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a270:	f7fe fe56 	bl	8f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a274:	6860      	ldr	r0, [r4, #4]
    a276:	2205      	movs	r2, #5
    a278:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    a27c:	8801      	ldrh	r1, [r0, #0]
    a27e:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    a282:	211a      	movs	r1, #26
    a284:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a288:	4601      	mov	r1, r0
    a28a:	4618      	mov	r0, r3
    a28c:	f7fc fd72 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a290:	f7fc fe42 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a294:	e03d      	b.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a296:	280e      	cmp	r0, #14
    a298:	d13b      	bne.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a29a:	f7ff fe15 	bl	9ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    a29e:	4605      	mov	r5, r0
    a2a0:	e037      	b.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2a2:	281c      	cmp	r0, #28
    a2a4:	d135      	bne.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2a6:	f7fe fe3b 	bl	8f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a2aa:	6860      	ldr	r0, [r4, #4]
    a2ac:	2105      	movs	r1, #5
    a2ae:	30d4      	adds	r0, #212	; 0xd4
    a2b0:	f005 fdf2 	bl	fe98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a2b4:	f7fe fec4 	bl	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a2b8:	e02b      	b.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2ba:	2820      	cmp	r0, #32
    a2bc:	d001      	beq.n	a2c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    a2be:	2827      	cmp	r0, #39	; 0x27
    a2c0:	d127      	bne.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2c2:	f7fe fe2d 	bl	8f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a2cc:	2921      	cmp	r1, #33	; 0x21
    a2ce:	d020      	beq.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2d0:	2108      	movs	r1, #8
    a2d2:	30d4      	adds	r0, #212	; 0xd4
    a2d4:	f005 fde0 	bl	fe98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a2d8:	6860      	ldr	r0, [r4, #4]
    a2da:	210b      	movs	r1, #11
    a2dc:	30d4      	adds	r0, #212	; 0xd4
    a2de:	f005 fddb 	bl	fe98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a2e2:	201a      	movs	r0, #26
    a2e4:	f7ff fb76 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a2e8:	e013      	b.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2ea:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    a2ee:	2822      	cmp	r0, #34	; 0x22
    a2f0:	d10f      	bne.n	a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2f2:	2600      	movs	r6, #0
    a2f4:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    a2f8:	f7fe fcc8 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a2fc:	6860      	ldr	r0, [r4, #4]
    a2fe:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    a302:	2801      	cmp	r0, #1
    a304:	d102      	bne.n	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    a306:	2000      	movs	r0, #0
    a308:	f7ff fb64 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a30c:	6860      	ldr	r0, [r4, #4]
    a30e:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    a312:	4628      	mov	r0, r5
    a314:	bd70      	pop	{r4, r5, r6, pc}
    a316:	0000      	.short	0x0000
    a318:	20000164 	.word	0x20000164
    a31c:	b570      	push	{r4, r5, r6, lr}
    a31e:	4c31      	ldr	r4, [pc, #196]	; (a3e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a320:	6860      	ldr	r0, [r4, #4]
    a322:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a326:	0789      	lsls	r1, r1, #30
    a328:	d507      	bpl.n	a33a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    a32a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a32e:	2301      	movs	r3, #1
    a330:	2108      	movs	r1, #8
    a332:	3078      	adds	r0, #120	; 0x78
    a334:	f004 f961 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a338:	b1f8      	cbz	r0, a37a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    a33a:	6860      	ldr	r0, [r4, #4]
    a33c:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a340:	0780      	lsls	r0, r0, #30
    a342:	d414      	bmi.n	a36e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    a344:	4d27      	ldr	r5, [pc, #156]	; (a3e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a346:	3d10      	subs	r5, #16
    a348:	68e8      	ldr	r0, [r5, #12]
    a34a:	f004 fbeb 	bl	eb24 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a34e:	6861      	ldr	r1, [r4, #4]
    a350:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    a354:	68e8      	ldr	r0, [r5, #12]
    a356:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a35a:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    a35e:	8840      	ldrh	r0, [r0, #2]
    a360:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    a364:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    a368:	f040 0002 	orr.w	r0, r0, #2
    a36c:	7008      	strb	r0, [r1, #0]
    a36e:	6860      	ldr	r0, [r4, #4]
    a370:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a374:	07c9      	lsls	r1, r1, #31
    a376:	d002      	beq.n	a37e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    a378:	e015      	b.n	a3a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    a37a:	2001      	movs	r0, #1
    a37c:	bd70      	pop	{r4, r5, r6, pc}
    a37e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a382:	078a      	lsls	r2, r1, #30
    a384:	d504      	bpl.n	a390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a386:	f240 21e2 	movw	r1, #738	; 0x2e2
    a38a:	2031      	movs	r0, #49	; 0x31
    a38c:	f7fa fbec 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a390:	f041 0102 	orr.w	r1, r1, #2
    a394:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a398:	f7fe fc6c 	bl	8c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a39c:	6860      	ldr	r0, [r4, #4]
    a39e:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a3a2:	07c0      	lsls	r0, r0, #31
    a3a4:	d007      	beq.n	a3b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    a3a6:	6861      	ldr	r1, [r4, #4]
    a3a8:	2201      	movs	r2, #1
    a3aa:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    a3ae:	f7fc fce1 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a3b2:	f7fc fdb1 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3b6:	6860      	ldr	r0, [r4, #4]
    a3b8:	2100      	movs	r1, #0
    a3ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3be:	2a06      	cmp	r2, #6
    a3c0:	d103      	bne.n	a3ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    a3c2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a3c6:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a3ca:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    a3ce:	b132      	cbz	r2, a3de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a3d0:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a3d4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3d8:	b90a      	cbnz	r2, a3de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a3da:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a3de:	2000      	movs	r0, #0
    a3e0:	bd70      	pop	{r4, r5, r6, pc}
    a3e2:	0000      	.short	0x0000
    a3e4:	20000174 	.word	0x20000174
    a3e8:	b510      	push	{r4, lr}
    a3ea:	4c1f      	ldr	r4, [pc, #124]	; (a468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    a3ec:	6863      	ldr	r3, [r4, #4]
    a3ee:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a3f2:	2808      	cmp	r0, #8
    a3f4:	d20d      	bcs.n	a412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    a3f6:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    a3fa:	f1c0 0008 	rsb	r0, r0, #8
    a3fe:	b2c1      	uxtb	r1, r0
    a400:	1898      	adds	r0, r3, r2
    a402:	f7fa fc4f 	bl	4ca4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a406:	6861      	ldr	r1, [r4, #4]
    a408:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a40c:	4410      	add	r0, r2
    a40e:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a412:	6863      	ldr	r3, [r4, #4]
    a414:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a418:	3808      	subs	r0, #8
    a41a:	2804      	cmp	r0, #4
    a41c:	d20d      	bcs.n	a43a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    a41e:	f500 7282 	add.w	r2, r0, #260	; 0x104
    a422:	f1c0 0004 	rsb	r0, r0, #4
    a426:	b2c1      	uxtb	r1, r0
    a428:	1898      	adds	r0, r3, r2
    a42a:	f7fa fc3b 	bl	4ca4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a42e:	6861      	ldr	r1, [r4, #4]
    a430:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a434:	4410      	add	r0, r2
    a436:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a43a:	6860      	ldr	r0, [r4, #4]
    a43c:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    a440:	290c      	cmp	r1, #12
    a442:	d30f      	bcc.n	a464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a444:	d005      	beq.n	a452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    a446:	f640 013b 	movw	r1, #2107	; 0x83b
    a44a:	f04f 0031 	mov.w	r0, #49	; 0x31
    a44e:	f7fa fb8b 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a452:	2100      	movs	r1, #0
    a454:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    a458:	2101      	movs	r1, #1
    a45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a45e:	2004      	movs	r0, #4
    a460:	f7ff b9ac 	b.w	97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a464:	bd10      	pop	{r4, pc}
    a466:	0000      	.short	0x0000
    a468:	20000174 	.word	0x20000174
    a46c:	4804      	ldr	r0, [pc, #16]	; (a480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    a46e:	2129      	movs	r1, #41	; 0x29
    a470:	6840      	ldr	r0, [r0, #4]
    a472:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a476:	2100      	movs	r1, #0
    a478:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    a47c:	4770      	bx	lr
    a47e:	0000      	.short	0x0000
    a480:	20000174 	.word	0x20000174
    a484:	4809      	ldr	r0, [pc, #36]	; (a4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    a486:	b510      	push	{r4, lr}
    a488:	6840      	ldr	r0, [r0, #4]
    a48a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a48e:	2914      	cmp	r1, #20
    a490:	d004      	beq.n	a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    a492:	f240 61fd 	movw	r1, #1789	; 0x6fd
    a496:	2031      	movs	r0, #49	; 0x31
    a498:	f7fa fb66 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a49c:	2101      	movs	r1, #1
    a49e:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a4a2:	2115      	movs	r1, #21
    a4a4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a4a8:	bd10      	pop	{r4, pc}
    a4aa:	0000      	.short	0x0000
    a4ac:	20000174 	.word	0x20000174
    a4b0:	b510      	push	{r4, lr}
    a4b2:	4c0a      	ldr	r4, [pc, #40]	; (a4dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a4b4:	6860      	ldr	r0, [r4, #4]
    a4b6:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a4ba:	07c0      	lsls	r0, r0, #31
    a4bc:	d008      	beq.n	a4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    a4be:	f7fe fbe5 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a4c2:	6860      	ldr	r0, [r4, #4]
    a4c4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a4c8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    a4cc:	7001      	strb	r1, [r0, #0]
    a4ce:	bd10      	pop	{r4, pc}
    a4d0:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    a4d4:	2031      	movs	r0, #49	; 0x31
    a4d6:	f7fa fb47 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4da:	0000      	.short	0x0000
    a4dc:	20000174 	.word	0x20000174
    a4e0:	b510      	push	{r4, lr}
    a4e2:	4c0a      	ldr	r4, [pc, #40]	; (a50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    a4e4:	2301      	movs	r3, #1
    a4e6:	2100      	movs	r1, #0
    a4e8:	6860      	ldr	r0, [r4, #4]
    a4ea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a4ee:	3078      	adds	r0, #120	; 0x78
    a4f0:	f004 f883 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4f4:	b120      	cbz	r0, a500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    a4f6:	6861      	ldr	r1, [r4, #4]
    a4f8:	201c      	movs	r0, #28
    a4fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a4fe:	bd10      	pop	{r4, pc}
    a500:	f240 7184 	movw	r1, #1924	; 0x784
    a504:	2031      	movs	r0, #49	; 0x31
    a506:	f7fa fb2f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a50a:	0000      	.short	0x0000
    a50c:	20000174 	.word	0x20000174
    a510:	480a      	ldr	r0, [pc, #40]	; (a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    a512:	b510      	push	{r4, lr}
    a514:	6840      	ldr	r0, [r0, #4]
    a516:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a51a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a51e:	2a01      	cmp	r2, #1
    a520:	d004      	beq.n	a52c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    a522:	f240 718b 	movw	r1, #1931	; 0x78b
    a526:	2031      	movs	r0, #49	; 0x31
    a528:	f7fa fb1e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a52c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    a530:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a538:	f7fe bba8 	b.w	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a53c:	20000174 	.word	0x20000174
    a540:	b510      	push	{r4, lr}
    a542:	4c0a      	ldr	r4, [pc, #40]	; (a56c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    a544:	2301      	movs	r3, #1
    a546:	2100      	movs	r1, #0
    a548:	6860      	ldr	r0, [r4, #4]
    a54a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a54e:	3078      	adds	r0, #120	; 0x78
    a550:	f004 f853 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a554:	b120      	cbz	r0, a560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    a556:	6861      	ldr	r1, [r4, #4]
    a558:	200e      	movs	r0, #14
    a55a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a55e:	bd10      	pop	{r4, pc}
    a560:	f240 7177 	movw	r1, #1911	; 0x777
    a564:	2031      	movs	r0, #49	; 0x31
    a566:	f7fa faff 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a56a:	0000      	.short	0x0000
    a56c:	20000174 	.word	0x20000174
    a570:	4804      	ldr	r0, [pc, #16]	; (a584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    a572:	6840      	ldr	r0, [r0, #4]
    a574:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a578:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    a57c:	7001      	strb	r1, [r0, #0]
    a57e:	f7fe bb85 	b.w	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a582:	0000      	.short	0x0000
    a584:	20000174 	.word	0x20000174
    a588:	4809      	ldr	r0, [pc, #36]	; (a5b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    a58a:	b510      	push	{r4, lr}
    a58c:	6840      	ldr	r0, [r0, #4]
    a58e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a592:	2910      	cmp	r1, #16
    a594:	d004      	beq.n	a5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    a596:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a59a:	2031      	movs	r0, #49	; 0x31
    a59c:	f7fa fae4 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5a0:	2101      	movs	r1, #1
    a5a2:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a5a6:	2111      	movs	r1, #17
    a5a8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a5ac:	bd10      	pop	{r4, pc}
    a5ae:	0000      	.short	0x0000
    a5b0:	20000174 	.word	0x20000174
    a5b4:	b510      	push	{r4, lr}
    a5b6:	4c0a      	ldr	r4, [pc, #40]	; (a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    a5b8:	2301      	movs	r3, #1
    a5ba:	2100      	movs	r1, #0
    a5bc:	6860      	ldr	r0, [r4, #4]
    a5be:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a5c2:	3078      	adds	r0, #120	; 0x78
    a5c4:	f004 f819 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5c8:	b120      	cbz	r0, a5d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    a5ca:	6861      	ldr	r1, [r4, #4]
    a5cc:	201f      	movs	r0, #31
    a5ce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a5d2:	bd10      	pop	{r4, pc}
    a5d4:	f240 7197 	movw	r1, #1943	; 0x797
    a5d8:	2031      	movs	r0, #49	; 0x31
    a5da:	f7fa fac5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5de:	0000      	.short	0x0000
    a5e0:	20000174 	.word	0x20000174
    a5e4:	4808      	ldr	r0, [pc, #32]	; (a608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    a5e6:	b510      	push	{r4, lr}
    a5e8:	6840      	ldr	r0, [r0, #4]
    a5ea:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a5ee:	2921      	cmp	r1, #33	; 0x21
    a5f0:	d005      	beq.n	a5fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a5f2:	b121      	cbz	r1, a5fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a5f4:	f240 719e 	movw	r1, #1950	; 0x79e
    a5f8:	2031      	movs	r0, #49	; 0x31
    a5fa:	f7fa fab5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5fe:	2122      	movs	r1, #34	; 0x22
    a600:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a604:	bd10      	pop	{r4, pc}
    a606:	0000      	.short	0x0000
    a608:	20000174 	.word	0x20000174
    a60c:	4809      	ldr	r0, [pc, #36]	; (a634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    a60e:	b510      	push	{r4, lr}
    a610:	6840      	ldr	r0, [r0, #4]
    a612:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a616:	2928      	cmp	r1, #40	; 0x28
    a618:	d006      	beq.n	a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    a61a:	2915      	cmp	r1, #21
    a61c:	d006      	beq.n	a62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a61e:	f240 711e 	movw	r1, #1822	; 0x71e
    a622:	2031      	movs	r0, #49	; 0x31
    a624:	f7fa faa0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a628:	2100      	movs	r1, #0
    a62a:	e000      	b.n	a62e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a62c:	2119      	movs	r1, #25
    a62e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a632:	bd10      	pop	{r4, pc}
    a634:	20000174 	.word	0x20000174
    a638:	4807      	ldr	r0, [pc, #28]	; (a658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a63a:	b510      	push	{r4, lr}
    a63c:	6840      	ldr	r0, [r0, #4]
    a63e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a642:	2915      	cmp	r1, #21
    a644:	d004      	beq.n	a650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    a646:	f240 710a 	movw	r1, #1802	; 0x70a
    a64a:	2031      	movs	r0, #49	; 0x31
    a64c:	f7fa fa8c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a650:	2119      	movs	r1, #25
    a652:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a656:	bd10      	pop	{r4, pc}
    a658:	20000174 	.word	0x20000174
    a65c:	b510      	push	{r4, lr}
    a65e:	4c0a      	ldr	r4, [pc, #40]	; (a688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    a660:	2301      	movs	r3, #1
    a662:	2100      	movs	r1, #0
    a664:	6860      	ldr	r0, [r4, #4]
    a666:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a66a:	3078      	adds	r0, #120	; 0x78
    a66c:	f003 ffc5 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a670:	b120      	cbz	r0, a67c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    a672:	6861      	ldr	r1, [r4, #4]
    a674:	2004      	movs	r0, #4
    a676:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a67a:	bd10      	pop	{r4, pc}
    a67c:	f240 61ef 	movw	r1, #1775	; 0x6ef
    a680:	2031      	movs	r0, #49	; 0x31
    a682:	f7fa fa71 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a686:	0000      	.short	0x0000
    a688:	20000174 	.word	0x20000174
    a68c:	4807      	ldr	r0, [pc, #28]	; (a6ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    a68e:	b510      	push	{r4, lr}
    a690:	6840      	ldr	r0, [r0, #4]
    a692:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a696:	2915      	cmp	r1, #21
    a698:	d004      	beq.n	a6a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    a69a:	f240 7104 	movw	r1, #1796	; 0x704
    a69e:	2031      	movs	r0, #49	; 0x31
    a6a0:	f7fa fa62 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6a4:	2117      	movs	r1, #23
    a6a6:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a6aa:	bd10      	pop	{r4, pc}
    a6ac:	20000174 	.word	0x20000174
    a6b0:	b538      	push	{r3, r4, r5, lr}
    a6b2:	4d20      	ldr	r5, [pc, #128]	; (a734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a6b4:	6869      	ldr	r1, [r5, #4]
    a6b6:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a6ba:	281b      	cmp	r0, #27
    a6bc:	d002      	beq.n	a6c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    a6be:	f240 7137 	movw	r1, #1847	; 0x737
    a6c2:	e00e      	b.n	a6e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    a6c4:	2400      	movs	r4, #0
    a6c6:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    a6ca:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    a6ce:	f88d 0000 	strb.w	r0, [sp]
    a6d2:	9800      	ldr	r0, [sp, #0]
    a6d4:	9000      	str	r0, [sp, #0]
    a6d6:	f89d 0000 	ldrb.w	r0, [sp]
    a6da:	2201      	movs	r2, #1
    a6dc:	b120      	cbz	r0, a6e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    a6de:	f240 713b 	movw	r1, #1851	; 0x73b
    a6e2:	2031      	movs	r0, #49	; 0x31
    a6e4:	f7fa fa40 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6e8:	4812      	ldr	r0, [pc, #72]	; (a734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a6ea:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    a6ee:	6840      	ldr	r0, [r0, #4]
    a6f0:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    a6f4:	b143      	cbz	r3, a708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a6f6:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    a6fa:	880a      	ldrh	r2, [r1, #0]
    a6fc:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    a700:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a704:	220a      	movs	r2, #10
    a706:	e007      	b.n	a718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    a708:	880b      	ldrh	r3, [r1, #0]
    a70a:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    a70e:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a712:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    a716:	2209      	movs	r2, #9
    a718:	f7fc fb2c 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a71c:	6868      	ldr	r0, [r5, #4]
    a71e:	8800      	ldrh	r0, [r0, #0]
    a720:	f7fa fe4a 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a724:	f003 fb7e 	bl	de24 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a728:	f7fc fbf6 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a72c:	6868      	ldr	r0, [r5, #4]
    a72e:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    a732:	bd38      	pop	{r3, r4, r5, pc}
    a734:	20000174 	.word	0x20000174
    a738:	b510      	push	{r4, lr}
    a73a:	4c08      	ldr	r4, [pc, #32]	; (a75c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    a73c:	2301      	movs	r3, #1
    a73e:	4619      	mov	r1, r3
    a740:	6860      	ldr	r0, [r4, #4]
    a742:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a746:	3078      	adds	r0, #120	; 0x78
    a748:	f003 ff57 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a74c:	2800      	cmp	r0, #0
    a74e:	d103      	bne.n	a758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    a750:	6861      	ldr	r1, [r4, #4]
    a752:	2008      	movs	r0, #8
    a754:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a758:	bd10      	pop	{r4, pc}
    a75a:	0000      	.short	0x0000
    a75c:	20000174 	.word	0x20000174
    a760:	4815      	ldr	r0, [pc, #84]	; (a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a762:	b510      	push	{r4, lr}
    a764:	6880      	ldr	r0, [r0, #8]
    a766:	7901      	ldrb	r1, [r0, #4]
    a768:	4813      	ldr	r0, [pc, #76]	; (a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a76a:	3010      	adds	r0, #16
    a76c:	6840      	ldr	r0, [r0, #4]
    a76e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a772:	2a0a      	cmp	r2, #10
    a774:	d109      	bne.n	a78a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a776:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    a77a:	428a      	cmp	r2, r1
    a77c:	d105      	bne.n	a78a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a77e:	2100      	movs	r1, #0
    a780:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a784:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a788:	bd10      	pop	{r4, pc}
    a78a:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a78e:	0713      	lsls	r3, r2, #28
    a790:	d507      	bpl.n	a7a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    a792:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    a796:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a79e:	f7fe ba75 	b.w	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a7a2:	29ff      	cmp	r1, #255	; 0xff
    a7a4:	d004      	beq.n	a7b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    a7a6:	f240 61e2 	movw	r1, #1762	; 0x6e2
    a7aa:	2031      	movs	r0, #49	; 0x31
    a7ac:	f7fa f9dc 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7b4:	f7ff be5a 	b.w	a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    a7b8:	20000164 	.word	0x20000164
    a7bc:	b510      	push	{r4, lr}
    a7be:	4c15      	ldr	r4, [pc, #84]	; (a814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    a7c0:	6860      	ldr	r0, [r4, #4]
    a7c2:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a7c6:	0789      	lsls	r1, r1, #30
    a7c8:	d411      	bmi.n	a7ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    a7ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7ce:	2301      	movs	r3, #1
    a7d0:	2100      	movs	r1, #0
    a7d2:	3078      	adds	r0, #120	; 0x78
    a7d4:	f003 ff11 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7d8:	b120      	cbz	r0, a7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    a7da:	6861      	ldr	r1, [r4, #4]
    a7dc:	2006      	movs	r0, #6
    a7de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a7e2:	e009      	b.n	a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    a7e4:	f240 7163 	movw	r1, #1891	; 0x763
    a7e8:	2031      	movs	r0, #49	; 0x31
    a7ea:	f7fa f9bd 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7ee:	2100      	movs	r1, #0
    a7f0:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a7f4:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a7f8:	6860      	ldr	r0, [r4, #4]
    a7fa:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a7fe:	0780      	lsls	r0, r0, #30
    a800:	d507      	bpl.n	a812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    a802:	f7fe fa43 	bl	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a806:	6860      	ldr	r0, [r4, #4]
    a808:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a80c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    a810:	7001      	strb	r1, [r0, #0]
    a812:	bd10      	pop	{r4, pc}
    a814:	20000174 	.word	0x20000174
    a818:	4808      	ldr	r0, [pc, #32]	; (a83c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    a81a:	b510      	push	{r4, lr}
    a81c:	6840      	ldr	r0, [r0, #4]
    a81e:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a822:	b941      	cbnz	r1, a836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    a824:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a828:	2301      	movs	r3, #1
    a82a:	2106      	movs	r1, #6
    a82c:	3078      	adds	r0, #120	; 0x78
    a82e:	f003 fee4 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a832:	2800      	cmp	r0, #0
    a834:	d000      	beq.n	a838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    a836:	2001      	movs	r0, #1
    a838:	bd10      	pop	{r4, pc}
    a83a:	0000      	.short	0x0000
    a83c:	20000174 	.word	0x20000174
    a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a842:	4c5e      	ldr	r4, [pc, #376]	; (a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a844:	4607      	mov	r7, r0
    a846:	4615      	mov	r5, r2
    a848:	6860      	ldr	r0, [r4, #4]
    a84a:	2200      	movs	r2, #0
    a84c:	b111      	cbz	r1, a854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a84e:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    a852:	e006      	b.n	a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    a854:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    a858:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    a85c:	4411      	add	r1, r2
    a85e:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    a862:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    a866:	f88d 1000 	strb.w	r1, [sp]
    a86a:	9900      	ldr	r1, [sp, #0]
    a86c:	9100      	str	r1, [sp, #0]
    a86e:	f89d 1000 	ldrb.w	r1, [sp]
    a872:	b939      	cbnz	r1, a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    a874:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a878:	2301      	movs	r3, #1
    a87a:	4619      	mov	r1, r3
    a87c:	3078      	adds	r0, #120	; 0x78
    a87e:	f003 febc 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a882:	b130      	cbz	r0, a892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    a884:	6860      	ldr	r0, [r4, #4]
    a886:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    a88a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    a88e:	4411      	add	r1, r2
    a890:	8001      	strh	r1, [r0, #0]
    a892:	6861      	ldr	r1, [r4, #4]
    a894:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a898:	b130      	cbz	r0, a8a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    a89a:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    a89e:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    a8a2:	441a      	add	r2, r3
    a8a4:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a8a8:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    a8ac:	2a00      	cmp	r2, #0
    a8ae:	dd06      	ble.n	a8be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    a8b0:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    a8b4:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    a8b8:	4433      	add	r3, r6
    a8ba:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    a8be:	263d      	movs	r6, #61	; 0x3d
    a8c0:	b117      	cbz	r7, a8c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    a8c2:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    a8c6:	e016      	b.n	a8f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    a8c8:	4b3c      	ldr	r3, [pc, #240]	; (a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a8ca:	3b10      	subs	r3, #16
    a8cc:	781b      	ldrb	r3, [r3, #0]
    a8ce:	2b02      	cmp	r3, #2
    a8d0:	d00b      	beq.n	a8ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    a8d2:	2b01      	cmp	r3, #1
    a8d4:	d015      	beq.n	a902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    a8d6:	b36d      	cbz	r5, a934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    a8d8:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a8dc:	2208      	movs	r2, #8
    a8de:	f7fc fa49 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a8e2:	06e8      	lsls	r0, r5, #27
    a8e4:	d510      	bpl.n	a908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    a8e6:	201e      	movs	r0, #30
    a8e8:	e01b      	b.n	a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a8ea:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    a8ee:	2806      	cmp	r0, #6
    a8f0:	d048      	beq.n	a984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a8f2:	2016      	movs	r0, #22
    a8f4:	e046      	b.n	a984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a8f6:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a8fa:	2208      	movs	r2, #8
    a8fc:	f7fc fa3a 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a900:	e049      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a902:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    a906:	e03d      	b.n	a984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a908:	0728      	lsls	r0, r5, #28
    a90a:	d503      	bpl.n	a914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    a90c:	6860      	ldr	r0, [r4, #4]
    a90e:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    a912:	e040      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a914:	06a8      	lsls	r0, r5, #26
    a916:	d501      	bpl.n	a91c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    a918:	2023      	movs	r0, #35	; 0x23
    a91a:	e002      	b.n	a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a91c:	07a8      	lsls	r0, r5, #30
    a91e:	d004      	beq.n	a92a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    a920:	202a      	movs	r0, #42	; 0x2a
    a922:	6861      	ldr	r1, [r4, #4]
    a924:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a928:	e035      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a92a:	f640 4173 	movw	r1, #3187	; 0xc73
    a92e:	2031      	movs	r0, #49	; 0x31
    a930:	f7fa f91a 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a934:	b128      	cbz	r0, a942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    a936:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    a93a:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    a93e:	4298      	cmp	r0, r3
    a940:	d216      	bcs.n	a970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a942:	2a00      	cmp	r2, #0
    a944:	dd05      	ble.n	a952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    a946:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    a94a:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    a94e:	4290      	cmp	r0, r2
    a950:	d20e      	bcs.n	a970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a952:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    a956:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    a95a:	4282      	cmp	r2, r0
    a95c:	d30a      	bcc.n	a974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    a95e:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    a962:	f88d 2000 	strb.w	r2, [sp]
    a966:	9a00      	ldr	r2, [sp, #0]
    a968:	9200      	str	r2, [sp, #0]
    a96a:	f89d 2000 	ldrb.w	r2, [sp]
    a96e:	b10a      	cbz	r2, a974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    a970:	2022      	movs	r0, #34	; 0x22
    a972:	e007      	b.n	a984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a974:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    a978:	b13a      	cbz	r2, a98a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    a97a:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    a97e:	4282      	cmp	r2, r0
    a980:	d309      	bcc.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a982:	2008      	movs	r0, #8
    a984:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a988:	e7b5      	b.n	a8f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    a98a:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    a98e:	2806      	cmp	r0, #6
    a990:	d301      	bcc.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a992:	203e      	movs	r0, #62	; 0x3e
    a994:	e7f6      	b.n	a984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a996:	6860      	ldr	r0, [r4, #4]
    a998:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    a99c:	f88d 1000 	strb.w	r1, [sp]
    a9a0:	9900      	ldr	r1, [sp, #0]
    a9a2:	9100      	str	r1, [sp, #0]
    a9a4:	f89d 1000 	ldrb.w	r1, [sp]
    a9a8:	b119      	cbz	r1, a9b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    a9aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a9ae:	f005 babf 	b.w	ff30 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a9b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a9b6:	2100      	movs	r1, #0
    a9b8:	f7fd bc38 	b.w	822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a9bc:	20000174 	.word	0x20000174
    a9c0:	b570      	push	{r4, r5, r6, lr}
    a9c2:	4d2e      	ldr	r5, [pc, #184]	; (aa7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    a9c4:	6868      	ldr	r0, [r5, #4]
    a9c6:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a9ca:	b151      	cbz	r1, a9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    a9cc:	2901      	cmp	r1, #1
    a9ce:	d008      	beq.n	a9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    a9d0:	2902      	cmp	r1, #2
    a9d2:	d009      	beq.n	a9e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    a9d4:	2903      	cmp	r1, #3
    a9d6:	d007      	beq.n	a9e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    a9d8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    a9dc:	2031      	movs	r0, #49	; 0x31
    a9de:	f7fa f8c3 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9e2:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    a9e6:	e037      	b.n	aa58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    a9e8:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a9ec:	2908      	cmp	r1, #8
    a9ee:	d036      	beq.n	aa5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    a9f0:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    a9f4:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    a9f8:	2400      	movs	r4, #0
    a9fa:	1c93      	adds	r3, r2, #2
    a9fc:	4299      	cmp	r1, r3
    a9fe:	d306      	bcc.n	aa0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    aa00:	1a89      	subs	r1, r1, r2
    aa02:	1e89      	subs	r1, r1, #2
    aa04:	040c      	lsls	r4, r1, #16
    aa06:	0c24      	lsrs	r4, r4, #16
    aa08:	d001      	beq.n	aa0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    aa0a:	1e64      	subs	r4, r4, #1
    aa0c:	b2a4      	uxth	r4, r4
    aa0e:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    aa12:	b139      	cbz	r1, aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    aa14:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa18:	2301      	movs	r3, #1
    aa1a:	2109      	movs	r1, #9
    aa1c:	3078      	adds	r0, #120	; 0x78
    aa1e:	f003 fdec 	bl	e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa22:	b340      	cbz	r0, aa76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    aa24:	f7ff fef8 	bl	a818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    aa28:	b178      	cbz	r0, aa4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    aa2a:	686a      	ldr	r2, [r5, #4]
    aa2c:	2000      	movs	r0, #0
    aa2e:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    aa32:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    aa36:	1c93      	adds	r3, r2, #2
    aa38:	4299      	cmp	r1, r3
    aa3a:	d303      	bcc.n	aa44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    aa3c:	1a88      	subs	r0, r1, r2
    aa3e:	1e80      	subs	r0, r0, #2
    aa40:	d000      	beq.n	aa44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    aa42:	1e40      	subs	r0, r0, #1
    aa44:	42a0      	cmp	r0, r4
    aa46:	d200      	bcs.n	aa4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    aa48:	b284      	uxth	r4, r0
    aa4a:	b10c      	cbz	r4, aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    aa4c:	1e64      	subs	r4, r4, #1
    aa4e:	b2a4      	uxth	r4, r4
    aa50:	6868      	ldr	r0, [r5, #4]
    aa52:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    aa56:	4421      	add	r1, r4
    aa58:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    aa5c:	bd70      	pop	{r4, r5, r6, pc}
    aa5e:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    aa62:	2903      	cmp	r1, #3
    aa64:	d3bd      	bcc.n	a9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    aa66:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    aa6a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    aa6c:	4411      	add	r1, r2
    aa6e:	1c49      	adds	r1, r1, #1
    aa70:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    aa74:	bd70      	pop	{r4, r5, r6, pc}
    aa76:	2400      	movs	r4, #0
    aa78:	e7ea      	b.n	aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    aa7a:	0000      	.short	0x0000
    aa7c:	20000174 	.word	0x20000174

0000aa80 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    aa80:	4903      	ldr	r1, [pc, #12]	; (aa90 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    aa82:	884a      	ldrh	r2, [r1, #2]
    aa84:	8002      	strh	r2, [r0, #0]
    aa86:	7809      	ldrb	r1, [r1, #0]
    aa88:	7081      	strb	r1, [r0, #2]
    aa8a:	2000      	movs	r0, #0
    aa8c:	4770      	bx	lr
    aa8e:	0000      	.short	0x0000
    aa90:	2000124c 	.word	0x2000124c

0000aa94 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    aa94:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    aa96:	460c      	mov	r4, r1
    aa98:	4605      	mov	r5, r0
    aa9a:	8800      	ldrh	r0, [r0, #0]
    aa9c:	4669      	mov	r1, sp
    aa9e:	f003 fd82 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    aaa2:	2200      	movs	r2, #0
    aaa4:	b128      	cbz	r0, aab2 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    aaa6:	f8c4 2002 	str.w	r2, [r4, #2]
    aaaa:	71a2      	strb	r2, [r4, #6]
    aaac:	8022      	strh	r2, [r4, #0]
    aaae:	2002      	movs	r0, #2
    aab0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aab2:	9901      	ldr	r1, [sp, #4]
    aab4:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    aab8:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    aabc:	f8d1 0017 	ldr.w	r0, [r1, #23]
    aac0:	f8c4 0002 	str.w	r0, [r4, #2]
    aac4:	7ec8      	ldrb	r0, [r1, #27]
    aac6:	71a0      	strb	r0, [r4, #6]
    aac8:	8828      	ldrh	r0, [r5, #0]
    aaca:	8020      	strh	r0, [r4, #0]
    aacc:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    aad0:	f88d 0008 	strb.w	r0, [sp, #8]
    aad4:	9802      	ldr	r0, [sp, #8]
    aad6:	9002      	str	r0, [sp, #8]
    aad8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aadc:	2800      	cmp	r0, #0
    aade:	d1eb      	bne.n	aab8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    aae0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000aae4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    aae4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    aae6:	460d      	mov	r5, r1
    aae8:	4606      	mov	r6, r0
    aaea:	8800      	ldrh	r0, [r0, #0]
    aaec:	4669      	mov	r1, sp
    aaee:	f003 fd5a 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    aaf2:	2800      	cmp	r0, #0
    aaf4:	d11a      	bne.n	ab2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    aaf6:	f8dd 4004 	ldr.w	r4, [sp, #4]
    aafa:	2700      	movs	r7, #0
    aafc:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    ab00:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    ab04:	f005 ff66 	bl	109d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    ab08:	70a8      	strb	r0, [r5, #2]
    ab0a:	7860      	ldrb	r0, [r4, #1]
    ab0c:	f005 ff62 	bl	109d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    ab10:	70e8      	strb	r0, [r5, #3]
    ab12:	78a0      	ldrb	r0, [r4, #2]
    ab14:	f88d 0008 	strb.w	r0, [sp, #8]
    ab18:	9802      	ldr	r0, [sp, #8]
    ab1a:	9002      	str	r0, [sp, #8]
    ab1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab20:	3c6e      	subs	r4, #110	; 0x6e
    ab22:	2800      	cmp	r0, #0
    ab24:	d1ea      	bne.n	aafc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    ab26:	8830      	ldrh	r0, [r6, #0]
    ab28:	8028      	strh	r0, [r5, #0]
    ab2a:	2000      	movs	r0, #0
    ab2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000ab30 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    ab30:	4903      	ldr	r1, [pc, #12]	; (ab40 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    ab32:	888a      	ldrh	r2, [r1, #4]
    ab34:	8002      	strh	r2, [r0, #0]
    ab36:	88c9      	ldrh	r1, [r1, #6]
    ab38:	8041      	strh	r1, [r0, #2]
    ab3a:	2000      	movs	r0, #0
    ab3c:	4770      	bx	lr
    ab3e:	0000      	.short	0x0000
    ab40:	200002b4 	.word	0x200002b4

0000ab44 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    ab44:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ab46:	2400      	movs	r4, #0
    ab48:	a902      	add	r1, sp, #8
    ab4a:	f88d 4004 	strb.w	r4, [sp, #4]
    ab4e:	f88d 4008 	strb.w	r4, [sp, #8]
    ab52:	9100      	str	r1, [sp, #0]
    ab54:	7882      	ldrb	r2, [r0, #2]
    ab56:	7841      	ldrb	r1, [r0, #1]
    ab58:	7800      	ldrb	r0, [r0, #0]
    ab5a:	ab01      	add	r3, sp, #4
    ab5c:	f006 f8cc 	bl	10cf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    ab60:	2800      	cmp	r0, #0
    ab62:	d112      	bne.n	ab8a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    ab64:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ab68:	f006 f800 	bl	10b6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    ab6c:	b170      	cbz	r0, ab8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    ab6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab72:	f005 fffb 	bl	10b6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    ab76:	b148      	cbz	r0, ab8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    ab78:	4805      	ldr	r0, [pc, #20]	; (ab90 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    ab7a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ab7e:	7381      	strb	r1, [r0, #14]
    ab80:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ab84:	73c1      	strb	r1, [r0, #15]
    ab86:	8204      	strh	r4, [r0, #16]
    ab88:	2000      	movs	r0, #0
    ab8a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab8c:	2011      	movs	r0, #17
    ab8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab90:	2000124c 	.word	0x2000124c

0000ab94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ab94:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ab98:	460f      	mov	r7, r1
    ab9a:	4605      	mov	r5, r0
    ab9c:	7806      	ldrb	r6, [r0, #0]
    ab9e:	f005 ff98 	bl	10ad2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    aba2:	2800      	cmp	r0, #0
    aba4:	d10a      	bne.n	abbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    aba6:	4628      	mov	r0, r5
    aba8:	f005 ff6d 	bl	10a86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    abac:	2800      	cmp	r0, #0
    abae:	d105      	bne.n	abbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    abb0:	2001      	movs	r0, #1
    abb2:	f7fa f9cf 	bl	4f54 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    abb6:	4286      	cmp	r6, r0
    abb8:	d302      	bcc.n	abc0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    abba:	2007      	movs	r0, #7
    abbc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    abc0:	2101      	movs	r1, #1
    abc2:	4630      	mov	r0, r6
    abc4:	f003 fa52 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    abc8:	0004      	movs	r4, r0
    abca:	d004      	beq.n	abd6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    abcc:	f004 fda3 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    abd0:	b170      	cbz	r0, abf0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    abd2:	200c      	movs	r0, #12
    abd4:	e7f2      	b.n	abbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    abd6:	2200      	movs	r2, #0
    abd8:	2101      	movs	r1, #1
    abda:	4630      	mov	r0, r6
    abdc:	f003 fa3c 	bl	e058 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    abe0:	0004      	movs	r4, r0
    abe2:	d013      	beq.n	ac0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    abe4:	4817      	ldr	r0, [pc, #92]	; (ac44 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    abe6:	f990 1000 	ldrsb.w	r1, [r0]
    abea:	4620      	mov	r0, r4
    abec:	f004 fb2f 	bl	f24e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    abf0:	4620      	mov	r0, r4
    abf2:	f004 fbd8 	bl	f3a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    abf6:	7038      	strb	r0, [r7, #0]
    abf8:	74e8      	strb	r0, [r5, #19]
    abfa:	4629      	mov	r1, r5
    abfc:	4620      	mov	r0, r4
    abfe:	f7fc fb89 	bl	7314 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    ac02:	4606      	mov	r6, r0
    ac04:	7e68      	ldrb	r0, [r5, #25]
    ac06:	b1d0      	cbz	r0, ac3e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    ac08:	b12e      	cbz	r6, ac16 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    ac0a:	e018      	b.n	ac3e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    ac0c:	f241 215a 	movw	r1, #4698	; 0x125a
    ac10:	2039      	movs	r0, #57	; 0x39
    ac12:	f7f9 ffa9 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac16:	2200      	movs	r2, #0
    ac18:	4668      	mov	r0, sp
    ac1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ac1c:	f003 faea 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ac20:	2200      	movs	r2, #0
    ac22:	2101      	movs	r1, #1
    ac24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ac26:	f003 fb5b 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ac2a:	2204      	movs	r2, #4
    ac2c:	4668      	mov	r0, sp
    ac2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ac30:	f003 fae0 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ac34:	2200      	movs	r2, #0
    ac36:	4611      	mov	r1, r2
    ac38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ac3a:	f003 fb51 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ac3e:	4630      	mov	r0, r6
    ac40:	e7bc      	b.n	abbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ac42:	0000      	.short	0x0000
    ac44:	200002ac 	.word	0x200002ac

0000ac48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ac48:	7801      	ldrb	r1, [r0, #0]
    ac4a:	b171      	cbz	r1, ac6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac4c:	7841      	ldrb	r1, [r0, #1]
    ac4e:	b161      	cbz	r1, ac6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac50:	8841      	ldrh	r1, [r0, #2]
    ac52:	291b      	cmp	r1, #27
    ac54:	d309      	bcc.n	ac6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac56:	8881      	ldrh	r1, [r0, #4]
    ac58:	291b      	cmp	r1, #27
    ac5a:	d306      	bcc.n	ac6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac5c:	4904      	ldr	r1, [pc, #16]	; (ac70 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ac5e:	6802      	ldr	r2, [r0, #0]
    ac60:	600a      	str	r2, [r1, #0]
    ac62:	8880      	ldrh	r0, [r0, #4]
    ac64:	8088      	strh	r0, [r1, #4]
    ac66:	2000      	movs	r0, #0
    ac68:	4770      	bx	lr
    ac6a:	2012      	movs	r0, #18
    ac6c:	4770      	bx	lr
    ac6e:	0000      	.short	0x0000
    ac70:	2000124c 	.word	0x2000124c

0000ac74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ac74:	6800      	ldr	r0, [r0, #0]
    ac76:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ac7a:	4288      	cmp	r0, r1
    ac7c:	d303      	bcc.n	ac86 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ac7e:	4903      	ldr	r1, [pc, #12]	; (ac8c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ac80:	6088      	str	r0, [r1, #8]
    ac82:	2000      	movs	r0, #0
    ac84:	4770      	bx	lr
    ac86:	2012      	movs	r0, #18
    ac88:	4770      	bx	lr
    ac8a:	0000      	.short	0x0000
    ac8c:	2000124c 	.word	0x2000124c

0000ac90 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ac90:	4a03      	ldr	r2, [pc, #12]	; (aca0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ac92:	e9d2 1200 	ldrd	r1, r2, [r2]
    ac96:	6001      	str	r1, [r0, #0]
    ac98:	6042      	str	r2, [r0, #4]
    ac9a:	2000      	movs	r0, #0
    ac9c:	4770      	bx	lr
    ac9e:	0000      	.short	0x0000
    aca0:	0000b0fc 	.word	0x0000b0fc

0000aca4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    aca4:	b510      	push	{r4, lr}
    aca6:	2005      	movs	r0, #5
    aca8:	f000 faa2 	bl	b1f0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    acac:	f7fd fe38 	bl	8920 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    acb0:	4902      	ldr	r1, [pc, #8]	; (acbc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    acb2:	4801      	ldr	r0, [pc, #4]	; (acb8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    acb4:	6048      	str	r0, [r1, #4]
    acb6:	bd10      	pop	{r4, pc}
    acb8:	0000acc1 	.word	0x0000acc1
    acbc:	200002ac 	.word	0x200002ac
    acc0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    acc4:	4613      	mov	r3, r2
    acc6:	4a33      	ldr	r2, [pc, #204]	; (ad94 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    acc8:	460f      	mov	r7, r1
    acca:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    acce:	8814      	ldrh	r4, [r2, #0]
    acd0:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    acd4:	428c      	cmp	r4, r1
    acd6:	d200      	bcs.n	acda <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    acd8:	4621      	mov	r1, r4
    acda:	4688      	mov	r8, r1
    acdc:	8891      	ldrh	r1, [r2, #4]
    acde:	42b1      	cmp	r1, r6
    ace0:	d200      	bcs.n	ace4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    ace2:	460e      	mov	r6, r1
    ace4:	8851      	ldrh	r1, [r2, #2]
    ace6:	f640 0448 	movw	r4, #2120	; 0x848
    acea:	42a1      	cmp	r1, r4
    acec:	d300      	bcc.n	acf0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    acee:	4621      	mov	r1, r4
    acf0:	88d5      	ldrh	r5, [r2, #6]
    acf2:	42a5      	cmp	r5, r4
    acf4:	d300      	bcc.n	acf8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    acf6:	4625      	mov	r5, r4
    acf8:	42a1      	cmp	r1, r4
    acfa:	d200      	bcs.n	acfe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    acfc:	460c      	mov	r4, r1
    acfe:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ad02:	2e1b      	cmp	r6, #27
    ad04:	d001      	beq.n	ad0a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    ad06:	4295      	cmp	r5, r2
    ad08:	d104      	bne.n	ad14 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    ad0a:	f1b8 0f1b 	cmp.w	r8, #27
    ad0e:	d03e      	beq.n	ad8e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    ad10:	4294      	cmp	r4, r2
    ad12:	d03c      	beq.n	ad8e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    ad14:	466a      	mov	r2, sp
    ad16:	4619      	mov	r1, r3
    ad18:	f005 ff4b 	bl	10bb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    ad1c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ad20:	4641      	mov	r1, r8
    ad22:	4540      	cmp	r0, r8
    ad24:	d900      	bls.n	ad28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    ad26:	4608      	mov	r0, r1
    ad28:	80f8      	strh	r0, [r7, #6]
    ad2a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad2e:	42a1      	cmp	r1, r4
    ad30:	d800      	bhi.n	ad34 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    ad32:	460c      	mov	r4, r1
    ad34:	813c      	strh	r4, [r7, #8]
    ad36:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ad3a:	42b1      	cmp	r1, r6
    ad3c:	d800      	bhi.n	ad40 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    ad3e:	460e      	mov	r6, r1
    ad40:	807e      	strh	r6, [r7, #2]
    ad42:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ad46:	42a9      	cmp	r1, r5
    ad48:	d800      	bhi.n	ad4c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    ad4a:	460d      	mov	r5, r1
    ad4c:	80bd      	strh	r5, [r7, #4]
    ad4e:	21ff      	movs	r1, #255	; 0xff
    ad50:	7039      	strb	r1, [r7, #0]
    ad52:	381b      	subs	r0, #27
    ad54:	28e0      	cmp	r0, #224	; 0xe0
    ad56:	d902      	bls.n	ad5e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    ad58:	f640 41b8 	movw	r1, #3256	; 0xcb8
    ad5c:	e014      	b.n	ad88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ad5e:	3e1b      	subs	r6, #27
    ad60:	2ee0      	cmp	r6, #224	; 0xe0
    ad62:	d902      	bls.n	ad6a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    ad64:	f640 41ba 	movw	r1, #3258	; 0xcba
    ad68:	e00e      	b.n	ad88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ad6a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ad6e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ad72:	4284      	cmp	r4, r0
    ad74:	d902      	bls.n	ad7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    ad76:	f640 41bc 	movw	r1, #3260	; 0xcbc
    ad7a:	e005      	b.n	ad88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ad7c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    ad80:	4285      	cmp	r5, r0
    ad82:	d904      	bls.n	ad8e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    ad84:	f640 41be 	movw	r1, #3262	; 0xcbe
    ad88:	2039      	movs	r0, #57	; 0x39
    ad8a:	f7f9 feed 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad8e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    ad92:	0000      	.short	0x0000
    ad94:	200002b4 	.word	0x200002b4
    ad98:	b510      	push	{r4, lr}
    ad9a:	480e      	ldr	r0, [pc, #56]	; (add4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    ad9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ada0:	4b0d      	ldr	r3, [pc, #52]	; (add8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    ada2:	8281      	strh	r1, [r0, #20]
    ada4:	2100      	movs	r1, #0
    ada6:	7581      	strb	r1, [r0, #22]
    ada8:	8301      	strh	r1, [r0, #24]
    adaa:	221b      	movs	r2, #27
    adac:	801a      	strh	r2, [r3, #0]
    adae:	f44f 74a4 	mov.w	r4, #328	; 0x148
    adb2:	805c      	strh	r4, [r3, #2]
    adb4:	809a      	strh	r2, [r3, #4]
    adb6:	80dc      	strh	r4, [r3, #6]
    adb8:	7381      	strb	r1, [r0, #14]
    adba:	73c1      	strb	r1, [r0, #15]
    adbc:	2303      	movs	r3, #3
    adbe:	7003      	strb	r3, [r0, #0]
    adc0:	2302      	movs	r3, #2
    adc2:	7043      	strb	r3, [r0, #1]
    adc4:	8042      	strh	r2, [r0, #2]
    adc6:	8082      	strh	r2, [r0, #4]
    adc8:	f640 62a6 	movw	r2, #3750	; 0xea6
    adcc:	6082      	str	r2, [r0, #8]
    adce:	7481      	strb	r1, [r0, #18]
    add0:	7301      	strb	r1, [r0, #12]
    add2:	bd10      	pop	{r4, pc}
    add4:	2000124c 	.word	0x2000124c
    add8:	200002b4 	.word	0x200002b4
    addc:	b510      	push	{r4, lr}
    adde:	2101      	movs	r1, #1
    ade0:	2000      	movs	r0, #0
    ade2:	f003 f943 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ade6:	0004      	movs	r4, r0
    ade8:	d10c      	bne.n	ae04 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    adea:	2200      	movs	r2, #0
    adec:	2101      	movs	r1, #1
    adee:	4610      	mov	r0, r2
    adf0:	f003 f932 	bl	e058 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    adf4:	0004      	movs	r4, r0
    adf6:	d007      	beq.n	ae08 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    adf8:	4806      	ldr	r0, [pc, #24]	; (ae14 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    adfa:	f990 1000 	ldrsb.w	r1, [r0]
    adfe:	4620      	mov	r0, r4
    ae00:	f004 fa25 	bl	f24e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ae04:	4620      	mov	r0, r4
    ae06:	bd10      	pop	{r4, pc}
    ae08:	f240 2135 	movw	r1, #565	; 0x235
    ae0c:	2039      	movs	r0, #57	; 0x39
    ae0e:	f7f9 feab 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae12:	0000      	.short	0x0000
    ae14:	200002ac 	.word	0x200002ac

0000ae18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae1c:	b088      	sub	sp, #32
    ae1e:	460c      	mov	r4, r1
    ae20:	4606      	mov	r6, r0
    ae22:	f004 fac3 	bl	f3ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ae26:	b198      	cbz	r0, ae50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    ae28:	4630      	mov	r0, r6
    ae2a:	f004 fab2 	bl	f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ae2e:	b130      	cbz	r0, ae3e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ae30:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ae34:	2012      	movs	r0, #18
    ae36:	2900      	cmp	r1, #0
    ae38:	d00b      	beq.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae3a:	2980      	cmp	r1, #128	; 0x80
    ae3c:	d809      	bhi.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae3e:	4630      	mov	r0, r6
    ae40:	f004 fa96 	bl	f370 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ae44:	b140      	cbz	r0, ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ae46:	4630      	mov	r0, r6
    ae48:	f004 f9cb 	bl	f1e2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    ae4c:	b130      	cbz	r0, ae5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    ae4e:	e009      	b.n	ae64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    ae50:	2042      	movs	r0, #66	; 0x42
    ae52:	b008      	add	sp, #32
    ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae58:	200c      	movs	r0, #12
    ae5a:	e7fa      	b.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae5c:	4630      	mov	r0, r6
    ae5e:	f004 fa92 	bl	f386 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ae62:	b3c0      	cbz	r0, aed6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ae64:	4630      	mov	r0, r6
    ae66:	f004 fc56 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ae6a:	2800      	cmp	r0, #0
    ae6c:	d1f4      	bne.n	ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ae6e:	4630      	mov	r0, r6
    ae70:	f004 f9d2 	bl	f218 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ae74:	2800      	cmp	r0, #0
    ae76:	d1ef      	bne.n	ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ae78:	4630      	mov	r0, r6
    ae7a:	f7fc f9e9 	bl	7250 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ae7e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ae82:	f242 7110 	movw	r1, #10000	; 0x2710
    ae86:	fb00 f801 	mul.w	r8, r0, r1
    ae8a:	78e1      	ldrb	r1, [r4, #3]
    ae8c:	4630      	mov	r0, r6
    ae8e:	f004 fa66 	bl	f35e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ae92:	4630      	mov	r0, r6
    ae94:	f004 fa79 	bl	f38a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ae98:	b300      	cbz	r0, aedc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    ae9a:	2200      	movs	r2, #0
    ae9c:	4611      	mov	r1, r2
    ae9e:	a801      	add	r0, sp, #4
    aea0:	f7fa f8cc 	bl	503c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    aea4:	0004      	movs	r4, r0
    aea6:	d06d      	beq.n	af84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    aea8:	2100      	movs	r1, #0
    aeaa:	f7fb fd6d 	bl	6988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    aeae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    aeb2:	8020      	strh	r0, [r4, #0]
    aeb4:	4621      	mov	r1, r4
    aeb6:	4630      	mov	r0, r6
    aeb8:	f004 fa8b 	bl	f3d2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    aebc:	f000 f9a4 	bl	b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    aec0:	0940      	lsrs	r0, r0, #5
    aec2:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    aec6:	07c0      	lsls	r0, r0, #31
    aec8:	4d3a      	ldr	r5, [pc, #232]	; (afb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    aeca:	f104 0030 	add.w	r0, r4, #48	; 0x30
    aece:	d00f      	beq.n	aef0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    aed0:	8869      	ldrh	r1, [r5, #2]
    aed2:	88aa      	ldrh	r2, [r5, #4]
    aed4:	e00e      	b.n	aef4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    aed6:	e7ff      	b.n	aed8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    aed8:	2012      	movs	r0, #18
    aeda:	e7ba      	b.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aedc:	4642      	mov	r2, r8
    aede:	2100      	movs	r1, #0
    aee0:	4630      	mov	r0, r6
    aee2:	f7fd f8b1 	bl	8048 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    aee6:	2800      	cmp	r0, #0
    aee8:	d0b3      	beq.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aeea:	f241 417b 	movw	r1, #5243	; 0x147b
    aeee:	e053      	b.n	af98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    aef0:	211b      	movs	r1, #27
    aef2:	460a      	mov	r2, r1
    aef4:	84c1      	strh	r1, [r0, #38]	; 0x26
    aef6:	8502      	strh	r2, [r0, #40]	; 0x28
    aef8:	68a8      	ldr	r0, [r5, #8]
    aefa:	6320      	str	r0, [r4, #48]	; 0x30
    aefc:	f641 574c 	movw	r7, #7500	; 0x1d4c
    af00:	4630      	mov	r0, r6
    af02:	f004 fa4a 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    af06:	b910      	cbnz	r0, af0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    af08:	4630      	mov	r0, r6
    af0a:	f004 fa60 	bl	f3ce <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    af0e:	6127      	str	r7, [r4, #16]
    af10:	8821      	ldrh	r1, [r4, #0]
    af12:	f8ad 1008 	strh.w	r1, [sp, #8]
    af16:	7ba9      	ldrb	r1, [r5, #14]
    af18:	f88d 100a 	strb.w	r1, [sp, #10]
    af1c:	7be9      	ldrb	r1, [r5, #15]
    af1e:	f88d 100b 	strb.w	r1, [sp, #11]
    af22:	8a29      	ldrh	r1, [r5, #16]
    af24:	f8ad 100c 	strh.w	r1, [sp, #12]
    af28:	a905      	add	r1, sp, #20
    af2a:	9100      	str	r1, [sp, #0]
    af2c:	2001      	movs	r0, #1
    af2e:	ab04      	add	r3, sp, #16
    af30:	aa02      	add	r2, sp, #8
    af32:	4621      	mov	r1, r4
    af34:	f005 fe73 	bl	10c1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    af38:	b140      	cbz	r0, af4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    af3a:	2100      	movs	r1, #0
    af3c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    af40:	f7fa f8a6 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    af44:	b1f0      	cbz	r0, af84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    af46:	f241 41cb 	movw	r1, #5323	; 0x14cb
    af4a:	e025      	b.n	af98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    af4c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    af50:	f88d 0018 	strb.w	r0, [sp, #24]
    af54:	f89d 0014 	ldrb.w	r0, [sp, #20]
    af58:	f88d 0019 	strb.w	r0, [sp, #25]
    af5c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    af60:	f8ad 001a 	strh.w	r0, [sp, #26]
    af64:	a906      	add	r1, sp, #24
    af66:	4620      	mov	r0, r4
    af68:	f003 fbdd 	bl	e726 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    af6c:	7868      	ldrb	r0, [r5, #1]
    af6e:	9000      	str	r0, [sp, #0]
    af70:	782b      	ldrb	r3, [r5, #0]
    af72:	88aa      	ldrh	r2, [r5, #4]
    af74:	8869      	ldrh	r1, [r5, #2]
    af76:	8820      	ldrh	r0, [r4, #0]
    af78:	f7fa f956 	bl	5228 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    af7c:	b120      	cbz	r0, af88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    af7e:	f241 41d6 	movw	r1, #5334	; 0x14d6
    af82:	e009      	b.n	af98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    af84:	2009      	movs	r0, #9
    af86:	e764      	b.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af88:	4642      	mov	r2, r8
    af8a:	4621      	mov	r1, r4
    af8c:	4630      	mov	r0, r6
    af8e:	f7fd f85b 	bl	8048 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    af92:	b120      	cbz	r0, af9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    af94:	f241 41d8 	movw	r1, #5336	; 0x14d8
    af98:	2039      	movs	r0, #57	; 0x39
    af9a:	f7f9 fde5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af9e:	4806      	ldr	r0, [pc, #24]	; (afb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    afa0:	6843      	ldr	r3, [r0, #4]
    afa2:	b123      	cbz	r3, afae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    afa4:	2200      	movs	r2, #0
    afa6:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    afaa:	4620      	mov	r0, r4
    afac:	4798      	blx	r3
    afae:	2000      	movs	r0, #0
    afb0:	e74f      	b.n	ae52 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    afb2:	0000      	.short	0x0000
    afb4:	2000124c 	.word	0x2000124c
    afb8:	200002ac 	.word	0x200002ac
    afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afc0:	b088      	sub	sp, #32
    afc2:	4604      	mov	r4, r0
    afc4:	8800      	ldrh	r0, [r0, #0]
    afc6:	a906      	add	r1, sp, #24
    afc8:	f003 faed 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    afcc:	2800      	cmp	r0, #0
    afce:	d147      	bne.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    afd0:	9807      	ldr	r0, [sp, #28]
    afd2:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    afd6:	f88d 1008 	strb.w	r1, [sp, #8]
    afda:	9902      	ldr	r1, [sp, #8]
    afdc:	9102      	str	r1, [sp, #8]
    afde:	f89d 1008 	ldrb.w	r1, [sp, #8]
    afe2:	3078      	adds	r0, #120	; 0x78
    afe4:	b101      	cbz	r1, afe8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    afe6:	2101      	movs	r1, #1
    afe8:	f88d 100c 	strb.w	r1, [sp, #12]
    afec:	7bc1      	ldrb	r1, [r0, #15]
    afee:	f04f 0800 	mov.w	r8, #0
    aff2:	0689      	lsls	r1, r1, #26
    aff4:	d502      	bpl.n	affc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    aff6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    affa:	b149      	cbz	r1, b010 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    affc:	f05f 0100 	movs.w	r1, #0
    b000:	f88d 1004 	strb.w	r1, [sp, #4]
    b004:	2105      	movs	r1, #5
    b006:	305c      	adds	r0, #92	; 0x5c
    b008:	f004 ffd6 	bl	ffb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    b00c:	b110      	cbz	r0, b014 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    b00e:	e004      	b.n	b01a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    b010:	2101      	movs	r1, #1
    b012:	e7f5      	b.n	b000 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    b014:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b018:	b308      	cbz	r0, b05e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b01a:	8921      	ldrh	r1, [r4, #8]
    b01c:	88e0      	ldrh	r0, [r4, #6]
    b01e:	f005 fdba 	bl	10b96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b022:	2800      	cmp	r0, #0
    b024:	d11c      	bne.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b026:	88a1      	ldrh	r1, [r4, #4]
    b028:	8860      	ldrh	r0, [r4, #2]
    b02a:	f005 fdb4 	bl	10b96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b02e:	2800      	cmp	r0, #0
    b030:	d116      	bne.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b032:	8921      	ldrh	r1, [r4, #8]
    b034:	88e0      	ldrh	r0, [r4, #6]
    b036:	f005 fda4 	bl	10b82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b03a:	2800      	cmp	r0, #0
    b03c:	d110      	bne.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b03e:	88a1      	ldrh	r1, [r4, #4]
    b040:	8860      	ldrh	r0, [r4, #2]
    b042:	f005 fd9e 	bl	10b82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b046:	0006      	movs	r6, r0
    b048:	d10a      	bne.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b04a:	9807      	ldr	r0, [sp, #28]
    b04c:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    b050:	27ff      	movs	r7, #255	; 0xff
    b052:	706f      	strb	r7, [r5, #1]
    b054:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b058:	b129      	cbz	r1, b066 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    b05a:	263a      	movs	r6, #58	; 0x3a
    b05c:	e02e      	b.n	b0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    b05e:	201a      	movs	r0, #26
    b060:	b008      	add	sp, #32
    b062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b066:	4641      	mov	r1, r8
    b068:	aa03      	add	r2, sp, #12
    b06a:	f005 fda2 	bl	10bb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b06e:	8861      	ldrh	r1, [r4, #2]
    b070:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b074:	4281      	cmp	r1, r0
    b076:	d200      	bcs.n	b07a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    b078:	4608      	mov	r0, r1
    b07a:	80e8      	strh	r0, [r5, #6]
    b07c:	88a1      	ldrh	r1, [r4, #4]
    b07e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b082:	4281      	cmp	r1, r0
    b084:	d200      	bcs.n	b088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    b086:	4608      	mov	r0, r1
    b088:	8128      	strh	r0, [r5, #8]
    b08a:	88e2      	ldrh	r2, [r4, #6]
    b08c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b090:	428a      	cmp	r2, r1
    b092:	d200      	bcs.n	b096 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    b094:	4611      	mov	r1, r2
    b096:	8069      	strh	r1, [r5, #2]
    b098:	8922      	ldrh	r2, [r4, #8]
    b09a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b09e:	428a      	cmp	r2, r1
    b0a0:	d200      	bcs.n	b0a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    b0a2:	4611      	mov	r1, r2
    b0a4:	f640 0248 	movw	r2, #2120	; 0x848
    b0a8:	80a9      	strh	r1, [r5, #4]
    b0aa:	4291      	cmp	r1, r2
    b0ac:	d300      	bcc.n	b0b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b0ae:	4611      	mov	r1, r2
    b0b0:	80a9      	strh	r1, [r5, #4]
    b0b2:	4290      	cmp	r0, r2
    b0b4:	d200      	bcs.n	b0b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    b0b6:	4602      	mov	r2, r0
    b0b8:	812a      	strh	r2, [r5, #8]
    b0ba:	702f      	strb	r7, [r5, #0]
    b0bc:	f885 8001 	strb.w	r8, [r5, #1]
    b0c0:	4630      	mov	r0, r6
    b0c2:	e7cd      	b.n	b060 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b0c4:	b510      	push	{r4, lr}
    b0c6:	4604      	mov	r4, r0
    b0c8:	88c1      	ldrh	r1, [r0, #6]
    b0ca:	8880      	ldrh	r0, [r0, #4]
    b0cc:	f005 fd63 	bl	10b96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b0d0:	2800      	cmp	r0, #0
    b0d2:	d10f      	bne.n	b0f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b0d4:	8861      	ldrh	r1, [r4, #2]
    b0d6:	8820      	ldrh	r0, [r4, #0]
    b0d8:	f005 fd5d 	bl	10b96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b0dc:	2800      	cmp	r0, #0
    b0de:	d109      	bne.n	b0f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b0e0:	4805      	ldr	r0, [pc, #20]	; (b0f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    b0e2:	88a1      	ldrh	r1, [r4, #4]
    b0e4:	8081      	strh	r1, [r0, #4]
    b0e6:	8821      	ldrh	r1, [r4, #0]
    b0e8:	8001      	strh	r1, [r0, #0]
    b0ea:	88e1      	ldrh	r1, [r4, #6]
    b0ec:	80c1      	strh	r1, [r0, #6]
    b0ee:	8861      	ldrh	r1, [r4, #2]
    b0f0:	8041      	strh	r1, [r0, #2]
    b0f2:	2000      	movs	r0, #0
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	0000      	.short	0x0000
    b0f8:	200002b4 	.word	0x200002b4
    b0fc:	0c11d80c 	.word	0x0c11d80c
    b100:	11d80059 	.word	0x11d80059

0000b104 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b104:	b510      	push	{r4, lr}
    b106:	f7fb ff01 	bl	6f0c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b10a:	4805      	ldr	r0, [pc, #20]	; (b120 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    b10c:	6840      	ldr	r0, [r0, #4]
    b10e:	f005 fe6b 	bl	10de8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b112:	f005 fbd6 	bl	108c2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b11a:	f7fc b867 	b.w	71ec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b11e:	0000      	.short	0x0000
    b120:	200002bc 	.word	0x200002bc

0000b124 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b124:	b510      	push	{r4, lr}
    b126:	4c05      	ldr	r4, [pc, #20]	; (b13c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b128:	68a0      	ldr	r0, [r4, #8]
    b12a:	f005 fe5d 	bl	10de8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b12e:	68e0      	ldr	r0, [r4, #12]
    b130:	f005 fe5a 	bl	10de8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b138:	f005 bc28 	b.w	1098c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b13c:	200002bc 	.word	0x200002bc

0000b140 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b140:	b510      	push	{r4, lr}
    b142:	4905      	ldr	r1, [pc, #20]	; (b158 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b144:	4805      	ldr	r0, [pc, #20]	; (b15c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b146:	f005 fe42 	bl	10dce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b14a:	4804      	ldr	r0, [pc, #16]	; (b15c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b150:	4903      	ldr	r1, [pc, #12]	; (b160 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b152:	1d00      	adds	r0, r0, #4
    b154:	f005 be3b 	b.w	10dce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b158:	200002cc 	.word	0x200002cc
    b15c:	200002c0 	.word	0x200002c0
    b160:	200002d4 	.word	0x200002d4

0000b164 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b164:	b510      	push	{r4, lr}
    b166:	4908      	ldr	r1, [pc, #32]	; (b188 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b168:	4808      	ldr	r0, [pc, #32]	; (b18c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b16a:	f005 fe30 	bl	10dce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b16e:	4807      	ldr	r0, [pc, #28]	; (b18c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b170:	4907      	ldr	r1, [pc, #28]	; (b190 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b172:	1d00      	adds	r0, r0, #4
    b174:	f005 fe2b 	bl	10dce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b178:	4804      	ldr	r0, [pc, #16]	; (b18c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b17e:	4905      	ldr	r1, [pc, #20]	; (b194 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b180:	3008      	adds	r0, #8
    b182:	f005 be24 	b.w	10dce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b186:	0000      	.short	0x0000
    b188:	200002e4 	.word	0x200002e4
    b18c:	200002c0 	.word	0x200002c0
    b190:	200002ec 	.word	0x200002ec
    b194:	200002dc 	.word	0x200002dc

0000b198 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b198:	4801      	ldr	r0, [pc, #4]	; (b1a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b19a:	7800      	ldrb	r0, [r0, #0]
    b19c:	4770      	bx	lr
    b19e:	0000      	.short	0x0000
    b1a0:	200002bc 	.word	0x200002bc
    b1a4:	b510      	push	{r4, lr}
    b1a6:	f7fc f975 	bl	7494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b1aa:	f7fc fff5 	bl	8198 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b1ae:	4803      	ldr	r0, [pc, #12]	; (b1bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b1b0:	f7fc f956 	bl	7460 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1b8:	f7fb beb4 	b.w	6f24 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b1bc:	200016df 	.word	0x200016df
    b1c0:	4909      	ldr	r1, [pc, #36]	; (b1e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b1c2:	b510      	push	{r4, lr}
    b1c4:	2001      	movs	r0, #1
    b1c6:	7008      	strb	r0, [r1, #0]
    b1c8:	f7fc f994 	bl	74f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b1cc:	f7fd fbc0 	bl	8950 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b1d0:	f003 f90c 	bl	e3ec <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b1d4:	4805      	ldr	r0, [pc, #20]	; (b1ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b1d6:	f7fa fbd7 	bl	5988 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b1da:	2000      	movs	r0, #0
    b1dc:	f7f9 fe9e 	bl	4f1c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1e4:	f7fb bea6 	b.w	6f34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b1e8:	200002bc 	.word	0x200002bc
    b1ec:	200016df 	.word	0x200016df

0000b1f0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b1f0:	4a04      	ldr	r2, [pc, #16]	; (b204 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b1f2:	08c1      	lsrs	r1, r0, #3
    b1f4:	f000 0307 	and.w	r3, r0, #7
    b1f8:	2001      	movs	r0, #1
    b1fa:	4098      	lsls	r0, r3
    b1fc:	5c53      	ldrb	r3, [r2, r1]
    b1fe:	4303      	orrs	r3, r0
    b200:	5453      	strb	r3, [r2, r1]
    b202:	4770      	bx	lr
    b204:	20000020 	.word	0x20000020

0000b208 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b208:	4901      	ldr	r1, [pc, #4]	; (b210 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b20a:	e9d1 0100 	ldrd	r0, r1, [r1]
    b20e:	4770      	bx	lr
    b210:	20000020 	.word	0x20000020

0000b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b214:	4806      	ldr	r0, [pc, #24]	; (b230 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b216:	8801      	ldrh	r1, [r0, #0]
    b218:	7900      	ldrb	r0, [r0, #4]
    b21a:	0602      	lsls	r2, r0, #24
    b21c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b220:	f000 0001 	and.w	r0, r0, #1
    b224:	1800      	adds	r0, r0, r0
    b226:	b2c0      	uxtb	r0, r0
    b228:	f040 0001 	orr.w	r0, r0, #1
    b22c:	4770      	bx	lr
    b22e:	0000      	.short	0x0000
    b230:	20000020 	.word	0x20000020

0000b234 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b234:	b510      	push	{r4, lr}
    b236:	f7f9 f8cf 	bl	43d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b23a:	2200      	movs	r2, #0
    b23c:	4b08      	ldr	r3, [pc, #32]	; (b260 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b23e:	4611      	mov	r1, r2
    b240:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b244:	4284      	cmp	r4, r0
    b246:	d303      	bcc.n	b250 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b248:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b24c:	7882      	ldrb	r2, [r0, #2]
    b24e:	e003      	b.n	b258 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b250:	1c49      	adds	r1, r1, #1
    b252:	b2c9      	uxtb	r1, r1
    b254:	290c      	cmp	r1, #12
    b256:	d3f3      	bcc.n	b240 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b258:	4802      	ldr	r0, [pc, #8]	; (b264 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b25a:	7002      	strb	r2, [r0, #0]
    b25c:	bd10      	pop	{r4, pc}
    b25e:	0000      	.short	0x0000
    b260:	00010e3a 	.word	0x00010e3a
    b264:	2000033c 	.word	0x2000033c

0000b268 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b268:	b570      	push	{r4, r5, r6, lr}
    b26a:	4605      	mov	r5, r0
    b26c:	4616      	mov	r6, r2
    b26e:	460c      	mov	r4, r1
    b270:	2002      	movs	r0, #2
    b272:	f000 f9b7 	bl	b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b276:	4906      	ldr	r1, [pc, #24]	; (b290 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b278:	2001      	movs	r0, #1
    b27a:	1ef6      	subs	r6, r6, #3
    b27c:	7008      	strb	r0, [r1, #0]
    b27e:	4805      	ldr	r0, [pc, #20]	; (b294 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b280:	6006      	str	r6, [r0, #0]
    b282:	4804      	ldr	r0, [pc, #16]	; (b294 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b284:	3808      	subs	r0, #8
    b286:	6005      	str	r5, [r0, #0]
    b288:	1f00      	subs	r0, r0, #4
    b28a:	6004      	str	r4, [r0, #0]
    b28c:	bd70      	pop	{r4, r5, r6, pc}
    b28e:	0000      	.short	0x0000
    b290:	2000033d 	.word	0x2000033d
    b294:	4000f510 	.word	0x4000f510

0000b298 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b298:	b510      	push	{r4, lr}
    b29a:	4c0c      	ldr	r4, [pc, #48]	; (b2cc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b29c:	7820      	ldrb	r0, [r4, #0]
    b29e:	b180      	cbz	r0, b2c2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b2a0:	490b      	ldr	r1, [pc, #44]	; (b2d0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b2a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b2a6:	6008      	str	r0, [r1, #0]
    b2a8:	f000 f86a 	bl	b380 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b2ac:	2100      	movs	r1, #0
    b2ae:	b120      	cbz	r0, b2ba <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b2b0:	2001      	movs	r0, #1
    b2b2:	7060      	strb	r0, [r4, #1]
    b2b4:	4807      	ldr	r0, [pc, #28]	; (b2d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b2b6:	6800      	ldr	r0, [r0, #0]
    b2b8:	e001      	b.n	b2be <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b2ba:	7061      	strb	r1, [r4, #1]
    b2bc:	2010      	movs	r0, #16
    b2be:	70a0      	strb	r0, [r4, #2]
    b2c0:	7021      	strb	r1, [r4, #0]
    b2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2c6:	2000      	movs	r0, #0
    b2c8:	f000 b98c 	b.w	b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2cc:	2000033d 	.word	0x2000033d
    b2d0:	4001f508 	.word	0x4001f508
    b2d4:	4000f400 	.word	0x4000f400

0000b2d8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b2d8:	b510      	push	{r4, lr}
    b2da:	2002      	movs	r0, #2
    b2dc:	f000 f982 	bl	b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2e0:	4904      	ldr	r1, [pc, #16]	; (b2f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b2e2:	2001      	movs	r0, #1
    b2e4:	7008      	strb	r0, [r1, #0]
    b2e6:	f000 f859 	bl	b39c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b2ea:	4903      	ldr	r1, [pc, #12]	; (b2f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b2ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b2f0:	6008      	str	r0, [r1, #0]
    b2f2:	bd10      	pop	{r4, pc}
    b2f4:	2000033d 	.word	0x2000033d
    b2f8:	4001f504 	.word	0x4001f504

0000b2fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b2fc:	4803      	ldr	r0, [pc, #12]	; (b30c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b2fe:	2100      	movs	r1, #0
    b300:	7001      	strb	r1, [r0, #0]
    b302:	7041      	strb	r1, [r0, #1]
    b304:	2110      	movs	r1, #16
    b306:	7081      	strb	r1, [r0, #2]
    b308:	4770      	bx	lr
    b30a:	0000      	.short	0x0000
    b30c:	2000033d 	.word	0x2000033d

0000b310 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b310:	4807      	ldr	r0, [pc, #28]	; (b330 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b312:	b510      	push	{r4, lr}
    b314:	7801      	ldrb	r1, [r0, #0]
    b316:	b141      	cbz	r1, b32a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b318:	f000 f832 	bl	b380 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b31c:	b118      	cbz	r0, b326 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b31e:	4805      	ldr	r0, [pc, #20]	; (b334 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b320:	6800      	ldr	r0, [r0, #0]
    b322:	b2c0      	uxtb	r0, r0
    b324:	bd10      	pop	{r4, pc}
    b326:	2010      	movs	r0, #16
    b328:	bd10      	pop	{r4, pc}
    b32a:	7880      	ldrb	r0, [r0, #2]
    b32c:	bd10      	pop	{r4, pc}
    b32e:	0000      	.short	0x0000
    b330:	2000033d 	.word	0x2000033d
    b334:	4000f400 	.word	0x4000f400

0000b338 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b338:	4808      	ldr	r0, [pc, #32]	; (b35c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b33a:	b510      	push	{r4, lr}
    b33c:	7801      	ldrb	r1, [r0, #0]
    b33e:	b159      	cbz	r1, b358 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b340:	4807      	ldr	r0, [pc, #28]	; (b360 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b342:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b346:	b128      	cbz	r0, b354 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b348:	f000 f80c 	bl	b364 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b34c:	2800      	cmp	r0, #0
    b34e:	d000      	beq.n	b352 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b350:	2001      	movs	r0, #1
    b352:	bd10      	pop	{r4, pc}
    b354:	2002      	movs	r0, #2
    b356:	bd10      	pop	{r4, pc}
    b358:	7840      	ldrb	r0, [r0, #1]
    b35a:	bd10      	pop	{r4, pc}
    b35c:	2000033d 	.word	0x2000033d
    b360:	4000f000 	.word	0x4000f000
    b364:	4805      	ldr	r0, [pc, #20]	; (b37c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b366:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b36a:	b111      	cbz	r1, b372 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b36c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b370:	b108      	cbz	r0, b376 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b372:	2000      	movs	r0, #0
    b374:	4770      	bx	lr
    b376:	2001      	movs	r0, #1
    b378:	4770      	bx	lr
    b37a:	0000      	.short	0x0000
    b37c:	4000f000 	.word	0x4000f000
    b380:	4805      	ldr	r0, [pc, #20]	; (b398 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b382:	b510      	push	{r4, lr}
    b384:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b388:	b120      	cbz	r0, b394 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b38a:	f7ff ffeb 	bl	b364 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b38e:	b108      	cbz	r0, b394 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b390:	2001      	movs	r0, #1
    b392:	bd10      	pop	{r4, pc}
    b394:	2000      	movs	r0, #0
    b396:	bd10      	pop	{r4, pc}
    b398:	4000f000 	.word	0x4000f000
    b39c:	4804      	ldr	r0, [pc, #16]	; (b3b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b39e:	2100      	movs	r1, #0
    b3a0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b3a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b3a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b3ac:	4770      	bx	lr
    b3ae:	0000      	.short	0x0000
    b3b0:	4000f000 	.word	0x4000f000

0000b3b4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3b8:	4604      	mov	r4, r0
    b3ba:	461e      	mov	r6, r3
    b3bc:	4690      	mov	r8, r2
    b3be:	460f      	mov	r7, r1
    b3c0:	2001      	movs	r0, #1
    b3c2:	f000 f90f 	bl	b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3c6:	4d1e      	ldr	r5, [pc, #120]	; (b440 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b3c8:	481e      	ldr	r0, [pc, #120]	; (b444 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b3ca:	f004 0103 	and.w	r1, r4, #3
    b3ce:	712e      	strb	r6, [r5, #4]
    b3d0:	6800      	ldr	r0, [r0, #0]
    b3d2:	0432      	lsls	r2, r6, #16
    b3d4:	f361 0007 	bfi	r0, r1, #0, #8
    b3d8:	f366 200f 	bfi	r0, r6, #8, #8
    b3dc:	0c00      	lsrs	r0, r0, #16
    b3de:	4e1a      	ldr	r6, [pc, #104]	; (b448 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b3e0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b3e4:	4308      	orrs	r0, r1
    b3e6:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b3ea:	4818      	ldr	r0, [pc, #96]	; (b44c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b3ec:	6007      	str	r7, [r0, #0]
    b3ee:	f001 fdcb 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b3f2:	b938      	cbnz	r0, b404 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b3f4:	4815      	ldr	r0, [pc, #84]	; (b44c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b3f6:	3010      	adds	r0, #16
    b3f8:	6801      	ldr	r1, [r0, #0]
    b3fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b3fe:	ea41 0108 	orr.w	r1, r1, r8
    b402:	6001      	str	r1, [r0, #0]
    b404:	f000 f8e4 	bl	b5d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b408:	b10c      	cbz	r4, b40e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b40a:	2c04      	cmp	r4, #4
    b40c:	d107      	bne.n	b41e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b40e:	4811      	ldr	r0, [pc, #68]	; (b454 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b410:	490d      	ldr	r1, [pc, #52]	; (b448 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b412:	4a0f      	ldr	r2, [pc, #60]	; (b450 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b414:	1d09      	adds	r1, r1, #4
    b416:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b41a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b41e:	2001      	movs	r0, #1
    b420:	7068      	strb	r0, [r5, #1]
    b422:	70ec      	strb	r4, [r5, #3]
    b424:	b11c      	cbz	r4, b42e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b426:	2c01      	cmp	r4, #1
    b428:	d001      	beq.n	b42e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b42a:	2c02      	cmp	r4, #2
    b42c:	d106      	bne.n	b43c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b42e:	7028      	strb	r0, [r5, #0]
    b430:	2100      	movs	r1, #0
    b432:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b436:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b43a:	6030      	str	r0, [r6, #0]
    b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b440:	20000340 	.word	0x20000340
    b444:	0000b5e0 	.word	0x0000b5e0
    b448:	4000f000 	.word	0x4000f000
    b44c:	4000f508 	.word	0x4000f508
    b450:	4000f100 	.word	0x4000f100
    b454:	4001f088 	.word	0x4001f088

0000b458 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b458:	b570      	push	{r4, r5, r6, lr}
    b45a:	4a1c      	ldr	r2, [pc, #112]	; (b4cc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b45c:	7853      	ldrb	r3, [r2, #1]
    b45e:	b1a3      	cbz	r3, b48a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b460:	4b1b      	ldr	r3, [pc, #108]	; (b4d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b462:	6019      	str	r1, [r3, #0]
    b464:	1d19      	adds	r1, r3, #4
    b466:	6008      	str	r0, [r1, #0]
    b468:	2501      	movs	r5, #1
    b46a:	7095      	strb	r5, [r2, #2]
    b46c:	4610      	mov	r0, r2
    b46e:	78d6      	ldrb	r6, [r2, #3]
    b470:	4b18      	ldr	r3, [pc, #96]	; (b4d4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b472:	7800      	ldrb	r0, [r0, #0]
    b474:	4c18      	ldr	r4, [pc, #96]	; (b4d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b476:	2100      	movs	r1, #0
    b478:	b156      	cbz	r6, b490 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b47a:	2e04      	cmp	r6, #4
    b47c:	d01b      	beq.n	b4b6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b47e:	b308      	cbz	r0, b4c4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b480:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b484:	0668      	lsls	r0, r5, #25
    b486:	6018      	str	r0, [r3, #0]
    b488:	bd70      	pop	{r4, r5, r6, pc}
    b48a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b48e:	e01a      	b.n	b4c6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b490:	b178      	cbz	r0, b4b2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b492:	4620      	mov	r0, r4
    b494:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b498:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b49c:	601e      	str	r6, [r3, #0]
    b49e:	1271      	asrs	r1, r6, #9
    b4a0:	f005 fd00 	bl	10ea4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b4a4:	2800      	cmp	r0, #0
    b4a6:	d0ef      	beq.n	b488 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b4a8:	6065      	str	r5, [r4, #4]
    b4aa:	480a      	ldr	r0, [pc, #40]	; (b4d4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b4ac:	1d00      	adds	r0, r0, #4
    b4ae:	6006      	str	r6, [r0, #0]
    b4b0:	bd70      	pop	{r4, r5, r6, pc}
    b4b2:	21b3      	movs	r1, #179	; 0xb3
    b4b4:	e007      	b.n	b4c6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b4b6:	7015      	strb	r5, [r2, #0]
    b4b8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b4bc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b4c0:	6025      	str	r5, [r4, #0]
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
    b4c4:	21c6      	movs	r1, #198	; 0xc6
    b4c6:	203c      	movs	r0, #60	; 0x3c
    b4c8:	f7f9 fb4e 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4cc:	20000340 	.word	0x20000340
    b4d0:	4000f50c 	.word	0x4000f50c
    b4d4:	4001f504 	.word	0x4001f504
    b4d8:	4000f000 	.word	0x4000f000

0000b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b4dc:	b570      	push	{r4, r5, r6, lr}
    b4de:	4d05      	ldr	r5, [pc, #20]	; (b4f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b4e0:	2400      	movs	r4, #0
    b4e2:	7828      	ldrb	r0, [r5, #0]
    b4e4:	b110      	cbz	r0, b4ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b4e6:	f000 f873 	bl	b5d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b4ea:	702c      	strb	r4, [r5, #0]
    b4ec:	706c      	strb	r4, [r5, #1]
    b4ee:	70ac      	strb	r4, [r5, #2]
    b4f0:	bd70      	pop	{r4, r5, r6, pc}
    b4f2:	0000      	.short	0x0000
    b4f4:	20000340 	.word	0x20000340

0000b4f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b4f8:	4802      	ldr	r0, [pc, #8]	; (b504 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b4fa:	2100      	movs	r1, #0
    b4fc:	7001      	strb	r1, [r0, #0]
    b4fe:	7041      	strb	r1, [r0, #1]
    b500:	7081      	strb	r1, [r0, #2]
    b502:	4770      	bx	lr
    b504:	20000340 	.word	0x20000340

0000b508 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b508:	480b      	ldr	r0, [pc, #44]	; (b538 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b50a:	b510      	push	{r4, lr}
    b50c:	7800      	ldrb	r0, [r0, #0]
    b50e:	b158      	cbz	r0, b528 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b510:	f44f 7182 	mov.w	r1, #260	; 0x104
    b514:	4809      	ldr	r0, [pc, #36]	; (b53c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b516:	f005 fcc5 	bl	10ea4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b51a:	b140      	cbz	r0, b52e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b51c:	4808      	ldr	r0, [pc, #32]	; (b540 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b51e:	6800      	ldr	r0, [r0, #0]
    b520:	2800      	cmp	r0, #0
    b522:	d000      	beq.n	b526 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b524:	2001      	movs	r0, #1
    b526:	bd10      	pop	{r4, pc}
    b528:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    b52c:	e001      	b.n	b532 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b52e:	f240 11eb 	movw	r1, #491	; 0x1eb
    b532:	203c      	movs	r0, #60	; 0x3c
    b534:	f7f9 fb18 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b538:	20000340 	.word	0x20000340
    b53c:	4000f000 	.word	0x4000f000
    b540:	4000f400 	.word	0x4000f400

0000b544 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b544:	4801      	ldr	r0, [pc, #4]	; (b54c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b546:	2101      	movs	r1, #1
    b548:	6081      	str	r1, [r0, #8]
    b54a:	4770      	bx	lr
    b54c:	4000f000 	.word	0x4000f000

0000b550 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b554:	481b      	ldr	r0, [pc, #108]	; (b5c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b556:	7800      	ldrb	r0, [r0, #0]
    b558:	b1d8      	cbz	r0, b592 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b55a:	f8df 806c 	ldr.w	r8, [pc, #108]	; b5c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b55e:	f44f 7682 	mov.w	r6, #260	; 0x104
    b562:	4631      	mov	r1, r6
    b564:	4640      	mov	r0, r8
    b566:	f005 fc9d 	bl	10ea4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b56a:	2800      	cmp	r0, #0
    b56c:	d128      	bne.n	b5c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b56e:	2002      	movs	r0, #2
    b570:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b574:	4c15      	ldr	r4, [pc, #84]	; (b5cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b576:	6820      	ldr	r0, [r4, #0]
    b578:	43c0      	mvns	r0, r0
    b57a:	f340 1500 	sbfx	r5, r0, #4, #1
    b57e:	6820      	ldr	r0, [r4, #0]
    b580:	f040 0010 	orr.w	r0, r0, #16
    b584:	6020      	str	r0, [r4, #0]
    b586:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b58a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b58e:	1c6d      	adds	r5, r5, #1
    b590:	e008      	b.n	b5a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b592:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    b596:	203c      	movs	r0, #60	; 0x3c
    b598:	f7f9 fae6 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b5a0:	f7f9 f93c 	bl	481c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b5a4:	4631      	mov	r1, r6
    b5a6:	4640      	mov	r0, r8
    b5a8:	f005 fc7c 	bl	10ea4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b5ac:	2800      	cmp	r0, #0
    b5ae:	d0f5      	beq.n	b59c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b5b0:	b91d      	cbnz	r5, b5ba <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b5b2:	6820      	ldr	r0, [r4, #0]
    b5b4:	f020 0010 	bic.w	r0, r0, #16
    b5b8:	6020      	str	r0, [r4, #0]
    b5ba:	2002      	movs	r0, #2
    b5bc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5c4:	20000340 	.word	0x20000340
    b5c8:	4000f000 	.word	0x4000f000
    b5cc:	e000ed10 	.word	0xe000ed10
    b5d0:	4902      	ldr	r1, [pc, #8]	; (b5dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    b5d2:	4801      	ldr	r0, [pc, #4]	; (b5d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    b5d4:	6008      	str	r0, [r1, #0]
    b5d6:	4770      	bx	lr
    b5d8:	02020000 	.word	0x02020000
    b5dc:	4001f508 	.word	0x4001f508
    b5e0:	00010000 	.word	0x00010000

0000b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b5e4:	b510      	push	{r4, lr}
    b5e6:	4604      	mov	r4, r0
    b5e8:	f000 f820 	bl	b62c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    b5ec:	2c00      	cmp	r4, #0
    b5ee:	d00e      	beq.n	b60e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    b5f0:	4a0b      	ldr	r2, [pc, #44]	; (b620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b5f2:	480b      	ldr	r0, [pc, #44]	; (b620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b5f4:	490b      	ldr	r1, [pc, #44]	; (b624 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b5f6:	3214      	adds	r2, #20
    b5f8:	2c01      	cmp	r4, #1
    b5fa:	d005      	beq.n	b608 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    b5fc:	2c02      	cmp	r4, #2
    b5fe:	d007      	beq.n	b610 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    b600:	2181      	movs	r1, #129	; 0x81
    b602:	203d      	movs	r0, #61	; 0x3d
    b604:	f7f9 fab0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b608:	2302      	movs	r3, #2
    b60a:	6003      	str	r3, [r0, #0]
    b60c:	6011      	str	r1, [r2, #0]
    b60e:	bd10      	pop	{r4, pc}
    b610:	2303      	movs	r3, #3
    b612:	6003      	str	r3, [r0, #0]
    b614:	6011      	str	r1, [r2, #0]
    b616:	4904      	ldr	r1, [pc, #16]	; (b628 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b618:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b61c:	6008      	str	r0, [r1, #0]
    b61e:	bd10      	pop	{r4, pc}
    b620:	4000f500 	.word	0x4000f500
    b624:	200017e1 	.word	0x200017e1
    b628:	4001f504 	.word	0x4001f504
    b62c:	4805      	ldr	r0, [pc, #20]	; (b644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b62e:	b510      	push	{r4, lr}
    b630:	2100      	movs	r1, #0
    b632:	6001      	str	r1, [r0, #0]
    b634:	6001      	str	r1, [r0, #0]
    b636:	f7ff ff51 	bl	b4dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b63a:	4903      	ldr	r1, [pc, #12]	; (b648 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b63c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b640:	6008      	str	r0, [r1, #0]
    b642:	bd10      	pop	{r4, pc}
    b644:	4000f500 	.word	0x4000f500
    b648:	4001f508 	.word	0x4001f508

0000b64c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b64c:	4805      	ldr	r0, [pc, #20]	; (b664 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b64e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b652:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b656:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b65a:	2100      	movs	r1, #0
    b65c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b660:	4770      	bx	lr
    b662:	0000      	.short	0x0000
    b664:	40001000 	.word	0x40001000

0000b668 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b668:	4904      	ldr	r1, [pc, #16]	; (b67c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b66a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b66e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b672:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b676:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b67a:	4770      	bx	lr
    b67c:	40001000 	.word	0x40001000

0000b680 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b680:	4801      	ldr	r0, [pc, #4]	; (b688 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b682:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b686:	4770      	bx	lr
    b688:	20001290 	.word	0x20001290

0000b68c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    b68c:	4902      	ldr	r1, [pc, #8]	; (b698 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    b68e:	5c08      	ldrb	r0, [r1, r0]
    b690:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b694:	4770      	bx	lr
    b696:	0000      	.short	0x0000
    b698:	0000c3ba 	.word	0x0000c3ba

0000b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b69e:	4c24      	ldr	r4, [pc, #144]	; (b730 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b6a0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6a4:	f010 0f10 	tst.w	r0, #16
    b6a8:	d001      	beq.n	b6ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b6aa:	2701      	movs	r7, #1
    b6ac:	e000      	b.n	b6b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b6ae:	2700      	movs	r7, #0
    b6b0:	2010      	movs	r0, #16
    b6b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b6b6:	2002      	movs	r0, #2
    b6b8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b6bc:	481d      	ldr	r0, [pc, #116]	; (b734 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b6be:	2500      	movs	r5, #0
    b6c0:	491d      	ldr	r1, [pc, #116]	; (b738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b6c2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b6c6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    b6ca:	6008      	str	r0, [r1, #0]
    b6cc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b6d0:	f44f 7688 	mov.w	r6, #272	; 0x110
    b6d4:	f010 0fff 	tst.w	r0, #255	; 0xff
    b6d8:	d019      	beq.n	b70e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    b6da:	20ff      	movs	r0, #255	; 0xff
    b6dc:	f88d 0000 	strb.w	r0, [sp]
    b6e0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b6e4:	2001      	movs	r0, #1
    b6e6:	6120      	str	r0, [r4, #16]
    b6e8:	e005      	b.n	b6f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b6ea:	bf00      	nop
    b6ec:	f89d 0000 	ldrb.w	r0, [sp]
    b6f0:	1e40      	subs	r0, r0, #1
    b6f2:	f88d 0000 	strb.w	r0, [sp]
    b6f6:	f89d 0000 	ldrb.w	r0, [sp]
    b6fa:	b128      	cbz	r0, b708 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    b6fc:	4631      	mov	r1, r6
    b6fe:	4620      	mov	r0, r4
    b700:	f005 fbff 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b704:	2800      	cmp	r0, #0
    b706:	d0f1      	beq.n	b6ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    b708:	f89d 0000 	ldrb.w	r0, [sp]
    b70c:	b158      	cbz	r0, b726 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    b70e:	f000 fc49 	bl	bfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b712:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b716:	f000 fdd1 	bl	c2bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b71a:	2f00      	cmp	r7, #0
    b71c:	d002      	beq.n	b724 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    b71e:	2010      	movs	r0, #16
    b720:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b726:	f640 0183 	movw	r1, #2179	; 0x883
    b72a:	203e      	movs	r0, #62	; 0x3e
    b72c:	f7f9 fa1c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b730:	40001000 	.word	0x40001000
    b734:	20001290 	.word	0x20001290
    b738:	4001f508 	.word	0x4001f508

0000b73c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b740:	4d18      	ldr	r5, [pc, #96]	; (b7a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    b742:	4607      	mov	r7, r0
    b744:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b748:	07c2      	lsls	r2, r0, #31
    b74a:	d00f      	beq.n	b76c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    b74c:	4c16      	ldr	r4, [pc, #88]	; (b7a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    b74e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    b752:	f042 0201 	orr.w	r2, r2, #1
    b756:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    b75a:	f040 0002 	orr.w	r0, r0, #2
    b75e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b762:	2601      	movs	r6, #1
    b764:	b13f      	cbz	r7, b776 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    b766:	2f01      	cmp	r7, #1
    b768:	d00b      	beq.n	b782 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    b76a:	e010      	b.n	b78e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b76c:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    b770:	203e      	movs	r0, #62	; 0x3e
    b772:	f7f9 f9f9 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b776:	4608      	mov	r0, r1
    b778:	f000 fdfa 	bl	c370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b77c:	726e      	strb	r6, [r5, #9]
    b77e:	6026      	str	r6, [r4, #0]
    b780:	e005      	b.n	b78e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b782:	4608      	mov	r0, r1
    b784:	f000 fdda 	bl	c33c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b788:	2002      	movs	r0, #2
    b78a:	7268      	strb	r0, [r5, #9]
    b78c:	6066      	str	r6, [r4, #4]
    b78e:	4807      	ldr	r0, [pc, #28]	; (b7ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b790:	64c6      	str	r6, [r0, #76]	; 0x4c
    b792:	4806      	ldr	r0, [pc, #24]	; (b7ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b794:	300c      	adds	r0, #12
    b796:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b79a:	4638      	mov	r0, r7
    b79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7a0:	f000 bd5e 	b.w	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b7a4:	20001290 	.word	0x20001290
    b7a8:	40001000 	.word	0x40001000
    b7ac:	40008000 	.word	0x40008000

0000b7b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7b4:	4c2c      	ldr	r4, [pc, #176]	; (b868 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    b7b6:	0006      	movs	r6, r0
    b7b8:	4d2c      	ldr	r5, [pc, #176]	; (b86c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    b7ba:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b7be:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b870 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    b7c2:	f040 0002 	orr.w	r0, r0, #2
    b7c6:	4689      	mov	r9, r1
    b7c8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b7cc:	f04f 0700 	mov.w	r7, #0
    b7d0:	d002      	beq.n	b7d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    b7d2:	2e01      	cmp	r6, #1
    b7d4:	d020      	beq.n	b818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    b7d6:	e036      	b.n	b846 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b7d8:	4608      	mov	r0, r1
    b7da:	f000 fdc9 	bl	c370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b7de:	2001      	movs	r0, #1
    b7e0:	7260      	strb	r0, [r4, #9]
    b7e2:	79e0      	ldrb	r0, [r4, #7]
    b7e4:	2801      	cmp	r0, #1
    b7e6:	d105      	bne.n	b7f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b7e8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b7ec:	f040 0008 	orr.w	r0, r0, #8
    b7f0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b7f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b7f6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b7fa:	62a0      	str	r0, [r4, #40]	; 0x28
    b7fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b800:	f8c8 0000 	str.w	r0, [r8]
    b804:	491b      	ldr	r1, [pc, #108]	; (b874 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    b806:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    b80a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b80e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    b812:	fbb0 f7f1 	udiv	r7, r0, r1
    b816:	e016      	b.n	b846 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b818:	4608      	mov	r0, r1
    b81a:	f000 fd8f 	bl	c33c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b81e:	2002      	movs	r0, #2
    b820:	7260      	strb	r0, [r4, #9]
    b822:	79e0      	ldrb	r0, [r4, #7]
    b824:	2801      	cmp	r0, #1
    b826:	d105      	bne.n	b834 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b828:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b82c:	f040 0004 	orr.w	r0, r0, #4
    b830:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b834:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b836:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b83a:	62a0      	str	r0, [r4, #40]	; 0x28
    b83c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b840:	f8c8 0000 	str.w	r0, [r8]
    b844:	2729      	movs	r7, #41	; 0x29
    b846:	f000 fc19 	bl	c07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b84a:	f001 fa71 	bl	cd30 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b84e:	b120      	cbz	r0, b85a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    b850:	f7ff ff24 	bl	b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b854:	2000      	movs	r0, #0
    b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b85a:	2100      	movs	r1, #0
    b85c:	4630      	mov	r0, r6
    b85e:	f000 fcff 	bl	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b862:	4638      	mov	r0, r7
    b864:	e7f7      	b.n	b856 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    b866:	0000      	.short	0x0000
    b868:	20001290 	.word	0x20001290
    b86c:	40001000 	.word	0x40001000
    b870:	4001f504 	.word	0x4001f504
    b874:	0000c3b4 	.word	0x0000c3b4

0000b878 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b878:	4a02      	ldr	r2, [pc, #8]	; (b884 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b87a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b87c:	6003      	str	r3, [r0, #0]
    b87e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b880:	6008      	str	r0, [r1, #0]
    b882:	4770      	bx	lr
    b884:	20001290 	.word	0x20001290

0000b888 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b888:	b510      	push	{r4, lr}
    b88a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b88c:	4901      	ldr	r1, [pc, #4]	; (b894 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b88e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b892:	bd10      	pop	{r4, pc}
    b894:	20001280 	.word	0x20001280

0000b898 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b898:	490f      	ldr	r1, [pc, #60]	; (b8d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b89a:	b510      	push	{r4, lr}
    b89c:	69ca      	ldr	r2, [r1, #28]
    b89e:	4282      	cmp	r2, r0
    b8a0:	d302      	bcc.n	b8a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b8a2:	f640 1117 	movw	r1, #2327	; 0x917
    b8a6:	e00b      	b.n	b8c0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b8a8:	2201      	movs	r2, #1
    b8aa:	730a      	strb	r2, [r1, #12]
    b8ac:	6108      	str	r0, [r1, #16]
    b8ae:	490b      	ldr	r1, [pc, #44]	; (b8dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b8b0:	644a      	str	r2, [r1, #68]	; 0x44
    b8b2:	1d0a      	adds	r2, r1, #4
    b8b4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b8b8:	4283      	cmp	r3, r0
    b8ba:	d304      	bcc.n	b8c6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b8bc:	f44f 6112 	mov.w	r1, #2336	; 0x920
    b8c0:	203e      	movs	r0, #62	; 0x3e
    b8c2:	f7f9 f951 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8c6:	2300      	movs	r3, #0
    b8c8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b8cc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8d4:	f000 bc98 	b.w	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b8d8:	20001290 	.word	0x20001290
    b8dc:	40008000 	.word	0x40008000

0000b8e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b8e0:	b570      	push	{r4, r5, r6, lr}
    b8e2:	4c0f      	ldr	r4, [pc, #60]	; (b920 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b8e4:	4603      	mov	r3, r0
    b8e6:	2002      	movs	r0, #2
    b8e8:	7320      	strb	r0, [r4, #12]
    b8ea:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    b8ee:	2096      	movs	r0, #150	; 0x96
    b8f0:	f894 1020 	ldrb.w	r1, [r4, #32]
    b8f4:	7d22      	ldrb	r2, [r4, #20]
    b8f6:	2d01      	cmp	r5, #1
    b8f8:	d00e      	beq.n	b918 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b8fa:	f000 fd97 	bl	c42c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b8fe:	6120      	str	r0, [r4, #16]
    b900:	4808      	ldr	r0, [pc, #32]	; (b924 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b902:	2100      	movs	r1, #0
    b904:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b908:	6921      	ldr	r1, [r4, #16]
    b90a:	69e0      	ldr	r0, [r4, #28]
    b90c:	4408      	add	r0, r1
    b90e:	4905      	ldr	r1, [pc, #20]	; (b924 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b910:	1d09      	adds	r1, r1, #4
    b912:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b916:	bd70      	pop	{r4, r5, r6, pc}
    b918:	f000 fda6 	bl	c468 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b91c:	e7ef      	b.n	b8fe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    b91e:	0000      	.short	0x0000
    b920:	20001290 	.word	0x20001290
    b924:	40008000 	.word	0x40008000

0000b928 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b928:	b510      	push	{r4, lr}
    b92a:	f001 fb49 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b92e:	2800      	cmp	r0, #0
    b930:	d006      	beq.n	b940 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b932:	4804      	ldr	r0, [pc, #16]	; (b944 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b934:	6801      	ldr	r1, [r0, #0]
    b936:	f021 0101 	bic.w	r1, r1, #1
    b93a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b93e:	6001      	str	r1, [r0, #0]
    b940:	bd10      	pop	{r4, pc}
    b942:	0000      	.short	0x0000
    b944:	40001774 	.word	0x40001774

0000b948 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b94c:	2238      	movs	r2, #56	; 0x38
    b94e:	2100      	movs	r1, #0
    b950:	4813      	ldr	r0, [pc, #76]	; (b9a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b952:	f001 fbd3 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b956:	f000 fcb1 	bl	c2bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b95a:	f001 faea 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b95e:	4d11      	ldr	r5, [pc, #68]	; (b9a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b960:	4e10      	ldr	r6, [pc, #64]	; (b9a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b962:	2400      	movs	r4, #0
    b964:	4f0f      	ldr	r7, [pc, #60]	; (b9a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b966:	3508      	adds	r5, #8
    b968:	3610      	adds	r6, #16
    b96a:	b928      	cbnz	r0, b978 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b96c:	f001 faf8 	bl	cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b970:	b910      	cbnz	r0, b978 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b972:	f001 faff 	bl	cf74 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b976:	b108      	cbz	r0, b97c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b978:	2224      	movs	r2, #36	; 0x24
    b97a:	e006      	b.n	b98a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b97c:	f001 fb3a 	bl	cff4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b980:	b910      	cbnz	r0, b988 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b982:	f001 fb2d 	bl	cfe0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b986:	b140      	cbz	r0, b99a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b988:	2240      	movs	r2, #64	; 0x40
    b98a:	21ff      	movs	r1, #255	; 0xff
    b98c:	4638      	mov	r0, r7
    b98e:	f001 fbb5 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b992:	602c      	str	r4, [r5, #0]
    b994:	6034      	str	r4, [r6, #0]
    b996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b99a:	2238      	movs	r2, #56	; 0x38
    b99c:	e7f5      	b.n	b98a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b99e:	0000      	.short	0x0000
    b9a0:	20001290 	.word	0x20001290
    b9a4:	40000e00 	.word	0x40000e00

0000b9a8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b9a8:	4801      	ldr	r0, [pc, #4]	; (b9b0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b9aa:	69c0      	ldr	r0, [r0, #28]
    b9ac:	4770      	bx	lr
    b9ae:	0000      	.short	0x0000
    b9b0:	20001290 	.word	0x20001290

0000b9b4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b9b4:	4801      	ldr	r0, [pc, #4]	; (b9bc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b9b6:	6980      	ldr	r0, [r0, #24]
    b9b8:	4770      	bx	lr
    b9ba:	0000      	.short	0x0000
    b9bc:	20001290 	.word	0x20001290

0000b9c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b9c0:	b510      	push	{r4, lr}
    b9c2:	f000 fc2f 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b9c6:	f7ff fe69 	bl	b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b9ca:	f7f8 ff7d 	bl	48c8 <mpsl_fem_disable>
    b9ce:	b130      	cbz	r0, b9de <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b9d0:	1c40      	adds	r0, r0, #1
    b9d2:	d004      	beq.n	b9de <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b9d4:	f240 5146 	movw	r1, #1350	; 0x546
    b9d8:	203e      	movs	r0, #62	; 0x3e
    b9da:	f7f9 f8c5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9de:	480f      	ldr	r0, [pc, #60]	; (ba1c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    b9e0:	4a0f      	ldr	r2, [pc, #60]	; (ba20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    b9e2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b9e4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    b9e8:	6011      	str	r1, [r2, #0]
    b9ea:	2400      	movs	r4, #0
    b9ec:	6284      	str	r4, [r0, #40]	; 0x28
    b9ee:	7304      	strb	r4, [r0, #12]
    b9f0:	61c4      	str	r4, [r0, #28]
    b9f2:	6184      	str	r4, [r0, #24]
    b9f4:	f000 fc16 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b9f8:	480a      	ldr	r0, [pc, #40]	; (ba24 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    b9fa:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b9fe:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ba02:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ba06:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ba0a:	2001      	movs	r0, #1
    ba0c:	f005 fa68 	bl	10ee0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba14:	2001      	movs	r0, #1
    ba16:	f005 ba56 	b.w	10ec6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ba1a:	0000      	.short	0x0000
    ba1c:	20001290 	.word	0x20001290
    ba20:	4001f508 	.word	0x4001f508
    ba24:	40008000 	.word	0x40008000

0000ba28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ba28:	b570      	push	{r4, r5, r6, lr}
    ba2a:	2001      	movs	r0, #1
    ba2c:	f005 fa58 	bl	10ee0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ba30:	4c37      	ldr	r4, [pc, #220]	; (bb10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ba32:	2000      	movs	r0, #0
    ba34:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ba38:	2001      	movs	r0, #1
    ba3a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ba3e:	f001 faaf 	bl	cfa0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ba42:	4d34      	ldr	r5, [pc, #208]	; (bb14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba44:	b118      	cbz	r0, ba4e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    ba46:	6828      	ldr	r0, [r5, #0]
    ba48:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ba4c:	6028      	str	r0, [r5, #0]
    ba4e:	f001 fa9b 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba52:	b128      	cbz	r0, ba60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    ba54:	6828      	ldr	r0, [r5, #0]
    ba56:	4930      	ldr	r1, [pc, #192]	; (bb18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ba58:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ba5c:	4308      	orrs	r0, r1
    ba5e:	6028      	str	r0, [r5, #0]
    ba60:	f001 faae 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ba64:	b138      	cbz	r0, ba76 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ba66:	482b      	ldr	r0, [pc, #172]	; (bb14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba68:	1d00      	adds	r0, r0, #4
    ba6a:	6801      	ldr	r1, [r0, #0]
    ba6c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ba70:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ba74:	6001      	str	r1, [r0, #0]
    ba76:	4927      	ldr	r1, [pc, #156]	; (bb14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba78:	4828      	ldr	r0, [pc, #160]	; (bb1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ba7a:	313c      	adds	r1, #60	; 0x3c
    ba7c:	6008      	str	r0, [r1, #0]
    ba7e:	f7f8 ff59 	bl	4934 <mpsl_fem_device_config_254_apply_get>
    ba82:	b140      	cbz	r0, ba96 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba88:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ba8c:	1c41      	adds	r1, r0, #1
    ba8e:	d002      	beq.n	ba96 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba90:	4920      	ldr	r1, [pc, #128]	; (bb14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba92:	3110      	adds	r1, #16
    ba94:	6008      	str	r0, [r1, #0]
    ba96:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ba9a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ba9c:	1c41      	adds	r1, r0, #1
    ba9e:	d004      	beq.n	baaa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    baa0:	491f      	ldr	r1, [pc, #124]	; (bb20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    baa2:	680a      	ldr	r2, [r1, #0]
    baa4:	f360 4217 	bfi	r2, r0, #16, #8
    baa8:	600a      	str	r2, [r1, #0]
    baaa:	f240 1103 	movw	r1, #259	; 0x103
    baae:	f240 605b 	movw	r0, #1627	; 0x65b
    bab2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bab6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    baba:	2001      	movs	r0, #1
    babc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bac0:	f000 f842 	bl	bb48 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bac4:	f240 2001 	movw	r0, #513	; 0x201
    bac8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bacc:	2002      	movs	r0, #2
    bace:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bad2:	4914      	ldr	r1, [pc, #80]	; (bb24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bad4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bad8:	6008      	str	r0, [r1, #0]
    bada:	4913      	ldr	r1, [pc, #76]	; (bb28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    badc:	2000      	movs	r0, #0
    bade:	4d13      	ldr	r5, [pc, #76]	; (bb2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bae0:	8608      	strh	r0, [r1, #48]	; 0x30
    bae2:	3110      	adds	r1, #16
    bae4:	61c8      	str	r0, [r1, #28]
    bae6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    baea:	7028      	strb	r0, [r5, #0]
    baec:	2001      	movs	r0, #1
    baee:	f005 f9ea 	bl	10ec6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    baf2:	2010      	movs	r0, #16
    baf4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    baf8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bafc:	2002      	movs	r0, #2
    bafe:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bb02:	6868      	ldr	r0, [r5, #4]
    bb04:	2800      	cmp	r0, #0
    bb06:	d002      	beq.n	bb0e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    bb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb0c:	4700      	bx	r0
    bb0e:	bd70      	pop	{r4, r5, r6, pc}
    bb10:	40001000 	.word	0x40001000
    bb14:	4000173c 	.word	0x4000173c
    bb18:	80000096 	.word	0x80000096
    bb1c:	8900002c 	.word	0x8900002c
    bb20:	4000158c 	.word	0x4000158c
    bb24:	4001f504 	.word	0x4001f504
    bb28:	20001280 	.word	0x20001280
    bb2c:	200002f4 	.word	0x200002f4

0000bb30 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bb30:	4901      	ldr	r1, [pc, #4]	; (bb38 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bb32:	7548      	strb	r0, [r1, #21]
    bb34:	4770      	bx	lr
    bb36:	0000      	.short	0x0000
    bb38:	20001290 	.word	0x20001290

0000bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    bb3c:	4901      	ldr	r1, [pc, #4]	; (bb44 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    bb3e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bb42:	4770      	bx	lr
    bb44:	0000c408 	.word	0x0000c408

0000bb48 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    bb48:	4908      	ldr	r1, [pc, #32]	; (bb6c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    bb4a:	b510      	push	{r4, lr}
    bb4c:	7508      	strb	r0, [r1, #20]
    bb4e:	4908      	ldr	r1, [pc, #32]	; (bb70 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    bb50:	2801      	cmp	r0, #1
    bb52:	d006      	beq.n	bb62 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    bb54:	2802      	cmp	r0, #2
    bb56:	d006      	beq.n	bb66 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    bb58:	f640 5155 	movw	r1, #3413	; 0xd55
    bb5c:	203e      	movs	r0, #62	; 0x3e
    bb5e:	f7f9 f803 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb62:	2003      	movs	r0, #3
    bb64:	e000      	b.n	bb68 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    bb66:	2004      	movs	r0, #4
    bb68:	6008      	str	r0, [r1, #0]
    bb6a:	bd10      	pop	{r4, pc}
    bb6c:	20001290 	.word	0x20001290
    bb70:	40001510 	.word	0x40001510

0000bb74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bb74:	4905      	ldr	r1, [pc, #20]	; (bb8c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bb76:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bb7a:	4805      	ldr	r0, [pc, #20]	; (bb90 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bb7c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bb80:	f041 0101 	orr.w	r1, r1, #1
    bb84:	7001      	strb	r1, [r0, #0]
    bb86:	f000 ba3f 	b.w	c008 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bb8a:	0000      	.short	0x0000
    bb8c:	40001000 	.word	0x40001000
    bb90:	20001290 	.word	0x20001290

0000bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    bb94:	4901      	ldr	r1, [pc, #4]	; (bb9c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    bb96:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bb9a:	4770      	bx	lr
    bb9c:	0000c414 	.word	0x0000c414

0000bba0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bba4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bc48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    bba8:	4d28      	ldr	r5, [pc, #160]	; (bc4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    bbaa:	460f      	mov	r7, r1
    bbac:	0006      	movs	r6, r0
    bbae:	4614      	mov	r4, r2
    bbb0:	f04f 0801 	mov.w	r8, #1
    bbb4:	d004      	beq.n	bbc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    bbb6:	2e01      	cmp	r6, #1
    bbb8:	d010      	beq.n	bbdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    bbba:	f640 0114 	movw	r1, #2068	; 0x814
    bbbe:	e039      	b.n	bc34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    bbc0:	4610      	mov	r0, r2
    bbc2:	f000 fbd5 	bl	c370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bbc6:	4822      	ldr	r0, [pc, #136]	; (bc50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    bbc8:	f885 8009 	strb.w	r8, [r5, #9]
    bbcc:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    bbd0:	4638      	mov	r0, r7
    bbd2:	f000 fb7b 	bl	c2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    bbd6:	4604      	mov	r4, r0
    bbd8:	4648      	mov	r0, r9
    bbda:	e00c      	b.n	bbf6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    bbdc:	4610      	mov	r0, r2
    bbde:	f000 fbad 	bl	c33c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bbe2:	2002      	movs	r0, #2
    bbe4:	7268      	strb	r0, [r5, #9]
    bbe6:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bbea:	4638      	mov	r0, r7
    bbec:	f000 fb6e 	bl	c2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    bbf0:	4604      	mov	r4, r0
    bbf2:	4815      	ldr	r0, [pc, #84]	; (bc48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    bbf4:	1d00      	adds	r0, r0, #4
    bbf6:	f000 fb27 	bl	c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    bbfa:	4f16      	ldr	r7, [pc, #88]	; (bc54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bbfc:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    bc00:	4916      	ldr	r1, [pc, #88]	; (bc5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    bc02:	4815      	ldr	r0, [pc, #84]	; (bc58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    bc04:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    bc08:	2010      	movs	r0, #16
    bc0a:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    bc0e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bc10:	4913      	ldr	r1, [pc, #76]	; (bc60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    bc12:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bc16:	62a8      	str	r0, [r5, #40]	; 0x28
    bc18:	0138      	lsls	r0, r7, #4
    bc1a:	6008      	str	r0, [r1, #0]
    bc1c:	f000 fa2e 	bl	c07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    bc20:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    bc24:	480b      	ldr	r0, [pc, #44]	; (bc54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bc26:	300c      	adds	r0, #12
    bc28:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bc2c:	42a0      	cmp	r0, r4
    bc2e:	d304      	bcc.n	bc3a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    bc30:	f640 012a 	movw	r1, #2090	; 0x82a
    bc34:	203e      	movs	r0, #62	; 0x3e
    bc36:	f7f8 ff97 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc3a:	4621      	mov	r1, r4
    bc3c:	4630      	mov	r0, r6
    bc3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc42:	f000 bb0d 	b.w	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bc46:	0000      	.short	0x0000
    bc48:	40001000 	.word	0x40001000
    bc4c:	20001290 	.word	0x20001290
    bc50:	0000c3b4 	.word	0x0000c3b4
    bc54:	40008000 	.word	0x40008000
    bc58:	40008140 	.word	0x40008140
    bc5c:	4001f098 	.word	0x4001f098
    bc60:	4001f504 	.word	0x4001f504

0000bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bc64:	4b0d      	ldr	r3, [pc, #52]	; (bc9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bc66:	b510      	push	{r4, lr}
    bc68:	71d8      	strb	r0, [r3, #7]
    bc6a:	729a      	strb	r2, [r3, #10]
    bc6c:	b151      	cbz	r1, bc84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bc6e:	2002      	movs	r0, #2
    bc70:	7218      	strb	r0, [r3, #8]
    bc72:	2801      	cmp	r0, #1
    bc74:	d008      	beq.n	bc88 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bc76:	2802      	cmp	r0, #2
    bc78:	d00f      	beq.n	bc9a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc7a:	f640 213d 	movw	r1, #2621	; 0xa3d
    bc7e:	203e      	movs	r0, #62	; 0x3e
    bc80:	f7f8 ff72 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc84:	2001      	movs	r0, #1
    bc86:	e7f3      	b.n	bc70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bc88:	7a58      	ldrb	r0, [r3, #9]
    bc8a:	2802      	cmp	r0, #2
    bc8c:	d105      	bne.n	bc9a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc8e:	f000 f97f 	bl	bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    bc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc96:	f000 baad 	b.w	c1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    bc9a:	bd10      	pop	{r4, pc}
    bc9c:	20001290 	.word	0x20001290

0000bca0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bca0:	4902      	ldr	r1, [pc, #8]	; (bcac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bca2:	2000      	movs	r0, #0
    bca4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bca8:	4770      	bx	lr
    bcaa:	0000      	.short	0x0000
    bcac:	40008000 	.word	0x40008000

0000bcb0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bcb0:	4904      	ldr	r1, [pc, #16]	; (bcc4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    bcb2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    bcb6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    bcba:	4249      	negs	r1, r1
    bcbc:	7001      	strb	r1, [r0, #0]
    bcbe:	2001      	movs	r0, #1
    bcc0:	4770      	bx	lr
    bcc2:	0000      	.short	0x0000
    bcc4:	40001000 	.word	0x40001000

0000bcc8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bcc8:	4903      	ldr	r1, [pc, #12]	; (bcd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bcca:	0e02      	lsrs	r2, r0, #24
    bccc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bcd0:	0200      	lsls	r0, r0, #8
    bcd2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bcd6:	4770      	bx	lr
    bcd8:	40001000 	.word	0x40001000

0000bcdc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bcdc:	6800      	ldr	r0, [r0, #0]
    bcde:	4903      	ldr	r1, [pc, #12]	; (bcec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bce0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bce4:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bce8:	4770      	bx	lr
    bcea:	0000      	.short	0x0000
    bcec:	40001000 	.word	0x40001000

0000bcf0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    bcf0:	b510      	push	{r4, lr}
    bcf2:	2200      	movs	r2, #0
    bcf4:	2901      	cmp	r1, #1
    bcf6:	d006      	beq.n	bd06 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    bcf8:	2902      	cmp	r1, #2
    bcfa:	d002      	beq.n	bd02 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    bcfc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    bd00:	e014      	b.n	bd2c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    bd02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bd06:	490b      	ldr	r1, [pc, #44]	; (bd34 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    bd08:	430a      	orrs	r2, r1
    bd0a:	490b      	ldr	r1, [pc, #44]	; (bd38 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bd0c:	600a      	str	r2, [r1, #0]
    bd0e:	490b      	ldr	r1, [pc, #44]	; (bd3c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    bd10:	4308      	orrs	r0, r1
    bd12:	4909      	ldr	r1, [pc, #36]	; (bd38 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bd14:	1d09      	adds	r1, r1, #4
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	4809      	ldr	r0, [pc, #36]	; (bd40 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    bd1a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bd1e:	b2c0      	uxtb	r0, r0
    bd20:	2803      	cmp	r0, #3
    bd22:	d001      	beq.n	bd28 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    bd24:	280b      	cmp	r0, #11
    bd26:	d104      	bne.n	bd32 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    bd28:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    bd2c:	203e      	movs	r0, #62	; 0x3e
    bd2e:	f7f8 ff1b 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd32:	bd10      	pop	{r4, pc}
    bd34:	00100108 	.word	0x00100108
    bd38:	40001514 	.word	0x40001514
    bd3c:	02030000 	.word	0x02030000
    bd40:	40001000 	.word	0x40001000

0000bd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bd44:	4901      	ldr	r1, [pc, #4]	; (bd4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bd46:	7588      	strb	r0, [r1, #22]
    bd48:	4770      	bx	lr
    bd4a:	0000      	.short	0x0000
    bd4c:	20001290 	.word	0x20001290

0000bd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd54:	4852      	ldr	r0, [pc, #328]	; (bea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bd56:	f04f 0a01 	mov.w	sl, #1
    bd5a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bd5e:	4850      	ldr	r0, [pc, #320]	; (bea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bd60:	300c      	adds	r0, #12
    bd62:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bd66:	f000 ffe1 	bl	cd2c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    bd6a:	4c4e      	ldr	r4, [pc, #312]	; (bea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd6c:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bd70:	f000 f918 	bl	bfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bd74:	494c      	ldr	r1, [pc, #304]	; (bea8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bd76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bd78:	6008      	str	r0, [r1, #0]
    bd7a:	f8df 9130 	ldr.w	r9, [pc, #304]	; beac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bd7e:	2000      	movs	r0, #0
    bd80:	62a0      	str	r0, [r4, #40]	; 0x28
    bd82:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    bd86:	f240 131d 	movw	r3, #285	; 0x11d
    bd8a:	439a      	bics	r2, r3
    bd8c:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    bd90:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bd94:	f000 f986 	bl	c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    bd98:	4605      	mov	r5, r0
    bd9a:	4841      	ldr	r0, [pc, #260]	; (bea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bd9c:	3008      	adds	r0, #8
    bd9e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bda2:	4e3f      	ldr	r6, [pc, #252]	; (bea0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bda4:	61e0      	str	r0, [r4, #28]
    bda6:	1d36      	adds	r6, r6, #4
    bda8:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bdac:	61a0      	str	r0, [r4, #24]
    bdae:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    bdb2:	7d21      	ldrb	r1, [r4, #20]
    bdb4:	f884 1020 	strb.w	r1, [r4, #32]
    bdb8:	7a61      	ldrb	r1, [r4, #9]
    bdba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    bdbe:	46a0      	mov	r8, r4
    bdc0:	2400      	movs	r4, #0
    bdc2:	4639      	mov	r1, r7
    bdc4:	4628      	mov	r0, r5
    bdc6:	f000 f9e1 	bl	c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    bdca:	b910      	cbnz	r0, bdd2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    bdcc:	f8c9 a010 	str.w	sl, [r9, #16]
    bdd0:	2401      	movs	r4, #1
    bdd2:	4f34      	ldr	r7, [pc, #208]	; (bea4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bdd4:	07e8      	lsls	r0, r5, #31
    bdd6:	f1a7 0710 	sub.w	r7, r7, #16
    bdda:	d002      	beq.n	bde2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bddc:	6838      	ldr	r0, [r7, #0]
    bdde:	4780      	blx	r0
    bde0:	e032      	b.n	be48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    bde2:	07a8      	lsls	r0, r5, #30
    bde4:	d527      	bpl.n	be36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    bde6:	0768      	lsls	r0, r5, #29
    bde8:	d41f      	bmi.n	be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bdea:	f001 f8e9 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bdee:	b9e0      	cbnz	r0, be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bdf0:	f001 f8d6 	bl	cfa0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bdf4:	b9c8      	cbnz	r0, be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bdf6:	482e      	ldr	r0, [pc, #184]	; (beb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bdf8:	6800      	ldr	r0, [r0, #0]
    bdfa:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    bdfe:	f3c0 5142 	ubfx	r1, r0, #21, #3
    be02:	f000 030f 	and.w	r3, r0, #15
    be06:	f3c0 1203 	ubfx	r2, r0, #4, #4
    be0a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    be0e:	f1bc 0f00 	cmp.w	ip, #0
    be12:	d00a      	beq.n	be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be14:	b10b      	cbz	r3, be1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    be16:	b102      	cbz	r2, be1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    be18:	b938      	cbnz	r0, be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be1a:	4825      	ldr	r0, [pc, #148]	; (beb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    be1c:	1d00      	adds	r0, r0, #4
    be1e:	6800      	ldr	r0, [r0, #0]
    be20:	b118      	cbz	r0, be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be22:	2903      	cmp	r1, #3
    be24:	d201      	bcs.n	be2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be26:	f045 0504 	orr.w	r5, r5, #4
    be2a:	f345 0080 	sbfx	r0, r5, #2, #1
    be2e:	4621      	mov	r1, r4
    be30:	1c40      	adds	r0, r0, #1
    be32:	687a      	ldr	r2, [r7, #4]
    be34:	e007      	b.n	be46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    be36:	f015 0f28 	tst.w	r5, #40	; 0x28
    be3a:	d005      	beq.n	be48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    be3c:	f345 1140 	sbfx	r1, r5, #5, #1
    be40:	68ba      	ldr	r2, [r7, #8]
    be42:	4620      	mov	r0, r4
    be44:	1c49      	adds	r1, r1, #1
    be46:	4790      	blx	r2
    be48:	06e8      	lsls	r0, r5, #27
    be4a:	d501      	bpl.n	be50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    be4c:	68f8      	ldr	r0, [r7, #12]
    be4e:	4780      	blx	r0
    be50:	f898 1009 	ldrb.w	r1, [r8, #9]
    be54:	4640      	mov	r0, r8
    be56:	2902      	cmp	r1, #2
    be58:	d120      	bne.n	be9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    be5a:	7b01      	ldrb	r1, [r0, #12]
    be5c:	2900      	cmp	r1, #0
    be5e:	d01d      	beq.n	be9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    be60:	2902      	cmp	r1, #2
    be62:	d004      	beq.n	be6e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    be64:	2901      	cmp	r1, #1
    be66:	d009      	beq.n	be7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    be68:	f640 4134 	movw	r1, #3124	; 0xc34
    be6c:	e00d      	b.n	be8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    be6e:	69c1      	ldr	r1, [r0, #28]
    be70:	f8d8 0010 	ldr.w	r0, [r8, #16]
    be74:	4408      	add	r0, r1
    be76:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    be7a:	e00b      	b.n	be94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    be7c:	6901      	ldr	r1, [r0, #16]
    be7e:	f8d8 001c 	ldr.w	r0, [r8, #28]
    be82:	4281      	cmp	r1, r0
    be84:	d804      	bhi.n	be90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    be86:	f640 4135 	movw	r1, #3125	; 0xc35
    be8a:	203e      	movs	r0, #62	; 0x3e
    be8c:	f7f8 fe6c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be90:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    be94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be98:	f000 b9b6 	b.w	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    be9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bea0:	40008000 	.word	0x40008000
    bea4:	20001290 	.word	0x20001290
    bea8:	4001f508 	.word	0x4001f508
    beac:	40001000 	.word	0x40001000
    beb0:	40001450 	.word	0x40001450

0000beb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    beb4:	b570      	push	{r4, r5, r6, lr}
    beb6:	4b16      	ldr	r3, [pc, #88]	; (bf10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    beb8:	888c      	ldrh	r4, [r1, #4]
    beba:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bebe:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bec2:	780c      	ldrb	r4, [r1, #0]
    bec4:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bec8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    becc:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bed0:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    bed4:	2401      	movs	r4, #1
    bed6:	4084      	lsls	r4, r0
    bed8:	b2c9      	uxtb	r1, r1
    beda:	b2e5      	uxtb	r5, r4
    bedc:	4329      	orrs	r1, r5
    bede:	b132      	cbz	r2, beee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bee0:	2a01      	cmp	r2, #1
    bee2:	d00a      	beq.n	befa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    bee4:	f240 51ad 	movw	r1, #1453	; 0x5ad
    bee8:	203e      	movs	r0, #62	; 0x3e
    beea:	f7f8 fe3d 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beee:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bef2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bef6:	43a0      	bics	r0, r4
    bef8:	e004      	b.n	bf04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    befa:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    befe:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bf02:	4328      	orrs	r0, r5
    bf04:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bf08:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bf0c:	bd70      	pop	{r4, r5, r6, pc}
    bf0e:	0000      	.short	0x0000
    bf10:	40001000 	.word	0x40001000

0000bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bf14:	4901      	ldr	r1, [pc, #4]	; (bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bf16:	2001      	movs	r0, #1
    bf18:	7008      	strb	r0, [r1, #0]
    bf1a:	4770      	bx	lr
    bf1c:	200002f4 	.word	0x200002f4
    bf20:	480b      	ldr	r0, [pc, #44]	; (bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    bf22:	7d81      	ldrb	r1, [r0, #22]
    bf24:	480b      	ldr	r0, [pc, #44]	; (bf54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bf26:	5c40      	ldrb	r0, [r0, r1]
    bf28:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    bf2c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bf30:	d204      	bcs.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    bf32:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bf36:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bf3a:	e001      	b.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bf3c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bf40:	4a05      	ldr	r2, [pc, #20]	; (bf58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    bf42:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bf46:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bf4a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bf4e:	4770      	bx	lr
    bf50:	20001290 	.word	0x20001290
    bf54:	0000c3ba 	.word	0x0000c3ba
    bf58:	40001000 	.word	0x40001000
    bf5c:	b508      	push	{r3, lr}
    bf5e:	490b      	ldr	r1, [pc, #44]	; (bf8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    bf60:	466b      	mov	r3, sp
    bf62:	f991 2015 	ldrsb.w	r2, [r1, #21]
    bf66:	7d89      	ldrb	r1, [r1, #22]
    bf68:	f000 faca 	bl	c500 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    bf6c:	f99d 0000 	ldrsb.w	r0, [sp]
    bf70:	f000 fa9a 	bl	c4a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bf74:	f10d 0001 	add.w	r0, sp, #1
    bf78:	f7f8 fcca 	bl	4910 <mpsl_fem_pa_gain_set>
    bf7c:	2800      	cmp	r0, #0
    bf7e:	d004      	beq.n	bf8a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    bf80:	f240 51ee 	movw	r1, #1518	; 0x5ee
    bf84:	203e      	movs	r0, #62	; 0x3e
    bf86:	f7f8 fdef 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf8a:	bd08      	pop	{r3, pc}
    bf8c:	20001290 	.word	0x20001290
    bf90:	4803      	ldr	r0, [pc, #12]	; (bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    bf92:	7a01      	ldrb	r1, [r0, #8]
    bf94:	2901      	cmp	r1, #1
    bf96:	d102      	bne.n	bf9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    bf98:	7a80      	ldrb	r0, [r0, #10]
    bf9a:	f7ff bfdf 	b.w	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    bf9e:	4770      	bx	lr
    bfa0:	20001290 	.word	0x20001290
    bfa4:	480d      	ldr	r0, [pc, #52]	; (bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    bfa6:	b510      	push	{r4, lr}
    bfa8:	7a40      	ldrb	r0, [r0, #9]
    bfaa:	2801      	cmp	r0, #1
    bfac:	d00c      	beq.n	bfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    bfae:	2802      	cmp	r0, #2
    bfb0:	d113      	bne.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bfb2:	f7f8 fc8f 	bl	48d4 <mpsl_fem_lna_configuration_clear>
    bfb6:	2800      	cmp	r0, #0
    bfb8:	d00f      	beq.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bfba:	1c40      	adds	r0, r0, #1
    bfbc:	d00d      	beq.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bfbe:	f640 019a 	movw	r1, #2202	; 0x89a
    bfc2:	203e      	movs	r0, #62	; 0x3e
    bfc4:	f7f8 fdd0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfc8:	f7f8 fc96 	bl	48f8 <mpsl_fem_pa_configuration_clear>
    bfcc:	2800      	cmp	r0, #0
    bfce:	d004      	beq.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bfd0:	1c40      	adds	r0, r0, #1
    bfd2:	d002      	beq.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bfd4:	f640 0194 	movw	r1, #2196	; 0x894
    bfd8:	e7f3      	b.n	bfc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    bfda:	bd10      	pop	{r4, pc}
    bfdc:	20001290 	.word	0x20001290
    bfe0:	4808      	ldr	r0, [pc, #32]	; (c004 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bfe2:	2100      	movs	r1, #0
    bfe4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bfe8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bfec:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bff0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bff4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bff8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bffc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c000:	4770      	bx	lr
    c002:	0000      	.short	0x0000
    c004:	40001000 	.word	0x40001000
    c008:	4818      	ldr	r0, [pc, #96]	; (c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c00a:	b510      	push	{r4, lr}
    c00c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c010:	07c1      	lsls	r1, r0, #31
    c012:	d029      	beq.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c014:	0781      	lsls	r1, r0, #30
    c016:	d514      	bpl.n	c042 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c018:	4815      	ldr	r0, [pc, #84]	; (c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c01a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c01e:	f041 0101 	orr.w	r1, r1, #1
    c022:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c026:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c02a:	b2c0      	uxtb	r0, r0
    c02c:	280b      	cmp	r0, #11
    c02e:	d005      	beq.n	c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c030:	280a      	cmp	r0, #10
    c032:	d003      	beq.n	c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c034:	2803      	cmp	r0, #3
    c036:	d001      	beq.n	c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c038:	2802      	cmp	r0, #2
    c03a:	d115      	bne.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c03c:	f240 6117 	movw	r1, #1559	; 0x617
    c040:	e00f      	b.n	c062 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c042:	0740      	lsls	r0, r0, #29
    c044:	d510      	bpl.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c046:	480a      	ldr	r0, [pc, #40]	; (c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c048:	490a      	ldr	r1, [pc, #40]	; (c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c04a:	3008      	adds	r0, #8
    c04c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c050:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c054:	4808      	ldr	r0, [pc, #32]	; (c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c056:	f004 ff59 	bl	10f0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c05a:	2800      	cmp	r0, #0
    c05c:	d004      	beq.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c05e:	f240 611f 	movw	r1, #1567	; 0x61f
    c062:	203e      	movs	r0, #62	; 0x3e
    c064:	f7f8 fd80 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c068:	bd10      	pop	{r4, pc}
    c06a:	0000      	.short	0x0000
    c06c:	20001290 	.word	0x20001290
    c070:	40001000 	.word	0x40001000
    c074:	4001f098 	.word	0x4001f098
    c078:	40008000 	.word	0x40008000
    c07c:	4808      	ldr	r0, [pc, #32]	; (c0a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c07e:	4601      	mov	r1, r0
    c080:	79c2      	ldrb	r2, [r0, #7]
    c082:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c086:	b112      	cbz	r2, c08e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c088:	2a01      	cmp	r2, #1
    c08a:	d003      	beq.n	c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c08c:	e006      	b.n	c09c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c08e:	f041 0102 	orr.w	r1, r1, #2
    c092:	e001      	b.n	c098 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c094:	f041 0104 	orr.w	r1, r1, #4
    c098:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c09c:	f7ff bfb4 	b.w	c008 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c0a0:	20001290 	.word	0x20001290
    c0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0a8:	4d34      	ldr	r5, [pc, #208]	; (c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c0aa:	2400      	movs	r4, #0
    c0ac:	7b28      	ldrb	r0, [r5, #12]
    c0ae:	b138      	cbz	r0, c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c0b0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c0b4:	4832      	ldr	r0, [pc, #200]	; (c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c0b6:	f004 ff29 	bl	10f0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c0ba:	b108      	cbz	r0, c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c0bc:	2601      	movs	r6, #1
    c0be:	e000      	b.n	c0c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c0c0:	2600      	movs	r6, #0
    c0c2:	7a68      	ldrb	r0, [r5, #9]
    c0c4:	4f2f      	ldr	r7, [pc, #188]	; (c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c0c6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c0ca:	2801      	cmp	r0, #1
    c0cc:	d002      	beq.n	c0d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c0ce:	2802      	cmp	r0, #2
    c0d0:	d006      	beq.n	c0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c0d2:	e016      	b.n	c102 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c0d4:	4638      	mov	r0, r7
    c0d6:	f004 ff14 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c0da:	b190      	cbz	r0, c102 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c0dc:	2408      	movs	r4, #8
    c0de:	e010      	b.n	c102 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c0e0:	4638      	mov	r0, r7
    c0e2:	f004 ff0e 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c0e6:	b100      	cbz	r0, c0ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c0e8:	2402      	movs	r4, #2
    c0ea:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c0ee:	43c0      	mvns	r0, r0
    c0f0:	f340 0000 	sbfx	r0, r0, #0, #1
    c0f4:	1c40      	adds	r0, r0, #1
    c0f6:	d101      	bne.n	c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c0f8:	f044 0404 	orr.w	r4, r4, #4
    c0fc:	b10e      	cbz	r6, c102 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c0fe:	f044 0401 	orr.w	r4, r4, #1
    c102:	f014 0f0b 	tst.w	r4, #11
    c106:	d107      	bne.n	c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c108:	f44f 7188 	mov.w	r1, #272	; 0x110
    c10c:	4638      	mov	r0, r7
    c10e:	f004 fef8 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c112:	b108      	cbz	r0, c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c114:	f044 0410 	orr.w	r4, r4, #16
    c118:	481b      	ldr	r0, [pc, #108]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c11a:	7800      	ldrb	r0, [r0, #0]
    c11c:	b1f8      	cbz	r0, c15e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c11e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c122:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c126:	d007      	beq.n	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c128:	f44f 718a 	mov.w	r1, #276	; 0x114
    c12c:	4638      	mov	r0, r7
    c12e:	f004 fee8 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c132:	b108      	cbz	r0, c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c134:	2001      	movs	r0, #1
    c136:	e000      	b.n	c13a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c138:	2000      	movs	r0, #0
    c13a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c13e:	b13e      	cbz	r6, c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c140:	f44f 718c 	mov.w	r1, #280	; 0x118
    c144:	4638      	mov	r0, r7
    c146:	f004 fedc 	bl	10f02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c14a:	b108      	cbz	r0, c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c14c:	2001      	movs	r0, #1
    c14e:	e000      	b.n	c152 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c150:	2000      	movs	r0, #0
    c152:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c156:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c15a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c15e:	f7ff ff3f 	bl	bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c162:	06e0      	lsls	r0, r4, #27
    c164:	d506      	bpl.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c166:	0720      	lsls	r0, r4, #28
    c168:	d404      	bmi.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c16a:	7a68      	ldrb	r0, [r5, #9]
    c16c:	2801      	cmp	r0, #1
    c16e:	d101      	bne.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c170:	f044 0420 	orr.w	r4, r4, #32
    c174:	4620      	mov	r0, r4
    c176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c17a:	0000      	.short	0x0000
    c17c:	20001290 	.word	0x20001290
    c180:	40008000 	.word	0x40008000
    c184:	40001000 	.word	0x40001000
    c188:	200002f4 	.word	0x200002f4
    c18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c190:	4c17      	ldr	r4, [pc, #92]	; (c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c192:	460d      	mov	r5, r1
    c194:	7a21      	ldrb	r1, [r4, #8]
    c196:	b129      	cbz	r1, c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c198:	f010 0f11 	tst.w	r0, #17
    c19c:	d007      	beq.n	c1ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c19e:	f7ff fa7d 	bl	b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c1a2:	e023      	b.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c1a4:	f000 f88a 	bl	c2bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c1a8:	2000      	movs	r0, #0
    c1aa:	7320      	strb	r0, [r4, #12]
    c1ac:	e01e      	b.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c1ae:	2901      	cmp	r1, #1
    c1b0:	d001      	beq.n	c1b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c1b2:	2601      	movs	r6, #1
    c1b4:	e000      	b.n	c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c1b6:	2600      	movs	r6, #0
    c1b8:	79e0      	ldrb	r0, [r4, #7]
    c1ba:	2801      	cmp	r0, #1
    c1bc:	d00e      	beq.n	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c1be:	2700      	movs	r7, #0
    c1c0:	f000 f87c 	bl	c2bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c1c4:	2196      	movs	r1, #150	; 0x96
    c1c6:	4630      	mov	r0, r6
    c1c8:	f000 f88e 	bl	c2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c1cc:	4601      	mov	r1, r0
    c1ce:	b14f      	cbz	r7, c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c1d0:	353b      	adds	r5, #59	; 0x3b
    c1d2:	428d      	cmp	r5, r1
    c1d4:	d904      	bls.n	c1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c1d6:	2000      	movs	r0, #0
    c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1dc:	2701      	movs	r7, #1
    c1de:	e7ef      	b.n	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c1e0:	2001      	movs	r0, #1
    c1e2:	71e0      	strb	r0, [r4, #7]
    c1e4:	7aa2      	ldrb	r2, [r4, #10]
    c1e6:	4630      	mov	r0, r6
    c1e8:	f7ff fcda 	bl	bba0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c1ec:	2001      	movs	r0, #1
    c1ee:	e7f3      	b.n	c1d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c1f0:	20001290 	.word	0x20001290
    c1f4:	4803      	ldr	r0, [pc, #12]	; (c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c1f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c1fa:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c1fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c202:	4770      	bx	lr
    c204:	40001000 	.word	0x40001000
    c208:	4804      	ldr	r0, [pc, #16]	; (c21c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c20a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c20c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c210:	6281      	str	r1, [r0, #40]	; 0x28
    c212:	4903      	ldr	r1, [pc, #12]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c214:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c218:	6008      	str	r0, [r1, #0]
    c21a:	4770      	bx	lr
    c21c:	20001290 	.word	0x20001290
    c220:	4001f504 	.word	0x4001f504
    c224:	4a07      	ldr	r2, [pc, #28]	; (c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c226:	2000      	movs	r0, #0
    c228:	3208      	adds	r2, #8
    c22a:	4906      	ldr	r1, [pc, #24]	; (c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c22c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c230:	1d0a      	adds	r2, r1, #4
    c232:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c236:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c23a:	4902      	ldr	r1, [pc, #8]	; (c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c23c:	310c      	adds	r1, #12
    c23e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c242:	4770      	bx	lr
    c244:	40008000 	.word	0x40008000
    c248:	4903      	ldr	r1, [pc, #12]	; (c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    c24a:	79c9      	ldrb	r1, [r1, #7]
    c24c:	2900      	cmp	r1, #0
    c24e:	d102      	bne.n	c256 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c250:	4902      	ldr	r1, [pc, #8]	; (c25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    c252:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c256:	4770      	bx	lr
    c258:	20001290 	.word	0x20001290
    c25c:	4001f098 	.word	0x4001f098
    c260:	b510      	push	{r4, lr}
    c262:	4a14      	ldr	r2, [pc, #80]	; (c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c264:	b120      	cbz	r0, c270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c266:	2801      	cmp	r0, #1
    c268:	d011      	beq.n	c28e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    c26a:	f240 714c 	movw	r1, #1868	; 0x74c
    c26e:	e01c      	b.n	c2aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c270:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c274:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c278:	490f      	ldr	r1, [pc, #60]	; (c2b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c27a:	480e      	ldr	r0, [pc, #56]	; (c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c27c:	f7f8 fb42 	bl	4904 <mpsl_fem_pa_configuration_set>
    c280:	2800      	cmp	r0, #0
    c282:	d015      	beq.n	c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c284:	1c40      	adds	r0, r0, #1
    c286:	d013      	beq.n	c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c288:	f240 713b 	movw	r1, #1851	; 0x73b
    c28c:	e00d      	b.n	c2aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c28e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c292:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c296:	4908      	ldr	r1, [pc, #32]	; (c2b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c298:	4806      	ldr	r0, [pc, #24]	; (c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c29a:	f7f8 fb21 	bl	48e0 <mpsl_fem_lna_configuration_set>
    c29e:	2800      	cmp	r0, #0
    c2a0:	d006      	beq.n	c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c2a2:	1c40      	adds	r0, r0, #1
    c2a4:	d004      	beq.n	c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c2a6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    c2aa:	203e      	movs	r0, #62	; 0x3e
    c2ac:	f7f8 fc5c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2b0:	bd10      	pop	{r4, pc}
    c2b2:	0000      	.short	0x0000
    c2b4:	200002fc 	.word	0x200002fc
    c2b8:	0000c3e4 	.word	0x0000c3e4
    c2bc:	4802      	ldr	r0, [pc, #8]	; (c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c2be:	2100      	movs	r1, #0
    c2c0:	71c1      	strb	r1, [r0, #7]
    c2c2:	7201      	strb	r1, [r0, #8]
    c2c4:	7241      	strb	r1, [r0, #9]
    c2c6:	4770      	bx	lr
    c2c8:	20001290 	.word	0x20001290
    c2cc:	4a05      	ldr	r2, [pc, #20]	; (c2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    c2ce:	79d2      	ldrb	r2, [r2, #7]
    c2d0:	2a01      	cmp	r2, #1
    c2d2:	d006      	beq.n	c2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    c2d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2d8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c2dc:	fbb1 f1f2 	udiv	r1, r1, r2
    c2e0:	1a40      	subs	r0, r0, r1
    c2e2:	4770      	bx	lr
    c2e4:	20001290 	.word	0x20001290
    c2e8:	b570      	push	{r4, r5, r6, lr}
    c2ea:	4c13      	ldr	r4, [pc, #76]	; (c338 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    c2ec:	4603      	mov	r3, r0
    c2ee:	460d      	mov	r5, r1
    c2f0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c2f4:	2000      	movs	r0, #0
    c2f6:	b15a      	cbz	r2, c310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    c2f8:	4621      	mov	r1, r4
    c2fa:	f891 1020 	ldrb.w	r1, [r1, #32]
    c2fe:	b163      	cbz	r3, c31a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c300:	2b01      	cmp	r3, #1
    c302:	d111      	bne.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    c304:	2a01      	cmp	r2, #1
    c306:	4628      	mov	r0, r5
    c308:	d012      	beq.n	c330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    c30a:	f004 fe04 	bl	10f16 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c30e:	e009      	b.n	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c310:	f640 0147 	movw	r1, #2119	; 0x847
    c314:	203e      	movs	r0, #62	; 0x3e
    c316:	f7f8 fc27 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c31a:	2a01      	cmp	r2, #1
    c31c:	4628      	mov	r0, r5
    c31e:	d004      	beq.n	c32a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    c320:	f004 fe07 	bl	10f32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c324:	69e1      	ldr	r1, [r4, #28]
    c326:	4408      	add	r0, r1
    c328:	bd70      	pop	{r4, r5, r6, pc}
    c32a:	f000 f8d1 	bl	c4d0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c32e:	e7f9      	b.n	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c330:	f000 f8c0 	bl	c4b4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c334:	e7f6      	b.n	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c336:	0000      	.short	0x0000
    c338:	20001290 	.word	0x20001290
    c33c:	b510      	push	{r4, lr}
    c33e:	f7ff fc03 	bl	bb48 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c342:	f7ff fded 	bl	bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c346:	f7ff fe23 	bl	bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c34a:	f7ff ff53 	bl	c1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c34e:	f000 fe37 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c352:	2800      	cmp	r0, #0
    c354:	d108      	bne.n	c368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c356:	f000 fe23 	bl	cfa0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c35a:	2800      	cmp	r0, #0
    c35c:	d104      	bne.n	c368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c35e:	4803      	ldr	r0, [pc, #12]	; (c36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    c360:	6801      	ldr	r1, [r0, #0]
    c362:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c366:	6001      	str	r1, [r0, #0]
    c368:	bd10      	pop	{r4, pc}
    c36a:	0000      	.short	0x0000
    c36c:	40001568 	.word	0x40001568
    c370:	b510      	push	{r4, lr}
    c372:	4604      	mov	r4, r0
    c374:	f7ff fbe8 	bl	bb48 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c378:	f7ff fdd2 	bl	bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c37c:	4620      	mov	r0, r4
    c37e:	f7ff fded 	bl	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c382:	f000 fe1d 	bl	cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c386:	2800      	cmp	r0, #0
    c388:	d00d      	beq.n	c3a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    c38a:	4a09      	ldr	r2, [pc, #36]	; (c3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    c38c:	6811      	ldr	r1, [r2, #0]
    c38e:	0650      	lsls	r0, r2, #25
    c390:	2c02      	cmp	r4, #2
    c392:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c396:	d007      	beq.n	c3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    c398:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c39c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c3a0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c3a4:	6010      	str	r0, [r2, #0]
    c3a6:	bd10      	pop	{r4, pc}
    c3a8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c3ac:	e7f6      	b.n	c39c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c3ae:	0000      	.short	0x0000
    c3b0:	40001588 	.word	0x40001588
    c3b4:	a62c0000 	.word	0xa62c0000
    c3b8:	0604a1e0 	.word	0x0604a1e0
    c3bc:	0e0c0a08 	.word	0x0e0c0a08
    c3c0:	16141210 	.word	0x16141210
    c3c4:	201e1c18 	.word	0x201e1c18
    c3c8:	28262422 	.word	0x28262422
    c3cc:	302e2c2a 	.word	0x302e2c2a
    c3d0:	38363432 	.word	0x38363432
    c3d4:	403e3c3a 	.word	0x403e3c3a
    c3d8:	48464442 	.word	0x48464442
    c3dc:	024e4c4a 	.word	0x024e4c4a
    c3e0:	0000501a 	.word	0x0000501a
    c3e4:	00000001 	.word	0x00000001
    c3e8:	40001110 	.word	0x40001110
	...
    c400:	00001e14 	.word	0x00001e14
    c404:	00001130 	.word	0x00001130
    c408:	00000000 	.word	0x00000000
    c40c:	00000028 	.word	0x00000028
    c410:	00000018 	.word	0x00000018
    c414:	00000000 	.word	0x00000000
    c418:	00001e14 	.word	0x00001e14
    c41c:	00001130 	.word	0x00001130
    c420:	00000000 	.word	0x00000000
    c424:	00001770 	.word	0x00001770
    c428:	00000fa0 	.word	0x00000fa0

0000c42c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c42c:	b570      	push	{r4, r5, r6, lr}
    c42e:	4605      	mov	r5, r0
    c430:	4614      	mov	r4, r2
    c432:	4608      	mov	r0, r1
    c434:	f7ff fbae 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c438:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c43c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c440:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c444:	4807      	ldr	r0, [pc, #28]	; (c464 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c446:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c44a:	4408      	add	r0, r1
    c44c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c450:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c454:	fbb0 f5f1 	udiv	r5, r0, r1
    c458:	4620      	mov	r0, r4
    c45a:	f7ff fb6f 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c45e:	4428      	add	r0, r5
    c460:	1d40      	adds	r0, r0, #5
    c462:	bd70      	pop	{r4, r5, r6, pc}
    c464:	0000c4f4 	.word	0x0000c4f4

0000c468 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c468:	b570      	push	{r4, r5, r6, lr}
    c46a:	4d0e      	ldr	r5, [pc, #56]	; (c4a4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c46c:	461c      	mov	r4, r3
    c46e:	3d08      	subs	r5, #8
    c470:	4b0c      	ldr	r3, [pc, #48]	; (c4a4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c472:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c476:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c47e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c482:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c486:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c48a:	4418      	add	r0, r3
    c48c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c490:	fbb0 f5f1 	udiv	r5, r0, r1
    c494:	4610      	mov	r0, r2
    c496:	f7ff fb51 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c49a:	4428      	add	r0, r5
    c49c:	4420      	add	r0, r4
    c49e:	1d40      	adds	r0, r0, #5
    c4a0:	bd70      	pop	{r4, r5, r6, pc}
    c4a2:	0000      	.short	0x0000
    c4a4:	0000c4f4 	.word	0x0000c4f4

0000c4a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c4a8:	4901      	ldr	r1, [pc, #4]	; (c4b0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c4aa:	b2c0      	uxtb	r0, r0
    c4ac:	6008      	str	r0, [r1, #0]
    c4ae:	4770      	bx	lr
    c4b0:	4000150c 	.word	0x4000150c

0000c4b4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c4b4:	4a05      	ldr	r2, [pc, #20]	; (c4cc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c4b6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c4ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c4be:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c4c2:	fbb1 f1f2 	udiv	r1, r1, r2
    c4c6:	4408      	add	r0, r1
    c4c8:	1e80      	subs	r0, r0, #2
    c4ca:	4770      	bx	lr
    c4cc:	0000c4ec 	.word	0x0000c4ec

0000c4d0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c4d0:	4a05      	ldr	r2, [pc, #20]	; (c4e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c4d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c4d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c4da:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c4de:	fbb1 f1f2 	udiv	r1, r1, r2
    c4e2:	4408      	add	r0, r1
    c4e4:	4770      	bx	lr
    c4e6:	0000      	.short	0x0000
    c4e8:	0000c4ec 	.word	0x0000c4ec
    c4ec:	05dc0000 	.word	0x05dc0000
    c4f0:	000003e8 	.word	0x000003e8
    c4f4:	00000000 	.word	0x00000000
    c4f8:	00001e14 	.word	0x00001e14
    c4fc:	00001130 	.word	0x00001130

0000c500 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    c500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c504:	461e      	mov	r6, r3
    c506:	4617      	mov	r7, r2
    c508:	460c      	mov	r4, r1
    c50a:	4605      	mov	r5, r0
    c50c:	f7f4 fc6e 	bl	dec <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    c510:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c5b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    c514:	4680      	mov	r8, r0
    c516:	f899 0000 	ldrb.w	r0, [r9]
    c51a:	42a8      	cmp	r0, r5
    c51c:	d110      	bne.n	c540 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c51e:	f899 1001 	ldrb.w	r1, [r9, #1]
    c522:	4648      	mov	r0, r9
    c524:	42a1      	cmp	r1, r4
    c526:	d10b      	bne.n	c540 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c528:	f990 1002 	ldrsb.w	r1, [r0, #2]
    c52c:	42b9      	cmp	r1, r7
    c52e:	d107      	bne.n	c540 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c530:	78c2      	ldrb	r2, [r0, #3]
    c532:	4542      	cmp	r2, r8
    c534:	d104      	bne.n	c540 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c536:	8881      	ldrh	r1, [r0, #4]
    c538:	8031      	strh	r1, [r6, #0]
    c53a:	7980      	ldrb	r0, [r0, #6]
    c53c:	70b0      	strb	r0, [r6, #2]
    c53e:	e036      	b.n	c5ae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    c540:	463a      	mov	r2, r7
    c542:	4621      	mov	r1, r4
    c544:	2d01      	cmp	r5, #1
    c546:	d009      	beq.n	c55c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    c548:	2d02      	cmp	r5, #2
    c54a:	d009      	beq.n	c560 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    c54c:	2d04      	cmp	r5, #4
    c54e:	d009      	beq.n	c564 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c550:	2d08      	cmp	r5, #8
    c552:	d009      	beq.n	c568 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    c554:	f240 4133 	movw	r1, #1075	; 0x433
    c558:	2006      	movs	r0, #6
    c55a:	e00c      	b.n	c576 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    c55c:	2000      	movs	r0, #0
    c55e:	e004      	b.n	c56a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c560:	2001      	movs	r0, #1
    c562:	e002      	b.n	c56a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c564:	2003      	movs	r0, #3
    c566:	e000      	b.n	c56a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c568:	2002      	movs	r0, #2
    c56a:	466b      	mov	r3, sp
    c56c:	f7f4 fc84 	bl	e78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    c570:	b118      	cbz	r0, c57a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    c572:	213d      	movs	r1, #61	; 0x3d
    c574:	2075      	movs	r0, #117	; 0x75
    c576:	f7f8 faf7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c57a:	4620      	mov	r0, r4
    c57c:	f7ff f886 	bl	b68c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    c580:	4602      	mov	r2, r0
    c582:	4631      	mov	r1, r6
    c584:	f99d 0000 	ldrsb.w	r0, [sp]
    c588:	f7f8 f9ce 	bl	4928 <mpsl_fem_tx_power_split>
    c58c:	4601      	mov	r1, r0
    c58e:	f889 1007 	strb.w	r1, [r9, #7]
    c592:	8831      	ldrh	r1, [r6, #0]
    c594:	f8a9 1004 	strh.w	r1, [r9, #4]
    c598:	78b1      	ldrb	r1, [r6, #2]
    c59a:	f889 1006 	strb.w	r1, [r9, #6]
    c59e:	f889 5000 	strb.w	r5, [r9]
    c5a2:	f889 4001 	strb.w	r4, [r9, #1]
    c5a6:	f889 7002 	strb.w	r7, [r9, #2]
    c5aa:	f889 8003 	strb.w	r8, [r9, #3]
    c5ae:	f999 0007 	ldrsb.w	r0, [r9, #7]
    c5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c5b6:	0000      	.short	0x0000
    c5b8:	20000345 	.word	0x20000345

0000c5bc <__udivmoddi4>:
    c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5c0:	4607      	mov	r7, r0
    c5c2:	468c      	mov	ip, r1
    c5c4:	4608      	mov	r0, r1
    c5c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5c8:	4615      	mov	r5, r2
    c5ca:	463c      	mov	r4, r7
    c5cc:	4619      	mov	r1, r3
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	f040 80c6 	bne.w	c760 <__udivmoddi4+0x1a4>
    c5d4:	4282      	cmp	r2, r0
    c5d6:	fab2 f782 	clz	r7, r2
    c5da:	d946      	bls.n	c66a <__udivmoddi4+0xae>
    c5dc:	b14f      	cbz	r7, c5f2 <__udivmoddi4+0x36>
    c5de:	f1c7 0e20 	rsb	lr, r7, #32
    c5e2:	fa24 fe0e 	lsr.w	lr, r4, lr
    c5e6:	fa00 f307 	lsl.w	r3, r0, r7
    c5ea:	40bd      	lsls	r5, r7
    c5ec:	ea4e 0c03 	orr.w	ip, lr, r3
    c5f0:	40bc      	lsls	r4, r7
    c5f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c5f6:	fa1f fe85 	uxth.w	lr, r5
    c5fa:	fbbc f9f8 	udiv	r9, ip, r8
    c5fe:	0c22      	lsrs	r2, r4, #16
    c600:	fb08 c319 	mls	r3, r8, r9, ip
    c604:	fb09 fa0e 	mul.w	sl, r9, lr
    c608:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c60c:	459a      	cmp	sl, r3
    c60e:	d928      	bls.n	c662 <__udivmoddi4+0xa6>
    c610:	18eb      	adds	r3, r5, r3
    c612:	f109 30ff 	add.w	r0, r9, #4294967295
    c616:	d204      	bcs.n	c622 <__udivmoddi4+0x66>
    c618:	459a      	cmp	sl, r3
    c61a:	d902      	bls.n	c622 <__udivmoddi4+0x66>
    c61c:	f1a9 0002 	sub.w	r0, r9, #2
    c620:	442b      	add	r3, r5
    c622:	eba3 030a 	sub.w	r3, r3, sl
    c626:	b2a4      	uxth	r4, r4
    c628:	fbb3 f2f8 	udiv	r2, r3, r8
    c62c:	fb08 3312 	mls	r3, r8, r2, r3
    c630:	fb02 fe0e 	mul.w	lr, r2, lr
    c634:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c638:	45a6      	cmp	lr, r4
    c63a:	d914      	bls.n	c666 <__udivmoddi4+0xaa>
    c63c:	192c      	adds	r4, r5, r4
    c63e:	f102 33ff 	add.w	r3, r2, #4294967295
    c642:	d203      	bcs.n	c64c <__udivmoddi4+0x90>
    c644:	45a6      	cmp	lr, r4
    c646:	d901      	bls.n	c64c <__udivmoddi4+0x90>
    c648:	1e93      	subs	r3, r2, #2
    c64a:	442c      	add	r4, r5
    c64c:	eba4 040e 	sub.w	r4, r4, lr
    c650:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c654:	b11e      	cbz	r6, c65e <__udivmoddi4+0xa2>
    c656:	40fc      	lsrs	r4, r7
    c658:	2300      	movs	r3, #0
    c65a:	6034      	str	r4, [r6, #0]
    c65c:	6073      	str	r3, [r6, #4]
    c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c662:	4648      	mov	r0, r9
    c664:	e7dd      	b.n	c622 <__udivmoddi4+0x66>
    c666:	4613      	mov	r3, r2
    c668:	e7f0      	b.n	c64c <__udivmoddi4+0x90>
    c66a:	b902      	cbnz	r2, c66e <__udivmoddi4+0xb2>
    c66c:	deff      	udf	#255	; 0xff
    c66e:	bb87      	cbnz	r7, c6d2 <__udivmoddi4+0x116>
    c670:	1a83      	subs	r3, r0, r2
    c672:	2101      	movs	r1, #1
    c674:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c678:	b2aa      	uxth	r2, r5
    c67a:	fbb3 fcfe 	udiv	ip, r3, lr
    c67e:	0c20      	lsrs	r0, r4, #16
    c680:	fb0e 331c 	mls	r3, lr, ip, r3
    c684:	fb0c f802 	mul.w	r8, ip, r2
    c688:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c68c:	4598      	cmp	r8, r3
    c68e:	d963      	bls.n	c758 <__udivmoddi4+0x19c>
    c690:	18eb      	adds	r3, r5, r3
    c692:	f10c 30ff 	add.w	r0, ip, #4294967295
    c696:	d204      	bcs.n	c6a2 <__udivmoddi4+0xe6>
    c698:	4598      	cmp	r8, r3
    c69a:	d902      	bls.n	c6a2 <__udivmoddi4+0xe6>
    c69c:	f1ac 0002 	sub.w	r0, ip, #2
    c6a0:	442b      	add	r3, r5
    c6a2:	eba3 0308 	sub.w	r3, r3, r8
    c6a6:	b2a4      	uxth	r4, r4
    c6a8:	fbb3 fcfe 	udiv	ip, r3, lr
    c6ac:	fb0e 331c 	mls	r3, lr, ip, r3
    c6b0:	fb0c f202 	mul.w	r2, ip, r2
    c6b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c6b8:	42a2      	cmp	r2, r4
    c6ba:	d94f      	bls.n	c75c <__udivmoddi4+0x1a0>
    c6bc:	192c      	adds	r4, r5, r4
    c6be:	f10c 33ff 	add.w	r3, ip, #4294967295
    c6c2:	d204      	bcs.n	c6ce <__udivmoddi4+0x112>
    c6c4:	42a2      	cmp	r2, r4
    c6c6:	d902      	bls.n	c6ce <__udivmoddi4+0x112>
    c6c8:	f1ac 0302 	sub.w	r3, ip, #2
    c6cc:	442c      	add	r4, r5
    c6ce:	1aa4      	subs	r4, r4, r2
    c6d0:	e7be      	b.n	c650 <__udivmoddi4+0x94>
    c6d2:	f1c7 0c20 	rsb	ip, r7, #32
    c6d6:	fa20 f80c 	lsr.w	r8, r0, ip
    c6da:	fa00 f307 	lsl.w	r3, r0, r7
    c6de:	fa24 fc0c 	lsr.w	ip, r4, ip
    c6e2:	40bd      	lsls	r5, r7
    c6e4:	ea4c 0203 	orr.w	r2, ip, r3
    c6e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c6ec:	b2ab      	uxth	r3, r5
    c6ee:	fbb8 fcfe 	udiv	ip, r8, lr
    c6f2:	0c11      	lsrs	r1, r2, #16
    c6f4:	fb0e 801c 	mls	r0, lr, ip, r8
    c6f8:	fb0c f903 	mul.w	r9, ip, r3
    c6fc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c700:	4581      	cmp	r9, r0
    c702:	fa04 f407 	lsl.w	r4, r4, r7
    c706:	d923      	bls.n	c750 <__udivmoddi4+0x194>
    c708:	1828      	adds	r0, r5, r0
    c70a:	f10c 31ff 	add.w	r1, ip, #4294967295
    c70e:	d204      	bcs.n	c71a <__udivmoddi4+0x15e>
    c710:	4581      	cmp	r9, r0
    c712:	d902      	bls.n	c71a <__udivmoddi4+0x15e>
    c714:	f1ac 0102 	sub.w	r1, ip, #2
    c718:	4428      	add	r0, r5
    c71a:	eba0 0009 	sub.w	r0, r0, r9
    c71e:	b292      	uxth	r2, r2
    c720:	fbb0 fcfe 	udiv	ip, r0, lr
    c724:	fb0e 001c 	mls	r0, lr, ip, r0
    c728:	fb0c f803 	mul.w	r8, ip, r3
    c72c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c730:	4598      	cmp	r8, r3
    c732:	d90f      	bls.n	c754 <__udivmoddi4+0x198>
    c734:	18eb      	adds	r3, r5, r3
    c736:	f10c 32ff 	add.w	r2, ip, #4294967295
    c73a:	d204      	bcs.n	c746 <__udivmoddi4+0x18a>
    c73c:	4598      	cmp	r8, r3
    c73e:	d902      	bls.n	c746 <__udivmoddi4+0x18a>
    c740:	f1ac 0202 	sub.w	r2, ip, #2
    c744:	442b      	add	r3, r5
    c746:	eba3 0308 	sub.w	r3, r3, r8
    c74a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c74e:	e791      	b.n	c674 <__udivmoddi4+0xb8>
    c750:	4661      	mov	r1, ip
    c752:	e7e2      	b.n	c71a <__udivmoddi4+0x15e>
    c754:	4662      	mov	r2, ip
    c756:	e7f6      	b.n	c746 <__udivmoddi4+0x18a>
    c758:	4660      	mov	r0, ip
    c75a:	e7a2      	b.n	c6a2 <__udivmoddi4+0xe6>
    c75c:	4663      	mov	r3, ip
    c75e:	e7b6      	b.n	c6ce <__udivmoddi4+0x112>
    c760:	4283      	cmp	r3, r0
    c762:	d905      	bls.n	c770 <__udivmoddi4+0x1b4>
    c764:	b10e      	cbz	r6, c76a <__udivmoddi4+0x1ae>
    c766:	e9c6 7000 	strd	r7, r0, [r6]
    c76a:	2100      	movs	r1, #0
    c76c:	4608      	mov	r0, r1
    c76e:	e776      	b.n	c65e <__udivmoddi4+0xa2>
    c770:	fab3 f183 	clz	r1, r3
    c774:	b981      	cbnz	r1, c798 <__udivmoddi4+0x1dc>
    c776:	4283      	cmp	r3, r0
    c778:	d301      	bcc.n	c77e <__udivmoddi4+0x1c2>
    c77a:	42ba      	cmp	r2, r7
    c77c:	d80a      	bhi.n	c794 <__udivmoddi4+0x1d8>
    c77e:	1abc      	subs	r4, r7, r2
    c780:	eb60 0303 	sbc.w	r3, r0, r3
    c784:	2001      	movs	r0, #1
    c786:	469c      	mov	ip, r3
    c788:	2e00      	cmp	r6, #0
    c78a:	d068      	beq.n	c85e <__udivmoddi4+0x2a2>
    c78c:	e9c6 4c00 	strd	r4, ip, [r6]
    c790:	2100      	movs	r1, #0
    c792:	e764      	b.n	c65e <__udivmoddi4+0xa2>
    c794:	4608      	mov	r0, r1
    c796:	e7f7      	b.n	c788 <__udivmoddi4+0x1cc>
    c798:	f1c1 0c20 	rsb	ip, r1, #32
    c79c:	408b      	lsls	r3, r1
    c79e:	fa22 f40c 	lsr.w	r4, r2, ip
    c7a2:	431c      	orrs	r4, r3
    c7a4:	fa02 f501 	lsl.w	r5, r2, r1
    c7a8:	fa00 f301 	lsl.w	r3, r0, r1
    c7ac:	fa27 f20c 	lsr.w	r2, r7, ip
    c7b0:	fa20 fb0c 	lsr.w	fp, r0, ip
    c7b4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c7b8:	4313      	orrs	r3, r2
    c7ba:	fbbb f8f9 	udiv	r8, fp, r9
    c7be:	fa1f fe84 	uxth.w	lr, r4
    c7c2:	fb09 bb18 	mls	fp, r9, r8, fp
    c7c6:	0c1a      	lsrs	r2, r3, #16
    c7c8:	fb08 fa0e 	mul.w	sl, r8, lr
    c7cc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c7d0:	4592      	cmp	sl, r2
    c7d2:	fa07 f701 	lsl.w	r7, r7, r1
    c7d6:	d93e      	bls.n	c856 <__udivmoddi4+0x29a>
    c7d8:	18a2      	adds	r2, r4, r2
    c7da:	f108 30ff 	add.w	r0, r8, #4294967295
    c7de:	d204      	bcs.n	c7ea <__udivmoddi4+0x22e>
    c7e0:	4592      	cmp	sl, r2
    c7e2:	d902      	bls.n	c7ea <__udivmoddi4+0x22e>
    c7e4:	f1a8 0002 	sub.w	r0, r8, #2
    c7e8:	4422      	add	r2, r4
    c7ea:	eba2 020a 	sub.w	r2, r2, sl
    c7ee:	b29b      	uxth	r3, r3
    c7f0:	fbb2 f8f9 	udiv	r8, r2, r9
    c7f4:	fb09 2218 	mls	r2, r9, r8, r2
    c7f8:	fb08 fe0e 	mul.w	lr, r8, lr
    c7fc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c800:	4596      	cmp	lr, r2
    c802:	d92a      	bls.n	c85a <__udivmoddi4+0x29e>
    c804:	18a2      	adds	r2, r4, r2
    c806:	f108 33ff 	add.w	r3, r8, #4294967295
    c80a:	d204      	bcs.n	c816 <__udivmoddi4+0x25a>
    c80c:	4596      	cmp	lr, r2
    c80e:	d902      	bls.n	c816 <__udivmoddi4+0x25a>
    c810:	f1a8 0302 	sub.w	r3, r8, #2
    c814:	4422      	add	r2, r4
    c816:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c81a:	fba0 9305 	umull	r9, r3, r0, r5
    c81e:	eba2 020e 	sub.w	r2, r2, lr
    c822:	429a      	cmp	r2, r3
    c824:	46ce      	mov	lr, r9
    c826:	4698      	mov	r8, r3
    c828:	d302      	bcc.n	c830 <__udivmoddi4+0x274>
    c82a:	d106      	bne.n	c83a <__udivmoddi4+0x27e>
    c82c:	454f      	cmp	r7, r9
    c82e:	d204      	bcs.n	c83a <__udivmoddi4+0x27e>
    c830:	ebb9 0e05 	subs.w	lr, r9, r5
    c834:	eb63 0804 	sbc.w	r8, r3, r4
    c838:	3801      	subs	r0, #1
    c83a:	b186      	cbz	r6, c85e <__udivmoddi4+0x2a2>
    c83c:	ebb7 030e 	subs.w	r3, r7, lr
    c840:	eb62 0708 	sbc.w	r7, r2, r8
    c844:	fa07 fc0c 	lsl.w	ip, r7, ip
    c848:	40cb      	lsrs	r3, r1
    c84a:	ea4c 0303 	orr.w	r3, ip, r3
    c84e:	40cf      	lsrs	r7, r1
    c850:	e9c6 3700 	strd	r3, r7, [r6]
    c854:	e79c      	b.n	c790 <__udivmoddi4+0x1d4>
    c856:	4640      	mov	r0, r8
    c858:	e7c7      	b.n	c7ea <__udivmoddi4+0x22e>
    c85a:	4643      	mov	r3, r8
    c85c:	e7db      	b.n	c816 <__udivmoddi4+0x25a>
    c85e:	4631      	mov	r1, r6
    c860:	e6fd      	b.n	c65e <__udivmoddi4+0xa2>
    c862:	2804      	cmp	r0, #4
    c864:	d202      	bcs.n	c86c <__udivmoddi4+0x2b0>
    c866:	f04f 0028 	mov.w	r0, #40	; 0x28
    c86a:	4770      	bx	lr
    c86c:	d102      	bne.n	c874 <__udivmoddi4+0x2b8>
    c86e:	f04f 0010 	mov.w	r0, #16
    c872:	4770      	bx	lr
    c874:	f04f 0000 	mov.w	r0, #0
    c878:	4770      	bx	lr
    c87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c87e:	000d      	movs	r5, r1
    c880:	4604      	mov	r4, r0
    c882:	f04f 0602 	mov.w	r6, #2
    c886:	f04f 0701 	mov.w	r7, #1
    c88a:	d008      	beq.n	c89e <__udivmoddi4+0x2e2>
    c88c:	7828      	ldrb	r0, [r5, #0]
    c88e:	b1d0      	cbz	r0, c8c6 <__udivmoddi4+0x30a>
    c890:	2801      	cmp	r0, #1
    c892:	d007      	beq.n	c8a4 <__udivmoddi4+0x2e8>
    c894:	2802      	cmp	r0, #2
    c896:	d014      	beq.n	c8c2 <__udivmoddi4+0x306>
    c898:	2803      	cmp	r0, #3
    c89a:	d13e      	bne.n	c91a <__udivmoddi4+0x35e>
    c89c:	e016      	b.n	c8cc <__udivmoddi4+0x310>
    c89e:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    c8a2:	e00e      	b.n	c8c2 <__udivmoddi4+0x306>
    c8a4:	6868      	ldr	r0, [r5, #4]
    c8a6:	28c8      	cmp	r0, #200	; 0xc8
    c8a8:	d303      	bcc.n	c8b2 <__udivmoddi4+0x2f6>
    c8aa:	2103      	movs	r1, #3
    c8ac:	f7f5 fbd6 	bl	205c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c8b0:	b108      	cbz	r0, c8b6 <__udivmoddi4+0x2fa>
    c8b2:	2600      	movs	r6, #0
    c8b4:	e007      	b.n	c8c6 <__udivmoddi4+0x30a>
    c8b6:	4620      	mov	r0, r4
    c8b8:	6869      	ldr	r1, [r5, #4]
    c8ba:	f000 f943 	bl	cb44 <__udivmoddi4+0x588>
    c8be:	2601      	movs	r6, #1
    c8c0:	e001      	b.n	c8c6 <__udivmoddi4+0x30a>
    c8c2:	f7f4 fb27 	bl	f14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    c8c6:	4630      	mov	r0, r6
    c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8cc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c8d0:	2800      	cmp	r0, #0
    c8d2:	d1f6      	bne.n	c8c2 <__udivmoddi4+0x306>
    c8d4:	6868      	ldr	r0, [r5, #4]
    c8d6:	f7f4 faef 	bl	eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    c8da:	b1f0      	cbz	r0, c91a <__udivmoddi4+0x35e>
    c8dc:	6869      	ldr	r1, [r5, #4]
    c8de:	7808      	ldrb	r0, [r1, #0]
    c8e0:	b130      	cbz	r0, c8f0 <__udivmoddi4+0x334>
    c8e2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c8e6:	2805      	cmp	r0, #5
    c8e8:	d008      	beq.n	c8fc <__udivmoddi4+0x340>
    c8ea:	f44f 71be 	mov.w	r1, #380	; 0x17c
    c8ee:	e011      	b.n	c914 <__udivmoddi4+0x358>
    c8f0:	4620      	mov	r0, r4
    c8f2:	f000 f92f 	bl	cb54 <__udivmoddi4+0x598>
    c8f6:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    c8fa:	e7e2      	b.n	c8c2 <__udivmoddi4+0x306>
    c8fc:	4620      	mov	r0, r4
    c8fe:	f000 f942 	bl	cb86 <__udivmoddi4+0x5ca>
    c902:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c906:	4621      	mov	r1, r4
    c908:	f000 f80a 	bl	c920 <__udivmoddi4+0x364>
    c90c:	2800      	cmp	r0, #0
    c90e:	d1d8      	bne.n	c8c2 <__udivmoddi4+0x306>
    c910:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    c914:	206a      	movs	r0, #106	; 0x6a
    c916:	f7f7 fe57 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c91a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c91e:	e7d0      	b.n	c8c2 <__udivmoddi4+0x306>
    c920:	f7f5 bd7e 	b.w	2420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c928:	460d      	mov	r5, r1
    c92a:	0004      	movs	r4, r0
    c92c:	d00c      	beq.n	c948 <__udivmoddi4+0x38c>
    c92e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    c932:	2700      	movs	r7, #0
    c934:	2002      	movs	r0, #2
    c936:	2d09      	cmp	r5, #9
    c938:	d270      	bcs.n	ca1c <__udivmoddi4+0x460>
    c93a:	e8df f005 	tbb	[pc, r5]
    c93e:	1108      	.short	0x1108
    c940:	70653535 	.word	0x70653535
    c944:	0093a588 	.word	0x0093a588
    c948:	f44f 71cb 	mov.w	r1, #406	; 0x196
    c94c:	e0f7      	b.n	cb3e <__udivmoddi4+0x582>
    c94e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c952:	2804      	cmp	r0, #4
    c954:	d07a      	beq.n	ca4c <__udivmoddi4+0x490>
    c956:	2803      	cmp	r0, #3
    c958:	d0fc      	beq.n	c954 <__udivmoddi4+0x398>
    c95a:	f240 11a1 	movw	r1, #417	; 0x1a1
    c95e:	e0ee      	b.n	cb3e <__udivmoddi4+0x582>
    c960:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c964:	2804      	cmp	r0, #4
    c966:	d004      	beq.n	c972 <__udivmoddi4+0x3b6>
    c968:	2803      	cmp	r0, #3
    c96a:	d002      	beq.n	c972 <__udivmoddi4+0x3b6>
    c96c:	f240 11a5 	movw	r1, #421	; 0x1a5
    c970:	e0e5      	b.n	cb3e <__udivmoddi4+0x582>
    c972:	2005      	movs	r0, #5
    c974:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c978:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c97c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c980:	bbb0      	cbnz	r0, c9f0 <__udivmoddi4+0x434>
    c982:	2100      	movs	r1, #0
    c984:	4620      	mov	r0, r4
    c986:	f000 f8dd 	bl	cb44 <__udivmoddi4+0x588>
    c98a:	7820      	ldrb	r0, [r4, #0]
    c98c:	2801      	cmp	r0, #1
    c98e:	d006      	beq.n	c99e <__udivmoddi4+0x3e2>
    c990:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    c994:	e9c4 0106 	strd	r0, r1, [r4, #24]
    c998:	2100      	movs	r1, #0
    c99a:	6a22      	ldr	r2, [r4, #32]
    c99c:	e048      	b.n	ca30 <__udivmoddi4+0x474>
    c99e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c9a2:	f7f5 fc49 	bl	2238 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    c9a6:	e7f5      	b.n	c994 <__udivmoddi4+0x3d8>
    c9a8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    c9ac:	2904      	cmp	r1, #4
    c9ae:	d004      	beq.n	c9ba <__udivmoddi4+0x3fe>
    c9b0:	2903      	cmp	r1, #3
    c9b2:	d002      	beq.n	c9ba <__udivmoddi4+0x3fe>
    c9b4:	f240 11c3 	movw	r1, #451	; 0x1c3
    c9b8:	e0c1      	b.n	cb3e <__udivmoddi4+0x582>
    c9ba:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    c9be:	b122      	cbz	r2, c9ca <__udivmoddi4+0x40e>
    c9c0:	4621      	mov	r1, r4
    c9c2:	4630      	mov	r0, r6
    c9c4:	f000 f8fe 	bl	cbc4 <__udivmoddi4+0x608>
    c9c8:	e0b1      	b.n	cb2e <__udivmoddi4+0x572>
    c9ca:	2904      	cmp	r1, #4
    c9cc:	d000      	beq.n	c9d0 <__udivmoddi4+0x414>
    c9ce:	2001      	movs	r0, #1
    c9d0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c9d4:	6a22      	ldr	r2, [r4, #32]
    c9d6:	2d02      	cmp	r5, #2
    c9d8:	d00b      	beq.n	c9f2 <__udivmoddi4+0x436>
    c9da:	2106      	movs	r1, #6
    c9dc:	4630      	mov	r0, r6
    c9de:	4790      	blx	r2
    c9e0:	2800      	cmp	r0, #0
    c9e2:	d06d      	beq.n	cac0 <__udivmoddi4+0x504>
    c9e4:	7800      	ldrb	r0, [r0, #0]
    c9e6:	2800      	cmp	r0, #0
    c9e8:	d06a      	beq.n	cac0 <__udivmoddi4+0x504>
    c9ea:	f240 11dd 	movw	r1, #477	; 0x1dd
    c9ee:	e0a6      	b.n	cb3e <__udivmoddi4+0x582>
    c9f0:	e034      	b.n	ca5c <__udivmoddi4+0x4a0>
    c9f2:	2105      	movs	r1, #5
    c9f4:	4630      	mov	r0, r6
    c9f6:	4790      	blx	r2
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d07c      	beq.n	caf6 <__udivmoddi4+0x53a>
    c9fc:	7800      	ldrb	r0, [r0, #0]
    c9fe:	2800      	cmp	r0, #0
    ca00:	d079      	beq.n	caf6 <__udivmoddi4+0x53a>
    ca02:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    ca06:	e09a      	b.n	cb3e <__udivmoddi4+0x582>
    ca08:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca0c:	2805      	cmp	r0, #5
    ca0e:	d002      	beq.n	ca16 <__udivmoddi4+0x45a>
    ca10:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    ca14:	e093      	b.n	cb3e <__udivmoddi4+0x582>
    ca16:	2102      	movs	r1, #2
    ca18:	6a22      	ldr	r2, [r4, #32]
    ca1a:	e009      	b.n	ca30 <__udivmoddi4+0x474>
    ca1c:	e07e      	b.n	cb1c <__udivmoddi4+0x560>
    ca1e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca22:	2805      	cmp	r0, #5
    ca24:	d002      	beq.n	ca2c <__udivmoddi4+0x470>
    ca26:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    ca2a:	e088      	b.n	cb3e <__udivmoddi4+0x582>
    ca2c:	6a22      	ldr	r2, [r4, #32]
    ca2e:	2101      	movs	r1, #1
    ca30:	4630      	mov	r0, r6
    ca32:	4790      	blx	r2
    ca34:	4601      	mov	r1, r0
    ca36:	4620      	mov	r0, r4
    ca38:	f7ff ff1f 	bl	c87a <__udivmoddi4+0x2be>
    ca3c:	2802      	cmp	r0, #2
    ca3e:	d076      	beq.n	cb2e <__udivmoddi4+0x572>
    ca40:	b3e8      	cbz	r0, cabe <__udivmoddi4+0x502>
    ca42:	2801      	cmp	r0, #1
    ca44:	d06d      	beq.n	cb22 <__udivmoddi4+0x566>
    ca46:	f240 212a 	movw	r1, #554	; 0x22a
    ca4a:	e078      	b.n	cb3e <__udivmoddi4+0x582>
    ca4c:	e071      	b.n	cb32 <__udivmoddi4+0x576>
    ca4e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca52:	2805      	cmp	r0, #5
    ca54:	d002      	beq.n	ca5c <__udivmoddi4+0x4a0>
    ca56:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    ca5a:	e070      	b.n	cb3e <__udivmoddi4+0x582>
    ca5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ca60:	f7f4 ba58 	b.w	f14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    ca64:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca68:	2805      	cmp	r0, #5
    ca6a:	d002      	beq.n	ca72 <__udivmoddi4+0x4b6>
    ca6c:	f240 11f5 	movw	r1, #501	; 0x1f5
    ca70:	e065      	b.n	cb3e <__udivmoddi4+0x582>
    ca72:	6a22      	ldr	r2, [r4, #32]
    ca74:	210a      	movs	r1, #10
    ca76:	4630      	mov	r0, r6
    ca78:	4790      	blx	r2
    ca7a:	4601      	mov	r1, r0
    ca7c:	4620      	mov	r0, r4
    ca7e:	f7ff fefc 	bl	c87a <__udivmoddi4+0x2be>
    ca82:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    ca86:	e05a      	b.n	cb3e <__udivmoddi4+0x582>
    ca88:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    ca8c:	2905      	cmp	r1, #5
    ca8e:	d007      	beq.n	caa0 <__udivmoddi4+0x4e4>
    ca90:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    ca94:	b10a      	cbz	r2, ca9a <__udivmoddi4+0x4de>
    ca96:	2903      	cmp	r1, #3
    ca98:	d002      	beq.n	caa0 <__udivmoddi4+0x4e4>
    ca9a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    ca9e:	e04e      	b.n	cb3e <__udivmoddi4+0x582>
    caa0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    caa4:	b129      	cbz	r1, cab2 <__udivmoddi4+0x4f6>
    caa6:	4621      	mov	r1, r4
    caa8:	4630      	mov	r0, r6
    caaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    caae:	f000 b889 	b.w	cbc4 <__udivmoddi4+0x608>
    cab2:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    cab6:	b199      	cbz	r1, cae0 <__udivmoddi4+0x524>
    cab8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    cabc:	e001      	b.n	cac2 <__udivmoddi4+0x506>
    cabe:	e033      	b.n	cb28 <__udivmoddi4+0x56c>
    cac0:	e035      	b.n	cb2e <__udivmoddi4+0x572>
    cac2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cac6:	6a22      	ldr	r2, [r4, #32]
    cac8:	2108      	movs	r1, #8
    caca:	4630      	mov	r0, r6
    cacc:	4790      	blx	r2
    cace:	2800      	cmp	r0, #0
    cad0:	d011      	beq.n	caf6 <__udivmoddi4+0x53a>
    cad2:	7800      	ldrb	r0, [r0, #0]
    cad4:	2800      	cmp	r0, #0
    cad6:	d00e      	beq.n	caf6 <__udivmoddi4+0x53a>
    cad8:	f44f 7102 	mov.w	r1, #520	; 0x208
    cadc:	e02f      	b.n	cb3e <__udivmoddi4+0x582>
    cade:	e00a      	b.n	caf6 <__udivmoddi4+0x53a>
    cae0:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    cae4:	b161      	cbz	r1, cb00 <__udivmoddi4+0x544>
    cae6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    caea:	4621      	mov	r1, r4
    caec:	f7ff ff18 	bl	c920 <__udivmoddi4+0x364>
    caf0:	b118      	cbz	r0, cafa <__udivmoddi4+0x53e>
    caf2:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    caf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cafa:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cafe:	e01e      	b.n	cb3e <__udivmoddi4+0x582>
    cb00:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cb04:	6a22      	ldr	r2, [r4, #32]
    cb06:	2107      	movs	r1, #7
    cb08:	4630      	mov	r0, r6
    cb0a:	4790      	blx	r2
    cb0c:	2800      	cmp	r0, #0
    cb0e:	d0f2      	beq.n	caf6 <__udivmoddi4+0x53a>
    cb10:	7800      	ldrb	r0, [r0, #0]
    cb12:	2800      	cmp	r0, #0
    cb14:	d0ef      	beq.n	caf6 <__udivmoddi4+0x53a>
    cb16:	f44f 7105 	mov.w	r1, #532	; 0x214
    cb1a:	e010      	b.n	cb3e <__udivmoddi4+0x582>
    cb1c:	f240 2119 	movw	r1, #537	; 0x219
    cb20:	e00d      	b.n	cb3e <__udivmoddi4+0x582>
    cb22:	2104      	movs	r1, #4
    cb24:	6a22      	ldr	r2, [r4, #32]
    cb26:	e783      	b.n	ca30 <__udivmoddi4+0x474>
    cb28:	2103      	movs	r1, #3
    cb2a:	6a22      	ldr	r2, [r4, #32]
    cb2c:	e780      	b.n	ca30 <__udivmoddi4+0x474>
    cb2e:	2d00      	cmp	r5, #0
    cb30:	d1e1      	bne.n	caf6 <__udivmoddi4+0x53a>
    cb32:	f000 f8fd 	bl	cd30 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    cb36:	2800      	cmp	r0, #0
    cb38:	d0dd      	beq.n	caf6 <__udivmoddi4+0x53a>
    cb3a:	f240 2133 	movw	r1, #563	; 0x233
    cb3e:	206a      	movs	r0, #106	; 0x6a
    cb40:	f7f7 fd42 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cb44:	4602      	mov	r2, r0
    cb46:	7803      	ldrb	r3, [r0, #0]
    cb48:	6840      	ldr	r0, [r0, #4]
    cb4a:	4408      	add	r0, r1
    cb4c:	6050      	str	r0, [r2, #4]
    cb4e:	3859      	subs	r0, #89	; 0x59
    cb50:	f7f6 bb78 	b.w	3244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    cb54:	2201      	movs	r2, #1
    cb56:	7002      	strb	r2, [r0, #0]
    cb58:	2200      	movs	r2, #0
    cb5a:	72c2      	strb	r2, [r0, #11]
    cb5c:	790a      	ldrb	r2, [r1, #4]
    cb5e:	b172      	cbz	r2, cb7e <__udivmoddi4+0x5c2>
    cb60:	2200      	movs	r2, #0
    cb62:	8102      	strh	r2, [r0, #8]
    cb64:	794a      	ldrb	r2, [r1, #5]
    cb66:	b162      	cbz	r2, cb82 <__udivmoddi4+0x5c6>
    cb68:	2203      	movs	r2, #3
    cb6a:	7282      	strb	r2, [r0, #10]
    cb6c:	688a      	ldr	r2, [r1, #8]
    cb6e:	326a      	adds	r2, #106	; 0x6a
    cb70:	6042      	str	r2, [r0, #4]
    cb72:	68c9      	ldr	r1, [r1, #12]
    cb74:	6101      	str	r1, [r0, #16]
    cb76:	2103      	movs	r1, #3
    cb78:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cb7c:	4770      	bx	lr
    cb7e:	222b      	movs	r2, #43	; 0x2b
    cb80:	e7ef      	b.n	cb62 <__udivmoddi4+0x5a6>
    cb82:	2202      	movs	r2, #2
    cb84:	e7f1      	b.n	cb6a <__udivmoddi4+0x5ae>
    cb86:	b510      	push	{r4, lr}
    cb88:	2200      	movs	r2, #0
    cb8a:	7002      	strb	r2, [r0, #0]
    cb8c:	72c2      	strb	r2, [r0, #11]
    cb8e:	790a      	ldrb	r2, [r1, #4]
    cb90:	b1a2      	cbz	r2, cbbc <__udivmoddi4+0x600>
    cb92:	2200      	movs	r2, #0
    cb94:	8102      	strh	r2, [r0, #8]
    cb96:	794a      	ldrb	r2, [r1, #5]
    cb98:	b192      	cbz	r2, cbc0 <__udivmoddi4+0x604>
    cb9a:	2203      	movs	r2, #3
    cb9c:	7282      	strb	r2, [r0, #10]
    cb9e:	68ca      	ldr	r2, [r1, #12]
    cba0:	326a      	adds	r2, #106	; 0x6a
    cba2:	6042      	str	r2, [r0, #4]
    cba4:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    cba8:	6889      	ldr	r1, [r1, #8]
    cbaa:	17cb      	asrs	r3, r1, #31
    cbac:	1861      	adds	r1, r4, r1
    cbae:	415a      	adcs	r2, r3
    cbb0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    cbb4:	2104      	movs	r1, #4
    cbb6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cbba:	bd10      	pop	{r4, pc}
    cbbc:	222b      	movs	r2, #43	; 0x2b
    cbbe:	e7e9      	b.n	cb94 <__udivmoddi4+0x5d8>
    cbc0:	2202      	movs	r2, #2
    cbc2:	e7eb      	b.n	cb9c <__udivmoddi4+0x5e0>
    cbc4:	b570      	push	{r4, r5, r6, lr}
    cbc6:	4605      	mov	r5, r0
    cbc8:	460c      	mov	r4, r1
    cbca:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    cbce:	f7f6 f907 	bl	2de0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    cbd2:	b178      	cbz	r0, cbf4 <__udivmoddi4+0x638>
    cbd4:	4620      	mov	r0, r4
    cbd6:	f000 f810 	bl	cbfa <__udivmoddi4+0x63e>
    cbda:	6a22      	ldr	r2, [r4, #32]
    cbdc:	2109      	movs	r1, #9
    cbde:	4628      	mov	r0, r5
    cbe0:	4790      	blx	r2
    cbe2:	2800      	cmp	r0, #0
    cbe4:	d008      	beq.n	cbf8 <__udivmoddi4+0x63c>
    cbe6:	7800      	ldrb	r0, [r0, #0]
    cbe8:	2800      	cmp	r0, #0
    cbea:	d005      	beq.n	cbf8 <__udivmoddi4+0x63c>
    cbec:	21dc      	movs	r1, #220	; 0xdc
    cbee:	206a      	movs	r0, #106	; 0x6a
    cbf0:	f7f7 fcea 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cbf4:	21d8      	movs	r1, #216	; 0xd8
    cbf6:	e7fa      	b.n	cbee <__udivmoddi4+0x632>
    cbf8:	bd70      	pop	{r4, r5, r6, pc}
    cbfa:	2100      	movs	r1, #0
    cbfc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cc00:	f800 1f24 	strb.w	r1, [r0, #36]!
    cc04:	7041      	strb	r1, [r0, #1]
    cc06:	4770      	bx	lr

0000cc08 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    cc08:	b570      	push	{r4, r5, r6, lr}
    cc0a:	f7f4 f9df 	bl	fcc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cc0e:	4605      	mov	r5, r0
    cc10:	2400      	movs	r4, #0
    cc12:	e006      	b.n	cc22 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    cc14:	4620      	mov	r0, r4
    cc16:	f7f4 f9df 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cc1a:	f7ff ffee 	bl	cbfa <__udivmoddi4+0x63e>
    cc1e:	1c64      	adds	r4, r4, #1
    cc20:	b2e4      	uxtb	r4, r4
    cc22:	42ac      	cmp	r4, r5
    cc24:	d3f6      	bcc.n	cc14 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    cc26:	bd70      	pop	{r4, r5, r6, pc}

0000cc28 <mpsl_timeslot_request>:
    cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc2c:	460d      	mov	r5, r1
    cc2e:	f7f4 f9d3 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cc32:	0004      	movs	r4, r0
    cc34:	d008      	beq.n	cc48 <mpsl_timeslot_request+0x20>
    cc36:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cc3a:	f06f 0622 	mvn.w	r6, #34	; 0x22
    cc3e:	2801      	cmp	r0, #1
    cc40:	d006      	beq.n	cc50 <mpsl_timeslot_request+0x28>
    cc42:	2802      	cmp	r0, #2
    cc44:	d111      	bne.n	cc6a <mpsl_timeslot_request+0x42>
    cc46:	e003      	b.n	cc50 <mpsl_timeslot_request+0x28>
    cc48:	f06f 0001 	mvn.w	r0, #1
    cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc50:	f06f 0715 	mvn.w	r7, #21
    cc54:	b15d      	cbz	r5, cc6e <mpsl_timeslot_request+0x46>
    cc56:	4628      	mov	r0, r5
    cc58:	f7f4 f92e 	bl	eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    cc5c:	b138      	cbz	r0, cc6e <mpsl_timeslot_request+0x46>
    cc5e:	7828      	ldrb	r0, [r5, #0]
    cc60:	b138      	cbz	r0, cc72 <mpsl_timeslot_request+0x4a>
    cc62:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cc66:	2802      	cmp	r0, #2
    cc68:	d008      	beq.n	cc7c <mpsl_timeslot_request+0x54>
    cc6a:	4630      	mov	r0, r6
    cc6c:	e7ee      	b.n	cc4c <mpsl_timeslot_request+0x24>
    cc6e:	4638      	mov	r0, r7
    cc70:	e7ec      	b.n	cc4c <mpsl_timeslot_request+0x24>
    cc72:	4629      	mov	r1, r5
    cc74:	4620      	mov	r0, r4
    cc76:	f7ff ff6d 	bl	cb54 <__udivmoddi4+0x598>
    cc7a:	e003      	b.n	cc84 <mpsl_timeslot_request+0x5c>
    cc7c:	4629      	mov	r1, r5
    cc7e:	4620      	mov	r0, r4
    cc80:	f7ff ff81 	bl	cb86 <__udivmoddi4+0x5ca>
    cc84:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cc88:	4621      	mov	r1, r4
    cc8a:	f7ff fe49 	bl	c920 <__udivmoddi4+0x364>
    cc8e:	b108      	cbz	r0, cc94 <mpsl_timeslot_request+0x6c>
    cc90:	2000      	movs	r0, #0
    cc92:	e7db      	b.n	cc4c <mpsl_timeslot_request+0x24>
    cc94:	f240 21b1 	movw	r1, #689	; 0x2b1
    cc98:	206a      	movs	r0, #106	; 0x6a
    cc9a:	f7f7 fc95 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000cc9e <mpsl_timeslot_session_close>:
    cc9e:	b510      	push	{r4, lr}
    cca0:	4604      	mov	r4, r0
    cca2:	f7f4 f999 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cca6:	0001      	movs	r1, r0
    cca8:	d005      	beq.n	ccb6 <mpsl_timeslot_session_close+0x18>
    ccaa:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    ccae:	f06f 0222 	mvn.w	r2, #34	; 0x22
    ccb2:	b978      	cbnz	r0, ccd4 <mpsl_timeslot_session_close+0x36>
    ccb4:	e002      	b.n	ccbc <mpsl_timeslot_session_close+0x1e>
    ccb6:	f06f 0001 	mvn.w	r0, #1
    ccba:	bd10      	pop	{r4, pc}
    ccbc:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    ccc0:	b140      	cbz	r0, ccd4 <mpsl_timeslot_session_close+0x36>
    ccc2:	2802      	cmp	r0, #2
    ccc4:	d008      	beq.n	ccd8 <mpsl_timeslot_session_close+0x3a>
    ccc6:	2801      	cmp	r0, #1
    ccc8:	d006      	beq.n	ccd8 <mpsl_timeslot_session_close+0x3a>
    ccca:	2001      	movs	r0, #1
    cccc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    ccd0:	2000      	movs	r0, #0
    ccd2:	bd10      	pop	{r4, pc}
    ccd4:	4610      	mov	r0, r2
    ccd6:	bd10      	pop	{r4, pc}
    ccd8:	4620      	mov	r0, r4
    ccda:	f7ff ff73 	bl	cbc4 <__udivmoddi4+0x608>
    ccde:	e7f7      	b.n	ccd0 <mpsl_timeslot_session_close+0x32>

0000cce0 <mpsl_timeslot_session_count_set>:
    cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cce4:	460e      	mov	r6, r1
    cce6:	4607      	mov	r7, r0
    cce8:	f7f4 f970 	bl	fcc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ccec:	4605      	mov	r5, r0
    ccee:	2400      	movs	r4, #0
    ccf0:	e00b      	b.n	cd0a <mpsl_timeslot_session_count_set+0x2a>
    ccf2:	4620      	mov	r0, r4
    ccf4:	f7f4 f970 	bl	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ccf8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    ccfc:	b118      	cbz	r0, cd06 <mpsl_timeslot_session_count_set+0x26>
    ccfe:	f04f 30ff 	mov.w	r0, #4294967295
    cd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd06:	1c64      	adds	r4, r4, #1
    cd08:	b2e4      	uxtb	r4, r4
    cd0a:	42ac      	cmp	r4, r5
    cd0c:	d3f1      	bcc.n	ccf2 <mpsl_timeslot_session_count_set+0x12>
    cd0e:	2e08      	cmp	r6, #8
    cd10:	d902      	bls.n	cd18 <mpsl_timeslot_session_count_set+0x38>
    cd12:	f06f 0015 	mvn.w	r0, #21
    cd16:	e7f4      	b.n	cd02 <mpsl_timeslot_session_count_set+0x22>
    cd18:	b117      	cbz	r7, cd20 <mpsl_timeslot_session_count_set+0x40>
    cd1a:	4631      	mov	r1, r6
    cd1c:	4638      	mov	r0, r7
    cd1e:	e001      	b.n	cd24 <mpsl_timeslot_session_count_set+0x44>
    cd20:	2100      	movs	r1, #0
    cd22:	4608      	mov	r0, r1
    cd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd28:	f7f4 b93c 	b.w	fa4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000cd2c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    cd2c:	f7f6 bd2e 	b.w	378c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000cd30 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    cd30:	b510      	push	{r4, lr}
    cd32:	2000      	movs	r0, #0
    cd34:	f7f7 f850 	bl	3dd8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    cd38:	6800      	ldr	r0, [r0, #0]
    cd3a:	2800      	cmp	r0, #0
    cd3c:	bf18      	it	ne
    cd3e:	2001      	movne	r0, #1
    cd40:	bd10      	pop	{r4, pc}

0000cd42 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    cd42:	b510      	push	{r4, lr}
    cd44:	f7f7 f8c8 	bl	3ed8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    cd48:	f7f6 fb9a 	bl	3480 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    cd4c:	f000 f802 	bl	cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    cd50:	b280      	uxth	r0, r0
    cd52:	bd10      	pop	{r4, pc}

0000cd54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    cd54:	0a41      	lsrs	r1, r0, #9
    cd56:	f643 5209 	movw	r2, #15625	; 0x3d09
    cd5a:	4351      	muls	r1, r2
    cd5c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cd60:	fb10 f002 	smulbb	r0, r0, r2
    cd64:	f500 7080 	add.w	r0, r0, #256	; 0x100
    cd68:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    cd6c:	4770      	bx	lr
    cd6e:	2800      	cmp	r0, #0
    cd70:	db09      	blt.n	cd86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    cd72:	f000 021f 	and.w	r2, r0, #31
    cd76:	2101      	movs	r1, #1
    cd78:	4091      	lsls	r1, r2
    cd7a:	0940      	lsrs	r0, r0, #5
    cd7c:	0080      	lsls	r0, r0, #2
    cd7e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd82:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cd86:	4770      	bx	lr
    cd88:	2800      	cmp	r0, #0
    cd8a:	db0d      	blt.n	cda8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    cd8c:	f000 021f 	and.w	r2, r0, #31
    cd90:	2101      	movs	r1, #1
    cd92:	4091      	lsls	r1, r2
    cd94:	0940      	lsrs	r0, r0, #5
    cd96:	0080      	lsls	r0, r0, #2
    cd98:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd9c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cda0:	f3bf 8f4f 	dsb	sy
    cda4:	f3bf 8f6f 	isb	sy
    cda8:	4770      	bx	lr

0000cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    cdaa:	b570      	push	{r4, r5, r6, lr}
    cdac:	4602      	mov	r2, r0
    cdae:	2000      	movs	r0, #0
    cdb0:	2900      	cmp	r1, #0
    cdb2:	d01d      	beq.n	cdf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    cdb4:	fba2 0101 	umull	r0, r1, r2, r1
    cdb8:	0a40      	lsrs	r0, r0, #9
    cdba:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    cdbe:	0a49      	lsrs	r1, r1, #9
    cdc0:	1c40      	adds	r0, r0, #1
    cdc2:	f141 0100 	adc.w	r1, r1, #0
    cdc6:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cdca:	1883      	adds	r3, r0, r2
    cdcc:	f141 0100 	adc.w	r1, r1, #0
    cdd0:	1c5b      	adds	r3, r3, #1
    cdd2:	f141 0400 	adc.w	r4, r1, #0
    cdd6:	2100      	movs	r1, #0
    cdd8:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cddc:	41a1      	sbcs	r1, r4
    cdde:	d203      	bcs.n	cde8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    cde0:	2172      	movs	r1, #114	; 0x72
    cde2:	206d      	movs	r0, #109	; 0x6d
    cde4:	f7f7 fbf0 	bl	45c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cde8:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    cdec:	fbb0 f0f2 	udiv	r0, r0, r2
    cdf0:	bd70      	pop	{r4, r5, r6, pc}
    cdf2:	5840      	ldr	r0, [r0, r1]
    cdf4:	2800      	cmp	r0, #0
    cdf6:	d000      	beq.n	cdfa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cdf8:	2001      	movs	r0, #1
    cdfa:	4770      	bx	lr
    cdfc:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ce00:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    ce04:	f002 0201 	and.w	r2, r2, #1
    ce08:	03c0      	lsls	r0, r0, #15
    ce0a:	d503      	bpl.n	ce14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ce0c:	428a      	cmp	r2, r1
    ce0e:	d101      	bne.n	ce14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ce10:	2001      	movs	r0, #1
    ce12:	4770      	bx	lr
    ce14:	2000      	movs	r0, #0
    ce16:	4770      	bx	lr

0000ce18 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ce18:	b510      	push	{r4, lr}
    ce1a:	2101      	movs	r1, #1
    ce1c:	0788      	lsls	r0, r1, #30
    ce1e:	f7f7 fb7d 	bl	451c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ce22:	2800      	cmp	r0, #0
    ce24:	d000      	beq.n	ce28 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ce26:	2001      	movs	r0, #1
    ce28:	bd10      	pop	{r4, pc}

0000ce2a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ce2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ce2e:	2101      	movs	r1, #1
    ce30:	6001      	str	r1, [r0, #0]
    ce32:	4770      	bx	lr

0000ce34 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    ce34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ce38:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    ce3c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    ce40:	f002 0203 	and.w	r2, r2, #3
    ce44:	03c9      	lsls	r1, r1, #15
    ce46:	d503      	bpl.n	ce50 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ce48:	4282      	cmp	r2, r0
    ce4a:	d101      	bne.n	ce50 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ce4c:	2001      	movs	r0, #1
    ce4e:	4770      	bx	lr
    ce50:	2000      	movs	r0, #0
    ce52:	4770      	bx	lr

0000ce54 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    ce54:	b510      	push	{r4, lr}
    ce56:	2100      	movs	r1, #0
    ce58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ce5c:	f7f7 fb5e 	bl	451c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ce60:	2800      	cmp	r0, #0
    ce62:	d000      	beq.n	ce66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    ce64:	2001      	movs	r0, #1
    ce66:	bd10      	pop	{r4, pc}
    ce68:	2800      	cmp	r0, #0
    ce6a:	db09      	blt.n	ce80 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    ce6c:	f000 021f 	and.w	r2, r0, #31
    ce70:	2101      	movs	r1, #1
    ce72:	4091      	lsls	r1, r2
    ce74:	0940      	lsrs	r0, r0, #5
    ce76:	0080      	lsls	r0, r0, #2
    ce78:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce7c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce80:	4770      	bx	lr
    ce82:	2800      	cmp	r0, #0
    ce84:	db0d      	blt.n	cea2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    ce86:	f000 021f 	and.w	r2, r0, #31
    ce8a:	2101      	movs	r1, #1
    ce8c:	4091      	lsls	r1, r2
    ce8e:	0940      	lsrs	r0, r0, #5
    ce90:	0080      	lsls	r0, r0, #2
    ce92:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce96:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ce9a:	f3bf 8f4f 	dsb	sy
    ce9e:	f3bf 8f6f 	isb	sy
    cea2:	4770      	bx	lr
    cea4:	00021000 	.word	0x00021000
    cea8:	000000fa 	.word	0x000000fa
    ceac:	63a70f14 	.word	0x63a70f14
    ceb0:	c477f9cf 	.word	0xc477f9cf
    ceb4:	e931f9ef 	.word	0xe931f9ef
    ceb8:	03bcf561 	.word	0x03bcf561
    cebc:	2b06749a 	.word	0x2b06749a
    cec0:	2800      	cmp	r0, #0
    cec2:	db09      	blt.n	ced8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cec4:	f000 021f 	and.w	r2, r0, #31
    cec8:	2101      	movs	r1, #1
    ceca:	4091      	lsls	r1, r2
    cecc:	0940      	lsrs	r0, r0, #5
    cece:	0080      	lsls	r0, r0, #2
    ced0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ced4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ced8:	4770      	bx	lr

0000ceda <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ceda:	f3ef 8110 	mrs	r1, PRIMASK
    cede:	b672      	cpsid	i
    cee0:	7802      	ldrb	r2, [r0, #0]
    cee2:	2a01      	cmp	r2, #1
    cee4:	d001      	beq.n	ceea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cee6:	2201      	movs	r2, #1
    cee8:	e000      	b.n	ceec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ceea:	2200      	movs	r2, #0
    ceec:	2301      	movs	r3, #1
    ceee:	7003      	strb	r3, [r0, #0]
    cef0:	b901      	cbnz	r1, cef4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cef2:	b662      	cpsie	i
    cef4:	b10a      	cbz	r2, cefa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cef6:	2000      	movs	r0, #0
    cef8:	4770      	bx	lr
    cefa:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cefe:	4770      	bx	lr

0000cf00 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cf00:	2100      	movs	r1, #0
    cf02:	7001      	strb	r1, [r0, #0]
    cf04:	4608      	mov	r0, r1
    cf06:	4770      	bx	lr

0000cf08 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cf08:	f3ef 8110 	mrs	r1, PRIMASK
    cf0c:	b672      	cpsid	i
    cf0e:	2200      	movs	r2, #0
    cf10:	7002      	strb	r2, [r0, #0]
    cf12:	b901      	cbnz	r1, cf16 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cf14:	b662      	cpsie	i
    cf16:	2000      	movs	r0, #0
    cf18:	4770      	bx	lr

0000cf1a <mpsl_low_priority_process>:
    cf1a:	f7f7 bc45 	b.w	47a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cf1e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cf1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf22:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf26:	280f      	cmp	r0, #15
    cf28:	d001      	beq.n	cf2e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cf2a:	2000      	movs	r0, #0
    cf2c:	4770      	bx	lr
    cf2e:	2001      	movs	r0, #1
    cf30:	4770      	bx	lr

0000cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cf32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf36:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf3a:	280a      	cmp	r0, #10
    cf3c:	d001      	beq.n	cf42 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cf3e:	2000      	movs	r0, #0
    cf40:	4770      	bx	lr
    cf42:	2001      	movs	r0, #1
    cf44:	4770      	bx	lr

0000cf46 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    cf46:	b500      	push	{lr}
    cf48:	f7ff fff3 	bl	cf32 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cf4c:	b120      	cbz	r0, cf58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    cf4e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf52:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cf56:	b108      	cbz	r0, cf5c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    cf58:	2000      	movs	r0, #0
    cf5a:	bd00      	pop	{pc}
    cf5c:	2001      	movs	r0, #1
    cf5e:	bd00      	pop	{pc}

0000cf60 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    cf60:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf64:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf68:	280e      	cmp	r0, #14
    cf6a:	d001      	beq.n	cf70 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    cf6c:	2000      	movs	r0, #0
    cf6e:	4770      	bx	lr
    cf70:	2001      	movs	r0, #1
    cf72:	4770      	bx	lr

0000cf74 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    cf74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf78:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf7c:	2810      	cmp	r0, #16
    cf7e:	d001      	beq.n	cf84 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    cf80:	2000      	movs	r0, #0
    cf82:	4770      	bx	lr
    cf84:	2001      	movs	r0, #1
    cf86:	4770      	bx	lr

0000cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    cf88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cf8c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cf90:	2806      	cmp	r0, #6
    cf92:	d003      	beq.n	cf9c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cf94:	1c40      	adds	r0, r0, #1
    cf96:	d001      	beq.n	cf9c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cf98:	2000      	movs	r0, #0
    cf9a:	4770      	bx	lr
    cf9c:	2001      	movs	r0, #1
    cf9e:	4770      	bx	lr

0000cfa0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    cfa0:	b500      	push	{lr}
    cfa2:	f7ff fff1 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cfa6:	b148      	cbz	r0, cfbc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cfa8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfac:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cfb0:	2806      	cmp	r0, #6
    cfb2:	d303      	bcc.n	cfbc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cfb4:	1c40      	adds	r0, r0, #1
    cfb6:	d001      	beq.n	cfbc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cfb8:	2001      	movs	r0, #1
    cfba:	bd00      	pop	{pc}
    cfbc:	2000      	movs	r0, #0
    cfbe:	bd00      	pop	{pc}

0000cfc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    cfc0:	b500      	push	{lr}
    cfc2:	f7ff ffe1 	bl	cf88 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cfc6:	b138      	cbz	r0, cfd8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    cfc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfcc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cfd0:	2806      	cmp	r0, #6
    cfd2:	d303      	bcc.n	cfdc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cfd4:	1c40      	adds	r0, r0, #1
    cfd6:	d001      	beq.n	cfdc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cfd8:	2000      	movs	r0, #0
    cfda:	bd00      	pop	{pc}
    cfdc:	2001      	movs	r0, #1
    cfde:	bd00      	pop	{pc}

0000cfe0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    cfe0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfe4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cfe8:	280d      	cmp	r0, #13
    cfea:	d001      	beq.n	cff0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cfec:	2000      	movs	r0, #0
    cfee:	4770      	bx	lr
    cff0:	2001      	movs	r0, #1
    cff2:	4770      	bx	lr

0000cff4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cff4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cff8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cffc:	2808      	cmp	r0, #8
    cffe:	d001      	beq.n	d004 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d000:	2000      	movs	r0, #0
    d002:	4770      	bx	lr
    d004:	2001      	movs	r0, #1
    d006:	4770      	bx	lr

0000d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d008:	b4f0      	push	{r4, r5, r6, r7}
    d00a:	ea80 0c01 	eor.w	ip, r0, r1
    d00e:	4603      	mov	r3, r0
    d010:	f01c 0f03 	tst.w	ip, #3
    d014:	d13c      	bne.n	d090 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d016:	f013 0f03 	tst.w	r3, #3
    d01a:	d00b      	beq.n	d034 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d01c:	2a00      	cmp	r2, #0
    d01e:	bf04      	itt	eq
    d020:	bcf0      	popeq	{r4, r5, r6, r7}
    d022:	4770      	bxeq	lr
    d024:	f811 cb01 	ldrb.w	ip, [r1], #1
    d028:	f803 cb01 	strb.w	ip, [r3], #1
    d02c:	1e52      	subs	r2, r2, #1
    d02e:	f013 0f03 	tst.w	r3, #3
    d032:	d1f3      	bne.n	d01c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d034:	2a03      	cmp	r2, #3
    d036:	d94f      	bls.n	d0d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d038:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d03c:	d24c      	bcs.n	d0d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d03e:	f1c2 0c00 	rsb	ip, r2, #0
    d042:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d046:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d04a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d04e:	f1cc 0c00 	rsb	ip, ip, #0
    d052:	f1bc 0f00 	cmp.w	ip, #0
    d056:	dd1b      	ble.n	d090 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d058:	1f0d      	subs	r5, r1, #4
    d05a:	1f1c      	subs	r4, r3, #4
    d05c:	f01c 0f01 	tst.w	ip, #1
    d060:	d003      	beq.n	d06a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d062:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d066:	f844 6f04 	str.w	r6, [r4, #4]!
    d06a:	ea5f 066c 	movs.w	r6, ip, asr #1
    d06e:	d007      	beq.n	d080 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d070:	686f      	ldr	r7, [r5, #4]
    d072:	6067      	str	r7, [r4, #4]
    d074:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d078:	f844 7f08 	str.w	r7, [r4, #8]!
    d07c:	1e76      	subs	r6, r6, #1
    d07e:	d1f7      	bne.n	d070 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d080:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d084:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d088:	f1cc 0c00 	rsb	ip, ip, #0
    d08c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d090:	2a00      	cmp	r2, #0
    d092:	bf04      	itt	eq
    d094:	bcf0      	popeq	{r4, r5, r6, r7}
    d096:	4770      	bxeq	lr
    d098:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d09c:	d226      	bcs.n	d0ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d09e:	2a00      	cmp	r2, #0
    d0a0:	bfdc      	itt	le
    d0a2:	bcf0      	pople	{r4, r5, r6, r7}
    d0a4:	4770      	bxle	lr
    d0a6:	1e49      	subs	r1, r1, #1
    d0a8:	1e5b      	subs	r3, r3, #1
    d0aa:	f012 0f01 	tst.w	r2, #1
    d0ae:	d003      	beq.n	d0b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d0b0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d0b4:	f803 cf01 	strb.w	ip, [r3, #1]!
    d0b8:	1052      	asrs	r2, r2, #1
    d0ba:	bf04      	itt	eq
    d0bc:	bcf0      	popeq	{r4, r5, r6, r7}
    d0be:	4770      	bxeq	lr
    d0c0:	f891 c001 	ldrb.w	ip, [r1, #1]
    d0c4:	f883 c001 	strb.w	ip, [r3, #1]
    d0c8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d0cc:	f803 cf02 	strb.w	ip, [r3, #2]!
    d0d0:	1e52      	subs	r2, r2, #1
    d0d2:	d1f5      	bne.n	d0c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d0d4:	bcf0      	pop	{r4, r5, r6, r7}
    d0d6:	4770      	bx	lr
    d0d8:	2a04      	cmp	r2, #4
    d0da:	d3d9      	bcc.n	d090 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d0dc:	f851 cb04 	ldr.w	ip, [r1], #4
    d0e0:	1f12      	subs	r2, r2, #4
    d0e2:	f843 cb04 	str.w	ip, [r3], #4
    d0e6:	2a04      	cmp	r2, #4
    d0e8:	d2f8      	bcs.n	d0dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d0ea:	e7d1      	b.n	d090 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d0ec:	f811 cb01 	ldrb.w	ip, [r1], #1
    d0f0:	f803 cb01 	strb.w	ip, [r3], #1
    d0f4:	1e52      	subs	r2, r2, #1
    d0f6:	d1f9      	bne.n	d0ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d0f8:	bcf0      	pop	{r4, r5, r6, r7}
    d0fa:	4770      	bx	lr

0000d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d0fc:	b470      	push	{r4, r5, r6}
    d0fe:	4603      	mov	r3, r0
    d100:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d104:	f010 0f03 	tst.w	r0, #3
    d108:	d009      	beq.n	d11e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d10a:	2a00      	cmp	r2, #0
    d10c:	bf04      	itt	eq
    d10e:	bc70      	popeq	{r4, r5, r6}
    d110:	4770      	bxeq	lr
    d112:	f803 cb01 	strb.w	ip, [r3], #1
    d116:	1e52      	subs	r2, r2, #1
    d118:	f013 0f03 	tst.w	r3, #3
    d11c:	d1f5      	bne.n	d10a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d11e:	b2c9      	uxtb	r1, r1
    d120:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d124:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d128:	2a03      	cmp	r2, #3
    d12a:	d939      	bls.n	d1a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d12c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d130:	d236      	bcs.n	d1a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d132:	4251      	negs	r1, r2
    d134:	17cc      	asrs	r4, r1, #31
    d136:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d13a:	1089      	asrs	r1, r1, #2
    d13c:	424e      	negs	r6, r1
    d13e:	2e00      	cmp	r6, #0
    d140:	dd11      	ble.n	d166 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d142:	1f19      	subs	r1, r3, #4
    d144:	f016 0f01 	tst.w	r6, #1
    d148:	bf18      	it	ne
    d14a:	f841 5f04 	strne.w	r5, [r1, #4]!
    d14e:	1074      	asrs	r4, r6, #1
    d150:	d004      	beq.n	d15c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d152:	604d      	str	r5, [r1, #4]
    d154:	f841 5f08 	str.w	r5, [r1, #8]!
    d158:	1e64      	subs	r4, r4, #1
    d15a:	d1fa      	bne.n	d152 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d15c:	4271      	negs	r1, r6
    d15e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d162:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d166:	2a00      	cmp	r2, #0
    d168:	bf04      	itt	eq
    d16a:	bc70      	popeq	{r4, r5, r6}
    d16c:	4770      	bxeq	lr
    d16e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d172:	d21d      	bcs.n	d1b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d174:	2a00      	cmp	r2, #0
    d176:	bfdc      	itt	le
    d178:	bc70      	pople	{r4, r5, r6}
    d17a:	4770      	bxle	lr
    d17c:	1e59      	subs	r1, r3, #1
    d17e:	f012 0f01 	tst.w	r2, #1
    d182:	bf18      	it	ne
    d184:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d188:	1052      	asrs	r2, r2, #1
    d18a:	bf04      	itt	eq
    d18c:	bc70      	popeq	{r4, r5, r6}
    d18e:	4770      	bxeq	lr
    d190:	f881 c001 	strb.w	ip, [r1, #1]
    d194:	f801 cf02 	strb.w	ip, [r1, #2]!
    d198:	1e52      	subs	r2, r2, #1
    d19a:	d1f9      	bne.n	d190 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d19c:	bc70      	pop	{r4, r5, r6}
    d19e:	4770      	bx	lr
    d1a0:	2a04      	cmp	r2, #4
    d1a2:	d3e0      	bcc.n	d166 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d1a4:	1f12      	subs	r2, r2, #4
    d1a6:	f843 5b04 	str.w	r5, [r3], #4
    d1aa:	2a04      	cmp	r2, #4
    d1ac:	d2fa      	bcs.n	d1a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d1ae:	e7da      	b.n	d166 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d1b0:	f803 cb01 	strb.w	ip, [r3], #1
    d1b4:	1e52      	subs	r2, r2, #1
    d1b6:	d1fb      	bne.n	d1b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d1b8:	bc70      	pop	{r4, r5, r6}
    d1ba:	4770      	bx	lr
    d1bc:	f04f 30ff 	mov.w	r0, #4294967295
    d1c0:	4770      	bx	lr
    d1c2:	2000      	movs	r0, #0
    d1c4:	4770      	bx	lr
    d1c6:	2000      	movs	r0, #0
    d1c8:	4770      	bx	lr
    d1ca:	f04f 30ff 	mov.w	r0, #4294967295
    d1ce:	4770      	bx	lr
    d1d0:	4770      	bx	lr
    d1d2:	4770      	bx	lr
    d1d4:	2000      	movs	r0, #0
    d1d6:	4770      	bx	lr
    d1d8:	2100      	movs	r1, #0
    d1da:	7001      	strb	r1, [r0, #0]
    d1dc:	4770      	bx	lr
    d1de:	f04f 30ff 	mov.w	r0, #4294967295
    d1e2:	4770      	bx	lr
    d1e4:	f04f 30ff 	mov.w	r0, #4294967295
    d1e8:	4770      	bx	lr
    d1ea:	2100      	movs	r1, #0
    d1ec:	7001      	strb	r1, [r0, #0]
    d1ee:	4770      	bx	lr
    d1f0:	f04f 30ff 	mov.w	r0, #4294967295
    d1f4:	4770      	bx	lr
    d1f6:	f04f 30ff 	mov.w	r0, #4294967295
    d1fa:	4770      	bx	lr
    d1fc:	7800      	ldrb	r0, [r0, #0]
    d1fe:	2800      	cmp	r0, #0
    d200:	d001      	beq.n	d206 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    d202:	f06f 0015 	mvn.w	r0, #21
    d206:	4770      	bx	lr
    d208:	2000      	movs	r0, #0
    d20a:	4770      	bx	lr
    d20c:	2200      	movs	r2, #0
    d20e:	f000 b800 	b.w	d212 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d212 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d212:	b570      	push	{r4, r5, r6, lr}
    d214:	4614      	mov	r4, r2
    d216:	460d      	mov	r5, r1
    d218:	1b00      	subs	r0, r0, r4
    d21a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d21e:	4288      	cmp	r0, r1
    d220:	da01      	bge.n	d226 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    d222:	4608      	mov	r0, r1
    d224:	e002      	b.n	d22c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d226:	287f      	cmp	r0, #127	; 0x7f
    d228:	dd00      	ble.n	d22c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d22a:	207f      	movs	r0, #127	; 0x7f
    d22c:	b240      	sxtb	r0, r0
    d22e:	f7f3 fe11 	bl	e54 <mpsl_tx_power_radio_supported_power_adjust>
    d232:	7028      	strb	r0, [r5, #0]
    d234:	706c      	strb	r4, [r5, #1]
    d236:	2100      	movs	r1, #0
    d238:	4420      	add	r0, r4
    d23a:	70a9      	strb	r1, [r5, #2]
    d23c:	b240      	sxtb	r0, r0
    d23e:	bd70      	pop	{r4, r5, r6, pc}
    d240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d244:	460c      	mov	r4, r1
    d246:	4681      	mov	r9, r0
    d248:	7849      	ldrb	r1, [r1, #1]
    d24a:	f100 0003 	add.w	r0, r0, #3
    d24e:	f88d 1000 	strb.w	r1, [sp]
    d252:	f020 0003 	bic.w	r0, r0, #3
    d256:	78a1      	ldrb	r1, [r4, #2]
    d258:	0016      	movs	r6, r2
    d25a:	4605      	mov	r5, r0
    d25c:	f88d 1001 	strb.w	r1, [sp, #1]
    d260:	d000      	beq.n	d264 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    d262:	2000      	movs	r0, #0
    d264:	4669      	mov	r1, sp
    d266:	f7f7 fe83 	bl	4f70 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d26a:	4428      	add	r0, r5
    d26c:	78a1      	ldrb	r1, [r4, #2]
    d26e:	4605      	mov	r5, r0
    d270:	b131      	cbz	r1, d280 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    d272:	8a63      	ldrh	r3, [r4, #18]
    d274:	78e2      	ldrb	r2, [r4, #3]
    d276:	b106      	cbz	r6, d27a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    d278:	2000      	movs	r0, #0
    d27a:	f7f8 f90b 	bl	5494 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d27e:	4405      	add	r5, r0
    d280:	7820      	ldrb	r0, [r4, #0]
    d282:	7861      	ldrb	r1, [r4, #1]
    d284:	46b2      	mov	sl, r6
    d286:	2600      	movs	r6, #0
    d288:	4408      	add	r0, r1
    d28a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d28e:	4637      	mov	r7, r6
    d290:	e008      	b.n	d2a4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    d292:	7a23      	ldrb	r3, [r4, #8]
    d294:	79e2      	ldrb	r2, [r4, #7]
    d296:	79a1      	ldrb	r1, [r4, #6]
    d298:	7960      	ldrb	r0, [r4, #5]
    d29a:	f000 ff0d 	bl	e0b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d29e:	1c7f      	adds	r7, r7, #1
    d2a0:	4406      	add	r6, r0
    d2a2:	b2ff      	uxtb	r7, r7
    d2a4:	4547      	cmp	r7, r8
    d2a6:	d3f4      	bcc.n	d292 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    d2a8:	1ced      	adds	r5, r5, #3
    d2aa:	f025 0003 	bic.w	r0, r5, #3
    d2ae:	4604      	mov	r4, r0
    d2b0:	f1ba 0f00 	cmp.w	sl, #0
    d2b4:	d000      	beq.n	d2b8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    d2b6:	2000      	movs	r0, #0
    d2b8:	4632      	mov	r2, r6
    d2ba:	4641      	mov	r1, r8
    d2bc:	f7f8 f834 	bl	5328 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d2c0:	4420      	add	r0, r4
    d2c2:	1dc0      	adds	r0, r0, #7
    d2c4:	f020 0007 	bic.w	r0, r0, #7
    d2c8:	eba0 0009 	sub.w	r0, r0, r9
    d2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2d0 <sdc_soc_ecb_block_encrypt>:
    d2d0:	b530      	push	{r4, r5, lr}
    d2d2:	460d      	mov	r5, r1
    d2d4:	b08d      	sub	sp, #52	; 0x34
    d2d6:	4614      	mov	r4, r2
    d2d8:	4601      	mov	r1, r0
    d2da:	2210      	movs	r2, #16
    d2dc:	4668      	mov	r0, sp
    d2de:	f7ff fe93 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2e2:	2210      	movs	r2, #16
    d2e4:	4629      	mov	r1, r5
    d2e6:	a804      	add	r0, sp, #16
    d2e8:	f7ff fe8e 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2ec:	4668      	mov	r0, sp
    d2ee:	f001 f864 	bl	e3ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d2f2:	b118      	cbz	r0, d2fc <sdc_soc_ecb_block_encrypt+0x2c>
    d2f4:	f06f 0015 	mvn.w	r0, #21
    d2f8:	b00d      	add	sp, #52	; 0x34
    d2fa:	bd30      	pop	{r4, r5, pc}
    d2fc:	2210      	movs	r2, #16
    d2fe:	4620      	mov	r0, r4
    d300:	a908      	add	r1, sp, #32
    d302:	f7ff fe81 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d306:	2000      	movs	r0, #0
    d308:	e7f6      	b.n	d2f8 <sdc_soc_ecb_block_encrypt+0x28>

0000d30a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d30a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d30c:	4604      	mov	r4, r0
    d30e:	1d01      	adds	r1, r0, #4
    d310:	4668      	mov	r0, sp
    d312:	f7f9 fca9 	bl	6c68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d316:	2800      	cmp	r0, #0
    d318:	d004      	beq.n	d324 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d31a:	4669      	mov	r1, sp
    d31c:	4620      	mov	r0, r4
    d31e:	f000 f848 	bl	d3b2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d322:	2001      	movs	r0, #1
    d324:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d326 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d326:	b50e      	push	{r1, r2, r3, lr}
    d328:	4601      	mov	r1, r0
    d32a:	4668      	mov	r0, sp
    d32c:	f000 f827 	bl	d37e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d330:	4668      	mov	r0, sp
    d332:	f001 fd03 	bl	ed3c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d336:	bd0e      	pop	{r1, r2, r3, pc}

0000d338 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d338:	b510      	push	{r4, lr}
    d33a:	4604      	mov	r4, r0
    d33c:	4620      	mov	r0, r4
    d33e:	f7f7 fd0b 	bl	4d58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d342:	2800      	cmp	r0, #0
    d344:	d006      	beq.n	d354 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d346:	78a1      	ldrb	r1, [r4, #2]
    d348:	7820      	ldrb	r0, [r4, #0]
    d34a:	f000 f804 	bl	d356 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d34e:	2800      	cmp	r0, #0
    d350:	d0f4      	beq.n	d33c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d352:	2001      	movs	r0, #1
    d354:	bd10      	pop	{r4, pc}
    d356:	b570      	push	{r4, r5, r6, lr}
    d358:	460c      	mov	r4, r1
    d35a:	4605      	mov	r5, r0
    d35c:	f7f7 fd6e 	bl	4e3c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d360:	2800      	cmp	r0, #0
    d362:	d002      	beq.n	d36a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d364:	2d3e      	cmp	r5, #62	; 0x3e
    d366:	d001      	beq.n	d36c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d368:	2001      	movs	r0, #1
    d36a:	bd70      	pop	{r4, r5, r6, pc}
    d36c:	2c12      	cmp	r4, #18
    d36e:	d004      	beq.n	d37a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d370:	4620      	mov	r0, r4
    d372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d376:	f7f7 bd73 	b.w	4e60 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d37a:	2000      	movs	r0, #0
    d37c:	bd70      	pop	{r4, r5, r6, pc}

0000d37e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d37e:	880a      	ldrh	r2, [r1, #0]
    d380:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d384:	8002      	strh	r2, [r0, #0]
    d386:	884a      	ldrh	r2, [r1, #2]
    d388:	8042      	strh	r2, [r0, #2]
    d38a:	784a      	ldrb	r2, [r1, #1]
    d38c:	0993      	lsrs	r3, r2, #6
    d38e:	2200      	movs	r2, #0
    d390:	7142      	strb	r2, [r0, #5]
    d392:	784b      	ldrb	r3, [r1, #1]
    d394:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d398:	b11b      	cbz	r3, d3a2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d39a:	2b01      	cmp	r3, #1
    d39c:	d005      	beq.n	d3aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d39e:	2b02      	cmp	r3, #2
    d3a0:	d005      	beq.n	d3ae <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d3a2:	7102      	strb	r2, [r0, #4]
    d3a4:	1d09      	adds	r1, r1, #4
    d3a6:	6081      	str	r1, [r0, #8]
    d3a8:	4770      	bx	lr
    d3aa:	2201      	movs	r2, #1
    d3ac:	e7f9      	b.n	d3a2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d3ae:	2202      	movs	r2, #2
    d3b0:	e7f7      	b.n	d3a2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d3b2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d3b2:	b510      	push	{r4, lr}
    d3b4:	460c      	mov	r4, r1
    d3b6:	7809      	ldrb	r1, [r1, #0]
    d3b8:	7001      	strb	r1, [r0, #0]
    d3ba:	7841      	ldrb	r1, [r0, #1]
    d3bc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    d3c0:	7041      	strb	r1, [r0, #1]
    d3c2:	8822      	ldrh	r2, [r4, #0]
    d3c4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d3c8:	4311      	orrs	r1, r2
    d3ca:	7041      	strb	r1, [r0, #1]
    d3cc:	78a2      	ldrb	r2, [r4, #2]
    d3ce:	7082      	strb	r2, [r0, #2]
    d3d0:	8862      	ldrh	r2, [r4, #2]
    d3d2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    d3d6:	0a12      	lsrs	r2, r2, #8
    d3d8:	70c2      	strb	r2, [r0, #3]
    d3da:	7041      	strb	r1, [r0, #1]
    d3dc:	7922      	ldrb	r2, [r4, #4]
    d3de:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d3e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    d3e6:	7041      	strb	r1, [r0, #1]
    d3e8:	7962      	ldrb	r2, [r4, #5]
    d3ea:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d3ee:	7041      	strb	r1, [r0, #1]
    d3f0:	68a1      	ldr	r1, [r4, #8]
    d3f2:	1d02      	adds	r2, r0, #4
    d3f4:	4291      	cmp	r1, r2
    d3f6:	d006      	beq.n	d406 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    d3f8:	8862      	ldrh	r2, [r4, #2]
    d3fa:	2afb      	cmp	r2, #251	; 0xfb
    d3fc:	d300      	bcc.n	d400 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    d3fe:	22fb      	movs	r2, #251	; 0xfb
    d400:	1d00      	adds	r0, r0, #4
    d402:	f7ff fe01 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d406:	78a0      	ldrb	r0, [r4, #2]
    d408:	1d00      	adds	r0, r0, #4
    d40a:	b2c0      	uxtb	r0, r0
    d40c:	bd10      	pop	{r4, pc}

0000d40e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d412:	4604      	mov	r4, r0
    d414:	f891 c000 	ldrb.w	ip, [r1]
    d418:	2000      	movs	r0, #0
    d41a:	2513      	movs	r5, #19
    d41c:	260c      	movs	r6, #12
    d41e:	2705      	movs	r7, #5
    d420:	223e      	movs	r2, #62	; 0x3e
    d422:	23ff      	movs	r3, #255	; 0xff
    d424:	f1bc 0f1b 	cmp.w	ip, #27
    d428:	d27d      	bcs.n	d526 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    d42a:	e8df f00c 	tbb	[pc, ip]
    d42e:	0e7c      	.short	0x0e7c
    d430:	872d2725 	.word	0x872d2725
    d434:	d0bda391 	.word	0xd0bda391
    d438:	f2f4ddd2 	.word	0xf2f4ddd2
    d43c:	537c7cf1 	.word	0x537c7cf1
    d440:	edeeefff 	.word	0xedeeefff
    d444:	e9eaebec 	.word	0xe9eaebec
    d448:	00e8      	.short	0x00e8
    d44a:	7026      	strb	r6, [r4, #0]
    d44c:	7908      	ldrb	r0, [r1, #4]
    d44e:	70a0      	strb	r0, [r4, #2]
    d450:	7948      	ldrb	r0, [r1, #5]
    d452:	70e0      	strb	r0, [r4, #3]
    d454:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d458:	0a00      	lsrs	r0, r0, #8
    d45a:	7120      	strb	r0, [r4, #4]
    d45c:	79c8      	ldrb	r0, [r1, #7]
    d45e:	7160      	strb	r0, [r4, #5]
    d460:	7a08      	ldrb	r0, [r1, #8]
    d462:	71a0      	strb	r0, [r4, #6]
    d464:	8908      	ldrh	r0, [r1, #8]
    d466:	0a00      	lsrs	r0, r0, #8
    d468:	71e0      	strb	r0, [r4, #7]
    d46a:	7a88      	ldrb	r0, [r1, #10]
    d46c:	7220      	strb	r0, [r4, #8]
    d46e:	8948      	ldrh	r0, [r1, #10]
    d470:	0a00      	lsrs	r0, r0, #8
    d472:	7260      	strb	r0, [r4, #9]
    d474:	2008      	movs	r0, #8
    d476:	e174      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d478:	2010      	movs	r0, #16
    d47a:	e000      	b.n	d47e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d47c:	201a      	movs	r0, #26
    d47e:	7020      	strb	r0, [r4, #0]
    d480:	7908      	ldrb	r0, [r1, #4]
    d482:	70a0      	strb	r0, [r4, #2]
    d484:	2001      	movs	r0, #1
    d486:	e16c      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d488:	7022      	strb	r2, [r4, #0]
    d48a:	2001      	movs	r0, #1
    d48c:	70a0      	strb	r0, [r4, #2]
    d48e:	7908      	ldrb	r0, [r1, #4]
    d490:	70e0      	strb	r0, [r4, #3]
    d492:	7988      	ldrb	r0, [r1, #6]
    d494:	7120      	strb	r0, [r4, #4]
    d496:	88c8      	ldrh	r0, [r1, #6]
    d498:	0a00      	lsrs	r0, r0, #8
    d49a:	7160      	strb	r0, [r4, #5]
    d49c:	7a08      	ldrb	r0, [r1, #8]
    d49e:	71a0      	strb	r0, [r4, #6]
    d4a0:	7a48      	ldrb	r0, [r1, #9]
    d4a2:	71e0      	strb	r0, [r4, #7]
    d4a4:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d4a8:	60a0      	str	r0, [r4, #8]
    d4aa:	89c8      	ldrh	r0, [r1, #14]
    d4ac:	81a0      	strh	r0, [r4, #12]
    d4ae:	7c08      	ldrb	r0, [r1, #16]
    d4b0:	73a0      	strb	r0, [r4, #14]
    d4b2:	8a08      	ldrh	r0, [r1, #16]
    d4b4:	0a00      	lsrs	r0, r0, #8
    d4b6:	73e0      	strb	r0, [r4, #15]
    d4b8:	7c88      	ldrb	r0, [r1, #18]
    d4ba:	7420      	strb	r0, [r4, #16]
    d4bc:	8a48      	ldrh	r0, [r1, #18]
    d4be:	0a00      	lsrs	r0, r0, #8
    d4c0:	7460      	strb	r0, [r4, #17]
    d4c2:	7d08      	ldrb	r0, [r1, #20]
    d4c4:	74a0      	strb	r0, [r4, #18]
    d4c6:	8a88      	ldrh	r0, [r1, #20]
    d4c8:	0a00      	lsrs	r0, r0, #8
    d4ca:	74e0      	strb	r0, [r4, #19]
    d4cc:	7d88      	ldrb	r0, [r1, #22]
    d4ce:	7520      	strb	r0, [r4, #20]
    d4d0:	4628      	mov	r0, r5
    d4d2:	e146      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d4d4:	7022      	strb	r2, [r4, #0]
    d4d6:	200a      	movs	r0, #10
    d4d8:	70a0      	strb	r0, [r4, #2]
    d4da:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d4de:	70e0      	strb	r0, [r4, #3]
    d4e0:	7888      	ldrb	r0, [r1, #2]
    d4e2:	7120      	strb	r0, [r4, #4]
    d4e4:	8848      	ldrh	r0, [r1, #2]
    d4e6:	0a00      	lsrs	r0, r0, #8
    d4e8:	7160      	strb	r0, [r4, #5]
    d4ea:	7908      	ldrb	r0, [r1, #4]
    d4ec:	71a0      	strb	r0, [r4, #6]
    d4ee:	7948      	ldrb	r0, [r1, #5]
    d4f0:	71e0      	strb	r0, [r4, #7]
    d4f2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d4f6:	60a0      	str	r0, [r4, #8]
    d4f8:	8948      	ldrh	r0, [r1, #10]
    d4fa:	81a0      	strh	r0, [r4, #12]
    d4fc:	68c8      	ldr	r0, [r1, #12]
    d4fe:	f8c4 000e 	str.w	r0, [r4, #14]
    d502:	8a08      	ldrh	r0, [r1, #16]
    d504:	8260      	strh	r0, [r4, #18]
    d506:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d50a:	6160      	str	r0, [r4, #20]
    d50c:	8ac8      	ldrh	r0, [r1, #22]
    d50e:	8320      	strh	r0, [r4, #24]
    d510:	7e08      	ldrb	r0, [r1, #24]
    d512:	76a0      	strb	r0, [r4, #26]
    d514:	8b08      	ldrh	r0, [r1, #24]
    d516:	0a00      	lsrs	r0, r0, #8
    d518:	76e0      	strb	r0, [r4, #27]
    d51a:	7e88      	ldrb	r0, [r1, #26]
    d51c:	7720      	strb	r0, [r4, #28]
    d51e:	8b48      	ldrh	r0, [r1, #26]
    d520:	0a00      	lsrs	r0, r0, #8
    d522:	7760      	strb	r0, [r4, #29]
    d524:	e000      	b.n	d528 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    d526:	e097      	b.n	d658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    d528:	7f08      	ldrb	r0, [r1, #28]
    d52a:	77a0      	strb	r0, [r4, #30]
    d52c:	8b88      	ldrh	r0, [r1, #28]
    d52e:	0a00      	lsrs	r0, r0, #8
    d530:	77e0      	strb	r0, [r4, #31]
    d532:	7f88      	ldrb	r0, [r1, #30]
    d534:	f884 0020 	strb.w	r0, [r4, #32]
    d538:	201f      	movs	r0, #31
    d53a:	e112      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d53c:	7022      	strb	r2, [r4, #0]
    d53e:	2014      	movs	r0, #20
    d540:	70a0      	strb	r0, [r4, #2]
    d542:	7908      	ldrb	r0, [r1, #4]
    d544:	70e0      	strb	r0, [r4, #3]
    d546:	8888      	ldrh	r0, [r1, #4]
    d548:	0a00      	lsrs	r0, r0, #8
    d54a:	7120      	strb	r0, [r4, #4]
    d54c:	7988      	ldrb	r0, [r1, #6]
    d54e:	e0a6      	b.n	d69e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d550:	7022      	strb	r2, [r4, #0]
    d552:	2004      	movs	r0, #4
    d554:	70a0      	strb	r0, [r4, #2]
    d556:	7908      	ldrb	r0, [r1, #4]
    d558:	70e0      	strb	r0, [r4, #3]
    d55a:	7988      	ldrb	r0, [r1, #6]
    d55c:	7120      	strb	r0, [r4, #4]
    d55e:	88c8      	ldrh	r0, [r1, #6]
    d560:	0a00      	lsrs	r0, r0, #8
    d562:	7160      	strb	r0, [r4, #5]
    d564:	6888      	ldr	r0, [r1, #8]
    d566:	f8c4 0006 	str.w	r0, [r4, #6]
    d56a:	68c8      	ldr	r0, [r1, #12]
    d56c:	f8c4 000a 	str.w	r0, [r4, #10]
    d570:	200c      	movs	r0, #12
    d572:	e0f6      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d574:	7022      	strb	r2, [r4, #0]
    d576:	2003      	movs	r0, #3
    d578:	70a0      	strb	r0, [r4, #2]
    d57a:	7908      	ldrb	r0, [r1, #4]
    d57c:	70e0      	strb	r0, [r4, #3]
    d57e:	7988      	ldrb	r0, [r1, #6]
    d580:	7120      	strb	r0, [r4, #4]
    d582:	88c8      	ldrh	r0, [r1, #6]
    d584:	0a00      	lsrs	r0, r0, #8
    d586:	7160      	strb	r0, [r4, #5]
    d588:	7a08      	ldrb	r0, [r1, #8]
    d58a:	71a0      	strb	r0, [r4, #6]
    d58c:	8908      	ldrh	r0, [r1, #8]
    d58e:	0a00      	lsrs	r0, r0, #8
    d590:	71e0      	strb	r0, [r4, #7]
    d592:	7a88      	ldrb	r0, [r1, #10]
    d594:	7220      	strb	r0, [r4, #8]
    d596:	8948      	ldrh	r0, [r1, #10]
    d598:	0a00      	lsrs	r0, r0, #8
    d59a:	7260      	strb	r0, [r4, #9]
    d59c:	7b08      	ldrb	r0, [r1, #12]
    d59e:	72a0      	strb	r0, [r4, #10]
    d5a0:	8988      	ldrh	r0, [r1, #12]
    d5a2:	0a00      	lsrs	r0, r0, #8
    d5a4:	72e0      	strb	r0, [r4, #11]
    d5a6:	e0b6      	b.n	d716 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d5a8:	7022      	strb	r2, [r4, #0]
    d5aa:	70a7      	strb	r7, [r4, #2]
    d5ac:	7908      	ldrb	r0, [r1, #4]
    d5ae:	70e0      	strb	r0, [r4, #3]
    d5b0:	8888      	ldrh	r0, [r1, #4]
    d5b2:	0a00      	lsrs	r0, r0, #8
    d5b4:	7120      	strb	r0, [r4, #4]
    d5b6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d5ba:	f8c4 0005 	str.w	r0, [r4, #5]
    d5be:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d5c2:	f8c4 0009 	str.w	r0, [r4, #9]
    d5c6:	89c8      	ldrh	r0, [r1, #14]
    d5c8:	f8a4 000d 	strh.w	r0, [r4, #13]
    d5cc:	e0c8      	b.n	d760 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    d5ce:	2011      	movs	r0, #17
    d5d0:	e045      	b.n	d65e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d5d2:	7027      	strb	r7, [r4, #0]
    d5d4:	7908      	ldrb	r0, [r1, #4]
    d5d6:	70a0      	strb	r0, [r4, #2]
    d5d8:	7948      	ldrb	r0, [r1, #5]
    d5da:	70e0      	strb	r0, [r4, #3]
    d5dc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d5e0:	0a00      	lsrs	r0, r0, #8
    d5e2:	7120      	strb	r0, [r4, #4]
    d5e4:	79c8      	ldrb	r0, [r1, #7]
    d5e6:	e05a      	b.n	d69e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d5e8:	2008      	movs	r0, #8
    d5ea:	7020      	strb	r0, [r4, #0]
    d5ec:	7908      	ldrb	r0, [r1, #4]
    d5ee:	70a0      	strb	r0, [r4, #2]
    d5f0:	7988      	ldrb	r0, [r1, #6]
    d5f2:	70e0      	strb	r0, [r4, #3]
    d5f4:	88c8      	ldrh	r0, [r1, #6]
    d5f6:	0a00      	lsrs	r0, r0, #8
    d5f8:	7120      	strb	r0, [r4, #4]
    d5fa:	7a08      	ldrb	r0, [r1, #8]
    d5fc:	e04f      	b.n	d69e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d5fe:	e09a      	b.n	d736 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    d600:	e06e      	b.n	d6e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    d602:	e04f      	b.n	d6a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    d604:	e07a      	b.n	d6fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    d606:	e088      	b.n	d71a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    d608:	e041      	b.n	d68e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    d60a:	e030      	b.n	d66e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    d60c:	e011      	b.n	d632 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    d60e:	e00d      	b.n	d62c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    d610:	e024      	b.n	d65c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    d612:	e01b      	b.n	d64c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    d614:	e7ff      	b.n	d616 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    d616:	2030      	movs	r0, #48	; 0x30
    d618:	7020      	strb	r0, [r4, #0]
    d61a:	7908      	ldrb	r0, [r1, #4]
    d61c:	70a0      	strb	r0, [r4, #2]
    d61e:	7988      	ldrb	r0, [r1, #6]
    d620:	70e0      	strb	r0, [r4, #3]
    d622:	88c8      	ldrh	r0, [r1, #6]
    d624:	0a00      	lsrs	r0, r0, #8
    d626:	7120      	strb	r0, [r4, #4]
    d628:	2003      	movs	r0, #3
    d62a:	e09a      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d62c:	7022      	strb	r2, [r4, #0]
    d62e:	2007      	movs	r0, #7
    d630:	e03a      	b.n	d6a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    d632:	7022      	strb	r2, [r4, #0]
    d634:	70a6      	strb	r6, [r4, #2]
    d636:	7908      	ldrb	r0, [r1, #4]
    d638:	70e0      	strb	r0, [r4, #3]
    d63a:	7988      	ldrb	r0, [r1, #6]
    d63c:	7120      	strb	r0, [r4, #4]
    d63e:	88c8      	ldrh	r0, [r1, #6]
    d640:	0a00      	lsrs	r0, r0, #8
    d642:	7160      	strb	r0, [r4, #5]
    d644:	7a08      	ldrb	r0, [r1, #8]
    d646:	71a0      	strb	r0, [r4, #6]
    d648:	7a48      	ldrb	r0, [r1, #9]
    d64a:	e01d      	b.n	d688 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    d64c:	4620      	mov	r0, r4
    d64e:	1d09      	adds	r1, r1, #4
    d650:	f7f7 fbc6 	bl	4de0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d654:	2800      	cmp	r0, #0
    d656:	d109      	bne.n	d66c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    d658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d65c:	2057      	movs	r0, #87	; 0x57
    d65e:	7020      	strb	r0, [r4, #0]
    d660:	7908      	ldrb	r0, [r1, #4]
    d662:	70a0      	strb	r0, [r4, #2]
    d664:	8888      	ldrh	r0, [r1, #4]
    d666:	0a00      	lsrs	r0, r0, #8
    d668:	70e0      	strb	r0, [r4, #3]
    d66a:	2002      	movs	r0, #2
    d66c:	e079      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d66e:	7022      	strb	r2, [r4, #0]
    d670:	2012      	movs	r0, #18
    d672:	70a0      	strb	r0, [r4, #2]
    d674:	7908      	ldrb	r0, [r1, #4]
    d676:	70e0      	strb	r0, [r4, #3]
    d678:	7948      	ldrb	r0, [r1, #5]
    d67a:	7120      	strb	r0, [r4, #4]
    d67c:	7988      	ldrb	r0, [r1, #6]
    d67e:	7160      	strb	r0, [r4, #5]
    d680:	88c8      	ldrh	r0, [r1, #6]
    d682:	0a00      	lsrs	r0, r0, #8
    d684:	71a0      	strb	r0, [r4, #6]
    d686:	7a08      	ldrb	r0, [r1, #8]
    d688:	71e0      	strb	r0, [r4, #7]
    d68a:	2006      	movs	r0, #6
    d68c:	e069      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d68e:	7023      	strb	r3, [r4, #0]
    d690:	20a1      	movs	r0, #161	; 0xa1
    d692:	70a0      	strb	r0, [r4, #2]
    d694:	7908      	ldrb	r0, [r1, #4]
    d696:	70e0      	strb	r0, [r4, #3]
    d698:	7948      	ldrb	r0, [r1, #5]
    d69a:	7120      	strb	r0, [r4, #4]
    d69c:	2000      	movs	r0, #0
    d69e:	7160      	strb	r0, [r4, #5]
    d6a0:	2004      	movs	r0, #4
    d6a2:	e05e      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d6a4:	7023      	strb	r3, [r4, #0]
    d6a6:	20a2      	movs	r0, #162	; 0xa2
    d6a8:	70a0      	strb	r0, [r4, #2]
    d6aa:	7908      	ldrb	r0, [r1, #4]
    d6ac:	70e0      	strb	r0, [r4, #3]
    d6ae:	8888      	ldrh	r0, [r1, #4]
    d6b0:	0a00      	lsrs	r0, r0, #8
    d6b2:	7120      	strb	r0, [r4, #4]
    d6b4:	7988      	ldrb	r0, [r1, #6]
    d6b6:	7160      	strb	r0, [r4, #5]
    d6b8:	88c8      	ldrh	r0, [r1, #6]
    d6ba:	0a00      	lsrs	r0, r0, #8
    d6bc:	71a0      	strb	r0, [r4, #6]
    d6be:	7a08      	ldrb	r0, [r1, #8]
    d6c0:	71e0      	strb	r0, [r4, #7]
    d6c2:	8908      	ldrh	r0, [r1, #8]
    d6c4:	0a00      	lsrs	r0, r0, #8
    d6c6:	7220      	strb	r0, [r4, #8]
    d6c8:	7a88      	ldrb	r0, [r1, #10]
    d6ca:	7260      	strb	r0, [r4, #9]
    d6cc:	8948      	ldrh	r0, [r1, #10]
    d6ce:	0a00      	lsrs	r0, r0, #8
    d6d0:	72a0      	strb	r0, [r4, #10]
    d6d2:	7b08      	ldrb	r0, [r1, #12]
    d6d4:	72e0      	strb	r0, [r4, #11]
    d6d6:	8988      	ldrh	r0, [r1, #12]
    d6d8:	0a00      	lsrs	r0, r0, #8
    d6da:	7320      	strb	r0, [r4, #12]
    d6dc:	200b      	movs	r0, #11
    d6de:	e040      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d6e0:	7023      	strb	r3, [r4, #0]
    d6e2:	20a3      	movs	r0, #163	; 0xa3
    d6e4:	70a0      	strb	r0, [r4, #2]
    d6e6:	7908      	ldrb	r0, [r1, #4]
    d6e8:	70e0      	strb	r0, [r4, #3]
    d6ea:	8888      	ldrh	r0, [r1, #4]
    d6ec:	0a00      	lsrs	r0, r0, #8
    d6ee:	7120      	strb	r0, [r4, #4]
    d6f0:	7988      	ldrb	r0, [r1, #6]
    d6f2:	7160      	strb	r0, [r4, #5]
    d6f4:	79c8      	ldrb	r0, [r1, #7]
    d6f6:	71a0      	strb	r0, [r4, #6]
    d6f8:	2005      	movs	r0, #5
    d6fa:	e032      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d6fc:	7022      	strb	r2, [r4, #0]
    d6fe:	70a5      	strb	r5, [r4, #2]
    d700:	7908      	ldrb	r0, [r1, #4]
    d702:	70e0      	strb	r0, [r4, #3]
    d704:	7948      	ldrb	r0, [r1, #5]
    d706:	7120      	strb	r0, [r4, #4]
    d708:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d70c:	f8c4 0005 	str.w	r0, [r4, #5]
    d710:	8948      	ldrh	r0, [r1, #10]
    d712:	f8a4 0009 	strh.w	r0, [r4, #9]
    d716:	200a      	movs	r0, #10
    d718:	e023      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d71a:	7023      	strb	r3, [r4, #0]
    d71c:	20a4      	movs	r0, #164	; 0xa4
    d71e:	70a0      	strb	r0, [r4, #2]
    d720:	7908      	ldrb	r0, [r1, #4]
    d722:	70e0      	strb	r0, [r4, #3]
    d724:	8888      	ldrh	r0, [r1, #4]
    d726:	0a00      	lsrs	r0, r0, #8
    d728:	7120      	strb	r0, [r4, #4]
    d72a:	7988      	ldrb	r0, [r1, #6]
    d72c:	7160      	strb	r0, [r4, #5]
    d72e:	79c8      	ldrb	r0, [r1, #7]
    d730:	71a0      	strb	r0, [r4, #6]
    d732:	2007      	movs	r0, #7
    d734:	e015      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d736:	7023      	strb	r3, [r4, #0]
    d738:	2080      	movs	r0, #128	; 0x80
    d73a:	70a0      	strb	r0, [r4, #2]
    d73c:	888a      	ldrh	r2, [r1, #4]
    d73e:	f8a4 2003 	strh.w	r2, [r4, #3]
    d742:	88ca      	ldrh	r2, [r1, #6]
    d744:	f8a4 2005 	strh.w	r2, [r4, #5]
    d748:	7a0a      	ldrb	r2, [r1, #8]
    d74a:	71e2      	strb	r2, [r4, #7]
    d74c:	894a      	ldrh	r2, [r1, #10]
    d74e:	8122      	strh	r2, [r4, #8]
    d750:	898a      	ldrh	r2, [r1, #12]
    d752:	8162      	strh	r2, [r4, #10]
    d754:	89ca      	ldrh	r2, [r1, #14]
    d756:	81a2      	strh	r2, [r4, #12]
    d758:	7c09      	ldrb	r1, [r1, #16]
    d75a:	f001 0101 	and.w	r1, r1, #1
    d75e:	73a1      	strb	r1, [r4, #14]
    d760:	200d      	movs	r0, #13
    d762:	7060      	strb	r0, [r4, #1]
    d764:	1c80      	adds	r0, r0, #2
    d766:	e777      	b.n	d658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000d768 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d768:	223e      	movs	r2, #62	; 0x3e
    d76a:	7002      	strb	r2, [r0, #0]
    d76c:	2201      	movs	r2, #1
    d76e:	7082      	strb	r2, [r0, #2]
    d770:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d774:	70c2      	strb	r2, [r0, #3]
    d776:	788a      	ldrb	r2, [r1, #2]
    d778:	7102      	strb	r2, [r0, #4]
    d77a:	884a      	ldrh	r2, [r1, #2]
    d77c:	0a12      	lsrs	r2, r2, #8
    d77e:	7142      	strb	r2, [r0, #5]
    d780:	790a      	ldrb	r2, [r1, #4]
    d782:	7182      	strb	r2, [r0, #6]
    d784:	794a      	ldrb	r2, [r1, #5]
    d786:	71c2      	strb	r2, [r0, #7]
    d788:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d78c:	6082      	str	r2, [r0, #8]
    d78e:	894a      	ldrh	r2, [r1, #10]
    d790:	8182      	strh	r2, [r0, #12]
    d792:	7e0a      	ldrb	r2, [r1, #24]
    d794:	7382      	strb	r2, [r0, #14]
    d796:	8b0a      	ldrh	r2, [r1, #24]
    d798:	0a12      	lsrs	r2, r2, #8
    d79a:	73c2      	strb	r2, [r0, #15]
    d79c:	7e8a      	ldrb	r2, [r1, #26]
    d79e:	7402      	strb	r2, [r0, #16]
    d7a0:	8b4a      	ldrh	r2, [r1, #26]
    d7a2:	0a12      	lsrs	r2, r2, #8
    d7a4:	7442      	strb	r2, [r0, #17]
    d7a6:	7f0a      	ldrb	r2, [r1, #28]
    d7a8:	7482      	strb	r2, [r0, #18]
    d7aa:	8b8a      	ldrh	r2, [r1, #28]
    d7ac:	0a12      	lsrs	r2, r2, #8
    d7ae:	74c2      	strb	r2, [r0, #19]
    d7b0:	7f89      	ldrb	r1, [r1, #30]
    d7b2:	7501      	strb	r1, [r0, #20]
    d7b4:	2113      	movs	r1, #19
    d7b6:	7041      	strb	r1, [r0, #1]
    d7b8:	4608      	mov	r0, r1
    d7ba:	4770      	bx	lr
    d7bc:	094a      	lsrs	r2, r1, #5
    d7be:	f001 011f 	and.w	r1, r1, #31
    d7c2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d7c6:	40c8      	lsrs	r0, r1
    d7c8:	f000 0001 	and.w	r0, r0, #1
    d7cc:	4770      	bx	lr

0000d7ce <sdc_hci_data_get>:
    d7ce:	b510      	push	{r4, lr}
    d7d0:	b120      	cbz	r0, d7dc <sdc_hci_data_get+0xe>
    d7d2:	f7ff fd9a 	bl	d30a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d7d6:	b120      	cbz	r0, d7e2 <sdc_hci_data_get+0x14>
    d7d8:	2000      	movs	r0, #0
    d7da:	bd10      	pop	{r4, pc}
    d7dc:	f06f 0015 	mvn.w	r0, #21
    d7e0:	bd10      	pop	{r4, pc}
    d7e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d7e6:	bd10      	pop	{r4, pc}

0000d7e8 <sdc_hci_data_put>:
    d7e8:	b510      	push	{r4, lr}
    d7ea:	f06f 0415 	mvn.w	r4, #21
    d7ee:	b120      	cbz	r0, d7fa <sdc_hci_data_put+0x12>
    d7f0:	f7ff fd99 	bl	d326 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d7f4:	b108      	cbz	r0, d7fa <sdc_hci_data_put+0x12>
    d7f6:	2000      	movs	r0, #0
    d7f8:	bd10      	pop	{r4, pc}
    d7fa:	4620      	mov	r0, r4
    d7fc:	bd10      	pop	{r4, pc}

0000d7fe <sdc_hci_evt_get>:
    d7fe:	b510      	push	{r4, lr}
    d800:	b120      	cbz	r0, d80c <sdc_hci_evt_get+0xe>
    d802:	f7ff fd99 	bl	d338 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d806:	b120      	cbz	r0, d812 <sdc_hci_evt_get+0x14>
    d808:	2000      	movs	r0, #0
    d80a:	bd10      	pop	{r4, pc}
    d80c:	f06f 0015 	mvn.w	r0, #21
    d810:	bd10      	pop	{r4, pc}
    d812:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d816:	bd10      	pop	{r4, pc}

0000d818 <sdc_hci_get>:
    d818:	b118      	cbz	r0, d822 <sdc_hci_get+0xa>
    d81a:	b111      	cbz	r1, d822 <sdc_hci_get+0xa>
    d81c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d820:	4770      	bx	lr
    d822:	f06f 0015 	mvn.w	r0, #21
    d826:	4770      	bx	lr

0000d828 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d828:	f002 bfbf 	b.w	107aa <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d82c <sdc_hci_cmd_cb_read_transmit_power_level>:
    d82c:	f003 b80d 	b.w	1084a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d830 <sdc_hci_cmd_cb_set_event_mask>:
    d830:	b510      	push	{r4, lr}
    d832:	f7f7 fb25 	bl	4e80 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d836:	2000      	movs	r0, #0
    d838:	bd10      	pop	{r4, pc}

0000d83a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d83a:	b510      	push	{r4, lr}
    d83c:	f7f7 fb30 	bl	4ea0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d840:	2000      	movs	r0, #0
    d842:	bd10      	pop	{r4, pc}

0000d844 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d844:	f003 b81d 	b.w	10882 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d848 <sdc_hci_cmd_vs_conn_event_extend>:
    d848:	b508      	push	{r3, lr}
    d84a:	7800      	ldrb	r0, [r0, #0]
    d84c:	f88d 0000 	strb.w	r0, [sp]
    d850:	4668      	mov	r0, sp
    d852:	f002 fecb 	bl	105ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d856:	bd08      	pop	{r3, pc}

0000d858 <sdc_hci_cmd_vs_conn_update>:
    d858:	2001      	movs	r0, #1
    d85a:	4770      	bx	lr

0000d85c <sdc_hci_cmd_vs_event_length_set>:
    d85c:	f7fd ba0a 	b.w	ac74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d860 <sdc_hci_cmd_vs_llpm_mode_set>:
    d860:	2001      	movs	r0, #1
    d862:	4770      	bx	lr

0000d864 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d864:	7881      	ldrb	r1, [r0, #2]
    d866:	8800      	ldrh	r0, [r0, #0]
    d868:	f002 be88 	b.w	1057c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d86c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d86c:	7800      	ldrb	r0, [r0, #0]
    d86e:	b100      	cbz	r0, d872 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d870:	2001      	movs	r0, #1
    d872:	f002 be7e 	b.w	10572 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d876 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d876:	b570      	push	{r4, r5, r6, lr}
    d878:	4605      	mov	r5, r0
    d87a:	2210      	movs	r2, #16
    d87c:	2100      	movs	r1, #0
    d87e:	f7ff fc3d 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d882:	2210      	movs	r2, #16
    d884:	2100      	movs	r1, #0
    d886:	f105 0010 	add.w	r0, r5, #16
    d88a:	f7ff fc37 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d88e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d892:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d896:	1c40      	adds	r0, r0, #1
    d898:	d10b      	bne.n	d8b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d89a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d89e:	1c40      	adds	r0, r0, #1
    d8a0:	d107      	bne.n	d8b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d8a2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d8a6:	1c40      	adds	r0, r0, #1
    d8a8:	d103      	bne.n	d8b2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d8aa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d8ae:	1c40      	adds	r0, r0, #1
    d8b0:	d00b      	beq.n	d8ca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d8b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d8b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d8ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d8be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d8c2:	612a      	str	r2, [r5, #16]
    d8c4:	6168      	str	r0, [r5, #20]
    d8c6:	61a9      	str	r1, [r5, #24]
    d8c8:	61eb      	str	r3, [r5, #28]
    d8ca:	2000      	movs	r0, #0
    d8cc:	f7f8 f82e 	bl	592c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d8d0:	b918      	cbnz	r0, d8da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d8d2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d8d6:	07c0      	lsls	r0, r0, #31
    d8d8:	d118      	bne.n	d90c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d8da:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d8de:	1c40      	adds	r0, r0, #1
    d8e0:	d10b      	bne.n	d8fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d8e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d8e6:	1c40      	adds	r0, r0, #1
    d8e8:	d107      	bne.n	d8fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d8ea:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d8ee:	1c40      	adds	r0, r0, #1
    d8f0:	d103      	bne.n	d8fa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d8f2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d8f6:	1c40      	adds	r0, r0, #1
    d8f8:	d008      	beq.n	d90c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d8fa:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d8fe:	6861      	ldr	r1, [r4, #4]
    d900:	68a2      	ldr	r2, [r4, #8]
    d902:	68e3      	ldr	r3, [r4, #12]
    d904:	6028      	str	r0, [r5, #0]
    d906:	6069      	str	r1, [r5, #4]
    d908:	60aa      	str	r2, [r5, #8]
    d90a:	60eb      	str	r3, [r5, #12]
    d90c:	2000      	movs	r0, #0
    d90e:	bd70      	pop	{r4, r5, r6, pc}

0000d910 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d910:	b538      	push	{r3, r4, r5, lr}
    d912:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d916:	4604      	mov	r4, r0
    d918:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d91c:	1c40      	adds	r0, r0, #1
    d91e:	d105      	bne.n	d92c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d920:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d924:	43c0      	mvns	r0, r0
    d926:	0400      	lsls	r0, r0, #16
    d928:	0c00      	lsrs	r0, r0, #16
    d92a:	d03e      	beq.n	d9aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d92c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d930:	07c0      	lsls	r0, r0, #31
    d932:	d03a      	beq.n	d9aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d934:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d938:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d93c:	f8ad 1000 	strh.w	r1, [sp]
    d940:	f8c4 0001 	str.w	r0, [r4, #1]
    d944:	f8bd 0000 	ldrh.w	r0, [sp]
    d948:	f8a4 0005 	strh.w	r0, [r4, #5]
    d94c:	79a0      	ldrb	r0, [r4, #6]
    d94e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d952:	71a0      	strb	r0, [r4, #6]
    d954:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d958:	1c40      	adds	r0, r0, #1
    d95a:	d00f      	beq.n	d97c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d95c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d960:	1c40      	adds	r0, r0, #1
    d962:	d00b      	beq.n	d97c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d964:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d968:	1c40      	adds	r0, r0, #1
    d96a:	d007      	beq.n	d97c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d96c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d970:	1c40      	adds	r0, r0, #1
    d972:	d003      	beq.n	d97c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d974:	2000      	movs	r0, #0
    d976:	f7f7 ffd9 	bl	592c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d97a:	b140      	cbz	r0, d98e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d97c:	2210      	movs	r2, #16
    d97e:	2100      	movs	r1, #0
    d980:	1de0      	adds	r0, r4, #7
    d982:	f7ff fbbb 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d986:	2001      	movs	r0, #1
    d988:	7020      	strb	r0, [r4, #0]
    d98a:	2000      	movs	r0, #0
    d98c:	bd38      	pop	{r3, r4, r5, pc}
    d98e:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d992:	6869      	ldr	r1, [r5, #4]
    d994:	68a8      	ldr	r0, [r5, #8]
    d996:	68eb      	ldr	r3, [r5, #12]
    d998:	f8c4 2007 	str.w	r2, [r4, #7]
    d99c:	f8c4 100b 	str.w	r1, [r4, #11]
    d9a0:	f8c4 000f 	str.w	r0, [r4, #15]
    d9a4:	f8c4 3013 	str.w	r3, [r4, #19]
    d9a8:	e7ed      	b.n	d986 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d9aa:	2000      	movs	r0, #0
    d9ac:	e7ec      	b.n	d988 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d9ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d9ae:	f002 be0f 	b.w	105d0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d9b2 <sdc_hci_cmd_ip_read_bd_addr>:
    d9b2:	f002 bf0b 	b.w	107cc <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d9b6 <sdc_hci_cmd_ip_read_local_version_information>:
    d9b6:	f7fd b96b 	b.w	ac90 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d9ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d9ba:	f002 bb76 	b.w	100aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d9be <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d9be:	f002 bb59 	b.w	10074 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d9c2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d9c2:	f002 bb96 	b.w	100f2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d9c6 <sdc_hci_cmd_le_clear_resolving_list>:
    d9c6:	f002 bb87 	b.w	100d8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d9ca <sdc_hci_cmd_le_encrypt>:
    d9ca:	f002 bb9c 	b.w	10106 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d9ce <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d9ce:	8802      	ldrh	r2, [r0, #0]
    d9d0:	800a      	strh	r2, [r1, #0]
    d9d2:	f002 bba1 	b.w	10118 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d9d6 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d9d6:	8802      	ldrh	r2, [r0, #0]
    d9d8:	800a      	strh	r2, [r1, #0]
    d9da:	f002 bbb6 	b.w	1014a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d9de <sdc_hci_cmd_le_rand>:
    d9de:	f002 bbde 	b.w	1019e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d9e2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d9e2:	f002 bbe2 	b.w	101aa <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d9e6 <sdc_hci_cmd_le_read_buffer_size>:
    d9e6:	f7fd b84b 	b.w	aa80 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d9ea <sdc_hci_cmd_le_read_channel_map>:
    d9ea:	f7fd b853 	b.w	aa94 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d9ee <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d9ee:	f002 bc17 	b.w	10220 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d9f2 <sdc_hci_cmd_le_read_max_data_length>:
    d9f2:	f002 bbe3 	b.w	101bc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d9f6 <sdc_hci_cmd_le_read_phy>:
    d9f6:	f7fd b875 	b.w	aae4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d9fa <sdc_hci_cmd_le_read_remote_features>:
    d9fa:	f002 bbe8 	b.w	101ce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d9fe <sdc_hci_cmd_le_read_resolving_list_size>:
    d9fe:	f002 bc02 	b.w	10206 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000da02 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    da02:	f7fd b895 	b.w	ab30 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000da06 <sdc_hci_cmd_le_read_transmit_power>:
    da06:	f002 bc02 	b.w	1020e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000da0a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    da0a:	f002 bc26 	b.w	1025a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000da0e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    da0e:	f002 bc0b 	b.w	10228 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000da12 <sdc_hci_cmd_le_set_address_resolution_enable>:
    da12:	f002 bc37 	b.w	10284 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000da16 <sdc_hci_cmd_le_set_adv_data>:
    da16:	f002 bc43 	b.w	102a0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000da1a <sdc_hci_cmd_le_set_adv_enable>:
    da1a:	f002 bc56 	b.w	102ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000da1e <sdc_hci_cmd_le_set_adv_params>:
    da1e:	f002 bc87 	b.w	10330 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000da22 <sdc_hci_cmd_le_set_data_length>:
    da22:	f002 bd1a 	b.w	1045a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000da26 <sdc_hci_cmd_le_set_default_phy>:
    da26:	f7fd b88d 	b.w	ab44 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000da2a <sdc_hci_cmd_le_set_event_mask>:
    da2a:	b510      	push	{r4, lr}
    da2c:	f7f7 fa20 	bl	4e70 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    da30:	2000      	movs	r0, #0
    da32:	bd10      	pop	{r4, pc}

0000da34 <sdc_hci_cmd_le_set_phy>:
    da34:	f002 bd31 	b.w	1049a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000da38 <sdc_hci_cmd_le_set_privacy_mode>:
    da38:	f002 bd48 	b.w	104cc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000da3c <sdc_hci_cmd_le_set_random_address>:
    da3c:	f002 bd5c 	b.w	104f8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000da40 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    da40:	f002 bd68 	b.w	10514 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000da44 <sdc_hci_cmd_le_set_scan_response_data>:
    da44:	f002 bd6f 	b.w	10526 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000da48 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    da48:	f002 bd82 	b.w	10550 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000da4c <sdc_hci_cmd_lc_disconnect>:
    da4c:	f002 bac4 	b.w	ffd8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000da50 <sdc_hci_cmd_lc_read_remote_version_information>:
    da50:	f002 bec8 	b.w	107e4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    da54:	b570      	push	{r4, r5, r6, lr}
    da56:	880b      	ldrh	r3, [r1, #0]
    da58:	7f04      	ldrb	r4, [r0, #28]
    da5a:	f100 0524 	add.w	r5, r0, #36	; 0x24
    da5e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    da62:	8802      	ldrh	r2, [r0, #0]
    da64:	4435      	add	r5, r6
    da66:	1da4      	adds	r4, r4, #6
    da68:	882d      	ldrh	r5, [r5, #0]
    da6a:	4422      	add	r2, r4
    da6c:	b292      	uxth	r2, r2
    da6e:	4425      	add	r5, r4
    da70:	1e54      	subs	r4, r2, #1
    da72:	442c      	add	r4, r5
    da74:	fb94 f4f2 	sdiv	r4, r4, r2
    da78:	fb02 6204 	mla	r2, r2, r4, r6
    da7c:	8840      	ldrh	r0, [r0, #2]
    da7e:	b292      	uxth	r2, r2
    da80:	4290      	cmp	r0, r2
    da82:	d903      	bls.n	da8c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    da84:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    da88:	4310      	orrs	r0, r2
    da8a:	e002      	b.n	da92 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    da8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    da90:	4398      	bics	r0, r3
    da92:	8008      	strh	r0, [r1, #0]
    da94:	bd70      	pop	{r4, r5, r6, pc}
    da96:	0442      	lsls	r2, r0, #17
    da98:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    da9c:	d107      	bne.n	daae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    da9e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    daa2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    daa6:	4288      	cmp	r0, r1
    daa8:	d001      	beq.n	daae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    daaa:	2001      	movs	r0, #1
    daac:	4770      	bx	lr
    daae:	2000      	movs	r0, #0
    dab0:	4770      	bx	lr

0000dab2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    dab2:	b570      	push	{r4, r5, r6, lr}
    dab4:	7f00      	ldrb	r0, [r0, #28]
    dab6:	461c      	mov	r4, r3
    dab8:	1d80      	adds	r0, r0, #6
    daba:	4408      	add	r0, r1
    dabc:	4613      	mov	r3, r2
    dabe:	8809      	ldrh	r1, [r1, #0]
    dac0:	9a04      	ldr	r2, [sp, #16]
    dac2:	1cc9      	adds	r1, r1, #3
    dac4:	b289      	uxth	r1, r1
    dac6:	1915      	adds	r5, r2, r4
    dac8:	1ec0      	subs	r0, r0, #3
    daca:	428d      	cmp	r5, r1
    dacc:	d805      	bhi.n	dada <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    dace:	1881      	adds	r1, r0, r2
    dad0:	4622      	mov	r2, r4
    dad2:	4618      	mov	r0, r3
    dad4:	f7ff fa98 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dad8:	e000      	b.n	dadc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    dada:	2400      	movs	r4, #0
    dadc:	4620      	mov	r0, r4
    dade:	bd70      	pop	{r4, r5, r6, pc}

0000dae0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    dae0:	b570      	push	{r4, r5, r6, lr}
    dae2:	7f00      	ldrb	r0, [r0, #28]
    dae4:	461c      	mov	r4, r3
    dae6:	1d80      	adds	r0, r0, #6
    dae8:	4408      	add	r0, r1
    daea:	4613      	mov	r3, r2
    daec:	8809      	ldrh	r1, [r1, #0]
    daee:	9a04      	ldr	r2, [sp, #16]
    daf0:	1cc9      	adds	r1, r1, #3
    daf2:	b289      	uxth	r1, r1
    daf4:	1915      	adds	r5, r2, r4
    daf6:	1ec0      	subs	r0, r0, #3
    daf8:	428d      	cmp	r5, r1
    dafa:	d805      	bhi.n	db08 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    dafc:	4410      	add	r0, r2
    dafe:	4622      	mov	r2, r4
    db00:	4619      	mov	r1, r3
    db02:	f7ff fa81 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db06:	e000      	b.n	db0a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    db08:	2400      	movs	r4, #0
    db0a:	4620      	mov	r0, r4
    db0c:	bd70      	pop	{r4, r5, r6, pc}

0000db0e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    db0e:	8881      	ldrh	r1, [r0, #4]
    db10:	88c0      	ldrh	r0, [r0, #6]
    db12:	4288      	cmp	r0, r1
    db14:	d101      	bne.n	db1a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    db16:	2001      	movs	r0, #1
    db18:	4770      	bx	lr
    db1a:	2000      	movs	r0, #0
    db1c:	4770      	bx	lr

0000db1e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    db1e:	8881      	ldrh	r1, [r0, #4]
    db20:	8900      	ldrh	r0, [r0, #8]
    db22:	4288      	cmp	r0, r1
    db24:	d101      	bne.n	db2a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    db26:	2001      	movs	r0, #1
    db28:	4770      	bx	lr
    db2a:	2000      	movs	r0, #0
    db2c:	4770      	bx	lr

0000db2e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    db2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db32:	460f      	mov	r7, r1
    db34:	4604      	mov	r4, r0
    db36:	f100 0124 	add.w	r1, r0, #36	; 0x24
    db3a:	8880      	ldrh	r0, [r0, #4]
    db3c:	2600      	movs	r6, #0
    db3e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    db42:	1845      	adds	r5, r0, r1
    db44:	603e      	str	r6, [r7, #0]
    db46:	8a20      	ldrh	r0, [r4, #16]
    db48:	2800      	cmp	r0, #0
    db4a:	d01a      	beq.n	db82 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    db4c:	89a1      	ldrh	r1, [r4, #12]
    db4e:	4408      	add	r0, r1
    db50:	b280      	uxth	r0, r0
    db52:	81a0      	strh	r0, [r4, #12]
    db54:	8829      	ldrh	r1, [r5, #0]
    db56:	4288      	cmp	r0, r1
    db58:	d905      	bls.n	db66 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    db5a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    db5e:	f04f 0014 	mov.w	r0, #20
    db62:	f7f7 f801 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db66:	d10a      	bne.n	db7e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    db68:	69a0      	ldr	r0, [r4, #24]
    db6a:	b108      	cbz	r0, db70 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    db6c:	7f40      	ldrb	r0, [r0, #29]
    db6e:	70a8      	strb	r0, [r5, #2]
    db70:	f104 0104 	add.w	r1, r4, #4
    db74:	4620      	mov	r0, r4
    db76:	f7ff ff6d 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db7a:	81a6      	strh	r6, [r4, #12]
    db7c:	603d      	str	r5, [r7, #0]
    db7e:	8226      	strh	r6, [r4, #16]
    db80:	2001      	movs	r0, #1
    db82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    db86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db88:	4604      	mov	r4, r0
    db8a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    db8e:	88c0      	ldrh	r0, [r0, #6]
    db90:	460e      	mov	r6, r1
    db92:	f3c0 070e 	ubfx	r7, r0, #0, #15
    db96:	8a60      	ldrh	r0, [r4, #18]
    db98:	19d9      	adds	r1, r3, r7
    db9a:	b108      	cbz	r0, dba0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    db9c:	42b0      	cmp	r0, r6
    db9e:	d201      	bcs.n	dba4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    dba0:	2000      	movs	r0, #0
    dba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dba4:	89e0      	ldrh	r0, [r4, #14]
    dba6:	2500      	movs	r5, #0
    dba8:	b140      	cbz	r0, dbbc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    dbaa:	f8b1 c000 	ldrh.w	ip, [r1]
    dbae:	4560      	cmp	r0, ip
    dbb0:	d008      	beq.n	dbc4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    dbb2:	f240 2151 	movw	r1, #593	; 0x251
    dbb6:	2014      	movs	r0, #20
    dbb8:	f7f6 ffd6 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbbc:	7f60      	ldrb	r0, [r4, #29]
    dbbe:	7088      	strb	r0, [r1, #2]
    dbc0:	800d      	strh	r5, [r1, #0]
    dbc2:	e00e      	b.n	dbe2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    dbc4:	f894 c01c 	ldrb.w	ip, [r4, #28]
    dbc8:	4418      	add	r0, r3
    dbca:	f10c 0c06 	add.w	ip, ip, #6
    dbce:	44bc      	add	ip, r7
    dbd0:	4460      	add	r0, ip
    dbd2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    dbd6:	f820 cc03 	strh.w	ip, [r0, #-3]
    dbda:	f894 c020 	ldrb.w	ip, [r4, #32]
    dbde:	f800 cc01 	strb.w	ip, [r0, #-1]
    dbe2:	89e0      	ldrh	r0, [r4, #14]
    dbe4:	4430      	add	r0, r6
    dbe6:	81e0      	strh	r0, [r4, #14]
    dbe8:	8808      	ldrh	r0, [r1, #0]
    dbea:	4430      	add	r0, r6
    dbec:	8008      	strh	r0, [r1, #0]
    dbee:	b19a      	cbz	r2, dc18 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    dbf0:	1da1      	adds	r1, r4, #6
    dbf2:	4620      	mov	r0, r4
    dbf4:	f7ff ff2e 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dbf8:	81e5      	strh	r5, [r4, #14]
    dbfa:	7f60      	ldrb	r0, [r4, #29]
    dbfc:	1c40      	adds	r0, r0, #1
    dbfe:	7760      	strb	r0, [r4, #29]
    dc00:	7da0      	ldrb	r0, [r4, #22]
    dc02:	f88d 0000 	strb.w	r0, [sp]
    dc06:	9800      	ldr	r0, [sp, #0]
    dc08:	9000      	str	r0, [sp, #0]
    dc0a:	f89d 0000 	ldrb.w	r0, [sp]
    dc0e:	b178      	cbz	r0, dc30 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dc10:	88e0      	ldrh	r0, [r4, #6]
    dc12:	82a0      	strh	r0, [r4, #20]
    dc14:	75a5      	strb	r5, [r4, #22]
    dc16:	e00b      	b.n	dc30 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dc18:	7f20      	ldrb	r0, [r4, #28]
    dc1a:	89e1      	ldrh	r1, [r4, #14]
    dc1c:	1d80      	adds	r0, r0, #6
    dc1e:	4438      	add	r0, r7
    dc20:	4419      	add	r1, r3
    dc22:	4408      	add	r0, r1
    dc24:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    dc28:	83e1      	strh	r1, [r4, #30]
    dc2a:	7880      	ldrb	r0, [r0, #2]
    dc2c:	f884 0020 	strb.w	r0, [r4, #32]
    dc30:	8265      	strh	r5, [r4, #18]
    dc32:	2001      	movs	r0, #1
    dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc36 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    dc36:	1cc0      	adds	r0, r0, #3
    dc38:	4770      	bx	lr

0000dc3a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    dc3a:	b510      	push	{r4, lr}
    dc3c:	4604      	mov	r4, r0
    dc3e:	88c0      	ldrh	r0, [r0, #6]
    dc40:	88a1      	ldrh	r1, [r4, #4]
    dc42:	4281      	cmp	r1, r0
    dc44:	d007      	beq.n	dc56 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dc46:	89a0      	ldrh	r0, [r4, #12]
    dc48:	b928      	cbnz	r0, dc56 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dc4a:	8a20      	ldrh	r0, [r4, #16]
    dc4c:	b918      	cbnz	r0, dc56 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dc4e:	88a0      	ldrh	r0, [r4, #4]
    dc50:	8aa1      	ldrh	r1, [r4, #20]
    dc52:	4288      	cmp	r0, r1
    dc54:	d101      	bne.n	dc5a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    dc56:	2000      	movs	r0, #0
    dc58:	bd10      	pop	{r4, pc}
    dc5a:	1d21      	adds	r1, r4, #4
    dc5c:	4620      	mov	r0, r4
    dc5e:	f7ff fef9 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc62:	2000      	movs	r0, #0
    dc64:	8220      	strh	r0, [r4, #16]
    dc66:	2001      	movs	r0, #1
    dc68:	bd10      	pop	{r4, pc}

0000dc6a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    dc6a:	b510      	push	{r4, lr}
    dc6c:	4604      	mov	r4, r0
    dc6e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dc72:	88c0      	ldrh	r0, [r0, #6]
    dc74:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dc78:	4402      	add	r2, r0
    dc7a:	8820      	ldrh	r0, [r4, #0]
    dc7c:	2845      	cmp	r0, #69	; 0x45
    dc7e:	d200      	bcs.n	dc82 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    dc80:	2045      	movs	r0, #69	; 0x45
    dc82:	4288      	cmp	r0, r1
    dc84:	d204      	bcs.n	dc90 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    dc86:	f240 1119 	movw	r1, #281	; 0x119
    dc8a:	2014      	movs	r0, #20
    dc8c:	f7f6 ff6c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc90:	7de0      	ldrb	r0, [r4, #23]
    dc92:	2800      	cmp	r0, #0
    dc94:	d003      	beq.n	dc9e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    dc96:	8810      	ldrh	r0, [r2, #0]
    dc98:	4288      	cmp	r0, r1
    dc9a:	d201      	bcs.n	dca0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    dc9c:	2000      	movs	r0, #0
    dc9e:	bd10      	pop	{r4, pc}
    dca0:	8011      	strh	r1, [r2, #0]
    dca2:	1da1      	adds	r1, r4, #6
    dca4:	4620      	mov	r0, r4
    dca6:	f7ff fed5 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dcaa:	2000      	movs	r0, #0
    dcac:	75e0      	strb	r0, [r4, #23]
    dcae:	2001      	movs	r0, #1
    dcb0:	bd10      	pop	{r4, pc}

0000dcb2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    dcb2:	b530      	push	{r4, r5, lr}
    dcb4:	88c4      	ldrh	r4, [r0, #6]
    dcb6:	8881      	ldrh	r1, [r0, #4]
    dcb8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dcbc:	f3c1 030e 	ubfx	r3, r1, #0, #15
    dcc0:	4413      	add	r3, r2
    dcc2:	8882      	ldrh	r2, [r0, #4]
    dcc4:	8a85      	ldrh	r5, [r0, #20]
    dcc6:	42aa      	cmp	r2, r5
    dcc8:	d012      	beq.n	dcf0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dcca:	42a1      	cmp	r1, r4
    dccc:	d010      	beq.n	dcf0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dcce:	8981      	ldrh	r1, [r0, #12]
    dcd0:	b971      	cbnz	r1, dcf0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dcd2:	6982      	ldr	r2, [r0, #24]
    dcd4:	b172      	cbz	r2, dcf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dcd6:	4610      	mov	r0, r2
    dcd8:	f7ff ff21 	bl	db1e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    dcdc:	b950      	cbnz	r0, dcf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dcde:	8910      	ldrh	r0, [r2, #8]
    dce0:	3224      	adds	r2, #36	; 0x24
    dce2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dce6:	4410      	add	r0, r2
    dce8:	7899      	ldrb	r1, [r3, #2]
    dcea:	7880      	ldrb	r0, [r0, #2]
    dcec:	4288      	cmp	r0, r1
    dcee:	d101      	bne.n	dcf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dcf0:	2000      	movs	r0, #0
    dcf2:	bd30      	pop	{r4, r5, pc}
    dcf4:	4618      	mov	r0, r3
    dcf6:	bd30      	pop	{r4, r5, pc}

0000dcf8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    dcf8:	7f00      	ldrb	r0, [r0, #28]
    dcfa:	1d80      	adds	r0, r0, #6
    dcfc:	4408      	add	r0, r1
    dcfe:	1ec0      	subs	r0, r0, #3
    dd00:	6010      	str	r0, [r2, #0]
    dd02:	8808      	ldrh	r0, [r1, #0]
    dd04:	4770      	bx	lr

0000dd06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd0a:	460e      	mov	r6, r1
    dd0c:	88c1      	ldrh	r1, [r0, #6]
    dd0e:	8902      	ldrh	r2, [r0, #8]
    dd10:	4604      	mov	r4, r0
    dd12:	f100 0824 	add.w	r8, r0, #36	; 0x24
    dd16:	8800      	ldrh	r0, [r0, #0]
    dd18:	f3c1 050e 	ubfx	r5, r1, #0, #15
    dd1c:	f3c2 070e 	ubfx	r7, r2, #0, #15
    dd20:	2845      	cmp	r0, #69	; 0x45
    dd22:	d200      	bcs.n	dd26 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    dd24:	2045      	movs	r0, #69	; 0x45
    dd26:	42b0      	cmp	r0, r6
    dd28:	d203      	bcs.n	dd32 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    dd2a:	21db      	movs	r1, #219	; 0xdb
    dd2c:	2014      	movs	r0, #20
    dd2e:	f7f6 ff1b 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd32:	4610      	mov	r0, r2
    dd34:	f7ff feaf 	bl	da96 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dd38:	b110      	cbz	r0, dd40 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    dd3a:	2000      	movs	r0, #0
    dd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd40:	42af      	cmp	r7, r5
    dd42:	d908      	bls.n	dd56 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dd44:	7f21      	ldrb	r1, [r4, #28]
    dd46:	1b78      	subs	r0, r7, r5
    dd48:	1a40      	subs	r0, r0, r1
    dd4a:	1f80      	subs	r0, r0, #6
    dd4c:	4286      	cmp	r6, r0
    dd4e:	dd02      	ble.n	dd56 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dd50:	2000      	movs	r0, #0
    dd52:	75e0      	strb	r0, [r4, #23]
    dd54:	e7f1      	b.n	dd3a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    dd56:	eb08 0005 	add.w	r0, r8, r5
    dd5a:	2101      	movs	r1, #1
    dd5c:	8006      	strh	r6, [r0, #0]
    dd5e:	75e1      	strb	r1, [r4, #23]
    dd60:	e7ec      	b.n	dd3c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000dd62 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    dd62:	b538      	push	{r3, r4, r5, lr}
    dd64:	88c4      	ldrh	r4, [r0, #6]
    dd66:	8881      	ldrh	r1, [r0, #4]
    dd68:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dd6c:	f3c1 030e 	ubfx	r3, r1, #0, #15
    dd70:	441a      	add	r2, r3
    dd72:	42a1      	cmp	r1, r4
    dd74:	d010      	beq.n	dd98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dd76:	8983      	ldrh	r3, [r0, #12]
    dd78:	8a05      	ldrh	r5, [r0, #16]
    dd7a:	8812      	ldrh	r2, [r2, #0]
    dd7c:	442b      	add	r3, r5
    dd7e:	4293      	cmp	r3, r2
    dd80:	d308      	bcc.n	dd94 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    dd82:	f8ad 1000 	strh.w	r1, [sp]
    dd86:	4669      	mov	r1, sp
    dd88:	f7ff fe64 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dd8c:	f8bd 0000 	ldrh.w	r0, [sp]
    dd90:	42a0      	cmp	r0, r4
    dd92:	d001      	beq.n	dd98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dd94:	2001      	movs	r0, #1
    dd96:	bd38      	pop	{r3, r4, r5, pc}
    dd98:	2000      	movs	r0, #0
    dd9a:	bd38      	pop	{r3, r4, r5, pc}

0000dd9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    dd9c:	b570      	push	{r4, r5, r6, lr}
    dd9e:	88c6      	ldrh	r6, [r0, #6]
    dda0:	8885      	ldrh	r5, [r0, #4]
    dda2:	4603      	mov	r3, r0
    dda4:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dda8:	f3c5 000e 	ubfx	r0, r5, #0, #15
    ddac:	4420      	add	r0, r4
    ddae:	42b5      	cmp	r5, r6
    ddb0:	d102      	bne.n	ddb8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    ddb2:	2000      	movs	r0, #0
    ddb4:	8218      	strh	r0, [r3, #16]
    ddb6:	bd70      	pop	{r4, r5, r6, pc}
    ddb8:	8804      	ldrh	r4, [r0, #0]
    ddba:	899d      	ldrh	r5, [r3, #12]
    ddbc:	7f1e      	ldrb	r6, [r3, #28]
    ddbe:	1b64      	subs	r4, r4, r5
    ddc0:	4435      	add	r5, r6
    ddc2:	4428      	add	r0, r5
    ddc4:	880d      	ldrh	r5, [r1, #0]
    ddc6:	b2a4      	uxth	r4, r4
    ddc8:	1cc0      	adds	r0, r0, #3
    ddca:	42a5      	cmp	r5, r4
    ddcc:	d900      	bls.n	ddd0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    ddce:	800c      	strh	r4, [r1, #0]
    ddd0:	899c      	ldrh	r4, [r3, #12]
    ddd2:	b124      	cbz	r4, ddde <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    ddd4:	2400      	movs	r4, #0
    ddd6:	7014      	strb	r4, [r2, #0]
    ddd8:	8809      	ldrh	r1, [r1, #0]
    ddda:	8219      	strh	r1, [r3, #16]
    dddc:	bd70      	pop	{r4, r5, r6, pc}
    ddde:	2401      	movs	r4, #1
    dde0:	e7f9      	b.n	ddd6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dde2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    dde2:	b508      	push	{r3, lr}
    dde4:	8a81      	ldrh	r1, [r0, #20]
    dde6:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ddea:	3aff      	subs	r2, #255	; 0xff
    ddec:	d008      	beq.n	de00 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    ddee:	7d82      	ldrb	r2, [r0, #22]
    ddf0:	f88d 2000 	strb.w	r2, [sp]
    ddf4:	9a00      	ldr	r2, [sp, #0]
    ddf6:	9200      	str	r2, [sp, #0]
    ddf8:	f89d 2000 	ldrb.w	r2, [sp]
    ddfc:	b952      	cbnz	r2, de14 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    ddfe:	e004      	b.n	de0a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    de00:	f240 318e 	movw	r1, #910	; 0x38e
    de04:	2014      	movs	r0, #20
    de06:	f7f6 feaf 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de0a:	8880      	ldrh	r0, [r0, #4]
    de0c:	4281      	cmp	r1, r0
    de0e:	d101      	bne.n	de14 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    de10:	2000      	movs	r0, #0
    de12:	bd08      	pop	{r3, pc}
    de14:	2001      	movs	r0, #1
    de16:	bd08      	pop	{r3, pc}

0000de18 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    de18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de1c:	8281      	strh	r1, [r0, #20]
    de1e:	2100      	movs	r1, #0
    de20:	7581      	strb	r1, [r0, #22]
    de22:	4770      	bx	lr

0000de24 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    de24:	b510      	push	{r4, lr}
    de26:	8a81      	ldrh	r1, [r0, #20]
    de28:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    de2c:	3aff      	subs	r2, #255	; 0xff
    de2e:	d004      	beq.n	de3a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    de30:	f240 316a 	movw	r1, #874	; 0x36a
    de34:	2014      	movs	r0, #20
    de36:	f7f6 fe97 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de3a:	88c1      	ldrh	r1, [r0, #6]
    de3c:	8281      	strh	r1, [r0, #20]
    de3e:	89c1      	ldrh	r1, [r0, #14]
    de40:	b109      	cbz	r1, de46 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    de42:	21ff      	movs	r1, #255	; 0xff
    de44:	e000      	b.n	de48 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    de46:	2100      	movs	r1, #0
    de48:	7581      	strb	r1, [r0, #22]
    de4a:	bd10      	pop	{r4, pc}

0000de4c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de50:	461d      	mov	r5, r3
    de52:	4616      	mov	r6, r2
    de54:	9f06      	ldr	r7, [sp, #24]
    de56:	460b      	mov	r3, r1
    de58:	4604      	mov	r4, r0
    de5a:	463a      	mov	r2, r7
    de5c:	4629      	mov	r1, r5
    de5e:	4630      	mov	r0, r6
    de60:	f000 f84f 	bl	df02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    de64:	4283      	cmp	r3, r0
    de66:	d201      	bcs.n	de6c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    de68:	21a8      	movs	r1, #168	; 0xa8
    de6a:	e018      	b.n	de9e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    de6c:	1ce0      	adds	r0, r4, #3
    de6e:	f020 0103 	bic.w	r1, r0, #3
    de72:	4620      	mov	r0, r4
    de74:	42a1      	cmp	r1, r4
    de76:	d001      	beq.n	de7c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    de78:	21a9      	movs	r1, #169	; 0xa9
    de7a:	e010      	b.n	de9e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    de7c:	2224      	movs	r2, #36	; 0x24
    de7e:	2100      	movs	r1, #0
    de80:	f7ff f93c 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de84:	f64f 70ff 	movw	r0, #65535	; 0xffff
    de88:	82a0      	strh	r0, [r4, #20]
    de8a:	19a8      	adds	r0, r5, r6
    de8c:	1d80      	adds	r0, r0, #6
    de8e:	4378      	muls	r0, r7
    de90:	b280      	uxth	r0, r0
    de92:	7725      	strb	r5, [r4, #28]
    de94:	8060      	strh	r0, [r4, #2]
    de96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    de9a:	d903      	bls.n	dea4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    de9c:	21af      	movs	r1, #175	; 0xaf
    de9e:	2014      	movs	r0, #20
    dea0:	f7f6 fe62 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dea4:	8026      	strh	r6, [r4, #0]
    dea6:	2000      	movs	r0, #0
    dea8:	7760      	strb	r0, [r4, #29]
    deaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000deae <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    deae:	6181      	str	r1, [r0, #24]
    deb0:	6188      	str	r0, [r1, #24]
    deb2:	4770      	bx	lr

0000deb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    deb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    deb8:	460b      	mov	r3, r1
    deba:	4604      	mov	r4, r0
    debc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dec0:	8905      	ldrh	r5, [r0, #8]
    dec2:	8946      	ldrh	r6, [r0, #10]
    dec4:	8880      	ldrh	r0, [r0, #4]
    dec6:	f3c5 070e 	ubfx	r7, r5, #0, #15
    deca:	4439      	add	r1, r7
    decc:	460f      	mov	r7, r1
    dece:	4285      	cmp	r5, r0
    ded0:	d102      	bne.n	ded8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    ded2:	2000      	movs	r0, #0
    ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ded8:	b10a      	cbz	r2, dede <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    deda:	1cc8      	adds	r0, r1, #3
    dedc:	6010      	str	r0, [r2, #0]
    dede:	b123      	cbz	r3, deea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dee0:	7f22      	ldrb	r2, [r4, #28]
    dee2:	1cf9      	adds	r1, r7, #3
    dee4:	4618      	mov	r0, r3
    dee6:	f7ff f88f 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    deea:	883f      	ldrh	r7, [r7, #0]
    deec:	f104 0108 	add.w	r1, r4, #8
    def0:	4620      	mov	r0, r4
    def2:	f7ff fdaf 	bl	da54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    def6:	42b5      	cmp	r5, r6
    def8:	d101      	bne.n	defe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    defa:	8920      	ldrh	r0, [r4, #8]
    defc:	8160      	strh	r0, [r4, #10]
    defe:	4638      	mov	r0, r7
    df00:	e7e8      	b.n	ded4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000df02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    df02:	4401      	add	r1, r0
    df04:	1d89      	adds	r1, r1, #6
    df06:	4351      	muls	r1, r2
    df08:	b28a      	uxth	r2, r1
    df0a:	2100      	movs	r1, #0
    df0c:	2845      	cmp	r0, #69	; 0x45
    df0e:	d202      	bcs.n	df16 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    df10:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    df14:	b281      	uxth	r1, r0
    df16:	3224      	adds	r2, #36	; 0x24
    df18:	1850      	adds	r0, r2, r1
    df1a:	b280      	uxth	r0, r0
    df1c:	4770      	bx	lr

0000df1e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    df1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df22:	4688      	mov	r8, r1
    df24:	88c1      	ldrh	r1, [r0, #6]
    df26:	4604      	mov	r4, r0
    df28:	8900      	ldrh	r0, [r0, #8]
    df2a:	f3c1 060e 	ubfx	r6, r1, #0, #15
    df2e:	f104 0524 	add.w	r5, r4, #36	; 0x24
    df32:	f3c0 070e 	ubfx	r7, r0, #0, #15
    df36:	eb05 0906 	add.w	r9, r5, r6
    df3a:	f7ff fdac 	bl	da96 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    df3e:	2200      	movs	r2, #0
    df40:	b998      	cbnz	r0, df6a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    df42:	8820      	ldrh	r0, [r4, #0]
    df44:	2845      	cmp	r0, #69	; 0x45
    df46:	d200      	bcs.n	df4a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    df48:	2045      	movs	r0, #69	; 0x45
    df4a:	42b7      	cmp	r7, r6
    df4c:	d906      	bls.n	df5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    df4e:	7f23      	ldrb	r3, [r4, #28]
    df50:	1bb9      	subs	r1, r7, r6
    df52:	1ac9      	subs	r1, r1, r3
    df54:	1f89      	subs	r1, r1, #6
    df56:	4281      	cmp	r1, r0
    df58:	da00      	bge.n	df5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    df5a:	4608      	mov	r0, r1
    df5c:	89e1      	ldrh	r1, [r4, #14]
    df5e:	b111      	cbz	r1, df66 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    df60:	f8b9 3000 	ldrh.w	r3, [r9]
    df64:	1ac0      	subs	r0, r0, r3
    df66:	4540      	cmp	r0, r8
    df68:	da03      	bge.n	df72 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    df6a:	8262      	strh	r2, [r4, #18]
    df6c:	2000      	movs	r0, #0
    df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df72:	7f20      	ldrb	r0, [r4, #28]
    df74:	4429      	add	r1, r5
    df76:	1d80      	adds	r0, r0, #6
    df78:	4430      	add	r0, r6
    df7a:	4408      	add	r0, r1
    df7c:	f8a4 8012 	strh.w	r8, [r4, #18]
    df80:	1ec0      	subs	r0, r0, #3
    df82:	e7f4      	b.n	df6e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000df84 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    df84:	2100      	movs	r1, #0
    df86:	81c1      	strh	r1, [r0, #14]
    df88:	8241      	strh	r1, [r0, #18]
    df8a:	7581      	strb	r1, [r0, #22]
    df8c:	4770      	bx	lr

0000df8e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    df8e:	b570      	push	{r4, r5, r6, lr}
    df90:	2300      	movs	r3, #0
    df92:	f1a1 0208 	sub.w	r2, r1, #8
    df96:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    df9a:	42a2      	cmp	r2, r4
    df9c:	d304      	bcc.n	dfa8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    df9e:	f240 11cd 	movw	r1, #461	; 0x1cd
    dfa2:	2015      	movs	r0, #21
    dfa4:	f7f6 fde0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfa8:	6802      	ldr	r2, [r0, #0]
    dfaa:	b90a      	cbnz	r2, dfb0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    dfac:	e01e      	b.n	dfec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dfae:	4610      	mov	r0, r2
    dfb0:	6802      	ldr	r2, [r0, #0]
    dfb2:	8893      	ldrh	r3, [r2, #4]
    dfb4:	428b      	cmp	r3, r1
    dfb6:	d002      	beq.n	dfbe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    dfb8:	6813      	ldr	r3, [r2, #0]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d1f7      	bne.n	dfae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    dfbe:	8894      	ldrh	r4, [r2, #4]
    dfc0:	4613      	mov	r3, r2
    dfc2:	428c      	cmp	r4, r1
    dfc4:	d101      	bne.n	dfca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    dfc6:	6811      	ldr	r1, [r2, #0]
    dfc8:	e00d      	b.n	dfe6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    dfca:	f101 0508 	add.w	r5, r1, #8
    dfce:	b2ae      	uxth	r6, r5
    dfd0:	2500      	movs	r5, #0
    dfd2:	42b4      	cmp	r4, r6
    dfd4:	d309      	bcc.n	dfea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    dfd6:	1a64      	subs	r4, r4, r1
    dfd8:	4411      	add	r1, r2
    dfda:	600d      	str	r5, [r1, #0]
    dfdc:	808c      	strh	r4, [r1, #4]
    dfde:	6802      	ldr	r2, [r0, #0]
    dfe0:	6812      	ldr	r2, [r2, #0]
    dfe2:	6002      	str	r2, [r0, #0]
    dfe4:	600a      	str	r2, [r1, #0]
    dfe6:	6001      	str	r1, [r0, #0]
    dfe8:	e000      	b.n	dfec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dfea:	2300      	movs	r3, #0
    dfec:	4618      	mov	r0, r3
    dfee:	bd70      	pop	{r4, r5, r6, pc}

0000dff0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dff0:	b510      	push	{r4, lr}
    dff2:	000c      	movs	r4, r1
    dff4:	d004      	beq.n	e000 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    dff6:	2c08      	cmp	r4, #8
    dff8:	d207      	bcs.n	e00a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dffa:	f240 1195 	movw	r1, #405	; 0x195
    dffe:	e00a      	b.n	e016 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e000:	b108      	cbz	r0, e006 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e002:	2100      	movs	r1, #0
    e004:	6001      	str	r1, [r0, #0]
    e006:	2000      	movs	r0, #0
    e008:	bd10      	pop	{r4, pc}
    e00a:	b158      	cbz	r0, e024 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e00c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e010:	d304      	bcc.n	e01c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e012:	f240 11a7 	movw	r1, #423	; 0x1a7
    e016:	2015      	movs	r0, #21
    e018:	f7f6 fda6 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e01c:	b2a1      	uxth	r1, r4
    e01e:	6800      	ldr	r0, [r0, #0]
    e020:	f000 f814 	bl	e04c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e024:	1d20      	adds	r0, r4, #4
    e026:	bd10      	pop	{r4, pc}

0000e028 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e028:	2100      	movs	r1, #0
    e02a:	6802      	ldr	r2, [r0, #0]
    e02c:	e003      	b.n	e036 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e02e:	8893      	ldrh	r3, [r2, #4]
    e030:	6812      	ldr	r2, [r2, #0]
    e032:	4419      	add	r1, r3
    e034:	b289      	uxth	r1, r1
    e036:	2a00      	cmp	r2, #0
    e038:	d1f9      	bne.n	e02e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e03a:	f000 b807 	b.w	e04c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e03e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e03e:	2300      	movs	r3, #0
    e040:	600b      	str	r3, [r1, #0]
    e042:	808a      	strh	r2, [r1, #4]
    e044:	6802      	ldr	r2, [r0, #0]
    e046:	600a      	str	r2, [r1, #0]
    e048:	6001      	str	r1, [r0, #0]
    e04a:	4770      	bx	lr
    e04c:	2300      	movs	r3, #0
    e04e:	6043      	str	r3, [r0, #4]
    e050:	1d02      	adds	r2, r0, #4
    e052:	8101      	strh	r1, [r0, #8]
    e054:	6002      	str	r2, [r0, #0]
    e056:	4770      	bx	lr

0000e058 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e058:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e05c:	3bff      	subs	r3, #255	; 0xff
    e05e:	d001      	beq.n	e064 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e060:	2902      	cmp	r1, #2
    e062:	d301      	bcc.n	e068 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e064:	2000      	movs	r0, #0
    e066:	4770      	bx	lr
    e068:	f7f7 b844 	b.w	50f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e06c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e070:	3aff      	subs	r2, #255	; 0xff
    e072:	d001      	beq.n	e078 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e074:	2902      	cmp	r1, #2
    e076:	d301      	bcc.n	e07c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e078:	2000      	movs	r0, #0
    e07a:	4770      	bx	lr
    e07c:	f7f7 b874 	b.w	5168 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e080:	b570      	push	{r4, r5, r6, lr}
    e082:	4605      	mov	r5, r0
    e084:	460c      	mov	r4, r1
    e086:	4608      	mov	r0, r1
    e088:	f000 f9a9 	bl	e3de <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e08c:	b108      	cbz	r0, e092 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e08e:	2010      	movs	r0, #16
    e090:	bd70      	pop	{r4, r5, r6, pc}
    e092:	2d02      	cmp	r5, #2
    e094:	d301      	bcc.n	e09a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e096:	2007      	movs	r0, #7
    e098:	bd70      	pop	{r4, r5, r6, pc}
    e09a:	7025      	strb	r5, [r4, #0]
    e09c:	2000      	movs	r0, #0
    e09e:	8060      	strh	r0, [r4, #2]
    e0a0:	bd70      	pop	{r4, r5, r6, pc}
    e0a2:	b510      	push	{r4, lr}
    e0a4:	4604      	mov	r4, r0
    e0a6:	f7f7 f8ab 	bl	5200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e0aa:	42a0      	cmp	r0, r4
    e0ac:	d901      	bls.n	e0b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e0ae:	2001      	movs	r0, #1
    e0b0:	bd10      	pop	{r4, pc}
    e0b2:	2000      	movs	r0, #0
    e0b4:	bd10      	pop	{r4, pc}
    e0b6:	4770      	bx	lr

0000e0b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e0b8:	b570      	push	{r4, r5, r6, lr}
    e0ba:	460e      	mov	r6, r1
    e0bc:	461d      	mov	r5, r3
    e0be:	4611      	mov	r1, r2
    e0c0:	f000 f813 	bl	e0ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e0c4:	4604      	mov	r4, r0
    e0c6:	4629      	mov	r1, r5
    e0c8:	4630      	mov	r0, r6
    e0ca:	f000 f804 	bl	e0d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e0ce:	4420      	add	r0, r4
    e0d0:	1d00      	adds	r0, r0, #4
    e0d2:	b280      	uxth	r0, r0
    e0d4:	bd70      	pop	{r4, r5, r6, pc}
    e0d6:	b510      	push	{r4, lr}
    e0d8:	460a      	mov	r2, r1
    e0da:	2101      	movs	r1, #1
    e0dc:	f7ff ff11 	bl	df02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e0e0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e0e4:	1cc0      	adds	r0, r0, #3
    e0e6:	4008      	ands	r0, r1
    e0e8:	bd10      	pop	{r4, pc}
    e0ea:	b510      	push	{r4, lr}
    e0ec:	460a      	mov	r2, r1
    e0ee:	210a      	movs	r1, #10
    e0f0:	f7ff ff07 	bl	df02 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e0f4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e0f8:	1cc0      	adds	r0, r0, #3
    e0fa:	4008      	ands	r0, r1
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	b109      	cbz	r1, e104 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e100:	2100      	movs	r1, #0
    e102:	e000      	b.n	e106 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e104:	2102      	movs	r1, #2
    e106:	1843      	adds	r3, r0, r1
    e108:	7d1a      	ldrb	r2, [r3, #20]
    e10a:	2a02      	cmp	r2, #2
    e10c:	d008      	beq.n	e120 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e10e:	7d5b      	ldrb	r3, [r3, #21]
    e110:	2b02      	cmp	r3, #2
    e112:	d009      	beq.n	e128 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e114:	2a03      	cmp	r2, #3
    e116:	d003      	beq.n	e120 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e118:	2b03      	cmp	r3, #3
    e11a:	d005      	beq.n	e128 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e11c:	2000      	movs	r0, #0
    e11e:	4770      	bx	lr
    e120:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e124:	8b00      	ldrh	r0, [r0, #24]
    e126:	4770      	bx	lr
    e128:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e12c:	8b40      	ldrh	r0, [r0, #26]
    e12e:	4770      	bx	lr
    e130:	b109      	cbz	r1, e136 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e132:	2100      	movs	r1, #0
    e134:	e000      	b.n	e138 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e136:	2102      	movs	r1, #2
    e138:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e13c:	8b01      	ldrh	r1, [r0, #24]
    e13e:	b911      	cbnz	r1, e146 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e140:	8b40      	ldrh	r0, [r0, #26]
    e142:	2800      	cmp	r0, #0
    e144:	d000      	beq.n	e148 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e146:	2001      	movs	r0, #1
    e148:	4770      	bx	lr
    e14a:	b538      	push	{r3, r4, r5, lr}
    e14c:	7883      	ldrb	r3, [r0, #2]
    e14e:	f88d 3000 	strb.w	r3, [sp]
    e152:	9b00      	ldr	r3, [sp, #0]
    e154:	9300      	str	r3, [sp, #0]
    e156:	f89d 3000 	ldrb.w	r3, [sp]
    e15a:	b95b      	cbnz	r3, e174 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e15c:	2400      	movs	r4, #0
    e15e:	b10a      	cbz	r2, e164 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e160:	2300      	movs	r3, #0
    e162:	e000      	b.n	e166 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e164:	2302      	movs	r3, #2
    e166:	18c2      	adds	r2, r0, r3
    e168:	7d15      	ldrb	r5, [r2, #20]
    e16a:	2d02      	cmp	r5, #2
    e16c:	d004      	beq.n	e178 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e16e:	7d52      	ldrb	r2, [r2, #21]
    e170:	2a02      	cmp	r2, #2
    e172:	d004      	beq.n	e17e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e174:	2000      	movs	r0, #0
    e176:	bd38      	pop	{r3, r4, r5, pc}
    e178:	461a      	mov	r2, r3
    e17a:	1c5b      	adds	r3, r3, #1
    e17c:	e000      	b.n	e180 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e17e:	1c5a      	adds	r2, r3, #1
    e180:	b179      	cbz	r1, e1a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e182:	18c5      	adds	r5, r0, r3
    e184:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e188:	752c      	strb	r4, [r5, #20]
    e18a:	831c      	strh	r4, [r3, #24]
    e18c:	2303      	movs	r3, #3
    e18e:	1884      	adds	r4, r0, r2
    e190:	7523      	strb	r3, [r4, #20]
    e192:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e196:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e19a:	685b      	ldr	r3, [r3, #4]
    e19c:	600b      	str	r3, [r1, #0]
    e19e:	8b00      	ldrh	r0, [r0, #24]
    e1a0:	8088      	strh	r0, [r1, #4]
    e1a2:	2001      	movs	r0, #1
    e1a4:	bd38      	pop	{r3, r4, r5, pc}
    e1a6:	b510      	push	{r4, lr}
    e1a8:	b109      	cbz	r1, e1ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e1aa:	2100      	movs	r1, #0
    e1ac:	e000      	b.n	e1b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e1ae:	2102      	movs	r1, #2
    e1b0:	1843      	adds	r3, r0, r1
    e1b2:	7d1c      	ldrb	r4, [r3, #20]
    e1b4:	4294      	cmp	r4, r2
    e1b6:	d103      	bne.n	e1c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e1b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e1bc:	8b00      	ldrh	r0, [r0, #24]
    e1be:	bd10      	pop	{r4, pc}
    e1c0:	7d5b      	ldrb	r3, [r3, #21]
    e1c2:	4293      	cmp	r3, r2
    e1c4:	d103      	bne.n	e1ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e1c6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e1ca:	8b40      	ldrh	r0, [r0, #26]
    e1cc:	bd10      	pop	{r4, pc}
    e1ce:	2000      	movs	r0, #0
    e1d0:	bd10      	pop	{r4, pc}
    e1d2:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e1d6:	d201      	bcs.n	e1dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e1d8:	0841      	lsrs	r1, r0, #1
    e1da:	e000      	b.n	e1de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e1dc:	21ff      	movs	r1, #255	; 0xff
    e1de:	1a40      	subs	r0, r0, r1
    e1e0:	f240 6172 	movw	r1, #1650	; 0x672
    e1e4:	4288      	cmp	r0, r1
    e1e6:	db00      	blt.n	e1ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e1e8:	4608      	mov	r0, r1
    e1ea:	b280      	uxth	r0, r0
    e1ec:	4770      	bx	lr

0000e1ee <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e1ee:	2101      	movs	r1, #1
    e1f0:	f7ff bf85 	b.w	e0fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1f8:	4606      	mov	r6, r0
    e1fa:	f342 0780 	sbfx	r7, r2, #2, #1
    e1fe:	7848      	ldrb	r0, [r1, #1]
    e200:	460c      	mov	r4, r1
    e202:	f022 0504 	bic.w	r5, r2, #4
    e206:	1c7f      	adds	r7, r7, #1
    e208:	b100      	cbz	r0, e20c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e20a:	b90d      	cbnz	r5, e210 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e20c:	4328      	orrs	r0, r5
    e20e:	d104      	bne.n	e21a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e210:	b145      	cbz	r5, e224 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e212:	2100      	movs	r1, #0
    e214:	4620      	mov	r0, r4
    e216:	f7f7 f8fd 	bl	5414 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e21a:	20ff      	movs	r0, #255	; 0xff
    e21c:	70a0      	strb	r0, [r4, #2]
    e21e:	b11f      	cbz	r7, e228 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e220:	2000      	movs	r0, #0
    e222:	e002      	b.n	e22a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e224:	2101      	movs	r1, #1
    e226:	e7f5      	b.n	e214 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e228:	2002      	movs	r0, #2
    e22a:	1821      	adds	r1, r4, r0
    e22c:	7d09      	ldrb	r1, [r1, #20]
    e22e:	2903      	cmp	r1, #3
    e230:	d102      	bne.n	e238 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e232:	2d02      	cmp	r5, #2
    e234:	d000      	beq.n	e238 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e236:	1c40      	adds	r0, r0, #1
    e238:	1822      	adds	r2, r4, r0
    e23a:	2101      	movs	r1, #1
    e23c:	7511      	strb	r1, [r2, #20]
    e23e:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e242:	2200      	movs	r2, #0
    e244:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e248:	830a      	strh	r2, [r1, #24]
    e24a:	6840      	ldr	r0, [r0, #4]
    e24c:	70a2      	strb	r2, [r4, #2]
    e24e:	4631      	mov	r1, r6
    e250:	f362 010f 	bfi	r1, r2, #0, #16
    e254:	e9c6 0100 	strd	r0, r1, [r6]
    e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e25c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e260:	461e      	mov	r6, r3
    e262:	4613      	mov	r3, r2
    e264:	4604      	mov	r4, r0
    e266:	b109      	cbz	r1, e26c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e268:	2000      	movs	r0, #0
    e26a:	e000      	b.n	e26e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e26c:	2002      	movs	r0, #2
    e26e:	21ff      	movs	r1, #255	; 0xff
    e270:	70a1      	strb	r1, [r4, #2]
    e272:	1821      	adds	r1, r4, r0
    e274:	7d0a      	ldrb	r2, [r1, #20]
    e276:	2a01      	cmp	r2, #1
    e278:	d003      	beq.n	e282 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e27a:	7d49      	ldrb	r1, [r1, #21]
    e27c:	2901      	cmp	r1, #1
    e27e:	d10c      	bne.n	e29a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e280:	1c40      	adds	r0, r0, #1
    e282:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e286:	2700      	movs	r7, #0
    e288:	8b29      	ldrh	r1, [r5, #24]
    e28a:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e28e:	198a      	adds	r2, r1, r6
    e290:	4562      	cmp	r2, ip
    e292:	d905      	bls.n	e2a0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e294:	4420      	add	r0, r4
    e296:	832f      	strh	r7, [r5, #24]
    e298:	7507      	strb	r7, [r0, #20]
    e29a:	2000      	movs	r0, #0
    e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2a0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e2a4:	4632      	mov	r2, r6
    e2a6:	6840      	ldr	r0, [r0, #4]
    e2a8:	4408      	add	r0, r1
    e2aa:	4619      	mov	r1, r3
    e2ac:	f7fe feac 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2b0:	8b28      	ldrh	r0, [r5, #24]
    e2b2:	4430      	add	r0, r6
    e2b4:	8328      	strh	r0, [r5, #24]
    e2b6:	70a7      	strb	r7, [r4, #2]
    e2b8:	2001      	movs	r0, #1
    e2ba:	e7ef      	b.n	e29c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e2bc <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e2bc:	2202      	movs	r2, #2
    e2be:	2100      	movs	r1, #0
    e2c0:	f7ff bf71 	b.w	e1a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e2c4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	2101      	movs	r1, #1
    e2c8:	f7ff ff32 	bl	e130 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e2cc:	2800      	cmp	r0, #0
    e2ce:	d000      	beq.n	e2d2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e2d0:	2001      	movs	r0, #1
    e2d2:	bd10      	pop	{r4, pc}

0000e2d4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e2d4:	2201      	movs	r2, #1
    e2d6:	f7ff bf38 	b.w	e14a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e2da <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e2da:	2200      	movs	r2, #0
    e2dc:	f7ff bf35 	b.w	e14a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e2e0:	b570      	push	{r4, r5, r6, lr}
    e2e2:	b109      	cbz	r1, e2e8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e2e4:	2300      	movs	r3, #0
    e2e6:	e000      	b.n	e2ea <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e2e8:	2302      	movs	r3, #2
    e2ea:	21ff      	movs	r1, #255	; 0xff
    e2ec:	7081      	strb	r1, [r0, #2]
    e2ee:	18c1      	adds	r1, r0, r3
    e2f0:	2402      	movs	r4, #2
    e2f2:	7d0d      	ldrb	r5, [r1, #20]
    e2f4:	2d01      	cmp	r5, #1
    e2f6:	d007      	beq.n	e308 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e2f8:	7d4d      	ldrb	r5, [r1, #21]
    e2fa:	2d01      	cmp	r5, #1
    e2fc:	d009      	beq.n	e312 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e2fe:	f44f 718b 	mov.w	r1, #278	; 0x116
    e302:	2009      	movs	r0, #9
    e304:	f7f6 fc30 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e308:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e30c:	831a      	strh	r2, [r3, #24]
    e30e:	750c      	strb	r4, [r1, #20]
    e310:	e003      	b.n	e31a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e312:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e316:	835a      	strh	r2, [r3, #26]
    e318:	754c      	strb	r4, [r1, #21]
    e31a:	2100      	movs	r1, #0
    e31c:	7081      	strb	r1, [r0, #2]
    e31e:	bd70      	pop	{r4, r5, r6, pc}

0000e320 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e320:	2101      	movs	r1, #1
    e322:	7001      	strb	r1, [r0, #0]
    e324:	4770      	bx	lr

0000e326 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e326:	2201      	movs	r2, #1
    e328:	4611      	mov	r1, r2
    e32a:	f7ff bf3c 	b.w	e1a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e32e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e32e:	2201      	movs	r2, #1
    e330:	2100      	movs	r1, #0
    e332:	f7ff bf38 	b.w	e1a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e336 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e336:	2100      	movs	r1, #0
    e338:	f7ff bee1 	b.w	e0fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e33c:	2800      	cmp	r0, #0
    e33e:	db09      	blt.n	e354 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e340:	f000 021f 	and.w	r2, r0, #31
    e344:	2101      	movs	r1, #1
    e346:	4091      	lsls	r1, r2
    e348:	0940      	lsrs	r0, r0, #5
    e34a:	0080      	lsls	r0, r0, #2
    e34c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e350:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e354:	4770      	bx	lr
    e356:	2800      	cmp	r0, #0
    e358:	db0d      	blt.n	e376 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e35a:	f000 021f 	and.w	r2, r0, #31
    e35e:	2101      	movs	r1, #1
    e360:	4091      	lsls	r1, r2
    e362:	0940      	lsrs	r0, r0, #5
    e364:	0080      	lsls	r0, r0, #2
    e366:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e36a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e36e:	f3bf 8f4f 	dsb	sy
    e372:	f3bf 8f6f 	isb	sy
    e376:	4770      	bx	lr
    e378:	b510      	push	{r4, lr}
    e37a:	200e      	movs	r0, #14
    e37c:	f7ff ffeb 	bl	e356 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e380:	200e      	movs	r0, #14
    e382:	f7ff ffdb 	bl	e33c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e386:	200f      	movs	r0, #15
    e388:	f7ff ffe5 	bl	e356 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e390:	200f      	movs	r0, #15
    e392:	f7ff bfd3 	b.w	e33c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e396:	2800      	cmp	r0, #0
    e398:	db09      	blt.n	e3ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e39a:	f000 021f 	and.w	r2, r0, #31
    e39e:	2101      	movs	r1, #1
    e3a0:	4091      	lsls	r1, r2
    e3a2:	0940      	lsrs	r0, r0, #5
    e3a4:	0080      	lsls	r0, r0, #2
    e3a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e3aa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e3ae:	4770      	bx	lr
    e3b0:	5840      	ldr	r0, [r0, r1]
    e3b2:	2800      	cmp	r0, #0
    e3b4:	d000      	beq.n	e3b8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e3b6:	2001      	movs	r0, #1
    e3b8:	4770      	bx	lr

0000e3ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e3ba:	b510      	push	{r4, lr}
    e3bc:	4604      	mov	r4, r0
    e3be:	4620      	mov	r0, r4
    e3c0:	f7f7 f928 	bl	5614 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e3c4:	2811      	cmp	r0, #17
    e3c6:	d0fa      	beq.n	e3be <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e3c8:	bd10      	pop	{r4, pc}

0000e3ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e3ca:	b510      	push	{r4, lr}
    e3cc:	f7ff fff5 	bl	e3ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e3d0:	2800      	cmp	r0, #0
    e3d2:	d003      	beq.n	e3dc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e3d4:	21a0      	movs	r1, #160	; 0xa0
    e3d6:	201d      	movs	r0, #29
    e3d8:	f7f6 fbc6 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3dc:	bd10      	pop	{r4, pc}

0000e3de <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e3de:	b108      	cbz	r0, e3e4 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e3e0:	2000      	movs	r0, #0
    e3e2:	4770      	bx	lr
    e3e4:	2001      	movs	r0, #1
    e3e6:	4770      	bx	lr

0000e3e8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e3e8:	f7f7 ba66 	b.w	58b8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e3ec <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e3ec:	f7f7 ba54 	b.w	5898 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e3f0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e3f0:	b510      	push	{r4, lr}
    e3f2:	4050      	eors	r0, r2
    e3f4:	780a      	ldrb	r2, [r1, #0]
    e3f6:	781c      	ldrb	r4, [r3, #0]
    e3f8:	4062      	eors	r2, r4
    e3fa:	4410      	add	r0, r2
    e3fc:	784a      	ldrb	r2, [r1, #1]
    e3fe:	785c      	ldrb	r4, [r3, #1]
    e400:	4062      	eors	r2, r4
    e402:	4410      	add	r0, r2
    e404:	788a      	ldrb	r2, [r1, #2]
    e406:	789c      	ldrb	r4, [r3, #2]
    e408:	4062      	eors	r2, r4
    e40a:	4410      	add	r0, r2
    e40c:	78ca      	ldrb	r2, [r1, #3]
    e40e:	78dc      	ldrb	r4, [r3, #3]
    e410:	4062      	eors	r2, r4
    e412:	4410      	add	r0, r2
    e414:	790a      	ldrb	r2, [r1, #4]
    e416:	791c      	ldrb	r4, [r3, #4]
    e418:	7949      	ldrb	r1, [r1, #5]
    e41a:	4062      	eors	r2, r4
    e41c:	4410      	add	r0, r2
    e41e:	795a      	ldrb	r2, [r3, #5]
    e420:	4051      	eors	r1, r2
    e422:	42c1      	cmn	r1, r0
    e424:	d101      	bne.n	e42a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    e426:	2001      	movs	r0, #1
    e428:	bd10      	pop	{r4, pc}
    e42a:	2000      	movs	r0, #0
    e42c:	bd10      	pop	{r4, pc}

0000e42e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e42e:	b510      	push	{r4, lr}
    e430:	2900      	cmp	r1, #0
    e432:	4604      	mov	r4, r0
    e434:	f04f 0106 	mov.w	r1, #6
    e438:	d002      	beq.n	e440 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e43a:	f7f6 fc33 	bl	4ca4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e43e:	e001      	b.n	e444 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e440:	f7f6 fc3e 	bl	4cc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e444:	7960      	ldrb	r0, [r4, #5]
    e446:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e44a:	7160      	strb	r0, [r4, #5]
    e44c:	bd10      	pop	{r4, pc}

0000e44e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e44e:	4770      	bx	lr

0000e450 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e450:	b530      	push	{r4, r5, lr}
    e452:	460c      	mov	r4, r1
    e454:	4605      	mov	r5, r0
    e456:	b08d      	sub	sp, #52	; 0x34
    e458:	f04f 0103 	mov.w	r1, #3
    e45c:	f104 0003 	add.w	r0, r4, #3
    e460:	b112      	cbz	r2, e468 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e462:	f7f6 fc1f 	bl	4ca4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e466:	e001      	b.n	e46c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e468:	f7f6 fc2a 	bl	4cc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e46c:	7960      	ldrb	r0, [r4, #5]
    e46e:	220d      	movs	r2, #13
    e470:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e474:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e478:	7160      	strb	r0, [r4, #5]
    e47a:	2100      	movs	r1, #0
    e47c:	a804      	add	r0, sp, #16
    e47e:	f7fe fe3d 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e482:	78e0      	ldrb	r0, [r4, #3]
    e484:	f88d 001f 	strb.w	r0, [sp, #31]
    e488:	7920      	ldrb	r0, [r4, #4]
    e48a:	f88d 001e 	strb.w	r0, [sp, #30]
    e48e:	7960      	ldrb	r0, [r4, #5]
    e490:	f88d 001d 	strb.w	r0, [sp, #29]
    e494:	2210      	movs	r2, #16
    e496:	4629      	mov	r1, r5
    e498:	4668      	mov	r0, sp
    e49a:	f7fe fdb5 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e49e:	4668      	mov	r0, sp
    e4a0:	f7ff ff93 	bl	e3ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e4a4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e4a8:	7020      	strb	r0, [r4, #0]
    e4aa:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e4ae:	7060      	strb	r0, [r4, #1]
    e4b0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e4b4:	70a0      	strb	r0, [r4, #2]
    e4b6:	b00d      	add	sp, #52	; 0x34
    e4b8:	bd30      	pop	{r4, r5, pc}

0000e4ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e4ba:	f7f7 bdd9 	b.w	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    e4be:	07c1      	lsls	r1, r0, #31
    e4c0:	d001      	beq.n	e4c6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e4c2:	2001      	movs	r0, #1
    e4c4:	4770      	bx	lr
    e4c6:	0780      	lsls	r0, r0, #30
    e4c8:	d501      	bpl.n	e4ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e4ca:	2002      	movs	r0, #2
    e4cc:	4770      	bx	lr
    e4ce:	2000      	movs	r0, #0
    e4d0:	4770      	bx	lr
    e4d2:	b510      	push	{r4, lr}
    e4d4:	2801      	cmp	r0, #1
    e4d6:	d008      	beq.n	e4ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e4d8:	2802      	cmp	r0, #2
    e4da:	d004      	beq.n	e4e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e4dc:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e4e0:	2006      	movs	r0, #6
    e4e2:	f7f6 fb41 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4e6:	2001      	movs	r0, #1
    e4e8:	bd10      	pop	{r4, pc}
    e4ea:	2000      	movs	r0, #0
    e4ec:	bd10      	pop	{r4, pc}
    e4ee:	2900      	cmp	r1, #0
    e4f0:	d004      	beq.n	e4fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e4f2:	2801      	cmp	r0, #1
    e4f4:	d003      	beq.n	e4fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e4f6:	2901      	cmp	r1, #1
    e4f8:	d001      	beq.n	e4fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e4fa:	2002      	movs	r0, #2
    e4fc:	4770      	bx	lr
    e4fe:	2001      	movs	r0, #1
    e500:	4770      	bx	lr
    e502:	f7ff bc4b 	b.w	dd9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e506 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e506:	2101      	movs	r1, #1
    e508:	f7f8 b942 	b.w	6790 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e50c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e50c:	b510      	push	{r4, lr}
    e50e:	f002 fcb7 	bl	10e80 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e512:	b118      	cbz	r0, e51c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e518:	f7fc befa 	b.w	b310 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e51c:	20ff      	movs	r0, #255	; 0xff
    e51e:	bd10      	pop	{r4, pc}

0000e520 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e520:	b510      	push	{r4, lr}
    e522:	f7f8 f97d 	bl	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e526:	2810      	cmp	r0, #16
    e528:	d003      	beq.n	e532 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e52a:	f7f8 f949 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e52e:	2810      	cmp	r0, #16
    e530:	d100      	bne.n	e534 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e532:	2008      	movs	r0, #8
    e534:	bd10      	pop	{r4, pc}

0000e536 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e536:	b510      	push	{r4, lr}
    e538:	f7f8 f972 	bl	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e53c:	2810      	cmp	r0, #16
    e53e:	d007      	beq.n	e550 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e540:	f7f8 f93e 	bl	67c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e544:	2810      	cmp	r0, #16
    e546:	d003      	beq.n	e550 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e548:	f7f8 f9c8 	bl	68dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    e54c:	2001      	movs	r0, #1
    e54e:	bd10      	pop	{r4, pc}
    e550:	2000      	movs	r0, #0
    e552:	bd10      	pop	{r4, pc}

0000e554 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e554:	b510      	push	{r4, lr}
    e556:	f7f8 f963 	bl	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e55a:	2810      	cmp	r0, #16
    e55c:	d003      	beq.n	e566 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e55e:	f7f8 fa05 	bl	696c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    e562:	2001      	movs	r0, #1
    e564:	bd10      	pop	{r4, pc}
    e566:	2000      	movs	r0, #0
    e568:	bd10      	pop	{r4, pc}

0000e56a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e56a:	b570      	push	{r4, r5, r6, lr}
    e56c:	460e      	mov	r6, r1
    e56e:	b08c      	sub	sp, #48	; 0x30
    e570:	4614      	mov	r4, r2
    e572:	4601      	mov	r1, r0
    e574:	461d      	mov	r5, r3
    e576:	2210      	movs	r2, #16
    e578:	4668      	mov	r0, sp
    e57a:	f000 f928 	bl	e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e57e:	2210      	movs	r2, #16
    e580:	4631      	mov	r1, r6
    e582:	a804      	add	r0, sp, #16
    e584:	f000 f923 	bl	e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e588:	4668      	mov	r0, sp
    e58a:	f7ff ff1e 	bl	e3ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e58e:	a908      	add	r1, sp, #32
    e590:	f04f 0210 	mov.w	r2, #16
    e594:	4628      	mov	r0, r5
    e596:	b11c      	cbz	r4, e5a0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e598:	f000 f919 	bl	e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e59c:	b00c      	add	sp, #48	; 0x30
    e59e:	bd70      	pop	{r4, r5, r6, pc}
    e5a0:	f7fe fd32 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5a4:	e7fa      	b.n	e59c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e5a6:	b510      	push	{r4, lr}
    e5a8:	460c      	mov	r4, r1
    e5aa:	2100      	movs	r1, #0
    e5ac:	f7ff fd5e 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e5b0:	6060      	str	r0, [r4, #4]
    e5b2:	b118      	cbz	r0, e5bc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e5b4:	2001      	movs	r0, #1
    e5b6:	7020      	strb	r0, [r4, #0]
    e5b8:	2000      	movs	r0, #0
    e5ba:	bd10      	pop	{r4, pc}
    e5bc:	2002      	movs	r0, #2
    e5be:	bd10      	pop	{r4, pc}

0000e5c0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e5c0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5c4:	4348      	muls	r0, r1
    e5c6:	4770      	bx	lr

0000e5c8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e5c8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5cc:	fbb0 f0f1 	udiv	r0, r0, r1
    e5d0:	b280      	uxth	r0, r0
    e5d2:	4770      	bx	lr

0000e5d4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e5d4:	b570      	push	{r4, r5, r6, lr}
    e5d6:	4604      	mov	r4, r0
    e5d8:	4290      	cmp	r0, r2
    e5da:	d20b      	bcs.n	e5f4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e5dc:	1b10      	subs	r0, r2, r4
    e5de:	2865      	cmp	r0, #101	; 0x65
    e5e0:	d200      	bcs.n	e5e4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e5e2:	2065      	movs	r0, #101	; 0x65
    e5e4:	1825      	adds	r5, r4, r0
    e5e6:	428d      	cmp	r5, r1
    e5e8:	d803      	bhi.n	e5f2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e5ea:	2103      	movs	r1, #3
    e5ec:	f7f3 fd36 	bl	205c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e5f0:	b108      	cbz	r0, e5f6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e5f2:	4620      	mov	r0, r4
    e5f4:	bd70      	pop	{r4, r5, r6, pc}
    e5f6:	4628      	mov	r0, r5
    e5f8:	bd70      	pop	{r4, r5, r6, pc}

0000e5fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e5fa:	b510      	push	{r4, lr}
    e5fc:	f1a2 030f 	sub.w	r3, r2, #15
    e600:	290c      	cmp	r1, #12
    e602:	d244      	bcs.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e604:	e8df f001 	tbb	[pc, r1]
    e608:	120d0806 	.word	0x120d0806
    e60c:	241c1815 	.word	0x241c1815
    e610:	312a4127 	.word	0x312a4127
    e614:	b3c2      	cbz	r2, e688 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e616:	e03a      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e618:	2a07      	cmp	r2, #7
    e61a:	d03a      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e61c:	2a08      	cmp	r2, #8
    e61e:	d038      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e620:	e035      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e622:	2a0c      	cmp	r2, #12
    e624:	d035      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e626:	2a0b      	cmp	r2, #11
    e628:	d033      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e62a:	e030      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e62c:	2a0d      	cmp	r2, #13
    e62e:	d030      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e630:	e02d      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e632:	2b0c      	cmp	r3, #12
    e634:	d92d      	bls.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e636:	e02a      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e638:	3a10      	subs	r2, #16
    e63a:	2a0b      	cmp	r2, #11
    e63c:	d929      	bls.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e63e:	e026      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e640:	2b03      	cmp	r3, #3
    e642:	d926      	bls.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e644:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    e648:	b308      	cbz	r0, e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e64a:	2a1b      	cmp	r2, #27
    e64c:	d921      	bls.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e64e:	e01e      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e650:	2a04      	cmp	r2, #4
    e652:	d01e      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e654:	e01b      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e656:	2a06      	cmp	r2, #6
    e658:	d01b      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e65a:	e018      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e65c:	2a1c      	cmp	r2, #28
    e65e:	d018      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e660:	2a1d      	cmp	r2, #29
    e662:	d016      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e664:	2a1e      	cmp	r2, #30
    e666:	d014      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e668:	e011      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e66a:	2a1f      	cmp	r2, #31
    e66c:	d011      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e66e:	2a20      	cmp	r2, #32
    e670:	d00f      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e672:	2a21      	cmp	r2, #33	; 0x21
    e674:	d00d      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e676:	2a22      	cmp	r2, #34	; 0x22
    e678:	d00b      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e67a:	2a23      	cmp	r2, #35	; 0x23
    e67c:	d009      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e67e:	2a24      	cmp	r2, #36	; 0x24
    e680:	d007      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e682:	2a27      	cmp	r2, #39	; 0x27
    e684:	d005      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e686:	e002      	b.n	e68e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e688:	e003      	b.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e68a:	2a0e      	cmp	r2, #14
    e68c:	d001      	beq.n	e692 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e68e:	2000      	movs	r0, #0
    e690:	bd10      	pop	{r4, pc}
    e692:	2001      	movs	r0, #1
    e694:	bd10      	pop	{r4, pc}

0000e696 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e696:	280c      	cmp	r0, #12
    e698:	d013      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e69a:	280b      	cmp	r0, #11
    e69c:	d011      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e69e:	280d      	cmp	r0, #13
    e6a0:	d00f      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6a2:	281f      	cmp	r0, #31
    e6a4:	d00d      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6a6:	2820      	cmp	r0, #32
    e6a8:	d00b      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6aa:	2821      	cmp	r0, #33	; 0x21
    e6ac:	d009      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6ae:	2822      	cmp	r0, #34	; 0x22
    e6b0:	d007      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6b2:	2823      	cmp	r0, #35	; 0x23
    e6b4:	d005      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6b6:	2824      	cmp	r0, #36	; 0x24
    e6b8:	d003      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6ba:	2827      	cmp	r0, #39	; 0x27
    e6bc:	d001      	beq.n	e6c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e6be:	2000      	movs	r0, #0
    e6c0:	4770      	bx	lr
    e6c2:	2001      	movs	r0, #1
    e6c4:	4770      	bx	lr

0000e6c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e6c6:	f011 0f0c 	tst.w	r1, #12
    e6ca:	d018      	beq.n	e6fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e6cc:	074a      	lsls	r2, r1, #29
    e6ce:	f44f 7116 	mov.w	r1, #600	; 0x258
    e6d2:	2a00      	cmp	r2, #0
    e6d4:	da02      	bge.n	e6dc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e6d6:	f04f 0210 	mov.w	r2, #16
    e6da:	e001      	b.n	e6e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e6dc:	f04f 0240 	mov.w	r2, #64	; 0x40
    e6e0:	da01      	bge.n	e6e6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e6e2:	f04f 0196 	mov.w	r1, #150	; 0x96
    e6e6:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e6ea:	eba0 0301 	sub.w	r3, r0, r1
    e6ee:	4288      	cmp	r0, r1
    e6f0:	d903      	bls.n	e6fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e6f2:	fb93 f0f2 	sdiv	r0, r3, r2
    e6f6:	b280      	uxth	r0, r0
    e6f8:	4770      	bx	lr
    e6fa:	2000      	movs	r0, #0
    e6fc:	4770      	bx	lr
    e6fe:	2902      	cmp	r1, #2
    e700:	d008      	beq.n	e714 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e702:	2870      	cmp	r0, #112	; 0x70
    e704:	d9f9      	bls.n	e6fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e706:	3870      	subs	r0, #112	; 0x70
    e708:	17c1      	asrs	r1, r0, #31
    e70a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e70e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e712:	4770      	bx	lr
    e714:	283c      	cmp	r0, #60	; 0x3c
    e716:	d9f0      	bls.n	e6fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e718:	383c      	subs	r0, #60	; 0x3c
    e71a:	17c1      	asrs	r1, r0, #31
    e71c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e720:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e724:	4770      	bx	lr

0000e726 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e726:	6809      	ldr	r1, [r1, #0]
    e728:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e72c:	4770      	bx	lr

0000e72e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e72e:	07c1      	lsls	r1, r0, #31
    e730:	d001      	beq.n	e736 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e732:	2001      	movs	r0, #1
    e734:	4770      	bx	lr
    e736:	0781      	lsls	r1, r0, #30
    e738:	d501      	bpl.n	e73e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e73a:	2002      	movs	r0, #2
    e73c:	4770      	bx	lr
    e73e:	0740      	lsls	r0, r0, #29
    e740:	d501      	bpl.n	e746 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e742:	2008      	movs	r0, #8
    e744:	4770      	bx	lr
    e746:	2000      	movs	r0, #0
    e748:	4770      	bx	lr

0000e74a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e74a:	b510      	push	{r4, lr}
    e74c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e750:	2901      	cmp	r1, #1
    e752:	d006      	beq.n	e762 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e754:	2902      	cmp	r1, #2
    e756:	d005      	beq.n	e764 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e758:	f240 31ba 	movw	r1, #954	; 0x3ba
    e75c:	2029      	movs	r0, #41	; 0x29
    e75e:	f7f6 fa03 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e762:	b108      	cbz	r0, e768 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e764:	4610      	mov	r0, r2
    e766:	bd10      	pop	{r4, pc}
    e768:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e76c:	bd10      	pop	{r4, pc}

0000e76e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e772:	4607      	mov	r7, r0
    e774:	460e      	mov	r6, r1
    e776:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e77a:	f7f4 f845 	bl	2808 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e77e:	b198      	cbz	r0, e7a8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e780:	b31e      	cbz	r6, e7ca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e786:	1b40      	subs	r0, r0, r5
    e788:	2300      	movs	r3, #0
    e78a:	eb61 0104 	sbc.w	r1, r1, r4
    e78e:	461a      	mov	r2, r3
    e790:	1a1b      	subs	r3, r3, r0
    e792:	418a      	sbcs	r2, r1
    e794:	da19      	bge.n	e7ca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e796:	1c42      	adds	r2, r0, #1
    e798:	f171 0100 	sbcs.w	r1, r1, #0
    e79c:	db07      	blt.n	e7ae <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e79e:	f240 2136 	movw	r1, #566	; 0x236
    e7a2:	2029      	movs	r0, #41	; 0x29
    e7a4:	f7f6 f9e0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7a8:	f44f 710b 	mov.w	r1, #556	; 0x22c
    e7ac:	e7f9      	b.n	e7a2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e7ae:	4430      	add	r0, r6
    e7b0:	1e40      	subs	r0, r0, #1
    e7b2:	fbb0 f1f6 	udiv	r1, r0, r6
    e7b6:	fb01 f006 	mul.w	r0, r1, r6
    e7ba:	1828      	adds	r0, r5, r0
    e7bc:	f144 0400 	adc.w	r4, r4, #0
    e7c0:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e7c4:	4608      	mov	r0, r1
    e7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7ca:	2000      	movs	r0, #0
    e7cc:	e7fb      	b.n	e7c6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e7ce <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e7ce:	b530      	push	{r4, r5, lr}
    e7d0:	4613      	mov	r3, r2
    e7d2:	e006      	b.n	e7e2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e7d4:	18cc      	adds	r4, r1, r3
    e7d6:	1ad5      	subs	r5, r2, r3
    e7d8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e7dc:	1e5b      	subs	r3, r3, #1
    e7de:	5544      	strb	r4, [r0, r5]
    e7e0:	b2db      	uxtb	r3, r3
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d1f6      	bne.n	e7d4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e7e6:	bd30      	pop	{r4, r5, pc}

0000e7e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e7e8:	b538      	push	{r3, r4, r5, lr}
    e7ea:	4605      	mov	r5, r0
    e7ec:	460c      	mov	r4, r1
    e7ee:	4668      	mov	r0, sp
    e7f0:	f7fd fa5e 	bl	bcb0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e7f4:	b310      	cbz	r0, e83c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e7f6:	f99d 0000 	ldrsb.w	r0, [sp]
    e7fa:	7260      	strb	r0, [r4, #9]
    e7fc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    e800:	72a1      	strb	r1, [r4, #10]
    e802:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e806:	2200      	movs	r2, #0
    e808:	1a41      	subs	r1, r0, r1
    e80a:	d500      	bpl.n	e80e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e80c:	4249      	negs	r1, r1
    e80e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e812:	428b      	cmp	r3, r1
    e814:	dc10      	bgt.n	e838 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e816:	2bff      	cmp	r3, #255	; 0xff
    e818:	d00e      	beq.n	e838 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e81a:	7b21      	ldrb	r1, [r4, #12]
    e81c:	1c49      	adds	r1, r1, #1
    e81e:	b2c9      	uxtb	r1, r1
    e820:	7321      	strb	r1, [r4, #12]
    e822:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e826:	4299      	cmp	r1, r3
    e828:	d802      	bhi.n	e830 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e82a:	7ae1      	ldrb	r1, [r4, #11]
    e82c:	297f      	cmp	r1, #127	; 0x7f
    e82e:	d103      	bne.n	e838 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e830:	72e0      	strb	r0, [r4, #11]
    e832:	2000      	movs	r0, #0
    e834:	7320      	strb	r0, [r4, #12]
    e836:	2201      	movs	r2, #1
    e838:	4610      	mov	r0, r2
    e83a:	bd38      	pop	{r3, r4, r5, pc}
    e83c:	207f      	movs	r0, #127	; 0x7f
    e83e:	7260      	strb	r0, [r4, #9]
    e840:	2000      	movs	r0, #0
    e842:	bd38      	pop	{r3, r4, r5, pc}

0000e844 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e844:	2300      	movs	r3, #0
    e846:	6303      	str	r3, [r0, #48]	; 0x30
    e848:	8702      	strh	r2, [r0, #56]	; 0x38
    e84a:	f240 2371 	movw	r3, #625	; 0x271
    e84e:	435a      	muls	r2, r3
    e850:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e854:	1e52      	subs	r2, r2, #1
    e856:	fbb2 f1f1 	udiv	r1, r2, r1
    e85a:	6341      	str	r1, [r0, #52]	; 0x34
    e85c:	4770      	bx	lr

0000e85e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e85e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e862:	4607      	mov	r7, r0
    e864:	4690      	mov	r8, r2
    e866:	468b      	mov	fp, r1
    e868:	2601      	movs	r6, #1
    e86a:	4608      	mov	r0, r1
    e86c:	f000 f94a 	bl	eb04 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e870:	4682      	mov	sl, r0
    e872:	4658      	mov	r0, fp
    e874:	f000 f952 	bl	eb1c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e878:	4681      	mov	r9, r0
    e87a:	f7ff ff58 	bl	e72e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e87e:	4604      	mov	r4, r0
    e880:	4650      	mov	r0, sl
    e882:	f7ff ff54 	bl	e72e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e886:	4605      	mov	r5, r0
    e888:	ea54 0005 	orrs.w	r0, r4, r5
    e88c:	d100      	bne.n	e890 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e88e:	2600      	movs	r6, #0
    e890:	f7fc fcc0 	bl	b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e894:	ea10 0f09 	tst.w	r0, r9
    e898:	d100      	bne.n	e89c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e89a:	2400      	movs	r4, #0
    e89c:	f7fc fcba 	bl	b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e8a0:	ea10 0f0a 	tst.w	r0, sl
    e8a4:	d100      	bne.n	e8a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e8a6:	2500      	movs	r5, #0
    e8a8:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e8ac:	42a0      	cmp	r0, r4
    e8ae:	d100      	bne.n	e8b2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e8b0:	2400      	movs	r4, #0
    e8b2:	f888 4000 	strb.w	r4, [r8]
    e8b6:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e8ba:	42a8      	cmp	r0, r5
    e8bc:	d100      	bne.n	e8c0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e8be:	2500      	movs	r5, #0
    e8c0:	f888 5001 	strb.w	r5, [r8, #1]
    e8c4:	b974      	cbnz	r4, e8e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e8c6:	b96d      	cbnz	r5, e8e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e8c8:	4658      	mov	r0, fp
    e8ca:	f000 f925 	bl	eb18 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e8ce:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e8d2:	1a40      	subs	r0, r0, r1
    e8d4:	b200      	sxth	r0, r0
    e8d6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e8da:	4288      	cmp	r0, r1
    e8dc:	dc01      	bgt.n	e8e2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e8de:	2800      	cmp	r0, #0
    e8e0:	dc00      	bgt.n	e8e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e8e2:	2600      	movs	r6, #0
    e8e4:	4630      	mov	r0, r6
    e8e6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e8ea <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e8ea:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e8ee:	4348      	muls	r0, r1
    e8f0:	4770      	bx	lr

0000e8f2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e8f2:	f240 2171 	movw	r1, #625	; 0x271
    e8f6:	fb10 f001 	smulbb	r0, r0, r1
    e8fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8fe:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e902:	4770      	bx	lr

0000e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e904:	b510      	push	{r4, lr}
    e906:	2300      	movs	r3, #0
    e908:	461a      	mov	r2, r3
    e90a:	e003      	b.n	e914 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e90c:	5c84      	ldrb	r4, [r0, r2]
    e90e:	4323      	orrs	r3, r4
    e910:	1c52      	adds	r2, r2, #1
    e912:	b2d2      	uxtb	r2, r2
    e914:	428a      	cmp	r2, r1
    e916:	d3f9      	bcc.n	e90c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e918:	b10b      	cbz	r3, e91e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e91a:	2000      	movs	r0, #0
    e91c:	bd10      	pop	{r4, pc}
    e91e:	2001      	movs	r0, #1
    e920:	bd10      	pop	{r4, pc}

0000e922 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e922:	b510      	push	{r4, lr}
    e924:	4604      	mov	r4, r0
    e926:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e92a:	b108      	cbz	r0, e930 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e92c:	2825      	cmp	r0, #37	; 0x25
    e92e:	d901      	bls.n	e934 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e930:	2012      	movs	r0, #18
    e932:	bd10      	pop	{r4, pc}
    e934:	b12a      	cbz	r2, e942 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e936:	7da0      	ldrb	r0, [r4, #22]
    e938:	b128      	cbz	r0, e946 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e93a:	2801      	cmp	r0, #1
    e93c:	d009      	beq.n	e952 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e93e:	201f      	movs	r0, #31
    e940:	bd10      	pop	{r4, pc}
    e942:	2000      	movs	r0, #0
    e944:	bd10      	pop	{r4, pc}
    e946:	4620      	mov	r0, r4
    e948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e94c:	4611      	mov	r1, r2
    e94e:	f7f8 b903 	b.w	6b58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e952:	88a2      	ldrh	r2, [r4, #4]
    e954:	6949      	ldr	r1, [r1, #20]
    e956:	f104 0016 	add.w	r0, r4, #22
    e95a:	f7f8 f8a9 	bl	6ab0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e95e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    e962:	e7ee      	b.n	e942 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e964 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e964:	b530      	push	{r4, r5, lr}
    e966:	1c42      	adds	r2, r0, #1
    e968:	428a      	cmp	r2, r1
    e96a:	d004      	beq.n	e976 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e96c:	680a      	ldr	r2, [r1, #0]
    e96e:	f8c0 2001 	str.w	r2, [r0, #1]
    e972:	7909      	ldrb	r1, [r1, #4]
    e974:	7141      	strb	r1, [r0, #5]
    e976:	7941      	ldrb	r1, [r0, #5]
    e978:	f001 011f 	and.w	r1, r1, #31
    e97c:	7141      	strb	r1, [r0, #5]
    e97e:	2100      	movs	r1, #0
    e980:	72c1      	strb	r1, [r0, #11]
    e982:	1843      	adds	r3, r0, r1
    e984:	1c49      	adds	r1, r1, #1
    e986:	785c      	ldrb	r4, [r3, #1]
    e988:	b2c9      	uxtb	r1, r1
    e98a:	f004 0201 	and.w	r2, r4, #1
    e98e:	0864      	lsrs	r4, r4, #1
    e990:	f004 0501 	and.w	r5, r4, #1
    e994:	4415      	add	r5, r2
    e996:	0862      	lsrs	r2, r4, #1
    e998:	f002 0401 	and.w	r4, r2, #1
    e99c:	442c      	add	r4, r5
    e99e:	0852      	lsrs	r2, r2, #1
    e9a0:	f002 0501 	and.w	r5, r2, #1
    e9a4:	442c      	add	r4, r5
    e9a6:	0852      	lsrs	r2, r2, #1
    e9a8:	f002 0501 	and.w	r5, r2, #1
    e9ac:	442c      	add	r4, r5
    e9ae:	0852      	lsrs	r2, r2, #1
    e9b0:	f002 0501 	and.w	r5, r2, #1
    e9b4:	442c      	add	r4, r5
    e9b6:	0852      	lsrs	r2, r2, #1
    e9b8:	f002 0501 	and.w	r5, r2, #1
    e9bc:	442c      	add	r4, r5
    e9be:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e9c2:	719a      	strb	r2, [r3, #6]
    e9c4:	7ac3      	ldrb	r3, [r0, #11]
    e9c6:	2905      	cmp	r1, #5
    e9c8:	441a      	add	r2, r3
    e9ca:	72c2      	strb	r2, [r0, #11]
    e9cc:	d3d9      	bcc.n	e982 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e9ce:	bd30      	pop	{r4, r5, pc}
    e9d0:	b570      	push	{r4, r5, r6, lr}
    e9d2:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e9d6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e9da:	f012 0fff 	tst.w	r2, #255	; 0xff
    e9de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e9e2:	d108      	bne.n	e9f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e9e4:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e9e8:	b92c      	cbnz	r4, e9f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e9ea:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e9ee:	b914      	cbnz	r4, e9f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e9f0:	0e12      	lsrs	r2, r2, #24
    e9f2:	d100      	bne.n	e9f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e9f4:	b35b      	cbz	r3, ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e9f6:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e9fa:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e9fe:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    ea02:	7d83      	ldrb	r3, [r0, #22]
    ea04:	b141      	cbz	r1, ea18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ea06:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ea0a:	d905      	bls.n	ea18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ea0c:	f640 5107 	movw	r1, #3335	; 0xd07
    ea10:	428a      	cmp	r2, r1
    ea12:	d801      	bhi.n	ea18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ea14:	2101      	movs	r1, #1
    ea16:	e000      	b.n	ea1a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    ea18:	2100      	movs	r1, #0
    ea1a:	7846      	ldrb	r6, [r0, #1]
    ea1c:	2e22      	cmp	r6, #34	; 0x22
    ea1e:	d116      	bne.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea20:	b959      	cbnz	r1, ea3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    ea22:	1f91      	subs	r1, r2, #6
    ea24:	f640 467a 	movw	r6, #3194	; 0xc7a
    ea28:	42b1      	cmp	r1, r6
    ea2a:	d810      	bhi.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea2c:	b17b      	cbz	r3, ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea2e:	2b08      	cmp	r3, #8
    ea30:	d80d      	bhi.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea32:	4293      	cmp	r3, r2
    ea34:	d20b      	bcs.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea36:	4294      	cmp	r4, r2
    ea38:	d809      	bhi.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea3a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ea3e:	d206      	bcs.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea40:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    ea44:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    ea48:	d801      	bhi.n	ea4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    ea4a:	2001      	movs	r0, #1
    ea4c:	bd70      	pop	{r4, r5, r6, pc}
    ea4e:	2000      	movs	r0, #0
    ea50:	bd70      	pop	{r4, r5, r6, pc}

0000ea52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    ea52:	b570      	push	{r4, r5, r6, lr}
    ea54:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    ea58:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    ea5c:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    ea60:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    ea64:	88c0      	ldrh	r0, [r0, #6]
    ea66:	b131      	cbz	r1, ea76 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    ea68:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ea6c:	d903      	bls.n	ea76 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    ea6e:	f640 5107 	movw	r1, #3335	; 0xd07
    ea72:	428a      	cmp	r2, r1
    ea74:	d90b      	bls.n	ea8e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    ea76:	1f91      	subs	r1, r2, #6
    ea78:	f640 467a 	movw	r6, #3194	; 0xc7a
    ea7c:	42b1      	cmp	r1, r6
    ea7e:	d80e      	bhi.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea80:	b16b      	cbz	r3, ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea82:	2b08      	cmp	r3, #8
    ea84:	d80b      	bhi.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea86:	4293      	cmp	r3, r2
    ea88:	d209      	bcs.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea8a:	4294      	cmp	r4, r2
    ea8c:	d807      	bhi.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea8e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ea92:	d204      	bcs.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea94:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    ea98:	d801      	bhi.n	ea9e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    ea9a:	2001      	movs	r0, #1
    ea9c:	bd70      	pop	{r4, r5, r6, pc}
    ea9e:	2000      	movs	r0, #0
    eaa0:	bd70      	pop	{r4, r5, r6, pc}

0000eaa2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    eaa2:	6842      	ldr	r2, [r0, #4]
    eaa4:	600a      	str	r2, [r1, #0]
    eaa6:	7a00      	ldrb	r0, [r0, #8]
    eaa8:	7108      	strb	r0, [r1, #4]
    eaaa:	4770      	bx	lr

0000eaac <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    eaac:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    eab0:	4770      	bx	lr

0000eab2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    eab2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    eab6:	4770      	bx	lr

0000eab8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    eab8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    eabc:	4770      	bx	lr

0000eabe <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    eabe:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    eac2:	4770      	bx	lr

0000eac4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    eac4:	8980      	ldrh	r0, [r0, #12]
    eac6:	8008      	strh	r0, [r1, #0]
    eac8:	4770      	bx	lr

0000eaca <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    eaca:	f8d0 0016 	ldr.w	r0, [r0, #22]
    eace:	6008      	str	r0, [r1, #0]
    ead0:	4770      	bx	lr

0000ead2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    ead2:	6842      	ldr	r2, [r0, #4]
    ead4:	600a      	str	r2, [r1, #0]
    ead6:	6880      	ldr	r0, [r0, #8]
    ead8:	6048      	str	r0, [r1, #4]
    eada:	4770      	bx	lr

0000eadc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    eadc:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    eae0:	600a      	str	r2, [r1, #0]
    eae2:	6840      	ldr	r0, [r0, #4]
    eae4:	6048      	str	r0, [r1, #4]
    eae6:	4770      	bx	lr

0000eae8 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    eae8:	6842      	ldr	r2, [r0, #4]
    eaea:	600a      	str	r2, [r1, #0]
    eaec:	6880      	ldr	r0, [r0, #8]
    eaee:	6048      	str	r0, [r1, #4]
    eaf0:	4770      	bx	lr

0000eaf2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    eaf2:	6842      	ldr	r2, [r0, #4]
    eaf4:	600a      	str	r2, [r1, #0]
    eaf6:	6880      	ldr	r0, [r0, #8]
    eaf8:	6048      	str	r0, [r1, #4]
    eafa:	4770      	bx	lr

0000eafc <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    eafc:	7800      	ldrb	r0, [r0, #0]
    eafe:	f000 0003 	and.w	r0, r0, #3
    eb02:	4770      	bx	lr

0000eb04 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    eb04:	7900      	ldrb	r0, [r0, #4]
    eb06:	4770      	bx	lr

0000eb08 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    eb08:	8880      	ldrh	r0, [r0, #4]
    eb0a:	4770      	bx	lr

0000eb0c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    eb0c:	88c0      	ldrh	r0, [r0, #6]
    eb0e:	4770      	bx	lr

0000eb10 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    eb10:	8900      	ldrh	r0, [r0, #8]
    eb12:	4770      	bx	lr

0000eb14 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    eb14:	8940      	ldrh	r0, [r0, #10]
    eb16:	4770      	bx	lr

0000eb18 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    eb18:	88c0      	ldrh	r0, [r0, #6]
    eb1a:	4770      	bx	lr

0000eb1c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    eb1c:	7940      	ldrb	r0, [r0, #5]
    eb1e:	4770      	bx	lr

0000eb20 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    eb20:	7900      	ldrb	r0, [r0, #4]
    eb22:	4770      	bx	lr

0000eb24 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    eb24:	7900      	ldrb	r0, [r0, #4]
    eb26:	4770      	bx	lr

0000eb28 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    eb28:	8901      	ldrh	r1, [r0, #8]
    eb2a:	291b      	cmp	r1, #27
    eb2c:	d30c      	bcc.n	eb48 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    eb2e:	8941      	ldrh	r1, [r0, #10]
    eb30:	f44f 72a4 	mov.w	r2, #328	; 0x148
    eb34:	4291      	cmp	r1, r2
    eb36:	d307      	bcc.n	eb48 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    eb38:	8881      	ldrh	r1, [r0, #4]
    eb3a:	291b      	cmp	r1, #27
    eb3c:	d304      	bcc.n	eb48 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    eb3e:	88c0      	ldrh	r0, [r0, #6]
    eb40:	4290      	cmp	r0, r2
    eb42:	d301      	bcc.n	eb48 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    eb44:	2001      	movs	r0, #1
    eb46:	4770      	bx	lr
    eb48:	2000      	movs	r0, #0
    eb4a:	4770      	bx	lr

0000eb4c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    eb4c:	b510      	push	{r4, lr}
    eb4e:	29fb      	cmp	r1, #251	; 0xfb
    eb50:	d904      	bls.n	eb5c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    eb52:	f240 51fe 	movw	r1, #1534	; 0x5fe
    eb56:	202a      	movs	r0, #42	; 0x2a
    eb58:	f7f6 f806 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb5c:	7041      	strb	r1, [r0, #1]
    eb5e:	bd10      	pop	{r4, pc}

0000eb60 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    eb60:	7901      	ldrb	r1, [r0, #4]
    eb62:	0749      	lsls	r1, r1, #29
    eb64:	d004      	beq.n	eb70 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    eb66:	7940      	ldrb	r0, [r0, #5]
    eb68:	0740      	lsls	r0, r0, #29
    eb6a:	d001      	beq.n	eb70 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    eb6c:	2001      	movs	r0, #1
    eb6e:	4770      	bx	lr
    eb70:	2000      	movs	r0, #0
    eb72:	4770      	bx	lr

0000eb74 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    eb74:	7901      	ldrb	r1, [r0, #4]
    eb76:	7940      	ldrb	r0, [r0, #5]
    eb78:	f001 0107 	and.w	r1, r1, #7
    eb7c:	1e4a      	subs	r2, r1, #1
    eb7e:	f000 0007 	and.w	r0, r0, #7
    eb82:	4011      	ands	r1, r2
    eb84:	1e42      	subs	r2, r0, #1
    eb86:	4010      	ands	r0, r2
    eb88:	4301      	orrs	r1, r0
    eb8a:	d001      	beq.n	eb90 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    eb8c:	2000      	movs	r0, #0
    eb8e:	4770      	bx	lr
    eb90:	2001      	movs	r0, #1
    eb92:	4770      	bx	lr

0000eb94 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    eb94:	7900      	ldrb	r0, [r0, #4]
    eb96:	4770      	bx	lr

0000eb98 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    eb98:	7940      	ldrb	r0, [r0, #5]
    eb9a:	4770      	bx	lr

0000eb9c <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    eb9c:	7101      	strb	r1, [r0, #4]
    eb9e:	4770      	bx	lr

0000eba0 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    eba0:	7141      	strb	r1, [r0, #5]
    eba2:	4770      	bx	lr

0000eba4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    eba4:	b510      	push	{r4, lr}
    eba6:	2a1b      	cmp	r2, #27
    eba8:	d904      	bls.n	ebb4 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    ebaa:	f240 4127 	movw	r1, #1063	; 0x427
    ebae:	202a      	movs	r0, #42	; 0x2a
    ebb0:	f7f5 ffda 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebb4:	7042      	strb	r2, [r0, #1]
    ebb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebba:	1cc0      	adds	r0, r0, #3
    ebbc:	f7fe ba24 	b.w	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000ebc0 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    ebc0:	6809      	ldr	r1, [r1, #0]
    ebc2:	60c1      	str	r1, [r0, #12]
    ebc4:	4770      	bx	lr

0000ebc6 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    ebc6:	680a      	ldr	r2, [r1, #0]
    ebc8:	6042      	str	r2, [r0, #4]
    ebca:	6849      	ldr	r1, [r1, #4]
    ebcc:	6081      	str	r1, [r0, #8]
    ebce:	4770      	bx	lr

0000ebd0 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    ebd0:	680a      	ldr	r2, [r1, #0]
    ebd2:	6042      	str	r2, [r0, #4]
    ebd4:	6849      	ldr	r1, [r1, #4]
    ebd6:	6081      	str	r1, [r0, #8]
    ebd8:	4770      	bx	lr

0000ebda <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    ebda:	680a      	ldr	r2, [r1, #0]
    ebdc:	6042      	str	r2, [r0, #4]
    ebde:	6849      	ldr	r1, [r1, #4]
    ebe0:	6081      	str	r1, [r0, #8]
    ebe2:	4770      	bx	lr

0000ebe4 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    ebe4:	7802      	ldrb	r2, [r0, #0]
    ebe6:	f001 0103 	and.w	r1, r1, #3
    ebea:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ebee:	430a      	orrs	r2, r1
    ebf0:	7002      	strb	r2, [r0, #0]
    ebf2:	4770      	bx	lr

0000ebf4 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    ebf4:	7101      	strb	r1, [r0, #4]
    ebf6:	0a09      	lsrs	r1, r1, #8
    ebf8:	7141      	strb	r1, [r0, #5]
    ebfa:	4770      	bx	lr

0000ebfc <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    ebfc:	7181      	strb	r1, [r0, #6]
    ebfe:	0a09      	lsrs	r1, r1, #8
    ec00:	71c1      	strb	r1, [r0, #7]
    ec02:	4770      	bx	lr

0000ec04 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    ec04:	7201      	strb	r1, [r0, #8]
    ec06:	0a09      	lsrs	r1, r1, #8
    ec08:	7241      	strb	r1, [r0, #9]
    ec0a:	4770      	bx	lr

0000ec0c <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    ec0c:	7281      	strb	r1, [r0, #10]
    ec0e:	0a09      	lsrs	r1, r1, #8
    ec10:	72c1      	strb	r1, [r0, #11]
    ec12:	4770      	bx	lr

0000ec14 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    ec14:	7802      	ldrb	r2, [r0, #0]
    ec16:	f002 020f 	and.w	r2, r2, #15
    ec1a:	2a03      	cmp	r2, #3
    ec1c:	d003      	beq.n	ec26 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    ec1e:	2a05      	cmp	r2, #5
    ec20:	d104      	bne.n	ec2c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    ec22:	f7ff bed5 	b.w	e9d0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    ec26:	7840      	ldrb	r0, [r0, #1]
    ec28:	280c      	cmp	r0, #12
    ec2a:	d001      	beq.n	ec30 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    ec2c:	2000      	movs	r0, #0
    ec2e:	4770      	bx	lr
    ec30:	2001      	movs	r0, #1
    ec32:	4770      	bx	lr

0000ec34 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    ec34:	b570      	push	{r4, r5, r6, lr}
    ec36:	4614      	mov	r4, r2
    ec38:	4605      	mov	r5, r0
    ec3a:	2a1f      	cmp	r2, #31
    ec3c:	d903      	bls.n	ec46 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    ec3e:	21b5      	movs	r1, #181	; 0xb5
    ec40:	202a      	movs	r0, #42	; 0x2a
    ec42:	f7f5 ff91 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec46:	f105 0009 	add.w	r0, r5, #9
    ec4a:	f7fe f9dd 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec4e:	1da4      	adds	r4, r4, #6
    ec50:	706c      	strb	r4, [r5, #1]
    ec52:	bd70      	pop	{r4, r5, r6, pc}

0000ec54 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ec54:	b510      	push	{r4, lr}
    ec56:	7802      	ldrb	r2, [r0, #0]
    ec58:	f001 030f 	and.w	r3, r1, #15
    ec5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ec60:	431a      	orrs	r2, r3
    ec62:	7002      	strb	r2, [r0, #0]
    ec64:	2907      	cmp	r1, #7
    ec66:	d20c      	bcs.n	ec82 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    ec68:	e8df f001 	tbb	[pc, r1]
    ec6c:	06040604 	.word	0x06040604
    ec70:	00040804 	.word	0x00040804
    ec74:	2106      	movs	r1, #6
    ec76:	e002      	b.n	ec7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ec78:	210c      	movs	r1, #12
    ec7a:	e000      	b.n	ec7e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ec7c:	2122      	movs	r1, #34	; 0x22
    ec7e:	7041      	strb	r1, [r0, #1]
    ec80:	bd10      	pop	{r4, pc}
    ec82:	216f      	movs	r1, #111	; 0x6f
    ec84:	202a      	movs	r0, #42	; 0x2a
    ec86:	f7f5 ff6f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec8a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    ec8a:	680a      	ldr	r2, [r1, #0]
    ec8c:	f840 2f09 	str.w	r2, [r0, #9]!
    ec90:	8889      	ldrh	r1, [r1, #4]
    ec92:	8081      	strh	r1, [r0, #4]
    ec94:	4770      	bx	lr

0000ec96 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ec96:	7802      	ldrb	r2, [r0, #0]
    ec98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ec9c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    eca0:	7002      	strb	r2, [r0, #0]
    eca2:	4770      	bx	lr

0000eca4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    eca4:	680a      	ldr	r2, [r1, #0]
    eca6:	f840 2f03 	str.w	r2, [r0, #3]!
    ecaa:	8889      	ldrh	r1, [r1, #4]
    ecac:	8081      	strh	r1, [r0, #4]
    ecae:	4770      	bx	lr

0000ecb0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    ecb0:	7802      	ldrb	r2, [r0, #0]
    ecb2:	2340      	movs	r3, #64	; 0x40
    ecb4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ecb8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ecbc:	430a      	orrs	r2, r1
    ecbe:	7002      	strb	r2, [r0, #0]
    ecc0:	4770      	bx	lr

0000ecc2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    ecc2:	b570      	push	{r4, r5, r6, lr}
    ecc4:	4614      	mov	r4, r2
    ecc6:	4605      	mov	r5, r0
    ecc8:	2a1f      	cmp	r2, #31
    ecca:	d903      	bls.n	ecd4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    eccc:	21d7      	movs	r1, #215	; 0xd7
    ecce:	202a      	movs	r0, #42	; 0x2a
    ecd0:	f7f5 ff4a 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecd4:	f105 0009 	add.w	r0, r5, #9
    ecd8:	f7fe f996 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ecdc:	1da4      	adds	r4, r4, #6
    ecde:	706c      	strb	r4, [r5, #1]
    ece0:	bd70      	pop	{r4, r5, r6, pc}

0000ece2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    ece2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ece6:	4604      	mov	r4, r0
    ece8:	2000      	movs	r0, #0
    ecea:	f7f6 f933 	bl	4f54 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ecee:	2600      	movs	r6, #0
    ecf0:	4605      	mov	r5, r0
    ecf2:	4637      	mov	r7, r6
    ecf4:	e00e      	b.n	ed14 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    ecf6:	8820      	ldrh	r0, [r4, #0]
    ecf8:	1c40      	adds	r0, r0, #1
    ecfa:	b280      	uxth	r0, r0
    ecfc:	8020      	strh	r0, [r4, #0]
    ecfe:	42a8      	cmp	r0, r5
    ed00:	d300      	bcc.n	ed04 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    ed02:	8027      	strh	r7, [r4, #0]
    ed04:	8820      	ldrh	r0, [r4, #0]
    ed06:	4669      	mov	r1, sp
    ed08:	f7ff fc4d 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ed0c:	2800      	cmp	r0, #0
    ed0e:	d007      	beq.n	ed20 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    ed10:	1c76      	adds	r6, r6, #1
    ed12:	b2f6      	uxtb	r6, r6
    ed14:	42ae      	cmp	r6, r5
    ed16:	d3ee      	bcc.n	ecf6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    ed18:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ed1c:	8020      	strh	r0, [r4, #0]
    ed1e:	2012      	movs	r0, #18
    ed20:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000ed24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    ed24:	6841      	ldr	r1, [r0, #4]
    ed26:	2200      	movs	r2, #0
    ed28:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d004      	beq.n	ed3a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    ed30:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    ed34:	6840      	ldr	r0, [r0, #4]
    ed36:	f000 bd08 	b.w	f74a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ed3a:	4770      	bx	lr

0000ed3c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ed3c:	b510      	push	{r4, lr}
    ed3e:	7901      	ldrb	r1, [r0, #4]
    ed40:	b119      	cbz	r1, ed4a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ed42:	2901      	cmp	r1, #1
    ed44:	d006      	beq.n	ed54 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ed46:	2000      	movs	r0, #0
    ed48:	bd10      	pop	{r4, pc}
    ed4a:	8842      	ldrh	r2, [r0, #2]
    ed4c:	6883      	ldr	r3, [r0, #8]
    ed4e:	8800      	ldrh	r0, [r0, #0]
    ed50:	2102      	movs	r1, #2
    ed52:	e003      	b.n	ed5c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ed54:	8842      	ldrh	r2, [r0, #2]
    ed56:	6883      	ldr	r3, [r0, #8]
    ed58:	8800      	ldrh	r0, [r0, #0]
    ed5a:	2101      	movs	r1, #1
    ed5c:	f7f7 ffae 	bl	6cbc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    ed60:	b908      	cbnz	r0, ed66 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ed62:	f7f8 f801 	bl	6d68 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ed66:	2001      	movs	r0, #1
    ed68:	bd10      	pop	{r4, pc}
    ed6a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ed6e:	460e      	mov	r6, r1
    ed70:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ed74:	4617      	mov	r7, r2
    ed76:	39ff      	subs	r1, #255	; 0xff
    ed78:	d014      	beq.n	eda4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ed7a:	8030      	strh	r0, [r6, #0]
    ed7c:	2100      	movs	r1, #0
    ed7e:	7171      	strb	r1, [r6, #5]
    ed80:	f7f6 fb1a 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ed84:	4604      	mov	r4, r0
    ed86:	f7fe ff94 	bl	dcb2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ed8a:	0005      	movs	r5, r0
    ed8c:	d00a      	beq.n	eda4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ed8e:	4620      	mov	r0, r4
    ed90:	4629      	mov	r1, r5
    ed92:	aa01      	add	r2, sp, #4
    ed94:	f7fe ffb0 	bl	dcf8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ed98:	8070      	strh	r0, [r6, #2]
    ed9a:	b130      	cbz	r0, edaa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    ed9c:	28fb      	cmp	r0, #251	; 0xfb
    ed9e:	d906      	bls.n	edae <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    eda0:	21ae      	movs	r1, #174	; 0xae
    eda2:	e026      	b.n	edf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    eda4:	2000      	movs	r0, #0
    eda6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    edaa:	21ad      	movs	r1, #173	; 0xad
    edac:	e021      	b.n	edf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    edae:	9801      	ldr	r0, [sp, #4]
    edb0:	f7ff fea4 	bl	eafc <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    edb4:	2801      	cmp	r0, #1
    edb6:	d003      	beq.n	edc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    edb8:	2802      	cmp	r0, #2
    edba:	d001      	beq.n	edc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    edbc:	21bd      	movs	r1, #189	; 0xbd
    edbe:	e018      	b.n	edf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    edc0:	7130      	strb	r0, [r6, #4]
    edc2:	4629      	mov	r1, r5
    edc4:	8873      	ldrh	r3, [r6, #2]
    edc6:	2503      	movs	r5, #3
    edc8:	4620      	mov	r0, r4
    edca:	463a      	mov	r2, r7
    edcc:	9500      	str	r5, [sp, #0]
    edce:	f7fe fe70 	bl	dab2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    edd2:	4620      	mov	r0, r4
    edd4:	60b7      	str	r7, [r6, #8]
    edd6:	f7fe ff30 	bl	dc3a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    edda:	b138      	cbz	r0, edec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    eddc:	2100      	movs	r1, #0
    edde:	4620      	mov	r0, r4
    ede0:	460a      	mov	r2, r1
    ede2:	f7ff f867 	bl	deb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ede6:	b118      	cbz	r0, edf0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    ede8:	2001      	movs	r0, #1
    edea:	e7dc      	b.n	eda6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    edec:	21cd      	movs	r1, #205	; 0xcd
    edee:	e000      	b.n	edf2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    edf0:	21d2      	movs	r1, #210	; 0xd2
    edf2:	202b      	movs	r0, #43	; 0x2b
    edf4:	f7f5 feb8 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000edf8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    edf8:	f7f8 b9b4 	b.w	7164 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee00:	460c      	mov	r4, r1
    ee02:	b180      	cbz	r0, ee26 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    ee04:	2700      	movs	r7, #0
    ee06:	4606      	mov	r6, r0
    ee08:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    ee0c:	2a10      	cmp	r2, #16
    ee0e:	d060      	beq.n	eed2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    ee10:	dc0c      	bgt.n	ee2c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    ee12:	f1a2 0205 	sub.w	r2, r2, #5
    ee16:	2a08      	cmp	r2, #8
    ee18:	d210      	bcs.n	ee3c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    ee1a:	e8df f002 	tbb	[pc, r2]
    ee1e:	124e      	.short	0x124e
    ee20:	20330f0f 	.word	0x20330f0f
    ee24:	540f      	.short	0x540f
    ee26:	f44f 7112 	mov.w	r1, #584	; 0x248
    ee2a:	e034      	b.n	ee96 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ee2c:	2a11      	cmp	r2, #17
    ee2e:	d072      	beq.n	ef16 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    ee30:	2a18      	cmp	r2, #24
    ee32:	d068      	beq.n	ef06 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    ee34:	2a1a      	cmp	r2, #26
    ee36:	d057      	beq.n	eee8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    ee38:	2a1b      	cmp	r2, #27
    ee3a:	d060      	beq.n	eefe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    ee3c:	f240 2175 	movw	r1, #629	; 0x275
    ee40:	e029      	b.n	ee96 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ee42:	7067      	strb	r7, [r4, #1]
    ee44:	2007      	movs	r0, #7
    ee46:	7020      	strb	r0, [r4, #0]
    ee48:	8537      	strh	r7, [r6, #40]	; 0x28
    ee4a:	f855 0f80 	ldr.w	r0, [r5, #128]!
    ee4e:	6060      	str	r0, [r4, #4]
    ee50:	6868      	ldr	r0, [r5, #4]
    ee52:	60a0      	str	r0, [r4, #8]
    ee54:	8928      	ldrh	r0, [r5, #8]
    ee56:	81a0      	strh	r0, [r4, #12]
    ee58:	7127      	strb	r7, [r4, #4]
    ee5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee5e:	8830      	ldrh	r0, [r6, #0]
    ee60:	f7f6 faaa 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ee64:	4680      	mov	r8, r0
    ee66:	f7fe ffbc 	bl	dde2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ee6a:	b110      	cbz	r0, ee72 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    ee6c:	f240 11b9 	movw	r1, #441	; 0x1b9
    ee70:	e011      	b.n	ee96 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ee72:	7067      	strb	r7, [r4, #1]
    ee74:	200c      	movs	r0, #12
    ee76:	7020      	strb	r0, [r4, #0]
    ee78:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    ee7c:	7120      	strb	r0, [r4, #4]
    ee7e:	8830      	ldrh	r0, [r6, #0]
    ee80:	80e0      	strh	r0, [r4, #6]
    ee82:	e015      	b.n	eeb0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    ee84:	8830      	ldrh	r0, [r6, #0]
    ee86:	f7f6 fa97 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ee8a:	4680      	mov	r8, r0
    ee8c:	f7fe ffa9 	bl	dde2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ee90:	b120      	cbz	r0, ee9c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    ee92:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    ee96:	2010      	movs	r0, #16
    ee98:	f7f5 fe66 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee9c:	7067      	strb	r7, [r4, #1]
    ee9e:	200b      	movs	r0, #11
    eea0:	7020      	strb	r0, [r4, #0]
    eea2:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    eea6:	7120      	strb	r0, [r4, #4]
    eea8:	8830      	ldrh	r0, [r6, #0]
    eeaa:	80e0      	strh	r0, [r4, #6]
    eeac:	7928      	ldrb	r0, [r5, #4]
    eeae:	7220      	strb	r0, [r4, #8]
    eeb0:	4640      	mov	r0, r8
    eeb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eeb6:	f7fe bfaf 	b.w	de18 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    eeba:	7067      	strb	r7, [r4, #1]
    eebc:	2006      	movs	r0, #6
    eebe:	7020      	strb	r0, [r4, #0]
    eec0:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    eec4:	e00a      	b.n	eedc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    eec6:	7067      	strb	r7, [r4, #1]
    eec8:	200e      	movs	r0, #14
    eeca:	7020      	strb	r0, [r4, #0]
    eecc:	8830      	ldrh	r0, [r6, #0]
    eece:	8088      	strh	r0, [r1, #4]
    eed0:	e7c3      	b.n	ee5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    eed2:	7067      	strb	r7, [r4, #1]
    eed4:	2012      	movs	r0, #18
    eed6:	7020      	strb	r0, [r4, #0]
    eed8:	f855 0f22 	ldr.w	r0, [r5, #34]!
    eedc:	6060      	str	r0, [r4, #4]
    eede:	6868      	ldr	r0, [r5, #4]
    eee0:	60a0      	str	r0, [r4, #8]
    eee2:	68a8      	ldr	r0, [r5, #8]
    eee4:	60e0      	str	r0, [r4, #12]
    eee6:	e7b8      	b.n	ee5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    eee8:	7067      	strb	r7, [r4, #1]
    eeea:	2018      	movs	r0, #24
    eeec:	7020      	strb	r0, [r4, #0]
    eeee:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    eef0:	6060      	str	r0, [r4, #4]
    eef2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    eef4:	60a0      	str	r0, [r4, #8]
    eef6:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    eefa:	81a0      	strh	r0, [r4, #12]
    eefc:	e7ad      	b.n	ee5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    eefe:	2019      	movs	r0, #25
    ef00:	7020      	strb	r0, [r4, #0]
    ef02:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    ef04:	e004      	b.n	ef10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    ef06:	7067      	strb	r7, [r4, #1]
    ef08:	2016      	movs	r0, #22
    ef0a:	7020      	strb	r0, [r4, #0]
    ef0c:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ef10:	6048      	str	r0, [r1, #4]
    ef12:	e7a2      	b.n	ee5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    ef14:	e7ff      	b.n	ef16 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    ef16:	7067      	strb	r7, [r4, #1]
    ef18:	2013      	movs	r0, #19
    ef1a:	7020      	strb	r0, [r4, #0]
    ef1c:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    ef20:	6060      	str	r0, [r4, #4]
    ef22:	88a8      	ldrh	r0, [r5, #4]
    ef24:	8120      	strh	r0, [r4, #8]
    ef26:	e798      	b.n	ee5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000ef28 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    ef28:	b4f0      	push	{r4, r5, r6, r7}
    ef2a:	8150      	strh	r0, [r2, #10]
    ef2c:	890d      	ldrh	r5, [r1, #8]
    ef2e:	4614      	mov	r4, r2
    ef30:	8195      	strh	r5, [r2, #12]
    ef32:	898a      	ldrh	r2, [r1, #12]
    ef34:	81e2      	strh	r2, [r4, #14]
    ef36:	8948      	ldrh	r0, [r1, #10]
    ef38:	8220      	strh	r0, [r4, #16]
    ef3a:	89ce      	ldrh	r6, [r1, #14]
    ef3c:	8266      	strh	r6, [r4, #18]
    ef3e:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    ef40:	42b7      	cmp	r7, r6
    ef42:	d108      	bne.n	ef56 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ef44:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    ef46:	4286      	cmp	r6, r0
    ef48:	d105      	bne.n	ef56 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ef4a:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    ef4c:	4296      	cmp	r6, r2
    ef4e:	d102      	bne.n	ef56 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ef50:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    ef52:	42aa      	cmp	r2, r5
    ef54:	d001      	beq.n	ef5a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    ef56:	2201      	movs	r2, #1
    ef58:	e000      	b.n	ef5c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    ef5a:	2200      	movs	r2, #0
    ef5c:	7522      	strb	r2, [r4, #20]
    ef5e:	8548      	strh	r0, [r1, #42]	; 0x2a
    ef60:	8a60      	ldrh	r0, [r4, #18]
    ef62:	85c8      	strh	r0, [r1, #46]	; 0x2e
    ef64:	89a0      	ldrh	r0, [r4, #12]
    ef66:	8588      	strh	r0, [r1, #44]	; 0x2c
    ef68:	89e0      	ldrh	r0, [r4, #14]
    ef6a:	8608      	strh	r0, [r1, #48]	; 0x30
    ef6c:	4620      	mov	r0, r4
    ef6e:	bcf0      	pop	{r4, r5, r6, r7}
    ef70:	2210      	movs	r2, #16
    ef72:	4619      	mov	r1, r3
    ef74:	f7f7 befe 	b.w	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000ef78 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    ef78:	b510      	push	{r4, lr}
    ef7a:	888c      	ldrh	r4, [r1, #4]
    ef7c:	890a      	ldrh	r2, [r1, #8]
    ef7e:	884b      	ldrh	r3, [r1, #2]
    ef80:	88c9      	ldrh	r1, [r1, #6]
    ef82:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    ef86:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    ef8a:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    ef8e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    ef92:	bd10      	pop	{r4, pc}

0000ef94 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    ef94:	b570      	push	{r4, r5, r6, lr}
    ef96:	4615      	mov	r5, r2
    ef98:	460c      	mov	r4, r1
    ef9a:	f000 f8ce 	bl	f13a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    ef9e:	3096      	adds	r0, #150	; 0x96
    efa0:	4428      	add	r0, r5
    efa2:	42a0      	cmp	r0, r4
    efa4:	d801      	bhi.n	efaa <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    efa6:	1a20      	subs	r0, r4, r0
    efa8:	bd70      	pop	{r4, r5, r6, pc}
    efaa:	2000      	movs	r0, #0
    efac:	bd70      	pop	{r4, r5, r6, pc}

0000efae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    efae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efb2:	4604      	mov	r4, r0
    efb4:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    efb6:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    efb8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    efbc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    efc0:	4285      	cmp	r5, r0
    efc2:	d300      	bcc.n	efc6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    efc4:	4605      	mov	r5, r0
    efc6:	4620      	mov	r0, r4
    efc8:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    efcc:	f000 f8a5 	bl	f11a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    efd0:	4601      	mov	r1, r0
    efd2:	8765      	strh	r5, [r4, #58]	; 0x3a
    efd4:	87e1      	strh	r1, [r4, #62]	; 0x3e
    efd6:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    efda:	f104 0030 	add.w	r0, r4, #48	; 0x30
    efde:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    efe2:	4680      	mov	r8, r0
    efe4:	42aa      	cmp	r2, r5
    efe6:	d200      	bcs.n	efea <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    efe8:	462a      	mov	r2, r5
    efea:	428b      	cmp	r3, r1
    efec:	d200      	bcs.n	eff0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    efee:	460b      	mov	r3, r1
    eff0:	8202      	strh	r2, [r0, #16]
    eff2:	f8a8 3012 	strh.w	r3, [r8, #18]
    eff6:	42bd      	cmp	r5, r7
    eff8:	d101      	bne.n	effe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    effa:	42b1      	cmp	r1, r6
    effc:	d001      	beq.n	f002 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    effe:	2001      	movs	r0, #1
    f000:	e000      	b.n	f004 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f002:	2000      	movs	r0, #0
    f004:	4681      	mov	r9, r0
    f006:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f00a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f00e:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f010:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f012:	4285      	cmp	r5, r0
    f014:	d300      	bcc.n	f018 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f016:	4605      	mov	r5, r0
    f018:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f01c:	4620      	mov	r0, r4
    f01e:	f000 f884 	bl	f12a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f022:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f026:	2902      	cmp	r1, #2
    f028:	d108      	bne.n	f03c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f02a:	42af      	cmp	r7, r5
    f02c:	d200      	bcs.n	f030 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f02e:	463d      	mov	r5, r7
    f030:	4286      	cmp	r6, r0
    f032:	d200      	bcs.n	f036 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f034:	4630      	mov	r0, r6
    f036:	2100      	movs	r1, #0
    f038:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f03c:	f8a8 5008 	strh.w	r5, [r8, #8]
    f040:	f8a8 000c 	strh.w	r0, [r8, #12]
    f044:	42bd      	cmp	r5, r7
    f046:	d101      	bne.n	f04c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f048:	42b0      	cmp	r0, r6
    f04a:	d001      	beq.n	f050 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f04c:	2001      	movs	r0, #1
    f04e:	e000      	b.n	f052 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f050:	2000      	movs	r0, #0
    f052:	ea40 0009 	orr.w	r0, r0, r9
    f056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f05a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f05a:	6840      	ldr	r0, [r0, #4]
    f05c:	4770      	bx	lr

0000f05e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f062:	4616      	mov	r6, r2
    f064:	460f      	mov	r7, r1
    f066:	4604      	mov	r4, r0
    f068:	f000 f867 	bl	f13a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f06c:	4605      	mov	r5, r0
    f06e:	463a      	mov	r2, r7
    f070:	6921      	ldr	r1, [r4, #16]
    f072:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f074:	f000 f84c 	bl	f110 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f078:	19a9      	adds	r1, r5, r6
    f07a:	4281      	cmp	r1, r0
    f07c:	d300      	bcc.n	f080 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f07e:	4608      	mov	r0, r1
    f080:	6360      	str	r0, [r4, #52]	; 0x34
    f082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f086 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f086:	221b      	movs	r2, #27
    f088:	8402      	strh	r2, [r0, #32]
    f08a:	8382      	strh	r2, [r0, #28]
    f08c:	82c2      	strh	r2, [r0, #22]
    f08e:	8282      	strh	r2, [r0, #20]
    f090:	8142      	strh	r2, [r0, #10]
    f092:	8202      	strh	r2, [r0, #16]
    f094:	8102      	strh	r2, [r0, #8]
    f096:	8542      	strh	r2, [r0, #42]	; 0x2a
    f098:	8582      	strh	r2, [r0, #44]	; 0x2c
    f09a:	8482      	strh	r2, [r0, #36]	; 0x24
    f09c:	2900      	cmp	r1, #0
    f09e:	d10a      	bne.n	f0b6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f0a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f0a4:	8441      	strh	r1, [r0, #34]	; 0x22
    f0a6:	83c1      	strh	r1, [r0, #30]
    f0a8:	8341      	strh	r1, [r0, #26]
    f0aa:	8301      	strh	r1, [r0, #24]
    f0ac:	81c1      	strh	r1, [r0, #14]
    f0ae:	8241      	strh	r1, [r0, #18]
    f0b0:	8181      	strh	r1, [r0, #12]
    f0b2:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f0b4:	8601      	strh	r1, [r0, #48]	; 0x30
    f0b6:	4770      	bx	lr

0000f0b8 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f0b8:	6800      	ldr	r0, [r0, #0]
    f0ba:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f0be:	4290      	cmp	r0, r2
    f0c0:	d903      	bls.n	f0ca <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f0c2:	1a40      	subs	r0, r0, r1
    f0c4:	389c      	subs	r0, #156	; 0x9c
    f0c6:	0840      	lsrs	r0, r0, #1
    f0c8:	4770      	bx	lr
    f0ca:	2000      	movs	r0, #0
    f0cc:	4770      	bx	lr

0000f0ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f0ce:	b510      	push	{r4, lr}
    f0d0:	9c02      	ldr	r4, [sp, #8]
    f0d2:	8281      	strh	r1, [r0, #20]
    f0d4:	82c2      	strh	r2, [r0, #22]
    f0d6:	8303      	strh	r3, [r0, #24]
    f0d8:	8344      	strh	r4, [r0, #26]
    f0da:	bd10      	pop	{r4, pc}

0000f0dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f0dc:	b430      	push	{r4, r5}
    f0de:	8150      	strh	r0, [r2, #10]
    f0e0:	8a88      	ldrh	r0, [r1, #20]
    f0e2:	8190      	strh	r0, [r2, #12]
    f0e4:	8ac8      	ldrh	r0, [r1, #22]
    f0e6:	81d0      	strh	r0, [r2, #14]
    f0e8:	8b08      	ldrh	r0, [r1, #24]
    f0ea:	8210      	strh	r0, [r2, #16]
    f0ec:	8b48      	ldrh	r0, [r1, #26]
    f0ee:	4614      	mov	r4, r2
    f0f0:	8250      	strh	r0, [r2, #18]
    f0f2:	4620      	mov	r0, r4
    f0f4:	bc30      	pop	{r4, r5}
    f0f6:	221a      	movs	r2, #26
    f0f8:	4619      	mov	r1, r3
    f0fa:	f7f7 be3b 	b.w	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f0fe:	2902      	cmp	r1, #2
    f100:	d003      	beq.n	f10a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f102:	00c0      	lsls	r0, r0, #3
    f104:	3070      	adds	r0, #112	; 0x70
    f106:	b280      	uxth	r0, r0
    f108:	4770      	bx	lr
    f10a:	0080      	lsls	r0, r0, #2
    f10c:	303c      	adds	r0, #60	; 0x3c
    f10e:	e7fa      	b.n	f106 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f110:	4288      	cmp	r0, r1
    f112:	d300      	bcc.n	f116 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f114:	4608      	mov	r0, r1
    f116:	1a80      	subs	r0, r0, r2
    f118:	4770      	bx	lr
    f11a:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f11e:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f122:	4281      	cmp	r1, r0
    f124:	d200      	bcs.n	f128 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f126:	4608      	mov	r0, r1
    f128:	4770      	bx	lr
    f12a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f12e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f132:	4281      	cmp	r1, r0
    f134:	d200      	bcs.n	f138 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f136:	4608      	mov	r0, r1
    f138:	4770      	bx	lr
    f13a:	2196      	movs	r1, #150	; 0x96
    f13c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f140:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f144:	f000 b800 	b.w	f148 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f14c:	460d      	mov	r5, r1
    f14e:	4606      	mov	r6, r0
    f150:	4698      	mov	r8, r3
    f152:	4617      	mov	r7, r2
    f154:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f156:	4611      	mov	r1, r2
    f158:	f7ff ffd1 	bl	f0fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f15c:	4604      	mov	r4, r0
    f15e:	4639      	mov	r1, r7
    f160:	4630      	mov	r0, r6
    f162:	f7ff ffe2 	bl	f12a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f166:	42a0      	cmp	r0, r4
    f168:	d200      	bcs.n	f16c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f16a:	4604      	mov	r4, r0
    f16c:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f170:	4641      	mov	r1, r8
    f172:	f7ff ffc4 	bl	f0fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f176:	4607      	mov	r7, r0
    f178:	4641      	mov	r1, r8
    f17a:	4630      	mov	r0, r6
    f17c:	f7ff ffcd 	bl	f11a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f180:	42b8      	cmp	r0, r7
    f182:	d300      	bcc.n	f186 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f184:	4638      	mov	r0, r7
    f186:	4420      	add	r0, r4
    f188:	4428      	add	r0, r5
    f18a:	1d80      	adds	r0, r0, #6
    f18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f190:	b510      	push	{r4, lr}
    f192:	4604      	mov	r4, r0
    f194:	2108      	movs	r1, #8
    f196:	4620      	mov	r0, r4
    f198:	f7f5 fd92 	bl	4cc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f19c:	6820      	ldr	r0, [r4, #0]
    f19e:	2800      	cmp	r0, #0
    f1a0:	d102      	bne.n	f1a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f1a2:	6860      	ldr	r0, [r4, #4]
    f1a4:	2800      	cmp	r0, #0
    f1a6:	d0f5      	beq.n	f194 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f1a8:	bd10      	pop	{r4, pc}
    f1aa:	2801      	cmp	r0, #1
    f1ac:	d102      	bne.n	f1b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f1ae:	7948      	ldrb	r0, [r1, #5]
    f1b0:	0980      	lsrs	r0, r0, #6
    f1b2:	d001      	beq.n	f1b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f1b4:	2000      	movs	r0, #0
    f1b6:	4770      	bx	lr
    f1b8:	2001      	movs	r0, #1
    f1ba:	4770      	bx	lr
    f1bc:	2801      	cmp	r0, #1
    f1be:	d106      	bne.n	f1ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f1c0:	7948      	ldrb	r0, [r1, #5]
    f1c2:	2101      	movs	r1, #1
    f1c4:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f1c8:	d101      	bne.n	f1ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f1ca:	2001      	movs	r0, #1
    f1cc:	4770      	bx	lr
    f1ce:	2000      	movs	r0, #0
    f1d0:	4770      	bx	lr
    f1d2:	2802      	cmp	r0, #2
    f1d4:	d003      	beq.n	f1de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f1d6:	2803      	cmp	r0, #3
    f1d8:	d001      	beq.n	f1de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f1da:	2000      	movs	r0, #0
    f1dc:	4770      	bx	lr
    f1de:	2001      	movs	r0, #1
    f1e0:	4770      	bx	lr

0000f1e2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f1e2:	b510      	push	{r4, lr}
    f1e4:	4604      	mov	r4, r0
    f1e6:	7c00      	ldrb	r0, [r0, #16]
    f1e8:	f7ff fff3 	bl	f1d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    f1ec:	b148      	cbz	r0, f202 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f1ee:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f1f2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f1f6:	f7ff f993 	bl	e520 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f1fa:	2808      	cmp	r0, #8
    f1fc:	d001      	beq.n	f202 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f1fe:	2001      	movs	r0, #1
    f200:	bd10      	pop	{r4, pc}
    f202:	7c20      	ldrb	r0, [r4, #16]
    f204:	b118      	cbz	r0, f20e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f206:	2802      	cmp	r0, #2
    f208:	d001      	beq.n	f20e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f20a:	7de0      	ldrb	r0, [r4, #23]
    f20c:	bd10      	pop	{r4, pc}
    f20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f212:	2000      	movs	r0, #0
    f214:	f7f6 bb8a 	b.w	592c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f218 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f218:	b508      	push	{r3, lr}
    f21a:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    f21e:	f88d 1000 	strb.w	r1, [sp]
    f222:	9900      	ldr	r1, [sp, #0]
    f224:	9100      	str	r1, [sp, #0]
    f226:	f89d 1000 	ldrb.w	r1, [sp]
    f22a:	b109      	cbz	r1, f230 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f22c:	2001      	movs	r0, #1
    f22e:	bd08      	pop	{r3, pc}
    f230:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f234:	f88d 0000 	strb.w	r0, [sp]
    f238:	9800      	ldr	r0, [sp, #0]
    f23a:	9000      	str	r0, [sp, #0]
    f23c:	f89d 0000 	ldrb.w	r0, [sp]
    f240:	2000      	movs	r0, #0
    f242:	bd08      	pop	{r3, pc}

0000f244 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f244:	20ff      	movs	r0, #255	; 0xff
    f246:	7008      	strb	r0, [r1, #0]
    f248:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f24a:	f7ff b869 	b.w	e320 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f24e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f24e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f250:	460d      	mov	r5, r1
    f252:	4604      	mov	r4, r0
    f254:	f44f 7288 	mov.w	r2, #272	; 0x110
    f258:	2100      	movs	r1, #0
    f25a:	f7fd ff4f 	bl	d0fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f25e:	20ff      	movs	r0, #255	; 0xff
    f260:	7020      	strb	r0, [r4, #0]
    f262:	207f      	movs	r0, #127	; 0x7f
    f264:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f268:	2013      	movs	r0, #19
    f26a:	8060      	strh	r0, [r4, #2]
    f26c:	f7f6 f966 	bl	553c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f270:	4601      	mov	r1, r0
    f272:	62e0      	str	r0, [r4, #44]	; 0x2c
    f274:	2200      	movs	r2, #0
    f276:	4668      	mov	r0, sp
    f278:	f7fe ffbc 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f27c:	2200      	movs	r2, #0
    f27e:	2101      	movs	r1, #1
    f280:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f282:	f7ff f82d 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f286:	2204      	movs	r2, #4
    f288:	4668      	mov	r0, sp
    f28a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f28c:	f7fe ffb2 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f290:	2200      	movs	r2, #0
    f292:	4611      	mov	r1, r2
    f294:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f296:	f7ff f823 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f29a:	73a5      	strb	r5, [r4, #14]
    f29c:	f104 0020 	add.w	r0, r4, #32
    f2a0:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f2a4:	f000 b994 	b.w	f5d0 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f2a8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f2a8:	7880      	ldrb	r0, [r0, #2]
    f2aa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f2ae:	b108      	cbz	r0, f2b4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f2b0:	2000      	movs	r0, #0
    f2b2:	4770      	bx	lr
    f2b4:	201f      	movs	r0, #31
    f2b6:	4770      	bx	lr

0000f2b8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f2b8:	f7f8 bc92 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000f2bc <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    f2bc:	b570      	push	{r4, r5, r6, lr}
    f2be:	2300      	movs	r3, #0
    f2c0:	2a03      	cmp	r2, #3
    f2c2:	d015      	beq.n	f2f0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    f2c4:	2a0e      	cmp	r2, #14
    f2c6:	d01a      	beq.n	f2fe <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    f2c8:	2a12      	cmp	r2, #18
    f2ca:	d030      	beq.n	f32e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    f2cc:	2a19      	cmp	r2, #25
    f2ce:	d004      	beq.n	f2da <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    f2d0:	f240 21d2 	movw	r1, #722	; 0x2d2
    f2d4:	202d      	movs	r0, #45	; 0x2d
    f2d6:	f7f5 fc47 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2da:	704b      	strb	r3, [r1, #1]
    f2dc:	2217      	movs	r2, #23
    f2de:	700a      	strb	r2, [r1, #0]
    f2e0:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    f2e4:	604a      	str	r2, [r1, #4]
    f2e6:	6842      	ldr	r2, [r0, #4]
    f2e8:	608a      	str	r2, [r1, #8]
    f2ea:	7a00      	ldrb	r0, [r0, #8]
    f2ec:	7308      	strb	r0, [r1, #12]
    f2ee:	bd70      	pop	{r4, r5, r6, pc}
    f2f0:	704b      	strb	r3, [r1, #1]
    f2f2:	2205      	movs	r2, #5
    f2f4:	700a      	strb	r2, [r1, #0]
    f2f6:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    f2fa:	6048      	str	r0, [r1, #4]
    f2fc:	bd70      	pop	{r4, r5, r6, pc}
    f2fe:	4605      	mov	r5, r0
    f300:	704b      	strb	r3, [r1, #1]
    f302:	2011      	movs	r0, #17
    f304:	460c      	mov	r4, r1
    f306:	7008      	strb	r0, [r1, #0]
    f308:	2220      	movs	r2, #32
    f30a:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    f30e:	1d20      	adds	r0, r4, #4
    f310:	f7fd fe7a 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f314:	2001      	movs	r0, #1
    f316:	7220      	strb	r0, [r4, #8]
    f318:	7920      	ldrb	r0, [r4, #4]
    f31a:	2800      	cmp	r0, #0
    f31c:	d1ee      	bne.n	f2fc <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    f31e:	69e8      	ldr	r0, [r5, #28]
    f320:	8800      	ldrh	r0, [r0, #0]
    f322:	f7f6 f849 	bl	53b8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f32a:	f7fe bd75 	b.w	de18 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f32e:	704b      	strb	r3, [r1, #1]
    f330:	2214      	movs	r2, #20
    f332:	700a      	strb	r2, [r1, #0]
    f334:	f850 2f98 	ldr.w	r2, [r0, #152]!
    f338:	604a      	str	r2, [r1, #4]
    f33a:	8880      	ldrh	r0, [r0, #4]
    f33c:	8108      	strh	r0, [r1, #8]
    f33e:	bd70      	pop	{r4, r5, r6, pc}

0000f340 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f340:	6880      	ldr	r0, [r0, #8]
    f342:	4770      	bx	lr

0000f344 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f344:	2001      	movs	r0, #1
    f346:	4770      	bx	lr

0000f348 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f348:	b510      	push	{r4, lr}
    f34a:	4604      	mov	r4, r0
    f34c:	3020      	adds	r0, #32
    f34e:	f000 f8ff 	bl	f550 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f352:	8861      	ldrh	r1, [r4, #2]
    f354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f358:	2228      	movs	r2, #40	; 0x28
    f35a:	f7f8 be29 	b.w	7fb0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f35e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f35e:	2200      	movs	r2, #0
    f360:	8502      	strh	r2, [r0, #40]	; 0x28
    f362:	8843      	ldrh	r3, [r0, #2]
    f364:	2b1d      	cmp	r3, #29
    f366:	d001      	beq.n	f36c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f368:	7341      	strb	r1, [r0, #13]
    f36a:	4770      	bx	lr
    f36c:	7342      	strb	r2, [r0, #13]
    f36e:	4770      	bx	lr

0000f370 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f370:	b510      	push	{r4, lr}
    f372:	2400      	movs	r4, #0
    f374:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f376:	f7fe ffa1 	bl	e2bc <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f37a:	b100      	cbz	r0, f37e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f37c:	2001      	movs	r0, #1
    f37e:	4384      	bics	r4, r0
    f380:	f084 0001 	eor.w	r0, r4, #1
    f384:	bd10      	pop	{r4, pc}

0000f386 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f386:	2000      	movs	r0, #0
    f388:	4770      	bx	lr

0000f38a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f38a:	7880      	ldrb	r0, [r0, #2]
    f38c:	f000 0001 	and.w	r0, r0, #1
    f390:	4770      	bx	lr

0000f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f392:	7880      	ldrb	r0, [r0, #2]
    f394:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f398:	4770      	bx	lr

0000f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f39a:	2001      	movs	r0, #1
    f39c:	4770      	bx	lr

0000f39e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f39e:	7880      	ldrb	r0, [r0, #2]
    f3a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f3a4:	4770      	bx	lr

0000f3a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f3a6:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f3aa:	4770      	bx	lr

0000f3ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f3ac:	7800      	ldrb	r0, [r0, #0]
    f3ae:	28ff      	cmp	r0, #255	; 0xff
    f3b0:	d001      	beq.n	f3b6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f3b2:	2001      	movs	r0, #1
    f3b4:	4770      	bx	lr
    f3b6:	2000      	movs	r0, #0
    f3b8:	4770      	bx	lr

0000f3ba <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f3ba:	680a      	ldr	r2, [r1, #0]
    f3bc:	f840 2f11 	str.w	r2, [r0, #17]!
    f3c0:	8889      	ldrh	r1, [r1, #4]
    f3c2:	8081      	strh	r1, [r0, #4]
    f3c4:	2101      	movs	r1, #1
    f3c6:	7181      	strb	r1, [r0, #6]
    f3c8:	4770      	bx	lr

0000f3ca <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f3ca:	7b00      	ldrb	r0, [r0, #12]
    f3cc:	4770      	bx	lr

0000f3ce <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f3ce:	2001      	movs	r0, #1
    f3d0:	4770      	bx	lr

0000f3d2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f3d2:	61c1      	str	r1, [r0, #28]
    f3d4:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    f3d8:	724a      	strb	r2, [r1, #9]
    f3da:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    f3de:	f8c1 200a 	str.w	r2, [r1, #10]
    f3e2:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    f3e6:	81c8      	strh	r0, [r1, #14]
    f3e8:	4770      	bx	lr

0000f3ea <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f3ea:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f3ee:	4770      	bx	lr

0000f3f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f3f0:	b510      	push	{r4, lr}
    f3f2:	4604      	mov	r4, r0
    f3f4:	7880      	ldrb	r0, [r0, #2]
    f3f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f3fa:	b158      	cbz	r0, f414 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    f3fc:	233c      	movs	r3, #60	; 0x3c
    f3fe:	22ff      	movs	r2, #255	; 0xff
    f400:	4620      	mov	r0, r4
    f402:	69e1      	ldr	r1, [r4, #28]
    f404:	f7f8 fc18 	bl	7c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    f408:	220e      	movs	r2, #14
    f40a:	4621      	mov	r1, r4
    f40c:	f104 0064 	add.w	r0, r4, #100	; 0x64
    f410:	f7f7 fcb0 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f414:	78a0      	ldrb	r0, [r4, #2]
    f416:	07c0      	lsls	r0, r0, #31
    f418:	f7f7 fd7e 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f41c:	2001      	movs	r0, #1
    f41e:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    f422:	bd10      	pop	{r4, pc}

0000f424 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f424:	7bc0      	ldrb	r0, [r0, #15]
    f426:	2800      	cmp	r0, #0
    f428:	d000      	beq.n	f42c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f42a:	2001      	movs	r0, #1
    f42c:	4770      	bx	lr
    f42e:	b510      	push	{r4, lr}
    f430:	f7ff f876 	bl	e520 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f434:	4604      	mov	r4, r0
    f436:	f7f7 f91f 	bl	6678 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f43a:	b138      	cbz	r0, f44c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f43c:	4620      	mov	r0, r4
    f43e:	f7f7 f853 	bl	64e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f442:	b118      	cbz	r0, f44c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f444:	2110      	movs	r1, #16
    f446:	f7ff fa5d 	bl	e904 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f44a:	b108      	cbz	r0, f450 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f44c:	2000      	movs	r0, #0
    f44e:	bd10      	pop	{r4, pc}
    f450:	2001      	movs	r0, #1
    f452:	bd10      	pop	{r4, pc}
    f454:	2101      	movs	r1, #1
    f456:	f7f8 b855 	b.w	7504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f45a:	2101      	movs	r1, #1
    f45c:	f7f8 b852 	b.w	7504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f464:	4604      	mov	r4, r0
    f466:	460f      	mov	r7, r1
    f468:	7e40      	ldrb	r0, [r0, #25]
    f46a:	f7f6 fffd 	bl	6468 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f46e:	4606      	mov	r6, r0
    f470:	7e20      	ldrb	r0, [r4, #24]
    f472:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f476:	b120      	cbz	r0, f482 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f478:	b11e      	cbz	r6, f482 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f47a:	7e60      	ldrb	r0, [r4, #25]
    f47c:	f7f6 ffe8 	bl	6450 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f480:	b1a0      	cbz	r0, f4ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    f482:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f486:	2800      	cmp	r0, #0
    f488:	d024      	beq.n	f4d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f48a:	7ea0      	ldrb	r0, [r4, #26]
    f48c:	2800      	cmp	r0, #0
    f48e:	d021      	beq.n	f4d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f490:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f494:	4629      	mov	r1, r5
    f496:	f7ff fe91 	bl	f1bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    f49a:	b1a8      	cbz	r0, f4c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    f49c:	f7f6 ffd4 	bl	6448 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f4a0:	463a      	mov	r2, r7
    f4a2:	4629      	mov	r1, r5
    f4a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f4a8:	f7fe bfd2 	b.w	e450 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f4ac:	2001      	movs	r0, #1
    f4ae:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f4b2:	463a      	mov	r2, r7
    f4b4:	4629      	mov	r1, r5
    f4b6:	4630      	mov	r0, r6
    f4b8:	f7fe ffca 	bl	e450 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f4bc:	7e61      	ldrb	r1, [r4, #25]
    f4be:	4628      	mov	r0, r5
    f4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f4c4:	f7f6 bfdc 	b.w	6480 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f4c8:	4639      	mov	r1, r7
    f4ca:	4628      	mov	r0, r5
    f4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f4d0:	f7fe bfad 	b.w	e42e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4d8:	b510      	push	{r4, lr}
    f4da:	4604      	mov	r4, r0
    f4dc:	4608      	mov	r0, r1
    f4de:	f7fc fc31 	bl	bd44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f4e2:	7921      	ldrb	r1, [r4, #4]
    f4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4e8:	2025      	movs	r0, #37	; 0x25
    f4ea:	f7fc bc01 	b.w	bcf0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f4ee:	b510      	push	{r4, lr}
    f4f0:	4604      	mov	r4, r0
    f4f2:	3026      	adds	r0, #38	; 0x26
    f4f4:	f7fc fbdc 	bl	bcb0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f4f8:	2800      	cmp	r0, #0
    f4fa:	d102      	bne.n	f502 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    f4fc:	207f      	movs	r0, #127	; 0x7f
    f4fe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f502:	bd10      	pop	{r4, pc}
    f504:	b570      	push	{r4, r5, r6, lr}
    f506:	4614      	mov	r4, r2
    f508:	461d      	mov	r5, r3
    f50a:	4606      	mov	r6, r0
    f50c:	f7f3 ff54 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f510:	1900      	adds	r0, r0, r4
    f512:	4169      	adcs	r1, r5
    f514:	e9c6 0100 	strd	r0, r1, [r6]
    f518:	bd70      	pop	{r4, r5, r6, pc}
    f51a:	7802      	ldrb	r2, [r0, #0]
    f51c:	2320      	movs	r3, #32
    f51e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    f522:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f526:	430a      	orrs	r2, r1
    f528:	7002      	strb	r2, [r0, #0]
    f52a:	4770      	bx	lr

0000f52c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f52c:	b570      	push	{r4, r5, r6, lr}
    f52e:	7001      	strb	r1, [r0, #0]
    f530:	7042      	strb	r2, [r0, #1]
    f532:	4614      	mov	r4, r2
    f534:	460d      	mov	r5, r1
    f536:	7880      	ldrb	r0, [r0, #2]
    f538:	f000 f87f 	bl	f63a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f53c:	fb10 f005 	smulbb	r0, r0, r5
    f540:	4360      	muls	r0, r4
    f542:	28ff      	cmp	r0, #255	; 0xff
    f544:	d303      	bcc.n	f54e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f546:	215c      	movs	r1, #92	; 0x5c
    f548:	202e      	movs	r0, #46	; 0x2e
    f54a:	f7f5 fb0d 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54e:	bd70      	pop	{r4, r5, r6, pc}

0000f550 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f550:	b510      	push	{r4, lr}
    f552:	4604      	mov	r4, r0
    f554:	7880      	ldrb	r0, [r0, #2]
    f556:	f000 f870 	bl	f63a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f55a:	7861      	ldrb	r1, [r4, #1]
    f55c:	7822      	ldrb	r2, [r4, #0]
    f55e:	fb11 f102 	smulbb	r1, r1, r2
    f562:	4348      	muls	r0, r1
    f564:	b2c0      	uxtb	r0, r0
    f566:	bd10      	pop	{r4, pc}

0000f568 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f568:	b510      	push	{r4, lr}
    f56a:	4604      	mov	r4, r0
    f56c:	f000 f84d 	bl	f60a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f570:	7961      	ldrb	r1, [r4, #5]
    f572:	1c49      	adds	r1, r1, #1
    f574:	b2c9      	uxtb	r1, r1
    f576:	7161      	strb	r1, [r4, #5]
    f578:	7862      	ldrb	r2, [r4, #1]
    f57a:	4291      	cmp	r1, r2
    f57c:	d10b      	bne.n	f596 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f57e:	2200      	movs	r2, #0
    f580:	7162      	strb	r2, [r4, #5]
    f582:	78e1      	ldrb	r1, [r4, #3]
    f584:	4301      	orrs	r1, r0
    f586:	70e1      	strb	r1, [r4, #3]
    f588:	78a3      	ldrb	r3, [r4, #2]
    f58a:	4299      	cmp	r1, r3
    f58c:	d103      	bne.n	f596 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f58e:	70e2      	strb	r2, [r4, #3]
    f590:	7921      	ldrb	r1, [r4, #4]
    f592:	1c49      	adds	r1, r1, #1
    f594:	7121      	strb	r1, [r4, #4]
    f596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f59a:	f000 b825 	b.w	f5e8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f59e <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f59e:	7081      	strb	r1, [r0, #2]
    f5a0:	4770      	bx	lr

0000f5a2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f5a2:	b570      	push	{r4, r5, r6, lr}
    f5a4:	4604      	mov	r4, r0
    f5a6:	7880      	ldrb	r0, [r0, #2]
    f5a8:	f000 f847 	bl	f63a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f5ac:	7861      	ldrb	r1, [r4, #1]
    f5ae:	fb11 f500 	smulbb	r5, r1, r0
    f5b2:	78e0      	ldrb	r0, [r4, #3]
    f5b4:	f000 f841 	bl	f63a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f5b8:	7861      	ldrb	r1, [r4, #1]
    f5ba:	7962      	ldrb	r2, [r4, #5]
    f5bc:	fb10 2001 	smlabb	r0, r0, r1, r2
    f5c0:	7821      	ldrb	r1, [r4, #0]
    f5c2:	7922      	ldrb	r2, [r4, #4]
    f5c4:	1a89      	subs	r1, r1, r2
    f5c6:	fb11 f105 	smulbb	r1, r1, r5
    f5ca:	1a08      	subs	r0, r1, r0
    f5cc:	b2c0      	uxtb	r0, r0
    f5ce:	bd70      	pop	{r4, r5, r6, pc}

0000f5d0 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f5d0:	2100      	movs	r1, #0
    f5d2:	6001      	str	r1, [r0, #0]
    f5d4:	8081      	strh	r1, [r0, #4]
    f5d6:	2101      	movs	r1, #1
    f5d8:	7041      	strb	r1, [r0, #1]
    f5da:	7001      	strb	r1, [r0, #0]
    f5dc:	4770      	bx	lr

0000f5de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f5de:	2100      	movs	r1, #0
    f5e0:	70c1      	strb	r1, [r0, #3]
    f5e2:	7141      	strb	r1, [r0, #5]
    f5e4:	7101      	strb	r1, [r0, #4]
    f5e6:	4770      	bx	lr
    f5e8:	b510      	push	{r4, lr}
    f5ea:	2801      	cmp	r0, #1
    f5ec:	d007      	beq.n	f5fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f5ee:	2802      	cmp	r0, #2
    f5f0:	d007      	beq.n	f602 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f5f2:	2804      	cmp	r0, #4
    f5f4:	d007      	beq.n	f606 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f5f6:	2139      	movs	r1, #57	; 0x39
    f5f8:	202e      	movs	r0, #46	; 0x2e
    f5fa:	f7f5 fab5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5fe:	2025      	movs	r0, #37	; 0x25
    f600:	bd10      	pop	{r4, pc}
    f602:	2026      	movs	r0, #38	; 0x26
    f604:	bd10      	pop	{r4, pc}
    f606:	2027      	movs	r0, #39	; 0x27
    f608:	bd10      	pop	{r4, pc}
    f60a:	4601      	mov	r1, r0
    f60c:	2000      	movs	r0, #0
    f60e:	788a      	ldrb	r2, [r1, #2]
    f610:	07d3      	lsls	r3, r2, #31
    f612:	d002      	beq.n	f61a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f614:	78cb      	ldrb	r3, [r1, #3]
    f616:	07db      	lsls	r3, r3, #31
    f618:	d006      	beq.n	f628 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f61a:	0793      	lsls	r3, r2, #30
    f61c:	d506      	bpl.n	f62c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f61e:	78cb      	ldrb	r3, [r1, #3]
    f620:	079b      	lsls	r3, r3, #30
    f622:	d403      	bmi.n	f62c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f624:	2002      	movs	r0, #2
    f626:	4770      	bx	lr
    f628:	2001      	movs	r0, #1
    f62a:	4770      	bx	lr
    f62c:	0752      	lsls	r2, r2, #29
    f62e:	d5fc      	bpl.n	f62a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f630:	78c9      	ldrb	r1, [r1, #3]
    f632:	0749      	lsls	r1, r1, #29
    f634:	d4f9      	bmi.n	f62a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f636:	2004      	movs	r0, #4
    f638:	4770      	bx	lr
    f63a:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f63e:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f642:	4411      	add	r1, r2
    f644:	f000 0001 	and.w	r0, r0, #1
    f648:	4408      	add	r0, r1
    f64a:	4770      	bx	lr

0000f64c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f64c:	f240 315a 	movw	r1, #858	; 0x35a
    f650:	4348      	muls	r0, r1
    f652:	4770      	bx	lr

0000f654 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f654:	f240 20ef 	movw	r0, #751	; 0x2ef
    f658:	4770      	bx	lr
    f65a:	020e      	.short	0x020e
    f65c:	0630041c 	.word	0x0630041c
    f660:	035a0c60 	.word	0x035a0c60
    f664:	05c506b4 	.word	0x05c506b4
    f668:	12250bf5 	.word	0x12250bf5
    f66c:	03b101a3 	.word	0x03b101a3
    f670:	02ef05bf 	.word	0x02ef05bf
    f674:	09a30649 	.word	0x09a30649

0000f678 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f678:	b510      	push	{r4, lr}
    f67a:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    f67e:	b109      	cbz	r1, f684 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f680:	2000      	movs	r0, #0
    f682:	bd10      	pop	{r4, pc}
    f684:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    f688:	b131      	cbz	r1, f698 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f68a:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    f68e:	428a      	cmp	r2, r1
    f690:	d902      	bls.n	f698 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f692:	f7ff fead 	bl	f3f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f696:	e7f3      	b.n	f680 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f698:	2001      	movs	r0, #1
    f69a:	bd10      	pop	{r4, pc}

0000f69c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f69c:	b510      	push	{r4, lr}
    f69e:	b131      	cbz	r1, f6ae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f6a0:	2901      	cmp	r1, #1
    f6a2:	d008      	beq.n	f6b6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f6a4:	f240 7195 	movw	r1, #1941	; 0x795
    f6a8:	2030      	movs	r0, #48	; 0x30
    f6aa:	f7f5 fa5d 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6b2:	f000 b9ec 	b.w	fa8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
    f6b6:	2100      	movs	r1, #0
    f6b8:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    f6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6c0:	f000 b948 	b.w	f954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

0000f6c4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f6c4:	b510      	push	{r4, lr}
    f6c6:	4604      	mov	r4, r0
    f6c8:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f6cc:	2800      	cmp	r0, #0
    f6ce:	d019      	beq.n	f704 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f6d0:	2001      	movs	r0, #1
    f6d2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    f6d6:	4601      	mov	r1, r0
    f6d8:	4620      	mov	r0, r4
    f6da:	f7ff fe86 	bl	f3ea <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f6de:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    f6e2:	b170      	cbz	r0, f702 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f6e4:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f6e8:	f7f3 fa34 	bl	2b54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f6ec:	7820      	ldrb	r0, [r4, #0]
    f6ee:	f7f3 fb99 	bl	2e24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f6f2:	f814 09c0 	ldrb.w	r0, [r4], #-192
    f6f6:	f7f3 fb73 	bl	2de0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f6fa:	b120      	cbz	r0, f706 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f6fc:	2000      	movs	r0, #0
    f6fe:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    f702:	2000      	movs	r0, #0
    f704:	bd10      	pop	{r4, pc}
    f706:	f240 2109 	movw	r1, #521	; 0x209
    f70a:	2030      	movs	r0, #48	; 0x30
    f70c:	f7f5 fa2c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f710 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f710:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    f714:	4770      	bx	lr

0000f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f716:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f71a:	4770      	bx	lr

0000f71c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f71c:	b50e      	push	{r1, r2, r3, lr}
    f71e:	4669      	mov	r1, sp
    f720:	2001      	movs	r0, #1
    f722:	f7fe fcad 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f726:	b138      	cbz	r0, f738 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f728:	f240 1137 	movw	r1, #311	; 0x137
    f72c:	2030      	movs	r0, #48	; 0x30
    f72e:	f7f5 fa1b 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f732:	9802      	ldr	r0, [sp, #8]
    f734:	f7ff ffc6 	bl	f6c4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f738:	4668      	mov	r0, sp
    f73a:	f7f5 fc59 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f73e:	2800      	cmp	r0, #0
    f740:	d0f7      	beq.n	f732 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f742:	f7f8 fdd9 	bl	82f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f746:	2000      	movs	r0, #0
    f748:	bd0e      	pop	{r1, r2, r3, pc}

0000f74a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f74a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f74c:	4604      	mov	r4, r0
    f74e:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    f752:	2800      	cmp	r0, #0
    f754:	d15f      	bne.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f756:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    f75a:	2803      	cmp	r0, #3
    f75c:	d15b      	bne.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f75e:	f7f3 fe2b 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f762:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    f766:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    f76a:	1ac0      	subs	r0, r0, r3
    f76c:	eb61 0102 	sbc.w	r1, r1, r2
    f770:	2300      	movs	r3, #0
    f772:	461a      	mov	r2, r3
    f774:	1a1b      	subs	r3, r3, r0
    f776:	418a      	sbcs	r2, r1
    f778:	da4d      	bge.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f77a:	1c42      	adds	r2, r0, #1
    f77c:	f171 0100 	sbcs.w	r1, r1, #0
    f780:	db02      	blt.n	f788 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f782:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    f786:	e036      	b.n	f7f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f788:	6921      	ldr	r1, [r4, #16]
    f78a:	b111      	cbz	r1, f792 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f78c:	fbb0 f0f1 	udiv	r0, r0, r1
    f790:	e000      	b.n	f794 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f792:	2000      	movs	r0, #0
    f794:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f798:	1c40      	adds	r0, r0, #1
    f79a:	4408      	add	r0, r1
    f79c:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f7a0:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f7a4:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    f7a8:	1a08      	subs	r0, r1, r0
    f7aa:	b200      	sxth	r0, r0
    f7ac:	2800      	cmp	r0, #0
    f7ae:	dd32      	ble.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f7b0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f7b4:	f7f3 f9ce 	bl	2b54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f7b8:	2800      	cmp	r0, #0
    f7ba:	d02c      	beq.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f7bc:	20ff      	movs	r0, #255	; 0xff
    f7be:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    f7c2:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    f7c6:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    f7ca:	ae01      	add	r6, sp, #4
    f7cc:	1a40      	subs	r0, r0, r1
    f7ce:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f7d2:	1e40      	subs	r0, r0, #1
    f7d4:	4408      	add	r0, r1
    f7d6:	b285      	uxth	r5, r0
    f7d8:	e017      	b.n	f80a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f7da:	9600      	str	r6, [sp, #0]
    f7dc:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f7e0:	2300      	movs	r3, #0
    f7e2:	2201      	movs	r2, #1
    f7e4:	4620      	mov	r0, r4
    f7e6:	f7f8 fe5b 	bl	84a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f7ea:	2800      	cmp	r0, #0
    f7ec:	d013      	beq.n	f816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f7ee:	2801      	cmp	r0, #1
    f7f0:	d004      	beq.n	f7fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f7f2:	f240 6101 	movw	r1, #1537	; 0x601
    f7f6:	2030      	movs	r0, #48	; 0x30
    f7f8:	f7f5 f9b6 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7fc:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f800:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f804:	4408      	add	r0, r1
    f806:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f80a:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f80e:	1a28      	subs	r0, r5, r0
    f810:	b200      	sxth	r0, r0
    f812:	2800      	cmp	r0, #0
    f814:	dae1      	bge.n	f7da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f816:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f818:	2000      	movs	r0, #0
    f81a:	4770      	bx	lr
    f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f820:	4604      	mov	r4, r0
    f822:	2501      	movs	r5, #1
    f824:	f000 f90c 	bl	fa40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f828:	2600      	movs	r6, #0
    f82a:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    f82e:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
    f832:	2701      	movs	r7, #1
    f834:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
    f838:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    f83c:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
    f840:	b169      	cbz	r1, f85e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
    f842:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
    f846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f84a:	1880      	adds	r0, r0, r2
    f84c:	f141 0100 	adc.w	r1, r1, #0
    f850:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
    f854:	2100      	movs	r1, #0
    f856:	4640      	mov	r0, r8
    f858:	f7fe ff89 	bl	e76e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f85c:	e00d      	b.n	f87a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
    f85e:	4620      	mov	r0, r4
    f860:	f7ff fd6e 	bl	f340 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f864:	4601      	mov	r1, r0
    f866:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
    f86a:	1852      	adds	r2, r2, r1
    f86c:	4170      	adcs	r0, r6
    f86e:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
    f872:	4640      	mov	r0, r8
    f874:	f7fe ff7b 	bl	e76e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f878:	1c45      	adds	r5, r0, #1
    f87a:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f87e:	1c41      	adds	r1, r0, #1
    f880:	290a      	cmp	r1, #10
    f882:	d202      	bcs.n	f88a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f884:	4428      	add	r0, r5
    f886:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    f88a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f88e:	b138      	cbz	r0, f8a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f890:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f894:	1c40      	adds	r0, r0, #1
    f896:	280a      	cmp	r0, #10
    f898:	d302      	bcc.n	f8a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f89a:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
    f89e:	e002      	b.n	f8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
    f8a0:	2002      	movs	r0, #2
    f8a2:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    f8a6:	4620      	mov	r0, r4
    f8a8:	f000 f823 	bl	f8f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f8ac:	b120      	cbz	r0, f8b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    f8ae:	4620      	mov	r0, r4
    f8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f8b4:	f000 b80e 	b.w	f8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    f8b8:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    f8bc:	4641      	mov	r1, r8
    f8be:	f000 f8bd 	bl	fa3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    f8c2:	2800      	cmp	r0, #0
    f8c4:	d104      	bne.n	f8d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
    f8c6:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
    f8ca:	2030      	movs	r0, #48	; 0x30
    f8cc:	f7f5 f94c 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8d4:	b510      	push	{r4, lr}
    f8d6:	4604      	mov	r4, r0
    f8d8:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f8dc:	f7f3 fa80 	bl	2de0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f8e0:	2000      	movs	r0, #0
    f8e2:	7620      	strb	r0, [r4, #24]
    f8e4:	bd10      	pop	{r4, pc}
    f8e6:	b510      	push	{r4, lr}
    f8e8:	f7ff fd2e 	bl	f348 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f8ec:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f8f0:	bd10      	pop	{r4, pc}
    f8f2:	b570      	push	{r4, r5, r6, lr}
    f8f4:	4605      	mov	r5, r0
    f8f6:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
    f8fa:	b108      	cbz	r0, f900 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
    f8fc:	2001      	movs	r0, #1
    f8fe:	bd70      	pop	{r4, r5, r6, pc}
    f900:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
    f904:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f908:	4050      	eors	r0, r2
    f90a:	ea70 0101 	orns	r1, r0, r1
    f90e:	d011      	beq.n	f934 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f910:	2400      	movs	r4, #0
    f912:	4628      	mov	r0, r5
    f914:	f7ff ffe7 	bl	f8e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f918:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
    f91c:	1840      	adds	r0, r0, r1
    f91e:	4154      	adcs	r4, r2
    f920:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f924:	3df0      	subs	r5, #240	; 0xf0
    f926:	1a10      	subs	r0, r2, r0
    f928:	41a1      	sbcs	r1, r4
    f92a:	d503      	bpl.n	f934 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f92c:	4628      	mov	r0, r5
    f92e:	f7ff fd5f 	bl	f3f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f932:	e7e3      	b.n	f8fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    f934:	2000      	movs	r0, #0
    f936:	bd70      	pop	{r4, r5, r6, pc}
    f938:	b510      	push	{r4, lr}
    f93a:	4604      	mov	r4, r0
    f93c:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    f940:	f000 f9f2 	bl	fd28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
    f944:	4602      	mov	r2, r0
    f946:	4620      	mov	r0, r4
    f948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f94c:	f240 111b 	movw	r1, #283	; 0x11b
    f950:	f7ff bb85 	b.w	f05e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f954:	b510      	push	{r4, lr}
    f956:	f7fc f833 	bl	b9c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f95e:	f7f3 bba1 	b.w	30a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f966:	4604      	mov	r4, r0
    f968:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    f96c:	2800      	cmp	r0, #0
    f96e:	d051      	beq.n	fa14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    f970:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    f974:	2803      	cmp	r0, #3
    f976:	d14d      	bne.n	fa14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    f978:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    f97c:	f001 fa5b 	bl	10e36 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f980:	4605      	mov	r5, r0
    f982:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    f986:	f7f8 fca9 	bl	82dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f98a:	4428      	add	r0, r5
    f98c:	b286      	uxth	r6, r0
    f98e:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    f992:	f7f8 fca3 	bl	82dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f996:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f99a:	fa1f f880 	uxth.w	r8, r0
    f99e:	4648      	mov	r0, r9
    f9a0:	f7fc f8cc 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f9a4:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    f9a8:	1a0d      	subs	r5, r1, r0
    f9aa:	4648      	mov	r0, r9
    f9ac:	f7fc f8f2 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f9b0:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f9b4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f9b8:	fbb0 f0fa 	udiv	r0, r0, sl
    f9bc:	1a2d      	subs	r5, r5, r0
    f9be:	4648      	mov	r0, r9
    f9c0:	f7fc f8bc 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f9c4:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    f9c8:	1a0f      	subs	r7, r1, r0
    f9ca:	4648      	mov	r0, r9
    f9cc:	f7fc f8e2 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f9d0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f9d4:	4401      	add	r1, r0
    f9d6:	fbb1 f0fa 	udiv	r0, r1, sl
    f9da:	1a39      	subs	r1, r7, r0
    f9dc:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f9e0:	4370      	muls	r0, r6
    f9e2:	fbb0 f2f8 	udiv	r2, r0, r8
    f9e6:	2029      	movs	r0, #41	; 0x29
    f9e8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f9ec:	3260      	adds	r2, #96	; 0x60
    f9ee:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f9f2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f9f6:	42a9      	cmp	r1, r5
    f9f8:	d801      	bhi.n	f9fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    f9fa:	4285      	cmp	r5, r0
    f9fc:	d901      	bls.n	fa02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
    f9fe:	f7f4 fcf1 	bl	43e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    fa02:	4631      	mov	r1, r6
    fa04:	6920      	ldr	r0, [r4, #16]
    fa06:	f7fd f9d0 	bl	cdaa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    fa0a:	2100      	movs	r1, #0
    fa0c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    fa10:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
    fa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa18:	b570      	push	{r4, r5, r6, lr}
    fa1a:	460c      	mov	r4, r1
    fa1c:	4605      	mov	r5, r0
    fa1e:	f7fc f8b9 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa22:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    fa26:	4408      	add	r0, r1
    fa28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fa2c:	fbb0 f6f1 	udiv	r6, r0, r1
    fa30:	4628      	mov	r0, r5
    fa32:	f7fc f883 	bl	bb3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa36:	4430      	add	r0, r6
    fa38:	4420      	add	r0, r4
    fa3a:	bd70      	pop	{r4, r5, r6, pc}
    fa3c:	f7f2 bcf0 	b.w	2420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    fa40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa42:	4604      	mov	r4, r0
    fa44:	f7ff fca9 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fa48:	b1f8      	cbz	r0, fa8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    fa4a:	4620      	mov	r0, r4
    fa4c:	f7ff fc9d 	bl	f38a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fa50:	b918      	cbnz	r0, fa5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    fa52:	4620      	mov	r0, r4
    fa54:	f7ff fca3 	bl	f39e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fa58:	b140      	cbz	r0, fa6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
    fa5a:	2449      	movs	r4, #73	; 0x49
    fa5c:	4668      	mov	r0, sp
    fa5e:	f7f4 ff5d 	bl	491c <mpsl_fem_pa_is_configured>
    fa62:	f89d 0000 	ldrb.w	r0, [sp]
    fa66:	b118      	cbz	r0, fa70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
    fa68:	2501      	movs	r5, #1
    fa6a:	e002      	b.n	fa72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    fa6c:	2442      	movs	r4, #66	; 0x42
    fa6e:	e7f5      	b.n	fa5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    fa70:	2500      	movs	r5, #0
    fa72:	a801      	add	r0, sp, #4
    fa74:	f7f4 ff3a 	bl	48ec <mpsl_fem_lna_is_configured>
    fa78:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fa7c:	b100      	cbz	r0, fa80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
    fa7e:	2001      	movs	r0, #1
    fa80:	4305      	orrs	r5, r0
    fa82:	d000      	beq.n	fa86 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
    fa84:	3409      	adds	r4, #9
    fa86:	4620      	mov	r0, r4
    fa88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa8a:	206b      	movs	r0, #107	; 0x6b
    fa8c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa8e:	b570      	push	{r4, r5, r6, lr}
    fa90:	4604      	mov	r4, r0
    fa92:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    fa96:	2500      	movs	r5, #0
    fa98:	b138      	cbz	r0, faaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
    fa9a:	f7f7 fbb3 	bl	7204 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    fa9e:	f242 7110 	movw	r1, #10000	; 0x2710
    faa2:	fbb0 f2f1 	udiv	r2, r0, r1
    faa6:	fb01 0512 	mls	r5, r1, r2, r0
    faaa:	4620      	mov	r0, r4
    faac:	f7ff fc48 	bl	f340 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fab0:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
    fab4:	4428      	add	r0, r5
    fab6:	34e0      	adds	r4, #224	; 0xe0
    fab8:	2500      	movs	r5, #0
    faba:	1882      	adds	r2, r0, r2
    fabc:	eb45 0001 	adc.w	r0, r5, r1
    fac0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    fac4:	f804 5b0b 	strb.w	r5, [r4], #11
    fac8:	2001      	movs	r0, #1
    faca:	f804 0901 	strb.w	r0, [r4], #-1
    face:	2002      	movs	r0, #2
    fad0:	f804 09ea 	strb.w	r0, [r4], #-234
    fad4:	4620      	mov	r0, r4
    fad6:	f7ff ffb3 	bl	fa40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    fada:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    fade:	4620      	mov	r0, r4
    fae0:	f7ff ff07 	bl	f8f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    fae4:	b930      	cbnz	r0, faf4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
    fae6:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    faea:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    faee:	f7ff ffa5 	bl	fa3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    faf2:	b128      	cbz	r0, fb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
    faf4:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    faf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fafc:	f7ff bf2a 	b.w	f954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    fb00:	f240 61ef 	movw	r1, #1775	; 0x6ef
    fb04:	2030      	movs	r0, #48	; 0x30
    fb06:	f7f5 f82f 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb0a:	b510      	push	{r4, lr}
    fb0c:	4604      	mov	r4, r0
    fb0e:	2000      	movs	r0, #0
    fb10:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    fb14:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    fb18:	f7f3 f962 	bl	2de0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fb1c:	2020      	movs	r0, #32
    fb1e:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    fb22:	bd10      	pop	{r4, pc}
    fb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb28:	4604      	mov	r4, r0
    fb2a:	2500      	movs	r5, #0
    fb2c:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    fb30:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
    fb34:	4689      	mov	r9, r1
    fb36:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
    fb3a:	f04f 0801 	mov.w	r8, #1
    fb3e:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
    fb42:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    fb46:	4641      	mov	r1, r8
    fb48:	34c0      	adds	r4, #192	; 0xc0
    fb4a:	f7f6 ff1d 	bl	6988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fb4e:	6860      	ldr	r0, [r4, #4]
    fb50:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    fb54:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
    fb58:	6861      	ldr	r1, [r4, #4]
    fb5a:	7820      	ldrb	r0, [r4, #0]
    fb5c:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
    fb60:	6861      	ldr	r1, [r4, #4]
    fb62:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
    fb66:	6860      	ldr	r0, [r4, #4]
    fb68:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
    fb6c:	6864      	ldr	r4, [r4, #4]
    fb6e:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
    fb72:	2300      	movs	r3, #0
    fb74:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
    fb78:	461a      	mov	r2, r3
    fb7a:	4619      	mov	r1, r3
    fb7c:	4620      	mov	r0, r4
    fb7e:	9500      	str	r5, [sp, #0]
    fb80:	f7f8 fc8e 	bl	84a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fb84:	b120      	cbz	r0, fb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
    fb86:	f240 211d 	movw	r1, #541	; 0x21d
    fb8a:	2030      	movs	r0, #48	; 0x30
    fb8c:	f7f4 ffec 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb90:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    fb94:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
    fb98:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
    fb9c:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
    fba0:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
    fba4:	347c      	adds	r4, #124	; 0x7c
    fba6:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
    fbaa:	8820      	ldrh	r0, [r4, #0]
    fbac:	1e40      	subs	r0, r0, #1
    fbae:	8020      	strh	r0, [r4, #0]
    fbb0:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
    fbb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fbb8:	f7ff becc 	b.w	f954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    fbbc:	b570      	push	{r4, r5, r6, lr}
    fbbe:	b140      	cbz	r0, fbd2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
    fbc0:	2909      	cmp	r1, #9
    fbc2:	d248      	bcs.n	fc56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    fbc4:	e8df f001 	tbb	[pc, r1]
    fbc8:	3b3b1507 	.word	0x3b3b1507
    fbcc:	3f294737 	.word	0x3f294737
    fbd0:	0043      	.short	0x0043
    fbd2:	21ca      	movs	r1, #202	; 0xca
    fbd4:	e03c      	b.n	fc50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fbd6:	4604      	mov	r4, r0
    fbd8:	f7f7 fc64 	bl	74a4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    fbdc:	b110      	cbz	r0, fbe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    fbde:	f240 2179 	movw	r1, #633	; 0x279
    fbe2:	e035      	b.n	fc50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fbe4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    fbe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fbec:	38ff      	subs	r0, #255	; 0xff
    fbee:	f7f3 bb29 	b.w	3244 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    fbf2:	4605      	mov	r5, r0
    fbf4:	f7ff fbcd 	bl	f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fbf8:	b9a8      	cbnz	r0, fc26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    fbfa:	4628      	mov	r0, r5
    fbfc:	f7ff fe73 	bl	f8e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    fc00:	4604      	mov	r4, r0
    fc02:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
    fc06:	42a0      	cmp	r0, r4
    fc08:	d20b      	bcs.n	fc22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fc0a:	1a20      	subs	r0, r4, r0
    fc0c:	2103      	movs	r1, #3
    fc0e:	f7f2 fa25 	bl	205c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    fc12:	b130      	cbz	r0, fc22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fc14:	4628      	mov	r0, r5
    fc16:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    fc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc1e:	f7ff bb4b 	b.w	f2b8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    fc22:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    fc26:	4628      	mov	r0, r5
    fc28:	f7f7 fc58 	bl	74dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    fc2c:	2800      	cmp	r0, #0
    fc2e:	d014      	beq.n	fc5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
    fc30:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    fc34:	e00c      	b.n	fc50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fc36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc3a:	f7fc b889 	b.w	bd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc42:	f7ff bdeb 	b.w	f81c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    fc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc4a:	f7ff be43 	b.w	f8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    fc4e:	21ea      	movs	r1, #234	; 0xea
    fc50:	2030      	movs	r0, #48	; 0x30
    fc52:	f7f4 ff89 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc56:	21ee      	movs	r1, #238	; 0xee
    fc58:	e7fa      	b.n	fc50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fc5a:	bd70      	pop	{r4, r5, r6, pc}
    fc5c:	b510      	push	{r4, lr}
    fc5e:	0004      	movs	r4, r0
    fc60:	d008      	beq.n	fc74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
    fc62:	2909      	cmp	r1, #9
    fc64:	d25e      	bcs.n	fd24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
    fc66:	e8df f001 	tbb	[pc, r1]
    fc6a:	3807      	.short	0x3807
    fc6c:	5d3c4040 	.word	0x5d3c4040
    fc70:	00594c45 	.word	0x00594c45
    fc74:	2193      	movs	r1, #147	; 0x93
    fc76:	e052      	b.n	fd1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fc78:	2100      	movs	r1, #0
    fc7a:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
    fc7e:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
    fc82:	4620      	mov	r0, r4
    fc84:	b189      	cbz	r1, fcaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
    fc86:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    fc8a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    fc8e:	428a      	cmp	r2, r1
    fc90:	d106      	bne.n	fca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
    fc92:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
    fc96:	1a51      	subs	r1, r2, r1
    fc98:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fc9c:	4611      	mov	r1, r2
    fc9e:	e00d      	b.n	fcbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fca0:	1a51      	subs	r1, r2, r1
    fca2:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fca6:	b291      	uxth	r1, r2
    fca8:	e008      	b.n	fcbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fcaa:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fcae:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    fcb2:	1a89      	subs	r1, r1, r2
    fcb4:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fcb8:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fcbc:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    fcc0:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
    fcc4:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    fcc8:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
    fccc:	f7f8 fed0 	bl	8a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    fcd0:	4620      	mov	r0, r4
    fcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcd6:	f7f8 bded 	b.w	88b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    fcda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcde:	f000 b925 	b.w	ff2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    fce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fce6:	f7fc b833 	b.w	bd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fcea:	4620      	mov	r0, r4
    fcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcf0:	f000 b827 	b.w	fd42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
    fcf4:	2001      	movs	r0, #1
    fcf6:	f7f2 f9a1 	bl	203c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    fcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcfe:	f7fe bbdc 	b.w	e4ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    fd02:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    fd06:	2804      	cmp	r0, #4
    fd08:	d001      	beq.n	fd0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
    fd0a:	21b5      	movs	r1, #181	; 0xb5
    fd0c:	e007      	b.n	fd1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fd0e:	4620      	mov	r0, r4
    fd10:	f7ff fefb 	bl	fb0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    fd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd18:	f7f7 b8fe 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fd1c:	21be      	movs	r1, #190	; 0xbe
    fd1e:	2030      	movs	r0, #48	; 0x30
    fd20:	f7f4 ff22 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd24:	21c2      	movs	r1, #194	; 0xc2
    fd26:	e7fa      	b.n	fd1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fd28:	b510      	push	{r4, lr}
    fd2a:	f7fb ff33 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd2e:	f64d 7141 	movw	r1, #57153	; 0xdf41
    fd32:	4408      	add	r0, r1
    fd34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fd38:	fbb0 f0f1 	udiv	r0, r0, r1
    fd3c:	f200 1079 	addw	r0, r0, #377	; 0x179
    fd40:	bd10      	pop	{r4, pc}
    fd42:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fd44:	4604      	mov	r4, r0
    fd46:	f7f3 fb37 	bl	33b8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fd4a:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    fd4e:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    fd52:	1ac0      	subs	r0, r0, r3
    fd54:	eb61 0102 	sbc.w	r1, r1, r2
    fd58:	2200      	movs	r2, #0
    fd5a:	4613      	mov	r3, r2
    fd5c:	1a12      	subs	r2, r2, r0
    fd5e:	418b      	sbcs	r3, r1
    fd60:	db02      	blt.n	fd68 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
    fd62:	f240 6111 	movw	r1, #1553	; 0x611
    fd66:	e052      	b.n	fe0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fd68:	1c42      	adds	r2, r0, #1
    fd6a:	f171 0100 	sbcs.w	r1, r1, #0
    fd6e:	db02      	blt.n	fd76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
    fd70:	f240 6112 	movw	r1, #1554	; 0x612
    fd74:	e04b      	b.n	fe0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fd76:	6922      	ldr	r2, [r4, #16]
    fd78:	2100      	movs	r1, #0
    fd7a:	b10a      	cbz	r2, fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    fd7c:	fbb0 f1f2 	udiv	r1, r0, r2
    fd80:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fd84:	280d      	cmp	r0, #13
    fd86:	d00c      	beq.n	fda2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
    fd88:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    fd8c:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
    fd90:	1843      	adds	r3, r0, r1
    fd92:	1ad3      	subs	r3, r2, r3
    fd94:	b21b      	sxth	r3, r3
    fd96:	2b00      	cmp	r3, #0
    fd98:	db06      	blt.n	fda8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
    fd9a:	1c52      	adds	r2, r2, #1
    fd9c:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
    fda0:	e006      	b.n	fdb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
    fda2:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fda6:	e012      	b.n	fdce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
    fda8:	1c49      	adds	r1, r1, #1
    fdaa:	4408      	add	r0, r1
    fdac:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fdb0:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
    fdb4:	f88d 0000 	strb.w	r0, [sp]
    fdb8:	9800      	ldr	r0, [sp, #0]
    fdba:	9000      	str	r0, [sp, #0]
    fdbc:	f89d 0000 	ldrb.w	r0, [sp]
    fdc0:	b940      	cbnz	r0, fdd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fdc2:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fdc6:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    fdca:	4288      	cmp	r0, r1
    fdcc:	d102      	bne.n	fdd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fdce:	1c40      	adds	r0, r0, #1
    fdd0:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fdd4:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    fdd8:	1c40      	adds	r0, r0, #1
    fdda:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    fdde:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    fde2:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    fde6:	1a40      	subs	r0, r0, r1
    fde8:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fdec:	1e40      	subs	r0, r0, #1
    fdee:	4408      	add	r0, r1
    fdf0:	b285      	uxth	r5, r0
    fdf2:	e026      	b.n	fe42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    fdf4:	a801      	add	r0, sp, #4
    fdf6:	2300      	movs	r3, #0
    fdf8:	9000      	str	r0, [sp, #0]
    fdfa:	461a      	mov	r2, r3
    fdfc:	4620      	mov	r0, r4
    fdfe:	f7f8 fb4f 	bl	84a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fe02:	2800      	cmp	r0, #0
    fe04:	d03b      	beq.n	fe7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
    fe06:	2801      	cmp	r0, #1
    fe08:	d004      	beq.n	fe14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    fe0a:	f240 6151 	movw	r1, #1617	; 0x651
    fe0e:	2030      	movs	r0, #48	; 0x30
    fe10:	f7f4 feaa 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe14:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fe18:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
    fe1c:	1a42      	subs	r2, r0, r1
    fe1e:	b212      	sxth	r2, r2
    fe20:	2a00      	cmp	r2, #0
    fe22:	da09      	bge.n	fe38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fe24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fe28:	4402      	add	r2, r0
    fe2a:	1aaa      	subs	r2, r5, r2
    fe2c:	b212      	sxth	r2, r2
    fe2e:	2a00      	cmp	r2, #0
    fe30:	da02      	bge.n	fe38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fe32:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
    fe36:	e004      	b.n	fe42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    fe38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fe3c:	4408      	add	r0, r1
    fe3e:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fe42:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
    fe46:	1a68      	subs	r0, r5, r1
    fe48:	b200      	sxth	r0, r0
    fe4a:	2800      	cmp	r0, #0
    fe4c:	dad2      	bge.n	fdf4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    fe4e:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    fe52:	b190      	cbz	r0, fe7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
    fe54:	2008      	movs	r0, #8
    fe56:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
    fe5a:	2208      	movs	r2, #8
    fe5c:	4621      	mov	r1, r4
    fe5e:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    fe62:	f7f6 ff87 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fe66:	4620      	mov	r0, r4
    fe68:	f000 f862 	bl	ff30 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    fe6c:	4620      	mov	r0, r4
    fe6e:	f7ff fe4c 	bl	fb0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    fe72:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fe76:	f7f7 b84f 	b.w	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fe7a:	203e      	movs	r0, #62	; 0x3e
    fe7c:	e7eb      	b.n	fe56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
    fe7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe80:	00fa01f4 	.word	0x00fa01f4
    fe84:	00640096 	.word	0x00640096
    fe88:	0032004b 	.word	0x0032004b
    fe8c:	0014001e 	.word	0x0014001e
    fe90:	0005000a 	.word	0x0005000a
    fe94:	00010002 	.word	0x00010002
    fe98:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fe9c:	f001 0307 	and.w	r3, r1, #7
    fea0:	7802      	ldrb	r2, [r0, #0]
    fea2:	2101      	movs	r1, #1
    fea4:	4099      	lsls	r1, r3
    fea6:	438a      	bics	r2, r1
    fea8:	7002      	strb	r2, [r0, #0]
    feaa:	4770      	bx	lr
    feac:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    feb0:	f001 0307 	and.w	r3, r1, #7
    feb4:	7802      	ldrb	r2, [r0, #0]
    feb6:	2101      	movs	r1, #1
    feb8:	4099      	lsls	r1, r3
    feba:	430a      	orrs	r2, r1
    febc:	7002      	strb	r2, [r0, #0]
    febe:	4770      	bx	lr

0000fec0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    fec0:	b510      	push	{r4, lr}
    fec2:	4604      	mov	r4, r0
    fec4:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
    fec8:	6921      	ldr	r1, [r4, #16]
    feca:	4288      	cmp	r0, r1
    fecc:	d109      	bne.n	fee2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fece:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
    fed2:	8b22      	ldrh	r2, [r4, #24]
    fed4:	4291      	cmp	r1, r2
    fed6:	d104      	bne.n	fee2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fed8:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
    fedc:	8b62      	ldrh	r2, [r4, #26]
    fede:	4291      	cmp	r1, r2
    fee0:	d016      	beq.n	ff10 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
    fee2:	8821      	ldrh	r1, [r4, #0]
    fee4:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
    fee8:	f7fe fb6e 	bl	e5c8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    feec:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
    fef0:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    fef4:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
    fef8:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    fefc:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
    ff00:	2206      	movs	r2, #6
    ff02:	4621      	mov	r1, r4
    ff04:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
    ff08:	f7f6 ff34 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ff0c:	f7f7 f804 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ff10:	2102      	movs	r1, #2
    ff12:	4620      	mov	r0, r4
    ff14:	f7f6 fd38 	bl	6988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ff18:	2000      	movs	r0, #0
    ff1a:	f804 0f86 	strb.w	r0, [r4, #134]!
    ff1e:	2003      	movs	r0, #3
    ff20:	7120      	strb	r0, [r4, #4]
    ff22:	bd10      	pop	{r4, pc}

0000ff24 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ff24:	f7f5 b9d4 	b.w	52d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ff28 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ff28:	2000      	movs	r0, #0
    ff2a:	4770      	bx	lr

0000ff2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ff2c:	f7f5 be90 	b.w	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000ff30 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ff30:	2100      	movs	r1, #0
    ff32:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ff36:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ff3a:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    ff3e:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
    ff42:	b109      	cbz	r1, ff48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    ff44:	2102      	movs	r1, #2
    ff46:	e000      	b.n	ff4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    ff48:	2103      	movs	r1, #3
    ff4a:	f7f8 b96f 	b.w	822c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ff4e:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    ff52:	28fe      	cmp	r0, #254	; 0xfe
    ff54:	d001      	beq.n	ff5a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    ff56:	2001      	movs	r0, #1
    ff58:	4770      	bx	lr
    ff5a:	2000      	movs	r0, #0
    ff5c:	4770      	bx	lr
    ff5e:	b510      	push	{r4, lr}
    ff60:	2801      	cmp	r0, #1
    ff62:	d006      	beq.n	ff72 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ff64:	2802      	cmp	r0, #2
    ff66:	d004      	beq.n	ff72 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ff68:	f240 21a9 	movw	r1, #681	; 0x2a9
    ff6c:	2006      	movs	r0, #6
    ff6e:	f7f4 fdfb 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff72:	bd10      	pop	{r4, pc}
    ff74:	2801      	cmp	r0, #1
    ff76:	d002      	beq.n	ff7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    ff78:	2802      	cmp	r0, #2
    ff7a:	d105      	bne.n	ff88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ff7c:	e002      	b.n	ff84 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    ff7e:	2901      	cmp	r1, #1
    ff80:	d004      	beq.n	ff8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ff82:	e001      	b.n	ff88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ff84:	2902      	cmp	r1, #2
    ff86:	d001      	beq.n	ff8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ff88:	2000      	movs	r0, #0
    ff8a:	4770      	bx	lr
    ff8c:	2001      	movs	r0, #1
    ff8e:	4770      	bx	lr
    ff90:	1a40      	subs	r0, r0, r1
    ff92:	b200      	sxth	r0, r0
    ff94:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ff98:	4288      	cmp	r0, r1
    ff9a:	dc01      	bgt.n	ffa0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ff9c:	2800      	cmp	r0, #0
    ff9e:	dc01      	bgt.n	ffa4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ffa0:	2001      	movs	r0, #1
    ffa2:	4770      	bx	lr
    ffa4:	2000      	movs	r0, #0
    ffa6:	4770      	bx	lr
    ffa8:	4602      	mov	r2, r0
    ffaa:	2000      	movs	r0, #0
    ffac:	2a16      	cmp	r2, #22
    ffae:	d102      	bne.n	ffb6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    ffb0:	4608      	mov	r0, r1
    ffb2:	f7f9 bd35 	b.w	9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    ffb6:	4770      	bx	lr
    ffb8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ffbc:	f001 0107 	and.w	r1, r1, #7
    ffc0:	7800      	ldrb	r0, [r0, #0]
    ffc2:	40c8      	lsrs	r0, r1
    ffc4:	f000 0001 	and.w	r0, r0, #1
    ffc8:	4770      	bx	lr
    ffca:	b118      	cbz	r0, ffd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
    ffcc:	2802      	cmp	r0, #2
    ffce:	d001      	beq.n	ffd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
    ffd0:	2001      	movs	r0, #1
    ffd2:	4770      	bx	lr
    ffd4:	2000      	movs	r0, #0
    ffd6:	4770      	bx	lr

0000ffd8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ffd8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ffda:	7881      	ldrb	r1, [r0, #2]
    ffdc:	4604      	mov	r4, r0
    ffde:	291a      	cmp	r1, #26
    ffe0:	d025      	beq.n	1002e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ffe2:	dc0e      	bgt.n	10002 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ffe4:	2916      	cmp	r1, #22
    ffe6:	d22c      	bcs.n	10042 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    ffe8:	e8df f001 	tbb	[pc, r1]
    ffec:	2b2b2b2b 	.word	0x2b2b2b2b
    fff0:	2b2b212b 	.word	0x2b2b212b
    fff4:	2b2b2b2b 	.word	0x2b2b2b2b
    fff8:	2b2b2b2b 	.word	0x2b2b2b2b
    fffc:	212b2b2b 	.word	0x212b2b2b
   10000:	2121      	.short	0x2121
   10002:	292a      	cmp	r1, #42	; 0x2a
   10004:	d01d      	beq.n	10042 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10006:	dc0b      	bgt.n	10020 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   10008:	f1a1 011e 	sub.w	r1, r1, #30
   1000c:	290c      	cmp	r1, #12
   1000e:	d218      	bcs.n	10042 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10010:	e8df f001 	tbb	[pc, r1]
   10014:	17171717 	.word	0x17171717
   10018:	17171717 	.word	0x17171717
   1001c:	0d171717 	.word	0x0d171717
   10020:	393a      	subs	r1, #58	; 0x3a
   10022:	2904      	cmp	r1, #4
   10024:	d20d      	bcs.n	10042 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10026:	e8df f001 	tbb	[pc, r1]
   1002a:	020c      	.short	0x020c
   1002c:	020c      	.short	0x020c
   1002e:	8820      	ldrh	r0, [r4, #0]
   10030:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10034:	d205      	bcs.n	10042 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10036:	4669      	mov	r1, sp
   10038:	f7fe fab5 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1003c:	b118      	cbz	r0, 10046 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   1003e:	2002      	movs	r0, #2
   10040:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10042:	2012      	movs	r0, #18
   10044:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10046:	9801      	ldr	r0, [sp, #4]
   10048:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   1004c:	f88d 1008 	strb.w	r1, [sp, #8]
   10050:	9902      	ldr	r1, [sp, #8]
   10052:	9102      	str	r1, [sp, #8]
   10054:	f89d 1008 	ldrb.w	r1, [sp, #8]
   10058:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1005c:	b109      	cbz	r1, 10062 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   1005e:	200c      	movs	r0, #12
   10060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10062:	21ff      	movs	r1, #255	; 0xff
   10064:	7001      	strb	r1, [r0, #0]
   10066:	78a1      	ldrb	r1, [r4, #2]
   10068:	7041      	strb	r1, [r0, #1]
   1006a:	4668      	mov	r0, sp
   1006c:	f7fe fe5a 	bl	ed24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10070:	2000      	movs	r0, #0
   10072:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010074 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   10074:	b510      	push	{r4, lr}
   10076:	4604      	mov	r4, r0
   10078:	7800      	ldrb	r0, [r0, #0]
   1007a:	b118      	cbz	r0, 10084 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1007c:	2801      	cmp	r0, #1
   1007e:	d001      	beq.n	10084 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10080:	2012      	movs	r0, #18
   10082:	bd10      	pop	{r4, pc}
   10084:	f000 fe04 	bl	10c90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10088:	b120      	cbz	r0, 10094 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1008a:	f7f6 fa59 	bl	6540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1008e:	b108      	cbz	r0, 10094 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10090:	200c      	movs	r0, #12
   10092:	bd10      	pop	{r4, pc}
   10094:	7820      	ldrb	r0, [r4, #0]
   10096:	f7ff ff98 	bl	ffca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1009a:	1de2      	adds	r2, r4, #7
   1009c:	f104 0317 	add.w	r3, r4, #23
   100a0:	1c61      	adds	r1, r4, #1
   100a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100a6:	f7f6 ba7d 	b.w	65a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

000100aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   100aa:	b510      	push	{r4, lr}
   100ac:	4604      	mov	r4, r0
   100ae:	f000 fe5f 	bl	10d70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   100b2:	b108      	cbz	r0, 100b8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   100b4:	200c      	movs	r0, #12
   100b6:	bd10      	pop	{r4, pc}
   100b8:	7820      	ldrb	r0, [r4, #0]
   100ba:	b118      	cbz	r0, 100c4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   100bc:	2801      	cmp	r0, #1
   100be:	d001      	beq.n	100c4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   100c0:	2012      	movs	r0, #18
   100c2:	bd10      	pop	{r4, pc}
   100c4:	f7ff ff81 	bl	ffca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   100c8:	1c61      	adds	r1, r4, #1
   100ca:	f7f6 fae3 	bl	6694 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   100ce:	b108      	cbz	r0, 100d4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   100d0:	2000      	movs	r0, #0
   100d2:	bd10      	pop	{r4, pc}
   100d4:	2007      	movs	r0, #7
   100d6:	bd10      	pop	{r4, pc}

000100d8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   100d8:	b510      	push	{r4, lr}
   100da:	f000 fdd9 	bl	10c90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   100de:	b120      	cbz	r0, 100ea <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   100e0:	f7f6 fa2e 	bl	6540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   100e4:	b108      	cbz	r0, 100ea <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   100e6:	200c      	movs	r0, #12
   100e8:	bd10      	pop	{r4, pc}
   100ea:	f7f6 faa1 	bl	6630 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   100ee:	2000      	movs	r0, #0
   100f0:	bd10      	pop	{r4, pc}

000100f2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   100f2:	b510      	push	{r4, lr}
   100f4:	f000 fe3c 	bl	10d70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   100f8:	b108      	cbz	r0, 100fe <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   100fa:	200c      	movs	r0, #12
   100fc:	bd10      	pop	{r4, pc}
   100fe:	f7f6 faf1 	bl	66e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   10102:	2000      	movs	r0, #0
   10104:	bd10      	pop	{r4, pc}

00010106 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   10106:	b510      	push	{r4, lr}
   10108:	460b      	mov	r3, r1
   1010a:	2201      	movs	r2, #1
   1010c:	f100 0110 	add.w	r1, r0, #16
   10110:	f7fe fa2b 	bl	e56a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   10114:	2000      	movs	r0, #0
   10116:	bd10      	pop	{r4, pc}

00010118 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   10118:	b510      	push	{r4, lr}
   1011a:	8800      	ldrh	r0, [r0, #0]
   1011c:	2100      	movs	r1, #0
   1011e:	f7fd ffa5 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10122:	b118      	cbz	r0, 1012c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   10124:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   10128:	b111      	cbz	r1, 10130 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   1012a:	e007      	b.n	1013c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   1012c:	2002      	movs	r0, #2
   1012e:	bd10      	pop	{r4, pc}
   10130:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   10134:	2914      	cmp	r1, #20
   10136:	d003      	beq.n	10140 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10138:	2915      	cmp	r1, #21
   1013a:	d001      	beq.n	10140 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1013c:	200c      	movs	r0, #12
   1013e:	bd10      	pop	{r4, pc}
   10140:	2102      	movs	r1, #2
   10142:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   10146:	2000      	movs	r0, #0
   10148:	bd10      	pop	{r4, pc}

0001014a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   1014a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1014c:	4605      	mov	r5, r0
   1014e:	8800      	ldrh	r0, [r0, #0]
   10150:	2100      	movs	r1, #0
   10152:	f7fd ff8b 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10156:	0004      	movs	r4, r0
   10158:	d003      	beq.n	10162 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   1015a:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   1015e:	b110      	cbz	r0, 10166 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10160:	e011      	b.n	10186 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10162:	2002      	movs	r0, #2
   10164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10166:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1016a:	2814      	cmp	r0, #20
   1016c:	d001      	beq.n	10172 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   1016e:	2815      	cmp	r0, #21
   10170:	d109      	bne.n	10186 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10172:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   10176:	f88d 0000 	strb.w	r0, [sp]
   1017a:	9800      	ldr	r0, [sp, #0]
   1017c:	9000      	str	r0, [sp, #0]
   1017e:	f89d 0000 	ldrb.w	r0, [sp]
   10182:	2601      	movs	r6, #1
   10184:	b108      	cbz	r0, 1018a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   10186:	200c      	movs	r0, #12
   10188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1018a:	2210      	movs	r2, #16
   1018c:	1ca9      	adds	r1, r5, #2
   1018e:	f204 2059 	addw	r0, r4, #601	; 0x259
   10192:	f7fc ff39 	bl	d008 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10196:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   1019a:	2000      	movs	r0, #0
   1019c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001019e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1019e:	b510      	push	{r4, lr}
   101a0:	2108      	movs	r1, #8
   101a2:	f7f4 fd8d 	bl	4cc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   101a6:	2000      	movs	r0, #0
   101a8:	bd10      	pop	{r4, pc}

000101aa <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   101aa:	b510      	push	{r4, lr}
   101ac:	4604      	mov	r4, r0
   101ae:	f7fa fe15 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   101b2:	f7ff f8f8 	bl	f3a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   101b6:	7020      	strb	r0, [r4, #0]
   101b8:	2000      	movs	r0, #0
   101ba:	bd10      	pop	{r4, pc}

000101bc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   101bc:	21fb      	movs	r1, #251	; 0xfb
   101be:	8001      	strh	r1, [r0, #0]
   101c0:	f640 0248 	movw	r2, #2120	; 0x848
   101c4:	8042      	strh	r2, [r0, #2]
   101c6:	8081      	strh	r1, [r0, #4]
   101c8:	80c2      	strh	r2, [r0, #6]
   101ca:	2000      	movs	r0, #0
   101cc:	4770      	bx	lr

000101ce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   101ce:	b51c      	push	{r2, r3, r4, lr}
   101d0:	8800      	ldrh	r0, [r0, #0]
   101d2:	4669      	mov	r1, sp
   101d4:	f7fe f9e7 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d8:	2800      	cmp	r0, #0
   101da:	d10d      	bne.n	101f8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   101dc:	f89d 0000 	ldrb.w	r0, [sp]
   101e0:	9c01      	ldr	r4, [sp, #4]
   101e2:	2801      	cmp	r0, #1
   101e4:	f504 748c 	add.w	r4, r4, #280	; 0x118
   101e8:	d103      	bne.n	101f2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   101ea:	9801      	ldr	r0, [sp, #4]
   101ec:	f000 fd3a 	bl	10c64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   101f0:	b118      	cbz	r0, 101fa <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   101f2:	7ce0      	ldrb	r0, [r4, #19]
   101f4:	b118      	cbz	r0, 101fe <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   101f6:	203a      	movs	r0, #58	; 0x3a
   101f8:	bd1c      	pop	{r2, r3, r4, pc}
   101fa:	2002      	movs	r0, #2
   101fc:	bd1c      	pop	{r2, r3, r4, pc}
   101fe:	2001      	movs	r0, #1
   10200:	74e0      	strb	r0, [r4, #19]
   10202:	2000      	movs	r0, #0
   10204:	bd1c      	pop	{r2, r3, r4, pc}

00010206 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   10206:	2108      	movs	r1, #8
   10208:	7001      	strb	r1, [r0, #0]
   1020a:	2000      	movs	r0, #0
   1020c:	4770      	bx	lr

0001020e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1020e:	b510      	push	{r4, lr}
   10210:	4604      	mov	r4, r0
   10212:	20d8      	movs	r0, #216	; 0xd8
   10214:	7020      	strb	r0, [r4, #0]
   10216:	f000 fd22 	bl	10c5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   1021a:	7060      	strb	r0, [r4, #1]
   1021c:	2000      	movs	r0, #0
   1021e:	bd10      	pop	{r4, pc}

00010220 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   10220:	2108      	movs	r1, #8
   10222:	7001      	strb	r1, [r0, #0]
   10224:	2000      	movs	r0, #0
   10226:	4770      	bx	lr

00010228 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   10228:	b510      	push	{r4, lr}
   1022a:	4604      	mov	r4, r0
   1022c:	7800      	ldrb	r0, [r0, #0]
   1022e:	b108      	cbz	r0, 10234 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   10230:	2801      	cmp	r0, #1
   10232:	d110      	bne.n	10256 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10234:	f000 fd2c 	bl	10c90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10238:	b120      	cbz	r0, 10244 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1023a:	f7f6 f981 	bl	6540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1023e:	b108      	cbz	r0, 10244 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10240:	200c      	movs	r0, #12
   10242:	bd10      	pop	{r4, pc}
   10244:	7820      	ldrb	r0, [r4, #0]
   10246:	f7ff fec0 	bl	ffca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1024a:	1c61      	adds	r1, r4, #1
   1024c:	f7fe f973 	bl	e536 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   10250:	b108      	cbz	r0, 10256 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10252:	2000      	movs	r0, #0
   10254:	bd10      	pop	{r4, pc}
   10256:	2012      	movs	r0, #18
   10258:	bd10      	pop	{r4, pc}

0001025a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1025a:	b510      	push	{r4, lr}
   1025c:	4604      	mov	r4, r0
   1025e:	f000 fd87 	bl	10d70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10262:	b108      	cbz	r0, 10268 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10264:	200c      	movs	r0, #12
   10266:	bd10      	pop	{r4, pc}
   10268:	7820      	ldrb	r0, [r4, #0]
   1026a:	b108      	cbz	r0, 10270 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   1026c:	2801      	cmp	r0, #1
   1026e:	d107      	bne.n	10280 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10270:	f7ff feab 	bl	ffca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10274:	1c61      	adds	r1, r4, #1
   10276:	f7fe f96d 	bl	e554 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1027a:	b108      	cbz	r0, 10280 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1027c:	2000      	movs	r0, #0
   1027e:	bd10      	pop	{r4, pc}
   10280:	2012      	movs	r0, #18
   10282:	bd10      	pop	{r4, pc}

00010284 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10284:	b510      	push	{r4, lr}
   10286:	4604      	mov	r4, r0
   10288:	f000 fd02 	bl	10c90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   1028c:	b108      	cbz	r0, 10292 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   1028e:	200c      	movs	r0, #12
   10290:	bd10      	pop	{r4, pc}
   10292:	7820      	ldrb	r0, [r4, #0]
   10294:	b100      	cbz	r0, 10298 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   10296:	2001      	movs	r0, #1
   10298:	f7f6 f94c 	bl	6534 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   1029c:	2000      	movs	r0, #0
   1029e:	bd10      	pop	{r4, pc}

000102a0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   102a0:	b51c      	push	{r2, r3, r4, lr}
   102a2:	4604      	mov	r4, r0
   102a4:	f7fa fd9a 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   102a8:	2000      	movs	r0, #0
   102aa:	f88d 0002 	strb.w	r0, [sp, #2]
   102ae:	2103      	movs	r1, #3
   102b0:	f88d 1001 	strb.w	r1, [sp, #1]
   102b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   102b8:	f88d 1003 	strb.w	r1, [sp, #3]
   102bc:	f88d 0000 	strb.w	r0, [sp]
   102c0:	4668      	mov	r0, sp
   102c2:	9401      	str	r4, [sp, #4]
   102c4:	f000 f99c 	bl	10600 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   102c8:	bd1c      	pop	{r2, r3, r4, pc}

000102ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   102ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   102cc:	4605      	mov	r5, r0
   102ce:	f7fa fd85 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   102d2:	4606      	mov	r6, r0
   102d4:	7828      	ldrb	r0, [r5, #0]
   102d6:	2400      	movs	r4, #0
   102d8:	b160      	cbz	r0, 102f4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   102da:	f88d 4000 	strb.w	r4, [sp]
   102de:	2001      	movs	r0, #1
   102e0:	f10d 0101 	add.w	r1, sp, #1
   102e4:	f7f5 faf6 	bl	58d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   102e8:	b120      	cbz	r0, 102f4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   102ea:	4668      	mov	r0, sp
   102ec:	f000 f897 	bl	1041e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   102f0:	2800      	cmp	r0, #0
   102f2:	d112      	bne.n	1031a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   102f4:	f88d 400c 	strb.w	r4, [sp, #12]
   102f8:	4630      	mov	r0, r6
   102fa:	f7ff f84a 	bl	f392 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   102fe:	b118      	cbz	r0, 10308 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10300:	2080      	movs	r0, #128	; 0x80
   10302:	f8ad 000d 	strh.w	r0, [sp, #13]
   10306:	e001      	b.n	1030c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10308:	f8ad 400d 	strh.w	r4, [sp, #13]
   1030c:	f88d 400f 	strb.w	r4, [sp, #15]
   10310:	7828      	ldrb	r0, [r5, #0]
   10312:	2801      	cmp	r0, #1
   10314:	d003      	beq.n	1031e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10316:	b138      	cbz	r0, 10328 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10318:	2012      	movs	r0, #18
   1031a:	b004      	add	sp, #16
   1031c:	bd70      	pop	{r4, r5, r6, pc}
   1031e:	a903      	add	r1, sp, #12
   10320:	4630      	mov	r0, r6
   10322:	f7fa fd79 	bl	ae18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10326:	e7f8      	b.n	1031a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10328:	4630      	mov	r0, r6
   1032a:	f000 fcb8 	bl	10c9e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f8>
   1032e:	e7f4      	b.n	1031a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010330 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10330:	b530      	push	{r4, r5, lr}
   10332:	b08b      	sub	sp, #44	; 0x2c
   10334:	4604      	mov	r4, r0
   10336:	f7fa fd51 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   1033a:	4602      	mov	r2, r0
   1033c:	7920      	ldrb	r0, [r4, #4]
   1033e:	2804      	cmp	r0, #4
   10340:	d803      	bhi.n	1034a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10342:	8860      	ldrh	r0, [r4, #2]
   10344:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10348:	d902      	bls.n	10350 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   1034a:	2012      	movs	r0, #18
   1034c:	b00b      	add	sp, #44	; 0x2c
   1034e:	bd30      	pop	{r4, r5, pc}
   10350:	2500      	movs	r5, #0
   10352:	f88d 5004 	strb.w	r5, [sp, #4]
   10356:	7921      	ldrb	r1, [r4, #4]
   10358:	9500      	str	r5, [sp, #0]
   1035a:	f89d 0000 	ldrb.w	r0, [sp]
   1035e:	2905      	cmp	r1, #5
   10360:	f040 0010 	orr.w	r0, r0, #16
   10364:	f88d 0000 	strb.w	r0, [sp]
   10368:	d254      	bcs.n	10414 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   1036a:	e8df f001 	tbb	[pc, r1]
   1036e:	0803      	.short	0x0803
   10370:	000b1105 	.word	0x000b1105
   10374:	f040 0001 	orr.w	r0, r0, #1
   10378:	f040 0002 	orr.w	r0, r0, #2
   1037c:	e006      	b.n	1038c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   1037e:	f040 0009 	orr.w	r0, r0, #9
   10382:	e001      	b.n	10388 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10384:	f040 0001 	orr.w	r0, r0, #1
   10388:	f040 0004 	orr.w	r0, r0, #4
   1038c:	f88d 0000 	strb.w	r0, [sp]
   10390:	f8bd 0000 	ldrh.w	r0, [sp]
   10394:	9000      	str	r0, [sp, #0]
   10396:	f8bd 0000 	ldrh.w	r0, [sp]
   1039a:	f8ad 0005 	strh.w	r0, [sp, #5]
   1039e:	8821      	ldrh	r1, [r4, #0]
   103a0:	f8dd 0006 	ldr.w	r0, [sp, #6]
   103a4:	f361 201f 	bfi	r0, r1, #8, #24
   103a8:	f8cd 0006 	str.w	r0, [sp, #6]
   103ac:	8861      	ldrh	r1, [r4, #2]
   103ae:	f8dd 0009 	ldr.w	r0, [sp, #9]
   103b2:	f361 201f 	bfi	r0, r1, #8, #24
   103b6:	f8cd 0009 	str.w	r0, [sp, #9]
   103ba:	7b60      	ldrb	r0, [r4, #13]
   103bc:	f88d 000d 	strb.w	r0, [sp, #13]
   103c0:	7960      	ldrb	r0, [r4, #5]
   103c2:	f88d 000e 	strb.w	r0, [sp, #14]
   103c6:	79a0      	ldrb	r0, [r4, #6]
   103c8:	f88d 000f 	strb.w	r0, [sp, #15]
   103cc:	f8d4 0007 	ldr.w	r0, [r4, #7]
   103d0:	9004      	str	r0, [sp, #16]
   103d2:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   103d6:	f8ad 0014 	strh.w	r0, [sp, #20]
   103da:	7ba0      	ldrb	r0, [r4, #14]
   103dc:	f88d 0016 	strb.w	r0, [sp, #22]
   103e0:	207f      	movs	r0, #127	; 0x7f
   103e2:	f88d 0017 	strb.w	r0, [sp, #23]
   103e6:	2001      	movs	r0, #1
   103e8:	f88d 0018 	strb.w	r0, [sp, #24]
   103ec:	f88d 5019 	strb.w	r5, [sp, #25]
   103f0:	f88d 001a 	strb.w	r0, [sp, #26]
   103f4:	f88d 501b 	strb.w	r5, [sp, #27]
   103f8:	4610      	mov	r0, r2
   103fa:	f7fe ffe6 	bl	f3ca <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   103fe:	f88d 001c 	strb.w	r0, [sp, #28]
   10402:	f88d 501d 	strb.w	r5, [sp, #29]
   10406:	f88d 501e 	strb.w	r5, [sp, #30]
   1040a:	a909      	add	r1, sp, #36	; 0x24
   1040c:	a801      	add	r0, sp, #4
   1040e:	f7fa fbc1 	bl	ab94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10412:	e79b      	b.n	1034c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10414:	f241 01cf 	movw	r1, #4303	; 0x10cf
   10418:	2039      	movs	r0, #57	; 0x39
   1041a:	f7f4 fba5 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001041e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   1041e:	b570      	push	{r4, r5, r6, lr}
   10420:	4604      	mov	r4, r0
   10422:	7800      	ldrb	r0, [r0, #0]
   10424:	2101      	movs	r1, #1
   10426:	f7fd fe21 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1042a:	0005      	movs	r5, r0
   1042c:	d007      	beq.n	1043e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   1042e:	f7ff f972 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10432:	b160      	cbz	r0, 1044e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10434:	4628      	mov	r0, r5
   10436:	f7fe ffb2 	bl	f39e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1043a:	b110      	cbz	r0, 10442 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   1043c:	e005      	b.n	1044a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   1043e:	2042      	movs	r0, #66	; 0x42
   10440:	bd70      	pop	{r4, r5, r6, pc}
   10442:	4628      	mov	r0, r5
   10444:	f7fe ffa1 	bl	f38a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10448:	b108      	cbz	r0, 1044e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1044a:	200c      	movs	r0, #12
   1044c:	bd70      	pop	{r4, r5, r6, pc}
   1044e:	1c61      	adds	r1, r4, #1
   10450:	4628      	mov	r0, r5
   10452:	f7fe ffb2 	bl	f3ba <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10456:	2000      	movs	r0, #0
   10458:	bd70      	pop	{r4, r5, r6, pc}

0001045a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1045a:	b50e      	push	{r1, r2, r3, lr}
   1045c:	8882      	ldrh	r2, [r0, #4]
   1045e:	f244 2390 	movw	r3, #17040	; 0x4290
   10462:	429a      	cmp	r2, r3
   10464:	d901      	bls.n	1046a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10466:	2012      	movs	r0, #18
   10468:	bd0e      	pop	{r1, r2, r3, pc}
   1046a:	f640 0348 	movw	r3, #2120	; 0x848
   1046e:	429a      	cmp	r2, r3
   10470:	d300      	bcc.n	10474 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10472:	461a      	mov	r2, r3
   10474:	8803      	ldrh	r3, [r0, #0]
   10476:	f8ad 3000 	strh.w	r3, [sp]
   1047a:	8843      	ldrh	r3, [r0, #2]
   1047c:	f8ad 3002 	strh.w	r3, [sp, #2]
   10480:	f8ad 2004 	strh.w	r2, [sp, #4]
   10484:	8843      	ldrh	r3, [r0, #2]
   10486:	f8ad 3006 	strh.w	r3, [sp, #6]
   1048a:	f8ad 2008 	strh.w	r2, [sp, #8]
   1048e:	8800      	ldrh	r0, [r0, #0]
   10490:	8008      	strh	r0, [r1, #0]
   10492:	4668      	mov	r0, sp
   10494:	f7fa fd92 	bl	afbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   10498:	bd0e      	pop	{r1, r2, r3, pc}

0001049a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1049a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1049c:	4604      	mov	r4, r0
   1049e:	f10d 0007 	add.w	r0, sp, #7
   104a2:	9000      	str	r0, [sp, #0]
   104a4:	7922      	ldrb	r2, [r4, #4]
   104a6:	78e1      	ldrb	r1, [r4, #3]
   104a8:	78a0      	ldrb	r0, [r4, #2]
   104aa:	f10d 0306 	add.w	r3, sp, #6
   104ae:	f000 fc23 	bl	10cf8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   104b2:	2800      	cmp	r0, #0
   104b4:	d109      	bne.n	104ca <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   104b6:	8820      	ldrh	r0, [r4, #0]
   104b8:	f8ad 0004 	strh.w	r0, [sp, #4]
   104bc:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   104c0:	f8ad 0008 	strh.w	r0, [sp, #8]
   104c4:	a801      	add	r0, sp, #4
   104c6:	f000 f956 	bl	10776 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   104ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000104cc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   104cc:	b510      	push	{r4, lr}
   104ce:	4604      	mov	r4, r0
   104d0:	f000 fbde 	bl	10c90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   104d4:	b120      	cbz	r0, 104e0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   104d6:	f7f6 f833 	bl	6540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   104da:	b108      	cbz	r0, 104e0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   104dc:	200c      	movs	r0, #12
   104de:	bd10      	pop	{r4, pc}
   104e0:	7820      	ldrb	r0, [r4, #0]
   104e2:	f7ff fd72 	bl	ffca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   104e6:	79e2      	ldrb	r2, [r4, #7]
   104e8:	1c61      	adds	r1, r4, #1
   104ea:	f7f5 ffd7 	bl	649c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   104ee:	b108      	cbz	r0, 104f4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   104f0:	2000      	movs	r0, #0
   104f2:	bd10      	pop	{r4, pc}
   104f4:	2002      	movs	r0, #2
   104f6:	bd10      	pop	{r4, pc}

000104f8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   104f8:	b510      	push	{r4, lr}
   104fa:	4604      	mov	r4, r0
   104fc:	2001      	movs	r0, #1
   104fe:	f000 fa8c 	bl	10a1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10502:	b128      	cbz	r0, 10510 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10504:	4621      	mov	r1, r4
   10506:	2001      	movs	r0, #1
   10508:	f7f5 f9fc 	bl	5904 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1050c:	2000      	movs	r0, #0
   1050e:	bd10      	pop	{r4, pc}
   10510:	200c      	movs	r0, #12
   10512:	bd10      	pop	{r4, pc}

00010514 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   10514:	b510      	push	{r4, lr}
   10516:	8800      	ldrh	r0, [r0, #0]
   10518:	f7f6 f8a0 	bl	665c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1051c:	b108      	cbz	r0, 10522 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1051e:	2000      	movs	r0, #0
   10520:	bd10      	pop	{r4, pc}
   10522:	2030      	movs	r0, #48	; 0x30
   10524:	bd10      	pop	{r4, pc}

00010526 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10526:	b51c      	push	{r2, r3, r4, lr}
   10528:	4604      	mov	r4, r0
   1052a:	f7fa fc57 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   1052e:	2000      	movs	r0, #0
   10530:	f88d 0000 	strb.w	r0, [sp]
   10534:	f88d 0002 	strb.w	r0, [sp, #2]
   10538:	2003      	movs	r0, #3
   1053a:	f88d 0001 	strb.w	r0, [sp, #1]
   1053e:	f814 0b01 	ldrb.w	r0, [r4], #1
   10542:	f88d 0003 	strb.w	r0, [sp, #3]
   10546:	4668      	mov	r0, sp
   10548:	9401      	str	r4, [sp, #4]
   1054a:	f000 f8c2 	bl	106d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   1054e:	bd1c      	pop	{r2, r3, r4, pc}

00010550 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10550:	b51c      	push	{r2, r3, r4, lr}
   10552:	8801      	ldrh	r1, [r0, #0]
   10554:	f8ad 1000 	strh.w	r1, [sp]
   10558:	8841      	ldrh	r1, [r0, #2]
   1055a:	f8ad 1002 	strh.w	r1, [sp, #2]
   1055e:	8801      	ldrh	r1, [r0, #0]
   10560:	f8ad 1004 	strh.w	r1, [sp, #4]
   10564:	8840      	ldrh	r0, [r0, #2]
   10566:	f8ad 0006 	strh.w	r0, [sp, #6]
   1056a:	4668      	mov	r0, sp
   1056c:	f7fa fdaa 	bl	b0c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10570:	bd1c      	pop	{r2, r3, r4, pc}

00010572 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10572:	b510      	push	{r4, lr}
   10574:	f7f5 f9ea 	bl	594c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10578:	2000      	movs	r0, #0
   1057a:	bd10      	pop	{r4, pc}

0001057c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   1057c:	b510      	push	{r4, lr}
   1057e:	460c      	mov	r4, r1
   10580:	2100      	movs	r1, #0
   10582:	f7fd fd73 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10586:	b118      	cbz	r0, 10590 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   10588:	2c02      	cmp	r4, #2
   1058a:	d903      	bls.n	10594 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   1058c:	2012      	movs	r0, #18
   1058e:	bd10      	pop	{r4, pc}
   10590:	2002      	movs	r0, #2
   10592:	bd10      	pop	{r4, pc}
   10594:	f014 0101 	ands.w	r1, r4, #1
   10598:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   1059c:	f3c4 0240 	ubfx	r2, r4, #1, #1
   105a0:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   105a4:	d004      	beq.n	105b0 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   105a6:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   105aa:	b109      	cbz	r1, 105b0 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   105ac:	f7ff f8cd 	bl	f74a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   105b0:	2000      	movs	r0, #0
   105b2:	bd10      	pop	{r4, pc}

000105b4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   105b4:	b51c      	push	{r2, r3, r4, lr}
   105b6:	460c      	mov	r4, r1
   105b8:	4669      	mov	r1, sp
   105ba:	f7fd fff4 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   105be:	2800      	cmp	r0, #0
   105c0:	d105      	bne.n	105ce <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   105c2:	2100      	movs	r1, #0
   105c4:	4622      	mov	r2, r4
   105c6:	9801      	ldr	r0, [sp, #4]
   105c8:	f000 faf3 	bl	10bb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   105cc:	2000      	movs	r0, #0
   105ce:	bd1c      	pop	{r2, r3, r4, pc}

000105d0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   105d0:	b510      	push	{r4, lr}
   105d2:	4604      	mov	r4, r0
   105d4:	2000      	movs	r0, #0
   105d6:	f000 fa20 	bl	10a1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   105da:	b128      	cbz	r0, 105e8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   105dc:	4621      	mov	r1, r4
   105de:	2000      	movs	r0, #0
   105e0:	f7f5 f990 	bl	5904 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   105e4:	2000      	movs	r0, #0
   105e6:	bd10      	pop	{r4, pc}
   105e8:	200c      	movs	r0, #12
   105ea:	bd10      	pop	{r4, pc}

000105ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   105ec:	b510      	push	{r4, lr}
   105ee:	7800      	ldrb	r0, [r0, #0]
   105f0:	b100      	cbz	r0, 105f4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   105f2:	2001      	movs	r0, #1
   105f4:	f7f7 fdda 	bl	81ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   105f8:	2000      	movs	r0, #0
   105fa:	bd10      	pop	{r4, pc}

000105fc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   105fc:	f7fa bcde 	b.w	afbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

00010600 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10600:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10604:	4606      	mov	r6, r0
   10606:	7845      	ldrb	r5, [r0, #1]
   10608:	7800      	ldrb	r0, [r0, #0]
   1060a:	2101      	movs	r1, #1
   1060c:	f7fd fd2e 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10610:	0004      	movs	r4, r0
   10612:	d01e      	beq.n	10652 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10614:	f7fe fe48 	bl	f2a8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10618:	78f1      	ldrb	r1, [r6, #3]
   1061a:	4281      	cmp	r1, r0
   1061c:	d800      	bhi.n	10620 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   1061e:	4608      	mov	r0, r1
   10620:	4607      	mov	r7, r0
   10622:	2d04      	cmp	r5, #4
   10624:	d018      	beq.n	10658 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10626:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10628:	f7fd fe7d 	bl	e326 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1062c:	4438      	add	r0, r7
   1062e:	b281      	uxth	r1, r0
   10630:	4620      	mov	r0, r4
   10632:	2201      	movs	r2, #1
   10634:	f000 fa03 	bl	10a3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10638:	2800      	cmp	r0, #0
   1063a:	d10b      	bne.n	10654 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1063c:	2d03      	cmp	r5, #3
   1063e:	d000      	beq.n	10642 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10640:	b1df      	cbz	r7, 1067a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10642:	4620      	mov	r0, r4
   10644:	f7fe fea9 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10648:	7871      	ldrb	r1, [r6, #1]
   1064a:	2903      	cmp	r1, #3
   1064c:	d010      	beq.n	10670 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1064e:	b9a0      	cbnz	r0, 1067a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10650:	e004      	b.n	1065c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10652:	2042      	movs	r0, #66	; 0x42
   10654:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10658:	b97f      	cbnz	r7, 1067a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1065a:	e7f2      	b.n	10642 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1065c:	2904      	cmp	r1, #4
   1065e:	d107      	bne.n	10670 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10660:	4620      	mov	r0, r4
   10662:	f7ff f858 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10666:	b140      	cbz	r0, 1067a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10668:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1066a:	f7fd fe2b 	bl	e2c4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   1066e:	b120      	cbz	r0, 1067a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10670:	2d01      	cmp	r5, #1
   10672:	d004      	beq.n	1067e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10674:	2d03      	cmp	r5, #3
   10676:	d002      	beq.n	1067e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10678:	e00e      	b.n	10698 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   1067a:	2012      	movs	r0, #18
   1067c:	e7ea      	b.n	10654 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1067e:	4620      	mov	r0, r4
   10680:	f7fe fe8b 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10684:	b108      	cbz	r0, 1068a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10686:	2200      	movs	r2, #0
   10688:	e002      	b.n	10690 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1068a:	2d01      	cmp	r5, #1
   1068c:	d013      	beq.n	106b6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   1068e:	2201      	movs	r2, #1
   10690:	4668      	mov	r0, sp
   10692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10694:	f7fd fdae 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10698:	2d04      	cmp	r5, #4
   1069a:	d018      	beq.n	106ce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1069c:	6872      	ldr	r2, [r6, #4]
   1069e:	463b      	mov	r3, r7
   106a0:	2101      	movs	r1, #1
   106a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   106a4:	f7fd fdda 	bl	e25c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   106a8:	b138      	cbz	r0, 106ba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   106aa:	7870      	ldrb	r0, [r6, #1]
   106ac:	2802      	cmp	r0, #2
   106ae:	d006      	beq.n	106be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   106b0:	2803      	cmp	r0, #3
   106b2:	d004      	beq.n	106be <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   106b4:	e00b      	b.n	106ce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   106b6:	2202      	movs	r2, #2
   106b8:	e7ea      	b.n	10690 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   106ba:	2007      	movs	r0, #7
   106bc:	e7ca      	b.n	10654 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   106be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   106c0:	f7fd fe31 	bl	e326 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   106c4:	4602      	mov	r2, r0
   106c6:	2101      	movs	r1, #1
   106c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   106ca:	f7fd fe09 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   106ce:	2000      	movs	r0, #0
   106d0:	e7c0      	b.n	10654 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000106d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   106d2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   106d6:	4607      	mov	r7, r0
   106d8:	7845      	ldrb	r5, [r0, #1]
   106da:	78c6      	ldrb	r6, [r0, #3]
   106dc:	7800      	ldrb	r0, [r0, #0]
   106de:	2101      	movs	r1, #1
   106e0:	f7fd fcc4 	bl	e06c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   106e4:	0004      	movs	r4, r0
   106e6:	d003      	beq.n	106f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   106e8:	f7fe fe59 	bl	f39e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   106ec:	b118      	cbz	r0, 106f6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   106ee:	e003      	b.n	106f8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   106f0:	2042      	movs	r0, #66	; 0x42
   106f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   106f6:	2600      	movs	r6, #0
   106f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   106fa:	f7fd fe18 	bl	e32e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   106fe:	4430      	add	r0, r6
   10700:	b281      	uxth	r1, r0
   10702:	4688      	mov	r8, r1
   10704:	4620      	mov	r0, r4
   10706:	2201      	movs	r2, #1
   10708:	f000 f999 	bl	10a3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   1070c:	2800      	cmp	r0, #0
   1070e:	d1f0      	bne.n	106f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10710:	2d04      	cmp	r5, #4
   10712:	d008      	beq.n	10726 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10714:	2d03      	cmp	r5, #3
   10716:	d00a      	beq.n	1072e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10718:	b12e      	cbz	r6, 10726 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1071a:	4620      	mov	r0, r4
   1071c:	f7fe fffb 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10720:	b118      	cbz	r0, 1072a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10722:	200c      	movs	r0, #12
   10724:	e7e5      	b.n	106f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10726:	2012      	movs	r0, #18
   10728:	e7e3      	b.n	106f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1072a:	2d01      	cmp	r5, #1
   1072c:	d10c      	bne.n	10748 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   1072e:	4620      	mov	r0, r4
   10730:	f7fe fe33 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10734:	b108      	cbz	r0, 1073a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10736:	2204      	movs	r2, #4
   10738:	e002      	b.n	10740 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1073a:	2d01      	cmp	r5, #1
   1073c:	d010      	beq.n	10760 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   1073e:	2205      	movs	r2, #5
   10740:	4668      	mov	r0, sp
   10742:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10744:	f7fd fd56 	bl	e1f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10748:	687a      	ldr	r2, [r7, #4]
   1074a:	4633      	mov	r3, r6
   1074c:	2100      	movs	r1, #0
   1074e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10750:	f7fd fd84 	bl	e25c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10754:	b130      	cbz	r0, 10764 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10756:	2d02      	cmp	r5, #2
   10758:	d006      	beq.n	10768 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1075a:	2d03      	cmp	r5, #3
   1075c:	d004      	beq.n	10768 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1075e:	e008      	b.n	10772 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10760:	2206      	movs	r2, #6
   10762:	e7ed      	b.n	10740 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10764:	2007      	movs	r0, #7
   10766:	e7c4      	b.n	106f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10768:	4642      	mov	r2, r8
   1076a:	2100      	movs	r1, #0
   1076c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1076e:	f7fd fdb7 	bl	e2e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10772:	2000      	movs	r0, #0
   10774:	e7bd      	b.n	106f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010776 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10776:	b510      	push	{r4, lr}
   10778:	4604      	mov	r4, r0
   1077a:	8880      	ldrh	r0, [r0, #4]
   1077c:	b128      	cbz	r0, 1078a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1077e:	2801      	cmp	r0, #1
   10780:	d003      	beq.n	1078a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10782:	2802      	cmp	r0, #2
   10784:	d001      	beq.n	1078a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10786:	2012      	movs	r0, #18
   10788:	bd10      	pop	{r4, pc}
   1078a:	78e0      	ldrb	r0, [r4, #3]
   1078c:	f000 f9ee 	bl	10b6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10790:	b148      	cbz	r0, 107a6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10792:	78a0      	ldrb	r0, [r4, #2]
   10794:	f000 f9ea 	bl	10b6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10798:	b128      	cbz	r0, 107a6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1079a:	4620      	mov	r0, r4
   1079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107a0:	2101      	movs	r1, #1
   107a2:	f000 b890 	b.w	108c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   107a6:	2011      	movs	r0, #17
   107a8:	bd10      	pop	{r4, pc}

000107aa <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   107aa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   107ac:	460c      	mov	r4, r1
   107ae:	4605      	mov	r5, r0
   107b0:	8800      	ldrh	r0, [r0, #0]
   107b2:	4669      	mov	r1, sp
   107b4:	f7fd fef7 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   107b8:	2800      	cmp	r0, #0
   107ba:	d106      	bne.n	107ca <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   107bc:	9801      	ldr	r0, [sp, #4]
   107be:	8829      	ldrh	r1, [r5, #0]
   107c0:	8021      	strh	r1, [r4, #0]
   107c2:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   107c6:	8060      	strh	r0, [r4, #2]
   107c8:	2000      	movs	r0, #0
   107ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000107cc <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   107cc:	b510      	push	{r4, lr}
   107ce:	4604      	mov	r4, r0
   107d0:	4601      	mov	r1, r0
   107d2:	2000      	movs	r0, #0
   107d4:	f7f5 f87e 	bl	58d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   107d8:	b910      	cbnz	r0, 107e0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   107da:	2000      	movs	r0, #0
   107dc:	6020      	str	r0, [r4, #0]
   107de:	80a0      	strh	r0, [r4, #4]
   107e0:	2000      	movs	r0, #0
   107e2:	bd10      	pop	{r4, pc}

000107e4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   107e4:	b50e      	push	{r1, r2, r3, lr}
   107e6:	8800      	ldrh	r0, [r0, #0]
   107e8:	4669      	mov	r1, sp
   107ea:	f7fd fedc 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   107ee:	b960      	cbnz	r0, 1080a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   107f0:	9801      	ldr	r0, [sp, #4]
   107f2:	f000 fa37 	bl	10c64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   107f6:	b140      	cbz	r0, 1080a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   107f8:	9801      	ldr	r0, [sp, #4]
   107fa:	4601      	mov	r1, r0
   107fc:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   10800:	3078      	adds	r0, #120	; 0x78
   10802:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   10806:	b962      	cbnz	r2, 10822 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   10808:	e001      	b.n	1080e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   1080a:	2002      	movs	r0, #2
   1080c:	bd0e      	pop	{r1, r2, r3, pc}
   1080e:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   10812:	f88d 2008 	strb.w	r2, [sp, #8]
   10816:	9a02      	ldr	r2, [sp, #8]
   10818:	9202      	str	r2, [sp, #8]
   1081a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1081e:	2201      	movs	r2, #1
   10820:	b10b      	cbz	r3, 10826 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10822:	203a      	movs	r0, #58	; 0x3a
   10824:	bd0e      	pop	{r1, r2, r3, pc}
   10826:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   1082a:	079b      	lsls	r3, r3, #30
   1082c:	d008      	beq.n	10840 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   1082e:	2201      	movs	r2, #1
   10830:	304e      	adds	r0, #78	; 0x4e
   10832:	9901      	ldr	r1, [sp, #4]
   10834:	f7f6 fa9e 	bl	6d74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10838:	f7f6 fb6e 	bl	6f18 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1083c:	2000      	movs	r0, #0
   1083e:	bd0e      	pop	{r1, r2, r3, pc}
   10840:	700a      	strb	r2, [r1, #0]
   10842:	4668      	mov	r0, sp
   10844:	f7fe fa6e 	bl	ed24 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10848:	e7f8      	b.n	1083c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

0001084a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1084a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1084c:	460c      	mov	r4, r1
   1084e:	4605      	mov	r5, r0
   10850:	8800      	ldrh	r0, [r0, #0]
   10852:	4669      	mov	r1, sp
   10854:	f7fd fea7 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10858:	b108      	cbz	r0, 1085e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1085a:	2002      	movs	r0, #2
   1085c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1085e:	78a8      	ldrb	r0, [r5, #2]
   10860:	b130      	cbz	r0, 10870 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10862:	f000 f9fc 	bl	10c5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10866:	70a0      	strb	r0, [r4, #2]
   10868:	8828      	ldrh	r0, [r5, #0]
   1086a:	8020      	strh	r0, [r4, #0]
   1086c:	2000      	movs	r0, #0
   1086e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10870:	9801      	ldr	r0, [sp, #4]
   10872:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10876:	e7f6      	b.n	10866 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010878 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10878:	b510      	push	{r4, lr}
   1087a:	f7fa fc53 	bl	b124 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1087e:	2000      	movs	r0, #0
   10880:	bd10      	pop	{r4, pc}

00010882 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10882:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10886:	4604      	mov	r4, r0
   10888:	8840      	ldrh	r0, [r0, #2]
   1088a:	460d      	mov	r5, r1
   1088c:	b1b8      	cbz	r0, 108be <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1088e:	8820      	ldrh	r0, [r4, #0]
   10890:	4669      	mov	r1, sp
   10892:	f7fd fe88 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10896:	2800      	cmp	r0, #0
   10898:	d10f      	bne.n	108ba <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1089a:	8820      	ldrh	r0, [r4, #0]
   1089c:	8028      	strh	r0, [r5, #0]
   1089e:	9e01      	ldr	r6, [sp, #4]
   108a0:	f106 0510 	add.w	r5, r6, #16
   108a4:	3678      	adds	r6, #120	; 0x78
   108a6:	682f      	ldr	r7, [r5, #0]
   108a8:	8862      	ldrh	r2, [r4, #2]
   108aa:	4639      	mov	r1, r7
   108ac:	4630      	mov	r0, r6
   108ae:	f7fd ffc9 	bl	e844 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   108b2:	6828      	ldr	r0, [r5, #0]
   108b4:	42b8      	cmp	r0, r7
   108b6:	d1f6      	bne.n	108a6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   108b8:	2000      	movs	r0, #0
   108ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   108be:	2012      	movs	r0, #18
   108c0:	e7fb      	b.n	108ba <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000108c2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   108c2:	f000 b863 	b.w	1098c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000108c6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   108c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   108ca:	b086      	sub	sp, #24
   108cc:	4689      	mov	r9, r1
   108ce:	4607      	mov	r7, r0
   108d0:	8800      	ldrh	r0, [r0, #0]
   108d2:	a901      	add	r1, sp, #4
   108d4:	f7fd fe67 	bl	e5a6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   108d8:	2800      	cmp	r0, #0
   108da:	d136      	bne.n	1094a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   108dc:	9802      	ldr	r0, [sp, #8]
   108de:	4601      	mov	r1, r0
   108e0:	4688      	mov	r8, r1
   108e2:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   108e6:	f500 748c 	add.w	r4, r0, #280	; 0x118
   108ea:	f88d 1000 	strb.w	r1, [sp]
   108ee:	9900      	ldr	r1, [sp, #0]
   108f0:	9100      	str	r1, [sp, #0]
   108f2:	f89d 1000 	ldrb.w	r1, [sp]
   108f6:	3078      	adds	r0, #120	; 0x78
   108f8:	b109      	cbz	r1, 108fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   108fa:	2601      	movs	r6, #1
   108fc:	e000      	b.n	10900 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   108fe:	2600      	movs	r6, #0
   10900:	7b81      	ldrb	r1, [r0, #14]
   10902:	2921      	cmp	r1, #33	; 0x21
   10904:	d100      	bne.n	10908 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10906:	b13e      	cbz	r6, 10918 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10908:	2500      	movs	r5, #0
   1090a:	305c      	adds	r0, #92	; 0x5c
   1090c:	2108      	movs	r1, #8
   1090e:	4682      	mov	sl, r0
   10910:	f7ff fb52 	bl	ffb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   10914:	b110      	cbz	r0, 1091c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10916:	e007      	b.n	10928 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10918:	2501      	movs	r5, #1
   1091a:	e7f6      	b.n	1090a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1091c:	210b      	movs	r1, #11
   1091e:	4650      	mov	r0, sl
   10920:	f7ff fb4a 	bl	ffb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   10924:	b900      	cbnz	r0, 10928 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10926:	b17d      	cbz	r5, 10948 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   10928:	a804      	add	r0, sp, #16
   1092a:	9000      	str	r0, [sp, #0]
   1092c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10930:	ab03      	add	r3, sp, #12
   10932:	463a      	mov	r2, r7
   10934:	4641      	mov	r1, r8
   10936:	f000 f972 	bl	10c1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   1093a:	0005      	movs	r5, r0
   1093c:	d105      	bne.n	1094a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1093e:	340c      	adds	r4, #12
   10940:	20ff      	movs	r0, #255	; 0xff
   10942:	7060      	strb	r0, [r4, #1]
   10944:	b936      	cbnz	r6, 10954 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10946:	e003      	b.n	10950 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10948:	201a      	movs	r0, #26
   1094a:	b006      	add	sp, #24
   1094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10950:	7820      	ldrb	r0, [r4, #0]
   10952:	b108      	cbz	r0, 10958 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10954:	253a      	movs	r5, #58	; 0x3a
   10956:	e012      	b.n	1097e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10958:	f884 9000 	strb.w	r9, [r4]
   1095c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10960:	70a0      	strb	r0, [r4, #2]
   10962:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10966:	70e1      	strb	r1, [r4, #3]
   10968:	f88d 0000 	strb.w	r0, [sp]
   1096c:	f88d 1001 	strb.w	r1, [sp, #1]
   10970:	88b8      	ldrh	r0, [r7, #4]
   10972:	f8ad 0002 	strh.w	r0, [sp, #2]
   10976:	4669      	mov	r1, sp
   10978:	4640      	mov	r0, r8
   1097a:	f7fd fed4 	bl	e726 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1097e:	2000      	movs	r0, #0
   10980:	7060      	strb	r0, [r4, #1]
   10982:	4628      	mov	r0, r5
   10984:	e7e1      	b.n	1094a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10986:	2008      	movs	r0, #8
   10988:	f7fa bc32 	b.w	b1f0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001098c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   1098c:	b510      	push	{r4, lr}
   1098e:	f7fd fd5e 	bl	e44e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10992:	f7f5 fdb5 	bl	6500 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10996:	f7fa fc4d 	bl	b234 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1099a:	f7fe fa2d 	bl	edf8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1099e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109a2:	f7fa b9f9 	b.w	ad98 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

000109a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   109a6:	f7f8 b84b 	b.w	8a40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   109aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
   109ae:	4288      	cmp	r0, r1
   109b0:	d303      	bcc.n	109ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   109b2:	f640 0148 	movw	r1, #2120	; 0x848
   109b6:	4288      	cmp	r0, r1
   109b8:	d300      	bcc.n	109bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   109ba:	4608      	mov	r0, r1
   109bc:	b280      	uxth	r0, r0
   109be:	4770      	bx	lr
   109c0:	07c1      	lsls	r1, r0, #31
   109c2:	d001      	beq.n	109c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   109c4:	2001      	movs	r0, #1
   109c6:	4770      	bx	lr
   109c8:	0780      	lsls	r0, r0, #30
   109ca:	d501      	bpl.n	109d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   109cc:	2002      	movs	r0, #2
   109ce:	4770      	bx	lr
   109d0:	2000      	movs	r0, #0
   109d2:	4770      	bx	lr
   109d4:	b510      	push	{r4, lr}
   109d6:	2801      	cmp	r0, #1
   109d8:	d006      	beq.n	109e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   109da:	2802      	cmp	r0, #2
   109dc:	d004      	beq.n	109e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   109de:	f240 21a9 	movw	r1, #681	; 0x2a9
   109e2:	2006      	movs	r0, #6
   109e4:	f7f4 f8c0 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109e8:	bd10      	pop	{r4, pc}
   109ea:	b50e      	push	{r1, r2, r3, lr}
   109ec:	4669      	mov	r1, sp
   109ee:	2001      	movs	r0, #1
   109f0:	f7fd fb46 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   109f4:	b150      	cbz	r0, 10a0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   109f6:	f44f 71a3 	mov.w	r1, #326	; 0x146
   109fa:	2039      	movs	r0, #57	; 0x39
   109fc:	f7f4 f8b4 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a00:	9802      	ldr	r0, [sp, #8]
   10a02:	f7fe fe88 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10a06:	b108      	cbz	r0, 10a0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   10a08:	2001      	movs	r0, #1
   10a0a:	bd0e      	pop	{r1, r2, r3, pc}
   10a0c:	4668      	mov	r0, sp
   10a0e:	f7f4 faef 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10a12:	2800      	cmp	r0, #0
   10a14:	d0f4      	beq.n	10a00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   10a16:	2000      	movs	r0, #0
   10a18:	bd0e      	pop	{r1, r2, r3, pc}
   10a1a:	b510      	push	{r4, lr}
   10a1c:	f7ff ffe5 	bl	109ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10a20:	b158      	cbz	r0, 10a3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   10a22:	f7fa f9db 	bl	addc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a26:	4604      	mov	r4, r0
   10a28:	f7fe fcb9 	bl	f39e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10a2c:	b918      	cbnz	r0, 10a36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   10a2e:	4620      	mov	r0, r4
   10a30:	f7fe fcab 	bl	f38a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10a34:	b108      	cbz	r0, 10a3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   10a36:	2000      	movs	r0, #0
   10a38:	bd10      	pop	{r4, pc}
   10a3a:	2001      	movs	r0, #1
   10a3c:	bd10      	pop	{r4, pc}
   10a3e:	b570      	push	{r4, r5, r6, lr}
   10a40:	460c      	mov	r4, r1
   10a42:	4605      	mov	r5, r0
   10a44:	b112      	cbz	r2, 10a4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   10a46:	291f      	cmp	r1, #31
   10a48:	d80c      	bhi.n	10a64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   10a4a:	e016      	b.n	10a7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   10a4c:	f7f4 fd9a 	bl	5584 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10a50:	42a0      	cmp	r0, r4
   10a52:	d201      	bcs.n	10a58 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   10a54:	2007      	movs	r0, #7
   10a56:	bd70      	pop	{r4, r5, r6, pc}
   10a58:	4628      	mov	r0, r5
   10a5a:	f7fe fc9e 	bl	f39a <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10a5e:	b118      	cbz	r0, 10a68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10a60:	2c1f      	cmp	r4, #31
   10a62:	d901      	bls.n	10a68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10a64:	2012      	movs	r0, #18
   10a66:	bd70      	pop	{r4, r5, r6, pc}
   10a68:	4628      	mov	r0, r5
   10a6a:	f7fe fc9f 	bl	f3ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10a6e:	b130      	cbz	r0, 10a7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   10a70:	4621      	mov	r1, r4
   10a72:	4628      	mov	r0, r5
   10a74:	f7fe fc66 	bl	f344 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10a78:	b118      	cbz	r0, 10a82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   10a7a:	2000      	movs	r0, #0
   10a7c:	bd70      	pop	{r4, r5, r6, pc}
   10a7e:	2042      	movs	r0, #66	; 0x42
   10a80:	bd70      	pop	{r4, r5, r6, pc}
   10a82:	2045      	movs	r0, #69	; 0x45
   10a84:	bd70      	pop	{r4, r5, r6, pc}
   10a86:	b510      	push	{r4, lr}
   10a88:	4604      	mov	r4, r0
   10a8a:	7840      	ldrb	r0, [r0, #1]
   10a8c:	06c1      	lsls	r1, r0, #27
   10a8e:	d51c      	bpl.n	10aca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10a90:	07c0      	lsls	r0, r0, #31
   10a92:	d00b      	beq.n	10aac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10a94:	f7fa fb80 	bl	b198 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10a98:	b1b8      	cbz	r0, 10aca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10a9a:	7860      	ldrb	r0, [r4, #1]
   10a9c:	06c1      	lsls	r1, r0, #27
   10a9e:	d405      	bmi.n	10aac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10aa0:	0700      	lsls	r0, r0, #28
   10aa2:	d503      	bpl.n	10aac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10aa4:	7d20      	ldrb	r0, [r4, #20]
   10aa6:	2802      	cmp	r0, #2
   10aa8:	d10f      	bne.n	10aca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10aaa:	e010      	b.n	10ace <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10aac:	7d20      	ldrb	r0, [r4, #20]
   10aae:	2802      	cmp	r0, #2
   10ab0:	d001      	beq.n	10ab6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   10ab2:	7ea0      	ldrb	r0, [r4, #26]
   10ab4:	b948      	cbnz	r0, 10aca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10ab6:	7860      	ldrb	r0, [r4, #1]
   10ab8:	0700      	lsls	r0, r0, #28
   10aba:	d408      	bmi.n	10ace <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10abc:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10ac4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10ac8:	d201      	bcs.n	10ace <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10aca:	2011      	movs	r0, #17
   10acc:	bd10      	pop	{r4, pc}
   10ace:	2000      	movs	r0, #0
   10ad0:	bd10      	pop	{r4, pc}
   10ad2:	b538      	push	{r3, r4, r5, lr}
   10ad4:	4604      	mov	r4, r0
   10ad6:	7800      	ldrb	r0, [r0, #0]
   10ad8:	28ef      	cmp	r0, #239	; 0xef
   10ada:	d843      	bhi.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10adc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10ae0:	f8ad 0000 	strh.w	r0, [sp]
   10ae4:	9800      	ldr	r0, [sp, #0]
   10ae6:	f000 f91e 	bl	10d26 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x380>
   10aea:	b3a0      	cbz	r0, 10b56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   10aec:	7861      	ldrb	r1, [r4, #1]
   10aee:	0708      	lsls	r0, r1, #28
   10af0:	d40b      	bmi.n	10b0a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10af2:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10af6:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10afa:	0a02      	lsrs	r2, r0, #8
   10afc:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10b00:	d830      	bhi.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b02:	2220      	movs	r2, #32
   10b04:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10b08:	d82c      	bhi.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b0a:	7a60      	ldrb	r0, [r4, #9]
   10b0c:	b318      	cbz	r0, 10b56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   10b0e:	2807      	cmp	r0, #7
   10b10:	d828      	bhi.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b12:	7aa0      	ldrb	r0, [r4, #10]
   10b14:	b128      	cbz	r0, 10b22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10b16:	2801      	cmp	r0, #1
   10b18:	d003      	beq.n	10b22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10b1a:	2802      	cmp	r0, #2
   10b1c:	d001      	beq.n	10b22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10b1e:	2803      	cmp	r0, #3
   10b20:	d120      	bne.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b22:	074a      	lsls	r2, r1, #29
   10b24:	d403      	bmi.n	10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   10b26:	2802      	cmp	r0, #2
   10b28:	d001      	beq.n	10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   10b2a:	2803      	cmp	r0, #3
   10b2c:	d105      	bne.n	10b3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   10b2e:	7ae0      	ldrb	r0, [r4, #11]
   10b30:	b108      	cbz	r0, 10b36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   10b32:	2801      	cmp	r0, #1
   10b34:	d116      	bne.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b36:	0748      	lsls	r0, r1, #29
   10b38:	d407      	bmi.n	10b4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10b3a:	7ca0      	ldrb	r0, [r4, #18]
   10b3c:	b128      	cbz	r0, 10b4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10b3e:	2801      	cmp	r0, #1
   10b40:	d003      	beq.n	10b4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10b42:	2802      	cmp	r0, #2
   10b44:	d001      	beq.n	10b4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10b46:	2803      	cmp	r0, #3
   10b48:	d10c      	bne.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b4a:	06c8      	lsls	r0, r1, #27
   10b4c:	7d20      	ldrb	r0, [r4, #20]
   10b4e:	d503      	bpl.n	10b58 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   10b50:	2801      	cmp	r0, #1
   10b52:	d107      	bne.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b54:	e002      	b.n	10b5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   10b56:	e005      	b.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b58:	2802      	cmp	r0, #2
   10b5a:	d003      	beq.n	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10b5c:	7e20      	ldrb	r0, [r4, #24]
   10b5e:	b118      	cbz	r0, 10b68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10b60:	2801      	cmp	r0, #1
   10b62:	d001      	beq.n	10b68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10b64:	2012      	movs	r0, #18
   10b66:	bd38      	pop	{r3, r4, r5, pc}
   10b68:	2000      	movs	r0, #0
   10b6a:	bd38      	pop	{r3, r4, r5, pc}
   10b6c:	b510      	push	{r4, lr}
   10b6e:	0004      	movs	r4, r0
   10b70:	d005      	beq.n	10b7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10b72:	f7fa fb4f 	bl	b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10b76:	4384      	bics	r4, r0
   10b78:	d001      	beq.n	10b7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10b7a:	2000      	movs	r0, #0
   10b7c:	bd10      	pop	{r4, pc}
   10b7e:	2001      	movs	r0, #1
   10b80:	bd10      	pop	{r4, pc}
   10b82:	28fb      	cmp	r0, #251	; 0xfb
   10b84:	d803      	bhi.n	10b8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   10b86:	f640 0048 	movw	r0, #2120	; 0x848
   10b8a:	4281      	cmp	r1, r0
   10b8c:	d901      	bls.n	10b92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   10b8e:	2011      	movs	r0, #17
   10b90:	4770      	bx	lr
   10b92:	2000      	movs	r0, #0
   10b94:	4770      	bx	lr
   10b96:	381b      	subs	r0, #27
   10b98:	28e1      	cmp	r0, #225	; 0xe1
   10b9a:	d206      	bcs.n	10baa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10b9c:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10ba0:	d303      	bcc.n	10baa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10ba2:	f244 2090 	movw	r0, #17040	; 0x4290
   10ba6:	4281      	cmp	r1, r0
   10ba8:	d901      	bls.n	10bae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   10baa:	2012      	movs	r0, #18
   10bac:	4770      	bx	lr
   10bae:	2000      	movs	r0, #0
   10bb0:	4770      	bx	lr
   10bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bb6:	4606      	mov	r6, r0
   10bb8:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   10bbc:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   10bc0:	4615      	mov	r5, r2
   10bc2:	3030      	adds	r0, #48	; 0x30
   10bc4:	f7f7 faf8 	bl	81b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10bc8:	4680      	mov	r8, r0
   10bca:	2102      	movs	r1, #2
   10bcc:	f7fd fd7b 	bl	e6c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10bd0:	4287      	cmp	r7, r0
   10bd2:	d200      	bcs.n	10bd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   10bd4:	4638      	mov	r0, r7
   10bd6:	4607      	mov	r7, r0
   10bd8:	2102      	movs	r1, #2
   10bda:	4640      	mov	r0, r8
   10bdc:	f7fd fd73 	bl	e6c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10be0:	4284      	cmp	r4, r0
   10be2:	d200      	bcs.n	10be6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10be4:	4620      	mov	r0, r4
   10be6:	8831      	ldrh	r1, [r6, #0]
   10be8:	8029      	strh	r1, [r5, #0]
   10bea:	2f1b      	cmp	r7, #27
   10bec:	d913      	bls.n	10c16 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   10bee:	2ffb      	cmp	r7, #251	; 0xfb
   10bf0:	d300      	bcc.n	10bf4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10bf2:	27fb      	movs	r7, #251	; 0xfb
   10bf4:	806f      	strh	r7, [r5, #2]
   10bf6:	281b      	cmp	r0, #27
   10bf8:	d90f      	bls.n	10c1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   10bfa:	28fb      	cmp	r0, #251	; 0xfb
   10bfc:	d300      	bcc.n	10c00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10bfe:	20fb      	movs	r0, #251	; 0xfb
   10c00:	80e8      	strh	r0, [r5, #6]
   10c02:	4640      	mov	r0, r8
   10c04:	f7ff fed1 	bl	109aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10c08:	80a8      	strh	r0, [r5, #4]
   10c0a:	4640      	mov	r0, r8
   10c0c:	f7ff fecd 	bl	109aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10c10:	8128      	strh	r0, [r5, #8]
   10c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c16:	271b      	movs	r7, #27
   10c18:	e7ec      	b.n	10bf4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10c1a:	201b      	movs	r0, #27
   10c1c:	e7f0      	b.n	10c00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c22:	7890      	ldrb	r0, [r2, #2]
   10c24:	9e06      	ldr	r6, [sp, #24]
   10c26:	461d      	mov	r5, r3
   10c28:	4614      	mov	r4, r2
   10c2a:	b908      	cbnz	r0, 10c30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   10c2c:	f7fa faf2 	bl	b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10c30:	78e4      	ldrb	r4, [r4, #3]
   10c32:	4607      	mov	r7, r0
   10c34:	b914      	cbnz	r4, 10c3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   10c36:	f7fa faed 	bl	b214 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10c3a:	4604      	mov	r4, r0
   10c3c:	b16f      	cbz	r7, 10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10c3e:	b164      	cbz	r4, 10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10c40:	4638      	mov	r0, r7
   10c42:	f7ff febd 	bl	109c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10c46:	4620      	mov	r0, r4
   10c48:	f7ff feba 	bl	109c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10c4c:	b12f      	cbz	r7, 10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10c4e:	b124      	cbz	r4, 10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10c50:	702f      	strb	r7, [r5, #0]
   10c52:	7034      	strb	r4, [r6, #0]
   10c54:	2000      	movs	r0, #0
   10c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c5a:	2009      	movs	r0, #9
   10c5c:	e7fb      	b.n	10c56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   10c5e:	207f      	movs	r0, #127	; 0x7f
   10c60:	f000 b843 	b.w	10cea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10c64:	b508      	push	{r3, lr}
   10c66:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   10c6a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   10c6e:	f88d 0000 	strb.w	r0, [sp]
   10c72:	9800      	ldr	r0, [sp, #0]
   10c74:	9000      	str	r0, [sp, #0]
   10c76:	f89d 0000 	ldrb.w	r0, [sp]
   10c7a:	b100      	cbz	r0, 10c7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   10c7c:	2001      	movs	r0, #1
   10c7e:	1e40      	subs	r0, r0, #1
   10c80:	4208      	tst	r0, r1
   10c82:	d003      	beq.n	10c8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10c84:	2904      	cmp	r1, #4
   10c86:	d001      	beq.n	10c8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10c88:	2001      	movs	r0, #1
   10c8a:	bd08      	pop	{r3, pc}
   10c8c:	2000      	movs	r0, #0
   10c8e:	bd08      	pop	{r3, pc}
   10c90:	b510      	push	{r4, lr}
   10c92:	f7ff feaa 	bl	109ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10c96:	2800      	cmp	r0, #0
   10c98:	d000      	beq.n	10c9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f6>
   10c9a:	2001      	movs	r0, #1
   10c9c:	bd10      	pop	{r4, pc}
   10c9e:	b570      	push	{r4, r5, r6, lr}
   10ca0:	4605      	mov	r5, r0
   10ca2:	f7fe fb83 	bl	f3ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10ca6:	b170      	cbz	r0, 10cc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x320>
   10ca8:	4628      	mov	r0, r5
   10caa:	f7fe fd34 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10cae:	2800      	cmp	r0, #0
   10cb0:	d008      	beq.n	10cc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31e>
   10cb2:	4628      	mov	r0, r5
   10cb4:	f7fe fd2c 	bl	f710 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10cb8:	4604      	mov	r4, r0
   10cba:	4628      	mov	r0, r5
   10cbc:	f7fe fd02 	bl	f6c4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10cc0:	b118      	cbz	r0, 10cca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
   10cc2:	200c      	movs	r0, #12
   10cc4:	bd70      	pop	{r4, r5, r6, pc}
   10cc6:	2042      	movs	r0, #66	; 0x42
   10cc8:	bd70      	pop	{r4, r5, r6, pc}
   10cca:	b164      	cbz	r4, 10ce6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10ccc:	8820      	ldrh	r0, [r4, #0]
   10cce:	f7fd fb8b 	bl	e3e8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10cd2:	8820      	ldrh	r0, [r4, #0]
   10cd4:	2100      	movs	r1, #0
   10cd6:	f7f4 f9db 	bl	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10cda:	b120      	cbz	r0, 10ce6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10cdc:	f241 41fd 	movw	r1, #5373	; 0x14fd
   10ce0:	2039      	movs	r0, #57	; 0x39
   10ce2:	f7f3 ff41 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ce6:	2000      	movs	r0, #0
   10ce8:	bd70      	pop	{r4, r5, r6, pc}
   10cea:	b508      	push	{r3, lr}
   10cec:	f640 1288 	movw	r2, #2440	; 0x988
   10cf0:	4669      	mov	r1, sp
   10cf2:	f7f3 fe19 	bl	4928 <mpsl_fem_tx_power_split>
   10cf6:	bd08      	pop	{r3, pc}
   10cf8:	b530      	push	{r4, r5, lr}
   10cfa:	f340 0400 	sbfx	r4, r0, #0, #1
   10cfe:	f340 0040 	sbfx	r0, r0, #1, #1
   10d02:	1c40      	adds	r0, r0, #1
   10d04:	9d03      	ldr	r5, [sp, #12]
   10d06:	1c64      	adds	r4, r4, #1
   10d08:	d000      	beq.n	10d0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   10d0a:	b119      	cbz	r1, 10d14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10d0c:	b100      	cbz	r0, 10d10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36a>
   10d0e:	b10a      	cbz	r2, 10d14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10d10:	b91c      	cbnz	r4, 10d1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x374>
   10d12:	e001      	b.n	10d18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   10d14:	2011      	movs	r0, #17
   10d16:	bd30      	pop	{r4, r5, pc}
   10d18:	2100      	movs	r1, #0
   10d1a:	7019      	strb	r1, [r3, #0]
   10d1c:	b900      	cbnz	r0, 10d20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   10d1e:	2200      	movs	r2, #0
   10d20:	702a      	strb	r2, [r5, #0]
   10d22:	2000      	movs	r0, #0
   10d24:	bd30      	pop	{r4, r5, pc}
   10d26:	b2c0      	uxtb	r0, r0
   10d28:	06c1      	lsls	r1, r0, #27
   10d2a:	d40c      	bmi.n	10d46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a0>
   10d2c:	0681      	lsls	r1, r0, #26
   10d2e:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10d32:	d503      	bpl.n	10d3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x396>
   10d34:	b9d1      	cbnz	r1, 10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d36:	0781      	lsls	r1, r0, #30
   10d38:	d418      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d3a:	e001      	b.n	10d40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   10d3c:	2900      	cmp	r1, #0
   10d3e:	d1fa      	bne.n	10d36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x390>
   10d40:	0700      	lsls	r0, r0, #28
   10d42:	d413      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d44:	e010      	b.n	10d68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10d46:	0641      	lsls	r1, r0, #25
   10d48:	d410      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d4a:	0681      	lsls	r1, r0, #26
   10d4c:	d40e      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d4e:	07c1      	lsls	r1, r0, #31
   10d50:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10d54:	d004      	beq.n	10d60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10d56:	2900      	cmp	r1, #0
   10d58:	db02      	blt.n	10d60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10d5a:	0740      	lsls	r0, r0, #29
   10d5c:	d404      	bmi.n	10d68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10d5e:	e005      	b.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d60:	0701      	lsls	r1, r0, #28
   10d62:	d403      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d64:	0740      	lsls	r0, r0, #29
   10d66:	d401      	bmi.n	10d6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10d68:	2001      	movs	r0, #1
   10d6a:	4770      	bx	lr
   10d6c:	2000      	movs	r0, #0
   10d6e:	4770      	bx	lr
   10d70:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10d72:	4669      	mov	r1, sp
   10d74:	2001      	movs	r0, #1
   10d76:	f7fd f983 	bl	e080 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10d7a:	b178      	cbz	r0, 10d9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10d7c:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10d80:	2039      	movs	r0, #57	; 0x39
   10d82:	f7f3 fef1 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d86:	9c02      	ldr	r4, [sp, #8]
   10d88:	4620      	mov	r0, r4
   10d8a:	f7fe fcc4 	bl	f716 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d8e:	b128      	cbz	r0, 10d9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10d90:	4620      	mov	r0, r4
   10d92:	f7fe fb47 	bl	f424 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10d96:	b108      	cbz	r0, 10d9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10d98:	2001      	movs	r0, #1
   10d9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10d9c:	4668      	mov	r0, sp
   10d9e:	f7f4 f927 	bl	4ff0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10da2:	2800      	cmp	r0, #0
   10da4:	d0ef      	beq.n	10d86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e0>
   10da6:	2000      	movs	r0, #0
   10da8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10daa:	b510      	push	{r4, lr}
   10dac:	f7fe fcb6 	bl	f71c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10db0:	b108      	cbz	r0, 10db6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   10db2:	21e7      	movs	r1, #231	; 0xe7
   10db4:	e003      	b.n	10dbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   10db6:	f7f6 fb7d 	bl	74b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10dba:	b118      	cbz	r0, 10dc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41e>
   10dbc:	21ec      	movs	r1, #236	; 0xec
   10dbe:	2001      	movs	r0, #1
   10dc0:	f7f3 fed2 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10dc8:	2001      	movs	r0, #1
   10dca:	f7f4 b8a7 	b.w	4f1c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10dce:	6802      	ldr	r2, [r0, #0]
   10dd0:	b912      	cbnz	r2, 10dd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x432>
   10dd2:	6001      	str	r1, [r0, #0]
   10dd4:	4770      	bx	lr
   10dd6:	4602      	mov	r2, r0
   10dd8:	6850      	ldr	r0, [r2, #4]
   10dda:	b108      	cbz	r0, 10de0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   10ddc:	428a      	cmp	r2, r1
   10dde:	d1fa      	bne.n	10dd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x430>
   10de0:	428a      	cmp	r2, r1
   10de2:	d0f7      	beq.n	10dd4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42e>
   10de4:	6051      	str	r1, [r2, #4]
   10de6:	4770      	bx	lr
   10de8:	b510      	push	{r4, lr}
   10dea:	4604      	mov	r4, r0
   10dec:	e002      	b.n	10df4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44e>
   10dee:	6820      	ldr	r0, [r4, #0]
   10df0:	4780      	blx	r0
   10df2:	6864      	ldr	r4, [r4, #4]
   10df4:	2c00      	cmp	r4, #0
   10df6:	d1fa      	bne.n	10dee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x448>
   10df8:	bd10      	pop	{r4, pc}
   10dfa:	b510      	push	{r4, lr}
   10dfc:	2000      	movs	r0, #0
   10dfe:	f7f4 f88d 	bl	4f1c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10e02:	f7f4 fac5 	bl	5390 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10e06:	f7f4 fd47 	bl	5898 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10e0a:	f7f4 ff13 	bl	5c34 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10e0e:	2800      	cmp	r0, #0
   10e10:	d003      	beq.n	10e1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x474>
   10e12:	21c6      	movs	r1, #198	; 0xc6
   10e14:	2001      	movs	r0, #1
   10e16:	f7f3 fea7 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e1a:	bd10      	pop	{r4, pc}
   10e1c:	b510      	push	{r4, lr}
   10e1e:	f7ff ffc4 	bl	10daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
   10e22:	f7ff f881 	bl	ff28 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10e26:	2800      	cmp	r0, #0
   10e28:	d004      	beq.n	10e34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x48e>
   10e2a:	f240 1103 	movw	r1, #259	; 0x103
   10e2e:	2001      	movs	r0, #1
   10e30:	f7f3 fe9a 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e34:	bd10      	pop	{r4, pc}

00010e36 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10e36:	f7f3 bacf 	b.w	43d8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10e3a:	0001      	.short	0x0001
   10e3c:	0002000b 	.word	0x0002000b
   10e40:	0005000a 	.word	0x0005000a
   10e44:	000a0009 	.word	0x000a0009
   10e48:	00140008 	.word	0x00140008
   10e4c:	001e0007 	.word	0x001e0007
   10e50:	00320006 	.word	0x00320006
   10e54:	004b0005 	.word	0x004b0005
   10e58:	00640004 	.word	0x00640004
   10e5c:	00960003 	.word	0x00960003
   10e60:	00fa0002 	.word	0x00fa0002
   10e64:	01f40001 	.word	0x01f40001
	...

00010e6a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10e6a:	b510      	push	{r4, lr}
   10e6c:	f7fa fd6c 	bl	b948 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10e70:	f000 f81d 	bl	10eae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10e74:	f7fa fa42 	bl	b2fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e7c:	f7fa bb3c 	b.w	b4f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010e80 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10e80:	b510      	push	{r4, lr}
   10e82:	24c8      	movs	r4, #200	; 0xc8
   10e84:	1e64      	subs	r4, r4, #1
   10e86:	b2e4      	uxtb	r4, r4
   10e88:	f7fa fa56 	bl	b338 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10e8c:	2802      	cmp	r0, #2
   10e8e:	d003      	beq.n	10e98 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10e90:	2801      	cmp	r0, #1
   10e92:	d000      	beq.n	10e96 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10e94:	2000      	movs	r0, #0
   10e96:	bd10      	pop	{r4, pc}
   10e98:	2c00      	cmp	r4, #0
   10e9a:	d1f3      	bne.n	10e84 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10e9c:	219e      	movs	r1, #158	; 0x9e
   10e9e:	203b      	movs	r0, #59	; 0x3b
   10ea0:	f7f3 fe62 	bl	4b68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ea4:	5840      	ldr	r0, [r0, r1]
   10ea6:	2800      	cmp	r0, #0
   10ea8:	d000      	beq.n	10eac <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10eaa:	2001      	movs	r0, #1
   10eac:	4770      	bx	lr

00010eae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10eae:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10eb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10eb6:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10eba:	f3bf 8f4f 	dsb	sy
   10ebe:	f3bf 8f6f 	isb	sy
   10ec2:	f7fa bbb3 	b.w	b62c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10ec6:	2800      	cmp	r0, #0
   10ec8:	db09      	blt.n	10ede <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10eca:	f000 021f 	and.w	r2, r0, #31
   10ece:	2101      	movs	r1, #1
   10ed0:	4091      	lsls	r1, r2
   10ed2:	0940      	lsrs	r0, r0, #5
   10ed4:	0080      	lsls	r0, r0, #2
   10ed6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10eda:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ede:	4770      	bx	lr
   10ee0:	2800      	cmp	r0, #0
   10ee2:	db0d      	blt.n	10f00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10ee4:	f000 021f 	and.w	r2, r0, #31
   10ee8:	2101      	movs	r1, #1
   10eea:	4091      	lsls	r1, r2
   10eec:	0940      	lsrs	r0, r0, #5
   10eee:	0080      	lsls	r0, r0, #2
   10ef0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ef4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10ef8:	f3bf 8f4f 	dsb	sy
   10efc:	f3bf 8f6f 	isb	sy
   10f00:	4770      	bx	lr
   10f02:	5840      	ldr	r0, [r0, r1]
   10f04:	2800      	cmp	r0, #0
   10f06:	d000      	beq.n	10f0a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10f08:	2001      	movs	r0, #1
   10f0a:	4770      	bx	lr
   10f0c:	5840      	ldr	r0, [r0, r1]
   10f0e:	2800      	cmp	r0, #0
   10f10:	d000      	beq.n	10f14 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10f12:	2001      	movs	r0, #1
   10f14:	4770      	bx	lr

00010f16 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10f16:	b510      	push	{r4, lr}
   10f18:	4604      	mov	r4, r0
   10f1a:	4608      	mov	r0, r1
   10f1c:	f7fa fe3a 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10f24:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10f28:	fbb0 f0f1 	udiv	r0, r0, r1
   10f2c:	1a20      	subs	r0, r4, r0
   10f2e:	1e80      	subs	r0, r0, #2
   10f30:	bd10      	pop	{r4, pc}

00010f32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10f32:	b510      	push	{r4, lr}
   10f34:	4604      	mov	r4, r0
   10f36:	4608      	mov	r0, r1
   10f38:	f7fa fe2c 	bl	bb94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10f3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10f40:	fbb0 f0f1 	udiv	r0, r0, r1
   10f44:	1a20      	subs	r0, r4, r0
   10f46:	bd10      	pop	{r4, pc}
   10f48:	d8d8d8d8 	.word	0xd8d8d8d8
   10f4c:	d8d8d8d8 	.word	0xd8d8d8d8
   10f50:	d8d8d8d8 	.word	0xd8d8d8d8
   10f54:	d8d8d8d8 	.word	0xd8d8d8d8
   10f58:	d8d8d8d8 	.word	0xd8d8d8d8
   10f5c:	ecececec 	.word	0xecececec
   10f60:	f0f0f0f0 	.word	0xf0f0f0f0
   10f64:	f4f4f4f4 	.word	0xf4f4f4f4
   10f68:	f8f8f8f8 	.word	0xf8f8f8f8
   10f6c:	fcfcfcfc 	.word	0xfcfcfcfc
   10f70:	03020000 	.word	0x03020000
   10f74:	07060504 	.word	0x07060504
   10f78:	d8d8d808 	.word	0xd8d8d808
   10f7c:	d8d8d8d8 	.word	0xd8d8d8d8
   10f80:	d8d8d8d8 	.word	0xd8d8d8d8
   10f84:	d8d8d8d8 	.word	0xd8d8d8d8
   10f88:	d8d8d8d8 	.word	0xd8d8d8d8
   10f8c:	ecececd8 	.word	0xecececd8
   10f90:	f0f0f0ec 	.word	0xf0f0f0ec
   10f94:	f4f4f4f0 	.word	0xf4f4f4f0
   10f98:	f8f8f8f4 	.word	0xf8f8f8f4
   10f9c:	fcfcfcf8 	.word	0xfcfcfcf8
   10fa0:	000000fc 	.word	0x000000fc
   10fa4:	0403      	.short	0x0403
   10fa6:	080c      	.short	0x080c
   10fa8:	010d1702 	.word	0x010d1702
   10fac:	09090201 	.word	0x09090201
   10fb0:	02060101 	.word	0x02060101
   10fb4:	03181809 	.word	0x03181809
   10fb8:	09090101 	.word	0x09090101
   10fbc:	03050303 	.word	0x03050303
   10fc0:	02220102 	.word	0x02220102
   10fc4:	10092402 	.word	0x10092402
   10fc8:	05050404 	.word	0x05050404
   10fcc:	00000000 	.word	0x00000000

00010fd0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10fd2:	4d47      	ldr	r5, [pc, #284]	; (110f0 <bt_init+0x120>)
{
   10fd4:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10fd6:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   10fda:	6899      	ldr	r1, [r3, #8]
   10fdc:	f011 0101 	ands.w	r1, r1, #1
{
   10fe0:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10fe2:	d122      	bne.n	1102a <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10fe4:	f107 0208 	add.w	r2, r7, #8
   10fe8:	f640 4003 	movw	r0, #3075	; 0xc03
   10fec:	f005 f950 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   10ff0:	4604      	mov	r4, r0
   10ff2:	2800      	cmp	r0, #0
   10ff4:	d177      	bne.n	110e6 <bt_init+0x116>
	uint8_t status = buf->data[0];
   10ff6:	68bb      	ldr	r3, [r7, #8]
   10ff8:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10ffa:	781b      	ldrb	r3, [r3, #0]
   10ffc:	b993      	cbnz	r3, 11024 <bt_init+0x54>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ffe:	f3bf 8f5b 	dmb	ish
   11002:	462b      	mov	r3, r5
   11004:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   11008:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1100c:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11010:	f3bf 8f5b 	dmb	ish
   11014:	e853 1f00 	ldrex	r1, [r3]
   11018:	e843 2000 	strex	r0, r2, [r3]
   1101c:	2800      	cmp	r0, #0
   1101e:	d1f9      	bne.n	11014 <bt_init+0x44>
   11020:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   11024:	68b8      	ldr	r0, [r7, #8]
   11026:	f00c fb95 	bl	1d754 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1102a:	f107 0208 	add.w	r2, r7, #8
   1102e:	2100      	movs	r1, #0
   11030:	f241 0003 	movw	r0, #4099	; 0x1003
   11034:	f005 f92c 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   11038:	4604      	mov	r4, r0
   1103a:	2800      	cmp	r0, #0
   1103c:	d153      	bne.n	110e6 <bt_init+0x116>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1103e:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11040:	482c      	ldr	r0, [pc, #176]	; (110f4 <bt_init+0x124>)
   11042:	6899      	ldr	r1, [r3, #8]
   11044:	2208      	movs	r2, #8
   11046:	3101      	adds	r1, #1
   11048:	f016 fbf1 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   1104c:	68b8      	ldr	r0, [r7, #8]
   1104e:	f00c fb81 	bl	1d754 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11052:	4621      	mov	r1, r4
   11054:	f107 0208 	add.w	r2, r7, #8
   11058:	f241 0001 	movw	r0, #4097	; 0x1001
   1105c:	f005 f918 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   11060:	4604      	mov	r4, r0
   11062:	2800      	cmp	r0, #0
   11064:	d13f      	bne.n	110e6 <bt_init+0x116>
	read_local_ver_complete(rsp);
   11066:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   11068:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1106a:	785a      	ldrb	r2, [r3, #1]
   1106c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   11070:	78d9      	ldrb	r1, [r3, #3]
   11072:	789a      	ldrb	r2, [r3, #2]
   11074:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11078:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1107c:	791a      	ldrb	r2, [r3, #4]
   1107e:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11082:	7a19      	ldrb	r1, [r3, #8]
   11084:	79da      	ldrb	r2, [r3, #7]
   11086:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1108a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1108e:	795a      	ldrb	r2, [r3, #5]
   11090:	799b      	ldrb	r3, [r3, #6]
   11092:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11096:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1109a:	f00c fb5b 	bl	1d754 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1109e:	4621      	mov	r1, r4
   110a0:	f107 0208 	add.w	r2, r7, #8
   110a4:	f241 0002 	movw	r0, #4098	; 0x1002
   110a8:	f005 f8f2 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   110ac:	4604      	mov	r4, r0
   110ae:	b9d0      	cbnz	r0, 110e6 <bt_init+0x116>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   110b0:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   110b2:	4811      	ldr	r0, [pc, #68]	; (110f8 <bt_init+0x128>)
   110b4:	6899      	ldr	r1, [r3, #8]
   110b6:	2240      	movs	r2, #64	; 0x40
   110b8:	3101      	adds	r1, #1
   110ba:	f016 fbb8 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   110be:	68b8      	ldr	r0, [r7, #8]
   110c0:	f00c fb48 	bl	1d754 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   110c4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   110c8:	065a      	lsls	r2, r3, #25
   110ca:	d41b      	bmi.n	11104 <bt_init+0x134>
		BT_ERR("Non-LE capable controller detected!");
   110cc:	4b0b      	ldr	r3, [pc, #44]	; (110fc <bt_init+0x12c>)
   110ce:	61fb      	str	r3, [r7, #28]
   110d0:	480b      	ldr	r0, [pc, #44]	; (11100 <bt_init+0x130>)
   110d2:	2302      	movs	r3, #2
   110d4:	f107 0218 	add.w	r2, r7, #24
   110d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   110dc:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
   110e0:	61bb      	str	r3, [r7, #24]
   110e2:	f016 fcd6 	bl	27a92 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   110e6:	4620      	mov	r0, r4
   110e8:	3724      	adds	r7, #36	; 0x24
   110ea:	46bd      	mov	sp, r7
   110ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110ee:	bf00      	nop
   110f0:	20000350 	.word	0x20000350
   110f4:	200003c0 	.word	0x200003c0
   110f8:	200003c8 	.word	0x200003c8
   110fc:	0002d39c 	.word	0x0002d39c
   11100:	0002b504 	.word	0x0002b504
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11104:	4621      	mov	r1, r4
   11106:	f107 0208 	add.w	r2, r7, #8
   1110a:	f242 0003 	movw	r0, #8195	; 0x2003
   1110e:	f005 f8bf 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   11112:	4604      	mov	r4, r0
   11114:	2800      	cmp	r0, #0
   11116:	d1e6      	bne.n	110e6 <bt_init+0x116>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   11118:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1111a:	48bb      	ldr	r0, [pc, #748]	; (11408 <bt_init+0x438>)
   1111c:	6899      	ldr	r1, [r3, #8]
   1111e:	2208      	movs	r2, #8
   11120:	3101      	adds	r1, #1
   11122:	f016 fb84 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   11126:	68b8      	ldr	r0, [r7, #8]
   11128:	f00c fb14 	bl	1d754 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1112c:	4621      	mov	r1, r4
   1112e:	f107 0208 	add.w	r2, r7, #8
   11132:	f242 0002 	movw	r0, #8194	; 0x2002
   11136:	f005 f8ab 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   1113a:	4604      	mov	r4, r0
   1113c:	2800      	cmp	r0, #0
   1113e:	d1d2      	bne.n	110e6 <bt_init+0x116>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   11140:	68bb      	ldr	r3, [r7, #8]
   11142:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11144:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11148:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1114c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1114e:	b121      	cbz	r1, 1115a <bt_init+0x18a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   11150:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11152:	48ae      	ldr	r0, [pc, #696]	; (1140c <bt_init+0x43c>)
   11154:	4611      	mov	r1, r2
   11156:	f019 fb9e 	bl	2a896 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1115a:	68b8      	ldr	r0, [r7, #8]
   1115c:	f00c fafa 	bl	1d754 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11160:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11164:	f016 0620 	ands.w	r6, r6, #32
   11168:	f000 811a 	beq.w	113a0 <bt_init+0x3d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1116c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   11170:	071b      	lsls	r3, r3, #28
   11172:	d513      	bpl.n	1119c <bt_init+0x1cc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11174:	f107 0208 	add.w	r2, r7, #8
   11178:	2100      	movs	r1, #0
   1117a:	f242 001c 	movw	r0, #8220	; 0x201c
   1117e:	f005 f887 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11182:	4604      	mov	r4, r0
   11184:	2800      	cmp	r0, #0
   11186:	d1ae      	bne.n	110e6 <bt_init+0x116>
		le_read_supp_states_complete(rsp);
   11188:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1118a:	6883      	ldr	r3, [r0, #8]
   1118c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   11190:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11194:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   11198:	f00c fadc 	bl	1d754 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1119c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   111a0:	069e      	lsls	r6, r3, #26
   111a2:	d521      	bpl.n	111e8 <bt_init+0x218>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   111a4:	1d39      	adds	r1, r7, #4
   111a6:	1cb8      	adds	r0, r7, #2
   111a8:	f005 f8ee 	bl	16388 <hci_le_read_max_data_len>
		if (err) {
   111ac:	4604      	mov	r4, r0
   111ae:	2800      	cmp	r0, #0
   111b0:	d199      	bne.n	110e6 <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   111b2:	2104      	movs	r1, #4
   111b4:	f242 0024 	movw	r0, #8228	; 0x2024
   111b8:	f005 f830 	bl	1621c <bt_hci_cmd_create>
		if (!buf) {
   111bc:	4606      	mov	r6, r0
   111be:	2800      	cmp	r0, #0
   111c0:	f000 80f5 	beq.w	113ae <bt_init+0x3de>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   111c4:	2104      	movs	r1, #4
   111c6:	3008      	adds	r0, #8
   111c8:	f018 fd0f 	bl	29bea <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   111cc:	887b      	ldrh	r3, [r7, #2]
   111ce:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   111d0:	88bb      	ldrh	r3, [r7, #4]
   111d2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   111d4:	4622      	mov	r2, r4
   111d6:	4631      	mov	r1, r6
   111d8:	f242 0024 	movw	r0, #8228	; 0x2024
   111dc:	f005 f858 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   111e0:	4604      	mov	r4, r0
   111e2:	2800      	cmp	r0, #0
   111e4:	f47f af7f 	bne.w	110e6 <bt_init+0x116>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   111e8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   111ec:	065c      	lsls	r4, r3, #25
   111ee:	d52b      	bpl.n	11248 <bt_init+0x278>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   111f0:	2102      	movs	r1, #2
   111f2:	f242 002e 	movw	r0, #8238	; 0x202e
   111f6:	f005 f811 	bl	1621c <bt_hci_cmd_create>
		if (!buf) {
   111fa:	4604      	mov	r4, r0
   111fc:	2800      	cmp	r0, #0
   111fe:	f000 80d6 	beq.w	113ae <bt_init+0x3de>
   11202:	2102      	movs	r1, #2
   11204:	3008      	adds	r0, #8
   11206:	f018 fcf0 	bl	29bea <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   1120a:	f8b5 31a0 	ldrh.w	r3, [r5, #416]	; 0x1a0
   1120e:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   11210:	4621      	mov	r1, r4
   11212:	2200      	movs	r2, #0
   11214:	f242 002e 	movw	r0, #8238	; 0x202e
   11218:	f005 f83a 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   1121c:	4604      	mov	r4, r0
   1121e:	2800      	cmp	r0, #0
   11220:	f47f af61 	bne.w	110e6 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11224:	4601      	mov	r1, r0
   11226:	f107 0208 	add.w	r2, r7, #8
   1122a:	f242 002a 	movw	r0, #8234	; 0x202a
   1122e:	f005 f82f 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11232:	4604      	mov	r4, r0
   11234:	2800      	cmp	r0, #0
   11236:	f47f af56 	bne.w	110e6 <bt_init+0x116>
		le_read_resolving_list_size_complete(rsp);
   1123a:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   1123c:	6883      	ldr	r3, [r0, #8]
   1123e:	785b      	ldrb	r3, [r3, #1]
   11240:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11244:	f00c fa86 	bl	1d754 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   11248:	2108      	movs	r1, #8
   1124a:	f242 0001 	movw	r0, #8193	; 0x2001
   1124e:	f004 ffe5 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   11252:	4604      	mov	r4, r0
   11254:	2800      	cmp	r0, #0
   11256:	f000 80aa 	beq.w	113ae <bt_init+0x3de>
   1125a:	2108      	movs	r1, #8
   1125c:	4408      	add	r0, r1
   1125e:	f018 fcc4 	bl	29bea <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11262:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11266:	f011 0f40 	tst.w	r1, #64	; 0x40
   1126a:	4602      	mov	r2, r0
   1126c:	f240 2302 	movw	r3, #514	; 0x202
   11270:	bf08      	it	eq
   11272:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11274:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11276:	bf4c      	ite	mi
   11278:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1127c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11280:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11282:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11286:	bf48      	it	mi
   11288:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1128c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11290:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11294:	bf18      	it	ne
   11296:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1129a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1129e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   112a0:	bf48      	it	mi
   112a2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   112a6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   112a8:	bf08      	it	eq
   112aa:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   112ae:	2100      	movs	r1, #0
   112b0:	f016 fbfe 	bl	27ab0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   112b4:	4621      	mov	r1, r4
   112b6:	2200      	movs	r2, #0
   112b8:	f242 0001 	movw	r0, #8193	; 0x2001
   112bc:	f004 ffe8 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   112c0:	4604      	mov	r4, r0
   112c2:	2800      	cmp	r0, #0
   112c4:	f47f af0f 	bne.w	110e6 <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   112c8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   112cc:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   112d0:	0698      	lsls	r0, r3, #26
   112d2:	f100 8081 	bmi.w	113d8 <bt_init+0x408>
	if (bt_dev.le.acl_mtu) {
   112d6:	b9e1      	cbnz	r1, 11312 <bt_init+0x342>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   112d8:	f107 0208 	add.w	r2, r7, #8
   112dc:	f241 0005 	movw	r0, #4101	; 0x1005
   112e0:	f004 ffd6 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   112e4:	4604      	mov	r4, r0
   112e6:	2800      	cmp	r0, #0
   112e8:	f47f aefd 	bne.w	110e6 <bt_init+0x116>
	if (bt_dev.le.acl_mtu) {
   112ec:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   112f0:	b963      	cbnz	r3, 1130c <bt_init+0x33c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   112f2:	68bb      	ldr	r3, [r7, #8]
   112f4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   112f6:	785a      	ldrb	r2, [r3, #1]
   112f8:	7899      	ldrb	r1, [r3, #2]
   112fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   112fe:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11302:	889a      	ldrh	r2, [r3, #4]
   11304:	4841      	ldr	r0, [pc, #260]	; (1140c <bt_init+0x43c>)
   11306:	4611      	mov	r1, r2
   11308:	f019 fac5 	bl	2a896 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1130c:	68b8      	ldr	r0, [r7, #8]
   1130e:	f00c fa21 	bl	1d754 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11312:	2108      	movs	r1, #8
   11314:	f640 4001 	movw	r0, #3073	; 0xc01
   11318:	f004 ff80 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   1131c:	4604      	mov	r4, r0
   1131e:	2800      	cmp	r0, #0
   11320:	d045      	beq.n	113ae <bt_init+0x3de>
   11322:	2108      	movs	r1, #8
   11324:	4408      	add	r0, r1
   11326:	f018 fc60 	bl	29bea <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1132a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1132e:	07d9      	lsls	r1, r3, #31
   11330:	4602      	mov	r2, r0
   11332:	d561      	bpl.n	113f8 <bt_init+0x428>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11334:	a132      	add	r1, pc, #200	; (adr r1, 11400 <bt_init+0x430>)
   11336:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1133a:	f016 fbb9 	bl	27ab0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1133e:	4621      	mov	r1, r4
   11340:	2200      	movs	r2, #0
   11342:	f640 4001 	movw	r0, #3073	; 0xc01
   11346:	f004 ffa3 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1134a:	4604      	mov	r4, r0
   1134c:	2800      	cmp	r0, #0
   1134e:	f47f aeca 	bne.w	110e6 <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11352:	4601      	mov	r1, r0
   11354:	1d3a      	adds	r2, r7, #4
   11356:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1135a:	f004 ff99 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1135e:	2800      	cmp	r0, #0
   11360:	d05e      	beq.n	11420 <bt_init+0x450>
		BT_WARN("Vendor HCI extensions not available");
   11362:	4b2b      	ldr	r3, [pc, #172]	; (11410 <bt_init+0x440>)
   11364:	61fb      	str	r3, [r7, #28]
   11366:	2302      	movs	r3, #2
   11368:	61bb      	str	r3, [r7, #24]
			BT_WARN("Failed to read supported vendor features");
   1136a:	482a      	ldr	r0, [pc, #168]	; (11414 <bt_init+0x444>)
   1136c:	f107 0218 	add.w	r2, r7, #24
   11370:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11374:	f016 fb8d 	bl	27a92 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   11378:	f006 fa76 	bl	17868 <bt_id_init>
	if (err) {
   1137c:	4604      	mov	r4, r0
   1137e:	2800      	cmp	r0, #0
   11380:	f47f aeb1 	bne.w	110e6 <bt_init+0x116>
		err = bt_conn_init();
   11384:	f007 f93a 	bl	185fc <bt_conn_init>
		if (err) {
   11388:	4604      	mov	r4, r0
   1138a:	2800      	cmp	r0, #0
   1138c:	f47f aeab 	bne.w	110e6 <bt_init+0x116>
		if (!bt_dev.id_count) {
   11390:	79eb      	ldrb	r3, [r5, #7]
   11392:	2b00      	cmp	r3, #0
   11394:	f040 80d6 	bne.w	11544 <bt_init+0x574>
   11398:	f004 fb40 	bl	15a1c <bt_init.part.0>
   1139c:	4604      	mov	r4, r0
   1139e:	e6a2      	b.n	110e6 <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   113a0:	2102      	movs	r1, #2
   113a2:	f640 406d 	movw	r0, #3181	; 0xc6d
   113a6:	f004 ff39 	bl	1621c <bt_hci_cmd_create>
		if (!buf) {
   113aa:	4604      	mov	r4, r0
   113ac:	b910      	cbnz	r0, 113b4 <bt_init+0x3e4>
		return -ENOBUFS;
   113ae:	f06f 0468 	mvn.w	r4, #104	; 0x68
   113b2:	e698      	b.n	110e6 <bt_init+0x116>
   113b4:	2102      	movs	r1, #2
   113b6:	3008      	adds	r0, #8
   113b8:	f018 fc17 	bl	29bea <net_buf_simple_add>
		cp_le->le = 0x01;
   113bc:	2301      	movs	r3, #1
   113be:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   113c0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   113c2:	4621      	mov	r1, r4
   113c4:	4632      	mov	r2, r6
   113c6:	f640 406d 	movw	r0, #3181	; 0xc6d
   113ca:	f004 ff61 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   113ce:	4604      	mov	r4, r0
   113d0:	2800      	cmp	r0, #0
   113d2:	f43f aecb 	beq.w	1116c <bt_init+0x19c>
   113d6:	e686      	b.n	110e6 <bt_init+0x116>
	else if (!bt_dev.le.acl_mtu) {
   113d8:	2900      	cmp	r1, #0
   113da:	d19a      	bne.n	11312 <bt_init+0x342>
		BT_ERR("ACL BR/EDR buffers not initialized");
   113dc:	4b0e      	ldr	r3, [pc, #56]	; (11418 <bt_init+0x448>)
   113de:	61fb      	str	r3, [r7, #28]
   113e0:	480c      	ldr	r0, [pc, #48]	; (11414 <bt_init+0x444>)
   113e2:	2302      	movs	r3, #2
   113e4:	f107 0218 	add.w	r2, r7, #24
   113e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   113ec:	61bb      	str	r3, [r7, #24]
		return -EIO;
   113ee:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
   113f2:	f016 fb4e 	bl	27a92 <z_log_msg_static_create.constprop.0>
	if (err) {
   113f6:	e676      	b.n	110e6 <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   113f8:	4808      	ldr	r0, [pc, #32]	; (1141c <bt_init+0x44c>)
   113fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   113fe:	e79c      	b.n	1133a <bt_init+0x36a>
   11400:	02008890 	.word	0x02008890
   11404:	20008000 	.word	0x20008000
   11408:	20000420 	.word	0x20000420
   1140c:	20000450 	.word	0x20000450
   11410:	0002d3e3 	.word	0x0002d3e3
   11414:	0002b504 	.word	0x0002b504
   11418:	0002d3c0 	.word	0x0002d3c0
   1141c:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   11420:	687b      	ldr	r3, [r7, #4]
   11422:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   11424:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11428:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1142a:	bf96      	itet	ls
   1142c:	4a49      	ldrls	r2, [pc, #292]	; (11554 <bt_init+0x584>)
	return "unknown";
   1142e:	494a      	ldrhi	r1, [pc, #296]	; (11558 <bt_init+0x588>)
		return plat_str[platform];
   11430:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   11434:	466e      	mov	r6, sp
   11436:	b08a      	sub	sp, #40	; 0x28
   11438:	466a      	mov	r2, sp
   1143a:	4848      	ldr	r0, [pc, #288]	; (1155c <bt_init+0x58c>)
   1143c:	61d3      	str	r3, [r2, #28]
   1143e:	2302      	movs	r3, #2
   11440:	f882 3020 	strb.w	r3, [r2, #32]
   11444:	4b46      	ldr	r3, [pc, #280]	; (11560 <bt_init+0x590>)
   11446:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1144a:	f842 3f10 	str.w	r3, [r2, #16]!
   1144e:	4845      	ldr	r0, [pc, #276]	; (11564 <bt_init+0x594>)
   11450:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   11454:	f016 fb1d 	bl	27a92 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11458:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   1145c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11460:	2a02      	cmp	r2, #2
   11462:	46b5      	mov	sp, r6
   11464:	d149      	bne.n	114fa <bt_init+0x52a>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11466:	2b03      	cmp	r3, #3
   11468:	d847      	bhi.n	114fa <bt_init+0x52a>
		return nordic_str[variant];
   1146a:	4a3f      	ldr	r2, [pc, #252]	; (11568 <bt_init+0x598>)
   1146c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   11470:	466e      	mov	r6, sp
   11472:	b08a      	sub	sp, #40	; 0x28
   11474:	466a      	mov	r2, sp
   11476:	483d      	ldr	r0, [pc, #244]	; (1156c <bt_init+0x59c>)
   11478:	61d3      	str	r3, [r2, #28]
   1147a:	2302      	movs	r3, #2
   1147c:	f882 3020 	strb.w	r3, [r2, #32]
   11480:	4b37      	ldr	r3, [pc, #220]	; (11560 <bt_init+0x590>)
   11482:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11486:	f842 3f10 	str.w	r3, [r2, #16]!
   1148a:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   1148e:	4835      	ldr	r0, [pc, #212]	; (11564 <bt_init+0x594>)
   11490:	f016 faff 	bl	27a92 <z_log_msg_static_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11494:	7963      	ldrb	r3, [r4, #5]
   11496:	f894 e006 	ldrb.w	lr, [r4, #6]
   1149a:	f8b4 c007 	ldrh.w	ip, [r4, #7]
   1149e:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   114a2:	2b03      	cmp	r3, #3
		return var_str[variant];
   114a4:	bf96      	itet	ls
   114a6:	4a32      	ldrls	r2, [pc, #200]	; (11570 <bt_init+0x5a0>)
	return "unknown";
   114a8:	492b      	ldrhi	r1, [pc, #172]	; (11558 <bt_init+0x588>)
		return var_str[variant];
   114aa:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   114ae:	46b5      	mov	sp, r6
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   114b0:	466e      	mov	r6, sp
   114b2:	b08c      	sub	sp, #48	; 0x30
   114b4:	466a      	mov	r2, sp
   114b6:	4c2f      	ldr	r4, [pc, #188]	; (11574 <bt_init+0x5a4>)
   114b8:	e9c2 3e07 	strd	r3, lr, [r2, #28]
   114bc:	e9c2 4105 	strd	r4, r1, [r2, #20]
   114c0:	4b2d      	ldr	r3, [pc, #180]	; (11578 <bt_init+0x5a8>)
   114c2:	2402      	movs	r4, #2
   114c4:	e9c2 c009 	strd	ip, r0, [r2, #36]	; 0x24
   114c8:	f882 402c 	strb.w	r4, [r2, #44]	; 0x2c
   114cc:	f44f 516b 	mov.w	r1, #15040	; 0x3ac0
   114d0:	f842 3f10 	str.w	r3, [r2, #16]!
   114d4:	4823      	ldr	r0, [pc, #140]	; (11564 <bt_init+0x594>)
   114d6:	f016 fadc 	bl	27a92 <z_log_msg_static_create.constprop.0>
   114da:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   114dc:	6878      	ldr	r0, [r7, #4]
   114de:	f00c f939 	bl	1d754 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   114e2:	1d3a      	adds	r2, r7, #4
   114e4:	2100      	movs	r1, #0
   114e6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   114ea:	f004 fed1 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   114ee:	4606      	mov	r6, r0
   114f0:	b128      	cbz	r0, 114fe <bt_init+0x52e>
		BT_WARN("Failed to read supported vendor commands");
   114f2:	4b22      	ldr	r3, [pc, #136]	; (1157c <bt_init+0x5ac>)
			BT_WARN("Failed to read supported vendor features");
   114f4:	e9c7 4306 	strd	r4, r3, [r7, #24]
   114f8:	e737      	b.n	1136a <bt_init+0x39a>
		return "unknown";
   114fa:	4917      	ldr	r1, [pc, #92]	; (11558 <bt_init+0x588>)
   114fc:	e7b8      	b.n	11470 <bt_init+0x4a0>
	rp.cmds = (void *)rsp->data;
   114fe:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11500:	481f      	ldr	r0, [pc, #124]	; (11580 <bt_init+0x5b0>)
   11502:	6899      	ldr	r1, [r3, #8]
   11504:	4622      	mov	r2, r4
   11506:	3101      	adds	r1, #1
   11508:	f016 f991 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   1150c:	6878      	ldr	r0, [r7, #4]
   1150e:	f00c f921 	bl	1d754 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11512:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   11516:	075b      	lsls	r3, r3, #29
   11518:	f57f af2e 	bpl.w	11378 <bt_init+0x3a8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1151c:	1d3a      	adds	r2, r7, #4
   1151e:	4631      	mov	r1, r6
   11520:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11524:	f004 feb4 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11528:	b108      	cbz	r0, 1152e <bt_init+0x55e>
			BT_WARN("Failed to read supported vendor features");
   1152a:	4b16      	ldr	r3, [pc, #88]	; (11584 <bt_init+0x5b4>)
   1152c:	e7e2      	b.n	114f4 <bt_init+0x524>
		rp.feat = (void *)rsp->data;
   1152e:	687b      	ldr	r3, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11530:	4815      	ldr	r0, [pc, #84]	; (11588 <bt_init+0x5b8>)
   11532:	6899      	ldr	r1, [r3, #8]
   11534:	2201      	movs	r2, #1
   11536:	4411      	add	r1, r2
   11538:	f016 f979 	bl	2782e <memcpy>
		net_buf_unref(rsp);
   1153c:	6878      	ldr	r0, [r7, #4]
   1153e:	f00c f909 	bl	1d754 <net_buf_unref>
   11542:	e719      	b.n	11378 <bt_init+0x3a8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11544:	2108      	movs	r1, #8
   11546:	4811      	ldr	r0, [pc, #68]	; (1158c <bt_init+0x5bc>)
   11548:	f016 fa8f 	bl	27a6a <atomic_or>
	bt_finalize_init();
   1154c:	f005 fbd8 	bl	16d00 <bt_finalize_init>
	return 0;
   11550:	e5c9      	b.n	110e6 <bt_init+0x116>
   11552:	bf00      	nop
   11554:	0002bcb4 	.word	0x0002bcb4
   11558:	0002cea7 	.word	0x0002cea7
   1155c:	0002d407 	.word	0x0002d407
   11560:	01000004 	.word	0x01000004
   11564:	0002b504 	.word	0x0002b504
   11568:	0002bc74 	.word	0x0002bc74
   1156c:	0002d420 	.word	0x0002d420
   11570:	0002bcec 	.word	0x0002bcec
   11574:	0002d438 	.word	0x0002d438
   11578:	01000007 	.word	0x01000007
   1157c:	0002d465 	.word	0x0002d465
   11580:	20000409 	.word	0x20000409
   11584:	0002d48e 	.word	0x0002d48e
   11588:	20000408 	.word	0x20000408
   1158c:	2000041c 	.word	0x2000041c

00011590 <AD5940_SEQGenSearchReg>:
static AD5940Err AD5940_SEQGenSearchReg(uint32_t RegAddr, uint32_t *pIndex)
{
  uint32_t i;

  RegAddr = (RegAddr>>2)&0xff;
  for(i=0;i<SeqGenDB.RegCount;i++)
   11590:	4b0a      	ldr	r3, [pc, #40]	; (115bc <AD5940_SEQGenSearchReg+0x2c>)
{
   11592:	b530      	push	{r4, r5, lr}
  RegAddr = (RegAddr>>2)&0xff;
   11594:	f3c0 0087 	ubfx	r0, r0, #2, #8
  {
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   11598:	e9d3 4204 	ldrd	r4, r2, [r3, #16]
  for(i=0;i<SeqGenDB.RegCount;i++)
   1159c:	2300      	movs	r3, #0
   1159e:	429a      	cmp	r2, r3
   115a0:	d102      	bne.n	115a8 <AD5940_SEQGenSearchReg+0x18>
    {
      *pIndex = i;
      return AD5940ERR_OK;
    }
  }
  return AD5940ERR_SEQREG;
   115a2:	f06f 0006 	mvn.w	r0, #6
   115a6:	e005      	b.n	115b4 <AD5940_SEQGenSearchReg+0x24>
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   115a8:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
   115ac:	4285      	cmp	r5, r0
   115ae:	d102      	bne.n	115b6 <AD5940_SEQGenSearchReg+0x26>
      *pIndex = i;
   115b0:	600b      	str	r3, [r1, #0]
      return AD5940ERR_OK;
   115b2:	2000      	movs	r0, #0
}
   115b4:	bd30      	pop	{r4, r5, pc}
  for(i=0;i<SeqGenDB.RegCount;i++)
   115b6:	3301      	adds	r3, #1
   115b8:	e7f1      	b.n	1159e <AD5940_SEQGenSearchReg+0xe>
   115ba:	bf00      	nop
   115bc:	20002548 	.word	0x20002548

000115c0 <AD5940_SEQRegInfoInsert>:
 * @return Return None.
*/
static void AD5940_SEQRegInfoInsert(uint16_t RegAddr, uint32_t RegData)
{
  uint32_t temp;
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   115c0:	4b0d      	ldr	r3, [pc, #52]	; (115f8 <AD5940_SEQRegInfoInsert+0x38>)
{
   115c2:	b530      	push	{r4, r5, lr}
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   115c4:	695a      	ldr	r2, [r3, #20]
   115c6:	68dc      	ldr	r4, [r3, #12]
  
  if(temp < SeqGenDB.BufferSize)
   115c8:	685d      	ldr	r5, [r3, #4]
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   115ca:	4414      	add	r4, r2
  if(temp < SeqGenDB.BufferSize)
   115cc:	42a5      	cmp	r5, r4
   115ce:	d90e      	bls.n	115ee <AD5940_SEQRegInfoInsert+0x2e>
  {
    SeqGenDB.pRegInfo --; /* Move back */
   115d0:	691c      	ldr	r4, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   115d2:	0880      	lsrs	r0, r0, #2
    SeqGenDB.pRegInfo --; /* Move back */
   115d4:	1f25      	subs	r5, r4, #4
   115d6:	611d      	str	r5, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   115d8:	f804 0c04 	strb.w	r0, [r4, #-4]
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   115dc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   115e0:	3201      	adds	r2, #1
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   115e2:	f361 201f 	bfi	r0, r1, #8, #24
   115e6:	f844 0c04 	str.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   115ea:	615a      	str	r2, [r3, #20]
  }
  else  /* There is no more buffer  */
  {
    SeqGenDB.LastError = AD5940ERR_BUFF;
  }
}
   115ec:	bd30      	pop	{r4, r5, pc}
    SeqGenDB.LastError = AD5940ERR_BUFF;
   115ee:	f06f 0203 	mvn.w	r2, #3
   115f2:	619a      	str	r2, [r3, #24]
}
   115f4:	e7fa      	b.n	115ec <AD5940_SEQRegInfoInsert+0x2c>
   115f6:	bf00      	nop
   115f8:	20002548 	.word	0x20002548

000115fc <AD5940_SEQGenInsert>:
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   115fc:	4b09      	ldr	r3, [pc, #36]	; (11624 <AD5940_SEQGenInsert+0x28>)
   115fe:	68d9      	ldr	r1, [r3, #12]
   11600:	695a      	ldr	r2, [r3, #20]
{
   11602:	b510      	push	{r4, lr}
  if(temp < SeqGenDB.BufferSize)
   11604:	685c      	ldr	r4, [r3, #4]
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   11606:	440a      	add	r2, r1
  if(temp < SeqGenDB.BufferSize)
   11608:	4294      	cmp	r4, r2
    SeqGenDB.pSeqBuff[SeqGenDB.SeqLen] = CmdWord;
   1160a:	bf83      	ittte	hi
   1160c:	689a      	ldrhi	r2, [r3, #8]
   1160e:	f842 0021 	strhi.w	r0, [r2, r1, lsl #2]
    SeqGenDB.SeqLen ++;
   11612:	68da      	ldrhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   11614:	f06f 0203 	mvnls.w	r2, #3
    SeqGenDB.SeqLen ++;
   11618:	bf86      	itte	hi
   1161a:	3201      	addhi	r2, #1
   1161c:	60da      	strhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   1161e:	619a      	strls	r2, [r3, #24]
}
   11620:	bd10      	pop	{r4, pc}
   11622:	bf00      	nop
   11624:	20002548 	.word	0x20002548

00011628 <AD5940_SEQGenInit>:
 * @param BufferSize: The buffer length.
 * @return Return None.
*/
void AD5940_SEQGenInit(uint32_t *pBuffer, uint32_t BufferSize)
{
  if(BufferSize < 2) return;
   11628:	2901      	cmp	r1, #1
   1162a:	d90d      	bls.n	11648 <AD5940_SEQGenInit+0x20>
  SeqGenDB.BufferSize = BufferSize;
   1162c:	4b07      	ldr	r3, [pc, #28]	; (1164c <AD5940_SEQGenInit+0x24>)
  SeqGenDB.pSeqBuff = pBuffer;
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
  SeqGenDB.SeqLen = 0;
   1162e:	2200      	movs	r2, #0
  SeqGenDB.pSeqBuff = pBuffer;
   11630:	e9c3 1001 	strd	r1, r0, [r3, #4]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   11634:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11638:	3901      	subs	r1, #1

  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   1163a:	e9c3 2205 	strd	r2, r2, [r3, #20]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   1163e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11642:	6118      	str	r0, [r3, #16]
  SeqGenDB.SeqLen = 0;
   11644:	60da      	str	r2, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   11646:	701a      	strb	r2, [r3, #0]
}
   11648:	4770      	bx	lr
   1164a:	bf00      	nop
   1164c:	20002548 	.word	0x20002548

00011650 <AD5940_SEQGenFetchSeq>:
*/
AD5940Err AD5940_SEQGenFetchSeq(const uint32_t **ppSeqCmd, uint32_t *pSeqLen)
{
  AD5940Err lasterror;

  if(ppSeqCmd)
   11650:	4b04      	ldr	r3, [pc, #16]	; (11664 <AD5940_SEQGenFetchSeq+0x14>)
   11652:	b108      	cbz	r0, 11658 <AD5940_SEQGenFetchSeq+0x8>
    *ppSeqCmd = SeqGenDB.pSeqBuff;  
   11654:	689a      	ldr	r2, [r3, #8]
   11656:	6002      	str	r2, [r0, #0]
  if(pSeqLen)
   11658:	b109      	cbz	r1, 1165e <AD5940_SEQGenFetchSeq+0xe>
    *pSeqLen = SeqGenDB.SeqLen;
   1165a:	68da      	ldr	r2, [r3, #12]
   1165c:	600a      	str	r2, [r1, #0]

  //SeqGenDB.SeqLen = 0;  /* Start a new sequence */
  lasterror = SeqGenDB.LastError;
  //SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
  return lasterror;
}
   1165e:	6998      	ldr	r0, [r3, #24]
   11660:	4770      	bx	lr
   11662:	bf00      	nop
   11664:	20002548 	.word	0x20002548

00011668 <AD5940_SEQGenCtrl>:
 * @param bFlag: Enable or disable sequencer generator.
 * @return Return None.
*/
void AD5940_SEQGenCtrl(BoolFlag bFlag)
{
  if(bFlag == bFALSE) /* Disable sequence generator */
   11668:	4b04      	ldr	r3, [pc, #16]	; (1167c <AD5940_SEQGenCtrl+0x14>)
   1166a:	b908      	cbnz	r0, 11670 <AD5940_SEQGenCtrl+0x8>
  {
    SeqGenDB.EngineStart = bFALSE;
   1166c:	7018      	strb	r0, [r3, #0]
   1166e:	4770      	bx	lr
  }
  else
  {
    SeqGenDB.SeqLen = 0;
   11670:	2200      	movs	r2, #0
   11672:	60da      	str	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
   11674:	619a      	str	r2, [r3, #24]
    SeqGenDB.EngineStart = bTRUE;
   11676:	2201      	movs	r2, #1
   11678:	701a      	strb	r2, [r3, #0]
  }
}
   1167a:	4770      	bx	lr
   1167c:	20002548 	.word	0x20002548

00011680 <AD5940_Notch50HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, only need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 50Hz filter is available.
*/
BoolFlag AD5940_Notch50HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   11680:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11682:	68c4      	ldr	r4, [r0, #12]
   11684:	2c01      	cmp	r4, #1
{
   11686:	b086      	sub	sp, #24
   11688:	4605      	mov	r5, r0
   1168a:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   1168c:	d120      	bne.n	116d0 <AD5940_Notch50HzAvailable+0x50>
   1168e:	6803      	ldr	r3, [r0, #0]
   11690:	2b02      	cmp	r3, #2
   11692:	d133      	bne.n	116fc <AD5940_Notch50HzAvailable+0x7c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   11694:	4b23      	ldr	r3, [pc, #140]	; (11724 <AD5940_Notch50HzAvailable+0xa4>)
   11696:	6818      	ldr	r0, [r3, #0]
   11698:	791b      	ldrb	r3, [r3, #4]
   1169a:	f88d 300c 	strb.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   1169e:	4b22      	ldr	r3, [pc, #136]	; (11728 <AD5940_Notch50HzAvailable+0xa8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   116a0:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   116a2:	6818      	ldr	r0, [r3, #0]
   116a4:	791b      	ldrb	r3, [r3, #4]
   116a6:	f88d 3014 	strb.w	r3, [sp, #20]
   116aa:	9004      	str	r0, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   116ac:	f10d 0307 	add.w	r3, sp, #7
   116b0:	2205      	movs	r2, #5
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
    const uint8_t dl_50Hz[] = {18,15,12};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   116b2:	7928      	ldrb	r0, [r5, #4]
   116b4:	a902      	add	r1, sp, #8
   116b6:	f014 f8db 	bl	25870 <_is_value_in_table>
   116ba:	b378      	cbz	r0, 1171c <AD5940_Notch50HzAvailable+0x9c>
    {
      *dl = dl_50Hz[index];
   116bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   116c0:	aa06      	add	r2, sp, #24
   116c2:	4413      	add	r3, r2
      return bTRUE;
   116c4:	2001      	movs	r0, #1
      *dl = dl_50Hz[index];
   116c6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   116ca:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   116cc:	b006      	add	sp, #24
   116ce:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   116d0:	bb24      	cbnz	r4, 1171c <AD5940_Notch50HzAvailable+0x9c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   116d2:	6803      	ldr	r3, [r0, #0]
   116d4:	2b02      	cmp	r3, #2
   116d6:	d1dd      	bne.n	11694 <AD5940_Notch50HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   116d8:	4b14      	ldr	r3, [pc, #80]	; (1172c <AD5940_Notch50HzAvailable+0xac>)
   116da:	881a      	ldrh	r2, [r3, #0]
   116dc:	789b      	ldrb	r3, [r3, #2]
   116de:	f88d 300a 	strb.w	r3, [sp, #10]
    const uint8_t dl_50Hz[] = {18,15,12};
   116e2:	4b13      	ldr	r3, [pc, #76]	; (11730 <AD5940_Notch50HzAvailable+0xb0>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   116e4:	f8ad 2008 	strh.w	r2, [sp, #8]
    const uint8_t dl_50Hz[] = {18,15,12};
   116e8:	881a      	ldrh	r2, [r3, #0]
   116ea:	789b      	ldrb	r3, [r3, #2]
   116ec:	f8ad 2010 	strh.w	r2, [sp, #16]
   116f0:	f88d 3012 	strb.w	r3, [sp, #18]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   116f4:	2203      	movs	r2, #3
   116f6:	f10d 0307 	add.w	r3, sp, #7
   116fa:	e7da      	b.n	116b2 <AD5940_Notch50HzAvailable+0x32>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   116fc:	4b0d      	ldr	r3, [pc, #52]	; (11734 <AD5940_Notch50HzAvailable+0xb4>)
   116fe:	6818      	ldr	r0, [r3, #0]
   11700:	889b      	ldrh	r3, [r3, #4]
   11702:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   11706:	4b0c      	ldr	r3, [pc, #48]	; (11738 <AD5940_Notch50HzAvailable+0xb8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   11708:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   1170a:	6818      	ldr	r0, [r3, #0]
   1170c:	889b      	ldrh	r3, [r3, #4]
   1170e:	f8ad 3014 	strh.w	r3, [sp, #20]
   11712:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11714:	f10d 0307 	add.w	r3, sp, #7
   11718:	2206      	movs	r2, #6
   1171a:	e7ca      	b.n	116b2 <AD5940_Notch50HzAvailable+0x32>
  *dl = 0;
   1171c:	2000      	movs	r0, #0
   1171e:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   11720:	e7d4      	b.n	116cc <AD5940_Notch50HzAvailable+0x4c>
   11722:	bf00      	nop
   11724:	0002c400 	.word	0x0002c400
   11728:	0002c406 	.word	0x0002c406
   1172c:	0002c40c 	.word	0x0002c40c
   11730:	0002c410 	.word	0x0002c410
   11734:	0002c414 	.word	0x0002c414
   11738:	0002c41b 	.word	0x0002c41b

0001173c <AD5940_Notch60HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 60Hz filter is available.
*/
BoolFlag AD5940_Notch60HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   1173c:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   1173e:	68c4      	ldr	r4, [r0, #12]
   11740:	2c01      	cmp	r4, #1
{
   11742:	b086      	sub	sp, #24
   11744:	4605      	mov	r5, r0
   11746:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11748:	d11c      	bne.n	11784 <AD5940_Notch60HzAvailable+0x48>
   1174a:	6803      	ldr	r3, [r0, #0]
   1174c:	2b02      	cmp	r3, #2
   1174e:	d128      	bne.n	117a2 <AD5940_Notch60HzAvailable+0x66>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_667, ADCSINC2OSR_1333};
   11750:	f640 3307 	movw	r3, #2823	; 0xb07
   11754:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {10,5};
   11758:	f240 530a 	movw	r3, #1290	; 0x50a
   1175c:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11760:	2202      	movs	r2, #2
   11762:	f10d 0307 	add.w	r3, sp, #7
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
    const uint8_t dl_60Hz[] = {15,10};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11766:	7928      	ldrb	r0, [r5, #4]
   11768:	a902      	add	r1, sp, #8
   1176a:	f014 f881 	bl	25870 <_is_value_in_table>
   1176e:	b340      	cbz	r0, 117c2 <AD5940_Notch60HzAvailable+0x86>
    {
      *dl = dl_60Hz[index];
   11770:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11774:	aa06      	add	r2, sp, #24
   11776:	4413      	add	r3, r2
      return bTRUE;
   11778:	2001      	movs	r0, #1
      *dl = dl_60Hz[index];
   1177a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1177e:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   11780:	b006      	add	sp, #24
   11782:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11784:	b9ec      	cbnz	r4, 117c2 <AD5940_Notch60HzAvailable+0x86>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   11786:	6802      	ldr	r2, [r0, #0]
   11788:	2a02      	cmp	r2, #2
   1178a:	d1e1      	bne.n	11750 <AD5940_Notch60HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
   1178c:	f640 3309 	movw	r3, #2825	; 0xb09
   11790:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10};
   11794:	f640 230f 	movw	r3, #2575	; 0xa0f
   11798:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   1179c:	f10d 0307 	add.w	r3, sp, #7
   117a0:	e7e1      	b.n	11766 <AD5940_Notch60HzAvailable+0x2a>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   117a2:	4b09      	ldr	r3, [pc, #36]	; (117c8 <AD5940_Notch60HzAvailable+0x8c>)
   117a4:	6818      	ldr	r0, [r3, #0]
   117a6:	889b      	ldrh	r3, [r3, #4]
   117a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   117ac:	4b07      	ldr	r3, [pc, #28]	; (117cc <AD5940_Notch60HzAvailable+0x90>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   117ae:	9002      	str	r0, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   117b0:	6818      	ldr	r0, [r3, #0]
   117b2:	889b      	ldrh	r3, [r3, #4]
   117b4:	f8ad 3014 	strh.w	r3, [sp, #20]
   117b8:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   117ba:	f10d 0307 	add.w	r3, sp, #7
   117be:	2206      	movs	r2, #6
   117c0:	e7d1      	b.n	11766 <AD5940_Notch60HzAvailable+0x2a>
  *dl = 0;
   117c2:	2000      	movs	r0, #0
   117c4:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   117c6:	e7db      	b.n	11780 <AD5940_Notch60HzAvailable+0x44>
   117c8:	0002c422 	.word	0x0002c422
   117cc:	0002c429 	.word	0x0002c429

000117d0 <AD5940_ClksCalculate>:
 * @param pFilterInfo: Pointer to configuration structure. 
 * @param pClocks: pointer used to store results.         
 * @return return none.
*/
void AD5940_ClksCalculate(ClksCalInfo_Type *pFilterInfo, uint32_t *pClocks)
{
   117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t temp = 0;
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   117d2:	4d5e      	ldr	r5, [pc, #376]	; (1194c <AD5940_ClksCalculate+0x17c>)
{
   117d4:	4684      	mov	ip, r0
   117d6:	460f      	mov	r7, r1
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   117d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   117da:	b099      	sub	sp, #100	; 0x64
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   117dc:	ae0b      	add	r6, sp, #44	; 0x2c
   117de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   117e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   117e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   117e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   117e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   117e8:	f855 3b04 	ldr.w	r3, [r5], #4
   117ec:	6033      	str	r3, [r6, #0]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   117ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  uint32_t temp = 0;
   117f2:	2400      	movs	r4, #0
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   117f4:	ae02      	add	r6, sp, #8
  uint32_t temp = 0;
   117f6:	9401      	str	r4, [sp, #4]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   117f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

  *pClocks = 0;
   117fc:	603c      	str	r4, [r7, #0]
  if(pFilterInfo == NULL) return;
   117fe:	4664      	mov	r4, ip
   11800:	b314      	cbz	r4, 11848 <AD5940_ClksCalculate+0x78>
  if(pClocks == NULL) return;
  if(pFilterInfo->ADCSinc2Osr > ADCSINC2OSR_1333) return;
   11802:	f8dc 200c 	ldr.w	r2, [ip, #12]
   11806:	2a0b      	cmp	r2, #11
   11808:	d81e      	bhi.n	11848 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCSinc3Osr > 2)  return; /* 0: OSR5, 1:OSR4, 2:OSR2 */
   1180a:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1180e:	2b02      	cmp	r3, #2
   11810:	d81a      	bhi.n	11848 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCAvgNum > ADCAVGNUM_16) return; /* Average number index:0,1,2,3 */
   11812:	f8dc 1010 	ldr.w	r1, [ip, #16]
   11816:	2903      	cmp	r1, #3
   11818:	d816      	bhi.n	11848 <AD5940_ClksCalculate+0x78>
  switch(pFilterInfo->DataType)
   1181a:	f8dc 0000 	ldr.w	r0, [ip]
   1181e:	2804      	cmp	r0, #4
   11820:	d810      	bhi.n	11844 <AD5940_ClksCalculate+0x74>
   11822:	e8df f000 	tbb	[pc, r0]
   11826:	1303      	.short	0x1303
   11828:	6b29      	.short	0x6b29
   1182a:	41          	.byte	0x41
   1182b:	00          	.byte	0x00
  {
    case DATATYPE_ADCRAW:
      temp = (uint32_t)(20*pFilterInfo->DataCount*pFilterInfo->RatioSys2AdcClk);
   1182c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11830:	2014      	movs	r0, #20
   11832:	4358      	muls	r0, r3
   11834:	f7ee fd1a 	bl	26c <__aeabi_ui2f>
   11838:	69e1      	ldr	r1, [r4, #28]
   1183a:	f7ee fd6f 	bl	31c <__aeabi_fmul>
      break;
    case DATATYPE_SINC3:
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   1183e:	f7ee ff59 	bl	6f4 <__aeabi_f2uiz>
   11842:	9001      	str	r0, [sp, #4]
      temp += 25; /* add margin */
      break;
    default:
    break;
  }
  *pClocks = temp;
   11844:	9b01      	ldr	r3, [sp, #4]
   11846:	603b      	str	r3, [r7, #0]
}
   11848:	b019      	add	sp, #100	; 0x64
   1184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   1184c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   11850:	2214      	movs	r2, #20
   11852:	4350      	muls	r0, r2
   11854:	aa18      	add	r2, sp, #96	; 0x60
   11856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1185a:	3028      	adds	r0, #40	; 0x28
   1185c:	f853 3c58 	ldr.w	r3, [r3, #-88]
   11860:	4358      	muls	r0, r3
   11862:	3014      	adds	r0, #20
   11864:	f7ee fd02 	bl	26c <__aeabi_ui2f>
   11868:	69e1      	ldr	r1, [r4, #28]
   1186a:	f7ee fd57 	bl	31c <__aeabi_fmul>
   1186e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11872:	f7ee fc4b 	bl	10c <__addsf3>
   11876:	e7e2      	b.n	1183e <AD5940_ClksCalculate+0x6e>
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   11878:	ab18      	add	r3, sp, #96	; 0x60
   1187a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1187e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   11882:	f852 3c34 	ldr.w	r3, [r2, #-52]
   11886:	fb01 3303 	mla	r3, r1, r3, r3
   1188a:	3301      	adds	r3, #1
      pFilterInfo->DataType = DATATYPE_SINC3;
   1188c:	2201      	movs	r2, #1
      pFilterInfo->DataCount = temp;
   1188e:	e9cc 2300 	strd	r2, r3, [ip]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   11892:	a901      	add	r1, sp, #4
   11894:	4660      	mov	r0, ip
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   11896:	9301      	str	r3, [sp, #4]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   11898:	f7ff ff9a 	bl	117d0 <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_SINC2;
   1189c:	2302      	movs	r3, #2
   1189e:	6023      	str	r3, [r4, #0]
      temp += 15;   /* Need extra 15 clocks for FIFO etc. Just to be safe. */
   118a0:	9b01      	ldr	r3, [sp, #4]
   118a2:	330f      	adds	r3, #15
      temp += 25; /* add margin */
   118a4:	9301      	str	r3, [sp, #4]
      break;
   118a6:	e7cd      	b.n	11844 <AD5940_ClksCalculate+0x74>
      filter.ADCRate = pFilterInfo->ADCRate;
   118a8:	f89c 1018 	ldrb.w	r1, [ip, #24]
   118ac:	9109      	str	r1, [sp, #36]	; 0x24
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   118ae:	a806      	add	r0, sp, #24
   118b0:	f10d 0102 	add.w	r1, sp, #2
      filter.ADCSinc2Osr = pFilterInfo->ADCSinc2Osr;
   118b4:	e9cd 3206 	strd	r3, r2, [sp, #24]
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   118b8:	f7ff fee2 	bl	11680 <AD5940_Notch50HzAvailable>
   118bc:	4605      	mov	r5, r0
   118be:	b118      	cbz	r0, 118c8 <AD5940_ClksCalculate+0xf8>
        dl += dl_50 - 1;
   118c0:	f89d 5002 	ldrb.w	r5, [sp, #2]
   118c4:	3d01      	subs	r5, #1
   118c6:	b2ed      	uxtb	r5, r5
      if(AD5940_Notch60HzAvailable(&filter, &dl_60)){
   118c8:	f10d 0103 	add.w	r1, sp, #3
   118cc:	a806      	add	r0, sp, #24
   118ce:	f7ff ff35 	bl	1173c <AD5940_Notch60HzAvailable>
   118d2:	b120      	cbz	r0, 118de <AD5940_ClksCalculate+0x10e>
        dl += dl_60 - 1;
   118d4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   118d8:	3801      	subs	r0, #1
   118da:	4405      	add	r5, r0
   118dc:	b2ed      	uxtb	r5, r5
      pFilterInfo->DataType = DATATYPE_SINC2;
   118de:	2302      	movs	r3, #2
   118e0:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount += dl; //DL is the extra data input needed for filter to output first data.
   118e2:	6863      	ldr	r3, [r4, #4]
   118e4:	442b      	add	r3, r5
   118e6:	6063      	str	r3, [r4, #4]
      AD5940_ClksCalculate(pFilterInfo,&temp);
   118e8:	4620      	mov	r0, r4
   118ea:	a901      	add	r1, sp, #4
   118ec:	f7ff ff70 	bl	117d0 <AD5940_ClksCalculate>
      pFilterInfo->DataCount -= dl;
   118f0:	6860      	ldr	r0, [r4, #4]
      pFilterInfo->DataType = DATATYPE_NOTCH;
   118f2:	2304      	movs	r3, #4
      pFilterInfo->DataCount -= dl;
   118f4:	1b40      	subs	r0, r0, r5
      pFilterInfo->DataType = DATATYPE_NOTCH;
   118f6:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount -= dl;
   118f8:	6060      	str	r0, [r4, #4]
      break;
   118fa:	e7a3      	b.n	11844 <AD5940_ClksCalculate+0x74>
      switch(pFilterInfo->DftSrc)
   118fc:	f8dc 3014 	ldr.w	r3, [ip, #20]
   11900:	2b03      	cmp	r3, #3
   11902:	d809      	bhi.n	11918 <AD5940_ClksCalculate+0x148>
   11904:	e8df f003 	tbb	[pc, r3]
   11908:	16020d0f 	.word	0x16020d0f
          pFilterInfo->DataType = DATATYPE_ADCRAW;
   1190c:	2300      	movs	r3, #0
   1190e:	6023      	str	r3, [r4, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
   11910:	a901      	add	r1, sp, #4
   11912:	4620      	mov	r0, r4
   11914:	f7ff ff5c 	bl	117d0 <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_DFT;
   11918:	2303      	movs	r3, #3
   1191a:	6023      	str	r3, [r4, #0]
      temp += 25; /* add margin */
   1191c:	9b01      	ldr	r3, [sp, #4]
   1191e:	3319      	adds	r3, #25
   11920:	e7c0      	b.n	118a4 <AD5940_ClksCalculate+0xd4>
          pFilterInfo->DataType = DATATYPE_SINC3;
   11922:	2301      	movs	r3, #1
   11924:	e7f3      	b.n	1190e <AD5940_ClksCalculate+0x13e>
          if(pFilterInfo->BpNotch)
   11926:	f89c 3019 	ldrb.w	r3, [ip, #25]
            pFilterInfo->DataType = DATATYPE_NOTCH;
   1192a:	2b00      	cmp	r3, #0
   1192c:	bf14      	ite	ne
   1192e:	2302      	movne	r3, #2
   11930:	2304      	moveq	r3, #4
   11932:	e7ec      	b.n	1190e <AD5940_ClksCalculate+0x13e>
          pFilterInfo->DataType = DATATYPE_SINC3;
   11934:	2301      	movs	r3, #1
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   11936:	4419      	add	r1, r3
          pFilterInfo->DataType = DATATYPE_SINC3;
   11938:	f8cc 3000 	str.w	r3, [ip]
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   1193c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11940:	fa03 f101 	lsl.w	r1, r3, r1
   11944:	f8cc 1004 	str.w	r1, [ip, #4]
   11948:	e7e2      	b.n	11910 <AD5940_ClksCalculate+0x140>
   1194a:	bf00      	nop
   1194c:	0002b680 	.word	0x0002b680

00011950 <AD5940_WriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
void AD5940_WriteReg(uint16_t RegAddr, uint32_t RegData)
{
   11950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   11952:	4f26      	ldr	r7, [pc, #152]	; (119ec <AD5940_WriteReg+0x9c>)
   11954:	783b      	ldrb	r3, [r7, #0]
   11956:	2b01      	cmp	r3, #1
{
   11958:	4604      	mov	r4, r0
   1195a:	460e      	mov	r6, r1
  if(SeqGenDB.EngineStart == bTRUE)
   1195c:	d124      	bne.n	119a8 <AD5940_WriteReg+0x58>
  if(RegAddr > 0x21ff)
   1195e:	f5b0 5f08 	cmp.w	r0, #8704	; 0x2200
   11962:	d304      	bcc.n	1196e <AD5940_WriteReg+0x1e>
    SeqGenDB.LastError = AD5940ERR_ADDROR;  /* address out of range  */
   11964:	f06f 0304 	mvn.w	r3, #4
   11968:	61bb      	str	r3, [r7, #24]
#ifdef CHIPSEL_M355
    AD5940_D2DWriteReg(RegAddr, RegData);
#else
    AD5940_SPIWriteReg(RegAddr, RegData);
#endif
}
   1196a:	b003      	add	sp, #12
   1196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   1196e:	a901      	add	r1, sp, #4
   11970:	f7ff fe0e 	bl	11590 <AD5940_SEQGenSearchReg>
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11974:	05a5      	lsls	r5, r4, #22
   11976:	f005 45fe 	and.w	r5, r5, #2130706432	; 0x7f000000
   1197a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
   1197e:	431d      	orrs	r5, r3
   11980:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   11984:	b958      	cbnz	r0, 1199e <AD5940_WriteReg+0x4e>
    SeqGenDB.pRegInfo[RegIndex].RegValue = RegData;
   11986:	9a01      	ldr	r2, [sp, #4]
   11988:	693b      	ldr	r3, [r7, #16]
   1198a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1198e:	f366 211f 	bfi	r1, r6, #8, #24
   11992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11996:	4628      	mov	r0, r5
   11998:	f7ff fe30 	bl	115fc <AD5940_SEQGenInsert>
   1199c:	e7e5      	b.n	1196a <AD5940_WriteReg+0x1a>
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   1199e:	4631      	mov	r1, r6
   119a0:	4620      	mov	r0, r4
   119a2:	f7ff fe0d 	bl	115c0 <AD5940_SEQRegInfoInsert>
   119a6:	e7f6      	b.n	11996 <AD5940_WriteReg+0x46>
  AD5940_CsClr();
   119a8:	f014 fd2f 	bl	2640a <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   119ac:	2020      	movs	r0, #32
   119ae:	f013 ff95 	bl	258dc <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   119b2:	4620      	mov	r0, r4
   119b4:	f013 ff69 	bl	2588a <AD5940_ReadWrite16B>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   119b8:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_CsSet();
   119bc:	f014 fd29 	bl	26412 <AD5940_CsSet>
  AD5940_CsClr();
   119c0:	f014 fd23 	bl	2640a <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_WRITEREG);
   119c4:	202d      	movs	r0, #45	; 0x2d
   119c6:	f013 ff89 	bl	258dc <AD5940_ReadWrite8B.isra.0>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   119ca:	b2a4      	uxth	r4, r4
   119cc:	f242 0314 	movw	r3, #8212	; 0x2014
   119d0:	429c      	cmp	r4, r3
   119d2:	d807      	bhi.n	119e4 <AD5940_WriteReg+0x94>
    AD5940_ReadWrite32B(RegData);
   119d4:	4630      	mov	r0, r6
   119d6:	f013 ff6a 	bl	258ae <AD5940_ReadWrite32B>
}
   119da:	b003      	add	sp, #12
   119dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AD5940_CsSet();
   119e0:	f014 bd17 	b.w	26412 <AD5940_CsSet>
    AD5940_ReadWrite16B(RegData);
   119e4:	b2b0      	uxth	r0, r6
   119e6:	f013 ff50 	bl	2588a <AD5940_ReadWrite16B>
   119ea:	e7f6      	b.n	119da <AD5940_WriteReg+0x8a>
   119ec:	20002548 	.word	0x20002548

000119f0 <AD5940_ReadReg>:
 *        Otherwise, read register value by SPI.
 * @param RegAddr: The register address.
 * @return Return register value.
**/
uint32_t AD5940_ReadReg(uint16_t RegAddr)
{
   119f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   119f2:	4d0f      	ldr	r5, [pc, #60]	; (11a30 <AD5940_ReadReg+0x40>)
   119f4:	782b      	ldrb	r3, [r5, #0]
   119f6:	2b01      	cmp	r3, #1
{
   119f8:	4604      	mov	r4, r0
  if(SeqGenDB.EngineStart == bTRUE)
   119fa:	d114      	bne.n	11a26 <AD5940_ReadReg+0x36>
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) != AD5940ERR_OK)
   119fc:	a901      	add	r1, sp, #4
   119fe:	f7ff fdc7 	bl	11590 <AD5940_SEQGenSearchReg>
   11a02:	b148      	cbz	r0, 11a18 <AD5940_ReadReg+0x28>
  *pRegData = AD5940_SPIReadReg(RegAddr);
   11a04:	4620      	mov	r0, r4
   11a06:	f013 ff74 	bl	258f2 <AD5940_SPIReadReg>
   11a0a:	4601      	mov	r1, r0
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   11a0c:	4620      	mov	r0, r4
   11a0e:	f7ff fdd7 	bl	115c0 <AD5940_SEQRegInfoInsert>
#ifdef CHIPSEL_M355
    return AD5940_D2DReadReg(RegAddr);
#else
    return AD5940_SPIReadReg(RegAddr);
#endif
}
   11a12:	4608      	mov	r0, r1
   11a14:	b003      	add	sp, #12
   11a16:	bd30      	pop	{r4, r5, pc}
    RegData = SeqGenDB.pRegInfo[RegIndex].RegValue;
   11a18:	692b      	ldr	r3, [r5, #16]
   11a1a:	9a01      	ldr	r2, [sp, #4]
   11a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11a20:	f3c1 2117 	ubfx	r1, r1, #8, #24
    return AD5940_SEQReadReg(RegAddr);
   11a24:	e7f5      	b.n	11a12 <AD5940_ReadReg+0x22>
}
   11a26:	b003      	add	sp, #12
   11a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return AD5940_SPIReadReg(RegAddr);
   11a2c:	f013 bf61 	b.w	258f2 <AD5940_SPIReadReg>
   11a30:	20002548 	.word	0x20002548

00011a34 <AD5940_Initialize>:
 * @brief Initialize AD5940. This function must be called whenever there is reset(Software Reset or Hardware reset or Power up) happened.
 *        This function is used to put AD5940 to correct state.
 * @return return None
**/
void AD5940_Initialize(void)
{
   11a34:	b530      	push	{r4, r5, lr}
   11a36:	b09d      	sub	sp, #116	; 0x74
  /* Write following registers with its data sequentially whenever there is a reset happened. */
  const struct
  {
    uint16_t reg_addr;
    uint32_t reg_data;
  }RegTable[]=
   11a38:	4915      	ldr	r1, [pc, #84]	; (11a90 <AD5940_Initialize+0x5c>)
   11a3a:	2270      	movs	r2, #112	; 0x70
   11a3c:	4668      	mov	r0, sp
   11a3e:	f015 fef6 	bl	2782e <memcpy>
    {0x2250, 0x103F},
    {0x22B0, 0x203C},
    {0x2230, 0xDE87A5A0},
  };
  //initialize global variables
  SeqGenDB.SeqLen = 0;
   11a42:	4b14      	ldr	r3, [pc, #80]	; (11a94 <AD5940_Initialize+0x60>)
   11a44:	2400      	movs	r4, #0
  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   11a46:	e9c3 4405 	strd	r4, r4, [r3, #20]
  SeqGenDB.SeqLen = 0;
   11a4a:	60dc      	str	r4, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   11a4c:	701c      	strb	r4, [r3, #0]
#ifndef CHIPSEL_M355
  AD5940_CsSet(); /* Pull high CS in case it's low */
   11a4e:	f014 fce0 	bl	26412 <AD5940_CsSet>
#endif
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11a52:	466d      	mov	r5, sp
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   11a54:	6869      	ldr	r1, [r5, #4]
   11a56:	8828      	ldrh	r0, [r5, #0]
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11a58:	3401      	adds	r4, #1
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   11a5a:	f7ff ff79 	bl	11950 <AD5940_WriteReg>
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11a5e:	2c0e      	cmp	r4, #14
   11a60:	f105 0508 	add.w	r5, r5, #8
   11a64:	d1f6      	bne.n	11a54 <AD5940_Initialize+0x20>
  i = AD5940_ReadReg(REG_AFECON_CHIPID);  
   11a66:	f240 4004 	movw	r0, #1028	; 0x404
   11a6a:	f7ff ffc1 	bl	119f0 <AD5940_ReadReg>
  if(i == 0x5501)
   11a6e:	f5a0 43aa 	sub.w	r3, r0, #21760	; 0x5500
   11a72:	3b01      	subs	r3, #1
   11a74:	2b01      	cmp	r3, #1
   11a76:	d804      	bhi.n	11a82 <AD5940_Initialize+0x4e>
    bIsS2silicon = bTRUE;
   11a78:	4b07      	ldr	r3, [pc, #28]	; (11a98 <AD5940_Initialize+0x64>)
   11a7a:	2201      	movs	r2, #1
  else if(i == 0x5502)  /* S3 chip-id is 0x5502. The is no difference with S2. */
    bIsS2silicon = bTRUE;
  else if(i == 0x5500)
    bIsS2silicon = bFALSE;
   11a7c:	701a      	strb	r2, [r3, #0]
  ADI_Print("This AD594x!\n");
#endif
  ADI_Print("Note: Current Silicon is %s\n", bIsS2silicon?"S2":"S1");
  ADI_Print("AD5940LIB Version:v%d.%d.%d\n", AD5940LIB_VER_MAJOR, AD5940LIB_VER_MINOR, AD5940LIB_VER_PATCH);
#endif
}
   11a7e:	b01d      	add	sp, #116	; 0x74
   11a80:	bd30      	pop	{r4, r5, pc}
  else if(i == 0x5500)
   11a82:	f5b0 4faa 	cmp.w	r0, #21760	; 0x5500
   11a86:	d1fa      	bne.n	11a7e <AD5940_Initialize+0x4a>
    bIsS2silicon = bFALSE;
   11a88:	4b03      	ldr	r3, [pc, #12]	; (11a98 <AD5940_Initialize+0x64>)
   11a8a:	2200      	movs	r2, #0
   11a8c:	e7f6      	b.n	11a7c <AD5940_Initialize+0x48>
   11a8e:	bf00      	nop
   11a90:	0002b72c 	.word	0x0002b72c
   11a94:	20002548 	.word	0x20002548
   11a98:	20003cb0 	.word	0x20003cb0

00011a9c <AD5940_LFOSCMeasure>:
 * @param pCfg: pointer to structure.
 * @param pFreq:  Pointer to a variable that used to store frequency in Hz. 
 * @return AD5940ERR_OK if succeed.
**/
AD5940Err AD5940_LFOSCMeasure(LFOSCMeasure_Type *pCfg, float *pFreq) /* Measure current LFOSC frequency. */
{
   11a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11aa0:	460f      	mov	r7, r1
   11aa2:	b09f      	sub	sp, #124	; 0x7c
  {
    SEQ_TOUT(0x3fffffff),   /* Re-Set time-out timer, so we can measure the time needed for MCU to read out Timer Count register. */
    SEQ_STOP(),             /* Interrupt flag AFEINTSRC_ENDSEQ will be set here */
  };

  if(pCfg == NULL) return AD5940ERR_NULLP;
   11aa4:	4604      	mov	r4, r0
   11aa6:	2800      	cmp	r0, #0
   11aa8:	f000 80bc 	beq.w	11c24 <AD5940_LFOSCMeasure+0x188>
  if(pFreq == NULL) return AD5940ERR_NULLP;
   11aac:	2900      	cmp	r1, #0
   11aae:	f000 80b9 	beq.w	11c24 <AD5940_LFOSCMeasure+0x188>
  if(pCfg->CalDuration < 1.0f)
   11ab2:	6840      	ldr	r0, [r0, #4]
   11ab4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11ab8:	f7ee fdce 	bl	658 <__aeabi_fcmplt>
   11abc:	4606      	mov	r6, r0
   11abe:	2800      	cmp	r0, #0
   11ac0:	f040 80b3 	bne.w	11c2a <AD5940_LFOSCMeasure+0x18e>
    return AD5940ERR_PARA;
  AD5940_SEQGetCfg(&seq_cfg_backup);
   11ac4:	a804      	add	r0, sp, #16
   11ac6:	f014 f9bf 	bl	25e48 <AD5940_SEQGetCfg>
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   11aca:	f243 000c 	movw	r0, #12300	; 0x300c
   11ace:	f7ff ff8f 	bl	119f0 <AD5940_ReadReg>
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   11ad2:	2201      	movs	r2, #1
   11ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   11ad8:	4681      	mov	r9, r0
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   11ada:	4610      	mov	r0, r2
   11adc:	f014 fc09 	bl	262f2 <AD5940_INTCCfg>
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11ae0:	f04f 30ff 	mov.w	r0, #4294967295

  seq_cfg.SeqMemSize = SEQMEMSIZE_2KB;  /* 2kB SRAM is used for sequencer */
   11ae4:	2501      	movs	r5, #1
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11ae6:	f014 fc1c 	bl	26322 <AD5940_INTCClrFlag>
  seq_cfg.SeqBreakEn = bFALSE;
  seq_cfg.SeqIgnoreEn = bFALSE;
  seq_cfg.SeqCntCRCClr = bFALSE;
  seq_cfg.SeqEnable = bTRUE;
  seq_cfg.SeqWrTimer = 0;
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   11aea:	a801      	add	r0, sp, #4
  seq_cfg.SeqWrTimer = 0;
   11aec:	9603      	str	r6, [sp, #12]
  seq_cfg.SeqEnable = bTRUE;
   11aee:	e9cd 5501 	strd	r5, r5, [sp, #4]
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   11af2:	f014 f971 	bl	25dd8 <AD5940_SEQCfg>
  
  seqinfo.pSeqCmd = SeqA;
   11af6:	4b4e      	ldr	r3, [pc, #312]	; (11c30 <AD5940_LFOSCMeasure+0x194>)
   11af8:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_0;
  seqinfo.SeqLen = SEQ_LEN(SeqA);
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   11afa:	a807      	add	r0, sp, #28
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   11afc:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_0;
   11afe:	9607      	str	r6, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   11b00:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqA);
   11b02:	9509      	str	r5, [sp, #36]	; 0x24
  seqinfo.WriteSRAM = bTRUE;
   11b04:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   11b08:	f014 f9e9 	bl	25ede <AD5940_SEQInfoCfg>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11b0c:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   11b0e:	9507      	str	r5, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11b10:	442b      	add	r3, r5
  seqinfo.SeqLen = SEQ_LEN(SeqB);
   11b12:	e9cd 3508 	strd	r3, r5, [sp, #32]
  seqinfo.pSeqCmd = SeqB;
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   11b16:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqB;
   11b18:	4b46      	ldr	r3, [pc, #280]	; (11c34 <AD5940_LFOSCMeasure+0x198>)
   11b1a:	930b      	str	r3, [sp, #44]	; 0x2c
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   11b1c:	f014 f9df 	bl	25ede <AD5940_SEQInfoCfg>
	
  wupt_cfg.WuptEn = bFALSE;
  wupt_cfg.WuptOrder[0] = SEQID_0;
  wupt_cfg.WuptOrder[1] = SEQID_1;
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   11b20:	2304      	movs	r3, #4
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11b22:	6860      	ldr	r0, [r4, #4]
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   11b24:	9319      	str	r3, [sp, #100]	; 0x64
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11b26:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
  wupt_cfg.WuptOrder[1] = SEQID_1;
   11b2a:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
  wupt_cfg.WuptEn = bFALSE;
   11b2e:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
   11b32:	950c      	str	r5, [sp, #48]	; 0x30
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11b34:	f7ee fbf2 	bl	31c <__aeabi_fmul>
   11b38:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11b3c:	f7ee fae6 	bl	10c <__addsf3>
   11b40:	f7ee fdd8 	bl	6f4 <__aeabi_f2uiz>
   11b44:	1f43      	subs	r3, r0, #5
   11b46:	9315      	str	r3, [sp, #84]	; 0x54
  wupt_cfg.SeqxWakeupTime[1] = 4-1;
   11b48:	2303      	movs	r3, #3
   11b4a:	931a      	str	r3, [sp, #104]	; 0x68
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11b4c:	4606      	mov	r6, r0
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   11b4e:	f04f 33ff 	mov.w	r3, #4294967295
  WuptPeriod = (wupt_cfg.SeqxSleepTime[0]+1) + (wupt_cfg.SeqxWakeupTime[1]+1);
  AD5940_WUPTCfg(&wupt_cfg);
   11b52:	a80c      	add	r0, sp, #48	; 0x30
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   11b54:	9316      	str	r3, [sp, #88]	; 0x58
  AD5940_WUPTCfg(&wupt_cfg);
   11b56:	f014 f9fc 	bl	25f52 <AD5940_WUPTCfg>
  
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11b5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11b5e:	f014 fbe0 	bl	26322 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   11b62:	4628      	mov	r0, r5
   11b64:	f014 fa94 	bl	26090 <AD5940_WUPTCtrl>
  
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   11b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11b6c:	2001      	movs	r0, #1
   11b6e:	f014 fbdd 	bl	2632c <AD5940_INTCTestFlag>
   11b72:	2800      	cmp	r0, #0
   11b74:	d0f8      	beq.n	11b68 <AD5940_LFOSCMeasure+0xcc>
  TimerCount = AD5940_SEQTimeOutRd();
   11b76:	f014 f9e8 	bl	25f4a <AD5940_SEQTimeOutRd>
   11b7a:	4680      	mov	r8, r0
  
  AD5940_WUPTCtrl(bFALSE);
   11b7c:	2000      	movs	r0, #0
   11b7e:	f014 fa87 	bl	26090 <AD5940_WUPTCtrl>
	AD5940_WUPTTime(SEQID_0, 4, 4);	/* Set it to minimum value because we don't care about sequence0 now. We only want to measure how much time MCU will need to read register */
   11b82:	2204      	movs	r2, #4
   11b84:	4611      	mov	r1, r2
   11b86:	2000      	movs	r0, #0
   11b88:	f014 fa95 	bl	260b6 <AD5940_WUPTTime>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11b8c:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   11b8e:	2501      	movs	r5, #1
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11b90:	442b      	add	r3, r5
   11b92:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqBB);
   11b94:	2302      	movs	r3, #2
   11b96:	9309      	str	r3, [sp, #36]	; 0x24
  seqinfo.pSeqCmd = SeqBB;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   11b98:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqBB;
   11b9a:	4b27      	ldr	r3, [pc, #156]	; (11c38 <AD5940_LFOSCMeasure+0x19c>)
   11b9c:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_1;
   11b9e:	9507      	str	r5, [sp, #28]
  seqinfo.WriteSRAM = bTRUE;
   11ba0:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   11ba4:	f014 f99b 	bl	25ede <AD5940_SEQInfoCfg>
  AD5940_SEQCtrlS(bTRUE); /* Enable Sequencer again */
   11ba8:	4628      	mov	r0, r5
   11baa:	f014 f968 	bl	25e7e <AD5940_SEQCtrlS>

  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11bae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11bb2:	f014 fbb6 	bl	26322 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   11bb6:	4628      	mov	r0, r5
   11bb8:	f014 fa6a 	bl	26090 <AD5940_WUPTCtrl>
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   11bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11bc0:	2001      	movs	r0, #1
   11bc2:	f014 fbb3 	bl	2632c <AD5940_INTCTestFlag>
   11bc6:	2800      	cmp	r0, #0
   11bc8:	d0f8      	beq.n	11bbc <AD5940_LFOSCMeasure+0x120>
  TimerCount2 = AD5940_SEQTimeOutRd();
   11bca:	f014 f9be 	bl	25f4a <AD5940_SEQTimeOutRd>
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   11bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  TimerCount2 = AD5940_SEQTimeOutRd();
   11bd2:	4605      	mov	r5, r0
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   11bd4:	2000      	movs	r0, #0
   11bd6:	f014 fba9 	bl	2632c <AD5940_INTCTestFlag>

  AD5940_WUPTCtrl(bFALSE);
   11bda:	2000      	movs	r0, #0
   11bdc:	f014 fa58 	bl	26090 <AD5940_WUPTCtrl>
  AD5940_SEQCfg(&seq_cfg_backup);          /* restore sequencer configuration */
   11be0:	a804      	add	r0, sp, #16
   11be2:	f014 f8f9 	bl	25dd8 <AD5940_SEQCfg>
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, (INTCCfg&AFEINTSRC_ENDSEQ)?bTRUE:bFALSE); /* Restore interrupt configuration */
   11be6:	f3c9 32c0 	ubfx	r2, r9, #15, #1
   11bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11bee:	2001      	movs	r0, #1
   11bf0:	f014 fb7f 	bl	262f2 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11bf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11bf8:	f014 fb93 	bl	26322 <AD5940_INTCClrFlag>
  //printf("Time duration:%d ", (TimerCount2 - TimerCount));
	*pFreq = pCfg->SystemClkFreq*WuptPeriod/(TimerCount2 - TimerCount);
   11bfc:	4630      	mov	r0, r6
   11bfe:	f7ee fb35 	bl	26c <__aeabi_ui2f>
   11c02:	68a1      	ldr	r1, [r4, #8]
   11c04:	f7ee fb8a 	bl	31c <__aeabi_fmul>
   11c08:	4604      	mov	r4, r0
   11c0a:	eba5 0008 	sub.w	r0, r5, r8
   11c0e:	f7ee fb2d 	bl	26c <__aeabi_ui2f>
   11c12:	4601      	mov	r1, r0
   11c14:	4620      	mov	r0, r4
   11c16:	f7ee fc35 	bl	484 <__aeabi_fdiv>
   11c1a:	6038      	str	r0, [r7, #0]
  return AD5940ERR_OK;
   11c1c:	2000      	movs	r0, #0
}
   11c1e:	b01f      	add	sp, #124	; 0x7c
   11c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(pCfg == NULL) return AD5940ERR_NULLP;
   11c24:	f06f 0002 	mvn.w	r0, #2
   11c28:	e7f9      	b.n	11c1e <AD5940_LFOSCMeasure+0x182>
    return AD5940ERR_PARA;
   11c2a:	f06f 0001 	mvn.w	r0, #1
   11c2e:	e7f6      	b.n	11c1e <AD5940_LFOSCMeasure+0x182>
   11c30:	0002b918 	.word	0x0002b918
   11c34:	0002b91c 	.word	0x0002b91c
   11c38:	0002b920 	.word	0x0002b920

00011c3c <z_impl_gpio_pin_configure.constprop.0>:
 */
__syscall int gpio_pin_configure(const struct device *port,
				 gpio_pin_t pin,
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
   11c3c:	4601      	mov	r1, r0
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
   11c3e:	4808      	ldr	r0, [pc, #32]	; (11c60 <z_impl_gpio_pin_configure.constprop.0+0x24>)
static inline int z_impl_gpio_pin_configure(const struct device *port,
   11c40:	b430      	push	{r4, r5}
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   11c42:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   11c44:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11c46:	2301      	movs	r3, #1
   11c48:	fa03 f201 	lsl.w	r2, r3, r1
   11c4c:	6823      	ldr	r3, [r4, #0]
   11c4e:	ea23 0302 	bic.w	r3, r3, r2
   11c52:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
   11c54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11c58:	682b      	ldr	r3, [r5, #0]
}
   11c5a:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
   11c5c:	4718      	bx	r3
   11c5e:	bf00      	nop
   11c60:	0002b1b4 	.word	0x0002b1b4

00011c64 <gpio_pin_set.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11c64:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11c66:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11c68:	fa03 f100 	lsl.w	r1, r3, r0
	const struct gpio_driver_data *const data =
   11c6c:	4b07      	ldr	r3, [pc, #28]	; (11c8c <gpio_pin_set.constprop.0.isra.0+0x28>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11c6e:	6918      	ldr	r0, [r3, #16]
   11c70:	6800      	ldr	r0, [r0, #0]
   11c72:	4201      	tst	r1, r0
		value = (value != 0) ? 0 : 1;
   11c74:	bf18      	it	ne
   11c76:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   11c7a:	b11a      	cbz	r2, 11c84 <gpio_pin_set.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
   11c7c:	689b      	ldr	r3, [r3, #8]
   11c7e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11c80:	4802      	ldr	r0, [pc, #8]	; (11c8c <gpio_pin_set.constprop.0.isra.0+0x28>)
   11c82:	4718      	bx	r3
   11c84:	689b      	ldr	r3, [r3, #8]
   11c86:	691b      	ldr	r3, [r3, #16]
   11c88:	e7fa      	b.n	11c80 <gpio_pin_set.constprop.0.isra.0+0x1c>
   11c8a:	bf00      	nop
   11c8c:	0002b1b4 	.word	0x0002b1b4

00011c90 <AD5940_ClrMCUIntFlag>:
}//end

/////////////////////////////////////////// clear interrupt indicator flag
uint32_t AD5940_ClrMCUIntFlag(void)
{
    ucInterrupted = 0;
   11c90:	4b02      	ldr	r3, [pc, #8]	; (11c9c <AD5940_ClrMCUIntFlag+0xc>)
   11c92:	2200      	movs	r2, #0
   11c94:	701a      	strb	r2, [r3, #0]
    return 1;
}//end
   11c96:	2001      	movs	r0, #1
   11c98:	4770      	bx	lr
   11c9a:	bf00      	nop
   11c9c:	20003cb1 	.word	0x20003cb1

00011ca0 <AD5940_MCUResourceInit>:
	.frequency = 8000000,
};

/////////////////////////////////////////// setup function: MCU peripherals (GPIO pins, SPI, interrupt)
uint32_t AD5940_MCUResourceInit(void *pCfg)
{
   11ca0:	b510      	push	{r4, lr}
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   11ca2:	201f      	movs	r0, #31
   11ca4:	f7ff ffca 	bl	11c3c <z_impl_gpio_pin_configure.constprop.0>
    // set the AD5941 CS pin and the RESET pin to outputs

    // SIO_31 connected to CS pin   
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11ca8:	4c0c      	ldr	r4, [pc, #48]	; (11cdc <AD5940_MCUResourceInit+0x3c>)
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11caa:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11cac:	6020      	str	r0, [r4, #0]
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11cae:	da02      	bge.n	11cb6 <AD5940_MCUResourceInit+0x16>
   11cb0:	480b      	ldr	r0, [pc, #44]	; (11ce0 <AD5940_MCUResourceInit+0x40>)
   11cb2:	f003 fb15 	bl	152e0 <printf>
   11cb6:	201e      	movs	r0, #30
   11cb8:	f7ff ffc0 	bl	11c3c <z_impl_gpio_pin_configure.constprop.0>

    // SIO_30 connected to RESET pin   
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11cbc:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   11cbe:	6020      	str	r0, [r4, #0]
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11cc0:	da02      	bge.n	11cc8 <AD5940_MCUResourceInit+0x28>
   11cc2:	4808      	ldr	r0, [pc, #32]	; (11ce4 <AD5940_MCUResourceInit+0x44>)
   11cc4:	f003 fb0c 	bl	152e0 <printf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11cc8:	4807      	ldr	r0, [pc, #28]	; (11ce8 <AD5940_MCUResourceInit+0x48>)
   11cca:	f018 fc3c 	bl	2a546 <z_device_is_ready>

    if(!device_is_ready(spi_dev)) 
   11cce:	b910      	cbnz	r0, 11cd6 <AD5940_MCUResourceInit+0x36>
    {
		printf("SPI master device is not ready!\n");
   11cd0:	4806      	ldr	r0, [pc, #24]	; (11cec <AD5940_MCUResourceInit+0x4c>)
   11cd2:	f003 fb05 	bl	152e0 <printf>
     */
    
    // enable external interrupt on pin

    return 0;
}//end
   11cd6:	2000      	movs	r0, #0
   11cd8:	bd10      	pop	{r4, pc}
   11cda:	bf00      	nop
   11cdc:	20002564 	.word	0x20002564
   11ce0:	0002c430 	.word	0x0002c430
   11ce4:	0002c43f 	.word	0x0002c43f
   11ce8:	0002b25c 	.word	0x0002b25c
   11cec:	0002c44e 	.word	0x0002c44e

00011cf0 <AD5940_ReadWriteNBytes>:

//////////////////////////////////////// Read and Write function 
void AD5940_ReadWriteNBytes(unsigned char *pSendBuffer, unsigned char *pRecvBuff, unsigned long length)
{
   11cf0:	b510      	push	{r4, lr}
   11cf2:	b088      	sub	sp, #32
	const struct spi_buf tx_buf = 
    {
		.buf = pSendBuffer,
		.len = length
	};
	const struct spi_buf_set tx = 
   11cf4:	2301      	movs	r3, #1
	const struct spi_buf tx_buf = 
   11cf6:	e9cd 0200 	strd	r0, r2, [sp]
    {
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf = 
   11cfa:	9205      	str	r2, [sp, #20]
    {
		.buf = pRecvBuff,
		.len = length,
	};
	const struct spi_buf_set rx = 
   11cfc:	aa04      	add	r2, sp, #16
	struct spi_buf rx_buf = 
   11cfe:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx = 
   11d02:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct spi_buf_set tx = 
   11d06:	f8cd d008 	str.w	sp, [sp, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   11d0a:	4806      	ldr	r0, [pc, #24]	; (11d24 <AD5940_ReadWriteNBytes+0x34>)
   11d0c:	4906      	ldr	r1, [pc, #24]	; (11d28 <AD5940_ReadWriteNBytes+0x38>)
   11d0e:	6883      	ldr	r3, [r0, #8]
   11d10:	aa02      	add	r2, sp, #8
   11d12:	681c      	ldr	r4, [r3, #0]
   11d14:	ab06      	add	r3, sp, #24
   11d16:	47a0      	blx	r4
		.count = 1
	};

	// Start transaction
	int error = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
	if(error != 0)
   11d18:	b110      	cbz	r0, 11d20 <AD5940_ReadWriteNBytes+0x30>
    {
		printf("SPI transceive error \n");
   11d1a:	4804      	ldr	r0, [pc, #16]	; (11d2c <AD5940_ReadWriteNBytes+0x3c>)
   11d1c:	f003 fae0 	bl	152e0 <printf>
	}

 }//end 
   11d20:	b008      	add	sp, #32
   11d22:	bd10      	pop	{r4, pc}
   11d24:	0002b25c 	.word	0x0002b25c
   11d28:	0002b928 	.word	0x0002b928
   11d2c:	0002c46f 	.word	0x0002c46f

00011d30 <AD5940AMPStructInit>:
    return 0;
}//end

//Change the application parameters here if you want to change it to a non-default value
void AD5940AMPStructInit(void)
{
   11d30:	b507      	push	{r0, r1, r2, lr}
  AppAMPCfg_Type *pAMPCfg;
  AppAMPGetCfg(&pAMPCfg);
   11d32:	a801      	add	r0, sp, #4
   11d34:	f000 f8ec 	bl	11f10 <AppAMPGetCfg>
  pAMPCfg->WuptClkFreq = LFOSCFreq;
   11d38:	4a0d      	ldr	r2, [pc, #52]	; (11d70 <AD5940AMPStructInit+0x40>)
   11d3a:	9b01      	ldr	r3, [sp, #4]
   11d3c:	6812      	ldr	r2, [r2, #0]
   11d3e:	61da      	str	r2, [r3, #28]

  // Configure general parameters
  pAMPCfg->SeqStartAddr = 0;
  pAMPCfg->MaxSeqLen = 100;                // @todo add checker in function
   11d40:	2100      	movs	r1, #0
   11d42:	2264      	movs	r2, #100	; 0x64
   11d44:	e9c3 1201 	strd	r1, r2, [r3, #4]

  pAMPCfg->RcalVal = 200.0;
  // pAMPCfg->NumOfData = -1;                  // Never stop until you stop it manually by AppAMPCtrl() function
  pAMPCfg->NumOfData = 1;                  // Never stop until you stop it manually by AppAMPCtrl() function
   11d48:	2201      	movs	r2, #1
   11d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  //Configure the measurement parameters
  pAMPCfg->AmpODR = 1;                      // set the time between samples in seconds

  pAMPCfg->FifoThresh = 1;                  // the number of measurements aquired before alerting the host MCU
   11d4c:	625a      	str	r2, [r3, #36]	; 0x24

  pAMPCfg->SensorBias = 200;                // Sensor bias voltage between reference and sense electrodes

  pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;

  pAMPCfg->LpTiaRl = LPTIARLOAD_10R;
   11d4e:	651a      	str	r2, [r3, #80]	; 0x50

  pAMPCfg->Vzero = 1100;                    // Vzero voltage. The voltage on the sense electrode. Unit is mV
   11d50:	4a08      	ldr	r2, [pc, #32]	; (11d74 <AD5940AMPStructInit+0x44>)
  pAMPCfg->RcalVal = 200.0;
   11d52:	4909      	ldr	r1, [pc, #36]	; (11d78 <AD5940AMPStructInit+0x48>)
  pAMPCfg->Vzero = 1100;                    // Vzero voltage. The voltage on the sense electrode. Unit is mV
   11d54:	65da      	str	r2, [r3, #92]	; 0x5c

  pAMPCfg->ADCRefVolt = 1.82;               // Measure the voltage on the Vref_1V8 pin (1.82 V)
   11d56:	4a09      	ldr	r2, [pc, #36]	; (11d7c <AD5940AMPStructInit+0x4c>)
  pAMPCfg->RcalVal = 200.0;
   11d58:	6319      	str	r1, [r3, #48]	; 0x30
  pAMPCfg->AmpODR = 1;                      // set the time between samples in seconds
   11d5a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  pAMPCfg->SensorBias = 200;                // Sensor bias voltage between reference and sense electrodes
   11d5e:	6619      	str	r1, [r3, #96]	; 0x60
  pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;
   11d60:	2102      	movs	r1, #2
  pAMPCfg->AmpODR = 1;                      // set the time between samples in seconds
   11d62:	6298      	str	r0, [r3, #40]	; 0x28
  pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;
   11d64:	6499      	str	r1, [r3, #72]	; 0x48
  pAMPCfg->ADCRefVolt = 1.82;               // Measure the voltage on the Vref_1V8 pin (1.82 V)
   11d66:	635a      	str	r2, [r3, #52]	; 0x34

}//end function
   11d68:	b003      	add	sp, #12
   11d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   11d6e:	bf00      	nop
   11d70:	200026f8 	.word	0x200026f8
   11d74:	44898000 	.word	0x44898000
   11d78:	43480000 	.word	0x43480000
   11d7c:	3fe8f5c3 	.word	0x3fe8f5c3

00011d80 <AMPShowResult>:
// 1000 msec = 1 sec (used to control the LED blinking frequency)
#define SLEEP_TIME_MS   1000

///////////////////////////////////////////////////////// display the result in UART
int32_t AMPShowResult(float *pData, uint32_t DataCount)
{
   11d80:	b538      	push	{r3, r4, r5, lr}
    float x = pData[0];
   11d82:	6805      	ldr	r5, [r0, #0]

    // float bias_current = 39.5;
    // x = x - bias_current;

    // process the measured differential voltage 
    int x_int = (int) x;		// integer part 
   11d84:	4628      	mov	r0, r5
   11d86:	f7ee fc8f 	bl	6a8 <__aeabi_f2iz>
   11d8a:	4604      	mov	r4, r0
    int x_frac = (int) ((x - x_int) * 10000);
   11d8c:	f7ee fa72 	bl	274 <__aeabi_i2f>
   11d90:	4601      	mov	r1, r0
   11d92:	4628      	mov	r0, r5
   11d94:	f7ee f9b8 	bl	108 <__aeabi_fsub>
   11d98:	4905      	ldr	r1, [pc, #20]	; (11db0 <AMPShowResult+0x30>)
   11d9a:	f7ee fabf 	bl	31c <__aeabi_fmul>
   11d9e:	f7ee fc83 	bl	6a8 <__aeabi_f2iz>
	// print to serial terminal 
	// printf ("Int = %d, Decimal = %d \n\r", diff_volt_int, diff_volt_dec_int);
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   11da2:	4621      	mov	r1, r4
    int x_frac = (int) ((x - x_int) * 10000);
   11da4:	4602      	mov	r2, r0
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   11da6:	4803      	ldr	r0, [pc, #12]	; (11db4 <AMPShowResult+0x34>)
   11da8:	f003 fa9a 	bl	152e0 <printf>

    return 0;
}//end
   11dac:	2000      	movs	r0, #0
   11dae:	bd38      	pop	{r3, r4, r5, pc}
   11db0:	461c4000 	.word	0x461c4000
   11db4:	0002c486 	.word	0x0002c486

00011db8 <main>:

////////////////////////////////////////////////// MAIN ////////////////////////////////////// 
void main(void)
{
   11db8:	b570      	push	{r4, r5, r6, lr}
   11dba:	b092      	sub	sp, #72	; 0x48
   11dbc:	4d4e      	ldr	r5, [pc, #312]	; (11ef8 <main+0x140>)
   11dbe:	4628      	mov	r0, r5
   11dc0:	f018 fbc1 	bl	2a546 <z_device_is_ready>
    // define return variable 
	int ret;

    // check if led device is ready 
	if (!device_is_ready(led.port)) { return; }
   11dc4:	2800      	cmp	r0, #0
   11dc6:	f000 8095 	beq.w	11ef4 <main+0x13c>
	struct gpio_driver_data *data =
   11dca:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   11dcc:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11dce:	6813      	ldr	r3, [r2, #0]
   11dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11dd4:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11dd6:	210d      	movs	r1, #13
   11dd8:	6833      	ldr	r3, [r6, #0]
   11dda:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11dde:	4628      	mov	r0, r5
   11de0:	4798      	blx	r3

    // set the led to active-high output 
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) { return; }
   11de2:	2800      	cmp	r0, #0
   11de4:	f2c0 8086 	blt.w	11ef4 <main+0x13c>
   11de8:	2405      	movs	r4, #5
	return api->port_toggle_bits(port, pins);
   11dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   11dee:	6973      	ldr	r3, [r6, #20]
   11df0:	4628      	mov	r0, r5
   11df2:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   11df4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11df8:	2100      	movs	r1, #0
   11dfa:	f010 f9af 	bl	2215c <z_impl_k_sleep>

    // toggle the led 5 times before starting the program 
	int led_counter = 0;	
    while (led_counter < 5) 
   11dfe:	3c01      	subs	r4, #1
   11e00:	d1f3      	bne.n	11dea <main+0x32>
		k_msleep(SLEEP_TIME_MS);
		led_counter = led_counter + 1;
	}//end while

      // setup the MCU resources for connecting with AD5940
    AD5940_MCUResourceInit(0);
   11e02:	4620      	mov	r0, r4
   11e04:	f7ff ff4c 	bl	11ca0 <AD5940_MCUResourceInit>
    AD5940_Delay10us(50000);        // delay 500 m
   11e08:	f24c 3050 	movw	r0, #50000	; 0xc350
   11e0c:	f014 faf6 	bl	263fc <AD5940_Delay10us>
    clk_cfg.SysClkDiv = SYSCLKDIV_1;
   11e10:	2501      	movs	r5, #1
    AD5940_HWReset();
   11e12:	f014 fae5 	bl	263e0 <AD5940_HWReset>
    AD5940_Initialize();
   11e16:	f7ff fe0d 	bl	11a34 <AD5940_Initialize>
    clk_cfg.HFOSCEn = bTRUE;
   11e1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    AD5940_CLKCfg(&clk_cfg);
   11e1e:	a803      	add	r0, sp, #12
    clk_cfg.ADCCLkSrc = ADCCLKSRC_HFOSC;
   11e20:	e9cd 4403 	strd	r4, r4, [sp, #12]
    clk_cfg.ADCClkDiv = ADCCLKDIV_1;
   11e24:	e9cd 5505 	strd	r5, r5, [sp, #20]
    clk_cfg.HFOSCEn = bTRUE;
   11e28:	9307      	str	r3, [sp, #28]
    AD5940_CLKCfg(&clk_cfg);
   11e2a:	f014 f9e3 	bl	261f4 <AD5940_CLKCfg>
    fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   11e2e:	2302      	movs	r3, #2
    fifo_cfg.FIFOSize = FIFOSIZE_4KB;       // 4kB for FIFO, The rest 2kB for sequencer
   11e30:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    fifo_cfg.FIFOSrc = FIFOSRC_DFT;
   11e34:	930b      	str	r3, [sp, #44]	; 0x2c
    AD5940_FIFOCfg(&fifo_cfg);              // Disable to reset FIFO
   11e36:	a808      	add	r0, sp, #32
    fifo_cfg.FIFOThresh = 4;
   11e38:	2304      	movs	r3, #4
   11e3a:	930c      	str	r3, [sp, #48]	; 0x30
    fifo_cfg.FIFOEn = bFALSE;
   11e3c:	f88d 4020 	strb.w	r4, [sp, #32]
    AD5940_FIFOCfg(&fifo_cfg);              // Disable to reset FIFO
   11e40:	f013 ff8c 	bl	25d5c <AD5940_FIFOCfg>
    AD5940_FIFOCfg(&fifo_cfg);
   11e44:	a808      	add	r0, sp, #32
    fifo_cfg.FIFOEn = bTRUE;
   11e46:	f88d 5020 	strb.w	r5, [sp, #32]
    AD5940_FIFOCfg(&fifo_cfg);
   11e4a:	f013 ff87 	bl	25d5c <AD5940_FIFOCfg>
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);           /* Enable all interrupt in Interrupt Controller 1, so we can check INTC flags */
   11e4e:	462a      	mov	r2, r5
   11e50:	4628      	mov	r0, r5
   11e52:	f04f 31ff 	mov.w	r1, #4294967295
   11e56:	f014 fa4c 	bl	262f2 <AD5940_INTCCfg>
    AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH, bTRUE);   /* Interrupt Controller 0 will control GP0 to generate interrupt to MCU */
   11e5a:	462a      	mov	r2, r5
   11e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   11e60:	4620      	mov	r0, r4
   11e62:	f014 fa46 	bl	262f2 <AD5940_INTCCfg>
    AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11e66:	f04f 30ff 	mov.w	r0, #4294967295
   11e6a:	f014 fa5a 	bl	26322 <AD5940_INTCClrFlag>
    gpio_cfg.FuncSet = GP6_SYNC|GP5_SYNC|GP4_SYNC|GP2_SYNC|GP1_SLEEP|GP0_INT;
   11e6e:	f642 232c 	movw	r3, #10796	; 0x2a2c
   11e72:	930d      	str	r3, [sp, #52]	; 0x34
    AD5940_AGPIOCfg(&gpio_cfg);
   11e74:	a80d      	add	r0, sp, #52	; 0x34
    gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin2;
   11e76:	2377      	movs	r3, #119	; 0x77
    gpio_cfg.PullEnSet = 0;
   11e78:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    gpio_cfg.InputEnSet = 0;
   11e7c:	940f      	str	r4, [sp, #60]	; 0x3c
    gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin2;
   11e7e:	930e      	str	r3, [sp, #56]	; 0x38
    AD5940_AGPIOCfg(&gpio_cfg);
   11e80:	f014 fa75 	bl	2636e <AD5940_AGPIOCfg>
    LfoscMeasure.CalDuration = 1000.0;            // 1000 ms used for calibration
   11e84:	4b1d      	ldr	r3, [pc, #116]	; (11efc <main+0x144>)
    AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   11e86:	491e      	ldr	r1, [pc, #120]	; (11f00 <main+0x148>)
    LfoscMeasure.CalDuration = 1000.0;            // 1000 ms used for calibration
   11e88:	9301      	str	r3, [sp, #4]
    AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   11e8a:	4668      	mov	r0, sp
    LfoscMeasure.SystemClkFreq = 16000000.0f;     // 16 MHz in this firmware
   11e8c:	4b1d      	ldr	r3, [pc, #116]	; (11f04 <main+0x14c>)
   11e8e:	9302      	str	r3, [sp, #8]
    LfoscMeasure.CalSeqAddr = 0;
   11e90:	9400      	str	r4, [sp, #0]
    AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   11e92:	f7ff fe03 	bl	11a9c <AD5940_LFOSCMeasure>

    // call platform configuration
    AD5940PlatformCfg();
    AD5940_Delay10us(50000);    // delay 500 m
   11e96:	f24c 3050 	movw	r0, #50000	; 0xc350
   11e9a:	f014 faaf 	bl	263fc <AD5940_Delay10us>

    AD5940AMPStructInit();      // Configure your parameters in this function
   11e9e:	f7ff ff47 	bl	11d30 <AD5940AMPStructInit>
    AD5940_Delay10us(50000);    // delay 500 m
   11ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
   11ea6:	f014 faa9 	bl	263fc <AD5940_Delay10us>

    // setup AMP application (provide a buffer, which is used to store sequencer commands)
    AppAMPInit(AppBuff, APPBUFF_SIZE);
   11eaa:	2164      	movs	r1, #100	; 0x64
   11eac:	4816      	ldr	r0, [pc, #88]	; (11f08 <main+0x150>)
                break;
            }
            else
            {
                // do nothing
                AD5940_Delay10us(100000);    // delay 1 second
   11eae:	4d17      	ldr	r5, [pc, #92]	; (11f0c <main+0x154>)
            }
        }//end while

        /// display data
        uint32_t temp = APPBUFF_SIZE;
        AppAMPISR(AppBuff, &temp);
   11eb0:	4c15      	ldr	r4, [pc, #84]	; (11f08 <main+0x150>)
    AppAMPInit(AppBuff, APPBUFF_SIZE);
   11eb2:	f000 f837 	bl	11f24 <AppAMPInit>
    AD5940_Delay10us(50000);    // delay 500 m
   11eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
   11eba:	f014 fa9f 	bl	263fc <AD5940_Delay10us>
        AD5940_SEQMmrTrig(SEQID_0);
   11ebe:	2000      	movs	r0, #0
   11ec0:	f013 fff0 	bl	25ea4 <AD5940_SEQMmrTrig>
        AD5940_Delay10us(50000);    // delay 500 m
   11ec4:	f24c 3050 	movw	r0, #50000	; 0xc350
   11ec8:	f014 fa98 	bl	263fc <AD5940_Delay10us>
            if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH) == bTRUE)
   11ecc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   11ed0:	2000      	movs	r0, #0
   11ed2:	f014 fa2b 	bl	2632c <AD5940_INTCTestFlag>
   11ed6:	2801      	cmp	r0, #1
   11ed8:	d001      	beq.n	11ede <main+0x126>
                AD5940_Delay10us(100000);    // delay 1 second
   11eda:	4628      	mov	r0, r5
   11edc:	e7f4      	b.n	11ec8 <main+0x110>
        uint32_t temp = APPBUFF_SIZE;
   11ede:	2364      	movs	r3, #100	; 0x64
        AppAMPISR(AppBuff, &temp);
   11ee0:	a90d      	add	r1, sp, #52	; 0x34
   11ee2:	4620      	mov	r0, r4
        uint32_t temp = APPBUFF_SIZE;
   11ee4:	930d      	str	r3, [sp, #52]	; 0x34
        AppAMPISR(AppBuff, &temp);
   11ee6:	f000 fa09 	bl	122fc <AppAMPISR>
        AMPShowResult((float*)AppBuff, temp);
   11eea:	990d      	ldr	r1, [sp, #52]	; 0x34
   11eec:	4620      	mov	r0, r4
   11eee:	f7ff ff47 	bl	11d80 <AMPShowResult>
    {
   11ef2:	e7e4      	b.n	11ebe <main+0x106>

    }//end while

    */

   11ef4:	b012      	add	sp, #72	; 0x48
   11ef6:	bd70      	pop	{r4, r5, r6, pc}
   11ef8:	0002b1b4 	.word	0x0002b1b4
   11efc:	447a0000 	.word	0x447a0000
   11f00:	200026f8 	.word	0x200026f8
   11f04:	4b742400 	.word	0x4b742400
   11f08:	20002568 	.word	0x20002568
   11f0c:	000186a0 	.word	0x000186a0

00011f10 <AppAMPGetCfg>:
   This function is provided for upper controllers that want to change
   application parameters specially for user defined parameters.
*/
AD5940Err AppAMPGetCfg(void *pCfg)
{
  if(pCfg){
   11f10:	b118      	cbz	r0, 11f1a <AppAMPGetCfg+0xa>
    *(AppAMPCfg_Type**)pCfg = &AppAMPCfg;
   11f12:	4b03      	ldr	r3, [pc, #12]	; (11f20 <AppAMPGetCfg+0x10>)
   11f14:	6003      	str	r3, [r0, #0]
    return AD5940ERR_OK;
   11f16:	2000      	movs	r0, #0
   11f18:	4770      	bx	lr
  }
  return AD5940ERR_PARA;
   11f1a:	f06f 0001 	mvn.w	r0, #1
}
   11f1e:	4770      	bx	lr
   11f20:	20000538 	.word	0x20000538

00011f24 <AppAMPInit>:
    return AD5940ERR_OK;
}

// This function provide application initialization
AD5940Err AppAMPInit(uint32_t *pBuffer, uint32_t BufferSize)
{
   11f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f28:	4605      	mov	r5, r0
   11f2a:	b0b2      	sub	sp, #200	; 0xc8
    AD5940Err error = AD5940ERR_OK;
    SEQCfg_Type seq_cfg;
    FIFOCfg_Type fifo_cfg;

    if(AD5940_WakeUp(10) > 10)      // Wake up AFE by read register, read 10 times at most
   11f2c:	200a      	movs	r0, #10
{
   11f2e:	460e      	mov	r6, r1
    if(AD5940_WakeUp(10) > 10)      // Wake up AFE by read register, read 10 times at most
   11f30:	f014 fa43 	bl	263ba <AD5940_WakeUp>
   11f34:	280a      	cmp	r0, #10
   11f36:	f200 8165 	bhi.w	12204 <AppAMPInit+0x2e0>
    seq_cfg.SeqWrTimer = 0;
    AD5940_SEQCfg(&seq_cfg);

    // float Rtia_value = 200;
    float Rtia_value = 1000;
    AppAMPCfg.RtiaCalValue.Magnitude = Rtia_value;
   11f3a:	4cb5      	ldr	r4, [pc, #724]	; (12210 <AppAMPInit+0x2ec>)
    seq_cfg.SeqEnable = bFALSE;
   11f3c:	2701      	movs	r7, #1
   11f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    seq_cfg.SeqWrTimer = 0;
   11f42:	f04f 0800 	mov.w	r8, #0
    AD5940_SEQCfg(&seq_cfg);
   11f46:	a803      	add	r0, sp, #12
    seq_cfg.SeqEnable = bFALSE;
   11f48:	e9cd 7303 	strd	r7, r3, [sp, #12]
    seq_cfg.SeqWrTimer = 0;
   11f4c:	f8cd 8014 	str.w	r8, [sp, #20]
    AD5940_SEQCfg(&seq_cfg);
   11f50:	f013 ff42 	bl	25dd8 <AD5940_SEQCfg>
    AppAMPCfg.RtiaCalValue.Magnitude = Rtia_value;
   11f54:	4baf      	ldr	r3, [pc, #700]	; (12214 <AppAMPInit+0x2f0>)
   11f56:	6563      	str	r3, [r4, #84]	; 0x54
    else
        AppAMPCfg.RtiaCalValue.Magnitude = AppAMPCfg.ExtRtiaVal;
    */

    // Reconfigure FIFO
    AD5940_FIFOCtrlS(DFTSRC_SINC3, bFALSE);                 // Disable FIFO firstly
   11f58:	4641      	mov	r1, r8
   11f5a:	4638      	mov	r0, r7
   11f5c:	f013 ff2a 	bl	25db4 <AD5940_FIFOCtrlS>
    fifo_cfg.FIFOEn = bTRUE;
    fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   11f60:	2302      	movs	r3, #2
    fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       // 4kB for FIFO, The reset 2kB for sequencer
   11f62:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    fifo_cfg.FIFOSrc = AppAMPCfg.DataFifoSrc;
   11f66:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11f68:	9311      	str	r3, [sp, #68]	; 0x44
    fifo_cfg.FIFOThresh = AppAMPCfg.FifoThresh;
    AD5940_FIFOCfg(&fifo_cfg);
   11f6a:	a80e      	add	r0, sp, #56	; 0x38
    fifo_cfg.FIFOThresh = AppAMPCfg.FifoThresh;
   11f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11f6e:	9312      	str	r3, [sp, #72]	; 0x48
    fifo_cfg.FIFOEn = bTRUE;
   11f70:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
    AD5940_FIFOCfg(&fifo_cfg);
   11f74:	f013 fef2 	bl	25d5c <AD5940_FIFOCfg>
    AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11f78:	f04f 30ff 	mov.w	r0, #4294967295
   11f7c:	f014 f9d1 	bl	26322 <AD5940_INTCClrFlag>

    // Start sequence generator

    // Initialize sequencer generator

    if((AppAMPCfg.AMPInited == bFALSE)|| (AppAMPCfg.bParaChanged == bTRUE))
   11f80:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   11f84:	b11b      	cbz	r3, 11f8e <AppAMPInit+0x6a>
   11f86:	7823      	ldrb	r3, [r4, #0]
   11f88:	42bb      	cmp	r3, r7
   11f8a:	f040 810f 	bne.w	121ac <AppAMPInit+0x288>
    {
        if(pBuffer == 0)  return AD5940ERR_PARA;
   11f8e:	2d00      	cmp	r5, #0
   11f90:	f000 813b 	beq.w	1220a <AppAMPInit+0x2e6>
        if(BufferSize == 0) return AD5940ERR_PARA;
   11f94:	2e00      	cmp	r6, #0
   11f96:	f000 8138 	beq.w	1220a <AppAMPInit+0x2e6>
        AD5940_SEQGenInit(pBuffer, BufferSize);
   11f9a:	4631      	mov	r1, r6
   11f9c:	4628      	mov	r0, r5
   11f9e:	f7ff fb43 	bl	11628 <AD5940_SEQGenInit>
  AD5940_SEQGenCtrl(bTRUE);
   11fa2:	2001      	movs	r0, #1
   11fa4:	f7ff fb60 	bl	11668 <AD5940_SEQGenCtrl>
  aferef_cfg.Disc1V1Cap = bFALSE;
   11fa8:	2500      	movs	r5, #0
  aferef_cfg.HpBandgapEn = bTRUE;
   11faa:	2301      	movs	r3, #1
  AD5940_REFCfgS(&aferef_cfg);
   11fac:	a806      	add	r0, sp, #24
  aferef_cfg.HpBandgapEn = bTRUE;
   11fae:	f88d 3018 	strb.w	r3, [sp, #24]
  aferef_cfg.Hp1V1BuffEn = bTRUE;
   11fb2:	f88d 301a 	strb.w	r3, [sp, #26]
  aferef_cfg.Hp1V8BuffEn = bTRUE;
   11fb6:	f88d 3019 	strb.w	r3, [sp, #25]
  aferef_cfg.Disc1V1Cap = bFALSE;
   11fba:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  aferef_cfg.Disc1V8Cap = bFALSE;
   11fbe:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
  aferef_cfg.Hp1V8ThemBuff = bFALSE;
   11fc2:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  aferef_cfg.Hp1V8Ilimit = bFALSE;
   11fc6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  aferef_cfg.Lp1V1BuffEn = bTRUE;
   11fca:	f88d 301c 	strb.w	r3, [sp, #28]
  aferef_cfg.Lp1V8BuffEn = bTRUE;
   11fce:	f88d 301b 	strb.w	r3, [sp, #27]
  aferef_cfg.LpBandgapEn = bTRUE;
   11fd2:	f88d 301d 	strb.w	r3, [sp, #29]
  aferef_cfg.LpRefBufEn = bTRUE;
   11fd6:	f88d 301e 	strb.w	r3, [sp, #30]
  aferef_cfg.LpRefBoostEn = bFALSE;
   11fda:	f88d 501f 	strb.w	r5, [sp, #31]
  AD5940_REFCfgS(&aferef_cfg);
   11fde:	f013 fd2b 	bl	25a38 <AD5940_REFCfgS>
  lp_loop.LpDacCfg.LpDacSW = LPDACSW_VBIAS2LPPA|LPDACSW_VBIAS2PIN|LPDACSW_VZERO2LPTIA|LPDACSW_VZERO2PIN;
   11fe2:	231e      	movs	r3, #30
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;
   11fe4:	e9cd 3517 	strd	r3, r5, [sp, #92]	; 0x5c
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   11fe8:	498b      	ldr	r1, [pc, #556]	; (12218 <AppAMPInit+0x2f4>)
   11fea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  lp_loop.LpDacCfg.DataRst = bFALSE;
   11fec:	f44f 7380 	mov.w	r3, #256	; 0x100
   11ff0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_MMR;
   11ff4:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_12BIT;
   11ff8:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   11ffc:	f7ee f884 	bl	108 <__aeabi_fsub>
   12000:	4986      	ldr	r1, [pc, #536]	; (1221c <AppAMPInit+0x2f8>)
   12002:	f7ee fa3f 	bl	484 <__aeabi_fdiv>
   12006:	f7ee fb75 	bl	6f4 <__aeabi_f2uiz>
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   1200a:	4985      	ldr	r1, [pc, #532]	; (12220 <AppAMPInit+0x2fc>)
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   1200c:	b287      	uxth	r7, r0
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   1200e:	6e20      	ldr	r0, [r4, #96]	; 0x60
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   12010:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   12014:	f7ee fa36 	bl	484 <__aeabi_fdiv>
   12018:	f7ee fb46 	bl	6a8 <__aeabi_f2iz>
   1201c:	eb00 1387 	add.w	r3, r0, r7, lsl #6
   12020:	b29b      	uxth	r3, r3
    if(lp_loop.LpDacCfg.DacData12Bit>lp_loop.LpDacCfg.DacData6Bit*64)
   12022:	ebb3 1f87 	cmp.w	r3, r7, lsl #6
        lp_loop.LpDacCfg.DacData12Bit--;
   12026:	bfc8      	it	gt
   12028:	f103 33ff 	addgt.w	r3, r3, #4294967295
   1202c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
  lp_loop.LpAmpCfg.LpPaPwrEn = bTRUE;
   12030:	f240 1301 	movw	r3, #257	; 0x101
   12034:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
  lp_loop.LpAmpCfg.LpTiaRf = AppAMPCfg.LpTiaRf;
   12038:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1203a:	931c      	str	r3, [sp, #112]	; 0x70
  lp_loop.LpAmpCfg.LpTiaRload = AppAMPCfg.LpTiaRl;
   1203c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1203e:	931d      	str	r3, [sp, #116]	; 0x74
  if(AppAMPCfg.ExtRtia == bTRUE)
   12040:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    lp_loop.LpAmpCfg.LpAmpSel = LPAMP0;
   12044:	951b      	str	r5, [sp, #108]	; 0x6c
  if(AppAMPCfg.ExtRtia == bTRUE)
   12046:	2b01      	cmp	r3, #1
    lp_loop.LpAmpCfg.LpTiaRtia = AppAMPCfg.LptiaRtiaSel;
   12048:	bf1b      	ittet	ne
   1204a:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
   1204c:	931e      	strne	r3, [sp, #120]	; 0x78
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(9)|LPTIASW(2)|LPTIASW(4)|LPTIASW(5)|LPTIASW(12)|LPTIASW(13);
   1204e:	f243 2334 	movweq	r3, #12852	; 0x3234
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)|LPTIASW(12)|LPTIASW(13);
   12052:	f243 0334 	movwne	r3, #12340	; 0x3034
  AD5940_LPLoopCfgS(&lp_loop);
   12056:	a813      	add	r0, sp, #76	; 0x4c
    lp_loop.LpAmpCfg.LpTiaRtia = LPTIARTIA_OPEN;
   12058:	bf08      	it	eq
   1205a:	951e      	streq	r5, [sp, #120]	; 0x78
  lp_loop.LpAmpCfg.LpAmpPwrMod = LPAMPPWR_NORM;
   1205c:	951f      	str	r5, [sp, #124]	; 0x7c
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)|LPTIASW(12)|LPTIASW(13);
   1205e:	9320      	str	r3, [sp, #128]	; 0x80
  AD5940_LPLoopCfgS(&lp_loop);
   12060:	f013 fdd7 	bl	25c12 <AD5940_LPLoopCfgS>
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_AIN4;
   12064:	2314      	movs	r3, #20
   12066:	2210      	movs	r2, #16
   12068:	e9cd 3222 	strd	r3, r2, [sp, #136]	; 0x88
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   1206c:	2100      	movs	r1, #0
  dsp_cfg.ADCBaseCfg.ADCPga = AppAMPCfg.ADCPgaGain;
   1206e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12070:	9324      	str	r3, [sp, #144]	; 0x90
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   12072:	2208      	movs	r2, #8
   12074:	a82a      	add	r0, sp, #168	; 0xa8
   12076:	f015 fbe5 	bl	27844 <memset>
  memset(&dsp_cfg.DftCfg, 0, sizeof(dsp_cfg.DftCfg));
   1207a:	220c      	movs	r2, #12
   1207c:	2100      	movs	r1, #0
   1207e:	a82c      	add	r0, sp, #176	; 0xb0
   12080:	f015 fbe0 	bl	27844 <memset>
  dsp_cfg.ADCFilterCfg.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   12084:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   12088:	9326      	str	r3, [sp, #152]	; 0x98
  dsp_cfg.ADCFilterCfg.BpNotch = bFALSE;
   1208a:	2600      	movs	r6, #0
  dsp_cfg.ADCFilterCfg.ADCSinc3Osr = AppAMPCfg.ADCSinc3Osr;
   1208c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   12090:	9325      	str	r3, [sp, #148]	; 0x94
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   12092:	220c      	movs	r2, #12
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;    /* Tell filter block clock rate of ADC*/
   12094:	2303      	movs	r3, #3
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   12096:	4631      	mov	r1, r6
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;    /* Tell filter block clock rate of ADC*/
   12098:	2701      	movs	r7, #1
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   1209a:	a82f      	add	r0, sp, #188	; 0xbc
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;    /* Tell filter block clock rate of ADC*/
   1209c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
  dsp_cfg.ADCFilterCfg.BpNotch = bFALSE;
   120a0:	f8ad 60a4 	strh.w	r6, [sp, #164]	; 0xa4
  dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
   120a4:	f88d 70a6 	strb.w	r7, [sp, #166]	; 0xa6
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   120a8:	f015 fbcc 	bl	27844 <memset>
  AD5940_DSPCfgS(&dsp_cfg);
   120ac:	a822      	add	r0, sp, #136	; 0x88
   120ae:	f013 fe3f 	bl	25d30 <AD5940_DSPCfgS>
  AD5940_SWMatrixCfgS(&sw_cfg);
   120b2:	a80a      	add	r0, sp, #40	; 0x28
  sw_cfg.Pswitch = 0;
   120b4:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  sw_cfg.Tswitch = 0;
   120b8:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  AD5940_SWMatrixCfgS(&sw_cfg);
   120bc:	f013 fd11 	bl	25ae2 <AD5940_SWMatrixCfgS>
  AD5940_AFECtrlS(AFECTRL_HPREFPWR|AFECTRL_SINC2NOTCH, bTRUE);
   120c0:	4858      	ldr	r0, [pc, #352]	; (12224 <AppAMPInit+0x300>)
   120c2:	4639      	mov	r1, r7
   120c4:	f013 fc86 	bl	259d4 <AD5940_AFECtrlS>
  AD5940_AFECtrlS(AFECTRL_SINC2NOTCH, bFALSE);
   120c8:	4631      	mov	r1, r6
   120ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   120ce:	f013 fc81 	bl	259d4 <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0/*AGPIO_Pin6|AGPIO_Pin5|AGPIO_Pin1*/);        //GP6->endSeq, GP5 -> AD8233=OFF, GP1->RLD=OFF .
   120d2:	4630      	mov	r0, r6
   120d4:	f013 ff34 	bl	25f40 <AD5940_SEQGpioCtrlS>
  AD5940_SEQGenInsert(SEQ_STOP()); /* Add one extra command to disable sequencer for initialization sequence because we only want it to run one time. */
   120d8:	f04f 4001 	mov.w	r0, #2164260864	; 0x81000000
   120dc:	f7ff fa8e 	bl	115fc <AD5940_SEQGenInsert>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   120e0:	a902      	add	r1, sp, #8
   120e2:	a801      	add	r0, sp, #4
   120e4:	f7ff fab4 	bl	11650 <AD5940_SEQGenFetchSeq>
   120e8:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   120ea:	4630      	mov	r0, r6
   120ec:	f7ff fabc 	bl	11668 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   120f0:	2d00      	cmp	r5, #0
   120f2:	f040 8083 	bne.w	121fc <AppAMPInit+0x2d8>
    AppAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   120f6:	9a02      	ldr	r2, [sp, #8]
    AppAMPCfg.InitSeqInfo.SeqRamAddr = AppAMPCfg.SeqStartAddr;
   120f8:	6860      	ldr	r0, [r4, #4]
    AppAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   120fa:	9901      	ldr	r1, [sp, #4]
    AppAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   120fc:	67a2      	str	r2, [r4, #120]	; 0x78
    AppAMPCfg.InitSeqInfo.SeqRamAddr = AppAMPCfg.SeqStartAddr;
   120fe:	6760      	str	r0, [r4, #116]	; 0x74
    AppAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   12100:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    AppAMPCfg.InitSeqInfo.SeqId = SEQID_1;
   12104:	6727      	str	r7, [r4, #112]	; 0x70
    AD5940_SEQCmdWrite(AppAMPCfg.InitSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   12106:	f013 fed6 	bl	25eb6 <AD5940_SEQCmdWrite>
  clks_cal.DataType = DATATYPE_SINC2;
   1210a:	2302      	movs	r3, #2
  clks_cal.DataCount = 1;
   1210c:	e9cd 3722 	strd	r3, r7, [sp, #136]	; 0x88
  clks_cal.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   12110:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   12114:	6a21      	ldr	r1, [r4, #32]
   12116:	69a0      	ldr	r0, [r4, #24]
  clks_cal.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   12118:	9325      	str	r3, [sp, #148]	; 0x94
  clks_cal.ADCSinc3Osr = AppAMPCfg.ADCSinc3Osr;
   1211a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1211e:	9324      	str	r3, [sp, #144]	; 0x90
  clks_cal.ADCAvgNum = 0;
   12120:	9526      	str	r5, [sp, #152]	; 0x98
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   12122:	f7ee f9af 	bl	484 <__aeabi_fdiv>
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   12126:	a913      	add	r1, sp, #76	; 0x4c
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   12128:	9029      	str	r0, [sp, #164]	; 0xa4
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   1212a:	a822      	add	r0, sp, #136	; 0x88
   1212c:	f7ff fb50 	bl	117d0 <AD5940_ClksCalculate>
    WaitClks += 15;
   12130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  AD5940_SEQGenCtrl(bTRUE);
   12132:	4638      	mov	r0, r7
    WaitClks += 15;
   12134:	330f      	adds	r3, #15
   12136:	9313      	str	r3, [sp, #76]	; 0x4c
  AD5940_SEQGenCtrl(bTRUE);
   12138:	f7ff fa96 	bl	11668 <AD5940_SEQGenCtrl>
  AD5940_SEQGpioCtrlS(AGPIO_Pin2);
   1213c:	2004      	movs	r0, #4
   1213e:	f013 feff 	bl	25f40 <AD5940_SEQGpioCtrlS>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_SINC2NOTCH, bTRUE);
   12142:	4639      	mov	r1, r7
   12144:	4838      	ldr	r0, [pc, #224]	; (12228 <AppAMPInit+0x304>)
   12146:	f013 fc45 	bl	259d4 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*250));    /* wait 250us */
   1214a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   1214e:	f7ff fa55 	bl	115fc <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV, bTRUE);   /* Start ADC convert*/
   12152:	4639      	mov	r1, r7
   12154:	f44f 7080 	mov.w	r0, #256	; 0x100
   12158:	f013 fc3c 	bl	259d4 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));  /* wait for first data ready */
   1215c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1215e:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   12162:	f7ff fa4b 	bl	115fc <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bFALSE);  /* Stop ADC */
   12166:	4629      	mov	r1, r5
   12168:	4830      	ldr	r0, [pc, #192]	; (1222c <AppAMPInit+0x308>)
   1216a:	f013 fc33 	bl	259d4 <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0);
   1216e:	4628      	mov	r0, r5
   12170:	f013 fee6 	bl	25f40 <AD5940_SEQGpioCtrlS>
  AD5940_EnterSleepS();/* Goto hibernate */
   12174:	f014 f914 	bl	263a0 <AD5940_EnterSleepS>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   12178:	a90a      	add	r1, sp, #40	; 0x28
   1217a:	a806      	add	r0, sp, #24
   1217c:	f7ff fa68 	bl	11650 <AD5940_SEQGenFetchSeq>
   12180:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   12182:	4630      	mov	r0, r6
   12184:	f7ff fa70 	bl	11668 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   12188:	2d00      	cmp	r5, #0
   1218a:	d137      	bne.n	121fc <AppAMPInit+0x2d8>
    AppAMPCfg.MeasureSeqInfo.SeqRamAddr = AppAMPCfg.InitSeqInfo.SeqRamAddr + AppAMPCfg.InitSeqInfo.SeqLen ;
   1218c:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
    AppAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   12190:	9906      	ldr	r1, [sp, #24]
    AppAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   12192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    AppAMPCfg.MeasureSeqInfo.SeqId = SEQID_0;
   12194:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    AppAMPCfg.MeasureSeqInfo.SeqRamAddr = AppAMPCfg.InitSeqInfo.SeqRamAddr + AppAMPCfg.InitSeqInfo.SeqLen ;
   12198:	4418      	add	r0, r3
   1219a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    AppAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   1219e:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    AppAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   121a2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    AD5940_SEQCmdWrite(AppAMPCfg.MeasureSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   121a6:	f013 fe86 	bl	25eb6 <AD5940_SEQCmdWrite>

        // Generate measurement sequence
        error = AppAMPSeqMeasureGen();
        if(error != AD5940ERR_OK) return error;

        AppAMPCfg.bParaChanged = bFALSE; // Clear this flag as we already implemented the new configuration
   121aa:	7025      	strb	r5, [r4, #0]
      }

    // Initialization sequencer

    AppAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   121ac:	2300      	movs	r3, #0
    AD5940_SEQInfoCfg(&AppAMPCfg.InitSeqInfo);
   121ae:	4820      	ldr	r0, [pc, #128]	; (12230 <AppAMPInit+0x30c>)
    AppAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   121b0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    AD5940_SEQInfoCfg(&AppAMPCfg.InitSeqInfo);
   121b4:	f013 fe93 	bl	25ede <AD5940_SEQInfoCfg>
    seq_cfg.SeqEnable = bTRUE;
   121b8:	2301      	movs	r3, #1
    AD5940_SEQCfg(&seq_cfg);  // Enable sequencer
   121ba:	a803      	add	r0, sp, #12
    seq_cfg.SeqEnable = bTRUE;
   121bc:	f88d 3010 	strb.w	r3, [sp, #16]
    AD5940_SEQCfg(&seq_cfg);  // Enable sequencer
   121c0:	f013 fe0a 	bl	25dd8 <AD5940_SEQCfg>
    AD5940_SEQMmrTrig(AppAMPCfg.InitSeqInfo.SeqId);
   121c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
   121c6:	f013 fe6d 	bl	25ea4 <AD5940_SEQMmrTrig>

    while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   121ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   121ce:	2001      	movs	r0, #1
   121d0:	f014 f8ac 	bl	2632c <AD5940_INTCTestFlag>
   121d4:	2800      	cmp	r0, #0
   121d6:	d0f8      	beq.n	121ca <AppAMPInit+0x2a6>

    // Measurement sequence
    AppAMPCfg.MeasureSeqInfo.WriteSRAM = bFALSE;
    AD5940_SEQInfoCfg(&AppAMPCfg.MeasureSeqInfo);
   121d8:	4816      	ldr	r0, [pc, #88]	; (12234 <AppAMPInit+0x310>)
    AppAMPCfg.MeasureSeqInfo.WriteSRAM = bFALSE;
   121da:	2500      	movs	r5, #0
   121dc:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    AD5940_SEQInfoCfg(&AppAMPCfg.MeasureSeqInfo);
   121e0:	f013 fe7d 	bl	25ede <AD5940_SEQInfoCfg>

    //  seq_cfg.SeqEnable = bTRUE;
    //  AD5940_SEQCfg(&seq_cfg);    // Enable sequencer, and wait for trigger
    AD5940_SEQCtrlS(bTRUE);         // Enable sequencer, and wait for trigger. It's disabled in initialization sequence
   121e4:	2001      	movs	r0, #1
   121e6:	f013 fe4a 	bl	25e7e <AD5940_SEQCtrlS>
    AD5940_ClrMCUIntFlag();         // Clear interrupt flag generated before
   121ea:	f7ff fd51 	bl	11c90 <AD5940_ClrMCUIntFlag>

    AD5940_AFEPwrBW(AppAMPCfg.PwrMod, AFEBW_250KHZ);
   121ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   121f0:	2103      	movs	r1, #3
   121f2:	f013 fc1b 	bl	25a2c <AD5940_AFEPwrBW>
    AppAMPCfg.AMPInited = bTRUE;    // AMP application has been initialized
   121f6:	2301      	movs	r3, #1
   121f8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

  return AD5940ERR_OK;
} //end
   121fc:	4628      	mov	r0, r5
   121fe:	b032      	add	sp, #200	; 0xc8
   12200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AD5940ERR_WAKEUP;    // Wake up Failed
   12204:	f06f 0508 	mvn.w	r5, #8
   12208:	e7f8      	b.n	121fc <AppAMPInit+0x2d8>
        if(pBuffer == 0)  return AD5940ERR_PARA;
   1220a:	f06f 0501 	mvn.w	r5, #1
   1220e:	e7f5      	b.n	121fc <AppAMPInit+0x2d8>
   12210:	20000538 	.word	0x20000538
   12214:	447a0000 	.word	0x447a0000
   12218:	43480000 	.word	0x43480000
   1221c:	42098899 	.word	0x42098899
   12220:	3f098899 	.word	0x3f098899
   12224:	00010020 	.word	0x00010020
   12228:	00010080 	.word	0x00010080
   1222c:	00010180 	.word	0x00010180
   12230:	200005a8 	.word	0x200005a8
   12234:	200005bc 	.word	0x200005bc

00012238 <AppAMPCalcVoltage>:
  return 0;
}

/* Calculate voltage */
float AppAMPCalcVoltage(uint32_t ADCcode)
{
   12238:	b538      	push	{r3, r4, r5, lr}
  float kFactor = 1.835/1.82;
  float fVolt = 0.0;
  int32_t tmp = 0;
  tmp = ADCcode - 32768;
  switch(AppAMPCfg.ADCPgaGain)
   1223a:	4c24      	ldr	r4, [pc, #144]	; (122cc <AppAMPCalcVoltage+0x94>)
   1223c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  tmp = ADCcode - 32768;
   1223e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  switch(AppAMPCfg.ADCPgaGain)
   12242:	2b04      	cmp	r3, #4
   12244:	d840      	bhi.n	122c8 <AppAMPCalcVoltage+0x90>
   12246:	e8df f003 	tbb	[pc, r3]
   1224a:	1003      	.short	0x1003
   1224c:	2c1d      	.short	0x2c1d
   1224e:	36          	.byte	0x36
   1224f:	00          	.byte	0x00
  {
    case ADCPGA_1:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/1)*kFactor;
   12250:	f7ee f810 	bl	274 <__aeabi_i2f>
   12254:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   12258:	f7ee f860 	bl	31c <__aeabi_fmul>
   1225c:	6b61      	ldr	r1, [r4, #52]	; 0x34
      break;
    case ADCPGA_4:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
      break;
    case ADCPGA_9:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   1225e:	f7ee f85d 	bl	31c <__aeabi_fmul>
   12262:	491b      	ldr	r1, [pc, #108]	; (122d0 <AppAMPCalcVoltage+0x98>)
   12264:	f7ee f85a 	bl	31c <__aeabi_fmul>
      break;
  }
  return fVolt;
}
   12268:	bd38      	pop	{r3, r4, r5, pc}
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/1.5f)*kFactor;
   1226a:	f7ee f803 	bl	274 <__aeabi_i2f>
   1226e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   12272:	f7ee f853 	bl	31c <__aeabi_fmul>
   12276:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   1227a:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   1227c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1227e:	f7ee f901 	bl	484 <__aeabi_fdiv>
   12282:	e00b      	b.n	1229c <AppAMPCalcVoltage+0x64>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/2)*kFactor;
   12284:	f7ed fff6 	bl	274 <__aeabi_i2f>
   12288:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   1228c:	f7ee f846 	bl	31c <__aeabi_fmul>
   12290:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   12294:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
   12296:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12298:	f7ee f840 	bl	31c <__aeabi_fmul>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   1229c:	4601      	mov	r1, r0
   1229e:	4628      	mov	r0, r5
   122a0:	e7dd      	b.n	1225e <AppAMPCalcVoltage+0x26>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
   122a2:	f7ed ffe7 	bl	274 <__aeabi_i2f>
   122a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   122aa:	f7ee f837 	bl	31c <__aeabi_fmul>
   122ae:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   122b2:	4605      	mov	r5, r0
   122b4:	e7ef      	b.n	12296 <AppAMPCalcVoltage+0x5e>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   122b6:	f7ed ffdd 	bl	274 <__aeabi_i2f>
   122ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   122be:	f7ee f82d 	bl	31c <__aeabi_fmul>
   122c2:	4904      	ldr	r1, [pc, #16]	; (122d4 <AppAMPCalcVoltage+0x9c>)
   122c4:	4605      	mov	r5, r0
   122c6:	e7d9      	b.n	1227c <AppAMPCalcVoltage+0x44>
  switch(AppAMPCfg.ADCPgaGain)
   122c8:	2000      	movs	r0, #0
  return fVolt;
   122ca:	e7cd      	b.n	12268 <AppAMPCalcVoltage+0x30>
   122cc:	20000538 	.word	0x20000538
   122d0:	3f810e11 	.word	0x3f810e11
   122d4:	41100000 	.word	0x41100000

000122d8 <AppAMPCalcCurrent>:
/* Calculate current in uA */
float AppAMPCalcCurrent(uint32_t ADCcode)
{
   122d8:	b508      	push	{r3, lr}
  float fCurrent, fVoltage = 0.0;
  fVoltage = AppAMPCalcVoltage(ADCcode);
   122da:	f7ff ffad 	bl	12238 <AppAMPCalcVoltage>
  fCurrent = fVoltage/AppAMPCfg.RtiaCalValue.Magnitude;
   122de:	4b05      	ldr	r3, [pc, #20]	; (122f4 <AppAMPCalcCurrent+0x1c>)
   122e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   122e2:	f7ee f8cf 	bl	484 <__aeabi_fdiv>
  return -fCurrent*1000000;
   122e6:	4904      	ldr	r1, [pc, #16]	; (122f8 <AppAMPCalcCurrent+0x20>)
   122e8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   122ec:	f7ee f816 	bl	31c <__aeabi_fmul>
}
   122f0:	bd08      	pop	{r3, pc}
   122f2:	bf00      	nop
   122f4:	20000538 	.word	0x20000538
   122f8:	49742400 	.word	0x49742400

000122fc <AppAMPISR>:
{
   122fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122fe:	4604      	mov	r4, r0
  if(AD5940_WakeUp(10) > 10)  /* Wake up AFE by read register, read 10 times at most */
   12300:	200a      	movs	r0, #10
{
   12302:	460e      	mov	r6, r1
  if(AD5940_WakeUp(10) > 10)  /* Wake up AFE by read register, read 10 times at most */
   12304:	f014 f859 	bl	263ba <AD5940_WakeUp>
   12308:	280a      	cmp	r0, #10
   1230a:	d83c      	bhi.n	12386 <AppAMPISR+0x8a>
  AD5940_SleepKeyCtrlS(SLPKEY_LOCK);
   1230c:	2000      	movs	r0, #0
  *pCount = 0;
   1230e:	2500      	movs	r5, #0
  AD5940_SleepKeyCtrlS(SLPKEY_LOCK);
   12310:	f014 f841 	bl	26396 <AD5940_SleepKeyCtrlS>
  *pCount = 0;
   12314:	6035      	str	r5, [r6, #0]
  if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH) == bTRUE)
   12316:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1231a:	4628      	mov	r0, r5
   1231c:	f014 f806 	bl	2632c <AD5940_INTCTestFlag>
   12320:	2801      	cmp	r0, #1
   12322:	d133      	bne.n	1238c <AppAMPISR+0x90>
      FifoCnt = AD5940_FIFOGetCnt();
   12324:	f013 fd51 	bl	25dca <AD5940_FIFOGetCnt>
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   12328:	4601      	mov	r1, r0
      FifoCnt = AD5940_FIFOGetCnt();
   1232a:	4605      	mov	r5, r0
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   1232c:	4620      	mov	r0, r4
   1232e:	f013 fb07 	bl	25940 <AD5940_FIFORd>
      AD5940_INTCClrFlag(AFEINTSRC_DATAFIFOTHRESH);
   12332:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   12336:	f013 fff4 	bl	26322 <AD5940_INTCClrFlag>
  if(AppAMPCfg.NumOfData > 0)
   1233a:	4b15      	ldr	r3, [pc, #84]	; (12390 <AppAMPISR+0x94>)
   1233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1233e:	2900      	cmp	r1, #0
   12340:	dd14      	ble.n	1236c <AppAMPISR+0x70>
    AppAMPCfg.FifoDataCount += *pDataCount/4;
   12342:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   12346:	eb02 0295 	add.w	r2, r2, r5, lsr #2
    if(AppAMPCfg.FifoDataCount >= AppAMPCfg.NumOfData)
   1234a:	428a      	cmp	r2, r1
    AppAMPCfg.FifoDataCount += *pDataCount/4;
   1234c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if(AppAMPCfg.FifoDataCount >= AppAMPCfg.NumOfData)
   12350:	d30c      	bcc.n	1236c <AppAMPISR+0x70>
      AD5940_WUPTCtrl(bFALSE);
   12352:	2000      	movs	r0, #0
   12354:	f013 fe9c 	bl	26090 <AD5940_WUPTCtrl>
      AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);
   12358:	480e      	ldr	r0, [pc, #56]	; (12394 <AppAMPISR+0x98>)
   1235a:	f014 f81c 	bl	26396 <AD5940_SleepKeyCtrlS>
  for(i=0;i<datacount;i++)
   1235e:	eb04 0785 	add.w	r7, r4, r5, lsl #2
   12362:	42a7      	cmp	r7, r4
   12364:	d107      	bne.n	12376 <AppAMPISR+0x7a>
      *pCount = FifoCnt;
   12366:	6035      	str	r5, [r6, #0]
      return 0;
   12368:	2000      	movs	r0, #0
}
   1236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(AppAMPCfg.StopRequired == bTRUE)
   1236c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   12370:	2b01      	cmp	r3, #1
   12372:	d1f1      	bne.n	12358 <AppAMPISR+0x5c>
   12374:	e7ed      	b.n	12352 <AppAMPISR+0x56>
    pData[i] &= 0xffff;
   12376:	8820      	ldrh	r0, [r4, #0]
   12378:	f844 0b04 	str.w	r0, [r4], #4
    pOut[i] = AppAMPCalcCurrent(pData[i]);
   1237c:	f7ff ffac 	bl	122d8 <AppAMPCalcCurrent>
   12380:	f844 0c04 	str.w	r0, [r4, #-4]
  for(i=0;i<datacount;i++)
   12384:	e7ed      	b.n	12362 <AppAMPISR+0x66>
      return AD5940ERR_WAKEUP;  /* Wakeup Failed */
   12386:	f06f 0008 	mvn.w	r0, #8
   1238a:	e7ee      	b.n	1236a <AppAMPISR+0x6e>
  return 0;
   1238c:	4628      	mov	r0, r5
   1238e:	e7ec      	b.n	1236a <AppAMPISR+0x6e>
   12390:	20000538 	.word	0x20000538
   12394:	000a47e5 	.word	0x000a47e5

00012398 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1239c:	b08d      	sub	sp, #52	; 0x34
   1239e:	461f      	mov	r7, r3
   123a0:	9203      	str	r2, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   123a2:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123a6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   123aa:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123ac:	1c53      	adds	r3, r2, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   123ae:	0782      	lsls	r2, r0, #30
   123b0:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123b4:	9305      	str	r3, [sp, #20]
{
   123b6:	4605      	mov	r5, r0
   123b8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
   123ba:	f040 8222 	bne.w	12802 <cbvprintf_package+0x46a>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   123be:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   123c0:	2800      	cmp	r0, #0
   123c2:	f040 8221 	bne.w	12808 <cbvprintf_package+0x470>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   123c6:	f001 0607 	and.w	r6, r1, #7
   123ca:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   123cc:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   123d0:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
   123d4:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
   123d8:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   123da:	f8cd a010 	str.w	sl, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   123de:	4652      	mov	r2, sl
	bool parsing = false;
   123e0:	46d1      	mov	r9, sl
	size = sizeof(char *);
   123e2:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   123e4:	b105      	cbz	r5, 123e8 <cbvprintf_package+0x50>
				*(const char **)buf = s;
   123e6:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   123e8:	9805      	ldr	r0, [sp, #20]
   123ea:	2800      	cmp	r0, #0
   123ec:	dc07      	bgt.n	123fe <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   123ee:	48c6      	ldr	r0, [pc, #792]	; (12708 <cbvprintf_package+0x370>)
   123f0:	4287      	cmp	r7, r0
   123f2:	f0c0 8143 	bcc.w	1267c <cbvprintf_package+0x2e4>
   123f6:	48c5      	ldr	r0, [pc, #788]	; (1270c <cbvprintf_package+0x374>)
   123f8:	4287      	cmp	r7, r0
   123fa:	f080 813f 	bcs.w	1267c <cbvprintf_package+0x2e4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   123fe:	9803      	ldr	r0, [sp, #12]
   12400:	f010 0e02 	ands.w	lr, r0, #2
   12404:	f000 8153 	beq.w	126ae <cbvprintf_package+0x316>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12408:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1240c:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1240e:	f1be 0f00 	cmp.w	lr, #0
   12412:	f000 8139 	beq.w	12688 <cbvprintf_package+0x2f0>
   12416:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1241a:	f0c0 8135 	bcc.w	12688 <cbvprintf_package+0x2f0>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
   1241e:	f06f 0015 	mvn.w	r0, #21
   12422:	e0fd      	b.n	12620 <cbvprintf_package+0x288>
			switch (*fmt) {
   12424:	282b      	cmp	r0, #43	; 0x2b
   12426:	d833      	bhi.n	12490 <cbvprintf_package+0xf8>
   12428:	281f      	cmp	r0, #31
   1242a:	d811      	bhi.n	12450 <cbvprintf_package+0xb8>
				parsing = false;
   1242c:	f04f 0900 	mov.w	r9, #0
			if (*++fmt == '\0') {
   12430:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   12434:	2800      	cmp	r0, #0
   12436:	f000 817e 	beq.w	12736 <cbvprintf_package+0x39e>
			if (!parsing) {
   1243a:	f1b9 0f00 	cmp.w	r9, #0
   1243e:	d1f1      	bne.n	12424 <cbvprintf_package+0x8c>
				if (*fmt == '%') {
   12440:	2825      	cmp	r0, #37	; 0x25
   12442:	d1f5      	bne.n	12430 <cbvprintf_package+0x98>
					parsing = true;
   12444:	f04f 0901 	mov.w	r9, #1
				align = VA_STACK_ALIGN(ptrdiff_t);
   12448:	f04f 0804 	mov.w	r8, #4
				buf += size;
   1244c:	4641      	mov	r1, r8
   1244e:	e7ef      	b.n	12430 <cbvprintf_package+0x98>
			switch (*fmt) {
   12450:	3820      	subs	r0, #32
   12452:	280b      	cmp	r0, #11
   12454:	d8ea      	bhi.n	1242c <cbvprintf_package+0x94>
   12456:	f20f 0c08 	addw	ip, pc, #8
   1245a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1245e:	bf00      	nop
   12460:	00012431 	.word	0x00012431
   12464:	0001242d 	.word	0x0001242d
   12468:	0001242d 	.word	0x0001242d
   1246c:	00012431 	.word	0x00012431
   12470:	0001242d 	.word	0x0001242d
   12474:	0001242d 	.word	0x0001242d
   12478:	0001242d 	.word	0x0001242d
   1247c:	0001242d 	.word	0x0001242d
   12480:	0001242d 	.word	0x0001242d
   12484:	0001242d 	.word	0x0001242d
   12488:	00012643 	.word	0x00012643
   1248c:	00012431 	.word	0x00012431
   12490:	382d      	subs	r0, #45	; 0x2d
   12492:	fa5f fc80 	uxtb.w	ip, r0
   12496:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
   1249a:	d8c7      	bhi.n	1242c <cbvprintf_package+0x94>
   1249c:	284d      	cmp	r0, #77	; 0x4d
   1249e:	d8c5      	bhi.n	1242c <cbvprintf_package+0x94>
   124a0:	f20f 0c04 	addw	ip, pc, #4
   124a4:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   124a8:	00012431 	.word	0x00012431
   124ac:	00012431 	.word	0x00012431
   124b0:	0001242d 	.word	0x0001242d
   124b4:	00012431 	.word	0x00012431
   124b8:	00012431 	.word	0x00012431
   124bc:	00012431 	.word	0x00012431
   124c0:	00012431 	.word	0x00012431
   124c4:	00012431 	.word	0x00012431
   124c8:	00012431 	.word	0x00012431
   124cc:	00012431 	.word	0x00012431
   124d0:	00012431 	.word	0x00012431
   124d4:	00012431 	.word	0x00012431
   124d8:	00012431 	.word	0x00012431
   124dc:	0001242d 	.word	0x0001242d
   124e0:	0001242d 	.word	0x0001242d
   124e4:	0001242d 	.word	0x0001242d
   124e8:	0001242d 	.word	0x0001242d
   124ec:	0001242d 	.word	0x0001242d
   124f0:	0001242d 	.word	0x0001242d
   124f4:	0001242d 	.word	0x0001242d
   124f8:	000125fd 	.word	0x000125fd
   124fc:	0001242d 	.word	0x0001242d
   12500:	0001242d 	.word	0x0001242d
   12504:	0001242d 	.word	0x0001242d
   12508:	000125fd 	.word	0x000125fd
   1250c:	000125fd 	.word	0x000125fd
   12510:	000125fd 	.word	0x000125fd
   12514:	0001242d 	.word	0x0001242d
   12518:	0001242d 	.word	0x0001242d
   1251c:	0001242d 	.word	0x0001242d
   12520:	0001242d 	.word	0x0001242d
   12524:	00012431 	.word	0x00012431
   12528:	0001242d 	.word	0x0001242d
   1252c:	0001242d 	.word	0x0001242d
   12530:	0001242d 	.word	0x0001242d
   12534:	0001242d 	.word	0x0001242d
   12538:	0001242d 	.word	0x0001242d
   1253c:	0001242d 	.word	0x0001242d
   12540:	0001242d 	.word	0x0001242d
   12544:	0001242d 	.word	0x0001242d
   12548:	0001242d 	.word	0x0001242d
   1254c:	0001242d 	.word	0x0001242d
   12550:	0001242d 	.word	0x0001242d
   12554:	000125e1 	.word	0x000125e1
   12558:	0001242d 	.word	0x0001242d
   1255c:	0001242d 	.word	0x0001242d
   12560:	0001242d 	.word	0x0001242d
   12564:	0001242d 	.word	0x0001242d
   12568:	0001242d 	.word	0x0001242d
   1256c:	0001242d 	.word	0x0001242d
   12570:	0001242d 	.word	0x0001242d
   12574:	0001242d 	.word	0x0001242d
   12578:	000125fd 	.word	0x000125fd
   1257c:	0001242d 	.word	0x0001242d
   12580:	000125e1 	.word	0x000125e1
   12584:	000125e1 	.word	0x000125e1
   12588:	000125fd 	.word	0x000125fd
   1258c:	000125fd 	.word	0x000125fd
   12590:	000125fd 	.word	0x000125fd
   12594:	00012431 	.word	0x00012431
   12598:	000125e1 	.word	0x000125e1
   1259c:	00012631 	.word	0x00012631
   125a0:	0001242d 	.word	0x0001242d
   125a4:	00012431 	.word	0x00012431
   125a8:	0001242d 	.word	0x0001242d
   125ac:	00012637 	.word	0x00012637
   125b0:	000125e1 	.word	0x000125e1
   125b4:	00012637 	.word	0x00012637
   125b8:	0001242d 	.word	0x0001242d
   125bc:	0001242d 	.word	0x0001242d
   125c0:	0001263f 	.word	0x0001263f
   125c4:	00012449 	.word	0x00012449
   125c8:	000125e1 	.word	0x000125e1
   125cc:	0001242d 	.word	0x0001242d
   125d0:	0001242d 	.word	0x0001242d
   125d4:	000125e1 	.word	0x000125e1
   125d8:	0001242d 	.word	0x0001242d
   125dc:	00012449 	.word	0x00012449
				if (fmt[-1] == 'l') {
   125e0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   125e4:	286c      	cmp	r0, #108	; 0x6c
   125e6:	d143      	bne.n	12670 <cbvprintf_package+0x2d8>
					if (fmt[-2] == 'l') {
   125e8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   125ec:	2000      	movs	r0, #0
   125ee:	296c      	cmp	r1, #108	; 0x6c
				parsing = false;
   125f0:	4681      	mov	r9, r0
					if (fmt[-2] == 'l') {
   125f2:	d040      	beq.n	12676 <cbvprintf_package+0x2de>
				align = VA_STACK_ALIGN(void *);
   125f4:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long long);
   125f8:	4641      	mov	r1, r8
   125fa:	e023      	b.n	12644 <cbvprintf_package+0x2ac>
					v.ld = va_arg(ap, long double);
   125fc:	9801      	ldr	r0, [sp, #4]
   125fe:	f100 0b07 	add.w	fp, r0, #7
   12602:	f02b 0007 	bic.w	r0, fp, #7
   12606:	e8f0 8902 	ldrd	r8, r9, [r0], #8
				buf = (void *) ROUND_UP(buf, align);
   1260a:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   1260c:	9001      	str	r0, [sp, #4]
				buf = (void *) ROUND_UP(buf, align);
   1260e:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   12612:	b155      	cbz	r5, 1262a <cbvprintf_package+0x292>
					if (BUF_OFFSET + size > len) {
   12614:	eb0e 0004 	add.w	r0, lr, r4
   12618:	42b0      	cmp	r0, r6
   1261a:	d904      	bls.n	12626 <cbvprintf_package+0x28e>
						return -ENOSPC;
   1261c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12620:	b00d      	add	sp, #52	; 0x34
   12622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						*(long double *)buf = v.ld;
   12626:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
   1262a:	3408      	adds	r4, #8
				parsing = false;
   1262c:	f04f 0900 	mov.w	r9, #0
				buf += size;
   12630:	f04f 0808 	mov.w	r8, #8
   12634:	e70a      	b.n	1244c <cbvprintf_package+0xb4>
			switch (*fmt) {
   12636:	2000      	movs	r0, #0
				parsing = false;
   12638:	f04f 0900 	mov.w	r9, #0
   1263c:	e7da      	b.n	125f4 <cbvprintf_package+0x25c>
				is_str_arg = true;
   1263e:	4648      	mov	r0, r9
   12640:	e7fa      	b.n	12638 <cbvprintf_package+0x2a0>
			switch (*fmt) {
   12642:	2000      	movs	r0, #0
		buf = (void *) ROUND_UP(buf, align);
   12644:	3c01      	subs	r4, #1
   12646:	4444      	add	r4, r8
   12648:	f1c8 0c00 	rsb	ip, r8, #0
   1264c:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12650:	b125      	cbz	r5, 1265c <cbvprintf_package+0x2c4>
   12652:	eba1 0c05 	sub.w	ip, r1, r5
   12656:	44a4      	add	ip, r4
   12658:	45b4      	cmp	ip, r6
   1265a:	d8df      	bhi.n	1261c <cbvprintf_package+0x284>
		if (is_str_arg) {
   1265c:	2800      	cmp	r0, #0
   1265e:	d045      	beq.n	126ec <cbvprintf_package+0x354>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12660:	9805      	ldr	r0, [sp, #20]
			s = va_arg(ap, char *);
   12662:	f8dd b004 	ldr.w	fp, [sp, #4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12666:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
   12668:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1266c:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   1266e:	e6b9      	b.n	123e4 <cbvprintf_package+0x4c>
   12670:	2000      	movs	r0, #0
				parsing = false;
   12672:	4681      	mov	r9, r0
   12674:	e7e6      	b.n	12644 <cbvprintf_package+0x2ac>
						align = VA_STACK_ALIGN(long long);
   12676:	f04f 0808 	mov.w	r8, #8
   1267a:	e7bd      	b.n	125f8 <cbvprintf_package+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   1267c:	9803      	ldr	r0, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1267e:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   12682:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
   12686:	e6c1      	b.n	1240c <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12688:	2a0f      	cmp	r2, #15
   1268a:	f63f aec8 	bhi.w	1241e <cbvprintf_package+0x86>
				if (buf0 != NULL) {
   1268e:	b1d5      	cbz	r5, 126c6 <cbvprintf_package+0x32e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12690:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   12694:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
   12698:	4496      	add	lr, r2
   1269a:	f1bc 0f00 	cmp.w	ip, #0
   1269e:	d00c      	beq.n	126ba <cbvprintf_package+0x322>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   126a0:	f060 007f 	orn	r0, r0, #127	; 0x7f
   126a4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
   126a8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
   126ac:	3201      	adds	r2, #1
			buf += sizeof(char *);
   126ae:	3404      	adds	r4, #4
			is_str_arg = false;
   126b0:	f8cd b004 	str.w	fp, [sp, #4]
					if (BUF_OFFSET + size > len) {
   126b4:	f1c5 0e08 	rsb	lr, r5, #8
   126b8:	e6ba      	b.n	12430 <cbvprintf_package+0x98>
					str_ptr_pos[s_idx] = s_ptr_idx;
   126ba:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
   126be:	9804      	ldr	r0, [sp, #16]
   126c0:	3001      	adds	r0, #1
   126c2:	9004      	str	r0, [sp, #16]
   126c4:	e7f2      	b.n	126ac <cbvprintf_package+0x314>
				} else if (is_ro || rws_pos_en) {
   126c6:	f1bc 0f00 	cmp.w	ip, #0
   126ca:	d101      	bne.n	126d0 <cbvprintf_package+0x338>
   126cc:	9802      	ldr	r0, [sp, #8]
   126ce:	b108      	cbz	r0, 126d4 <cbvprintf_package+0x33c>
					len += 1;
   126d0:	3601      	adds	r6, #1
   126d2:	e7eb      	b.n	126ac <cbvprintf_package+0x314>
					len += strlen(s) + 1 + 1;
   126d4:	4638      	mov	r0, r7
   126d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
   126da:	9301      	str	r3, [sp, #4]
   126dc:	f015 f851 	bl	27782 <strlen>
   126e0:	3602      	adds	r6, #2
   126e2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   126e6:	9b01      	ldr	r3, [sp, #4]
   126e8:	4406      	add	r6, r0
   126ea:	e7df      	b.n	126ac <cbvprintf_package+0x314>
		} else if (size == sizeof(int)) {
   126ec:	2904      	cmp	r1, #4
   126ee:	d10f      	bne.n	12710 <cbvprintf_package+0x378>
			int v = va_arg(ap, int);
   126f0:	9801      	ldr	r0, [sp, #4]
   126f2:	3004      	adds	r0, #4
			if (buf0 != NULL) {
   126f4:	b12d      	cbz	r5, 12702 <cbvprintf_package+0x36a>
			int v = va_arg(ap, int);
   126f6:	f8dd c004 	ldr.w	ip, [sp, #4]
   126fa:	f8dc c000 	ldr.w	ip, [ip]
   126fe:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
   12702:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
   12704:	9001      	str	r0, [sp, #4]
   12706:	e693      	b.n	12430 <cbvprintf_package+0x98>
   12708:	0002b0bc 	.word	0x0002b0bc
   1270c:	0002eb5c 	.word	0x0002eb5c
		} else if (size == sizeof(long long)) {
   12710:	2908      	cmp	r1, #8
   12712:	f47f ae84 	bne.w	1241e <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
   12716:	9801      	ldr	r0, [sp, #4]
   12718:	f100 0b07 	add.w	fp, r0, #7
   1271c:	f02b 0007 	bic.w	r0, fp, #7
   12720:	f100 0c08 	add.w	ip, r0, #8
   12724:	f8cd c004 	str.w	ip, [sp, #4]
			if (buf0 != NULL) {
   12728:	b11d      	cbz	r5, 12732 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
   1272a:	e9d0 bc00 	ldrd	fp, ip, [r0]
   1272e:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
   12732:	3408      	adds	r4, #8
   12734:	e67c      	b.n	12430 <cbvprintf_package+0x98>
	if (BUF_OFFSET / sizeof(int) > 255) {
   12736:	1b61      	subs	r1, r4, r5
   12738:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1273c:	f4bf ae6f 	bcs.w	1241e <cbvprintf_package+0x86>
	if (buf0 == NULL) {
   12740:	b91d      	cbnz	r5, 1274a <cbvprintf_package+0x3b2>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12742:	f1a6 0408 	sub.w	r4, r6, #8
   12746:	1860      	adds	r0, r4, r1
   12748:	e76a      	b.n	12620 <cbvprintf_package+0x288>
	if (rws_pos_en) {
   1274a:	9b02      	ldr	r3, [sp, #8]
	*(char **)buf0 = NULL;
   1274c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1274e:	0889      	lsrs	r1, r1, #2
   12750:	7029      	strb	r1, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12752:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (rws_pos_en) {
   12756:	b1a3      	cbz	r3, 12782 <cbvprintf_package+0x3ea>
		pkg_hdr->desc.str_cnt = 0;
   12758:	7068      	strb	r0, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1275a:	70e9      	strb	r1, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1275c:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
   12760:	f1ba 0f00 	cmp.w	sl, #0
   12764:	d006      	beq.n	12774 <cbvprintf_package+0x3dc>
   12766:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   12768:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
   1276c:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
   12770:	4562      	cmp	r2, ip
   12772:	d10a      	bne.n	1278a <cbvprintf_package+0x3f2>
   12774:	f10d 0820 	add.w	r8, sp, #32
   12778:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
   1277c:	f1c5 0b01 	rsb	fp, r5, #1
   12780:	e039      	b.n	127f6 <cbvprintf_package+0x45e>
		pkg_hdr->desc.rw_str_cnt = 0;
   12782:	9b02      	ldr	r3, [sp, #8]
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12784:	7069      	strb	r1, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12786:	70eb      	strb	r3, [r5, #3]
   12788:	e7e8      	b.n	1275c <cbvprintf_package+0x3c4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1278a:	f810 1b01 	ldrb.w	r1, [r0], #1
   1278e:	060b      	lsls	r3, r1, #24
   12790:	d508      	bpl.n	127a4 <cbvprintf_package+0x40c>
			if (BUF_OFFSET + 1 > len) {
   12792:	eb04 080e 	add.w	r8, r4, lr
   12796:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12798:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1279c:	f63f af3e 	bhi.w	1261c <cbvprintf_package+0x284>
			*buf++ = pos;
   127a0:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
   127a4:	f10c 0c01 	add.w	ip, ip, #1
   127a8:	e7e2      	b.n	12770 <cbvprintf_package+0x3d8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   127aa:	f1ba 0f00 	cmp.w	sl, #0
   127ae:	d003      	beq.n	127b8 <cbvprintf_package+0x420>
   127b0:	f998 2000 	ldrsb.w	r2, [r8]
   127b4:	2a00      	cmp	r2, #0
   127b6:	db1c      	blt.n	127f2 <cbvprintf_package+0x45a>
		if (rws_pos_en) {
   127b8:	9b02      	ldr	r3, [sp, #8]
   127ba:	bb03      	cbnz	r3, 127fe <cbvprintf_package+0x466>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   127bc:	f898 2000 	ldrb.w	r2, [r8]
   127c0:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   127c4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   127c8:	4638      	mov	r0, r7
   127ca:	f014 ffda 	bl	27782 <strlen>
   127ce:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
   127d0:	eb04 010b 	add.w	r1, r4, fp
   127d4:	4411      	add	r1, r2
   127d6:	42b1      	cmp	r1, r6
   127d8:	f63f af20 	bhi.w	1261c <cbvprintf_package+0x284>
		*buf++ = str_ptr_pos[i];
   127dc:	f898 1000 	ldrb.w	r1, [r8]
   127e0:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
   127e4:	4639      	mov	r1, r7
   127e6:	4620      	mov	r0, r4
   127e8:	9201      	str	r2, [sp, #4]
   127ea:	f015 f820 	bl	2782e <memcpy>
		buf += size;
   127ee:	9a01      	ldr	r2, [sp, #4]
   127f0:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   127f2:	f108 0801 	add.w	r8, r8, #1
   127f6:	45c1      	cmp	r9, r8
   127f8:	d1d7      	bne.n	127aa <cbvprintf_package+0x412>
	return BUF_OFFSET;
   127fa:	1b60      	subs	r0, r4, r5
   127fc:	e710      	b.n	12620 <cbvprintf_package+0x288>
			size = 0;
   127fe:	2200      	movs	r2, #0
   12800:	e7e6      	b.n	127d0 <cbvprintf_package+0x438>
		return -EFAULT;
   12802:	f06f 000d 	mvn.w	r0, #13
   12806:	e70b      	b.n	12620 <cbvprintf_package+0x288>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12808:	2907      	cmp	r1, #7
   1280a:	f63f ade1 	bhi.w	123d0 <cbvprintf_package+0x38>
   1280e:	e705      	b.n	1261c <cbvprintf_package+0x284>

00012810 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12814:	b093      	sub	sp, #76	; 0x4c
   12816:	4604      	mov	r4, r0
   12818:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   1281c:	9201      	str	r2, [sp, #4]
   1281e:	461f      	mov	r7, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12820:	468b      	mov	fp, r1
   12822:	b949      	cbnz	r1, 12838 <cbprintf_package_convert+0x28>
	buf += ros_nbr;
   12824:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   12826:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   12828:	7880      	ldrb	r0, [r0, #2]
   1282a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1282e:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   12830:	45b3      	cmp	fp, r6
   12832:	d318      	bcc.n	12866 <cbprintf_package_convert+0x56>
	return (size_t)(uintptr_t)(buf - start);
   12834:	eba0 0b04 	sub.w	fp, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12838:	78a5      	ldrb	r5, [r4, #2]
   1283a:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
   1283c:	b1e5      	cbz	r5, 12878 <cbprintf_package_convert+0x68>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   1283e:	f00a 0301 	and.w	r3, sl, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12842:	78e2      	ldrb	r2, [r4, #3]
   12844:	9202      	str	r2, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
   12846:	b112      	cbz	r2, 1284e <cbprintf_package_convert+0x3e>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12848:	f01a 0f02 	tst.w	sl, #2
   1284c:	d116      	bne.n	1287c <cbprintf_package_convert+0x6c>
   1284e:	b9ab      	cbnz	r3, 1287c <cbprintf_package_convert+0x6c>
		if (cb) {
   12850:	9b01      	ldr	r3, [sp, #4]
   12852:	b11b      	cbz	r3, 1285c <cbprintf_package_convert+0x4c>
			cb(in_packaged, in_len, ctx);
   12854:	463a      	mov	r2, r7
   12856:	4659      	mov	r1, fp
   12858:	4620      	mov	r0, r4
   1285a:	4798      	blx	r3
		}

		return in_len;
   1285c:	465e      	mov	r6, fp

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1285e:	4630      	mov	r0, r6
   12860:	b013      	add	sp, #76	; 0x4c
   12862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   12866:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   12868:	4628      	mov	r0, r5
   1286a:	f014 ff8a 	bl	27782 <strlen>
   1286e:	3001      	adds	r0, #1
   12870:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
   12872:	f10b 0b01 	add.w	fp, fp, #1
   12876:	e7db      	b.n	12830 <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
   12878:	462b      	mov	r3, r5
   1287a:	e7e2      	b.n	12842 <cbprintf_package_convert+0x32>
	args_size = in_desc->len * sizeof(int);
   1287c:	f894 9000 	ldrb.w	r9, [r4]
   12880:	ea4f 0289 	mov.w	r2, r9, lsl #2
   12884:	9204      	str	r2, [sp, #16]
	if (cb == NULL) {
   12886:	9a01      	ldr	r2, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
   12888:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	if (cb == NULL) {
   1288c:	2a00      	cmp	r2, #0
   1288e:	d15a      	bne.n	12946 <cbprintf_package_convert+0x136>
		out_len = (int)in_len;
   12890:	465e      	mov	r6, fp
		if (ro_cpy) {
   12892:	b393      	cbz	r3, 128fa <cbprintf_package_convert+0xea>
   12894:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   12896:	4617      	mov	r7, r2
			for (int i = 0; i < ros_nbr; i++) {
   12898:	45a9      	cmp	r9, r5
   1289a:	d11c      	bne.n	128d6 <cbprintf_package_convert+0xc6>
		bool drop_ro_str_pos = !(flags &
   1289c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   128a0:	f8df c234 	ldr.w	ip, [pc, #564]	; 12ad8 <cbprintf_package_convert+0x2c8>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   128a4:	498d      	ldr	r1, [pc, #564]	; (12adc <cbprintf_package_convert+0x2cc>)
		bool drop_ro_str_pos = !(flags &
   128a6:	f00a 0b05 	and.w	fp, sl, #5
		for (int i = 0; i < rws_nbr; i++) {
   128aa:	464d      	mov	r5, r9
   128ac:	44c8      	add	r8, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   128ae:	f00a 0202 	and.w	r2, sl, #2
		for (int i = 0; i < rws_nbr; i++) {
   128b2:	45a8      	cmp	r8, r5
   128b4:	d0d3      	beq.n	1285e <cbprintf_package_convert+0x4e>
			const char *str = *(const char **)&buf32[*str_pos];
   128b6:	f815 0b01 	ldrb.w	r0, [r5], #1
   128ba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   128be:	4560      	cmp	r0, ip
   128c0:	d324      	bcc.n	1290c <cbprintf_package_convert+0xfc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   128c2:	4288      	cmp	r0, r1
   128c4:	d222      	bcs.n	1290c <cbprintf_package_convert+0xfc>
   128c6:	f01a 0f01 	tst.w	sl, #1
   128ca:	d139      	bne.n	12940 <cbprintf_package_convert+0x130>
			if (is_ro && drop_ro_str_pos) {
   128cc:	f1bb 0f00 	cmp.w	fp, #0
   128d0:	d1ef      	bne.n	128b2 <cbprintf_package_convert+0xa2>
				out_len--;
   128d2:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
   128d4:	e7ed      	b.n	128b2 <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
   128d6:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
   128da:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   128de:	f014 ff50 	bl	27782 <strlen>
				if (strl && strl_cnt < strl_len) {
   128e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		return 1 + strlen(str);
   128e4:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   128e6:	b133      	cbz	r3, 128f6 <cbprintf_package_convert+0xe6>
   128e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   128ea:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   128ec:	bf3e      	ittt	cc
   128ee:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
   128f0:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   128f4:	3701      	addcc	r7, #1
				out_len += len;
   128f6:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
   128f8:	e7ce      	b.n	12898 <cbprintf_package_convert+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   128fa:	b12d      	cbz	r5, 12908 <cbprintf_package_convert+0xf8>
   128fc:	f01a 0704 	ands.w	r7, sl, #4
   12900:	d0cc      	beq.n	1289c <cbprintf_package_convert+0x8c>
				str_pos += ros_nbr;
   12902:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
   12904:	461f      	mov	r7, r3
   12906:	e7c9      	b.n	1289c <cbprintf_package_convert+0x8c>
   12908:	462f      	mov	r7, r5
   1290a:	e7c7      	b.n	1289c <cbprintf_package_convert+0x8c>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   1290c:	2a00      	cmp	r2, #0
   1290e:	d0d0      	beq.n	128b2 <cbprintf_package_convert+0xa2>
   12910:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
   12914:	9201      	str	r2, [sp, #4]
   12916:	f014 ff34 	bl	27782 <strlen>
				if (strl && strl_cnt < strl_len) {
   1291a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1291c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 12ad8 <cbprintf_package_convert+0x2c8>
   12920:	9a01      	ldr	r2, [sp, #4]
   12922:	496e      	ldr	r1, [pc, #440]	; (12adc <cbprintf_package_convert+0x2cc>)
		return 1 + strlen(str);
   12924:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   12926:	b133      	cbz	r3, 12936 <cbprintf_package_convert+0x126>
   12928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1292a:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   1292c:	bf3e      	ittt	cc
   1292e:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
   12930:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   12934:	3701      	addcc	r7, #1
				out_len += len;
   12936:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
   12938:	f1b9 0f00 	cmp.w	r9, #0
   1293c:	d0b9      	beq.n	128b2 <cbprintf_package_convert+0xa2>
   1293e:	e7c5      	b.n	128cc <cbprintf_package_convert+0xbc>
   12940:	f04f 0901 	mov.w	r9, #1
   12944:	e7e6      	b.n	12914 <cbprintf_package_convert+0x104>
	if (ro_cpy) {
   12946:	2b00      	cmp	r3, #0
   12948:	f040 80b9 	bne.w	12abe <cbprintf_package_convert+0x2ae>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   1294c:	b125      	cbz	r5, 12958 <cbprintf_package_convert+0x148>
   1294e:	f01a 0f04 	tst.w	sl, #4
   12952:	f040 80bc 	bne.w	12ace <cbprintf_package_convert+0x2be>
		keep_cnt = 0;
   12956:	461d      	mov	r5, r3
   12958:	46a8      	mov	r8, r5
	str_pos += ros_nbr;
   1295a:	9b03      	ldr	r3, [sp, #12]
   1295c:	4499      	add	r9, r3
	for (int i = 0; i < rws_nbr; i++) {
   1295e:	9b02      	ldr	r3, [sp, #8]
   12960:	eb03 0c09 	add.w	ip, r3, r9
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12964:	f00a 0304 	and.w	r3, sl, #4
   12968:	464a      	mov	r2, r9
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   1296a:	f00a 0001 	and.w	r0, sl, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   1296e:	f00a 0e02 	and.w	lr, sl, #2
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12972:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < rws_nbr; i++) {
   12974:	4594      	cmp	ip, r2
   12976:	d14f      	bne.n	12a18 <cbprintf_package_convert+0x208>
   12978:	9b02      	ldr	r3, [sp, #8]
   1297a:	444b      	add	r3, r9
   1297c:	9306      	str	r3, [sp, #24]
	out_desc.len = in_desc->len;
   1297e:	7823      	ldrb	r3, [r4, #0]
   12980:	9305      	str	r3, [sp, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12982:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   12984:	f01a 0f02 	tst.w	sl, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12988:	eb03 0205 	add.w	r2, r3, r5
   1298c:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   1298e:	bf0c      	ite	eq
   12990:	46c4      	moveq	ip, r8
   12992:	f04f 0c00 	movne.w	ip, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   12996:	2800      	cmp	r0, #0
   12998:	d160      	bne.n	12a5c <cbprintf_package_convert+0x24c>
   1299a:	f01a 0f04 	tst.w	sl, #4
   1299e:	bf14      	ite	ne
   129a0:	4641      	movne	r1, r8
   129a2:	2100      	moveq	r1, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   129a4:	f894 a002 	ldrb.w	sl, [r4, #2]
   129a8:	78e6      	ldrb	r6, [r4, #3]
   129aa:	9307      	str	r3, [sp, #28]
	*in_desc = out_desc;
   129ac:	7062      	strb	r2, [r4, #1]
   129ae:	70a1      	strb	r1, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
   129b0:	9b01      	ldr	r3, [sp, #4]
   129b2:	9904      	ldr	r1, [sp, #16]
	*in_desc = out_desc;
   129b4:	f884 c003 	strb.w	ip, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   129b8:	463a      	mov	r2, r7
   129ba:	4620      	mov	r0, r4
   129bc:	4798      	blx	r3
	if (rv < 0) {
   129be:	f1b0 0900 	subs.w	r9, r0, #0
   129c2:	db78      	blt.n	12ab6 <cbprintf_package_convert+0x2a6>
	*in_desc = in_desc_backup;
   129c4:	9b05      	ldr	r3, [sp, #20]
   129c6:	7023      	strb	r3, [r4, #0]
   129c8:	9b07      	ldr	r3, [sp, #28]
   129ca:	7063      	strb	r3, [r4, #1]
   129cc:	70e6      	strb	r6, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   129ce:	9b01      	ldr	r3, [sp, #4]
	*in_desc = in_desc_backup;
   129d0:	f884 a002 	strb.w	sl, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   129d4:	463a      	mov	r2, r7
   129d6:	4641      	mov	r1, r8
   129d8:	a80e      	add	r0, sp, #56	; 0x38
   129da:	4798      	blx	r3
	if (rv < 0) {
   129dc:	1e06      	subs	r6, r0, #0
   129de:	f6ff af3e 	blt.w	1285e <cbprintf_package_convert+0x4e>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   129e2:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   129e6:	4419      	add	r1, r3
   129e8:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
   129ea:	9806      	ldr	r0, [sp, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   129ec:	4419      	add	r1, r3
	rv = cb(str_pos, strs_len, ctx);
   129ee:	463a      	mov	r2, r7
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	ebab 0101 	sub.w	r1, fp, r1
   129f6:	4798      	blx	r3
	if (rv < 0) {
   129f8:	2800      	cmp	r0, #0
   129fa:	db5e      	blt.n	12aba <cbprintf_package_convert+0x2aa>
	out_len += rv;
   129fc:	444e      	add	r6, r9
	out_len += rv;
   129fe:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12a00:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
   12a04:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
	for (int i = 0; i < scpy_cnt; i++) {
   12a08:	454d      	cmp	r5, r9
   12a0a:	dc29      	bgt.n	12a60 <cbprintf_package_convert+0x250>
	(void)cb(NULL, 0, ctx);
   12a0c:	2100      	movs	r1, #0
   12a0e:	9b01      	ldr	r3, [sp, #4]
   12a10:	463a      	mov	r2, r7
   12a12:	4608      	mov	r0, r1
   12a14:	4798      	blx	r3
	return out_len;
   12a16:	e722      	b.n	1285e <cbprintf_package_convert+0x4e>
		const char *str = *(const char **)&buf32[*str_pos];
   12a18:	f812 3b01 	ldrb.w	r3, [r2], #1
   12a1c:	4e2e      	ldr	r6, [pc, #184]	; (12ad8 <cbprintf_package_convert+0x2c8>)
   12a1e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   12a22:	42b1      	cmp	r1, r6
   12a24:	d302      	bcc.n	12a2c <cbprintf_package_convert+0x21c>
   12a26:	4e2d      	ldr	r6, [pc, #180]	; (12adc <cbprintf_package_convert+0x2cc>)
   12a28:	42b1      	cmp	r1, r6
   12a2a:	d30b      	bcc.n	12a44 <cbprintf_package_convert+0x234>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12a2c:	f1be 0f00 	cmp.w	lr, #0
   12a30:	d109      	bne.n	12a46 <cbprintf_package_convert+0x236>
				keep_str_pos[keep_cnt++] = *str_pos;
   12a32:	ae12      	add	r6, sp, #72	; 0x48
   12a34:	f108 0101 	add.w	r1, r8, #1
   12a38:	44b0      	add	r8, r6
   12a3a:	f808 3c10 	strb.w	r3, [r8, #-16]
   12a3e:	fa5f f881 	uxtb.w	r8, r1
	for (int i = 0; i < rws_nbr; i++) {
   12a42:	e797      	b.n	12974 <cbprintf_package_convert+0x164>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
   12a44:	b130      	cbz	r0, 12a54 <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
   12a46:	ae12      	add	r6, sp, #72	; 0x48
   12a48:	1c69      	adds	r1, r5, #1
   12a4a:	4435      	add	r5, r6
   12a4c:	f805 3c20 	strb.w	r3, [r5, #-32]
   12a50:	b2cd      	uxtb	r5, r1
   12a52:	e78f      	b.n	12974 <cbprintf_package_convert+0x164>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12a54:	9905      	ldr	r1, [sp, #20]
   12a56:	2900      	cmp	r1, #0
   12a58:	d08c      	beq.n	12974 <cbprintf_package_convert+0x164>
   12a5a:	e7ea      	b.n	12a32 <cbprintf_package_convert+0x222>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   12a5c:	2100      	movs	r1, #0
   12a5e:	e7a1      	b.n	129a4 <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
   12a60:	f819 300b 	ldrb.w	r3, [r9, fp]
   12a64:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		const char *str = *(const char **)&buf32[loc];
   12a68:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   12a6e:	b1fb      	cbz	r3, 12ab0 <cbprintf_package_convert+0x2a0>
   12a70:	f833 8019 	ldrh.w	r8, [r3, r9, lsl #1]
		rv = cb(&loc, 1, ctx);
   12a74:	9b01      	ldr	r3, [sp, #4]
   12a76:	463a      	mov	r2, r7
   12a78:	2101      	movs	r1, #1
   12a7a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   12a7e:	4798      	blx	r3
		if (rv < 0) {
   12a80:	2800      	cmp	r0, #0
   12a82:	db1a      	blt.n	12aba <cbprintf_package_convert+0x2aa>
		out_len += rv;
   12a84:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   12a86:	f1b8 0f00 	cmp.w	r8, #0
   12a8a:	d106      	bne.n	12a9a <cbprintf_package_convert+0x28a>
   12a8c:	4650      	mov	r0, sl
   12a8e:	f014 fe78 	bl	27782 <strlen>
   12a92:	f100 0801 	add.w	r8, r0, #1
   12a96:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12a9a:	9b01      	ldr	r3, [sp, #4]
   12a9c:	463a      	mov	r2, r7
   12a9e:	4641      	mov	r1, r8
   12aa0:	4650      	mov	r0, sl
   12aa2:	4798      	blx	r3
		if (rv < 0) {
   12aa4:	2800      	cmp	r0, #0
   12aa6:	db08      	blt.n	12aba <cbprintf_package_convert+0x2aa>
		out_len += rv;
   12aa8:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12aaa:	f109 0901 	add.w	r9, r9, #1
   12aae:	e7ab      	b.n	12a08 <cbprintf_package_convert+0x1f8>
		uint16_t str_len = strl ? strl[i] : 0;
   12ab0:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   12ab4:	e7de      	b.n	12a74 <cbprintf_package_convert+0x264>
   12ab6:	464e      	mov	r6, r9
   12ab8:	e6d1      	b.n	1285e <cbprintf_package_convert+0x4e>
   12aba:	4606      	mov	r6, r0
   12abc:	e6cf      	b.n	1285e <cbprintf_package_convert+0x4e>
		dst = cpy_str_pos;
   12abe:	a80a      	add	r0, sp, #40	; 0x28
		keep_cnt = 0;
   12ac0:	f04f 0800 	mov.w	r8, #0
		memcpy(dst, str_pos, ros_nbr);
   12ac4:	9a03      	ldr	r2, [sp, #12]
   12ac6:	4649      	mov	r1, r9
   12ac8:	f014 feb1 	bl	2782e <memcpy>
   12acc:	e745      	b.n	1295a <cbprintf_package_convert+0x14a>
   12ace:	46a8      	mov	r8, r5
		dst = keep_str_pos;
   12ad0:	a80e      	add	r0, sp, #56	; 0x38
		scpy_cnt = 0;
   12ad2:	461d      	mov	r5, r3
   12ad4:	e7f6      	b.n	12ac4 <cbprintf_package_convert+0x2b4>
   12ad6:	bf00      	nop
   12ad8:	0002b0bc 	.word	0x0002b0bc
   12adc:	0002eb5c 	.word	0x0002eb5c

00012ae0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12ae0:	4b01      	ldr	r3, [pc, #4]	; (12ae8 <__printk_hook_install+0x8>)
   12ae2:	6018      	str	r0, [r3, #0]
}
   12ae4:	4770      	bx	lr
   12ae6:	bf00      	nop
   12ae8:	200005d8 	.word	0x200005d8

00012aec <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12aec:	b530      	push	{r4, r5, lr}
   12aee:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12af0:	2500      	movs	r5, #0
   12af2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12af6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12af8:	9500      	str	r5, [sp, #0]
   12afa:	a903      	add	r1, sp, #12
   12afc:	4805      	ldr	r0, [pc, #20]	; (12b14 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12afe:	9505      	str	r5, [sp, #20]
   12b00:	f000 f8ea 	bl	12cd8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12b04:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12b08:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12b0a:	bfb8      	it	lt
   12b0c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12b0e:	b007      	add	sp, #28
   12b10:	bd30      	pop	{r4, r5, pc}
   12b12:	bf00      	nop
   12b14:	000265c5 	.word	0x000265c5

00012b18 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b1c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12b20:	f019 0808 	ands.w	r8, r9, #8
{
   12b24:	4604      	mov	r4, r0
   12b26:	4693      	mov	fp, r2
	if (processing) {
   12b28:	d00d      	beq.n	12b46 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12b2a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12b2c:	bf0c      	ite	eq
   12b2e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12b32:	f049 0920 	orrne.w	r9, r9, #32
   12b36:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12b3a:	f38b 8811 	msr	BASEPRI, fp
   12b3e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b46:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12b4a:	2902      	cmp	r1, #2
   12b4c:	d107      	bne.n	12b5e <process_event+0x46>
			evt = process_recheck(mgr);
   12b4e:	4620      	mov	r0, r4
   12b50:	f013 fd67 	bl	26622 <process_recheck>
		if (evt == EVT_NOP) {
   12b54:	2800      	cmp	r0, #0
   12b56:	d0f0      	beq.n	12b3a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12b58:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b5a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   12b5c:	d14e      	bne.n	12bfc <process_event+0xe4>
			res = mgr->last_res;
   12b5e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b60:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12b62:	2f00      	cmp	r7, #0
   12b64:	da15      	bge.n	12b92 <process_event+0x7a>
		*clients = mgr->clients;
   12b66:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b68:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12b6c:	e9c4 8800 	strd	r8, r8, [r4]
   12b70:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12b74:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   12b76:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12b78:	8b21      	ldrh	r1, [r4, #24]
   12b7a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12b7e:	45ca      	cmp	sl, r9
   12b80:	d002      	beq.n	12b88 <process_event+0x70>
		if (do_monitors
   12b82:	68a3      	ldr	r3, [r4, #8]
   12b84:	2b00      	cmp	r3, #0
   12b86:	d15a      	bne.n	12c3e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   12b88:	b90d      	cbnz	r5, 12b8e <process_event+0x76>
		    || (transit != NULL)) {
   12b8a:	2e00      	cmp	r6, #0
   12b8c:	d071      	beq.n	12c72 <process_event+0x15a>
   12b8e:	2300      	movs	r3, #0
   12b90:	e056      	b.n	12c40 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b92:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12b96:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12b98:	2a01      	cmp	r2, #1
   12b9a:	d81e      	bhi.n	12bda <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b9c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12ba0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12ba2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ba4:	b289      	uxth	r1, r1
   12ba6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12baa:	d10a      	bne.n	12bc2 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12bac:	b13d      	cbz	r5, 12bbe <process_event+0xa6>
   12bae:	8b63      	ldrh	r3, [r4, #26]
   12bb0:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12bb2:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   12bb4:	3301      	adds	r3, #1
   12bb6:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12bb8:	2a00      	cmp	r2, #0
   12bba:	d1fa      	bne.n	12bb2 <process_event+0x9a>
   12bbc:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bbe:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12bc2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12bc4:	4620      	mov	r0, r4
   12bc6:	f013 fd2c 	bl	26622 <process_recheck>
   12bca:	4606      	mov	r6, r0
   12bcc:	2800      	cmp	r0, #0
   12bce:	d0d3      	beq.n	12b78 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12bd0:	8b23      	ldrh	r3, [r4, #24]
   12bd2:	f043 0320 	orr.w	r3, r3, #32
   12bd6:	8323      	strh	r3, [r4, #24]
   12bd8:	e7cd      	b.n	12b76 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12bda:	2b04      	cmp	r3, #4
   12bdc:	d10c      	bne.n	12bf8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bde:	f021 0107 	bic.w	r1, r1, #7
   12be2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12be4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12be6:	4620      	mov	r0, r4
   12be8:	f013 fd1b 	bl	26622 <process_recheck>
   12bec:	4605      	mov	r5, r0
   12bee:	2800      	cmp	r0, #0
   12bf0:	d0c1      	beq.n	12b76 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12bf2:	f041 0120 	orr.w	r1, r1, #32
   12bf6:	8321      	strh	r1, [r4, #24]
   12bf8:	2500      	movs	r5, #0
   12bfa:	e7bc      	b.n	12b76 <process_event+0x5e>
		} else if (evt == EVT_START) {
   12bfc:	2803      	cmp	r0, #3
   12bfe:	d109      	bne.n	12c14 <process_event+0xfc>
			transit = mgr->transitions->start;
   12c00:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c02:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12c06:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c08:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12c0c:	8323      	strh	r3, [r4, #24]
}
   12c0e:	2500      	movs	r5, #0
		res = 0;
   12c10:	462f      	mov	r7, r5
   12c12:	e7b1      	b.n	12b78 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12c14:	2804      	cmp	r0, #4
   12c16:	d106      	bne.n	12c26 <process_event+0x10e>
			transit = mgr->transitions->stop;
   12c18:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c1a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12c1e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c20:	f043 0304 	orr.w	r3, r3, #4
   12c24:	e7f2      	b.n	12c0c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   12c26:	2805      	cmp	r0, #5
   12c28:	d106      	bne.n	12c38 <process_event+0x120>
			transit = mgr->transitions->reset;
   12c2a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c2c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12c30:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c32:	f043 0305 	orr.w	r3, r3, #5
   12c36:	e7e9      	b.n	12c0c <process_event+0xf4>
   12c38:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12c3a:	462e      	mov	r6, r5
   12c3c:	e7e8      	b.n	12c10 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   12c3e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12c40:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12c44:	8321      	strh	r1, [r4, #24]
   12c46:	f38b 8811 	msr	BASEPRI, fp
   12c4a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12c4e:	b9fb      	cbnz	r3, 12c90 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   12c50:	bb85      	cbnz	r5, 12cb4 <process_event+0x19c>
			if (transit != NULL) {
   12c52:	b116      	cbz	r6, 12c5a <process_event+0x142>
				transit(mgr, transition_complete);
   12c54:	491f      	ldr	r1, [pc, #124]	; (12cd4 <process_event+0x1bc>)
   12c56:	4620      	mov	r0, r4
   12c58:	47b0      	blx	r6
	__asm__ volatile(
   12c5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c5e:	f3ef 8b11 	mrs	fp, BASEPRI
   12c62:	f383 8812 	msr	BASEPRI_MAX, r3
   12c66:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12c6a:	8b23      	ldrh	r3, [r4, #24]
   12c6c:	f023 0308 	bic.w	r3, r3, #8
   12c70:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12c72:	8b23      	ldrh	r3, [r4, #24]
   12c74:	06da      	lsls	r2, r3, #27
   12c76:	d525      	bpl.n	12cc4 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12c78:	f023 0310 	bic.w	r3, r3, #16
   12c7c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12c7e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12c80:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12c84:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12c88:	2900      	cmp	r1, #0
   12c8a:	f47f af5e 	bne.w	12b4a <process_event+0x32>
out:
   12c8e:	e754      	b.n	12b3a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12c90:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12c92:	2900      	cmp	r1, #0
   12c94:	d0dc      	beq.n	12c50 <process_event+0x138>
	return node->next;
   12c96:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   12c9a:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12c9e:	463b      	mov	r3, r7
   12ca0:	4652      	mov	r2, sl
   12ca2:	4620      	mov	r0, r4
   12ca4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12ca6:	f1b9 0f00 	cmp.w	r9, #0
   12caa:	d0d1      	beq.n	12c50 <process_event+0x138>
   12cac:	4649      	mov	r1, r9
   12cae:	f8d9 9000 	ldr.w	r9, [r9]
   12cb2:	e7f2      	b.n	12c9a <process_event+0x182>
   12cb4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12cb6:	463b      	mov	r3, r7
   12cb8:	4652      	mov	r2, sl
   12cba:	4620      	mov	r0, r4
   12cbc:	682d      	ldr	r5, [r5, #0]
   12cbe:	f013 fccc 	bl	2665a <notify_one>
   12cc2:	e7c5      	b.n	12c50 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12cc4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12cc8:	bf1e      	ittt	ne
   12cca:	f023 0320 	bicne.w	r3, r3, #32
   12cce:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12cd0:	2102      	movne	r1, #2
   12cd2:	e7d5      	b.n	12c80 <process_event+0x168>
   12cd4:	00026687 	.word	0x00026687

00012cd8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	b091      	sub	sp, #68	; 0x44
   12cde:	468b      	mov	fp, r1
   12ce0:	9002      	str	r0, [sp, #8]
   12ce2:	4692      	mov	sl, r2
   12ce4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12ce6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12ce8:	f89a 0000 	ldrb.w	r0, [sl]
   12cec:	b908      	cbnz	r0, 12cf2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12cee:	4628      	mov	r0, r5
   12cf0:	e363      	b.n	133ba <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   12cf2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12cf4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   12cf8:	d007      	beq.n	12d0a <z_cbvprintf_impl+0x32>
			OUTC('%');
   12cfa:	9b02      	ldr	r3, [sp, #8]
   12cfc:	4659      	mov	r1, fp
   12cfe:	4798      	blx	r3
   12d00:	2800      	cmp	r0, #0
   12d02:	f2c0 835a 	blt.w	133ba <z_cbvprintf_impl+0x6e2>
   12d06:	3501      	adds	r5, #1
			break;
   12d08:	e212      	b.n	13130 <z_cbvprintf_impl+0x458>
		} state = {
   12d0a:	2218      	movs	r2, #24
   12d0c:	2100      	movs	r1, #0
   12d0e:	a80a      	add	r0, sp, #40	; 0x28
   12d10:	f014 fd98 	bl	27844 <memset>
	if (*sp == '%') {
   12d14:	f89a 3001 	ldrb.w	r3, [sl, #1]
   12d18:	2b25      	cmp	r3, #37	; 0x25
   12d1a:	d078      	beq.n	12e0e <z_cbvprintf_impl+0x136>
   12d1c:	2200      	movs	r2, #0
   12d1e:	4610      	mov	r0, r2
   12d20:	4696      	mov	lr, r2
   12d22:	4694      	mov	ip, r2
   12d24:	4616      	mov	r6, r2
   12d26:	4639      	mov	r1, r7
		switch (*sp) {
   12d28:	f817 3b01 	ldrb.w	r3, [r7], #1
   12d2c:	2b2b      	cmp	r3, #43	; 0x2b
   12d2e:	f000 809d 	beq.w	12e6c <z_cbvprintf_impl+0x194>
   12d32:	f200 8094 	bhi.w	12e5e <z_cbvprintf_impl+0x186>
   12d36:	2b20      	cmp	r3, #32
   12d38:	f000 809b 	beq.w	12e72 <z_cbvprintf_impl+0x19a>
   12d3c:	2b23      	cmp	r3, #35	; 0x23
   12d3e:	f000 809b 	beq.w	12e78 <z_cbvprintf_impl+0x1a0>
   12d42:	b12e      	cbz	r6, 12d50 <z_cbvprintf_impl+0x78>
   12d44:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12d48:	f046 0604 	orr.w	r6, r6, #4
   12d4c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12d50:	f1bc 0f00 	cmp.w	ip, #0
   12d54:	d005      	beq.n	12d62 <z_cbvprintf_impl+0x8a>
   12d56:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12d5a:	f046 0608 	orr.w	r6, r6, #8
   12d5e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12d62:	f1be 0f00 	cmp.w	lr, #0
   12d66:	d005      	beq.n	12d74 <z_cbvprintf_impl+0x9c>
   12d68:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12d6c:	f046 0610 	orr.w	r6, r6, #16
   12d70:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12d74:	b128      	cbz	r0, 12d82 <z_cbvprintf_impl+0xaa>
   12d76:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12d7a:	f040 0020 	orr.w	r0, r0, #32
   12d7e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12d82:	b12a      	cbz	r2, 12d90 <z_cbvprintf_impl+0xb8>
   12d84:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12d8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12d90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12d94:	f002 0044 	and.w	r0, r2, #68	; 0x44
   12d98:	2844      	cmp	r0, #68	; 0x44
   12d9a:	d103      	bne.n	12da4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12d9c:	f36f 1286 	bfc	r2, #6, #1
   12da0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12da4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12da8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   12daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12dae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12db2:	d17b      	bne.n	12eac <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   12db4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12db8:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   12dbc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12dbe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   12dc2:	781a      	ldrb	r2, [r3, #0]
   12dc4:	2a2e      	cmp	r2, #46	; 0x2e
   12dc6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12dca:	bf0c      	ite	eq
   12dcc:	2101      	moveq	r1, #1
   12dce:	2100      	movne	r1, #0
   12dd0:	f361 0241 	bfi	r2, r1, #1, #1
   12dd4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   12dd8:	d174      	bne.n	12ec4 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   12dda:	785a      	ldrb	r2, [r3, #1]
   12ddc:	2a2a      	cmp	r2, #42	; 0x2a
   12dde:	d06a      	beq.n	12eb6 <z_cbvprintf_impl+0x1de>
	++sp;
   12de0:	3301      	adds	r3, #1
	size_t val = 0;
   12de2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   12de4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12de6:	4618      	mov	r0, r3
   12de8:	f810 2b01 	ldrb.w	r2, [r0], #1
   12dec:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12df0:	2f09      	cmp	r7, #9
   12df2:	f240 808e 	bls.w	12f12 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   12df6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   12dfa:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   12dfc:	f3c2 0040 	ubfx	r0, r2, #1, #1
   12e00:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   12e04:	f361 0241 	bfi	r2, r1, #1, #1
   12e08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12e0c:	e05a      	b.n	12ec4 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   12e0e:	f10a 0702 	add.w	r7, sl, #2
   12e12:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   12e16:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12e1a:	07d9      	lsls	r1, r3, #31
   12e1c:	f140 8149 	bpl.w	130b2 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   12e20:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   12e24:	f1b9 0f00 	cmp.w	r9, #0
   12e28:	da07      	bge.n	12e3a <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   12e2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12e2e:	f042 0204 	orr.w	r2, r2, #4
   12e32:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   12e36:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   12e3a:	075a      	lsls	r2, r3, #29
   12e3c:	f140 8142 	bpl.w	130c4 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   12e40:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12e44:	f1b8 0f00 	cmp.w	r8, #0
   12e48:	f280 8141 	bge.w	130ce <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   12e4c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12e50:	f36f 0341 	bfc	r3, #1, #1
   12e54:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12e58:	f04f 38ff 	mov.w	r8, #4294967295
   12e5c:	e137      	b.n	130ce <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   12e5e:	2b2d      	cmp	r3, #45	; 0x2d
   12e60:	d00c      	beq.n	12e7c <z_cbvprintf_impl+0x1a4>
   12e62:	2b30      	cmp	r3, #48	; 0x30
   12e64:	f47f af6d 	bne.w	12d42 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   12e68:	2201      	movs	r2, #1
	} while (loop);
   12e6a:	e75c      	b.n	12d26 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   12e6c:	f04f 0c01 	mov.w	ip, #1
   12e70:	e759      	b.n	12d26 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   12e72:	f04f 0e01 	mov.w	lr, #1
   12e76:	e756      	b.n	12d26 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   12e78:	2001      	movs	r0, #1
   12e7a:	e754      	b.n	12d26 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   12e7c:	2601      	movs	r6, #1
   12e7e:	e752      	b.n	12d26 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   12e80:	fb0c 0202 	mla	r2, ip, r2, r0
   12e84:	3a30      	subs	r2, #48	; 0x30
   12e86:	4633      	mov	r3, r6
   12e88:	461e      	mov	r6, r3
   12e8a:	f816 0b01 	ldrb.w	r0, [r6], #1
   12e8e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12e92:	2f09      	cmp	r7, #9
   12e94:	d9f4      	bls.n	12e80 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   12e96:	4299      	cmp	r1, r3
   12e98:	d093      	beq.n	12dc2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12e9a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   12e9e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12ea0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12ea2:	f362 0141 	bfi	r1, r2, #1, #1
   12ea6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12eaa:	e78a      	b.n	12dc2 <z_cbvprintf_impl+0xea>
   12eac:	460b      	mov	r3, r1
	size_t val = 0;
   12eae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12eb0:	f04f 0c0a 	mov.w	ip, #10
   12eb4:	e7e8      	b.n	12e88 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   12eb6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12eba:	f042 0204 	orr.w	r2, r2, #4
   12ebe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12ec2:	3302      	adds	r3, #2
	switch (*sp) {
   12ec4:	461f      	mov	r7, r3
   12ec6:	f817 2b01 	ldrb.w	r2, [r7], #1
   12eca:	2a6c      	cmp	r2, #108	; 0x6c
   12ecc:	d041      	beq.n	12f52 <z_cbvprintf_impl+0x27a>
   12ece:	d825      	bhi.n	12f1c <z_cbvprintf_impl+0x244>
   12ed0:	2a68      	cmp	r2, #104	; 0x68
   12ed2:	d02b      	beq.n	12f2c <z_cbvprintf_impl+0x254>
   12ed4:	2a6a      	cmp	r2, #106	; 0x6a
   12ed6:	d046      	beq.n	12f66 <z_cbvprintf_impl+0x28e>
   12ed8:	2a4c      	cmp	r2, #76	; 0x4c
   12eda:	d04c      	beq.n	12f76 <z_cbvprintf_impl+0x29e>
   12edc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   12ede:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   12ee2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   12ee6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   12eea:	2a78      	cmp	r2, #120	; 0x78
   12eec:	f200 80d9 	bhi.w	130a2 <z_cbvprintf_impl+0x3ca>
   12ef0:	2a57      	cmp	r2, #87	; 0x57
   12ef2:	d84d      	bhi.n	12f90 <z_cbvprintf_impl+0x2b8>
   12ef4:	2a41      	cmp	r2, #65	; 0x41
   12ef6:	d003      	beq.n	12f00 <z_cbvprintf_impl+0x228>
   12ef8:	3a45      	subs	r2, #69	; 0x45
   12efa:	2a02      	cmp	r2, #2
   12efc:	f200 80d1 	bhi.w	130a2 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   12f00:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12f04:	2204      	movs	r2, #4
   12f06:	f362 0302 	bfi	r3, r2, #0, #3
   12f0a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   12f0e:	2301      	movs	r3, #1
			break;
   12f10:	e09e      	b.n	13050 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   12f12:	fb06 2101 	mla	r1, r6, r1, r2
   12f16:	3930      	subs	r1, #48	; 0x30
   12f18:	4603      	mov	r3, r0
   12f1a:	e764      	b.n	12de6 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   12f1c:	2a74      	cmp	r2, #116	; 0x74
   12f1e:	d026      	beq.n	12f6e <z_cbvprintf_impl+0x296>
   12f20:	2a7a      	cmp	r2, #122	; 0x7a
   12f22:	d1db      	bne.n	12edc <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   12f24:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f28:	2206      	movs	r2, #6
   12f2a:	e00d      	b.n	12f48 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   12f2c:	785a      	ldrb	r2, [r3, #1]
   12f2e:	2a68      	cmp	r2, #104	; 0x68
   12f30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12f34:	d106      	bne.n	12f44 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   12f36:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12f38:	f361 02c6 	bfi	r2, r1, #3, #4
   12f3c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   12f40:	1c9f      	adds	r7, r3, #2
   12f42:	e7cc      	b.n	12ede <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   12f44:	4613      	mov	r3, r2
   12f46:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12f48:	f362 03c6 	bfi	r3, r2, #3, #4
   12f4c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12f50:	e7c5      	b.n	12ede <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   12f52:	785a      	ldrb	r2, [r3, #1]
   12f54:	2a6c      	cmp	r2, #108	; 0x6c
   12f56:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12f5a:	d101      	bne.n	12f60 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   12f5c:	2104      	movs	r1, #4
   12f5e:	e7eb      	b.n	12f38 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   12f60:	4613      	mov	r3, r2
   12f62:	2203      	movs	r2, #3
   12f64:	e7f0      	b.n	12f48 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   12f66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f6a:	2205      	movs	r2, #5
   12f6c:	e7ec      	b.n	12f48 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   12f6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f72:	2207      	movs	r2, #7
   12f74:	e7e8      	b.n	12f48 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   12f76:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12f7a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12f7e:	f023 0302 	bic.w	r3, r3, #2
   12f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12f86:	f043 0302 	orr.w	r3, r3, #2
   12f8a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12f8e:	e7a6      	b.n	12ede <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   12f90:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12f94:	2920      	cmp	r1, #32
   12f96:	f200 8084 	bhi.w	130a2 <z_cbvprintf_impl+0x3ca>
   12f9a:	a001      	add	r0, pc, #4	; (adr r0, 12fa0 <z_cbvprintf_impl+0x2c8>)
   12f9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12fa0:	00013065 	.word	0x00013065
   12fa4:	000130a3 	.word	0x000130a3
   12fa8:	000130a3 	.word	0x000130a3
   12fac:	000130a3 	.word	0x000130a3
   12fb0:	000130a3 	.word	0x000130a3
   12fb4:	000130a3 	.word	0x000130a3
   12fb8:	000130a3 	.word	0x000130a3
   12fbc:	000130a3 	.word	0x000130a3
   12fc0:	000130a3 	.word	0x000130a3
   12fc4:	00012f01 	.word	0x00012f01
   12fc8:	000130a3 	.word	0x000130a3
   12fcc:	00013065 	.word	0x00013065
   12fd0:	00013025 	.word	0x00013025
   12fd4:	00012f01 	.word	0x00012f01
   12fd8:	00012f01 	.word	0x00012f01
   12fdc:	00012f01 	.word	0x00012f01
   12fe0:	000130a3 	.word	0x000130a3
   12fe4:	00013025 	.word	0x00013025
   12fe8:	000130a3 	.word	0x000130a3
   12fec:	000130a3 	.word	0x000130a3
   12ff0:	000130a3 	.word	0x000130a3
   12ff4:	000130a3 	.word	0x000130a3
   12ff8:	0001306d 	.word	0x0001306d
   12ffc:	00013065 	.word	0x00013065
   13000:	00013089 	.word	0x00013089
   13004:	000130a3 	.word	0x000130a3
   13008:	000130a3 	.word	0x000130a3
   1300c:	00013089 	.word	0x00013089
   13010:	000130a3 	.word	0x000130a3
   13014:	00013065 	.word	0x00013065
   13018:	000130a3 	.word	0x000130a3
   1301c:	000130a3 	.word	0x000130a3
   13020:	00013065 	.word	0x00013065
		conv->specifier_cat = SPECIFIER_SINT;
   13024:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   13028:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1302a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1302e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13032:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   13034:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   13038:	bf02      	ittt	eq
   1303a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1303e:	f041 0101 	orreq.w	r1, r1, #1
   13042:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   13046:	2a63      	cmp	r2, #99	; 0x63
   13048:	d131      	bne.n	130ae <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1304a:	3b00      	subs	r3, #0
   1304c:	bf18      	it	ne
   1304e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   13050:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13054:	f3c2 0140 	ubfx	r1, r2, #1, #1
   13058:	430b      	orrs	r3, r1
   1305a:	f363 0241 	bfi	r2, r3, #1, #1
   1305e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   13062:	e6d8      	b.n	12e16 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   13064:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   13068:	2002      	movs	r0, #2
   1306a:	e7de      	b.n	1302a <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1306c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13070:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13074:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   13078:	2103      	movs	r1, #3
   1307a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1307e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   13080:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13084:	4143      	adcs	r3, r0
   13086:	e7e3      	b.n	13050 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   13088:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1308c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1308e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   13092:	f361 0202 	bfi	r2, r1, #0, #3
   13096:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1309a:	bf14      	ite	ne
   1309c:	2301      	movne	r3, #1
   1309e:	2300      	moveq	r3, #0
   130a0:	e7d6      	b.n	13050 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   130a2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   130a6:	f043 0301 	orr.w	r3, r3, #1
   130aa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   130ae:	2300      	movs	r3, #0
   130b0:	e7ce      	b.n	13050 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   130b2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   130b6:	2a00      	cmp	r2, #0
			width = conv->width_value;
   130b8:	bfb4      	ite	lt
   130ba:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   130be:	f04f 39ff 	movge.w	r9, #4294967295
   130c2:	e6ba      	b.n	12e3a <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   130c4:	079b      	lsls	r3, r3, #30
   130c6:	f57f aec7 	bpl.w	12e58 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   130ca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   130ce:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   130d2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   130d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   130d8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   130dc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   130e0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   130e2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   130e6:	d135      	bne.n	13154 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   130e8:	1ecb      	subs	r3, r1, #3
   130ea:	2b04      	cmp	r3, #4
   130ec:	d822      	bhi.n	13134 <z_cbvprintf_impl+0x45c>
   130ee:	e8df f003 	tbb	[pc, r3]
   130f2:	0903      	.short	0x0903
   130f4:	2109      	.short	0x2109
   130f6:	21          	.byte	0x21
   130f7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   130f8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   130fc:	17da      	asrs	r2, r3, #31
   130fe:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   13102:	e006      	b.n	13112 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   13104:	3407      	adds	r4, #7
   13106:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1310a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1310e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   13112:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13116:	f013 0603 	ands.w	r6, r3, #3
   1311a:	d059      	beq.n	131d0 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   1311c:	9802      	ldr	r0, [sp, #8]
   1311e:	463b      	mov	r3, r7
   13120:	4652      	mov	r2, sl
   13122:	4659      	mov	r1, fp
   13124:	f013 fd3e 	bl	26ba4 <outs>
   13128:	2800      	cmp	r0, #0
   1312a:	f2c0 8146 	blt.w	133ba <z_cbvprintf_impl+0x6e2>
   1312e:	4405      	add	r5, r0
			continue;
   13130:	46ba      	mov	sl, r7
   13132:	e5d9      	b.n	12ce8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13134:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   13138:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1313a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1313e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   13142:	d102      	bne.n	1314a <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   13144:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   13148:	e7d8      	b.n	130fc <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   1314a:	2902      	cmp	r1, #2
   1314c:	d1e1      	bne.n	13112 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   1314e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   13152:	e7d3      	b.n	130fc <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13154:	2b02      	cmp	r3, #2
   13156:	d129      	bne.n	131ac <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   13158:	1ecb      	subs	r3, r1, #3
   1315a:	2b04      	cmp	r3, #4
   1315c:	d813      	bhi.n	13186 <z_cbvprintf_impl+0x4ae>
   1315e:	e8df f003 	tbb	[pc, r3]
   13162:	0a03      	.short	0x0a03
   13164:	120a      	.short	0x120a
   13166:	12          	.byte	0x12
   13167:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   13168:	6822      	ldr	r2, [r4, #0]
   1316a:	920a      	str	r2, [sp, #40]	; 0x28
   1316c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   1316e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   13170:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   13172:	4604      	mov	r4, r0
   13174:	e7cd      	b.n	13112 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   13176:	1de0      	adds	r0, r4, #7
   13178:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   1317c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   13180:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13184:	e7f5      	b.n	13172 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   13186:	f854 3b04 	ldr.w	r3, [r4], #4
   1318a:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1318c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1318e:	f04f 0300 	mov.w	r3, #0
   13192:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   13194:	d105      	bne.n	131a2 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   13196:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1319a:	930a      	str	r3, [sp, #40]	; 0x28
   1319c:	2300      	movs	r3, #0
   1319e:	930b      	str	r3, [sp, #44]	; 0x2c
   131a0:	e7b7      	b.n	13112 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   131a2:	2902      	cmp	r1, #2
   131a4:	d1b5      	bne.n	13112 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   131a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   131aa:	e7f6      	b.n	1319a <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   131ac:	2b04      	cmp	r3, #4
   131ae:	d109      	bne.n	131c4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   131b0:	1de3      	adds	r3, r4, #7
   131b2:	f023 0307 	bic.w	r3, r3, #7
   131b6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   131ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   131be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   131c2:	e7a6      	b.n	13112 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   131c4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   131c6:	bf04      	itt	eq
   131c8:	f854 3b04 	ldreq.w	r3, [r4], #4
   131cc:	930a      	streq	r3, [sp, #40]	; 0x28
   131ce:	e7a0      	b.n	13112 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   131d0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   131d4:	2878      	cmp	r0, #120	; 0x78
   131d6:	d8ab      	bhi.n	13130 <z_cbvprintf_impl+0x458>
   131d8:	2862      	cmp	r0, #98	; 0x62
   131da:	d822      	bhi.n	13222 <z_cbvprintf_impl+0x54a>
   131dc:	2825      	cmp	r0, #37	; 0x25
   131de:	f43f ad8c 	beq.w	12cfa <z_cbvprintf_impl+0x22>
   131e2:	2858      	cmp	r0, #88	; 0x58
   131e4:	d1a4      	bne.n	13130 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   131e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   131ea:	9300      	str	r3, [sp, #0]
   131ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   131f0:	ab04      	add	r3, sp, #16
   131f2:	aa0c      	add	r2, sp, #48	; 0x30
   131f4:	f013 fc90 	bl	26b18 <encode_uint>
   131f8:	4682      	mov	sl, r0
			if (precision >= 0) {
   131fa:	f1b8 0f00 	cmp.w	r8, #0
   131fe:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   13202:	db0c      	blt.n	1321e <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   13204:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   13208:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1320c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   13210:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   13212:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   13216:	d902      	bls.n	1321e <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   13218:	eba8 0303 	sub.w	r3, r8, r3
   1321c:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1321e:	4680      	mov	r8, r0
   13220:	e03e      	b.n	132a0 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   13222:	3863      	subs	r0, #99	; 0x63
   13224:	2815      	cmp	r0, #21
   13226:	d883      	bhi.n	13130 <z_cbvprintf_impl+0x458>
   13228:	a201      	add	r2, pc, #4	; (adr r2, 13230 <z_cbvprintf_impl+0x558>)
   1322a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1322e:	bf00      	nop
   13230:	000132b1 	.word	0x000132b1
   13234:	00013315 	.word	0x00013315
   13238:	00013131 	.word	0x00013131
   1323c:	00013131 	.word	0x00013131
   13240:	00013131 	.word	0x00013131
   13244:	00013131 	.word	0x00013131
   13248:	00013315 	.word	0x00013315
   1324c:	00013131 	.word	0x00013131
   13250:	00013131 	.word	0x00013131
   13254:	00013131 	.word	0x00013131
   13258:	00013131 	.word	0x00013131
   1325c:	0001336f 	.word	0x0001336f
   13260:	0001333d 	.word	0x0001333d
   13264:	00013341 	.word	0x00013341
   13268:	00013131 	.word	0x00013131
   1326c:	00013131 	.word	0x00013131
   13270:	00013289 	.word	0x00013289
   13274:	00013131 	.word	0x00013131
   13278:	0001333d 	.word	0x0001333d
   1327c:	00013131 	.word	0x00013131
   13280:	00013131 	.word	0x00013131
   13284:	0001333d 	.word	0x0001333d
			if (precision >= 0) {
   13288:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1328c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   13290:	db0a      	blt.n	132a8 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   13292:	4641      	mov	r1, r8
   13294:	4650      	mov	r0, sl
   13296:	f014 fa7b 	bl	27790 <strnlen>
			bpe = bps + len;
   1329a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1329e:	2600      	movs	r6, #0
		if (bps == NULL) {
   132a0:	f1ba 0f00 	cmp.w	sl, #0
   132a4:	d10c      	bne.n	132c0 <z_cbvprintf_impl+0x5e8>
   132a6:	e743      	b.n	13130 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   132a8:	4650      	mov	r0, sl
   132aa:	f014 fa6a 	bl	27782 <strlen>
   132ae:	e7f4      	b.n	1329a <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   132b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   132b2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   132b6:	2600      	movs	r6, #0
			bps = buf;
   132b8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   132bc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   132c0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   132c4:	b106      	cbz	r6, 132c8 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   132c6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   132c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   132cc:	06d0      	lsls	r0, r2, #27
   132ce:	d568      	bpl.n	133a2 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   132d0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   132d2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   132d4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   132d6:	bf48      	it	mi
   132d8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   132da:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   132dc:	bf48      	it	mi
   132de:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   132e0:	f1b9 0f00 	cmp.w	r9, #0
   132e4:	dd76      	ble.n	133d4 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   132e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   132ea:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   132ee:	f3c2 0380 	ubfx	r3, r2, #2, #1
   132f2:	9303      	str	r3, [sp, #12]
   132f4:	0753      	lsls	r3, r2, #29
   132f6:	d46d      	bmi.n	133d4 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   132f8:	0650      	lsls	r0, r2, #25
   132fa:	d561      	bpl.n	133c0 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   132fc:	b146      	cbz	r6, 13310 <z_cbvprintf_impl+0x638>
						OUTC(sign);
   132fe:	9b02      	ldr	r3, [sp, #8]
   13300:	4659      	mov	r1, fp
   13302:	4630      	mov	r0, r6
   13304:	4798      	blx	r3
   13306:	2800      	cmp	r0, #0
   13308:	db57      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
						sign = 0;
   1330a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1330c:	3501      	adds	r5, #1
						sign = 0;
   1330e:	461e      	mov	r6, r3
					pad = '0';
   13310:	2330      	movs	r3, #48	; 0x30
   13312:	e056      	b.n	133c2 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   13314:	071e      	lsls	r6, r3, #28
   13316:	d40f      	bmi.n	13338 <z_cbvprintf_impl+0x660>
				sign = ' ';
   13318:	f013 0610 	ands.w	r6, r3, #16
   1331c:	bf18      	it	ne
   1331e:	2620      	movne	r6, #32
			sint = value->sint;
   13320:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   13324:	2b00      	cmp	r3, #0
   13326:	f6bf af5e 	bge.w	131e6 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   1332a:	4252      	negs	r2, r2
   1332c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13330:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   13334:	262d      	movs	r6, #45	; 0x2d
   13336:	e756      	b.n	131e6 <z_cbvprintf_impl+0x50e>
				sign = '+';
   13338:	262b      	movs	r6, #43	; 0x2b
   1333a:	e7f1      	b.n	13320 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   1333c:	2600      	movs	r6, #0
   1333e:	e752      	b.n	131e6 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   13340:	980a      	ldr	r0, [sp, #40]	; 0x28
   13342:	b340      	cbz	r0, 13396 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13344:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   13348:	9300      	str	r3, [sp, #0]
   1334a:	aa0c      	add	r2, sp, #48	; 0x30
   1334c:	ab04      	add	r3, sp, #16
   1334e:	2100      	movs	r1, #0
   13350:	f013 fbe2 	bl	26b18 <encode_uint>
				conv->altform_0c = true;
   13354:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   13358:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1335c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13360:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13364:	4682      	mov	sl, r0
				conv->altform_0c = true;
   13366:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   1336a:	2600      	movs	r6, #0
				goto prec_int_pad0;
   1336c:	e745      	b.n	131fa <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   1336e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   13370:	2907      	cmp	r1, #7
   13372:	f63f aedd 	bhi.w	13130 <z_cbvprintf_impl+0x458>
   13376:	e8df f001 	tbb	[pc, r1]
   1337a:	040c      	.short	0x040c
   1337c:	08080c06 	.word	0x08080c06
   13380:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   13382:	701d      	strb	r5, [r3, #0]
		break;
   13384:	e6d4      	b.n	13130 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   13386:	801d      	strh	r5, [r3, #0]
		break;
   13388:	e6d2      	b.n	13130 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   1338a:	17ea      	asrs	r2, r5, #31
   1338c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   13390:	e6ce      	b.n	13130 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13392:	601d      	str	r5, [r3, #0]
		break;
   13394:	e6cc      	b.n	13130 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   13396:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 13460 <z_cbvprintf_impl+0x788>
   1339a:	4606      	mov	r6, r0
			bpe = bps + 5;
   1339c:	f10a 0805 	add.w	r8, sl, #5
   133a0:	e78e      	b.n	132c0 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   133a2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   133a4:	bf48      	it	mi
   133a6:	3301      	addmi	r3, #1
   133a8:	e793      	b.n	132d2 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   133aa:	4618      	mov	r0, r3
   133ac:	9303      	str	r3, [sp, #12]
   133ae:	4659      	mov	r1, fp
   133b0:	9b02      	ldr	r3, [sp, #8]
   133b2:	4798      	blx	r3
   133b4:	2800      	cmp	r0, #0
   133b6:	9b03      	ldr	r3, [sp, #12]
   133b8:	da04      	bge.n	133c4 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   133ba:	b011      	add	sp, #68	; 0x44
   133bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   133c0:	2320      	movs	r3, #32
   133c2:	444d      	add	r5, r9
   133c4:	464a      	mov	r2, r9
				while (width-- > 0) {
   133c6:	2a00      	cmp	r2, #0
   133c8:	eba5 0109 	sub.w	r1, r5, r9
   133cc:	f109 39ff 	add.w	r9, r9, #4294967295
   133d0:	dceb      	bgt.n	133aa <z_cbvprintf_impl+0x6d2>
   133d2:	460d      	mov	r5, r1
		if (sign != 0) {
   133d4:	b136      	cbz	r6, 133e4 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   133d6:	9b02      	ldr	r3, [sp, #8]
   133d8:	4659      	mov	r1, fp
   133da:	4630      	mov	r0, r6
   133dc:	4798      	blx	r3
   133de:	2800      	cmp	r0, #0
   133e0:	dbeb      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   133e2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   133e4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   133e8:	06d9      	lsls	r1, r3, #27
   133ea:	d401      	bmi.n	133f0 <z_cbvprintf_impl+0x718>
   133ec:	071a      	lsls	r2, r3, #28
   133ee:	d506      	bpl.n	133fe <z_cbvprintf_impl+0x726>
				OUTC('0');
   133f0:	9b02      	ldr	r3, [sp, #8]
   133f2:	4659      	mov	r1, fp
   133f4:	2030      	movs	r0, #48	; 0x30
   133f6:	4798      	blx	r3
   133f8:	2800      	cmp	r0, #0
   133fa:	dbde      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   133fc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   133fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13402:	06db      	lsls	r3, r3, #27
   13404:	d507      	bpl.n	13416 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   13406:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1340a:	9b02      	ldr	r3, [sp, #8]
   1340c:	4659      	mov	r1, fp
   1340e:	4798      	blx	r3
   13410:	2800      	cmp	r0, #0
   13412:	dbd2      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   13414:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13416:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13418:	442e      	add	r6, r5
   1341a:	1b73      	subs	r3, r6, r5
   1341c:	2b00      	cmp	r3, #0
   1341e:	dc16      	bgt.n	1344e <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   13420:	9802      	ldr	r0, [sp, #8]
   13422:	4643      	mov	r3, r8
   13424:	4652      	mov	r2, sl
   13426:	4659      	mov	r1, fp
   13428:	f013 fbbc 	bl	26ba4 <outs>
   1342c:	2800      	cmp	r0, #0
   1342e:	dbc4      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   13430:	4405      	add	r5, r0
		while (width > 0) {
   13432:	44a9      	add	r9, r5
   13434:	eba9 0305 	sub.w	r3, r9, r5
   13438:	2b00      	cmp	r3, #0
   1343a:	f77f ae79 	ble.w	13130 <z_cbvprintf_impl+0x458>
			OUTC(' ');
   1343e:	9b02      	ldr	r3, [sp, #8]
   13440:	4659      	mov	r1, fp
   13442:	2020      	movs	r0, #32
   13444:	4798      	blx	r3
   13446:	2800      	cmp	r0, #0
   13448:	dbb7      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   1344a:	3501      	adds	r5, #1
			--width;
   1344c:	e7f2      	b.n	13434 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   1344e:	9b02      	ldr	r3, [sp, #8]
   13450:	4659      	mov	r1, fp
   13452:	2030      	movs	r0, #48	; 0x30
   13454:	4798      	blx	r3
   13456:	2800      	cmp	r0, #0
   13458:	dbaf      	blt.n	133ba <z_cbvprintf_impl+0x6e2>
   1345a:	3501      	adds	r5, #1
   1345c:	e7dd      	b.n	1341a <z_cbvprintf_impl+0x742>
   1345e:	bf00      	nop
   13460:	0002c49c 	.word	0x0002c49c

00013464 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13464:	b508      	push	{r3, lr}
   13466:	f04f 0240 	mov.w	r2, #64	; 0x40
   1346a:	f3ef 8311 	mrs	r3, BASEPRI
   1346e:	f382 8812 	msr	BASEPRI_MAX, r2
   13472:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   13476:	f001 ff5f 	bl	15338 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1347a:	4803      	ldr	r0, [pc, #12]	; (13488 <sys_reboot+0x24>)
   1347c:	f013 f8b7 	bl	265ee <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13480:	f001 f95a 	bl	14738 <arch_cpu_idle>
   13484:	e7fc      	b.n	13480 <sys_reboot+0x1c>
   13486:	bf00      	nop
   13488:	0002c4a2 	.word	0x0002c4a2

0001348c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1348c:	f00c beb2 	b.w	201f4 <SystemInit>

00013490 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   13490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13494:	f8df 8058 	ldr.w	r8, [pc, #88]	; 134f0 <activate_foreach_backend+0x60>
{
   13498:	4604      	mov	r4, r0
	while (mask_cpy) {
   1349a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   1349c:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   134a0:	b914      	cbnz	r4, 134a8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   134a2:	4638      	mov	r0, r7
   134a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   134a8:	fa94 f5a4 	rbit	r5, r4
   134ac:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   134b0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   134b4:	012e      	lsls	r6, r5, #4
   134b6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   134ba:	ea6f 0a03 	mvn.w	sl, r3
   134be:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   134c2:	7b2b      	ldrb	r3, [r5, #12]
   134c4:	2b00      	cmp	r3, #0
   134c6:	d0eb      	beq.n	134a0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   134c8:	f858 3006 	ldr.w	r3, [r8, r6]
   134cc:	691b      	ldr	r3, [r3, #16]
   134ce:	b94b      	cbnz	r3, 134e4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   134d0:	4446      	add	r6, r8
			log_backend_enable(backend,
   134d2:	2204      	movs	r2, #4
   134d4:	6873      	ldr	r3, [r6, #4]
   134d6:	4628      	mov	r0, r5
   134d8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   134da:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   134de:	f000 fa43 	bl	13968 <log_backend_enable>
   134e2:	e7dd      	b.n	134a0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   134e4:	4628      	mov	r0, r5
   134e6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   134e8:	2800      	cmp	r0, #0
   134ea:	d1d9      	bne.n	134a0 <activate_foreach_backend+0x10>
   134ec:	e7f0      	b.n	134d0 <activate_foreach_backend+0x40>
   134ee:	bf00      	nop
   134f0:	0002b5e4 	.word	0x0002b5e4

000134f4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   134f4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   134f6:	4910      	ldr	r1, [pc, #64]	; (13538 <enable_logger+0x44>)
   134f8:	4810      	ldr	r0, [pc, #64]	; (1353c <enable_logger+0x48>)
{
   134fa:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   134fc:	2200      	movs	r2, #0
   134fe:	f017 fc62 	bl	2adc6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13502:	4d0f      	ldr	r5, [pc, #60]	; (13540 <enable_logger+0x4c>)
   13504:	490f      	ldr	r1, [pc, #60]	; (13544 <enable_logger+0x50>)
   13506:	2200      	movs	r2, #0
   13508:	2300      	movs	r3, #0
   1350a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1350e:	2400      	movs	r4, #0
   13510:	230e      	movs	r3, #14
   13512:	e9cd 3403 	strd	r3, r4, [sp, #12]
   13516:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1351a:	4b0b      	ldr	r3, [pc, #44]	; (13548 <enable_logger+0x54>)
   1351c:	9400      	str	r4, [sp, #0]
   1351e:	f44f 7240 	mov.w	r2, #768	; 0x300
   13522:	4628      	mov	r0, r5
   13524:	f00d ff86 	bl	21434 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13528:	4908      	ldr	r1, [pc, #32]	; (1354c <enable_logger+0x58>)
   1352a:	4628      	mov	r0, r5
   1352c:	f017 f8c9 	bl	2a6c2 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13530:	4620      	mov	r0, r4
   13532:	b009      	add	sp, #36	; 0x24
   13534:	bd30      	pop	{r4, r5, pc}
   13536:	bf00      	nop
   13538:	00013551 	.word	0x00013551
   1353c:	20001cf0 	.word	0x20001cf0
   13540:	20001d28 	.word	0x20001d28
   13544:	200049c8 	.word	0x200049c8
   13548:	00013801 	.word	0x00013801
   1354c:	0002c4cb 	.word	0x0002c4cb

00013550 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13550:	4801      	ldr	r0, [pc, #4]	; (13558 <log_process_thread_timer_expiry_fn+0x8>)
   13552:	f00e b8fb 	b.w	2174c <z_impl_k_sem_give>
   13556:	bf00      	nop
   13558:	20000a98 	.word	0x20000a98

0001355c <z_log_init>:
{
   1355c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13560:	4b25      	ldr	r3, [pc, #148]	; (135f8 <z_log_init+0x9c>)
   13562:	f3bf 8f5b 	dmb	ish
   13566:	4681      	mov	r9, r0
   13568:	4688      	mov	r8, r1
   1356a:	e853 4f00 	ldrex	r4, [r3]
   1356e:	1c62      	adds	r2, r4, #1
   13570:	e843 2100 	strex	r1, r2, [r3]
   13574:	2900      	cmp	r1, #0
   13576:	d1f8      	bne.n	1356a <z_log_init+0xe>
   13578:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   1357c:	b11c      	cbz	r4, 13586 <z_log_init+0x2a>
		return 0;
   1357e:	2400      	movs	r4, #0
}
   13580:	4620      	mov	r0, r4
   13582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   13586:	4d1d      	ldr	r5, [pc, #116]	; (135fc <z_log_init+0xa0>)
   13588:	4e1d      	ldr	r6, [pc, #116]	; (13600 <z_log_init+0xa4>)
   1358a:	1b76      	subs	r6, r6, r5
   1358c:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1358e:	4627      	mov	r7, r4
				mask |= BIT(i);
   13590:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
   13594:	42b7      	cmp	r7, r6
   13596:	db11      	blt.n	135bc <z_log_init+0x60>
	if (blocking) {
   13598:	f1b9 0f00 	cmp.w	r9, #0
   1359c:	d0f0      	beq.n	13580 <z_log_init+0x24>
		while (mask) {
   1359e:	2c00      	cmp	r4, #0
   135a0:	d0ed      	beq.n	1357e <z_log_init+0x22>
			mask = activate_foreach_backend(mask);
   135a2:	4620      	mov	r0, r4
   135a4:	f7ff ff74 	bl	13490 <activate_foreach_backend>
   135a8:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   135aa:	f1b8 0f00 	cmp.w	r8, #0
   135ae:	d0f6      	beq.n	1359e <z_log_init+0x42>
	return z_impl_k_sleep(timeout);
   135b0:	2100      	movs	r1, #0
   135b2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   135b6:	f00e fdd1 	bl	2215c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   135ba:	e7f0      	b.n	1359e <z_log_init+0x42>
		if (backend->autostart) {
   135bc:	7b2b      	ldrb	r3, [r5, #12]
   135be:	b17b      	cbz	r3, 135e0 <z_log_init+0x84>
	if (backend->api->init) {
   135c0:	f8d5 b000 	ldr.w	fp, [r5]
   135c4:	f8db 300c 	ldr.w	r3, [fp, #12]
   135c8:	b10b      	cbz	r3, 135ce <z_log_init+0x72>
		backend->api->init(backend);
   135ca:	4628      	mov	r0, r5
   135cc:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   135ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   135d2:	b943      	cbnz	r3, 135e6 <z_log_init+0x8a>
				log_backend_enable(backend,
   135d4:	686b      	ldr	r3, [r5, #4]
   135d6:	2204      	movs	r2, #4
   135d8:	6819      	ldr	r1, [r3, #0]
   135da:	4628      	mov	r0, r5
   135dc:	f000 f9c4 	bl	13968 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   135e0:	3701      	adds	r7, #1
   135e2:	3510      	adds	r5, #16
   135e4:	e7d6      	b.n	13594 <z_log_init+0x38>
		return backend->api->is_ready(backend);
   135e6:	4628      	mov	r0, r5
   135e8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   135ea:	2800      	cmp	r0, #0
   135ec:	d0f2      	beq.n	135d4 <z_log_init+0x78>
				mask |= BIT(i);
   135ee:	fa0a f307 	lsl.w	r3, sl, r7
   135f2:	431c      	orrs	r4, r3
   135f4:	e7f4      	b.n	135e0 <z_log_init+0x84>
   135f6:	bf00      	nop
   135f8:	20002704 	.word	0x20002704
   135fc:	0002b5e4 	.word	0x0002b5e4
   13600:	0002b604 	.word	0x0002b604

00013604 <log_format_func_t_get>:
}
   13604:	4b01      	ldr	r3, [pc, #4]	; (1360c <log_format_func_t_get+0x8>)
   13606:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1360a:	4770      	bx	lr
   1360c:	0002b934 	.word	0x0002b934

00013610 <z_log_notify_backend_enabled>:
{
   13610:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13612:	4c04      	ldr	r4, [pc, #16]	; (13624 <z_log_notify_backend_enabled+0x14>)
   13614:	7823      	ldrb	r3, [r4, #0]
   13616:	b913      	cbnz	r3, 1361e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   13618:	4803      	ldr	r0, [pc, #12]	; (13628 <z_log_notify_backend_enabled+0x18>)
   1361a:	f00e f897 	bl	2174c <z_impl_k_sem_give>
	backend_attached = true;
   1361e:	2301      	movs	r3, #1
   13620:	7023      	strb	r3, [r4, #0]
}
   13622:	bd10      	pop	{r4, pc}
   13624:	20003cb2 	.word	0x20003cb2
   13628:	20000a98 	.word	0x20000a98

0001362c <z_log_dropped>:
   1362c:	4b0c      	ldr	r3, [pc, #48]	; (13660 <z_log_dropped+0x34>)
   1362e:	f3bf 8f5b 	dmb	ish
   13632:	e853 2f00 	ldrex	r2, [r3]
   13636:	3201      	adds	r2, #1
   13638:	e843 2100 	strex	r1, r2, [r3]
   1363c:	2900      	cmp	r1, #0
   1363e:	d1f8      	bne.n	13632 <z_log_dropped+0x6>
   13640:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13644:	b158      	cbz	r0, 1365e <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13646:	f3bf 8f5b 	dmb	ish
   1364a:	4b06      	ldr	r3, [pc, #24]	; (13664 <z_log_dropped+0x38>)
   1364c:	e853 2f00 	ldrex	r2, [r3]
   13650:	3a01      	subs	r2, #1
   13652:	e843 2100 	strex	r1, r2, [r3]
   13656:	2900      	cmp	r1, #0
   13658:	d1f8      	bne.n	1364c <z_log_dropped+0x20>
   1365a:	f3bf 8f5b 	dmb	ish
}
   1365e:	4770      	bx	lr
   13660:	20002700 	.word	0x20002700
   13664:	200026fc 	.word	0x200026fc

00013668 <z_log_dropped_read_and_clear>:
}
   13668:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1366a:	4b06      	ldr	r3, [pc, #24]	; (13684 <z_log_dropped_read_and_clear+0x1c>)
   1366c:	f3bf 8f5b 	dmb	ish
   13670:	4602      	mov	r2, r0
   13672:	e853 0f00 	ldrex	r0, [r3]
   13676:	e843 2100 	strex	r1, r2, [r3]
   1367a:	2900      	cmp	r1, #0
   1367c:	d1f9      	bne.n	13672 <z_log_dropped_read_and_clear+0xa>
   1367e:	f3bf 8f5b 	dmb	ish
   13682:	4770      	bx	lr
   13684:	20002700 	.word	0x20002700

00013688 <dropped_notify>:
{
   13688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1368a:	f7ff ffed 	bl	13668 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
   1368e:	4c0a      	ldr	r4, [pc, #40]	; (136b8 <dropped_notify+0x30>)
   13690:	4d0a      	ldr	r5, [pc, #40]	; (136bc <dropped_notify+0x34>)
   13692:	1b2d      	subs	r5, r5, r4
   13694:	4607      	mov	r7, r0
   13696:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13698:	2600      	movs	r6, #0
   1369a:	42ae      	cmp	r6, r5
   1369c:	db00      	blt.n	136a0 <dropped_notify+0x18>
}
   1369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   136a0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   136a2:	795b      	ldrb	r3, [r3, #5]
   136a4:	b12b      	cbz	r3, 136b2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   136a6:	6823      	ldr	r3, [r4, #0]
   136a8:	685b      	ldr	r3, [r3, #4]
   136aa:	b113      	cbz	r3, 136b2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   136ac:	4639      	mov	r1, r7
   136ae:	4620      	mov	r0, r4
   136b0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   136b2:	3601      	adds	r6, #1
   136b4:	3410      	adds	r4, #16
   136b6:	e7f0      	b.n	1369a <dropped_notify+0x12>
   136b8:	0002b5e4 	.word	0x0002b5e4
   136bc:	0002b604 	.word	0x0002b604

000136c0 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   136c0:	4901      	ldr	r1, [pc, #4]	; (136c8 <z_log_msg_init+0x8>)
   136c2:	4802      	ldr	r0, [pc, #8]	; (136cc <z_log_msg_init+0xc>)
   136c4:	f013 bb46 	b.w	26d54 <mpsc_pbuf_init>
   136c8:	0002b940 	.word	0x0002b940
   136cc:	20002708 	.word	0x20002708

000136d0 <log_core_init>:
	panic_mode = false;
   136d0:	4a08      	ldr	r2, [pc, #32]	; (136f4 <log_core_init+0x24>)
{
   136d2:	b508      	push	{r3, lr}
	panic_mode = false;
   136d4:	2300      	movs	r3, #0
   136d6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   136d8:	4a07      	ldr	r2, [pc, #28]	; (136f8 <log_core_init+0x28>)
   136da:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   136dc:	4b07      	ldr	r3, [pc, #28]	; (136fc <log_core_init+0x2c>)
   136de:	4a08      	ldr	r2, [pc, #32]	; (13700 <log_core_init+0x30>)
   136e0:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
   136e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   136e6:	f000 fbc1 	bl	13e6c <log_output_timestamp_freq_set>
}
   136ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   136ee:	f7ff bfe7 	b.w	136c0 <z_log_msg_init>
   136f2:	bf00      	nop
   136f4:	20003cb3 	.word	0x20003cb3
   136f8:	20002700 	.word	0x20002700
   136fc:	200005dc 	.word	0x200005dc
   13700:	00027007 	.word	0x00027007

00013704 <z_log_msg_alloc>:
{
   13704:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
   13706:	2200      	movs	r2, #0
   13708:	4801      	ldr	r0, [pc, #4]	; (13710 <z_log_msg_alloc+0xc>)
   1370a:	2300      	movs	r3, #0
   1370c:	f013 bb43 	b.w	26d96 <mpsc_pbuf_alloc>
   13710:	20002708 	.word	0x20002708

00013714 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13714:	4801      	ldr	r0, [pc, #4]	; (1371c <z_log_msg_claim+0x8>)
   13716:	f013 bbd7 	b.w	26ec8 <mpsc_pbuf_claim>
   1371a:	bf00      	nop
   1371c:	20002708 	.word	0x20002708

00013720 <z_log_msg_free>:
{
   13720:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
   13722:	4801      	ldr	r0, [pc, #4]	; (13728 <z_log_msg_free+0x8>)
   13724:	f013 bc1c 	b.w	26f60 <mpsc_pbuf_free>
   13728:	20002708 	.word	0x20002708

0001372c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
   1372c:	4801      	ldr	r0, [pc, #4]	; (13734 <z_log_msg_pending+0x8>)
   1372e:	f013 bc4b 	b.w	26fc8 <mpsc_pbuf_is_pending>
   13732:	bf00      	nop
   13734:	20002708 	.word	0x20002708

00013738 <z_impl_log_process>:
{
   13738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
   1373a:	4b19      	ldr	r3, [pc, #100]	; (137a0 <z_impl_log_process+0x68>)
   1373c:	7818      	ldrb	r0, [r3, #0]
   1373e:	b370      	cbz	r0, 1379e <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
   13740:	f7ff ffe8 	bl	13714 <z_log_msg_claim>
	if (msg) {
   13744:	4605      	mov	r5, r0
   13746:	b1a8      	cbz	r0, 13774 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13748:	f3bf 8f5b 	dmb	ish
   1374c:	4b15      	ldr	r3, [pc, #84]	; (137a4 <z_impl_log_process+0x6c>)
   1374e:	e853 2f00 	ldrex	r2, [r3]
   13752:	3a01      	subs	r2, #1
   13754:	e843 2100 	strex	r1, r2, [r3]
   13758:	2900      	cmp	r1, #0
   1375a:	d1f8      	bne.n	1374e <z_impl_log_process+0x16>
   1375c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
   13760:	4c11      	ldr	r4, [pc, #68]	; (137a8 <z_impl_log_process+0x70>)
   13762:	4e12      	ldr	r6, [pc, #72]	; (137ac <z_impl_log_process+0x74>)
   13764:	1b36      	subs	r6, r6, r4
   13766:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13768:	2700      	movs	r7, #0
   1376a:	42b7      	cmp	r7, r6
   1376c:	db0c      	blt.n	13788 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   1376e:	4628      	mov	r0, r5
   13770:	f7ff ffd6 	bl	13720 <z_log_msg_free>
	return dropped_cnt > 0;
   13774:	4b0e      	ldr	r3, [pc, #56]	; (137b0 <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	2b00      	cmp	r3, #0
   1377a:	dd01      	ble.n	13780 <z_impl_log_process+0x48>
		dropped_notify();
   1377c:	f7ff ff84 	bl	13688 <dropped_notify>
}
   13780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
   13784:	f7ff bfd2 	b.w	1372c <z_log_msg_pending>
	return backend->cb->active;
   13788:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1378a:	795b      	ldrb	r3, [r3, #5]
   1378c:	b123      	cbz	r3, 13798 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   1378e:	6823      	ldr	r3, [r4, #0]
   13790:	4629      	mov	r1, r5
   13792:	681b      	ldr	r3, [r3, #0]
   13794:	4620      	mov	r0, r4
   13796:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13798:	3701      	adds	r7, #1
   1379a:	3410      	adds	r4, #16
   1379c:	e7e5      	b.n	1376a <z_impl_log_process+0x32>
}
   1379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137a0:	20003cb2 	.word	0x20003cb2
   137a4:	200026fc 	.word	0x200026fc
   137a8:	0002b5e4 	.word	0x0002b5e4
   137ac:	0002b604 	.word	0x0002b604
   137b0:	20002700 	.word	0x20002700

000137b4 <z_impl_log_panic>:
{
   137b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   137b6:	4f0f      	ldr	r7, [pc, #60]	; (137f4 <z_impl_log_panic+0x40>)
   137b8:	783d      	ldrb	r5, [r7, #0]
   137ba:	b97d      	cbnz	r5, 137dc <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
   137bc:	4c0e      	ldr	r4, [pc, #56]	; (137f8 <z_impl_log_panic+0x44>)
   137be:	4e0f      	ldr	r6, [pc, #60]	; (137fc <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
   137c0:	4629      	mov	r1, r5
   137c2:	2001      	movs	r0, #1
   137c4:	f7ff feca 	bl	1355c <z_log_init>
   137c8:	1b36      	subs	r6, r6, r4
   137ca:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   137cc:	42b5      	cmp	r5, r6
   137ce:	db06      	blt.n	137de <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   137d0:	f7ff ffb2 	bl	13738 <z_impl_log_process>
		while (log_process() == true) {
   137d4:	2800      	cmp	r0, #0
   137d6:	d1fb      	bne.n	137d0 <z_impl_log_panic+0x1c>
	panic_mode = true;
   137d8:	2301      	movs	r3, #1
   137da:	703b      	strb	r3, [r7, #0]
}
   137dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   137de:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   137e0:	795b      	ldrb	r3, [r3, #5]
   137e2:	b11b      	cbz	r3, 137ec <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   137e4:	6823      	ldr	r3, [r4, #0]
   137e6:	4620      	mov	r0, r4
   137e8:	689b      	ldr	r3, [r3, #8]
   137ea:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   137ec:	3501      	adds	r5, #1
   137ee:	3410      	adds	r4, #16
   137f0:	e7ec      	b.n	137cc <z_impl_log_panic+0x18>
   137f2:	bf00      	nop
   137f4:	20003cb3 	.word	0x20003cb3
   137f8:	0002b5e4 	.word	0x0002b5e4
   137fc:	0002b604 	.word	0x0002b604

00013800 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   13800:	2100      	movs	r1, #0
{
   13802:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13806:	4608      	mov	r0, r1
   13808:	f7ff fea8 	bl	1355c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1380c:	4604      	mov	r4, r0
   1380e:	b380      	cbz	r0, 13872 <log_process_thread_func+0x72>
   13810:	f240 6867 	movw	r8, #1639	; 0x667
   13814:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13818:	f00e fcd4 	bl	221c4 <z_impl_z_current_get>
	proc_tid = process_tid;
   1381c:	4b1d      	ldr	r3, [pc, #116]	; (13894 <log_process_thread_func+0x94>)
   1381e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13820:	b130      	cbz	r0, 13830 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13822:	4b1d      	ldr	r3, [pc, #116]	; (13898 <log_process_thread_func+0x98>)
	    process_tid &&
   13824:	681b      	ldr	r3, [r3, #0]
   13826:	2b09      	cmp	r3, #9
   13828:	dd02      	ble.n	13830 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   1382a:	481c      	ldr	r0, [pc, #112]	; (1389c <log_process_thread_func+0x9c>)
   1382c:	f00d ff8e 	bl	2174c <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
   13830:	4e1b      	ldr	r6, [pc, #108]	; (138a0 <log_process_thread_func+0xa0>)
   13832:	4b1c      	ldr	r3, [pc, #112]	; (138a4 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
   13834:	f8df b064 	ldr.w	fp, [pc, #100]	; 1389c <log_process_thread_func+0x9c>
   13838:	1af6      	subs	r6, r6, r3
   1383a:	1136      	asrs	r6, r6, #4
   1383c:	2700      	movs	r7, #0
		if (activate_mask) {
   1383e:	b144      	cbz	r4, 13852 <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
   13840:	4620      	mov	r0, r4
   13842:	f7ff fe25 	bl	13490 <activate_foreach_backend>
			if (!activate_mask) {
   13846:	4604      	mov	r4, r0
   13848:	b918      	cbnz	r0, 13852 <log_process_thread_func+0x52>
				timeout = K_FOREVER;
   1384a:	f04f 38ff 	mov.w	r8, #4294967295
   1384e:	f04f 39ff 	mov.w	r9, #4294967295
   13852:	f7ff ff71 	bl	13738 <z_impl_log_process>
		if (log_process() == false) {
   13856:	4605      	mov	r5, r0
   13858:	b948      	cbnz	r0, 1386e <log_process_thread_func+0x6e>
			if (processed_any) {
   1385a:	b11f      	cbz	r7, 13864 <log_process_thread_func+0x64>
   1385c:	4f11      	ldr	r7, [pc, #68]	; (138a4 <log_process_thread_func+0xa4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
   1385e:	4682      	mov	sl, r0
   13860:	45b2      	cmp	sl, r6
   13862:	db0b      	blt.n	1387c <log_process_thread_func+0x7c>
   13864:	4642      	mov	r2, r8
   13866:	464b      	mov	r3, r9
   13868:	4658      	mov	r0, fp
   1386a:	f00d ff95 	bl	21798 <z_impl_k_sem_take>
   1386e:	462f      	mov	r7, r5
   13870:	e7e5      	b.n	1383e <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13872:	f04f 38ff 	mov.w	r8, #4294967295
   13876:	f04f 39ff 	mov.w	r9, #4294967295
   1387a:	e7cd      	b.n	13818 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1387c:	683b      	ldr	r3, [r7, #0]
   1387e:	699b      	ldr	r3, [r3, #24]
   13880:	b11b      	cbz	r3, 1388a <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
   13882:	2200      	movs	r2, #0
   13884:	4611      	mov	r1, r2
   13886:	4638      	mov	r0, r7
   13888:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1388a:	f10a 0a01 	add.w	sl, sl, #1
   1388e:	3710      	adds	r7, #16
   13890:	e7e6      	b.n	13860 <log_process_thread_func+0x60>
   13892:	bf00      	nop
   13894:	20002748 	.word	0x20002748
   13898:	200026fc 	.word	0x200026fc
   1389c:	20000a98 	.word	0x20000a98
   138a0:	0002b604 	.word	0x0002b604
   138a4:	0002b5e4 	.word	0x0002b5e4

000138a8 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
   138a8:	4b21      	ldr	r3, [pc, #132]	; (13930 <z_log_msg_commit+0x88>)
{
   138aa:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
   138ac:	681b      	ldr	r3, [r3, #0]
{
   138ae:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   138b0:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   138b2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   138b4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   138b6:	481f      	ldr	r0, [pc, #124]	; (13934 <z_log_msg_commit+0x8c>)
   138b8:	f013 fae6 	bl	26e88 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   138bc:	f3bf 8f5b 	dmb	ish
   138c0:	4b1d      	ldr	r3, [pc, #116]	; (13938 <z_log_msg_commit+0x90>)
   138c2:	e853 2f00 	ldrex	r2, [r3]
   138c6:	1c51      	adds	r1, r2, #1
   138c8:	e843 1000 	strex	r0, r1, [r3]
   138cc:	2800      	cmp	r0, #0
   138ce:	d1f8      	bne.n	138c2 <z_log_msg_commit+0x1a>
   138d0:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   138d4:	4b19      	ldr	r3, [pc, #100]	; (1393c <z_log_msg_commit+0x94>)
   138d6:	781b      	ldrb	r3, [r3, #0]
   138d8:	b17b      	cbz	r3, 138fa <z_log_msg_commit+0x52>
   138da:	f04f 0340 	mov.w	r3, #64	; 0x40
   138de:	f3ef 8411 	mrs	r4, BASEPRI
   138e2:	f383 8812 	msr	BASEPRI_MAX, r3
   138e6:	f3bf 8f6f 	isb	sy
   138ea:	f7ff ff25 	bl	13738 <z_impl_log_process>
	__asm__ volatile(
   138ee:	f384 8811 	msr	BASEPRI, r4
   138f2:	f3bf 8f6f 	isb	sy
}
   138f6:	b002      	add	sp, #8
   138f8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   138fa:	4b11      	ldr	r3, [pc, #68]	; (13940 <z_log_msg_commit+0x98>)
   138fc:	681b      	ldr	r3, [r3, #0]
   138fe:	2b00      	cmp	r3, #0
   13900:	d0f9      	beq.n	138f6 <z_log_msg_commit+0x4e>
		if (cnt == 0) {
   13902:	b952      	cbnz	r2, 1391a <z_log_msg_commit+0x72>
	z_impl_k_timer_start(timer, duration, period);
   13904:	2200      	movs	r2, #0
   13906:	2300      	movs	r3, #0
   13908:	e9cd 2300 	strd	r2, r3, [sp]
   1390c:	480d      	ldr	r0, [pc, #52]	; (13944 <z_log_msg_commit+0x9c>)
   1390e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13912:	2300      	movs	r3, #0
   13914:	f00e fe8c 	bl	22630 <z_impl_k_timer_start>
   13918:	e7ed      	b.n	138f6 <z_log_msg_commit+0x4e>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1391a:	2a0a      	cmp	r2, #10
   1391c:	d1eb      	bne.n	138f6 <z_log_msg_commit+0x4e>
	z_impl_k_timer_stop(timer);
   1391e:	4809      	ldr	r0, [pc, #36]	; (13944 <z_log_msg_commit+0x9c>)
   13920:	f017 fa5d 	bl	2adde <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13924:	4808      	ldr	r0, [pc, #32]	; (13948 <z_log_msg_commit+0xa0>)
}
   13926:	b002      	add	sp, #8
   13928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1392c:	f00d bf0e 	b.w	2174c <z_impl_k_sem_give>
   13930:	200005dc 	.word	0x200005dc
   13934:	20002708 	.word	0x20002708
   13938:	200026fc 	.word	0x200026fc
   1393c:	20003cb3 	.word	0x20003cb3
   13940:	20002748 	.word	0x20002748
   13944:	20001cf0 	.word	0x20001cf0
   13948:	20000a98 	.word	0x20000a98

0001394c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1394c:	4a04      	ldr	r2, [pc, #16]	; (13960 <log_source_name_get+0x14>)
   1394e:	4b05      	ldr	r3, [pc, #20]	; (13964 <log_source_name_get+0x18>)
   13950:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13952:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   13956:	bf34      	ite	cc
   13958:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1395c:	2000      	movcs	r0, #0
}
   1395e:	4770      	bx	lr
   13960:	0002b4bc 	.word	0x0002b4bc
   13964:	0002b5e4 	.word	0x0002b5e4

00013968 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13968:	4a05      	ldr	r2, [pc, #20]	; (13980 <log_backend_enable+0x18>)
	backend->cb->id = id;
   1396a:	6843      	ldr	r3, [r0, #4]
   1396c:	1a80      	subs	r0, r0, r2
   1396e:	1100      	asrs	r0, r0, #4
   13970:	3001      	adds	r0, #1
	backend->cb->active = true;
   13972:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
   13974:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
   13976:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13978:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   1397a:	f7ff be49 	b.w	13610 <z_log_notify_backend_enabled>
   1397e:	bf00      	nop
   13980:	0002b5e4 	.word	0x0002b5e4

00013984 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   13988:	f3c1 45cb 	ubfx	r5, r1, #19, #12
   1398c:	f3c1 2649 	ubfx	r6, r1, #9, #10
   13990:	b08d      	sub	sp, #52	; 0x34
   13992:	4681      	mov	r9, r0
   13994:	460c      	mov	r4, r1
   13996:	4690      	mov	r8, r2
   13998:	469a      	mov	sl, r3
   1399a:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1399c:	2e00      	cmp	r6, #0
   1399e:	d03b      	beq.n	13a18 <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
   139a0:	2302      	movs	r3, #2
   139a2:	a809      	add	r0, sp, #36	; 0x24
   139a4:	f04f 0b04 	mov.w	fp, #4
   139a8:	af07      	add	r7, sp, #28
	struct z_cbprintf_buf_desc buf_desc = {
   139aa:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   139ac:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   139ae:	9300      	str	r3, [sp, #0]
   139b0:	f8cd b008 	str.w	fp, [sp, #8]
   139b4:	4603      	mov	r3, r0
   139b6:	9701      	str	r7, [sp, #4]
   139b8:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   139ba:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   139be:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   139c0:	9605      	str	r6, [sp, #20]
   139c2:	f7fe ff25 	bl	12810 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   139c6:	f3c0 0309 	ubfx	r3, r0, #0, #10
   139ca:	1958      	adds	r0, r3, r5
   139cc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   139d0:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   139d2:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   139d4:	f363 2452 	bfi	r4, r3, #9, #10
   139d8:	9304      	str	r3, [sp, #16]
   139da:	f7ff fe93 	bl	13704 <z_log_msg_alloc>
		if (msg) {
   139de:	4605      	mov	r5, r0
   139e0:	b178      	cbz	r0, 13a02 <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
   139e2:	9b04      	ldr	r3, [sp, #16]
   139e4:	930a      	str	r3, [sp, #40]	; 0x28
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   139e6:	3010      	adds	r0, #16
   139e8:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   139ea:	2302      	movs	r3, #2
	struct z_cbprintf_buf_desc buf_desc = {
   139ec:	9009      	str	r0, [sp, #36]	; 0x24
   139ee:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   139f0:	9300      	str	r3, [sp, #0]
   139f2:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   139f6:	4a0c      	ldr	r2, [pc, #48]	; (13a28 <z_impl_z_log_msg_static_create+0xa4>)
   139f8:	9905      	ldr	r1, [sp, #20]
   139fa:	ab09      	add	r3, sp, #36	; 0x24
   139fc:	4640      	mov	r0, r8
   139fe:	f7fe ff07 	bl	12810 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   13a02:	f366 2452 	bfi	r4, r6, #9, #10
   13a06:	4653      	mov	r3, sl
   13a08:	4622      	mov	r2, r4
   13a0a:	4649      	mov	r1, r9
   13a0c:	4628      	mov	r0, r5
}
   13a0e:	b00d      	add	sp, #52	; 0x34
   13a10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   13a14:	f013 bb23 	b.w	2705e <z_log_msg_finalize>
   13a18:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13a1c:	0880      	lsrs	r0, r0, #2
   13a1e:	f7ff fe71 	bl	13704 <z_log_msg_alloc>
   13a22:	4605      	mov	r5, r0
   13a24:	e7ed      	b.n	13a02 <z_impl_z_log_msg_static_create+0x7e>
   13a26:	bf00      	nop
   13a28:	00027031 	.word	0x00027031

00013a2c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	b087      	sub	sp, #28
   13a32:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
   13a36:	469a      	mov	sl, r3
   13a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13a3a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   13a3e:	9303      	str	r3, [sp, #12]
   13a40:	4604      	mov	r4, r0
   13a42:	4689      	mov	r9, r1
   13a44:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
   13a46:	b3cf      	cbz	r7, 13abc <z_impl_z_log_msg_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13a48:	f8cd b000 	str.w	fp, [sp]
   13a4c:	463b      	mov	r3, r7
   13a4e:	462a      	mov	r2, r5
   13a50:	2110      	movs	r1, #16
   13a52:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13a54:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13a58:	f7fe fc9e 	bl	12398 <cbvprintf_package>
   13a5c:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13a5e:	9a03      	ldr	r2, [sp, #12]
   13a60:	f008 0307 	and.w	r3, r8, #7
   13a64:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13a68:	f102 0017 	add.w	r0, r2, #23
	struct log_msg_desc desc =
   13a6c:	4c14      	ldr	r4, [pc, #80]	; (13ac0 <z_impl_z_log_msg_runtime_vcreate+0x94>)
   13a6e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   13a72:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13a76:	4430      	add	r0, r6
	struct log_msg_desc desc =
   13a78:	4b12      	ldr	r3, [pc, #72]	; (13ac4 <z_impl_z_log_msg_runtime_vcreate+0x98>)
   13a7a:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13a7e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   13a82:	ea48 0804 	orr.w	r8, r8, r4
   13a86:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   13a8a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13a8c:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg_alloc(msg_wlen);
   13a90:	f7ff fe38 	bl	13704 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   13a94:	4604      	mov	r4, r0
   13a96:	b140      	cbz	r0, 13aaa <z_impl_z_log_msg_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   13a98:	b13f      	cbz	r7, 13aaa <z_impl_z_log_msg_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13a9a:	f8cd b000 	str.w	fp, [sp]
   13a9e:	463b      	mov	r3, r7
   13aa0:	462a      	mov	r2, r5
   13aa2:	4631      	mov	r1, r6
   13aa4:	3010      	adds	r0, #16
   13aa6:	f7fe fc77 	bl	12398 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13aaa:	4653      	mov	r3, sl
   13aac:	4642      	mov	r2, r8
   13aae:	4649      	mov	r1, r9
   13ab0:	4620      	mov	r0, r4
	}
}
   13ab2:	b007      	add	sp, #28
   13ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   13ab8:	f013 bad1 	b.w	2705e <z_log_msg_finalize>
		plen = 0;
   13abc:	463e      	mov	r6, r7
   13abe:	e7ce      	b.n	13a5e <z_impl_z_log_msg_runtime_vcreate+0x32>
   13ac0:	0007fe00 	.word	0x0007fe00
   13ac4:	7ff80000 	.word	0x7ff80000

00013ac8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13ac8:	b40e      	push	{r1, r2, r3}
   13aca:	b503      	push	{r0, r1, lr}
   13acc:	ab03      	add	r3, sp, #12
   13ace:	4601      	mov	r1, r0
   13ad0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13ad4:	4804      	ldr	r0, [pc, #16]	; (13ae8 <print_formatted+0x20>)
	va_start(args, fmt);
   13ad6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13ad8:	f013 fae9 	bl	270ae <cbvprintf>
	va_end(args);

	return length;
}
   13adc:	b002      	add	sp, #8
   13ade:	f85d eb04 	ldr.w	lr, [sp], #4
   13ae2:	b003      	add	sp, #12
   13ae4:	4770      	bx	lr
   13ae6:	bf00      	nop
   13ae8:	000270d7 	.word	0x000270d7

00013aec <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   13aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13af0:	b089      	sub	sp, #36	; 0x24
   13af2:	469a      	mov	sl, r3
   13af4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13af8:	9304      	str	r3, [sp, #16]
   13afa:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
   13afe:	9306      	str	r3, [sp, #24]
   13b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13b02:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
   13b04:	9b04      	ldr	r3, [sp, #16]
{
   13b06:	9e16      	ldr	r6, [sp, #88]	; 0x58
   13b08:	4604      	mov	r4, r0
   13b0a:	460f      	mov	r7, r1
   13b0c:	4693      	mov	fp, r2
	if (!raw_string) {
   13b0e:	2b00      	cmp	r3, #0
   13b10:	f000 8112 	beq.w	13d38 <log_output_process+0x24c>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13b14:	f006 0308 	and.w	r3, r6, #8
   13b18:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
   13b1a:	f013 fa87 	bl	2702c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13b1e:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
   13b22:	4602      	mov	r2, r0
   13b24:	2800      	cmp	r0, #0
   13b26:	f000 80b1 	beq.w	13c8c <log_output_process+0x1a0>
		length += print_formatted(output, "%s ", tag);
   13b2a:	4989      	ldr	r1, [pc, #548]	; (13d50 <log_output_process+0x264>)
   13b2c:	4620      	mov	r0, r4
   13b2e:	f7ff ffcb 	bl	13ac8 <print_formatted>
   13b32:	4681      	mov	r9, r0
	if (stamp) {
   13b34:	b14d      	cbz	r5, 13b4a <log_output_process+0x5e>
	if (!format) {
   13b36:	f016 0f44 	tst.w	r6, #68	; 0x44
   13b3a:	f040 80a9 	bne.w	13c90 <log_output_process+0x1a4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13b3e:	4985      	ldr	r1, [pc, #532]	; (13d54 <log_output_process+0x268>)
   13b40:	463a      	mov	r2, r7
   13b42:	4620      	mov	r0, r4
   13b44:	f7ff ffc0 	bl	13ac8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13b48:	4481      	add	r9, r0
	if (color) {
   13b4a:	f006 0301 	and.w	r3, r6, #1
   13b4e:	b15b      	cbz	r3, 13b68 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   13b50:	4b81      	ldr	r3, [pc, #516]	; (13d58 <log_output_process+0x26c>)
   13b52:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13b54:	4981      	ldr	r1, [pc, #516]	; (13d5c <log_output_process+0x270>)
		const char *log_color = start && (colors[level] != NULL) ?
   13b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   13b5a:	4b81      	ldr	r3, [pc, #516]	; (13d60 <log_output_process+0x274>)
   13b5c:	4620      	mov	r0, r4
   13b5e:	2a00      	cmp	r2, #0
   13b60:	bf08      	it	eq
   13b62:	461a      	moveq	r2, r3
   13b64:	f7ff ffb0 	bl	13ac8 <print_formatted>
	if (level_on) {
   13b68:	f006 0308 	and.w	r3, r6, #8
   13b6c:	2b00      	cmp	r3, #0
   13b6e:	f000 80bb 	beq.w	13ce8 <log_output_process+0x1fc>
		total += print_formatted(output, "<%s> ", severity[level]);
   13b72:	4b7c      	ldr	r3, [pc, #496]	; (13d64 <log_output_process+0x278>)
   13b74:	9a04      	ldr	r2, [sp, #16]
   13b76:	497c      	ldr	r1, [pc, #496]	; (13d68 <log_output_process+0x27c>)
   13b78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13b7c:	4620      	mov	r0, r4
   13b7e:	f7ff ffa3 	bl	13ac8 <print_formatted>
   13b82:	4605      	mov	r5, r0
	if (domain) {
   13b84:	f1bb 0f00 	cmp.w	fp, #0
   13b88:	d005      	beq.n	13b96 <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
   13b8a:	4978      	ldr	r1, [pc, #480]	; (13d6c <log_output_process+0x280>)
   13b8c:	465a      	mov	r2, fp
   13b8e:	4620      	mov	r0, r4
   13b90:	f7ff ff9a 	bl	13ac8 <print_formatted>
   13b94:	4405      	add	r5, r0
	if (source) {
   13b96:	f1ba 0f00 	cmp.w	sl, #0
   13b9a:	d005      	beq.n	13ba8 <log_output_process+0xbc>
		total += print_formatted(output,
   13b9c:	4974      	ldr	r1, [pc, #464]	; (13d70 <log_output_process+0x284>)
   13b9e:	4652      	mov	r2, sl
   13ba0:	4620      	mov	r0, r4
   13ba2:	f7ff ff91 	bl	13ac8 <print_formatted>
   13ba6:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   13ba8:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
   13baa:	f1b8 0f00 	cmp.w	r8, #0
   13bae:	f000 80cb 	beq.w	13d48 <log_output_process+0x25c>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   13bb2:	4870      	ldr	r0, [pc, #448]	; (13d74 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13bb4:	4970      	ldr	r1, [pc, #448]	; (13d78 <log_output_process+0x28c>)
   13bb6:	4643      	mov	r3, r8
   13bb8:	4622      	mov	r2, r4
   13bba:	f012 fc36 	bl	2642a <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   13bbe:	9b05      	ldr	r3, [sp, #20]
   13bc0:	2b00      	cmp	r3, #0
   13bc2:	d04b      	beq.n	13c5c <log_output_process+0x170>
		print_formatted(output, " ");
   13bc4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 13d7c <log_output_process+0x290>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13bc8:	9f05      	ldr	r7, [sp, #20]
   13bca:	2f10      	cmp	r7, #16
   13bcc:	bf28      	it	cs
   13bce:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13bd0:	06f3      	lsls	r3, r6, #27
   13bd2:	d406      	bmi.n	13be2 <log_output_process+0xf6>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13bd4:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
   13bd6:	bf4c      	ite	mi
   13bd8:	4969      	ldrmi	r1, [pc, #420]	; (13d80 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   13bda:	496a      	ldrpl	r1, [pc, #424]	; (13d84 <log_output_process+0x298>)
   13bdc:	4620      	mov	r0, r4
   13bde:	f7ff ff73 	bl	13ac8 <print_formatted>
		prefix_offset = 0;
   13be2:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
   13be6:	4555      	cmp	r5, sl
   13be8:	f300 8084 	bgt.w	13cf4 <log_output_process+0x208>
			print_formatted(output, "   ");
   13bec:	f8df a198 	ldr.w	sl, [pc, #408]	; 13d88 <log_output_process+0x29c>
			print_formatted(output, "%02x ", data[i]);
   13bf0:	f8df b198 	ldr.w	fp, [pc, #408]	; 13d8c <log_output_process+0x2a0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13bf4:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   13bf8:	45b9      	cmp	r9, r7
   13bfa:	f080 808b 	bcs.w	13d14 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
   13bfe:	9b06      	ldr	r3, [sp, #24]
   13c00:	4659      	mov	r1, fp
   13c02:	f813 2009 	ldrb.w	r2, [r3, r9]
   13c06:	4620      	mov	r0, r4
   13c08:	f7ff ff5e 	bl	13ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c0c:	f109 0901 	add.w	r9, r9, #1
   13c10:	f1b9 0f10 	cmp.w	r9, #16
   13c14:	d175      	bne.n	13d02 <log_output_process+0x216>
	print_formatted(output, "|");
   13c16:	495e      	ldr	r1, [pc, #376]	; (13d90 <log_output_process+0x2a4>)
			print_formatted(output, "%c",
   13c18:	f8df a178 	ldr.w	sl, [pc, #376]	; 13d94 <log_output_process+0x2a8>
	print_formatted(output, "|");
   13c1c:	4620      	mov	r0, r4
   13c1e:	f7ff ff53 	bl	13ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c22:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   13c26:	455f      	cmp	r7, fp
   13c28:	f240 8081 	bls.w	13d2e <log_output_process+0x242>
			char c = (char)data[i];
   13c2c:	9b06      	ldr	r3, [sp, #24]
   13c2e:	f813 200b 	ldrb.w	r2, [r3, fp]
	return (int)((((unsigned)c) >= ' ') &&
   13c32:	f1a2 0320 	sub.w	r3, r2, #32
   13c36:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   13c38:	bf28      	it	cs
   13c3a:	222e      	movcs	r2, #46	; 0x2e
   13c3c:	4651      	mov	r1, sl
   13c3e:	4620      	mov	r0, r4
   13c40:	f7ff ff42 	bl	13ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c44:	f10b 0b01 	add.w	fp, fp, #1
   13c48:	f1bb 0f10 	cmp.w	fp, #16
   13c4c:	d167      	bne.n	13d1e <log_output_process+0x232>
		data += length;
   13c4e:	9b06      	ldr	r3, [sp, #24]
   13c50:	443b      	add	r3, r7
   13c52:	9306      	str	r3, [sp, #24]
	} while (len);
   13c54:	9b05      	ldr	r3, [sp, #20]
   13c56:	1bdb      	subs	r3, r3, r7
   13c58:	9305      	str	r3, [sp, #20]
   13c5a:	d1b5      	bne.n	13bc8 <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13c5c:	9b04      	ldr	r3, [sp, #16]
   13c5e:	b17b      	cbz	r3, 13c80 <log_output_process+0x194>
	if (color) {
   13c60:	07f1      	lsls	r1, r6, #31
   13c62:	d504      	bpl.n	13c6e <log_output_process+0x182>
		print_formatted(output, "%s", log_color);
   13c64:	4a3e      	ldr	r2, [pc, #248]	; (13d60 <log_output_process+0x274>)
   13c66:	493d      	ldr	r1, [pc, #244]	; (13d5c <log_output_process+0x270>)
   13c68:	4620      	mov	r0, r4
   13c6a:	f7ff ff2d 	bl	13ac8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13c6e:	06f2      	lsls	r2, r6, #27
   13c70:	d406      	bmi.n	13c80 <log_output_process+0x194>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13c72:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\n");
   13c74:	bf4c      	ite	mi
   13c76:	4942      	ldrmi	r1, [pc, #264]	; (13d80 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   13c78:	4942      	ldrpl	r1, [pc, #264]	; (13d84 <log_output_process+0x298>)
   13c7a:	4620      	mov	r0, r4
   13c7c:	f7ff ff24 	bl	13ac8 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13c80:	4620      	mov	r0, r4
}
   13c82:	b009      	add	sp, #36	; 0x24
   13c84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13c88:	f013 ba18 	b.w	270bc <log_output_flush>
	uint32_t length = 0U;
   13c8c:	4681      	mov	r9, r0
   13c8e:	e751      	b.n	13b34 <log_output_process+0x48>
	} else if (freq != 0U) {
   13c90:	4b41      	ldr	r3, [pc, #260]	; (13d98 <log_output_process+0x2ac>)
   13c92:	6818      	ldr	r0, [r3, #0]
   13c94:	2800      	cmp	r0, #0
   13c96:	f43f af57 	beq.w	13b48 <log_output_process+0x5c>
		timestamp /= timestamp_div;
   13c9a:	4b40      	ldr	r3, [pc, #256]	; (13d9c <log_output_process+0x2b0>)
		ms = (remainder * 1000U) / freq;
   13c9c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13ca0:	6819      	ldr	r1, [r3, #0]
   13ca2:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   13ca6:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   13caa:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   13cae:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
   13cb2:	fb0e f707 	mul.w	r7, lr, r7
   13cb6:	fbb1 f2f5 	udiv	r2, r1, r5
   13cba:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
   13cbe:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13cc0:	fbb7 fcf0 	udiv	ip, r7, r0
		mins = seconds / 60U;
   13cc4:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13cc8:	fb00 771c 	mls	r7, r0, ip, r7
				length = print_formatted(output,
   13ccc:	fb01 5113 	mls	r1, r1, r3, r5
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13cd0:	fb0e f707 	mul.w	r7, lr, r7
				length = print_formatted(output,
   13cd4:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13cd6:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
   13cda:	4931      	ldr	r1, [pc, #196]	; (13da0 <log_output_process+0x2b4>)
   13cdc:	e9cd c701 	strd	ip, r7, [sp, #4]
   13ce0:	4620      	mov	r0, r4
   13ce2:	f7ff fef1 	bl	13ac8 <print_formatted>
   13ce6:	e72f      	b.n	13b48 <log_output_process+0x5c>
	int total = 0;
   13ce8:	f006 0508 	and.w	r5, r6, #8
   13cec:	e74a      	b.n	13b84 <log_output_process+0x98>
		prefix_offset = 0;
   13cee:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   13cf0:	482c      	ldr	r0, [pc, #176]	; (13da4 <log_output_process+0x2b8>)
   13cf2:	e75f      	b.n	13bb4 <log_output_process+0xc8>
		print_formatted(output, " ");
   13cf4:	4641      	mov	r1, r8
   13cf6:	4620      	mov	r0, r4
   13cf8:	f7ff fee6 	bl	13ac8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13cfc:	f10a 0a01 	add.w	sl, sl, #1
   13d00:	e771      	b.n	13be6 <log_output_process+0xfa>
		if (i > 0 && !(i % 8)) {
   13d02:	f019 0f07 	tst.w	r9, #7
   13d06:	f47f af77 	bne.w	13bf8 <log_output_process+0x10c>
			print_formatted(output, " ");
   13d0a:	4641      	mov	r1, r8
   13d0c:	4620      	mov	r0, r4
   13d0e:	f7ff fedb 	bl	13ac8 <print_formatted>
   13d12:	e771      	b.n	13bf8 <log_output_process+0x10c>
			print_formatted(output, "   ");
   13d14:	4651      	mov	r1, sl
   13d16:	4620      	mov	r0, r4
   13d18:	f7ff fed6 	bl	13ac8 <print_formatted>
   13d1c:	e776      	b.n	13c0c <log_output_process+0x120>
		if (i > 0 && !(i % 8)) {
   13d1e:	f01b 0f07 	tst.w	fp, #7
   13d22:	d180      	bne.n	13c26 <log_output_process+0x13a>
			print_formatted(output, " ");
   13d24:	4641      	mov	r1, r8
   13d26:	4620      	mov	r0, r4
   13d28:	f7ff fece 	bl	13ac8 <print_formatted>
   13d2c:	e77b      	b.n	13c26 <log_output_process+0x13a>
			print_formatted(output, " ");
   13d2e:	4641      	mov	r1, r8
   13d30:	4620      	mov	r0, r4
   13d32:	f7ff fec9 	bl	13ac8 <print_formatted>
   13d36:	e785      	b.n	13c44 <log_output_process+0x158>
	if (package) {
   13d38:	f1b8 0f00 	cmp.w	r8, #0
   13d3c:	d1d7      	bne.n	13cee <log_output_process+0x202>
	if (data_len) {
   13d3e:	9b05      	ldr	r3, [sp, #20]
   13d40:	2b00      	cmp	r3, #0
   13d42:	d09d      	beq.n	13c80 <log_output_process+0x194>
		prefix_offset = 0;
   13d44:	9d04      	ldr	r5, [sp, #16]
   13d46:	e73d      	b.n	13bc4 <log_output_process+0xd8>
	if (data_len) {
   13d48:	9b05      	ldr	r3, [sp, #20]
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d088      	beq.n	13c60 <log_output_process+0x174>
   13d4e:	e739      	b.n	13bc4 <log_output_process+0xd8>
   13d50:	0002c4dc 	.word	0x0002c4dc
   13d54:	0002c4e0 	.word	0x0002c4e0
   13d58:	0002b954 	.word	0x0002b954
   13d5c:	0002d334 	.word	0x0002d334
   13d60:	0002c4d7 	.word	0x0002c4d7
   13d64:	0002b968 	.word	0x0002b968
   13d68:	0002c505 	.word	0x0002c505
   13d6c:	0002c50b 	.word	0x0002c50b
   13d70:	0002c50f 	.word	0x0002c50f
   13d74:	000270d7 	.word	0x000270d7
   13d78:	000270af 	.word	0x000270af
   13d7c:	0002c51f 	.word	0x0002c51f
   13d80:	0002c419 	.word	0x0002c419
   13d84:	0002c514 	.word	0x0002c514
   13d88:	0002c51d 	.word	0x0002c51d
   13d8c:	0002c517 	.word	0x0002c517
   13d90:	0002c521 	.word	0x0002c521
   13d94:	0002c523 	.word	0x0002c523
   13d98:	2000274c 	.word	0x2000274c
   13d9c:	20002750 	.word	0x20002750
   13da0:	0002c4e9 	.word	0x0002c4e9
   13da4:	0002710d 	.word	0x0002710d

00013da8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   13da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   13dac:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
   13dae:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   13db0:	688e      	ldr	r6, [r1, #8]
   13db2:	b086      	sub	sp, #24
   13db4:	4605      	mov	r5, r0
   13db6:	460c      	mov	r4, r1
   13db8:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   13dba:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
   13dbe:	b15b      	cbz	r3, 13dd8 <log_output_msg_process+0x30>
   13dc0:	4913      	ldr	r1, [pc, #76]	; (13e10 <log_output_msg_process+0x68>)
   13dc2:	1a5b      	subs	r3, r3, r1
   13dc4:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13dc8:	2900      	cmp	r1, #0
   13dca:	db1f      	blt.n	13e0c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   13dcc:	7820      	ldrb	r0, [r4, #0]
   13dce:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13dd2:	f7ff fdbb 	bl	1394c <log_source_name_get>
   13dd6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   13dd8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   13dda:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   13ddc:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   13de0:	9700      	str	r7, [sp, #0]
   13de2:	f3c2 2249 	ubfx	r2, r2, #9, #10
   13de6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   13de8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   13dec:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   13df0:	bf08      	it	eq
   13df2:	2100      	moveq	r1, #0
   13df4:	e9cd 0803 	strd	r0, r8, [sp, #12]
   13df8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   13dfc:	2200      	movs	r2, #0
   13dfe:	4631      	mov	r1, r6
   13e00:	4628      	mov	r0, r5
   13e02:	f7ff fe73 	bl	13aec <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   13e06:	b006      	add	sp, #24
   13e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13e0c:	2300      	movs	r3, #0
   13e0e:	e7e3      	b.n	13dd8 <log_output_msg_process+0x30>
   13e10:	0002b4bc 	.word	0x0002b4bc

00013e14 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e16:	f242 730f 	movw	r3, #9999	; 0x270f
   13e1a:	428b      	cmp	r3, r1
   13e1c:	bf28      	it	cs
   13e1e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13e20:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e22:	4a0f      	ldr	r2, [pc, #60]	; (13e60 <log_output_dropped_process+0x4c>)
{
   13e24:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e26:	2105      	movs	r1, #5
   13e28:	4668      	mov	r0, sp
   13e2a:	f012 fbed 	bl	26608 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13e2e:	6863      	ldr	r3, [r4, #4]
   13e30:	490c      	ldr	r1, [pc, #48]	; (13e64 <log_output_dropped_process+0x50>)
   13e32:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e34:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13e36:	220b      	movs	r2, #11
   13e38:	4628      	mov	r0, r5
   13e3a:	f013 f92b 	bl	27094 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13e3e:	6863      	ldr	r3, [r4, #4]
   13e40:	4632      	mov	r2, r6
   13e42:	4669      	mov	r1, sp
   13e44:	4628      	mov	r0, r5
   13e46:	685b      	ldr	r3, [r3, #4]
   13e48:	f013 f924 	bl	27094 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13e4c:	6863      	ldr	r3, [r4, #4]
   13e4e:	4906      	ldr	r1, [pc, #24]	; (13e68 <log_output_dropped_process+0x54>)
   13e50:	685b      	ldr	r3, [r3, #4]
   13e52:	221b      	movs	r2, #27
   13e54:	4628      	mov	r0, r5
   13e56:	f013 f91d 	bl	27094 <buffer_write>
		     output->control_block->ctx);
}
   13e5a:	b002      	add	sp, #8
   13e5c:	bd70      	pop	{r4, r5, r6, pc}
   13e5e:	bf00      	nop
   13e60:	0002e9d1 	.word	0x0002e9d1
   13e64:	0002c562 	.word	0x0002c562
   13e68:	0002c546 	.word	0x0002c546

00013e6c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13e6c:	4a08      	ldr	r2, [pc, #32]	; (13e90 <log_output_timestamp_freq_set+0x24>)
{
   13e6e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   13e70:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13e72:	4c08      	ldr	r4, [pc, #32]	; (13e94 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13e74:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13e76:	2100      	movs	r1, #0
   13e78:	42a0      	cmp	r0, r4
   13e7a:	d804      	bhi.n	13e86 <log_output_timestamp_freq_set+0x1a>
   13e7c:	b101      	cbz	r1, 13e80 <log_output_timestamp_freq_set+0x14>
   13e7e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13e80:	4b05      	ldr	r3, [pc, #20]	; (13e98 <log_output_timestamp_freq_set+0x2c>)
   13e82:	6018      	str	r0, [r3, #0]
}
   13e84:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   13e86:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13e88:	005b      	lsls	r3, r3, #1
   13e8a:	2101      	movs	r1, #1
   13e8c:	e7f4      	b.n	13e78 <log_output_timestamp_freq_set+0xc>
   13e8e:	bf00      	nop
   13e90:	20002750 	.word	0x20002750
   13e94:	000f4240 	.word	0x000f4240
   13e98:	2000274c 	.word	0x2000274c

00013e9c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   13e9e:	4f07      	ldr	r7, [pc, #28]	; (13ebc <char_out+0x20>)
{
   13ea0:	460d      	mov	r5, r1
   13ea2:	4604      	mov	r4, r0
   13ea4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   13ea6:	42b4      	cmp	r4, r6
   13ea8:	d101      	bne.n	13eae <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   13eaa:	4628      	mov	r0, r5
   13eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   13eae:	6838      	ldr	r0, [r7, #0]
   13eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13eb4:	6883      	ldr	r3, [r0, #8]
   13eb6:	685b      	ldr	r3, [r3, #4]
   13eb8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   13eba:	e7f4      	b.n	13ea6 <char_out+0xa>
   13ebc:	2000276c 	.word	0x2000276c

00013ec0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13ec0:	4b01      	ldr	r3, [pc, #4]	; (13ec8 <format_set+0x8>)
	return 0;
}
   13ec2:	2000      	movs	r0, #0
	log_format_current = log_type;
   13ec4:	6019      	str	r1, [r3, #0]
}
   13ec6:	4770      	bx	lr
   13ec8:	2000275c 	.word	0x2000275c

00013ecc <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   13ecc:	4b01      	ldr	r3, [pc, #4]	; (13ed4 <log_backend_uart_init+0x8>)
   13ece:	4a02      	ldr	r2, [pc, #8]	; (13ed8 <log_backend_uart_init+0xc>)
   13ed0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   13ed2:	4770      	bx	lr
   13ed4:	2000276c 	.word	0x2000276c
   13ed8:	0002b22c 	.word	0x0002b22c

00013edc <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   13edc:	4b02      	ldr	r3, [pc, #8]	; (13ee8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   13ede:	4803      	ldr	r0, [pc, #12]	; (13eec <panic+0x10>)
   13ee0:	2201      	movs	r2, #1
   13ee2:	701a      	strb	r2, [r3, #0]
   13ee4:	f013 b8ea 	b.w	270bc <log_output_flush>
   13ee8:	20003cb4 	.word	0x20003cb4
   13eec:	0002b998 	.word	0x0002b998

00013ef0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   13ef0:	4801      	ldr	r0, [pc, #4]	; (13ef8 <dropped+0x8>)
   13ef2:	f7ff bf8f 	b.w	13e14 <log_output_dropped_process>
   13ef6:	bf00      	nop
   13ef8:	0002b998 	.word	0x0002b998

00013efc <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13efc:	4b06      	ldr	r3, [pc, #24]	; (13f18 <process+0x1c>)
{
   13efe:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f00:	6818      	ldr	r0, [r3, #0]
{
   13f02:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f04:	f7ff fb7e 	bl	13604 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   13f08:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f0a:	4603      	mov	r3, r0
}
   13f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   13f10:	4802      	ldr	r0, [pc, #8]	; (13f1c <process+0x20>)
   13f12:	220f      	movs	r2, #15
   13f14:	4718      	bx	r3
   13f16:	bf00      	nop
   13f18:	2000275c 	.word	0x2000275c
   13f1c:	0002b998 	.word	0x0002b998

00013f20 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   13f20:	4b01      	ldr	r3, [pc, #4]	; (13f28 <log_backend_rtt_init+0x8>)
   13f22:	2201      	movs	r2, #1
   13f24:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   13f26:	4770      	bx	lr
   13f28:	20003cc6 	.word	0x20003cc6

00013f2c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13f2c:	4b01      	ldr	r3, [pc, #4]	; (13f34 <format_set+0x8>)
	return 0;
}
   13f2e:	2000      	movs	r0, #0
	log_format_current = log_type;
   13f30:	6019      	str	r1, [r3, #0]
}
   13f32:	4770      	bx	lr
   13f34:	20002778 	.word	0x20002778

00013f38 <panic>:
	panic_mode = true;
   13f38:	4b02      	ldr	r3, [pc, #8]	; (13f44 <panic+0xc>)
	log_output_flush(output);
   13f3a:	4803      	ldr	r0, [pc, #12]	; (13f48 <panic+0x10>)
   13f3c:	2201      	movs	r2, #1
   13f3e:	701a      	strb	r2, [r3, #0]
   13f40:	f013 b8bc 	b.w	270bc <log_output_flush>
   13f44:	20003cc7 	.word	0x20003cc7
   13f48:	0002b9c4 	.word	0x0002b9c4

00013f4c <dropped>:
	log_output_dropped_process(output, cnt);
   13f4c:	4801      	ldr	r0, [pc, #4]	; (13f54 <dropped+0x8>)
   13f4e:	f7ff bf61 	b.w	13e14 <log_output_dropped_process>
   13f52:	bf00      	nop
   13f54:	0002b9c4 	.word	0x0002b9c4

00013f58 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f58:	4b06      	ldr	r3, [pc, #24]	; (13f74 <process+0x1c>)
{
   13f5a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f5c:	6818      	ldr	r0, [r3, #0]
{
   13f5e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f60:	f7ff fb50 	bl	13604 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   13f64:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13f66:	4603      	mov	r3, r0
}
   13f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   13f6c:	4802      	ldr	r0, [pc, #8]	; (13f78 <process+0x20>)
   13f6e:	220f      	movs	r2, #15
   13f70:	4718      	bx	r3
   13f72:	bf00      	nop
   13f74:	20002778 	.word	0x20002778
   13f78:	0002b9c4 	.word	0x0002b9c4

00013f7c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13f7c:	4b05      	ldr	r3, [pc, #20]	; (13f94 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   13f7e:	781b      	ldrb	r3, [r3, #0]
   13f80:	b11b      	cbz	r3, 13f8a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   13f82:	f241 3088 	movw	r0, #5000	; 0x1388
   13f86:	f016 beef 	b.w	2ad68 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   13f8a:	20a4      	movs	r0, #164	; 0xa4
   13f8c:	2100      	movs	r1, #0
   13f8e:	f00e b8e5 	b.w	2215c <z_impl_k_sleep>
   13f92:	bf00      	nop
   13f94:	20003cc7 	.word	0x20003cc7

00013f98 <data_out_block_mode>:
{
   13f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13f9c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1401c <data_out_block_mode+0x84>
   13fa0:	4d1f      	ldr	r5, [pc, #124]	; (14020 <data_out_block_mode+0x88>)
{
   13fa2:	4680      	mov	r8, r0
   13fa4:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   13fa6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   13fa8:	f899 6000 	ldrb.w	r6, [r9]
   13fac:	b996      	cbnz	r6, 13fd4 <data_out_block_mode+0x3c>
			RTT_LOCK();
   13fae:	f00d f833 	bl	21018 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13fb2:	4630      	mov	r0, r6
   13fb4:	463a      	mov	r2, r7
   13fb6:	4641      	mov	r1, r8
   13fb8:	f00c ffa8 	bl	20f0c <SEGGER_RTT_WriteSkipNoLock>
   13fbc:	4606      	mov	r6, r0
			RTT_UNLOCK();
   13fbe:	f00d f835 	bl	2102c <zephyr_rtt_mutex_unlock>
		if (ret) {
   13fc2:	b1fe      	cbz	r6, 14004 <data_out_block_mode+0x6c>
	host_present = true;
   13fc4:	2301      	movs	r3, #1
   13fc6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   13fc8:	f899 3000 	ldrb.w	r3, [r9]
   13fcc:	b96b      	cbnz	r3, 13fea <data_out_block_mode+0x52>
}
   13fce:	4638      	mov	r0, r7
   13fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13fd4:	463a      	mov	r2, r7
   13fd6:	4641      	mov	r1, r8
   13fd8:	2000      	movs	r0, #0
   13fda:	f00c ff97 	bl	20f0c <SEGGER_RTT_WriteSkipNoLock>
   13fde:	4606      	mov	r6, r0
   13fe0:	e7ef      	b.n	13fc2 <data_out_block_mode+0x2a>
	if (retry_cnt == 0) {
   13fe2:	b95c      	cbnz	r4, 13ffc <data_out_block_mode+0x64>
		host_present = false;
   13fe4:	702c      	strb	r4, [r5, #0]
   13fe6:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13fea:	2000      	movs	r0, #0
   13fec:	f00d f80a 	bl	21004 <SEGGER_RTT_HasDataUp>
   13ff0:	2800      	cmp	r0, #0
   13ff2:	d0ec      	beq.n	13fce <data_out_block_mode+0x36>
   13ff4:	782b      	ldrb	r3, [r5, #0]
   13ff6:	2b00      	cmp	r3, #0
   13ff8:	d1f3      	bne.n	13fe2 <data_out_block_mode+0x4a>
   13ffa:	e7e8      	b.n	13fce <data_out_block_mode+0x36>
			on_failed_write(retry_cnt--);
   13ffc:	3c01      	subs	r4, #1
   13ffe:	f7ff ffbd 	bl	13f7c <on_failed_write.part.0>
   14002:	e7f2      	b.n	13fea <data_out_block_mode+0x52>
		} else if (host_present) {
   14004:	782b      	ldrb	r3, [r5, #0]
   14006:	b113      	cbz	r3, 1400e <data_out_block_mode+0x76>
	if (retry_cnt == 0) {
   14008:	3c01      	subs	r4, #1
   1400a:	d104      	bne.n	14016 <data_out_block_mode+0x7e>
		host_present = false;
   1400c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   1400e:	782b      	ldrb	r3, [r5, #0]
   14010:	2b00      	cmp	r3, #0
   14012:	d1c9      	bne.n	13fa8 <data_out_block_mode+0x10>
   14014:	e7db      	b.n	13fce <data_out_block_mode+0x36>
   14016:	f7ff ffb1 	bl	13f7c <on_failed_write.part.0>
   1401a:	e7f8      	b.n	1400e <data_out_block_mode+0x76>
   1401c:	20003cc7 	.word	0x20003cc7
   14020:	20003cc6 	.word	0x20003cc6

00014024 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   14024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   14026:	2407      	movs	r4, #7
   14028:	9402      	str	r4, [sp, #8]
   1402a:	4c04      	ldr	r4, [pc, #16]	; (1403c <read_pnp_id+0x18>)
   1402c:	9401      	str	r4, [sp, #4]
   1402e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   14032:	9400      	str	r4, [sp, #0]
   14034:	f014 ffa3 	bl	28f7e <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   14038:	b004      	add	sp, #16
   1403a:	bd10      	pop	{r4, pc}
   1403c:	20000984 	.word	0x20000984

00014040 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   14040:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   14042:	4c08      	ldr	r4, [pc, #32]	; (14064 <read_blvl+0x24>)
{
   14044:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   14046:	7824      	ldrb	r4, [r4, #0]
   14048:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   1404c:	2401      	movs	r4, #1
   1404e:	9402      	str	r4, [sp, #8]
   14050:	f10d 0417 	add.w	r4, sp, #23
   14054:	9401      	str	r4, [sp, #4]
   14056:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1405a:	9400      	str	r4, [sp, #0]
   1405c:	f014 ff8f 	bl	28f7e <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   14060:	b006      	add	sp, #24
   14062:	bd10      	pop	{r4, pc}
   14064:	2000098b 	.word	0x2000098b

00014068 <blvl_ccc_cfg_changed>:
{
   14068:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   1406a:	4a0c      	ldr	r2, [pc, #48]	; (1409c <blvl_ccc_cfg_changed+0x34>)
   1406c:	4b0c      	ldr	r3, [pc, #48]	; (140a0 <blvl_ccc_cfg_changed+0x38>)
{
   1406e:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   14070:	b088      	sub	sp, #32
   14072:	2901      	cmp	r1, #1
   14074:	bf18      	it	ne
   14076:	4613      	movne	r3, r2
   14078:	466a      	mov	r2, sp
   1407a:	490a      	ldr	r1, [pc, #40]	; (140a4 <blvl_ccc_cfg_changed+0x3c>)
   1407c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14080:	2302      	movs	r3, #2
   14082:	7713      	strb	r3, [r2, #28]
   14084:	4b08      	ldr	r3, [pc, #32]	; (140a8 <blvl_ccc_cfg_changed+0x40>)
   14086:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1408a:	4808      	ldr	r0, [pc, #32]	; (140ac <blvl_ccc_cfg_changed+0x44>)
   1408c:	2300      	movs	r3, #0
   1408e:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   14092:	f7ff fc77 	bl	13984 <z_impl_z_log_msg_static_create>
}
   14096:	46bd      	mov	sp, r7
   14098:	bd80      	pop	{r7, pc}
   1409a:	bf00      	nop
   1409c:	0002c5c2 	.word	0x0002c5c2
   140a0:	0002c5ba 	.word	0x0002c5ba
   140a4:	0002c5cb 	.word	0x0002c5cb
   140a8:	01000003 	.word	0x01000003
   140ac:	0002b4bc 	.word	0x0002b4bc

000140b0 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   140b0:	4b02      	ldr	r3, [pc, #8]	; (140bc <hrs_init+0xc>)
   140b2:	2201      	movs	r2, #1
   140b4:	701a      	strb	r2, [r3, #0]

	return 0;
}
   140b6:	2000      	movs	r0, #0
   140b8:	4770      	bx	lr
   140ba:	bf00      	nop
   140bc:	20003cc8 	.word	0x20003cc8

000140c0 <read_blsc>:
{
   140c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   140c2:	2401      	movs	r4, #1
   140c4:	9402      	str	r4, [sp, #8]
   140c6:	4c04      	ldr	r4, [pc, #16]	; (140d8 <read_blsc+0x18>)
   140c8:	9401      	str	r4, [sp, #4]
   140ca:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   140ce:	9400      	str	r4, [sp, #0]
   140d0:	f014 ff55 	bl	28f7e <bt_gatt_attr_read>
}
   140d4:	b004      	add	sp, #16
   140d6:	bd10      	pop	{r4, pc}
   140d8:	20003cc8 	.word	0x20003cc8

000140dc <hrmc_ccc_cfg_changed>:
{
   140dc:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   140de:	4a0c      	ldr	r2, [pc, #48]	; (14110 <hrmc_ccc_cfg_changed+0x34>)
   140e0:	4b0c      	ldr	r3, [pc, #48]	; (14114 <hrmc_ccc_cfg_changed+0x38>)
{
   140e2:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   140e4:	b088      	sub	sp, #32
   140e6:	2901      	cmp	r1, #1
   140e8:	bf18      	it	ne
   140ea:	4613      	movne	r3, r2
   140ec:	466a      	mov	r2, sp
   140ee:	490a      	ldr	r1, [pc, #40]	; (14118 <hrmc_ccc_cfg_changed+0x3c>)
   140f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   140f4:	2302      	movs	r3, #2
   140f6:	7713      	strb	r3, [r2, #28]
   140f8:	4b08      	ldr	r3, [pc, #32]	; (1411c <hrmc_ccc_cfg_changed+0x40>)
   140fa:	f842 3f10 	str.w	r3, [r2, #16]!
   140fe:	4808      	ldr	r0, [pc, #32]	; (14120 <hrmc_ccc_cfg_changed+0x44>)
   14100:	2300      	movs	r3, #0
   14102:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   14106:	f7ff fc3d 	bl	13984 <z_impl_z_log_msg_static_create>
}
   1410a:	46bd      	mov	sp, r7
   1410c:	bd80      	pop	{r7, pc}
   1410e:	bf00      	nop
   14110:	0002c5c2 	.word	0x0002c5c2
   14114:	0002c5ba 	.word	0x0002c5ba
   14118:	0002c5e4 	.word	0x0002c5e4
   1411c:	01000003 	.word	0x01000003
   14120:	0002b564 	.word	0x0002b564

00014124 <set_alert_level>:

static struct alerting_device devices[CONFIG_BT_MAX_CONN];
static enum bt_ias_alert_lvl curr_lvl;

static void set_alert_level(void)
{
   14124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum bt_ias_alert_lvl alert_level;

	alert_level = devices[0].alert_level;
   14126:	4b12      	ldr	r3, [pc, #72]	; (14170 <set_alert_level+0x4c>)
		if (alert_level < devices[i].alert_level) {
			alert_level = devices[i].alert_level;
		}
	}

	if (curr_lvl == alert_level) {
   14128:	4f12      	ldr	r7, [pc, #72]	; (14174 <set_alert_level+0x50>)
	alert_level = devices[0].alert_level;
   1412a:	781c      	ldrb	r4, [r3, #0]
	if (curr_lvl == alert_level) {
   1412c:	783b      	ldrb	r3, [r7, #0]
   1412e:	42a3      	cmp	r3, r4
   14130:	d00b      	beq.n	1414a <set_alert_level+0x26>
		return;
	}

	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   14132:	2c02      	cmp	r4, #2
   14134:	4e10      	ldr	r6, [pc, #64]	; (14178 <set_alert_level+0x54>)
   14136:	d109      	bne.n	1414c <set_alert_level+0x28>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14138:	4d10      	ldr	r5, [pc, #64]	; (1417c <set_alert_level+0x58>)
   1413a:	e003      	b.n	14144 <set_alert_level+0x20>
			if (cb->high_alert) {
   1413c:	68ab      	ldr	r3, [r5, #8]
   1413e:	b103      	cbz	r3, 14142 <set_alert_level+0x1e>
				cb->high_alert();
   14140:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14142:	350c      	adds	r5, #12
   14144:	42b5      	cmp	r5, r6
   14146:	d3f9      	bcc.n	1413c <set_alert_level+0x18>
				cb->no_alert();
			}
		}
		LOG_DBG("No alert");
	}
	curr_lvl = alert_level;
   14148:	703c      	strb	r4, [r7, #0]
}
   1414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   1414c:	2c01      	cmp	r4, #1
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1414e:	4d0b      	ldr	r5, [pc, #44]	; (1417c <set_alert_level+0x58>)
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   14150:	d00a      	beq.n	14168 <set_alert_level+0x44>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14152:	42b5      	cmp	r5, r6
   14154:	d2f8      	bcs.n	14148 <set_alert_level+0x24>
			if (cb->no_alert) {
   14156:	682b      	ldr	r3, [r5, #0]
   14158:	b103      	cbz	r3, 1415c <set_alert_level+0x38>
				cb->no_alert();
   1415a:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1415c:	350c      	adds	r5, #12
   1415e:	e7f8      	b.n	14152 <set_alert_level+0x2e>
			if (cb->mild_alert) {
   14160:	686b      	ldr	r3, [r5, #4]
   14162:	b103      	cbz	r3, 14166 <set_alert_level+0x42>
				cb->mild_alert();
   14164:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14166:	350c      	adds	r5, #12
   14168:	42b5      	cmp	r5, r6
   1416a:	d3f9      	bcc.n	14160 <set_alert_level+0x3c>
   1416c:	e7ec      	b.n	14148 <set_alert_level+0x24>
   1416e:	bf00      	nop
   14170:	20003cca 	.word	0x20003cca
   14174:	20003cc9 	.word	0x20003cc9
   14178:	0002b4bc 	.word	0x0002b4bc
   1417c:	0002b4bc 	.word	0x0002b4bc

00014180 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   14180:	b508      	push	{r3, lr}
	devices[bt_conn_index(conn)].alert_level = BT_IAS_ALERT_LVL_NO_ALERT;
   14182:	f004 f815 	bl	181b0 <bt_conn_index>
   14186:	4b03      	ldr	r3, [pc, #12]	; (14194 <disconnected+0x14>)
   14188:	2200      	movs	r2, #0
   1418a:	541a      	strb	r2, [r3, r0]
	set_alert_level();
}
   1418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_alert_level();
   14190:	f7ff bfc8 	b.w	14124 <set_alert_level>
   14194:	20003cca 	.word	0x20003cca

00014198 <bt_ias_write_alert_lvl>:
	return 0;
}

static ssize_t bt_ias_write_alert_lvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
				      const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   14198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1419a:	461c      	mov	r4, r3
   1419c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   141a0:	4606      	mov	r6, r0
   141a2:	4611      	mov	r1, r2
	struct net_buf_simple data;
	enum bt_ias_alert_lvl alert_val;

	if (offset > 0) {
   141a4:	b9ab      	cbnz	r3, 141d2 <bt_ias_write_alert_lvl+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (len != BT_IAS_ALERT_LVL_LEN) {
   141a6:	2c01      	cmp	r4, #1
   141a8:	d116      	bne.n	141d8 <bt_ias_write_alert_lvl+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	net_buf_simple_init_with_data(&data, (void *)buf, len);
   141aa:	4622      	mov	r2, r4
   141ac:	a801      	add	r0, sp, #4
   141ae:	f015 fc96 	bl	29ade <net_buf_simple_init_with_data>
	alert_val = net_buf_simple_pull_u8(&data);
   141b2:	a801      	add	r0, sp, #4
   141b4:	f015 fd48 	bl	29c48 <net_buf_simple_pull_u8>
   141b8:	4605      	mov	r5, r0
	devices[bt_conn_index(conn)].alert_level = alert_val;
   141ba:	4630      	mov	r0, r6
   141bc:	f003 fff8 	bl	181b0 <bt_conn_index>
   141c0:	4b08      	ldr	r3, [pc, #32]	; (141e4 <bt_ias_write_alert_lvl+0x4c>)

	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   141c2:	2d02      	cmp	r5, #2
	devices[bt_conn_index(conn)].alert_level = alert_val;
   141c4:	541d      	strb	r5, [r3, r0]
	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   141c6:	d80a      	bhi.n	141de <bt_ias_write_alert_lvl+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}
	set_alert_level();
   141c8:	f7ff ffac 	bl	14124 <set_alert_level>

	return len;
   141cc:	4620      	mov	r0, r4
}
   141ce:	b004      	add	sp, #16
   141d0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   141d2:	f06f 0006 	mvn.w	r0, #6
   141d6:	e7fa      	b.n	141ce <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   141d8:	f06f 000c 	mvn.w	r0, #12
   141dc:	e7f7      	b.n	141ce <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   141de:	f06f 0012 	mvn.w	r0, #18
   141e2:	e7f4      	b.n	141ce <bt_ias_write_alert_lvl+0x36>
   141e4:	20003cca 	.word	0x20003cca

000141e8 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   141e8:	4b10      	ldr	r3, [pc, #64]	; (1422c <settings_save_one+0x44>)
{
   141ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   141ee:	681c      	ldr	r4, [r3, #0]
{
   141f0:	4605      	mov	r5, r0
   141f2:	460e      	mov	r6, r1
   141f4:	4617      	mov	r7, r2
	if (!cs) {
   141f6:	b1ac      	cbz	r4, 14224 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   141f8:	f04f 32ff 	mov.w	r2, #4294967295
   141fc:	f04f 33ff 	mov.w	r3, #4294967295
   14200:	480b      	ldr	r0, [pc, #44]	; (14230 <settings_save_one+0x48>)
   14202:	f00d f9bb 	bl	2157c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   14206:	6863      	ldr	r3, [r4, #4]
   14208:	4632      	mov	r2, r6
   1420a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1420e:	4629      	mov	r1, r5
   14210:	463b      	mov	r3, r7
   14212:	4620      	mov	r0, r4
   14214:	47c0      	blx	r8
   14216:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14218:	4805      	ldr	r0, [pc, #20]	; (14230 <settings_save_one+0x48>)
   1421a:	f00d fa27 	bl	2166c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1421e:	4620      	mov	r0, r4
   14220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14224:	f06f 0401 	mvn.w	r4, #1
   14228:	e7f9      	b.n	1421e <settings_save_one+0x36>
   1422a:	bf00      	nop
   1422c:	20002790 	.word	0x20002790
   14230:	20000a70 	.word	0x20000a70

00014234 <settings_load_subtree_direct>:
{
   14234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   14236:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1423a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1423c:	f04f 33ff 	mov.w	r3, #4294967295
   14240:	480a      	ldr	r0, [pc, #40]	; (1426c <settings_load_subtree_direct+0x38>)
   14242:	f04f 32ff 	mov.w	r2, #4294967295
   14246:	f00d f999 	bl	2157c <z_impl_k_mutex_lock>
	return list->head;
   1424a:	4b09      	ldr	r3, [pc, #36]	; (14270 <settings_load_subtree_direct+0x3c>)
   1424c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1424e:	b134      	cbz	r4, 1425e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   14250:	6863      	ldr	r3, [r4, #4]
   14252:	4620      	mov	r0, r4
   14254:	681b      	ldr	r3, [r3, #0]
   14256:	a901      	add	r1, sp, #4
   14258:	4798      	blx	r3
	return node->next;
   1425a:	6824      	ldr	r4, [r4, #0]
   1425c:	e7f7      	b.n	1424e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   1425e:	4803      	ldr	r0, [pc, #12]	; (1426c <settings_load_subtree_direct+0x38>)
   14260:	f00d fa04 	bl	2166c <z_impl_k_mutex_unlock>
}
   14264:	2000      	movs	r0, #0
   14266:	b004      	add	sp, #16
   14268:	bd10      	pop	{r4, pc}
   1426a:	bf00      	nop
   1426c:	20000a70 	.word	0x20000a70
   14270:	20002788 	.word	0x20002788

00014274 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14278:	4605      	mov	r5, r0
	__asm__ volatile(
   1427a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1427e:	f3ef 8611 	mrs	r6, BASEPRI
   14282:	f383 8812 	msr	BASEPRI_MAX, r3
   14286:	f3bf 8f6f 	isb	sy
	return list->head;
   1428a:	4b0e      	ldr	r3, [pc, #56]	; (142c4 <pm_state_notify+0x50>)
   1428c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1428e:	b19c      	cbz	r4, 142b8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14290:	4f0d      	ldr	r7, [pc, #52]	; (142c8 <pm_state_notify+0x54>)
   14292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 142cc <pm_state_notify+0x58>
   14296:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   1429a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1429e:	2d00      	cmp	r5, #0
   142a0:	bf08      	it	eq
   142a2:	4613      	moveq	r3, r2
		if (callback) {
   142a4:	b12b      	cbz	r3, 142b2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   142a6:	f898 2014 	ldrb.w	r2, [r8, #20]
   142aa:	fb09 f202 	mul.w	r2, r9, r2
   142ae:	5cb8      	ldrb	r0, [r7, r2]
   142b0:	4798      	blx	r3
	return node->next;
   142b2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   142b4:	2c00      	cmp	r4, #0
   142b6:	d1f0      	bne.n	1429a <pm_state_notify+0x26>
	__asm__ volatile(
   142b8:	f386 8811 	msr	BASEPRI, r6
   142bc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   142c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   142c4:	20002794 	.word	0x20002794
   142c8:	200027a8 	.word	0x200027a8
   142cc:	2000318c 	.word	0x2000318c

000142d0 <pm_system_resume>:

void pm_system_resume(void)
{
   142d0:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   142d2:	4b1a      	ldr	r3, [pc, #104]	; (1433c <pm_system_resume+0x6c>)
   142d4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142d6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   142da:	f004 031f 	and.w	r3, r4, #31
   142de:	2201      	movs	r2, #1
   142e0:	409a      	lsls	r2, r3
   142e2:	4b17      	ldr	r3, [pc, #92]	; (14340 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   142e4:	0961      	lsrs	r1, r4, #5
   142e6:	43d0      	mvns	r0, r2
   142e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   142ec:	e853 1f00 	ldrex	r1, [r3]
   142f0:	ea01 0500 	and.w	r5, r1, r0
   142f4:	e843 5c00 	strex	ip, r5, [r3]
   142f8:	f1bc 0f00 	cmp.w	ip, #0
   142fc:	d1f6      	bne.n	142ec <pm_system_resume+0x1c>
   142fe:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14302:	4211      	tst	r1, r2
   14304:	d013      	beq.n	1432e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   14306:	4b0f      	ldr	r3, [pc, #60]	; (14344 <pm_system_resume+0x74>)
   14308:	4d0f      	ldr	r5, [pc, #60]	; (14348 <pm_system_resume+0x78>)
   1430a:	b18b      	cbz	r3, 14330 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1430c:	230c      	movs	r3, #12
   1430e:	4363      	muls	r3, r4
   14310:	18ea      	adds	r2, r5, r3
   14312:	5ce8      	ldrb	r0, [r5, r3]
   14314:	7851      	ldrb	r1, [r2, #1]
   14316:	f013 faaf 	bl	27878 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1431a:	2000      	movs	r0, #0
   1431c:	f7ff ffaa 	bl	14274 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14320:	230c      	movs	r3, #12
   14322:	435c      	muls	r4, r3
   14324:	192a      	adds	r2, r5, r4
   14326:	2300      	movs	r3, #0
   14328:	512b      	str	r3, [r5, r4]
   1432a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1432e:	bd38      	pop	{r3, r4, r5, pc}
   14330:	f383 8811 	msr	BASEPRI, r3
   14334:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14338:	e7ef      	b.n	1431a <pm_system_resume+0x4a>
   1433a:	bf00      	nop
   1433c:	2000318c 	.word	0x2000318c
   14340:	200027b4 	.word	0x200027b4
   14344:	00027879 	.word	0x00027879
   14348:	200027a8 	.word	0x200027a8

0001434c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   14350:	4b33      	ldr	r3, [pc, #204]	; (14420 <pm_system_suspend+0xd4>)
{
   14352:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   14354:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   14356:	f04f 0340 	mov.w	r3, #64	; 0x40
   1435a:	f3ef 8811 	mrs	r8, BASEPRI
   1435e:	f383 8812 	msr	BASEPRI_MAX, r3
   14362:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14366:	240c      	movs	r4, #12
   14368:	4b2e      	ldr	r3, [pc, #184]	; (14424 <pm_system_suspend+0xd8>)
   1436a:	4e2f      	ldr	r6, [pc, #188]	; (14428 <pm_system_suspend+0xdc>)
   1436c:	436c      	muls	r4, r5
   1436e:	191a      	adds	r2, r3, r4
   14370:	5d19      	ldrb	r1, [r3, r4]
   14372:	2900      	cmp	r1, #0
   14374:	d049      	beq.n	1440a <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14376:	ca07      	ldmia	r2, {r0, r1, r2}
   14378:	eb06 0c04 	add.w	ip, r6, r4
   1437c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14380:	2200      	movs	r2, #0
   14382:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   14384:	f388 8811 	msr	BASEPRI, r8
   14388:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1438c:	230c      	movs	r3, #12
   1438e:	436b      	muls	r3, r5
   14390:	18f2      	adds	r2, r6, r3
   14392:	5cf0      	ldrb	r0, [r6, r3]
   14394:	b3b8      	cbz	r0, 14406 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14396:	1c7b      	adds	r3, r7, #1
   14398:	d00f      	beq.n	143ba <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1439a:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1439e:	4823      	ldr	r0, [pc, #140]	; (1442c <pm_system_suspend+0xe0>)
   143a0:	4a23      	ldr	r2, [pc, #140]	; (14430 <pm_system_suspend+0xe4>)
   143a2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   143a6:	2100      	movs	r1, #0
   143a8:	2300      	movs	r3, #0
   143aa:	fbec 0104 	umlal	r0, r1, ip, r4
   143ae:	f7ec f9c1 	bl	734 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   143b2:	2101      	movs	r1, #1
   143b4:	1a38      	subs	r0, r7, r0
   143b6:	f016 fcb7 	bl	2ad28 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   143ba:	f00d fc4f 	bl	21c5c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   143be:	2001      	movs	r0, #1
   143c0:	f7ff ff58 	bl	14274 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143c4:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   143c8:	f005 021f 	and.w	r2, r5, #31
   143cc:	2101      	movs	r1, #1
   143ce:	4091      	lsls	r1, r2
   143d0:	4a18      	ldr	r2, [pc, #96]	; (14434 <pm_system_suspend+0xe8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   143d2:	096b      	lsrs	r3, r5, #5
   143d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   143d8:	e853 2f00 	ldrex	r2, [r3]
   143dc:	430a      	orrs	r2, r1
   143de:	e843 2000 	strex	r0, r2, [r3]
   143e2:	2800      	cmp	r0, #0
   143e4:	d1f8      	bne.n	143d8 <pm_system_suspend+0x8c>
   143e6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   143ea:	4b13      	ldr	r3, [pc, #76]	; (14438 <pm_system_suspend+0xec>)
   143ec:	b133      	cbz	r3, 143fc <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   143ee:	200c      	movs	r0, #12
   143f0:	4368      	muls	r0, r5
   143f2:	1833      	adds	r3, r6, r0
   143f4:	5c30      	ldrb	r0, [r6, r0]
   143f6:	7859      	ldrb	r1, [r3, #1]
   143f8:	f013 fa32 	bl	27860 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   143fc:	f7ff ff68 	bl	142d0 <pm_system_resume>
	k_sched_unlock();
   14400:	f00d fdfc 	bl	21ffc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   14404:	2001      	movs	r0, #1
}
   14406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1440a:	4601      	mov	r1, r0
   1440c:	4628      	mov	r0, r5
   1440e:	f000 f815 	bl	1443c <pm_policy_next_state>
		if (info != NULL) {
   14412:	2800      	cmp	r0, #0
   14414:	d0b6      	beq.n	14384 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   14416:	c807      	ldmia	r0, {r0, r1, r2}
   14418:	4434      	add	r4, r6
   1441a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1441e:	e7b1      	b.n	14384 <pm_system_suspend+0x38>
   14420:	2000318c 	.word	0x2000318c
   14424:	2000279c 	.word	0x2000279c
   14428:	200027a8 	.word	0x200027a8
   1442c:	000f423f 	.word	0x000f423f
   14430:	000f4240 	.word	0x000f4240
   14434:	200027b4 	.word	0x200027b4
   14438:	00027861 	.word	0x00027861

0001443c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14440:	b085      	sub	sp, #20
   14442:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14444:	a903      	add	r1, sp, #12
   14446:	f000 f841 	bl	144cc <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   1444a:	9b03      	ldr	r3, [sp, #12]
   1444c:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1444e:	4b1c      	ldr	r3, [pc, #112]	; (144c0 <pm_policy_next_state+0x84>)
   14450:	f8df 8070 	ldr.w	r8, [pc, #112]	; 144c4 <pm_policy_next_state+0x88>
   14454:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14458:	1e44      	subs	r4, r0, #1
   1445a:	b224      	sxth	r4, r4
   1445c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14460:	f04f 0b00 	mov.w	fp, #0
   14464:	1c63      	adds	r3, r4, #1
   14466:	d104      	bne.n	14472 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   14468:	2500      	movs	r5, #0
}
   1446a:	4628      	mov	r0, r5
   1446c:	b005      	add	sp, #20
   1446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   14472:	9b01      	ldr	r3, [sp, #4]
   14474:	4a14      	ldr	r2, [pc, #80]	; (144c8 <pm_policy_next_state+0x8c>)
   14476:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1447a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1447e:	46c4      	mov	ip, r8
   14480:	6868      	ldr	r0, [r5, #4]
   14482:	4659      	mov	r1, fp
   14484:	fbe0 c107 	umlal	ip, r1, r0, r7
   14488:	2300      	movs	r3, #0
   1448a:	4660      	mov	r0, ip
   1448c:	f7ec f952 	bl	734 <__aeabi_uldivmod>
   14490:	4681      	mov	r9, r0
   14492:	68a8      	ldr	r0, [r5, #8]
   14494:	4a0c      	ldr	r2, [pc, #48]	; (144c8 <pm_policy_next_state+0x8c>)
   14496:	46c4      	mov	ip, r8
   14498:	4659      	mov	r1, fp
   1449a:	fbe0 c107 	umlal	ip, r1, r0, r7
   1449e:	2300      	movs	r3, #0
   144a0:	4660      	mov	r0, ip
   144a2:	f7ec f947 	bl	734 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   144a6:	f1ba 3fff 	cmp.w	sl, #4294967295
   144aa:	d001      	beq.n	144b0 <pm_policy_next_state+0x74>
   144ac:	4582      	cmp	sl, r0
   144ae:	d904      	bls.n	144ba <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   144b0:	1c72      	adds	r2, r6, #1
   144b2:	d0da      	beq.n	1446a <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   144b4:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   144b6:	42b0      	cmp	r0, r6
   144b8:	d9d7      	bls.n	1446a <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   144ba:	3c01      	subs	r4, #1
   144bc:	b224      	sxth	r4, r4
   144be:	e7d1      	b.n	14464 <pm_policy_next_state+0x28>
   144c0:	20000650 	.word	0x20000650
   144c4:	000f423f 	.word	0x000f423f
   144c8:	000f4240 	.word	0x000f4240

000144cc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   144cc:	b908      	cbnz	r0, 144d2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   144ce:	4b02      	ldr	r3, [pc, #8]	; (144d8 <pm_state_cpu_get_all+0xc>)
   144d0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   144d2:	2000      	movs	r0, #0
   144d4:	4770      	bx	lr
   144d6:	bf00      	nop
   144d8:	0002bb8c 	.word	0x0002bb8c

000144dc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   144dc:	4904      	ldr	r1, [pc, #16]	; (144f0 <sub_bytes+0x14>)
   144de:	1e43      	subs	r3, r0, #1
   144e0:	300f      	adds	r0, #15
   144e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   144e6:	5c8a      	ldrb	r2, [r1, r2]
   144e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   144ea:	4283      	cmp	r3, r0
   144ec:	d1f9      	bne.n	144e2 <sub_bytes+0x6>
	}
}
   144ee:	4770      	bx	lr
   144f0:	0002c60b 	.word	0x0002c60b

000144f4 <tc_aes128_set_encrypt_key>:
{
   144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   144f6:	4e26      	ldr	r6, [pc, #152]	; (14590 <tc_aes128_set_encrypt_key+0x9c>)
{
   144f8:	4607      	mov	r7, r0
   144fa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   144fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   144fe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14500:	ad01      	add	r5, sp, #4
   14502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14504:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14508:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1450c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14510:	4638      	mov	r0, r7
   14512:	2f00      	cmp	r7, #0
   14514:	d038      	beq.n	14588 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14516:	2c00      	cmp	r4, #0
   14518:	d038      	beq.n	1458c <tc_aes128_set_encrypt_key+0x98>
   1451a:	1f38      	subs	r0, r7, #4
   1451c:	4621      	mov	r1, r4
   1451e:	4602      	mov	r2, r0
   14520:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14522:	784b      	ldrb	r3, [r1, #1]
   14524:	780d      	ldrb	r5, [r1, #0]
   14526:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14528:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1452c:	78cd      	ldrb	r5, [r1, #3]
   1452e:	432b      	orrs	r3, r5
   14530:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14532:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14534:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14538:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1453a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1453e:	d1f0      	bne.n	14522 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14540:	4c14      	ldr	r4, [pc, #80]	; (14594 <tc_aes128_set_encrypt_key+0xa0>)
   14542:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14544:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14546:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14548:	d116      	bne.n	14578 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1454a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1454e:	5ca5      	ldrb	r5, [r4, r2]
   14550:	0e1a      	lsrs	r2, r3, #24
   14552:	5ca2      	ldrb	r2, [r4, r2]
   14554:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14558:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1455c:	b2db      	uxtb	r3, r3
   1455e:	5d65      	ldrb	r5, [r4, r5]
   14560:	5ce3      	ldrb	r3, [r4, r3]
   14562:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14566:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1456a:	ad0c      	add	r5, sp, #48	; 0x30
   1456c:	f021 0303 	bic.w	r3, r1, #3
   14570:	442b      	add	r3, r5
   14572:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14576:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14578:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1457c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1457e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14580:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14582:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14584:	d1de      	bne.n	14544 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14586:	2001      	movs	r0, #1
}
   14588:	b00d      	add	sp, #52	; 0x34
   1458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1458c:	4620      	mov	r0, r4
   1458e:	e7fb      	b.n	14588 <tc_aes128_set_encrypt_key+0x94>
   14590:	0002b850 	.word	0x0002b850
   14594:	0002c60b 	.word	0x0002c60b

00014598 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14598:	4801      	ldr	r0, [pc, #4]	; (145a0 <nrf_cc3xx_platform_abort_init+0x8>)
   1459a:	f00e bcff 	b.w	22f9c <nrf_cc3xx_platform_set_abort>
   1459e:	bf00      	nop
   145a0:	0002bb8c 	.word	0x0002bb8c

000145a4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   145a4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   145a6:	4604      	mov	r4, r0
   145a8:	b918      	cbnz	r0, 145b2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   145aa:	4b0d      	ldr	r3, [pc, #52]	; (145e0 <mutex_free_platform+0x3c>)
   145ac:	480d      	ldr	r0, [pc, #52]	; (145e4 <mutex_free_platform+0x40>)
   145ae:	685b      	ldr	r3, [r3, #4]
   145b0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   145b2:	6861      	ldr	r1, [r4, #4]
   145b4:	2908      	cmp	r1, #8
   145b6:	d00d      	beq.n	145d4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   145b8:	f031 0304 	bics.w	r3, r1, #4
   145bc:	d00a      	beq.n	145d4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   145be:	f011 0102 	ands.w	r1, r1, #2
   145c2:	d008      	beq.n	145d6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   145c4:	4808      	ldr	r0, [pc, #32]	; (145e8 <mutex_free_platform+0x44>)
   145c6:	4621      	mov	r1, r4
   145c8:	f016 f84c 	bl	2a664 <k_mem_slab_free>
        mutex->mutex = NULL;
   145cc:	2300      	movs	r3, #0
   145ce:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   145d0:	2300      	movs	r3, #0
   145d2:	6063      	str	r3, [r4, #4]
}
   145d4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   145d6:	6820      	ldr	r0, [r4, #0]
   145d8:	2214      	movs	r2, #20
   145da:	f013 f933 	bl	27844 <memset>
   145de:	e7f7      	b.n	145d0 <mutex_free_platform+0x2c>
   145e0:	20000830 	.word	0x20000830
   145e4:	0002c70b 	.word	0x0002c70b
   145e8:	200027b8 	.word	0x200027b8

000145ec <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   145ec:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   145ee:	b308      	cbz	r0, 14634 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   145f0:	6843      	ldr	r3, [r0, #4]
   145f2:	2b04      	cmp	r3, #4
   145f4:	d110      	bne.n	14618 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   145f6:	2201      	movs	r2, #1
   145f8:	6803      	ldr	r3, [r0, #0]
   145fa:	f3bf 8f5b 	dmb	ish
   145fe:	e853 1f00 	ldrex	r1, [r3]
   14602:	2900      	cmp	r1, #0
   14604:	d103      	bne.n	1460e <mutex_lock_platform+0x22>
   14606:	e843 2000 	strex	r0, r2, [r3]
   1460a:	2800      	cmp	r0, #0
   1460c:	d1f7      	bne.n	145fe <mutex_lock_platform+0x12>
   1460e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14612:	d10b      	bne.n	1462c <mutex_lock_platform+0x40>
   14614:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14616:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14618:	b153      	cbz	r3, 14630 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1461a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1461c:	f04f 32ff 	mov.w	r2, #4294967295
   14620:	f04f 33ff 	mov.w	r3, #4294967295
   14624:	f00c ffaa 	bl	2157c <z_impl_k_mutex_lock>
        if (ret == 0) {
   14628:	2800      	cmp	r0, #0
   1462a:	d0f3      	beq.n	14614 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1462c:	4803      	ldr	r0, [pc, #12]	; (1463c <mutex_lock_platform+0x50>)
   1462e:	e7f2      	b.n	14616 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14630:	4803      	ldr	r0, [pc, #12]	; (14640 <mutex_lock_platform+0x54>)
   14632:	e7f0      	b.n	14616 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14634:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14638:	e7ed      	b.n	14616 <mutex_lock_platform+0x2a>
   1463a:	bf00      	nop
   1463c:	ffff8fe9 	.word	0xffff8fe9
   14640:	ffff8fea 	.word	0xffff8fea

00014644 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14644:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14646:	b1d0      	cbz	r0, 1467e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14648:	6843      	ldr	r3, [r0, #4]
   1464a:	2b04      	cmp	r3, #4
   1464c:	d111      	bne.n	14672 <mutex_unlock_platform+0x2e>
   1464e:	2200      	movs	r2, #0
   14650:	6803      	ldr	r3, [r0, #0]
   14652:	f3bf 8f5b 	dmb	ish
   14656:	e853 1f00 	ldrex	r1, [r3]
   1465a:	2901      	cmp	r1, #1
   1465c:	d103      	bne.n	14666 <mutex_unlock_platform+0x22>
   1465e:	e843 2000 	strex	r0, r2, [r3]
   14662:	2800      	cmp	r0, #0
   14664:	d1f7      	bne.n	14656 <mutex_unlock_platform+0x12>
   14666:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1466a:	4807      	ldr	r0, [pc, #28]	; (14688 <mutex_unlock_platform+0x44>)
   1466c:	bf08      	it	eq
   1466e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   14670:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14672:	b13b      	cbz	r3, 14684 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14674:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14676:	f00c fff9 	bl	2166c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1467a:	2000      	movs	r0, #0
   1467c:	e7f8      	b.n	14670 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1467e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14682:	e7f5      	b.n	14670 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14684:	4801      	ldr	r0, [pc, #4]	; (1468c <mutex_unlock_platform+0x48>)
   14686:	e7f3      	b.n	14670 <mutex_unlock_platform+0x2c>
   14688:	ffff8fe9 	.word	0xffff8fe9
   1468c:	ffff8fea 	.word	0xffff8fea

00014690 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14690:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14692:	4604      	mov	r4, r0
   14694:	b918      	cbnz	r0, 1469e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14696:	4b16      	ldr	r3, [pc, #88]	; (146f0 <mutex_init_platform+0x60>)
   14698:	4816      	ldr	r0, [pc, #88]	; (146f4 <mutex_init_platform+0x64>)
   1469a:	685b      	ldr	r3, [r3, #4]
   1469c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1469e:	6863      	ldr	r3, [r4, #4]
   146a0:	2b04      	cmp	r3, #4
   146a2:	d023      	beq.n	146ec <mutex_init_platform+0x5c>
   146a4:	2b08      	cmp	r3, #8
   146a6:	d021      	beq.n	146ec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   146a8:	b9cb      	cbnz	r3, 146de <mutex_init_platform+0x4e>
   146aa:	6823      	ldr	r3, [r4, #0]
   146ac:	b9bb      	cbnz	r3, 146de <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   146ae:	4812      	ldr	r0, [pc, #72]	; (146f8 <mutex_init_platform+0x68>)
   146b0:	f04f 32ff 	mov.w	r2, #4294967295
   146b4:	f04f 33ff 	mov.w	r3, #4294967295
   146b8:	4621      	mov	r1, r4
   146ba:	f00c fe5d 	bl	21378 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   146be:	b908      	cbnz	r0, 146c4 <mutex_init_platform+0x34>
   146c0:	6823      	ldr	r3, [r4, #0]
   146c2:	b91b      	cbnz	r3, 146cc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   146c4:	4b0a      	ldr	r3, [pc, #40]	; (146f0 <mutex_init_platform+0x60>)
   146c6:	480d      	ldr	r0, [pc, #52]	; (146fc <mutex_init_platform+0x6c>)
   146c8:	685b      	ldr	r3, [r3, #4]
   146ca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   146cc:	6820      	ldr	r0, [r4, #0]
   146ce:	2214      	movs	r2, #20
   146d0:	2100      	movs	r1, #0
   146d2:	f013 f8b7 	bl	27844 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   146d6:	6863      	ldr	r3, [r4, #4]
   146d8:	f043 0302 	orr.w	r3, r3, #2
   146dc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   146de:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   146e0:	f016 f805 	bl	2a6ee <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   146e4:	6863      	ldr	r3, [r4, #4]
   146e6:	f043 0301 	orr.w	r3, r3, #1
   146ea:	6063      	str	r3, [r4, #4]
}
   146ec:	bd10      	pop	{r4, pc}
   146ee:	bf00      	nop
   146f0:	20000830 	.word	0x20000830
   146f4:	0002c70b 	.word	0x0002c70b
   146f8:	200027b8 	.word	0x200027b8
   146fc:	0002c731 	.word	0x0002c731

00014700 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14700:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14702:	4906      	ldr	r1, [pc, #24]	; (1471c <nrf_cc3xx_platform_mutex_init+0x1c>)
   14704:	4806      	ldr	r0, [pc, #24]	; (14720 <nrf_cc3xx_platform_mutex_init+0x20>)
   14706:	2340      	movs	r3, #64	; 0x40
   14708:	2214      	movs	r2, #20
   1470a:	f015 ff90 	bl	2a62e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1470e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14712:	4904      	ldr	r1, [pc, #16]	; (14724 <nrf_cc3xx_platform_mutex_init+0x24>)
   14714:	4804      	ldr	r0, [pc, #16]	; (14728 <nrf_cc3xx_platform_mutex_init+0x28>)
   14716:	f00e bcf5 	b.w	23104 <nrf_cc3xx_platform_set_mutexes>
   1471a:	bf00      	nop
   1471c:	200027d4 	.word	0x200027d4
   14720:	200027b8 	.word	0x200027b8
   14724:	0002bba4 	.word	0x0002bba4
   14728:	0002bb94 	.word	0x0002bb94

0001472c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1472c:	4901      	ldr	r1, [pc, #4]	; (14734 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1472e:	2210      	movs	r2, #16
	str	r2, [r1]
   14730:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14732:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14734:	e000ed10 	.word	0xe000ed10

00014738 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14738:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1473a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1473c:	f380 8811 	msr	BASEPRI, r0
	isb
   14740:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14744:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14748:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1474a:	b662      	cpsie	i
	isb
   1474c:	f3bf 8f6f 	isb	sy

	bx	lr
   14750:	4770      	bx	lr
   14752:	bf00      	nop

00014754 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14754:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14756:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14758:	f381 8811 	msr	BASEPRI, r1

	wfe
   1475c:	bf20      	wfe

	msr	BASEPRI, r0
   1475e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14762:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14764:	4770      	bx	lr
   14766:	bf00      	nop

00014768 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1476c:	4681      	mov	r9, r0
   1476e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14770:	460c      	mov	r4, r1
   14772:	2900      	cmp	r1, #0
   14774:	d04c      	beq.n	14810 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14776:	466e      	mov	r6, sp
   14778:	b08a      	sub	sp, #40	; 0x28
   1477a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1477e:	68a3      	ldr	r3, [r4, #8]
   14780:	466d      	mov	r5, sp
   14782:	4827      	ldr	r0, [pc, #156]	; (14820 <z_arm_fatal_error+0xb8>)
   14784:	46a8      	mov	r8, r5
   14786:	f04f 0a05 	mov.w	sl, #5
   1478a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1478e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14792:	f848 af10 	str.w	sl, [r8, #16]!
   14796:	4823      	ldr	r0, [pc, #140]	; (14824 <z_arm_fatal_error+0xbc>)
   14798:	4642      	mov	r2, r8
   1479a:	2300      	movs	r3, #0
   1479c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   147a0:	f7ff f8f0 	bl	13984 <z_impl_z_log_msg_static_create>
   147a4:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   147a6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   147aa:	6963      	ldr	r3, [r4, #20]
   147ac:	46ad      	mov	sp, r5
   147ae:	481e      	ldr	r0, [pc, #120]	; (14828 <z_arm_fatal_error+0xc0>)
   147b0:	f8c5 a010 	str.w	sl, [r5, #16]
   147b4:	e9c5 0105 	strd	r0, r1, [r5, #20]
   147b8:	e9c5 2307 	strd	r2, r3, [r5, #28]
   147bc:	4819      	ldr	r0, [pc, #100]	; (14824 <z_arm_fatal_error+0xbc>)
   147be:	2300      	movs	r3, #0
   147c0:	4642      	mov	r2, r8
   147c2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   147c6:	f7ff f8dd 	bl	13984 <z_impl_z_log_msg_static_create>
   147ca:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   147cc:	b088      	sub	sp, #32
   147ce:	69e3      	ldr	r3, [r4, #28]
   147d0:	466d      	mov	r5, sp
   147d2:	4a16      	ldr	r2, [pc, #88]	; (1482c <z_arm_fatal_error+0xc4>)
   147d4:	46a8      	mov	r8, r5
   147d6:	f04f 0a03 	mov.w	sl, #3
   147da:	e9c5 2305 	strd	r2, r3, [r5, #20]
   147de:	f848 af10 	str.w	sl, [r8, #16]!
   147e2:	4810      	ldr	r0, [pc, #64]	; (14824 <z_arm_fatal_error+0xbc>)
   147e4:	2300      	movs	r3, #0
   147e6:	4642      	mov	r2, r8
   147e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   147ec:	f7ff f8ca 	bl	13984 <z_impl_z_log_msg_static_create>
   147f0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   147f2:	69a3      	ldr	r3, [r4, #24]
   147f4:	46ad      	mov	sp, r5
   147f6:	4a0e      	ldr	r2, [pc, #56]	; (14830 <z_arm_fatal_error+0xc8>)
   147f8:	f8c5 a010 	str.w	sl, [r5, #16]
   147fc:	e9c5 2305 	strd	r2, r3, [r5, #20]
   14800:	4808      	ldr	r0, [pc, #32]	; (14824 <z_arm_fatal_error+0xbc>)
   14802:	2300      	movs	r3, #0
   14804:	4642      	mov	r2, r8
   14806:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1480a:	f7ff f8bb 	bl	13984 <z_impl_z_log_msg_static_create>
   1480e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14810:	4621      	mov	r1, r4
   14812:	4648      	mov	r0, r9
   14814:	f00c fc36 	bl	21084 <z_fatal_error>
}
   14818:	46bd      	mov	sp, r7
   1481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1481e:	bf00      	nop
   14820:	0002c75e 	.word	0x0002c75e
   14824:	0002b59c 	.word	0x0002b59c
   14828:	0002c78d 	.word	0x0002c78d
   1482c:	0002c7bc 	.word	0x0002c7bc
   14830:	0002c7cb 	.word	0x0002c7cb

00014834 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14834:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14836:	2b00      	cmp	r3, #0
   14838:	db08      	blt.n	1484c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1483a:	2201      	movs	r2, #1
   1483c:	f000 001f 	and.w	r0, r0, #31
   14840:	fa02 f000 	lsl.w	r0, r2, r0
   14844:	095b      	lsrs	r3, r3, #5
   14846:	4a02      	ldr	r2, [pc, #8]	; (14850 <arch_irq_enable+0x1c>)
   14848:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1484c:	4770      	bx	lr
   1484e:	bf00      	nop
   14850:	e000e100 	.word	0xe000e100

00014854 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14854:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14856:	2b00      	cmp	r3, #0
   14858:	db0d      	blt.n	14876 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1485a:	2201      	movs	r2, #1
   1485c:	095b      	lsrs	r3, r3, #5
   1485e:	f000 001f 	and.w	r0, r0, #31
   14862:	fa02 f000 	lsl.w	r0, r2, r0
   14866:	3320      	adds	r3, #32
   14868:	4a03      	ldr	r2, [pc, #12]	; (14878 <arch_irq_disable+0x24>)
   1486a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1486e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14872:	f3bf 8f6f 	isb	sy
}
   14876:	4770      	bx	lr
   14878:	e000e100 	.word	0xe000e100

0001487c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1487c:	4b05      	ldr	r3, [pc, #20]	; (14894 <arch_irq_is_enabled+0x18>)
   1487e:	0942      	lsrs	r2, r0, #5
   14880:	f000 001f 	and.w	r0, r0, #31
   14884:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14888:	2301      	movs	r3, #1
   1488a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1488e:	4010      	ands	r0, r2
   14890:	4770      	bx	lr
   14892:	bf00      	nop
   14894:	e000e100 	.word	0xe000e100

00014898 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14898:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1489a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   1489c:	bf54      	ite	pl
   1489e:	1c8b      	addpl	r3, r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   148a0:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   148a2:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148a4:	bfac      	ite	ge
   148a6:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148aa:	4a07      	ldrlt	r2, [pc, #28]	; (148c8 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148ac:	ea4f 1343 	mov.w	r3, r3, lsl #5
   148b0:	bfac      	ite	ge
   148b2:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148b6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148ba:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148bc:	bfb4      	ite	lt
   148be:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   148c0:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   148c4:	4770      	bx	lr
   148c6:	bf00      	nop
   148c8:	e000ed14 	.word	0xe000ed14

000148cc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   148cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   148ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   148d0:	4b04      	ldr	r3, [pc, #16]	; (148e4 <_arch_isr_direct_pm+0x18>)
   148d2:	699a      	ldr	r2, [r3, #24]
   148d4:	b11a      	cbz	r2, 148de <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   148d6:	2200      	movs	r2, #0
   148d8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   148da:	f015 fef9 	bl	2a6d0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   148de:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   148e0:	bd08      	pop	{r3, pc}
   148e2:	bf00      	nop
   148e4:	2000318c 	.word	0x2000318c

000148e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   148e8:	bf30      	wfi
    b z_SysNmiOnReset
   148ea:	f7ff bffd 	b.w	148e8 <z_SysNmiOnReset>
   148ee:	bf00      	nop

000148f0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   148f0:	4a0b      	ldr	r2, [pc, #44]	; (14920 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   148f2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   148f4:	4b0b      	ldr	r3, [pc, #44]	; (14924 <z_arm_prep_c+0x34>)
   148f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   148fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   148fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14900:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14904:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14908:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1490c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14910:	f00c fc50 	bl	211b4 <z_bss_zero>
	z_data_copy();
   14914:	f00d fcce 	bl	222b4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14918:	f000 fb80 	bl	1501c <z_arm_interrupt_init>
	z_cstart();
   1491c:	f00c fc8a 	bl	21234 <z_cstart>
   14920:	00000000 	.word	0x00000000
   14924:	e000ed00 	.word	0xe000ed00

00014928 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14928:	4a09      	ldr	r2, [pc, #36]	; (14950 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1492a:	490a      	ldr	r1, [pc, #40]	; (14954 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1492c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1492e:	6809      	ldr	r1, [r1, #0]
   14930:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14932:	4909      	ldr	r1, [pc, #36]	; (14958 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14934:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14936:	684b      	ldr	r3, [r1, #4]
   14938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1493c:	604b      	str	r3, [r1, #4]
   1493e:	2300      	movs	r3, #0
   14940:	f383 8811 	msr	BASEPRI, r3
   14944:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14948:	6893      	ldr	r3, [r2, #8]
}
   1494a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1494c:	4770      	bx	lr
   1494e:	bf00      	nop
   14950:	2000318c 	.word	0x2000318c
   14954:	0002c160 	.word	0x0002c160
   14958:	e000ed00 	.word	0xe000ed00

0001495c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1495c:	490f      	ldr	r1, [pc, #60]	; (1499c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1495e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14960:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14964:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14966:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1496a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1496e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14970:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14974:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14978:	4f09      	ldr	r7, [pc, #36]	; (149a0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1497a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1497e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14980:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14982:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14984:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14986:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14988:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1498a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1498e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14992:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14996:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1499a:	4770      	bx	lr
    ldr r1, =_kernel
   1499c:	2000318c 	.word	0x2000318c
    ldr v4, =_SCS_ICSR
   149a0:	e000ed04 	.word	0xe000ed04

000149a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   149a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   149a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   149aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   149ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   149b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   149b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   149b8:	2902      	cmp	r1, #2
    beq _oops
   149ba:	d0ff      	beq.n	149bc <_oops>

000149bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   149bc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   149be:	f012 fe39 	bl	27634 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   149c2:	bd01      	pop	{r0, pc}

000149c4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   149c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   149c8:	9b00      	ldr	r3, [sp, #0]
   149ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   149ce:	490a      	ldr	r1, [pc, #40]	; (149f8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   149d0:	9b01      	ldr	r3, [sp, #4]
   149d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   149d6:	9b02      	ldr	r3, [sp, #8]
   149d8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   149dc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   149e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   149e4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   149e8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   149ec:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   149ee:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   149f0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   149f2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   149f4:	4770      	bx	lr
   149f6:	bf00      	nop
   149f8:	00026779 	.word	0x00026779

000149fc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   149fc:	4b07      	ldr	r3, [pc, #28]	; (14a1c <arch_switch_to_main_thread+0x20>)
   149fe:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14a00:	4610      	mov	r0, r2
   14a02:	f381 8809 	msr	PSP, r1
   14a06:	2100      	movs	r1, #0
   14a08:	b663      	cpsie	if
   14a0a:	f381 8811 	msr	BASEPRI, r1
   14a0e:	f3bf 8f6f 	isb	sy
   14a12:	2200      	movs	r2, #0
   14a14:	2300      	movs	r3, #0
   14a16:	f011 feaf 	bl	26778 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14a1a:	bf00      	nop
   14a1c:	2000318c 	.word	0x2000318c

00014a20 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14a20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14a22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14a24:	4a0b      	ldr	r2, [pc, #44]	; (14a54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14a26:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14a28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14a2a:	bf1e      	ittt	ne
	movne	r1, #0
   14a2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14a2e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14a30:	f015 fe4e 	blne	2a6d0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14a34:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14a36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14a3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14a3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14a42:	4905      	ldr	r1, [pc, #20]	; (14a58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14a44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14a46:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14a48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14a4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14a4e:	4903      	ldr	r1, [pc, #12]	; (14a5c <_isr_wrapper+0x3c>)
	bx r1
   14a50:	4708      	bx	r1
   14a52:	0000      	.short	0x0000
	ldr r2, =_kernel
   14a54:	2000318c 	.word	0x2000318c
	ldr r1, =_sw_isr_table
   14a58:	0002b28c 	.word	0x0002b28c
	ldr r1, =z_arm_int_exit
   14a5c:	00014a61 	.word	0x00014a61

00014a60 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14a60:	4b04      	ldr	r3, [pc, #16]	; (14a74 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14a62:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14a64:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14a66:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14a68:	d003      	beq.n	14a72 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14a6a:	4903      	ldr	r1, [pc, #12]	; (14a78 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14a70:	600a      	str	r2, [r1, #0]

00014a72 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14a72:	4770      	bx	lr
	ldr r3, =_kernel
   14a74:	2000318c 	.word	0x2000318c
	ldr r1, =_SCS_ICSR
   14a78:	e000ed04 	.word	0xe000ed04

00014a7c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a80:	b086      	sub	sp, #24
   14a82:	4606      	mov	r6, r0
   14a84:	af00      	add	r7, sp, #0
   14a86:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   14a88:	4b41      	ldr	r3, [pc, #260]	; (14b90 <mem_manage_fault.constprop.0+0x114>)
   14a8a:	4842      	ldr	r0, [pc, #264]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14a8c:	617b      	str	r3, [r7, #20]
   14a8e:	2402      	movs	r4, #2
   14a90:	f107 0210 	add.w	r2, r7, #16
   14a94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14a98:	613c      	str	r4, [r7, #16]
   14a9a:	f012 fdda 	bl	27652 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14a9e:	4b3e      	ldr	r3, [pc, #248]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14aa2:	06db      	lsls	r3, r3, #27
   14aa4:	d509      	bpl.n	14aba <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14aa6:	4b3d      	ldr	r3, [pc, #244]	; (14b9c <mem_manage_fault.constprop.0+0x120>)
   14aa8:	483a      	ldr	r0, [pc, #232]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14aaa:	f107 0210 	add.w	r2, r7, #16
   14aae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ab2:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14ab6:	f012 fdcc 	bl	27652 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14aba:	4b37      	ldr	r3, [pc, #220]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14abe:	0718      	lsls	r0, r3, #28
   14ac0:	d50a      	bpl.n	14ad8 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14ac2:	4b37      	ldr	r3, [pc, #220]	; (14ba0 <mem_manage_fault.constprop.0+0x124>)
   14ac4:	617b      	str	r3, [r7, #20]
   14ac6:	4833      	ldr	r0, [pc, #204]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14ac8:	2302      	movs	r3, #2
   14aca:	f107 0210 	add.w	r2, r7, #16
   14ace:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ad2:	613b      	str	r3, [r7, #16]
   14ad4:	f012 fdbd 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14ad8:	4c2f      	ldr	r4, [pc, #188]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14adc:	0799      	lsls	r1, r3, #30
   14ade:	d522      	bpl.n	14b26 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   14ae0:	46e8      	mov	r8, sp
   14ae2:	4b30      	ldr	r3, [pc, #192]	; (14ba4 <mem_manage_fault.constprop.0+0x128>)
   14ae4:	617b      	str	r3, [r7, #20]
   14ae6:	f107 0210 	add.w	r2, r7, #16
   14aea:	2302      	movs	r3, #2
   14aec:	4829      	ldr	r0, [pc, #164]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14aee:	613b      	str	r3, [r7, #16]
   14af0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14af4:	f012 fdad 	bl	27652 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   14af8:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14afc:	0612      	lsls	r2, r2, #24
   14afe:	d512      	bpl.n	14b26 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14b00:	b088      	sub	sp, #32
   14b02:	466a      	mov	r2, sp
   14b04:	4928      	ldr	r1, [pc, #160]	; (14ba8 <mem_manage_fault.constprop.0+0x12c>)
   14b06:	4823      	ldr	r0, [pc, #140]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14b08:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14b0c:	2303      	movs	r3, #3
   14b0e:	f842 3f10 	str.w	r3, [r2, #16]!
   14b12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b16:	f012 fd9c 	bl	27652 <z_log_msg_static_create.constprop.0>
   14b1a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14b1c:	b11e      	cbz	r6, 14b26 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14b24:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14b26:	4b1c      	ldr	r3, [pc, #112]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b2a:	07dc      	lsls	r4, r3, #31
   14b2c:	d50a      	bpl.n	14b44 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   14b2e:	4b1f      	ldr	r3, [pc, #124]	; (14bac <mem_manage_fault.constprop.0+0x130>)
   14b30:	617b      	str	r3, [r7, #20]
   14b32:	4818      	ldr	r0, [pc, #96]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14b34:	2302      	movs	r3, #2
   14b36:	f107 0210 	add.w	r2, r7, #16
   14b3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b3e:	613b      	str	r3, [r7, #16]
   14b40:	f012 fd87 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14b44:	4b14      	ldr	r3, [pc, #80]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b48:	0698      	lsls	r0, r3, #26
   14b4a:	d50a      	bpl.n	14b62 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   14b4c:	4b18      	ldr	r3, [pc, #96]	; (14bb0 <mem_manage_fault.constprop.0+0x134>)
   14b4e:	617b      	str	r3, [r7, #20]
   14b50:	4810      	ldr	r0, [pc, #64]	; (14b94 <mem_manage_fault.constprop.0+0x118>)
   14b52:	2302      	movs	r3, #2
   14b54:	f107 0210 	add.w	r2, r7, #16
   14b58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b5c:	613b      	str	r3, [r7, #16]
   14b5e:	f012 fd78 	bl	27652 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14b62:	4b0d      	ldr	r3, [pc, #52]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14b66:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14b68:	bf58      	it	pl
   14b6a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14b6e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14b70:	bf42      	ittt	mi
   14b72:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14b74:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   14b78:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14b7a:	4a07      	ldr	r2, [pc, #28]	; (14b98 <mem_manage_fault.constprop.0+0x11c>)
   14b7c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14b7e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14b80:	f043 03ff 	orr.w	r3, r3, #255	; 0xff

	return reason;
}
   14b84:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14b86:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14b88:	7028      	strb	r0, [r5, #0]
}
   14b8a:	46bd      	mov	sp, r7
   14b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b90:	0002c7f9 	.word	0x0002c7f9
   14b94:	0002b59c 	.word	0x0002b59c
   14b98:	e000ed00 	.word	0xe000ed00
   14b9c:	0002c80f 	.word	0x0002c80f
   14ba0:	0002c842 	.word	0x0002c842
   14ba4:	0002c855 	.word	0x0002c855
   14ba8:	0002c86d 	.word	0x0002c86d
   14bac:	0002c883 	.word	0x0002c883
   14bb0:	0002c8a2 	.word	0x0002c8a2

00014bb4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bb8:	b086      	sub	sp, #24
   14bba:	4606      	mov	r6, r0
   14bbc:	af00      	add	r7, sp, #0
   14bbe:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14bc0:	4b3e      	ldr	r3, [pc, #248]	; (14cbc <bus_fault.constprop.0+0x108>)
   14bc2:	483f      	ldr	r0, [pc, #252]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14bc4:	617b      	str	r3, [r7, #20]
   14bc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bca:	2402      	movs	r4, #2
   14bcc:	f107 0210 	add.w	r2, r7, #16
   14bd0:	613c      	str	r4, [r7, #16]
   14bd2:	f012 fd3e 	bl	27652 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14bd6:	4b3b      	ldr	r3, [pc, #236]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bda:	04d9      	lsls	r1, r3, #19
   14bdc:	d509      	bpl.n	14bf2 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   14bde:	4b3a      	ldr	r3, [pc, #232]	; (14cc8 <bus_fault.constprop.0+0x114>)
   14be0:	4837      	ldr	r0, [pc, #220]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14be2:	f107 0210 	add.w	r2, r7, #16
   14be6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bea:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14bee:	f012 fd30 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14bf2:	4b34      	ldr	r3, [pc, #208]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bf6:	051a      	lsls	r2, r3, #20
   14bf8:	d50a      	bpl.n	14c10 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14bfa:	4b34      	ldr	r3, [pc, #208]	; (14ccc <bus_fault.constprop.0+0x118>)
   14bfc:	617b      	str	r3, [r7, #20]
   14bfe:	4830      	ldr	r0, [pc, #192]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14c00:	2302      	movs	r3, #2
   14c02:	f107 0210 	add.w	r2, r7, #16
   14c06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c0a:	613b      	str	r3, [r7, #16]
   14c0c:	f012 fd21 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14c10:	4c2c      	ldr	r4, [pc, #176]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c14:	059b      	lsls	r3, r3, #22
   14c16:	d522      	bpl.n	14c5e <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   14c18:	46e8      	mov	r8, sp
   14c1a:	4b2d      	ldr	r3, [pc, #180]	; (14cd0 <bus_fault.constprop.0+0x11c>)
   14c1c:	4828      	ldr	r0, [pc, #160]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14c1e:	617b      	str	r3, [r7, #20]
   14c20:	f107 0210 	add.w	r2, r7, #16
   14c24:	2302      	movs	r3, #2
   14c26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c2a:	613b      	str	r3, [r7, #16]
   14c2c:	f012 fd11 	bl	27652 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14c34:	0410      	lsls	r0, r2, #16
   14c36:	d512      	bpl.n	14c5e <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14c38:	b088      	sub	sp, #32
   14c3a:	466a      	mov	r2, sp
   14c3c:	4925      	ldr	r1, [pc, #148]	; (14cd4 <bus_fault.constprop.0+0x120>)
   14c3e:	4820      	ldr	r0, [pc, #128]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14c40:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14c44:	2303      	movs	r3, #3
   14c46:	f842 3f10 	str.w	r3, [r2, #16]!
   14c4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c4e:	f012 fd00 	bl	27652 <z_log_msg_static_create.constprop.0>
   14c52:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14c54:	b11e      	cbz	r6, 14c5e <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14c5c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14c5e:	4b19      	ldr	r3, [pc, #100]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14c62:	0559      	lsls	r1, r3, #21
   14c64:	d50a      	bpl.n	14c7c <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   14c66:	4b1c      	ldr	r3, [pc, #112]	; (14cd8 <bus_fault.constprop.0+0x124>)
   14c68:	617b      	str	r3, [r7, #20]
   14c6a:	4815      	ldr	r0, [pc, #84]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14c6c:	2302      	movs	r3, #2
   14c6e:	f107 0210 	add.w	r2, r7, #16
   14c72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c76:	613b      	str	r3, [r7, #16]
   14c78:	f012 fceb 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14c7c:	4b11      	ldr	r3, [pc, #68]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14c80:	05d2      	lsls	r2, r2, #23
   14c82:	d515      	bpl.n	14cb0 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   14c84:	4b15      	ldr	r3, [pc, #84]	; (14cdc <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14c86:	617b      	str	r3, [r7, #20]
   14c88:	480d      	ldr	r0, [pc, #52]	; (14cc0 <bus_fault.constprop.0+0x10c>)
   14c8a:	2302      	movs	r3, #2
   14c8c:	f107 0210 	add.w	r2, r7, #16
   14c90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c94:	613b      	str	r3, [r7, #16]
   14c96:	f012 fcdc 	bl	27652 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14c9a:	4a0a      	ldr	r2, [pc, #40]	; (14cc4 <bus_fault.constprop.0+0x110>)
   14c9c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14c9e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14ca0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   14ca4:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14ca6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14ca8:	7028      	strb	r0, [r5, #0]
}
   14caa:	46bd      	mov	sp, r7
   14cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14cb2:	049b      	lsls	r3, r3, #18
   14cb4:	d5f1      	bpl.n	14c9a <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14cb6:	4b0a      	ldr	r3, [pc, #40]	; (14ce0 <bus_fault.constprop.0+0x12c>)
   14cb8:	e7e5      	b.n	14c86 <bus_fault.constprop.0+0xd2>
   14cba:	bf00      	nop
   14cbc:	0002c8d1 	.word	0x0002c8d1
   14cc0:	0002b59c 	.word	0x0002b59c
   14cc4:	e000ed00 	.word	0xe000ed00
   14cc8:	0002c8e7 	.word	0x0002c8e7
   14ccc:	0002c842 	.word	0x0002c842
   14cd0:	0002c8f8 	.word	0x0002c8f8
   14cd4:	0002c911 	.word	0x0002c911
   14cd8:	0002c926 	.word	0x0002c926
   14cdc:	0002c941 	.word	0x0002c941
   14ce0:	0002c8a2 	.word	0x0002c8a2

00014ce4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14ce4:	b510      	push	{r4, lr}
   14ce6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14ce8:	4b33      	ldr	r3, [pc, #204]	; (14db8 <usage_fault.constprop.0+0xd4>)
   14cea:	4834      	ldr	r0, [pc, #208]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14cec:	9305      	str	r3, [sp, #20]
   14cee:	2402      	movs	r4, #2
   14cf0:	aa04      	add	r2, sp, #16
   14cf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cf6:	9404      	str	r4, [sp, #16]
   14cf8:	f012 fcab 	bl	27652 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14cfc:	4b30      	ldr	r3, [pc, #192]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d00:	019b      	lsls	r3, r3, #6
   14d02:	d508      	bpl.n	14d16 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   14d04:	4b2f      	ldr	r3, [pc, #188]	; (14dc4 <usage_fault.constprop.0+0xe0>)
   14d06:	482d      	ldr	r0, [pc, #180]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d08:	aa04      	add	r2, sp, #16
   14d0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d0e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   14d12:	f012 fc9e 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14d16:	4b2a      	ldr	r3, [pc, #168]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d1a:	01dc      	lsls	r4, r3, #7
   14d1c:	d509      	bpl.n	14d32 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   14d1e:	4b2a      	ldr	r3, [pc, #168]	; (14dc8 <usage_fault.constprop.0+0xe4>)
   14d20:	9305      	str	r3, [sp, #20]
   14d22:	4826      	ldr	r0, [pc, #152]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d24:	2302      	movs	r3, #2
   14d26:	aa04      	add	r2, sp, #16
   14d28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d2c:	9304      	str	r3, [sp, #16]
   14d2e:	f012 fc90 	bl	27652 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14d32:	4b23      	ldr	r3, [pc, #140]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d36:	0318      	lsls	r0, r3, #12
   14d38:	d509      	bpl.n	14d4e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   14d3a:	4b24      	ldr	r3, [pc, #144]	; (14dcc <usage_fault.constprop.0+0xe8>)
   14d3c:	9305      	str	r3, [sp, #20]
   14d3e:	481f      	ldr	r0, [pc, #124]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d40:	2302      	movs	r3, #2
   14d42:	aa04      	add	r2, sp, #16
   14d44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d48:	9304      	str	r3, [sp, #16]
   14d4a:	f012 fc82 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14d4e:	4b1c      	ldr	r3, [pc, #112]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d52:	0359      	lsls	r1, r3, #13
   14d54:	d509      	bpl.n	14d6a <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14d56:	4b1e      	ldr	r3, [pc, #120]	; (14dd0 <usage_fault.constprop.0+0xec>)
   14d58:	9305      	str	r3, [sp, #20]
   14d5a:	4818      	ldr	r0, [pc, #96]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d5c:	2302      	movs	r3, #2
   14d5e:	aa04      	add	r2, sp, #16
   14d60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d64:	9304      	str	r3, [sp, #16]
   14d66:	f012 fc74 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14d6a:	4b15      	ldr	r3, [pc, #84]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d6e:	039a      	lsls	r2, r3, #14
   14d70:	d509      	bpl.n	14d86 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14d72:	4b18      	ldr	r3, [pc, #96]	; (14dd4 <usage_fault.constprop.0+0xf0>)
   14d74:	9305      	str	r3, [sp, #20]
   14d76:	4811      	ldr	r0, [pc, #68]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d78:	2302      	movs	r3, #2
   14d7a:	aa04      	add	r2, sp, #16
   14d7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d80:	9304      	str	r3, [sp, #16]
   14d82:	f012 fc66 	bl	27652 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14d86:	4b0e      	ldr	r3, [pc, #56]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d8a:	03db      	lsls	r3, r3, #15
   14d8c:	d509      	bpl.n	14da2 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14d8e:	4b12      	ldr	r3, [pc, #72]	; (14dd8 <usage_fault.constprop.0+0xf4>)
   14d90:	9305      	str	r3, [sp, #20]
   14d92:	480a      	ldr	r0, [pc, #40]	; (14dbc <usage_fault.constprop.0+0xd8>)
   14d94:	2302      	movs	r3, #2
   14d96:	aa04      	add	r2, sp, #16
   14d98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d9c:	9304      	str	r3, [sp, #16]
   14d9e:	f012 fc58 	bl	27652 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14da2:	4a07      	ldr	r2, [pc, #28]	; (14dc0 <usage_fault.constprop.0+0xdc>)
   14da4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14da6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14daa:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   14dae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14db0:	6293      	str	r3, [r2, #40]	; 0x28
}
   14db2:	b006      	add	sp, #24
   14db4:	bd10      	pop	{r4, pc}
   14db6:	bf00      	nop
   14db8:	0002c959 	.word	0x0002c959
   14dbc:	0002b59c 	.word	0x0002b59c
   14dc0:	e000ed00 	.word	0xe000ed00
   14dc4:	0002c971 	.word	0x0002c971
   14dc8:	0002c984 	.word	0x0002c984
   14dcc:	0002c99e 	.word	0x0002c99e
   14dd0:	0002c9bc 	.word	0x0002c9bc
   14dd4:	0002c9e1 	.word	0x0002c9e1
   14dd8:	0002c9fb 	.word	0x0002c9fb

00014ddc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14de0:	4b78      	ldr	r3, [pc, #480]	; (14fc4 <z_arm_fault+0x1e8>)
{
   14de2:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14de4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14de8:	af00      	add	r7, sp, #0
   14dea:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14dec:	f3c8 0408 	ubfx	r4, r8, #0, #9
   14df0:	2500      	movs	r5, #0
   14df2:	f385 8811 	msr	BASEPRI, r5
   14df6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14dfa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14dfe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14e02:	d10e      	bne.n	14e22 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14e04:	f002 030c 	and.w	r3, r2, #12
   14e08:	2b08      	cmp	r3, #8
   14e0a:	d10c      	bne.n	14e26 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14e0c:	4b6e      	ldr	r3, [pc, #440]	; (14fc8 <z_arm_fault+0x1ec>)
   14e0e:	61fb      	str	r3, [r7, #28]
   14e10:	486e      	ldr	r0, [pc, #440]	; (14fcc <z_arm_fault+0x1f0>)
   14e12:	2302      	movs	r3, #2
   14e14:	f107 0218 	add.w	r2, r7, #24
   14e18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e1c:	61bb      	str	r3, [r7, #24]
   14e1e:	f012 fc18 	bl	27652 <z_log_msg_static_create.constprop.0>
		return NULL;
   14e22:	462e      	mov	r6, r5
   14e24:	e003      	b.n	14e2e <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14e26:	0712      	lsls	r2, r2, #28
   14e28:	d401      	bmi.n	14e2e <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   14e2a:	4606      	mov	r6, r0
			*nested_exc = true;
   14e2c:	2501      	movs	r5, #1
	*recoverable = false;
   14e2e:	2300      	movs	r3, #0
   14e30:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   14e32:	1ee3      	subs	r3, r4, #3
   14e34:	2b09      	cmp	r3, #9
   14e36:	f200 80a4 	bhi.w	14f82 <z_arm_fault+0x1a6>
   14e3a:	e8df f003 	tbb	[pc, r3]
   14e3e:	9705      	.short	0x9705
   14e40:	a2a2949a 	.word	0xa2a2949a
   14e44:	9da2a2a2 	.word	0x9da2a2a2
	PR_FAULT_INFO("***** HARD FAULT *****");
   14e48:	46e9      	mov	r9, sp
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e4a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 14fc4 <z_arm_fault+0x1e8>
	PR_FAULT_INFO("***** HARD FAULT *****");
   14e4e:	4b60      	ldr	r3, [pc, #384]	; (14fd0 <z_arm_fault+0x1f4>)
   14e50:	485e      	ldr	r0, [pc, #376]	; (14fcc <z_arm_fault+0x1f0>)
   14e52:	61fb      	str	r3, [r7, #28]
   14e54:	f04f 0a02 	mov.w	sl, #2
   14e58:	f107 0218 	add.w	r2, r7, #24
   14e5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e60:	f8c7 a018 	str.w	sl, [r7, #24]
   14e64:	f012 fbf5 	bl	27652 <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e68:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   14e6c:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e70:	ea14 040a 	ands.w	r4, r4, sl
	*recoverable = false;
   14e74:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e78:	d00b      	beq.n	14e92 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
   14e7a:	4b56      	ldr	r3, [pc, #344]	; (14fd4 <z_arm_fault+0x1f8>)
   14e7c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   14e80:	4852      	ldr	r0, [pc, #328]	; (14fcc <z_arm_fault+0x1f0>)
   14e82:	f107 0218 	add.w	r2, r7, #24
   14e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e8a:	f012 fbe2 	bl	27652 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14e8e:	2400      	movs	r4, #0
}
   14e90:	e00d      	b.n	14eae <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14e92:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   14e96:	2b00      	cmp	r3, #0
   14e98:	da25      	bge.n	14ee6 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
   14e9a:	4b4f      	ldr	r3, [pc, #316]	; (14fd8 <z_arm_fault+0x1fc>)
   14e9c:	484b      	ldr	r0, [pc, #300]	; (14fcc <z_arm_fault+0x1f0>)
   14e9e:	f107 0218 	add.w	r2, r7, #24
   14ea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ea6:	e9c7 a306 	strd	sl, r3, [r7, #24]
   14eaa:	f012 fbd2 	bl	27652 <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14eae:	79fb      	ldrb	r3, [r7, #7]
   14eb0:	b9ab      	cbnz	r3, 14ede <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14eb2:	2220      	movs	r2, #32
   14eb4:	4631      	mov	r1, r6
   14eb6:	f107 0008 	add.w	r0, r7, #8
   14eba:	f012 fcb8 	bl	2782e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ec0:	2d00      	cmp	r5, #0
   14ec2:	d079      	beq.n	14fb8 <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14ec8:	b922      	cbnz	r2, 14ed4 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14eca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14ece:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14ed2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14ed4:	f107 0108 	add.w	r1, r7, #8
   14ed8:	4620      	mov	r0, r4
   14eda:	f7ff fc45 	bl	14768 <z_arm_fatal_error>
}
   14ede:	372c      	adds	r7, #44	; 0x2c
   14ee0:	46bd      	mov	sp, r7
   14ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14ee6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   14eea:	005b      	lsls	r3, r3, #1
   14eec:	d5df      	bpl.n	14eae <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
   14eee:	4b3b      	ldr	r3, [pc, #236]	; (14fdc <z_arm_fault+0x200>)
   14ef0:	4836      	ldr	r0, [pc, #216]	; (14fcc <z_arm_fault+0x1f0>)
   14ef2:	f107 0218 	add.w	r2, r7, #24
   14ef6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14efa:	e9c7 a306 	strd	sl, r3, [r7, #24]
   14efe:	f012 fba8 	bl	27652 <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   14f02:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14f04:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14f08:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14f0c:	429a      	cmp	r2, r3
   14f0e:	d009      	beq.n	14f24 <z_arm_fault+0x148>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   14f10:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   14f14:	b2db      	uxtb	r3, r3
   14f16:	b1b3      	cbz	r3, 14f46 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   14f18:	1df9      	adds	r1, r7, #7
   14f1a:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14f1c:	f7ff fdae 	bl	14a7c <mem_manage_fault.constprop.0>
   14f20:	4604      	mov	r4, r0
		break;
   14f22:	e7c4      	b.n	14eae <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14f24:	b088      	sub	sp, #32
   14f26:	6833      	ldr	r3, [r6, #0]
   14f28:	466a      	mov	r2, sp
   14f2a:	492d      	ldr	r1, [pc, #180]	; (14fe0 <z_arm_fault+0x204>)
   14f2c:	4827      	ldr	r0, [pc, #156]	; (14fcc <z_arm_fault+0x1f0>)
   14f2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14f32:	2303      	movs	r3, #3
   14f34:	f842 3f10 	str.w	r3, [r2, #16]!
   14f38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f3c:	f012 fb89 	bl	27652 <z_log_msg_static_create.constprop.0>
   14f40:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   14f42:	6834      	ldr	r4, [r6, #0]
   14f44:	e7b3      	b.n	14eae <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   14f46:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   14f4a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   14f4e:	d004      	beq.n	14f5a <z_arm_fault+0x17e>
			reason = bus_fault(esf, 1, recoverable);
   14f50:	1df9      	adds	r1, r7, #7
   14f52:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14f54:	f7ff fe2e 	bl	14bb4 <bus_fault.constprop.0>
   14f58:	e7e2      	b.n	14f20 <z_arm_fault+0x144>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   14f5a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   14f5e:	0c1b      	lsrs	r3, r3, #16
   14f60:	041b      	lsls	r3, r3, #16
   14f62:	2b00      	cmp	r3, #0
   14f64:	d0a3      	beq.n	14eae <z_arm_fault+0xd2>
		reason = usage_fault(esf);
   14f66:	f7ff febd 	bl	14ce4 <usage_fault.constprop.0>
   14f6a:	e7d9      	b.n	14f20 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
   14f6c:	1df9      	adds	r1, r7, #7
   14f6e:	2000      	movs	r0, #0
   14f70:	e7d4      	b.n	14f1c <z_arm_fault+0x140>
		reason = bus_fault(esf, 0, recoverable);
   14f72:	1df9      	adds	r1, r7, #7
   14f74:	2000      	movs	r0, #0
   14f76:	e7ed      	b.n	14f54 <z_arm_fault+0x178>
	PR_FAULT_INFO(
   14f78:	4b1a      	ldr	r3, [pc, #104]	; (14fe4 <z_arm_fault+0x208>)
   14f7a:	61fb      	str	r3, [r7, #28]
   14f7c:	2302      	movs	r3, #2
   14f7e:	61bb      	str	r3, [r7, #24]
   14f80:	e77e      	b.n	14e80 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
   14f82:	4a19      	ldr	r2, [pc, #100]	; (14fe8 <z_arm_fault+0x20c>)
   14f84:	4b19      	ldr	r3, [pc, #100]	; (14fec <z_arm_fault+0x210>)
   14f86:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14f8a:	46e8      	mov	r8, sp
   14f8c:	b08a      	sub	sp, #40	; 0x28
   14f8e:	bf18      	it	ne
   14f90:	4613      	movne	r3, r2
   14f92:	466a      	mov	r2, sp
   14f94:	4916      	ldr	r1, [pc, #88]	; (14ff0 <z_arm_fault+0x214>)
   14f96:	480d      	ldr	r0, [pc, #52]	; (14fcc <z_arm_fault+0x1f0>)
   14f98:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14f9c:	2302      	movs	r3, #2
   14f9e:	f882 3020 	strb.w	r3, [r2, #32]
   14fa2:	3c10      	subs	r4, #16
   14fa4:	4b13      	ldr	r3, [pc, #76]	; (14ff4 <z_arm_fault+0x218>)
   14fa6:	61d4      	str	r4, [r2, #28]
   14fa8:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   14fac:	f842 3f10 	str.w	r3, [r2, #16]!
   14fb0:	f012 fb4f 	bl	27652 <z_log_msg_static_create.constprop.0>
   14fb4:	46c5      	mov	sp, r8
   14fb6:	e76a      	b.n	14e8e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14fb8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14fbc:	f023 0301 	bic.w	r3, r3, #1
   14fc0:	e787      	b.n	14ed2 <z_arm_fault+0xf6>
   14fc2:	bf00      	nop
   14fc4:	e000ed00 	.word	0xe000ed00
   14fc8:	0002ca54 	.word	0x0002ca54
   14fcc:	0002b59c 	.word	0x0002b59c
   14fd0:	0002ca7f 	.word	0x0002ca7f
   14fd4:	0002ca96 	.word	0x0002ca96
   14fd8:	0002cab7 	.word	0x0002cab7
   14fdc:	0002cac5 	.word	0x0002cac5
   14fe0:	0002cae4 	.word	0x0002cae4
   14fe4:	0002cb00 	.word	0x0002cb00
   14fe8:	0002ca3b 	.word	0x0002ca3b
   14fec:	0002ca26 	.word	0x0002ca26
   14ff0:	0002cb24 	.word	0x0002cb24
   14ff4:	01000004 	.word	0x01000004

00014ff8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14ff8:	4a02      	ldr	r2, [pc, #8]	; (15004 <z_arm_fault_init+0xc>)
   14ffa:	6953      	ldr	r3, [r2, #20]
   14ffc:	f043 0310 	orr.w	r3, r3, #16
   15000:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15002:	4770      	bx	lr
   15004:	e000ed00 	.word	0xe000ed00

00015008 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15008:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1500c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15010:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15012:	4672      	mov	r2, lr
	bl z_arm_fault
   15014:	f7ff fee2 	bl	14ddc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15018:	bd01      	pop	{r0, pc}
   1501a:	bf00      	nop

0001501c <z_arm_interrupt_init>:
   1501c:	4804      	ldr	r0, [pc, #16]	; (15030 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1501e:	2300      	movs	r3, #0
   15020:	2140      	movs	r1, #64	; 0x40
   15022:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15024:	3301      	adds	r3, #1
   15026:	2b30      	cmp	r3, #48	; 0x30
   15028:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1502c:	d1f9      	bne.n	15022 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1502e:	4770      	bx	lr
   15030:	e000e100 	.word	0xe000e100

00015034 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15034:	2000      	movs	r0, #0
    msr CONTROL, r0
   15036:	f380 8814 	msr	CONTROL, r0
    isb
   1503a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1503e:	f7fe fa25 	bl	1348c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15042:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15044:	490d      	ldr	r1, [pc, #52]	; (1507c <__start+0x48>)
    str r0, [r1]
   15046:	6008      	str	r0, [r1, #0]
    dsb
   15048:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1504c:	480c      	ldr	r0, [pc, #48]	; (15080 <__start+0x4c>)
    msr msp, r0
   1504e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15052:	f000 f82b 	bl	150ac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15056:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15058:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1505c:	4809      	ldr	r0, [pc, #36]	; (15084 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1505e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   15062:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15064:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15068:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1506c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1506e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15070:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15074:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15078:	f7ff fc3a 	bl	148f0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1507c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15080:	20006250 	.word	0x20006250
    ldr r0, =z_interrupt_stacks
   15084:	20006390 	.word	0x20006390

00015088 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15088:	4907      	ldr	r1, [pc, #28]	; (150a8 <z_arm_clear_arm_mpu_config+0x20>)
   1508a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1508e:	2300      	movs	r3, #0
	int num_regions =
   15090:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15094:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15096:	4293      	cmp	r3, r2
   15098:	d100      	bne.n	1509c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1509a:	4770      	bx	lr
  MPU->RNR = rnr;
   1509c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   150a0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   150a4:	3301      	adds	r3, #1
   150a6:	e7f6      	b.n	15096 <z_arm_clear_arm_mpu_config+0xe>
   150a8:	e000ed00 	.word	0xe000ed00

000150ac <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   150ac:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   150ae:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   150b0:	2300      	movs	r3, #0
   150b2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   150b6:	f7ff ffe7 	bl	15088 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   150ba:	4b14      	ldr	r3, [pc, #80]	; (1510c <z_arm_init_arch_hw_at_boot+0x60>)
   150bc:	f04f 32ff 	mov.w	r2, #4294967295
   150c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   150c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   150c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   150cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   150d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   150d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   150d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   150dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   150e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   150e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   150e8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   150ec:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   150f0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   150f4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   150f8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   150fc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15100:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15102:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15106:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1510a:	bd08      	pop	{r3, pc}
   1510c:	e000e100 	.word	0xe000e100

00015110 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15110:	4b08      	ldr	r3, [pc, #32]	; (15134 <z_impl_k_thread_abort+0x24>)
   15112:	689b      	ldr	r3, [r3, #8]
   15114:	4283      	cmp	r3, r0
   15116:	d10b      	bne.n	15130 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15118:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1511c:	b143      	cbz	r3, 15130 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1511e:	4b06      	ldr	r3, [pc, #24]	; (15138 <z_impl_k_thread_abort+0x28>)
   15120:	685a      	ldr	r2, [r3, #4]
   15122:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15126:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1512a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1512e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15130:	f00d b84e 	b.w	221d0 <z_thread_abort>
   15134:	2000318c 	.word	0x2000318c
   15138:	e000ed00 	.word	0xe000ed00

0001513c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1513c:	4b02      	ldr	r3, [pc, #8]	; (15148 <z_arm_configure_static_mpu_regions+0xc>)
   1513e:	4a03      	ldr	r2, [pc, #12]	; (1514c <z_arm_configure_static_mpu_regions+0x10>)
   15140:	4803      	ldr	r0, [pc, #12]	; (15150 <z_arm_configure_static_mpu_regions+0x14>)
   15142:	2101      	movs	r1, #1
   15144:	f000 b880 	b.w	15248 <arm_core_mpu_configure_static_mpu_regions>
   15148:	20040000 	.word	0x20040000
   1514c:	20000000 	.word	0x20000000
   15150:	0002bbb8 	.word	0x0002bbb8

00015154 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15156:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 1520c <mpu_configure_regions+0xb8>
   1515a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1515c:	2500      	movs	r5, #0
   1515e:	428d      	cmp	r5, r1
   15160:	da1a      	bge.n	15198 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
   15162:	6844      	ldr	r4, [r0, #4]
   15164:	2c00      	cmp	r4, #0
   15166:	d04d      	beq.n	15204 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15168:	b1fb      	cbz	r3, 151aa <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1516a:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1516e:	ea14 0f0e 	tst.w	r4, lr
   15172:	d014      	beq.n	1519e <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15174:	466c      	mov	r4, sp
   15176:	b088      	sub	sp, #32
   15178:	466a      	mov	r2, sp
   1517a:	4b25      	ldr	r3, [pc, #148]	; (15210 <mpu_configure_regions+0xbc>)
   1517c:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15180:	2303      	movs	r3, #3
   15182:	f842 3f10 	str.w	r3, [r2, #16]!
   15186:	4823      	ldr	r0, [pc, #140]	; (15214 <mpu_configure_regions+0xc0>)
   15188:	2300      	movs	r3, #0
   1518a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1518e:	f7fe fbf9 	bl	13984 <z_impl_z_log_msg_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15192:	f06f 0215 	mvn.w	r2, #21
   15196:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15198:	4610      	mov	r0, r2
   1519a:	46bd      	mov	sp, r7
   1519c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   1519e:	2c1f      	cmp	r4, #31
   151a0:	d9e8      	bls.n	15174 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
   151a2:	6806      	ldr	r6, [r0, #0]
		&&
   151a4:	ea1e 0f06 	tst.w	lr, r6
   151a8:	d1e4      	bne.n	15174 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   151aa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   151ac:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   151ae:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   151b2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   151b4:	d914      	bls.n	151e0 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
   151b6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   151ba:	d813      	bhi.n	151e4 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   151bc:	3c01      	subs	r4, #1
   151be:	fab4 f484 	clz	r4, r4
   151c2:	f1c4 041f 	rsb	r4, r4, #31
   151c6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   151c8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   151ca:	ea4e 0404 	orr.w	r4, lr, r4
   151ce:	d90b      	bls.n	151e8 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   151d0:	466c      	mov	r4, sp
   151d2:	b088      	sub	sp, #32
   151d4:	466b      	mov	r3, sp
   151d6:	4910      	ldr	r1, [pc, #64]	; (15218 <mpu_configure_regions+0xc4>)
   151d8:	e9c3 1205 	strd	r1, r2, [r3, #20]
   151dc:	461a      	mov	r2, r3
   151de:	e7cf      	b.n	15180 <mpu_configure_regions+0x2c>
		return REGION_32B;
   151e0:	2408      	movs	r4, #8
   151e2:	e7f1      	b.n	151c8 <mpu_configure_regions+0x74>
		return REGION_4G;
   151e4:	243e      	movs	r4, #62	; 0x3e
   151e6:	e7ef      	b.n	151c8 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   151e8:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   151ec:	4316      	orrs	r6, r2
   151ee:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   151f2:	f044 0401 	orr.w	r4, r4, #1
   151f6:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   151fa:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
   151fe:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15200:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15204:	3501      	adds	r5, #1
   15206:	300c      	adds	r0, #12
   15208:	e7a9      	b.n	1515e <mpu_configure_regions+0xa>
   1520a:	bf00      	nop
   1520c:	e000ed00 	.word	0xe000ed00
   15210:	0002cb3b 	.word	0x0002cb3b
   15214:	0002b58c 	.word	0x0002b58c
   15218:	0002cb5e 	.word	0x0002cb5e

0001521c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1521c:	4b04      	ldr	r3, [pc, #16]	; (15230 <arm_core_mpu_enable+0x14>)
   1521e:	2205      	movs	r2, #5
   15220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15228:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1522c:	4770      	bx	lr
   1522e:	bf00      	nop
   15230:	e000ed00 	.word	0xe000ed00

00015234 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15234:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15238:	4b02      	ldr	r3, [pc, #8]	; (15244 <arm_core_mpu_disable+0x10>)
   1523a:	2200      	movs	r2, #0
   1523c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15240:	4770      	bx	lr
   15242:	bf00      	nop
   15244:	e000ed00 	.word	0xe000ed00

00015248 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15248:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1524a:	4c03      	ldr	r4, [pc, #12]	; (15258 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1524c:	2301      	movs	r3, #1
   1524e:	7822      	ldrb	r2, [r4, #0]
   15250:	f7ff ff80 	bl	15154 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15254:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15256:	bd10      	pop	{r4, pc}
   15258:	20003ccb 	.word	0x20003ccb

0001525c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1525c:	4914      	ldr	r1, [pc, #80]	; (152b0 <z_arm_mpu_init+0x54>)
   1525e:	6808      	ldr	r0, [r1, #0]
   15260:	2808      	cmp	r0, #8
{
   15262:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15264:	d821      	bhi.n	152aa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15266:	f7ff ffe5 	bl	15234 <arm_core_mpu_disable>
   1526a:	4c12      	ldr	r4, [pc, #72]	; (152b4 <z_arm_mpu_init+0x58>)
   1526c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1526e:	2200      	movs	r2, #0
   15270:	4290      	cmp	r0, r2
   15272:	f101 010c 	add.w	r1, r1, #12
   15276:	d105      	bne.n	15284 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15278:	4b0f      	ldr	r3, [pc, #60]	; (152b8 <z_arm_mpu_init+0x5c>)
   1527a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1527c:	f7ff ffce 	bl	1521c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15280:	2000      	movs	r0, #0
}
   15282:	bd10      	pop	{r4, pc}
   15284:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15288:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1528c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15290:	4313      	orrs	r3, r2
   15292:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15296:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1529a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1529e:	f043 0301 	orr.w	r3, r3, #1
   152a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   152a6:	3201      	adds	r2, #1
   152a8:	e7e2      	b.n	15270 <z_arm_mpu_init+0x14>
		return -1;
   152aa:	f04f 30ff 	mov.w	r0, #4294967295
   152ae:	e7e8      	b.n	15282 <z_arm_mpu_init+0x26>
   152b0:	0002bbc4 	.word	0x0002bbc4
   152b4:	e000ed00 	.word	0xe000ed00
   152b8:	20003ccb 	.word	0x20003ccb

000152bc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   152bc:	4b01      	ldr	r3, [pc, #4]	; (152c4 <__stdout_hook_install+0x8>)
   152be:	6018      	str	r0, [r3, #0]
}
   152c0:	4770      	bx	lr
   152c2:	bf00      	nop
   152c4:	20000674 	.word	0x20000674

000152c8 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   152c8:	3902      	subs	r1, #2
   152ca:	2901      	cmp	r1, #1
   152cc:	d802      	bhi.n	152d4 <z_impl_zephyr_fputc+0xc>
   152ce:	4b03      	ldr	r3, [pc, #12]	; (152dc <z_impl_zephyr_fputc+0x14>)
   152d0:	681b      	ldr	r3, [r3, #0]
   152d2:	4718      	bx	r3
}
   152d4:	f04f 30ff 	mov.w	r0, #4294967295
   152d8:	4770      	bx	lr
   152da:	bf00      	nop
   152dc:	20000674 	.word	0x20000674

000152e0 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
   152e0:	b40f      	push	{r0, r1, r2, r3}
   152e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   152e4:	ab06      	add	r3, sp, #24
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   152e6:	2100      	movs	r1, #0
   152e8:	f853 2b04 	ldr.w	r2, [r3], #4
   152ec:	4805      	ldr	r0, [pc, #20]	; (15304 <printf+0x24>)
   152ee:	9100      	str	r1, [sp, #0]
   152f0:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
   152f2:	9303      	str	r3, [sp, #12]
   152f4:	f7fd fcf0 	bl	12cd8 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
   152f8:	b005      	add	sp, #20
   152fa:	f85d eb04 	ldr.w	lr, [sp], #4
   152fe:	b004      	add	sp, #16
   15300:	4770      	bx	lr
   15302:	bf00      	nop
   15304:	0002785d 	.word	0x0002785d

00015308 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15308:	f04f 0340 	mov.w	r3, #64	; 0x40
   1530c:	f3ef 8211 	mrs	r2, BASEPRI
   15310:	f383 8812 	msr	BASEPRI_MAX, r3
   15314:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15318:	4906      	ldr	r1, [pc, #24]	; (15334 <nordicsemi_nrf52_init+0x2c>)
   1531a:	2301      	movs	r3, #1
   1531c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15320:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15324:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15328:	f382 8811 	msr	BASEPRI, r2
   1532c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15330:	2000      	movs	r0, #0
   15332:	4770      	bx	lr
   15334:	4001e000 	.word	0x4001e000

00015338 <sys_arch_reboot>:
    *p_gpregret = val;
   15338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1533c:	b2c0      	uxtb	r0, r0
   1533e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15342:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15346:	4905      	ldr	r1, [pc, #20]	; (1535c <sys_arch_reboot+0x24>)
   15348:	4b05      	ldr	r3, [pc, #20]	; (15360 <sys_arch_reboot+0x28>)
   1534a:	68ca      	ldr	r2, [r1, #12]
   1534c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15350:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15352:	60cb      	str	r3, [r1, #12]
   15354:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15358:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1535a:	e7fd      	b.n	15358 <sys_arch_reboot+0x20>
   1535c:	e000ed00 	.word	0xe000ed00
   15360:	05fa0004 	.word	0x05fa0004

00015364 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15364:	b120      	cbz	r0, 15370 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   15366:	4b03      	ldr	r3, [pc, #12]	; (15374 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15368:	0180      	lsls	r0, r0, #6
   1536a:	f043 0301 	orr.w	r3, r3, #1
   1536e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15370:	4770      	bx	lr
   15372:	bf00      	nop
   15374:	0002b910 	.word	0x0002b910

00015378 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15378:	4b0e      	ldr	r3, [pc, #56]	; (153b4 <bt_hex_real+0x3c>)
   1537a:	2940      	cmp	r1, #64	; 0x40
{
   1537c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1537e:	bf28      	it	cs
   15380:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   15382:	4c0d      	ldr	r4, [pc, #52]	; (153b8 <bt_hex_real+0x40>)
   15384:	1846      	adds	r6, r0, r1
   15386:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15388:	42b0      	cmp	r0, r6
   1538a:	f103 0302 	add.w	r3, r3, #2
   1538e:	d104      	bne.n	1539a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15390:	2300      	movs	r3, #0
   15392:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15396:	4807      	ldr	r0, [pc, #28]	; (153b4 <bt_hex_real+0x3c>)
   15398:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1539a:	7802      	ldrb	r2, [r0, #0]
   1539c:	0912      	lsrs	r2, r2, #4
   1539e:	5ca2      	ldrb	r2, [r4, r2]
   153a0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   153a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   153a8:	f002 020f 	and.w	r2, r2, #15
   153ac:	5ca2      	ldrb	r2, [r4, r2]
   153ae:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   153b2:	e7e9      	b.n	15388 <bt_hex_real+0x10>
   153b4:	20003cea 	.word	0x20003cea
   153b8:	0002cbdc 	.word	0x0002cbdc

000153bc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   153bc:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   153be:	7803      	ldrb	r3, [r0, #0]
   153c0:	b08b      	sub	sp, #44	; 0x2c
   153c2:	4604      	mov	r4, r0
   153c4:	ad07      	add	r5, sp, #28
   153c6:	2b03      	cmp	r3, #3
   153c8:	d821      	bhi.n	1540e <bt_addr_le_str_real+0x52>
   153ca:	e8df f003 	tbb	[pc, r3]
   153ce:	1a02      	.short	0x1a02
   153d0:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   153d2:	4912      	ldr	r1, [pc, #72]	; (1541c <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   153d4:	4628      	mov	r0, r5
   153d6:	f012 f9b8 	bl	2774a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   153da:	7863      	ldrb	r3, [r4, #1]
   153dc:	9304      	str	r3, [sp, #16]
   153de:	78a3      	ldrb	r3, [r4, #2]
   153e0:	9303      	str	r3, [sp, #12]
   153e2:	78e3      	ldrb	r3, [r4, #3]
   153e4:	9302      	str	r3, [sp, #8]
   153e6:	7923      	ldrb	r3, [r4, #4]
   153e8:	9301      	str	r3, [sp, #4]
   153ea:	7963      	ldrb	r3, [r4, #5]
   153ec:	9300      	str	r3, [sp, #0]
   153ee:	4a0c      	ldr	r2, [pc, #48]	; (15420 <bt_addr_le_str_real+0x64>)
   153f0:	79a3      	ldrb	r3, [r4, #6]
   153f2:	9505      	str	r5, [sp, #20]
   153f4:	211e      	movs	r1, #30
   153f6:	480b      	ldr	r0, [pc, #44]	; (15424 <bt_addr_le_str_real+0x68>)
   153f8:	f011 f906 	bl	26608 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   153fc:	4809      	ldr	r0, [pc, #36]	; (15424 <bt_addr_le_str_real+0x68>)
   153fe:	b00b      	add	sp, #44	; 0x2c
   15400:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15402:	4909      	ldr	r1, [pc, #36]	; (15428 <bt_addr_le_str_real+0x6c>)
   15404:	e7e6      	b.n	153d4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   15406:	4909      	ldr	r1, [pc, #36]	; (1542c <bt_addr_le_str_real+0x70>)
   15408:	e7e4      	b.n	153d4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1540a:	4909      	ldr	r1, [pc, #36]	; (15430 <bt_addr_le_str_real+0x74>)
   1540c:	e7e2      	b.n	153d4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1540e:	4a09      	ldr	r2, [pc, #36]	; (15434 <bt_addr_le_str_real+0x78>)
   15410:	210a      	movs	r1, #10
   15412:	4628      	mov	r0, r5
   15414:	f011 f8f8 	bl	26608 <snprintk>
		break;
   15418:	e7df      	b.n	153da <bt_addr_le_str_real+0x1e>
   1541a:	bf00      	nop
   1541c:	0002cb97 	.word	0x0002cb97
   15420:	0002cbb9 	.word	0x0002cbb9
   15424:	20003ccc 	.word	0x20003ccc
   15428:	0002cb9e 	.word	0x0002cb9e
   1542c:	0002cba5 	.word	0x0002cba5
   15430:	0002cbaf 	.word	0x0002cbaf
   15434:	0002e331 	.word	0x0002e331

00015438 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   15438:	b5b0      	push	{r4, r5, r7, lr}
   1543a:	b086      	sub	sp, #24
	int err;
	BT_INFO("Saving ID");
   1543c:	466d      	mov	r5, sp
{
   1543e:	af00      	add	r7, sp, #0
	BT_INFO("Saving ID");
   15440:	4b1d      	ldr	r3, [pc, #116]	; (154b8 <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   15442:	4c1e      	ldr	r4, [pc, #120]	; (154bc <save_id+0x84>)
	BT_INFO("Saving ID");
   15444:	481e      	ldr	r0, [pc, #120]	; (154c0 <save_id+0x88>)
   15446:	617b      	str	r3, [r7, #20]
   15448:	f107 0210 	add.w	r2, r7, #16
   1544c:	2302      	movs	r3, #2
   1544e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   15452:	613b      	str	r3, [r7, #16]
   15454:	f012 fa5d 	bl	27912 <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   15458:	79e2      	ldrb	r2, [r4, #7]
   1545a:	481a      	ldr	r0, [pc, #104]	; (154c4 <save_id+0x8c>)
   1545c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   15460:	4621      	mov	r1, r4
   15462:	f7fe fec1 	bl	141e8 <settings_save_one>
	if (err) {
   15466:	b168      	cbz	r0, 15484 <save_id+0x4c>
		BT_ERR("Failed to save ID (err %d)", err);
   15468:	b088      	sub	sp, #32
   1546a:	466a      	mov	r2, sp
   1546c:	4b16      	ldr	r3, [pc, #88]	; (154c8 <save_id+0x90>)
   1546e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15472:	2303      	movs	r3, #3
   15474:	f842 3f10 	str.w	r3, [r2, #16]!
   15478:	4811      	ldr	r0, [pc, #68]	; (154c0 <save_id+0x88>)
   1547a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1547e:	f012 fa48 	bl	27912 <z_log_msg_static_create.constprop.0>
   15482:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   15484:	79e2      	ldrb	r2, [r4, #7]
   15486:	4911      	ldr	r1, [pc, #68]	; (154cc <save_id+0x94>)
   15488:	4811      	ldr	r0, [pc, #68]	; (154d0 <save_id+0x98>)
   1548a:	0112      	lsls	r2, r2, #4
   1548c:	f7fe feac 	bl	141e8 <settings_save_one>
	if (err) {
   15490:	b170      	cbz	r0, 154b0 <save_id+0x78>
		BT_ERR("Failed to save IRK (err %d)", err);
   15492:	466c      	mov	r4, sp
   15494:	b088      	sub	sp, #32
   15496:	466a      	mov	r2, sp
   15498:	4b0e      	ldr	r3, [pc, #56]	; (154d4 <save_id+0x9c>)
   1549a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1549e:	2303      	movs	r3, #3
   154a0:	f842 3f10 	str.w	r3, [r2, #16]!
   154a4:	4806      	ldr	r0, [pc, #24]	; (154c0 <save_id+0x88>)
   154a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154aa:	f012 fa32 	bl	27912 <z_log_msg_static_create.constprop.0>
   154ae:	46a5      	mov	sp, r4
	}
#endif
}
   154b0:	3718      	adds	r7, #24
   154b2:	46bd      	mov	sp, r7
   154b4:	bdb0      	pop	{r4, r5, r7, pc}
   154b6:	bf00      	nop
   154b8:	0002cbf4 	.word	0x0002cbf4
   154bc:	20000350 	.word	0x20000350
   154c0:	0002b52c 	.word	0x0002b52c
   154c4:	0002cbfe 	.word	0x0002cbfe
   154c8:	0002cc04 	.word	0x0002cc04
   154cc:	200004b0 	.word	0x200004b0
   154d0:	0002cc1f 	.word	0x0002cc1f
   154d4:	0002cc26 	.word	0x0002cc26

000154d8 <set.part.0>:
static int set(const char *name, size_t len_rd, settings_read_cb read_cb,
   154d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   154dc:	b089      	sub	sp, #36	; 0x24
   154de:	4605      	mov	r5, r0
   154e0:	af00      	add	r7, sp, #0
   154e2:	460e      	mov	r6, r1
   154e4:	4690      	mov	r8, r2
	if (!name) {
   154e6:	b968      	cbnz	r0, 15504 <set.part.0+0x2c>
		BT_ERR("Insufficient number of arguments");
   154e8:	4b48      	ldr	r3, [pc, #288]	; (1560c <set.part.0+0x134>)
   154ea:	61fb      	str	r3, [r7, #28]
   154ec:	4848      	ldr	r0, [pc, #288]	; (15610 <set.part.0+0x138>)
   154ee:	2302      	movs	r3, #2
   154f0:	f107 0218 	add.w	r2, r7, #24
   154f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154f8:	61bb      	str	r3, [r7, #24]
   154fa:	f012 fa0a 	bl	27912 <z_log_msg_static_create.constprop.0>
	return -ENOENT;
   154fe:	f06f 0401 	mvn.w	r4, #1
   15502:	e01e      	b.n	15542 <set.part.0+0x6a>
	len = settings_name_next(name, &next);
   15504:	1d39      	adds	r1, r7, #4
   15506:	f011 fe51 	bl	271ac <settings_name_next>
	if (!strncmp(name, "id", len)) {
   1550a:	4942      	ldr	r1, [pc, #264]	; (15614 <set.part.0+0x13c>)
   1550c:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   1550e:	4681      	mov	r9, r0
	if (!strncmp(name, "id", len)) {
   15510:	4628      	mov	r0, r5
   15512:	f012 f952 	bl	277ba <strncmp>
   15516:	4604      	mov	r4, r0
   15518:	2800      	cmp	r0, #0
   1551a:	d135      	bne.n	15588 <set.part.0+0xb0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1551c:	f3bf 8f5b 	dmb	ish
   15520:	4d3d      	ldr	r5, [pc, #244]	; (15618 <set.part.0+0x140>)
   15522:	682b      	ldr	r3, [r5, #0]
   15524:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15528:	071b      	lsls	r3, r3, #28
   1552a:	d50f      	bpl.n	1554c <set.part.0+0x74>
			BT_WARN("Ignoring identities stored in flash");
   1552c:	4b3b      	ldr	r3, [pc, #236]	; (1561c <set.part.0+0x144>)
   1552e:	61fb      	str	r3, [r7, #28]
   15530:	4837      	ldr	r0, [pc, #220]	; (15610 <set.part.0+0x138>)
   15532:	2302      	movs	r3, #2
   15534:	f107 0218 	add.w	r2, r7, #24
   15538:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1553c:	61bb      	str	r3, [r7, #24]
   1553e:	f012 f9e8 	bl	27912 <z_log_msg_static_create.constprop.0>
}
   15542:	4620      	mov	r0, r4
   15544:	3724      	adds	r7, #36	; 0x24
   15546:	46bd      	mov	sp, r7
   15548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1554c:	3dcc      	subs	r5, #204	; 0xcc
   1554e:	2207      	movs	r2, #7
   15550:	4629      	mov	r1, r5
   15552:	4640      	mov	r0, r8
   15554:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   15556:	2806      	cmp	r0, #6
   15558:	d811      	bhi.n	1557e <set.part.0+0xa6>
				BT_ERR("Invalid length ID address in storage");
   1555a:	4b31      	ldr	r3, [pc, #196]	; (15620 <set.part.0+0x148>)
   1555c:	482c      	ldr	r0, [pc, #176]	; (15610 <set.part.0+0x138>)
   1555e:	61fb      	str	r3, [r7, #28]
   15560:	f107 0218 	add.w	r2, r7, #24
   15564:	2302      	movs	r3, #2
   15566:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1556a:	61bb      	str	r3, [r7, #24]
   1556c:	f012 f9d1 	bl	27912 <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   15570:	2207      	movs	r2, #7
   15572:	4621      	mov	r1, r4
   15574:	4628      	mov	r0, r5
   15576:	f012 f965 	bl	27844 <memset>
			bt_dev.id_count = 0U;
   1557a:	71ec      	strb	r4, [r5, #7]
   1557c:	e7e1      	b.n	15542 <set.part.0+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1557e:	2307      	movs	r3, #7
   15580:	fbb0 f0f3 	udiv	r0, r0, r3
   15584:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   15586:	e7dc      	b.n	15542 <set.part.0+0x6a>
	if (!strncmp(name, "name", len)) {
   15588:	4926      	ldr	r1, [pc, #152]	; (15624 <set.part.0+0x14c>)
   1558a:	464a      	mov	r2, r9
   1558c:	4628      	mov	r0, r5
   1558e:	f012 f914 	bl	277ba <strncmp>
   15592:	4604      	mov	r4, r0
   15594:	b9d0      	cbnz	r0, 155cc <set.part.0+0xf4>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   15596:	4924      	ldr	r1, [pc, #144]	; (15628 <set.part.0+0x150>)
   15598:	2241      	movs	r2, #65	; 0x41
   1559a:	4640      	mov	r0, r8
   1559c:	47b0      	blx	r6
		if (len < 0) {
   1559e:	2800      	cmp	r0, #0
   155a0:	da0f      	bge.n	155c2 <set.part.0+0xea>
			BT_ERR("Failed to read device name from storage"
   155a2:	466d      	mov	r5, sp
   155a4:	b088      	sub	sp, #32
   155a6:	466a      	mov	r2, sp
   155a8:	4b20      	ldr	r3, [pc, #128]	; (1562c <set.part.0+0x154>)
   155aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   155ae:	2303      	movs	r3, #3
   155b0:	f842 3f10 	str.w	r3, [r2, #16]!
   155b4:	4816      	ldr	r0, [pc, #88]	; (15610 <set.part.0+0x138>)
   155b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   155ba:	f012 f9aa 	bl	27912 <z_log_msg_static_create.constprop.0>
   155be:	46ad      	mov	sp, r5
   155c0:	e7bf      	b.n	15542 <set.part.0+0x6a>
			bt_dev.name[len] = '\0';
   155c2:	4b1b      	ldr	r3, [pc, #108]	; (15630 <set.part.0+0x158>)
   155c4:	4418      	add	r0, r3
   155c6:	f880 41a2 	strb.w	r4, [r0, #418]	; 0x1a2
			BT_DBG("Name set to %s", bt_dev.name);
   155ca:	e7ba      	b.n	15542 <set.part.0+0x6a>
	if (!strncmp(name, "irk", len)) {
   155cc:	4919      	ldr	r1, [pc, #100]	; (15634 <set.part.0+0x15c>)
   155ce:	464a      	mov	r2, r9
   155d0:	4628      	mov	r0, r5
   155d2:	f012 f8f2 	bl	277ba <strncmp>
   155d6:	4604      	mov	r4, r0
   155d8:	2800      	cmp	r0, #0
   155da:	d190      	bne.n	154fe <set.part.0+0x26>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   155dc:	4916      	ldr	r1, [pc, #88]	; (15638 <set.part.0+0x160>)
   155de:	2210      	movs	r2, #16
   155e0:	4640      	mov	r0, r8
   155e2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   155e4:	280f      	cmp	r0, #15
   155e6:	d8ac      	bhi.n	15542 <set.part.0+0x6a>
				BT_ERR("Invalid length IRK in storage");
   155e8:	4b14      	ldr	r3, [pc, #80]	; (1563c <set.part.0+0x164>)
   155ea:	61fb      	str	r3, [r7, #28]
   155ec:	f107 0218 	add.w	r2, r7, #24
   155f0:	2302      	movs	r3, #2
   155f2:	4807      	ldr	r0, [pc, #28]	; (15610 <set.part.0+0x138>)
   155f4:	61bb      	str	r3, [r7, #24]
   155f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155fa:	f012 f98a 	bl	27912 <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   155fe:	2210      	movs	r2, #16
   15600:	4621      	mov	r1, r4
   15602:	480d      	ldr	r0, [pc, #52]	; (15638 <set.part.0+0x160>)
   15604:	f012 f91e 	bl	27844 <memset>
   15608:	e79b      	b.n	15542 <set.part.0+0x6a>
   1560a:	bf00      	nop
   1560c:	0002cc42 	.word	0x0002cc42
   15610:	0002b52c 	.word	0x0002b52c
   15614:	0002cbac 	.word	0x0002cbac
   15618:	2000041c 	.word	0x2000041c
   1561c:	0002cc63 	.word	0x0002cc63
   15620:	0002cc87 	.word	0x0002cc87
   15624:	0002d4cf 	.word	0x0002d4cf
   15628:	200004f2 	.word	0x200004f2
   1562c:	0002ccac 	.word	0x0002ccac
   15630:	20000350 	.word	0x20000350
   15634:	0002cc22 	.word	0x0002cc22
   15638:	200004b0 	.word	0x200004b0
   1563c:	0002ccde 	.word	0x0002ccde

00015640 <set>:
{
   15640:	b410      	push	{r4}
   15642:	4611      	mov	r1, r2
   15644:	461a      	mov	r2, r3
   15646:	4b07      	ldr	r3, [pc, #28]	; (15664 <set+0x24>)
   15648:	f3bf 8f5b 	dmb	ish
   1564c:	681c      	ldr	r4, [r3, #0]
   1564e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15652:	f014 0401 	ands.w	r4, r4, #1
   15656:	d002      	beq.n	1565e <set+0x1e>
}
   15658:	bc10      	pop	{r4}
   1565a:	f7ff bf3d 	b.w	154d8 <set.part.0>
   1565e:	4620      	mov	r0, r4
   15660:	bc10      	pop	{r4}
   15662:	4770      	bx	lr
   15664:	2000041c 	.word	0x2000041c

00015668 <bt_settings_encode_key>:
{
   15668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1566c:	b088      	sub	sp, #32
		snprintk(path, path_size,
   1566e:	799c      	ldrb	r4, [r3, #6]
{
   15670:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   15674:	795d      	ldrb	r5, [r3, #5]
   15676:	791e      	ldrb	r6, [r3, #4]
   15678:	78df      	ldrb	r7, [r3, #3]
   1567a:	f893 c002 	ldrb.w	ip, [r3, #2]
   1567e:	f893 e001 	ldrb.w	lr, [r3, #1]
   15682:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15684:	f1b8 0f00 	cmp.w	r8, #0
   15688:	d00e      	beq.n	156a8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1568a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1568e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15692:	4613      	mov	r3, r2
   15694:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15698:	e9cd 4500 	strd	r4, r5, [sp]
   1569c:	4a08      	ldr	r2, [pc, #32]	; (156c0 <bt_settings_encode_key+0x58>)
   1569e:	f010 ffb3 	bl	26608 <snprintk>
}
   156a2:	b008      	add	sp, #32
   156a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   156a8:	e9cd e305 	strd	lr, r3, [sp, #20]
   156ac:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   156b0:	4613      	mov	r3, r2
   156b2:	e9cd 5601 	strd	r5, r6, [sp, #4]
   156b6:	4a03      	ldr	r2, [pc, #12]	; (156c4 <bt_settings_encode_key+0x5c>)
   156b8:	9400      	str	r4, [sp, #0]
   156ba:	f010 ffa5 	bl	26608 <snprintk>
}
   156be:	e7f0      	b.n	156a2 <bt_settings_encode_key+0x3a>
   156c0:	0002ccfc 	.word	0x0002ccfc
   156c4:	0002cd20 	.word	0x0002cd20

000156c8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   156c8:	4801      	ldr	r0, [pc, #4]	; (156d0 <bt_settings_save_id+0x8>)
   156ca:	f00c b9cd 	b.w	21a68 <k_work_submit>
   156ce:	bf00      	nop
   156d0:	20000678 	.word	0x20000678

000156d4 <commit.part.0>:
}

static int commit(void)
   156d4:	b530      	push	{r4, r5, lr}
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   156d6:	4d1f      	ldr	r5, [pc, #124]	; (15754 <commit.part.0+0x80>)
   156d8:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
static int commit(void)
   156dc:	b087      	sub	sp, #28
	if (bt_dev.name[0] == '\0') {
   156de:	b913      	cbnz	r3, 156e6 <commit.part.0+0x12>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   156e0:	481d      	ldr	r0, [pc, #116]	; (15758 <commit.part.0+0x84>)
   156e2:	f001 fbbf 	bl	16e64 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   156e6:	79eb      	ldrb	r3, [r5, #7]
   156e8:	b9bb      	cbnz	r3, 1571a <commit.part.0+0x46>
		err = bt_setup_public_id_addr();
   156ea:	f001 ffd5 	bl	17698 <bt_setup_public_id_addr>
		if (err) {
   156ee:	4604      	mov	r4, r0
   156f0:	b160      	cbz	r0, 1570c <commit.part.0+0x38>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   156f2:	4b1a      	ldr	r3, [pc, #104]	; (1575c <commit.part.0+0x88>)
   156f4:	9305      	str	r3, [sp, #20]
   156f6:	481a      	ldr	r0, [pc, #104]	; (15760 <commit.part.0+0x8c>)
   156f8:	2302      	movs	r3, #2
   156fa:	aa04      	add	r2, sp, #16
   156fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15700:	9304      	str	r3, [sp, #16]
   15702:	f012 f906 	bl	27912 <z_log_msg_static_create.constprop.0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15706:	4620      	mov	r0, r4
   15708:	b007      	add	sp, #28
   1570a:	bd30      	pop	{r4, r5, pc}
	if (!bt_dev.id_count) {
   1570c:	79eb      	ldrb	r3, [r5, #7]
   1570e:	b923      	cbnz	r3, 1571a <commit.part.0+0x46>
		err = bt_setup_random_id_addr();
   15710:	f002 f85e 	bl	177d0 <bt_setup_random_id_addr>
		if (err) {
   15714:	4604      	mov	r4, r0
   15716:	2800      	cmp	r0, #0
   15718:	d1eb      	bne.n	156f2 <commit.part.0+0x1e>
   1571a:	f3bf 8f5b 	dmb	ish
   1571e:	4d11      	ldr	r5, [pc, #68]	; (15764 <commit.part.0+0x90>)
   15720:	682b      	ldr	r3, [r5, #0]
   15722:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15726:	075b      	lsls	r3, r3, #29
   15728:	d401      	bmi.n	1572e <commit.part.0+0x5a>
		bt_finalize_init();
   1572a:	f001 fae9 	bl	16d00 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1572e:	f3bf 8f5b 	dmb	ish
   15732:	e855 4f00 	ldrex	r4, [r5]
   15736:	f424 3380 	bic.w	r3, r4, #65536	; 0x10000
   1573a:	e845 3200 	strex	r2, r3, [r5]
   1573e:	2a00      	cmp	r2, #0
   15740:	d1f7      	bne.n	15732 <commit.part.0+0x5e>
   15742:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15746:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
   1574a:	d0dc      	beq.n	15706 <commit.part.0+0x32>
		bt_settings_save_id();
   1574c:	f7ff ffbc 	bl	156c8 <bt_settings_save_id>
	return 0;
   15750:	2400      	movs	r4, #0
   15752:	e7d8      	b.n	15706 <commit.part.0+0x32>
   15754:	20000350 	.word	0x20000350
   15758:	0002cd41 	.word	0x0002cd41
   1575c:	0002cd64 	.word	0x0002cd64
   15760:	0002b52c 	.word	0x0002b52c
   15764:	2000041c 	.word	0x2000041c

00015768 <commit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15768:	4b05      	ldr	r3, [pc, #20]	; (15780 <commit+0x18>)
   1576a:	f3bf 8f5b 	dmb	ish
   1576e:	6818      	ldr	r0, [r3, #0]
   15770:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15774:	f010 0001 	ands.w	r0, r0, #1
   15778:	d001      	beq.n	1577e <commit+0x16>
   1577a:	f7ff bfab 	b.w	156d4 <commit.part.0>
}
   1577e:	4770      	bx	lr
   15780:	2000041c 	.word	0x2000041c

00015784 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15784:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15786:	4d0a      	ldr	r5, [pc, #40]	; (157b0 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15788:	4b0a      	ldr	r3, [pc, #40]	; (157b4 <long_wq_init+0x30>)
{
   1578a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1578c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   1578e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15790:	9302      	str	r3, [sp, #8]
   15792:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15794:	f015 f93d 	bl	2aa12 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15798:	ab02      	add	r3, sp, #8
   1579a:	9300      	str	r3, [sp, #0]
   1579c:	4628      	mov	r0, r5
   1579e:	4906      	ldr	r1, [pc, #24]	; (157b8 <long_wq_init+0x34>)
   157a0:	230a      	movs	r3, #10
   157a2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   157a6:	f00c f965 	bl	21a74 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   157aa:	4620      	mov	r0, r4
   157ac:	b005      	add	sp, #20
   157ae:	bd30      	pop	{r4, r5, pc}
   157b0:	20001da8 	.word	0x20001da8
   157b4:	0002cd97 	.word	0x0002cd97
   157b8:	20004cc8 	.word	0x20004cc8

000157bc <bt_long_wq_schedule>:
{
   157bc:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   157be:	4801      	ldr	r0, [pc, #4]	; (157c4 <bt_long_wq_schedule+0x8>)
   157c0:	f00c b990 	b.w	21ae4 <k_work_schedule_for_queue>
   157c4:	20001da8 	.word	0x20001da8

000157c8 <bt_long_wq_reschedule>:
{
   157c8:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   157ca:	4801      	ldr	r0, [pc, #4]	; (157d0 <bt_long_wq_reschedule+0x8>)
   157cc:	f00c b9ba 	b.w	21b44 <k_work_reschedule_for_queue>
   157d0:	20001da8 	.word	0x20001da8

000157d4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   157d4:	b430      	push	{r4, r5}
   157d6:	4603      	mov	r3, r0
   157d8:	4608      	mov	r0, r1
	switch (src->type) {
   157da:	781a      	ldrb	r2, [r3, #0]
   157dc:	2a01      	cmp	r2, #1
   157de:	d013      	beq.n	15808 <uuid_to_uuid128+0x34>
   157e0:	2a02      	cmp	r2, #2
   157e2:	d026      	beq.n	15832 <uuid_to_uuid128+0x5e>
   157e4:	b972      	cbnz	r2, 15804 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   157e6:	4a15      	ldr	r2, [pc, #84]	; (1583c <uuid_to_uuid128+0x68>)
   157e8:	f102 0410 	add.w	r4, r2, #16
   157ec:	f852 5b04 	ldr.w	r5, [r2], #4
   157f0:	f841 5b04 	str.w	r5, [r1], #4
   157f4:	42a2      	cmp	r2, r4
   157f6:	d1f9      	bne.n	157ec <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   157f8:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   157fa:	7812      	ldrb	r2, [r2, #0]
   157fc:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   157fe:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15800:	0a1b      	lsrs	r3, r3, #8
   15802:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15804:	bc30      	pop	{r4, r5}
   15806:	4770      	bx	lr
		*dst = uuid128_base;
   15808:	4a0c      	ldr	r2, [pc, #48]	; (1583c <uuid_to_uuid128+0x68>)
   1580a:	f102 0410 	add.w	r4, r2, #16
   1580e:	f852 5b04 	ldr.w	r5, [r2], #4
   15812:	f841 5b04 	str.w	r5, [r1], #4
   15816:	42a2      	cmp	r2, r4
   15818:	d1f9      	bne.n	1580e <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   1581a:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   1581c:	7812      	ldrb	r2, [r2, #0]
   1581e:	700a      	strb	r2, [r1, #0]
   15820:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   15824:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   15826:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15828:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   1582a:	0a1b      	lsrs	r3, r3, #8
   1582c:	7382      	strb	r2, [r0, #14]
   1582e:	7403      	strb	r3, [r0, #16]
}
   15830:	e7e8      	b.n	15804 <uuid_to_uuid128+0x30>
}
   15832:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15834:	2211      	movs	r2, #17
   15836:	4619      	mov	r1, r3
   15838:	f011 bff9 	b.w	2782e <memcpy>
   1583c:	0002cda0 	.word	0x0002cda0

00015840 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15840:	b538      	push	{r3, r4, r5, lr}
   15842:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15844:	4805      	ldr	r0, [pc, #20]	; (1585c <bt_buf_get_rx+0x1c>)
   15846:	f014 f92b 	bl	29aa0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1584a:	4604      	mov	r4, r0
   1584c:	b120      	cbz	r0, 15858 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1584e:	2100      	movs	r1, #0
   15850:	3008      	adds	r0, #8
   15852:	f014 f94a 	bl	29aea <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15856:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15858:	4620      	mov	r0, r4
   1585a:	bd38      	pop	{r3, r4, r5, pc}
   1585c:	20000ba8 	.word	0x20000ba8

00015860 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15860:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15862:	490b      	ldr	r1, [pc, #44]	; (15890 <bt_buf_get_cmd_complete+0x30>)
{
   15864:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15866:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   1586a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   1586c:	b920      	cbnz	r0, 15878 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15872:	2001      	movs	r0, #1
   15874:	f7ff bfe4 	b.w	15840 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15878:	f014 f991 	bl	29b9e <net_buf_ref>
   1587c:	2301      	movs	r3, #1
		buf->len = 0U;
   1587e:	2100      	movs	r1, #0
   15880:	7503      	strb	r3, [r0, #20]
   15882:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15884:	4604      	mov	r4, r0
   15886:	3008      	adds	r0, #8
   15888:	f014 f92f 	bl	29aea <net_buf_simple_reserve>
}
   1588c:	4620      	mov	r0, r4
   1588e:	bd10      	pop	{r4, pc}
   15890:	20000350 	.word	0x20000350

00015894 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15894:	b570      	push	{r4, r5, r6, lr}
   15896:	4604      	mov	r4, r0
	switch (evt) {
   15898:	2c0f      	cmp	r4, #15
{
   1589a:	460d      	mov	r5, r1
   1589c:	4610      	mov	r0, r2
   1589e:	4619      	mov	r1, r3
	switch (evt) {
   158a0:	d805      	bhi.n	158ae <bt_buf_get_evt+0x1a>
   158a2:	2c0d      	cmp	r4, #13
   158a4:	d912      	bls.n	158cc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   158a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   158aa:	f7ff bfd9 	b.w	15860 <bt_buf_get_cmd_complete>
	switch (evt) {
   158ae:	2c13      	cmp	r4, #19
   158b0:	d10c      	bne.n	158cc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   158b2:	480b      	ldr	r0, [pc, #44]	; (158e0 <bt_buf_get_evt+0x4c>)
   158b4:	f014 f8f4 	bl	29aa0 <net_buf_alloc_fixed>
			if (buf) {
   158b8:	4604      	mov	r4, r0
   158ba:	b128      	cbz	r0, 158c8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   158bc:	2100      	movs	r1, #0
   158be:	3008      	adds	r0, #8
   158c0:	f014 f913 	bl	29aea <net_buf_simple_reserve>
   158c4:	2301      	movs	r3, #1
   158c6:	7523      	strb	r3, [r4, #20]
}
   158c8:	4620      	mov	r0, r4
   158ca:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   158cc:	4602      	mov	r2, r0
   158ce:	460b      	mov	r3, r1
		if (discardable) {
   158d0:	b10d      	cbz	r5, 158d6 <bt_buf_get_evt+0x42>
   158d2:	4804      	ldr	r0, [pc, #16]	; (158e4 <bt_buf_get_evt+0x50>)
   158d4:	e7ee      	b.n	158b4 <bt_buf_get_evt+0x20>
}
   158d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   158da:	2001      	movs	r0, #1
   158dc:	f7ff bfb0 	b.w	15840 <bt_buf_get_rx>
   158e0:	20000bd4 	.word	0x20000bd4
   158e4:	20000b24 	.word	0x20000b24

000158e8 <ver_str>:
{
   158e8:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   158ea:	4d0b      	ldr	r5, [pc, #44]	; (15918 <ver_str+0x30>)
{
   158ec:	4606      	mov	r6, r0
	const char * const str[] = {
   158ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   158f0:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   158f2:	ac01      	add	r4, sp, #4
   158f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   158f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   158f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   158fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   158fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   158fe:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15900:	682b      	ldr	r3, [r5, #0]
   15902:	6023      	str	r3, [r4, #0]
		return str[ver];
   15904:	bf9b      	ittet	ls
   15906:	ab0e      	addls	r3, sp, #56	; 0x38
   15908:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   1590c:	4803      	ldrhi	r0, [pc, #12]	; (1591c <ver_str+0x34>)
		return str[ver];
   1590e:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   15912:	b00e      	add	sp, #56	; 0x38
   15914:	bd70      	pop	{r4, r5, r6, pc}
   15916:	bf00      	nop
   15918:	0002b87c 	.word	0x0002b87c
   1591c:	0002cea7 	.word	0x0002cea7

00015920 <unpair>:
{
   15920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15922:	4606      	mov	r6, r0
   15924:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   15926:	f002 fd61 	bl	183ec <bt_conn_lookup_addr_le>
	if (conn) {
   1592a:	4604      	mov	r4, r0
   1592c:	b9f8      	cbnz	r0, 1596e <unpair+0x4e>
			keys = bt_keys_find_addr(id, addr);
   1592e:	4639      	mov	r1, r7
   15930:	4630      	mov	r0, r6
   15932:	f007 fcc9 	bl	1d2c8 <bt_keys_find_addr>
		if (keys) {
   15936:	4605      	mov	r5, r0
   15938:	b110      	cbz	r0, 15940 <unpair+0x20>
			bt_keys_clear(keys);
   1593a:	4628      	mov	r0, r5
   1593c:	f007 fcd4 	bl	1d2e8 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   15940:	4639      	mov	r1, r7
   15942:	4630      	mov	r0, r6
   15944:	f005 fc84 	bl	1b250 <bt_gatt_clear>
	return list->head;
   15948:	4b14      	ldr	r3, [pc, #80]	; (1599c <unpair+0x7c>)
   1594a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1594c:	b323      	cbz	r3, 15998 <unpair+0x78>
	return node->next;
   1594e:	f853 490c 	ldr.w	r4, [r3], #-12
   15952:	b104      	cbz	r4, 15956 <unpair+0x36>
   15954:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15956:	689b      	ldr	r3, [r3, #8]
   15958:	b113      	cbz	r3, 15960 <unpair+0x40>
			listener->bond_deleted(id, addr);
   1595a:	4639      	mov	r1, r7
   1595c:	4630      	mov	r0, r6
   1595e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15960:	b1d4      	cbz	r4, 15998 <unpair+0x78>
   15962:	68e2      	ldr	r2, [r4, #12]
   15964:	b102      	cbz	r2, 15968 <unpair+0x48>
   15966:	3a0c      	subs	r2, #12
	struct bt_keys *keys = NULL;
   15968:	4623      	mov	r3, r4
   1596a:	4614      	mov	r4, r2
   1596c:	e7f3      	b.n	15956 <unpair+0x36>
		if (conn->type == BT_CONN_TYPE_LE) {
   1596e:	7883      	ldrb	r3, [r0, #2]
   15970:	2b01      	cmp	r3, #1
   15972:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   15976:	bf04      	itt	eq
   15978:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   1597c:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15980:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   15984:	bf18      	it	ne
   15986:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15988:	f012 fab7 	bl	27efa <bt_conn_disconnect>
		bt_conn_unref(conn);
   1598c:	4620      	mov	r0, r4
   1598e:	f012 fa6f 	bl	27e70 <bt_conn_unref>
		if (!keys) {
   15992:	2d00      	cmp	r5, #0
   15994:	d1d1      	bne.n	1593a <unpair+0x1a>
   15996:	e7ca      	b.n	1592e <unpair+0xe>
}
   15998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1599a:	bf00      	nop
   1599c:	20002d00 	.word	0x20002d00

000159a0 <hci_disconn_complete_prio>:
{
   159a0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   159a2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   159a4:	781a      	ldrb	r2, [r3, #0]
   159a6:	b972      	cbnz	r2, 159c6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   159a8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   159ac:	4620      	mov	r0, r4
   159ae:	f002 fb09 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   159b2:	4605      	mov	r5, r0
   159b4:	b940      	cbnz	r0, 159c8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   159b6:	4b08      	ldr	r3, [pc, #32]	; (159d8 <hci_disconn_complete_prio+0x38>)
   159b8:	881a      	ldrh	r2, [r3, #0]
   159ba:	b922      	cbnz	r2, 159c6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   159bc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   159c0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   159c4:	8018      	strh	r0, [r3, #0]
}
   159c6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   159c8:	2101      	movs	r1, #1
   159ca:	f002 fb03 	bl	17fd4 <bt_conn_set_state>
	bt_conn_unref(conn);
   159ce:	4628      	mov	r0, r5
}
   159d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   159d4:	f012 ba4c 	b.w	27e70 <bt_conn_unref>
   159d8:	20003c94 	.word	0x20003c94

000159dc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159dc:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159de:	4c0d      	ldr	r4, [pc, #52]	; (15a14 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159e0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159e2:	2205      	movs	r2, #5
   159e4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   159e8:	f002 fd4c 	bl	18484 <bt_conn_lookup_state_le>
		if (!conn) {
   159ec:	b978      	cbnz	r0, 15a0e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   159ee:	4b0a      	ldr	r3, [pc, #40]	; (15a18 <find_pending_connect.part.0+0x3c>)
   159f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   159f2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   159f4:	9000      	str	r0, [sp, #0]
   159f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   159fa:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   159fe:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   15a02:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15a06:	2204      	movs	r2, #4
   15a08:	4669      	mov	r1, sp
   15a0a:	f002 fd3b 	bl	18484 <bt_conn_lookup_state_le>
}
   15a0e:	b002      	add	sp, #8
   15a10:	bd10      	pop	{r4, pc}
   15a12:	bf00      	nop
   15a14:	20000350 	.word	0x20000350
   15a18:	0002b87c 	.word	0x0002b87c

00015a1c <bt_init.part.0>:
static int bt_init(void)
   15a1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_INFO("No ID address. App must call settings_load()");
   15a1e:	4b07      	ldr	r3, [pc, #28]	; (15a3c <bt_init.part.0+0x20>)
   15a20:	9305      	str	r3, [sp, #20]
   15a22:	4807      	ldr	r0, [pc, #28]	; (15a40 <bt_init.part.0+0x24>)
   15a24:	2302      	movs	r3, #2
   15a26:	aa04      	add	r2, sp, #16
   15a28:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   15a2c:	9304      	str	r3, [sp, #16]
   15a2e:	f012 f830 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   15a32:	2000      	movs	r0, #0
   15a34:	b007      	add	sp, #28
   15a36:	f85d fb04 	ldr.w	pc, [sp], #4
   15a3a:	bf00      	nop
   15a3c:	0002ceaf 	.word	0x0002ceaf
   15a40:	0002b504 	.word	0x0002b504

00015a44 <hci_data_buf_overflow>:
{
   15a44:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15a46:	6883      	ldr	r3, [r0, #8]
{
   15a48:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15a4a:	b088      	sub	sp, #32
   15a4c:	781b      	ldrb	r3, [r3, #0]
   15a4e:	466a      	mov	r2, sp
   15a50:	4906      	ldr	r1, [pc, #24]	; (15a6c <hci_data_buf_overflow+0x28>)
   15a52:	4807      	ldr	r0, [pc, #28]	; (15a70 <hci_data_buf_overflow+0x2c>)
   15a54:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15a58:	2303      	movs	r3, #3
   15a5a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a5e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a62:	f012 f816 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   15a66:	46bd      	mov	sp, r7
   15a68:	bd80      	pop	{r7, pc}
   15a6a:	bf00      	nop
   15a6c:	0002cedc 	.word	0x0002cedc
   15a70:	0002b504 	.word	0x0002b504

00015a74 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   15a76:	4b06      	ldr	r3, [pc, #24]	; (15a90 <le_conn_param_neg_reply.part.0+0x1c>)
   15a78:	9305      	str	r3, [sp, #20]
   15a7a:	4806      	ldr	r0, [pc, #24]	; (15a94 <le_conn_param_neg_reply.part.0+0x20>)
   15a7c:	2302      	movs	r3, #2
   15a7e:	aa04      	add	r2, sp, #16
   15a80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a84:	9304      	str	r3, [sp, #16]
   15a86:	f012 f804 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   15a8a:	b007      	add	sp, #28
   15a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a90:	0002cf04 	.word	0x0002cf04
   15a94:	0002b504 	.word	0x0002b504

00015a98 <le_conn_update_complete>:
{
   15a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a9a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15a9c:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15a9e:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   15aa2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15aa4:	4630      	mov	r0, r6
   15aa6:	f002 fa8d 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15aaa:	4604      	mov	r4, r0
   15aac:	b988      	cbnz	r0, 15ad2 <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15aae:	466c      	mov	r4, sp
   15ab0:	b088      	sub	sp, #32
   15ab2:	466a      	mov	r2, sp
   15ab4:	4b22      	ldr	r3, [pc, #136]	; (15b40 <le_conn_update_complete+0xa8>)
   15ab6:	4823      	ldr	r0, [pc, #140]	; (15b44 <le_conn_update_complete+0xac>)
   15ab8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15abc:	2303      	movs	r3, #3
   15abe:	f842 3f10 	str.w	r3, [r2, #16]!
   15ac2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15ac6:	f011 ffe4 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15aca:	46a5      	mov	sp, r4
}
   15acc:	370c      	adds	r7, #12
   15ace:	46bd      	mov	sp, r7
   15ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
   15ad2:	782b      	ldrb	r3, [r5, #0]
   15ad4:	b9bb      	cbnz	r3, 15b06 <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   15ad6:	792a      	ldrb	r2, [r5, #4]
   15ad8:	78eb      	ldrb	r3, [r5, #3]
   15ada:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ade:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   15ae2:	79aa      	ldrb	r2, [r5, #6]
   15ae4:	796b      	ldrb	r3, [r5, #5]
   15ae6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15aea:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15aee:	79eb      	ldrb	r3, [r5, #7]
   15af0:	7a2a      	ldrb	r2, [r5, #8]
   15af2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15af6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   15afa:	f002 fb7b 	bl	181f4 <notify_le_param_updated>
	bt_conn_unref(conn);
   15afe:	4620      	mov	r0, r4
   15b00:	f012 f9b6 	bl	27e70 <bt_conn_unref>
   15b04:	e7e2      	b.n	15acc <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15b06:	2b1a      	cmp	r3, #26
   15b08:	d1f9      	bne.n	15afe <le_conn_update_complete+0x66>
   15b0a:	78c3      	ldrb	r3, [r0, #3]
   15b0c:	2b01      	cmp	r3, #1
   15b0e:	d1f6      	bne.n	15afe <le_conn_update_complete+0x66>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15b10:	f44f 7100 	mov.w	r1, #512	; 0x200
   15b14:	3004      	adds	r0, #4
   15b16:	f011 ffa8 	bl	27a6a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15b1a:	0583      	lsls	r3, r0, #22
   15b1c:	d4ef      	bmi.n	15afe <le_conn_update_complete+0x66>
		param.interval_min = conn->le.interval_min;
   15b1e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   15b22:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   15b24:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   15b28:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   15b2a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   15b2e:	80bb      	strh	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15b30:	4639      	mov	r1, r7
		param.timeout = conn->le.pending_timeout;
   15b32:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   15b36:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   15b38:	4620      	mov	r0, r4
   15b3a:	f002 febd 	bl	188b8 <bt_l2cap_update_conn_param>
   15b3e:	e7de      	b.n	15afe <le_conn_update_complete+0x66>
   15b40:	0002cf1e 	.word	0x0002cf1e
   15b44:	0002b504 	.word	0x0002b504

00015b48 <rx_queue_put>:
{
   15b48:	b598      	push	{r3, r4, r7, lr}
   15b4a:	4601      	mov	r1, r0
   15b4c:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15b4e:	480d      	ldr	r0, [pc, #52]	; (15b84 <rx_queue_put+0x3c>)
   15b50:	f013 ffcf 	bl	29af2 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15b54:	490c      	ldr	r1, [pc, #48]	; (15b88 <rx_queue_put+0x40>)
   15b56:	480d      	ldr	r0, [pc, #52]	; (15b8c <rx_queue_put+0x44>)
   15b58:	f014 ff4a 	bl	2a9f0 <k_work_submit_to_queue>
	if (err < 0) {
   15b5c:	2800      	cmp	r0, #0
   15b5e:	da0e      	bge.n	15b7e <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
   15b60:	466c      	mov	r4, sp
   15b62:	b088      	sub	sp, #32
   15b64:	466a      	mov	r2, sp
   15b66:	4b0a      	ldr	r3, [pc, #40]	; (15b90 <rx_queue_put+0x48>)
   15b68:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15b6c:	2303      	movs	r3, #3
   15b6e:	f842 3f10 	str.w	r3, [r2, #16]!
   15b72:	4808      	ldr	r0, [pc, #32]	; (15b94 <rx_queue_put+0x4c>)
   15b74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b78:	f011 ff8b 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15b7c:	46a5      	mov	sp, r4
}
   15b7e:	46bd      	mov	sp, r7
   15b80:	bd98      	pop	{r3, r4, r7, pc}
   15b82:	bf00      	nop
   15b84:	2000048c 	.word	0x2000048c
   15b88:	20000688 	.word	0x20000688
   15b8c:	20001e48 	.word	0x20001e48
   15b90:	0002cf42 	.word	0x0002cf42
   15b94:	0002b504 	.word	0x0002b504

00015b98 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15b98:	b5b0      	push	{r4, r5, r7, lr}
   15b9a:	460b      	mov	r3, r1
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15b9c:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15b9e:	af00      	add	r7, sp, #0
   15ba0:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15ba2:	4629      	mov	r1, r5
   15ba4:	6898      	ldr	r0, [r3, #8]
   15ba6:	f7ff fbe7 	bl	15378 <bt_hex_real>
   15baa:	b08a      	sub	sp, #40	; 0x28
   15bac:	466a      	mov	r2, sp
   15bae:	4b09      	ldr	r3, [pc, #36]	; (15bd4 <handle_event.part.0+0x3c>)
   15bb0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15bb4:	2304      	movs	r3, #4
   15bb6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   15bba:	4b07      	ldr	r3, [pc, #28]	; (15bd8 <handle_event.part.0+0x40>)
   15bbc:	e9c2 5007 	strd	r5, r0, [r2, #28]
   15bc0:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
   15bc4:	f842 3f10 	str.w	r3, [r2, #16]!
   15bc8:	4804      	ldr	r0, [pc, #16]	; (15bdc <handle_event.part.0+0x44>)
   15bca:	f011 ff62 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   15bce:	46bd      	mov	sp, r7
   15bd0:	bdb0      	pop	{r4, r5, r7, pc}
   15bd2:	bf00      	nop
   15bd4:	0002cf5f 	.word	0x0002cf5f
   15bd8:	01000005 	.word	0x01000005
   15bdc:	0002b504 	.word	0x0002b504

00015be0 <hci_hardware_error>:
{
   15be0:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15be2:	2101      	movs	r1, #1
   15be4:	af00      	add	r7, sp, #0
   15be6:	3008      	adds	r0, #8
   15be8:	f014 f826 	bl	29c38 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15bec:	b088      	sub	sp, #32
   15bee:	7803      	ldrb	r3, [r0, #0]
   15bf0:	466a      	mov	r2, sp
   15bf2:	4906      	ldr	r1, [pc, #24]	; (15c0c <hci_hardware_error+0x2c>)
   15bf4:	4806      	ldr	r0, [pc, #24]	; (15c10 <hci_hardware_error+0x30>)
   15bf6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15bfa:	2303      	movs	r3, #3
   15bfc:	f842 3f10 	str.w	r3, [r2, #16]!
   15c00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c04:	f011 ff45 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   15c08:	46bd      	mov	sp, r7
   15c0a:	bd80      	pop	{r7, pc}
   15c0c:	0002cf81 	.word	0x0002cf81
   15c10:	0002b504 	.word	0x0002b504

00015c14 <le_data_len_change>:
{
   15c14:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c16:	6883      	ldr	r3, [r0, #8]
   15c18:	881c      	ldrh	r4, [r3, #0]
{
   15c1a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15c1c:	4620      	mov	r0, r4
   15c1e:	f002 f9d1 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15c22:	b980      	cbnz	r0, 15c46 <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15c24:	466d      	mov	r5, sp
   15c26:	b088      	sub	sp, #32
   15c28:	466a      	mov	r2, sp
   15c2a:	4b08      	ldr	r3, [pc, #32]	; (15c4c <le_data_len_change+0x38>)
   15c2c:	4808      	ldr	r0, [pc, #32]	; (15c50 <le_data_len_change+0x3c>)
   15c2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15c32:	2303      	movs	r3, #3
   15c34:	f842 3f10 	str.w	r3, [r2, #16]!
   15c38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c3c:	f011 ff29 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15c40:	46ad      	mov	sp, r5
}
   15c42:	46bd      	mov	sp, r7
   15c44:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   15c46:	f012 f913 	bl	27e70 <bt_conn_unref>
   15c4a:	e7fa      	b.n	15c42 <le_data_len_change+0x2e>
   15c4c:	0002cf1e 	.word	0x0002cf1e
   15c50:	0002b504 	.word	0x0002b504

00015c54 <le_phy_update_complete>:
{
   15c54:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c56:	6883      	ldr	r3, [r0, #8]
   15c58:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   15c5c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15c5e:	4620      	mov	r0, r4
   15c60:	f002 f9b0 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15c64:	b980      	cbnz	r0, 15c88 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15c66:	466d      	mov	r5, sp
   15c68:	b088      	sub	sp, #32
   15c6a:	466a      	mov	r2, sp
   15c6c:	4b08      	ldr	r3, [pc, #32]	; (15c90 <le_phy_update_complete+0x3c>)
   15c6e:	4809      	ldr	r0, [pc, #36]	; (15c94 <le_phy_update_complete+0x40>)
   15c70:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15c74:	2303      	movs	r3, #3
   15c76:	f842 3f10 	str.w	r3, [r2, #16]!
   15c7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c7e:	f011 ff08 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15c82:	46ad      	mov	sp, r5
}
   15c84:	46bd      	mov	sp, r7
   15c86:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   15c88:	f012 f8f2 	bl	27e70 <bt_conn_unref>
   15c8c:	e7fa      	b.n	15c84 <le_phy_update_complete+0x30>
   15c8e:	bf00      	nop
   15c90:	0002cf1e 	.word	0x0002cf1e
   15c94:	0002b504 	.word	0x0002b504

00015c98 <hci_disconn_complete>:
{
   15c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15c9c:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   15c9e:	782e      	ldrb	r6, [r5, #0]
{
   15ca0:	af00      	add	r7, sp, #0
	if (evt->status) {
   15ca2:	b9ae      	cbnz	r6, 15cd0 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15ca4:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15ca8:	4640      	mov	r0, r8
   15caa:	f002 f98b 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15cae:	4604      	mov	r4, r0
   15cb0:	b988      	cbnz	r0, 15cd6 <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15cb2:	466c      	mov	r4, sp
   15cb4:	b088      	sub	sp, #32
   15cb6:	466a      	mov	r2, sp
   15cb8:	4b0b      	ldr	r3, [pc, #44]	; (15ce8 <hci_disconn_complete+0x50>)
   15cba:	480c      	ldr	r0, [pc, #48]	; (15cec <hci_disconn_complete+0x54>)
   15cbc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15cc0:	2303      	movs	r3, #3
   15cc2:	f842 3f10 	str.w	r3, [r2, #16]!
   15cc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15cca:	f011 fee2 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15cce:	46a5      	mov	sp, r4
}
   15cd0:	46bd      	mov	sp, r7
   15cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   15cd6:	78eb      	ldrb	r3, [r5, #3]
   15cd8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15cda:	4631      	mov	r1, r6
   15cdc:	f002 f97a 	bl	17fd4 <bt_conn_set_state>
		bt_conn_unref(conn);
   15ce0:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   15ce2:	f012 f8c5 	bl	27e70 <bt_conn_unref>
   15ce6:	e7f3      	b.n	15cd0 <hci_disconn_complete+0x38>
   15ce8:	0002cfa3 	.word	0x0002cfa3
   15cec:	0002b504 	.word	0x0002b504

00015cf0 <handle_event>:
{
   15cf0:	b598      	push	{r3, r4, r7, lr}
   15cf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15cf6:	af00      	add	r7, sp, #0
		if (handler->event != event) {
   15cf8:	7814      	ldrb	r4, [r2, #0]
   15cfa:	4284      	cmp	r4, r0
   15cfc:	d005      	beq.n	15d0a <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   15cfe:	3208      	adds	r2, #8
   15d00:	429a      	cmp	r2, r3
   15d02:	d1f9      	bne.n	15cf8 <handle_event+0x8>
	if (err == -EOPNOTSUPP) {
   15d04:	f7ff ff48 	bl	15b98 <handle_event.part.0>
}
   15d08:	e013      	b.n	15d32 <handle_event+0x42>
		if (buf->len < handler->min_len) {
   15d0a:	898b      	ldrh	r3, [r1, #12]
   15d0c:	7854      	ldrb	r4, [r2, #1]
   15d0e:	429c      	cmp	r4, r3
   15d10:	d911      	bls.n	15d36 <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15d12:	466c      	mov	r4, sp
   15d14:	b088      	sub	sp, #32
   15d16:	466a      	mov	r2, sp
   15d18:	4909      	ldr	r1, [pc, #36]	; (15d40 <handle_event+0x50>)
   15d1a:	61d0      	str	r0, [r2, #28]
   15d1c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15d20:	2304      	movs	r3, #4
   15d22:	f842 3f10 	str.w	r3, [r2, #16]!
   15d26:	4807      	ldr	r0, [pc, #28]	; (15d44 <handle_event+0x54>)
   15d28:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15d2c:	f011 feb1 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15d30:	46a5      	mov	sp, r4
}
   15d32:	46bd      	mov	sp, r7
   15d34:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
   15d36:	6853      	ldr	r3, [r2, #4]
   15d38:	4608      	mov	r0, r1
   15d3a:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   15d3c:	e7f9      	b.n	15d32 <handle_event+0x42>
   15d3e:	bf00      	nop
   15d40:	0002cfc9 	.word	0x0002cfc9
   15d44:	0002b504 	.word	0x0002b504

00015d48 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   15d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15d4a:	4855      	ldr	r0, [pc, #340]	; (15ea0 <rx_work_handler+0x158>)
{
   15d4c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15d4e:	f013 feee 	bl	29b2e <net_buf_slist_get>
	if (!buf) {
   15d52:	4604      	mov	r4, r0
   15d54:	2800      	cmp	r0, #0
   15d56:	d06a      	beq.n	15e2e <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15d58:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   15d5a:	2b01      	cmp	r3, #1
   15d5c:	d069      	beq.n	15e32 <rx_work_handler+0xea>
   15d5e:	2b03      	cmp	r3, #3
   15d60:	f040 8099 	bne.w	15e96 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15d64:	8983      	ldrh	r3, [r0, #12]
   15d66:	2b03      	cmp	r3, #3
   15d68:	d80c      	bhi.n	15d84 <rx_work_handler+0x3c>
   15d6a:	4a4e      	ldr	r2, [pc, #312]	; (15ea4 <rx_work_handler+0x15c>)
   15d6c:	494e      	ldr	r1, [pc, #312]	; (15ea8 <rx_work_handler+0x160>)
   15d6e:	484f      	ldr	r0, [pc, #316]	; (15eac <rx_work_handler+0x164>)
   15d70:	f240 13eb 	movw	r3, #491	; 0x1eb
   15d74:	f010 ff2c 	bl	26bd0 <assert_print>
   15d78:	4040      	eors	r0, r0
   15d7a:	f380 8811 	msr	BASEPRI, r0
   15d7e:	f04f 0003 	mov.w	r0, #3
   15d82:	df02      	svc	2
   15d84:	2104      	movs	r1, #4
   15d86:	f104 0008 	add.w	r0, r4, #8
   15d8a:	f013 ff55 	bl	29c38 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15d8e:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   15d90:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15d92:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15d94:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   15d96:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15d9a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15d9c:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15d9e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   15da0:	d010      	beq.n	15dc4 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15da2:	466d      	mov	r5, sp
   15da4:	b088      	sub	sp, #32
   15da6:	466a      	mov	r2, sp
   15da8:	4841      	ldr	r0, [pc, #260]	; (15eb0 <rx_work_handler+0x168>)
   15daa:	61d3      	str	r3, [r2, #28]
   15dac:	2304      	movs	r3, #4
   15dae:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15db2:	f842 3f10 	str.w	r3, [r2, #16]!
   15db6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15dba:	483e      	ldr	r0, [pc, #248]	; (15eb4 <rx_work_handler+0x16c>)
   15dbc:	f011 fe69 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15dc0:	46ad      	mov	sp, r5
   15dc2:	e064      	b.n	15e8e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15dc4:	f002 f8fe 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15dc8:	4605      	mov	r5, r0
   15dca:	b960      	cbnz	r0, 15de6 <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15dcc:	466d      	mov	r5, sp
   15dce:	b088      	sub	sp, #32
   15dd0:	8ae3      	ldrh	r3, [r4, #22]
   15dd2:	466a      	mov	r2, sp
   15dd4:	4938      	ldr	r1, [pc, #224]	; (15eb8 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   15dd6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15dda:	2303      	movs	r3, #3
   15ddc:	f842 3f10 	str.w	r3, [r2, #16]!
   15de0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15de4:	e7e9      	b.n	15dba <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   15de6:	f002 f9e3 	bl	181b0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15dea:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15dec:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15dee:	4621      	mov	r1, r4
   15df0:	4628      	mov	r0, r5
   15df2:	f001 ffe3 	bl	17dbc <bt_conn_recv>
	bt_conn_unref(conn);
   15df6:	4628      	mov	r0, r5
   15df8:	f012 f83a 	bl	27e70 <bt_conn_unref>
	return list->head;
   15dfc:	4b2f      	ldr	r3, [pc, #188]	; (15ebc <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15dfe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   15e02:	b1a3      	cbz	r3, 15e2e <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15e04:	492e      	ldr	r1, [pc, #184]	; (15ec0 <rx_work_handler+0x178>)
   15e06:	482f      	ldr	r0, [pc, #188]	; (15ec4 <rx_work_handler+0x17c>)
   15e08:	f014 fdf2 	bl	2a9f0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15e0c:	2800      	cmp	r0, #0
   15e0e:	da0e      	bge.n	15e2e <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
   15e10:	466c      	mov	r4, sp
   15e12:	b088      	sub	sp, #32
   15e14:	466a      	mov	r2, sp
   15e16:	4b2c      	ldr	r3, [pc, #176]	; (15ec8 <rx_work_handler+0x180>)
   15e18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15e1c:	2303      	movs	r3, #3
   15e1e:	f842 3f10 	str.w	r3, [r2, #16]!
   15e22:	4824      	ldr	r0, [pc, #144]	; (15eb4 <rx_work_handler+0x16c>)
   15e24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15e28:	f011 fe33 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15e2c:	46a5      	mov	sp, r4
		}
	}
}
   15e2e:	46bd      	mov	sp, r7
   15e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15e32:	8983      	ldrh	r3, [r0, #12]
   15e34:	2b01      	cmp	r3, #1
   15e36:	d80c      	bhi.n	15e52 <rx_work_handler+0x10a>
   15e38:	4a1a      	ldr	r2, [pc, #104]	; (15ea4 <rx_work_handler+0x15c>)
   15e3a:	491b      	ldr	r1, [pc, #108]	; (15ea8 <rx_work_handler+0x160>)
   15e3c:	481b      	ldr	r0, [pc, #108]	; (15eac <rx_work_handler+0x164>)
   15e3e:	f640 1359 	movw	r3, #2393	; 0x959
   15e42:	f010 fec5 	bl	26bd0 <assert_print>
   15e46:	4040      	eors	r0, r0
   15e48:	f380 8811 	msr	BASEPRI, r0
   15e4c:	f04f 0003 	mov.w	r0, #3
   15e50:	df02      	svc	2
   15e52:	2102      	movs	r1, #2
   15e54:	f104 0008 	add.w	r0, r4, #8
   15e58:	f013 feee 	bl	29c38 <net_buf_simple_pull_mem>
   15e5c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15e5e:	7800      	ldrb	r0, [r0, #0]
   15e60:	f011 fdd5 	bl	27a0e <bt_hci_evt_get_flags>
   15e64:	0783      	lsls	r3, r0, #30
   15e66:	d40c      	bmi.n	15e82 <rx_work_handler+0x13a>
   15e68:	4a0e      	ldr	r2, [pc, #56]	; (15ea4 <rx_work_handler+0x15c>)
   15e6a:	4918      	ldr	r1, [pc, #96]	; (15ecc <rx_work_handler+0x184>)
   15e6c:	480f      	ldr	r0, [pc, #60]	; (15eac <rx_work_handler+0x164>)
   15e6e:	f640 135d 	movw	r3, #2397	; 0x95d
   15e72:	f010 fead 	bl	26bd0 <assert_print>
   15e76:	4040      	eors	r0, r0
   15e78:	f380 8811 	msr	BASEPRI, r0
   15e7c:	f04f 0003 	mov.w	r0, #3
   15e80:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15e82:	4a13      	ldr	r2, [pc, #76]	; (15ed0 <rx_work_handler+0x188>)
   15e84:	7828      	ldrb	r0, [r5, #0]
   15e86:	2306      	movs	r3, #6
   15e88:	4621      	mov	r1, r4
   15e8a:	f7ff ff31 	bl	15cf0 <handle_event>
		net_buf_unref(buf);
   15e8e:	4620      	mov	r0, r4
   15e90:	f007 fc60 	bl	1d754 <net_buf_unref>
		break;
   15e94:	e7b2      	b.n	15dfc <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15e96:	466d      	mov	r5, sp
   15e98:	b088      	sub	sp, #32
   15e9a:	466a      	mov	r2, sp
   15e9c:	490d      	ldr	r1, [pc, #52]	; (15ed4 <rx_work_handler+0x18c>)
   15e9e:	e79a      	b.n	15dd6 <rx_work_handler+0x8e>
   15ea0:	2000048c 	.word	0x2000048c
   15ea4:	0002cfeb 	.word	0x0002cfeb
   15ea8:	0002d01f 	.word	0x0002d01f
   15eac:	0002d038 	.word	0x0002d038
   15eb0:	0002d055 	.word	0x0002d055
   15eb4:	0002b504 	.word	0x0002b504
   15eb8:	0002d079 	.word	0x0002d079
   15ebc:	20000350 	.word	0x20000350
   15ec0:	20000688 	.word	0x20000688
   15ec4:	20001e48 	.word	0x20001e48
   15ec8:	0002cf42 	.word	0x0002cf42
   15ecc:	0002d09b 	.word	0x0002d09b
   15ed0:	0002bc84 	.word	0x0002bc84
   15ed4:	0002d0c9 	.word	0x0002d0c9

00015ed8 <hci_le_meta_event>:
{
   15ed8:	b510      	push	{r4, lr}
   15eda:	2101      	movs	r1, #1
   15edc:	4604      	mov	r4, r0
   15ede:	3008      	adds	r0, #8
   15ee0:	f013 feaa 	bl	29c38 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15ee4:	4621      	mov	r1, r4
   15ee6:	4a03      	ldr	r2, [pc, #12]	; (15ef4 <hci_le_meta_event+0x1c>)
   15ee8:	7800      	ldrb	r0, [r0, #0]
}
   15eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15eee:	230a      	movs	r3, #10
   15ef0:	f7ff befe 	b.w	15cf0 <handle_event>
   15ef4:	0002bc14 	.word	0x0002bc14

00015ef8 <le_remote_feat_complete>:
{
   15ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15efa:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15efc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   15f00:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15f02:	4630      	mov	r0, r6
   15f04:	f002 f85e 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   15f08:	4604      	mov	r4, r0
   15f0a:	b980      	cbnz	r0, 15f2e <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15f0c:	466c      	mov	r4, sp
   15f0e:	b088      	sub	sp, #32
   15f10:	466a      	mov	r2, sp
   15f12:	4b0f      	ldr	r3, [pc, #60]	; (15f50 <le_remote_feat_complete+0x58>)
   15f14:	480f      	ldr	r0, [pc, #60]	; (15f54 <le_remote_feat_complete+0x5c>)
   15f16:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15f1a:	2303      	movs	r3, #3
   15f1c:	f842 3f10 	str.w	r3, [r2, #16]!
   15f20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f24:	f011 fdb5 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15f28:	46a5      	mov	sp, r4
}
   15f2a:	46bd      	mov	sp, r7
   15f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   15f2e:	782b      	ldrb	r3, [r5, #0]
   15f30:	b923      	cbnz	r3, 15f3c <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   15f32:	2208      	movs	r2, #8
   15f34:	1ce9      	adds	r1, r5, #3
   15f36:	30ac      	adds	r0, #172	; 0xac
   15f38:	f011 fc79 	bl	2782e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   15f40:	1d20      	adds	r0, r4, #4
   15f42:	f011 fd92 	bl	27a6a <atomic_or>
	bt_conn_unref(conn);
   15f46:	4620      	mov	r0, r4
   15f48:	f011 ff92 	bl	27e70 <bt_conn_unref>
   15f4c:	e7ed      	b.n	15f2a <le_remote_feat_complete+0x32>
   15f4e:	bf00      	nop
   15f50:	0002cf1e 	.word	0x0002cf1e
   15f54:	0002b504 	.word	0x0002b504

00015f58 <hci_cmd_done>:
{
   15f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f5c:	4606      	mov	r6, r0
   15f5e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f60:	7990      	ldrb	r0, [r2, #6]
   15f62:	4d43      	ldr	r5, [pc, #268]	; (16070 <hci_cmd_done+0x118>)
{
   15f64:	4688      	mov	r8, r1
   15f66:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f68:	f007 fb30 	bl	1d5cc <net_buf_pool_get>
   15f6c:	4285      	cmp	r5, r0
   15f6e:	d018      	beq.n	15fa2 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15f70:	79a4      	ldrb	r4, [r4, #6]
   15f72:	4620      	mov	r0, r4
   15f74:	f007 fb2a 	bl	1d5cc <net_buf_pool_get>
   15f78:	46e8      	mov	r8, sp
   15f7a:	b08a      	sub	sp, #40	; 0x28
   15f7c:	466a      	mov	r2, sp
   15f7e:	4b3d      	ldr	r3, [pc, #244]	; (16074 <hci_cmd_done+0x11c>)
   15f80:	6255      	str	r5, [r2, #36]	; 0x24
   15f82:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15f86:	2306      	movs	r3, #6
   15f88:	e9c2 4007 	strd	r4, r0, [r2, #28]
   15f8c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   15f90:	f842 3f10 	str.w	r3, [r2, #16]!
   15f94:	4838      	ldr	r0, [pc, #224]	; (16078 <hci_cmd_done+0x120>)
   15f96:	f011 fd7c 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15f9a:	46c5      	mov	sp, r8
}
   15f9c:	46bd      	mov	sp, r7
   15f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   15fa2:	4620      	mov	r0, r4
   15fa4:	f007 fb1a 	bl	1d5dc <net_buf_id>
   15fa8:	4d34      	ldr	r5, [pc, #208]	; (1607c <hci_cmd_done+0x124>)
   15faa:	f04f 090c 	mov.w	r9, #12
   15fae:	fb09 5000 	mla	r0, r9, r0, r5
   15fb2:	8843      	ldrh	r3, [r0, #2]
   15fb4:	42b3      	cmp	r3, r6
   15fb6:	d016      	beq.n	15fe6 <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15fb8:	4620      	mov	r0, r4
   15fba:	f007 fb0f 	bl	1d5dc <net_buf_id>
   15fbe:	fb09 5500 	mla	r5, r9, r0, r5
   15fc2:	466c      	mov	r4, sp
   15fc4:	b088      	sub	sp, #32
   15fc6:	886b      	ldrh	r3, [r5, #2]
   15fc8:	466a      	mov	r2, sp
   15fca:	492d      	ldr	r1, [pc, #180]	; (16080 <hci_cmd_done+0x128>)
   15fcc:	61d3      	str	r3, [r2, #28]
   15fce:	2304      	movs	r3, #4
   15fd0:	e9c2 1605 	strd	r1, r6, [r2, #20]
   15fd4:	4828      	ldr	r0, [pc, #160]	; (16078 <hci_cmd_done+0x120>)
   15fd6:	f842 3f10 	str.w	r3, [r2, #16]!
   15fda:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15fde:	f011 fd58 	bl	27a92 <z_log_msg_static_create.constprop.0>
   15fe2:	46a5      	mov	sp, r4
		return;
   15fe4:	e7da      	b.n	15f9c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   15fe6:	4e27      	ldr	r6, [pc, #156]	; (16084 <hci_cmd_done+0x12c>)
   15fe8:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   15fec:	b120      	cbz	r0, 15ff8 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   15fee:	f007 fbb1 	bl	1d754 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15ff2:	2300      	movs	r3, #0
   15ff4:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15ff8:	4620      	mov	r0, r4
   15ffa:	f007 faef 	bl	1d5dc <net_buf_id>
   15ffe:	260c      	movs	r6, #12
   16000:	fb06 5000 	mla	r0, r6, r0, r5
   16004:	6843      	ldr	r3, [r0, #4]
   16006:	b1ab      	cbz	r3, 16034 <hci_cmd_done+0xdc>
   16008:	f1b8 0f00 	cmp.w	r8, #0
   1600c:	d112      	bne.n	16034 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1600e:	4620      	mov	r0, r4
   16010:	f007 fae4 	bl	1d5dc <net_buf_id>
   16014:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16018:	2101      	movs	r1, #1
   1601a:	6842      	ldr	r2, [r0, #4]
   1601c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   16020:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   16022:	f003 061f 	and.w	r6, r3, #31
   16026:	40b1      	lsls	r1, r6
	if (val) {
   16028:	095b      	lsrs	r3, r3, #5
   1602a:	b1da      	cbz	r2, 16064 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1602c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16030:	f011 fd1b 	bl	27a6a <atomic_or>
	if (cmd(buf)->sync) {
   16034:	4620      	mov	r0, r4
   16036:	f007 fad1 	bl	1d5dc <net_buf_id>
   1603a:	260c      	movs	r6, #12
   1603c:	fb06 5000 	mla	r0, r6, r0, r5
   16040:	6883      	ldr	r3, [r0, #8]
   16042:	2b00      	cmp	r3, #0
   16044:	d0aa      	beq.n	15f9c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   16046:	4620      	mov	r0, r4
   16048:	f007 fac8 	bl	1d5dc <net_buf_id>
   1604c:	4370      	muls	r0, r6
   1604e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16052:	4620      	mov	r0, r4
   16054:	f007 fac2 	bl	1d5dc <net_buf_id>
   16058:	fb06 5500 	mla	r5, r6, r0, r5
   1605c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1605e:	f00b fb75 	bl	2174c <z_impl_k_sem_give>
}
   16062:	e79b      	b.n	15f9c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16064:	43c9      	mvns	r1, r1
   16066:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1606a:	f011 fd15 	bl	27a98 <atomic_and.isra.0>
   1606e:	e7e1      	b.n	16034 <hci_cmd_done+0xdc>
   16070:	20000b7c 	.word	0x20000b7c
   16074:	0002d0dd 	.word	0x0002d0dd
   16078:	0002b504 	.word	0x0002b504
   1607c:	20002cd4 	.word	0x20002cd4
   16080:	0002d112 	.word	0x0002d112
   16084:	20000350 	.word	0x20000350

00016088 <hci_cmd_status>:
{
   16088:	b538      	push	{r3, r4, r5, lr}
   1608a:	2104      	movs	r1, #4
   1608c:	4604      	mov	r4, r0
   1608e:	3008      	adds	r0, #8
   16090:	f013 fdd2 	bl	29c38 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16094:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16096:	7801      	ldrb	r1, [r0, #0]
   16098:	8840      	ldrh	r0, [r0, #2]
   1609a:	4622      	mov	r2, r4
   1609c:	f7ff ff5c 	bl	15f58 <hci_cmd_done>
	if (ncmd) {
   160a0:	b125      	cbz	r5, 160ac <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   160a2:	4803      	ldr	r0, [pc, #12]	; (160b0 <hci_cmd_status+0x28>)
}
   160a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   160a8:	f00b bb50 	b.w	2174c <z_impl_k_sem_give>
   160ac:	bd38      	pop	{r3, r4, r5, pc}
   160ae:	bf00      	nop
   160b0:	20000470 	.word	0x20000470

000160b4 <hci_cmd_complete>:
{
   160b4:	b538      	push	{r3, r4, r5, lr}
   160b6:	2103      	movs	r1, #3
   160b8:	4604      	mov	r4, r0
   160ba:	3008      	adds	r0, #8
   160bc:	f013 fdbc 	bl	29c38 <net_buf_simple_pull_mem>
	status = buf->data[0];
   160c0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   160c2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   160c4:	7819      	ldrb	r1, [r3, #0]
   160c6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   160ca:	4622      	mov	r2, r4
   160cc:	f7ff ff44 	bl	15f58 <hci_cmd_done>
	if (ncmd) {
   160d0:	b125      	cbz	r5, 160dc <hci_cmd_complete+0x28>
   160d2:	4803      	ldr	r0, [pc, #12]	; (160e0 <hci_cmd_complete+0x2c>)
}
   160d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   160d8:	f00b bb38 	b.w	2174c <z_impl_k_sem_give>
   160dc:	bd38      	pop	{r3, r4, r5, pc}
   160de:	bf00      	nop
   160e0:	20000470 	.word	0x20000470

000160e4 <hci_num_completed_packets>:
{
   160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   160ea:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   160ec:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   160f0:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 161ec <hci_num_completed_packets+0x108>
{
   160f4:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   160f6:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   160f8:	f898 3000 	ldrb.w	r3, [r8]
   160fc:	429d      	cmp	r5, r3
   160fe:	db03      	blt.n	16108 <hci_num_completed_packets+0x24>
}
   16100:	371c      	adds	r7, #28
   16102:	46bd      	mov	sp, r7
   16104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16108:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   1610c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16110:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16114:	4658      	mov	r0, fp
   16116:	f001 ff55 	bl	17fc4 <bt_conn_lookup_handle>
		if (!conn) {
   1611a:	4604      	mov	r4, r0
   1611c:	b1d8      	cbz	r0, 16156 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   1611e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   16122:	2e00      	cmp	r6, #0
   16124:	d040      	beq.n	161a8 <hci_num_completed_packets+0xc4>
	__asm__ volatile(
   16126:	f04f 0340 	mov.w	r3, #64	; 0x40
   1612a:	f3ef 8211 	mrs	r2, BASEPRI
   1612e:	f383 8812 	msr	BASEPRI_MAX, r3
   16132:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16136:	69e3      	ldr	r3, [r4, #28]
   16138:	b1f3      	cbz	r3, 16178 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   1613a:	3b01      	subs	r3, #1
   1613c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1613e:	f382 8811 	msr	BASEPRI, r2
   16142:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16146:	4620      	mov	r0, r4
   16148:	f001 fe00 	bl	17d4c <bt_conn_get_pkts>
   1614c:	3e01      	subs	r6, #1
   1614e:	f00b fafd 	bl	2174c <z_impl_k_sem_give>
   16152:	b2b6      	uxth	r6, r6
   16154:	e7e5      	b.n	16122 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   16156:	466c      	mov	r4, sp
   16158:	b088      	sub	sp, #32
   1615a:	466a      	mov	r2, sp
   1615c:	4b24      	ldr	r3, [pc, #144]	; (161f0 <hci_num_completed_packets+0x10c>)
   1615e:	4825      	ldr	r0, [pc, #148]	; (161f4 <hci_num_completed_packets+0x110>)
   16160:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   16164:	2303      	movs	r3, #3
   16166:	f842 3f10 	str.w	r3, [r2, #16]!
   1616a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1616e:	f011 fc90 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16172:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   16174:	3501      	adds	r5, #1
   16176:	e7bf      	b.n	160f8 <hci_num_completed_packets+0x14>
   16178:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1617a:	b12b      	cbz	r3, 16188 <hci_num_completed_packets+0xa4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1617c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1617e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16180:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16182:	428b      	cmp	r3, r1
	list->tail = node;
   16184:	bf08      	it	eq
   16186:	61a0      	streq	r0, [r4, #24]
   16188:	f382 8811 	msr	BASEPRI, r2
   1618c:	f3bf 8f6f 	isb	sy
			if (!node) {
   16190:	b973      	cbnz	r3, 161b0 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
   16192:	2302      	movs	r3, #2
   16194:	4817      	ldr	r0, [pc, #92]	; (161f4 <hci_num_completed_packets+0x110>)
   16196:	f8c7 a014 	str.w	sl, [r7, #20]
   1619a:	f107 0210 	add.w	r2, r7, #16
   1619e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   161a2:	613b      	str	r3, [r7, #16]
   161a4:	f011 fc75 	bl	27a92 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   161a8:	4620      	mov	r0, r4
   161aa:	f011 fe61 	bl	27e70 <bt_conn_unref>
   161ae:	e7e1      	b.n	16174 <hci_num_completed_packets+0x90>
	__asm__ volatile(
   161b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   161b4:	f3ef 8111 	mrs	r1, BASEPRI
   161b8:	f382 8812 	msr	BASEPRI_MAX, r2
   161bc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   161c0:	68da      	ldr	r2, [r3, #12]
   161c2:	61e2      	str	r2, [r4, #28]
	return list->tail;
   161c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   161c6:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   161ca:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   161ce:	b94a      	cbnz	r2, 161e4 <hci_num_completed_packets+0x100>
	list->head = node;
   161d0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   161d4:	f381 8811 	msr	BASEPRI, r1
   161d8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   161dc:	4658      	mov	r0, fp
   161de:	f00b fc43 	bl	21a68 <k_work_submit>
   161e2:	e7b0      	b.n	16146 <hci_num_completed_packets+0x62>
	parent->next = child;
   161e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   161e6:	6263      	str	r3, [r4, #36]	; 0x24
}
   161e8:	e7f4      	b.n	161d4 <hci_num_completed_packets+0xf0>
   161ea:	bf00      	nop
   161ec:	0002d161 	.word	0x0002d161
   161f0:	0002d145 	.word	0x0002d145
   161f4:	0002b504 	.word	0x0002b504

000161f8 <bt_hci_cmd_state_set_init>:
{
   161f8:	b510      	push	{r4, lr}
	state->bit = bit;
   161fa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   161fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16202:	720b      	strb	r3, [r1, #8]
{
   16204:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   16206:	f007 f9e9 	bl	1d5dc <net_buf_id>
   1620a:	4b03      	ldr	r3, [pc, #12]	; (16218 <bt_hci_cmd_state_set_init+0x20>)
   1620c:	220c      	movs	r2, #12
   1620e:	fb02 3300 	mla	r3, r2, r0, r3
   16212:	605c      	str	r4, [r3, #4]
}
   16214:	bd10      	pop	{r4, pc}
   16216:	bf00      	nop
   16218:	20002cd4 	.word	0x20002cd4

0001621c <bt_hci_cmd_create>:
{
   1621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16220:	f04f 32ff 	mov.w	r2, #4294967295
   16224:	f04f 33ff 	mov.w	r3, #4294967295
   16228:	4606      	mov	r6, r0
   1622a:	4817      	ldr	r0, [pc, #92]	; (16288 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   1622c:	4d17      	ldr	r5, [pc, #92]	; (1628c <bt_hci_cmd_create+0x70>)
{
   1622e:	460f      	mov	r7, r1
   16230:	f013 fc36 	bl	29aa0 <net_buf_alloc_fixed>
   16234:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16236:	f100 0a08 	add.w	sl, r0, #8
   1623a:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1623c:	f04f 0800 	mov.w	r8, #0
   16240:	4650      	mov	r0, sl
   16242:	f013 fc52 	bl	29aea <net_buf_simple_reserve>
   16246:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1624a:	4620      	mov	r0, r4
   1624c:	f007 f9c6 	bl	1d5dc <net_buf_id>
   16250:	f04f 090c 	mov.w	r9, #12
   16254:	fb09 5000 	mla	r0, r9, r0, r5
   16258:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1625a:	4620      	mov	r0, r4
   1625c:	f007 f9be 	bl	1d5dc <net_buf_id>
   16260:	fb09 5000 	mla	r0, r9, r0, r5
   16264:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16268:	4620      	mov	r0, r4
   1626a:	f007 f9b7 	bl	1d5dc <net_buf_id>
   1626e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   16272:	2103      	movs	r1, #3
   16274:	f8c5 8004 	str.w	r8, [r5, #4]
   16278:	4650      	mov	r0, sl
   1627a:	f013 fcb6 	bl	29bea <net_buf_simple_add>
	hdr->param_len = param_len;
   1627e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16280:	8006      	strh	r6, [r0, #0]
}
   16282:	4620      	mov	r0, r4
   16284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16288:	20000b7c 	.word	0x20000b7c
   1628c:	20002cd4 	.word	0x20002cd4

00016290 <bt_hci_cmd_send_sync>:
{
   16290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16294:	b087      	sub	sp, #28
   16296:	4680      	mov	r8, r0
   16298:	af00      	add	r7, sp, #0
   1629a:	4615      	mov	r5, r2
	if (!buf) {
   1629c:	460c      	mov	r4, r1
   1629e:	b921      	cbnz	r1, 162aa <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   162a0:	f7ff ffbc 	bl	1621c <bt_hci_cmd_create>
		if (!buf) {
   162a4:	4604      	mov	r4, r0
   162a6:	2800      	cmp	r0, #0
   162a8:	d05b      	beq.n	16362 <bt_hci_cmd_send_sync+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   162aa:	2201      	movs	r2, #1
   162ac:	2100      	movs	r1, #0
   162ae:	4638      	mov	r0, r7
   162b0:	f014 faf1 	bl	2a896 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   162b4:	4620      	mov	r0, r4
   162b6:	f007 f991 	bl	1d5dc <net_buf_id>
   162ba:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 16368 <bt_hci_cmd_send_sync+0xd8>
   162be:	230c      	movs	r3, #12
   162c0:	fb03 9000 	mla	r0, r3, r0, r9
   162c4:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   162c6:	4620      	mov	r0, r4
   162c8:	f013 fc69 	bl	29b9e <net_buf_ref>
   162cc:	4601      	mov	r1, r0
   162ce:	4827      	ldr	r0, [pc, #156]	; (1636c <bt_hci_cmd_send_sync+0xdc>)
   162d0:	f013 fc58 	bl	29b84 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   162d4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   162d8:	2300      	movs	r3, #0
   162da:	4638      	mov	r0, r7
   162dc:	f00b fa5c 	bl	21798 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   162e0:	4606      	mov	r6, r0
   162e2:	b180      	cbz	r0, 16306 <bt_hci_cmd_send_sync+0x76>
   162e4:	4a22      	ldr	r2, [pc, #136]	; (16370 <bt_hci_cmd_send_sync+0xe0>)
   162e6:	4923      	ldr	r1, [pc, #140]	; (16374 <bt_hci_cmd_send_sync+0xe4>)
   162e8:	4823      	ldr	r0, [pc, #140]	; (16378 <bt_hci_cmd_send_sync+0xe8>)
   162ea:	f240 1347 	movw	r3, #327	; 0x147
   162ee:	f010 fc6f 	bl	26bd0 <assert_print>
   162f2:	4822      	ldr	r0, [pc, #136]	; (1637c <bt_hci_cmd_send_sync+0xec>)
   162f4:	4631      	mov	r1, r6
   162f6:	f010 fc6b 	bl	26bd0 <assert_print>
   162fa:	4040      	eors	r0, r0
   162fc:	f380 8811 	msr	BASEPRI, r0
   16300:	f04f 0003 	mov.w	r0, #3
   16304:	df02      	svc	2
	status = cmd(buf)->status;
   16306:	4620      	mov	r0, r4
   16308:	f007 f968 	bl	1d5dc <net_buf_id>
   1630c:	230c      	movs	r3, #12
   1630e:	4358      	muls	r0, r3
   16310:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   16314:	b1e6      	cbz	r6, 16350 <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16316:	466d      	mov	r5, sp
   16318:	b088      	sub	sp, #32
   1631a:	466a      	mov	r2, sp
   1631c:	4b18      	ldr	r3, [pc, #96]	; (16380 <bt_hci_cmd_send_sync+0xf0>)
   1631e:	61d6      	str	r6, [r2, #28]
   16320:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16324:	2304      	movs	r3, #4
   16326:	f842 3f10 	str.w	r3, [r2, #16]!
   1632a:	4816      	ldr	r0, [pc, #88]	; (16384 <bt_hci_cmd_send_sync+0xf4>)
   1632c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16330:	f011 fbaf 	bl	27a92 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16334:	4620      	mov	r0, r4
   16336:	46ad      	mov	sp, r5
   16338:	f007 fa0c 	bl	1d754 <net_buf_unref>
			return -EIO;
   1633c:	2e09      	cmp	r6, #9
   1633e:	bf0c      	ite	eq
   16340:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   16344:	f06f 0004 	mvnne.w	r0, #4
}
   16348:	371c      	adds	r7, #28
   1634a:	46bd      	mov	sp, r7
   1634c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16350:	b115      	cbz	r5, 16358 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   16352:	602c      	str	r4, [r5, #0]
	return 0;
   16354:	4630      	mov	r0, r6
   16356:	e7f7      	b.n	16348 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   16358:	4620      	mov	r0, r4
   1635a:	f007 f9fb 	bl	1d754 <net_buf_unref>
	return 0;
   1635e:	4628      	mov	r0, r5
   16360:	e7f2      	b.n	16348 <bt_hci_cmd_send_sync+0xb8>
			return -ENOBUFS;
   16362:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16366:	e7ef      	b.n	16348 <bt_hci_cmd_send_sync+0xb8>
   16368:	20002cd4 	.word	0x20002cd4
   1636c:	20000494 	.word	0x20000494
   16370:	0002cfeb 	.word	0x0002cfeb
   16374:	0002d178 	.word	0x0002d178
   16378:	0002d038 	.word	0x0002d038
   1637c:	0002d181 	.word	0x0002d181
   16380:	0002d1a1 	.word	0x0002d1a1
   16384:	0002b504 	.word	0x0002b504

00016388 <hci_le_read_max_data_len>:
{
   16388:	b570      	push	{r4, r5, r6, lr}
   1638a:	b088      	sub	sp, #32
   1638c:	4606      	mov	r6, r0
   1638e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16390:	aa01      	add	r2, sp, #4
   16392:	2100      	movs	r1, #0
   16394:	f242 002f 	movw	r0, #8239	; 0x202f
   16398:	f7ff ff7a 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1639c:	4604      	mov	r4, r0
   1639e:	b160      	cbz	r0, 163ba <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
   163a0:	4b0b      	ldr	r3, [pc, #44]	; (163d0 <hci_le_read_max_data_len+0x48>)
   163a2:	9307      	str	r3, [sp, #28]
   163a4:	480b      	ldr	r0, [pc, #44]	; (163d4 <hci_le_read_max_data_len+0x4c>)
   163a6:	2302      	movs	r3, #2
   163a8:	aa06      	add	r2, sp, #24
   163aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   163ae:	9306      	str	r3, [sp, #24]
   163b0:	f011 fb6f 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   163b4:	4620      	mov	r0, r4
   163b6:	b008      	add	sp, #32
   163b8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   163ba:	9801      	ldr	r0, [sp, #4]
   163bc:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   163be:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   163c2:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   163c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   163c8:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   163ca:	f007 f9c3 	bl	1d754 <net_buf_unref>
	return 0;
   163ce:	e7f1      	b.n	163b4 <hci_le_read_max_data_len+0x2c>
   163d0:	0002d1bd 	.word	0x0002d1bd
   163d4:	0002b504 	.word	0x0002b504

000163d8 <bt_hci_le_rand>:
{
   163d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   163da:	4b14      	ldr	r3, [pc, #80]	; (1642c <bt_hci_le_rand+0x54>)
   163dc:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   163e0:	2b00      	cmp	r3, #0
{
   163e2:	4605      	mov	r5, r0
   163e4:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   163e6:	da1d      	bge.n	16424 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   163e8:	b914      	cbnz	r4, 163f0 <bt_hci_le_rand+0x18>
	return 0;
   163ea:	4620      	mov	r0, r4
}
   163ec:	b002      	add	sp, #8
   163ee:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   163f0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   163f2:	aa01      	add	r2, sp, #4
   163f4:	f04f 0100 	mov.w	r1, #0
   163f8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   163fc:	4626      	mov	r6, r4
   163fe:	bf28      	it	cs
   16400:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16402:	f7ff ff45 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   16406:	2800      	cmp	r0, #0
   16408:	d1f0      	bne.n	163ec <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1640a:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   1640c:	6899      	ldr	r1, [r3, #8]
   1640e:	4632      	mov	r2, r6
   16410:	3101      	adds	r1, #1
   16412:	4628      	mov	r0, r5
   16414:	f011 fa0b 	bl	2782e <memcpy>
		net_buf_unref(rsp);
   16418:	9801      	ldr	r0, [sp, #4]
   1641a:	f007 f99b 	bl	1d754 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1641e:	4435      	add	r5, r6
		len -= count;
   16420:	1ba4      	subs	r4, r4, r6
   16422:	e7e1      	b.n	163e8 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16424:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16428:	e7e0      	b.n	163ec <bt_hci_le_rand+0x14>
   1642a:	bf00      	nop
   1642c:	20000350 	.word	0x20000350

00016430 <bt_hci_le_enh_conn_complete>:
{
   16430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16434:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16436:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   1643a:	4abf      	ldr	r2, [pc, #764]	; (16738 <bt_hci_le_enh_conn_complete+0x308>)
	handle |= ~BT_ACL_HANDLE_MASK;
   1643c:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   16440:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   16442:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   16446:	b29b      	uxth	r3, r3
   16448:	4299      	cmp	r1, r3
{
   1644a:	4605      	mov	r5, r0
   1644c:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   16450:	bf08      	it	eq
   16452:	8016      	strheq	r6, [r2, #0]
{
   16454:	af02      	add	r7, sp, #8
			return true;
   16456:	bf08      	it	eq
   16458:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   1645a:	f001 f81f 	bl	1749c <bt_id_pending_keys_update>
	if (evt->status) {
   1645e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16460:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   16464:	b3a4      	cbz	r4, 164d0 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16466:	2c3c      	cmp	r4, #60	; 0x3c
   16468:	d122      	bne.n	164b0 <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1646a:	f001 fa53 	bl	17914 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1646e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16472:	3010      	adds	r0, #16
   16474:	f011 fb10 	bl	27a98 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16478:	2000      	movs	r0, #0
   1647a:	f7ff faaf 	bl	159dc <find_pending_connect.part.0>
		if (!conn) {
   1647e:	4605      	mov	r5, r0
   16480:	b970      	cbnz	r0, 164a0 <bt_hci_le_enh_conn_complete+0x70>
			BT_ERR("No pending peripheral connection");
   16482:	4bae      	ldr	r3, [pc, #696]	; (1673c <bt_hci_le_enh_conn_complete+0x30c>)
   16484:	62fb      	str	r3, [r7, #44]	; 0x2c
   16486:	48ae      	ldr	r0, [pc, #696]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   16488:	2302      	movs	r3, #2
   1648a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1648e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16492:	62bb      	str	r3, [r7, #40]	; 0x28
   16494:	f011 fafd 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   16498:	3734      	adds	r7, #52	; 0x34
   1649a:	46bd      	mov	sp, r7
   1649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   164a0:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   164a2:	2100      	movs	r1, #0
   164a4:	f001 fd96 	bl	17fd4 <bt_conn_set_state>
		bt_conn_unref(conn);
   164a8:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   164aa:	f011 fce1 	bl	27e70 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   164ae:	e7f3      	b.n	16498 <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   164b0:	466d      	mov	r5, sp
   164b2:	b088      	sub	sp, #32
   164b4:	aa02      	add	r2, sp, #8
   164b6:	4ba3      	ldr	r3, [pc, #652]	; (16744 <bt_hci_le_enh_conn_complete+0x314>)
   164b8:	48a1      	ldr	r0, [pc, #644]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   164ba:	e9c2 3405 	strd	r3, r4, [r2, #20]
   164be:	2303      	movs	r3, #3
   164c0:	f842 3f10 	str.w	r3, [r2, #16]!
   164c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   164c8:	f011 fae3 	bl	27a92 <z_log_msg_static_create.constprop.0>
   164cc:	46ad      	mov	sp, r5
		return;
   164ce:	e7e3      	b.n	16498 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   164d0:	792b      	ldrb	r3, [r5, #4]
   164d2:	3b02      	subs	r3, #2
   164d4:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   164d6:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   164da:	d840      	bhi.n	1655e <bt_hci_le_enh_conn_complete+0x12e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   164dc:	4651      	mov	r1, sl
   164de:	f107 0018 	add.w	r0, r7, #24
   164e2:	f011 fabf 	bl	27a64 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   164e6:	7e3b      	ldrb	r3, [r7, #24]
	memcpy(dst, src, sizeof(*dst));
   164e8:	2206      	movs	r2, #6
   164ea:	3b02      	subs	r3, #2
   164ec:	f105 0111 	add.w	r1, r5, #17
   164f0:	f107 0011 	add.w	r0, r7, #17
   164f4:	763b      	strb	r3, [r7, #24]
   164f6:	f011 f99a 	bl	2782e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   164fa:	2301      	movs	r3, #1
   164fc:	743b      	strb	r3, [r7, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   164fe:	78eb      	ldrb	r3, [r5, #3]
   16500:	2b01      	cmp	r3, #1
   16502:	d113      	bne.n	1652c <bt_hci_le_enh_conn_complete+0xfc>
   16504:	f107 0018 	add.w	r0, r7, #24
   16508:	f7ff fa68 	bl	159dc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1650c:	78eb      	ldrb	r3, [r5, #3]
   1650e:	2b01      	cmp	r3, #1
   16510:	4604      	mov	r4, r0
   16512:	d10a      	bne.n	1652a <bt_hci_le_enh_conn_complete+0xfa>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16514:	f001 f9fe 	bl	17914 <bt_le_adv_lookup_legacy>
   16518:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1651c:	4683      	mov	fp, r0
   1651e:	3010      	adds	r0, #16
   16520:	f011 faba 	bl	27a98 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16524:	4658      	mov	r0, fp
   16526:	f011 fc67 	bl	27df8 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1652a:	bb6c      	cbnz	r4, 16588 <bt_hci_le_enh_conn_complete+0x158>
		BT_ERR("No pending conn for peer %s",
   1652c:	4650      	mov	r0, sl
   1652e:	f7fe ff45 	bl	153bc <bt_addr_le_str_real>
   16532:	466c      	mov	r4, sp
   16534:	b088      	sub	sp, #32
   16536:	aa02      	add	r2, sp, #8
   16538:	4b83      	ldr	r3, [pc, #524]	; (16748 <bt_hci_le_enh_conn_complete+0x318>)
   1653a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1653e:	2302      	movs	r3, #2
   16540:	7713      	strb	r3, [r2, #28]
   16542:	4b82      	ldr	r3, [pc, #520]	; (1674c <bt_hci_le_enh_conn_complete+0x31c>)
   16544:	f842 3f10 	str.w	r3, [r2, #16]!
   16548:	487d      	ldr	r0, [pc, #500]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   1654a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1654e:	f011 faa0 	bl	27a92 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16552:	211f      	movs	r1, #31
   16554:	46a5      	mov	sp, r4
   16556:	4640      	mov	r0, r8
   16558:	f011 faba 	bl	27ad0 <bt_hci_disconnect>
		return;
   1655c:	e79c      	b.n	16498 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1655e:	78eb      	ldrb	r3, [r5, #3]
   16560:	2b01      	cmp	r3, #1
   16562:	bf04      	itt	eq
   16564:	4b7a      	ldreq	r3, [pc, #488]	; (16750 <bt_hci_le_enh_conn_complete+0x320>)
   16566:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1656a:	4651      	mov	r1, sl
   1656c:	4620      	mov	r0, r4
   1656e:	f011 fbec 	bl	27d4a <bt_lookup_id_addr>
   16572:	4601      	mov	r1, r0
   16574:	f107 0018 	add.w	r0, r7, #24
   16578:	f011 fa74 	bl	27a64 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1657c:	4651      	mov	r1, sl
   1657e:	f107 0010 	add.w	r0, r7, #16
   16582:	f011 fa6f 	bl	27a64 <bt_addr_le_copy>
   16586:	e7ba      	b.n	164fe <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   16588:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1658a:	f107 0118 	add.w	r1, r7, #24
	conn->handle = handle;
   1658e:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16592:	f011 fa67 	bl	27a64 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16596:	7e2a      	ldrb	r2, [r5, #24]
   16598:	7deb      	ldrb	r3, [r5, #23]
   1659a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1659e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   165a2:	7eaa      	ldrb	r2, [r5, #26]
   165a4:	7e6b      	ldrb	r3, [r5, #25]
   165a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   165aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   165ae:	7eeb      	ldrb	r3, [r5, #27]
   165b0:	7f2a      	ldrb	r2, [r5, #28]
   165b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   165b6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   165ba:	f895 9003 	ldrb.w	r9, [r5, #3]
   165be:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   165c2:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   165c4:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   165c8:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   165ca:	d12f      	bne.n	1662c <bt_hci_le_enh_conn_complete+0x1fc>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   165cc:	f107 0110 	add.w	r1, r7, #16
   165d0:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   165d4:	f011 fa46 	bl	27a64 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   165d8:	f001 f99c 	bl	17914 <bt_le_adv_lookup_legacy>
   165dc:	f3bf 8f5b 	dmb	ish
   165e0:	6902      	ldr	r2, [r0, #16]
   165e2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 16750 <bt_hci_le_enh_conn_complete+0x320>
   165e6:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   165ea:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   165ee:	f3c2 3300 	ubfx	r3, r2, #12, #1
   165f2:	f040 80b5 	bne.w	16760 <bt_hci_le_enh_conn_complete+0x330>
				if (bt_addr_cmp(&evt->local_rpa,
   165f6:	350b      	adds	r5, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   165f8:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
	return memcmp(a, b, sizeof(*a));
   165fc:	2206      	movs	r2, #6
   165fe:	f107 0108 	add.w	r1, r7, #8
   16602:	4628      	mov	r0, r5
						BT_ADDR_ANY) != 0) {
   16604:	60bb      	str	r3, [r7, #8]
   16606:	81bb      	strh	r3, [r7, #12]
   16608:	f011 f8e8 	bl	277dc <memcmp>
   1660c:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   1660e:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   16610:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   16614:	2b00      	cmp	r3, #0
   16616:	f000 808c 	beq.w	16732 <bt_hci_le_enh_conn_complete+0x302>
   1661a:	4629      	mov	r1, r5
   1661c:	f011 f907 	bl	2782e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16620:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   16624:	065d      	lsls	r5, r3, #25
   16626:	d501      	bpl.n	1662c <bt_hci_le_enh_conn_complete+0x1fc>
			bt_le_adv_resume();
   16628:	f001 f978 	bl	1791c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1662c:	2107      	movs	r1, #7
   1662e:	4620      	mov	r0, r4
   16630:	f001 fcd0 	bl	17fd4 <bt_conn_set_state>
	if (is_disconnected) {
   16634:	b11e      	cbz	r6, 1663e <bt_hci_le_enh_conn_complete+0x20e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16636:	2101      	movs	r1, #1
   16638:	4620      	mov	r0, r4
   1663a:	f001 fccb 	bl	17fd4 <bt_conn_set_state>
	bt_conn_connected(conn);
   1663e:	4620      	mov	r0, r4
   16640:	f011 fc52 	bl	27ee8 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16644:	7b63      	ldrb	r3, [r4, #13]
   16646:	2b07      	cmp	r3, #7
   16648:	d171      	bne.n	1672e <bt_hci_le_enh_conn_complete+0x2fe>
   1664a:	f3bf 8f5b 	dmb	ish
   1664e:	6863      	ldr	r3, [r4, #4]
   16650:	4d3f      	ldr	r5, [pc, #252]	; (16750 <bt_hci_le_enh_conn_complete+0x320>)
   16652:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16656:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1665a:	d129      	bne.n	166b0 <bt_hci_le_enh_conn_complete+0x280>
   1665c:	78e3      	ldrb	r3, [r4, #3]
   1665e:	b11b      	cbz	r3, 16668 <bt_hci_le_enh_conn_complete+0x238>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16660:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16664:	0718      	lsls	r0, r3, #28
   16666:	d523      	bpl.n	166b0 <bt_hci_le_enh_conn_complete+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16668:	2102      	movs	r1, #2
   1666a:	f242 0016 	movw	r0, #8214	; 0x2016
   1666e:	f7ff fdd5 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   16672:	4606      	mov	r6, r0
   16674:	2800      	cmp	r0, #0
   16676:	d07c      	beq.n	16772 <bt_hci_le_enh_conn_complete+0x342>
   16678:	2102      	movs	r1, #2
   1667a:	3008      	adds	r0, #8
   1667c:	f013 fab5 	bl	29bea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16680:	8823      	ldrh	r3, [r4, #0]
   16682:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16684:	2200      	movs	r2, #0
   16686:	4631      	mov	r1, r6
   16688:	f242 0016 	movw	r0, #8214	; 0x2016
   1668c:	f7ff fe00 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   16690:	b170      	cbz	r0, 166b0 <bt_hci_le_enh_conn_complete+0x280>
			BT_ERR("Failed read remote features (%d)", err);
   16692:	466e      	mov	r6, sp
   16694:	b088      	sub	sp, #32
   16696:	aa02      	add	r2, sp, #8
   16698:	4b2e      	ldr	r3, [pc, #184]	; (16754 <bt_hci_le_enh_conn_complete+0x324>)
   1669a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1669e:	2303      	movs	r3, #3
   166a0:	f842 3f10 	str.w	r3, [r2, #16]!
   166a4:	4826      	ldr	r0, [pc, #152]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   166a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   166aa:	f011 f9f2 	bl	27a92 <z_log_msg_static_create.constprop.0>
   166ae:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   166b0:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   166b4:	07d9      	lsls	r1, r3, #31
   166b6:	d516      	bpl.n	166e6 <bt_hci_le_enh_conn_complete+0x2b6>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   166b8:	2100      	movs	r1, #0
   166ba:	2302      	movs	r3, #2
   166bc:	9100      	str	r1, [sp, #0]
   166be:	461a      	mov	r2, r3
   166c0:	4620      	mov	r0, r4
   166c2:	f011 fa3e 	bl	27b42 <bt_le_set_phy>
		if (err) {
   166c6:	b170      	cbz	r0, 166e6 <bt_hci_le_enh_conn_complete+0x2b6>
			BT_ERR("Failed LE Set PHY (%d)", err);
   166c8:	466e      	mov	r6, sp
   166ca:	b088      	sub	sp, #32
   166cc:	aa02      	add	r2, sp, #8
   166ce:	4b22      	ldr	r3, [pc, #136]	; (16758 <bt_hci_le_enh_conn_complete+0x328>)
   166d0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   166d4:	2303      	movs	r3, #3
   166d6:	f842 3f10 	str.w	r3, [r2, #16]!
   166da:	4819      	ldr	r0, [pc, #100]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   166dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   166e0:	f011 f9d7 	bl	27a92 <z_log_msg_static_create.constprop.0>
   166e4:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   166e6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   166ea:	069a      	lsls	r2, r3, #26
   166ec:	d51f      	bpl.n	1672e <bt_hci_le_enh_conn_complete+0x2fe>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   166ee:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   166f2:	689b      	ldr	r3, [r3, #8]
   166f4:	079b      	lsls	r3, r3, #30
   166f6:	d51a      	bpl.n	1672e <bt_hci_le_enh_conn_complete+0x2fe>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   166f8:	f107 0108 	add.w	r1, r7, #8
   166fc:	1db8      	adds	r0, r7, #6
   166fe:	f7ff fe43 	bl	16388 <hci_le_read_max_data_len>
			if (!err) {
   16702:	b9a0      	cbnz	r0, 1672e <bt_hci_le_enh_conn_complete+0x2fe>
				err = bt_le_set_data_len(conn,
   16704:	893a      	ldrh	r2, [r7, #8]
   16706:	88f9      	ldrh	r1, [r7, #6]
   16708:	4620      	mov	r0, r4
   1670a:	f011 f9fc 	bl	27b06 <bt_le_set_data_len>
				if (err) {
   1670e:	b170      	cbz	r0, 1672e <bt_hci_le_enh_conn_complete+0x2fe>
					BT_ERR("Failed to set data len (%d)", err);
   16710:	466d      	mov	r5, sp
   16712:	b088      	sub	sp, #32
   16714:	aa02      	add	r2, sp, #8
   16716:	4b11      	ldr	r3, [pc, #68]	; (1675c <bt_hci_le_enh_conn_complete+0x32c>)
   16718:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1671c:	2303      	movs	r3, #3
   1671e:	f842 3f10 	str.w	r3, [r2, #16]!
   16722:	4807      	ldr	r0, [pc, #28]	; (16740 <bt_hci_le_enh_conn_complete+0x310>)
   16724:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16728:	f011 f9b3 	bl	27a92 <z_log_msg_static_create.constprop.0>
   1672c:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   1672e:	4620      	mov	r0, r4
   16730:	e6bb      	b.n	164aa <bt_hci_le_enh_conn_complete+0x7a>
   16732:	f108 0161 	add.w	r1, r8, #97	; 0x61
   16736:	e771      	b.n	1661c <bt_hci_le_enh_conn_complete+0x1ec>
   16738:	20003c94 	.word	0x20003c94
   1673c:	0002d1dd 	.word	0x0002d1dd
   16740:	0002b504 	.word	0x0002b504
   16744:	0002d1fe 	.word	0x0002d1fe
   16748:	0002d217 	.word	0x0002d217
   1674c:	01000003 	.word	0x01000003
   16750:	20000350 	.word	0x20000350
   16754:	0002d233 	.word	0x0002d233
   16758:	0002d254 	.word	0x0002d254
   1675c:	0002d26b 	.word	0x0002d26b
						&bt_dev.id_addr[conn->id]);
   16760:	7a21      	ldrb	r1, [r4, #8]
   16762:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16766:	4441      	add	r1, r8
   16768:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1676c:	f011 f97a 	bl	27a64 <bt_addr_le_copy>
   16770:	e756      	b.n	16620 <bt_hci_le_enh_conn_complete+0x1f0>
		return -ENOBUFS;
   16772:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16776:	e78c      	b.n	16692 <bt_hci_le_enh_conn_complete+0x262>

00016778 <le_legacy_conn_complete>:
{
   16778:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1677a:	6881      	ldr	r1, [r0, #8]
{
   1677c:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   1677e:	780b      	ldrb	r3, [r1, #0]
   16780:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   16784:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16788:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1678c:	78cb      	ldrb	r3, [r1, #3]
   1678e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   16792:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16796:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1679a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1679e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   167a2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   167a6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   167aa:	7c4b      	ldrb	r3, [r1, #17]
   167ac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   167b0:	a803      	add	r0, sp, #12
   167b2:	3104      	adds	r1, #4
   167b4:	f011 f956 	bl	27a64 <bt_addr_le_copy>
   167b8:	490a      	ldr	r1, [pc, #40]	; (167e4 <le_legacy_conn_complete+0x6c>)
   167ba:	2206      	movs	r2, #6
   167bc:	f10d 0013 	add.w	r0, sp, #19
   167c0:	f011 f835 	bl	2782e <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   167c4:	2300      	movs	r3, #0
   167c6:	2206      	movs	r2, #6
   167c8:	4669      	mov	r1, sp
   167ca:	f10d 0019 	add.w	r0, sp, #25
   167ce:	9300      	str	r3, [sp, #0]
   167d0:	f8ad 3004 	strh.w	r3, [sp, #4]
   167d4:	f011 f82b 	bl	2782e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   167d8:	a802      	add	r0, sp, #8
   167da:	f7ff fe29 	bl	16430 <bt_hci_le_enh_conn_complete>
}
   167de:	b00b      	add	sp, #44	; 0x2c
   167e0:	f85d fb04 	ldr.w	pc, [sp], #4
   167e4:	200003b1 	.word	0x200003b1

000167e8 <bt_unpair>:
{
   167e8:	b530      	push	{r4, r5, lr}
   167ea:	b085      	sub	sp, #20
   167ec:	460d      	mov	r5, r1
   167ee:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   167f2:	b9d0      	cbnz	r0, 1682a <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   167f4:	b949      	cbnz	r1, 1680a <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   167f6:	490e      	ldr	r1, [pc, #56]	; (16830 <bt_unpair+0x48>)
   167f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   167fc:	f10d 0207 	add.w	r2, sp, #7
   16800:	f006 fce6 	bl	1d1d0 <bt_foreach_bond>
		return 0;
   16804:	2000      	movs	r0, #0
}
   16806:	b005      	add	sp, #20
   16808:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1680a:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   1680c:	2207      	movs	r2, #7
   1680e:	f8cd 000b 	str.w	r0, [sp, #11]
   16812:	a902      	add	r1, sp, #8
   16814:	4628      	mov	r0, r5
   16816:	f010 ffe1 	bl	277dc <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1681a:	2800      	cmp	r0, #0
   1681c:	d0eb      	beq.n	167f6 <bt_unpair+0xe>
	unpair(id, addr);
   1681e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16822:	4629      	mov	r1, r5
   16824:	f7ff f87c 	bl	15920 <unpair>
	return 0;
   16828:	e7ec      	b.n	16804 <bt_unpair+0x1c>
		return -EINVAL;
   1682a:	f06f 0015 	mvn.w	r0, #21
   1682e:	e7ea      	b.n	16806 <bt_unpair+0x1e>
   16830:	00027a89 	.word	0x00027a89

00016834 <bt_security_err_get>:
	switch (hci_err) {
   16834:	2829      	cmp	r0, #41	; 0x29
   16836:	bf9a      	itte	ls
   16838:	4b01      	ldrls	r3, [pc, #4]	; (16840 <bt_security_err_get+0xc>)
   1683a:	5c18      	ldrbls	r0, [r3, r0]
{
   1683c:	2009      	movhi	r0, #9
}
   1683e:	4770      	bx	lr
   16840:	0002d4d4 	.word	0x0002d4d4

00016844 <hci_encrypt_key_refresh_complete>:
{
   16844:	b5f0      	push	{r4, r5, r6, r7, lr}
   16846:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16848:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1684a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1684e:	781d      	ldrb	r5, [r3, #0]
{
   16850:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16852:	4630      	mov	r0, r6
   16854:	f001 fbb6 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   16858:	4604      	mov	r4, r0
   1685a:	b988      	cbnz	r0, 16880 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1685c:	466c      	mov	r4, sp
   1685e:	b088      	sub	sp, #32
   16860:	466a      	mov	r2, sp
   16862:	4b20      	ldr	r3, [pc, #128]	; (168e4 <hci_encrypt_key_refresh_complete+0xa0>)
   16864:	4820      	ldr	r0, [pc, #128]	; (168e8 <hci_encrypt_key_refresh_complete+0xa4>)
   16866:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1686a:	2303      	movs	r3, #3
   1686c:	f842 3f10 	str.w	r3, [r2, #16]!
   16870:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16874:	f011 f90d 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16878:	46a5      	mov	sp, r4
}
   1687a:	371c      	adds	r7, #28
   1687c:	46bd      	mov	sp, r7
   1687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   16880:	b15d      	cbz	r5, 1689a <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
   16882:	4628      	mov	r0, r5
   16884:	f7ff ffd6 	bl	16834 <bt_security_err_get>
   16888:	4629      	mov	r1, r5
   1688a:	4602      	mov	r2, r0
   1688c:	4620      	mov	r0, r4
   1688e:	f001 fd5d 	bl	1834c <bt_conn_security_changed>
	bt_conn_unref(conn);
   16892:	4620      	mov	r0, r4
   16894:	f011 faec 	bl	27e70 <bt_conn_unref>
   16898:	e7ef      	b.n	1687a <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   1689a:	7883      	ldrb	r3, [r0, #2]
   1689c:	2b01      	cmp	r3, #1
   1689e:	d107      	bne.n	168b0 <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
   168a0:	f006 fba8 	bl	1cff4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   168a4:	4620      	mov	r0, r4
   168a6:	f011 f8c4 	bl	27a32 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   168aa:	2800      	cmp	r0, #0
   168ac:	bf08      	it	eq
   168ae:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   168b0:	4628      	mov	r0, r5
   168b2:	f7ff ffbf 	bl	16834 <bt_security_err_get>
   168b6:	4629      	mov	r1, r5
   168b8:	4602      	mov	r2, r0
   168ba:	4620      	mov	r0, r4
   168bc:	f001 fd46 	bl	1834c <bt_conn_security_changed>
	if (status) {
   168c0:	2d00      	cmp	r5, #0
   168c2:	d0e6      	beq.n	16892 <hci_encrypt_key_refresh_complete+0x4e>
		BT_ERR("Failed to set required security level");
   168c4:	4b09      	ldr	r3, [pc, #36]	; (168ec <hci_encrypt_key_refresh_complete+0xa8>)
   168c6:	617b      	str	r3, [r7, #20]
   168c8:	4807      	ldr	r0, [pc, #28]	; (168e8 <hci_encrypt_key_refresh_complete+0xa4>)
   168ca:	2302      	movs	r3, #2
   168cc:	f107 0210 	add.w	r2, r7, #16
   168d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168d4:	613b      	str	r3, [r7, #16]
   168d6:	f011 f8dc 	bl	27a92 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   168da:	4629      	mov	r1, r5
   168dc:	4620      	mov	r0, r4
   168de:	f011 fb0c 	bl	27efa <bt_conn_disconnect>
   168e2:	e7d6      	b.n	16892 <hci_encrypt_key_refresh_complete+0x4e>
   168e4:	0002cfa3 	.word	0x0002cfa3
   168e8:	0002b504 	.word	0x0002b504
   168ec:	0002d287 	.word	0x0002d287

000168f0 <hci_encrypt_change>:
{
   168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168f4:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   168f6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   168f8:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   168fc:	7835      	ldrb	r5, [r6, #0]
{
   168fe:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16900:	4640      	mov	r0, r8
   16902:	f001 fb5f 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   16906:	4604      	mov	r4, r0
   16908:	b990      	cbnz	r0, 16930 <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1690a:	466c      	mov	r4, sp
   1690c:	b088      	sub	sp, #32
   1690e:	466a      	mov	r2, sp
   16910:	4b22      	ldr	r3, [pc, #136]	; (1699c <hci_encrypt_change+0xac>)
   16912:	4823      	ldr	r0, [pc, #140]	; (169a0 <hci_encrypt_change+0xb0>)
   16914:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16918:	2303      	movs	r3, #3
   1691a:	f842 3f10 	str.w	r3, [r2, #16]!
   1691e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16922:	f011 f8b6 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16926:	46a5      	mov	sp, r4
}
   16928:	3718      	adds	r7, #24
   1692a:	46bd      	mov	sp, r7
   1692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   16930:	b15d      	cbz	r5, 1694a <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   16932:	4628      	mov	r0, r5
   16934:	f7ff ff7e 	bl	16834 <bt_security_err_get>
   16938:	4629      	mov	r1, r5
   1693a:	4602      	mov	r2, r0
   1693c:	4620      	mov	r0, r4
   1693e:	f001 fd05 	bl	1834c <bt_conn_security_changed>
	bt_conn_unref(conn);
   16942:	4620      	mov	r0, r4
   16944:	f011 fa94 	bl	27e70 <bt_conn_unref>
   16948:	e7ee      	b.n	16928 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   1694a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1694c:	78f3      	ldrb	r3, [r6, #3]
   1694e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   16950:	2a01      	cmp	r2, #1
   16952:	d108      	bne.n	16966 <hci_encrypt_change+0x76>
		if (conn->encrypt) {
   16954:	b10b      	cbz	r3, 1695a <hci_encrypt_change+0x6a>
			bt_smp_update_keys(conn);
   16956:	f006 fb4d 	bl	1cff4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1695a:	4620      	mov	r0, r4
   1695c:	f011 f869 	bl	27a32 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16960:	2800      	cmp	r0, #0
   16962:	bf08      	it	eq
   16964:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16966:	4628      	mov	r0, r5
   16968:	f7ff ff64 	bl	16834 <bt_security_err_get>
   1696c:	4629      	mov	r1, r5
   1696e:	4602      	mov	r2, r0
   16970:	4620      	mov	r0, r4
   16972:	f001 fceb 	bl	1834c <bt_conn_security_changed>
	if (status) {
   16976:	2d00      	cmp	r5, #0
   16978:	d0e3      	beq.n	16942 <hci_encrypt_change+0x52>
		BT_ERR("Failed to set required security level");
   1697a:	4b0a      	ldr	r3, [pc, #40]	; (169a4 <hci_encrypt_change+0xb4>)
   1697c:	617b      	str	r3, [r7, #20]
   1697e:	4808      	ldr	r0, [pc, #32]	; (169a0 <hci_encrypt_change+0xb0>)
   16980:	2302      	movs	r3, #2
   16982:	f107 0210 	add.w	r2, r7, #16
   16986:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1698a:	613b      	str	r3, [r7, #16]
   1698c:	f011 f881 	bl	27a92 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16990:	4629      	mov	r1, r5
   16992:	4620      	mov	r0, r4
   16994:	f011 fab1 	bl	27efa <bt_conn_disconnect>
   16998:	e7d3      	b.n	16942 <hci_encrypt_change+0x52>
   1699a:	bf00      	nop
   1699c:	0002cfa3 	.word	0x0002cfa3
   169a0:	0002b504 	.word	0x0002b504
   169a4:	0002d287 	.word	0x0002d287

000169a8 <bt_send>:
	return bt_dev.drv->send(buf);
   169a8:	4b02      	ldr	r3, [pc, #8]	; (169b4 <bt_send+0xc>)
   169aa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   169ae:	695b      	ldr	r3, [r3, #20]
   169b0:	4718      	bx	r3
   169b2:	bf00      	nop
   169b4:	20000350 	.word	0x20000350

000169b8 <bt_hci_cmd_send>:
{
   169b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169ba:	4605      	mov	r5, r0
   169bc:	af00      	add	r7, sp, #0
	if (!buf) {
   169be:	460c      	mov	r4, r1
   169c0:	b919      	cbnz	r1, 169ca <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   169c2:	f7ff fc2b 	bl	1621c <bt_hci_cmd_create>
		if (!buf) {
   169c6:	4604      	mov	r4, r0
   169c8:	b318      	cbz	r0, 16a12 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   169ca:	f640 4335 	movw	r3, #3125	; 0xc35
   169ce:	429d      	cmp	r5, r3
   169d0:	d119      	bne.n	16a06 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   169d2:	4620      	mov	r0, r4
   169d4:	f7ff ffe8 	bl	169a8 <bt_send>
		if (err) {
   169d8:	4605      	mov	r5, r0
   169da:	b188      	cbz	r0, 16a00 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
   169dc:	466e      	mov	r6, sp
   169de:	b088      	sub	sp, #32
   169e0:	466a      	mov	r2, sp
   169e2:	4b0d      	ldr	r3, [pc, #52]	; (16a18 <bt_hci_cmd_send+0x60>)
   169e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   169e8:	2303      	movs	r3, #3
   169ea:	480c      	ldr	r0, [pc, #48]	; (16a1c <bt_hci_cmd_send+0x64>)
   169ec:	f842 3f10 	str.w	r3, [r2, #16]!
   169f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   169f4:	f011 f84d 	bl	27a92 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   169f8:	4620      	mov	r0, r4
   169fa:	46b5      	mov	sp, r6
   169fc:	f006 feaa 	bl	1d754 <net_buf_unref>
}
   16a00:	4628      	mov	r0, r5
   16a02:	46bd      	mov	sp, r7
   16a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16a06:	4806      	ldr	r0, [pc, #24]	; (16a20 <bt_hci_cmd_send+0x68>)
   16a08:	4621      	mov	r1, r4
   16a0a:	f013 f8bb 	bl	29b84 <net_buf_put>
	return 0;
   16a0e:	2500      	movs	r5, #0
   16a10:	e7f6      	b.n	16a00 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   16a12:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16a16:	e7f3      	b.n	16a00 <bt_hci_cmd_send+0x48>
   16a18:	0002d2ad 	.word	0x0002d2ad
   16a1c:	0002b504 	.word	0x0002b504
   16a20:	20000494 	.word	0x20000494

00016a24 <le_ltk_request>:
{
   16a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a28:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16a2a:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16a2c:	8826      	ldrh	r6, [r4, #0]
   16a2e:	fa1f f886 	uxth.w	r8, r6
{
   16a32:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   16a34:	4640      	mov	r0, r8
   16a36:	f001 fac5 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   16a3a:	4605      	mov	r5, r0
   16a3c:	b990      	cbnz	r0, 16a64 <le_ltk_request+0x40>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16a3e:	466c      	mov	r4, sp
   16a40:	b088      	sub	sp, #32
   16a42:	aa02      	add	r2, sp, #8
   16a44:	4b28      	ldr	r3, [pc, #160]	; (16ae8 <le_ltk_request+0xc4>)
   16a46:	4829      	ldr	r0, [pc, #164]	; (16aec <le_ltk_request+0xc8>)
   16a48:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16a4c:	2303      	movs	r3, #3
   16a4e:	f842 3f10 	str.w	r3, [r2, #16]!
   16a52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a56:	f011 f81c 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16a5a:	46a5      	mov	sp, r4
}
   16a5c:	3728      	adds	r7, #40	; 0x28
   16a5e:	46bd      	mov	sp, r7
   16a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16a64:	f8d4 2002 	ldr.w	r2, [r4, #2]
   16a68:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16a6c:	9701      	str	r7, [sp, #4]
   16a6e:	8961      	ldrh	r1, [r4, #10]
   16a70:	9100      	str	r1, [sp, #0]
   16a72:	f012 fe6d 	bl	29750 <bt_smp_request_ltk>
   16a76:	b328      	cbz	r0, 16ac4 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   16a78:	2112      	movs	r1, #18
   16a7a:	f242 001a 	movw	r0, #8218	; 0x201a
   16a7e:	f7ff fbcd 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   16a82:	4604      	mov	r4, r0
   16a84:	b970      	cbnz	r0, 16aa4 <le_ltk_request+0x80>
		BT_ERR("Out of command buffers");
   16a86:	4b1a      	ldr	r3, [pc, #104]	; (16af0 <le_ltk_request+0xcc>)
   16a88:	627b      	str	r3, [r7, #36]	; 0x24
   16a8a:	4818      	ldr	r0, [pc, #96]	; (16aec <le_ltk_request+0xc8>)
   16a8c:	2302      	movs	r3, #2
   16a8e:	f107 0220 	add.w	r2, r7, #32
   16a92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a96:	623b      	str	r3, [r7, #32]
   16a98:	f010 fffb 	bl	27a92 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   16a9c:	4628      	mov	r0, r5
   16a9e:	f011 f9e7 	bl	27e70 <bt_conn_unref>
   16aa2:	e7db      	b.n	16a5c <le_ltk_request+0x38>
   16aa4:	2112      	movs	r1, #18
   16aa6:	3008      	adds	r0, #8
   16aa8:	f013 f89f 	bl	29bea <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16aac:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   16aae:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16ab2:	2210      	movs	r2, #16
   16ab4:	f010 febb 	bl	2782e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16ab8:	4621      	mov	r1, r4
   16aba:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16abe:	f7ff ff7b 	bl	169b8 <bt_hci_cmd_send>
   16ac2:	e7eb      	b.n	16a9c <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16ac4:	2102      	movs	r1, #2
   16ac6:	f242 001b 	movw	r0, #8219	; 0x201b
   16aca:	f7ff fba7 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   16ace:	4604      	mov	r4, r0
   16ad0:	2800      	cmp	r0, #0
   16ad2:	d0d8      	beq.n	16a86 <le_ltk_request+0x62>
   16ad4:	2102      	movs	r1, #2
   16ad6:	3008      	adds	r0, #8
   16ad8:	f013 f887 	bl	29bea <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16adc:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16ade:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16ae0:	f242 001b 	movw	r0, #8219	; 0x201b
   16ae4:	e7eb      	b.n	16abe <le_ltk_request+0x9a>
   16ae6:	bf00      	nop
   16ae8:	0002cf1e 	.word	0x0002cf1e
   16aec:	0002b504 	.word	0x0002b504
   16af0:	0002d2cf 	.word	0x0002d2cf

00016af4 <le_conn_param_req>:
{
   16af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16af8:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16afa:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16afc:	78d9      	ldrb	r1, [r3, #3]
   16afe:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16b00:	f8b3 8000 	ldrh.w	r8, [r3]
{
   16b04:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16b06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16b0a:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16b0c:	7959      	ldrb	r1, [r3, #5]
   16b0e:	791a      	ldrb	r2, [r3, #4]
   16b10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16b14:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16b16:	799a      	ldrb	r2, [r3, #6]
   16b18:	79d9      	ldrb	r1, [r3, #7]
   16b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16b1e:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16b20:	7a1a      	ldrb	r2, [r3, #8]
   16b22:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16b24:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16b28:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16b2c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16b2e:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16b30:	f001 fa48 	bl	17fc4 <bt_conn_lookup_handle>
	if (!conn) {
   16b34:	4606      	mov	r6, r0
   16b36:	b9b0      	cbnz	r0, 16b66 <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16b38:	466d      	mov	r5, sp
   16b3a:	b088      	sub	sp, #32
   16b3c:	466a      	mov	r2, sp
   16b3e:	4b20      	ldr	r3, [pc, #128]	; (16bc0 <le_conn_param_req+0xcc>)
   16b40:	4820      	ldr	r0, [pc, #128]	; (16bc4 <le_conn_param_req+0xd0>)
   16b42:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16b46:	2303      	movs	r3, #3
   16b48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16b4c:	f842 3f10 	str.w	r3, [r2, #16]!
   16b50:	f010 ff9f 	bl	27a92 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16b54:	2102      	movs	r1, #2
   16b56:	46ad      	mov	sp, r5
   16b58:	4620      	mov	r0, r4
   16b5a:	f011 f83d 	bl	27bd8 <le_conn_param_neg_reply>
}
   16b5e:	3708      	adds	r7, #8
   16b60:	46bd      	mov	sp, r7
   16b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   16b66:	4639      	mov	r1, r7
   16b68:	f001 fb88 	bl	1827c <le_param_req>
   16b6c:	b938      	cbnz	r0, 16b7e <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16b6e:	211e      	movs	r1, #30
   16b70:	4620      	mov	r0, r4
   16b72:	f011 f831 	bl	27bd8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16b76:	4630      	mov	r0, r6
   16b78:	f011 f97a 	bl	27e70 <bt_conn_unref>
   16b7c:	e7ef      	b.n	16b5e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16b7e:	210e      	movs	r1, #14
   16b80:	f242 0020 	movw	r0, #8224	; 0x2020
   16b84:	f7ff fb4a 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   16b88:	4605      	mov	r5, r0
   16b8a:	2800      	cmp	r0, #0
   16b8c:	d0f3      	beq.n	16b76 <le_conn_param_req+0x82>
   16b8e:	210e      	movs	r1, #14
   16b90:	3008      	adds	r0, #8
   16b92:	f013 f82a 	bl	29bea <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   16b96:	220e      	movs	r2, #14
   16b98:	4604      	mov	r4, r0
   16b9a:	2100      	movs	r1, #0
   16b9c:	f010 fe52 	bl	27844 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16ba0:	883b      	ldrh	r3, [r7, #0]
   16ba2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16ba4:	887b      	ldrh	r3, [r7, #2]
   16ba6:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16ba8:	88bb      	ldrh	r3, [r7, #4]
   16baa:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16bac:	88fb      	ldrh	r3, [r7, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16bae:	f8a4 8000 	strh.w	r8, [r4]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16bb2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16bb4:	4629      	mov	r1, r5
   16bb6:	f242 0020 	movw	r0, #8224	; 0x2020
   16bba:	f7ff fefd 	bl	169b8 <bt_hci_cmd_send>
   16bbe:	e7da      	b.n	16b76 <le_conn_param_req+0x82>
   16bc0:	0002cf1e 	.word	0x0002cf1e
   16bc4:	0002b504 	.word	0x0002b504

00016bc8 <hci_event_prio>:
{
   16bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bcc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16bce:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16bd2:	4630      	mov	r0, r6
   16bd4:	f013 f848 	bl	29c68 <net_buf_simple_headroom>
	state->len = buf->len;
   16bd8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16bdc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16be0:	4605      	mov	r5, r0
   16be2:	d80c      	bhi.n	16bfe <hci_event_prio+0x36>
   16be4:	4a1c      	ldr	r2, [pc, #112]	; (16c58 <hci_event_prio+0x90>)
   16be6:	491d      	ldr	r1, [pc, #116]	; (16c5c <hci_event_prio+0x94>)
   16be8:	481d      	ldr	r0, [pc, #116]	; (16c60 <hci_event_prio+0x98>)
   16bea:	f640 536f 	movw	r3, #3439	; 0xd6f
   16bee:	f00f ffef 	bl	26bd0 <assert_print>
   16bf2:	4040      	eors	r0, r0
   16bf4:	f380 8811 	msr	BASEPRI, r0
   16bf8:	f04f 0003 	mov.w	r0, #3
   16bfc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16bfe:	4630      	mov	r0, r6
   16c00:	2102      	movs	r1, #2
   16c02:	f013 f819 	bl	29c38 <net_buf_simple_pull_mem>
   16c06:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c08:	7800      	ldrb	r0, [r0, #0]
   16c0a:	f010 ff00 	bl	27a0e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16c0e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c10:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16c12:	d40c      	bmi.n	16c2e <hci_event_prio+0x66>
   16c14:	4a10      	ldr	r2, [pc, #64]	; (16c58 <hci_event_prio+0x90>)
   16c16:	4913      	ldr	r1, [pc, #76]	; (16c64 <hci_event_prio+0x9c>)
   16c18:	4811      	ldr	r0, [pc, #68]	; (16c60 <hci_event_prio+0x98>)
   16c1a:	f640 5373 	movw	r3, #3443	; 0xd73
   16c1e:	f00f ffd7 	bl	26bd0 <assert_print>
   16c22:	4040      	eors	r0, r0
   16c24:	f380 8811 	msr	BASEPRI, r0
   16c28:	f04f 0003 	mov.w	r0, #3
   16c2c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16c2e:	2305      	movs	r3, #5
   16c30:	4a0d      	ldr	r2, [pc, #52]	; (16c68 <hci_event_prio+0xa0>)
   16c32:	7838      	ldrb	r0, [r7, #0]
   16c34:	4621      	mov	r1, r4
   16c36:	f7ff f85b 	bl	15cf0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16c3a:	07b3      	lsls	r3, r6, #30
   16c3c:	d507      	bpl.n	16c4e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16c3e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16c40:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16c44:	fa10 f585 	uxtah	r5, r0, r5
   16c48:	60a5      	str	r5, [r4, #8]
}
   16c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16c4e:	4620      	mov	r0, r4
}
   16c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16c54:	f006 bd7e 	b.w	1d754 <net_buf_unref>
   16c58:	0002cfeb 	.word	0x0002cfeb
   16c5c:	0002d01f 	.word	0x0002d01f
   16c60:	0002d038 	.word	0x0002d038
   16c64:	0002d2e6 	.word	0x0002d2e6
   16c68:	0002bcc4 	.word	0x0002bcc4

00016c6c <bt_recv>:
{
   16c6c:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16c6e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16c70:	2b01      	cmp	r3, #1
{
   16c72:	af00      	add	r7, sp, #0
   16c74:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16c76:	d006      	beq.n	16c86 <bt_recv+0x1a>
   16c78:	2b03      	cmp	r3, #3
   16c7a:	d113      	bne.n	16ca4 <bt_recv+0x38>
			rx_queue_put(buf);
   16c7c:	f7fe ff64 	bl	15b48 <rx_queue_put>
		return 0;
   16c80:	2000      	movs	r0, #0
}
   16c82:	46bd      	mov	sp, r7
   16c84:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c86:	6883      	ldr	r3, [r0, #8]
   16c88:	7818      	ldrb	r0, [r3, #0]
   16c8a:	f010 fec0 	bl	27a0e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16c8e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c90:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16c92:	d502      	bpl.n	16c9a <bt_recv+0x2e>
			hci_event_prio(buf);
   16c94:	4628      	mov	r0, r5
   16c96:	f7ff ff97 	bl	16bc8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16c9a:	f014 0002 	ands.w	r0, r4, #2
   16c9e:	d0f0      	beq.n	16c82 <bt_recv+0x16>
			rx_queue_put(buf);
   16ca0:	4628      	mov	r0, r5
   16ca2:	e7eb      	b.n	16c7c <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16ca4:	466c      	mov	r4, sp
   16ca6:	b088      	sub	sp, #32
   16ca8:	466a      	mov	r2, sp
   16caa:	4909      	ldr	r1, [pc, #36]	; (16cd0 <bt_recv+0x64>)
   16cac:	4809      	ldr	r0, [pc, #36]	; (16cd4 <bt_recv+0x68>)
	switch (bt_buf_get_type(buf)) {
   16cae:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16cb2:	2303      	movs	r3, #3
   16cb4:	f842 3f10 	str.w	r3, [r2, #16]!
   16cb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16cbc:	f010 fee9 	bl	27a92 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16cc0:	4628      	mov	r0, r5
   16cc2:	46a5      	mov	sp, r4
   16cc4:	f006 fd46 	bl	1d754 <net_buf_unref>
		return -EINVAL;
   16cc8:	f06f 0015 	mvn.w	r0, #21
   16ccc:	e7d9      	b.n	16c82 <bt_recv+0x16>
   16cce:	bf00      	nop
   16cd0:	0002d2ff 	.word	0x0002d2ff
   16cd4:	0002b504 	.word	0x0002b504

00016cd8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16cd8:	4a08      	ldr	r2, [pc, #32]	; (16cfc <bt_hci_driver_register+0x24>)
{
   16cda:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16cdc:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   16ce0:	b930      	cbnz	r0, 16cf0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16ce2:	68d9      	ldr	r1, [r3, #12]
   16ce4:	b139      	cbz	r1, 16cf6 <bt_hci_driver_register+0x1e>
   16ce6:	6959      	ldr	r1, [r3, #20]
   16ce8:	b129      	cbz	r1, 16cf6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16cea:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   16cee:	4770      	bx	lr
		return -EALREADY;
   16cf0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16cf4:	4770      	bx	lr
		return -EINVAL;
   16cf6:	f06f 0015 	mvn.w	r0, #21
}
   16cfa:	4770      	bx	lr
   16cfc:	20000350 	.word	0x20000350

00016d00 <bt_finalize_init>:
{
   16d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16d04:	4c3f      	ldr	r4, [pc, #252]	; (16e04 <bt_finalize_init+0x104>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d06:	4d40      	ldr	r5, [pc, #256]	; (16e08 <bt_finalize_init+0x108>)
{
   16d08:	af00      	add	r7, sp, #0
   16d0a:	2104      	movs	r1, #4
   16d0c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16d10:	f010 feab 	bl	27a6a <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d14:	79e2      	ldrb	r2, [r4, #7]
   16d16:	4b3d      	ldr	r3, [pc, #244]	; (16e0c <bt_finalize_init+0x10c>)
   16d18:	4620      	mov	r0, r4
   16d1a:	2a01      	cmp	r2, #1
   16d1c:	bf98      	it	ls
   16d1e:	461d      	movls	r5, r3
   16d20:	466e      	mov	r6, sp
   16d22:	f7fe fb4b 	bl	153bc <bt_addr_le_str_real>
   16d26:	b08a      	sub	sp, #40	; 0x28
   16d28:	466a      	mov	r2, sp
   16d2a:	4b39      	ldr	r3, [pc, #228]	; (16e10 <bt_finalize_init+0x110>)
   16d2c:	61d0      	str	r0, [r2, #28]
   16d2e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16d32:	f240 3302 	movw	r3, #770	; 0x302
   16d36:	8413      	strh	r3, [r2, #32]
   16d38:	4b36      	ldr	r3, [pc, #216]	; (16e14 <bt_finalize_init+0x114>)
   16d3a:	f842 3f10 	str.w	r3, [r2, #16]!
   16d3e:	4836      	ldr	r0, [pc, #216]	; (16e18 <bt_finalize_init+0x118>)
		BT_INFO("Identity[%d]: %s",
   16d40:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 16e1c <bt_finalize_init+0x11c>
   16d44:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 16e20 <bt_finalize_init+0x120>
   16d48:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 16e18 <bt_finalize_init+0x118>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d4c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   16d50:	f010 fe9f 	bl	27a92 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   16d54:	2501      	movs	r5, #1
   16d56:	46b5      	mov	sp, r6
   16d58:	4626      	mov	r6, r4
   16d5a:	79e3      	ldrb	r3, [r4, #7]
   16d5c:	429d      	cmp	r5, r3
   16d5e:	f106 0607 	add.w	r6, r6, #7
   16d62:	db39      	blt.n	16dd8 <bt_finalize_init+0xd8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16d64:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   16d68:	4628      	mov	r0, r5
   16d6a:	f7fe fdbd 	bl	158e8 <ver_str>
   16d6e:	466e      	mov	r6, sp
   16d70:	b08c      	sub	sp, #48	; 0x30
   16d72:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
   16d76:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   16d7a:	466a      	mov	r2, sp
   16d7c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 16e24 <bt_finalize_init+0x124>
   16d80:	6253      	str	r3, [r2, #36]	; 0x24
   16d82:	e9c2 5107 	strd	r5, r1, [r2, #28]
   16d86:	4b28      	ldr	r3, [pc, #160]	; (16e28 <bt_finalize_init+0x128>)
   16d88:	2502      	movs	r5, #2
   16d8a:	e9c2 c005 	strd	ip, r0, [r2, #20]
   16d8e:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
   16d92:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
   16d96:	f842 3f10 	str.w	r3, [r2, #16]!
   16d9a:	481f      	ldr	r0, [pc, #124]	; (16e18 <bt_finalize_init+0x118>)
   16d9c:	f010 fe79 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16da0:	46b5      	mov	sp, r6
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   16da2:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   16da6:	4630      	mov	r0, r6
   16da8:	f7fe fd9e 	bl	158e8 <ver_str>
   16dac:	b08a      	sub	sp, #40	; 0x28
   16dae:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   16db2:	466a      	mov	r2, sp
   16db4:	491d      	ldr	r1, [pc, #116]	; (16e2c <bt_finalize_init+0x12c>)
   16db6:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
   16dba:	e9c2 6307 	strd	r6, r3, [r2, #28]
   16dbe:	4b1c      	ldr	r3, [pc, #112]	; (16e30 <bt_finalize_init+0x130>)
   16dc0:	e9c2 1005 	strd	r1, r0, [r2, #20]
   16dc4:	f842 3f10 	str.w	r3, [r2, #16]!
   16dc8:	4813      	ldr	r0, [pc, #76]	; (16e18 <bt_finalize_init+0x118>)
   16dca:	f44f 512b 	mov.w	r1, #10944	; 0x2ac0
   16dce:	f010 fe60 	bl	27a92 <z_log_msg_static_create.constprop.0>
}
   16dd2:	46bd      	mov	sp, r7
   16dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
   16dd8:	4630      	mov	r0, r6
   16dda:	f7fe faef 	bl	153bc <bt_addr_le_str_real>
   16dde:	46eb      	mov	fp, sp
   16de0:	b08a      	sub	sp, #40	; 0x28
   16de2:	466a      	mov	r2, sp
   16de4:	2303      	movs	r3, #3
   16de6:	e9c2 8505 	strd	r8, r5, [r2, #20]
   16dea:	61d0      	str	r0, [r2, #28]
   16dec:	f882 3020 	strb.w	r3, [r2, #32]
   16df0:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   16df4:	f842 9f10 	str.w	r9, [r2, #16]!
   16df8:	4650      	mov	r0, sl
   16dfa:	f010 fe4a 	bl	27a92 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   16dfe:	3501      	adds	r5, #1
   16e00:	46dd      	mov	sp, fp
   16e02:	e7aa      	b.n	16d5a <bt_finalize_init+0x5a>
   16e04:	20000350 	.word	0x20000350
   16e08:	0002d313 	.word	0x0002d313
   16e0c:	0002c42f 	.word	0x0002c42f
   16e10:	0002d317 	.word	0x0002d317
   16e14:	02000004 	.word	0x02000004
   16e18:	0002b504 	.word	0x0002b504
   16e1c:	0002d326 	.word	0x0002d326
   16e20:	01000004 	.word	0x01000004
   16e24:	0002d337 	.word	0x0002d337
   16e28:	01000006 	.word	0x01000006
   16e2c:	0002d375 	.word	0x0002d375
   16e30:	01000005 	.word	0x01000005

00016e34 <init_work>:
{
   16e34:	b510      	push	{r4, lr}
	err = bt_init();
   16e36:	f7fa f8cb 	bl	10fd0 <bt_init>
	if (ready_cb) {
   16e3a:	4b03      	ldr	r3, [pc, #12]	; (16e48 <init_work+0x14>)
   16e3c:	681b      	ldr	r3, [r3, #0]
   16e3e:	b113      	cbz	r3, 16e46 <init_work+0x12>
}
   16e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16e44:	4718      	bx	r3
}
   16e46:	bd10      	pop	{r4, pc}
   16e48:	20002cec 	.word	0x20002cec

00016e4c <bt_is_ready>:
   16e4c:	4b04      	ldr	r3, [pc, #16]	; (16e60 <bt_is_ready+0x14>)
   16e4e:	f3bf 8f5b 	dmb	ish
   16e52:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   16e56:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16e5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16e5e:	4770      	bx	lr
   16e60:	20000350 	.word	0x20000350

00016e64 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   16e64:	b570      	push	{r4, r5, r6, lr}
   16e66:	b086      	sub	sp, #24
   16e68:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   16e6a:	f010 fc8a 	bl	27782 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   16e6e:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   16e70:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   16e72:	d826      	bhi.n	16ec2 <bt_set_name+0x5e>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   16e74:	4e14      	ldr	r6, [pc, #80]	; (16ec8 <bt_set_name+0x64>)
   16e76:	4621      	mov	r1, r4
   16e78:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   16e7c:	f010 fc91 	bl	277a2 <strcmp>
   16e80:	b910      	cbnz	r0, 16e88 <bt_set_name+0x24>
		return 0;
   16e82:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   16e84:	b006      	add	sp, #24
   16e86:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   16e88:	4621      	mov	r1, r4
   16e8a:	462a      	mov	r2, r5
   16e8c:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   16e90:	f010 fc65 	bl	2775e <strncpy>
	bt_dev.name[len] = '\0';
   16e94:	1973      	adds	r3, r6, r5
   16e96:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   16e98:	480c      	ldr	r0, [pc, #48]	; (16ecc <bt_set_name+0x68>)
	bt_dev.name[len] = '\0';
   16e9a:	f883 41a2 	strb.w	r4, [r3, #418]	; 0x1a2
		err = settings_save_one("bt/name", bt_dev.name, len);
   16e9e:	462a      	mov	r2, r5
   16ea0:	f506 71d1 	add.w	r1, r6, #418	; 0x1a2
   16ea4:	f7fd f9a0 	bl	141e8 <settings_save_one>
		if (err) {
   16ea8:	2800      	cmp	r0, #0
   16eaa:	d0ea      	beq.n	16e82 <bt_set_name+0x1e>
			BT_WARN("Unable to store name");
   16eac:	4b08      	ldr	r3, [pc, #32]	; (16ed0 <bt_set_name+0x6c>)
   16eae:	9305      	str	r3, [sp, #20]
   16eb0:	4808      	ldr	r0, [pc, #32]	; (16ed4 <bt_set_name+0x70>)
   16eb2:	2302      	movs	r3, #2
   16eb4:	aa04      	add	r2, sp, #16
   16eb6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16eba:	9304      	str	r3, [sp, #16]
   16ebc:	f010 fde9 	bl	27a92 <z_log_msg_static_create.constprop.0>
   16ec0:	e7df      	b.n	16e82 <bt_set_name+0x1e>
		return -ENOMEM;
   16ec2:	f06f 000b 	mvn.w	r0, #11
   16ec6:	e7dd      	b.n	16e84 <bt_set_name+0x20>
   16ec8:	20000350 	.word	0x20000350
   16ecc:	0002d4b7 	.word	0x0002d4b7
   16ed0:	0002d4bf 	.word	0x0002d4bf
   16ed4:	0002b504 	.word	0x0002b504

00016ed8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16ed8:	4800      	ldr	r0, [pc, #0]	; (16edc <bt_get_name+0x4>)
   16eda:	4770      	bx	lr
   16edc:	200004f2 	.word	0x200004f2

00016ee0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16ee2:	4f0b      	ldr	r7, [pc, #44]	; (16f10 <id_find+0x30>)
{
   16ee4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16ee6:	2500      	movs	r5, #0
   16ee8:	79fb      	ldrb	r3, [r7, #7]
   16eea:	b2ec      	uxtb	r4, r5
   16eec:	42a3      	cmp	r3, r4
   16eee:	d802      	bhi.n	16ef6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16ef0:	f06f 0401 	mvn.w	r4, #1
   16ef4:	e009      	b.n	16f0a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   16ef6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16efa:	2207      	movs	r2, #7
   16efc:	4439      	add	r1, r7
   16efe:	4630      	mov	r0, r6
   16f00:	f010 fc6c 	bl	277dc <memcmp>
   16f04:	3501      	adds	r5, #1
   16f06:	2800      	cmp	r0, #0
   16f08:	d1ee      	bne.n	16ee8 <id_find+0x8>
}
   16f0a:	4620      	mov	r0, r4
   16f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f0e:	bf00      	nop
   16f10:	20000350 	.word	0x20000350

00016f14 <hci_id_add>:
{
   16f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f18:	4688      	mov	r8, r1
   16f1a:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   16f1c:	4605      	mov	r5, r0
   16f1e:	bb08      	cbnz	r0, 16f64 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   16f20:	2127      	movs	r1, #39	; 0x27
   16f22:	f242 0027 	movw	r0, #8231	; 0x2027
   16f26:	f7ff f979 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   16f2a:	4604      	mov	r4, r0
   16f2c:	b1f0      	cbz	r0, 16f6c <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   16f2e:	2127      	movs	r1, #39	; 0x27
   16f30:	3008      	adds	r0, #8
   16f32:	f012 fe5a 	bl	29bea <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16f36:	4641      	mov	r1, r8
   16f38:	4606      	mov	r6, r0
   16f3a:	f010 fe74 	bl	27c26 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   16f3e:	4639      	mov	r1, r7
   16f40:	2210      	movs	r2, #16
   16f42:	1df0      	adds	r0, r6, #7
   16f44:	f010 fc73 	bl	2782e <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   16f48:	490a      	ldr	r1, [pc, #40]	; (16f74 <hci_id_add+0x60>)
   16f4a:	2210      	movs	r2, #16
   16f4c:	f106 0017 	add.w	r0, r6, #23
   16f50:	f010 fc6d 	bl	2782e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16f54:	462a      	mov	r2, r5
   16f56:	4621      	mov	r1, r4
   16f58:	f242 0027 	movw	r0, #8231	; 0x2027
}
   16f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16f60:	f7ff b996 	b.w	16290 <bt_hci_cmd_send_sync>
		return -EINVAL;
   16f64:	f06f 0015 	mvn.w	r0, #21
}
   16f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   16f6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16f70:	e7fa      	b.n	16f68 <hci_id_add+0x54>
   16f72:	bf00      	nop
   16f74:	200004b0 	.word	0x200004b0

00016f78 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   16f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16f7a:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   16f7c:	b087      	sub	sp, #28
   16f7e:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16f80:	2206      	movs	r2, #6
   16f82:	4608      	mov	r0, r1
   16f84:	f001 fa7e 	bl	18484 <bt_conn_lookup_state_le>
	if (conn) {
   16f88:	4606      	mov	r6, r0
   16f8a:	b170      	cbz	r0, 16faa <bt_id_add.part.0+0x32>
   16f8c:	4848      	ldr	r0, [pc, #288]	; (170b0 <bt_id_add.part.0+0x138>)
   16f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16f92:	f010 fea4 	bl	27cde <atomic_or.isra.0>
	keys->state |= flag;
   16f96:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   16f98:	4630      	mov	r0, r6
	keys->state |= flag;
   16f9a:	f043 0301 	orr.w	r3, r3, #1
   16f9e:	7223      	strb	r3, [r4, #8]
}
   16fa0:	b007      	add	sp, #28
   16fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   16fa6:	f010 bf63 	b.w	27e70 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   16faa:	4d42      	ldr	r5, [pc, #264]	; (170b4 <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16fac:	4601      	mov	r1, r0
   16fae:	4842      	ldr	r0, [pc, #264]	; (170b8 <bt_id_add.part.0+0x140>)
   16fb0:	f000 fcaa 	bl	17908 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16fb4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16fb8:	b173      	cbz	r3, 16fd8 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16fba:	4630      	mov	r0, r6
   16fbc:	f010 fe77 	bl	27cae <addr_res_enable>
		if (err) {
   16fc0:	b150      	cbz	r0, 16fd8 <bt_id_add.part.0+0x60>
			BT_WARN("Failed to disable address resolution");
   16fc2:	4b3e      	ldr	r3, [pc, #248]	; (170bc <bt_id_add.part.0+0x144>)
		BT_WARN("Set privacy mode command is not supported");
   16fc4:	9305      	str	r3, [sp, #20]
   16fc6:	2302      	movs	r3, #2
   16fc8:	9304      	str	r3, [sp, #16]
   16fca:	aa04      	add	r2, sp, #16
   16fcc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16fd0:	483b      	ldr	r0, [pc, #236]	; (170c0 <bt_id_add.part.0+0x148>)
   16fd2:	f010 fe69 	bl	27ca8 <z_log_msg_static_create.constprop.0>
	if (err) {
   16fd6:	e026      	b.n	17026 <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16fd8:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   16fdc:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   16fe0:	429a      	cmp	r2, r3
   16fe2:	d12a      	bne.n	1703a <bt_id_add.part.0+0xc2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16fe4:	4b37      	ldr	r3, [pc, #220]	; (170c4 <bt_id_add.part.0+0x14c>)
   16fe6:	4836      	ldr	r0, [pc, #216]	; (170c0 <bt_id_add.part.0+0x148>)
   16fe8:	9305      	str	r3, [sp, #20]
   16fea:	aa04      	add	r2, sp, #16
   16fec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16ff0:	2602      	movs	r6, #2
   16ff2:	9604      	str	r6, [sp, #16]
   16ff4:	f010 fe58 	bl	27ca8 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16ff8:	2200      	movs	r2, #0
   16ffa:	4611      	mov	r1, r2
   16ffc:	f242 0029 	movw	r0, #8233	; 0x2029
   17000:	f7ff f946 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   17004:	b130      	cbz	r0, 17014 <bt_id_add.part.0+0x9c>
			BT_ERR("Failed to clear resolution list");
   17006:	4b30      	ldr	r3, [pc, #192]	; (170c8 <bt_id_add.part.0+0x150>)
   17008:	e9cd 6304 	strd	r6, r3, [sp, #16]
		BT_ERR("Failed to set privacy mode");
   1700c:	aa04      	add	r2, sp, #16
   1700e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17012:	e7dd      	b.n	16fd0 <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   17014:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17018:	3301      	adds	r3, #1
   1701a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1701e:	7a23      	ldrb	r3, [r4, #8]
   17020:	f043 0304 	orr.w	r3, r3, #4
   17024:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17026:	2001      	movs	r0, #1
   17028:	f010 fe41 	bl	27cae <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1702c:	4827      	ldr	r0, [pc, #156]	; (170cc <bt_id_add.part.0+0x154>)
   1702e:	2100      	movs	r1, #0
}
   17030:	b007      	add	sp, #28
   17032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17036:	f000 bc67 	b.w	17908 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1703a:	4622      	mov	r2, r4
   1703c:	1c67      	adds	r7, r4, #1
   1703e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   17042:	4639      	mov	r1, r7
   17044:	f7ff ff66 	bl	16f14 <hci_id_add>
	if (err) {
   17048:	4606      	mov	r6, r0
   1704a:	b120      	cbz	r0, 17056 <bt_id_add.part.0+0xde>
		BT_ERR("Failed to add IRK to controller");
   1704c:	4b20      	ldr	r3, [pc, #128]	; (170d0 <bt_id_add.part.0+0x158>)
		BT_ERR("Failed to set privacy mode");
   1704e:	9305      	str	r3, [sp, #20]
   17050:	2302      	movs	r3, #2
   17052:	9304      	str	r3, [sp, #16]
   17054:	e7da      	b.n	1700c <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   17056:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1705a:	3301      	adds	r3, #1
   1705c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   17060:	7a23      	ldrb	r3, [r4, #8]
   17062:	f043 0304 	orr.w	r3, r3, #4
   17066:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17068:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1706c:	075b      	lsls	r3, r3, #29
   1706e:	d401      	bmi.n	17074 <bt_id_add.part.0+0xfc>
		BT_WARN("Set privacy mode command is not supported");
   17070:	4b18      	ldr	r3, [pc, #96]	; (170d4 <bt_id_add.part.0+0x15c>)
   17072:	e7a7      	b.n	16fc4 <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   17074:	4639      	mov	r1, r7
   17076:	4668      	mov	r0, sp
   17078:	f010 fdd5 	bl	27c26 <bt_addr_le_copy>
	cp.mode = mode;
   1707c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1707e:	2108      	movs	r1, #8
   17080:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17084:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17088:	f7ff f8c8 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   1708c:	4604      	mov	r4, r0
   1708e:	b908      	cbnz	r0, 17094 <bt_id_add.part.0+0x11c>
		BT_ERR("Failed to set privacy mode");
   17090:	4b11      	ldr	r3, [pc, #68]	; (170d8 <bt_id_add.part.0+0x160>)
   17092:	e7dc      	b.n	1704e <bt_id_add.part.0+0xd6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17094:	2208      	movs	r2, #8
   17096:	4669      	mov	r1, sp
   17098:	4410      	add	r0, r2
   1709a:	f012 fdac 	bl	29bf6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1709e:	4632      	mov	r2, r6
   170a0:	4621      	mov	r1, r4
   170a2:	f242 004e 	movw	r0, #8270	; 0x204e
   170a6:	f7ff f8f3 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   170aa:	2800      	cmp	r0, #0
   170ac:	d0bb      	beq.n	17026 <bt_id_add.part.0+0xae>
   170ae:	e7ef      	b.n	17090 <bt_id_add.part.0+0x118>
   170b0:	2000041c 	.word	0x2000041c
   170b4:	20000350 	.word	0x20000350
   170b8:	00027cf7 	.word	0x00027cf7
   170bc:	0002d4fe 	.word	0x0002d4fe
   170c0:	0002b50c 	.word	0x0002b50c
   170c4:	0002d523 	.word	0x0002d523
   170c8:	0002d554 	.word	0x0002d554
   170cc:	00027c69 	.word	0x00027c69
   170d0:	0002d574 	.word	0x0002d574
   170d4:	0002d594 	.word	0x0002d594
   170d8:	0002d5be 	.word	0x0002d5be

000170dc <set_random_address>:
{
   170dc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   170de:	4914      	ldr	r1, [pc, #80]	; (17130 <set_random_address+0x54>)
   170e0:	2206      	movs	r2, #6
   170e2:	4605      	mov	r5, r0
   170e4:	f010 fb7a 	bl	277dc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   170e8:	4604      	mov	r4, r0
   170ea:	b1e0      	cbz	r0, 17126 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   170ec:	2106      	movs	r1, #6
   170ee:	f242 0005 	movw	r0, #8197	; 0x2005
   170f2:	f7ff f893 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   170f6:	4604      	mov	r4, r0
   170f8:	b1b8      	cbz	r0, 1712a <set_random_address+0x4e>
   170fa:	2206      	movs	r2, #6
   170fc:	4629      	mov	r1, r5
   170fe:	3008      	adds	r0, #8
   17100:	f012 fd79 	bl	29bf6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17104:	4621      	mov	r1, r4
   17106:	2200      	movs	r2, #0
   17108:	f242 0005 	movw	r0, #8197	; 0x2005
   1710c:	f7ff f8c0 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17110:	4604      	mov	r4, r0
   17112:	b940      	cbnz	r0, 17126 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   17114:	2206      	movs	r2, #6
   17116:	4806      	ldr	r0, [pc, #24]	; (17130 <set_random_address+0x54>)
   17118:	4629      	mov	r1, r5
   1711a:	f010 fb88 	bl	2782e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1711e:	4b05      	ldr	r3, [pc, #20]	; (17134 <set_random_address+0x58>)
   17120:	2201      	movs	r2, #1
   17122:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   17126:	4620      	mov	r0, r4
   17128:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1712a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1712e:	e7fa      	b.n	17126 <set_random_address+0x4a>
   17130:	200003b1 	.word	0x200003b1
   17134:	20000350 	.word	0x20000350

00017138 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   17138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1713c:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   1713e:	b087      	sub	sp, #28
   17140:	4604      	mov	r4, r0
   17142:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17144:	2206      	movs	r2, #6
   17146:	4608      	mov	r0, r1
   17148:	f001 f99c 	bl	18484 <bt_conn_lookup_state_le>
	if (conn) {
   1714c:	4605      	mov	r5, r0
   1714e:	b178      	cbz	r0, 17170 <bt_id_del.part.0+0x38>
   17150:	483a      	ldr	r0, [pc, #232]	; (1723c <bt_id_del.part.0+0x104>)
   17152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17156:	f010 fdc2 	bl	27cde <atomic_or.isra.0>
	keys->state |= flag;
   1715a:	7a23      	ldrb	r3, [r4, #8]
   1715c:	f043 0302 	orr.w	r3, r3, #2
   17160:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17162:	4628      	mov	r0, r5
   17164:	f010 fe84 	bl	27e70 <bt_conn_unref>
}
   17168:	371c      	adds	r7, #28
   1716a:	46bd      	mov	sp, r7
   1716c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17170:	4601      	mov	r1, r0
   17172:	4833      	ldr	r0, [pc, #204]	; (17240 <bt_id_del.part.0+0x108>)
   17174:	f000 fbc8 	bl	17908 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17178:	4628      	mov	r0, r5
   1717a:	f010 fd98 	bl	27cae <addr_res_enable>
	if (err) {
   1717e:	4d31      	ldr	r5, [pc, #196]	; (17244 <bt_id_del.part.0+0x10c>)
   17180:	4606      	mov	r6, r0
   17182:	b1d0      	cbz	r0, 171ba <bt_id_del.part.0+0x82>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   17184:	466c      	mov	r4, sp
   17186:	b088      	sub	sp, #32
   17188:	466b      	mov	r3, sp
   1718a:	4a2f      	ldr	r2, [pc, #188]	; (17248 <bt_id_del.part.0+0x110>)
   1718c:	e9c3 2005 	strd	r2, r0, [r3, #20]
   17190:	461a      	mov	r2, r3
   17192:	2303      	movs	r3, #3
   17194:	f842 3f10 	str.w	r3, [r2, #16]!
   17198:	482c      	ldr	r0, [pc, #176]	; (1724c <bt_id_del.part.0+0x114>)
   1719a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1719e:	f010 fd83 	bl	27ca8 <z_log_msg_static_create.constprop.0>
   171a2:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   171a4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   171a8:	b113      	cbz	r3, 171b0 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   171aa:	2001      	movs	r0, #1
   171ac:	f010 fd7f 	bl	27cae <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   171b0:	4827      	ldr	r0, [pc, #156]	; (17250 <bt_id_del.part.0+0x118>)
   171b2:	2100      	movs	r1, #0
   171b4:	f000 fba8 	bl	17908 <bt_le_ext_adv_foreach>
   171b8:	e7d6      	b.n	17168 <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   171ba:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   171be:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   171c2:	429a      	cmp	r2, r3
   171c4:	d20c      	bcs.n	171e0 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   171c6:	3b01      	subs	r3, #1
   171c8:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   171cc:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   171ce:	4921      	ldr	r1, [pc, #132]	; (17254 <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   171d0:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   171d4:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   171d6:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   171d8:	2002      	movs	r0, #2
   171da:	f006 f80f 	bl	1d1fc <bt_keys_foreach>
		goto done;
   171de:	e7e1      	b.n	171a4 <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   171e0:	2107      	movs	r1, #7
   171e2:	f242 0028 	movw	r0, #8232	; 0x2028
   171e6:	f7ff f819 	bl	1621c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   171ea:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   171ee:	4680      	mov	r8, r0
   171f0:	b958      	cbnz	r0, 1720a <bt_id_del.part.0+0xd2>
		BT_ERR("Failed to remove IRK from controller");
   171f2:	4b19      	ldr	r3, [pc, #100]	; (17258 <bt_id_del.part.0+0x120>)
   171f4:	617b      	str	r3, [r7, #20]
   171f6:	4815      	ldr	r0, [pc, #84]	; (1724c <bt_id_del.part.0+0x114>)
   171f8:	2302      	movs	r3, #2
   171fa:	f107 0210 	add.w	r2, r7, #16
   171fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17202:	613b      	str	r3, [r7, #16]
   17204:	f010 fd50 	bl	27ca8 <z_log_msg_static_create.constprop.0>
		goto done;
   17208:	e7cc      	b.n	171a4 <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   1720a:	2107      	movs	r1, #7
   1720c:	3008      	adds	r0, #8
   1720e:	f012 fcec 	bl	29bea <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17212:	4649      	mov	r1, r9
   17214:	f010 fd07 	bl	27c26 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   17218:	4632      	mov	r2, r6
   1721a:	4641      	mov	r1, r8
   1721c:	f242 0028 	movw	r0, #8232	; 0x2028
   17220:	f7ff f836 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17224:	2800      	cmp	r0, #0
   17226:	d1e4      	bne.n	171f2 <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   17228:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1722c:	3b01      	subs	r3, #1
   1722e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   17232:	7a23      	ldrb	r3, [r4, #8]
   17234:	f023 0304 	bic.w	r3, r3, #4
   17238:	7223      	strb	r3, [r4, #8]
   1723a:	e7b3      	b.n	171a4 <bt_id_del.part.0+0x6c>
   1723c:	2000041c 	.word	0x2000041c
   17240:	00027cf7 	.word	0x00027cf7
   17244:	20000350 	.word	0x20000350
   17248:	0002d5d9 	.word	0x0002d5d9
   1724c:	0002b50c 	.word	0x0002b50c
   17250:	00027c69 	.word	0x00027c69
   17254:	00027c93 	.word	0x00027c93
   17258:	0002d606 	.word	0x0002d606

0001725c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1725c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1725e:	4604      	mov	r4, r0
   17260:	b087      	sub	sp, #28
   17262:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17264:	460e      	mov	r6, r1
   17266:	b389      	cbz	r1, 172cc <id_create+0x70>
   17268:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1726a:	2207      	movs	r2, #7
   1726c:	4669      	mov	r1, sp
   1726e:	4630      	mov	r0, r6
   17270:	9300      	str	r3, [sp, #0]
   17272:	f8cd 3003 	str.w	r3, [sp, #3]
   17276:	f010 fab1 	bl	277dc <memcmp>
   1727a:	b338      	cbz	r0, 172cc <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1727c:	4826      	ldr	r0, [pc, #152]	; (17318 <id_create+0xbc>)
   1727e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17282:	4631      	mov	r1, r6
   17284:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17286:	f010 fcce 	bl	27c26 <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   1728a:	4823      	ldr	r0, [pc, #140]	; (17318 <id_create+0xbc>)
		uint8_t zero_irk[16] = { 0 };
   1728c:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
   1728e:	3416      	adds	r4, #22
		uint8_t zero_irk[16] = { 0 };
   17290:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17294:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   17298:	eb00 1404 	add.w	r4, r0, r4, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   1729c:	b36d      	cbz	r5, 172fa <id_create+0x9e>
   1729e:	2210      	movs	r2, #16
   172a0:	a902      	add	r1, sp, #8
   172a2:	4628      	mov	r0, r5
   172a4:	f010 fa9a 	bl	277dc <memcmp>
   172a8:	b338      	cbz	r0, 172fa <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   172aa:	2210      	movs	r2, #16
   172ac:	4629      	mov	r1, r5
   172ae:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   172b0:	f010 fabd 	bl	2782e <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   172b4:	4819      	ldr	r0, [pc, #100]	; (1731c <id_create+0xc0>)
   172b6:	f010 fcb9 	bl	27c2c <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   172ba:	0742      	lsls	r2, r0, #29
   172bc:	f3c0 0380 	ubfx	r3, r0, #2, #1
   172c0:	d527      	bpl.n	17312 <id_create+0xb6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   172c2:	f7fe fa01 	bl	156c8 <bt_settings_save_id>
	}

	return 0;
   172c6:	2000      	movs	r0, #0
}
   172c8:	b007      	add	sp, #28
   172ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
   172cc:	a802      	add	r0, sp, #8
   172ce:	f010 fb90 	bl	279f2 <bt_addr_le_create_static>
			if (err) {
   172d2:	2800      	cmp	r0, #0
   172d4:	d1f8      	bne.n	172c8 <id_create+0x6c>
		} while (id_find(&new_addr) >= 0);
   172d6:	a802      	add	r0, sp, #8
   172d8:	f7ff fe02 	bl	16ee0 <id_find>
   172dc:	2800      	cmp	r0, #0
   172de:	daf5      	bge.n	172cc <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   172e0:	480d      	ldr	r0, [pc, #52]	; (17318 <id_create+0xbc>)
   172e2:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   172e6:	4407      	add	r7, r0
   172e8:	a902      	add	r1, sp, #8
   172ea:	4638      	mov	r0, r7
   172ec:	f010 fc9b 	bl	27c26 <bt_addr_le_copy>
		if (addr) {
   172f0:	2e00      	cmp	r6, #0
   172f2:	d0ca      	beq.n	1728a <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   172f4:	4639      	mov	r1, r7
   172f6:	4630      	mov	r0, r6
   172f8:	e7c5      	b.n	17286 <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   172fa:	2110      	movs	r1, #16
   172fc:	4620      	mov	r0, r4
   172fe:	f008 fc21 	bl	1fb44 <bt_rand>
			if (err) {
   17302:	2800      	cmp	r0, #0
   17304:	d1e0      	bne.n	172c8 <id_create+0x6c>
			if (irk) {
   17306:	2d00      	cmp	r5, #0
   17308:	d0d4      	beq.n	172b4 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
   1730a:	2210      	movs	r2, #16
   1730c:	4621      	mov	r1, r4
   1730e:	4628      	mov	r0, r5
   17310:	e7ce      	b.n	172b0 <id_create+0x54>
	return 0;
   17312:	4618      	mov	r0, r3
   17314:	e7d8      	b.n	172c8 <id_create+0x6c>
   17316:	bf00      	nop
   17318:	20000350 	.word	0x20000350
   1731c:	2000041c 	.word	0x2000041c

00017320 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17320:	4b08      	ldr	r3, [pc, #32]	; (17344 <le_rpa_invalidate+0x24>)
   17322:	f3bf 8f5b 	dmb	ish
   17326:	e853 2f00 	ldrex	r2, [r3]
   1732a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1732e:	e843 2100 	strex	r1, r2, [r3]
   17332:	2900      	cmp	r1, #0
   17334:	d1f7      	bne.n	17326 <le_rpa_invalidate+0x6>
   17336:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   1733a:	4803      	ldr	r0, [pc, #12]	; (17348 <le_rpa_invalidate+0x28>)
   1733c:	2100      	movs	r1, #0
   1733e:	f000 bae3 	b.w	17908 <bt_le_ext_adv_foreach>
   17342:	bf00      	nop
   17344:	2000041c 	.word	0x2000041c
   17348:	00027d21 	.word	0x00027d21

0001734c <bt_id_set_private_addr>:
{
   1734c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1734e:	4603      	mov	r3, r0
   17350:	481a      	ldr	r0, [pc, #104]	; (173bc <bt_id_set_private_addr+0x70>)
   17352:	f010 fc6b 	bl	27c2c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   17356:	0482      	lsls	r2, r0, #18
   17358:	d42d      	bmi.n	173b6 <bt_id_set_private_addr+0x6a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   1735a:	4d19      	ldr	r5, [pc, #100]	; (173c0 <bt_id_set_private_addr+0x74>)
   1735c:	f103 0016 	add.w	r0, r3, #22
   17360:	4669      	mov	r1, sp
   17362:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   17366:	f010 fabd 	bl	278e4 <bt_rpa_create>
	if (!err) {
   1736a:	4604      	mov	r4, r0
   1736c:	b950      	cbnz	r0, 17384 <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   1736e:	4668      	mov	r0, sp
   17370:	f7ff feb4 	bl	170dc <set_random_address>
		if (!err) {
   17374:	4604      	mov	r4, r0
   17376:	b928      	cbnz	r0, 17384 <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1737c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17380:	f010 fcad 	bl	27cde <atomic_or.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   17384:	f8b5 51a0 	ldrh.w	r5, [r5, #416]	; 0x1a0
   17388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1738c:	435d      	muls	r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1738e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17392:	f240 30e7 	movw	r0, #999	; 0x3e7
   17396:	2100      	movs	r1, #0
   17398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1739c:	2300      	movs	r3, #0
   1739e:	fbe5 0106 	umlal	r0, r1, r5, r6
   173a2:	f7e9 f9c7 	bl	734 <__aeabi_uldivmod>
   173a6:	4602      	mov	r2, r0
   173a8:	460b      	mov	r3, r1
   173aa:	4806      	ldr	r0, [pc, #24]	; (173c4 <bt_id_set_private_addr+0x78>)
   173ac:	f00a fbc4 	bl	21b38 <k_work_schedule>
}
   173b0:	4620      	mov	r0, r4
   173b2:	b002      	add	sp, #8
   173b4:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   173b6:	2400      	movs	r4, #0
   173b8:	e7fa      	b.n	173b0 <bt_id_set_private_addr+0x64>
   173ba:	bf00      	nop
   173bc:	2000041c 	.word	0x2000041c
   173c0:	20000350 	.word	0x20000350
   173c4:	200004c0 	.word	0x200004c0

000173c8 <le_update_private_addr>:
{
   173c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173ca:	af00      	add	r7, sp, #0
		le_rpa_invalidate();
   173cc:	f7ff ffa8 	bl	17320 <le_rpa_invalidate>
		adv = bt_le_adv_lookup_legacy();
   173d0:	f000 faa0 	bl	17914 <bt_le_adv_lookup_legacy>
		if (adv &&
   173d4:	4604      	mov	r4, r0
   173d6:	b9b0      	cbnz	r0, 17406 <le_update_private_addr+0x3e>
	uint8_t id = BT_ID_DEFAULT;
   173d8:	2600      	movs	r6, #0
	bool adv_enabled = false;
   173da:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   173dc:	4630      	mov	r0, r6
   173de:	f7ff ffb5 	bl	1734c <bt_id_set_private_addr>
	if (err) {
   173e2:	b328      	cbz	r0, 17430 <le_update_private_addr+0x68>
		BT_WARN("Failed to update RPA address (%d)", err);
   173e4:	466c      	mov	r4, sp
   173e6:	b088      	sub	sp, #32
   173e8:	466a      	mov	r2, sp
   173ea:	4b16      	ldr	r3, [pc, #88]	; (17444 <le_update_private_addr+0x7c>)
   173ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   173f0:	2303      	movs	r3, #3
   173f2:	f842 3f10 	str.w	r3, [r2, #16]!
   173f6:	4814      	ldr	r0, [pc, #80]	; (17448 <le_update_private_addr+0x80>)
   173f8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   173fc:	f010 fc54 	bl	27ca8 <z_log_msg_static_create.constprop.0>
   17400:	46a5      	mov	sp, r4
}
   17402:	46bd      	mov	sp, r7
   17404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17406:	f100 0210 	add.w	r2, r0, #16
   1740a:	2106      	movs	r1, #6
   1740c:	4610      	mov	r0, r2
   1740e:	f010 fc13 	bl	27c38 <atomic_test_bit>
		if (adv &&
   17412:	4605      	mov	r5, r0
   17414:	2800      	cmp	r0, #0
   17416:	d0df      	beq.n	173d8 <le_update_private_addr+0x10>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   17418:	210c      	movs	r1, #12
   1741a:	4610      	mov	r0, r2
   1741c:	f010 fc0c 	bl	27c38 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17420:	4601      	mov	r1, r0
   17422:	2800      	cmp	r0, #0
   17424:	d1d8      	bne.n	173d8 <le_update_private_addr+0x10>
			bt_le_adv_set_enable_legacy(adv, false);
   17426:	4620      	mov	r0, r4
			id = adv->id;
   17428:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   1742a:	f010 fcbe 	bl	27daa <bt_le_adv_set_enable_legacy>
   1742e:	e7d5      	b.n	173dc <le_update_private_addr+0x14>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   17430:	2c00      	cmp	r4, #0
   17432:	d0e6      	beq.n	17402 <le_update_private_addr+0x3a>
	    adv && adv_enabled) {
   17434:	2d00      	cmp	r5, #0
   17436:	d0e4      	beq.n	17402 <le_update_private_addr+0x3a>
		bt_le_adv_set_enable_legacy(adv, true);
   17438:	2101      	movs	r1, #1
   1743a:	4620      	mov	r0, r4
   1743c:	f010 fcb5 	bl	27daa <bt_le_adv_set_enable_legacy>
   17440:	e7df      	b.n	17402 <le_update_private_addr+0x3a>
   17442:	bf00      	nop
   17444:	0002d62b 	.word	0x0002d62b
   17448:	0002b50c 	.word	0x0002b50c

0001744c <rpa_timeout>:
{
   1744c:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   1744e:	2300      	movs	r3, #0
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17450:	4810      	ldr	r0, [pc, #64]	; (17494 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   17452:	f88d 3007 	strb.w	r3, [sp, #7]
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17456:	f10d 0107 	add.w	r1, sp, #7
   1745a:	f000 fa55 	bl	17908 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   1745e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17462:	b99b      	cbnz	r3, 1748c <rpa_timeout+0x40>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17464:	480c      	ldr	r0, [pc, #48]	; (17498 <rpa_timeout+0x4c>)
   17466:	f010 fbe1 	bl	27c2c <atomic_get>
   1746a:	04c1      	lsls	r1, r0, #19
   1746c:	d40e      	bmi.n	1748c <rpa_timeout+0x40>
   1746e:	480a      	ldr	r0, [pc, #40]	; (17498 <rpa_timeout+0x4c>)
   17470:	f010 fbdc 	bl	27c2c <atomic_get>
   17474:	0642      	lsls	r2, r0, #25
   17476:	d404      	bmi.n	17482 <rpa_timeout+0x36>
		le_rpa_invalidate();
   17478:	f7ff ff52 	bl	17320 <le_rpa_invalidate>
}
   1747c:	b003      	add	sp, #12
   1747e:	f85d fb04 	ldr.w	pc, [sp], #4
   17482:	4805      	ldr	r0, [pc, #20]	; (17498 <rpa_timeout+0x4c>)
   17484:	f010 fbd2 	bl	27c2c <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17488:	05c3      	lsls	r3, r0, #23
   1748a:	d5f5      	bpl.n	17478 <rpa_timeout+0x2c>
	le_update_private_addr();
   1748c:	f7ff ff9c 	bl	173c8 <le_update_private_addr>
   17490:	e7f4      	b.n	1747c <rpa_timeout+0x30>
   17492:	bf00      	nop
   17494:	00027c47 	.word	0x00027c47
   17498:	2000041c 	.word	0x2000041c

0001749c <bt_id_pending_keys_update>:
   1749c:	4b0a      	ldr	r3, [pc, #40]	; (174c8 <bt_id_pending_keys_update+0x2c>)
   1749e:	f3bf 8f5b 	dmb	ish
   174a2:	e853 2f00 	ldrex	r2, [r3]
   174a6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   174aa:	e843 1000 	strex	r0, r1, [r3]
   174ae:	2800      	cmp	r0, #0
   174b0:	d1f7      	bne.n	174a2 <bt_id_pending_keys_update+0x6>
   174b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   174b6:	0413      	lsls	r3, r2, #16
   174b8:	d504      	bpl.n	174c4 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   174ba:	4904      	ldr	r1, [pc, #16]	; (174cc <bt_id_pending_keys_update+0x30>)
   174bc:	2200      	movs	r2, #0
   174be:	2002      	movs	r0, #2
   174c0:	f005 be9c 	b.w	1d1fc <bt_keys_foreach>
}
   174c4:	4770      	bx	lr
   174c6:	bf00      	nop
   174c8:	2000041c 	.word	0x2000041c
   174cc:	00027d61 	.word	0x00027d61

000174d0 <bt_id_add>:
{
   174d0:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   174d2:	490a      	ldr	r1, [pc, #40]	; (174fc <bt_id_add+0x2c>)
   174d4:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   174d8:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
   174dc:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   174de:	b10c      	cbz	r4, 174e4 <bt_id_add+0x14>
   174e0:	4294      	cmp	r4, r2
   174e2:	d208      	bcs.n	174f6 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   174e4:	3201      	adds	r2, #1
   174e6:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   174ea:	7a1a      	ldrb	r2, [r3, #8]
}
   174ec:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
   174ee:	f042 0204 	orr.w	r2, r2, #4
   174f2:	721a      	strb	r2, [r3, #8]
}
   174f4:	4770      	bx	lr
   174f6:	bc10      	pop	{r4}
   174f8:	f7ff bd3e 	b.w	16f78 <bt_id_add.part.0>
   174fc:	20000350 	.word	0x20000350

00017500 <bt_id_del>:
{
   17500:	b410      	push	{r4}
	if (!bt_dev.le.rl_size ||
   17502:	4c0b      	ldr	r4, [pc, #44]	; (17530 <bt_id_del+0x30>)
   17504:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17508:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
{
   1750c:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size ||
   1750e:	b111      	cbz	r1, 17516 <bt_id_del+0x16>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17510:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   17512:	428a      	cmp	r2, r1
   17514:	dd08      	ble.n	17528 <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
   17516:	3a01      	subs	r2, #1
   17518:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1751c:	7a1a      	ldrb	r2, [r3, #8]
}
   1751e:	bc10      	pop	{r4}
		keys->state &= ~BT_KEYS_ID_ADDED;
   17520:	f022 0204 	bic.w	r2, r2, #4
   17524:	721a      	strb	r2, [r3, #8]
}
   17526:	4770      	bx	lr
   17528:	bc10      	pop	{r4}
   1752a:	f7ff be05 	b.w	17138 <bt_id_del.part.0>
   1752e:	bf00      	nop
   17530:	20000350 	.word	0x20000350

00017534 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17534:	b5f0      	push	{r4, r5, r6, r7, lr}
   17536:	460e      	mov	r6, r1
   17538:	b089      	sub	sp, #36	; 0x24
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1753a:	4605      	mov	r5, r0
   1753c:	b930      	cbnz	r0, 1754c <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1753e:	4f2d      	ldr	r7, [pc, #180]	; (175f4 <bt_id_create+0xc0>)
   17540:	79fb      	ldrb	r3, [r7, #7]
   17542:	2b01      	cmp	r3, #1
   17544:	d12a      	bne.n	1759c <bt_id_create+0x68>
		return -ENOMEM;
   17546:	f06f 000b 	mvn.w	r0, #11
   1754a:	e025      	b.n	17598 <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1754c:	2300      	movs	r3, #0
   1754e:	2207      	movs	r2, #7
   17550:	4669      	mov	r1, sp
   17552:	9300      	str	r3, [sp, #0]
   17554:	f8cd 3003 	str.w	r3, [sp, #3]
   17558:	f010 f940 	bl	277dc <memcmp>
   1755c:	2800      	cmp	r0, #0
   1755e:	d0ee      	beq.n	1753e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17560:	782b      	ldrb	r3, [r5, #0]
   17562:	2b01      	cmp	r3, #1
   17564:	d104      	bne.n	17570 <bt_id_create+0x3c>
   17566:	79ab      	ldrb	r3, [r5, #6]
   17568:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1756c:	2bc0      	cmp	r3, #192	; 0xc0
   1756e:	d00c      	beq.n	1758a <bt_id_create+0x56>
			BT_ERR("Only static random identity address supported");
   17570:	4b21      	ldr	r3, [pc, #132]	; (175f8 <bt_id_create+0xc4>)
   17572:	9307      	str	r3, [sp, #28]
   17574:	4821      	ldr	r0, [pc, #132]	; (175fc <bt_id_create+0xc8>)
   17576:	2302      	movs	r3, #2
   17578:	aa06      	add	r2, sp, #24
   1757a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1757e:	9306      	str	r3, [sp, #24]
   17580:	f010 fb92 	bl	27ca8 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17584:	f06f 0015 	mvn.w	r0, #21
   17588:	e006      	b.n	17598 <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   1758a:	4628      	mov	r0, r5
   1758c:	f7ff fca8 	bl	16ee0 <id_find>
   17590:	2800      	cmp	r0, #0
   17592:	dbd4      	blt.n	1753e <bt_id_create+0xa>
			return -EALREADY;
   17594:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   17598:	b009      	add	sp, #36	; 0x24
   1759a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1759c:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   175a0:	f010 fb44 	bl	27c2c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   175a4:	f010 0001 	ands.w	r0, r0, #1
   175a8:	d118      	bne.n	175dc <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   175aa:	e9cd 0002 	strd	r0, r0, [sp, #8]
   175ae:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   175b2:	2d00      	cmp	r5, #0
   175b4:	d0e6      	beq.n	17584 <bt_id_create+0x50>
   175b6:	9000      	str	r0, [sp, #0]
   175b8:	2207      	movs	r2, #7
   175ba:	f8cd 0003 	str.w	r0, [sp, #3]
   175be:	4669      	mov	r1, sp
   175c0:	4628      	mov	r0, r5
   175c2:	f010 f90b 	bl	277dc <memcmp>
   175c6:	2800      	cmp	r0, #0
   175c8:	d0dc      	beq.n	17584 <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   175ca:	2e00      	cmp	r6, #0
   175cc:	d0da      	beq.n	17584 <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   175ce:	2210      	movs	r2, #16
   175d0:	a902      	add	r1, sp, #8
   175d2:	4630      	mov	r0, r6
   175d4:	f010 f902 	bl	277dc <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   175d8:	2800      	cmp	r0, #0
   175da:	d0d3      	beq.n	17584 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   175dc:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   175de:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   175e0:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   175e2:	4629      	mov	r1, r5
   175e4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   175e6:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   175e8:	f7ff fe38 	bl	1725c <id_create>
	new_id = bt_dev.id_count++;
   175ec:	2800      	cmp	r0, #0
   175ee:	bf08      	it	eq
   175f0:	4620      	moveq	r0, r4
   175f2:	e7d1      	b.n	17598 <bt_id_create+0x64>
   175f4:	20000350 	.word	0x20000350
   175f8:	0002d64d 	.word	0x0002d64d
   175fc:	0002b50c 	.word	0x0002b50c

00017600 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17600:	b570      	push	{r4, r5, r6, lr}
   17602:	b08a      	sub	sp, #40	; 0x28
   17604:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17606:	aa01      	add	r2, sp, #4
   17608:	2100      	movs	r1, #0
   1760a:	f241 0009 	movw	r0, #4105	; 0x1009
   1760e:	f7fe fe3f 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17612:	4604      	mov	r4, r0
   17614:	b160      	cbz	r0, 17630 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
   17616:	4b1e      	ldr	r3, [pc, #120]	; (17690 <bt_id_read_public_addr+0x90>)
   17618:	9309      	str	r3, [sp, #36]	; 0x24
   1761a:	481e      	ldr	r0, [pc, #120]	; (17694 <bt_id_read_public_addr+0x94>)
   1761c:	2302      	movs	r3, #2
   1761e:	aa08      	add	r2, sp, #32
   17620:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17624:	9308      	str	r3, [sp, #32]
   17626:	f010 fb3f 	bl	27ca8 <z_log_msg_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1762a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1762c:	b00a      	add	sp, #40	; 0x28
   1762e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17630:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17632:	9002      	str	r0, [sp, #8]
   17634:	689d      	ldr	r5, [r3, #8]
   17636:	f8ad 000c 	strh.w	r0, [sp, #12]
   1763a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   1763c:	2206      	movs	r2, #6
   1763e:	a902      	add	r1, sp, #8
   17640:	4628      	mov	r0, r5
   17642:	f010 f8cb 	bl	277dc <memcmp>
   17646:	b918      	cbnz	r0, 17650 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   17648:	9801      	ldr	r0, [sp, #4]
   1764a:	f006 f883 	bl	1d754 <net_buf_unref>
   1764e:	e7ec      	b.n	1762a <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   17650:	23ff      	movs	r3, #255	; 0xff
   17652:	2206      	movs	r2, #6
   17654:	a904      	add	r1, sp, #16
   17656:	4628      	mov	r0, r5
   17658:	f88d 3010 	strb.w	r3, [sp, #16]
   1765c:	f88d 3011 	strb.w	r3, [sp, #17]
   17660:	f88d 3012 	strb.w	r3, [sp, #18]
   17664:	f88d 3013 	strb.w	r3, [sp, #19]
   17668:	f88d 3014 	strb.w	r3, [sp, #20]
   1766c:	f88d 3015 	strb.w	r3, [sp, #21]
   17670:	f010 f8b4 	bl	277dc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17674:	2800      	cmp	r0, #0
   17676:	d0e7      	beq.n	17648 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   17678:	2206      	movs	r2, #6
   1767a:	4629      	mov	r1, r5
   1767c:	1c70      	adds	r0, r6, #1
   1767e:	f010 f8d6 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   17682:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17684:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   17686:	f006 f865 	bl	1d754 <net_buf_unref>
	return 1U;
   1768a:	2001      	movs	r0, #1
   1768c:	e7ce      	b.n	1762c <bt_id_read_public_addr+0x2c>
   1768e:	bf00      	nop
   17690:	0002d67b 	.word	0x0002d67b
   17694:	0002b50c 	.word	0x0002b50c

00017698 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   17698:	b510      	push	{r4, lr}
   1769a:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1769c:	a802      	add	r0, sp, #8
   1769e:	f7ff ffaf 	bl	17600 <bt_id_read_public_addr>
   176a2:	4c1e      	ldr	r4, [pc, #120]	; (1771c <bt_setup_public_id_addr+0x84>)
   176a4:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   176a6:	b348      	cbz	r0, 176fc <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   176a8:	2210      	movs	r2, #16
   176aa:	2100      	movs	r1, #0
   176ac:	eb0d 0002 	add.w	r0, sp, r2
   176b0:	f010 f8c8 	bl	27844 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   176b4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   176b8:	079b      	lsls	r3, r3, #30
   176ba:	d510      	bpl.n	176de <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   176bc:	aa01      	add	r2, sp, #4
   176be:	2100      	movs	r1, #0
   176c0:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   176c4:	f7fe fde4 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   176c8:	b1d0      	cbz	r0, 17700 <bt_setup_public_id_addr+0x68>
		BT_WARN("Failed to read identity root");
   176ca:	4b15      	ldr	r3, [pc, #84]	; (17720 <bt_setup_public_id_addr+0x88>)
   176cc:	930d      	str	r3, [sp, #52]	; 0x34
   176ce:	4815      	ldr	r0, [pc, #84]	; (17724 <bt_setup_public_id_addr+0x8c>)
   176d0:	2302      	movs	r3, #2
   176d2:	aa0c      	add	r2, sp, #48	; 0x30
   176d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   176d8:	930c      	str	r3, [sp, #48]	; 0x30
   176da:	f010 fae5 	bl	27ca8 <z_log_msg_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   176de:	a908      	add	r1, sp, #32
   176e0:	a804      	add	r0, sp, #16
   176e2:	f012 f8d4 	bl	2988e <bt_smp_irk_get>
   176e6:	b1b8      	cbz	r0, 17718 <bt_setup_public_id_addr+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   176e8:	480f      	ldr	r0, [pc, #60]	; (17728 <bt_setup_public_id_addr+0x90>)
   176ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   176ee:	f010 faf6 	bl	27cde <atomic_or.isra.0>
	uint8_t *irk = NULL;
   176f2:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   176f4:	a902      	add	r1, sp, #8
   176f6:	2000      	movs	r0, #0
   176f8:	f7ff fdb0 	bl	1725c <id_create>
}
   176fc:	b00e      	add	sp, #56	; 0x38
   176fe:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   17700:	9b01      	ldr	r3, [sp, #4]
	memcpy(ir, rp->ir, 16);
   17702:	6899      	ldr	r1, [r3, #8]
   17704:	2210      	movs	r2, #16
   17706:	3101      	adds	r1, #1
   17708:	eb0d 0002 	add.w	r0, sp, r2
   1770c:	f010 f88f 	bl	2782e <memcpy>
	net_buf_unref(rsp);
   17710:	9801      	ldr	r0, [sp, #4]
   17712:	f006 f81f 	bl	1d754 <net_buf_unref>
   17716:	e7e2      	b.n	176de <bt_setup_public_id_addr+0x46>
		irk = ir_irk;
   17718:	aa08      	add	r2, sp, #32
   1771a:	e7eb      	b.n	176f4 <bt_setup_public_id_addr+0x5c>
   1771c:	20000350 	.word	0x20000350
   17720:	0002d699 	.word	0x0002d699
   17724:	0002b50c 	.word	0x0002b50c
   17728:	2000041c 	.word	0x2000041c

0001772c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17730:	4b22      	ldr	r3, [pc, #136]	; (177bc <bt_read_static_addr+0x90>)
   17732:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   17736:	f014 0401 	ands.w	r4, r4, #1
{
   1773a:	b088      	sub	sp, #32
   1773c:	4607      	mov	r7, r0
   1773e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17740:	d10a      	bne.n	17758 <bt_read_static_addr+0x2c>
		BT_WARN("Read Static Addresses command not available");
   17742:	4b1f      	ldr	r3, [pc, #124]	; (177c0 <bt_read_static_addr+0x94>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   17744:	9307      	str	r3, [sp, #28]
   17746:	481f      	ldr	r0, [pc, #124]	; (177c4 <bt_read_static_addr+0x98>)
   17748:	2302      	movs	r3, #2
   1774a:	aa06      	add	r2, sp, #24
   1774c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17750:	9306      	str	r3, [sp, #24]
   17752:	f010 faa9 	bl	27ca8 <z_log_msg_static_create.constprop.0>
   17756:	e012      	b.n	1777e <bt_read_static_addr+0x52>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17758:	aa01      	add	r2, sp, #4
   1775a:	2100      	movs	r1, #0
   1775c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17760:	f7fe fd96 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17764:	4605      	mov	r5, r0
   17766:	b170      	cbz	r0, 17786 <bt_read_static_addr+0x5a>
		BT_WARN("Failed to read static addresses");
   17768:	4b17      	ldr	r3, [pc, #92]	; (177c8 <bt_read_static_addr+0x9c>)
   1776a:	9307      	str	r3, [sp, #28]
   1776c:	4815      	ldr	r0, [pc, #84]	; (177c4 <bt_read_static_addr+0x98>)
   1776e:	2302      	movs	r3, #2
   17770:	aa06      	add	r2, sp, #24
   17772:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   17776:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
   17778:	9306      	str	r3, [sp, #24]
   1777a:	f010 fa95 	bl	27ca8 <z_log_msg_static_create.constprop.0>
	}

	return cnt;
}
   1777e:	4620      	mov	r0, r4
   17780:	b008      	add	sp, #32
   17782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   17786:	9b01      	ldr	r3, [sp, #4]
   17788:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1778a:	785c      	ldrb	r4, [r3, #1]
   1778c:	42b4      	cmp	r4, r6
   1778e:	bf28      	it	cs
   17790:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17792:	f04f 0816 	mov.w	r8, #22
   17796:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   17798:	42ac      	cmp	r4, r5
   1779a:	dc06      	bgt.n	177aa <bt_read_static_addr+0x7e>
	net_buf_unref(rsp);
   1779c:	9801      	ldr	r0, [sp, #4]
   1779e:	f005 ffd9 	bl	1d754 <net_buf_unref>
	if (!cnt) {
   177a2:	2c00      	cmp	r4, #0
   177a4:	d1eb      	bne.n	1777e <bt_read_static_addr+0x52>
		BT_WARN("No static addresses stored in controller");
   177a6:	4b09      	ldr	r3, [pc, #36]	; (177cc <bt_read_static_addr+0xa0>)
   177a8:	e7cc      	b.n	17744 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   177aa:	fb08 7005 	mla	r0, r8, r5, r7
   177ae:	2216      	movs	r2, #22
   177b0:	4631      	mov	r1, r6
   177b2:	f010 f83c 	bl	2782e <memcpy>
	for (i = 0; i < cnt; i++) {
   177b6:	3501      	adds	r5, #1
   177b8:	e7ee      	b.n	17798 <bt_read_static_addr+0x6c>
   177ba:	bf00      	nop
   177bc:	20000350 	.word	0x20000350
   177c0:	0002d6b6 	.word	0x0002d6b6
   177c4:	0002b50c 	.word	0x0002b50c
   177c8:	0002d6e2 	.word	0x0002d6e2
   177cc:	0002d702 	.word	0x0002d702

000177d0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   177d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   177d4:	4d22      	ldr	r5, [pc, #136]	; (17860 <bt_setup_random_id_addr+0x90>)
   177d6:	79ec      	ldrb	r4, [r5, #7]
{
   177d8:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   177da:	bbac      	cbnz	r4, 17848 <bt_setup_random_id_addr+0x78>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   177dc:	2101      	movs	r1, #1
   177de:	a806      	add	r0, sp, #24
   177e0:	f7ff ffa4 	bl	1772c <bt_read_static_addr>
   177e4:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   177e6:	b378      	cbz	r0, 17848 <bt_setup_random_id_addr+0x78>
   177e8:	f04f 0816 	mov.w	r8, #22
   177ec:	f105 09cc 	add.w	r9, r5, #204	; 0xcc
   177f0:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   177f2:	fb08 fa06 	mul.w	sl, r8, r6
   177f6:	f10a 0006 	add.w	r0, sl, #6
   177fa:	ab06      	add	r3, sp, #24
   177fc:	a902      	add	r1, sp, #8
   177fe:	4418      	add	r0, r3
   17800:	f012 f845 	bl	2988e <bt_smp_irk_get>
   17804:	b1f0      	cbz	r0, 17844 <bt_setup_random_id_addr+0x74>
   17806:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1780a:	4648      	mov	r0, r9
   1780c:	f010 fa67 	bl	27cde <atomic_or.isra.0>
				uint8_t *irk = NULL;
   17810:	2700      	movs	r7, #0
   17812:	ab06      	add	r3, sp, #24
   17814:	eb03 010a 	add.w	r1, r3, sl
   17818:	2206      	movs	r2, #6
   1781a:	f10d 0001 	add.w	r0, sp, #1
   1781e:	f010 f806 	bl	2782e <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
   17822:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   17824:	463a      	mov	r2, r7
   17826:	4669      	mov	r1, sp
   17828:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1782a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1782e:	f7ff fd15 	bl	1725c <id_create>
				if (err) {
   17832:	b920      	cbnz	r0, 1783e <bt_setup_random_id_addr+0x6e>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17834:	79ea      	ldrb	r2, [r5, #7]
   17836:	3401      	adds	r4, #1
   17838:	b2e3      	uxtb	r3, r4
   1783a:	429a      	cmp	r2, r3
   1783c:	d8d8      	bhi.n	177f0 <bt_setup_random_id_addr+0x20>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   1783e:	b00c      	add	sp, #48	; 0x30
   17840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
   17844:	af02      	add	r7, sp, #8
   17846:	e7e4      	b.n	17812 <bt_setup_random_id_addr+0x42>
   17848:	4806      	ldr	r0, [pc, #24]	; (17864 <bt_setup_random_id_addr+0x94>)
   1784a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1784e:	f010 fa46 	bl	27cde <atomic_or.isra.0>
	return bt_id_create(NULL, NULL);
   17852:	2100      	movs	r1, #0
   17854:	4608      	mov	r0, r1
}
   17856:	b00c      	add	sp, #48	; 0x30
   17858:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   1785c:	f7ff be6a 	b.w	17534 <bt_id_create>
   17860:	20000350 	.word	0x20000350
   17864:	2000041c 	.word	0x2000041c

00017868 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   17868:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   1786a:	4903      	ldr	r1, [pc, #12]	; (17878 <bt_id_init+0x10>)
   1786c:	4803      	ldr	r0, [pc, #12]	; (1787c <bt_id_init+0x14>)
   1786e:	f013 f8d6 	bl	2aa1e <k_work_init_delayable>
#endif

	return 0;
}
   17872:	2000      	movs	r0, #0
   17874:	bd08      	pop	{r3, pc}
   17876:	bf00      	nop
   17878:	0001744d 	.word	0x0001744d
   1787c:	200004c0 	.word	0x200004c0

00017880 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17880:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17882:	4606      	mov	r6, r0
   17884:	4b1e      	ldr	r3, [pc, #120]	; (17900 <le_adv_start_add_conn+0x80>)
   17886:	f816 2b09 	ldrb.w	r2, [r6], #9
   1788a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1788e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17890:	2300      	movs	r3, #0
{
   17892:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
   17894:	2207      	movs	r2, #7
   17896:	460f      	mov	r7, r1
   17898:	4630      	mov	r0, r6
   1789a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1789c:	9300      	str	r3, [sp, #0]
   1789e:	f8cd 3003 	str.w	r3, [sp, #3]
   178a2:	f00f ff9b 	bl	277dc <memcmp>
   178a6:	782a      	ldrb	r2, [r5, #0]
   178a8:	4604      	mov	r4, r0
   178aa:	b9a8      	cbnz	r0, 178d8 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   178ac:	4b15      	ldr	r3, [pc, #84]	; (17904 <le_adv_start_add_conn+0x84>)
   178ae:	6818      	ldr	r0, [r3, #0]
   178b0:	8899      	ldrh	r1, [r3, #4]
   178b2:	9002      	str	r0, [sp, #8]
   178b4:	799b      	ldrb	r3, [r3, #6]
   178b6:	f8ad 100c 	strh.w	r1, [sp, #12]
   178ba:	4610      	mov	r0, r2
   178bc:	a902      	add	r1, sp, #8
   178be:	f88d 300e 	strb.w	r3, [sp, #14]
   178c2:	f000 fd77 	bl	183b4 <bt_conn_add_le>
		if (!conn) {
   178c6:	4605      	mov	r5, r0
   178c8:	b1b8      	cbz	r0, 178fa <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   178ca:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   178cc:	f000 fb82 	bl	17fd4 <bt_conn_set_state>
	*out_conn = conn;
   178d0:	603d      	str	r5, [r7, #0]
	return 0;
}
   178d2:	4620      	mov	r0, r4
   178d4:	b005      	add	sp, #20
   178d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   178d8:	4631      	mov	r1, r6
   178da:	4610      	mov	r0, r2
   178dc:	f000 fda4 	bl	18428 <bt_conn_exists_le>
   178e0:	4604      	mov	r4, r0
   178e2:	b938      	cbnz	r0, 178f4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   178e4:	7828      	ldrb	r0, [r5, #0]
   178e6:	4631      	mov	r1, r6
   178e8:	f000 fd64 	bl	183b4 <bt_conn_add_le>
	if (!conn) {
   178ec:	4605      	mov	r5, r0
   178ee:	b120      	cbz	r0, 178fa <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   178f0:	2105      	movs	r1, #5
   178f2:	e7eb      	b.n	178cc <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   178f4:	f06f 0415 	mvn.w	r4, #21
   178f8:	e7eb      	b.n	178d2 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   178fa:	f06f 040b 	mvn.w	r4, #11
   178fe:	e7e8      	b.n	178d2 <le_adv_start_add_conn+0x52>
   17900:	20000350 	.word	0x20000350
   17904:	0002b8cc 	.word	0x0002b8cc

00017908 <bt_le_ext_adv_foreach>:
{
   17908:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1790a:	4801      	ldr	r0, [pc, #4]	; (17910 <bt_le_ext_adv_foreach+0x8>)
   1790c:	4718      	bx	r3
   1790e:	bf00      	nop
   17910:	20000368 	.word	0x20000368

00017914 <bt_le_adv_lookup_legacy>:
}
   17914:	4800      	ldr	r0, [pc, #0]	; (17918 <bt_le_adv_lookup_legacy+0x4>)
   17916:	4770      	bx	lr
   17918:	20000368 	.word	0x20000368

0001791c <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   1791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1791e:	4822      	ldr	r0, [pc, #136]	; (179a8 <bt_le_adv_resume+0x8c>)
   17920:	4c21      	ldr	r4, [pc, #132]	; (179a8 <bt_le_adv_resume+0x8c>)
   17922:	f010 fa2d 	bl	27d80 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17926:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   1792a:	d03a      	beq.n	179a2 <bt_le_adv_resume+0x86>
   1792c:	4620      	mov	r0, r4
   1792e:	f010 fa27 	bl	27d80 <atomic_get>
   17932:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17934:	f3c0 1580 	ubfx	r5, r0, #6, #1
   17938:	d433      	bmi.n	179a2 <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1793a:	4620      	mov	r0, r4
   1793c:	f010 fa20 	bl	27d80 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17940:	0582      	lsls	r2, r0, #22
   17942:	d52e      	bpl.n	179a2 <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17944:	a901      	add	r1, sp, #4
   17946:	f1a4 0010 	sub.w	r0, r4, #16
   1794a:	f7ff ff99 	bl	17880 <le_adv_start_add_conn>
	if (err) {
   1794e:	bb40      	cbnz	r0, 179a2 <bt_le_adv_resume+0x86>
   17950:	4620      	mov	r0, r4
   17952:	f010 fa15 	bl	27d80 <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17956:	04c3      	lsls	r3, r0, #19
   17958:	d403      	bmi.n	17962 <bt_le_adv_resume+0x46>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
   1795a:	f1a4 0010 	sub.w	r0, r4, #16
   1795e:	f010 f9fc 	bl	27d5a <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17962:	4812      	ldr	r0, [pc, #72]	; (179ac <bt_le_adv_resume+0x90>)
   17964:	2101      	movs	r1, #1
   17966:	f010 fa20 	bl	27daa <bt_le_adv_set_enable_legacy>
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   1796a:	b150      	cbz	r0, 17982 <bt_le_adv_resume+0x66>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1796c:	9801      	ldr	r0, [sp, #4]
   1796e:	2100      	movs	r1, #0
   17970:	f000 fb30 	bl	17fd4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17974:	480c      	ldr	r0, [pc, #48]	; (179a8 <bt_le_adv_resume+0x8c>)
   17976:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1797a:	f010 fa07 	bl	27d8c <atomic_and>
	return (old & mask) != 0;
   1797e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17982:	9801      	ldr	r0, [sp, #4]
   17984:	f010 fa74 	bl	27e70 <bt_conn_unref>
	if (persist_paused) {
   17988:	b15d      	cbz	r5, 179a2 <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1798a:	f3bf 8f5b 	dmb	ish
   1798e:	e854 3f00 	ldrex	r3, [r4]
   17992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17996:	e844 3200 	strex	r2, r3, [r4]
   1799a:	2a00      	cmp	r2, #0
   1799c:	d1f7      	bne.n	1798e <bt_le_adv_resume+0x72>
   1799e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   179a2:	b003      	add	sp, #12
   179a4:	bd30      	pop	{r4, r5, pc}
   179a6:	bf00      	nop
   179a8:	20000378 	.word	0x20000378
   179ac:	20000368 	.word	0x20000368

000179b0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   179b0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   179b2:	4904      	ldr	r1, [pc, #16]	; (179c4 <bt_pub_key_is_debug+0x14>)
   179b4:	2240      	movs	r2, #64	; 0x40
   179b6:	f00f ff11 	bl	277dc <memcmp>
}
   179ba:	fab0 f080 	clz	r0, r0
   179be:	0940      	lsrs	r0, r0, #5
   179c0:	bd08      	pop	{r3, pc}
   179c2:	bf00      	nop
   179c4:	0002d7c6 	.word	0x0002d7c6

000179c8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   179c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   179ca:	4b43      	ldr	r3, [pc, #268]	; (17ad8 <bt_pub_key_gen+0x110>)
   179cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   179d0:	f003 0306 	and.w	r3, r3, #6
   179d4:	2b06      	cmp	r3, #6
{
   179d6:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   179d8:	d00f      	beq.n	179fa <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   179da:	4b40      	ldr	r3, [pc, #256]	; (17adc <bt_pub_key_gen+0x114>)
   179dc:	9305      	str	r3, [sp, #20]
   179de:	2302      	movs	r3, #2
   179e0:	9304      	str	r3, [sp, #16]
   179e2:	483f      	ldr	r0, [pc, #252]	; (17ae0 <bt_pub_key_gen+0x118>)
   179e4:	2300      	movs	r3, #0
   179e6:	aa04      	add	r2, sp, #16
   179e8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   179ec:	f06f 0585 	mvn.w	r5, #133	; 0x85
   179f0:	f7fb ffc8 	bl	13984 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   179f4:	4628      	mov	r0, r5
   179f6:	b007      	add	sp, #28
   179f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   179fa:	2800      	cmp	r0, #0
   179fc:	d069      	beq.n	17ad2 <bt_pub_key_gen+0x10a>
	return list->head;
   179fe:	4e39      	ldr	r6, [pc, #228]	; (17ae4 <bt_pub_key_gen+0x11c>)
   17a00:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17a02:	b1a2      	cbz	r2, 17a2e <bt_pub_key_gen+0x66>
   17a04:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   17a06:	4298      	cmp	r0, r3
   17a08:	d10d      	bne.n	17a26 <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
   17a0a:	4b37      	ldr	r3, [pc, #220]	; (17ae8 <bt_pub_key_gen+0x120>)
   17a0c:	9305      	str	r3, [sp, #20]
   17a0e:	2302      	movs	r3, #2
   17a10:	9304      	str	r3, [sp, #16]
   17a12:	4833      	ldr	r0, [pc, #204]	; (17ae0 <bt_pub_key_gen+0x118>)
   17a14:	2300      	movs	r3, #0
   17a16:	aa04      	add	r2, sp, #16
   17a18:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17a1c:	f7fb ffb2 	bl	13984 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   17a20:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17a24:	e7e6      	b.n	179f4 <bt_pub_key_gen+0x2c>
	return node->next;
   17a26:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17a28:	b10b      	cbz	r3, 17a2e <bt_pub_key_gen+0x66>
   17a2a:	3b04      	subs	r3, #4
   17a2c:	e7eb      	b.n	17a06 <bt_pub_key_gen+0x3e>
	parent->next = child;
   17a2e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17a30:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17a32:	1d03      	adds	r3, r0, #4
	list->head = node;
   17a34:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17a36:	b902      	cbnz	r2, 17a3a <bt_pub_key_gen+0x72>
	list->tail = node;
   17a38:	6073      	str	r3, [r6, #4]
   17a3a:	4c2c      	ldr	r4, [pc, #176]	; (17aec <bt_pub_key_gen+0x124>)
   17a3c:	f3bf 8f5b 	dmb	ish
   17a40:	e854 7f00 	ldrex	r7, [r4]
   17a44:	f047 0320 	orr.w	r3, r7, #32
   17a48:	e844 3200 	strex	r2, r3, [r4]
   17a4c:	2a00      	cmp	r2, #0
   17a4e:	d1f7      	bne.n	17a40 <bt_pub_key_gen+0x78>
   17a50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17a54:	f017 0720 	ands.w	r7, r7, #32
   17a58:	d001      	beq.n	17a5e <bt_pub_key_gen+0x96>
		return 0;
   17a5a:	2500      	movs	r5, #0
   17a5c:	e7ca      	b.n	179f4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a5e:	f3bf 8f5b 	dmb	ish
   17a62:	e854 3f00 	ldrex	r3, [r4]
   17a66:	f023 0310 	bic.w	r3, r3, #16
   17a6a:	e844 3200 	strex	r2, r3, [r4]
   17a6e:	2a00      	cmp	r2, #0
   17a70:	d1f7      	bne.n	17a62 <bt_pub_key_gen+0x9a>
   17a72:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17a76:	463a      	mov	r2, r7
   17a78:	4639      	mov	r1, r7
   17a7a:	f242 0025 	movw	r0, #8229	; 0x2025
   17a7e:	f7fe fc07 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17a82:	4605      	mov	r5, r0
   17a84:	2800      	cmp	r0, #0
   17a86:	d0e8      	beq.n	17a5a <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
   17a88:	4b19      	ldr	r3, [pc, #100]	; (17af0 <bt_pub_key_gen+0x128>)
   17a8a:	9305      	str	r3, [sp, #20]
   17a8c:	2302      	movs	r3, #2
   17a8e:	9304      	str	r3, [sp, #16]
   17a90:	4813      	ldr	r0, [pc, #76]	; (17ae0 <bt_pub_key_gen+0x118>)
   17a92:	463b      	mov	r3, r7
   17a94:	aa04      	add	r2, sp, #16
   17a96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17a9a:	f7fb ff73 	bl	13984 <z_impl_z_log_msg_static_create>
   17a9e:	f3bf 8f5b 	dmb	ish
   17aa2:	e854 3f00 	ldrex	r3, [r4]
   17aa6:	f023 0320 	bic.w	r3, r3, #32
   17aaa:	e844 3200 	strex	r2, r3, [r4]
   17aae:	2a00      	cmp	r2, #0
   17ab0:	d1f7      	bne.n	17aa2 <bt_pub_key_gen+0xda>
   17ab2:	f3bf 8f5b 	dmb	ish
	return list->head;
   17ab6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17ab8:	b13c      	cbz	r4, 17aca <bt_pub_key_gen+0x102>
			if (cb->func) {
   17aba:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17abe:	3c04      	subs	r4, #4
			if (cb->func) {
   17ac0:	b10b      	cbz	r3, 17ac6 <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   17ac2:	2000      	movs	r0, #0
   17ac4:	4798      	blx	r3
	return node->next;
   17ac6:	6864      	ldr	r4, [r4, #4]
   17ac8:	e7f6      	b.n	17ab8 <bt_pub_key_gen+0xf0>
	list->head = NULL;
   17aca:	2300      	movs	r3, #0
	list->tail = NULL;
   17acc:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   17ad0:	e790      	b.n	179f4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   17ad2:	f06f 0515 	mvn.w	r5, #21
   17ad6:	e78d      	b.n	179f4 <bt_pub_key_gen+0x2c>
   17ad8:	20000350 	.word	0x20000350
   17adc:	0002d738 	.word	0x0002d738
   17ae0:	0002b4ec 	.word	0x0002b4ec
   17ae4:	20002cf4 	.word	0x20002cf4
   17ae8:	0002d757 	.word	0x0002d757
   17aec:	2000041c 	.word	0x2000041c
   17af0:	0002d773 	.word	0x0002d773

00017af4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17af4:	4b05      	ldr	r3, [pc, #20]	; (17b0c <bt_pub_key_get+0x18>)
   17af6:	f3bf 8f5b 	dmb	ish
   17afa:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17afc:	4804      	ldr	r0, [pc, #16]	; (17b10 <bt_pub_key_get+0x1c>)
   17afe:	f3bf 8f5b 	dmb	ish
		return pub_key;
   17b02:	f013 0f10 	tst.w	r3, #16
}
   17b06:	bf08      	it	eq
   17b08:	2000      	moveq	r0, #0
   17b0a:	4770      	bx	lr
   17b0c:	2000041c 	.word	0x2000041c
   17b10:	20003d6b 	.word	0x20003d6b

00017b14 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   17b18:	4d28      	ldr	r5, [pc, #160]	; (17bbc <bt_dh_key_gen+0xa8>)
   17b1a:	682b      	ldr	r3, [r5, #0]
   17b1c:	428b      	cmp	r3, r1
{
   17b1e:	af00      	add	r7, sp, #0
   17b20:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   17b22:	d045      	beq.n	17bb0 <bt_dh_key_gen+0x9c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17b24:	b12b      	cbz	r3, 17b32 <bt_dh_key_gen+0x1e>
		return -EBUSY;
   17b26:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17b2a:	4620      	mov	r0, r4
   17b2c:	46bd      	mov	sp, r7
   17b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b32:	4b23      	ldr	r3, [pc, #140]	; (17bc0 <bt_dh_key_gen+0xac>)
   17b34:	f3bf 8f5b 	dmb	ish
   17b38:	681a      	ldr	r2, [r3, #0]
   17b3a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17b3e:	f3c2 1840 	ubfx	r8, r2, #5, #1
   17b42:	0692      	lsls	r2, r2, #26
   17b44:	d4ef      	bmi.n	17b26 <bt_dh_key_gen+0x12>
   17b46:	f3bf 8f5b 	dmb	ish
   17b4a:	681b      	ldr	r3, [r3, #0]
   17b4c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17b50:	06db      	lsls	r3, r3, #27
   17b52:	d530      	bpl.n	17bb6 <bt_dh_key_gen+0xa2>
	dh_key_cb = cb;
   17b54:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   17b56:	f242 0026 	movw	r0, #8230	; 0x2026
   17b5a:	2140      	movs	r1, #64	; 0x40
   17b5c:	f7fe fb5e 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   17b60:	4604      	mov	r4, r0
   17b62:	b310      	cbz	r0, 17baa <bt_dh_key_gen+0x96>
   17b64:	2140      	movs	r1, #64	; 0x40
   17b66:	3008      	adds	r0, #8
   17b68:	f012 f83f 	bl	29bea <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17b6c:	2240      	movs	r2, #64	; 0x40
   17b6e:	4631      	mov	r1, r6
   17b70:	f00f fe5d 	bl	2782e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17b74:	4621      	mov	r1, r4
   17b76:	4642      	mov	r2, r8
   17b78:	f242 0026 	movw	r0, #8230	; 0x2026
   17b7c:	f7fe fb88 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17b80:	4604      	mov	r4, r0
   17b82:	2800      	cmp	r0, #0
   17b84:	d0d1      	beq.n	17b2a <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   17b86:	2300      	movs	r3, #0
   17b88:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17b8a:	466d      	mov	r5, sp
   17b8c:	b088      	sub	sp, #32
   17b8e:	466a      	mov	r2, sp
   17b90:	490c      	ldr	r1, [pc, #48]	; (17bc4 <bt_dh_key_gen+0xb0>)
   17b92:	e9c2 1405 	strd	r1, r4, [r2, #20]
   17b96:	2103      	movs	r1, #3
   17b98:	f842 1f10 	str.w	r1, [r2, #16]!
   17b9c:	480a      	ldr	r0, [pc, #40]	; (17bc8 <bt_dh_key_gen+0xb4>)
   17b9e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17ba2:	f7fb feef 	bl	13984 <z_impl_z_log_msg_static_create>
   17ba6:	46ad      	mov	sp, r5
		return err;
   17ba8:	e7bf      	b.n	17b2a <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   17baa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17bae:	e7ea      	b.n	17b86 <bt_dh_key_gen+0x72>
		return -EALREADY;
   17bb0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17bb4:	e7b9      	b.n	17b2a <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   17bb6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   17bba:	e7b6      	b.n	17b2a <bt_dh_key_gen+0x16>
   17bbc:	20002cf0 	.word	0x20002cf0
   17bc0:	2000041c 	.word	0x2000041c
   17bc4:	0002d79d 	.word	0x0002d79d
   17bc8:	0002b4ec 	.word	0x0002b4ec

00017bcc <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17bce:	4c1b      	ldr	r4, [pc, #108]	; (17c3c <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17bd0:	6886      	ldr	r6, [r0, #8]
   17bd2:	f3bf 8f5b 	dmb	ish
   17bd6:	e854 3f00 	ldrex	r3, [r4]
   17bda:	f023 0320 	bic.w	r3, r3, #32
   17bde:	e844 3200 	strex	r2, r3, [r4]
   17be2:	2a00      	cmp	r2, #0
   17be4:	d1f7      	bne.n	17bd6 <bt_hci_evt_le_pkey_complete+0xa>
   17be6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   17bea:	7833      	ldrb	r3, [r6, #0]
   17bec:	b983      	cbnz	r3, 17c10 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   17bee:	4814      	ldr	r0, [pc, #80]	; (17c40 <bt_hci_evt_le_pkey_complete+0x74>)
   17bf0:	2240      	movs	r2, #64	; 0x40
   17bf2:	1c71      	adds	r1, r6, #1
   17bf4:	f00f fe1b 	bl	2782e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17bf8:	f3bf 8f5b 	dmb	ish
   17bfc:	e854 3f00 	ldrex	r3, [r4]
   17c00:	f043 0310 	orr.w	r3, r3, #16
   17c04:	e844 3200 	strex	r2, r3, [r4]
   17c08:	2a00      	cmp	r2, #0
   17c0a:	d1f7      	bne.n	17bfc <bt_hci_evt_le_pkey_complete+0x30>
   17c0c:	f3bf 8f5b 	dmb	ish
	return list->head;
   17c10:	4d0c      	ldr	r5, [pc, #48]	; (17c44 <bt_hci_evt_le_pkey_complete+0x78>)
   17c12:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17c14:	b16c      	cbz	r4, 17c32 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17c16:	4f0a      	ldr	r7, [pc, #40]	; (17c40 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17c18:	3c04      	subs	r4, #4
		if (cb->func) {
   17c1a:	6823      	ldr	r3, [r4, #0]
   17c1c:	b12b      	cbz	r3, 17c2a <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   17c1e:	7832      	ldrb	r2, [r6, #0]
   17c20:	2a00      	cmp	r2, #0
   17c22:	bf0c      	ite	eq
   17c24:	4638      	moveq	r0, r7
   17c26:	2000      	movne	r0, #0
   17c28:	4798      	blx	r3
	return node->next;
   17c2a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17c2c:	b10c      	cbz	r4, 17c32 <bt_hci_evt_le_pkey_complete+0x66>
   17c2e:	3c04      	subs	r4, #4
   17c30:	e7f3      	b.n	17c1a <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   17c32:	2300      	movs	r3, #0
	list->tail = NULL;
   17c34:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c3a:	bf00      	nop
   17c3c:	2000041c 	.word	0x2000041c
   17c40:	20003d6b 	.word	0x20003d6b
   17c44:	20002cf4 	.word	0x20002cf4

00017c48 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17c48:	4905      	ldr	r1, [pc, #20]	; (17c60 <bt_hci_evt_le_dhkey_complete+0x18>)
   17c4a:	680b      	ldr	r3, [r1, #0]
   17c4c:	b133      	cbz	r3, 17c5c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17c4e:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17c50:	2000      	movs	r0, #0
   17c52:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17c54:	7811      	ldrb	r1, [r2, #0]
   17c56:	b901      	cbnz	r1, 17c5a <bt_hci_evt_le_dhkey_complete+0x12>
   17c58:	1c50      	adds	r0, r2, #1
   17c5a:	4718      	bx	r3
	}
}
   17c5c:	4770      	bx	lr
   17c5e:	bf00      	nop
   17c60:	20002cf0 	.word	0x20002cf0

00017c64 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17c64:	4b0b      	ldr	r3, [pc, #44]	; (17c94 <notify_connected+0x30>)
{
   17c66:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   17c68:	681d      	ldr	r5, [r3, #0]
{
   17c6a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17c6c:	b925      	cbnz	r5, 17c78 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c6e:	4d0a      	ldr	r5, [pc, #40]	; (17c98 <notify_connected+0x34>)
   17c70:	4e0a      	ldr	r6, [pc, #40]	; (17c9c <notify_connected+0x38>)
   17c72:	42b5      	cmp	r5, r6
   17c74:	d307      	bcc.n	17c86 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   17c76:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   17c78:	682b      	ldr	r3, [r5, #0]
   17c7a:	b113      	cbz	r3, 17c82 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   17c7c:	7b21      	ldrb	r1, [r4, #12]
   17c7e:	4620      	mov	r0, r4
   17c80:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17c82:	69ad      	ldr	r5, [r5, #24]
   17c84:	e7f2      	b.n	17c6c <notify_connected+0x8>
		if (cb->connected) {
   17c86:	682b      	ldr	r3, [r5, #0]
   17c88:	b113      	cbz	r3, 17c90 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   17c8a:	7b21      	ldrb	r1, [r4, #12]
   17c8c:	4620      	mov	r0, r4
   17c8e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c90:	351c      	adds	r5, #28
   17c92:	e7ee      	b.n	17c72 <notify_connected+0xe>
   17c94:	20002d08 	.word	0x20002d08
   17c98:	0002b470 	.word	0x0002b470
   17c9c:	0002b48c 	.word	0x0002b48c

00017ca0 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   17ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
   17ca2:	4b07      	ldr	r3, [pc, #28]	; (17cc0 <bt_conn_create_pdu_timeout.part.0+0x20>)
   17ca4:	9305      	str	r3, [sp, #20]
   17ca6:	4807      	ldr	r0, [pc, #28]	; (17cc4 <bt_conn_create_pdu_timeout.part.0+0x24>)
   17ca8:	2302      	movs	r3, #2
   17caa:	aa04      	add	r2, sp, #16
   17cac:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17cb0:	9304      	str	r3, [sp, #16]
   17cb2:	f010 f8b3 	bl	27e1c <z_log_msg_static_create.constprop.0>
}
   17cb6:	2000      	movs	r0, #0
   17cb8:	b007      	add	sp, #28
   17cba:	f85d fb04 	ldr.w	pc, [sp], #4
   17cbe:	bf00      	nop
   17cc0:	0002d806 	.word	0x0002d806
   17cc4:	0002b4dc 	.word	0x0002b4dc

00017cc8 <tx_notify>:
{
   17cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   17ccc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 17d1c <tx_notify+0x54>
{
   17cd0:	4604      	mov	r4, r0
	tx->cb = NULL;
   17cd2:	2700      	movs	r7, #0
	__asm__ volatile(
   17cd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   17cd8:	f3ef 8211 	mrs	r2, BASEPRI
   17cdc:	f383 8812 	msr	BASEPRI_MAX, r3
   17ce0:	f3bf 8f6f 	isb	sy
	return list->head;
   17ce4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   17ce6:	b129      	cbz	r1, 17cf4 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   17cea:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17cec:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17cee:	4281      	cmp	r1, r0
	list->tail = node;
   17cf0:	bf08      	it	eq
   17cf2:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   17cf4:	f382 8811 	msr	BASEPRI, r2
   17cf8:	f3bf 8f6f 	isb	sy
		if (!tx) {
   17cfc:	b161      	cbz	r1, 17d18 <tx_notify+0x50>
		user_data = tx->user_data;
   17cfe:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   17d02:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   17d04:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   17d08:	4640      	mov	r0, r8
   17d0a:	f012 fd73 	bl	2a7f4 <k_queue_append>
		cb(conn, user_data, 0);
   17d0e:	2200      	movs	r2, #0
   17d10:	4631      	mov	r1, r6
   17d12:	4620      	mov	r0, r4
   17d14:	47a8      	blx	r5
	while (1) {
   17d16:	e7dd      	b.n	17cd4 <tx_notify+0xc>
}
   17d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d1c:	20000ae0 	.word	0x20000ae0

00017d20 <conn_tx_destroy>:
{
   17d20:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   17d22:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   17d26:	2200      	movs	r2, #0
	tx->user_data = NULL;
   17d28:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   17d2c:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   17d2e:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   17d30:	4805      	ldr	r0, [pc, #20]	; (17d48 <conn_tx_destroy+0x28>)
   17d32:	f012 fd5f 	bl	2a7f4 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   17d36:	4631      	mov	r1, r6
   17d38:	4620      	mov	r0, r4
   17d3a:	462b      	mov	r3, r5
   17d3c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   17d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   17d44:	4718      	bx	r3
   17d46:	bf00      	nop
   17d48:	20000ae0 	.word	0x20000ae0

00017d4c <bt_conn_get_pkts>:
}
   17d4c:	4800      	ldr	r0, [pc, #0]	; (17d50 <bt_conn_get_pkts+0x4>)
   17d4e:	4770      	bx	lr
   17d50:	20000450 	.word	0x20000450

00017d54 <bt_conn_new>:
{
   17d54:	b538      	push	{r3, r4, r5, lr}
   17d56:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17d58:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17d5a:	2501      	movs	r5, #1
   17d5c:	428b      	cmp	r3, r1
   17d5e:	d102      	bne.n	17d66 <bt_conn_new+0x12>
		return NULL;
   17d60:	2400      	movs	r4, #0
}
   17d62:	4620      	mov	r0, r4
   17d64:	bd38      	pop	{r3, r4, r5, pc}
   17d66:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   17d6a:	f3bf 8f5b 	dmb	ish
   17d6e:	e852 0f00 	ldrex	r0, [r2]
   17d72:	2800      	cmp	r0, #0
   17d74:	d104      	bne.n	17d80 <bt_conn_new+0x2c>
   17d76:	e842 5c00 	strex	ip, r5, [r2]
   17d7a:	f1bc 0f00 	cmp.w	ip, #0
   17d7e:	d1f6      	bne.n	17d6e <bt_conn_new+0x1a>
   17d80:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17d84:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   17d88:	d002      	beq.n	17d90 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17d8a:	3301      	adds	r3, #1
   17d8c:	4604      	mov	r4, r0
   17d8e:	e7e5      	b.n	17d5c <bt_conn_new+0x8>
	if (!conn) {
   17d90:	2c00      	cmp	r4, #0
   17d92:	d0e6      	beq.n	17d62 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17d94:	22b8      	movs	r2, #184	; 0xb8
   17d96:	2100      	movs	r1, #0
   17d98:	4620      	mov	r0, r4
   17d9a:	f00f fd53 	bl	27844 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17da2:	4904      	ldr	r1, [pc, #16]	; (17db4 <bt_conn_new+0x60>)
   17da4:	f012 fe3b 	bl	2aa1e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17da8:	4903      	ldr	r1, [pc, #12]	; (17db8 <bt_conn_new+0x64>)
   17daa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17dae:	f012 fdf2 	bl	2a996 <k_work_init>
	return conn;
   17db2:	e7d6      	b.n	17d62 <bt_conn_new+0xe>
   17db4:	00018535 	.word	0x00018535
   17db8:	00027e23 	.word	0x00027e23

00017dbc <bt_conn_recv>:
{
   17dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dc0:	b086      	sub	sp, #24
   17dc2:	4616      	mov	r6, r2
   17dc4:	af00      	add	r7, sp, #0
   17dc6:	4604      	mov	r4, r0
   17dc8:	460d      	mov	r5, r1
	tx_notify(conn);
   17dca:	f7ff ff7d 	bl	17cc8 <tx_notify>
	switch (flags) {
   17dce:	2e01      	cmp	r6, #1
   17dd0:	d030      	beq.n	17e34 <bt_conn_recv+0x78>
   17dd2:	2e02      	cmp	r6, #2
   17dd4:	d16a      	bne.n	17eac <bt_conn_recv+0xf0>
		if (conn->rx) {
   17dd6:	6923      	ldr	r3, [r4, #16]
   17dd8:	b163      	cbz	r3, 17df4 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   17dda:	4b40      	ldr	r3, [pc, #256]	; (17edc <bt_conn_recv+0x120>)
   17ddc:	4840      	ldr	r0, [pc, #256]	; (17ee0 <bt_conn_recv+0x124>)
   17dde:	f107 0210 	add.w	r2, r7, #16
   17de2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17de6:	e9c7 6304 	strd	r6, r3, [r7, #16]
   17dea:	f010 f817 	bl	27e1c <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   17dee:	4620      	mov	r0, r4
   17df0:	f010 f81a 	bl	27e28 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17df4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17df6:	6921      	ldr	r1, [r4, #16]
   17df8:	8988      	ldrh	r0, [r1, #12]
   17dfa:	2801      	cmp	r0, #1
   17dfc:	d930      	bls.n	17e60 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17dfe:	688b      	ldr	r3, [r1, #8]
   17e00:	881b      	ldrh	r3, [r3, #0]
   17e02:	3304      	adds	r3, #4
   17e04:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17e06:	4298      	cmp	r0, r3
   17e08:	d32a      	bcc.n	17e60 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   17e0a:	d95f      	bls.n	17ecc <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   17e0c:	466d      	mov	r5, sp
   17e0e:	b088      	sub	sp, #32
   17e10:	466a      	mov	r2, sp
   17e12:	4934      	ldr	r1, [pc, #208]	; (17ee4 <bt_conn_recv+0x128>)
   17e14:	61d3      	str	r3, [r2, #28]
   17e16:	2304      	movs	r3, #4
   17e18:	e9c2 1005 	strd	r1, r0, [r2, #20]
   17e1c:	f842 3f10 	str.w	r3, [r2, #16]!
   17e20:	482f      	ldr	r0, [pc, #188]	; (17ee0 <bt_conn_recv+0x124>)
   17e22:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17e26:	f00f fff9 	bl	27e1c <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   17e2a:	4620      	mov	r0, r4
   17e2c:	46ad      	mov	sp, r5
   17e2e:	f00f fffb 	bl	27e28 <bt_conn_reset_rx_state>
		return;
   17e32:	e015      	b.n	17e60 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   17e34:	6920      	ldr	r0, [r4, #16]
   17e36:	b970      	cbnz	r0, 17e56 <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   17e38:	4b2b      	ldr	r3, [pc, #172]	; (17ee8 <bt_conn_recv+0x12c>)
   17e3a:	617b      	str	r3, [r7, #20]
   17e3c:	4828      	ldr	r0, [pc, #160]	; (17ee0 <bt_conn_recv+0x124>)
   17e3e:	2302      	movs	r3, #2
   17e40:	f107 0210 	add.w	r2, r7, #16
   17e44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17e48:	613b      	str	r3, [r7, #16]
   17e4a:	f00f ffe7 	bl	27e1c <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   17e4e:	4620      	mov	r0, r4
   17e50:	f00f ffea 	bl	27e28 <bt_conn_reset_rx_state>
   17e54:	e001      	b.n	17e5a <bt_conn_recv+0x9e>
		if (!buf->len) {
   17e56:	89ae      	ldrh	r6, [r5, #12]
   17e58:	b936      	cbnz	r6, 17e68 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   17e5a:	4628      	mov	r0, r5
   17e5c:	f005 fc7a 	bl	1d754 <net_buf_unref>
}
   17e60:	3718      	adds	r7, #24
   17e62:	46bd      	mov	sp, r7
   17e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17e68:	3008      	adds	r0, #8
   17e6a:	f011 ff01 	bl	29c70 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17e6e:	4286      	cmp	r6, r0
   17e70:	d912      	bls.n	17e98 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   17e72:	4b1e      	ldr	r3, [pc, #120]	; (17eec <bt_conn_recv+0x130>)
   17e74:	481a      	ldr	r0, [pc, #104]	; (17ee0 <bt_conn_recv+0x124>)
   17e76:	617b      	str	r3, [r7, #20]
   17e78:	f107 0210 	add.w	r2, r7, #16
   17e7c:	2302      	movs	r3, #2
   17e7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17e82:	613b      	str	r3, [r7, #16]
   17e84:	f00f ffca 	bl	27e1c <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   17e88:	2200      	movs	r2, #0
   17e8a:	6921      	ldr	r1, [r4, #16]
   17e8c:	4620      	mov	r0, r4
   17e8e:	f000 fcd5 	bl	1883c <bt_l2cap_recv>
			conn->rx = NULL;
   17e92:	2300      	movs	r3, #0
   17e94:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   17e96:	e7e0      	b.n	17e5a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17e98:	6920      	ldr	r0, [r4, #16]
   17e9a:	89aa      	ldrh	r2, [r5, #12]
   17e9c:	68a9      	ldr	r1, [r5, #8]
   17e9e:	3008      	adds	r0, #8
   17ea0:	f011 fea9 	bl	29bf6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17ea4:	4628      	mov	r0, r5
   17ea6:	f005 fc55 	bl	1d754 <net_buf_unref>
		break;
   17eaa:	e7a4      	b.n	17df6 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17eac:	46e8      	mov	r8, sp
   17eae:	b088      	sub	sp, #32
   17eb0:	466a      	mov	r2, sp
   17eb2:	4b0f      	ldr	r3, [pc, #60]	; (17ef0 <bt_conn_recv+0x134>)
   17eb4:	480a      	ldr	r0, [pc, #40]	; (17ee0 <bt_conn_recv+0x124>)
	switch (flags) {
   17eb6:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17eba:	2303      	movs	r3, #3
   17ebc:	f842 3f10 	str.w	r3, [r2, #16]!
   17ec0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ec4:	f00f ffaa 	bl	27e1c <z_log_msg_static_create.constprop.0>
   17ec8:	46c5      	mov	sp, r8
   17eca:	e7c0      	b.n	17e4e <bt_conn_recv+0x92>
	conn->rx = NULL;
   17ecc:	2300      	movs	r3, #0
   17ece:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17ed0:	2201      	movs	r2, #1
   17ed2:	4620      	mov	r0, r4
   17ed4:	f000 fcb2 	bl	1883c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   17ed8:	e7c2      	b.n	17e60 <bt_conn_recv+0xa4>
   17eda:	bf00      	nop
   17edc:	0002d82f 	.word	0x0002d82f
   17ee0:	0002b4dc 	.word	0x0002b4dc
   17ee4:	0002d8af 	.word	0x0002d8af
   17ee8:	0002d84c 	.word	0x0002d84c
   17eec:	0002d86a 	.word	0x0002d86a
   17ef0:	0002d891 	.word	0x0002d891

00017ef4 <bt_conn_send_cb>:
{
   17ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ef8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   17efa:	7b43      	ldrb	r3, [r0, #13]
   17efc:	2b07      	cmp	r3, #7
{
   17efe:	b086      	sub	sp, #24
   17f00:	4605      	mov	r5, r0
   17f02:	460e      	mov	r6, r1
   17f04:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   17f06:	d00c      	beq.n	17f22 <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   17f08:	4b28      	ldr	r3, [pc, #160]	; (17fac <bt_conn_send_cb+0xb8>)
   17f0a:	9305      	str	r3, [sp, #20]
   17f0c:	4828      	ldr	r0, [pc, #160]	; (17fb0 <bt_conn_send_cb+0xbc>)
   17f0e:	2302      	movs	r3, #2
   17f10:	aa04      	add	r2, sp, #16
   17f12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f16:	9304      	str	r3, [sp, #16]
   17f18:	f00f ff80 	bl	27e1c <z_log_msg_static_create.constprop.0>
			return -ENOTCONN;
   17f1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17f20:	e01d      	b.n	17f5e <bt_conn_send_cb+0x6a>
	if (cb) {
   17f22:	2a00      	cmp	r2, #0
   17f24:	d040      	beq.n	17fa8 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   17f26:	f00a f94d 	bl	221c4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17f2a:	4b22      	ldr	r3, [pc, #136]	; (17fb4 <bt_conn_send_cb+0xc0>)
   17f2c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17f2e:	4822      	ldr	r0, [pc, #136]	; (17fb8 <bt_conn_send_cb+0xc4>)
   17f30:	bf07      	ittee	eq
   17f32:	2200      	moveq	r2, #0
   17f34:	2300      	moveq	r3, #0
   17f36:	f04f 32ff 	movne.w	r2, #4294967295
   17f3a:	f04f 33ff 	movne.w	r3, #4294967295
   17f3e:	f009 fbd1 	bl	216e4 <z_impl_k_queue_get>
   17f42:	4604      	mov	r4, r0
		if (!tx) {
   17f44:	b970      	cbnz	r0, 17f64 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   17f46:	4b1d      	ldr	r3, [pc, #116]	; (17fbc <bt_conn_send_cb+0xc8>)
   17f48:	4819      	ldr	r0, [pc, #100]	; (17fb0 <bt_conn_send_cb+0xbc>)
   17f4a:	9305      	str	r3, [sp, #20]
   17f4c:	aa04      	add	r2, sp, #16
   17f4e:	2302      	movs	r3, #2
   17f50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f54:	9304      	str	r3, [sp, #16]
   17f56:	f00f ff61 	bl	27e1c <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   17f5a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17f5e:	b006      	add	sp, #24
   17f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17f64:	7b6b      	ldrb	r3, [r5, #13]
   17f66:	2b07      	cmp	r3, #7
   17f68:	d012      	beq.n	17f90 <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   17f6a:	4b15      	ldr	r3, [pc, #84]	; (17fc0 <bt_conn_send_cb+0xcc>)
   17f6c:	9305      	str	r3, [sp, #20]
   17f6e:	4810      	ldr	r0, [pc, #64]	; (17fb0 <bt_conn_send_cb+0xbc>)
   17f70:	2302      	movs	r3, #2
   17f72:	aa04      	add	r2, sp, #16
   17f74:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f78:	9304      	str	r3, [sp, #16]
   17f7a:	f00f ff4f 	bl	27e1c <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   17f7e:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17f80:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17f84:	480c      	ldr	r0, [pc, #48]	; (17fb8 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   17f86:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   17f88:	4621      	mov	r1, r4
   17f8a:	f012 fc33 	bl	2a7f4 <k_queue_append>
   17f8e:	e7c5      	b.n	17f1c <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   17f90:	2300      	movs	r3, #0
		tx->user_data = user_data;
   17f92:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17f96:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17f98:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17f9a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17f9e:	4631      	mov	r1, r6
   17fa0:	f011 fdf0 	bl	29b84 <net_buf_put>
	return 0;
   17fa4:	2000      	movs	r0, #0
   17fa6:	e7da      	b.n	17f5e <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
   17fa8:	614a      	str	r2, [r1, #20]
   17faa:	e7f6      	b.n	17f9a <bt_conn_send_cb+0xa6>
   17fac:	0002d8ca 	.word	0x0002d8ca
   17fb0:	0002b4dc 	.word	0x0002b4dc
   17fb4:	200024a0 	.word	0x200024a0
   17fb8:	20000ae0 	.word	0x20000ae0
   17fbc:	0002d8d9 	.word	0x0002d8d9
   17fc0:	0002d8f7 	.word	0x0002d8f7

00017fc4 <bt_conn_lookup_handle>:
{
   17fc4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17fc6:	2101      	movs	r1, #1
   17fc8:	4801      	ldr	r0, [pc, #4]	; (17fd0 <bt_conn_lookup_handle+0xc>)
   17fca:	f00f bf6b 	b.w	27ea4 <conn_lookup_handle>
   17fce:	bf00      	nop
   17fd0:	20001ee8 	.word	0x20001ee8

00017fd4 <bt_conn_set_state>:
{
   17fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   17fd6:	7b46      	ldrb	r6, [r0, #13]
   17fd8:	428e      	cmp	r6, r1
{
   17fda:	af00      	add	r7, sp, #0
   17fdc:	4604      	mov	r4, r0
   17fde:	460d      	mov	r5, r1
	if (conn->state == state) {
   17fe0:	d117      	bne.n	18012 <bt_conn_set_state+0x3e>
	switch (state) {
   17fe2:	2e08      	cmp	r6, #8
   17fe4:	bf96      	itet	ls
   17fe6:	4b69      	ldrls	r3, [pc, #420]	; (1818c <bt_conn_set_state+0x1b8>)
	if (conn->state == state) {
   17fe8:	4b69      	ldrhi	r3, [pc, #420]	; (18190 <bt_conn_set_state+0x1bc>)
   17fea:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   17fee:	466c      	mov	r4, sp
   17ff0:	b088      	sub	sp, #32
   17ff2:	466a      	mov	r2, sp
   17ff4:	4967      	ldr	r1, [pc, #412]	; (18194 <bt_conn_set_state+0x1c0>)
   17ff6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17ffa:	2302      	movs	r3, #2
   17ffc:	7713      	strb	r3, [r2, #28]
   17ffe:	4b66      	ldr	r3, [pc, #408]	; (18198 <bt_conn_set_state+0x1c4>)
   18000:	f842 3f10 	str.w	r3, [r2, #16]!
   18004:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
		BT_WARN("no valid (%u) state was set", state);
   18008:	4864      	ldr	r0, [pc, #400]	; (1819c <bt_conn_set_state+0x1c8>)
   1800a:	f00f ff07 	bl	27e1c <z_log_msg_static_create.constprop.0>
   1800e:	46a5      	mov	sp, r4
   18010:	e040      	b.n	18094 <bt_conn_set_state+0xc0>
	conn->state = state;
   18012:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   18014:	b926      	cbnz	r6, 18020 <bt_conn_set_state+0x4c>
		if (conn->type != BT_CONN_TYPE_ISO) {
   18016:	7883      	ldrb	r3, [r0, #2]
   18018:	2b08      	cmp	r3, #8
   1801a:	d001      	beq.n	18020 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   1801c:	f00f ff0d 	bl	27e3a <bt_conn_ref>
	switch (conn->state) {
   18020:	7b63      	ldrb	r3, [r4, #13]
   18022:	2b08      	cmp	r3, #8
   18024:	f200 80ad 	bhi.w	18182 <bt_conn_set_state+0x1ae>
   18028:	e8df f003 	tbb	[pc, r3]
   1802c:	34340536 	.word	0x34340536
   18030:	1c343434 	.word	0x1c343434
   18034:	34          	.byte	0x34
   18035:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   18036:	4d5a      	ldr	r5, [pc, #360]	; (181a0 <bt_conn_set_state+0x1cc>)
		tx->pending_no_cb = 0U;
   18038:	2600      	movs	r6, #0
	__asm__ volatile(
   1803a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1803e:	f3ef 8211 	mrs	r2, BASEPRI
   18042:	f383 8812 	msr	BASEPRI_MAX, r3
   18046:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1804a:	69e3      	ldr	r3, [r4, #28]
   1804c:	2b00      	cmp	r3, #0
   1804e:	d077      	beq.n	18140 <bt_conn_set_state+0x16c>
			conn->pending_no_cb--;
   18050:	3b01      	subs	r3, #1
   18052:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18054:	f382 8811 	msr	BASEPRI, r2
   18058:	f3bf 8f6f 	isb	sy
   1805c:	4628      	mov	r0, r5
   1805e:	f009 fb75 	bl	2174c <z_impl_k_sem_give>
}
   18062:	e7ea      	b.n	1803a <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18064:	78a3      	ldrb	r3, [r4, #2]
   18066:	2b04      	cmp	r3, #4
   18068:	d014      	beq.n	18094 <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   1806a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1806e:	f012 fbb5 	bl	2a7dc <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   18072:	484c      	ldr	r0, [pc, #304]	; (181a4 <bt_conn_set_state+0x1d0>)
   18074:	2100      	movs	r1, #0
   18076:	f00a fb89 	bl	2278c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1807a:	2300      	movs	r3, #0
	list->tail = NULL;
   1807c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18080:	78e3      	ldrb	r3, [r4, #3]
   18082:	2b01      	cmp	r3, #1
   18084:	d106      	bne.n	18094 <bt_conn_set_state+0xc0>
			k_work_schedule(&conn->deferred_work,
   18086:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1808a:	2300      	movs	r3, #0
   1808c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18090:	f009 fd52 	bl	21b38 <k_work_schedule>
}
   18094:	46bd      	mov	sp, r7
   18096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   18098:	78a3      	ldrb	r3, [r4, #2]
   1809a:	2b04      	cmp	r3, #4
   1809c:	d103      	bne.n	180a6 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   1809e:	4620      	mov	r0, r4
   180a0:	f00f fee6 	bl	27e70 <bt_conn_unref>
			break;
   180a4:	e7f6      	b.n	18094 <bt_conn_set_state+0xc0>
		switch (old_state) {
   180a6:	2e08      	cmp	r6, #8
   180a8:	d8f4      	bhi.n	18094 <bt_conn_set_state+0xc0>
   180aa:	a301      	add	r3, pc, #4	; (adr r3, 180b0 <bt_conn_set_state+0xdc>)
   180ac:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   180b0:	00018129 	.word	0x00018129
   180b4:	000180d5 	.word	0x000180d5
   180b8:	0001811b 	.word	0x0001811b
   180bc:	0001809f 	.word	0x0001809f
   180c0:	0001809f 	.word	0x0001809f
   180c4:	0001811b 	.word	0x0001811b
   180c8:	0001811b 	.word	0x0001811b
   180cc:	00018129 	.word	0x00018129
   180d0:	00018129 	.word	0x00018129
			tx_notify(conn);
   180d4:	4620      	mov	r0, r4
   180d6:	f7ff fdf7 	bl	17cc8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   180da:	78a3      	ldrb	r3, [r4, #2]
   180dc:	2b01      	cmp	r3, #1
   180de:	d10a      	bne.n	180f6 <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   180e0:	f104 0558 	add.w	r5, r4, #88	; 0x58
   180e4:	4628      	mov	r0, r5
   180e6:	f012 fca6 	bl	2aa36 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   180ea:	f010 0f0c 	tst.w	r0, #12
   180ee:	d002      	beq.n	180f6 <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   180f0:	4628      	mov	r0, r5
   180f2:	f012 fca2 	bl	2aa3a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   180f6:	f3bf 8f5b 	dmb	ish
   180fa:	3404      	adds	r4, #4
   180fc:	e854 3f00 	ldrex	r3, [r4]
   18100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18104:	e844 3200 	strex	r2, r3, [r4]
   18108:	2a00      	cmp	r2, #0
   1810a:	d1f7      	bne.n	180fc <bt_conn_set_state+0x128>
   1810c:	f3bf 8f5b 	dmb	ish
   18110:	2100      	movs	r1, #0
   18112:	4824      	ldr	r0, [pc, #144]	; (181a4 <bt_conn_set_state+0x1d0>)
   18114:	f00a fb3a 	bl	2278c <z_impl_k_poll_signal_raise>
   18118:	e7bc      	b.n	18094 <bt_conn_set_state+0xc0>
			if (conn->err) {
   1811a:	7b23      	ldrb	r3, [r4, #12]
   1811c:	2b00      	cmp	r3, #0
   1811e:	d0be      	beq.n	1809e <bt_conn_set_state+0xca>
				notify_connected(conn);
   18120:	4620      	mov	r0, r4
   18122:	f7ff fd9f 	bl	17c64 <notify_connected>
   18126:	e7ba      	b.n	1809e <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   18128:	466c      	mov	r4, sp
   1812a:	b088      	sub	sp, #32
   1812c:	466a      	mov	r2, sp
   1812e:	4b1e      	ldr	r3, [pc, #120]	; (181a8 <bt_conn_set_state+0x1d4>)
		BT_WARN("no valid (%u) state was set", state);
   18130:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18134:	2303      	movs	r3, #3
   18136:	f842 3f10 	str.w	r3, [r2, #16]!
   1813a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1813e:	e763      	b.n	18008 <bt_conn_set_state+0x34>
	return list->head;
   18140:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   18142:	b129      	cbz	r1, 18150 <bt_conn_set_state+0x17c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18144:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   18146:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   18148:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1814a:	4281      	cmp	r1, r0
	list->tail = node;
   1814c:	bf08      	it	eq
   1814e:	61a3      	streq	r3, [r4, #24]
   18150:	f382 8811 	msr	BASEPRI, r2
   18154:	f3bf 8f6f 	isb	sy
		if (!node) {
   18158:	2900      	cmp	r1, #0
   1815a:	d09b      	beq.n	18094 <bt_conn_set_state+0xc0>
	__asm__ volatile(
   1815c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18160:	f3ef 8311 	mrs	r3, BASEPRI
   18164:	f382 8812 	msr	BASEPRI_MAX, r2
   18168:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1816c:	68ca      	ldr	r2, [r1, #12]
   1816e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18170:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   18172:	f383 8811 	msr	BASEPRI, r3
   18176:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1817a:	4620      	mov	r0, r4
   1817c:	f7ff fdd0 	bl	17d20 <conn_tx_destroy>
   18180:	e76c      	b.n	1805c <bt_conn_set_state+0x88>
		BT_WARN("no valid (%u) state was set", state);
   18182:	466c      	mov	r4, sp
   18184:	b088      	sub	sp, #32
   18186:	466a      	mov	r2, sp
   18188:	4b08      	ldr	r3, [pc, #32]	; (181ac <bt_conn_set_state+0x1d8>)
   1818a:	e7d1      	b.n	18130 <bt_conn_set_state+0x15c>
   1818c:	0002bcfc 	.word	0x0002bcfc
   18190:	0002d91d 	.word	0x0002d91d
   18194:	0002d927 	.word	0x0002d927
   18198:	01000003 	.word	0x01000003
   1819c:	0002b4dc 	.word	0x0002b4dc
   181a0:	20000450 	.word	0x20000450
   181a4:	20000698 	.word	0x20000698
   181a8:	0002d938 	.word	0x0002d938
   181ac:	0002d94f 	.word	0x0002d94f

000181b0 <bt_conn_index>:
		index = conn - acl_conns;
   181b0:	4b03      	ldr	r3, [pc, #12]	; (181c0 <bt_conn_index+0x10>)
   181b2:	1ac0      	subs	r0, r0, r3
   181b4:	4b03      	ldr	r3, [pc, #12]	; (181c4 <bt_conn_index+0x14>)
   181b6:	1180      	asrs	r0, r0, #6
   181b8:	4358      	muls	r0, r3
}
   181ba:	b2c0      	uxtb	r0, r0
   181bc:	4770      	bx	lr
   181be:	bf00      	nop
   181c0:	20001ee8 	.word	0x20001ee8
   181c4:	aaaaaaab 	.word	0xaaaaaaab

000181c8 <bt_conn_create_pdu_timeout>:
{
   181c8:	b538      	push	{r3, r4, r5, lr}
   181ca:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   181cc:	4908      	ldr	r1, [pc, #32]	; (181f0 <bt_conn_create_pdu_timeout+0x28>)
   181ce:	2800      	cmp	r0, #0
   181d0:	bf08      	it	eq
   181d2:	4608      	moveq	r0, r1
   181d4:	f011 fc64 	bl	29aa0 <net_buf_alloc_fixed>
	if (!buf) {
   181d8:	4604      	mov	r4, r0
   181da:	b918      	cbnz	r0, 181e4 <bt_conn_create_pdu_timeout+0x1c>
}
   181dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   181e0:	f7ff bd5e 	b.w	17ca0 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   181e4:	1d29      	adds	r1, r5, #4
   181e6:	3008      	adds	r0, #8
   181e8:	f011 fc7f 	bl	29aea <net_buf_simple_reserve>
   181ec:	4620      	mov	r0, r4
   181ee:	bd38      	pop	{r3, r4, r5, pc}
   181f0:	20000af8 	.word	0x20000af8

000181f4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   181f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181f6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181f8:	f3bf 8f5b 	dmb	ish
   181fc:	6863      	ldr	r3, [r4, #4]
   181fe:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18202:	05db      	lsls	r3, r3, #23
   18204:	f100 0004 	add.w	r0, r0, #4
   18208:	d511      	bpl.n	1822e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1820a:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1820e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   18212:	429a      	cmp	r2, r3
   18214:	d80b      	bhi.n	1822e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   18216:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1821a:	429a      	cmp	r2, r3
   1821c:	d307      	bcc.n	1822e <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1821e:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   18222:	429a      	cmp	r2, r3
   18224:	d103      	bne.n	1822e <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18226:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1822a:	f00f fde8 	bl	27dfe <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1822e:	4b10      	ldr	r3, [pc, #64]	; (18270 <notify_le_param_updated+0x7c>)
   18230:	681d      	ldr	r5, [r3, #0]
   18232:	b925      	cbnz	r5, 1823e <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18234:	4d0f      	ldr	r5, [pc, #60]	; (18274 <notify_le_param_updated+0x80>)
   18236:	4f10      	ldr	r7, [pc, #64]	; (18278 <notify_le_param_updated+0x84>)
   18238:	42bd      	cmp	r5, r7
   1823a:	d30c      	bcc.n	18256 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1823e:	68ee      	ldr	r6, [r5, #12]
   18240:	b13e      	cbz	r6, 18252 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   18242:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   18246:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1824a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1824e:	4620      	mov	r0, r4
   18250:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   18252:	69ad      	ldr	r5, [r5, #24]
   18254:	e7ed      	b.n	18232 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   18256:	68ee      	ldr	r6, [r5, #12]
   18258:	b13e      	cbz	r6, 1826a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1825a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1825e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   18262:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   18266:	4620      	mov	r0, r4
   18268:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1826a:	351c      	adds	r5, #28
   1826c:	e7e4      	b.n	18238 <notify_le_param_updated+0x44>
   1826e:	bf00      	nop
   18270:	20002d08 	.word	0x20002d08
   18274:	0002b470 	.word	0x0002b470
   18278:	0002b48c 	.word	0x0002b48c

0001827c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18280:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18282:	4608      	mov	r0, r1
{
   18284:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18286:	f00f fc86 	bl	27b96 <bt_le_conn_params_valid>
   1828a:	4605      	mov	r5, r0
   1828c:	b918      	cbnz	r0, 18296 <le_param_req+0x1a>
		return false;
   1828e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18290:	4628      	mov	r0, r5
   18292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18296:	4b13      	ldr	r3, [pc, #76]	; (182e4 <le_param_req+0x68>)
   18298:	681e      	ldr	r6, [r3, #0]
   1829a:	b946      	cbnz	r6, 182ae <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1829c:	4e12      	ldr	r6, [pc, #72]	; (182e8 <le_param_req+0x6c>)
   1829e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 182ec <le_param_req+0x70>
   182a2:	4546      	cmp	r6, r8
   182a4:	d2f4      	bcs.n	18290 <le_param_req+0x14>
		if (!cb->le_param_req) {
   182a6:	68b3      	ldr	r3, [r6, #8]
   182a8:	b983      	cbnz	r3, 182cc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   182aa:	361c      	adds	r6, #28
   182ac:	e7f9      	b.n	182a2 <le_param_req+0x26>
		if (!cb->le_param_req) {
   182ae:	68b3      	ldr	r3, [r6, #8]
   182b0:	b90b      	cbnz	r3, 182b6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   182b2:	69b6      	ldr	r6, [r6, #24]
   182b4:	e7f1      	b.n	1829a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   182b6:	4621      	mov	r1, r4
   182b8:	4638      	mov	r0, r7
   182ba:	4798      	blx	r3
   182bc:	2800      	cmp	r0, #0
   182be:	d0e6      	beq.n	1828e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   182c0:	4620      	mov	r0, r4
   182c2:	f00f fc68 	bl	27b96 <bt_le_conn_params_valid>
   182c6:	2800      	cmp	r0, #0
   182c8:	d1f3      	bne.n	182b2 <le_param_req+0x36>
   182ca:	e7e0      	b.n	1828e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   182cc:	4621      	mov	r1, r4
   182ce:	4638      	mov	r0, r7
   182d0:	4798      	blx	r3
   182d2:	2800      	cmp	r0, #0
   182d4:	d0db      	beq.n	1828e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   182d6:	4620      	mov	r0, r4
   182d8:	f00f fc5d 	bl	27b96 <bt_le_conn_params_valid>
   182dc:	2800      	cmp	r0, #0
   182de:	d1e4      	bne.n	182aa <le_param_req+0x2e>
   182e0:	e7d5      	b.n	1828e <le_param_req+0x12>
   182e2:	bf00      	nop
   182e4:	20002d08 	.word	0x20002d08
   182e8:	0002b470 	.word	0x0002b470
   182ec:	0002b48c 	.word	0x0002b48c

000182f0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   182f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   182f4:	78c3      	ldrb	r3, [r0, #3]
{
   182f6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   182f8:	b973      	cbnz	r3, 18318 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   182fa:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   182fe:	4b10      	ldr	r3, [pc, #64]	; (18340 <bt_conn_identity_resolved+0x50>)
   18300:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18302:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   18306:	b955      	cbnz	r5, 1831e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18308:	4d0e      	ldr	r5, [pc, #56]	; (18344 <bt_conn_identity_resolved+0x54>)
   1830a:	4f0f      	ldr	r7, [pc, #60]	; (18348 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1830c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18310:	42bd      	cmp	r5, r7
   18312:	d30c      	bcc.n	1832e <bt_conn_identity_resolved+0x3e>
		}
	}
}
   18314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   18318:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1831c:	e7ef      	b.n	182fe <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1831e:	692b      	ldr	r3, [r5, #16]
   18320:	b11b      	cbz	r3, 1832a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18322:	463a      	mov	r2, r7
   18324:	4631      	mov	r1, r6
   18326:	4620      	mov	r0, r4
   18328:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1832a:	69ad      	ldr	r5, [r5, #24]
   1832c:	e7eb      	b.n	18306 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1832e:	692b      	ldr	r3, [r5, #16]
   18330:	b11b      	cbz	r3, 1833a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18332:	4642      	mov	r2, r8
   18334:	4631      	mov	r1, r6
   18336:	4620      	mov	r0, r4
   18338:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1833a:	351c      	adds	r5, #28
   1833c:	e7e8      	b.n	18310 <bt_conn_identity_resolved+0x20>
   1833e:	bf00      	nop
   18340:	20002d08 	.word	0x20002d08
   18344:	0002b470 	.word	0x0002b470
   18348:	0002b48c 	.word	0x0002b48c

0001834c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1834e:	7a43      	ldrb	r3, [r0, #9]
   18350:	7283      	strb	r3, [r0, #10]
{
   18352:	4604      	mov	r4, r0
   18354:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18356:	f00f feb4 	bl	280c2 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1835a:	4b13      	ldr	r3, [pc, #76]	; (183a8 <bt_conn_security_changed+0x5c>)
   1835c:	681e      	ldr	r6, [r3, #0]
   1835e:	b98e      	cbnz	r6, 18384 <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18360:	4e12      	ldr	r6, [pc, #72]	; (183ac <bt_conn_security_changed+0x60>)
   18362:	4f13      	ldr	r7, [pc, #76]	; (183b0 <bt_conn_security_changed+0x64>)
   18364:	42be      	cmp	r6, r7
   18366:	d315      	bcc.n	18394 <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   18368:	b9e5      	cbnz	r5, 183a4 <bt_conn_security_changed+0x58>
   1836a:	7a63      	ldrb	r3, [r4, #9]
   1836c:	2b01      	cmp	r3, #1
   1836e:	d919      	bls.n	183a4 <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   18370:	78a3      	ldrb	r3, [r4, #2]
   18372:	2b01      	cmp	r3, #1
   18374:	d116      	bne.n	183a4 <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   18376:	7a20      	ldrb	r0, [r4, #8]
   18378:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1837c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   18380:	f005 b910 	b.w	1d5a4 <bt_keys_update_usage>
		if (cb->security_changed) {
   18384:	6973      	ldr	r3, [r6, #20]
   18386:	b11b      	cbz	r3, 18390 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   18388:	7a61      	ldrb	r1, [r4, #9]
   1838a:	462a      	mov	r2, r5
   1838c:	4620      	mov	r0, r4
   1838e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18390:	69b6      	ldr	r6, [r6, #24]
   18392:	e7e4      	b.n	1835e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   18394:	6973      	ldr	r3, [r6, #20]
   18396:	b11b      	cbz	r3, 183a0 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   18398:	7a61      	ldrb	r1, [r4, #9]
   1839a:	462a      	mov	r2, r5
   1839c:	4620      	mov	r0, r4
   1839e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   183a0:	361c      	adds	r6, #28
   183a2:	e7df      	b.n	18364 <bt_conn_security_changed+0x18>
}
   183a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183a6:	bf00      	nop
   183a8:	20002d08 	.word	0x20002d08
   183ac:	0002b470 	.word	0x0002b470
   183b0:	0002b48c 	.word	0x0002b48c

000183b4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   183b4:	b570      	push	{r4, r5, r6, lr}
   183b6:	4606      	mov	r6, r0
   183b8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   183ba:	480a      	ldr	r0, [pc, #40]	; (183e4 <bt_conn_add_le+0x30>)
   183bc:	2101      	movs	r1, #1
   183be:	f7ff fcc9 	bl	17d54 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   183c2:	4604      	mov	r4, r0
   183c4:	b160      	cbz	r0, 183e0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   183c6:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   183c8:	2207      	movs	r2, #7
   183ca:	4629      	mov	r1, r5
   183cc:	3088      	adds	r0, #136	; 0x88
   183ce:	f00f fa2e 	bl	2782e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   183d2:	2301      	movs	r3, #1
   183d4:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   183d6:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   183d8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   183da:	4b03      	ldr	r3, [pc, #12]	; (183e8 <bt_conn_add_le+0x34>)
   183dc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   183e0:	4620      	mov	r0, r4
   183e2:	bd70      	pop	{r4, r5, r6, pc}
   183e4:	20001ee8 	.word	0x20001ee8
   183e8:	00280018 	.word	0x00280018

000183ec <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   183ec:	b570      	push	{r4, r5, r6, lr}
   183ee:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   183f0:	480c      	ldr	r0, [pc, #48]	; (18424 <bt_conn_lookup_addr_le+0x38>)
{
   183f2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   183f4:	f00f fd21 	bl	27e3a <bt_conn_ref>

		if (!conn) {
   183f8:	4604      	mov	r4, r0
   183fa:	b128      	cbz	r0, 18408 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   183fc:	7883      	ldrb	r3, [r0, #2]
   183fe:	2b01      	cmp	r3, #1
   18400:	d004      	beq.n	1840c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   18402:	f00f fd35 	bl	27e70 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18406:	2400      	movs	r4, #0
}
   18408:	4620      	mov	r0, r4
   1840a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1840c:	4629      	mov	r1, r5
   1840e:	4632      	mov	r2, r6
   18410:	f00f fdc9 	bl	27fa6 <bt_conn_is_peer_addr_le>
   18414:	4605      	mov	r5, r0
   18416:	2800      	cmp	r0, #0
   18418:	d1f6      	bne.n	18408 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1841a:	4620      	mov	r0, r4
   1841c:	f00f fd28 	bl	27e70 <bt_conn_unref>
	return NULL;
   18420:	462c      	mov	r4, r5
			continue;
   18422:	e7f1      	b.n	18408 <bt_conn_lookup_addr_le+0x1c>
   18424:	20001ee8 	.word	0x20001ee8

00018428 <bt_conn_exists_le>:
{
   18428:	b5b0      	push	{r4, r5, r7, lr}
   1842a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1842c:	f7ff ffde 	bl	183ec <bt_conn_lookup_addr_le>
	if (conn) {
   18430:	4604      	mov	r4, r0
   18432:	b1d8      	cbz	r0, 1846c <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
   18434:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   18436:	2b08      	cmp	r3, #8
   18438:	bf96      	itet	ls
   1843a:	4a0d      	ldrls	r2, [pc, #52]	; (18470 <bt_conn_exists_le+0x48>)
		BT_WARN("Found valid connection in %s state",
   1843c:	4b0d      	ldrhi	r3, [pc, #52]	; (18474 <bt_conn_exists_le+0x4c>)
   1843e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18442:	466d      	mov	r5, sp
   18444:	b088      	sub	sp, #32
   18446:	466a      	mov	r2, sp
   18448:	490b      	ldr	r1, [pc, #44]	; (18478 <bt_conn_exists_le+0x50>)
   1844a:	480c      	ldr	r0, [pc, #48]	; (1847c <bt_conn_exists_le+0x54>)
   1844c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18450:	2302      	movs	r3, #2
   18452:	7713      	strb	r3, [r2, #28]
   18454:	4b0a      	ldr	r3, [pc, #40]	; (18480 <bt_conn_exists_le+0x58>)
   18456:	f842 3f10 	str.w	r3, [r2, #16]!
   1845a:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1845e:	f00f fcdd 	bl	27e1c <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   18462:	4620      	mov	r0, r4
   18464:	46ad      	mov	sp, r5
   18466:	f00f fd03 	bl	27e70 <bt_conn_unref>
		return true;
   1846a:	2001      	movs	r0, #1
}
   1846c:	46bd      	mov	sp, r7
   1846e:	bdb0      	pop	{r4, r5, r7, pc}
   18470:	0002bcfc 	.word	0x0002bcfc
   18474:	0002d91d 	.word	0x0002d91d
   18478:	0002d96b 	.word	0x0002d96b
   1847c:	0002b4dc 	.word	0x0002b4dc
   18480:	01000003 	.word	0x01000003

00018484 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18486:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18488:	480e      	ldr	r0, [pc, #56]	; (184c4 <bt_conn_lookup_state_le+0x40>)
{
   1848a:	460e      	mov	r6, r1
   1848c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1848e:	f00f fcd4 	bl	27e3a <bt_conn_ref>

		if (!conn) {
   18492:	4604      	mov	r4, r0
   18494:	b1a0      	cbz	r0, 184c0 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18496:	7883      	ldrb	r3, [r0, #2]
   18498:	2b01      	cmp	r3, #1
   1849a:	d003      	beq.n	184a4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1849c:	f00f fce8 	bl	27e70 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   184a0:	2400      	movs	r4, #0
			continue;
   184a2:	e00d      	b.n	184c0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   184a4:	b136      	cbz	r6, 184b4 <bt_conn_lookup_state_le+0x30>
   184a6:	4632      	mov	r2, r6
   184a8:	4629      	mov	r1, r5
   184aa:	f00f fd7c 	bl	27fa6 <bt_conn_is_peer_addr_le>
   184ae:	b908      	cbnz	r0, 184b4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   184b0:	4620      	mov	r0, r4
   184b2:	e7f3      	b.n	1849c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   184b4:	7b63      	ldrb	r3, [r4, #13]
   184b6:	42bb      	cmp	r3, r7
   184b8:	d1fa      	bne.n	184b0 <bt_conn_lookup_state_le+0x2c>
   184ba:	7a23      	ldrb	r3, [r4, #8]
   184bc:	42ab      	cmp	r3, r5
   184be:	d1f7      	bne.n	184b0 <bt_conn_lookup_state_le+0x2c>
}
   184c0:	4620      	mov	r0, r4
   184c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184c4:	20001ee8 	.word	0x20001ee8

000184c8 <send_conn_le_param_update>:
{
   184c8:	b538      	push	{r3, r4, r5, lr}
   184ca:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   184cc:	4608      	mov	r0, r1
{
   184ce:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   184d0:	f00f fb61 	bl	27b96 <bt_le_conn_params_valid>
   184d4:	b348      	cbz	r0, 1852a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   184d6:	4b16      	ldr	r3, [pc, #88]	; (18530 <send_conn_le_param_update+0x68>)
   184d8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   184dc:	0799      	lsls	r1, r3, #30
   184de:	d407      	bmi.n	184f0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   184e0:	78e3      	ldrb	r3, [r4, #3]
   184e2:	b183      	cbz	r3, 18506 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   184e4:	4629      	mov	r1, r5
   184e6:	4620      	mov	r0, r4
}
   184e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   184ec:	f000 b9e4 	b.w	188b8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   184f0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   184f4:	079a      	lsls	r2, r3, #30
   184f6:	d5f3      	bpl.n	184e0 <send_conn_le_param_update+0x18>
   184f8:	f3bf 8f5b 	dmb	ish
   184fc:	6863      	ldr	r3, [r4, #4]
   184fe:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18502:	059b      	lsls	r3, r3, #22
   18504:	d4ec      	bmi.n	184e0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18506:	4629      	mov	r1, r5
   18508:	4620      	mov	r0, r4
   1850a:	f00f fd6c 	bl	27fe6 <bt_conn_le_conn_update>
		if (rc == 0) {
   1850e:	b958      	cbnz	r0, 18528 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   18510:	882b      	ldrh	r3, [r5, #0]
   18512:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   18516:	886b      	ldrh	r3, [r5, #2]
   18518:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1851c:	88ab      	ldrh	r3, [r5, #4]
   1851e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   18522:	88eb      	ldrh	r3, [r5, #6]
   18524:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   18528:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1852a:	f06f 0015 	mvn.w	r0, #21
   1852e:	e7fb      	b.n	18528 <send_conn_le_param_update+0x60>
   18530:	20000350 	.word	0x20000350

00018534 <deferred_work>:
{
   18534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18536:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1853a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1853c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   18540:	b9fb      	cbnz	r3, 18582 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   18542:	4628      	mov	r0, r5
   18544:	f00f fdac 	bl	280a0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18548:	4b28      	ldr	r3, [pc, #160]	; (185ec <deferred_work+0xb8>)
   1854a:	681e      	ldr	r6, [r3, #0]
   1854c:	b94e      	cbnz	r6, 18562 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1854e:	4e28      	ldr	r6, [pc, #160]	; (185f0 <deferred_work+0xbc>)
   18550:	4f28      	ldr	r7, [pc, #160]	; (185f4 <deferred_work+0xc0>)
   18552:	42be      	cmp	r6, r7
   18554:	d30d      	bcc.n	18572 <deferred_work+0x3e>
		bt_conn_unref(conn);
   18556:	4628      	mov	r0, r5
}
   18558:	b003      	add	sp, #12
   1855a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1855e:	f00f bc87 	b.w	27e70 <bt_conn_unref>
		if (cb->disconnected) {
   18562:	6873      	ldr	r3, [r6, #4]
   18564:	b11b      	cbz	r3, 1856e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   18566:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1856a:	4628      	mov	r0, r5
   1856c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1856e:	69b6      	ldr	r6, [r6, #24]
   18570:	e7ec      	b.n	1854c <deferred_work+0x18>
		if (cb->disconnected) {
   18572:	6873      	ldr	r3, [r6, #4]
   18574:	b11b      	cbz	r3, 1857e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   18576:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1857a:	4628      	mov	r0, r5
   1857c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1857e:	361c      	adds	r6, #28
   18580:	e7e7      	b.n	18552 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   18582:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   18586:	2b01      	cmp	r3, #1
   18588:	d128      	bne.n	185dc <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   1858a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1858e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18592:	4630      	mov	r0, r6
   18594:	f00f fc33 	bl	27dfe <atomic_and>
   18598:	05c3      	lsls	r3, r0, #23
   1859a:	d521      	bpl.n	185e0 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1859c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   185a0:	f8ad 3000 	strh.w	r3, [sp]
   185a4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   185a8:	f8ad 3002 	strh.w	r3, [sp, #2]
   185ac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   185b0:	f8ad 3004 	strh.w	r3, [sp, #4]
   185b4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   185b8:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   185bc:	4669      	mov	r1, sp
   185be:	4628      	mov	r0, r5
   185c0:	f7ff ff82 	bl	184c8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   185c4:	f3bf 8f5b 	dmb	ish
   185c8:	e856 3f00 	ldrex	r3, [r6]
   185cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   185d0:	e846 3200 	strex	r2, r3, [r6]
   185d4:	2a00      	cmp	r2, #0
   185d6:	d1f7      	bne.n	185c8 <deferred_work+0x94>
   185d8:	f3bf 8f5b 	dmb	ish
}
   185dc:	b003      	add	sp, #12
   185de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   185e0:	4a05      	ldr	r2, [pc, #20]	; (185f8 <deferred_work+0xc4>)
   185e2:	6810      	ldr	r0, [r2, #0]
   185e4:	6851      	ldr	r1, [r2, #4]
   185e6:	466b      	mov	r3, sp
   185e8:	c303      	stmia	r3!, {r0, r1}
   185ea:	e7e7      	b.n	185bc <deferred_work+0x88>
   185ec:	20002d08 	.word	0x20002d08
   185f0:	0002b470 	.word	0x0002b470
   185f4:	0002b48c 	.word	0x0002b48c
   185f8:	0002b8c4 	.word	0x0002b8c4

000185fc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   185fc:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   185fe:	490b      	ldr	r1, [pc, #44]	; (1862c <bt_conn_init+0x30>)
   18600:	480b      	ldr	r0, [pc, #44]	; (18630 <bt_conn_init+0x34>)
   18602:	f012 f8f7 	bl	2a7f4 <k_queue_append>
   18606:	490b      	ldr	r1, [pc, #44]	; (18634 <bt_conn_init+0x38>)
   18608:	4809      	ldr	r0, [pc, #36]	; (18630 <bt_conn_init+0x34>)
   1860a:	f012 f8f3 	bl	2a7f4 <k_queue_append>
   1860e:	490a      	ldr	r1, [pc, #40]	; (18638 <bt_conn_init+0x3c>)
   18610:	4807      	ldr	r0, [pc, #28]	; (18630 <bt_conn_init+0x34>)
   18612:	f012 f8ef 	bl	2a7f4 <k_queue_append>
	}

	bt_att_init();
   18616:	f001 fa1f 	bl	19a58 <bt_att_init>

	err = bt_smp_init();
   1861a:	f004 fd7b 	bl	1d114 <bt_smp_init>
	if (err) {
   1861e:	4604      	mov	r4, r0
   18620:	b908      	cbnz	r0, 18626 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   18622:	f00f fd93 	bl	2814c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18626:	4620      	mov	r0, r4
   18628:	bd10      	pop	{r4, pc}
   1862a:	bf00      	nop
   1862c:	20002d0c 	.word	0x20002d0c
   18630:	20000ae0 	.word	0x20000ae0
   18634:	20002d1c 	.word	0x20002d1c
   18638:	20002d2c 	.word	0x20002d2c

0001863c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1863c:	b580      	push	{r7, lr}
   1863e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18640:	b088      	sub	sp, #32
   18642:	466a      	mov	r2, sp
   18644:	4b06      	ldr	r3, [pc, #24]	; (18660 <l2cap_create_le_sig_pdu.part.0+0x24>)
   18646:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1864a:	2303      	movs	r3, #3
   1864c:	f842 3f10 	str.w	r3, [r2, #16]!
   18650:	4804      	ldr	r0, [pc, #16]	; (18664 <l2cap_create_le_sig_pdu.part.0+0x28>)
   18652:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18656:	f00f fcef 	bl	28038 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1865a:	2000      	movs	r0, #0
   1865c:	46bd      	mov	sp, r7
   1865e:	bd80      	pop	{r7, pc}
   18660:	0002da07 	.word	0x0002da07
   18664:	0002b51c 	.word	0x0002b51c

00018668 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18668:	b580      	push	{r7, lr}
   1866a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1866c:	b088      	sub	sp, #32
   1866e:	466a      	mov	r2, sp
   18670:	4b07      	ldr	r3, [pc, #28]	; (18690 <l2cap_accept.part.0+0x28>)
   18672:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18676:	2303      	movs	r3, #3
   18678:	f842 3f10 	str.w	r3, [r2, #16]!
   1867c:	4805      	ldr	r0, [pc, #20]	; (18694 <l2cap_accept.part.0+0x2c>)
   1867e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18682:	f00f fcd9 	bl	28038 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18686:	f06f 000b 	mvn.w	r0, #11
   1868a:	46bd      	mov	sp, r7
   1868c:	bd80      	pop	{r7, pc}
   1868e:	bf00      	nop
   18690:	0002da2f 	.word	0x0002da2f
   18694:	0002b51c 	.word	0x0002b51c

00018698 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   18698:	4b04      	ldr	r3, [pc, #16]	; (186ac <l2cap_accept+0x14>)
   1869a:	681a      	ldr	r2, [r3, #0]
   1869c:	b10a      	cbz	r2, 186a2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1869e:	f7ff bfe3 	b.w	18668 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   186a2:	4803      	ldr	r0, [pc, #12]	; (186b0 <l2cap_accept+0x18>)
   186a4:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   186a6:	600b      	str	r3, [r1, #0]
}
   186a8:	4610      	mov	r0, r2
   186aa:	4770      	bx	lr
   186ac:	20002d3c 	.word	0x20002d3c
   186b0:	0002bd40 	.word	0x0002bd40

000186b4 <bt_l2cap_connected>:
{
   186b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   186b6:	4d24      	ldr	r5, [pc, #144]	; (18748 <bt_l2cap_connected+0x94>)
   186b8:	4f24      	ldr	r7, [pc, #144]	; (1874c <bt_l2cap_connected+0x98>)
{
   186ba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   186bc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   186be:	42bd      	cmp	r5, r7
   186c0:	d301      	bcc.n	186c6 <bt_l2cap_connected+0x12>
}
   186c2:	b003      	add	sp, #12
   186c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   186c6:	686b      	ldr	r3, [r5, #4]
   186c8:	a901      	add	r1, sp, #4
   186ca:	4620      	mov	r0, r4
   186cc:	4798      	blx	r3
   186ce:	2800      	cmp	r0, #0
   186d0:	db34      	blt.n	1873c <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   186d2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   186d4:	882a      	ldrh	r2, [r5, #0]
   186d6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   186d8:	849a      	strh	r2, [r3, #36]	; 0x24
   186da:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   186de:	68a8      	ldr	r0, [r5, #8]
   186e0:	f3bf 8f5b 	dmb	ish
   186e4:	e852 1f00 	ldrex	r1, [r2]
   186e8:	e842 6c00 	strex	ip, r6, [r2]
   186ec:	f1bc 0f00 	cmp.w	ip, #0
   186f0:	d1f8      	bne.n	186e4 <bt_l2cap_connected+0x30>
   186f2:	f3bf 8f5b 	dmb	ish
	return list->tail;
   186f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   186f8:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   186fa:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   186fe:	b9f9      	cbnz	r1, 18740 <bt_l2cap_connected+0x8c>
	list->head = node;
   18700:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   18704:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   18706:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18708:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   1870a:	6843      	ldr	r3, [r0, #4]
   1870c:	681b      	ldr	r3, [r3, #0]
   1870e:	b103      	cbz	r3, 18712 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   18710:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18712:	9b01      	ldr	r3, [sp, #4]
   18714:	f3bf 8f5b 	dmb	ish
   18718:	3310      	adds	r3, #16
   1871a:	e853 2f00 	ldrex	r2, [r3]
   1871e:	f042 0201 	orr.w	r2, r2, #1
   18722:	e843 2100 	strex	r1, r2, [r3]
   18726:	2900      	cmp	r1, #0
   18728:	d1f7      	bne.n	1871a <bt_l2cap_connected+0x66>
   1872a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1872e:	9801      	ldr	r0, [sp, #4]
   18730:	6843      	ldr	r3, [r0, #4]
   18732:	699b      	ldr	r3, [r3, #24]
   18734:	b113      	cbz	r3, 1873c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   18736:	f100 0110 	add.w	r1, r0, #16
   1873a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1873c:	350c      	adds	r5, #12
   1873e:	e7be      	b.n	186be <bt_l2cap_connected+0xa>
	parent->next = child;
   18740:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18742:	6562      	str	r2, [r4, #84]	; 0x54
}
   18744:	e7de      	b.n	18704 <bt_l2cap_connected+0x50>
   18746:	bf00      	nop
   18748:	0002b44c 	.word	0x0002b44c
   1874c:	0002b470 	.word	0x0002b470

00018750 <l2cap_recv>:
{
   18750:	b5f0      	push	{r4, r5, r6, r7, lr}
   18752:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   18754:	898b      	ldrh	r3, [r1, #12]
   18756:	2b03      	cmp	r3, #3
{
   18758:	af02      	add	r7, sp, #8
   1875a:	4606      	mov	r6, r0
   1875c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1875e:	d80b      	bhi.n	18778 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   18760:	4b30      	ldr	r3, [pc, #192]	; (18824 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   18762:	617b      	str	r3, [r7, #20]
   18764:	4830      	ldr	r0, [pc, #192]	; (18828 <l2cap_recv+0xd8>)
   18766:	2302      	movs	r3, #2
   18768:	f107 0210 	add.w	r2, r7, #16
   1876c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18770:	613b      	str	r3, [r7, #16]
   18772:	f00f fc61 	bl	28038 <z_log_msg_static_create.constprop.0>
		return 0;
   18776:	e019      	b.n	187ac <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18778:	2104      	movs	r1, #4
   1877a:	f105 0008 	add.w	r0, r5, #8
   1877e:	f011 fa5b 	bl	29c38 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18782:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18784:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   18786:	4299      	cmp	r1, r3
   18788:	4604      	mov	r4, r0
   1878a:	d013      	beq.n	187b4 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1878c:	466c      	mov	r4, sp
   1878e:	b088      	sub	sp, #32
   18790:	aa02      	add	r2, sp, #8
   18792:	4826      	ldr	r0, [pc, #152]	; (1882c <l2cap_recv+0xdc>)
   18794:	61d1      	str	r1, [r2, #28]
   18796:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1879a:	2304      	movs	r3, #4
   1879c:	f842 3f10 	str.w	r3, [r2, #16]!
   187a0:	4821      	ldr	r0, [pc, #132]	; (18828 <l2cap_recv+0xd8>)
   187a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   187a6:	f00f fc47 	bl	28038 <z_log_msg_static_create.constprop.0>
   187aa:	46a5      	mov	sp, r4
}
   187ac:	2000      	movs	r0, #0
   187ae:	371c      	adds	r7, #28
   187b0:	46bd      	mov	sp, r7
   187b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   187b4:	7843      	ldrb	r3, [r0, #1]
   187b6:	b90b      	cbnz	r3, 187bc <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   187b8:	4b1d      	ldr	r3, [pc, #116]	; (18830 <l2cap_recv+0xe0>)
   187ba:	e7d2      	b.n	18762 <l2cap_recv+0x12>
	switch (hdr->code) {
   187bc:	7803      	ldrb	r3, [r0, #0]
   187be:	2b01      	cmp	r3, #1
   187c0:	d0f4      	beq.n	187ac <l2cap_recv+0x5c>
   187c2:	2b13      	cmp	r3, #19
   187c4:	d103      	bne.n	187ce <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   187c6:	2901      	cmp	r1, #1
   187c8:	d8f0      	bhi.n	187ac <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   187ca:	4b1a      	ldr	r3, [pc, #104]	; (18834 <l2cap_recv+0xe4>)
   187cc:	e7c9      	b.n	18762 <l2cap_recv+0x12>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   187ce:	466d      	mov	r5, sp
   187d0:	b088      	sub	sp, #32
   187d2:	aa02      	add	r2, sp, #8
   187d4:	4918      	ldr	r1, [pc, #96]	; (18838 <l2cap_recv+0xe8>)
   187d6:	4814      	ldr	r0, [pc, #80]	; (18828 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   187d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   187dc:	2303      	movs	r3, #3
   187de:	f842 3f10 	str.w	r3, [r2, #16]!
   187e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   187e6:	f00f fc27 	bl	28038 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   187ea:	2202      	movs	r2, #2
   187ec:	7861      	ldrb	r1, [r4, #1]
   187ee:	46ad      	mov	sp, r5
   187f0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   187f2:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   187f4:	f00f fc23 	bl	2803e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   187f8:	4604      	mov	r4, r0
   187fa:	2800      	cmp	r0, #0
   187fc:	d0d6      	beq.n	187ac <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   187fe:	2102      	movs	r1, #2
   18800:	3008      	adds	r0, #8
   18802:	f011 f9f2 	bl	29bea <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18806:	2300      	movs	r3, #0
   18808:	7003      	strb	r3, [r0, #0]
   1880a:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1880c:	4622      	mov	r2, r4
   1880e:	9300      	str	r3, [sp, #0]
   18810:	2105      	movs	r1, #5
   18812:	4628      	mov	r0, r5
   18814:	f00f fc6d 	bl	280f2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18818:	2800      	cmp	r0, #0
   1881a:	d0c7      	beq.n	187ac <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1881c:	4620      	mov	r0, r4
   1881e:	f004 ff99 	bl	1d754 <net_buf_unref>
   18822:	e7c3      	b.n	187ac <l2cap_recv+0x5c>
   18824:	0002da56 	.word	0x0002da56
   18828:	0002b51c 	.word	0x0002b51c
   1882c:	0002da74 	.word	0x0002da74
   18830:	0002da95 	.word	0x0002da95
   18834:	0002dab6 	.word	0x0002dab6
   18838:	0002dad2 	.word	0x0002dad2

0001883c <bt_l2cap_recv>:
{
   1883c:	b5b0      	push	{r4, r5, r7, lr}
   1883e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18840:	898b      	ldrh	r3, [r1, #12]
   18842:	2b03      	cmp	r3, #3
{
   18844:	af00      	add	r7, sp, #0
   18846:	4605      	mov	r5, r0
   18848:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1884a:	d810      	bhi.n	1886e <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   1884c:	4b17      	ldr	r3, [pc, #92]	; (188ac <bt_l2cap_recv+0x70>)
   1884e:	617b      	str	r3, [r7, #20]
   18850:	4817      	ldr	r0, [pc, #92]	; (188b0 <bt_l2cap_recv+0x74>)
   18852:	2302      	movs	r3, #2
   18854:	f107 0210 	add.w	r2, r7, #16
   18858:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1885c:	613b      	str	r3, [r7, #16]
   1885e:	f00f fbeb 	bl	28038 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   18862:	4620      	mov	r0, r4
   18864:	f004 ff76 	bl	1d754 <net_buf_unref>
}
   18868:	3718      	adds	r7, #24
   1886a:	46bd      	mov	sp, r7
   1886c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1886e:	2104      	movs	r1, #4
   18870:	f104 0008 	add.w	r0, r4, #8
   18874:	f011 f9e0 	bl	29c38 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18878:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1887a:	4628      	mov	r0, r5
   1887c:	f00f fc5c 	bl	28138 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18880:	b978      	cbnz	r0, 188a2 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18882:	466d      	mov	r5, sp
   18884:	b088      	sub	sp, #32
   18886:	466a      	mov	r2, sp
   18888:	4b0a      	ldr	r3, [pc, #40]	; (188b4 <bt_l2cap_recv+0x78>)
   1888a:	4809      	ldr	r0, [pc, #36]	; (188b0 <bt_l2cap_recv+0x74>)
   1888c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18890:	2303      	movs	r3, #3
   18892:	f842 3f10 	str.w	r3, [r2, #16]!
   18896:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1889a:	f00f fbcd 	bl	28038 <z_log_msg_static_create.constprop.0>
   1889e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   188a0:	e7df      	b.n	18862 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   188a2:	6843      	ldr	r3, [r0, #4]
   188a4:	4621      	mov	r1, r4
   188a6:	691b      	ldr	r3, [r3, #16]
   188a8:	4798      	blx	r3
   188aa:	e7da      	b.n	18862 <bt_l2cap_recv+0x26>
   188ac:	0002daf0 	.word	0x0002daf0
   188b0:	0002b51c 	.word	0x0002b51c
   188b4:	0002db0d 	.word	0x0002db0d

000188b8 <bt_l2cap_update_conn_param>:
{
   188b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   188ba:	460d      	mov	r5, r1
	ident++;
   188bc:	4916      	ldr	r1, [pc, #88]	; (18918 <bt_l2cap_update_conn_param+0x60>)
   188be:	780b      	ldrb	r3, [r1, #0]
   188c0:	3301      	adds	r3, #1
	if (!ident) {
   188c2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   188c6:	bf08      	it	eq
   188c8:	2301      	moveq	r3, #1
   188ca:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   188cc:	7809      	ldrb	r1, [r1, #0]
{
   188ce:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   188d0:	2208      	movs	r2, #8
   188d2:	2012      	movs	r0, #18
   188d4:	f00f fbb3 	bl	2803e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   188d8:	4604      	mov	r4, r0
   188da:	b1d0      	cbz	r0, 18912 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   188dc:	2108      	movs	r1, #8
   188de:	4408      	add	r0, r1
   188e0:	f011 f983 	bl	29bea <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   188e4:	882b      	ldrh	r3, [r5, #0]
   188e6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   188e8:	886b      	ldrh	r3, [r5, #2]
   188ea:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   188ec:	88ab      	ldrh	r3, [r5, #4]
   188ee:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   188f0:	88eb      	ldrh	r3, [r5, #6]
   188f2:	80c3      	strh	r3, [r0, #6]
   188f4:	2300      	movs	r3, #0
   188f6:	9300      	str	r3, [sp, #0]
   188f8:	4622      	mov	r2, r4
   188fa:	2105      	movs	r1, #5
   188fc:	4630      	mov	r0, r6
   188fe:	f00f fbf8 	bl	280f2 <bt_l2cap_send_cb>
	if (err) {
   18902:	4605      	mov	r5, r0
   18904:	b110      	cbz	r0, 1890c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18906:	4620      	mov	r0, r4
   18908:	f004 ff24 	bl	1d754 <net_buf_unref>
}
   1890c:	4628      	mov	r0, r5
   1890e:	b002      	add	sp, #8
   18910:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18912:	f06f 050b 	mvn.w	r5, #11
   18916:	e7f9      	b.n	1890c <bt_l2cap_update_conn_param+0x54>
   18918:	20003dab 	.word	0x20003dab

0001891c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1891c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1891e:	3804      	subs	r0, #4
   18920:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18922:	a901      	add	r1, sp, #4
   18924:	4802      	ldr	r0, [pc, #8]	; (18930 <bt_att_released+0x14>)
   18926:	f011 fe9d 	bl	2a664 <k_mem_slab_free>
}
   1892a:	b003      	add	sp, #12
   1892c:	f85d fb04 	ldr.w	pc, [sp], #4
   18930:	200009d4 	.word	0x200009d4

00018934 <tx_meta_data_free>:
{
   18934:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   18936:	2100      	movs	r1, #0
{
   18938:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1893a:	2214      	movs	r2, #20
   1893c:	f00e ff82 	bl	27844 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18940:	4621      	mov	r1, r4
   18942:	4802      	ldr	r0, [pc, #8]	; (1894c <tx_meta_data_free+0x18>)
}
   18944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   18948:	f011 bf54 	b.w	2a7f4 <k_queue_append>
   1894c:	20000ac8 	.word	0x20000ac8

00018950 <find_type_cb>:
{
   18950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18954:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   18956:	f8d2 a000 	ldr.w	sl, [r2]
{
   1895a:	af02      	add	r7, sp, #8
   1895c:	4606      	mov	r6, r0
   1895e:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18960:	2500      	movs	r5, #0
   18962:	f642 0301 	movw	r3, #10241	; 0x2801
   18966:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18968:	f8da 9004 	ldr.w	r9, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1896c:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18970:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   18974:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18976:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18978:	f00e fff2 	bl	27960 <bt_uuid_cmp>
   1897c:	2800      	cmp	r0, #0
   1897e:	d071      	beq.n	18a64 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18980:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18984:	6830      	ldr	r0, [r6, #0]
   18986:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1898a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1898e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18990:	f00e ffe6 	bl	27960 <bt_uuid_cmp>
   18994:	b140      	cbz	r0, 189a8 <find_type_cb+0x58>
		if (data->group &&
   18996:	68a3      	ldr	r3, [r4, #8]
   18998:	b123      	cbz	r3, 189a4 <find_type_cb+0x54>
   1899a:	885a      	ldrh	r2, [r3, #2]
   1899c:	4542      	cmp	r2, r8
   1899e:	d201      	bcs.n	189a4 <find_type_cb+0x54>
			data->group->end_handle = sys_cpu_to_le16(handle);
   189a0:	f8a3 8002 	strh.w	r8, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   189a4:	2001      	movs	r0, #1
   189a6:	e009      	b.n	189bc <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   189a8:	6861      	ldr	r1, [r4, #4]
   189aa:	4608      	mov	r0, r1
   189ac:	f00f fbd9 	bl	28162 <net_buf_frags_len>
   189b0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   189b4:	1a1b      	subs	r3, r3, r0
   189b6:	2b03      	cmp	r3, #3
   189b8:	d804      	bhi.n	189c4 <find_type_cb+0x74>
		return BT_GATT_ITER_STOP;
   189ba:	2000      	movs	r0, #0
}
   189bc:	3744      	adds	r7, #68	; 0x44
   189be:	46bd      	mov	sp, r7
   189c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   189c4:	4608      	mov	r0, r1
   189c6:	f011 f8ee 	bl	29ba6 <net_buf_frag_last>
   189ca:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   189cc:	6860      	ldr	r0, [r4, #4]
   189ce:	f00f fbc8 	bl	28162 <net_buf_frags_len>
   189d2:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   189d6:	f105 0308 	add.w	r3, r5, #8
   189da:	ebab 0b00 	sub.w	fp, fp, r0
   189de:	4618      	mov	r0, r3
   189e0:	607b      	str	r3, [r7, #4]
   189e2:	f011 f945 	bl	29c70 <net_buf_simple_tailroom>
   189e6:	4558      	cmp	r0, fp
   189e8:	687b      	ldr	r3, [r7, #4]
   189ea:	d93e      	bls.n	18a6a <find_type_cb+0x11a>
   189ec:	6860      	ldr	r0, [r4, #4]
   189ee:	f00f fbb8 	bl	28162 <net_buf_frags_len>
   189f2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   189f6:	1a18      	subs	r0, r3, r0
	if (!len) {
   189f8:	b970      	cbnz	r0, 18a18 <find_type_cb+0xc8>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   189fa:	6863      	ldr	r3, [r4, #4]
   189fc:	7998      	ldrb	r0, [r3, #6]
   189fe:	f004 fde5 	bl	1d5cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18a02:	2200      	movs	r2, #0
   18a04:	2300      	movs	r3, #0
   18a06:	f011 f84b 	bl	29aa0 <net_buf_alloc_fixed>
		if (!frag) {
   18a0a:	4605      	mov	r5, r0
   18a0c:	2800      	cmp	r0, #0
   18a0e:	d0d4      	beq.n	189ba <find_type_cb+0x6a>
		net_buf_frag_add(data->buf, frag);
   18a10:	4601      	mov	r1, r0
   18a12:	6860      	ldr	r0, [r4, #4]
   18a14:	f011 f8d8 	bl	29bc8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18a18:	2300      	movs	r3, #0
   18a1a:	9300      	str	r3, [sp, #0]
   18a1c:	f8d6 a004 	ldr.w	sl, [r6, #4]
   18a20:	4631      	mov	r1, r6
   18a22:	2310      	movs	r3, #16
   18a24:	f107 0208 	add.w	r2, r7, #8
   18a28:	4648      	mov	r0, r9
   18a2a:	47d0      	blx	sl
	if (read < 0) {
   18a2c:	1e06      	subs	r6, r0, #0
   18a2e:	db19      	blt.n	18a64 <find_type_cb+0x114>
	if (read != data->value_len) {
   18a30:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18a32:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18a34:	4296      	cmp	r6, r2
   18a36:	d040      	beq.n	18aba <find_type_cb+0x16a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18a38:	4601      	mov	r1, r0
   18a3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18a3e:	f00e ffbd 	bl	279bc <bt_uuid_create>
   18a42:	b9b0      	cbnz	r0, 18a72 <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18a44:	466d      	mov	r5, sp
   18a46:	b088      	sub	sp, #32
   18a48:	7c23      	ldrb	r3, [r4, #16]
   18a4a:	aa02      	add	r2, sp, #8
   18a4c:	491e      	ldr	r1, [pc, #120]	; (18ac8 <find_type_cb+0x178>)
   18a4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   18a52:	2303      	movs	r3, #3
   18a54:	f842 3f10 	str.w	r3, [r2, #16]!
   18a58:	481c      	ldr	r0, [pc, #112]	; (18acc <find_type_cb+0x17c>)
   18a5a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18a5e:	f00f fcae 	bl	283be <z_log_msg_static_create.constprop.0>
   18a62:	46ad      	mov	sp, r5
	data->group = NULL;
   18a64:	2300      	movs	r3, #0
   18a66:	60a3      	str	r3, [r4, #8]
   18a68:	e79c      	b.n	189a4 <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   18a6a:	4618      	mov	r0, r3
   18a6c:	f011 f900 	bl	29c70 <net_buf_simple_tailroom>
   18a70:	e7c2      	b.n	189f8 <find_type_cb+0xa8>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18a72:	b2f2      	uxtb	r2, r6
   18a74:	f107 0108 	add.w	r1, r7, #8
   18a78:	f107 0018 	add.w	r0, r7, #24
   18a7c:	f00e ff9e 	bl	279bc <bt_uuid_create>
   18a80:	b930      	cbnz	r0, 18a90 <find_type_cb+0x140>
			BT_WARN("Unable to create UUID: size %d", read);
   18a82:	466d      	mov	r5, sp
   18a84:	b088      	sub	sp, #32
   18a86:	aa02      	add	r2, sp, #8
   18a88:	4b11      	ldr	r3, [pc, #68]	; (18ad0 <find_type_cb+0x180>)
   18a8a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18a8e:	e7e0      	b.n	18a52 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18a90:	f107 0118 	add.w	r1, r7, #24
   18a94:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18a98:	f00e ff62 	bl	27960 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18a9c:	2800      	cmp	r0, #0
   18a9e:	d1e1      	bne.n	18a64 <find_type_cb+0x114>
	data->err = 0x00;
   18aa0:	2300      	movs	r3, #0
   18aa2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18aa4:	2104      	movs	r1, #4
   18aa6:	f105 0008 	add.w	r0, r5, #8
   18aaa:	f011 f89e 	bl	29bea <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18aae:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18ab0:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18ab4:	f8a0 8002 	strh.w	r8, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18ab8:	e774      	b.n	189a4 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   18aba:	4632      	mov	r2, r6
   18abc:	f107 0108 	add.w	r1, r7, #8
   18ac0:	f00e fe8c 	bl	277dc <memcmp>
   18ac4:	e7ea      	b.n	18a9c <find_type_cb+0x14c>
   18ac6:	bf00      	nop
   18ac8:	0002db49 	.word	0x0002db49
   18acc:	0002b4cc 	.word	0x0002b4cc
   18ad0:	0002db68 	.word	0x0002db68

00018ad4 <att_get>:
{
   18ad4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18ad6:	7b43      	ldrb	r3, [r0, #13]
   18ad8:	2b07      	cmp	r3, #7
{
   18ada:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   18adc:	d00d      	beq.n	18afa <att_get+0x26>
		BT_WARN("Not connected");
   18ade:	4b10      	ldr	r3, [pc, #64]	; (18b20 <att_get+0x4c>)
   18ae0:	9305      	str	r3, [sp, #20]
   18ae2:	4810      	ldr	r0, [pc, #64]	; (18b24 <att_get+0x50>)
   18ae4:	2302      	movs	r3, #2
   18ae6:	aa04      	add	r2, sp, #16
   18ae8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
   18aec:	2400      	movs	r4, #0
		BT_WARN("Not connected");
   18aee:	9304      	str	r3, [sp, #16]
   18af0:	f00f fc65 	bl	283be <z_log_msg_static_create.constprop.0>
}
   18af4:	4620      	mov	r0, r4
   18af6:	b006      	add	sp, #24
   18af8:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18afa:	2104      	movs	r1, #4
   18afc:	f00f fb1c 	bl	28138 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18b00:	4604      	mov	r4, r0
   18b02:	b950      	cbnz	r0, 18b1a <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
   18b04:	4b08      	ldr	r3, [pc, #32]	; (18b28 <att_get+0x54>)
   18b06:	9305      	str	r3, [sp, #20]
   18b08:	4806      	ldr	r0, [pc, #24]	; (18b24 <att_get+0x50>)
   18b0a:	2302      	movs	r3, #2
   18b0c:	aa04      	add	r2, sp, #16
   18b0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b12:	9304      	str	r3, [sp, #16]
   18b14:	f00f fc53 	bl	283be <z_log_msg_static_create.constprop.0>
		return NULL;
   18b18:	e7ec      	b.n	18af4 <att_get+0x20>
	return att_chan->att;
   18b1a:	f850 4c04 	ldr.w	r4, [r0, #-4]
   18b1e:	e7e9      	b.n	18af4 <att_get+0x20>
   18b20:	0002db87 	.word	0x0002db87
   18b24:	0002b4cc 	.word	0x0002b4cc
   18b28:	0002db95 	.word	0x0002db95

00018b2c <bt_att_connected>:
{
   18b2c:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18b2e:	1f02      	subs	r2, r0, #4
{
   18b30:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   18b32:	308c      	adds	r0, #140	; 0x8c
   18b34:	f3bf 8f5b 	dmb	ish
   18b38:	e850 3f00 	ldrex	r3, [r0]
   18b3c:	f043 0304 	orr.w	r3, r3, #4
   18b40:	e840 3100 	strex	r1, r3, [r0]
   18b44:	2900      	cmp	r1, #0
   18b46:	d1f7      	bne.n	18b38 <bt_att_connected+0xc>
   18b48:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18b4c:	2103      	movs	r1, #3
   18b4e:	f00f fb65 	bl	2821c <atomic_test_bit>
   18b52:	b910      	cbnz	r0, 18b5a <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18b54:	2317      	movs	r3, #23
   18b56:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18b58:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   18b5a:	4610      	mov	r0, r2
   18b5c:	f00f fbbc 	bl	282d8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18b60:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   18b64:	4903      	ldr	r1, [pc, #12]	; (18b74 <bt_att_connected+0x48>)
   18b66:	f011 ff5a 	bl	2aa1e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18b6a:	6820      	ldr	r0, [r4, #0]
}
   18b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18b70:	f002 baaa 	b.w	1b0c8 <bt_gatt_connected>
   18b74:	00019c65 	.word	0x00019c65

00018b78 <chan_send>:
{
   18b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   18b7c:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18b7e:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   18b82:	b089      	sub	sp, #36	; 0x24
   18b84:	4606      	mov	r6, r0
   18b86:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18b88:	3090      	adds	r0, #144	; 0x90
   18b8a:	2102      	movs	r1, #2
   18b8c:	f00f fb46 	bl	2821c <atomic_test_bit>
   18b90:	2800      	cmp	r0, #0
   18b92:	d043      	beq.n	18c1c <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18b94:	781b      	ldrb	r3, [r3, #0]
   18b96:	2bd2      	cmp	r3, #210	; 0xd2
   18b98:	d11a      	bne.n	18bd0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   18b9a:	6833      	ldr	r3, [r6, #0]
   18b9c:	4621      	mov	r1, r4
   18b9e:	6818      	ldr	r0, [r3, #0]
   18ba0:	f003 fc5c 	bl	1c45c <bt_smp_sign>
		if (err) {
   18ba4:	4605      	mov	r5, r0
   18ba6:	b198      	cbz	r0, 18bd0 <chan_send+0x58>
			BT_ERR("Error signing data");
   18ba8:	4b1e      	ldr	r3, [pc, #120]	; (18c24 <chan_send+0xac>)
   18baa:	481f      	ldr	r0, [pc, #124]	; (18c28 <chan_send+0xb0>)
   18bac:	9307      	str	r3, [sp, #28]
   18bae:	aa06      	add	r2, sp, #24
   18bb0:	2302      	movs	r3, #2
   18bb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18bb6:	9306      	str	r3, [sp, #24]
   18bb8:	f00f fc01 	bl	283be <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18bbc:	6960      	ldr	r0, [r4, #20]
   18bbe:	f7ff feb9 	bl	18934 <tx_meta_data_free>
			net_buf_unref(buf);
   18bc2:	4620      	mov	r0, r4
   18bc4:	f004 fdc6 	bl	1d754 <net_buf_unref>
}
   18bc8:	4628      	mov	r0, r5
   18bca:	b009      	add	sp, #36	; 0x24
   18bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18bd0:	f104 0008 	add.w	r0, r4, #8
   18bd4:	f011 f848 	bl	29c68 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18bd8:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   18bda:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   18bde:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18be0:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   18be2:	f8c9 6000 	str.w	r6, [r9]
	state->offset = net_buf_simple_headroom(buf);
   18be6:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18be8:	7818      	ldrb	r0, [r3, #0]
   18bea:	f00f fad2 	bl	28192 <att_op_get_type>
	switch (op_type) {
   18bee:	2805      	cmp	r0, #5
   18bf0:	bf96      	itet	ls
   18bf2:	4b0e      	ldrls	r3, [pc, #56]	; (18c2c <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18bf4:	4b0e      	ldrhi	r3, [pc, #56]	; (18c30 <chan_send+0xb8>)
   18bf6:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18bfa:	f8cd 9000 	str.w	r9, [sp]
   18bfe:	4628      	mov	r0, r5
   18c00:	4622      	mov	r2, r4
   18c02:	2104      	movs	r1, #4
   18c04:	f00f fa75 	bl	280f2 <bt_l2cap_send_cb>
	if (err) {
   18c08:	4605      	mov	r5, r0
   18c0a:	2800      	cmp	r0, #0
   18c0c:	d0dc      	beq.n	18bc8 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   18c0e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18c10:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18c14:	fa10 f787 	uxtah	r7, r0, r7
   18c18:	60a7      	str	r7, [r4, #8]
}
   18c1a:	e7d5      	b.n	18bc8 <chan_send+0x50>
		return -EINVAL;
   18c1c:	f06f 0515 	mvn.w	r5, #21
   18c20:	e7d2      	b.n	18bc8 <chan_send+0x50>
   18c22:	bf00      	nop
   18c24:	0002dbb0 	.word	0x0002dbb0
   18c28:	0002b4cc 	.word	0x0002b4cc
   18c2c:	0002bd64 	.word	0x0002bd64
   18c30:	000287bf 	.word	0x000287bf

00018c34 <read_group_cb>:
{
   18c34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18c38:	4605      	mov	r5, r0
   18c3a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18c3c:	f04f 0800 	mov.w	r8, #0
   18c40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18c44:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18c46:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18c48:	f88d 8008 	strb.w	r8, [sp, #8]
   18c4c:	a902      	add	r1, sp, #8
{
   18c4e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18c50:	f8ad 300a 	strh.w	r3, [sp, #10]
   18c54:	f00e fe84 	bl	27960 <bt_uuid_cmp>
   18c58:	b1a0      	cbz	r0, 18c84 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18c5a:	f642 0301 	movw	r3, #10241	; 0x2801
   18c5e:	6828      	ldr	r0, [r5, #0]
   18c60:	f88d 800c 	strb.w	r8, [sp, #12]
   18c64:	a903      	add	r1, sp, #12
   18c66:	f8ad 300e 	strh.w	r3, [sp, #14]
   18c6a:	f00e fe79 	bl	27960 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18c6e:	b148      	cbz	r0, 18c84 <read_group_cb+0x50>
		if (data->group &&
   18c70:	6923      	ldr	r3, [r4, #16]
   18c72:	b11b      	cbz	r3, 18c7c <read_group_cb+0x48>
   18c74:	885a      	ldrh	r2, [r3, #2]
   18c76:	42b2      	cmp	r2, r6
   18c78:	d200      	bcs.n	18c7c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18c7a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18c7c:	2001      	movs	r0, #1
}
   18c7e:	b004      	add	sp, #16
   18c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18c84:	6861      	ldr	r1, [r4, #4]
   18c86:	6828      	ldr	r0, [r5, #0]
   18c88:	f00e fe6a 	bl	27960 <bt_uuid_cmp>
   18c8c:	b110      	cbz	r0, 18c94 <read_group_cb+0x60>
		data->group = NULL;
   18c8e:	2300      	movs	r3, #0
   18c90:	6123      	str	r3, [r4, #16]
   18c92:	e7f3      	b.n	18c7c <read_group_cb+0x48>
	if (data->rsp->len &&
   18c94:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18c96:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   18c98:	781a      	ldrb	r2, [r3, #0]
   18c9a:	b132      	cbz	r2, 18caa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18c9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18c9e:	8981      	ldrh	r1, [r0, #12]
   18ca0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18ca2:	4293      	cmp	r3, r2
   18ca4:	da01      	bge.n	18caa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   18ca6:	2000      	movs	r0, #0
   18ca8:	e7e9      	b.n	18c7e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18caa:	2104      	movs	r1, #4
   18cac:	3008      	adds	r0, #8
   18cae:	f010 ff9c 	bl	29bea <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18cb2:	4b09      	ldr	r3, [pc, #36]	; (18cd8 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18cb4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18cb6:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18cb8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18cba:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18cbc:	4629      	mov	r1, r5
   18cbe:	9300      	str	r3, [sp, #0]
   18cc0:	9401      	str	r4, [sp, #4]
   18cc2:	2300      	movs	r3, #0
   18cc4:	4638      	mov	r0, r7
   18cc6:	f00f fbeb 	bl	284a0 <att_chan_read>
	if (read < 0) {
   18cca:	2800      	cmp	r0, #0
   18ccc:	dbeb      	blt.n	18ca6 <read_group_cb+0x72>
	if (!data->group) {
   18cce:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18cd0:	3800      	subs	r0, #0
   18cd2:	bf18      	it	ne
   18cd4:	2001      	movne	r0, #1
   18cd6:	e7d2      	b.n	18c7e <read_group_cb+0x4a>
   18cd8:	00028339 	.word	0x00028339

00018cdc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ce0:	b082      	sub	sp, #8
   18ce2:	af00      	add	r7, sp, #0
   18ce4:	4680      	mov	r8, r0
   18ce6:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18ce8:	483a      	ldr	r0, [pc, #232]	; (18dd4 <bt_att_accept+0xf8>)
   18cea:	2200      	movs	r2, #0
   18cec:	2300      	movs	r3, #0
   18cee:	4639      	mov	r1, r7
   18cf0:	f008 fb42 	bl	21378 <k_mem_slab_alloc>
   18cf4:	4605      	mov	r5, r0
   18cf6:	b188      	cbz	r0, 18d1c <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
   18cf8:	466c      	mov	r4, sp
   18cfa:	b088      	sub	sp, #32
   18cfc:	466a      	mov	r2, sp
   18cfe:	4b36      	ldr	r3, [pc, #216]	; (18dd8 <bt_att_accept+0xfc>)
   18d00:	e9c2 3805 	strd	r3, r8, [r2, #20]
   18d04:	2303      	movs	r3, #3
   18d06:	f842 3f10 	str.w	r3, [r2, #16]!
   18d0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18d0e:	4833      	ldr	r0, [pc, #204]	; (18ddc <bt_att_accept+0x100>)
   18d10:	f00f fb55 	bl	283be <z_log_msg_static_create.constprop.0>
   18d14:	46a5      	mov	sp, r4
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   18d16:	f06f 050b 	mvn.w	r5, #11
   18d1a:	e055      	b.n	18dc8 <bt_att_accept+0xec>
	return z_impl_z_current_get();
   18d1c:	f009 fa52 	bl	221c4 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   18d20:	4b2f      	ldr	r3, [pc, #188]	; (18de0 <bt_att_accept+0x104>)
	(void)memset(att, 0, sizeof(*att));
   18d22:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   18d24:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   18d26:	2234      	movs	r2, #52	; 0x34
   18d28:	6838      	ldr	r0, [r7, #0]
   18d2a:	f00e fd8b 	bl	27844 <memset>
	att->conn = conn;
   18d2e:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18d30:	482c      	ldr	r0, [pc, #176]	; (18de4 <bt_att_accept+0x108>)
	list->tail = NULL;
   18d32:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   18d34:	e9c4 8500 	strd	r8, r5, [r4]
	list->tail = NULL;
   18d38:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   18d3c:	2200      	movs	r2, #0
   18d3e:	2300      	movs	r3, #0
   18d40:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18d42:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18d44:	f008 fb18 	bl	21378 <k_mem_slab_alloc>
   18d48:	4605      	mov	r5, r0
   18d4a:	b160      	cbz	r0, 18d66 <bt_att_accept+0x8a>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18d4c:	6823      	ldr	r3, [r4, #0]
   18d4e:	466c      	mov	r4, sp
   18d50:	b088      	sub	sp, #32
   18d52:	466a      	mov	r2, sp
   18d54:	4924      	ldr	r1, [pc, #144]	; (18de8 <bt_att_accept+0x10c>)
   18d56:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18d5a:	2303      	movs	r3, #3
   18d5c:	f842 3f10 	str.w	r3, [r2, #16]!
   18d60:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18d64:	e7d3      	b.n	18d0e <bt_att_accept+0x32>
	(void)memset(chan, 0, sizeof(*chan));
   18d66:	4601      	mov	r1, r0
   18d68:	22e8      	movs	r2, #232	; 0xe8
   18d6a:	6878      	ldr	r0, [r7, #4]
   18d6c:	f00e fd6a 	bl	27844 <memset>
	chan->chan.chan.ops = &ops;
   18d70:	6878      	ldr	r0, [r7, #4]
   18d72:	4b1e      	ldr	r3, [pc, #120]	; (18dec <bt_att_accept+0x110>)
   18d74:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18d76:	3098      	adds	r0, #152	; 0x98
   18d78:	f011 fd30 	bl	2a7dc <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18d7c:	687b      	ldr	r3, [r7, #4]
   18d7e:	f3bf 8f5b 	dmb	ish
   18d82:	3390      	adds	r3, #144	; 0x90
   18d84:	e853 2f00 	ldrex	r2, [r3]
   18d88:	e843 5100 	strex	r1, r5, [r3]
   18d8c:	2900      	cmp	r1, #0
   18d8e:	d1f9      	bne.n	18d84 <bt_att_accept+0xa8>
   18d90:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18d94:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	chan->att = att;
   18d9a:	f8c8 4000 	str.w	r4, [r8]
	if (sys_slist_is_empty(&att->chans)) {
   18d9e:	b92b      	cbnz	r3, 18dac <bt_att_accept+0xd0>
   18da0:	f104 000c 	add.w	r0, r4, #12
   18da4:	f011 fd1a 	bl	2a7dc <z_impl_k_queue_init>
   18da8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	parent->next = child;
   18dac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18dae:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   18db2:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   18db4:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   18db8:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   18dba:	b902      	cbnz	r2, 18dbe <bt_att_accept+0xe2>
	list->tail = node;
   18dbc:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   18dbe:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   18dc0:	2b00      	cmp	r3, #0
   18dc2:	d0a8      	beq.n	18d16 <bt_att_accept+0x3a>
	}

	*ch = &chan->chan.chan;
   18dc4:	3304      	adds	r3, #4
   18dc6:	6033      	str	r3, [r6, #0]

	return 0;
}
   18dc8:	4628      	mov	r0, r5
   18dca:	3708      	adds	r7, #8
   18dcc:	46bd      	mov	sp, r7
   18dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18dd2:	bf00      	nop
   18dd4:	200009b8 	.word	0x200009b8
   18dd8:	0002dbc3 	.word	0x0002dbc3
   18ddc:	0002b4cc 	.word	0x0002b4cc
   18de0:	20002dc8 	.word	0x20002dc8
   18de4:	200009d4 	.word	0x200009d4
   18de8:	0002dbe8 	.word	0x0002dbe8
   18dec:	200006a8 	.word	0x200006a8

00018df0 <read_type_cb>:
{
   18df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18df4:	f8d2 8000 	ldr.w	r8, [r2]
{
   18df8:	4606      	mov	r6, r0
   18dfa:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18dfc:	6800      	ldr	r0, [r0, #0]
   18dfe:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18e00:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   18e04:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18e06:	f00e fdab 	bl	27960 <bt_uuid_cmp>
   18e0a:	4607      	mov	r7, r0
   18e0c:	2800      	cmp	r0, #0
   18e0e:	d13e      	bne.n	18e8e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18e10:	4628      	mov	r0, r5
   18e12:	2295      	movs	r2, #149	; 0x95
   18e14:	4631      	mov	r1, r6
   18e16:	f010 f922 	bl	2905e <bt_gatt_check_perm>
   18e1a:	4605      	mov	r5, r0
   18e1c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18e1e:	b148      	cbz	r0, 18e34 <read_type_cb+0x44>
		if (data->rsp->len) {
   18e20:	68e3      	ldr	r3, [r4, #12]
   18e22:	781b      	ldrb	r3, [r3, #0]
   18e24:	b923      	cbnz	r3, 18e30 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   18e26:	2500      	movs	r5, #0
}
   18e28:	4628      	mov	r0, r5
   18e2a:	b003      	add	sp, #12
   18e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18e30:	7527      	strb	r7, [r4, #20]
   18e32:	e7f8      	b.n	18e26 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18e34:	68a0      	ldr	r0, [r4, #8]
   18e36:	f010 feb6 	bl	29ba6 <net_buf_frag_last>
   18e3a:	2102      	movs	r1, #2
   18e3c:	3008      	adds	r0, #8
   18e3e:	f010 fed4 	bl	29bea <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18e42:	4b14      	ldr	r3, [pc, #80]	; (18e94 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18e44:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18e46:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   18e48:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18e4c:	4631      	mov	r1, r6
   18e4e:	9300      	str	r3, [sp, #0]
   18e50:	9401      	str	r4, [sp, #4]
   18e52:	462b      	mov	r3, r5
   18e54:	4640      	mov	r0, r8
   18e56:	f00f fb23 	bl	284a0 <att_chan_read>
	if (read < 0) {
   18e5a:	2800      	cmp	r0, #0
   18e5c:	da07      	bge.n	18e6e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   18e5e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18e62:	bf26      	itte	cs
   18e64:	4240      	negcs	r0, r0
   18e66:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18e68:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18e6a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18e6c:	e7dc      	b.n	18e28 <read_type_cb+0x38>
	if (!data->item) {
   18e6e:	6923      	ldr	r3, [r4, #16]
   18e70:	2b00      	cmp	r3, #0
   18e72:	d0d8      	beq.n	18e26 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18e74:	68a0      	ldr	r0, [r4, #8]
   18e76:	f00f f974 	bl	28162 <net_buf_frags_len>
   18e7a:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18e7e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18e80:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18e82:	7818      	ldrb	r0, [r3, #0]
   18e84:	4285      	cmp	r5, r0
   18e86:	bf94      	ite	ls
   18e88:	2500      	movls	r5, #0
   18e8a:	2501      	movhi	r5, #1
   18e8c:	e7cc      	b.n	18e28 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18e8e:	2501      	movs	r5, #1
   18e90:	e7ca      	b.n	18e28 <read_type_cb+0x38>
   18e92:	bf00      	nop
   18e94:	00028173 	.word	0x00028173

00018e98 <prep_write_cb>:
{
   18e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18e9c:	4614      	mov	r4, r2
   18e9e:	4606      	mov	r6, r0
   18ea0:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   18ea2:	f44f 7295 	mov.w	r2, #298	; 0x12a
   18ea6:	4601      	mov	r1, r0
   18ea8:	6820      	ldr	r0, [r4, #0]
   18eaa:	f010 f8d8 	bl	2905e <bt_gatt_check_perm>
   18eae:	4605      	mov	r5, r0
   18eb0:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   18eb2:	2800      	cmp	r0, #0
   18eb4:	d12e      	bne.n	18f14 <prep_write_cb+0x7c>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   18eb6:	8a73      	ldrh	r3, [r6, #18]
   18eb8:	065b      	lsls	r3, r3, #25
   18eba:	d516      	bpl.n	18eea <prep_write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
   18ebc:	2301      	movs	r3, #1
   18ebe:	9301      	str	r3, [sp, #4]
   18ec0:	89e3      	ldrh	r3, [r4, #14]
   18ec2:	9300      	str	r3, [sp, #0]
   18ec4:	f8d6 8008 	ldr.w	r8, [r6, #8]
   18ec8:	89a3      	ldrh	r3, [r4, #12]
   18eca:	68a2      	ldr	r2, [r4, #8]
   18ecc:	6820      	ldr	r0, [r4, #0]
   18ece:	4631      	mov	r1, r6
   18ed0:	47c0      	blx	r8
	if (write != 0) {
   18ed2:	b150      	cbz	r0, 18eea <prep_write_cb+0x52>
	if (err < 0 && err >= -0xff) {
   18ed4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18ed8:	bf26      	itte	cs
   18eda:	4243      	negcs	r3, r0
   18edc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   18ede:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   18ee0:	7423      	strb	r3, [r4, #16]
}
   18ee2:	4628      	mov	r0, r5
   18ee4:	b002      	add	sp, #8
   18ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   18eea:	480b      	ldr	r0, [pc, #44]	; (18f18 <prep_write_cb+0x80>)
   18eec:	2200      	movs	r2, #0
   18eee:	2300      	movs	r3, #0
   18ef0:	f010 fdd6 	bl	29aa0 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   18ef4:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   18ef6:	b908      	cbnz	r0, 18efc <prep_write_cb+0x64>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   18ef8:	2309      	movs	r3, #9
   18efa:	e7f1      	b.n	18ee0 <prep_write_cb+0x48>
	attr_data->offset = data->offset;
   18efc:	89e3      	ldrh	r3, [r4, #14]
   18efe:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   18f00:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18f02:	89a2      	ldrh	r2, [r4, #12]
   18f04:	68a1      	ldr	r1, [r4, #8]
   18f06:	3008      	adds	r0, #8
   18f08:	f010 fe75 	bl	29bf6 <net_buf_simple_add_mem>
	data->err = 0U;
   18f0c:	2300      	movs	r3, #0
   18f0e:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   18f10:	2501      	movs	r5, #1
   18f12:	e7e6      	b.n	18ee2 <prep_write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   18f14:	2500      	movs	r5, #0
   18f16:	e7e4      	b.n	18ee2 <prep_write_cb+0x4a>
   18f18:	20000c00 	.word	0x20000c00

00018f1c <bt_att_chan_create_pdu>:
{
   18f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f20:	b087      	sub	sp, #28
   18f22:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18f24:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18f26:	1c53      	adds	r3, r2, #1
   18f28:	428b      	cmp	r3, r1
{
   18f2a:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18f2c:	d915      	bls.n	18f5a <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18f2e:	466c      	mov	r4, sp
   18f30:	b088      	sub	sp, #32
   18f32:	466a      	mov	r2, sp
   18f34:	482b      	ldr	r0, [pc, #172]	; (18fe4 <bt_att_chan_create_pdu+0xc8>)
   18f36:	61d3      	str	r3, [r2, #28]
   18f38:	2304      	movs	r3, #4
   18f3a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   18f3e:	f842 3f10 	str.w	r3, [r2, #16]!
   18f42:	4829      	ldr	r0, [pc, #164]	; (18fe8 <bt_att_chan_create_pdu+0xcc>)
   18f44:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18f48:	f00f fa39 	bl	283be <z_log_msg_static_create.constprop.0>
   18f4c:	46a5      	mov	sp, r4
		return NULL;
   18f4e:	2400      	movs	r4, #0
}
   18f50:	4620      	mov	r0, r4
   18f52:	371c      	adds	r7, #28
   18f54:	46bd      	mov	sp, r7
   18f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   18f5a:	4628      	mov	r0, r5
   18f5c:	f00f f919 	bl	28192 <att_op_get_type>
   18f60:	2802      	cmp	r0, #2
   18f62:	d001      	beq.n	18f68 <bt_att_chan_create_pdu+0x4c>
   18f64:	2804      	cmp	r0, #4
   18f66:	d11b      	bne.n	18fa0 <bt_att_chan_create_pdu+0x84>
   18f68:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18f6c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18f70:	2100      	movs	r1, #0
   18f72:	4642      	mov	r2, r8
   18f74:	464b      	mov	r3, r9
   18f76:	4608      	mov	r0, r1
   18f78:	f00f f8b8 	bl	280ec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18f7c:	4604      	mov	r4, r0
   18f7e:	b9a0      	cbnz	r0, 18faa <bt_att_chan_create_pdu+0x8e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18f80:	466e      	mov	r6, sp
   18f82:	b088      	sub	sp, #32
   18f84:	466a      	mov	r2, sp
   18f86:	4b19      	ldr	r3, [pc, #100]	; (18fec <bt_att_chan_create_pdu+0xd0>)
   18f88:	4817      	ldr	r0, [pc, #92]	; (18fe8 <bt_att_chan_create_pdu+0xcc>)
   18f8a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18f8e:	2303      	movs	r3, #3
   18f90:	f842 3f10 	str.w	r3, [r2, #16]!
   18f94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18f98:	f00f fa11 	bl	283be <z_log_msg_static_create.constprop.0>
   18f9c:	46b5      	mov	sp, r6
		return NULL;
   18f9e:	e7d7      	b.n	18f50 <bt_att_chan_create_pdu+0x34>
		timeout = K_FOREVER;
   18fa0:	f04f 38ff 	mov.w	r8, #4294967295
   18fa4:	f04f 39ff 	mov.w	r9, #4294967295
   18fa8:	e7e2      	b.n	18f70 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   18faa:	4811      	ldr	r0, [pc, #68]	; (18ff0 <bt_att_chan_create_pdu+0xd4>)
   18fac:	4642      	mov	r2, r8
   18fae:	464b      	mov	r3, r9
   18fb0:	f008 fb98 	bl	216e4 <z_impl_k_queue_get>
	if (!data) {
   18fb4:	b970      	cbnz	r0, 18fd4 <bt_att_chan_create_pdu+0xb8>
		BT_WARN("Unable to allocate ATT TX meta");
   18fb6:	4b0f      	ldr	r3, [pc, #60]	; (18ff4 <bt_att_chan_create_pdu+0xd8>)
   18fb8:	617b      	str	r3, [r7, #20]
   18fba:	480b      	ldr	r0, [pc, #44]	; (18fe8 <bt_att_chan_create_pdu+0xcc>)
   18fbc:	2302      	movs	r3, #2
   18fbe:	f107 0210 	add.w	r2, r7, #16
   18fc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18fc6:	613b      	str	r3, [r7, #16]
   18fc8:	f00f f9f9 	bl	283be <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   18fcc:	4620      	mov	r0, r4
   18fce:	f004 fbc1 	bl	1d754 <net_buf_unref>
		return NULL;
   18fd2:	e7bc      	b.n	18f4e <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   18fd4:	6160      	str	r0, [r4, #20]
	return net_buf_simple_add(&buf->b, len);
   18fd6:	2101      	movs	r1, #1
   18fd8:	f104 0008 	add.w	r0, r4, #8
   18fdc:	f010 fe05 	bl	29bea <net_buf_simple_add>
	hdr->code = op;
   18fe0:	7005      	strb	r5, [r0, #0]
	return buf;
   18fe2:	e7b5      	b.n	18f50 <bt_att_chan_create_pdu+0x34>
   18fe4:	0002dc0d 	.word	0x0002dc0d
   18fe8:	0002b4cc 	.word	0x0002b4cc
   18fec:	0002da07 	.word	0x0002da07
   18ff0:	20000ac8 	.word	0x20000ac8
   18ff4:	0002dc32 	.word	0x0002dc32

00018ff8 <bt_att_recv>:
{
   18ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ffc:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18ffe:	898b      	ldrh	r3, [r1, #12]
{
   19000:	af00      	add	r7, sp, #0
   19002:	4682      	mov	sl, r0
   19004:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19006:	b97b      	cbnz	r3, 19028 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   19008:	4b46      	ldr	r3, [pc, #280]	; (19124 <bt_att_recv+0x12c>)
   1900a:	617b      	str	r3, [r7, #20]
   1900c:	2302      	movs	r3, #2
   1900e:	613b      	str	r3, [r7, #16]
   19010:	f107 0210 	add.w	r2, r7, #16
   19014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   19018:	4843      	ldr	r0, [pc, #268]	; (19128 <bt_att_recv+0x130>)
   1901a:	f00f f9d0 	bl	283be <z_log_msg_static_create.constprop.0>
}
   1901e:	2000      	movs	r0, #0
   19020:	3718      	adds	r7, #24
   19022:	46bd      	mov	sp, r7
   19024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19028:	2101      	movs	r1, #1
   1902a:	f104 0008 	add.w	r0, r4, #8
   1902e:	f010 fe03 	bl	29c38 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19032:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   19036:	4605      	mov	r5, r0
   19038:	2b00      	cmp	r3, #0
   1903a:	d0f0      	beq.n	1901e <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1903c:	7801      	ldrb	r1, [r0, #0]
   1903e:	4e3b      	ldr	r6, [pc, #236]	; (1912c <bt_att_recv+0x134>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19040:	f1aa 0804 	sub.w	r8, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19044:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19046:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1904a:	428a      	cmp	r2, r1
   1904c:	d116      	bne.n	1907c <bt_att_recv+0x84>
		if (handler->type == ATT_REQUEST &&
   1904e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   19052:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   19056:	789b      	ldrb	r3, [r3, #2]
   19058:	2b01      	cmp	r3, #1
   1905a:	d131      	bne.n	190c0 <bt_att_recv+0xc8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1905c:	2100      	movs	r1, #0
   1905e:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   19062:	f00f fa08 	bl	28476 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   19066:	2800      	cmp	r0, #0
   19068:	d034      	beq.n	190d4 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected request");
   1906a:	4b31      	ldr	r3, [pc, #196]	; (19130 <bt_att_recv+0x138>)
			BT_WARN("Ignoring unexpected indication");
   1906c:	617b      	str	r3, [r7, #20]
   1906e:	2302      	movs	r3, #2
   19070:	613b      	str	r3, [r7, #16]
   19072:	f107 0210 	add.w	r2, r7, #16
   19076:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1907a:	e7cd      	b.n	19018 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1907c:	3301      	adds	r3, #1
   1907e:	2b0f      	cmp	r3, #15
   19080:	d1e1      	bne.n	19046 <bt_att_recv+0x4e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   19082:	466c      	mov	r4, sp
   19084:	b088      	sub	sp, #32
   19086:	466a      	mov	r2, sp
   19088:	4b2a      	ldr	r3, [pc, #168]	; (19134 <bt_att_recv+0x13c>)
   1908a:	4827      	ldr	r0, [pc, #156]	; (19128 <bt_att_recv+0x130>)
   1908c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19090:	2303      	movs	r3, #3
   19092:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19096:	f842 3f10 	str.w	r3, [r2, #16]!
   1909a:	f00f f990 	bl	283be <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1909e:	7829      	ldrb	r1, [r5, #0]
   190a0:	46a5      	mov	sp, r4
   190a2:	4608      	mov	r0, r1
   190a4:	f00f f875 	bl	28192 <att_op_get_type>
   190a8:	2800      	cmp	r0, #0
   190aa:	d0b8      	beq.n	1901e <bt_att_recv+0x26>
   190ac:	2805      	cmp	r0, #5
   190ae:	d0b6      	beq.n	1901e <bt_att_recv+0x26>
	if (!req) {
   190b0:	2900      	cmp	r1, #0
   190b2:	d0b4      	beq.n	1901e <bt_att_recv+0x26>
   190b4:	2306      	movs	r3, #6
   190b6:	2200      	movs	r2, #0
   190b8:	4640      	mov	r0, r8
   190ba:	f00f fbea 	bl	28892 <send_err_rsp.part.0>
   190be:	e7ae      	b.n	1901e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   190c0:	2b05      	cmp	r3, #5
   190c2:	d107      	bne.n	190d4 <bt_att_recv+0xdc>
			   atomic_test_and_set_bit(att_chan->flags,
   190c4:	2101      	movs	r1, #1
   190c6:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   190ca:	f00f f9d4 	bl	28476 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   190ce:	b108      	cbz	r0, 190d4 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected indication");
   190d0:	4b19      	ldr	r3, [pc, #100]	; (19138 <bt_att_recv+0x140>)
   190d2:	e7cb      	b.n	1906c <bt_att_recv+0x74>
	if (buf->len < handler->expect_len) {
   190d4:	eb06 0309 	add.w	r3, r6, r9
   190d8:	89a1      	ldrh	r1, [r4, #12]
   190da:	785a      	ldrb	r2, [r3, #1]
   190dc:	428a      	cmp	r2, r1
   190de:	d91b      	bls.n	19118 <bt_att_recv+0x120>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   190e0:	46ea      	mov	sl, sp
   190e2:	b088      	sub	sp, #32
   190e4:	782b      	ldrb	r3, [r5, #0]
   190e6:	466a      	mov	r2, sp
   190e8:	4814      	ldr	r0, [pc, #80]	; (1913c <bt_att_recv+0x144>)
   190ea:	61d3      	str	r3, [r2, #28]
   190ec:	2404      	movs	r4, #4
   190ee:	e9c2 0105 	strd	r0, r1, [r2, #20]
   190f2:	f842 4f10 	str.w	r4, [r2, #16]!
   190f6:	480c      	ldr	r0, [pc, #48]	; (19128 <bt_att_recv+0x130>)
   190f8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   190fc:	f00f f95f 	bl	283be <z_log_msg_static_create.constprop.0>
		err = BT_ATT_ERR_INVALID_PDU;
   19100:	4623      	mov	r3, r4
   19102:	46d5      	mov	sp, sl
	if (handler->type == ATT_REQUEST && err) {
   19104:	444e      	add	r6, r9
   19106:	78b2      	ldrb	r2, [r6, #2]
   19108:	2a01      	cmp	r2, #1
   1910a:	d188      	bne.n	1901e <bt_att_recv+0x26>
   1910c:	2b00      	cmp	r3, #0
   1910e:	d086      	beq.n	1901e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19110:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19112:	2900      	cmp	r1, #0
   19114:	d083      	beq.n	1901e <bt_att_recv+0x26>
   19116:	e7ce      	b.n	190b6 <bt_att_recv+0xbe>
		err = handler->func(att_chan, buf);
   19118:	685b      	ldr	r3, [r3, #4]
   1911a:	4621      	mov	r1, r4
   1911c:	4640      	mov	r0, r8
   1911e:	4798      	blx	r3
   19120:	4603      	mov	r3, r0
   19122:	e7ef      	b.n	19104 <bt_att_recv+0x10c>
   19124:	0002dc51 	.word	0x0002dc51
   19128:	0002b4cc 	.word	0x0002b4cc
   1912c:	0002bd7c 	.word	0x0002bd7c
   19130:	0002dc6c 	.word	0x0002dc6c
   19134:	0002dcc6 	.word	0x0002dcc6
   19138:	0002dc88 	.word	0x0002dc88
   1913c:	0002dca7 	.word	0x0002dca7

00019140 <att_write_rsp>:
{
   19140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19144:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19146:	6803      	ldr	r3, [r0, #0]
   19148:	460e      	mov	r6, r1
   1914a:	3900      	subs	r1, #0
{
   1914c:	b086      	sub	sp, #24
   1914e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19150:	bf18      	it	ne
   19152:	2101      	movne	r1, #1
   19154:	6818      	ldr	r0, [r3, #0]
{
   19156:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19158:	f010 f838 	bl	291cc <bt_gatt_change_aware>
   1915c:	b958      	cbnz	r0, 19176 <att_write_rsp+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1915e:	2105      	movs	r1, #5
   19160:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19164:	f00f f987 	bl	28476 <atomic_test_and_set_bit>
   19168:	2800      	cmp	r0, #0
   1916a:	d052      	beq.n	19212 <att_write_rsp+0xd2>
			return 0;
   1916c:	2500      	movs	r5, #0
}
   1916e:	4628      	mov	r0, r5
   19170:	b006      	add	sp, #24
   19172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19176:	2f00      	cmp	r7, #0
   19178:	d04d      	beq.n	19216 <att_write_rsp+0xd6>
	(void)memset(&data, 0, sizeof(data));
   1917a:	2218      	movs	r2, #24
   1917c:	2100      	movs	r1, #0
   1917e:	4668      	mov	r0, sp
   19180:	f00e fb60 	bl	27844 <memset>
	if (rsp) {
   19184:	f1b8 0f00 	cmp.w	r8, #0
   19188:	d132      	bne.n	191f0 <att_write_rsp+0xb0>
	data.conn = chan->att->conn;
   1918a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1918c:	4a23      	ldr	r2, [pc, #140]	; (1921c <att_write_rsp+0xdc>)
	data.conn = chan->att->conn;
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19192:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   19196:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1919a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1919c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1919e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   191a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   191a6:	2301      	movs	r3, #1
   191a8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   191ac:	4639      	mov	r1, r7
   191ae:	466b      	mov	r3, sp
   191b0:	4638      	mov	r0, r7
	data.req = req;
   191b2:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   191b6:	f00f f83a 	bl	2822e <bt_gatt_foreach_attr>
	if (data.err) {
   191ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
   191be:	b30d      	cbz	r5, 19204 <att_write_rsp+0xc4>
		if (rsp) {
   191c0:	f1b8 0f00 	cmp.w	r8, #0
   191c4:	d00f      	beq.n	191e6 <att_write_rsp+0xa6>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   191c6:	9b01      	ldr	r3, [sp, #4]
   191c8:	6958      	ldr	r0, [r3, #20]
   191ca:	f7ff fbb3 	bl	18934 <tx_meta_data_free>
			net_buf_unref(data.buf);
   191ce:	9801      	ldr	r0, [sp, #4]
   191d0:	f004 fac0 	bl	1d754 <net_buf_unref>
	if (!req) {
   191d4:	2e00      	cmp	r6, #0
   191d6:	d0c9      	beq.n	1916c <att_write_rsp+0x2c>
   191d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   191dc:	463a      	mov	r2, r7
   191de:	4631      	mov	r1, r6
   191e0:	4620      	mov	r0, r4
   191e2:	f00f fb56 	bl	28892 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   191e6:	2e18      	cmp	r6, #24
   191e8:	d1c0      	bne.n	1916c <att_write_rsp+0x2c>
   191ea:	f89d 5014 	ldrb.w	r5, [sp, #20]
   191ee:	e7be      	b.n	1916e <att_write_rsp+0x2e>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   191f0:	2200      	movs	r2, #0
   191f2:	4641      	mov	r1, r8
   191f4:	4620      	mov	r0, r4
   191f6:	f7ff fe91 	bl	18f1c <bt_att_chan_create_pdu>
   191fa:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   191fc:	2800      	cmp	r0, #0
   191fe:	d1c4      	bne.n	1918a <att_write_rsp+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   19200:	250e      	movs	r5, #14
   19202:	e7b4      	b.n	1916e <att_write_rsp+0x2e>
	if (data.buf) {
   19204:	9901      	ldr	r1, [sp, #4]
   19206:	2900      	cmp	r1, #0
   19208:	d0b0      	beq.n	1916c <att_write_rsp+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   1920a:	4620      	mov	r0, r4
   1920c:	f00f f90d 	bl	2842a <bt_att_chan_send_rsp>
   19210:	e7ad      	b.n	1916e <att_write_rsp+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19212:	2512      	movs	r5, #18
   19214:	e7ab      	b.n	1916e <att_write_rsp+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   19216:	2501      	movs	r5, #1
   19218:	e7a9      	b.n	1916e <att_write_rsp+0x2e>
   1921a:	bf00      	nop
   1921c:	00028359 	.word	0x00028359

00019220 <att_signed_write_cmd>:
{
   19220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19224:	6847      	ldr	r7, [r0, #4]
{
   19226:	b08b      	sub	sp, #44	; 0x2c
   19228:	4606      	mov	r6, r0
   1922a:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1922c:	3090      	adds	r0, #144	; 0x90
   1922e:	2103      	movs	r1, #3
   19230:	f00e fff4 	bl	2821c <atomic_test_bit>
   19234:	b9c0      	cbnz	r0, 19268 <att_signed_write_cmd+0x48>
	handle = sys_le16_to_cpu(req->handle);
   19236:	46a9      	mov	r9, r5
	return net_buf_simple_push(&buf->b, len);
   19238:	2101      	movs	r1, #1
   1923a:	f859 3f08 	ldr.w	r3, [r9, #8]!
   1923e:	4648      	mov	r0, r9
   19240:	f8b3 8000 	ldrh.w	r8, [r3]
   19244:	f010 fce8 	bl	29c18 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   19248:	4638      	mov	r0, r7
   1924a:	4629      	mov	r1, r5
   1924c:	f003 f87e 	bl	1c34c <bt_smp_sign_verify>
	if (err) {
   19250:	4607      	mov	r7, r0
   19252:	b158      	cbz	r0, 1926c <att_signed_write_cmd+0x4c>
		BT_ERR("Error verifying data");
   19254:	4b11      	ldr	r3, [pc, #68]	; (1929c <att_signed_write_cmd+0x7c>)
   19256:	9309      	str	r3, [sp, #36]	; 0x24
   19258:	4811      	ldr	r0, [pc, #68]	; (192a0 <att_signed_write_cmd+0x80>)
   1925a:	2302      	movs	r3, #2
   1925c:	aa08      	add	r2, sp, #32
   1925e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19262:	9308      	str	r3, [sp, #32]
   19264:	f00f f8ab 	bl	283be <z_log_msg_static_create.constprop.0>
		return 0;
   19268:	2000      	movs	r0, #0
   1926a:	e014      	b.n	19296 <att_signed_write_cmd+0x76>
	return net_buf_simple_pull(&buf->b, len);
   1926c:	2101      	movs	r1, #1
   1926e:	4648      	mov	r0, r9
   19270:	f010 fcda 	bl	29c28 <net_buf_simple_pull>
   19274:	2102      	movs	r1, #2
   19276:	4648      	mov	r0, r9
   19278:	f010 fcd6 	bl	29c28 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1927c:	89ab      	ldrh	r3, [r5, #12]
   1927e:	3b0c      	subs	r3, #12
   19280:	b29b      	uxth	r3, r3
   19282:	9302      	str	r3, [sp, #8]
   19284:	68ab      	ldr	r3, [r5, #8]
   19286:	463a      	mov	r2, r7
   19288:	e9cd 7300 	strd	r7, r3, [sp]
   1928c:	4639      	mov	r1, r7
   1928e:	4643      	mov	r3, r8
   19290:	4630      	mov	r0, r6
   19292:	f7ff ff55 	bl	19140 <att_write_rsp>
}
   19296:	b00b      	add	sp, #44	; 0x2c
   19298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1929c:	0002dce0 	.word	0x0002dce0
   192a0:	0002b4cc 	.word	0x0002b4cc

000192a4 <bt_att_create_pdu>:
{
   192a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192a6:	af00      	add	r7, sp, #0
   192a8:	460e      	mov	r6, r1
   192aa:	4615      	mov	r5, r2
	att = att_get(conn);
   192ac:	f7ff fc12 	bl	18ad4 <att_get>
	if (!att) {
   192b0:	b1f8      	cbz	r0, 192f2 <bt_att_create_pdu+0x4e>
	return list->head;
   192b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   192b4:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192b6:	b138      	cbz	r0, 192c8 <bt_att_create_pdu+0x24>
	return node->next;
   192b8:	f850 39e0 	ldr.w	r3, [r0], #-224
   192bc:	b103      	cbz	r3, 192c0 <bt_att_create_pdu+0x1c>
   192be:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   192c0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   192c2:	4291      	cmp	r1, r2
   192c4:	d911      	bls.n	192ea <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192c6:	b9b3      	cbnz	r3, 192f6 <bt_att_create_pdu+0x52>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   192c8:	466c      	mov	r4, sp
   192ca:	b088      	sub	sp, #32
   192cc:	466a      	mov	r2, sp
   192ce:	4b0d      	ldr	r3, [pc, #52]	; (19304 <bt_att_create_pdu+0x60>)
   192d0:	480d      	ldr	r0, [pc, #52]	; (19308 <bt_att_create_pdu+0x64>)
   192d2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   192d6:	2303      	movs	r3, #3
   192d8:	f842 3f10 	str.w	r3, [r2, #16]!
   192dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   192e0:	f00f f86d 	bl	283be <z_log_msg_static_create.constprop.0>
	return NULL;
   192e4:	2000      	movs	r0, #0
   192e6:	46a5      	mov	sp, r4
   192e8:	e003      	b.n	192f2 <bt_att_create_pdu+0x4e>
		return bt_att_chan_create_pdu(chan, op, len);
   192ea:	462a      	mov	r2, r5
   192ec:	4631      	mov	r1, r6
   192ee:	f7ff fe15 	bl	18f1c <bt_att_chan_create_pdu>
}
   192f2:	46bd      	mov	sp, r7
   192f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192f6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192fa:	b104      	cbz	r4, 192fe <bt_att_create_pdu+0x5a>
   192fc:	3ce0      	subs	r4, #224	; 0xe0
{
   192fe:	4618      	mov	r0, r3
   19300:	4623      	mov	r3, r4
   19302:	e7dd      	b.n	192c0 <bt_att_create_pdu+0x1c>
   19304:	0002dcf5 	.word	0x0002dcf5
   19308:	0002b4cc 	.word	0x0002b4cc

0001930c <att_exec_write_req>:
{
   1930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   19310:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   19312:	4f4b      	ldr	r7, [pc, #300]	; (19440 <att_exec_write_req+0x134>)
   19314:	781b      	ldrb	r3, [r3, #0]
{
   19316:	b089      	sub	sp, #36	; 0x24
   19318:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   1931a:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   1931c:	6843      	ldr	r3, [r0, #4]
   1931e:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   19320:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   19322:	6828      	ldr	r0, [r5, #0]
   19324:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19326:	b98b      	cbnz	r3, 1934c <att_exec_write_req+0x40>
	if (err) {
   19328:	2c00      	cmp	r4, #0
   1932a:	f040 8085 	bne.w	19438 <att_exec_write_req+0x12c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1932e:	2119      	movs	r1, #25
   19330:	9806      	ldr	r0, [sp, #24]
   19332:	4622      	mov	r2, r4
   19334:	f7ff ffb6 	bl	192a4 <bt_att_create_pdu>
	if (!buf) {
   19338:	4601      	mov	r1, r0
   1933a:	2800      	cmp	r0, #0
   1933c:	d06f      	beq.n	1941e <att_exec_write_req+0x112>
	bt_att_chan_send_rsp(chan, buf);
   1933e:	4628      	mov	r0, r5
   19340:	f00f f873 	bl	2842a <bt_att_chan_send_rsp>
}
   19344:	4620      	mov	r0, r4
   19346:	b009      	add	sp, #36	; 0x24
   19348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1934c:	3024      	adds	r0, #36	; 0x24
   1934e:	f010 fbee 	bl	29b2e <net_buf_slist_get>
   19352:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   19356:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1935a:	8982      	ldrh	r2, [r0, #12]
   1935c:	6881      	ldr	r1, [r0, #8]
   1935e:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   19360:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   19362:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   19364:	4836      	ldr	r0, [pc, #216]	; (19440 <att_exec_write_req+0x134>)
   19366:	603b      	str	r3, [r7, #0]
   19368:	f010 fc45 	bl	29bf6 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   1936c:	f8d5 8000 	ldr.w	r8, [r5]
	return list->head;
   19370:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   19374:	2c00      	cmp	r4, #0
   19376:	d054      	beq.n	19422 <att_exec_write_req+0x116>
		err = exec_write_reassemble(handle, data->offset,
   19378:	8af3      	ldrh	r3, [r6, #22]
	return node->next;
   1937a:	f8d4 9000 	ldr.w	r9, [r4]
   1937e:	9307      	str	r3, [sp, #28]
   19380:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   19384:	8aa2      	ldrh	r2, [r4, #20]
   19386:	4552      	cmp	r2, sl
   19388:	d12f      	bne.n	193ea <att_exec_write_req+0xde>
			if (tmp_data->offset == 0) {
   1938a:	8ae2      	ldrh	r2, [r4, #22]
   1938c:	2a00      	cmp	r2, #0
   1938e:	d048      	beq.n	19422 <att_exec_write_req+0x116>
			if (tmp_data->offset != buf->len + offset) {
   19390:	88b9      	ldrh	r1, [r7, #4]
   19392:	9b07      	ldr	r3, [sp, #28]
   19394:	1858      	adds	r0, r3, r1
   19396:	4282      	cmp	r2, r0
   19398:	d148      	bne.n	1942c <att_exec_write_req+0x120>
			if (buf->len + entry->len > buf->size) {
   1939a:	89a2      	ldrh	r2, [r4, #12]
   1939c:	88f8      	ldrh	r0, [r7, #6]
   1939e:	4411      	add	r1, r2
   193a0:	4281      	cmp	r1, r0
   193a2:	dc4b      	bgt.n	1943c <att_exec_write_req+0x130>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   193a4:	68a1      	ldr	r1, [r4, #8]
   193a6:	4638      	mov	r0, r7
   193a8:	f010 fc25 	bl	29bf6 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   193ac:	6822      	ldr	r2, [r4, #0]
   193ae:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   193b2:	f1bb 0f00 	cmp.w	fp, #0
   193b6:	d111      	bne.n	193dc <att_exec_write_req+0xd0>
   193b8:	428c      	cmp	r4, r1
	list->head = node;
   193ba:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   193be:	d101      	bne.n	193c4 <att_exec_write_req+0xb8>
	list->tail = node;
   193c0:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   193c4:	2300      	movs	r3, #0
   193c6:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   193c8:	4620      	mov	r0, r4
   193ca:	f004 f9c3 	bl	1d754 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   193ce:	f1b9 0f00 	cmp.w	r9, #0
   193d2:	d026      	beq.n	19422 <att_exec_write_req+0x116>
	return node->next;
   193d4:	464c      	mov	r4, r9
   193d6:	f8d9 9000 	ldr.w	r9, [r9]
   193da:	e7d3      	b.n	19384 <att_exec_write_req+0x78>
Z_GENLIST_REMOVE(slist, snode)
   193dc:	428c      	cmp	r4, r1
	parent->next = child;
   193de:	f8cb 2000 	str.w	r2, [fp]
	list->tail = node;
   193e2:	bf08      	it	eq
   193e4:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   193e8:	e7ec      	b.n	193c4 <att_exec_write_req+0xb8>
			prev = &entry->node;
   193ea:	46a3      	mov	fp, r4
   193ec:	e7ef      	b.n	193ce <att_exec_write_req+0xc2>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   193ee:	88bb      	ldrh	r3, [r7, #4]
   193f0:	9302      	str	r3, [sp, #8]
   193f2:	683b      	ldr	r3, [r7, #0]
   193f4:	9301      	str	r3, [sp, #4]
   193f6:	8af3      	ldrh	r3, [r6, #22]
   193f8:	9300      	str	r3, [sp, #0]
   193fa:	2200      	movs	r2, #0
   193fc:	4653      	mov	r3, sl
   193fe:	2118      	movs	r1, #24
   19400:	4628      	mov	r0, r5
   19402:	f7ff fe9d 	bl	19140 <att_write_rsp>
			if (err) {
   19406:	4604      	mov	r4, r0
   19408:	b128      	cbz	r0, 19416 <att_exec_write_req+0x10a>
	if (!req) {
   1940a:	4603      	mov	r3, r0
   1940c:	8ab2      	ldrh	r2, [r6, #20]
   1940e:	2118      	movs	r1, #24
   19410:	4628      	mov	r0, r5
   19412:	f00f fa3e 	bl	28892 <send_err_rsp.part.0>
		net_buf_unref(buf);
   19416:	4630      	mov	r0, r6
   19418:	f004 f99c 	bl	1d754 <net_buf_unref>
   1941c:	e781      	b.n	19322 <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   1941e:	240e      	movs	r4, #14
   19420:	e790      	b.n	19344 <att_exec_write_req+0x38>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   19422:	9b05      	ldr	r3, [sp, #20]
   19424:	2b01      	cmp	r3, #1
   19426:	d0e2      	beq.n	193ee <att_exec_write_req+0xe2>
		err = exec_write_reassemble(handle, data->offset,
   19428:	2400      	movs	r4, #0
   1942a:	e7f4      	b.n	19416 <att_exec_write_req+0x10a>
				return BT_ATT_ERR_INVALID_OFFSET;
   1942c:	2307      	movs	r3, #7
	if (!req) {
   1942e:	4652      	mov	r2, sl
   19430:	2118      	movs	r1, #24
   19432:	4628      	mov	r0, r5
   19434:	f00f fa2d 	bl	28892 <send_err_rsp.part.0>
			return 0;
   19438:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   1943a:	e783      	b.n	19344 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   1943c:	230d      	movs	r3, #13
   1943e:	e7f6      	b.n	1942e <att_exec_write_req+0x122>
   19440:	200006cc 	.word	0x200006cc

00019444 <att_prepare_write_req>:
{
   19444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19448:	460c      	mov	r4, r1
   1944a:	b087      	sub	sp, #28
   1944c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1944e:	2104      	movs	r1, #4
   19450:	f104 0008 	add.w	r0, r4, #8
   19454:	f010 fbf0 	bl	29c38 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   19458:	f8d5 b004 	ldr.w	fp, [r5, #4]
	handle = sys_le16_to_cpu(req->handle);
   1945c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   19460:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   19464:	f8d4 8008 	ldr.w	r8, [r4, #8]
   19468:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   1946a:	2101      	movs	r1, #1
   1946c:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   1946e:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   19472:	f00f feab 	bl	291cc <bt_gatt_change_aware>
   19476:	b960      	cbnz	r0, 19492 <att_prepare_write_req+0x4e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19478:	2105      	movs	r1, #5
   1947a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1947e:	f00e fffa 	bl	28476 <atomic_test_and_set_bit>
			return 0;
   19482:	2800      	cmp	r0, #0
   19484:	bf0c      	ite	eq
   19486:	2412      	moveq	r4, #18
   19488:	2400      	movne	r4, #0
}
   1948a:	4620      	mov	r0, r4
   1948c:	b007      	add	sp, #28
   1948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   19492:	2e00      	cmp	r6, #0
   19494:	d045      	beq.n	19522 <att_prepare_write_req+0xde>
	(void)memset(&data, 0, sizeof(data));
   19496:	2214      	movs	r2, #20
   19498:	2100      	movs	r1, #0
   1949a:	a801      	add	r0, sp, #4
   1949c:	f00e f9d2 	bl	27844 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   194a0:	2301      	movs	r3, #1
   194a2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   194a6:	4a21      	ldr	r2, [pc, #132]	; (1952c <att_prepare_write_req+0xe8>)
	data.conn = conn;
   194a8:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   194ac:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   194ae:	ab01      	add	r3, sp, #4
   194b0:	4631      	mov	r1, r6
   194b2:	4630      	mov	r0, r6
	data.offset = offset;
   194b4:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   194b8:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   194bc:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   194c0:	f00e feb5 	bl	2822e <bt_gatt_foreach_attr>
	if (data.err) {
   194c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
   194c8:	b13c      	cbz	r4, 194da <att_prepare_write_req+0x96>
	if (!req) {
   194ca:	4623      	mov	r3, r4
   194cc:	4632      	mov	r2, r6
   194ce:	2116      	movs	r1, #22
   194d0:	4628      	mov	r0, r5
   194d2:	f00f f9de 	bl	28892 <send_err_rsp.part.0>
		return 0;
   194d6:	2400      	movs	r4, #0
   194d8:	e7d7      	b.n	1948a <att_prepare_write_req+0x46>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   194da:	6828      	ldr	r0, [r5, #0]
   194dc:	9902      	ldr	r1, [sp, #8]
   194de:	3024      	adds	r0, #36	; 0x24
   194e0:	f010 fb07 	bl	29af2 <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   194e4:	4622      	mov	r2, r4
   194e6:	2117      	movs	r1, #23
   194e8:	4658      	mov	r0, fp
   194ea:	f7ff fedb 	bl	192a4 <bt_att_create_pdu>
   194ee:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   194f0:	b1c8      	cbz	r0, 19526 <att_prepare_write_req+0xe2>
	return net_buf_simple_add(&buf->b, len);
   194f2:	2104      	movs	r1, #4
   194f4:	3008      	adds	r0, #8
   194f6:	f010 fb78 	bl	29bea <net_buf_simple_add>
   194fa:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   194fc:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   19500:	f8a0 9002 	strh.w	r9, [r0, #2]
   19504:	9802      	ldr	r0, [sp, #8]
   19506:	4639      	mov	r1, r7
   19508:	3008      	adds	r0, #8
   1950a:	f010 fb6e 	bl	29bea <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   1950e:	4641      	mov	r1, r8
   19510:	463a      	mov	r2, r7
   19512:	1d30      	adds	r0, r6, #4
   19514:	f00e f98b 	bl	2782e <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   19518:	9902      	ldr	r1, [sp, #8]
   1951a:	4628      	mov	r0, r5
   1951c:	f00e ff85 	bl	2842a <bt_att_chan_send_rsp>
	return 0;
   19520:	e7b3      	b.n	1948a <att_prepare_write_req+0x46>
		return BT_ATT_ERR_INVALID_HANDLE;
   19522:	2401      	movs	r4, #1
   19524:	e7b1      	b.n	1948a <att_prepare_write_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19526:	240e      	movs	r4, #14
   19528:	e7af      	b.n	1948a <att_prepare_write_req+0x46>
   1952a:	bf00      	nop
   1952c:	00018e99 	.word	0x00018e99

00019530 <att_read_group_req>:
{
   19530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19534:	898c      	ldrh	r4, [r1, #12]
   19536:	3c04      	subs	r4, #4
   19538:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1953a:	2c02      	cmp	r4, #2
{
   1953c:	4605      	mov	r5, r0
   1953e:	b08c      	sub	sp, #48	; 0x30
   19540:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19542:	d001      	beq.n	19548 <att_read_group_req+0x18>
   19544:	2c10      	cmp	r4, #16
   19546:	d172      	bne.n	1962e <att_read_group_req+0xfe>
	return net_buf_simple_pull_mem(&buf->b, len);
   19548:	2104      	movs	r1, #4
   1954a:	3008      	adds	r0, #8
   1954c:	f010 fb74 	bl	29c38 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19550:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19554:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19556:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19558:	1d01      	adds	r1, r0, #4
   1955a:	4622      	mov	r2, r4
   1955c:	4640      	mov	r0, r8
   1955e:	f00e fa2d 	bl	279bc <bt_uuid_create>
   19562:	2800      	cmp	r0, #0
   19564:	d065      	beq.n	19632 <att_read_group_req+0x102>
	if (!start || !end) {
   19566:	2e00      	cmp	r6, #0
   19568:	d03e      	beq.n	195e8 <att_read_group_req+0xb8>
   1956a:	2400      	movs	r4, #0
   1956c:	2f00      	cmp	r7, #0
   1956e:	d03a      	beq.n	195e6 <att_read_group_req+0xb6>
	if (start > end) {
   19570:	42b7      	cmp	r7, r6
   19572:	d339      	bcc.n	195e8 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19574:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19578:	a901      	add	r1, sp, #4
   1957a:	4640      	mov	r0, r8
   1957c:	f88d 4004 	strb.w	r4, [sp, #4]
   19580:	f8ad 3006 	strh.w	r3, [sp, #6]
   19584:	f00e f9ec 	bl	27960 <bt_uuid_cmp>
   19588:	2800      	cmp	r0, #0
   1958a:	d138      	bne.n	195fe <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   1958c:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1958e:	2214      	movs	r2, #20
   19590:	2100      	movs	r1, #0
   19592:	a807      	add	r0, sp, #28
   19594:	f00e f956 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19598:	2201      	movs	r2, #1
   1959a:	2111      	movs	r1, #17
   1959c:	4620      	mov	r0, r4
   1959e:	f7ff fe81 	bl	192a4 <bt_att_create_pdu>
   195a2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   195a4:	2800      	cmp	r0, #0
   195a6:	d044      	beq.n	19632 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   195a8:	2101      	movs	r1, #1
   195aa:	3008      	adds	r0, #8
	data.uuid = uuid;
   195ac:	e9cd 5807 	strd	r5, r8, [sp, #28]
   195b0:	f010 fb1b 	bl	29bea <net_buf_simple_add>
	data.rsp->len = 0U;
   195b4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   195b8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195ba:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   195bc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195c0:	4a1d      	ldr	r2, [pc, #116]	; (19638 <att_read_group_req+0x108>)
	data.group = NULL;
   195c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195c6:	4639      	mov	r1, r7
   195c8:	4630      	mov	r0, r6
   195ca:	f00e fe30 	bl	2822e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   195ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   195d0:	781c      	ldrb	r4, [r3, #0]
   195d2:	bb3c      	cbnz	r4, 19624 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   195d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195d6:	6958      	ldr	r0, [r3, #20]
   195d8:	f7ff f9ac 	bl	18934 <tx_meta_data_free>
		net_buf_unref(data.buf);
   195dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   195de:	f004 f8b9 	bl	1d754 <net_buf_unref>
	if (!req) {
   195e2:	230a      	movs	r3, #10
   195e4:	e018      	b.n	19618 <att_read_group_req+0xe8>
			*err = 0U;
   195e6:	463e      	mov	r6, r7
	if (!req) {
   195e8:	2301      	movs	r3, #1
   195ea:	4632      	mov	r2, r6
   195ec:	2110      	movs	r1, #16
   195ee:	4628      	mov	r0, r5
   195f0:	f00f f94f 	bl	28892 <send_err_rsp.part.0>
		return 0;
   195f4:	2400      	movs	r4, #0
}
   195f6:	4620      	mov	r0, r4
   195f8:	b00c      	add	sp, #48	; 0x30
   195fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   195fe:	f642 0301 	movw	r3, #10241	; 0x2801
   19602:	a907      	add	r1, sp, #28
   19604:	4640      	mov	r0, r8
   19606:	f88d 401c 	strb.w	r4, [sp, #28]
   1960a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1960e:	f00e f9a7 	bl	27960 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19612:	2800      	cmp	r0, #0
   19614:	d0ba      	beq.n	1958c <att_read_group_req+0x5c>
	if (!req) {
   19616:	2310      	movs	r3, #16
   19618:	4632      	mov	r2, r6
   1961a:	2110      	movs	r1, #16
   1961c:	4628      	mov	r0, r5
   1961e:	f00f f938 	bl	28892 <send_err_rsp.part.0>
		return 0;
   19622:	e7e8      	b.n	195f6 <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   19624:	9909      	ldr	r1, [sp, #36]	; 0x24
   19626:	4628      	mov	r0, r5
   19628:	f00e feff 	bl	2842a <bt_att_chan_send_rsp>
	return 0;
   1962c:	e7e2      	b.n	195f4 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   1962e:	2404      	movs	r4, #4
   19630:	e7e1      	b.n	195f6 <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   19632:	240e      	movs	r4, #14
   19634:	e7df      	b.n	195f6 <att_read_group_req+0xc6>
   19636:	bf00      	nop
   19638:	00018c35 	.word	0x00018c35

0001963c <att_read_mult_vl_req>:
{
   1963c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19640:	6846      	ldr	r6, [r0, #4]
{
   19642:	b085      	sub	sp, #20
   19644:	4604      	mov	r4, r0
   19646:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19648:	4630      	mov	r0, r6
   1964a:	2101      	movs	r1, #1
   1964c:	f00f fdbe 	bl	291cc <bt_gatt_change_aware>
   19650:	b958      	cbnz	r0, 1966a <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19652:	2105      	movs	r1, #5
   19654:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19658:	f00e ff0d 	bl	28476 <atomic_test_and_set_bit>
			return 0;
   1965c:	2800      	cmp	r0, #0
   1965e:	bf0c      	ite	eq
   19660:	2012      	moveq	r0, #18
   19662:	2000      	movne	r0, #0
}
   19664:	b005      	add	sp, #20
   19666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1966a:	2210      	movs	r2, #16
   1966c:	2100      	movs	r1, #0
   1966e:	4668      	mov	r0, sp
   19670:	f00e f8e8 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19674:	2200      	movs	r2, #0
   19676:	2121      	movs	r1, #33	; 0x21
   19678:	4630      	mov	r0, r6
   1967a:	f7ff fe13 	bl	192a4 <bt_att_create_pdu>
   1967e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19680:	b368      	cbz	r0, 196de <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19682:	f8df 9060 	ldr.w	r9, [pc, #96]	; 196e4 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   19686:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19688:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1968c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19690:	89ab      	ldrh	r3, [r5, #12]
   19692:	2b01      	cmp	r3, #1
   19694:	d804      	bhi.n	196a0 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19696:	9902      	ldr	r1, [sp, #8]
   19698:	4620      	mov	r0, r4
   1969a:	f00e fec6 	bl	2842a <bt_att_chan_send_rsp>
   1969e:	e01c      	b.n	196da <att_read_mult_vl_req+0x9e>
   196a0:	4638      	mov	r0, r7
   196a2:	f010 fad9 	bl	29c58 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   196a6:	466b      	mov	r3, sp
   196a8:	464a      	mov	r2, r9
   196aa:	4601      	mov	r1, r0
   196ac:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   196ae:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   196b2:	f00e fdbc 	bl	2822e <bt_gatt_foreach_attr>
		if (data.err) {
   196b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196ba:	2b00      	cmp	r3, #0
   196bc:	d0e8      	beq.n	19690 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   196be:	9b02      	ldr	r3, [sp, #8]
   196c0:	6958      	ldr	r0, [r3, #20]
   196c2:	f7ff f937 	bl	18934 <tx_meta_data_free>
			net_buf_unref(data.buf);
   196c6:	9802      	ldr	r0, [sp, #8]
   196c8:	f004 f844 	bl	1d754 <net_buf_unref>
	if (!req) {
   196cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196d0:	4632      	mov	r2, r6
   196d2:	2120      	movs	r1, #32
   196d4:	4620      	mov	r0, r4
   196d6:	f00f f8dc 	bl	28892 <send_err_rsp.part.0>
	return 0;
   196da:	2000      	movs	r0, #0
   196dc:	e7c2      	b.n	19664 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   196de:	200e      	movs	r0, #14
   196e0:	e7c0      	b.n	19664 <att_read_mult_vl_req+0x28>
   196e2:	bf00      	nop
   196e4:	0002860b 	.word	0x0002860b

000196e8 <att_read_mult_req>:
{
   196e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   196ec:	6846      	ldr	r6, [r0, #4]
{
   196ee:	b085      	sub	sp, #20
   196f0:	4604      	mov	r4, r0
   196f2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   196f4:	4630      	mov	r0, r6
   196f6:	2101      	movs	r1, #1
   196f8:	f00f fd68 	bl	291cc <bt_gatt_change_aware>
   196fc:	b958      	cbnz	r0, 19716 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   196fe:	2105      	movs	r1, #5
   19700:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19704:	f00e feb7 	bl	28476 <atomic_test_and_set_bit>
			return 0;
   19708:	2800      	cmp	r0, #0
   1970a:	bf0c      	ite	eq
   1970c:	2012      	moveq	r0, #18
   1970e:	2000      	movne	r0, #0
}
   19710:	b005      	add	sp, #20
   19712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19716:	2210      	movs	r2, #16
   19718:	2100      	movs	r1, #0
   1971a:	4668      	mov	r0, sp
   1971c:	f00e f892 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19720:	2200      	movs	r2, #0
   19722:	210f      	movs	r1, #15
   19724:	4630      	mov	r0, r6
   19726:	f7ff fdbd 	bl	192a4 <bt_att_create_pdu>
   1972a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1972c:	b368      	cbz	r0, 1978a <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1972e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19790 <att_read_mult_req+0xa8>
	data.chan = chan;
   19732:	9400      	str	r4, [sp, #0]
   19734:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19738:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1973c:	89ab      	ldrh	r3, [r5, #12]
   1973e:	2b01      	cmp	r3, #1
   19740:	d804      	bhi.n	1974c <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19742:	9902      	ldr	r1, [sp, #8]
   19744:	4620      	mov	r0, r4
   19746:	f00e fe70 	bl	2842a <bt_att_chan_send_rsp>
   1974a:	e01c      	b.n	19786 <att_read_mult_req+0x9e>
   1974c:	4638      	mov	r0, r7
   1974e:	f010 fa83 	bl	29c58 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19752:	466b      	mov	r3, sp
   19754:	464a      	mov	r2, r9
   19756:	4601      	mov	r1, r0
   19758:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1975a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1975e:	f00e fd66 	bl	2822e <bt_gatt_foreach_attr>
		if (data.err) {
   19762:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19766:	2b00      	cmp	r3, #0
   19768:	d0e8      	beq.n	1973c <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1976a:	9b02      	ldr	r3, [sp, #8]
   1976c:	6958      	ldr	r0, [r3, #20]
   1976e:	f7ff f8e1 	bl	18934 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19772:	9802      	ldr	r0, [sp, #8]
   19774:	f003 ffee 	bl	1d754 <net_buf_unref>
	if (!req) {
   19778:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1977c:	4632      	mov	r2, r6
   1977e:	210e      	movs	r1, #14
   19780:	4620      	mov	r0, r4
   19782:	f00f f886 	bl	28892 <send_err_rsp.part.0>
	return 0;
   19786:	2000      	movs	r0, #0
   19788:	e7c2      	b.n	19710 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1978a:	200e      	movs	r0, #14
   1978c:	e7c0      	b.n	19710 <att_read_mult_req+0x28>
   1978e:	bf00      	nop
   19790:	000285b7 	.word	0x000285b7

00019794 <att_read_rsp>:
{
   19794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19798:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1979c:	4604      	mov	r4, r0
   1979e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   197a0:	4640      	mov	r0, r8
   197a2:	2101      	movs	r1, #1
{
   197a4:	4615      	mov	r5, r2
   197a6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   197a8:	f00f fd10 	bl	291cc <bt_gatt_change_aware>
   197ac:	b960      	cbnz	r0, 197c8 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   197ae:	2105      	movs	r1, #5
   197b0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   197b4:	f00e fe5f 	bl	28476 <atomic_test_and_set_bit>
			return 0;
   197b8:	2800      	cmp	r0, #0
   197ba:	bf0c      	ite	eq
   197bc:	2512      	moveq	r5, #18
   197be:	2500      	movne	r5, #0
}
   197c0:	4628      	mov	r0, r5
   197c2:	b004      	add	sp, #16
   197c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   197c8:	b38e      	cbz	r6, 1982e <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   197ca:	2210      	movs	r2, #16
   197cc:	2100      	movs	r1, #0
   197ce:	4668      	mov	r0, sp
   197d0:	f00e f838 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   197d4:	2200      	movs	r2, #0
   197d6:	4629      	mov	r1, r5
   197d8:	4640      	mov	r0, r8
   197da:	f7ff fd63 	bl	192a4 <bt_att_create_pdu>
   197de:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   197e0:	b338      	cbz	r0, 19832 <att_read_rsp+0x9e>
	data.offset = offset;
   197e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   197e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   197ea:	2301      	movs	r3, #1
   197ec:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   197f0:	4a11      	ldr	r2, [pc, #68]	; (19838 <att_read_rsp+0xa4>)
	data.chan = chan;
   197f2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   197f4:	466b      	mov	r3, sp
   197f6:	4631      	mov	r1, r6
   197f8:	4630      	mov	r0, r6
   197fa:	f00e fd18 	bl	2822e <bt_gatt_foreach_attr>
	if (data.err) {
   197fe:	f89d 500c 	ldrb.w	r5, [sp, #12]
   19802:	b17d      	cbz	r5, 19824 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19804:	9b02      	ldr	r3, [sp, #8]
   19806:	6958      	ldr	r0, [r3, #20]
   19808:	f7ff f894 	bl	18934 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1980c:	9802      	ldr	r0, [sp, #8]
   1980e:	f003 ffa1 	bl	1d754 <net_buf_unref>
	if (!req) {
   19812:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19816:	4632      	mov	r2, r6
   19818:	4639      	mov	r1, r7
   1981a:	4620      	mov	r0, r4
   1981c:	f00f f839 	bl	28892 <send_err_rsp.part.0>
		return 0;
   19820:	2500      	movs	r5, #0
   19822:	e7cd      	b.n	197c0 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   19824:	9902      	ldr	r1, [sp, #8]
   19826:	4620      	mov	r0, r4
   19828:	f00e fdff 	bl	2842a <bt_att_chan_send_rsp>
	return 0;
   1982c:	e7c8      	b.n	197c0 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1982e:	2501      	movs	r5, #1
   19830:	e7c6      	b.n	197c0 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   19832:	250e      	movs	r5, #14
   19834:	e7c4      	b.n	197c0 <att_read_rsp+0x2c>
   19836:	bf00      	nop
   19838:	000285b7 	.word	0x000285b7

0001983c <att_read_type_req>:
{
   1983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19840:	898c      	ldrh	r4, [r1, #12]
   19842:	3c04      	subs	r4, #4
   19844:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19846:	2c02      	cmp	r4, #2
{
   19848:	4605      	mov	r5, r0
   1984a:	b08c      	sub	sp, #48	; 0x30
   1984c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1984e:	d001      	beq.n	19854 <att_read_type_req+0x18>
   19850:	2c10      	cmp	r4, #16
   19852:	d153      	bne.n	198fc <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   19854:	2104      	movs	r1, #4
   19856:	3008      	adds	r0, #8
   19858:	f010 f9ee 	bl	29c38 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1985c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19860:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19862:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19864:	1d01      	adds	r1, r0, #4
   19866:	4622      	mov	r2, r4
   19868:	4640      	mov	r0, r8
   1986a:	f00e f8a7 	bl	279bc <bt_uuid_create>
   1986e:	b188      	cbz	r0, 19894 <att_read_type_req+0x58>
	if (!start || !end) {
   19870:	b19e      	cbz	r6, 1989a <att_read_type_req+0x5e>
   19872:	b18f      	cbz	r7, 19898 <att_read_type_req+0x5c>
	if (start > end) {
   19874:	42b7      	cmp	r7, r6
   19876:	d310      	bcc.n	1989a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19878:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1987a:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1987c:	2100      	movs	r1, #0
   1987e:	eb0d 0002 	add.w	r0, sp, r2
   19882:	f00d ffdf 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19886:	2201      	movs	r2, #1
   19888:	2109      	movs	r1, #9
   1988a:	4620      	mov	r0, r4
   1988c:	f7ff fd0a 	bl	192a4 <bt_att_create_pdu>
   19890:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19892:	b968      	cbnz	r0, 198b0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19894:	240e      	movs	r4, #14
   19896:	e007      	b.n	198a8 <att_read_type_req+0x6c>
			*err = 0U;
   19898:	463e      	mov	r6, r7
	if (!req) {
   1989a:	2301      	movs	r3, #1
   1989c:	4632      	mov	r2, r6
   1989e:	2108      	movs	r1, #8
   198a0:	4628      	mov	r0, r5
   198a2:	f00e fff6 	bl	28892 <send_err_rsp.part.0>
		return 0;
   198a6:	2400      	movs	r4, #0
}
   198a8:	4620      	mov	r0, r4
   198aa:	b00c      	add	sp, #48	; 0x30
   198ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   198b0:	2101      	movs	r1, #1
   198b2:	3008      	adds	r0, #8
	data.uuid = uuid;
   198b4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   198b8:	f010 f997 	bl	29bea <net_buf_simple_add>
	data.rsp->len = 0U;
   198bc:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   198c0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   198c2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   198c4:	4a0e      	ldr	r2, [pc, #56]	; (19900 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   198c6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   198ca:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   198cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   198d0:	4630      	mov	r0, r6
   198d2:	ab06      	add	r3, sp, #24
   198d4:	f00e fcab 	bl	2822e <bt_gatt_foreach_attr>
	if (data.err) {
   198d8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   198dc:	b14c      	cbz	r4, 198f2 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   198de:	9b08      	ldr	r3, [sp, #32]
   198e0:	6958      	ldr	r0, [r3, #20]
   198e2:	f7ff f827 	bl	18934 <tx_meta_data_free>
		net_buf_unref(data.buf);
   198e6:	9808      	ldr	r0, [sp, #32]
   198e8:	f003 ff34 	bl	1d754 <net_buf_unref>
	if (!req) {
   198ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   198f0:	e7d4      	b.n	1989c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   198f2:	9908      	ldr	r1, [sp, #32]
   198f4:	4628      	mov	r0, r5
   198f6:	f00e fd98 	bl	2842a <bt_att_chan_send_rsp>
	return 0;
   198fa:	e7d5      	b.n	198a8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   198fc:	2404      	movs	r4, #4
   198fe:	e7d3      	b.n	198a8 <att_read_type_req+0x6c>
   19900:	00018df1 	.word	0x00018df1

00019904 <att_find_type_req>:
{
   19904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19908:	4688      	mov	r8, r1
   1990a:	b086      	sub	sp, #24
   1990c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1990e:	2106      	movs	r1, #6
   19910:	f108 0008 	add.w	r0, r8, #8
   19914:	f010 f990 	bl	29c38 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19918:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1991a:	b317      	cbz	r7, 19962 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1991c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19920:	f1b9 0f00 	cmp.w	r9, #0
   19924:	d01c      	beq.n	19960 <att_find_type_req+0x5c>
	if (start > end) {
   19926:	454f      	cmp	r7, r9
   19928:	d81b      	bhi.n	19962 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1992a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1992c:	f8ad 3002 	strh.w	r3, [sp, #2]
   19930:	2400      	movs	r4, #0
   19932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19936:	a901      	add	r1, sp, #4
   19938:	4668      	mov	r0, sp
	value = buf->data;
   1993a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1993e:	f88d 4000 	strb.w	r4, [sp]
   19942:	f88d 4004 	strb.w	r4, [sp, #4]
   19946:	f8ad 3006 	strh.w	r3, [sp, #6]
   1994a:	f00e f809 	bl	27960 <bt_uuid_cmp>
   1994e:	4606      	mov	r6, r0
   19950:	b190      	cbz	r0, 19978 <att_find_type_req+0x74>
	if (!req) {
   19952:	230a      	movs	r3, #10
   19954:	463a      	mov	r2, r7
   19956:	2106      	movs	r1, #6
   19958:	4628      	mov	r0, r5
   1995a:	f00e ff9a 	bl	28892 <send_err_rsp.part.0>
		return 0;
   1995e:	e007      	b.n	19970 <att_find_type_req+0x6c>
			*err = 0U;
   19960:	464f      	mov	r7, r9
	if (!req) {
   19962:	2301      	movs	r3, #1
   19964:	463a      	mov	r2, r7
   19966:	2106      	movs	r1, #6
   19968:	4628      	mov	r0, r5
   1996a:	f00e ff92 	bl	28892 <send_err_rsp.part.0>
		return 0;
   1996e:	2400      	movs	r4, #0
}
   19970:	4620      	mov	r0, r4
   19972:	b006      	add	sp, #24
   19974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19978:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1997c:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19980:	4601      	mov	r1, r0
   19982:	2214      	movs	r2, #20
   19984:	a801      	add	r0, sp, #4
   19986:	f00d ff5d 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1998a:	4632      	mov	r2, r6
   1998c:	2107      	movs	r1, #7
   1998e:	4640      	mov	r0, r8
   19990:	f7ff fc88 	bl	192a4 <bt_att_create_pdu>
   19994:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19996:	b1f8      	cbz	r0, 199d8 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19998:	230a      	movs	r3, #10
   1999a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1999e:	4a0f      	ldr	r2, [pc, #60]	; (199dc <att_find_type_req+0xd8>)
	data.value_len = value_len;
   199a0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   199a4:	ab01      	add	r3, sp, #4
   199a6:	4649      	mov	r1, r9
   199a8:	4638      	mov	r0, r7
	data.value = value;
   199aa:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   199ae:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   199b0:	f00e fc3d 	bl	2822e <bt_gatt_foreach_attr>
	if (data.err) {
   199b4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   199b8:	b14c      	cbz	r4, 199ce <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   199ba:	9b02      	ldr	r3, [sp, #8]
   199bc:	6958      	ldr	r0, [r3, #20]
   199be:	f7fe ffb9 	bl	18934 <tx_meta_data_free>
		net_buf_unref(data.buf);
   199c2:	9802      	ldr	r0, [sp, #8]
   199c4:	f003 fec6 	bl	1d754 <net_buf_unref>
	if (!req) {
   199c8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   199cc:	e7ca      	b.n	19964 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   199ce:	9902      	ldr	r1, [sp, #8]
   199d0:	4628      	mov	r0, r5
   199d2:	f00e fd2a 	bl	2842a <bt_att_chan_send_rsp>
	return 0;
   199d6:	e7cb      	b.n	19970 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   199d8:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   199da:	e7c9      	b.n	19970 <att_find_type_req+0x6c>
   199dc:	00018951 	.word	0x00018951

000199e0 <att_find_info_req>:
{
   199e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   199e2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   199e4:	881e      	ldrh	r6, [r3, #0]
{
   199e6:	b085      	sub	sp, #20
   199e8:	4605      	mov	r5, r0
	if (!start || !end) {
   199ea:	b19e      	cbz	r6, 19a14 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   199ec:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   199ee:	b184      	cbz	r4, 19a12 <att_find_info_req+0x32>
	if (start > end) {
   199f0:	42a6      	cmp	r6, r4
   199f2:	d80f      	bhi.n	19a14 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   199f4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   199f6:	2210      	movs	r2, #16
   199f8:	2100      	movs	r1, #0
   199fa:	4668      	mov	r0, sp
   199fc:	f00d ff22 	bl	27844 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19a00:	2200      	movs	r2, #0
   19a02:	2105      	movs	r1, #5
   19a04:	4638      	mov	r0, r7
   19a06:	f7ff fc4d 	bl	192a4 <bt_att_create_pdu>
   19a0a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19a0c:	b958      	cbnz	r0, 19a26 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19a0e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19a10:	e007      	b.n	19a22 <att_find_info_req+0x42>
			*err = 0U;
   19a12:	4626      	mov	r6, r4
	if (!req) {
   19a14:	2301      	movs	r3, #1
   19a16:	4632      	mov	r2, r6
   19a18:	2104      	movs	r1, #4
   19a1a:	4628      	mov	r0, r5
   19a1c:	f00e ff39 	bl	28892 <send_err_rsp.part.0>
	return 0;
   19a20:	2000      	movs	r0, #0
}
   19a22:	b005      	add	sp, #20
   19a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19a26:	4621      	mov	r1, r4
   19a28:	4a0a      	ldr	r2, [pc, #40]	; (19a54 <att_find_info_req+0x74>)
	data.chan = chan;
   19a2a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19a2c:	466b      	mov	r3, sp
   19a2e:	4630      	mov	r0, r6
   19a30:	f00e fbfd 	bl	2822e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19a34:	9c02      	ldr	r4, [sp, #8]
   19a36:	b944      	cbnz	r4, 19a4a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19a38:	9b01      	ldr	r3, [sp, #4]
   19a3a:	6958      	ldr	r0, [r3, #20]
   19a3c:	f7fe ff7a 	bl	18934 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19a40:	9801      	ldr	r0, [sp, #4]
   19a42:	f003 fe87 	bl	1d754 <net_buf_unref>
	if (!req) {
   19a46:	230a      	movs	r3, #10
   19a48:	e7e5      	b.n	19a16 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   19a4a:	9901      	ldr	r1, [sp, #4]
   19a4c:	4628      	mov	r0, r5
   19a4e:	f00e fcec 	bl	2842a <bt_att_chan_send_rsp>
   19a52:	e7e5      	b.n	19a20 <att_find_info_req+0x40>
   19a54:	00028245 	.word	0x00028245

00019a58 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   19a58:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   19a5a:	4d0a      	ldr	r5, [pc, #40]	; (19a84 <bt_att_init+0x2c>)
   19a5c:	4c0a      	ldr	r4, [pc, #40]	; (19a88 <bt_att_init+0x30>)
   19a5e:	4629      	mov	r1, r5
   19a60:	4620      	mov	r0, r4
   19a62:	f010 fec7 	bl	2a7f4 <k_queue_append>
   19a66:	f105 0114 	add.w	r1, r5, #20
   19a6a:	4620      	mov	r0, r4
   19a6c:	f010 fec2 	bl	2a7f4 <k_queue_append>
   19a70:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19a74:	4620      	mov	r0, r4
   19a76:	f010 febd 	bl	2a7f4 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   19a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   19a7e:	f000 bde3 	b.w	1a648 <bt_gatt_init>
   19a82:	bf00      	nop
   19a84:	20002de8 	.word	0x20002de8
   19a88:	20000ac8 	.word	0x20000ac8

00019a8c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   19a8e:	2300      	movs	r3, #0
{
   19a90:	4605      	mov	r5, r0
   19a92:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19a94:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   19a96:	f008 fb95 	bl	221c4 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   19a9a:	4b0b      	ldr	r3, [pc, #44]	; (19ac8 <bt_att_req_alloc+0x3c>)
   19a9c:	681b      	ldr	r3, [r3, #0]
   19a9e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   19aa0:	bf04      	itt	eq
   19aa2:	2500      	moveq	r5, #0
   19aa4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19aa6:	a901      	add	r1, sp, #4
   19aa8:	4808      	ldr	r0, [pc, #32]	; (19acc <bt_att_req_alloc+0x40>)
   19aaa:	462a      	mov	r2, r5
   19aac:	4623      	mov	r3, r4
   19aae:	f007 fc63 	bl	21378 <k_mem_slab_alloc>
   19ab2:	4601      	mov	r1, r0
   19ab4:	b930      	cbnz	r0, 19ac4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19ab6:	9801      	ldr	r0, [sp, #4]
   19ab8:	221c      	movs	r2, #28
   19aba:	f00d fec3 	bl	27844 <memset>

	return req;
   19abe:	9801      	ldr	r0, [sp, #4]
}
   19ac0:	b003      	add	sp, #12
   19ac2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19ac4:	2000      	movs	r0, #0
   19ac6:	e7fb      	b.n	19ac0 <bt_att_req_alloc+0x34>
   19ac8:	20002dc8 	.word	0x20002dc8
   19acc:	200009f0 	.word	0x200009f0

00019ad0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19ad0:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   19ad2:	6883      	ldr	r3, [r0, #8]
{
   19ad4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   19ad6:	b14b      	cbz	r3, 19aec <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   19ad8:	6958      	ldr	r0, [r3, #20]
   19ada:	f7fe ff2b 	bl	18934 <tx_meta_data_free>
		net_buf_unref(req->buf);
   19ade:	9b01      	ldr	r3, [sp, #4]
   19ae0:	6898      	ldr	r0, [r3, #8]
   19ae2:	f003 fe37 	bl	1d754 <net_buf_unref>
		req->buf = NULL;
   19ae6:	9b01      	ldr	r3, [sp, #4]
   19ae8:	2200      	movs	r2, #0
   19aea:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19aec:	4803      	ldr	r0, [pc, #12]	; (19afc <bt_att_req_free+0x2c>)
   19aee:	a901      	add	r1, sp, #4
   19af0:	f010 fdb8 	bl	2a664 <k_mem_slab_free>
}
   19af4:	b003      	add	sp, #12
   19af6:	f85d fb04 	ldr.w	pc, [sp], #4
   19afa:	bf00      	nop
   19afc:	200009f0 	.word	0x200009f0

00019b00 <att_handle_rsp>:
{
   19b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b04:	4604      	mov	r4, r0
   19b06:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
   19b08:	30b0      	adds	r0, #176	; 0xb0
{
   19b0a:	4689      	mov	r9, r1
   19b0c:	4692      	mov	sl, r2
   19b0e:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19b10:	f010 ff93 	bl	2aa3a <k_work_cancel_delayable>
	if (!chan->req) {
   19b14:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   19b18:	b9d5      	cbnz	r5, 19b50 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
   19b1a:	4b17      	ldr	r3, [pc, #92]	; (19b78 <att_handle_rsp+0x78>)
   19b1c:	9307      	str	r3, [sp, #28]
   19b1e:	4817      	ldr	r0, [pc, #92]	; (19b7c <att_handle_rsp+0x7c>)
   19b20:	2302      	movs	r3, #2
   19b22:	aa06      	add	r2, sp, #24
   19b24:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   19b28:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
   19b2a:	9306      	str	r3, [sp, #24]
   19b2c:	f00e fc47 	bl	283be <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   19b30:	6820      	ldr	r0, [r4, #0]
   19b32:	f00e fdd8 	bl	286e6 <att_req_send_process>
	if (func) {
   19b36:	b13e      	cbz	r6, 19b48 <att_handle_rsp+0x48>
		func(chan->att->conn, err, pdu, len, params);
   19b38:	6820      	ldr	r0, [r4, #0]
   19b3a:	f8cd b000 	str.w	fp, [sp]
   19b3e:	6800      	ldr	r0, [r0, #0]
   19b40:	4653      	mov	r3, sl
   19b42:	464a      	mov	r2, r9
   19b44:	4641      	mov	r1, r8
   19b46:	47b0      	blx	r6
}
   19b48:	2000      	movs	r0, #0
   19b4a:	b009      	add	sp, #36	; 0x24
   19b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19b50:	4b0b      	ldr	r3, [pc, #44]	; (19b80 <att_handle_rsp+0x80>)
   19b52:	429d      	cmp	r5, r3
   19b54:	f04f 0700 	mov.w	r7, #0
   19b58:	d103      	bne.n	19b62 <att_handle_rsp+0x62>
		chan->req = NULL;
   19b5a:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   19b5e:	463e      	mov	r6, r7
		goto process;
   19b60:	e7e6      	b.n	19b30 <att_handle_rsp+0x30>
	func = chan->req->func;
   19b62:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19b64:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   19b66:	4628      	mov	r0, r5
	params = chan->req->user_data;
   19b68:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19b6c:	f7ff ffb0 	bl	19ad0 <bt_att_req_free>
	chan->req = NULL;
   19b70:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
   19b74:	e7dc      	b.n	19b30 <att_handle_rsp+0x30>
   19b76:	bf00      	nop
   19b78:	0002dd10 	.word	0x0002dd10
   19b7c:	0002b4cc 	.word	0x0002b4cc
   19b80:	20002dcc 	.word	0x20002dcc

00019b84 <bt_att_disconnected>:
{
   19b84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19b88:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19b8c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19b8e:	2e00      	cmp	r6, #0
   19b90:	d063      	beq.n	19c5a <bt_att_disconnected+0xd6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19b92:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   19b96:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   19b9a:	f00e fc54 	bl	28446 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19b9e:	1f27      	subs	r7, r4, #4
   19ba0:	f104 0894 	add.w	r8, r4, #148	; 0x94
   19ba4:	2200      	movs	r2, #0
   19ba6:	2300      	movs	r3, #0
   19ba8:	4640      	mov	r0, r8
   19baa:	f00f ff7e 	bl	29aaa <net_buf_get>
   19bae:	4605      	mov	r5, r0
   19bb0:	bb58      	cbnz	r0, 19c0a <bt_att_disconnected+0x86>
	if (chan->req) {
   19bb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   19bb6:	b12b      	cbz	r3, 19bc4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19bb8:	4602      	mov	r2, r0
   19bba:	4601      	mov	r1, r0
   19bbc:	230e      	movs	r3, #14
   19bbe:	4638      	mov	r0, r7
   19bc0:	f7ff ff9e 	bl	19b00 <att_handle_rsp>
	chan->att = NULL;
   19bc4:	2300      	movs	r3, #0
   19bc6:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   19bca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   19bcc:	2b00      	cmp	r3, #0
   19bce:	d144      	bne.n	19c5a <bt_att_disconnected+0xd6>
	att_reset(att);
   19bd0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   19bd2:	9803      	ldr	r0, [sp, #12]
   19bd4:	3024      	adds	r0, #36	; 0x24
   19bd6:	f00f ffaa 	bl	29b2e <net_buf_slist_get>
   19bda:	4605      	mov	r5, r0
   19bdc:	b9e0      	cbnz	r0, 19c18 <bt_att_disconnected+0x94>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19bde:	9803      	ldr	r0, [sp, #12]
   19be0:	2200      	movs	r2, #0
   19be2:	2300      	movs	r3, #0
   19be4:	300c      	adds	r0, #12
   19be6:	f00f ff60 	bl	29aaa <net_buf_get>
   19bea:	4605      	mov	r5, r0
   19bec:	b9d8      	cbnz	r0, 19c26 <bt_att_disconnected+0xa2>
	while (!sys_slist_is_empty(&att->reqs)) {
   19bee:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19bf0:	6845      	ldr	r5, [r0, #4]
   19bf2:	b9fd      	cbnz	r5, 19c34 <bt_att_disconnected+0xb0>
	att->conn = NULL;
   19bf4:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   19bf6:	a903      	add	r1, sp, #12
   19bf8:	4819      	ldr	r0, [pc, #100]	; (19c60 <bt_att_disconnected+0xdc>)
   19bfa:	f010 fd33 	bl	2a664 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   19bfe:	6820      	ldr	r0, [r4, #0]
}
   19c00:	b004      	add	sp, #16
   19c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   19c06:	f001 bb71 	b.w	1b2ec <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19c0a:	6968      	ldr	r0, [r5, #20]
   19c0c:	f7fe fe92 	bl	18934 <tx_meta_data_free>
		net_buf_unref(buf);
   19c10:	4628      	mov	r0, r5
   19c12:	f003 fd9f 	bl	1d754 <net_buf_unref>
   19c16:	e7c5      	b.n	19ba4 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19c18:	6968      	ldr	r0, [r5, #20]
   19c1a:	f7fe fe8b 	bl	18934 <tx_meta_data_free>
		net_buf_unref(buf);
   19c1e:	4628      	mov	r0, r5
   19c20:	f003 fd98 	bl	1d754 <net_buf_unref>
   19c24:	e7d5      	b.n	19bd2 <bt_att_disconnected+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19c26:	6968      	ldr	r0, [r5, #20]
   19c28:	f7fe fe84 	bl	18934 <tx_meta_data_free>
		net_buf_unref(buf);
   19c2c:	4628      	mov	r0, r5
   19c2e:	f003 fd91 	bl	1d754 <net_buf_unref>
   19c32:	e7d4      	b.n	19bde <bt_att_disconnected+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19c34:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   19c36:	686e      	ldr	r6, [r5, #4]
	return node->next;
   19c38:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19c3a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19c3c:	4295      	cmp	r5, r2
	list->tail = node;
   19c3e:	bf08      	it	eq
   19c40:	6083      	streq	r3, [r0, #8]
   19c42:	b136      	cbz	r6, 19c52 <bt_att_disconnected+0xce>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19c44:	69ab      	ldr	r3, [r5, #24]
   19c46:	9300      	str	r3, [sp, #0]
   19c48:	2300      	movs	r3, #0
   19c4a:	6800      	ldr	r0, [r0, #0]
   19c4c:	461a      	mov	r2, r3
   19c4e:	210e      	movs	r1, #14
   19c50:	47b0      	blx	r6
		bt_att_req_free(req);
   19c52:	4628      	mov	r0, r5
   19c54:	f7ff ff3c 	bl	19ad0 <bt_att_req_free>
   19c58:	e7c9      	b.n	19bee <bt_att_disconnected+0x6a>
}
   19c5a:	b004      	add	sp, #16
   19c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c60:	200009b8 	.word	0x200009b8

00019c64 <att_timeout>:
{
   19c64:	b510      	push	{r4, lr}
   19c66:	4604      	mov	r4, r0
   19c68:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   19c6a:	4b08      	ldr	r3, [pc, #32]	; (19c8c <att_timeout+0x28>)
   19c6c:	9305      	str	r3, [sp, #20]
   19c6e:	4808      	ldr	r0, [pc, #32]	; (19c90 <att_timeout+0x2c>)
   19c70:	2302      	movs	r3, #2
   19c72:	aa04      	add	r2, sp, #16
   19c74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c78:	9304      	str	r3, [sp, #16]
   19c7a:	f00e fba0 	bl	283be <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   19c7e:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   19c82:	b006      	add	sp, #24
   19c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19c88:	f7ff bf7c 	b.w	19b84 <bt_att_disconnected>
   19c8c:	0002dd27 	.word	0x0002dd27
   19c90:	0002b4cc 	.word	0x0002b4cc

00019c94 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   19c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19c96:	4d0f      	ldr	r5, [pc, #60]	; (19cd4 <find_cf_cfg+0x40>)
   19c98:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19c9a:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19c9c:	462e      	mov	r6, r5

		if (!conn) {
   19c9e:	1c68      	adds	r0, r5, #1
   19ca0:	b964      	cbnz	r4, 19cbc <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   19ca2:	2207      	movs	r2, #7
   19ca4:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19ca6:	9400      	str	r4, [sp, #0]
   19ca8:	f8cd 4003 	str.w	r4, [sp, #3]
   19cac:	f00d fd96 	bl	277dc <memcmp>
   19cb0:	b958      	cbnz	r0, 19cca <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
   19cb2:	4630      	mov	r0, r6
   19cb4:	b003      	add	sp, #12
   19cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cb8:	2701      	movs	r7, #1
   19cba:	e7ef      	b.n	19c9c <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19cbc:	4602      	mov	r2, r0
   19cbe:	7829      	ldrb	r1, [r5, #0]
   19cc0:	4620      	mov	r0, r4
   19cc2:	f00e f970 	bl	27fa6 <bt_conn_is_peer_addr_le>
   19cc6:	2800      	cmp	r0, #0
   19cc8:	d1f3      	bne.n	19cb2 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19cca:	3510      	adds	r5, #16
   19ccc:	2f00      	cmp	r7, #0
   19cce:	d0f3      	beq.n	19cb8 <find_cf_cfg+0x24>
	return NULL;
   19cd0:	2600      	movs	r6, #0
   19cd2:	e7ee      	b.n	19cb2 <find_cf_cfg+0x1e>
   19cd4:	20002e2c 	.word	0x20002e2c

00019cd8 <ccc_set_direct.part.0>:
	return ccc_set(name, len_rd, read_cb, cb_arg);
}

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set_cb, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   19cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

		BT_DBG("key: %s", (const char *)param);

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
			BT_ERR("Invalid key");
   19cda:	4b07      	ldr	r3, [pc, #28]	; (19cf8 <ccc_set_direct.part.0+0x20>)
   19cdc:	9305      	str	r3, [sp, #20]
   19cde:	4807      	ldr	r0, [pc, #28]	; (19cfc <ccc_set_direct.part.0+0x24>)
   19ce0:	2302      	movs	r3, #2
   19ce2:	aa04      	add	r2, sp, #16
   19ce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19ce8:	9304      	str	r3, [sp, #16]
   19cea:	f00f f801 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
   19cee:	f06f 0015 	mvn.w	r0, #21
   19cf2:	b007      	add	sp, #28
   19cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   19cf8:	0002dd3a 	.word	0x0002dd3a
   19cfc:	0002b4fc 	.word	0x0002b4fc

00019d00 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   19d00:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d02:	2108      	movs	r1, #8
   19d04:	af00      	add	r7, sp, #0
   19d06:	480f      	ldr	r0, [pc, #60]	; (19d44 <db_hash_commit+0x44>)
   19d08:	f00e ffd4 	bl	28cb4 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   19d0c:	480e      	ldr	r0, [pc, #56]	; (19d48 <db_hash_commit+0x48>)
   19d0e:	2200      	movs	r2, #0
   19d10:	2300      	movs	r3, #0
   19d12:	f7fb fd59 	bl	157c8 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   19d16:	1e04      	subs	r4, r0, #0
   19d18:	da11      	bge.n	19d3e <db_hash_commit+0x3e>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   19d1a:	466d      	mov	r5, sp
   19d1c:	b088      	sub	sp, #32
   19d1e:	466a      	mov	r2, sp
   19d20:	4b0a      	ldr	r3, [pc, #40]	; (19d4c <db_hash_commit+0x4c>)
   19d22:	480b      	ldr	r0, [pc, #44]	; (19d50 <db_hash_commit+0x50>)
   19d24:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19d28:	2303      	movs	r3, #3
   19d2a:	f842 3f10 	str.w	r3, [r2, #16]!
   19d2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19d32:	f00e ffdd 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   19d36:	46ad      	mov	sp, r5
	}

	return err;
}
   19d38:	4620      	mov	r0, r4
   19d3a:	46bd      	mov	sp, r7
   19d3c:	bdb0      	pop	{r4, r5, r7, pc}
	if (err) {
   19d3e:	2400      	movs	r4, #0
	return err;
   19d40:	e7fa      	b.n	19d38 <db_hash_commit+0x38>
   19d42:	bf00      	nop
   19d44:	200020a8 	.word	0x200020a8
   19d48:	20001fc8 	.word	0x20001fc8
   19d4c:	0002dd46 	.word	0x0002dd46
   19d50:	0002b4fc 	.word	0x0002b4fc

00019d54 <sc_store>:
{
   19d54:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   19d56:	4605      	mov	r5, r0
{
   19d58:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19d5a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19d5e:	af02      	add	r7, sp, #8
   19d60:	4604      	mov	r4, r0
	if (cfg->id) {
   19d62:	b31a      	cbz	r2, 19dac <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19d64:	2104      	movs	r1, #4
   19d66:	4638      	mov	r0, r7
   19d68:	f00c fb8c 	bl	26484 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19d6c:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   19d6e:	4a10      	ldr	r2, [pc, #64]	; (19db0 <sc_store+0x5c>)
   19d70:	2124      	movs	r1, #36	; 0x24
   19d72:	1d38      	adds	r0, r7, #4
   19d74:	462b      	mov	r3, r5
   19d76:	f7fb fc77 	bl	15668 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   19d7a:	2204      	movs	r2, #4
   19d7c:	f104 0108 	add.w	r1, r4, #8
   19d80:	18b8      	adds	r0, r7, r2
   19d82:	f7fa fa31 	bl	141e8 <settings_save_one>
	if (err) {
   19d86:	b170      	cbz	r0, 19da6 <sc_store+0x52>
		BT_ERR("failed to store SC (err %d)", err);
   19d88:	466c      	mov	r4, sp
   19d8a:	b088      	sub	sp, #32
   19d8c:	aa02      	add	r2, sp, #8
   19d8e:	4b09      	ldr	r3, [pc, #36]	; (19db4 <sc_store+0x60>)
   19d90:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19d94:	2303      	movs	r3, #3
   19d96:	f842 3f10 	str.w	r3, [r2, #16]!
   19d9a:	4807      	ldr	r0, [pc, #28]	; (19db8 <sc_store+0x64>)
   19d9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19da0:	f00e ffa6 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   19da4:	46a5      	mov	sp, r4
}
   19da6:	3728      	adds	r7, #40	; 0x28
   19da8:	46bd      	mov	sp, r7
   19daa:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19dac:	9200      	str	r2, [sp, #0]
   19dae:	e7de      	b.n	19d6e <sc_store+0x1a>
   19db0:	0002e06f 	.word	0x0002e06f
   19db4:	0002dd7a 	.word	0x0002dd7a
   19db8:	0002b4fc 	.word	0x0002b4fc

00019dbc <cf_write>:
{
   19dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19dc0:	b086      	sub	sp, #24
   19dc2:	4698      	mov	r8, r3
   19dc4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   19dc8:	2b01      	cmp	r3, #1
{
   19dca:	4606      	mov	r6, r0
   19dcc:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   19dce:	d83e      	bhi.n	19e4e <cf_write+0x92>
	if (offset + len > sizeof(cfg->data)) {
   19dd0:	4443      	add	r3, r8
   19dd2:	2b01      	cmp	r3, #1
   19dd4:	4645      	mov	r5, r8
   19dd6:	dc3d      	bgt.n	19e54 <cf_write+0x98>
	cfg = find_cf_cfg(conn);
   19dd8:	f7ff ff5c 	bl	19c94 <find_cf_cfg>
	if (!cfg) {
   19ddc:	4604      	mov	r4, r0
   19dde:	b918      	cbnz	r0, 19de8 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   19de0:	f7ff ff58 	bl	19c94 <find_cf_cfg>
	if (!cfg) {
   19de4:	4604      	mov	r4, r0
   19de6:	b180      	cbz	r0, 19e0a <cf_write+0x4e>
{
   19de8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19dea:	f1b8 0f00 	cmp.w	r8, #0
   19dee:	d11c      	bne.n	19e2a <cf_write+0x6e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19df0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19df4:	1c60      	adds	r0, r4, #1
   19df6:	f00e fecf 	bl	28b98 <bt_addr_le_copy>
	cfg->id = conn->id;
   19dfa:	4620      	mov	r0, r4
   19dfc:	7a33      	ldrb	r3, [r6, #8]
   19dfe:	f800 3b0c 	strb.w	r3, [r0], #12
   19e02:	2101      	movs	r1, #1
   19e04:	f00e ff56 	bl	28cb4 <atomic_or>
}
   19e08:	e00b      	b.n	19e22 <cf_write+0x66>
		BT_WARN("No space to store Client Supported Features");
   19e0a:	4b15      	ldr	r3, [pc, #84]	; (19e60 <cf_write+0xa4>)
   19e0c:	9305      	str	r3, [sp, #20]
   19e0e:	4815      	ldr	r0, [pc, #84]	; (19e64 <cf_write+0xa8>)
   19e10:	2302      	movs	r3, #2
   19e12:	aa04      	add	r2, sp, #16
   19e14:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19e18:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   19e1c:	9304      	str	r3, [sp, #16]
   19e1e:	f00e ff67 	bl	28cf0 <z_log_msg_static_create.constprop.0>
}
   19e22:	4628      	mov	r0, r5
   19e24:	b006      	add	sp, #24
   19e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19e2a:	7a20      	ldrb	r0, [r4, #8]
   19e2c:	fa20 f301 	lsr.w	r3, r0, r1
   19e30:	07da      	lsls	r2, r3, #31
   19e32:	d503      	bpl.n	19e3c <cf_write+0x80>
		    !(value[i / 8] & BIT(i % 8))) {
   19e34:	783b      	ldrb	r3, [r7, #0]
   19e36:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19e38:	07db      	lsls	r3, r3, #31
   19e3a:	d50e      	bpl.n	19e5a <cf_write+0x9e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19e3c:	3101      	adds	r1, #1
   19e3e:	2903      	cmp	r1, #3
   19e40:	d1d3      	bne.n	19dea <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19e42:	783b      	ldrb	r3, [r7, #0]
   19e44:	f003 0307 	and.w	r3, r3, #7
   19e48:	4318      	orrs	r0, r3
   19e4a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   19e4c:	e7d0      	b.n	19df0 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19e4e:	f06f 0506 	mvn.w	r5, #6
   19e52:	e7e6      	b.n	19e22 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19e54:	f06f 050c 	mvn.w	r5, #12
   19e58:	e7e3      	b.n	19e22 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19e5a:	f06f 0512 	mvn.w	r5, #18
   19e5e:	e7e0      	b.n	19e22 <cf_write+0x66>
   19e60:	0002dd96 	.word	0x0002dd96
   19e64:	0002b4fc 	.word	0x0002b4fc

00019e68 <db_hash_store>:
{
   19e68:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19e6a:	490c      	ldr	r1, [pc, #48]	; (19e9c <db_hash_store+0x34>)
   19e6c:	480c      	ldr	r0, [pc, #48]	; (19ea0 <db_hash_store+0x38>)
{
   19e6e:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19e70:	2210      	movs	r2, #16
   19e72:	f7fa f9b9 	bl	141e8 <settings_save_one>
	if (err) {
   19e76:	b170      	cbz	r0, 19e96 <db_hash_store+0x2e>
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19e78:	466c      	mov	r4, sp
   19e7a:	b088      	sub	sp, #32
   19e7c:	466a      	mov	r2, sp
   19e7e:	4b09      	ldr	r3, [pc, #36]	; (19ea4 <db_hash_store+0x3c>)
   19e80:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e84:	2303      	movs	r3, #3
   19e86:	f842 3f10 	str.w	r3, [r2, #16]!
   19e8a:	4807      	ldr	r0, [pc, #28]	; (19ea8 <db_hash_store+0x40>)
   19e8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19e90:	f00e ff2e 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   19e94:	46a5      	mov	sp, r4
}
   19e96:	46bd      	mov	sp, r7
   19e98:	bd98      	pop	{r3, r4, r7, pc}
   19e9a:	bf00      	nop
   19e9c:	20001fa8 	.word	0x20001fa8
   19ea0:	0002ddc2 	.word	0x0002ddc2
   19ea4:	0002ddca 	.word	0x0002ddca
   19ea8:	0002b4fc 	.word	0x0002b4fc

00019eac <db_hash_set>:
{
   19eac:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19eae:	490e      	ldr	r1, [pc, #56]	; (19ee8 <db_hash_set+0x3c>)
{
   19eb0:	4614      	mov	r4, r2
   19eb2:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19eb4:	2210      	movs	r2, #16
   19eb6:	4618      	mov	r0, r3
   19eb8:	47a0      	blx	r4
	if (len < 0) {
   19eba:	1e04      	subs	r4, r0, #0
   19ebc:	da11      	bge.n	19ee2 <db_hash_set+0x36>
		BT_ERR("Failed to decode value (err %zd)", len);
   19ebe:	466d      	mov	r5, sp
   19ec0:	b088      	sub	sp, #32
   19ec2:	466a      	mov	r2, sp
   19ec4:	4b09      	ldr	r3, [pc, #36]	; (19eec <db_hash_set+0x40>)
   19ec6:	480a      	ldr	r0, [pc, #40]	; (19ef0 <db_hash_set+0x44>)
   19ec8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19ecc:	2303      	movs	r3, #3
   19ece:	f842 3f10 	str.w	r3, [r2, #16]!
   19ed2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ed6:	f00e ff0b 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   19eda:	46ad      	mov	sp, r5
}
   19edc:	4620      	mov	r0, r4
   19ede:	46bd      	mov	sp, r7
   19ee0:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   19ee2:	2400      	movs	r4, #0
   19ee4:	e7fa      	b.n	19edc <db_hash_set+0x30>
   19ee6:	bf00      	nop
   19ee8:	20001fb8 	.word	0x20001fb8
   19eec:	0002ddf0 	.word	0x0002ddf0
   19ef0:	0002b4fc 	.word	0x0002b4fc

00019ef4 <sc_commit>:
{
   19ef4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ef6:	4809      	ldr	r0, [pc, #36]	; (19f1c <sc_commit+0x28>)
   19ef8:	f06f 0102 	mvn.w	r1, #2
   19efc:	f00e fee9 	bl	28cd2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19f00:	4806      	ldr	r0, [pc, #24]	; (19f1c <sc_commit+0x28>)
   19f02:	f00e fed1 	bl	28ca8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19f06:	07c3      	lsls	r3, r0, #31
   19f08:	d505      	bpl.n	19f16 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19f0a:	4805      	ldr	r0, [pc, #20]	; (19f20 <sc_commit+0x2c>)
   19f0c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19f10:	2300      	movs	r3, #0
   19f12:	f007 fe45 	bl	21ba0 <k_work_reschedule>
}
   19f16:	2000      	movs	r0, #0
   19f18:	bd08      	pop	{r3, pc}
   19f1a:	bf00      	nop
   19f1c:	200020a8 	.word	0x200020a8
   19f20:	20002078 	.word	0x20002078

00019f24 <find_cf_cfg_by_addr>:
{
   19f24:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   19f26:	4c0e      	ldr	r4, [pc, #56]	; (19f60 <find_cf_cfg_by_addr+0x3c>)
   19f28:	7823      	ldrb	r3, [r4, #0]
   19f2a:	4283      	cmp	r3, r0
{
   19f2c:	4606      	mov	r6, r0
   19f2e:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   19f30:	d00a      	beq.n	19f48 <find_cf_cfg_by_addr+0x24>
   19f32:	7c23      	ldrb	r3, [r4, #16]
   19f34:	42b3      	cmp	r3, r6
   19f36:	d111      	bne.n	19f5c <find_cf_cfg_by_addr+0x38>
   19f38:	490a      	ldr	r1, [pc, #40]	; (19f64 <find_cf_cfg_by_addr+0x40>)
   19f3a:	2207      	movs	r2, #7
   19f3c:	4628      	mov	r0, r5
   19f3e:	f00d fc4d 	bl	277dc <memcmp>
   19f42:	b958      	cbnz	r0, 19f5c <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19f44:	2001      	movs	r0, #1
   19f46:	e006      	b.n	19f56 <find_cf_cfg_by_addr+0x32>
   19f48:	2207      	movs	r2, #7
   19f4a:	1c61      	adds	r1, r4, #1
   19f4c:	4628      	mov	r0, r5
   19f4e:	f00d fc45 	bl	277dc <memcmp>
			if (id == cf_cfg[i].id &&
   19f52:	2800      	cmp	r0, #0
   19f54:	d1ed      	bne.n	19f32 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   19f56:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   19f5a:	e000      	b.n	19f5e <find_cf_cfg_by_addr+0x3a>
	return NULL;
   19f5c:	2000      	movs	r0, #0
}
   19f5e:	bd70      	pop	{r4, r5, r6, pc}
   19f60:	20002e2c 	.word	0x20002e2c
   19f64:	20002e3d 	.word	0x20002e3d

00019f68 <cf_set>:
{
   19f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f6c:	b08b      	sub	sp, #44	; 0x2c
   19f6e:	4689      	mov	r9, r1
   19f70:	af00      	add	r7, sp, #0
   19f72:	4616      	mov	r6, r2
   19f74:	4698      	mov	r8, r3
	if (!name) {
   19f76:	4605      	mov	r5, r0
   19f78:	b988      	cbnz	r0, 19f9e <cf_set+0x36>
		BT_ERR("Insufficient number of arguments");
   19f7a:	4b40      	ldr	r3, [pc, #256]	; (1a07c <cf_set+0x114>)
   19f7c:	627b      	str	r3, [r7, #36]	; 0x24
   19f7e:	4840      	ldr	r0, [pc, #256]	; (1a080 <cf_set+0x118>)
   19f80:	2302      	movs	r3, #2
   19f82:	f107 0220 	add.w	r2, r7, #32
   19f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19f8a:	623b      	str	r3, [r7, #32]
   19f8c:	f00e feb0 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19f90:	f06f 0415 	mvn.w	r4, #21
}
   19f94:	4620      	mov	r0, r4
   19f96:	372c      	adds	r7, #44	; 0x2c
   19f98:	46bd      	mov	sp, r7
   19f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   19f9e:	f107 0108 	add.w	r1, r7, #8
   19fa2:	f00d fcb9 	bl	27918 <bt_settings_decode_key>
	if (err) {
   19fa6:	4604      	mov	r4, r0
   19fa8:	b188      	cbz	r0, 19fce <cf_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   19faa:	466c      	mov	r4, sp
   19fac:	b088      	sub	sp, #32
   19fae:	466a      	mov	r2, sp
   19fb0:	4b34      	ldr	r3, [pc, #208]	; (1a084 <cf_set+0x11c>)
   19fb2:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19fb6:	2302      	movs	r3, #2
   19fb8:	7713      	strb	r3, [r2, #28]
   19fba:	4b33      	ldr	r3, [pc, #204]	; (1a088 <cf_set+0x120>)
   19fbc:	f842 3f10 	str.w	r3, [r2, #16]!
   19fc0:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19fc4:	482e      	ldr	r0, [pc, #184]	; (1a080 <cf_set+0x118>)
   19fc6:	f00e fe93 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   19fca:	46a5      	mov	sp, r4
   19fcc:	e7e0      	b.n	19f90 <cf_set+0x28>
	settings_name_next(name, &next);
   19fce:	1d39      	adds	r1, r7, #4
   19fd0:	4628      	mov	r0, r5
   19fd2:	f00d f8eb 	bl	271ac <settings_name_next>
	if (!next) {
   19fd6:	6878      	ldr	r0, [r7, #4]
   19fd8:	b180      	cbz	r0, 19ffc <cf_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   19fda:	220a      	movs	r2, #10
   19fdc:	4621      	mov	r1, r4
   19fde:	f00d fb3b 	bl	27658 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19fe2:	b158      	cbz	r0, 19ffc <cf_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   19fe4:	466c      	mov	r4, sp
   19fe6:	b088      	sub	sp, #32
   19fe8:	466a      	mov	r2, sp
   19fea:	4b28      	ldr	r3, [pc, #160]	; (1a08c <cf_set+0x124>)
   19fec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19ff0:	2303      	movs	r3, #3
   19ff2:	f842 3f10 	str.w	r3, [r2, #16]!
   19ff6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ffa:	e7e3      	b.n	19fc4 <cf_set+0x5c>
	cfg = find_cf_cfg_by_addr(id, &addr);
   19ffc:	f107 0108 	add.w	r1, r7, #8
   1a000:	2000      	movs	r0, #0
   1a002:	f7ff ff8f 	bl	19f24 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a006:	4605      	mov	r5, r0
   1a008:	b9c0      	cbnz	r0, 1a03c <cf_set+0xd4>
		cfg = find_cf_cfg(NULL);
   1a00a:	f7ff fe43 	bl	19c94 <find_cf_cfg>
		if (!cfg) {
   1a00e:	4605      	mov	r5, r0
   1a010:	b968      	cbnz	r0, 1a02e <cf_set+0xc6>
			BT_ERR("Unable to restore CF: no cfg left");
   1a012:	4b1f      	ldr	r3, [pc, #124]	; (1a090 <cf_set+0x128>)
   1a014:	627b      	str	r3, [r7, #36]	; 0x24
   1a016:	481a      	ldr	r0, [pc, #104]	; (1a080 <cf_set+0x118>)
   1a018:	2302      	movs	r3, #2
   1a01a:	f107 0220 	add.w	r2, r7, #32
   1a01e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a022:	623b      	str	r3, [r7, #32]
			return -ENOMEM;
   1a024:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore CF: no cfg left");
   1a028:	f00e fe62 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1a02c:	e7b2      	b.n	19f94 <cf_set+0x2c>
		cfg->id = id;
   1a02e:	2300      	movs	r3, #0
   1a030:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a034:	f107 0108 	add.w	r1, r7, #8
   1a038:	f00e fdae 	bl	28b98 <bt_addr_le_copy>
	if (len_rd) {
   1a03c:	f1b9 0f00 	cmp.w	r9, #0
   1a040:	d017      	beq.n	1a072 <cf_set+0x10a>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a042:	f105 0108 	add.w	r1, r5, #8
   1a046:	2201      	movs	r2, #1
   1a048:	4640      	mov	r0, r8
   1a04a:	47b0      	blx	r6
		if (len < 0) {
   1a04c:	1e05      	subs	r5, r0, #0
   1a04e:	daa1      	bge.n	19f94 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a050:	466c      	mov	r4, sp
   1a052:	b088      	sub	sp, #32
   1a054:	466a      	mov	r2, sp
   1a056:	4b0f      	ldr	r3, [pc, #60]	; (1a094 <cf_set+0x12c>)
   1a058:	4809      	ldr	r0, [pc, #36]	; (1a080 <cf_set+0x118>)
   1a05a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a05e:	2303      	movs	r3, #3
   1a060:	f842 3f10 	str.w	r3, [r2, #16]!
   1a064:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a068:	f00e fe42 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1a06c:	46a5      	mov	sp, r4
			return len;
   1a06e:	462c      	mov	r4, r5
   1a070:	e790      	b.n	19f94 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1a072:	4628      	mov	r0, r5
   1a074:	f00e fe3f 	bl	28cf6 <clear_cf_cfg>
   1a078:	e78c      	b.n	19f94 <cf_set+0x2c>
   1a07a:	bf00      	nop
   1a07c:	0002cc42 	.word	0x0002cc42
   1a080:	0002b4fc 	.word	0x0002b4fc
   1a084:	0002de11 	.word	0x0002de11
   1a088:	01000003 	.word	0x01000003
   1a08c:	0002de2d 	.word	0x0002de2d
   1a090:	0002de48 	.word	0x0002de48
   1a094:	0002ddf0 	.word	0x0002ddf0

0001a098 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a098:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a09a:	6881      	ldr	r1, [r0, #8]
{
   1a09c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a09e:	4a07      	ldr	r2, [pc, #28]	; (1a0bc <remove_peer_from_attr+0x24>)
   1a0a0:	4291      	cmp	r1, r2
   1a0a2:	d109      	bne.n	1a0b8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a0a4:	791a      	ldrb	r2, [r3, #4]
   1a0a6:	6819      	ldr	r1, [r3, #0]
   1a0a8:	68c0      	ldr	r0, [r0, #12]
   1a0aa:	f00e feec 	bl	28e86 <ccc_find_cfg>
	if (cfg) {
   1a0ae:	b118      	cbz	r0, 1a0b8 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1a0b0:	220a      	movs	r2, #10
   1a0b2:	2100      	movs	r1, #0
   1a0b4:	f00d fbc6 	bl	27844 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a0b8:	2001      	movs	r0, #1
   1a0ba:	bd08      	pop	{r3, pc}
   1a0bc:	0001a185 	.word	0x0001a185

0001a0c0 <ccc_save>:
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a0c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0f4 <ccc_save+0x34>)
{
   1a0c4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a0c6:	6882      	ldr	r2, [r0, #8]
   1a0c8:	429a      	cmp	r2, r3
{
   1a0ca:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a0cc:	d10f      	bne.n	1a0ee <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a0ce:	7922      	ldrb	r2, [r4, #4]
   1a0d0:	6821      	ldr	r1, [r4, #0]
   1a0d2:	68c0      	ldr	r0, [r0, #12]
   1a0d4:	f00e fed7 	bl	28e86 <ccc_find_cfg>
	if (!cfg) {
   1a0d8:	b148      	cbz	r0, 1a0ee <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1a0da:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1a0de:	8901      	ldrh	r1, [r0, #8]
   1a0e0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1a0e4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1a0e6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1a0e8:	8151      	strh	r1, [r2, #10]
	save->count++;
   1a0ea:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1a0ee:	2001      	movs	r0, #1
   1a0f0:	bd38      	pop	{r3, r4, r5, pc}
   1a0f2:	bf00      	nop
   1a0f4:	0001a185 	.word	0x0001a185

0001a0f8 <ccc_load>:
{
   1a0f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a0fa:	4b21      	ldr	r3, [pc, #132]	; (1a180 <ccc_load+0x88>)
{
   1a0fc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a0fe:	6882      	ldr	r2, [r0, #8]
   1a100:	429a      	cmp	r2, r3
   1a102:	d002      	beq.n	1a10a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1a104:	2001      	movs	r0, #1
}
   1a106:	b002      	add	sp, #8
   1a108:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1a10a:	68a3      	ldr	r3, [r4, #8]
   1a10c:	68c6      	ldr	r6, [r0, #12]
   1a10e:	b94b      	cbnz	r3, 1a124 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a110:	7922      	ldrb	r2, [r4, #4]
   1a112:	6821      	ldr	r1, [r4, #0]
   1a114:	4630      	mov	r0, r6
   1a116:	f00e feb6 	bl	28e86 <ccc_find_cfg>
	if (!cfg) {
   1a11a:	2800      	cmp	r0, #0
   1a11c:	d0f2      	beq.n	1a104 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1a11e:	f00e fd3e 	bl	28b9e <clear_ccc_cfg>
   1a122:	e7ef      	b.n	1a104 <ccc_load+0xc>
	} else if (!load->count) {
   1a124:	68e0      	ldr	r0, [r4, #12]
   1a126:	2800      	cmp	r0, #0
   1a128:	d0ed      	beq.n	1a106 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1a12a:	881b      	ldrh	r3, [r3, #0]
   1a12c:	4299      	cmp	r1, r3
   1a12e:	d00a      	beq.n	1a146 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1a130:	d9e8      	bls.n	1a104 <ccc_load+0xc>
	load->count--;
   1a132:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a134:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a136:	3801      	subs	r0, #1
	load->entry++;
   1a138:	3304      	adds	r3, #4
	load->count--;
   1a13a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a13c:	3800      	subs	r0, #0
	load->entry++;
   1a13e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a140:	bf18      	it	ne
   1a142:	2001      	movne	r0, #1
   1a144:	e7df      	b.n	1a106 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a146:	7922      	ldrb	r2, [r4, #4]
   1a148:	6821      	ldr	r1, [r4, #0]
   1a14a:	4630      	mov	r0, r6
   1a14c:	f00e fe9b 	bl	28e86 <ccc_find_cfg>
	if (!cfg) {
   1a150:	4605      	mov	r5, r0
   1a152:	b980      	cbnz	r0, 1a176 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a154:	9000      	str	r0, [sp, #0]
   1a156:	4602      	mov	r2, r0
   1a158:	f8cd 0003 	str.w	r0, [sp, #3]
   1a15c:	4669      	mov	r1, sp
   1a15e:	4630      	mov	r0, r6
   1a160:	f00e fe91 	bl	28e86 <ccc_find_cfg>
		if (!cfg) {
   1a164:	4605      	mov	r5, r0
   1a166:	2800      	cmp	r0, #0
   1a168:	d0e3      	beq.n	1a132 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a16a:	6821      	ldr	r1, [r4, #0]
   1a16c:	3001      	adds	r0, #1
   1a16e:	f00e fd13 	bl	28b98 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a172:	7923      	ldrb	r3, [r4, #4]
   1a174:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a176:	68a3      	ldr	r3, [r4, #8]
   1a178:	885b      	ldrh	r3, [r3, #2]
   1a17a:	812b      	strh	r3, [r5, #8]
   1a17c:	e7d9      	b.n	1a132 <ccc_load+0x3a>
   1a17e:	bf00      	nop
   1a180:	0001a185 	.word	0x0001a185

0001a184 <bt_gatt_attr_write_ccc>:
{
   1a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a188:	b086      	sub	sp, #24
   1a18a:	4698      	mov	r8, r3
   1a18c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a190:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1a194:	4606      	mov	r6, r0
   1a196:	4689      	mov	r9, r1
	if (offset) {
   1a198:	2b00      	cmp	r3, #0
   1a19a:	d16b      	bne.n	1a274 <bt_gatt_attr_write_ccc+0xf0>
	if (!len || len > sizeof(uint16_t)) {
   1a19c:	f108 33ff 	add.w	r3, r8, #4294967295
   1a1a0:	2b01      	cmp	r3, #1
   1a1a2:	d86a      	bhi.n	1a27a <bt_gatt_attr_write_ccc+0xf6>
		value = *(uint8_t *)buf;
   1a1a4:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1a1a6:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1a1aa:	4651      	mov	r1, sl
   1a1ac:	bf14      	ite	ne
   1a1ae:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   1a1b0:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   1a1b2:	f00e fe77 	bl	28ea4 <find_ccc_cfg>
	if (!cfg) {
   1a1b6:	4605      	mov	r5, r0
   1a1b8:	b9e8      	cbnz	r0, 1a1f6 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   1a1ba:	b91f      	cbnz	r7, 1a1c4 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1a1bc:	4640      	mov	r0, r8
}
   1a1be:	b006      	add	sp, #24
   1a1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a1c4:	4651      	mov	r1, sl
   1a1c6:	f00e fe6d 	bl	28ea4 <find_ccc_cfg>
		if (!cfg) {
   1a1ca:	4605      	mov	r5, r0
   1a1cc:	b960      	cbnz	r0, 1a1e8 <bt_gatt_attr_write_ccc+0x64>
			BT_WARN("No space to store CCC cfg");
   1a1ce:	4b2c      	ldr	r3, [pc, #176]	; (1a280 <bt_gatt_attr_write_ccc+0xfc>)
   1a1d0:	482c      	ldr	r0, [pc, #176]	; (1a284 <bt_gatt_attr_write_ccc+0x100>)
   1a1d2:	9305      	str	r3, [sp, #20]
   1a1d4:	aa04      	add	r2, sp, #16
   1a1d6:	2302      	movs	r3, #2
   1a1d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a1dc:	9304      	str	r3, [sp, #16]
   1a1de:	f00e fd87 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a1e2:	f06f 0010 	mvn.w	r0, #16
   1a1e6:	e7ea      	b.n	1a1be <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a1e8:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a1ec:	3001      	adds	r0, #1
   1a1ee:	f00e fcd3 	bl	28b98 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a1f2:	7a33      	ldrb	r3, [r6, #8]
   1a1f4:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1a1f6:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a1fa:	bb7b      	cbnz	r3, 1a25c <bt_gatt_attr_write_ccc+0xd8>
	if (cfg->value != ccc->value) {
   1a1fc:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   1a200:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   1a202:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   1a204:	42bb      	cmp	r3, r7
   1a206:	d003      	beq.n	1a210 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1a208:	4651      	mov	r1, sl
   1a20a:	4648      	mov	r0, r9
   1a20c:	f00e fca1 	bl	28b52 <gatt_ccc_changed>
	if (value_changed) {
   1a210:	42bc      	cmp	r4, r7
   1a212:	d01d      	beq.n	1a250 <bt_gatt_attr_write_ccc+0xcc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1a214:	4630      	mov	r0, r6
   1a216:	f7fd ffcb 	bl	181b0 <bt_conn_index>
   1a21a:	4c1b      	ldr	r4, [pc, #108]	; (1a288 <bt_gatt_attr_write_ccc+0x104>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a21c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1a220:	429e      	cmp	r6, r3
   1a222:	d015      	beq.n	1a250 <bt_gatt_attr_write_ccc+0xcc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a224:	7a30      	ldrb	r0, [r6, #8]
   1a226:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a22a:	f00d fcf3 	bl	27c14 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a22e:	b178      	cbz	r0, 1a250 <bt_gatt_attr_write_ccc+0xcc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a230:	4630      	mov	r0, r6
   1a232:	f7fd ffbd 	bl	181b0 <bt_conn_index>
   1a236:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1a238:	4630      	mov	r0, r6
   1a23a:	f00d fdfe 	bl	27e3a <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a23e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a242:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a246:	2300      	movs	r3, #0
   1a248:	f104 0008 	add.w	r0, r4, #8
   1a24c:	f007 fca8 	bl	21ba0 <k_work_reschedule>
	if (!value) {
   1a250:	2f00      	cmp	r7, #0
   1a252:	d1b3      	bne.n	1a1bc <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1a254:	4628      	mov	r0, r5
   1a256:	f00e fca2 	bl	28b9e <clear_ccc_cfg>
   1a25a:	e7af      	b.n	1a1bc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a25c:	463a      	mov	r2, r7
   1a25e:	4649      	mov	r1, r9
   1a260:	4630      	mov	r0, r6
   1a262:	4798      	blx	r3
		if (write < 0) {
   1a264:	2800      	cmp	r0, #0
   1a266:	dbaa      	blt.n	1a1be <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1a268:	1e44      	subs	r4, r0, #1
   1a26a:	2c01      	cmp	r4, #1
   1a26c:	d9c6      	bls.n	1a1fc <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a26e:	f06f 000d 	mvn.w	r0, #13
   1a272:	e7a4      	b.n	1a1be <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a274:	f06f 0006 	mvn.w	r0, #6
   1a278:	e7a1      	b.n	1a1be <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a27a:	f06f 000c 	mvn.w	r0, #12
   1a27e:	e79e      	b.n	1a1be <bt_gatt_attr_write_ccc+0x3a>
   1a280:	0002de6a 	.word	0x0002de6a
   1a284:	0002b4fc 	.word	0x0002b4fc
   1a288:	20002020 	.word	0x20002020

0001a28c <find_sc_cfg>:
{
   1a28c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a28e:	4c0e      	ldr	r4, [pc, #56]	; (1a2c8 <find_sc_cfg+0x3c>)
   1a290:	7823      	ldrb	r3, [r4, #0]
   1a292:	4283      	cmp	r3, r0
{
   1a294:	4605      	mov	r5, r0
   1a296:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a298:	d00a      	beq.n	1a2b0 <find_sc_cfg+0x24>
   1a29a:	7b23      	ldrb	r3, [r4, #12]
   1a29c:	42ab      	cmp	r3, r5
   1a29e:	d111      	bne.n	1a2c4 <find_sc_cfg+0x38>
   1a2a0:	480a      	ldr	r0, [pc, #40]	; (1a2cc <find_sc_cfg+0x40>)
   1a2a2:	2207      	movs	r2, #7
   1a2a4:	4631      	mov	r1, r6
   1a2a6:	f00d fa99 	bl	277dc <memcmp>
   1a2aa:	b958      	cbnz	r0, 1a2c4 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a2ac:	2001      	movs	r0, #1
   1a2ae:	e005      	b.n	1a2bc <find_sc_cfg+0x30>
   1a2b0:	2207      	movs	r2, #7
   1a2b2:	1c60      	adds	r0, r4, #1
   1a2b4:	f00d fa92 	bl	277dc <memcmp>
		if (id == sc_cfg[i].id &&
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	d1ee      	bne.n	1a29a <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1a2bc:	230c      	movs	r3, #12
   1a2be:	fb03 4000 	mla	r0, r3, r0, r4
   1a2c2:	e000      	b.n	1a2c6 <find_sc_cfg+0x3a>
	return NULL;
   1a2c4:	2000      	movs	r0, #0
}
   1a2c6:	bd70      	pop	{r4, r5, r6, pc}
   1a2c8:	20003c98 	.word	0x20003c98
   1a2cc:	20003ca5 	.word	0x20003ca5

0001a2d0 <sc_save>:
{
   1a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2d4:	b088      	sub	sp, #32
   1a2d6:	4680      	mov	r8, r0
   1a2d8:	460f      	mov	r7, r1
   1a2da:	4616      	mov	r6, r2
   1a2dc:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a2de:	f7ff ffd5 	bl	1a28c <find_sc_cfg>
	if (!cfg) {
   1a2e2:	4604      	mov	r4, r0
   1a2e4:	b9c8      	cbnz	r0, 1a31a <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a2e6:	4669      	mov	r1, sp
   1a2e8:	9000      	str	r0, [sp, #0]
   1a2ea:	f8cd 0003 	str.w	r0, [sp, #3]
   1a2ee:	f7ff ffcd 	bl	1a28c <find_sc_cfg>
		if (!cfg) {
   1a2f2:	4604      	mov	r4, r0
   1a2f4:	b960      	cbnz	r0, 1a310 <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   1a2f6:	4b17      	ldr	r3, [pc, #92]	; (1a354 <sc_save+0x84>)
   1a2f8:	9307      	str	r3, [sp, #28]
   1a2fa:	4817      	ldr	r0, [pc, #92]	; (1a358 <sc_save+0x88>)
   1a2fc:	2302      	movs	r3, #2
   1a2fe:	aa06      	add	r2, sp, #24
   1a300:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a304:	9306      	str	r3, [sp, #24]
   1a306:	f00e fcf3 	bl	28cf0 <z_log_msg_static_create.constprop.0>
}
   1a30a:	b008      	add	sp, #32
   1a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a310:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a314:	4639      	mov	r1, r7
   1a316:	f00e fc3f 	bl	28b98 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a31a:	8922      	ldrh	r2, [r4, #8]
   1a31c:	8963      	ldrh	r3, [r4, #10]
   1a31e:	b97a      	cbnz	r2, 1a340 <sc_save+0x70>
   1a320:	b983      	cbnz	r3, 1a344 <sc_save+0x74>
		cfg->data.start = start;
   1a322:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a324:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a326:	4621      	mov	r1, r4
   1a328:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a32c:	f00d fc72 	bl	27c14 <bt_addr_le_is_bonded>
   1a330:	2800      	cmp	r0, #0
   1a332:	d0ea      	beq.n	1a30a <sc_save+0x3a>
		sc_store(cfg);
   1a334:	4620      	mov	r0, r4
}
   1a336:	b008      	add	sp, #32
   1a338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1a33c:	f7ff bd0a 	b.w	19d54 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1a340:	4296      	cmp	r6, r2
   1a342:	d302      	bcc.n	1a34a <sc_save+0x7a>
   1a344:	429d      	cmp	r5, r3
   1a346:	d8ed      	bhi.n	1a324 <sc_save+0x54>
   1a348:	e7df      	b.n	1a30a <sc_save+0x3a>
	if (*end < new_end) {
   1a34a:	429d      	cmp	r5, r3
		*start = new_start;
   1a34c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a34e:	d9ea      	bls.n	1a326 <sc_save+0x56>
   1a350:	e7e8      	b.n	1a324 <sc_save+0x54>
   1a352:	bf00      	nop
   1a354:	0002de84 	.word	0x0002de84
   1a358:	0002b4fc 	.word	0x0002b4fc

0001a35c <bt_gatt_clear_sc>:
{
   1a35c:	b5b0      	push	{r4, r5, r7, lr}
   1a35e:	b08c      	sub	sp, #48	; 0x30
   1a360:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a362:	f7ff ff93 	bl	1a28c <find_sc_cfg>
	if (!cfg) {
   1a366:	4604      	mov	r4, r0
   1a368:	b330      	cbz	r0, 1a3b8 <bt_gatt_clear_sc+0x5c>
		if (cfg->id) {
   1a36a:	4605      	mov	r5, r0
   1a36c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a370:	b332      	cbz	r2, 1a3c0 <bt_gatt_clear_sc+0x64>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a372:	2104      	movs	r1, #4
   1a374:	4638      	mov	r0, r7
   1a376:	f00c f885 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a37a:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a37c:	1d38      	adds	r0, r7, #4
   1a37e:	4a11      	ldr	r2, [pc, #68]	; (1a3c4 <bt_gatt_clear_sc+0x68>)
   1a380:	462b      	mov	r3, r5
   1a382:	2124      	movs	r1, #36	; 0x24
   1a384:	f7fb f970 	bl	15668 <bt_settings_encode_key>
		err = settings_delete(key);
   1a388:	1d38      	adds	r0, r7, #4
   1a38a:	f00c fee8 	bl	2715e <settings_delete>
		if (err) {
   1a38e:	b170      	cbz	r0, 1a3ae <bt_gatt_clear_sc+0x52>
			BT_ERR("failed to delete SC (err %d)", err);
   1a390:	466d      	mov	r5, sp
   1a392:	b088      	sub	sp, #32
   1a394:	aa02      	add	r2, sp, #8
   1a396:	4b0c      	ldr	r3, [pc, #48]	; (1a3c8 <bt_gatt_clear_sc+0x6c>)
   1a398:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a39c:	2303      	movs	r3, #3
   1a39e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3a2:	480a      	ldr	r0, [pc, #40]	; (1a3cc <bt_gatt_clear_sc+0x70>)
   1a3a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3a8:	f00e fca2 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1a3ac:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1a3ae:	220c      	movs	r2, #12
   1a3b0:	2100      	movs	r1, #0
   1a3b2:	4620      	mov	r0, r4
   1a3b4:	f00d fa46 	bl	27844 <memset>
}
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	3728      	adds	r7, #40	; 0x28
   1a3bc:	46bd      	mov	sp, r7
   1a3be:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a3c0:	9200      	str	r2, [sp, #0]
   1a3c2:	e7db      	b.n	1a37c <bt_gatt_clear_sc+0x20>
   1a3c4:	0002e06f 	.word	0x0002e06f
   1a3c8:	0002dea3 	.word	0x0002dea3
   1a3cc:	0002b4fc 	.word	0x0002b4fc

0001a3d0 <sc_clear>:
{
   1a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3d2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1a3d6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3d8:	4631      	mov	r1, r6
   1a3da:	7a00      	ldrb	r0, [r0, #8]
{
   1a3dc:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3de:	f00d fc19 	bl	27c14 <bt_addr_le_is_bonded>
   1a3e2:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a3e4:	4631      	mov	r1, r6
   1a3e6:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a3e8:	b19d      	cbz	r5, 1a412 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a3ea:	f7ff ffb7 	bl	1a35c <bt_gatt_clear_sc>
		if (err) {
   1a3ee:	b170      	cbz	r0, 1a40e <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
   1a3f0:	466c      	mov	r4, sp
   1a3f2:	b088      	sub	sp, #32
   1a3f4:	466a      	mov	r2, sp
   1a3f6:	4b0b      	ldr	r3, [pc, #44]	; (1a424 <sc_clear+0x54>)
   1a3f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a3fc:	2303      	movs	r3, #3
   1a3fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1a402:	4809      	ldr	r0, [pc, #36]	; (1a428 <sc_clear+0x58>)
   1a404:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a408:	f00e fc72 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1a40c:	46a5      	mov	sp, r4
}
   1a40e:	46bd      	mov	sp, r7
   1a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a412:	f7ff ff3b 	bl	1a28c <find_sc_cfg>
		if (cfg) {
   1a416:	2800      	cmp	r0, #0
   1a418:	d0f9      	beq.n	1a40e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1a41a:	220c      	movs	r2, #12
   1a41c:	4629      	mov	r1, r5
   1a41e:	f00d fa11 	bl	27844 <memset>
}
   1a422:	e7f4      	b.n	1a40e <sc_clear+0x3e>
   1a424:	0002dec0 	.word	0x0002dec0
   1a428:	0002b4fc 	.word	0x0002b4fc

0001a42c <disconnected_cb>:
{
   1a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a430:	4b1f      	ldr	r3, [pc, #124]	; (1a4b0 <disconnected_cb+0x84>)
{
   1a432:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a434:	6882      	ldr	r2, [r0, #8]
   1a436:	429a      	cmp	r2, r3
{
   1a438:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a43a:	d102      	bne.n	1a442 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1a43c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1a43e:	8963      	ldrh	r3, [r4, #10]
   1a440:	b9c3      	cbnz	r3, 1a474 <disconnected_cb+0x48>
}
   1a442:	2001      	movs	r0, #1
   1a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a448:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1a44c:	7a28      	ldrb	r0, [r5, #8]
   1a44e:	4641      	mov	r1, r8
   1a450:	f00d fbe0 	bl	27c14 <bt_addr_le_is_bonded>
   1a454:	b948      	cbnz	r0, 1a46a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1a456:	4b17      	ldr	r3, [pc, #92]	; (1a4b4 <disconnected_cb+0x88>)
   1a458:	429c      	cmp	r4, r3
   1a45a:	d102      	bne.n	1a462 <disconnected_cb+0x36>
					sc_clear(conn);
   1a45c:	4628      	mov	r0, r5
   1a45e:	f7ff ffb7 	bl	1a3d0 <sc_clear>
				clear_ccc_cfg(cfg);
   1a462:	4620      	mov	r0, r4
   1a464:	f00e fb9b 	bl	28b9e <clear_ccc_cfg>
	if (!value_used) {
   1a468:	e019      	b.n	1a49e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a46a:	4641      	mov	r1, r8
   1a46c:	4638      	mov	r0, r7
   1a46e:	f00e fb93 	bl	28b98 <bt_addr_le_copy>
	if (!value_used) {
   1a472:	e014      	b.n	1a49e <disconnected_cb+0x72>
		if (!cfg->value) {
   1a474:	8923      	ldrh	r3, [r4, #8]
   1a476:	b193      	cbz	r3, 1a49e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a478:	4627      	mov	r7, r4
   1a47a:	4628      	mov	r0, r5
   1a47c:	f817 1b01 	ldrb.w	r1, [r7], #1
   1a480:	463a      	mov	r2, r7
   1a482:	f00d fd90 	bl	27fa6 <bt_conn_is_peer_addr_le>
   1a486:	2800      	cmp	r0, #0
   1a488:	d1de      	bne.n	1a448 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a48a:	7820      	ldrb	r0, [r4, #0]
   1a48c:	4639      	mov	r1, r7
   1a48e:	f7fd ffad 	bl	183ec <bt_conn_lookup_addr_le>
			if (tmp) {
   1a492:	b120      	cbz	r0, 1a49e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a494:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1a496:	f00d fceb 	bl	27e70 <bt_conn_unref>
	if (!value_used) {
   1a49a:	2d07      	cmp	r5, #7
   1a49c:	d0d1      	beq.n	1a442 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1a49e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a4a0:	2100      	movs	r1, #0
   1a4a2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a4a4:	2b00      	cmp	r3, #0
   1a4a6:	d0cc      	beq.n	1a442 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a4a8:	4630      	mov	r0, r6
   1a4aa:	4798      	blx	r3
   1a4ac:	e7c9      	b.n	1a442 <disconnected_cb+0x16>
   1a4ae:	bf00      	nop
   1a4b0:	0001a185 	.word	0x0001a185
   1a4b4:	20000708 	.word	0x20000708

0001a4b8 <sc_set>:
{
   1a4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a4bc:	b08d      	sub	sp, #52	; 0x34
   1a4be:	460e      	mov	r6, r1
   1a4c0:	af00      	add	r7, sp, #0
   1a4c2:	4690      	mov	r8, r2
   1a4c4:	4699      	mov	r9, r3
	if (!name) {
   1a4c6:	4605      	mov	r5, r0
   1a4c8:	b988      	cbnz	r0, 1a4ee <sc_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1a4ca:	4b44      	ldr	r3, [pc, #272]	; (1a5dc <sc_set+0x124>)
   1a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a4ce:	4844      	ldr	r0, [pc, #272]	; (1a5e0 <sc_set+0x128>)
   1a4d0:	2302      	movs	r3, #2
   1a4d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a4d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a4da:	62bb      	str	r3, [r7, #40]	; 0x28
   1a4dc:	f00e fc08 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1a4e0:	f06f 0415 	mvn.w	r4, #21
}
   1a4e4:	4620      	mov	r0, r4
   1a4e6:	3734      	adds	r7, #52	; 0x34
   1a4e8:	46bd      	mov	sp, r7
   1a4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a4ee:	f107 0108 	add.w	r1, r7, #8
   1a4f2:	f00d fa11 	bl	27918 <bt_settings_decode_key>
	if (err) {
   1a4f6:	4604      	mov	r4, r0
   1a4f8:	b188      	cbz	r0, 1a51e <sc_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1a4fa:	466c      	mov	r4, sp
   1a4fc:	b088      	sub	sp, #32
   1a4fe:	466a      	mov	r2, sp
   1a500:	4b38      	ldr	r3, [pc, #224]	; (1a5e4 <sc_set+0x12c>)
   1a502:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a506:	2302      	movs	r3, #2
   1a508:	7713      	strb	r3, [r2, #28]
   1a50a:	4b37      	ldr	r3, [pc, #220]	; (1a5e8 <sc_set+0x130>)
   1a50c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a510:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1a514:	4832      	ldr	r0, [pc, #200]	; (1a5e0 <sc_set+0x128>)
   1a516:	f00e fbeb 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1a51a:	46a5      	mov	sp, r4
   1a51c:	e7e0      	b.n	1a4e0 <sc_set+0x28>
	settings_name_next(name, &next);
   1a51e:	1d39      	adds	r1, r7, #4
   1a520:	4628      	mov	r0, r5
   1a522:	f00c fe43 	bl	271ac <settings_name_next>
	if (!next) {
   1a526:	6878      	ldr	r0, [r7, #4]
   1a528:	b180      	cbz	r0, 1a54c <sc_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a52a:	220a      	movs	r2, #10
   1a52c:	4621      	mov	r1, r4
   1a52e:	f00d f893 	bl	27658 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a532:	b158      	cbz	r0, 1a54c <sc_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   1a534:	466c      	mov	r4, sp
   1a536:	b088      	sub	sp, #32
   1a538:	466a      	mov	r2, sp
   1a53a:	4b2c      	ldr	r3, [pc, #176]	; (1a5ec <sc_set+0x134>)
   1a53c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a540:	2303      	movs	r3, #3
   1a542:	f842 3f10 	str.w	r3, [r2, #16]!
   1a546:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a54a:	e7e3      	b.n	1a514 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   1a54c:	f107 0108 	add.w	r1, r7, #8
   1a550:	2000      	movs	r0, #0
   1a552:	f7ff fe9b 	bl	1a28c <find_sc_cfg>
	if (!cfg && len_rd) {
   1a556:	4605      	mov	r5, r0
   1a558:	2800      	cmp	r0, #0
   1a55a:	d137      	bne.n	1a5cc <sc_set+0x114>
   1a55c:	2e00      	cmp	r6, #0
   1a55e:	d0c1      	beq.n	1a4e4 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a560:	f107 0110 	add.w	r1, r7, #16
   1a564:	6138      	str	r0, [r7, #16]
   1a566:	4606      	mov	r6, r0
   1a568:	f8c7 0013 	str.w	r0, [r7, #19]
   1a56c:	f7ff fe8e 	bl	1a28c <find_sc_cfg>
		if (!cfg) {
   1a570:	4605      	mov	r5, r0
   1a572:	b968      	cbnz	r0, 1a590 <sc_set+0xd8>
			BT_ERR("Unable to restore SC: no cfg left");
   1a574:	4b1e      	ldr	r3, [pc, #120]	; (1a5f0 <sc_set+0x138>)
   1a576:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a578:	4819      	ldr	r0, [pc, #100]	; (1a5e0 <sc_set+0x128>)
   1a57a:	2302      	movs	r3, #2
   1a57c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a580:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a584:	62bb      	str	r3, [r7, #40]	; 0x28
			return -ENOMEM;
   1a586:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore SC: no cfg left");
   1a58a:	f00e fbb1 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1a58e:	e7a9      	b.n	1a4e4 <sc_set+0x2c>
		cfg->id = id;
   1a590:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a594:	f107 0108 	add.w	r1, r7, #8
   1a598:	f00e fafe 	bl	28b98 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a59c:	f105 0108 	add.w	r1, r5, #8
   1a5a0:	2204      	movs	r2, #4
   1a5a2:	4648      	mov	r0, r9
   1a5a4:	47c0      	blx	r8
		if (len < 0) {
   1a5a6:	1e05      	subs	r5, r0, #0
   1a5a8:	da9c      	bge.n	1a4e4 <sc_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a5aa:	466c      	mov	r4, sp
   1a5ac:	b088      	sub	sp, #32
   1a5ae:	466a      	mov	r2, sp
   1a5b0:	4b10      	ldr	r3, [pc, #64]	; (1a5f4 <sc_set+0x13c>)
   1a5b2:	480b      	ldr	r0, [pc, #44]	; (1a5e0 <sc_set+0x128>)
   1a5b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a5b8:	2303      	movs	r3, #3
   1a5ba:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a5c2:	f00e fb95 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1a5c6:	46a5      	mov	sp, r4
			return len;
   1a5c8:	462c      	mov	r4, r5
   1a5ca:	e78b      	b.n	1a4e4 <sc_set+0x2c>
	if (len_rd) {
   1a5cc:	2e00      	cmp	r6, #0
   1a5ce:	d1e5      	bne.n	1a59c <sc_set+0xe4>
		memset(cfg, 0, sizeof(*cfg));
   1a5d0:	220c      	movs	r2, #12
   1a5d2:	4631      	mov	r1, r6
   1a5d4:	f00d f936 	bl	27844 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1a5d8:	e784      	b.n	1a4e4 <sc_set+0x2c>
   1a5da:	bf00      	nop
   1a5dc:	0002cc42 	.word	0x0002cc42
   1a5e0:	0002b4fc 	.word	0x0002b4fc
   1a5e4:	0002de11 	.word	0x0002de11
   1a5e8:	01000003 	.word	0x01000003
   1a5ec:	0002de2d 	.word	0x0002de2d
   1a5f0:	0002ded6 	.word	0x0002ded6
   1a5f4:	0002ddf0 	.word	0x0002ddf0

0001a5f8 <sc_indicate_rsp>:
{
   1a5f8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a5fa:	f06f 0102 	mvn.w	r1, #2
   1a5fe:	4604      	mov	r4, r0
   1a600:	480f      	ldr	r0, [pc, #60]	; (1a640 <sc_indicate_rsp+0x48>)
   1a602:	f00e fb66 	bl	28cd2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a606:	480e      	ldr	r0, [pc, #56]	; (1a640 <sc_indicate_rsp+0x48>)
   1a608:	f00e fb4e 	bl	28ca8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a60c:	07c2      	lsls	r2, r0, #31
   1a60e:	d504      	bpl.n	1a61a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a610:	480c      	ldr	r0, [pc, #48]	; (1a644 <sc_indicate_rsp+0x4c>)
   1a612:	2200      	movs	r2, #0
   1a614:	2300      	movs	r3, #0
   1a616:	f007 fac3 	bl	21ba0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1a61a:	4620      	mov	r0, r4
   1a61c:	f00e fa68 	bl	28af0 <bt_att_fixed_chan_only>
   1a620:	b160      	cbz	r0, 1a63c <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1a622:	4620      	mov	r0, r4
   1a624:	f7ff fb36 	bl	19c94 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a628:	b140      	cbz	r0, 1a63c <sc_indicate_rsp+0x44>
   1a62a:	7a03      	ldrb	r3, [r0, #8]
   1a62c:	07db      	lsls	r3, r3, #31
   1a62e:	d505      	bpl.n	1a63c <sc_indicate_rsp+0x44>
}
   1a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a634:	2101      	movs	r1, #1
   1a636:	300c      	adds	r0, #12
   1a638:	f00e bb3c 	b.w	28cb4 <atomic_or>
   1a63c:	bd10      	pop	{r4, pc}
   1a63e:	bf00      	nop
   1a640:	200020a8 	.word	0x200020a8
   1a644:	20002078 	.word	0x20002078

0001a648 <bt_gatt_init>:
{
   1a648:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a64a:	4b24      	ldr	r3, [pc, #144]	; (1a6dc <bt_gatt_init+0x94>)
   1a64c:	f3bf 8f5b 	dmb	ish
   1a650:	2201      	movs	r2, #1
   1a652:	e853 1f00 	ldrex	r1, [r3]
   1a656:	2900      	cmp	r1, #0
   1a658:	d103      	bne.n	1a662 <bt_gatt_init+0x1a>
   1a65a:	e843 2000 	strex	r0, r2, [r3]
   1a65e:	2800      	cmp	r0, #0
   1a660:	d1f7      	bne.n	1a652 <bt_gatt_init+0xa>
   1a662:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a666:	d138      	bne.n	1a6da <bt_gatt_init+0x92>
   1a668:	f3bf 8f5b 	dmb	ish
   1a66c:	4b1c      	ldr	r3, [pc, #112]	; (1a6e0 <bt_gatt_init+0x98>)
   1a66e:	e853 1f00 	ldrex	r1, [r3]
   1a672:	2900      	cmp	r1, #0
   1a674:	d103      	bne.n	1a67e <bt_gatt_init+0x36>
   1a676:	e843 2000 	strex	r0, r2, [r3]
   1a67a:	2800      	cmp	r0, #0
   1a67c:	d1f7      	bne.n	1a66e <bt_gatt_init+0x26>
   1a67e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a682:	d108      	bne.n	1a696 <bt_gatt_init+0x4e>
   1a684:	4917      	ldr	r1, [pc, #92]	; (1a6e4 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a686:	4a18      	ldr	r2, [pc, #96]	; (1a6e8 <bt_gatt_init+0xa0>)
   1a688:	880b      	ldrh	r3, [r1, #0]
   1a68a:	4c18      	ldr	r4, [pc, #96]	; (1a6ec <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1a68c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a68e:	42a2      	cmp	r2, r4
   1a690:	d31d      	bcc.n	1a6ce <bt_gatt_init+0x86>
   1a692:	b100      	cbz	r0, 1a696 <bt_gatt_init+0x4e>
   1a694:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1a696:	4b16      	ldr	r3, [pc, #88]	; (1a6f0 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1a698:	4916      	ldr	r1, [pc, #88]	; (1a6f4 <bt_gatt_init+0xac>)
   1a69a:	4817      	ldr	r0, [pc, #92]	; (1a6f8 <bt_gatt_init+0xb0>)
   1a69c:	2200      	movs	r2, #0
	list->tail = NULL;
   1a69e:	e9c3 2200 	strd	r2, r2, [r3]
   1a6a2:	f010 f9bc 	bl	2aa1e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1a6a6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a6aa:	2300      	movs	r3, #0
   1a6ac:	4812      	ldr	r0, [pc, #72]	; (1a6f8 <bt_gatt_init+0xb0>)
   1a6ae:	f7fb f885 	bl	157bc <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a6b2:	4912      	ldr	r1, [pc, #72]	; (1a6fc <bt_gatt_init+0xb4>)
   1a6b4:	4812      	ldr	r0, [pc, #72]	; (1a700 <bt_gatt_init+0xb8>)
   1a6b6:	f010 f9b2 	bl	2aa1e <k_work_init_delayable>
   1a6ba:	2102      	movs	r1, #2
   1a6bc:	4811      	ldr	r0, [pc, #68]	; (1a704 <bt_gatt_init+0xbc>)
   1a6be:	f00e faf9 	bl	28cb4 <atomic_or>
}
   1a6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1a6c6:	4910      	ldr	r1, [pc, #64]	; (1a708 <bt_gatt_init+0xc0>)
   1a6c8:	4810      	ldr	r0, [pc, #64]	; (1a70c <bt_gatt_init+0xc4>)
   1a6ca:	f010 b9a8 	b.w	2aa1e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1a6ce:	6850      	ldr	r0, [r2, #4]
   1a6d0:	4403      	add	r3, r0
   1a6d2:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a6d4:	3208      	adds	r2, #8
   1a6d6:	2001      	movs	r0, #1
   1a6d8:	e7d9      	b.n	1a68e <bt_gatt_init+0x46>
}
   1a6da:	bd10      	pop	{r4, pc}
   1a6dc:	20002e4c 	.word	0x20002e4c
   1a6e0:	20002e68 	.word	0x20002e68
   1a6e4:	20003c96 	.word	0x20003c96
   1a6e8:	0002b48c 	.word	0x0002b48c
   1a6ec:	0002b4bc 	.word	0x0002b4bc
   1a6f0:	20002e24 	.word	0x20002e24
   1a6f4:	0001a935 	.word	0x0001a935
   1a6f8:	20001fc8 	.word	0x20001fc8
   1a6fc:	0001ad3d 	.word	0x0001ad3d
   1a700:	20002078 	.word	0x20002078
   1a704:	200020a8 	.word	0x200020a8
   1a708:	0002923b 	.word	0x0002923b
   1a70c:	20002028 	.word	0x20002028

0001a710 <bt_gatt_attr_get_handle>:
{
   1a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a714:	4603      	mov	r3, r0
   1a716:	b148      	cbz	r0, 1a72c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1a718:	8a00      	ldrh	r0, [r0, #16]
   1a71a:	b938      	cbnz	r0, 1a72c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a71c:	4912      	ldr	r1, [pc, #72]	; (1a768 <bt_gatt_attr_get_handle+0x58>)
   1a71e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1a76c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1a722:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a724:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a728:	4571      	cmp	r1, lr
   1a72a:	d301      	bcc.n	1a730 <bt_gatt_attr_get_handle+0x20>
}
   1a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a730:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1a734:	42bb      	cmp	r3, r7
   1a736:	d304      	bcc.n	1a742 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a738:	fb0c 7206 	mla	r2, ip, r6, r7
   1a73c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a73e:	4293      	cmp	r3, r2
   1a740:	d90e      	bls.n	1a760 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1a742:	19a2      	adds	r2, r4, r6
   1a744:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a746:	3108      	adds	r1, #8
   1a748:	4614      	mov	r4, r2
   1a74a:	e7ed      	b.n	1a728 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1a74c:	fb0c 7805 	mla	r8, ip, r5, r7
   1a750:	4543      	cmp	r3, r8
   1a752:	d007      	beq.n	1a764 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a754:	3501      	adds	r5, #1
   1a756:	1962      	adds	r2, r4, r5
   1a758:	42b5      	cmp	r5, r6
   1a75a:	b292      	uxth	r2, r2
   1a75c:	d1f6      	bne.n	1a74c <bt_gatt_attr_get_handle+0x3c>
   1a75e:	e7f2      	b.n	1a746 <bt_gatt_attr_get_handle+0x36>
   1a760:	2500      	movs	r5, #0
   1a762:	e7f8      	b.n	1a756 <bt_gatt_attr_get_handle+0x46>
   1a764:	4610      	mov	r0, r2
   1a766:	e7e1      	b.n	1a72c <bt_gatt_attr_get_handle+0x1c>
   1a768:	0002b48c 	.word	0x0002b48c
   1a76c:	0002b4bc 	.word	0x0002b4bc

0001a770 <bt_gatt_foreach_attr_type>:
{
   1a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a774:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a778:	9100      	str	r1, [sp, #0]
   1a77a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a77c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a780:	2d00      	cmp	r5, #0
   1a782:	bf08      	it	eq
   1a784:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a786:	4b24      	ldr	r3, [pc, #144]	; (1a818 <bt_gatt_foreach_attr_type+0xa8>)
   1a788:	881b      	ldrh	r3, [r3, #0]
   1a78a:	4283      	cmp	r3, r0
{
   1a78c:	4607      	mov	r7, r0
   1a78e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a790:	d23c      	bcs.n	1a80c <bt_gatt_foreach_attr_type+0x9c>
}
   1a792:	b003      	add	sp, #12
   1a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a798:	6873      	ldr	r3, [r6, #4]
   1a79a:	4423      	add	r3, r4
   1a79c:	42bb      	cmp	r3, r7
   1a79e:	d232      	bcs.n	1a806 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1a7a0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a7a2:	3608      	adds	r6, #8
   1a7a4:	4b1d      	ldr	r3, [pc, #116]	; (1a81c <bt_gatt_foreach_attr_type+0xac>)
   1a7a6:	429e      	cmp	r6, r3
   1a7a8:	d3f6      	bcc.n	1a798 <bt_gatt_foreach_attr_type+0x28>
   1a7aa:	e7f2      	b.n	1a792 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a7ac:	5889      	ldr	r1, [r1, r2]
   1a7ae:	9301      	str	r3, [sp, #4]
   1a7b0:	4640      	mov	r0, r8
   1a7b2:	f00d f8d5 	bl	27960 <bt_uuid_cmp>
   1a7b6:	9b01      	ldr	r3, [sp, #4]
   1a7b8:	b190      	cbz	r0, 1a7e0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a7ba:	3401      	adds	r4, #1
   1a7bc:	f10a 0a01 	add.w	sl, sl, #1
   1a7c0:	b2a4      	uxth	r4, r4
   1a7c2:	6873      	ldr	r3, [r6, #4]
   1a7c4:	4553      	cmp	r3, sl
   1a7c6:	d9ec      	bls.n	1a7a2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a7c8:	9b00      	ldr	r3, [sp, #0]
   1a7ca:	429c      	cmp	r4, r3
   1a7cc:	d8e1      	bhi.n	1a792 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a7ce:	42bc      	cmp	r4, r7
   1a7d0:	d3f3      	bcc.n	1a7ba <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a7d2:	6831      	ldr	r1, [r6, #0]
   1a7d4:	fb0b f20a 	mul.w	r2, fp, sl
   1a7d8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a7da:	f1b8 0f00 	cmp.w	r8, #0
   1a7de:	d1e5      	bne.n	1a7ac <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1a7e0:	f1b9 0f00 	cmp.w	r9, #0
   1a7e4:	d10b      	bne.n	1a7fe <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1a7e6:	3d01      	subs	r5, #1
   1a7e8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a7ea:	4618      	mov	r0, r3
   1a7ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a7f0:	4621      	mov	r1, r4
   1a7f2:	4798      	blx	r3
	if (!*num_matches) {
   1a7f4:	2d00      	cmp	r5, #0
   1a7f6:	d0cc      	beq.n	1a792 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a7f8:	2800      	cmp	r0, #0
   1a7fa:	d1de      	bne.n	1a7ba <bt_gatt_foreach_attr_type+0x4a>
   1a7fc:	e7c9      	b.n	1a792 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a7fe:	68da      	ldr	r2, [r3, #12]
   1a800:	4591      	cmp	r9, r2
   1a802:	d1da      	bne.n	1a7ba <bt_gatt_foreach_attr_type+0x4a>
   1a804:	e7ef      	b.n	1a7e6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a806:	f04f 0a00 	mov.w	sl, #0
   1a80a:	e7da      	b.n	1a7c2 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a80c:	4e04      	ldr	r6, [pc, #16]	; (1a820 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1a80e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a810:	f04f 0b14 	mov.w	fp, #20
   1a814:	e7c6      	b.n	1a7a4 <bt_gatt_foreach_attr_type+0x34>
   1a816:	bf00      	nop
   1a818:	20003c96 	.word	0x20003c96
   1a81c:	0002b4bc 	.word	0x0002b4bc
   1a820:	0002b48c 	.word	0x0002b48c

0001a824 <db_hash_gen>:
{
   1a824:	b530      	push	{r4, r5, lr}
   1a826:	b0cf      	sub	sp, #316	; 0x13c
	uint8_t key[16] = {};
   1a828:	2300      	movs	r3, #0
{
   1a82a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a82c:	aa22      	add	r2, sp, #136	; 0x88
   1a82e:	4669      	mov	r1, sp
   1a830:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1a832:	e9cd 3300 	strd	r3, r3, [sp]
   1a836:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a83a:	f00c fe2c 	bl	27496 <tc_cmac_setup>
   1a83e:	b958      	cbnz	r0, 1a858 <db_hash_gen+0x34>
		BT_ERR("Unable to setup AES CMAC");
   1a840:	4b16      	ldr	r3, [pc, #88]	; (1a89c <db_hash_gen+0x78>)
		BT_ERR("Unable to calculate hash");
   1a842:	9309      	str	r3, [sp, #36]	; 0x24
   1a844:	4816      	ldr	r0, [pc, #88]	; (1a8a0 <db_hash_gen+0x7c>)
   1a846:	2302      	movs	r3, #2
   1a848:	aa08      	add	r2, sp, #32
   1a84a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a84e:	9308      	str	r3, [sp, #32]
   1a850:	f00e fa4e 	bl	28cf0 <z_log_msg_static_create.constprop.0>
}
   1a854:	b04f      	add	sp, #316	; 0x13c
   1a856:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a858:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a85c:	2001      	movs	r0, #1
   1a85e:	4a11      	ldr	r2, [pc, #68]	; (1a8a4 <db_hash_gen+0x80>)
   1a860:	ab0a      	add	r3, sp, #40	; 0x28
   1a862:	f00e fbf1 	bl	29048 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a866:	4810      	ldr	r0, [pc, #64]	; (1a8a8 <db_hash_gen+0x84>)
   1a868:	a90a      	add	r1, sp, #40	; 0x28
   1a86a:	f00c feaa 	bl	275c2 <tc_cmac_final>
   1a86e:	b908      	cbnz	r0, 1a874 <db_hash_gen+0x50>
		BT_ERR("Unable to calculate hash");
   1a870:	4b0e      	ldr	r3, [pc, #56]	; (1a8ac <db_hash_gen+0x88>)
   1a872:	e7e6      	b.n	1a842 <db_hash_gen+0x1e>
   1a874:	4b0c      	ldr	r3, [pc, #48]	; (1a8a8 <db_hash_gen+0x84>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a876:	2208      	movs	r2, #8
   1a878:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a87c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a87e:	780d      	ldrb	r5, [r1, #0]
   1a880:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a884:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a886:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1a88a:	d1f7      	bne.n	1a87c <db_hash_gen+0x58>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1a88c:	b10c      	cbz	r4, 1a892 <db_hash_gen+0x6e>
		db_hash_store();
   1a88e:	f7ff faeb 	bl	19e68 <db_hash_store>
   1a892:	2104      	movs	r1, #4
   1a894:	4806      	ldr	r0, [pc, #24]	; (1a8b0 <db_hash_gen+0x8c>)
   1a896:	f00e fa0d 	bl	28cb4 <atomic_or>
   1a89a:	e7db      	b.n	1a854 <db_hash_gen+0x30>
   1a89c:	0002def8 	.word	0x0002def8
   1a8a0:	0002b4fc 	.word	0x0002b4fc
   1a8a4:	00028bff 	.word	0x00028bff
   1a8a8:	20001fa8 	.word	0x20001fa8
   1a8ac:	0002df11 	.word	0x0002df11
   1a8b0:	200020a8 	.word	0x200020a8

0001a8b4 <db_hash_read>:
{
   1a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a8b8:	491b      	ldr	r1, [pc, #108]	; (1a928 <db_hash_read+0x74>)
{
   1a8ba:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1a8be:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a8c0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a8c4:	4615      	mov	r5, r2
   1a8c6:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a8c8:	f010 f8cb 	bl	2aa62 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a8cc:	4817      	ldr	r0, [pc, #92]	; (1a92c <db_hash_read+0x78>)
   1a8ce:	f00e f9eb 	bl	28ca8 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a8d2:	0741      	lsls	r1, r0, #29
   1a8d4:	d402      	bmi.n	1a8dc <db_hash_read+0x28>
		db_hash_gen(true);
   1a8d6:	2001      	movs	r0, #1
   1a8d8:	f7ff ffa4 	bl	1a824 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1a8dc:	4640      	mov	r0, r8
   1a8de:	f7ff f9d9 	bl	19c94 <find_cf_cfg>
	if (cfg &&
   1a8e2:	b168      	cbz	r0, 1a900 <db_hash_read+0x4c>
   1a8e4:	7a03      	ldrb	r3, [r0, #8]
   1a8e6:	07da      	lsls	r2, r3, #31
   1a8e8:	d50a      	bpl.n	1a900 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a8ea:	f100 040c 	add.w	r4, r0, #12
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	f00e f9da 	bl	28ca8 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1a8f4:	07c3      	lsls	r3, r0, #31
   1a8f6:	d403      	bmi.n	1a900 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a8f8:	2102      	movs	r1, #2
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f00e f9da 	bl	28cb4 <atomic_or>
	if (offset > value_len) {
   1a900:	2e10      	cmp	r6, #16
   1a902:	d80d      	bhi.n	1a920 <db_hash_read+0x6c>
	len = MIN(buf_len, value_len - offset);
   1a904:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1a908:	4909      	ldr	r1, [pc, #36]	; (1a930 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1a90a:	42bc      	cmp	r4, r7
   1a90c:	bfa8      	it	ge
   1a90e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a910:	4622      	mov	r2, r4
   1a912:	4431      	add	r1, r6
   1a914:	4628      	mov	r0, r5
   1a916:	f00c ff8a 	bl	2782e <memcpy>
}
   1a91a:	4620      	mov	r0, r4
   1a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a920:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a924:	e7f9      	b.n	1a91a <db_hash_read+0x66>
   1a926:	bf00      	nop
   1a928:	20001ff8 	.word	0x20001ff8
   1a92c:	200020a8 	.word	0x200020a8
   1a930:	20001fa8 	.word	0x20001fa8

0001a934 <db_hash_process>:
{
   1a934:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a936:	4827      	ldr	r0, [pc, #156]	; (1a9d4 <db_hash_process+0xa0>)
   1a938:	f06f 0108 	mvn.w	r1, #8
   1a93c:	f00e f9c9 	bl	28cd2 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1a940:	0700      	lsls	r0, r0, #28
   1a942:	d542      	bpl.n	1a9ca <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a944:	4823      	ldr	r0, [pc, #140]	; (1a9d4 <db_hash_process+0xa0>)
   1a946:	f00e f9af 	bl	28ca8 <atomic_get>
   1a94a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a94c:	0759      	lsls	r1, r3, #29
   1a94e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a952:	d401      	bmi.n	1a958 <db_hash_process+0x24>
			db_hash_gen(false);
   1a954:	f7ff ff66 	bl	1a824 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1a958:	491f      	ldr	r1, [pc, #124]	; (1a9d8 <db_hash_process+0xa4>)
   1a95a:	2210      	movs	r2, #16
   1a95c:	1888      	adds	r0, r1, r2
   1a95e:	f00c ff3d 	bl	277dc <memcmp>
   1a962:	b948      	cbnz	r0, 1a978 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1a964:	481d      	ldr	r0, [pc, #116]	; (1a9dc <db_hash_process+0xa8>)
   1a966:	f010 f868 	bl	2aa3a <k_work_cancel_delayable>
}
   1a96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a96e:	4819      	ldr	r0, [pc, #100]	; (1a9d4 <db_hash_process+0xa0>)
   1a970:	f06f 0101 	mvn.w	r1, #1
   1a974:	f00e b9ad 	b.w	28cd2 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a978:	4c19      	ldr	r4, [pc, #100]	; (1a9e0 <db_hash_process+0xac>)
   1a97a:	2101      	movs	r1, #1
   1a97c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1a980:	f00e f998 	bl	28cb4 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a984:	07c2      	lsls	r2, r0, #31
   1a986:	d410      	bmi.n	1a9aa <db_hash_process+0x76>
		gatt_sc.start = start;
   1a988:	4b16      	ldr	r3, [pc, #88]	; (1a9e4 <db_hash_process+0xb0>)
   1a98a:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a98c:	4811      	ldr	r0, [pc, #68]	; (1a9d4 <db_hash_process+0xa0>)
   1a98e:	f00e f98b 	bl	28ca8 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1a992:	0783      	lsls	r3, r0, #30
   1a994:	d405      	bmi.n	1a9a2 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a996:	4811      	ldr	r0, [pc, #68]	; (1a9dc <db_hash_process+0xa8>)
   1a998:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a99c:	2300      	movs	r3, #0
   1a99e:	f007 f8ff 	bl	21ba0 <k_work_reschedule>
}
   1a9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1a9a6:	f7ff ba5f 	b.w	19e68 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1a9aa:	8b23      	ldrh	r3, [r4, #24]
   1a9ac:	8b62      	ldrh	r2, [r4, #26]
   1a9ae:	2b01      	cmp	r3, #1
   1a9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a9b4:	d805      	bhi.n	1a9c2 <db_hash_process+0x8e>
   1a9b6:	429a      	cmp	r2, r3
   1a9b8:	d0f3      	beq.n	1a9a2 <db_hash_process+0x6e>
		*end = new_end;
   1a9ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a9be:	8363      	strh	r3, [r4, #26]
   1a9c0:	e7e4      	b.n	1a98c <db_hash_process+0x58>
	if (*end < new_end) {
   1a9c2:	429a      	cmp	r2, r3
		*start = new_start;
   1a9c4:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1a9c6:	d0e1      	beq.n	1a98c <db_hash_process+0x58>
   1a9c8:	e7f7      	b.n	1a9ba <db_hash_process+0x86>
}
   1a9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1a9ce:	2001      	movs	r0, #1
   1a9d0:	f7ff bf28 	b.w	1a824 <db_hash_gen>
   1a9d4:	200020a8 	.word	0x200020a8
   1a9d8:	20001fa8 	.word	0x20001fa8
   1a9dc:	20002078 	.word	0x20002078
   1a9e0:	20002058 	.word	0x20002058
   1a9e4:	ffff0001 	.word	0xffff0001

0001a9e8 <ccc_set_direct>:
{
   1a9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a9ec:	b0b8      	sub	sp, #224	; 0xe0
   1a9ee:	af00      	add	r7, sp, #0
   1a9f0:	4689      	mov	r9, r1
   1a9f2:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a9f4:	4942      	ldr	r1, [pc, #264]	; (1ab00 <ccc_set_direct+0x118>)
   1a9f6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1a9fa:	463a      	mov	r2, r7
{
   1a9fc:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a9fe:	f00c fbb2 	bl	27166 <settings_name_steq>
   1aa02:	b938      	cbnz	r0, 1aa14 <ccc_set_direct+0x2c>
   1aa04:	f7ff f968 	bl	19cd8 <ccc_set_direct.part.0>
   1aa08:	4605      	mov	r5, r0
}
   1aa0a:	4628      	mov	r0, r5
   1aa0c:	37e0      	adds	r7, #224	; 0xe0
   1aa0e:	46bd      	mov	sp, r7
   1aa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1aa14:	683c      	ldr	r4, [r7, #0]
		settings_name_next(name, &next);
   1aa16:	1d39      	adds	r1, r7, #4
   1aa18:	4620      	mov	r0, r4
   1aa1a:	f00c fbc7 	bl	271ac <settings_name_next>
		if (!name) {
   1aa1e:	b974      	cbnz	r4, 1aa3e <ccc_set_direct+0x56>
			BT_ERR("Insufficient number of arguments");
   1aa20:	4b38      	ldr	r3, [pc, #224]	; (1ab04 <ccc_set_direct+0x11c>)
   1aa22:	637b      	str	r3, [r7, #52]	; 0x34
   1aa24:	4838      	ldr	r0, [pc, #224]	; (1ab08 <ccc_set_direct+0x120>)
   1aa26:	2302      	movs	r3, #2
   1aa28:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1aa2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aa30:	633b      	str	r3, [r7, #48]	; 0x30
   1aa32:	f00e f95d 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1aa36:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1aa3a:	4625      	mov	r5, r4
   1aa3c:	e7e5      	b.n	1aa0a <ccc_set_direct+0x22>
		} else if (!next) {
   1aa3e:	6878      	ldr	r0, [r7, #4]
   1aa40:	b9d8      	cbnz	r0, 1aa7a <ccc_set_direct+0x92>
		err = bt_settings_decode_key(name, &addr);
   1aa42:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1aa46:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1aa48:	4651      	mov	r1, sl
   1aa4a:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1aa4c:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1aa4e:	f00c ff63 	bl	27918 <bt_settings_decode_key>
		if (err) {
   1aa52:	4605      	mov	r5, r0
   1aa54:	b338      	cbz	r0, 1aaa6 <ccc_set_direct+0xbe>
			BT_ERR("Unable to decode address %s", name);
   1aa56:	466d      	mov	r5, sp
   1aa58:	b088      	sub	sp, #32
   1aa5a:	466a      	mov	r2, sp
   1aa5c:	4b2b      	ldr	r3, [pc, #172]	; (1ab0c <ccc_set_direct+0x124>)
   1aa5e:	482a      	ldr	r0, [pc, #168]	; (1ab08 <ccc_set_direct+0x120>)
   1aa60:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1aa64:	2302      	movs	r3, #2
   1aa66:	7713      	strb	r3, [r2, #28]
   1aa68:	4b29      	ldr	r3, [pc, #164]	; (1ab10 <ccc_set_direct+0x128>)
   1aa6a:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa6e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1aa72:	f00e f93d 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1aa76:	46ad      	mov	sp, r5
   1aa78:	e7dd      	b.n	1aa36 <ccc_set_direct+0x4e>
			unsigned long next_id = strtoul(next, NULL, 10);
   1aa7a:	220a      	movs	r2, #10
   1aa7c:	2100      	movs	r1, #0
   1aa7e:	f00c fdeb 	bl	27658 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1aa82:	2800      	cmp	r0, #0
   1aa84:	d0dd      	beq.n	1aa42 <ccc_set_direct+0x5a>
				BT_ERR("Invalid local identity %lu", next_id);
   1aa86:	466c      	mov	r4, sp
   1aa88:	b088      	sub	sp, #32
   1aa8a:	466a      	mov	r2, sp
   1aa8c:	4b21      	ldr	r3, [pc, #132]	; (1ab14 <ccc_set_direct+0x12c>)
   1aa8e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aa92:	2303      	movs	r3, #3
   1aa94:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa98:	481b      	ldr	r0, [pc, #108]	; (1ab08 <ccc_set_direct+0x120>)
   1aa9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aa9e:	f00e f927 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1aaa2:	46a5      	mov	sp, r4
				return -EINVAL;
   1aaa4:	e7c7      	b.n	1aa36 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1aaa6:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1aaaa:	f1b9 0f00 	cmp.w	r9, #0
   1aaae:	d024      	beq.n	1aafa <ccc_set_direct+0x112>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1aab0:	f107 0920 	add.w	r9, r7, #32
   1aab4:	22c0      	movs	r2, #192	; 0xc0
   1aab6:	4649      	mov	r1, r9
   1aab8:	4640      	mov	r0, r8
   1aaba:	47b0      	blx	r6
			if (len < 0) {
   1aabc:	1e04      	subs	r4, r0, #0
   1aabe:	da0f      	bge.n	1aae0 <ccc_set_direct+0xf8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1aac0:	466d      	mov	r5, sp
   1aac2:	b088      	sub	sp, #32
   1aac4:	466a      	mov	r2, sp
   1aac6:	4b14      	ldr	r3, [pc, #80]	; (1ab18 <ccc_set_direct+0x130>)
   1aac8:	480f      	ldr	r0, [pc, #60]	; (1ab08 <ccc_set_direct+0x120>)
   1aaca:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1aace:	2303      	movs	r3, #3
   1aad0:	f842 3f10 	str.w	r3, [r2, #16]!
   1aad4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aad8:	f00e f90a 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1aadc:	46ad      	mov	sp, r5
				return len;
   1aade:	e7ac      	b.n	1aa3a <ccc_set_direct+0x52>
			load.count = len / sizeof(*ccc_store);
   1aae0:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1aae2:	f8c7 9018 	str.w	r9, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   1aae6:	61fc      	str	r4, [r7, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1aae8:	4a0c      	ldr	r2, [pc, #48]	; (1ab1c <ccc_set_direct+0x134>)
   1aaea:	f107 0310 	add.w	r3, r7, #16
   1aaee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1aaf2:	2001      	movs	r0, #1
   1aaf4:	f00e faa8 	bl	29048 <bt_gatt_foreach_attr>
	return 0;
   1aaf8:	e787      	b.n	1aa0a <ccc_set_direct+0x22>
			load.count = 0;
   1aafa:	e9c7 0006 	strd	r0, r0, [r7, #24]
   1aafe:	e7f3      	b.n	1aae8 <ccc_set_direct+0x100>
   1ab00:	0002df2a 	.word	0x0002df2a
   1ab04:	0002cc42 	.word	0x0002cc42
   1ab08:	0002b4fc 	.word	0x0002b4fc
   1ab0c:	0002de11 	.word	0x0002de11
   1ab10:	01000003 	.word	0x01000003
   1ab14:	0002de2d 	.word	0x0002de2d
   1ab18:	0002ddf0 	.word	0x0002ddf0
   1ab1c:	0001a0f9 	.word	0x0001a0f9

0001ab20 <bt_gatt_attr_next>:
{
   1ab20:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1ab22:	2300      	movs	r3, #0
   1ab24:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1ab26:	f7ff fdf3 	bl	1a710 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1ab2a:	1c41      	adds	r1, r0, #1
   1ab2c:	b289      	uxth	r1, r1
   1ab2e:	4608      	mov	r0, r1
   1ab30:	4a03      	ldr	r2, [pc, #12]	; (1ab40 <bt_gatt_attr_next+0x20>)
   1ab32:	ab01      	add	r3, sp, #4
   1ab34:	f00e fa88 	bl	29048 <bt_gatt_foreach_attr>
}
   1ab38:	9801      	ldr	r0, [sp, #4]
   1ab3a:	b003      	add	sp, #12
   1ab3c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ab40:	00028b4d 	.word	0x00028b4d

0001ab44 <gatt_indicate>:
{
   1ab44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab48:	4615      	mov	r5, r2
   1ab4a:	b086      	sub	sp, #24
   1ab4c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ab4e:	2294      	movs	r2, #148	; 0x94
   1ab50:	6869      	ldr	r1, [r5, #4]
{
   1ab52:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ab54:	f00e fa83 	bl	2905e <bt_gatt_check_perm>
   1ab58:	4680      	mov	r8, r0
   1ab5a:	b178      	cbz	r0, 1ab7c <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   1ab5c:	4b36      	ldr	r3, [pc, #216]	; (1ac38 <gatt_indicate+0xf4>)
   1ab5e:	9305      	str	r3, [sp, #20]
   1ab60:	4836      	ldr	r0, [pc, #216]	; (1ac3c <gatt_indicate+0xf8>)
   1ab62:	2302      	movs	r3, #2
   1ab64:	aa04      	add	r2, sp, #16
   1ab66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1ab6a:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   1ab6e:	9304      	str	r3, [sp, #16]
   1ab70:	f00e f8be 	bl	28cf0 <z_log_msg_static_create.constprop.0>
}
   1ab74:	4628      	mov	r0, r5
   1ab76:	b006      	add	sp, #24
   1ab78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1ab7c:	6869      	ldr	r1, [r5, #4]
   1ab7e:	2202      	movs	r2, #2
   1ab80:	4630      	mov	r0, r6
   1ab82:	f00e fa9f 	bl	290c4 <bt_gatt_is_subscribed>
   1ab86:	b960      	cbnz	r0, 1aba2 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   1ab88:	4b2d      	ldr	r3, [pc, #180]	; (1ac40 <gatt_indicate+0xfc>)
   1ab8a:	9305      	str	r3, [sp, #20]
   1ab8c:	482b      	ldr	r0, [pc, #172]	; (1ac3c <gatt_indicate+0xf8>)
   1ab8e:	2302      	movs	r3, #2
   1ab90:	aa04      	add	r2, sp, #16
   1ab92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ab96:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1ab98:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   1ab9c:	f00e f8a8 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1aba0:	e7e8      	b.n	1ab74 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1aba2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1aba6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1aba8:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1abaa:	f7fe ff6f 	bl	19a8c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1abae:	3702      	adds	r7, #2
	if (!req) {
   1abb0:	4604      	mov	r4, r0
   1abb2:	b910      	cbnz	r0, 1abba <gatt_indicate+0x76>
		return -ENOMEM;
   1abb4:	f06f 050b 	mvn.w	r5, #11
   1abb8:	e7dc      	b.n	1ab74 <gatt_indicate+0x30>
	req->func = func;
   1abba:	4b22      	ldr	r3, [pc, #136]	; (1ac44 <gatt_indicate+0x100>)
	req->len = len;
   1abbc:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1abbe:	211d      	movs	r1, #29
   1abc0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1abc2:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1abc6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1abc8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1abca:	463a      	mov	r2, r7
   1abcc:	4630      	mov	r0, r6
   1abce:	f7fe fb69 	bl	192a4 <bt_att_create_pdu>
	if (!buf) {
   1abd2:	4607      	mov	r7, r0
   1abd4:	b968      	cbnz	r0, 1abf2 <gatt_indicate+0xae>
		BT_WARN("No buffer available to send indication");
   1abd6:	4b1c      	ldr	r3, [pc, #112]	; (1ac48 <gatt_indicate+0x104>)
   1abd8:	9305      	str	r3, [sp, #20]
   1abda:	4818      	ldr	r0, [pc, #96]	; (1ac3c <gatt_indicate+0xf8>)
   1abdc:	2302      	movs	r3, #2
   1abde:	aa04      	add	r2, sp, #16
   1abe0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1abe4:	9304      	str	r3, [sp, #16]
   1abe6:	f00e f883 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1abea:	4620      	mov	r0, r4
   1abec:	f7fe ff70 	bl	19ad0 <bt_att_req_free>
   1abf0:	e7e0      	b.n	1abb4 <gatt_indicate+0x70>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1abf2:	2301      	movs	r3, #1
   1abf4:	4642      	mov	r2, r8
   1abf6:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1abf8:	f107 0a08 	add.w	sl, r7, #8
   1abfc:	f00d ff9f 	bl	28b3e <bt_att_set_tx_meta_data>
   1ac00:	2102      	movs	r1, #2
   1ac02:	4650      	mov	r0, sl
   1ac04:	f00e fff1 	bl	29bea <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1ac08:	4680      	mov	r8, r0
   1ac0a:	8aa9      	ldrh	r1, [r5, #20]
   1ac0c:	f828 9b02 	strh.w	r9, [r8], #2
   1ac10:	4650      	mov	r0, sl
   1ac12:	f00e ffea 	bl	29bea <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1ac16:	8aaa      	ldrh	r2, [r5, #20]
   1ac18:	6929      	ldr	r1, [r5, #16]
   1ac1a:	4640      	mov	r0, r8
   1ac1c:	f00c fe07 	bl	2782e <memcpy>
	req->buf = buf;
   1ac20:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1ac22:	4621      	mov	r1, r4
   1ac24:	4630      	mov	r0, r6
   1ac26:	f00d ff4e 	bl	28ac6 <bt_att_req_send>
	if (err) {
   1ac2a:	4605      	mov	r5, r0
   1ac2c:	2800      	cmp	r0, #0
   1ac2e:	d0a1      	beq.n	1ab74 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1ac30:	4620      	mov	r0, r4
   1ac32:	f7fe ff4d 	bl	19ad0 <bt_att_req_free>
   1ac36:	e79d      	b.n	1ab74 <gatt_indicate+0x30>
   1ac38:	0002df31 	.word	0x0002df31
   1ac3c:	0002b4fc 	.word	0x0002b4fc
   1ac40:	0002df47 	.word	0x0002df47
   1ac44:	00028b67 	.word	0x00028b67
   1ac48:	0002df72 	.word	0x0002df72

0001ac4c <bt_gatt_indicate>:
{
   1ac4c:	b530      	push	{r4, r5, lr}
   1ac4e:	4604      	mov	r4, r0
   1ac50:	b08b      	sub	sp, #44	; 0x2c
   1ac52:	4837      	ldr	r0, [pc, #220]	; (1ad30 <bt_gatt_indicate+0xe4>)
   1ac54:	f00e f828 	bl	28ca8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ac58:	0742      	lsls	r2, r0, #29
{
   1ac5a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ac5c:	d561      	bpl.n	1ad22 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1ac5e:	b114      	cbz	r4, 1ac66 <bt_gatt_indicate+0x1a>
   1ac60:	7b63      	ldrb	r3, [r4, #13]
   1ac62:	2b07      	cmp	r3, #7
   1ac64:	d160      	bne.n	1ad28 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1ac66:	6868      	ldr	r0, [r5, #4]
   1ac68:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ac6a:	f7ff fd51 	bl	1a710 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1ac6e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ac70:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1ac74:	b33a      	cbz	r2, 1acc6 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ac76:	a905      	add	r1, sp, #20
   1ac78:	9102      	str	r1, [sp, #8]
   1ac7a:	492e      	ldr	r1, [pc, #184]	; (1ad34 <bt_gatt_indicate+0xe8>)
   1ac7c:	9101      	str	r1, [sp, #4]
   1ac7e:	2101      	movs	r1, #1
	found->attr = NULL;
   1ac80:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ac82:	9100      	str	r1, [sp, #0]
   1ac84:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1ac88:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ac8a:	f7ff fd71 	bl	1a770 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1ac8e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1ac90:	b91b      	cbnz	r3, 1ac9a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1ac92:	f06f 0001 	mvn.w	r0, #1
}
   1ac96:	b00b      	add	sp, #44	; 0x2c
   1ac98:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1ac9a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ac9c:	9b05      	ldr	r3, [sp, #20]
   1ac9e:	6818      	ldr	r0, [r3, #0]
   1aca0:	2300      	movs	r3, #0
   1aca2:	f88d 3010 	strb.w	r3, [sp, #16]
   1aca6:	a904      	add	r1, sp, #16
   1aca8:	f642 0303 	movw	r3, #10243	; 0x2803
   1acac:	f8ad 3012 	strh.w	r3, [sp, #18]
   1acb0:	f00c fe56 	bl	27960 <bt_uuid_cmp>
   1acb4:	b970      	cbnz	r0, 1acd4 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1acb6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1acb8:	68c3      	ldr	r3, [r0, #12]
   1acba:	799b      	ldrb	r3, [r3, #6]
   1acbc:	069b      	lsls	r3, r3, #26
   1acbe:	d405      	bmi.n	1accc <bt_gatt_indicate+0x80>
			return -EINVAL;
   1acc0:	f06f 0015 	mvn.w	r0, #21
   1acc4:	e7e7      	b.n	1ac96 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1acc6:	2800      	cmp	r0, #0
   1acc8:	d1e8      	bne.n	1ac9c <bt_gatt_indicate+0x50>
   1acca:	e7e2      	b.n	1ac92 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1accc:	f00e f96e 	bl	28fac <bt_gatt_attr_value_handle>
   1acd0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1acd4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1acd8:	b13c      	cbz	r4, 1acea <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1acda:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1acdc:	4601      	mov	r1, r0
		params->_ref = 1;
   1acde:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1ace0:	462a      	mov	r2, r5
   1ace2:	4620      	mov	r0, r4
   1ace4:	f7ff ff2e 	bl	1ab44 <gatt_indicate>
   1ace8:	e7d5      	b.n	1ac96 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1acea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1acee:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1acf0:	2302      	movs	r3, #2
   1acf2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1acf6:	f642 1302 	movw	r3, #10498	; 0x2902
   1acfa:	f8ad 3012 	strh.w	r3, [sp, #18]
   1acfe:	ab05      	add	r3, sp, #20
   1ad00:	9302      	str	r3, [sp, #8]
   1ad02:	4b0d      	ldr	r3, [pc, #52]	; (1ad38 <bt_gatt_indicate+0xec>)
   1ad04:	9301      	str	r3, [sp, #4]
   1ad06:	2301      	movs	r3, #1
   1ad08:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1ad0a:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ad0c:	4623      	mov	r3, r4
   1ad0e:	aa04      	add	r2, sp, #16
   1ad10:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1ad14:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ad16:	f88d 4010 	strb.w	r4, [sp, #16]
   1ad1a:	f7ff fd29 	bl	1a770 <bt_gatt_foreach_attr_type>
	return data.err;
   1ad1e:	9807      	ldr	r0, [sp, #28]
   1ad20:	e7b9      	b.n	1ac96 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1ad22:	f06f 000a 	mvn.w	r0, #10
   1ad26:	e7b6      	b.n	1ac96 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1ad28:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ad2c:	e7b3      	b.n	1ac96 <bt_gatt_indicate+0x4a>
   1ad2e:	bf00      	nop
   1ad30:	2000041c 	.word	0x2000041c
   1ad34:	00028b8d 	.word	0x00028b8d
   1ad38:	0001b0b1 	.word	0x0001b0b1

0001ad3c <sc_process>:
{
   1ad3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1ad3e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1ad42:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1ad46:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1ad4a:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1ad4c:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   1ad50:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1ad54:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ad58:	f06f 0101 	mvn.w	r1, #1
   1ad5c:	4628      	mov	r0, r5
   1ad5e:	f00d ffb8 	bl	28cd2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1ad62:	4b0d      	ldr	r3, [pc, #52]	; (1ad98 <sc_process+0x5c>)
   1ad64:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1ad68:	4b0c      	ldr	r3, [pc, #48]	; (1ad9c <sc_process+0x60>)
   1ad6a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1ad6e:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1ad70:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1ad72:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1ad76:	2304      	movs	r3, #4
	sc->start = 0U;
   1ad78:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1ad7c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1ad80:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1ad84:	4631      	mov	r1, r6
   1ad86:	f7ff ff61 	bl	1ac4c <bt_gatt_indicate>
   1ad8a:	b918      	cbnz	r0, 1ad94 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ad8c:	2102      	movs	r1, #2
   1ad8e:	4628      	mov	r0, r5
   1ad90:	f00d ff90 	bl	28cb4 <atomic_or>
}
   1ad94:	b002      	add	sp, #8
   1ad96:	bd70      	pop	{r4, r5, r6, pc}
   1ad98:	0002be2c 	.word	0x0002be2c
   1ad9c:	0001a5f9 	.word	0x0001a5f9

0001ada0 <update_ccc>:
{
   1ada0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ada4:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1ada6:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ada8:	4b3c      	ldr	r3, [pc, #240]	; (1ae9c <update_ccc+0xfc>)
{
   1adaa:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1adac:	6882      	ldr	r2, [r0, #8]
   1adae:	429a      	cmp	r2, r3
{
   1adb0:	af00      	add	r7, sp, #0
   1adb2:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1adb4:	d122      	bne.n	1adfc <update_ccc+0x5c>
	ccc = attr->user_data;
   1adb6:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (!cfg->value ||
   1adba:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1adbe:	b1eb      	cbz	r3, 1adfc <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1adc0:	4642      	mov	r2, r8
   1adc2:	4620      	mov	r0, r4
   1adc4:	f812 1b01 	ldrb.w	r1, [r2], #1
   1adc8:	f00d f8ed 	bl	27fa6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1adcc:	b1b0      	cbz	r0, 1adfc <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1adce:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1add2:	4629      	mov	r1, r5
   1add4:	4620      	mov	r0, r4
   1add6:	f00e f942 	bl	2905e <bt_gatt_check_perm>
		if (err) {
   1adda:	b328      	cbz	r0, 1ae28 <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1addc:	2803      	cmp	r0, #3
   1adde:	d112      	bne.n	1ae06 <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
   1ade0:	466c      	mov	r4, sp
   1ade2:	b088      	sub	sp, #32
   1ade4:	466a      	mov	r2, sp
   1ade6:	4b2e      	ldr	r3, [pc, #184]	; (1aea0 <update_ccc+0x100>)
   1ade8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1adec:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1adf0:	f842 0f10 	str.w	r0, [r2, #16]!
   1adf4:	482b      	ldr	r0, [pc, #172]	; (1aea4 <update_ccc+0x104>)
   1adf6:	f00d ff7b 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1adfa:	46a5      	mov	sp, r4
}
   1adfc:	2001      	movs	r0, #1
   1adfe:	3724      	adds	r7, #36	; 0x24
   1ae00:	46bd      	mov	sp, r7
   1ae02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sec = BT_SECURITY_L3;
   1ae06:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1ae08:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1ae0a:	bf14      	ite	ne
   1ae0c:	f04f 0902 	movne.w	r9, #2
   1ae10:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
   1ae14:	f00d f8c5 	bl	27fa2 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ae18:	4581      	cmp	r9, r0
   1ae1a:	d905      	bls.n	1ae28 <update_ccc+0x88>
				if (data->sec < sec) {
   1ae1c:	7933      	ldrb	r3, [r6, #4]
   1ae1e:	454b      	cmp	r3, r9
   1ae20:	d2ec      	bcs.n	1adfc <update_ccc+0x5c>
					data->sec = sec;
   1ae22:	f886 9004 	strb.w	r9, [r6, #4]
   1ae26:	e7e9      	b.n	1adfc <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1ae28:	4641      	mov	r1, r8
   1ae2a:	4628      	mov	r0, r5
   1ae2c:	f00d fe91 	bl	28b52 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1ae30:	4b1d      	ldr	r3, [pc, #116]	; (1aea8 <update_ccc+0x108>)
   1ae32:	4598      	cmp	r8, r3
   1ae34:	d1e2      	bne.n	1adfc <update_ccc+0x5c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ae36:	7a20      	ldrb	r0, [r4, #8]
   1ae38:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ae3c:	f7ff fa26 	bl	1a28c <find_sc_cfg>
	if (!cfg) {
   1ae40:	2800      	cmp	r0, #0
   1ae42:	d0db      	beq.n	1adfc <update_ccc+0x5c>
	if (!(cfg->data.start || cfg->data.end)) {
   1ae44:	8902      	ldrh	r2, [r0, #8]
   1ae46:	8943      	ldrh	r3, [r0, #10]
   1ae48:	ea52 0103 	orrs.w	r1, r2, r3
   1ae4c:	d0d6      	beq.n	1adfc <update_ccc+0x5c>
	index = bt_conn_index(conn);
   1ae4e:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1ae50:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1ae52:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1ae54:	f7fd f9ac 	bl	181b0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ae58:	4914      	ldr	r1, [pc, #80]	; (1aeac <update_ccc+0x10c>)
   1ae5a:	4a15      	ldr	r2, [pc, #84]	; (1aeb0 <update_ccc+0x110>)
   1ae5c:	2318      	movs	r3, #24
   1ae5e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ae62:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ae64:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1ae66:	4a13      	ldr	r2, [pc, #76]	; (1aeb4 <update_ccc+0x114>)
   1ae68:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1ae6a:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ae6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1ae70:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1ae72:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ae74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1ae78:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ae7a:	4620      	mov	r0, r4
   1ae7c:	f7ff fee6 	bl	1ac4c <bt_gatt_indicate>
   1ae80:	2800      	cmp	r0, #0
   1ae82:	d0bb      	beq.n	1adfc <update_ccc+0x5c>
		BT_ERR("SC restore indication failed");
   1ae84:	4b0c      	ldr	r3, [pc, #48]	; (1aeb8 <update_ccc+0x118>)
   1ae86:	61fb      	str	r3, [r7, #28]
   1ae88:	4806      	ldr	r0, [pc, #24]	; (1aea4 <update_ccc+0x104>)
   1ae8a:	2302      	movs	r3, #2
   1ae8c:	f107 0218 	add.w	r2, r7, #24
   1ae90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ae94:	61bb      	str	r3, [r7, #24]
   1ae96:	f00d ff2b 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1ae9a:	e7af      	b.n	1adfc <update_ccc+0x5c>
   1ae9c:	0001a185 	.word	0x0001a185
   1aea0:	0002df99 	.word	0x0002df99
   1aea4:	0002b4fc 	.word	0x0002b4fc
   1aea8:	20000708 	.word	0x20000708
   1aeac:	20002e50 	.word	0x20002e50
   1aeb0:	0002be2c 	.word	0x0002be2c
   1aeb4:	00028f37 	.word	0x00028f37
   1aeb8:	0002dfad 	.word	0x0002dfad

0001aebc <gatt_notify>:
{
   1aebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aec0:	4614      	mov	r4, r2
   1aec2:	b087      	sub	sp, #28
   1aec4:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aec6:	2294      	movs	r2, #148	; 0x94
   1aec8:	6861      	ldr	r1, [r4, #4]
{
   1aeca:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aecc:	f00e f8c7 	bl	2905e <bt_gatt_check_perm>
   1aed0:	b170      	cbz	r0, 1aef0 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   1aed2:	4b2b      	ldr	r3, [pc, #172]	; (1af80 <gatt_notify+0xc4>)
   1aed4:	482b      	ldr	r0, [pc, #172]	; (1af84 <gatt_notify+0xc8>)
   1aed6:	9305      	str	r3, [sp, #20]
   1aed8:	aa04      	add	r2, sp, #16
   1aeda:	2302      	movs	r3, #2
   1aedc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aee0:	9304      	str	r3, [sp, #16]
   1aee2:	f00d ff05 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1aee6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1aeea:	b007      	add	sp, #28
   1aeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1aef0:	6861      	ldr	r1, [r4, #4]
   1aef2:	2201      	movs	r2, #1
   1aef4:	4630      	mov	r0, r6
   1aef6:	f00e f8e5 	bl	290c4 <bt_gatt_is_subscribed>
   1aefa:	b960      	cbnz	r0, 1af16 <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1aefc:	4b22      	ldr	r3, [pc, #136]	; (1af88 <gatt_notify+0xcc>)
   1aefe:	4821      	ldr	r0, [pc, #132]	; (1af84 <gatt_notify+0xc8>)
   1af00:	9305      	str	r3, [sp, #20]
   1af02:	aa04      	add	r2, sp, #16
   1af04:	2302      	movs	r3, #2
   1af06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1af0a:	9304      	str	r3, [sp, #16]
   1af0c:	f00d fef0 	bl	28cf0 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1af10:	f06f 0015 	mvn.w	r0, #21
   1af14:	e7e9      	b.n	1aeea <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1af16:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1af18:	211b      	movs	r1, #27
   1af1a:	3202      	adds	r2, #2
   1af1c:	4630      	mov	r0, r6
   1af1e:	f7fe f9c1 	bl	192a4 <bt_att_create_pdu>
	if (!buf) {
   1af22:	4605      	mov	r5, r0
   1af24:	b960      	cbnz	r0, 1af40 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   1af26:	4b19      	ldr	r3, [pc, #100]	; (1af8c <gatt_notify+0xd0>)
   1af28:	4816      	ldr	r0, [pc, #88]	; (1af84 <gatt_notify+0xc8>)
   1af2a:	9305      	str	r3, [sp, #20]
   1af2c:	aa04      	add	r2, sp, #16
   1af2e:	2302      	movs	r3, #2
   1af30:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1af34:	9304      	str	r3, [sp, #16]
   1af36:	f00d fedb 	bl	28cf0 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1af3a:	f06f 000b 	mvn.w	r0, #11
   1af3e:	e7d4      	b.n	1aeea <gatt_notify+0x2e>
   1af40:	f100 0908 	add.w	r9, r0, #8
   1af44:	2102      	movs	r1, #2
   1af46:	4648      	mov	r0, r9
   1af48:	f00e fe4f 	bl	29bea <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1af4c:	4607      	mov	r7, r0
   1af4e:	89a1      	ldrh	r1, [r4, #12]
   1af50:	f827 8b02 	strh.w	r8, [r7], #2
   1af54:	4648      	mov	r0, r9
   1af56:	f00e fe48 	bl	29bea <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1af5a:	89a2      	ldrh	r2, [r4, #12]
   1af5c:	68a1      	ldr	r1, [r4, #8]
   1af5e:	4638      	mov	r0, r7
   1af60:	f00c fc65 	bl	2782e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1af64:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1af68:	4628      	mov	r0, r5
   1af6a:	2301      	movs	r3, #1
   1af6c:	f00d fde7 	bl	28b3e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1af70:	4629      	mov	r1, r5
   1af72:	4630      	mov	r0, r6
}
   1af74:	b007      	add	sp, #28
   1af76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1af7a:	f00d bd61 	b.w	28a40 <bt_att_send>
   1af7e:	bf00      	nop
   1af80:	0002df31 	.word	0x0002df31
   1af84:	0002b4fc 	.word	0x0002b4fc
   1af88:	0002df47 	.word	0x0002df47
   1af8c:	0002dfca 	.word	0x0002dfca

0001af90 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1af90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1af94:	4b42      	ldr	r3, [pc, #264]	; (1b0a0 <notify_cb.part.0+0x110>)
	ccc = attr->user_data;
   1af96:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1af9a:	4598      	cmp	r8, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1af9c:	b087      	sub	sp, #28
   1af9e:	4607      	mov	r7, r0
   1afa0:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1afa2:	d11e      	bne.n	1afe2 <notify_cb.part.0+0x52>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1afa4:	2600      	movs	r6, #0
   1afa6:	4d3f      	ldr	r5, [pc, #252]	; (1b0a4 <notify_cb.part.0+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1afa8:	46b1      	mov	r9, r6
   1afaa:	2207      	movs	r2, #7
   1afac:	4669      	mov	r1, sp
   1afae:	4628      	mov	r0, r5
   1afb0:	f8cd 9000 	str.w	r9, [sp]
   1afb4:	f8cd 9003 	str.w	r9, [sp, #3]
   1afb8:	f00c fc10 	bl	277dc <memcmp>
   1afbc:	b178      	cbz	r0, 1afde <notify_cb.part.0+0x4e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1afbe:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1afc2:	2207      	movs	r2, #7
   1afc4:	4629      	mov	r1, r5
   1afc6:	f7fd fa5d 	bl	18484 <bt_conn_lookup_state_le>
			if (!conn) {
   1afca:	b9e8      	cbnz	r0, 1b008 <notify_cb.part.0+0x78>
				sc = (struct sc_data *)data->ind_params->data;
   1afcc:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1afce:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1afd2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1afd4:	4629      	mov	r1, r5
   1afd6:	8853      	ldrh	r3, [r2, #2]
   1afd8:	8812      	ldrh	r2, [r2, #0]
   1afda:	f7ff f979 	bl	1a2d0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1afde:	350c      	adds	r5, #12
   1afe0:	b186      	cbz	r6, 1b004 <notify_cb.part.0+0x74>
		if (cfg->value != data->type) {
   1afe2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1afe6:	89a3      	ldrh	r3, [r4, #12]
   1afe8:	429a      	cmp	r2, r3
   1afea:	d106      	bne.n	1affa <notify_cb.part.0+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1afec:	4641      	mov	r1, r8
   1afee:	f811 0b01 	ldrb.w	r0, [r1], #1
   1aff2:	f7fd f9fb 	bl	183ec <bt_conn_lookup_addr_le>
		if (!conn) {
   1aff6:	4606      	mov	r6, r0
   1aff8:	b948      	cbnz	r0, 1b00e <notify_cb.part.0+0x7e>
	return BT_GATT_ITER_CONTINUE;
   1affa:	2701      	movs	r7, #1
}
   1affc:	4638      	mov	r0, r7
   1affe:	b007      	add	sp, #28
   1b000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b004:	2601      	movs	r6, #1
   1b006:	e7d0      	b.n	1afaa <notify_cb.part.0+0x1a>
			bt_conn_unref(conn);
   1b008:	f00c ff32 	bl	27e70 <bt_conn_unref>
   1b00c:	e7e7      	b.n	1afde <notify_cb.part.0+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
   1b00e:	7b43      	ldrb	r3, [r0, #13]
   1b010:	2b07      	cmp	r3, #7
   1b012:	d002      	beq.n	1b01a <notify_cb.part.0+0x8a>
			bt_conn_unref(conn);
   1b014:	f00c ff2c 	bl	27e70 <bt_conn_unref>
			continue;
   1b018:	e7ef      	b.n	1affa <notify_cb.part.0+0x6a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b01a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b01e:	b123      	cbz	r3, 1b02a <notify_cb.part.0+0x9a>
   1b020:	4639      	mov	r1, r7
   1b022:	4798      	blx	r3
   1b024:	b908      	cbnz	r0, 1b02a <notify_cb.part.0+0x9a>
			bt_conn_unref(conn);
   1b026:	4630      	mov	r0, r6
   1b028:	e7f4      	b.n	1b014 <notify_cb.part.0+0x84>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b02a:	4639      	mov	r1, r7
   1b02c:	2294      	movs	r2, #148	; 0x94
   1b02e:	4630      	mov	r0, r6
   1b030:	f00e f815 	bl	2905e <bt_gatt_check_perm>
   1b034:	4607      	mov	r7, r0
   1b036:	b150      	cbz	r0, 1b04e <notify_cb.part.0+0xbe>
			BT_WARN("Link is not encrypted");
   1b038:	4b1b      	ldr	r3, [pc, #108]	; (1b0a8 <notify_cb.part.0+0x118>)
   1b03a:	9305      	str	r3, [sp, #20]
   1b03c:	481b      	ldr	r0, [pc, #108]	; (1b0ac <notify_cb.part.0+0x11c>)
   1b03e:	2302      	movs	r3, #2
   1b040:	aa04      	add	r2, sp, #16
   1b042:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b046:	9304      	str	r3, [sp, #16]
   1b048:	f00d fe52 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1b04c:	e7eb      	b.n	1b026 <notify_cb.part.0+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1b04e:	89a3      	ldrh	r3, [r4, #12]
   1b050:	2b02      	cmp	r3, #2
   1b052:	d116      	bne.n	1b082 <notify_cb.part.0+0xf2>
   1b054:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b058:	079a      	lsls	r2, r3, #30
   1b05a:	d51f      	bpl.n	1b09c <notify_cb.part.0+0x10c>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1b05c:	6922      	ldr	r2, [r4, #16]
   1b05e:	88a1      	ldrh	r1, [r4, #4]
   1b060:	4630      	mov	r0, r6
   1b062:	f7ff fd6f 	bl	1ab44 <gatt_indicate>
			if (err == 0) {
   1b066:	4605      	mov	r5, r0
   1b068:	b918      	cbnz	r0, 1b072 <notify_cb.part.0+0xe2>
				data->ind_params->_ref++;
   1b06a:	6922      	ldr	r2, [r4, #16]
   1b06c:	7d93      	ldrb	r3, [r2, #22]
   1b06e:	3301      	adds	r3, #1
   1b070:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1b072:	4630      	mov	r0, r6
   1b074:	f00c fefc 	bl	27e70 <bt_conn_unref>
		if (err < 0) {
   1b078:	2d00      	cmp	r5, #0
   1b07a:	dbbf      	blt.n	1affc <notify_cb.part.0+0x6c>
		data->err = 0;
   1b07c:	2300      	movs	r3, #0
   1b07e:	60a3      	str	r3, [r4, #8]
   1b080:	e7bb      	b.n	1affa <notify_cb.part.0+0x6a>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1b082:	2b01      	cmp	r3, #1
   1b084:	d10a      	bne.n	1b09c <notify_cb.part.0+0x10c>
   1b086:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b08a:	07db      	lsls	r3, r3, #31
   1b08c:	d506      	bpl.n	1b09c <notify_cb.part.0+0x10c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b08e:	6922      	ldr	r2, [r4, #16]
   1b090:	88a1      	ldrh	r1, [r4, #4]
   1b092:	4630      	mov	r0, r6
   1b094:	f7ff ff12 	bl	1aebc <gatt_notify>
   1b098:	4605      	mov	r5, r0
   1b09a:	e7ea      	b.n	1b072 <notify_cb.part.0+0xe2>
			err = 0;
   1b09c:	463d      	mov	r5, r7
   1b09e:	e7e8      	b.n	1b072 <notify_cb.part.0+0xe2>
   1b0a0:	20000708 	.word	0x20000708
   1b0a4:	20003c99 	.word	0x20003c99
   1b0a8:	0002df31 	.word	0x0002df31
   1b0ac:	0002b4fc 	.word	0x0002b4fc

0001b0b0 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b0b0:	4b04      	ldr	r3, [pc, #16]	; (1b0c4 <notify_cb+0x14>)
{
   1b0b2:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b0b4:	6882      	ldr	r2, [r0, #8]
   1b0b6:	429a      	cmp	r2, r3
   1b0b8:	d101      	bne.n	1b0be <notify_cb+0xe>
   1b0ba:	f7ff bf69 	b.w	1af90 <notify_cb.part.0>
}
   1b0be:	2001      	movs	r0, #1
   1b0c0:	4770      	bx	lr
   1b0c2:	bf00      	nop
   1b0c4:	0001a185 	.word	0x0001a185

0001b0c8 <bt_gatt_connected>:
{
   1b0c8:	b5b0      	push	{r4, r5, r7, lr}
   1b0ca:	b08e      	sub	sp, #56	; 0x38
   1b0cc:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b0ce:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1b0d2:	4604      	mov	r4, r0
	data.conn = conn;
   1b0d4:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1b0d6:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b0d8:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b0da:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b0dc:	4629      	mov	r1, r5
   1b0de:	f00c fd99 	bl	27c14 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b0e2:	b198      	cbz	r0, 1b10c <bt_gatt_connected+0x44>
		if (conn->id) {
   1b0e4:	7a22      	ldrb	r2, [r4, #8]
   1b0e6:	b3a2      	cbz	r2, 1b152 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b0e8:	2104      	movs	r1, #4
   1b0ea:	4638      	mov	r0, r7
   1b0ec:	f00b f9ca 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b0f0:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b0f2:	4a19      	ldr	r2, [pc, #100]	; (1b158 <bt_gatt_connected+0x90>)
   1b0f4:	2124      	movs	r1, #36	; 0x24
   1b0f6:	f107 000c 	add.w	r0, r7, #12
   1b0fa:	462b      	mov	r3, r5
   1b0fc:	f7fa fab4 	bl	15668 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b100:	f107 020c 	add.w	r2, r7, #12
   1b104:	4915      	ldr	r1, [pc, #84]	; (1b15c <bt_gatt_connected+0x94>)
   1b106:	4610      	mov	r0, r2
   1b108:	f7f9 f894 	bl	14234 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b10c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b110:	4a13      	ldr	r2, [pc, #76]	; (1b160 <bt_gatt_connected+0x98>)
   1b112:	1d3b      	adds	r3, r7, #4
   1b114:	2001      	movs	r0, #1
   1b116:	f00d ff97 	bl	29048 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b11a:	4620      	mov	r0, r4
   1b11c:	f00c ff41 	bl	27fa2 <bt_conn_get_security>
   1b120:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b122:	4288      	cmp	r0, r1
   1b124:	d212      	bcs.n	1b14c <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1b126:	4620      	mov	r0, r4
   1b128:	f00c ff0b 	bl	27f42 <bt_conn_set_security>
		if (err) {
   1b12c:	b170      	cbz	r0, 1b14c <bt_gatt_connected+0x84>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1b12e:	466c      	mov	r4, sp
   1b130:	b088      	sub	sp, #32
   1b132:	aa02      	add	r2, sp, #8
   1b134:	4b0b      	ldr	r3, [pc, #44]	; (1b164 <bt_gatt_connected+0x9c>)
   1b136:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b13a:	2303      	movs	r3, #3
   1b13c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b140:	4809      	ldr	r0, [pc, #36]	; (1b168 <bt_gatt_connected+0xa0>)
   1b142:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b146:	f00d fdd3 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1b14a:	46a5      	mov	sp, r4
}
   1b14c:	3730      	adds	r7, #48	; 0x30
   1b14e:	46bd      	mov	sp, r7
   1b150:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b152:	9200      	str	r2, [sp, #0]
   1b154:	e7cd      	b.n	1b0f2 <bt_gatt_connected+0x2a>
   1b156:	bf00      	nop
   1b158:	0002df2d 	.word	0x0002df2d
   1b15c:	0001a9e9 	.word	0x0001a9e9
   1b160:	0001ada1 	.word	0x0001ada1
   1b164:	0002dff3 	.word	0x0002dff3
   1b168:	0002b4fc 	.word	0x0002b4fc

0001b16c <bt_gatt_att_max_mtu_changed>:
{
   1b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1b16e:	4b08      	ldr	r3, [pc, #32]	; (1b190 <bt_gatt_att_max_mtu_changed+0x24>)
   1b170:	681c      	ldr	r4, [r3, #0]
   1b172:	4605      	mov	r5, r0
   1b174:	460e      	mov	r6, r1
   1b176:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b178:	b14c      	cbz	r4, 1b18e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1b17a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b17e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1b180:	b11b      	cbz	r3, 1b18a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1b182:	463a      	mov	r2, r7
   1b184:	4631      	mov	r1, r6
   1b186:	4628      	mov	r0, r5
   1b188:	4798      	blx	r3
	return node->next;
   1b18a:	6864      	ldr	r4, [r4, #4]
   1b18c:	e7f4      	b.n	1b178 <bt_gatt_att_max_mtu_changed+0xc>
}
   1b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b190:	20002e24 	.word	0x20002e24

0001b194 <bt_gatt_encrypt_change>:
{
   1b194:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b196:	4a06      	ldr	r2, [pc, #24]	; (1b1b0 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1b198:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b19a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b19c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b19e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b1a2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b1a6:	f00d ff4f 	bl	29048 <bt_gatt_foreach_attr>
}
   1b1aa:	b003      	add	sp, #12
   1b1ac:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1b0:	0001ada1 	.word	0x0001ada1

0001b1b4 <bt_gatt_store_ccc>:
{
   1b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1b6:	b0c1      	sub	sp, #260	; 0x104
   1b1b8:	af02      	add	r7, sp, #8
	save.count = 0;
   1b1ba:	2300      	movs	r3, #0
{
   1b1bc:	4604      	mov	r4, r0
   1b1be:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b1c0:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1b1c2:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1b1c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b1ca:	4a1d      	ldr	r2, [pc, #116]	; (1b240 <bt_gatt_store_ccc+0x8c>)
   1b1cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b1d4:	2001      	movs	r0, #1
   1b1d6:	f00d ff37 	bl	29048 <bt_gatt_foreach_attr>
	if (id) {
   1b1da:	b364      	cbz	r4, 1b236 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b1dc:	1d3e      	adds	r6, r7, #4
   1b1de:	4622      	mov	r2, r4
   1b1e0:	2104      	movs	r1, #4
   1b1e2:	4630      	mov	r0, r6
   1b1e4:	f00b f94e 	bl	26484 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b1e8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b1ea:	4a16      	ldr	r2, [pc, #88]	; (1b244 <bt_gatt_store_ccc+0x90>)
   1b1ec:	462b      	mov	r3, r5
   1b1ee:	2124      	movs	r1, #36	; 0x24
   1b1f0:	f107 0008 	add.w	r0, r7, #8
   1b1f4:	f7fa fa38 	bl	15668 <bt_settings_encode_key>
	if (save.count) {
   1b1f8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1b1fc:	b1ea      	cbz	r2, 1b23a <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1b1fe:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b200:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1b204:	f107 0008 	add.w	r0, r7, #8
   1b208:	f7f8 ffee 	bl	141e8 <settings_save_one>
	if (err) {
   1b20c:	4604      	mov	r4, r0
   1b20e:	b170      	cbz	r0, 1b22e <bt_gatt_store_ccc+0x7a>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b210:	466d      	mov	r5, sp
   1b212:	b088      	sub	sp, #32
   1b214:	aa02      	add	r2, sp, #8
   1b216:	4b0c      	ldr	r3, [pc, #48]	; (1b248 <bt_gatt_store_ccc+0x94>)
   1b218:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b21c:	2303      	movs	r3, #3
   1b21e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b222:	480a      	ldr	r0, [pc, #40]	; (1b24c <bt_gatt_store_ccc+0x98>)
   1b224:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b228:	f00d fd62 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1b22c:	46ad      	mov	sp, r5
}
   1b22e:	4620      	mov	r0, r4
   1b230:	37fc      	adds	r7, #252	; 0xfc
   1b232:	46bd      	mov	sp, r7
   1b234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b236:	9400      	str	r4, [sp, #0]
   1b238:	e7d7      	b.n	1b1ea <bt_gatt_store_ccc+0x36>
		str = NULL;
   1b23a:	4611      	mov	r1, r2
   1b23c:	e7e2      	b.n	1b204 <bt_gatt_store_ccc+0x50>
   1b23e:	bf00      	nop
   1b240:	0001a0c1 	.word	0x0001a0c1
   1b244:	0002df2d 	.word	0x0002df2d
   1b248:	0002e01f 	.word	0x0002e01f
   1b24c:	0002b4fc 	.word	0x0002b4fc

0001b250 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1b250:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b252:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1b254:	ae03      	add	r6, sp, #12
{
   1b256:	4604      	mov	r4, r0
   1b258:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1b25a:	9103      	str	r1, [sp, #12]
   1b25c:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1b260:	4a1f      	ldr	r2, [pc, #124]	; (1b2e0 <bt_gatt_clear+0x90>)
   1b262:	4633      	mov	r3, r6
   1b264:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b268:	2001      	movs	r0, #1
   1b26a:	f00d feed 	bl	29048 <bt_gatt_foreach_attr>
		if (id) {
   1b26e:	b394      	cbz	r4, 1b2d6 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b270:	af02      	add	r7, sp, #8
   1b272:	4622      	mov	r2, r4
   1b274:	2104      	movs	r1, #4
   1b276:	4638      	mov	r0, r7
   1b278:	f00b f904 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b27c:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b27e:	4a19      	ldr	r2, [pc, #100]	; (1b2e4 <bt_gatt_clear+0x94>)
   1b280:	462b      	mov	r3, r5
   1b282:	2124      	movs	r1, #36	; 0x24
   1b284:	a805      	add	r0, sp, #20
   1b286:	f7fa f9ef 	bl	15668 <bt_settings_encode_key>
		return settings_delete(key);
   1b28a:	a805      	add	r0, sp, #20
   1b28c:	f00b ff67 	bl	2715e <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1b290:	2800      	cmp	r0, #0
   1b292:	db1e      	blt.n	1b2d2 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1b294:	4629      	mov	r1, r5
   1b296:	4620      	mov	r0, r4
   1b298:	f7ff f860 	bl	1a35c <bt_gatt_clear_sc>
		if (err < 0) {
   1b29c:	2800      	cmp	r0, #0
   1b29e:	db18      	blt.n	1b2d2 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1b2a0:	4629      	mov	r1, r5
   1b2a2:	4620      	mov	r0, r4
   1b2a4:	f7fe fe3e 	bl	19f24 <find_cf_cfg_by_addr>
	if (cfg) {
   1b2a8:	b108      	cbz	r0, 1b2ae <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1b2aa:	f00d fd24 	bl	28cf6 <clear_cf_cfg>
		if (id) {
   1b2ae:	b1a4      	cbz	r4, 1b2da <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b2b0:	4622      	mov	r2, r4
   1b2b2:	2104      	movs	r1, #4
   1b2b4:	4630      	mov	r0, r6
   1b2b6:	f00b f8e5 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b2ba:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b2bc:	4a0a      	ldr	r2, [pc, #40]	; (1b2e8 <bt_gatt_clear+0x98>)
   1b2be:	462b      	mov	r3, r5
   1b2c0:	2124      	movs	r1, #36	; 0x24
   1b2c2:	a805      	add	r0, sp, #20
   1b2c4:	f7fa f9d0 	bl	15668 <bt_settings_encode_key>
		return settings_delete(key);
   1b2c8:	a805      	add	r0, sp, #20
   1b2ca:	f00b ff48 	bl	2715e <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1b2ce:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1b2d2:	b00f      	add	sp, #60	; 0x3c
   1b2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b2d6:	9400      	str	r4, [sp, #0]
   1b2d8:	e7d1      	b.n	1b27e <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b2da:	9400      	str	r4, [sp, #0]
   1b2dc:	e7ee      	b.n	1b2bc <bt_gatt_clear+0x6c>
   1b2de:	bf00      	nop
   1b2e0:	0001a099 	.word	0x0001a099
   1b2e4:	0002df2d 	.word	0x0002df2d
   1b2e8:	0002e069 	.word	0x0002e069

0001b2ec <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2f0:	b08c      	sub	sp, #48	; 0x30
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b2f2:	4603      	mov	r3, r0
   1b2f4:	4a41      	ldr	r2, [pc, #260]	; (1b3fc <bt_gatt_disconnected+0x110>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b2f6:	4e42      	ldr	r6, [pc, #264]	; (1b400 <bt_gatt_disconnected+0x114>)
{
   1b2f8:	4604      	mov	r4, r0
   1b2fa:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b2fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b300:	2001      	movs	r0, #1
   1b302:	f00d fea1 	bl	29048 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1b306:	4620      	mov	r0, r4
   1b308:	f7fc ff52 	bl	181b0 <bt_conn_index>
   1b30c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b30e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1b312:	b120      	cbz	r0, 1b31e <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1b314:	f00c fdac 	bl	27e70 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1b318:	2300      	movs	r3, #0
   1b31a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b31e:	4839      	ldr	r0, [pc, #228]	; (1b404 <bt_gatt_disconnected+0x118>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b320:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b324:	f00f fb89 	bl	2aa3a <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b328:	7a20      	ldrb	r0, [r4, #8]
   1b32a:	4629      	mov	r1, r5
   1b32c:	f00c fc72 	bl	27c14 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b330:	2800      	cmp	r0, #0
   1b332:	d039      	beq.n	1b3a8 <bt_gatt_disconnected+0xbc>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b334:	4629      	mov	r1, r5
   1b336:	7a20      	ldrb	r0, [r4, #8]
   1b338:	f7ff ff3c 	bl	1b1b4 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1b33c:	4620      	mov	r0, r4
   1b33e:	f7fe fca9 	bl	19c94 <find_cf_cfg>
	if (!cfg) {
   1b342:	4606      	mov	r6, r0
   1b344:	2800      	cmp	r0, #0
   1b346:	d04f      	beq.n	1b3e8 <bt_gatt_disconnected+0xfc>
		if (conn->id) {
   1b348:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1b34a:	3608      	adds	r6, #8
		if (conn->id) {
   1b34c:	2a00      	cmp	r2, #0
   1b34e:	d04d      	beq.n	1b3ec <bt_gatt_disconnected+0x100>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b350:	2104      	movs	r1, #4
   1b352:	4638      	mov	r0, r7
   1b354:	f00b f896 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b358:	462b      	mov	r3, r5
   1b35a:	4a2b      	ldr	r2, [pc, #172]	; (1b408 <bt_gatt_disconnected+0x11c>)
   1b35c:	9700      	str	r7, [sp, #0]
   1b35e:	2124      	movs	r1, #36	; 0x24
   1b360:	1d38      	adds	r0, r7, #4
   1b362:	f7fa f981 	bl	15668 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1b366:	7a23      	ldrb	r3, [r4, #8]
   1b368:	f04f 0801 	mov.w	r8, #1
   1b36c:	b93b      	cbnz	r3, 1b37e <bt_gatt_disconnected+0x92>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1b36e:	2300      	movs	r3, #0
   1b370:	9300      	str	r3, [sp, #0]
   1b372:	4a25      	ldr	r2, [pc, #148]	; (1b408 <bt_gatt_disconnected+0x11c>)
   1b374:	462b      	mov	r3, r5
   1b376:	2124      	movs	r1, #36	; 0x24
   1b378:	1d38      	adds	r0, r7, #4
   1b37a:	f7fa f975 	bl	15668 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1b37e:	4642      	mov	r2, r8
   1b380:	4631      	mov	r1, r6
   1b382:	1d38      	adds	r0, r7, #4
   1b384:	f7f8 ff30 	bl	141e8 <settings_save_one>
	if (err) {
   1b388:	b170      	cbz	r0, 1b3a8 <bt_gatt_disconnected+0xbc>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1b38a:	466e      	mov	r6, sp
   1b38c:	b088      	sub	sp, #32
   1b38e:	aa02      	add	r2, sp, #8
   1b390:	4b1e      	ldr	r3, [pc, #120]	; (1b40c <bt_gatt_disconnected+0x120>)
   1b392:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b396:	2303      	movs	r3, #3
   1b398:	f842 3f10 	str.w	r3, [r2, #16]!
   1b39c:	481c      	ldr	r0, [pc, #112]	; (1b410 <bt_gatt_disconnected+0x124>)
   1b39e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b3a2:	f00d fca5 	bl	28cf0 <z_log_msg_static_create.constprop.0>
   1b3a6:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b3a8:	7a20      	ldrb	r0, [r4, #8]
   1b3aa:	4629      	mov	r1, r5
   1b3ac:	f00c fc32 	bl	27c14 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b3b0:	b148      	cbz	r0, 1b3c6 <bt_gatt_disconnected+0xda>
		struct addr_with_id addr_with_id = {
   1b3b2:	7a23      	ldrb	r3, [r4, #8]
   1b3b4:	723b      	strb	r3, [r7, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b3b6:	4a17      	ldr	r2, [pc, #92]	; (1b414 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1b3b8:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b3ba:	1d3b      	adds	r3, r7, #4
   1b3bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b3c0:	2001      	movs	r0, #1
   1b3c2:	f00d fe41 	bl	29048 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1b3c6:	4620      	mov	r0, r4
   1b3c8:	f7fe fc64 	bl	19c94 <find_cf_cfg>
	if (!cfg) {
   1b3cc:	4606      	mov	r6, r0
   1b3ce:	b138      	cbz	r0, 1b3e0 <bt_gatt_disconnected+0xf4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b3d0:	7a20      	ldrb	r0, [r4, #8]
   1b3d2:	4629      	mov	r1, r5
   1b3d4:	f00c fc1e 	bl	27c14 <bt_addr_le_is_bonded>
   1b3d8:	b958      	cbnz	r0, 1b3f2 <bt_gatt_disconnected+0x106>
		clear_cf_cfg(cfg);
   1b3da:	4630      	mov	r0, r6
   1b3dc:	f00d fc8b 	bl	28cf6 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1b3e0:	3728      	adds	r7, #40	; 0x28
   1b3e2:	46bd      	mov	sp, r7
   1b3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1b3e8:	4680      	mov	r8, r0
   1b3ea:	e7c0      	b.n	1b36e <bt_gatt_disconnected+0x82>
   1b3ec:	f04f 0801 	mov.w	r8, #1
   1b3f0:	e7bd      	b.n	1b36e <bt_gatt_disconnected+0x82>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b3f2:	4629      	mov	r1, r5
   1b3f4:	1c70      	adds	r0, r6, #1
   1b3f6:	f00d fbcf 	bl	28b98 <bt_addr_le_copy>
}
   1b3fa:	e7f1      	b.n	1b3e0 <bt_gatt_disconnected+0xf4>
   1b3fc:	0001a42d 	.word	0x0001a42d
   1b400:	20002020 	.word	0x20002020
   1b404:	20002028 	.word	0x20002028
   1b408:	0002e069 	.word	0x0002e069
   1b40c:	0002e03d 	.word	0x0002e03d
   1b410:	0002b4fc 	.word	0x0002b4fc
   1b414:	0001a099 	.word	0x0001a099

0001b418 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1b418:	4601      	mov	r1, r0
   1b41a:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1b41c:	4803      	ldr	r0, [pc, #12]	; (1b42c <smp_find+0x14>)
   1b41e:	f00d ff3e 	bl	2929e <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1b422:	2800      	cmp	r0, #0
}
   1b424:	4802      	ldr	r0, [pc, #8]	; (1b430 <smp_find+0x18>)
   1b426:	bf08      	it	eq
   1b428:	2000      	moveq	r0, #0
   1b42a:	bd08      	pop	{r3, pc}
   1b42c:	200020b4 	.word	0x200020b4
   1b430:	200020b0 	.word	0x200020b0

0001b434 <latch_auth_cb>:
{
   1b434:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1b436:	4a0c      	ldr	r2, [pc, #48]	; (1b468 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b438:	6811      	ldr	r1, [r2, #0]
   1b43a:	4a0c      	ldr	r2, [pc, #48]	; (1b46c <latch_auth_cb+0x38>)
   1b43c:	f3bf 8f5b 	dmb	ish
   1b440:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   1b444:	e853 4f00 	ldrex	r4, [r3]
   1b448:	4294      	cmp	r4, r2
   1b44a:	d104      	bne.n	1b456 <latch_auth_cb+0x22>
   1b44c:	e843 1c00 	strex	ip, r1, [r3]
   1b450:	f1bc 0f00 	cmp.w	ip, #0
   1b454:	d1f6      	bne.n	1b444 <latch_auth_cb+0x10>
   1b456:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b45a:	f3bf 8f5b 	dmb	ish
   1b45e:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   1b462:	f3bf 8f5b 	dmb	ish
}
   1b466:	bd10      	pop	{r4, pc}
   1b468:	20002cfc 	.word	0x20002cfc
   1b46c:	200020b0 	.word	0x200020b0

0001b470 <get_io_capa>:
{
   1b470:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b472:	f7ff ffdf 	bl	1b434 <latch_auth_cb>
	if (!smp_auth_cb) {
   1b476:	b1b8      	cbz	r0, 1b4a8 <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1b478:	6803      	ldr	r3, [r0, #0]
   1b47a:	b143      	cbz	r3, 1b48e <get_io_capa+0x1e>
   1b47c:	6842      	ldr	r2, [r0, #4]
   1b47e:	b132      	cbz	r2, 1b48e <get_io_capa+0x1e>
   1b480:	6882      	ldr	r2, [r0, #8]
   1b482:	b912      	cbnz	r2, 1b48a <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1b484:	4a0b      	ldr	r2, [pc, #44]	; (1b4b4 <get_io_capa+0x44>)
   1b486:	7812      	ldrb	r2, [r2, #0]
   1b488:	b93a      	cbnz	r2, 1b49a <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1b48a:	2004      	movs	r0, #4
   1b48c:	e00b      	b.n	1b4a6 <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1b48e:	4a09      	ldr	r2, [pc, #36]	; (1b4b4 <get_io_capa+0x44>)
   1b490:	7812      	ldrb	r2, [r2, #0]
   1b492:	b112      	cbz	r2, 1b49a <get_io_capa+0x2a>
   1b494:	b10b      	cbz	r3, 1b49a <get_io_capa+0x2a>
   1b496:	6882      	ldr	r2, [r0, #8]
   1b498:	b942      	cbnz	r2, 1b4ac <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1b49a:	6842      	ldr	r2, [r0, #4]
   1b49c:	b942      	cbnz	r2, 1b4b0 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1b49e:	2b00      	cmp	r3, #0
   1b4a0:	bf0c      	ite	eq
   1b4a2:	2003      	moveq	r0, #3
   1b4a4:	2000      	movne	r0, #0
}
   1b4a6:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b4a8:	2003      	movs	r0, #3
   1b4aa:	e7fc      	b.n	1b4a6 <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1b4ac:	2001      	movs	r0, #1
   1b4ae:	e7fa      	b.n	1b4a6 <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b4b0:	2002      	movs	r0, #2
   1b4b2:	e7f8      	b.n	1b4a6 <get_io_capa+0x36>
   1b4b4:	20003dad 	.word	0x20003dad

0001b4b8 <get_auth>:
	if (sc_supported) {
   1b4b8:	4b0c      	ldr	r3, [pc, #48]	; (1b4ec <get_auth+0x34>)
   1b4ba:	781b      	ldrb	r3, [r3, #0]
{
   1b4bc:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b4be:	b17b      	cbz	r3, 1b4e0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b4c0:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b4c4:	f7ff ffd4 	bl	1b470 <get_io_capa>
	if (bondable) {
   1b4c8:	4b09      	ldr	r3, [pc, #36]	; (1b4f0 <get_auth+0x38>)
   1b4ca:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b4cc:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b4ce:	bf0c      	ite	eq
   1b4d0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b4d4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b4d8:	b12b      	cbz	r3, 1b4e6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b4da:	f044 0001 	orr.w	r0, r4, #1
}
   1b4de:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b4e0:	f001 0407 	and.w	r4, r1, #7
   1b4e4:	e7ee      	b.n	1b4c4 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b4e6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b4ea:	e7f8      	b.n	1b4de <get_auth+0x26>
   1b4ec:	20003dad 	.word	0x20003dad
   1b4f0:	2000098c 	.word	0x2000098c

0001b4f4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1b4f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1b4f6:	4b06      	ldr	r3, [pc, #24]	; (1b510 <bt_smp_pkey_ready.part.0+0x1c>)
   1b4f8:	9305      	str	r3, [sp, #20]
   1b4fa:	4806      	ldr	r0, [pc, #24]	; (1b514 <bt_smp_pkey_ready.part.0+0x20>)
   1b4fc:	2302      	movs	r3, #2
   1b4fe:	aa04      	add	r2, sp, #16
   1b500:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b504:	9304      	str	r3, [sp, #16]
   1b506:	f00d ffaf 	bl	29468 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1b50a:	b007      	add	sp, #28
   1b50c:	f85d fb04 	ldr.w	pc, [sp], #4
   1b510:	0002e07a 	.word	0x0002e07a
   1b514:	0002b534 	.word	0x0002b534

0001b518 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1b518:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1b51a:	1d14      	adds	r4, r2, #4
{
   1b51c:	b091      	sub	sp, #68	; 0x44
   1b51e:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b520:	588b      	ldr	r3, [r1, r2]
   1b522:	9301      	str	r3, [sp, #4]
{
   1b524:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b526:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1b528:	4628      	mov	r0, r5
   1b52a:	4621      	mov	r1, r4
   1b52c:	f00d fea8 	bl	29280 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1b530:	4631      	mov	r1, r6
   1b532:	2210      	movs	r2, #16
   1b534:	a802      	add	r0, sp, #8
   1b536:	f00d fe99 	bl	2926c <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1b53a:	ab06      	add	r3, sp, #24
   1b53c:	4622      	mov	r2, r4
   1b53e:	4629      	mov	r1, r5
   1b540:	a802      	add	r0, sp, #8
   1b542:	f00d fed6 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   1b546:	4606      	mov	r6, r0
   1b548:	b160      	cbz	r0, 1b564 <smp_sign_buf+0x4c>
		BT_ERR("Data signing failed");
   1b54a:	4b10      	ldr	r3, [pc, #64]	; (1b58c <smp_sign_buf+0x74>)
   1b54c:	930f      	str	r3, [sp, #60]	; 0x3c
   1b54e:	4810      	ldr	r0, [pc, #64]	; (1b590 <smp_sign_buf+0x78>)
   1b550:	2302      	movs	r3, #2
   1b552:	aa0e      	add	r2, sp, #56	; 0x38
   1b554:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b558:	930e      	str	r3, [sp, #56]	; 0x38
   1b55a:	f00d ff85 	bl	29468 <z_log_msg_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1b55e:	4630      	mov	r0, r6
   1b560:	b011      	add	sp, #68	; 0x44
   1b562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1b564:	a806      	add	r0, sp, #24
   1b566:	2110      	movs	r1, #16
   1b568:	f00d fe8a 	bl	29280 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1b56c:	2204      	movs	r2, #4
   1b56e:	eb0d 0102 	add.w	r1, sp, r2
   1b572:	a807      	add	r0, sp, #28
   1b574:	f00c f95b 	bl	2782e <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1b578:	4621      	mov	r1, r4
   1b57a:	4628      	mov	r0, r5
   1b57c:	f00d fe80 	bl	29280 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1b580:	220c      	movs	r2, #12
   1b582:	a907      	add	r1, sp, #28
   1b584:	4638      	mov	r0, r7
   1b586:	f00c f952 	bl	2782e <memcpy>
	return 0;
   1b58a:	e7e8      	b.n	1b55e <smp_sign_buf+0x46>
   1b58c:	0002e093 	.word	0x0002e093
   1b590:	0002b534 	.word	0x0002b534

0001b594 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1b594:	b580      	push	{r7, lr}
   1b596:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1b598:	b088      	sub	sp, #32
   1b59a:	466a      	mov	r2, sp
   1b59c:	4b07      	ldr	r3, [pc, #28]	; (1b5bc <bt_smp_accept.part.0+0x28>)
   1b59e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b5a2:	2303      	movs	r3, #3
   1b5a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b5a8:	4805      	ldr	r0, [pc, #20]	; (1b5c0 <bt_smp_accept.part.0+0x2c>)
   1b5aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b5ae:	f00d ff5b 	bl	29468 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1b5b2:	f06f 000b 	mvn.w	r0, #11
   1b5b6:	46bd      	mov	sp, r7
   1b5b8:	bd80      	pop	{r7, pc}
   1b5ba:	bf00      	nop
   1b5bc:	0002e0a7 	.word	0x0002e0a7
   1b5c0:	0002b534 	.word	0x0002b534

0001b5c4 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1b5c4:	4b06      	ldr	r3, [pc, #24]	; (1b5e0 <bt_smp_accept+0x1c>)
   1b5c6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1b5ca:	b10a      	cbz	r2, 1b5d0 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1b5cc:	f7ff bfe2 	b.w	1b594 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1b5d0:	4804      	ldr	r0, [pc, #16]	; (1b5e4 <bt_smp_accept+0x20>)
   1b5d2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1b5d6:	33ec      	adds	r3, #236	; 0xec
   1b5d8:	600b      	str	r3, [r1, #0]
}
   1b5da:	4610      	mov	r0, r2
   1b5dc:	4770      	bx	lr
   1b5de:	bf00      	nop
   1b5e0:	200020b0 	.word	0x200020b0
   1b5e4:	0002bfa8 	.word	0x0002bfa8

0001b5e8 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1b5e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
   1b5ea:	4b07      	ldr	r3, [pc, #28]	; (1b608 <smp_chan_get.part.0+0x20>)
   1b5ec:	9305      	str	r3, [sp, #20]
   1b5ee:	4807      	ldr	r0, [pc, #28]	; (1b60c <smp_chan_get.part.0+0x24>)
   1b5f0:	2302      	movs	r3, #2
   1b5f2:	aa04      	add	r2, sp, #16
   1b5f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b5f8:	9304      	str	r3, [sp, #16]
   1b5fa:	f00d ff35 	bl	29468 <z_log_msg_static_create.constprop.0>
}
   1b5fe:	2000      	movs	r0, #0
   1b600:	b007      	add	sp, #28
   1b602:	f85d fb04 	ldr.w	pc, [sp], #4
   1b606:	bf00      	nop
   1b608:	0002e0cc 	.word	0x0002e0cc
   1b60c:	0002b534 	.word	0x0002b534

0001b610 <smp_init>:
{
   1b610:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b612:	22ec      	movs	r2, #236	; 0xec
{
   1b614:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b616:	2100      	movs	r1, #0
   1b618:	f00c f914 	bl	27844 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b61c:	2110      	movs	r1, #16
   1b61e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1b622:	f004 fa8f 	bl	1fb44 <bt_rand>
   1b626:	4604      	mov	r4, r0
   1b628:	b948      	cbnz	r0, 1b63e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b62a:	2105      	movs	r1, #5
   1b62c:	4628      	mov	r0, r5
   1b62e:	f00d ff29 	bl	29484 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b632:	f7fc fa5f 	bl	17af4 <bt_pub_key_get>
   1b636:	4b03      	ldr	r3, [pc, #12]	; (1b644 <smp_init+0x34>)
   1b638:	6018      	str	r0, [r3, #0]
}
   1b63a:	4620      	mov	r0, r4
   1b63c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b63e:	2408      	movs	r4, #8
   1b640:	e7fb      	b.n	1b63a <smp_init+0x2a>
   1b642:	bf00      	nop
   1b644:	20002e6c 	.word	0x20002e6c

0001b648 <smp_dhkey_generate>:
{
   1b648:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b64a:	1d05      	adds	r5, r0, #4
{
   1b64c:	b087      	sub	sp, #28
   1b64e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b650:	2108      	movs	r1, #8
   1b652:	4628      	mov	r0, r5
   1b654:	f00d ff16 	bl	29484 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1b658:	490b      	ldr	r1, [pc, #44]	; (1b688 <smp_dhkey_generate+0x40>)
   1b65a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b65e:	f7fc fa59 	bl	17b14 <bt_dh_key_gen>
	if (err) {
   1b662:	b170      	cbz	r0, 1b682 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b664:	2108      	movs	r1, #8
   1b666:	4628      	mov	r0, r5
   1b668:	f00d fed2 	bl	29410 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1b66c:	4b07      	ldr	r3, [pc, #28]	; (1b68c <smp_dhkey_generate+0x44>)
   1b66e:	4808      	ldr	r0, [pc, #32]	; (1b690 <smp_dhkey_generate+0x48>)
   1b670:	9305      	str	r3, [sp, #20]
   1b672:	aa04      	add	r2, sp, #16
   1b674:	2302      	movs	r3, #2
   1b676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b67a:	9304      	str	r3, [sp, #16]
   1b67c:	f00d fef4 	bl	29468 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b680:	2008      	movs	r0, #8
}
   1b682:	b007      	add	sp, #28
   1b684:	bd30      	pop	{r4, r5, pc}
   1b686:	bf00      	nop
   1b688:	00029941 	.word	0x00029941
   1b68c:	0002e0e7 	.word	0x0002e0e7
   1b690:	0002b534 	.word	0x0002b534

0001b694 <smp_ident_info>:
{
   1b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b696:	4604      	mov	r4, r0
   1b698:	af00      	add	r7, sp, #0
   1b69a:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b69c:	3004      	adds	r0, #4
   1b69e:	210d      	movs	r1, #13
   1b6a0:	f00d fdfd 	bl	2929e <atomic_test_bit>
   1b6a4:	b330      	cbz	r0, 1b6f4 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1b6a6:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b6a8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b6ac:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1b6b0:	7a19      	ldrb	r1, [r3, #8]
   1b6b2:	462a      	mov	r2, r5
   1b6b4:	2002      	movs	r0, #2
   1b6b6:	f00e f9de 	bl	29a76 <bt_keys_get_type>
		if (!keys) {
   1b6ba:	b9b0      	cbnz	r0, 1b6ea <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1b6bc:	4628      	mov	r0, r5
   1b6be:	f7f9 fe7d 	bl	153bc <bt_addr_le_str_real>
   1b6c2:	466c      	mov	r4, sp
   1b6c4:	b088      	sub	sp, #32
   1b6c6:	466a      	mov	r2, sp
   1b6c8:	4b0d      	ldr	r3, [pc, #52]	; (1b700 <smp_ident_info+0x6c>)
   1b6ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b6ce:	2302      	movs	r3, #2
   1b6d0:	7713      	strb	r3, [r2, #28]
   1b6d2:	4b0c      	ldr	r3, [pc, #48]	; (1b704 <smp_ident_info+0x70>)
   1b6d4:	480c      	ldr	r0, [pc, #48]	; (1b708 <smp_ident_info+0x74>)
   1b6d6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b6da:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1b6de:	f00d fec3 	bl	29468 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1b6e2:	2008      	movs	r0, #8
   1b6e4:	46a5      	mov	sp, r4
}
   1b6e6:	46bd      	mov	sp, r7
   1b6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1b6ea:	2210      	movs	r2, #16
   1b6ec:	4631      	mov	r1, r6
   1b6ee:	302a      	adds	r0, #42	; 0x2a
   1b6f0:	f00c f89d 	bl	2782e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	2109      	movs	r1, #9
   1b6f8:	f00d fec4 	bl	29484 <atomic_set_bit>
	return 0;
   1b6fc:	2000      	movs	r0, #0
   1b6fe:	e7f2      	b.n	1b6e6 <smp_ident_info+0x52>
   1b700:	0002e100 	.word	0x0002e100
   1b704:	01000003 	.word	0x01000003
   1b708:	0002b534 	.word	0x0002b534

0001b70c <smp_encrypt_info>:
{
   1b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b70e:	4604      	mov	r4, r0
   1b710:	af00      	add	r7, sp, #0
   1b712:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b714:	3004      	adds	r0, #4
   1b716:	210d      	movs	r1, #13
   1b718:	f00d fdc1 	bl	2929e <atomic_test_bit>
   1b71c:	b330      	cbz	r0, 1b76c <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1b71e:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b720:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b724:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1b728:	7a19      	ldrb	r1, [r3, #8]
   1b72a:	462a      	mov	r2, r5
   1b72c:	2004      	movs	r0, #4
   1b72e:	f00e f9a2 	bl	29a76 <bt_keys_get_type>
		if (!keys) {
   1b732:	b9b0      	cbnz	r0, 1b762 <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1b734:	4628      	mov	r0, r5
   1b736:	f7f9 fe41 	bl	153bc <bt_addr_le_str_real>
   1b73a:	466c      	mov	r4, sp
   1b73c:	b088      	sub	sp, #32
   1b73e:	466a      	mov	r2, sp
   1b740:	4b0d      	ldr	r3, [pc, #52]	; (1b778 <smp_encrypt_info+0x6c>)
   1b742:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b746:	2302      	movs	r3, #2
   1b748:	7713      	strb	r3, [r2, #28]
   1b74a:	4b0c      	ldr	r3, [pc, #48]	; (1b77c <smp_encrypt_info+0x70>)
   1b74c:	480c      	ldr	r0, [pc, #48]	; (1b780 <smp_encrypt_info+0x74>)
   1b74e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b752:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1b756:	f00d fe87 	bl	29468 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1b75a:	2008      	movs	r0, #8
   1b75c:	46a5      	mov	sp, r4
}
   1b75e:	46bd      	mov	sp, r7
   1b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1b762:	2210      	movs	r2, #16
   1b764:	4631      	mov	r1, r6
   1b766:	301a      	adds	r0, #26
   1b768:	f00c f861 	bl	2782e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1b76c:	4620      	mov	r0, r4
   1b76e:	2107      	movs	r1, #7
   1b770:	f00d fe88 	bl	29484 <atomic_set_bit>
	return 0;
   1b774:	2000      	movs	r0, #0
   1b776:	e7f2      	b.n	1b75e <smp_encrypt_info+0x52>
   1b778:	0002e100 	.word	0x0002e100
   1b77c:	01000003 	.word	0x01000003
   1b780:	0002b534 	.word	0x0002b534

0001b784 <smp_pairing_req>:
{
   1b784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b788:	460d      	mov	r5, r1
   1b78a:	b087      	sub	sp, #28
   1b78c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b78e:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1b792:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b794:	f7ff fe4e 	bl	1b434 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1b798:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b79a:	78eb      	ldrb	r3, [r5, #3]
   1b79c:	3b07      	subs	r3, #7
   1b79e:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b7a0:	4681      	mov	r9, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b7a2:	d905      	bls.n	1b7b0 <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1b7a4:	2506      	movs	r5, #6
}
   1b7a6:	4628      	mov	r0, r5
   1b7a8:	371c      	adds	r7, #28
   1b7aa:	46bd      	mov	sp, r7
   1b7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1b7b0:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   1b7b4:	b15b      	cbz	r3, 1b7ce <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b7b6:	1d26      	adds	r6, r4, #4
   1b7b8:	210f      	movs	r1, #15
   1b7ba:	4630      	mov	r0, r6
   1b7bc:	f00d fd6f 	bl	2929e <atomic_test_bit>
   1b7c0:	b988      	cbnz	r0, 1b7e6 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1b7c2:	4620      	mov	r0, r4
   1b7c4:	f7ff ff24 	bl	1b610 <smp_init>
		if (ret) {
   1b7c8:	b168      	cbz	r0, 1b7e6 <smp_pairing_req+0x62>
			return ret;
   1b7ca:	b2c5      	uxtb	r5, r0
   1b7cc:	e7eb      	b.n	1b7a6 <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b7ce:	f898 0008 	ldrb.w	r0, [r8, #8]
   1b7d2:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1b7d6:	f001 fcb3 	bl	1d140 <bt_keys_get_addr>
   1b7da:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   1b7de:	2800      	cmp	r0, #0
   1b7e0:	d1e9      	bne.n	1b7b6 <smp_pairing_req+0x32>
	switch (sec) {
   1b7e2:	2508      	movs	r5, #8
   1b7e4:	e7df      	b.n	1b7a6 <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b7e6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b7e8:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b7ea:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b7ec:	4629      	mov	r1, r5
   1b7ee:	f104 000a 	add.w	r0, r4, #10
   1b7f2:	f00c f81c 	bl	2782e <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1b7f6:	2302      	movs	r3, #2
   1b7f8:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1b7fa:	78a9      	ldrb	r1, [r5, #2]
   1b7fc:	4620      	mov	r0, r4
   1b7fe:	f7ff fe5b 	bl	1b4b8 <get_auth>
   1b802:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1b804:	4620      	mov	r0, r4
   1b806:	f7ff fe33 	bl	1b470 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b80a:	4ba9      	ldr	r3, [pc, #676]	; (1bab0 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1b80c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b80e:	781b      	ldrb	r3, [r3, #0]
   1b810:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1b812:	2310      	movs	r3, #16
   1b814:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1b816:	792b      	ldrb	r3, [r5, #4]
   1b818:	f003 0307 	and.w	r3, r3, #7
   1b81c:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1b81e:	796b      	ldrb	r3, [r5, #5]
   1b820:	f003 0307 	and.w	r3, r3, #7
   1b824:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b826:	7ce3      	ldrb	r3, [r4, #19]
   1b828:	0718      	lsls	r0, r3, #28
   1b82a:	d50e      	bpl.n	1b84a <smp_pairing_req+0xc6>
   1b82c:	78ab      	ldrb	r3, [r5, #2]
   1b82e:	0719      	lsls	r1, r3, #28
   1b830:	d50b      	bpl.n	1b84a <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1b832:	2105      	movs	r1, #5
   1b834:	4630      	mov	r0, r6
   1b836:	f00d fe25 	bl	29484 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1b83a:	7d63      	ldrb	r3, [r4, #21]
   1b83c:	f003 0306 	and.w	r3, r3, #6
   1b840:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1b842:	7da3      	ldrb	r3, [r4, #22]
   1b844:	f003 0306 	and.w	r3, r3, #6
   1b848:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b84a:	7ce3      	ldrb	r3, [r4, #19]
   1b84c:	069a      	lsls	r2, r3, #26
   1b84e:	d506      	bpl.n	1b85e <smp_pairing_req+0xda>
   1b850:	78ab      	ldrb	r3, [r5, #2]
   1b852:	069b      	lsls	r3, r3, #26
   1b854:	d503      	bpl.n	1b85e <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1b856:	2114      	movs	r1, #20
   1b858:	4630      	mov	r0, r6
   1b85a:	f00d fe13 	bl	29484 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1b85e:	7da3      	ldrb	r3, [r4, #22]
   1b860:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1b864:	7d63      	ldrb	r3, [r4, #21]
   1b866:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b86a:	7ce3      	ldrb	r3, [r4, #19]
   1b86c:	07d8      	lsls	r0, r3, #31
   1b86e:	d506      	bpl.n	1b87e <smp_pairing_req+0xfa>
   1b870:	78ab      	ldrb	r3, [r5, #2]
   1b872:	07d9      	lsls	r1, r3, #31
   1b874:	d503      	bpl.n	1b87e <smp_pairing_req+0xfa>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1b876:	210d      	movs	r1, #13
   1b878:	4630      	mov	r0, r6
   1b87a:	f00d fe03 	bl	29484 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1b87e:	2103      	movs	r1, #3
   1b880:	4630      	mov	r0, r6
   1b882:	f00d fdff 	bl	29484 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b886:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1b888:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b88a:	f00d fd08 	bl	2929e <atomic_test_bit>
   1b88e:	bb30      	cbnz	r0, 1b8de <smp_pairing_req+0x15a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b890:	2d04      	cmp	r5, #4
   1b892:	d843      	bhi.n	1b91c <smp_pairing_req+0x198>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b894:	7ca2      	ldrb	r2, [r4, #18]
   1b896:	7ae3      	ldrb	r3, [r4, #11]
   1b898:	4013      	ands	r3, r2
   1b89a:	07da      	lsls	r2, r3, #31
   1b89c:	d43c      	bmi.n	1b918 <smp_pairing_req+0x194>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b89e:	7b21      	ldrb	r1, [r4, #12]
   1b8a0:	7ce0      	ldrb	r0, [r4, #19]
   1b8a2:	4301      	orrs	r1, r0
   1b8a4:	f011 0104 	ands.w	r1, r1, #4
   1b8a8:	d010      	beq.n	1b8cc <smp_pairing_req+0x148>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1b8aa:	4620      	mov	r0, r4
   1b8ac:	f7ff fde0 	bl	1b470 <get_io_capa>
   1b8b0:	4b80      	ldr	r3, [pc, #512]	; (1bab4 <smp_pairing_req+0x330>)
   1b8b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b8b6:	441d      	add	r5, r3
   1b8b8:	5c29      	ldrb	r1, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1b8ba:	2904      	cmp	r1, #4
   1b8bc:	d106      	bne.n	1b8cc <smp_pairing_req+0x148>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1b8be:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b8c2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	bf0c      	ite	eq
   1b8c8:	2102      	moveq	r1, #2
   1b8ca:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1b8cc:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1b8ce:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   1b8d2:	4620      	mov	r0, r4
   1b8d4:	f00d fcec 	bl	292b0 <update_keys_check>
   1b8d8:	bb10      	cbnz	r0, 1b920 <smp_pairing_req+0x19c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b8da:	2503      	movs	r5, #3
   1b8dc:	e763      	b.n	1b7a6 <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1b8de:	7b20      	ldrb	r0, [r4, #12]
   1b8e0:	7ce2      	ldrb	r2, [r4, #19]
   1b8e2:	ea00 0302 	and.w	r3, r0, r2
   1b8e6:	071b      	lsls	r3, r3, #28
   1b8e8:	d506      	bpl.n	1b8f8 <smp_pairing_req+0x174>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b8ea:	7ae3      	ldrb	r3, [r4, #11]
   1b8ec:	f894 c012 	ldrb.w	ip, [r4, #18]
   1b8f0:	ea43 030c 	orr.w	r3, r3, ip
   1b8f4:	07db      	lsls	r3, r3, #31
   1b8f6:	d4e9      	bmi.n	1b8cc <smp_pairing_req+0x148>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b8f8:	2d04      	cmp	r5, #4
   1b8fa:	d80f      	bhi.n	1b91c <smp_pairing_req+0x198>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b8fc:	ea40 0102 	orr.w	r1, r0, r2
   1b900:	f011 0104 	ands.w	r1, r1, #4
   1b904:	d0e2      	beq.n	1b8cc <smp_pairing_req+0x148>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1b906:	4620      	mov	r0, r4
   1b908:	f7ff fdb2 	bl	1b470 <get_io_capa>
   1b90c:	4b6a      	ldr	r3, [pc, #424]	; (1bab8 <smp_pairing_req+0x334>)
   1b90e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b912:	441d      	add	r5, r3
   1b914:	5c29      	ldrb	r1, [r5, r0]
   1b916:	e7d9      	b.n	1b8cc <smp_pairing_req+0x148>
		return LEGACY_OOB;
   1b918:	2106      	movs	r1, #6
   1b91a:	e7d7      	b.n	1b8cc <smp_pairing_req+0x148>
		return JUST_WORKS;
   1b91c:	2100      	movs	r1, #0
   1b91e:	e7d5      	b.n	1b8cc <smp_pairing_req+0x148>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1b920:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b924:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1b926:	2b03      	cmp	r3, #3
   1b928:	d03e      	beq.n	1b9a8 <smp_pairing_req+0x224>
   1b92a:	d82c      	bhi.n	1b986 <smp_pairing_req+0x202>
   1b92c:	3b01      	subs	r3, #1
   1b92e:	2b01      	cmp	r3, #1
   1b930:	f63f af57 	bhi.w	1b7e2 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b934:	2105      	movs	r1, #5
   1b936:	4630      	mov	r0, r6
   1b938:	f00d fcb1 	bl	2929e <atomic_test_bit>
   1b93c:	2800      	cmp	r0, #0
   1b93e:	f040 80c5 	bne.w	1bacc <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b942:	4620      	mov	r0, r4
   1b944:	f7ff fd76 	bl	1b434 <latch_auth_cb>
   1b948:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b94a:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b94c:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b950:	f7ff fd70 	bl	1b434 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b954:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b958:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b95a:	f899 0008 	ldrb.w	r0, [r9, #8]
   1b95e:	f001 fcb3 	bl	1d2c8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b962:	7a23      	ldrb	r3, [r4, #8]
   1b964:	b320      	cbz	r0, 1b9b0 <smp_pairing_req+0x22c>
   1b966:	7b42      	ldrb	r2, [r0, #13]
   1b968:	07d2      	lsls	r2, r2, #31
   1b96a:	d521      	bpl.n	1b9b0 <smp_pairing_req+0x22c>
   1b96c:	bb03      	cbnz	r3, 1b9b0 <smp_pairing_req+0x22c>
		BT_ERR("JustWorks failed, authenticated keys present");
   1b96e:	4b53      	ldr	r3, [pc, #332]	; (1babc <smp_pairing_req+0x338>)
   1b970:	617b      	str	r3, [r7, #20]
   1b972:	4853      	ldr	r0, [pc, #332]	; (1bac0 <smp_pairing_req+0x33c>)
   1b974:	2302      	movs	r3, #2
   1b976:	f107 0210 	add.w	r2, r7, #16
   1b97a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b97e:	613b      	str	r3, [r7, #16]
   1b980:	f00d fd72 	bl	29468 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1b984:	e72d      	b.n	1b7e2 <smp_pairing_req+0x5e>
	switch (sec) {
   1b986:	2b04      	cmp	r3, #4
   1b988:	f47f af2b 	bne.w	1b7e2 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1b98c:	7d23      	ldrb	r3, [r4, #20]
   1b98e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1b990:	4293      	cmp	r3, r2
   1b992:	bf28      	it	cs
   1b994:	4613      	movcs	r3, r2
   1b996:	2b10      	cmp	r3, #16
   1b998:	f47f af04 	bne.w	1b7a4 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b99c:	2105      	movs	r1, #5
   1b99e:	4630      	mov	r0, r6
   1b9a0:	f00d fc7d 	bl	2929e <atomic_test_bit>
   1b9a4:	2800      	cmp	r0, #0
   1b9a6:	d098      	beq.n	1b8da <smp_pairing_req+0x156>
		if (smp->method == JUST_WORKS) {
   1b9a8:	7a23      	ldrb	r3, [r4, #8]
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	d1c2      	bne.n	1b934 <smp_pairing_req+0x1b0>
   1b9ae:	e794      	b.n	1b8da <smp_pairing_req+0x156>
	switch (smp->method) {
   1b9b0:	2b06      	cmp	r3, #6
   1b9b2:	d85f      	bhi.n	1ba74 <smp_pairing_req+0x2f0>
   1b9b4:	e8df f003 	tbb	[pc, r3]
   1b9b8:	5e2f5617 	.word	0x5e2f5617
   1b9bc:	5e5e      	.short	0x5e5e
   1b9be:	04          	.byte	0x04
   1b9bf:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b9c0:	2d00      	cmp	r5, #0
   1b9c2:	d067      	beq.n	1ba94 <smp_pairing_req+0x310>
   1b9c4:	68eb      	ldr	r3, [r5, #12]
   1b9c6:	2b00      	cmp	r3, #0
   1b9c8:	d064      	beq.n	1ba94 <smp_pairing_req+0x310>
			struct bt_conn_oob_info info = {
   1b9ca:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b9cc:	210a      	movs	r1, #10
   1b9ce:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1b9d0:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b9d2:	f00d fd57 	bl	29484 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b9d6:	68eb      	ldr	r3, [r5, #12]
   1b9d8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b9dc:	4639      	mov	r1, r7
   1b9de:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b9e0:	7a23      	ldrb	r3, [r4, #8]
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	d158      	bne.n	1ba98 <smp_pairing_req+0x314>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b9e6:	210f      	movs	r1, #15
   1b9e8:	4630      	mov	r0, r6
   1b9ea:	f00d fc58 	bl	2929e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b9ee:	4605      	mov	r5, r0
   1b9f0:	2800      	cmp	r0, #0
   1b9f2:	d151      	bne.n	1ba98 <smp_pairing_req+0x314>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b9f4:	f1b8 0f00 	cmp.w	r8, #0
   1b9f8:	d04e      	beq.n	1ba98 <smp_pairing_req+0x314>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b9fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b9fe:	2b00      	cmp	r3, #0
   1ba00:	d04a      	beq.n	1ba98 <smp_pairing_req+0x314>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ba02:	4630      	mov	r0, r6
   1ba04:	210a      	movs	r1, #10
   1ba06:	f00d fd3d 	bl	29484 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1ba0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ba0e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1ba12:	4798      	blx	r3
		return 0;
   1ba14:	e6c7      	b.n	1b7a6 <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1ba16:	2104      	movs	r1, #4
   1ba18:	4638      	mov	r0, r7
   1ba1a:	f004 f893 	bl	1fb44 <bt_rand>
   1ba1e:	2800      	cmp	r0, #0
   1ba20:	f47f aedf 	bne.w	1b7e2 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1ba24:	683b      	ldr	r3, [r7, #0]
   1ba26:	4a27      	ldr	r2, [pc, #156]	; (1bac4 <smp_pairing_req+0x340>)
   1ba28:	fbb3 f1f2 	udiv	r1, r3, r2
   1ba2c:	fb02 3311 	mls	r3, r2, r1, r3
   1ba30:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ba32:	b14d      	cbz	r5, 1ba48 <smp_pairing_req+0x2c4>
   1ba34:	682b      	ldr	r3, [r5, #0]
   1ba36:	b13b      	cbz	r3, 1ba48 <smp_pairing_req+0x2c4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ba38:	210b      	movs	r1, #11
   1ba3a:	4630      	mov	r0, r6
   1ba3c:	f00d fd22 	bl	29484 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1ba40:	682b      	ldr	r3, [r5, #0]
   1ba42:	6839      	ldr	r1, [r7, #0]
   1ba44:	4648      	mov	r0, r9
   1ba46:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1ba48:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1ba4a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1ba4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1ba52:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1ba54:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1ba58:	0a1b      	lsrs	r3, r3, #8
   1ba5a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1ba5e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1ba62:	e7bd      	b.n	1b9e0 <smp_pairing_req+0x25c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ba64:	4630      	mov	r0, r6
   1ba66:	210a      	movs	r1, #10
   1ba68:	f00d fd0c 	bl	29484 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1ba6c:	686b      	ldr	r3, [r5, #4]
   1ba6e:	4648      	mov	r0, r9
   1ba70:	4798      	blx	r3
	if (ret) {
   1ba72:	e7b5      	b.n	1b9e0 <smp_pairing_req+0x25c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ba74:	466c      	mov	r4, sp
   1ba76:	b088      	sub	sp, #32
   1ba78:	466a      	mov	r2, sp
   1ba7a:	4913      	ldr	r1, [pc, #76]	; (1bac8 <smp_pairing_req+0x344>)
   1ba7c:	4810      	ldr	r0, [pc, #64]	; (1bac0 <smp_pairing_req+0x33c>)
	switch (smp->method) {
   1ba7e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ba82:	2303      	movs	r3, #3
   1ba84:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ba8c:	f00d fcec 	bl	29468 <z_log_msg_static_create.constprop.0>
   1ba90:	46a5      	mov	sp, r4
	if (ret) {
   1ba92:	e6a6      	b.n	1b7e2 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ba94:	2502      	movs	r5, #2
   1ba96:	e686      	b.n	1b7a6 <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ba98:	2103      	movs	r1, #3
   1ba9a:	4620      	mov	r0, r4
   1ba9c:	f00d fcf2 	bl	29484 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1baa0:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1baa2:	f00d fcef 	bl	29484 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1baa6:	f00d fd20 	bl	294ea <send_pairing_rsp>
   1baaa:	4605      	mov	r5, r0
   1baac:	e67b      	b.n	1b7a6 <smp_pairing_req+0x22>
   1baae:	bf00      	nop
   1bab0:	20003dac 	.word	0x20003dac
   1bab4:	0002e49b 	.word	0x0002e49b
   1bab8:	0002e4b4 	.word	0x0002e4b4
   1babc:	0002e11a 	.word	0x0002e11a
   1bac0:	0002b534 	.word	0x0002b534
   1bac4:	000f4240 	.word	0x000f4240
   1bac8:	0002e147 	.word	0x0002e147
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bacc:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1bace:	b995      	cbnz	r5, 1baf6 <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bad0:	210f      	movs	r1, #15
   1bad2:	4630      	mov	r0, r6
   1bad4:	f00d fbe3 	bl	2929e <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bad8:	b968      	cbnz	r0, 1baf6 <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bada:	f1b9 0f00 	cmp.w	r9, #0
   1bade:	d00a      	beq.n	1baf6 <smp_pairing_req+0x372>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1bae0:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1bae4:	b13b      	cbz	r3, 1baf6 <smp_pairing_req+0x372>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bae6:	4630      	mov	r0, r6
   1bae8:	210a      	movs	r1, #10
   1baea:	f00d fccb 	bl	29484 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1baee:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1baf2:	4640      	mov	r0, r8
   1baf4:	e78d      	b.n	1ba12 <smp_pairing_req+0x28e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1baf6:	210c      	movs	r1, #12
   1baf8:	4620      	mov	r0, r4
   1bafa:	e7d2      	b.n	1baa2 <smp_pairing_req+0x31e>

0001bafc <compute_and_check_and_send_periph_dhcheck>:
{
   1bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb00:	b0a3      	sub	sp, #140	; 0x8c
   1bb02:	4604      	mov	r4, r0
   1bb04:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1bb06:	2210      	movs	r2, #16
   1bb08:	2100      	movs	r1, #0
   1bb0a:	4638      	mov	r0, r7
   1bb0c:	f00b fe9a 	bl	27844 <memset>
	switch (smp->method) {
   1bb10:	7a23      	ldrb	r3, [r4, #8]
   1bb12:	2b05      	cmp	r3, #5
   1bb14:	f200 80a0 	bhi.w	1bc58 <compute_and_check_and_send_periph_dhcheck+0x15c>
   1bb18:	e8df f003 	tbb	[pc, r3]
   1bb1c:	09030309 	.word	0x09030309
   1bb20:	979e      	.short	0x979e
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1bb22:	2204      	movs	r2, #4
   1bb24:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1bb28:	4638      	mov	r0, r7
   1bb2a:	f00b fe80 	bl	2782e <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1bb2e:	4b79      	ldr	r3, [pc, #484]	; (1bd14 <compute_and_check_and_send_periph_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   1bb30:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1bb34:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1bb38:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   1bb3c:	4691      	mov	r9, r2
   1bb3e:	6818      	ldr	r0, [r3, #0]
   1bb40:	6859      	ldr	r1, [r3, #4]
   1bb42:	4615      	mov	r5, r2
   1bb44:	c503      	stmia	r5!, {r0, r1}
   1bb46:	3308      	adds	r3, #8
   1bb48:	4563      	cmp	r3, ip
   1bb4a:	462a      	mov	r2, r5
   1bb4c:	d1f7      	bne.n	1bb3e <compute_and_check_and_send_periph_dhcheck+0x42>
   1bb4e:	6818      	ldr	r0, [r3, #0]
   1bb50:	791b      	ldrb	r3, [r3, #4]
   1bb52:	6028      	str	r0, [r5, #0]
	sys_memcpy_swap(ws, w, 32);
   1bb54:	f107 0820 	add.w	r8, r7, #32
	uint8_t m[53] = { 0x00, /* counter */
   1bb58:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1bb5a:	2220      	movs	r2, #32
   1bb5c:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1bb60:	4640      	mov	r0, r8
   1bb62:	f00d fb83 	bl	2926c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1bb66:	486c      	ldr	r0, [pc, #432]	; (1bd18 <compute_and_check_and_send_periph_dhcheck+0x21c>)
   1bb68:	f107 0310 	add.w	r3, r7, #16
   1bb6c:	2220      	movs	r2, #32
   1bb6e:	4641      	mov	r1, r8
   1bb70:	f00d fbbf 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   1bb74:	2800      	cmp	r0, #0
   1bb76:	f040 80ca 	bne.w	1bd0e <compute_and_check_and_send_periph_dhcheck+0x212>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bb7a:	f104 0a37 	add.w	sl, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1bb7e:	2210      	movs	r2, #16
   1bb80:	4651      	mov	r1, sl
   1bb82:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bb86:	f104 0b27 	add.w	fp, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1bb8a:	f00d fb6f 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1bb8e:	2210      	movs	r2, #16
   1bb90:	4659      	mov	r1, fp
   1bb92:	f107 0055 	add.w	r0, r7, #85	; 0x55
   1bb96:	f00d fb69 	bl	2926c <sys_memcpy_swap>
	m[37] = a1->type;
   1bb9a:	f896 308f 	ldrb.w	r3, [r6, #143]	; 0x8f
   1bb9e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1bba2:	2206      	movs	r2, #6
   1bba4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bba8:	f107 0066 	add.w	r0, r7, #102	; 0x66
   1bbac:	f00d fb5e 	bl	2926c <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1bbb0:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	m[44] = a2->type;
   1bbb4:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1bbb8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1bbbc:	2206      	movs	r2, #6
   1bbbe:	f106 0197 	add.w	r1, r6, #151	; 0x97
   1bbc2:	f107 006d 	add.w	r0, r7, #109	; 0x6d
   1bbc6:	f00d fb51 	bl	2926c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1bbca:	462b      	mov	r3, r5
   1bbcc:	2235      	movs	r2, #53	; 0x35
   1bbce:	4649      	mov	r1, r9
   1bbd0:	f107 0010 	add.w	r0, r7, #16
   1bbd4:	f00d fb8d 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   1bbd8:	2800      	cmp	r0, #0
   1bbda:	f040 8098 	bne.w	1bd0e <compute_and_check_and_send_periph_dhcheck+0x212>
	sys_mem_swap(mackey, 16);
   1bbde:	2110      	movs	r1, #16
   1bbe0:	4628      	mov	r0, r5
   1bbe2:	f00d fb4d 	bl	29280 <sys_mem_swap>
		   smp->tk)) {
   1bbe6:	f104 0647 	add.w	r6, r4, #71	; 0x47
	m[0] = 0x01;
   1bbea:	2301      	movs	r3, #1
   1bbec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1bbf0:	2235      	movs	r2, #53	; 0x35
   1bbf2:	4633      	mov	r3, r6
   1bbf4:	4649      	mov	r1, r9
   1bbf6:	f107 0010 	add.w	r0, r7, #16
   1bbfa:	f00d fb7a 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   1bbfe:	2800      	cmp	r0, #0
   1bc00:	f040 8085 	bne.w	1bd0e <compute_and_check_and_send_periph_dhcheck+0x212>
	sys_mem_swap(ltk, 16);
   1bc04:	2110      	movs	r1, #16
   1bc06:	4630      	mov	r0, r6
   1bc08:	f00d fb3a 	bl	29280 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   1bc0c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bc10:	f8cd 800c 	str.w	r8, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1bc14:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1bc18:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bc1a:	9301      	str	r3, [sp, #4]
   1bc1c:	f104 0311 	add.w	r3, r4, #17
   1bc20:	9202      	str	r2, [sp, #8]
   1bc22:	9300      	str	r3, [sp, #0]
   1bc24:	4652      	mov	r2, sl
   1bc26:	463b      	mov	r3, r7
   1bc28:	4659      	mov	r1, fp
   1bc2a:	4628      	mov	r0, r5
   1bc2c:	f00d fba3 	bl	29376 <smp_f6>
   1bc30:	b318      	cbz	r0, 1bc7a <compute_and_check_and_send_periph_dhcheck+0x17e>
		BT_ERR("Calculate local DHKey check failed");
   1bc32:	4b3a      	ldr	r3, [pc, #232]	; (1bd1c <compute_and_check_and_send_periph_dhcheck+0x220>)
		BT_ERR("Calculate LTK failed");
   1bc34:	657b      	str	r3, [r7, #84]	; 0x54
   1bc36:	483a      	ldr	r0, [pc, #232]	; (1bd20 <compute_and_check_and_send_periph_dhcheck+0x224>)
   1bc38:	2302      	movs	r3, #2
   1bc3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1bc3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc42:	653b      	str	r3, [r7, #80]	; 0x50
   1bc44:	f00d fc10 	bl	29468 <z_log_msg_static_create.constprop.0>
   1bc48:	e015      	b.n	1bc76 <compute_and_check_and_send_periph_dhcheck+0x17a>
		if (smp->oobd_remote) {
   1bc4a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1bc4e:	2900      	cmp	r1, #0
   1bc50:	f43f af6d 	beq.w	1bb2e <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1bc54:	2210      	movs	r2, #16
   1bc56:	e767      	b.n	1bb28 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bc58:	466c      	mov	r4, sp
   1bc5a:	b088      	sub	sp, #32
   1bc5c:	aa04      	add	r2, sp, #16
   1bc5e:	4931      	ldr	r1, [pc, #196]	; (1bd24 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1bc60:	482f      	ldr	r0, [pc, #188]	; (1bd20 <compute_and_check_and_send_periph_dhcheck+0x224>)
	switch (smp->method) {
   1bc62:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bc66:	2303      	movs	r3, #3
   1bc68:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bc70:	f00d fbfa 	bl	29468 <z_log_msg_static_create.constprop.0>
   1bc74:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1bc76:	2008      	movs	r0, #8
   1bc78:	e043      	b.n	1bd02 <compute_and_check_and_send_periph_dhcheck+0x206>
	if (smp->method == LE_SC_OOB) {
   1bc7a:	7a23      	ldrb	r3, [r4, #8]
   1bc7c:	2b05      	cmp	r3, #5
   1bc7e:	d106      	bne.n	1bc8e <compute_and_check_and_send_periph_dhcheck+0x192>
		if (smp->oobd_local) {
   1bc80:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1bc84:	2210      	movs	r2, #16
   1bc86:	4638      	mov	r0, r7
		if (smp->oobd_local) {
   1bc88:	b1b9      	cbz	r1, 1bcba <compute_and_check_and_send_periph_dhcheck+0x1be>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1bc8a:	f00b fdd0 	bl	2782e <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1bc8e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1bc92:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1bc96:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1bc98:	f107 0610 	add.w	r6, r7, #16
   1bc9c:	9301      	str	r3, [sp, #4]
   1bc9e:	f104 030a 	add.w	r3, r4, #10
   1bca2:	9202      	str	r2, [sp, #8]
   1bca4:	9300      	str	r3, [sp, #0]
   1bca6:	9603      	str	r6, [sp, #12]
   1bca8:	463b      	mov	r3, r7
   1bcaa:	465a      	mov	r2, fp
   1bcac:	4651      	mov	r1, sl
   1bcae:	4628      	mov	r0, r5
   1bcb0:	f00d fb61 	bl	29376 <smp_f6>
   1bcb4:	b120      	cbz	r0, 1bcc0 <compute_and_check_and_send_periph_dhcheck+0x1c4>
		BT_ERR("Calculate remote DHKey check failed");
   1bcb6:	4b1c      	ldr	r3, [pc, #112]	; (1bd28 <compute_and_check_and_send_periph_dhcheck+0x22c>)
   1bcb8:	e7bc      	b.n	1bc34 <compute_and_check_and_send_periph_dhcheck+0x138>
			memset(r, 0, sizeof(r));
   1bcba:	f00b fdc3 	bl	27844 <memset>
   1bcbe:	e7e6      	b.n	1bc8e <compute_and_check_and_send_periph_dhcheck+0x192>
	if (memcmp(smp->e, re, 16)) {
   1bcc0:	2210      	movs	r2, #16
   1bcc2:	4631      	mov	r1, r6
   1bcc4:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1bcc8:	f00b fd88 	bl	277dc <memcmp>
   1bccc:	4605      	mov	r5, r0
   1bcce:	b9e0      	cbnz	r0, 1bd0a <compute_and_check_and_send_periph_dhcheck+0x20e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1bcd0:	210d      	movs	r1, #13
   1bcd2:	4620      	mov	r0, r4
   1bcd4:	f00d fbea 	bl	294ac <smp_create_pdu.constprop.0>
	if (!buf) {
   1bcd8:	4606      	mov	r6, r0
   1bcda:	2800      	cmp	r0, #0
   1bcdc:	d0cb      	beq.n	1bc76 <compute_and_check_and_send_periph_dhcheck+0x17a>
   1bcde:	2110      	movs	r1, #16
   1bce0:	3008      	adds	r0, #8
   1bce2:	f00d ff82 	bl	29bea <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1bce6:	2210      	movs	r2, #16
   1bce8:	4641      	mov	r1, r8
   1bcea:	f00b fda0 	bl	2782e <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1bcee:	462a      	mov	r2, r5
   1bcf0:	4631      	mov	r1, r6
   1bcf2:	4620      	mov	r0, r4
   1bcf4:	f00d fb9b 	bl	2942e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bcf8:	1d20      	adds	r0, r4, #4
   1bcfa:	2101      	movs	r1, #1
   1bcfc:	f00d fbc2 	bl	29484 <atomic_set_bit>
	return 0;
   1bd00:	4628      	mov	r0, r5
}
   1bd02:	377c      	adds	r7, #124	; 0x7c
   1bd04:	46bd      	mov	sp, r7
   1bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1bd0a:	200b      	movs	r0, #11
   1bd0c:	e7f9      	b.n	1bd02 <compute_and_check_and_send_periph_dhcheck+0x206>
		BT_ERR("Calculate LTK failed");
   1bd0e:	4b07      	ldr	r3, [pc, #28]	; (1bd2c <compute_and_check_and_send_periph_dhcheck+0x230>)
   1bd10:	e790      	b.n	1bc34 <compute_and_check_and_send_periph_dhcheck+0x138>
   1bd12:	bf00      	nop
   1bd14:	0002b8d3 	.word	0x0002b8d3
   1bd18:	0002e4cd 	.word	0x0002e4cd
   1bd1c:	0002e163 	.word	0x0002e163
   1bd20:	0002b534 	.word	0x0002b534
   1bd24:	0002e147 	.word	0x0002e147
   1bd28:	0002e186 	.word	0x0002e186
   1bd2c:	0002e1aa 	.word	0x0002e1aa

0001bd30 <smp_send_pairing_confirm>:
{
   1bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd32:	b083      	sub	sp, #12
	switch (smp->method) {
   1bd34:	7a04      	ldrb	r4, [r0, #8]
   1bd36:	2c02      	cmp	r4, #2
{
   1bd38:	af02      	add	r7, sp, #8
   1bd3a:	4605      	mov	r5, r0
	switch (smp->method) {
   1bd3c:	d823      	bhi.n	1bd86 <smp_send_pairing_confirm+0x56>
   1bd3e:	b144      	cbz	r4, 1bd52 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bd40:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1bd44:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1bd48:	40dc      	lsrs	r4, r3
   1bd4a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1bd4e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1bd52:	2103      	movs	r1, #3
   1bd54:	4628      	mov	r0, r5
   1bd56:	f00d fba9 	bl	294ac <smp_create_pdu.constprop.0>
	if (!buf) {
   1bd5a:	4606      	mov	r6, r0
   1bd5c:	b320      	cbz	r0, 1bda8 <smp_send_pairing_confirm+0x78>
   1bd5e:	2110      	movs	r1, #16
   1bd60:	3008      	adds	r0, #8
   1bd62:	f00d ff42 	bl	29bea <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1bd66:	9000      	str	r0, [sp, #0]
   1bd68:	4818      	ldr	r0, [pc, #96]	; (1bdcc <smp_send_pairing_confirm+0x9c>)
   1bd6a:	4623      	mov	r3, r4
   1bd6c:	6800      	ldr	r0, [r0, #0]
   1bd6e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1bd72:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1bd76:	f00d fad8 	bl	2932a <smp_f4>
   1bd7a:	4604      	mov	r4, r0
   1bd7c:	b1c0      	cbz	r0, 1bdb0 <smp_send_pairing_confirm+0x80>
		net_buf_unref(buf);
   1bd7e:	4630      	mov	r0, r6
   1bd80:	f001 fce8 	bl	1d754 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1bd84:	e010      	b.n	1bda8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1bd86:	2c03      	cmp	r4, #3
   1bd88:	d010      	beq.n	1bdac <smp_send_pairing_confirm+0x7c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bd8a:	466d      	mov	r5, sp
   1bd8c:	b088      	sub	sp, #32
   1bd8e:	aa02      	add	r2, sp, #8
   1bd90:	4b0f      	ldr	r3, [pc, #60]	; (1bdd0 <smp_send_pairing_confirm+0xa0>)
   1bd92:	4810      	ldr	r0, [pc, #64]	; (1bdd4 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1bd94:	e9c2 3405 	strd	r3, r4, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bd98:	2303      	movs	r3, #3
   1bd9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bda2:	f00d fb61 	bl	29468 <z_log_msg_static_create.constprop.0>
   1bda6:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1bda8:	2008      	movs	r0, #8
   1bdaa:	e00b      	b.n	1bdc4 <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   1bdac:	2400      	movs	r4, #0
   1bdae:	e7d0      	b.n	1bd52 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1bdb0:	4602      	mov	r2, r0
   1bdb2:	4631      	mov	r1, r6
   1bdb4:	4628      	mov	r0, r5
   1bdb6:	f00d fb3a 	bl	2942e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1bdba:	1d28      	adds	r0, r5, #4
   1bdbc:	4621      	mov	r1, r4
   1bdbe:	f00d fb27 	bl	29410 <atomic_clear_bit>
	return 0;
   1bdc2:	4620      	mov	r0, r4
}
   1bdc4:	3704      	adds	r7, #4
   1bdc6:	46bd      	mov	sp, r7
   1bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bdca:	bf00      	nop
   1bdcc:	20002e6c 	.word	0x20002e6c
   1bdd0:	0002e147 	.word	0x0002e147
   1bdd4:	0002b534 	.word	0x0002b534

0001bdd8 <smp_public_key_periph>:
{
   1bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bddc:	b086      	sub	sp, #24
   1bdde:	af00      	add	r7, sp, #0
   1bde0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bde2:	f7ff fb27 	bl	1b434 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1bde6:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bde8:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1bdea:	210e      	movs	r1, #14
   1bdec:	4630      	mov	r0, r6
   1bdee:	f00d fa56 	bl	2929e <atomic_test_bit>
   1bdf2:	b9a0      	cbnz	r0, 1be1e <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1bdf4:	4b52      	ldr	r3, [pc, #328]	; (1bf40 <smp_public_key_periph+0x168>)
   1bdf6:	2220      	movs	r2, #32
   1bdf8:	6819      	ldr	r1, [r3, #0]
   1bdfa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bdfe:	f00b fced 	bl	277dc <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1be02:	b960      	cbnz	r0, 1be1e <smp_public_key_periph+0x46>
		BT_WARN("Remote public key rejected");
   1be04:	4b4f      	ldr	r3, [pc, #316]	; (1bf44 <smp_public_key_periph+0x16c>)
   1be06:	617b      	str	r3, [r7, #20]
   1be08:	484f      	ldr	r0, [pc, #316]	; (1bf48 <smp_public_key_periph+0x170>)
   1be0a:	2302      	movs	r3, #2
   1be0c:	f107 0210 	add.w	r2, r7, #16
   1be10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1be14:	613b      	str	r3, [r7, #16]
   1be16:	f00d fb27 	bl	29468 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1be1a:	2008      	movs	r0, #8
   1be1c:	e02f      	b.n	1be7e <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1be1e:	210c      	movs	r1, #12
   1be20:	4620      	mov	r0, r4
   1be22:	f00d fb43 	bl	294ac <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1be26:	4605      	mov	r5, r0
   1be28:	2800      	cmp	r0, #0
   1be2a:	d0f6      	beq.n	1be1a <smp_public_key_periph+0x42>
   1be2c:	2140      	movs	r1, #64	; 0x40
   1be2e:	3008      	adds	r0, #8
   1be30:	f00d fedb 	bl	29bea <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1be34:	f8df a108 	ldr.w	sl, [pc, #264]	; 1bf40 <smp_public_key_periph+0x168>
   1be38:	2220      	movs	r2, #32
   1be3a:	f8da 1000 	ldr.w	r1, [sl]
   1be3e:	4681      	mov	r9, r0
   1be40:	f00b fcf5 	bl	2782e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1be44:	f8da 1000 	ldr.w	r1, [sl]
   1be48:	2220      	movs	r2, #32
   1be4a:	4411      	add	r1, r2
   1be4c:	eb09 0002 	add.w	r0, r9, r2
   1be50:	f00b fced 	bl	2782e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1be54:	2200      	movs	r2, #0
   1be56:	4629      	mov	r1, r5
   1be58:	4620      	mov	r0, r4
   1be5a:	f00d fae8 	bl	2942e <smp_send.constprop.0>
	switch (smp->method) {
   1be5e:	7a23      	ldrb	r3, [r4, #8]
   1be60:	2b05      	cmp	r3, #5
   1be62:	d85b      	bhi.n	1bf1c <smp_public_key_periph+0x144>
   1be64:	e8df f003 	tbb	[pc, r3]
   1be68:	030f3b03 	.word	0x030f3b03
   1be6c:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1be6e:	2104      	movs	r1, #4
   1be70:	4620      	mov	r0, r4
   1be72:	f00d fb07 	bl	29484 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1be76:	f7ff ff5b 	bl	1bd30 <smp_send_pairing_confirm>
		if (err) {
   1be7a:	2800      	cmp	r0, #0
   1be7c:	d03f      	beq.n	1befe <smp_public_key_periph+0x126>
}
   1be7e:	3718      	adds	r7, #24
   1be80:	46bd      	mov	sp, r7
   1be82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1be86:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1be88:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1be8c:	f7ff fad2 	bl	1b434 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1be90:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1be92:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1be94:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1be98:	f003 fe54 	bl	1fb44 <bt_rand>
   1be9c:	2800      	cmp	r0, #0
   1be9e:	d1bc      	bne.n	1be1a <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1bea0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1bea4:	4a29      	ldr	r2, [pc, #164]	; (1bf4c <smp_public_key_periph+0x174>)
   1bea6:	fbb3 f1f2 	udiv	r1, r3, r2
   1beaa:	fb02 3311 	mls	r3, r2, r1, r3
   1beae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1beb2:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1beb6:	b155      	cbz	r5, 1bece <smp_public_key_periph+0xf6>
   1beb8:	682b      	ldr	r3, [r5, #0]
   1beba:	b143      	cbz	r3, 1bece <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1bebc:	210b      	movs	r1, #11
   1bebe:	4630      	mov	r0, r6
   1bec0:	f00d fae0 	bl	29484 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1bec4:	682b      	ldr	r3, [r5, #0]
   1bec6:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1beca:	4640      	mov	r0, r8
   1becc:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bece:	2103      	movs	r1, #3
   1bed0:	4620      	mov	r0, r4
   1bed2:	f00d fad7 	bl	29484 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1bed6:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bed8:	f00d fad4 	bl	29484 <atomic_set_bit>
		break;
   1bedc:	e00f      	b.n	1befe <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bede:	4620      	mov	r0, r4
   1bee0:	2103      	movs	r1, #3
   1bee2:	f00d facf 	bl	29484 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1bee6:	210e      	movs	r1, #14
   1bee8:	f00d facc 	bl	29484 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1beec:	4630      	mov	r0, r6
   1beee:	210a      	movs	r1, #10
   1bef0:	f00d fac8 	bl	29484 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1bef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bef8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1befc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1befe:	4630      	mov	r0, r6
   1bf00:	2107      	movs	r1, #7
   1bf02:	f00d fabf 	bl	29484 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1bf06:	2008      	movs	r0, #8
   1bf08:	f7ff fa86 	bl	1b418 <smp_find>
   1bf0c:	b9b0      	cbnz	r0, 1bf3c <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   1bf0e:	4620      	mov	r0, r4
   1bf10:	f7ff fb9a 	bl	1b648 <smp_dhkey_generate>
   1bf14:	e7b3      	b.n	1be7e <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bf16:	2104      	movs	r1, #4
   1bf18:	4620      	mov	r0, r4
   1bf1a:	e7dd      	b.n	1bed8 <smp_public_key_periph+0x100>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bf1c:	466c      	mov	r4, sp
   1bf1e:	b088      	sub	sp, #32
   1bf20:	466a      	mov	r2, sp
   1bf22:	490b      	ldr	r1, [pc, #44]	; (1bf50 <smp_public_key_periph+0x178>)
   1bf24:	4808      	ldr	r0, [pc, #32]	; (1bf48 <smp_public_key_periph+0x170>)
	switch (smp->method) {
   1bf26:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bf2a:	2303      	movs	r3, #3
   1bf2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bf34:	f00d fa98 	bl	29468 <z_log_msg_static_create.constprop.0>
   1bf38:	46a5      	mov	sp, r4
   1bf3a:	e76e      	b.n	1be1a <smp_public_key_periph+0x42>
	return 0;
   1bf3c:	2000      	movs	r0, #0
   1bf3e:	e79e      	b.n	1be7e <smp_public_key_periph+0xa6>
   1bf40:	20002e6c 	.word	0x20002e6c
   1bf44:	0002e1bf 	.word	0x0002e1bf
   1bf48:	0002b534 	.word	0x0002b534
   1bf4c:	000f4240 	.word	0x000f4240
   1bf50:	0002e147 	.word	0x0002e147

0001bf54 <smp_public_key>:
{
   1bf54:	b570      	push	{r4, r5, r6, lr}
   1bf56:	460d      	mov	r5, r1
   1bf58:	b086      	sub	sp, #24
   1bf5a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bf5c:	f7ff fa6a 	bl	1b434 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1bf60:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1bf62:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1bf66:	2220      	movs	r2, #32
   1bf68:	4631      	mov	r1, r6
   1bf6a:	4628      	mov	r0, r5
   1bf6c:	f00b fc5f 	bl	2782e <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1bf70:	2220      	movs	r2, #32
   1bf72:	18b1      	adds	r1, r6, r2
   1bf74:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1bf78:	f00b fc59 	bl	2782e <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1bf7c:	4628      	mov	r0, r5
   1bf7e:	f7fb fd17 	bl	179b0 <bt_pub_key_is_debug>
   1bf82:	b940      	cbnz	r0, 1bf96 <smp_public_key+0x42>
	if (!sc_public_key) {
   1bf84:	4b1b      	ldr	r3, [pc, #108]	; (1bff4 <smp_public_key+0xa0>)
   1bf86:	681d      	ldr	r5, [r3, #0]
   1bf88:	bb75      	cbnz	r5, 1bfe8 <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1bf8a:	1d20      	adds	r0, r4, #4
   1bf8c:	2106      	movs	r1, #6
   1bf8e:	f00d fa79 	bl	29484 <atomic_set_bit>
		return 0;
   1bf92:	4628      	mov	r0, r5
   1bf94:	e026      	b.n	1bfe4 <smp_public_key+0x90>
		BT_INFO("Remote is using Debug Public key");
   1bf96:	4b18      	ldr	r3, [pc, #96]	; (1bff8 <smp_public_key+0xa4>)
   1bf98:	4818      	ldr	r0, [pc, #96]	; (1bffc <smp_public_key+0xa8>)
   1bf9a:	9305      	str	r3, [sp, #20]
   1bf9c:	aa04      	add	r2, sp, #16
   1bf9e:	2302      	movs	r3, #2
   1bfa0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1bfa4:	9304      	str	r3, [sp, #16]
   1bfa6:	f00d fa5f 	bl	29468 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1bfaa:	210e      	movs	r1, #14
   1bfac:	1d20      	adds	r0, r4, #4
   1bfae:	f00d fa69 	bl	29484 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1bfb2:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1bfb6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1bfba:	b933      	cbnz	r3, 1bfca <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bfbc:	7a28      	ldrb	r0, [r5, #8]
   1bfbe:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bfc2:	f001 f8bd 	bl	1d140 <bt_keys_get_addr>
   1bfc6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1bfca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	d0d8      	beq.n	1bf84 <smp_public_key+0x30>
   1bfd2:	89da      	ldrh	r2, [r3, #14]
   1bfd4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1bfd8:	2a00      	cmp	r2, #0
   1bfda:	d0d3      	beq.n	1bf84 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1bfdc:	7b5b      	ldrb	r3, [r3, #13]
   1bfde:	079b      	lsls	r3, r3, #30
   1bfe0:	d4d0      	bmi.n	1bf84 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bfe2:	2003      	movs	r0, #3
}
   1bfe4:	b006      	add	sp, #24
   1bfe6:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1bfe8:	4620      	mov	r0, r4
}
   1bfea:	b006      	add	sp, #24
   1bfec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1bff0:	f7ff bef2 	b.w	1bdd8 <smp_public_key_periph>
   1bff4:	20002e6c 	.word	0x20002e6c
   1bff8:	0002e1da 	.word	0x0002e1da
   1bffc:	0002b534 	.word	0x0002b534

0001c000 <bt_smp_connected>:
{
   1c000:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1c002:	490b      	ldr	r1, [pc, #44]	; (1c030 <bt_smp_connected+0x30>)
{
   1c004:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1c006:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1c00a:	308c      	adds	r0, #140	; 0x8c
   1c00c:	f00e fd07 	bl	2aa1e <k_work_init_delayable>
	smp_reset(smp);
   1c010:	4628      	mov	r0, r5
   1c012:	f00d fadf 	bl	295d4 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c016:	f3bf 8f5b 	dmb	ish
   1c01a:	4b06      	ldr	r3, [pc, #24]	; (1c034 <bt_smp_connected+0x34>)
   1c01c:	34bc      	adds	r4, #188	; 0xbc
   1c01e:	e854 2f00 	ldrex	r2, [r4]
   1c022:	e844 3100 	strex	r1, r3, [r4]
   1c026:	2900      	cmp	r1, #0
   1c028:	d1f9      	bne.n	1c01e <bt_smp_connected+0x1e>
   1c02a:	f3bf 8f5b 	dmb	ish
}
   1c02e:	bd38      	pop	{r3, r4, r5, pc}
   1c030:	0001cfb9 	.word	0x0001cfb9
   1c034:	200020b0 	.word	0x200020b0

0001c038 <smp_pairing_confirm>:
{
   1c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1c03a:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c03c:	1d05      	adds	r5, r0, #4
{
   1c03e:	af00      	add	r7, sp, #0
   1c040:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c042:	210b      	movs	r1, #11
   1c044:	4628      	mov	r0, r5
   1c046:	f00d f9e3 	bl	29410 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1c04a:	4631      	mov	r1, r6
   1c04c:	2210      	movs	r2, #16
   1c04e:	f104 0017 	add.w	r0, r4, #23
   1c052:	f00b fbec 	bl	2782e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c056:	2105      	movs	r1, #5
   1c058:	4628      	mov	r0, r5
   1c05a:	f00d f920 	bl	2929e <atomic_test_bit>
   1c05e:	b920      	cbnz	r0, 1c06a <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1c060:	4620      	mov	r0, r4
   1c062:	f00d fb35 	bl	296d0 <legacy_pairing_confirm>
}
   1c066:	46bd      	mov	sp, r7
   1c068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1c06a:	7a23      	ldrb	r3, [r4, #8]
   1c06c:	2b01      	cmp	r3, #1
   1c06e:	d008      	beq.n	1c082 <smp_pairing_confirm+0x4a>
   1c070:	2b02      	cmp	r3, #2
   1c072:	d112      	bne.n	1c09a <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c074:	2104      	movs	r1, #4
   1c076:	4620      	mov	r0, r4
   1c078:	f00d fa04 	bl	29484 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1c07c:	f7ff fe58 	bl	1bd30 <smp_send_pairing_confirm>
   1c080:	e7f1      	b.n	1c066 <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c082:	210a      	movs	r1, #10
   1c084:	4628      	mov	r0, r5
   1c086:	f00d f90a 	bl	2929e <atomic_test_bit>
   1c08a:	2800      	cmp	r0, #0
   1c08c:	d0f2      	beq.n	1c074 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c08e:	4628      	mov	r0, r5
   1c090:	2100      	movs	r1, #0
   1c092:	f00d f9f7 	bl	29484 <atomic_set_bit>
			return 0;
   1c096:	2000      	movs	r0, #0
   1c098:	e7e5      	b.n	1c066 <smp_pairing_confirm+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c09a:	466c      	mov	r4, sp
   1c09c:	b088      	sub	sp, #32
   1c09e:	466a      	mov	r2, sp
   1c0a0:	4906      	ldr	r1, [pc, #24]	; (1c0bc <smp_pairing_confirm+0x84>)
   1c0a2:	4807      	ldr	r0, [pc, #28]	; (1c0c0 <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   1c0a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c0a8:	2303      	movs	r3, #3
   1c0aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c0b2:	f00d f9d9 	bl	29468 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c0b6:	2008      	movs	r0, #8
   1c0b8:	46a5      	mov	sp, r4
   1c0ba:	e7d4      	b.n	1c066 <smp_pairing_confirm+0x2e>
   1c0bc:	0002e147 	.word	0x0002e147
   1c0c0:	0002b534 	.word	0x0002b534

0001c0c4 <smp_pairing_random>:
{
   1c0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0c8:	b09f      	sub	sp, #124	; 0x7c
   1c0ca:	af04      	add	r7, sp, #16
   1c0cc:	4604      	mov	r4, r0
   1c0ce:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c0d0:	f7ff f9b0 	bl	1b434 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0d4:	f104 0937 	add.w	r9, r4, #55	; 0x37
   1c0d8:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c0da:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0dc:	2210      	movs	r2, #16
   1c0de:	4648      	mov	r0, r9
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c0e0:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0e2:	f00b fba4 	bl	2782e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c0e6:	2105      	movs	r1, #5
   1c0e8:	4630      	mov	r0, r6
   1c0ea:	f00d f8d8 	bl	2929e <atomic_test_bit>
   1c0ee:	2800      	cmp	r0, #0
   1c0f0:	d14a      	bne.n	1c188 <smp_pairing_random+0xc4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c0f2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c0f6:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c0fa:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c0fe:	f107 0508 	add.w	r5, r7, #8
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c102:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c104:	9201      	str	r2, [sp, #4]
   1c106:	9300      	str	r3, [sp, #0]
   1c108:	9502      	str	r5, [sp, #8]
   1c10a:	f104 0310 	add.w	r3, r4, #16
   1c10e:	f104 0209 	add.w	r2, r4, #9
   1c112:	4649      	mov	r1, r9
   1c114:	4640      	mov	r0, r8
   1c116:	f00d fa80 	bl	2961a <smp_c1>
	if (err) {
   1c11a:	bb28      	cbnz	r0, 1c168 <smp_pairing_random+0xa4>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1c11c:	2210      	movs	r2, #16
   1c11e:	4629      	mov	r1, r5
   1c120:	f104 0017 	add.w	r0, r4, #23
   1c124:	f00b fb5a 	bl	277dc <memcmp>
   1c128:	2800      	cmp	r0, #0
   1c12a:	f040 8097 	bne.w	1c25c <smp_pairing_random+0x198>
	memcpy(out, r2, 8);
   1c12e:	2208      	movs	r2, #8
   1c130:	4649      	mov	r1, r9
   1c132:	4628      	mov	r0, r5
   1c134:	f00b fb7b 	bl	2782e <memcpy>
	memcpy(out + 8, r1, 8);
   1c138:	2208      	movs	r2, #8
   1c13a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c13e:	f107 0010 	add.w	r0, r7, #16
   1c142:	f00b fb74 	bl	2782e <memcpy>
	return bt_encrypt_le(k, out, out);
   1c146:	462a      	mov	r2, r5
   1c148:	4629      	mov	r1, r5
   1c14a:	4640      	mov	r0, r8
   1c14c:	f00e f832 	bl	2a1b4 <bt_encrypt_le>
		if (err) {
   1c150:	b160      	cbz	r0, 1c16c <smp_pairing_random+0xa8>
			BT_ERR("Calculate STK failed");
   1c152:	4b77      	ldr	r3, [pc, #476]	; (1c330 <smp_pairing_random+0x26c>)
		BT_ERR("Calculate confirm failed");
   1c154:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c156:	4877      	ldr	r0, [pc, #476]	; (1c334 <smp_pairing_random+0x270>)
   1c158:	2302      	movs	r3, #2
   1c15a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c15e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c162:	62bb      	str	r3, [r7, #40]	; 0x28
   1c164:	f00d f980 	bl	29468 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c168:	2508      	movs	r5, #8
   1c16a:	e078      	b.n	1c25e <smp_pairing_random+0x19a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1c16c:	4629      	mov	r1, r5
   1c16e:	2210      	movs	r2, #16
   1c170:	4640      	mov	r0, r8
   1c172:	f00b fb5c 	bl	2782e <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c176:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c178:	4630      	mov	r0, r6
   1c17a:	f00d f983 	bl	29484 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1c17e:	4620      	mov	r0, r4
   1c180:	f00d f9cc 	bl	2951c <smp_send_pairing_random>
   1c184:	4605      	mov	r5, r0
   1c186:	e06a      	b.n	1c25e <smp_pairing_random+0x19a>
	switch (smp->method) {
   1c188:	7a23      	ldrb	r3, [r4, #8]
   1c18a:	2b05      	cmp	r3, #5
   1c18c:	f200 80ab 	bhi.w	1c2e6 <smp_pairing_random+0x222>
   1c190:	e8df f003 	tbb	[pc, r3]
   1c194:	03474741 	.word	0x03474741
   1c198:	8ca9      	.short	0x8ca9
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c19a:	4b67      	ldr	r3, [pc, #412]	; (1c338 <smp_pairing_random+0x274>)
   1c19c:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1c19e:	2220      	movs	r2, #32
   1c1a0:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1c1a4:	f107 0018 	add.w	r0, r7, #24
   1c1a8:	f00d f860 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c1ac:	2220      	movs	r2, #32
   1c1ae:	4629      	mov	r1, r5
   1c1b0:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1c1b4:	f00d f85a 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1c1b8:	2210      	movs	r2, #16
   1c1ba:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c1be:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1c1c2:	f00d f853 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c1c6:	2210      	movs	r2, #16
   1c1c8:	4649      	mov	r1, r9
   1c1ca:	f107 0008 	add.w	r0, r7, #8
   1c1ce:	f00d f84d 	bl	2926c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c1d2:	f107 0308 	add.w	r3, r7, #8
   1c1d6:	2250      	movs	r2, #80	; 0x50
   1c1d8:	f107 0118 	add.w	r1, r7, #24
   1c1dc:	4618      	mov	r0, r3
   1c1de:	f00d f888 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   1c1e2:	2800      	cmp	r0, #0
   1c1e4:	d1c0      	bne.n	1c168 <smp_pairing_random+0xa4>
	memcpy(passkey, xs + 12, 4);
   1c1e6:	2204      	movs	r2, #4
   1c1e8:	f107 0114 	add.w	r1, r7, #20
   1c1ec:	18b8      	adds	r0, r7, r2
   1c1ee:	f00b fb1e 	bl	2782e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c1f2:	687b      	ldr	r3, [r7, #4]
   1c1f4:	4a51      	ldr	r2, [pc, #324]	; (1c33c <smp_pairing_random+0x278>)
   1c1f6:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c1f8:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c1fa:	fbb3 f1f2 	udiv	r1, r3, r2
   1c1fe:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c202:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c204:	607b      	str	r3, [r7, #4]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c206:	f00d f93d 	bl	29484 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1c20a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c20e:	6879      	ldr	r1, [r7, #4]
   1c210:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c214:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c216:	210d      	movs	r1, #13
   1c218:	4620      	mov	r0, r4
   1c21a:	f00d f933 	bl	29484 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c21e:	2110      	movs	r1, #16
   1c220:	e7aa      	b.n	1c178 <smp_pairing_random+0xb4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c222:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1c226:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c22a:	4943      	ldr	r1, [pc, #268]	; (1c338 <smp_pairing_random+0x274>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c22c:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c22e:	f107 0508 	add.w	r5, r7, #8
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c232:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c236:	9500      	str	r5, [sp, #0]
   1c238:	6809      	ldr	r1, [r1, #0]
   1c23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c23e:	464a      	mov	r2, r9
   1c240:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c244:	f00d f871 	bl	2932a <smp_f4>
   1c248:	b108      	cbz	r0, 1c24e <smp_pairing_random+0x18a>
		BT_ERR("Calculate confirm failed");
   1c24a:	4b3d      	ldr	r3, [pc, #244]	; (1c340 <smp_pairing_random+0x27c>)
   1c24c:	e782      	b.n	1c154 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c24e:	2210      	movs	r2, #16
   1c250:	4629      	mov	r1, r5
   1c252:	f104 0017 	add.w	r0, r4, #23
   1c256:	f00b fac1 	bl	277dc <memcmp>
   1c25a:	b128      	cbz	r0, 1c268 <smp_pairing_random+0x1a4>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c25c:	2504      	movs	r5, #4
}
   1c25e:	4628      	mov	r0, r5
   1c260:	376c      	adds	r7, #108	; 0x6c
   1c262:	46bd      	mov	sp, r7
   1c264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->allowed_cmds,
   1c268:	2103      	movs	r1, #3
   1c26a:	4620      	mov	r0, r4
   1c26c:	f00d f90a 	bl	29484 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c270:	f00d f954 	bl	2951c <smp_send_pairing_random>
		if (err) {
   1c274:	4605      	mov	r5, r0
   1c276:	2800      	cmp	r0, #0
   1c278:	d1f1      	bne.n	1c25e <smp_pairing_random+0x19a>
		smp->passkey_round++;
   1c27a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c27e:	3301      	adds	r3, #1
   1c280:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c282:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c284:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c288:	d108      	bne.n	1c29c <smp_pairing_random+0x1d8>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c28a:	4620      	mov	r0, r4
   1c28c:	210d      	movs	r1, #13
   1c28e:	f00d f8f9 	bl	29484 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c292:	2110      	movs	r1, #16
   1c294:	4630      	mov	r0, r6
   1c296:	f00d f8f5 	bl	29484 <atomic_set_bit>
			return 0;
   1c29a:	e7e0      	b.n	1c25e <smp_pairing_random+0x19a>
		if (bt_rand(smp->prnd, 16)) {
   1c29c:	2110      	movs	r1, #16
   1c29e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c2a2:	f003 fc4f 	bl	1fb44 <bt_rand>
   1c2a6:	2800      	cmp	r0, #0
   1c2a8:	d0d9      	beq.n	1c25e <smp_pairing_random+0x19a>
   1c2aa:	e75d      	b.n	1c168 <smp_pairing_random+0xa4>
		if (bt_rand(smp->prnd, 16)) {
   1c2ac:	2110      	movs	r1, #16
   1c2ae:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c2b2:	f003 fc47 	bl	1fb44 <bt_rand>
   1c2b6:	2800      	cmp	r0, #0
   1c2b8:	f47f af56 	bne.w	1c168 <smp_pairing_random+0xa4>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1c2bc:	f1b8 0f00 	cmp.w	r8, #0
   1c2c0:	d021      	beq.n	1c306 <smp_pairing_random+0x242>
   1c2c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c2c6:	b1f3      	cbz	r3, 1c306 <smp_pairing_random+0x242>
			struct bt_conn_oob_info info = {
   1c2c8:	4b1e      	ldr	r3, [pc, #120]	; (1c344 <smp_pairing_random+0x280>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2ca:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1c2cc:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1c2d0:	833b      	strh	r3, [r7, #24]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2d2:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c2d4:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2d6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c2da:	d416      	bmi.n	1c30a <smp_pairing_random+0x246>
				     BT_CONN_OOB_BOTH_PEERS :
   1c2dc:	2b00      	cmp	r3, #0
   1c2de:	bf0c      	ite	eq
   1c2e0:	2003      	moveq	r0, #3
   1c2e2:	2001      	movne	r0, #1
   1c2e4:	e014      	b.n	1c310 <smp_pairing_random+0x24c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c2e6:	466c      	mov	r4, sp
   1c2e8:	b088      	sub	sp, #32
   1c2ea:	aa04      	add	r2, sp, #16
   1c2ec:	4916      	ldr	r1, [pc, #88]	; (1c348 <smp_pairing_random+0x284>)
   1c2ee:	4811      	ldr	r0, [pc, #68]	; (1c334 <smp_pairing_random+0x270>)
	switch (smp->method) {
   1c2f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c2f4:	2303      	movs	r3, #3
   1c2f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c2fe:	f00d f8b3 	bl	29468 <z_log_msg_static_create.constprop.0>
   1c302:	46a5      	mov	sp, r4
   1c304:	e730      	b.n	1c168 <smp_pairing_random+0xa4>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c306:	2502      	movs	r5, #2
   1c308:	e7a9      	b.n	1c25e <smp_pairing_random+0x19a>
				     BT_CONN_OOB_BOTH_PEERS :
   1c30a:	2b00      	cmp	r3, #0
   1c30c:	bf18      	it	ne
   1c30e:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c310:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c312:	7678      	strb	r0, [r7, #25]
			smp->oobd_remote = NULL;
   1c314:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c318:	4630      	mov	r0, r6
   1c31a:	210c      	movs	r1, #12
   1c31c:	f00d f8b2 	bl	29484 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1c320:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c324:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c328:	f107 0118 	add.w	r1, r7, #24
   1c32c:	4798      	blx	r3
			return 0;
   1c32e:	e796      	b.n	1c25e <smp_pairing_random+0x19a>
   1c330:	0002e1fb 	.word	0x0002e1fb
   1c334:	0002b534 	.word	0x0002b534
   1c338:	20002e6c 	.word	0x20002e6c
   1c33c:	000f4240 	.word	0x000f4240
   1c340:	0002e210 	.word	0x0002e210
   1c344:	0002b8d3 	.word	0x0002b8d3
   1c348:	0002e147 	.word	0x0002e147

0001c34c <bt_smp_sign_verify>:
{
   1c34c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c34e:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1c350:	898b      	ldrh	r3, [r1, #12]
   1c352:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c354:	6889      	ldr	r1, [r1, #8]
{
   1c356:	4605      	mov	r5, r0
   1c358:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c35a:	3b0c      	subs	r3, #12
   1c35c:	4419      	add	r1, r3
   1c35e:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1c360:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1c364:	1d38      	adds	r0, r7, #4
   1c366:	f00b fa62 	bl	2782e <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1c36a:	7a29      	ldrb	r1, [r5, #8]
   1c36c:	4632      	mov	r2, r6
   1c36e:	2010      	movs	r0, #16
   1c370:	f000 ff5c 	bl	1d22c <bt_keys_find>
	if (!keys) {
   1c374:	4605      	mov	r5, r0
   1c376:	b9c0      	cbnz	r0, 1c3aa <bt_smp_sign_verify+0x5e>
		BT_ERR("Unable to find Remote CSRK for %s",
   1c378:	4630      	mov	r0, r6
   1c37a:	f7f9 f81f 	bl	153bc <bt_addr_le_str_real>
   1c37e:	466c      	mov	r4, sp
   1c380:	b088      	sub	sp, #32
   1c382:	466a      	mov	r2, sp
   1c384:	4b30      	ldr	r3, [pc, #192]	; (1c448 <bt_smp_sign_verify+0xfc>)
   1c386:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c38a:	2302      	movs	r3, #2
   1c38c:	7713      	strb	r3, [r2, #28]
   1c38e:	4b2f      	ldr	r3, [pc, #188]	; (1c44c <bt_smp_sign_verify+0x100>)
   1c390:	482f      	ldr	r0, [pc, #188]	; (1c450 <bt_smp_sign_verify+0x104>)
   1c392:	f842 3f10 	str.w	r3, [r2, #16]!
   1c396:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c39a:	f00d f865 	bl	29468 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1c39e:	f06f 0001 	mvn.w	r0, #1
   1c3a2:	46a5      	mov	sp, r4
}
   1c3a4:	3714      	adds	r7, #20
   1c3a6:	46bd      	mov	sp, r7
   1c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1c3aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1c3ac:	603b      	str	r3, [r7, #0]
   1c3ae:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1c3b0:	68a0      	ldr	r0, [r4, #8]
   1c3b2:	3b0c      	subs	r3, #12
   1c3b4:	2204      	movs	r2, #4
   1c3b6:	4639      	mov	r1, r7
   1c3b8:	4418      	add	r0, r3
   1c3ba:	f00b fa38 	bl	2782e <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1c3be:	89a2      	ldrh	r2, [r4, #12]
   1c3c0:	68a1      	ldr	r1, [r4, #8]
   1c3c2:	3a0c      	subs	r2, #12
   1c3c4:	b292      	uxth	r2, r2
   1c3c6:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1c3ca:	f7ff f8a5 	bl	1b518 <smp_sign_buf>
	if (err) {
   1c3ce:	b1b0      	cbz	r0, 1c3fe <bt_smp_sign_verify+0xb2>
		BT_ERR("Unable to create signature for %s",
   1c3d0:	4630      	mov	r0, r6
   1c3d2:	f7f8 fff3 	bl	153bc <bt_addr_le_str_real>
   1c3d6:	466c      	mov	r4, sp
   1c3d8:	b088      	sub	sp, #32
   1c3da:	466a      	mov	r2, sp
   1c3dc:	4b1d      	ldr	r3, [pc, #116]	; (1c454 <bt_smp_sign_verify+0x108>)
   1c3de:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c3e2:	2302      	movs	r3, #2
   1c3e4:	7713      	strb	r3, [r2, #28]
   1c3e6:	4b19      	ldr	r3, [pc, #100]	; (1c44c <bt_smp_sign_verify+0x100>)
   1c3e8:	4819      	ldr	r0, [pc, #100]	; (1c450 <bt_smp_sign_verify+0x104>)
   1c3ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1c3ee:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c3f2:	f00d f839 	bl	29468 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1c3f6:	f06f 0004 	mvn.w	r0, #4
   1c3fa:	46a5      	mov	sp, r4
   1c3fc:	e7d2      	b.n	1c3a4 <bt_smp_sign_verify+0x58>
   1c3fe:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1c400:	68a1      	ldr	r1, [r4, #8]
   1c402:	3b0c      	subs	r3, #12
   1c404:	220c      	movs	r2, #12
   1c406:	4419      	add	r1, r3
   1c408:	1d38      	adds	r0, r7, #4
   1c40a:	f00b f9e7 	bl	277dc <memcmp>
   1c40e:	b1b0      	cbz	r0, 1c43e <bt_smp_sign_verify+0xf2>
		BT_ERR("Unable to verify signature for %s",
   1c410:	4630      	mov	r0, r6
   1c412:	f7f8 ffd3 	bl	153bc <bt_addr_le_str_real>
   1c416:	466c      	mov	r4, sp
   1c418:	b088      	sub	sp, #32
   1c41a:	466a      	mov	r2, sp
   1c41c:	4b0e      	ldr	r3, [pc, #56]	; (1c458 <bt_smp_sign_verify+0x10c>)
   1c41e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c422:	2302      	movs	r3, #2
   1c424:	7713      	strb	r3, [r2, #28]
   1c426:	4b09      	ldr	r3, [pc, #36]	; (1c44c <bt_smp_sign_verify+0x100>)
   1c428:	4809      	ldr	r0, [pc, #36]	; (1c450 <bt_smp_sign_verify+0x104>)
   1c42a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c42e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c432:	f00d f819 	bl	29468 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1c436:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1c43a:	46a5      	mov	sp, r4
   1c43c:	e7b2      	b.n	1c3a4 <bt_smp_sign_verify+0x58>
	keys->remote_csrk.cnt++;
   1c43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1c440:	3301      	adds	r3, #1
   1c442:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1c444:	e7ae      	b.n	1c3a4 <bt_smp_sign_verify+0x58>
   1c446:	bf00      	nop
   1c448:	0002e229 	.word	0x0002e229
   1c44c:	01000003 	.word	0x01000003
   1c450:	0002b534 	.word	0x0002b534
   1c454:	0002e24b 	.word	0x0002e24b
   1c458:	0002e26d 	.word	0x0002e26d

0001c45c <bt_smp_sign>:
{
   1c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c45e:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c460:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1c464:	af00      	add	r7, sp, #0
   1c466:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c468:	4632      	mov	r2, r6
   1c46a:	7a01      	ldrb	r1, [r0, #8]
   1c46c:	2008      	movs	r0, #8
   1c46e:	f000 fedd 	bl	1d22c <bt_keys_find>
	if (!keys) {
   1c472:	4604      	mov	r4, r0
   1c474:	b9c0      	cbnz	r0, 1c4a8 <bt_smp_sign+0x4c>
		BT_ERR("Unable to find local CSRK for %s",
   1c476:	4630      	mov	r0, r6
   1c478:	f7f8 ffa0 	bl	153bc <bt_addr_le_str_real>
   1c47c:	466c      	mov	r4, sp
   1c47e:	b088      	sub	sp, #32
   1c480:	466a      	mov	r2, sp
   1c482:	4b23      	ldr	r3, [pc, #140]	; (1c510 <bt_smp_sign+0xb4>)
   1c484:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c488:	2302      	movs	r3, #2
   1c48a:	7713      	strb	r3, [r2, #28]
   1c48c:	4b21      	ldr	r3, [pc, #132]	; (1c514 <bt_smp_sign+0xb8>)
   1c48e:	4822      	ldr	r0, [pc, #136]	; (1c518 <bt_smp_sign+0xbc>)
   1c490:	f842 3f10 	str.w	r3, [r2, #16]!
   1c494:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c498:	f00c ffe6 	bl	29468 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1c49c:	f06f 0001 	mvn.w	r0, #1
   1c4a0:	46a5      	mov	sp, r4
}
   1c4a2:	370c      	adds	r7, #12
   1c4a4:	46bd      	mov	sp, r7
   1c4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1c4a8:	210c      	movs	r1, #12
   1c4aa:	f105 0008 	add.w	r0, r5, #8
   1c4ae:	f00d fb9c 	bl	29bea <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1c4b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c4b4:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1c4b6:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1c4b8:	68a8      	ldr	r0, [r5, #8]
   1c4ba:	2204      	movs	r2, #4
   1c4bc:	3b0c      	subs	r3, #12
   1c4be:	18b9      	adds	r1, r7, r2
   1c4c0:	4418      	add	r0, r3
   1c4c2:	f00b f9b4 	bl	2782e <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1c4c6:	89aa      	ldrh	r2, [r5, #12]
   1c4c8:	68a9      	ldr	r1, [r5, #8]
   1c4ca:	3a0c      	subs	r2, #12
   1c4cc:	b292      	uxth	r2, r2
   1c4ce:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c4d2:	f7ff f821 	bl	1b518 <smp_sign_buf>
	if (err) {
   1c4d6:	b1b0      	cbz	r0, 1c506 <bt_smp_sign+0xaa>
		BT_ERR("Unable to create signature for %s",
   1c4d8:	4630      	mov	r0, r6
   1c4da:	f7f8 ff6f 	bl	153bc <bt_addr_le_str_real>
   1c4de:	466c      	mov	r4, sp
   1c4e0:	b088      	sub	sp, #32
   1c4e2:	466a      	mov	r2, sp
   1c4e4:	4b0d      	ldr	r3, [pc, #52]	; (1c51c <bt_smp_sign+0xc0>)
   1c4e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c4ea:	2302      	movs	r3, #2
   1c4ec:	7713      	strb	r3, [r2, #28]
   1c4ee:	4b09      	ldr	r3, [pc, #36]	; (1c514 <bt_smp_sign+0xb8>)
   1c4f0:	4809      	ldr	r0, [pc, #36]	; (1c518 <bt_smp_sign+0xbc>)
   1c4f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c4f6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c4fa:	f00c ffb5 	bl	29468 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1c4fe:	f06f 0004 	mvn.w	r0, #4
   1c502:	46a5      	mov	sp, r4
   1c504:	e7cd      	b.n	1c4a2 <bt_smp_sign+0x46>
	keys->local_csrk.cnt++;
   1c506:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c508:	3301      	adds	r3, #1
   1c50a:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1c50c:	e7c9      	b.n	1c4a2 <bt_smp_sign+0x46>
   1c50e:	bf00      	nop
   1c510:	0002e28f 	.word	0x0002e28f
   1c514:	01000003 	.word	0x01000003
   1c518:	0002b534 	.word	0x0002b534
   1c51c:	0002e24b 	.word	0x0002e24b

0001c520 <bt_smp_start_security>:
{
   1c520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c524:	f890 8003 	ldrb.w	r8, [r0, #3]
   1c528:	f1b8 0f01 	cmp.w	r8, #1
{
   1c52c:	4605      	mov	r5, r0
	switch (conn->role) {
   1c52e:	d005      	beq.n	1c53c <bt_smp_start_security+0x1c>
		return -EINVAL;
   1c530:	f06f 0415 	mvn.w	r4, #21
}
   1c534:	4620      	mov	r0, r4
   1c536:	b003      	add	sp, #12
   1c538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1c53c:	f00c ff97 	bl	2946e <smp_chan_get>
	if (!smp) {
   1c540:	4606      	mov	r6, r0
   1c542:	2800      	cmp	r0, #0
   1c544:	f000 80b1 	beq.w	1c6aa <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c548:	1d07      	adds	r7, r0, #4
   1c54a:	2104      	movs	r1, #4
   1c54c:	4638      	mov	r0, r7
   1c54e:	f00c fea6 	bl	2929e <atomic_test_bit>
   1c552:	2800      	cmp	r0, #0
   1c554:	f040 80ac 	bne.w	1c6b0 <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c558:	2103      	movs	r1, #3
   1c55a:	4638      	mov	r0, r7
   1c55c:	f00c fe9f 	bl	2929e <atomic_test_bit>
   1c560:	b110      	cbz	r0, 1c568 <bt_smp_start_security+0x48>
		return -EBUSY;
   1c562:	f06f 040f 	mvn.w	r4, #15
   1c566:	e7e5      	b.n	1c534 <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c568:	4641      	mov	r1, r8
   1c56a:	4638      	mov	r0, r7
   1c56c:	f00c fe97 	bl	2929e <atomic_test_bit>
   1c570:	2800      	cmp	r0, #0
   1c572:	d1f6      	bne.n	1c562 <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c574:	4630      	mov	r0, r6
   1c576:	f7fe ff5d 	bl	1b434 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c57a:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1c57e:	7a9b      	ldrb	r3, [r3, #10]
   1c580:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c582:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1c584:	d042      	beq.n	1c60c <bt_smp_start_security+0xec>
   1c586:	d832      	bhi.n	1c5ee <bt_smp_start_security+0xce>
   1c588:	3b01      	subs	r3, #1
   1c58a:	2b01      	cmp	r3, #1
   1c58c:	d94a      	bls.n	1c624 <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1c58e:	210a      	movs	r1, #10
   1c590:	1d28      	adds	r0, r5, #4
   1c592:	f00c fe84 	bl	2929e <atomic_test_bit>
   1c596:	2800      	cmp	r0, #0
   1c598:	d1ca      	bne.n	1c530 <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1c59a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c59e:	b983      	cbnz	r3, 1c5c2 <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1c5a0:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1c5a4:	7a29      	ldrb	r1, [r5, #8]
   1c5a6:	4622      	mov	r2, r4
   1c5a8:	2020      	movs	r0, #32
   1c5aa:	f000 fe3f 	bl	1d22c <bt_keys_find>
   1c5ae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1c5b2:	b930      	cbnz	r0, 1c5c2 <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1c5b4:	7a29      	ldrb	r1, [r5, #8]
   1c5b6:	4622      	mov	r2, r4
   1c5b8:	2004      	movs	r0, #4
   1c5ba:	f000 fe37 	bl	1d22c <bt_keys_find>
   1c5be:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1c5c2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c5c6:	2b00      	cmp	r3, #0
   1c5c8:	d0b2      	beq.n	1c530 <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1c5ca:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1c5cc:	f012 0f24 	tst.w	r2, #36	; 0x24
   1c5d0:	d0ae      	beq.n	1c530 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1c5d2:	7aa9      	ldrb	r1, [r5, #10]
   1c5d4:	2902      	cmp	r1, #2
   1c5d6:	d925      	bls.n	1c624 <bt_smp_start_security+0x104>
   1c5d8:	7b58      	ldrb	r0, [r3, #13]
   1c5da:	07c0      	lsls	r0, r0, #31
   1c5dc:	d5a8      	bpl.n	1c530 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1c5de:	2903      	cmp	r1, #3
   1c5e0:	d020      	beq.n	1c624 <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1c5e2:	0692      	lsls	r2, r2, #26
   1c5e4:	d5a4      	bpl.n	1c530 <bt_smp_start_security+0x10>
   1c5e6:	7b1b      	ldrb	r3, [r3, #12]
   1c5e8:	2b10      	cmp	r3, #16
   1c5ea:	d1a1      	bne.n	1c530 <bt_smp_start_security+0x10>
   1c5ec:	e01a      	b.n	1c624 <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c5ee:	2b04      	cmp	r3, #4
   1c5f0:	d1cd      	bne.n	1c58e <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c5f2:	4630      	mov	r0, r6
   1c5f4:	f7fe ff3c 	bl	1b470 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c5f8:	2803      	cmp	r0, #3
   1c5fa:	d102      	bne.n	1c602 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c5fc:	b1fc      	cbz	r4, 1c63e <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c5fe:	68e4      	ldr	r4, [r4, #12]
   1c600:	b10c      	cbz	r4, 1c606 <bt_smp_start_security+0xe6>
   1c602:	4b2d      	ldr	r3, [pc, #180]	; (1c6b8 <bt_smp_start_security+0x198>)
   1c604:	781c      	ldrb	r4, [r3, #0]
   1c606:	f004 0401 	and.w	r4, r4, #1
   1c60a:	e009      	b.n	1c620 <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c60c:	4630      	mov	r0, r6
   1c60e:	f7fe ff2f 	bl	1b470 <get_io_capa>
   1c612:	2803      	cmp	r0, #3
   1c614:	d111      	bne.n	1c63a <bt_smp_start_security+0x11a>
   1c616:	b11c      	cbz	r4, 1c620 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1c618:	68e4      	ldr	r4, [r4, #12]
   1c61a:	3c00      	subs	r4, #0
   1c61c:	bf18      	it	ne
   1c61e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1c620:	2c00      	cmp	r4, #0
   1c622:	d0b4      	beq.n	1c58e <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1c624:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c628:	b15b      	cbz	r3, 1c642 <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1c62a:	4630      	mov	r0, r6
   1c62c:	f7fe fff0 	bl	1b610 <smp_init>
   1c630:	4604      	mov	r4, r0
   1c632:	b190      	cbz	r0, 1c65a <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1c634:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c638:	e77c      	b.n	1c534 <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c63a:	4644      	mov	r4, r8
   1c63c:	e7f0      	b.n	1c620 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c63e:	2400      	movs	r4, #0
   1c640:	e7e1      	b.n	1c606 <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c642:	7a28      	ldrb	r0, [r5, #8]
   1c644:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1c648:	f000 fd7a 	bl	1d140 <bt_keys_get_addr>
   1c64c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1c650:	2800      	cmp	r0, #0
   1c652:	d1ea      	bne.n	1c62a <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1c654:	f06f 040b 	mvn.w	r4, #11
   1c658:	e76c      	b.n	1c534 <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1c65a:	210b      	movs	r1, #11
   1c65c:	4630      	mov	r0, r6
   1c65e:	f00c ff25 	bl	294ac <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1c662:	4680      	mov	r8, r0
   1c664:	2800      	cmp	r0, #0
   1c666:	d0e5      	beq.n	1c634 <bt_smp_start_security+0x114>
	return net_buf_simple_add(&buf->b, len);
   1c668:	2101      	movs	r1, #1
   1c66a:	3008      	adds	r0, #8
   1c66c:	f00d fabd 	bl	29bea <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1c670:	2109      	movs	r1, #9
   1c672:	4681      	mov	r9, r0
   1c674:	4630      	mov	r0, r6
   1c676:	f7fe ff1f 	bl	1b4b8 <get_auth>
   1c67a:	4623      	mov	r3, r4
   1c67c:	f889 0000 	strb.w	r0, [r9]
   1c680:	4642      	mov	r2, r8
   1c682:	9400      	str	r4, [sp, #0]
   1c684:	2106      	movs	r1, #6
   1c686:	4628      	mov	r0, r5
   1c688:	f00b fd33 	bl	280f2 <bt_l2cap_send_cb>
	if (err) {
   1c68c:	4604      	mov	r4, r0
   1c68e:	b118      	cbz	r0, 1c698 <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1c690:	4640      	mov	r0, r8
   1c692:	f001 f85f 	bl	1d754 <net_buf_unref>
		return err;
   1c696:	e74d      	b.n	1c534 <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c698:	4638      	mov	r0, r7
   1c69a:	210f      	movs	r1, #15
   1c69c:	f00c fef2 	bl	29484 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1c6a0:	2101      	movs	r1, #1
   1c6a2:	4630      	mov	r0, r6
   1c6a4:	f00c feee 	bl	29484 <atomic_set_bit>
	return 0;
   1c6a8:	e744      	b.n	1c534 <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1c6aa:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1c6ae:	e741      	b.n	1c534 <bt_smp_start_security+0x14>
		return -EIO;
   1c6b0:	f06f 0404 	mvn.w	r4, #4
   1c6b4:	e73e      	b.n	1c534 <bt_smp_start_security+0x14>
   1c6b6:	bf00      	nop
   1c6b8:	20003dad 	.word	0x20003dad

0001c6bc <smp_pairing_complete>:
{
   1c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c6be:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1c6c2:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1c6c4:	1d05      	adds	r5, r0, #4
	if (!status) {
   1c6c6:	b9f1      	cbnz	r1, 1c706 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1c6c8:	210d      	movs	r1, #13
   1c6ca:	4628      	mov	r0, r5
   1c6cc:	f00c fde7 	bl	2929e <atomic_test_bit>
		if (bond_flag) {
   1c6d0:	4607      	mov	r7, r0
   1c6d2:	b118      	cbz	r0, 1c6dc <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1c6d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c6d8:	f000 ff2c 	bl	1d534 <bt_keys_store>
	return list->head;
   1c6dc:	4b31      	ldr	r3, [pc, #196]	; (1c7a4 <smp_pairing_complete+0xe8>)
   1c6de:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d051      	beq.n	1c788 <smp_pairing_complete+0xcc>
	return node->next;
   1c6e4:	f853 590c 	ldr.w	r5, [r3], #-12
   1c6e8:	b105      	cbz	r5, 1c6ec <smp_pairing_complete+0x30>
   1c6ea:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1c6ec:	681b      	ldr	r3, [r3, #0]
   1c6ee:	b113      	cbz	r3, 1c6f6 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1c6f0:	4639      	mov	r1, r7
   1c6f2:	4620      	mov	r0, r4
   1c6f4:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1c6f6:	2d00      	cmp	r5, #0
   1c6f8:	d046      	beq.n	1c788 <smp_pairing_complete+0xcc>
   1c6fa:	68ea      	ldr	r2, [r5, #12]
   1c6fc:	b102      	cbz	r2, 1c700 <smp_pairing_complete+0x44>
   1c6fe:	3a0c      	subs	r2, #12
{
   1c700:	462b      	mov	r3, r5
   1c702:	4615      	mov	r5, r2
   1c704:	e7f2      	b.n	1c6ec <smp_pairing_complete+0x30>
	switch (smp_err) {
   1c706:	3901      	subs	r1, #1
   1c708:	b2c9      	uxtb	r1, r1
   1c70a:	290e      	cmp	r1, #14
   1c70c:	bf9c      	itt	ls
   1c70e:	4b26      	ldrls	r3, [pc, #152]	; (1c7a8 <smp_pairing_complete+0xec>)
   1c710:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1c712:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1c716:	bf88      	it	hi
   1c718:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1c71a:	b143      	cbz	r3, 1c72e <smp_pairing_complete+0x72>
   1c71c:	7b1b      	ldrb	r3, [r3, #12]
   1c71e:	bb63      	cbnz	r3, 1c77a <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1c720:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c724:	f000 fde0 	bl	1d2e8 <bt_keys_clear>
			conn->le.keys = NULL;
   1c728:	2300      	movs	r3, #0
   1c72a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c72e:	2102      	movs	r1, #2
   1c730:	4628      	mov	r0, r5
   1c732:	f00c fdb4 	bl	2929e <atomic_test_bit>
   1c736:	b940      	cbnz	r0, 1c74a <smp_pairing_complete+0x8e>
	switch (err) {
   1c738:	2f07      	cmp	r7, #7
   1c73a:	bf96      	itet	ls
   1c73c:	4b1b      	ldrls	r3, [pc, #108]	; (1c7ac <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c73e:	211f      	movhi	r1, #31
   1c740:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1c742:	463a      	mov	r2, r7
   1c744:	4620      	mov	r0, r4
   1c746:	f7fb fe01 	bl	1834c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c74a:	2103      	movs	r1, #3
   1c74c:	4628      	mov	r0, r5
   1c74e:	f00c fda6 	bl	2929e <atomic_test_bit>
   1c752:	b1c8      	cbz	r0, 1c788 <smp_pairing_complete+0xcc>
	return list->head;
   1c754:	4b13      	ldr	r3, [pc, #76]	; (1c7a4 <smp_pairing_complete+0xe8>)
   1c756:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1c758:	b1b3      	cbz	r3, 1c788 <smp_pairing_complete+0xcc>
	return node->next;
   1c75a:	f853 590c 	ldr.w	r5, [r3], #-12
   1c75e:	b105      	cbz	r5, 1c762 <smp_pairing_complete+0xa6>
   1c760:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1c762:	685b      	ldr	r3, [r3, #4]
   1c764:	b113      	cbz	r3, 1c76c <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1c766:	4639      	mov	r1, r7
   1c768:	4620      	mov	r0, r4
   1c76a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1c76c:	b165      	cbz	r5, 1c788 <smp_pairing_complete+0xcc>
   1c76e:	68ea      	ldr	r2, [r5, #12]
   1c770:	b102      	cbz	r2, 1c774 <smp_pairing_complete+0xb8>
   1c772:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c774:	462b      	mov	r3, r5
   1c776:	4615      	mov	r5, r2
   1c778:	e7f3      	b.n	1c762 <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1c77a:	2102      	movs	r1, #2
   1c77c:	4628      	mov	r0, r5
   1c77e:	f00c fd8e 	bl	2929e <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1c782:	2800      	cmp	r0, #0
   1c784:	d1cc      	bne.n	1c720 <smp_pairing_complete+0x64>
   1c786:	e7d2      	b.n	1c72e <smp_pairing_complete+0x72>
	smp_reset(smp);
   1c788:	4630      	mov	r0, r6
   1c78a:	f00c ff23 	bl	295d4 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1c78e:	7a62      	ldrb	r2, [r4, #9]
   1c790:	7aa3      	ldrb	r3, [r4, #10]
   1c792:	429a      	cmp	r2, r3
   1c794:	d004      	beq.n	1c7a0 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1c796:	4620      	mov	r0, r4
}
   1c798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1c79c:	f7ff bec0 	b.w	1c520 <bt_smp_start_security>
}
   1c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c7a2:	bf00      	nop
   1c7a4:	20002d00 	.word	0x20002d00
   1c7a8:	0002e47b 	.word	0x0002e47b
   1c7ac:	0002e493 	.word	0x0002e493

0001c7b0 <bt_smp_recv>:
{
   1c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7b4:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1c7b6:	898b      	ldrh	r3, [r1, #12]
{
   1c7b8:	af00      	add	r7, sp, #0
   1c7ba:	4680      	mov	r8, r0
   1c7bc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1c7be:	b97b      	cbnz	r3, 1c7e0 <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
   1c7c0:	4b44      	ldr	r3, [pc, #272]	; (1c8d4 <bt_smp_recv+0x124>)
   1c7c2:	617b      	str	r3, [r7, #20]
   1c7c4:	4844      	ldr	r0, [pc, #272]	; (1c8d8 <bt_smp_recv+0x128>)
   1c7c6:	2302      	movs	r3, #2
   1c7c8:	f107 0210 	add.w	r2, r7, #16
   1c7cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c7d0:	613b      	str	r3, [r7, #16]
   1c7d2:	f00c fe49 	bl	29468 <z_log_msg_static_create.constprop.0>
}
   1c7d6:	2000      	movs	r0, #0
   1c7d8:	3718      	adds	r7, #24
   1c7da:	46bd      	mov	sp, r7
   1c7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c7e0:	2101      	movs	r1, #1
   1c7e2:	f105 0008 	add.w	r0, r5, #8
   1c7e6:	f00d fa27 	bl	29c38 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c7ea:	2104      	movs	r1, #4
   1c7ec:	4606      	mov	r6, r0
   1c7ee:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   1c7f2:	f00c fd54 	bl	2929e <atomic_test_bit>
   1c7f6:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   1c7fa:	7831      	ldrb	r1, [r6, #0]
   1c7fc:	b178      	cbz	r0, 1c81e <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c7fe:	466c      	mov	r4, sp
   1c800:	b088      	sub	sp, #32
   1c802:	466a      	mov	r2, sp
   1c804:	4b35      	ldr	r3, [pc, #212]	; (1c8dc <bt_smp_recv+0x12c>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c806:	4834      	ldr	r0, [pc, #208]	; (1c8d8 <bt_smp_recv+0x128>)
   1c808:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1c80c:	2303      	movs	r3, #3
   1c80e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c812:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c816:	f00c fe27 	bl	29468 <z_log_msg_static_create.constprop.0>
   1c81a:	46a5      	mov	sp, r4
		return 0;
   1c81c:	e7db      	b.n	1c7d6 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c81e:	290e      	cmp	r1, #14
   1c820:	d904      	bls.n	1c82c <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c822:	466c      	mov	r4, sp
   1c824:	b088      	sub	sp, #32
   1c826:	466a      	mov	r2, sp
   1c828:	4b2d      	ldr	r3, [pc, #180]	; (1c8e0 <bt_smp_recv+0x130>)
   1c82a:	e7ec      	b.n	1c806 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   1c82c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c8e4 <bt_smp_recv+0x134>
   1c830:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1c834:	b99b      	cbnz	r3, 1c85e <bt_smp_recv+0xae>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c836:	466d      	mov	r5, sp
   1c838:	b088      	sub	sp, #32
   1c83a:	466a      	mov	r2, sp
   1c83c:	4b2a      	ldr	r3, [pc, #168]	; (1c8e8 <bt_smp_recv+0x138>)
   1c83e:	4826      	ldr	r0, [pc, #152]	; (1c8d8 <bt_smp_recv+0x128>)
   1c840:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1c844:	2303      	movs	r3, #3
   1c846:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c84a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c84e:	f00c fe0b 	bl	29468 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c852:	2107      	movs	r1, #7
   1c854:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1c856:	4620      	mov	r0, r4
   1c858:	f00d f83a 	bl	298d0 <smp_error>
   1c85c:	e7bb      	b.n	1c7d6 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c85e:	4620      	mov	r0, r4
   1c860:	f00c fea0 	bl	295a4 <atomic_test_and_clear_bit>
   1c864:	7833      	ldrb	r3, [r6, #0]
   1c866:	b998      	cbnz	r0, 1c890 <bt_smp_recv+0xe0>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c868:	466d      	mov	r5, sp
   1c86a:	b088      	sub	sp, #32
   1c86c:	466a      	mov	r2, sp
   1c86e:	491f      	ldr	r1, [pc, #124]	; (1c8ec <bt_smp_recv+0x13c>)
   1c870:	4819      	ldr	r0, [pc, #100]	; (1c8d8 <bt_smp_recv+0x128>)
   1c872:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c876:	2303      	movs	r3, #3
   1c878:	f842 3f10 	str.w	r3, [r2, #16]!
   1c87c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c880:	f00c fdf2 	bl	29468 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c884:	7833      	ldrb	r3, [r6, #0]
   1c886:	2b05      	cmp	r3, #5
   1c888:	46ad      	mov	sp, r5
   1c88a:	d0a4      	beq.n	1c7d6 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c88c:	2108      	movs	r1, #8
   1c88e:	e7e2      	b.n	1c856 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c890:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1c894:	89a9      	ldrh	r1, [r5, #12]
   1c896:	7912      	ldrb	r2, [r2, #4]
   1c898:	428a      	cmp	r2, r1
   1c89a:	d011      	beq.n	1c8c0 <bt_smp_recv+0x110>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c89c:	466d      	mov	r5, sp
   1c89e:	b088      	sub	sp, #32
   1c8a0:	466a      	mov	r2, sp
   1c8a2:	4813      	ldr	r0, [pc, #76]	; (1c8f0 <bt_smp_recv+0x140>)
   1c8a4:	61d3      	str	r3, [r2, #28]
   1c8a6:	2304      	movs	r3, #4
   1c8a8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c8ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c8b0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8b4:	4808      	ldr	r0, [pc, #32]	; (1c8d8 <bt_smp_recv+0x128>)
   1c8b6:	f00c fdd7 	bl	29468 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c8ba:	210a      	movs	r1, #10
   1c8bc:	46ad      	mov	sp, r5
   1c8be:	e7ca      	b.n	1c856 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   1c8c0:	4629      	mov	r1, r5
   1c8c2:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	4798      	blx	r3
	if (err) {
   1c8ca:	4601      	mov	r1, r0
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	d082      	beq.n	1c7d6 <bt_smp_recv+0x26>
   1c8d0:	e7c1      	b.n	1c856 <bt_smp_recv+0xa6>
   1c8d2:	bf00      	nop
   1c8d4:	0002e2b0 	.word	0x0002e2b0
   1c8d8:	0002b534 	.word	0x0002b534
   1c8dc:	0002e2cb 	.word	0x0002e2cb
   1c8e0:	0002e2fc 	.word	0x0002e2fc
   1c8e4:	0002bf30 	.word	0x0002bf30
   1c8e8:	0002e31e 	.word	0x0002e31e
   1c8ec:	0002e338 	.word	0x0002e338
   1c8f0:	0002dca7 	.word	0x0002dca7

0001c8f4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c8f4:	4b0e      	ldr	r3, [pc, #56]	; (1c930 <bt_smp_pkey_ready+0x3c>)
{
   1c8f6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c8f8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c8fa:	b918      	cbnz	r0, 1c904 <bt_smp_pkey_ready+0x10>
}
   1c8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c900:	f7fe bdf8 	b.w	1b4f4 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c904:	4c0b      	ldr	r4, [pc, #44]	; (1c934 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1c906:	480c      	ldr	r0, [pc, #48]	; (1c938 <bt_smp_pkey_ready+0x44>)
   1c908:	f004 ff20 	bl	2174c <z_impl_k_sem_give>
   1c90c:	f3bf 8f5b 	dmb	ish
   1c910:	6863      	ldr	r3, [r4, #4]
   1c912:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c916:	065b      	lsls	r3, r3, #25
   1c918:	d509      	bpl.n	1c92e <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   1c91a:	4620      	mov	r0, r4
   1c91c:	f7ff fa5c 	bl	1bdd8 <smp_public_key_periph>
		if (err) {
   1c920:	4601      	mov	r1, r0
   1c922:	b120      	cbz	r0, 1c92e <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1c924:	4620      	mov	r0, r4
}
   1c926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c92a:	f00c bfd1 	b.w	298d0 <smp_error>
}
   1c92e:	bd10      	pop	{r4, pc}
   1c930:	20002e6c 	.word	0x20002e6c
   1c934:	200020b0 	.word	0x200020b0
   1c938:	20000ab0 	.word	0x20000ab0

0001c93c <smp_signing_info>:
{
   1c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c940:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1c942:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1c946:	af00      	add	r7, sp, #0
   1c948:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c94a:	210d      	movs	r1, #13
   1c94c:	3004      	adds	r0, #4
   1c94e:	f00c fca6 	bl	2929e <atomic_test_bit>
   1c952:	b330      	cbz	r0, 1c9a2 <smp_signing_info+0x66>
					&conn->le.dst);
   1c954:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c958:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1c95a:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c95e:	462a      	mov	r2, r5
   1c960:	2010      	movs	r0, #16
   1c962:	f00d f888 	bl	29a76 <bt_keys_get_type>
		if (!keys) {
   1c966:	b9b8      	cbnz	r0, 1c998 <smp_signing_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   1c968:	4628      	mov	r0, r5
   1c96a:	f7f8 fd27 	bl	153bc <bt_addr_le_str_real>
   1c96e:	466c      	mov	r4, sp
   1c970:	b088      	sub	sp, #32
   1c972:	466a      	mov	r2, sp
   1c974:	4b12      	ldr	r3, [pc, #72]	; (1c9c0 <smp_signing_info+0x84>)
   1c976:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c97a:	2302      	movs	r3, #2
   1c97c:	7713      	strb	r3, [r2, #28]
   1c97e:	4b11      	ldr	r3, [pc, #68]	; (1c9c4 <smp_signing_info+0x88>)
   1c980:	4811      	ldr	r0, [pc, #68]	; (1c9c8 <smp_signing_info+0x8c>)
   1c982:	f842 3f10 	str.w	r3, [r2, #16]!
   1c986:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c98a:	f00c fd6d 	bl	29468 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1c98e:	2008      	movs	r0, #8
   1c990:	46a5      	mov	sp, r4
}
   1c992:	46bd      	mov	sp, r7
   1c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1c998:	2210      	movs	r2, #16
   1c99a:	4641      	mov	r1, r8
   1c99c:	3054      	adds	r0, #84	; 0x54
   1c99e:	f00a ff46 	bl	2782e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1c9a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c9a6:	f023 0304 	bic.w	r3, r3, #4
   1c9aa:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1c9ae:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c9b2:	b91d      	cbnz	r5, 1c9bc <smp_signing_info+0x80>
		smp_pairing_complete(smp, 0);
   1c9b4:	4629      	mov	r1, r5
   1c9b6:	4620      	mov	r0, r4
   1c9b8:	f7ff fe80 	bl	1c6bc <smp_pairing_complete>
	return 0;
   1c9bc:	2000      	movs	r0, #0
   1c9be:	e7e8      	b.n	1c992 <smp_signing_info+0x56>
   1c9c0:	0002e100 	.word	0x0002e100
   1c9c4:	01000003 	.word	0x01000003
   1c9c8:	0002b534 	.word	0x0002b534

0001c9cc <smp_ident_addr_info>:
{
   1c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c9d0:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c9d2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c9d6:	7833      	ldrb	r3, [r6, #0]
{
   1c9d8:	af00      	add	r7, sp, #0
   1c9da:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c9dc:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1c9e0:	b39b      	cbz	r3, 1ca4a <smp_ident_addr_info+0x7e>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c9e2:	79b3      	ldrb	r3, [r6, #6]
   1c9e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c9e8:	2bc0      	cmp	r3, #192	; 0xc0
   1c9ea:	d02e      	beq.n	1ca4a <smp_ident_addr_info+0x7e>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c9ec:	4630      	mov	r0, r6
   1c9ee:	f7f8 fce5 	bl	153bc <bt_addr_le_str_real>
   1c9f2:	466e      	mov	r6, sp
   1c9f4:	b088      	sub	sp, #32
   1c9f6:	466c      	mov	r4, sp
   1c9f8:	4b52      	ldr	r3, [pc, #328]	; (1cb44 <smp_ident_addr_info+0x178>)
   1c9fa:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1cb48 <smp_ident_addr_info+0x17c>
   1c9fe:	4625      	mov	r5, r4
   1ca00:	f04f 0a02 	mov.w	sl, #2
   1ca04:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1ca08:	f884 a01c 	strb.w	sl, [r4, #28]
   1ca0c:	f845 8f10 	str.w	r8, [r5, #16]!
   1ca10:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ca14:	462a      	mov	r2, r5
   1ca16:	484d      	ldr	r0, [pc, #308]	; (1cb4c <smp_ident_addr_info+0x180>)
   1ca18:	f00c fd26 	bl	29468 <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ca1c:	4648      	mov	r0, r9
   1ca1e:	46b5      	mov	sp, r6
   1ca20:	f7f8 fccc 	bl	153bc <bt_addr_le_str_real>
   1ca24:	46a5      	mov	sp, r4
   1ca26:	4b4a      	ldr	r3, [pc, #296]	; (1cb50 <smp_ident_addr_info+0x184>)
   1ca28:	f884 a01c 	strb.w	sl, [r4, #28]
   1ca2c:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1ca30:	f8c4 8010 	str.w	r8, [r4, #16]
   1ca34:	4845      	ldr	r0, [pc, #276]	; (1cb4c <smp_ident_addr_info+0x180>)
   1ca36:	462a      	mov	r2, r5
   1ca38:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ca3c:	f00c fd14 	bl	29468 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1ca40:	200a      	movs	r0, #10
   1ca42:	46b5      	mov	sp, r6
}
   1ca44:	46bd      	mov	sp, r7
   1ca46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1ca4a:	2207      	movs	r2, #7
   1ca4c:	4631      	mov	r1, r6
   1ca4e:	4648      	mov	r0, r9
   1ca50:	f00a fec4 	bl	277dc <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1ca54:	b168      	cbz	r0, 1ca72 <smp_ident_addr_info+0xa6>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1ca56:	7a28      	ldrb	r0, [r5, #8]
   1ca58:	4631      	mov	r1, r6
   1ca5a:	f000 fc35 	bl	1d2c8 <bt_keys_find_addr>
		if (keys) {
   1ca5e:	4680      	mov	r8, r0
   1ca60:	b138      	cbz	r0, 1ca72 <smp_ident_addr_info+0xa6>
			if (!update_keys_check(smp, keys)) {
   1ca62:	4601      	mov	r1, r0
   1ca64:	4620      	mov	r0, r4
   1ca66:	f00c fc23 	bl	292b0 <update_keys_check>
   1ca6a:	b318      	cbz	r0, 1cab4 <smp_ident_addr_info+0xe8>
			bt_keys_clear(keys);
   1ca6c:	4640      	mov	r0, r8
   1ca6e:	f000 fc3b 	bl	1d2e8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ca72:	210d      	movs	r1, #13
   1ca74:	1d20      	adds	r0, r4, #4
   1ca76:	f00c fc12 	bl	2929e <atomic_test_bit>
   1ca7a:	2800      	cmp	r0, #0
   1ca7c:	d049      	beq.n	1cb12 <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ca7e:	7a29      	ldrb	r1, [r5, #8]
   1ca80:	464a      	mov	r2, r9
   1ca82:	2002      	movs	r0, #2
   1ca84:	f00c fff7 	bl	29a76 <bt_keys_get_type>
		if (!keys) {
   1ca88:	4680      	mov	r8, r0
   1ca8a:	b9a8      	cbnz	r0, 1cab8 <smp_ident_addr_info+0xec>
			BT_ERR("Unable to get keys for %s",
   1ca8c:	4648      	mov	r0, r9
   1ca8e:	f7f8 fc95 	bl	153bc <bt_addr_le_str_real>
   1ca92:	466c      	mov	r4, sp
   1ca94:	b088      	sub	sp, #32
   1ca96:	466a      	mov	r2, sp
   1ca98:	4b2e      	ldr	r3, [pc, #184]	; (1cb54 <smp_ident_addr_info+0x188>)
   1ca9a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ca9e:	2302      	movs	r3, #2
   1caa0:	7713      	strb	r3, [r2, #28]
   1caa2:	4b29      	ldr	r3, [pc, #164]	; (1cb48 <smp_ident_addr_info+0x17c>)
   1caa4:	f842 3f10 	str.w	r3, [r2, #16]!
   1caa8:	4828      	ldr	r0, [pc, #160]	; (1cb4c <smp_ident_addr_info+0x180>)
   1caaa:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1caae:	f00c fcdb 	bl	29468 <z_log_msg_static_create.constprop.0>
   1cab2:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1cab4:	2008      	movs	r0, #8
   1cab6:	e7c5      	b.n	1ca44 <smp_ident_addr_info+0x78>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1cab8:	78eb      	ldrb	r3, [r5, #3]
   1caba:	2b00      	cmp	r3, #0
   1cabc:	d13e      	bne.n	1cb3c <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   1cabe:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1cac2:	780b      	ldrb	r3, [r1, #0]
   1cac4:	2b01      	cmp	r3, #1
   1cac6:	d121      	bne.n	1cb0c <smp_ident_addr_info+0x140>
		if (bt_addr_le_is_rpa(dst)) {
   1cac8:	798b      	ldrb	r3, [r1, #6]
   1caca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cace:	2b40      	cmp	r3, #64	; 0x40
   1cad0:	d11c      	bne.n	1cb0c <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   1cad2:	2206      	movs	r2, #6
   1cad4:	3101      	adds	r1, #1
   1cad6:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1cada:	f00a fea8 	bl	2782e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1cade:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1cae2:	b19b      	cbz	r3, 1cb0c <smp_ident_addr_info+0x140>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1cae4:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1cae8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1caec:	2bc0      	cmp	r3, #192	; 0xc0
   1caee:	d00d      	beq.n	1cb0c <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   1caf0:	2207      	movs	r2, #7
   1caf2:	4631      	mov	r1, r6
   1caf4:	f108 0001 	add.w	r0, r8, #1
   1caf8:	f00a fe99 	bl	2782e <memcpy>
   1cafc:	2207      	movs	r2, #7
   1cafe:	4631      	mov	r1, r6
   1cb00:	4648      	mov	r0, r9
   1cb02:	f00a fe94 	bl	2782e <memcpy>
				bt_conn_identity_resolved(conn);
   1cb06:	4628      	mov	r0, r5
   1cb08:	f7fb fbf2 	bl	182f0 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1cb0c:	4640      	mov	r0, r8
   1cb0e:	f7fa fcdf 	bl	174d0 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1cb12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cb16:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cb1a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1cb1c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cb20:	d503      	bpl.n	1cb2a <smp_ident_addr_info+0x15e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cb22:	210a      	movs	r1, #10
   1cb24:	4620      	mov	r0, r4
   1cb26:	f00c fcad 	bl	29484 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1cb2a:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cb2e:	b91d      	cbnz	r5, 1cb38 <smp_ident_addr_info+0x16c>
		smp_pairing_complete(smp, 0);
   1cb30:	4629      	mov	r1, r5
   1cb32:	4620      	mov	r0, r4
   1cb34:	f7ff fdc2 	bl	1c6bc <smp_pairing_complete>
	return 0;
   1cb38:	2000      	movs	r0, #0
   1cb3a:	e783      	b.n	1ca44 <smp_ident_addr_info+0x78>
			dst = &conn->le.init_addr;
   1cb3c:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1cb40:	e7bf      	b.n	1cac2 <smp_ident_addr_info+0xf6>
   1cb42:	bf00      	nop
   1cb44:	0002e353 	.word	0x0002e353
   1cb48:	01000003 	.word	0x01000003
   1cb4c:	0002b534 	.word	0x0002b534
   1cb50:	0002e243 	.word	0x0002e243
   1cb54:	0002e100 	.word	0x0002e100

0001cb58 <smp_central_ident>:
{
   1cb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb5c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1cb5e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1cb62:	af00      	add	r7, sp, #0
   1cb64:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cb66:	210d      	movs	r1, #13
   1cb68:	3004      	adds	r0, #4
   1cb6a:	f00c fb98 	bl	2929e <atomic_test_bit>
   1cb6e:	b360      	cbz	r0, 1cbca <smp_central_ident+0x72>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cb70:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1cb74:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1cb76:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cb78:	4642      	mov	r2, r8
   1cb7a:	2004      	movs	r0, #4
   1cb7c:	f00c ff7b 	bl	29a76 <bt_keys_get_type>
		if (!keys) {
   1cb80:	4605      	mov	r5, r0
   1cb82:	b9b8      	cbnz	r0, 1cbb4 <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
   1cb84:	4640      	mov	r0, r8
   1cb86:	f7f8 fc19 	bl	153bc <bt_addr_le_str_real>
   1cb8a:	466c      	mov	r4, sp
   1cb8c:	b088      	sub	sp, #32
   1cb8e:	466a      	mov	r2, sp
   1cb90:	4b1a      	ldr	r3, [pc, #104]	; (1cbfc <smp_central_ident+0xa4>)
   1cb92:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cb96:	2302      	movs	r3, #2
   1cb98:	7713      	strb	r3, [r2, #28]
   1cb9a:	4b19      	ldr	r3, [pc, #100]	; (1cc00 <smp_central_ident+0xa8>)
   1cb9c:	4819      	ldr	r0, [pc, #100]	; (1cc04 <smp_central_ident+0xac>)
   1cb9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1cba2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cba6:	f00c fc5f 	bl	29468 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cbaa:	2008      	movs	r0, #8
   1cbac:	46a5      	mov	sp, r4
}
   1cbae:	46bd      	mov	sp, r7
   1cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1cbb4:	2202      	movs	r2, #2
   1cbb6:	4631      	mov	r1, r6
   1cbb8:	3018      	adds	r0, #24
   1cbba:	f00a fe38 	bl	2782e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1cbbe:	2208      	movs	r2, #8
   1cbc0:	1cb1      	adds	r1, r6, #2
   1cbc2:	f105 0010 	add.w	r0, r5, #16
   1cbc6:	f00a fe32 	bl	2782e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1cbca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cbce:	f023 0201 	bic.w	r2, r3, #1
   1cbd2:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1cbd6:	079a      	lsls	r2, r3, #30
   1cbd8:	d50c      	bpl.n	1cbf4 <smp_central_ident+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1cbda:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cbdc:	4620      	mov	r0, r4
   1cbde:	f00c fc51 	bl	29484 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1cbe2:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cbe6:	b91d      	cbnz	r5, 1cbf0 <smp_central_ident+0x98>
		smp_pairing_complete(smp, 0);
   1cbe8:	4629      	mov	r1, r5
   1cbea:	4620      	mov	r0, r4
   1cbec:	f7ff fd66 	bl	1c6bc <smp_pairing_complete>
	return 0;
   1cbf0:	2000      	movs	r0, #0
   1cbf2:	e7dc      	b.n	1cbae <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cbf4:	075b      	lsls	r3, r3, #29
   1cbf6:	d5f4      	bpl.n	1cbe2 <smp_central_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cbf8:	210a      	movs	r1, #10
   1cbfa:	e7ef      	b.n	1cbdc <smp_central_ident+0x84>
   1cbfc:	0002e100 	.word	0x0002e100
   1cc00:	01000003 	.word	0x01000003
   1cc04:	0002b534 	.word	0x0002b534

0001cc08 <smp_pairing_failed>:
{
   1cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc0c:	460e      	mov	r6, r1
   1cc0e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1cc10:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1cc14:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cc16:	f7fe fc0d 	bl	1b434 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1cc1a:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1cc1c:	46e9      	mov	r9, sp
   1cc1e:	b088      	sub	sp, #32
   1cc20:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cc22:	4605      	mov	r5, r0
	BT_ERR("reason 0x%x", req->reason);
   1cc24:	466a      	mov	r2, sp
   1cc26:	4914      	ldr	r1, [pc, #80]	; (1cc78 <smp_pairing_failed+0x70>)
   1cc28:	4814      	ldr	r0, [pc, #80]	; (1cc7c <smp_pairing_failed+0x74>)
   1cc2a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cc2e:	2303      	movs	r3, #3
   1cc30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc34:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc38:	f00c fc16 	bl	29468 <z_log_msg_static_create.constprop.0>
   1cc3c:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1cc3e:	f104 0904 	add.w	r9, r4, #4
   1cc42:	210a      	movs	r1, #10
   1cc44:	4648      	mov	r0, r9
   1cc46:	f00c fcad 	bl	295a4 <atomic_test_and_clear_bit>
   1cc4a:	b140      	cbz	r0, 1cc5e <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1cc4c:	b975      	cbnz	r5, 1cc6c <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1cc4e:	4620      	mov	r0, r4
   1cc50:	7831      	ldrb	r1, [r6, #0]
   1cc52:	f7ff fd33 	bl	1c6bc <smp_pairing_complete>
}
   1cc56:	2000      	movs	r0, #0
   1cc58:	46bd      	mov	sp, r7
   1cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1cc5e:	210b      	movs	r1, #11
   1cc60:	4648      	mov	r0, r9
   1cc62:	f00c fc9f 	bl	295a4 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1cc66:	2800      	cmp	r0, #0
   1cc68:	d1f0      	bne.n	1cc4c <smp_pairing_failed+0x44>
   1cc6a:	e7f0      	b.n	1cc4e <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1cc6c:	692b      	ldr	r3, [r5, #16]
   1cc6e:	2b00      	cmp	r3, #0
   1cc70:	d0ed      	beq.n	1cc4e <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1cc72:	4640      	mov	r0, r8
   1cc74:	4798      	blx	r3
   1cc76:	e7ea      	b.n	1cc4e <smp_pairing_failed+0x46>
   1cc78:	0002e367 	.word	0x0002e367
   1cc7c:	0002b534 	.word	0x0002b534

0001cc80 <bt_smp_encrypt_change>:
{
   1cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1cc84:	4604      	mov	r4, r0
{
   1cc86:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cc88:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1cc8c:	4605      	mov	r5, r0
   1cc8e:	af00      	add	r7, sp, #0
   1cc90:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cc92:	4630      	mov	r0, r6
   1cc94:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1cc96:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cc9a:	f00c fc83 	bl	295a4 <atomic_test_and_clear_bit>
   1cc9e:	b328      	cbz	r0, 1ccec <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1cca0:	f1b8 0f00 	cmp.w	r8, #0
   1cca4:	d017      	beq.n	1ccd6 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cca6:	2103      	movs	r1, #3
   1cca8:	4630      	mov	r0, r6
   1ccaa:	f00c faf8 	bl	2929e <atomic_test_bit>
   1ccae:	b1e8      	cbz	r0, 1ccec <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1ccb0:	4640      	mov	r0, r8
   1ccb2:	f7f9 fdbf 	bl	16834 <bt_security_err_get>
	switch (auth_err) {
   1ccb6:	3801      	subs	r0, #1
   1ccb8:	b2c0      	uxtb	r0, r0
   1ccba:	2808      	cmp	r0, #8
   1ccbc:	bf9a      	itte	ls
   1ccbe:	4bb0      	ldrls	r3, [pc, #704]	; (1cf80 <bt_smp_encrypt_change+0x300>)
   1ccc0:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ccc2:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ccc4:	2102      	movs	r1, #2
   1ccc6:	4630      	mov	r0, r6
   1ccc8:	f00c fbdc 	bl	29484 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1cccc:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1ccce:	4620      	mov	r0, r4
   1ccd0:	f7ff fcf4 	bl	1c6bc <smp_pairing_complete>
   1ccd4:	e00a      	b.n	1ccec <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1ccd6:	f899 300b 	ldrb.w	r3, [r9, #11]
   1ccda:	b13b      	cbz	r3, 1ccec <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ccdc:	2103      	movs	r1, #3
   1ccde:	4630      	mov	r0, r6
   1cce0:	f00c fadd 	bl	2929e <atomic_test_bit>
   1cce4:	b930      	cbnz	r0, 1ccf4 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1cce6:	4620      	mov	r0, r4
   1cce8:	f00c fc74 	bl	295d4 <smp_reset>
}
   1ccec:	3744      	adds	r7, #68	; 0x44
   1ccee:	46bd      	mov	sp, r7
   1ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ccf4:	2105      	movs	r1, #5
   1ccf6:	4630      	mov	r0, r6
   1ccf8:	f00c fad1 	bl	2929e <atomic_test_bit>
   1ccfc:	b1b8      	cbz	r0, 1cd2e <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ccfe:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1cd02:	071b      	lsls	r3, r3, #28
   1cd04:	d507      	bpl.n	1cd16 <bt_smp_encrypt_change+0x96>
   1cd06:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1cd0a:	0718      	lsls	r0, r3, #28
   1cd0c:	d503      	bpl.n	1cd16 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1cd0e:	2111      	movs	r1, #17
   1cd10:	4630      	mov	r0, r6
   1cd12:	f00c fbb7 	bl	29484 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1cd16:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1cd1a:	f023 0308 	bic.w	r3, r3, #8
   1cd1e:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1cd22:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1cd26:	f023 0308 	bic.w	r3, r3, #8
   1cd2a:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1cd2e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1cd32:	07d9      	lsls	r1, r3, #31
   1cd34:	d524      	bpl.n	1cd80 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1cd36:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cd38:	4620      	mov	r0, r4
   1cd3a:	f00c fba3 	bl	29484 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1cd3e:	2102      	movs	r1, #2
   1cd40:	4630      	mov	r0, r6
   1cd42:	f00c fb9f 	bl	29484 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1cd46:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1cd4a:	f8db a0b4 	ldr.w	sl, [fp, #180]	; 0xb4
	if (!keys) {
   1cd4e:	f1ba 0f00 	cmp.w	sl, #0
   1cd52:	d11d      	bne.n	1cd90 <bt_smp_encrypt_change+0x110>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1cd54:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1cd58:	f7f8 fb30 	bl	153bc <bt_addr_le_str_real>
   1cd5c:	466c      	mov	r4, sp
   1cd5e:	b088      	sub	sp, #32
   1cd60:	466a      	mov	r2, sp
   1cd62:	4b88      	ldr	r3, [pc, #544]	; (1cf84 <bt_smp_encrypt_change+0x304>)
   1cd64:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd68:	2302      	movs	r3, #2
   1cd6a:	7713      	strb	r3, [r2, #28]
   1cd6c:	4b86      	ldr	r3, [pc, #536]	; (1cf88 <bt_smp_encrypt_change+0x308>)
   1cd6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd72:	4886      	ldr	r0, [pc, #536]	; (1cf8c <bt_smp_encrypt_change+0x30c>)
   1cd74:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cd78:	f00c fb76 	bl	29468 <z_log_msg_static_create.constprop.0>
   1cd7c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1cd7e:	e7b5      	b.n	1ccec <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1cd80:	079a      	lsls	r2, r3, #30
   1cd82:	d501      	bpl.n	1cd88 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1cd84:	2108      	movs	r1, #8
   1cd86:	e7d7      	b.n	1cd38 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cd88:	0758      	lsls	r0, r3, #29
   1cd8a:	d5d8      	bpl.n	1cd3e <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cd8c:	210a      	movs	r1, #10
   1cd8e:	e7d3      	b.n	1cd38 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cd90:	2105      	movs	r1, #5
   1cd92:	f00c fa84 	bl	2929e <atomic_test_bit>
   1cd96:	b9c0      	cbnz	r0, 1cdca <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1cd98:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1cd9c:	07d9      	lsls	r1, r3, #31
   1cd9e:	d514      	bpl.n	1cdca <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1cda0:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cda2:	211a      	movs	r1, #26
   1cda4:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   1cda8:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cdac:	f002 feca 	bl	1fb44 <bt_rand>
   1cdb0:	6078      	str	r0, [r7, #4]
   1cdb2:	b310      	cbz	r0, 1cdfa <bt_smp_encrypt_change+0x17a>
			BT_ERR("Unable to get random bytes");
   1cdb4:	4b76      	ldr	r3, [pc, #472]	; (1cf90 <bt_smp_encrypt_change+0x310>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1cdb6:	61fb      	str	r3, [r7, #28]
   1cdb8:	4874      	ldr	r0, [pc, #464]	; (1cf8c <bt_smp_encrypt_change+0x30c>)
   1cdba:	2302      	movs	r3, #2
   1cdbc:	f107 0218 	add.w	r2, r7, #24
   1cdc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cdc4:	61bb      	str	r3, [r7, #24]
   1cdc6:	f00c fb4f 	bl	29468 <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1cdca:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1cdce:	079a      	lsls	r2, r3, #30
   1cdd0:	f140 80a2 	bpl.w	1cf18 <bt_smp_encrypt_change+0x298>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1cdd4:	2108      	movs	r1, #8
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	f00c fb68 	bl	294ac <smp_create_pdu.constprop.0>
		if (!buf) {
   1cddc:	4680      	mov	r8, r0
   1cdde:	2800      	cmp	r0, #0
   1cde0:	d16e      	bne.n	1cec0 <bt_smp_encrypt_change+0x240>
			BT_ERR("Unable to allocate Ident Info buffer");
   1cde2:	4b6c      	ldr	r3, [pc, #432]	; (1cf94 <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Signing Info buffer");
   1cde4:	637b      	str	r3, [r7, #52]	; 0x34
   1cde6:	4869      	ldr	r0, [pc, #420]	; (1cf8c <bt_smp_encrypt_change+0x30c>)
   1cde8:	2302      	movs	r3, #2
   1cdea:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1cdee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cdf2:	633b      	str	r3, [r7, #48]	; 0x30
   1cdf4:	f00c fb38 	bl	29468 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cdf8:	e778      	b.n	1ccec <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1cdfa:	2106      	movs	r1, #6
   1cdfc:	4620      	mov	r0, r4
   1cdfe:	f00c fb55 	bl	294ac <smp_create_pdu.constprop.0>
		if (!buf) {
   1ce02:	4681      	mov	r9, r0
   1ce04:	b908      	cbnz	r0, 1ce0a <bt_smp_encrypt_change+0x18a>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1ce06:	4b64      	ldr	r3, [pc, #400]	; (1cf98 <bt_smp_encrypt_change+0x318>)
   1ce08:	e7d5      	b.n	1cdb6 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1ce0a:	2110      	movs	r1, #16
   1ce0c:	3008      	adds	r0, #8
   1ce0e:	f00c feec 	bl	29bea <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1ce12:	f898 200c 	ldrb.w	r2, [r8, #12]
   1ce16:	6038      	str	r0, [r7, #0]
   1ce18:	f107 0120 	add.w	r1, r7, #32
   1ce1c:	f00a fd07 	bl	2782e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ce20:	f898 000c 	ldrb.w	r0, [r8, #12]
   1ce24:	683b      	ldr	r3, [r7, #0]
   1ce26:	280f      	cmp	r0, #15
   1ce28:	d805      	bhi.n	1ce36 <bt_smp_encrypt_change+0x1b6>
			(void)memset(info->ltk + keys->enc_size, 0,
   1ce2a:	f1c0 0210 	rsb	r2, r0, #16
   1ce2e:	6879      	ldr	r1, [r7, #4]
   1ce30:	4418      	add	r0, r3
   1ce32:	f00a fd07 	bl	27844 <memset>
		smp_send(smp, buf, NULL, NULL);
   1ce36:	4649      	mov	r1, r9
   1ce38:	2200      	movs	r2, #0
   1ce3a:	4620      	mov	r0, r4
   1ce3c:	f00c faf7 	bl	2942e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ce40:	2107      	movs	r1, #7
   1ce42:	4620      	mov	r0, r4
   1ce44:	f00c fb32 	bl	294ac <smp_create_pdu.constprop.0>
		if (!buf) {
   1ce48:	4681      	mov	r9, r0
   1ce4a:	b908      	cbnz	r0, 1ce50 <bt_smp_encrypt_change+0x1d0>
			BT_ERR("Unable to allocate Central Ident buffer");
   1ce4c:	4b53      	ldr	r3, [pc, #332]	; (1cf9c <bt_smp_encrypt_change+0x31c>)
   1ce4e:	e7b2      	b.n	1cdb6 <bt_smp_encrypt_change+0x136>
   1ce50:	210a      	movs	r1, #10
   1ce52:	3008      	adds	r0, #8
   1ce54:	f00c fec9 	bl	29bea <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1ce58:	2208      	movs	r2, #8
   1ce5a:	4603      	mov	r3, r0
   1ce5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1ce60:	3002      	adds	r0, #2
   1ce62:	607b      	str	r3, [r7, #4]
   1ce64:	f00a fce3 	bl	2782e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1ce68:	687b      	ldr	r3, [r7, #4]
   1ce6a:	2202      	movs	r2, #2
   1ce6c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1ce70:	4618      	mov	r0, r3
   1ce72:	f00a fcdc 	bl	2782e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ce76:	4649      	mov	r1, r9
   1ce78:	4620      	mov	r0, r4
   1ce7a:	4a49      	ldr	r2, [pc, #292]	; (1cfa0 <bt_smp_encrypt_change+0x320>)
   1ce7c:	f00c fad7 	bl	2942e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ce80:	210d      	movs	r1, #13
   1ce82:	4630      	mov	r0, r6
   1ce84:	f00c fa0b 	bl	2929e <atomic_test_bit>
   1ce88:	2800      	cmp	r0, #0
   1ce8a:	d09e      	beq.n	1cdca <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ce8c:	4640      	mov	r0, r8
   1ce8e:	2101      	movs	r1, #1
   1ce90:	f00c fe01 	bl	29a96 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1ce94:	f107 0120 	add.w	r1, r7, #32
   1ce98:	2210      	movs	r2, #16
   1ce9a:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1ce9e:	f00a fcc6 	bl	2782e <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1cea2:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1cea6:	2208      	movs	r2, #8
   1cea8:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1ceac:	f00a fcbf 	bl	2782e <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1ceb0:	2202      	movs	r2, #2
   1ceb2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1ceb6:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1ceba:	f00a fcb8 	bl	2782e <memcpy>
   1cebe:	e784      	b.n	1cdca <bt_smp_encrypt_change+0x14a>
   1cec0:	2110      	movs	r1, #16
   1cec2:	3008      	adds	r0, #8
   1cec4:	f00c fe91 	bl	29bea <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1cec8:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1cecc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1cfa4 <bt_smp_encrypt_change+0x324>
   1ced0:	3116      	adds	r1, #22
   1ced2:	2210      	movs	r2, #16
   1ced4:	eb09 1101 	add.w	r1, r9, r1, lsl #4
   1ced8:	f00a fca9 	bl	2782e <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1cedc:	4641      	mov	r1, r8
   1cede:	2200      	movs	r2, #0
   1cee0:	4620      	mov	r0, r4
   1cee2:	f00c faa4 	bl	2942e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1cee6:	2109      	movs	r1, #9
   1cee8:	4620      	mov	r0, r4
   1ceea:	f00c fadf 	bl	294ac <smp_create_pdu.constprop.0>
		if (!buf) {
   1ceee:	4680      	mov	r8, r0
   1cef0:	b908      	cbnz	r0, 1cef6 <bt_smp_encrypt_change+0x276>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1cef2:	4b2d      	ldr	r3, [pc, #180]	; (1cfa8 <bt_smp_encrypt_change+0x328>)
   1cef4:	e776      	b.n	1cde4 <bt_smp_encrypt_change+0x164>
   1cef6:	2107      	movs	r1, #7
   1cef8:	3008      	adds	r0, #8
   1cefa:	f00c fe76 	bl	29bea <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1cefe:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1cf02:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1cf06:	2207      	movs	r2, #7
   1cf08:	4449      	add	r1, r9
   1cf0a:	f00a fc90 	bl	2782e <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1cf0e:	4a27      	ldr	r2, [pc, #156]	; (1cfac <bt_smp_encrypt_change+0x32c>)
   1cf10:	4641      	mov	r1, r8
   1cf12:	4620      	mov	r0, r4
   1cf14:	f00c fa8b 	bl	2942e <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1cf18:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1cf1c:	075b      	lsls	r3, r3, #29
   1cf1e:	d529      	bpl.n	1cf74 <bt_smp_encrypt_change+0x2f4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1cf20:	210a      	movs	r1, #10
   1cf22:	4620      	mov	r0, r4
   1cf24:	f00c fac2 	bl	294ac <smp_create_pdu.constprop.0>
		if (!buf) {
   1cf28:	4680      	mov	r8, r0
   1cf2a:	b908      	cbnz	r0, 1cf30 <bt_smp_encrypt_change+0x2b0>
			BT_ERR("Unable to allocate Signing Info buffer");
   1cf2c:	4b20      	ldr	r3, [pc, #128]	; (1cfb0 <bt_smp_encrypt_change+0x330>)
   1cf2e:	e759      	b.n	1cde4 <bt_smp_encrypt_change+0x164>
   1cf30:	2110      	movs	r1, #16
   1cf32:	3008      	adds	r0, #8
   1cf34:	f00c fe59 	bl	29bea <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1cf38:	2110      	movs	r1, #16
   1cf3a:	4683      	mov	fp, r0
   1cf3c:	f002 fe02 	bl	1fb44 <bt_rand>
   1cf40:	4681      	mov	r9, r0
   1cf42:	2800      	cmp	r0, #0
   1cf44:	f47f aed2 	bne.w	1ccec <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf48:	210d      	movs	r1, #13
   1cf4a:	4630      	mov	r0, r6
   1cf4c:	f00c f9a7 	bl	2929e <atomic_test_bit>
   1cf50:	b158      	cbz	r0, 1cf6a <bt_smp_encrypt_change+0x2ea>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1cf52:	2108      	movs	r1, #8
   1cf54:	4650      	mov	r0, sl
   1cf56:	f00c fd9e 	bl	29a96 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1cf5a:	2210      	movs	r2, #16
   1cf5c:	4659      	mov	r1, fp
   1cf5e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
   1cf62:	f00a fc64 	bl	2782e <memcpy>
			keys->local_csrk.cnt = 0U;
   1cf66:	f8ca 9050 	str.w	r9, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1cf6a:	4a12      	ldr	r2, [pc, #72]	; (1cfb4 <bt_smp_encrypt_change+0x334>)
   1cf6c:	4641      	mov	r1, r8
   1cf6e:	4620      	mov	r0, r4
   1cf70:	f00c fa5d 	bl	2942e <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1cf74:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1cf78:	2900      	cmp	r1, #0
   1cf7a:	f47f aeb7 	bne.w	1ccec <bt_smp_encrypt_change+0x6c>
   1cf7e:	e6a6      	b.n	1ccce <bt_smp_encrypt_change+0x4e>
   1cf80:	0002e48a 	.word	0x0002e48a
   1cf84:	0002e373 	.word	0x0002e373
   1cf88:	01000003 	.word	0x01000003
   1cf8c:	0002b534 	.word	0x0002b534
   1cf90:	0002e388 	.word	0x0002e388
   1cf94:	0002e3f2 	.word	0x0002e3f2
   1cf98:	0002e3a3 	.word	0x0002e3a3
   1cf9c:	0002e3ca 	.word	0x0002e3ca
   1cfa0:	00029a05 	.word	0x00029a05
   1cfa4:	20000350 	.word	0x20000350
   1cfa8:	0002e417 	.word	0x0002e417
   1cfac:	000299fb 	.word	0x000299fb
   1cfb0:	0002e441 	.word	0x0002e441
   1cfb4:	000299f1 	.word	0x000299f1

0001cfb8 <smp_timeout>:
{
   1cfb8:	b510      	push	{r4, lr}
   1cfba:	4604      	mov	r4, r0
   1cfbc:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
   1cfbe:	4b0b      	ldr	r3, [pc, #44]	; (1cfec <smp_timeout+0x34>)
   1cfc0:	9305      	str	r3, [sp, #20]
   1cfc2:	aa04      	add	r2, sp, #16
   1cfc4:	2302      	movs	r3, #2
   1cfc6:	480a      	ldr	r0, [pc, #40]	; (1cff0 <smp_timeout+0x38>)
   1cfc8:	9304      	str	r3, [sp, #16]
   1cfca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cfce:	f00c fa4b 	bl	29468 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1cfd2:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1cfd6:	2108      	movs	r1, #8
   1cfd8:	f7ff fb70 	bl	1c6bc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1cfdc:	2104      	movs	r1, #4
   1cfde:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   1cfe2:	b006      	add	sp, #24
   1cfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1cfe8:	f00c ba4c 	b.w	29484 <atomic_set_bit>
   1cfec:	0002e468 	.word	0x0002e468
   1cff0:	0002b534 	.word	0x0002b534

0001cff4 <bt_smp_update_keys>:
{
   1cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cff8:	af00      	add	r7, sp, #0
   1cffa:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1cffc:	f00c fa37 	bl	2946e <smp_chan_get>
	if (!smp) {
   1d000:	4605      	mov	r5, r0
   1d002:	b358      	cbz	r0, 1d05c <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d004:	1d06      	adds	r6, r0, #4
   1d006:	2103      	movs	r1, #3
   1d008:	4630      	mov	r0, r6
   1d00a:	f00c f948 	bl	2929e <atomic_test_bit>
   1d00e:	b328      	cbz	r0, 1d05c <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
   1d010:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d014:	b108      	cbz	r0, 1d01a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1d016:	f000 f967 	bl	1d2e8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d01a:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1d01e:	7a20      	ldrb	r0, [r4, #8]
   1d020:	4641      	mov	r1, r8
   1d022:	f000 f88d 	bl	1d140 <bt_keys_get_addr>
   1d026:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1d02a:	b9d0      	cbnz	r0, 1d062 <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
   1d02c:	4640      	mov	r0, r8
   1d02e:	f7f8 f9c5 	bl	153bc <bt_addr_le_str_real>
   1d032:	466c      	mov	r4, sp
   1d034:	b088      	sub	sp, #32
   1d036:	466a      	mov	r2, sp
   1d038:	4b33      	ldr	r3, [pc, #204]	; (1d108 <bt_smp_update_keys+0x114>)
   1d03a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d03e:	2302      	movs	r3, #2
   1d040:	7713      	strb	r3, [r2, #28]
   1d042:	4b32      	ldr	r3, [pc, #200]	; (1d10c <bt_smp_update_keys+0x118>)
   1d044:	4832      	ldr	r0, [pc, #200]	; (1d110 <bt_smp_update_keys+0x11c>)
   1d046:	f842 3f10 	str.w	r3, [r2, #16]!
   1d04a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d04e:	f00c fa0b 	bl	29468 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d052:	2108      	movs	r1, #8
   1d054:	46a5      	mov	sp, r4
   1d056:	4628      	mov	r0, r5
   1d058:	f00c fc3a 	bl	298d0 <smp_error>
}
   1d05c:	46bd      	mov	sp, r7
   1d05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d062:	210e      	movs	r1, #14
   1d064:	4630      	mov	r0, r6
   1d066:	f00c f91a 	bl	2929e <atomic_test_bit>
   1d06a:	b128      	cbz	r0, 1d078 <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d06c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d070:	7b53      	ldrb	r3, [r2, #13]
   1d072:	f043 0302 	orr.w	r3, r3, #2
   1d076:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d078:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d07a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1d07e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d080:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1d082:	d836      	bhi.n	1d0f2 <bt_smp_update_keys+0xfe>
   1d084:	b3c2      	cbz	r2, 1d0f8 <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d086:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d08a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1d08c:	7d2b      	ldrb	r3, [r5, #20]
   1d08e:	7b6a      	ldrb	r2, [r5, #13]
   1d090:	4293      	cmp	r3, r2
   1d092:	bf28      	it	cs
   1d094:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d096:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d098:	4630      	mov	r0, r6
   1d09a:	2105      	movs	r1, #5
   1d09c:	f00c f8ff 	bl	2929e <atomic_test_bit>
   1d0a0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1d0a4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d0a6:	b350      	cbz	r0, 1d0fe <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
   1d0a8:	f042 0210 	orr.w	r2, r2, #16
   1d0ac:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d0ae:	210d      	movs	r1, #13
   1d0b0:	4630      	mov	r0, r6
   1d0b2:	f00c f8f4 	bl	2929e <atomic_test_bit>
   1d0b6:	2800      	cmp	r0, #0
   1d0b8:	d0d0      	beq.n	1d05c <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d0ba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d0be:	2120      	movs	r1, #32
   1d0c0:	f00c fce9 	bl	29a96 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1d0c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d0c8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1d0cc:	2210      	movs	r2, #16
   1d0ce:	301a      	adds	r0, #26
   1d0d0:	f00a fbad 	bl	2782e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1d0d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d0d8:	2208      	movs	r2, #8
   1d0da:	2100      	movs	r1, #0
   1d0dc:	3010      	adds	r0, #16
   1d0de:	f00a fbb1 	bl	27844 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d0e2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d0e6:	2202      	movs	r2, #2
   1d0e8:	2100      	movs	r1, #0
   1d0ea:	3018      	adds	r0, #24
   1d0ec:	f00a fbaa 	bl	27844 <memset>
   1d0f0:	e7b4      	b.n	1d05c <bt_smp_update_keys+0x68>
	switch (smp->method) {
   1d0f2:	3a05      	subs	r2, #5
   1d0f4:	2a01      	cmp	r2, #1
   1d0f6:	d9c6      	bls.n	1d086 <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d0f8:	f023 0301 	bic.w	r3, r3, #1
   1d0fc:	e7c5      	b.n	1d08a <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1d0fe:	f022 0210 	bic.w	r2, r2, #16
   1d102:	735a      	strb	r2, [r3, #13]
   1d104:	e7aa      	b.n	1d05c <bt_smp_update_keys+0x68>
   1d106:	bf00      	nop
   1d108:	0002e100 	.word	0x0002e100
   1d10c:	01000003 	.word	0x01000003
   1d110:	0002b534 	.word	0x0002b534

0001d114 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1d114:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d116:	4b07      	ldr	r3, [pc, #28]	; (1d134 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1d118:	4807      	ldr	r0, [pc, #28]	; (1d138 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d11a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1d11e:	f003 0306 	and.w	r3, r3, #6
   1d122:	1f9a      	subs	r2, r3, #6
   1d124:	4253      	negs	r3, r2
   1d126:	4153      	adcs	r3, r2
   1d128:	4a04      	ldr	r2, [pc, #16]	; (1d13c <bt_smp_init+0x28>)
   1d12a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1d12c:	f7fa fc4c 	bl	179c8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1d130:	2000      	movs	r0, #0
   1d132:	bd08      	pop	{r3, pc}
   1d134:	20000350 	.word	0x20000350
   1d138:	20000720 	.word	0x20000720
   1d13c:	20003dad 	.word	0x20003dad

0001d140 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1d140:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d142:	4c1f      	ldr	r4, [pc, #124]	; (1d1c0 <bt_keys_get_addr+0x80>)
   1d144:	7823      	ldrb	r3, [r4, #0]
   1d146:	4283      	cmp	r3, r0
{
   1d148:	b085      	sub	sp, #20
   1d14a:	4606      	mov	r6, r0
   1d14c:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d14e:	d01e      	beq.n	1d18e <bt_keys_get_addr+0x4e>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1d150:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   1d152:	481c      	ldr	r0, [pc, #112]	; (1d1c4 <bt_keys_get_addr+0x84>)
   1d154:	9502      	str	r5, [sp, #8]
   1d156:	2207      	movs	r2, #7
   1d158:	a902      	add	r1, sp, #8
   1d15a:	f8cd 500b 	str.w	r5, [sp, #11]
   1d15e:	f00a fb3d 	bl	277dc <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d162:	b1e0      	cbz	r0, 1d19e <bt_keys_get_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   1d164:	2207      	movs	r2, #7
   1d166:	4917      	ldr	r1, [pc, #92]	; (1d1c4 <bt_keys_get_addr+0x84>)
   1d168:	4668      	mov	r0, sp
   1d16a:	f00a fb60 	bl	2782e <memcpy>
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   1d16e:	4669      	mov	r1, sp
   1d170:	7820      	ldrb	r0, [r4, #0]
   1d172:	f7f9 fb39 	bl	167e8 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   1d176:	4813      	ldr	r0, [pc, #76]	; (1d1c4 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   1d178:	9502      	str	r5, [sp, #8]
   1d17a:	2207      	movs	r2, #7
   1d17c:	a902      	add	r1, sp, #8
   1d17e:	f8cd 500b 	str.w	r5, [sp, #11]
   1d182:	f00a fb2b 	bl	277dc <memcmp>
   1d186:	b150      	cbz	r0, 1d19e <bt_keys_get_addr+0x5e>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1d188:	4628      	mov	r0, r5
}
   1d18a:	b005      	add	sp, #20
   1d18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d18e:	2207      	movs	r2, #7
   1d190:	1c60      	adds	r0, r4, #1
   1d192:	f00a fb23 	bl	277dc <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d196:	2800      	cmp	r0, #0
   1d198:	d1da      	bne.n	1d150 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1d19a:	4620      	mov	r0, r4
   1d19c:	e7f5      	b.n	1d18a <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1d19e:	2207      	movs	r2, #7
   1d1a0:	4808      	ldr	r0, [pc, #32]	; (1d1c4 <bt_keys_get_addr+0x84>)
		keys->id = id;
   1d1a2:	7026      	strb	r6, [r4, #0]
   1d1a4:	4639      	mov	r1, r7
   1d1a6:	f00a fb42 	bl	2782e <memcpy>
		keys->aging_counter = ++aging_counter_val;
   1d1aa:	4a07      	ldr	r2, [pc, #28]	; (1d1c8 <bt_keys_get_addr+0x88>)
		return keys;
   1d1ac:	4804      	ldr	r0, [pc, #16]	; (1d1c0 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
   1d1ae:	6813      	ldr	r3, [r2, #0]
   1d1b0:	3301      	adds	r3, #1
   1d1b2:	6013      	str	r3, [r2, #0]
   1d1b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1d1b8:	4b04      	ldr	r3, [pc, #16]	; (1d1cc <bt_keys_get_addr+0x8c>)
   1d1ba:	601c      	str	r4, [r3, #0]
		return keys;
   1d1bc:	e7e5      	b.n	1d18a <bt_keys_get_addr+0x4a>
   1d1be:	bf00      	nop
   1d1c0:	20002e74 	.word	0x20002e74
   1d1c4:	20002e75 	.word	0x20002e75
   1d1c8:	20002e70 	.word	0x20002e70
   1d1cc:	20002efc 	.word	0x20002efc

0001d1d0 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1d1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d1d2:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1d1d4:	4908      	ldr	r1, [pc, #32]	; (1d1f8 <bt_foreach_bond+0x28>)
   1d1d6:	89cb      	ldrh	r3, [r1, #14]
{
   1d1d8:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   1d1da:	b153      	cbz	r3, 1d1f2 <bt_foreach_bond+0x22>
   1d1dc:	780b      	ldrb	r3, [r1, #0]
   1d1de:	4283      	cmp	r3, r0
   1d1e0:	d107      	bne.n	1d1f2 <bt_foreach_bond+0x22>
   1d1e2:	3101      	adds	r1, #1
   1d1e4:	2207      	movs	r2, #7
   1d1e6:	4668      	mov	r0, sp
   1d1e8:	f00a fb21 	bl	2782e <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1d1ec:	4629      	mov	r1, r5
   1d1ee:	4668      	mov	r0, sp
   1d1f0:	47a0      	blx	r4
		}
	}
}
   1d1f2:	b003      	add	sp, #12
   1d1f4:	bd30      	pop	{r4, r5, pc}
   1d1f6:	bf00      	nop
   1d1f8:	20002e74 	.word	0x20002e74

0001d1fc <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1d1fc:	460b      	mov	r3, r1
   1d1fe:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1d200:	4a04      	ldr	r2, [pc, #16]	; (1d214 <bt_keys_foreach+0x18>)
{
   1d202:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1d204:	89d4      	ldrh	r4, [r2, #14]
   1d206:	4204      	tst	r4, r0
   1d208:	d002      	beq.n	1d210 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1d20a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1d20c:	4610      	mov	r0, r2
   1d20e:	4718      	bx	r3
}
   1d210:	bc10      	pop	{r4}
   1d212:	4770      	bx	lr
   1d214:	20002e74 	.word	0x20002e74

0001d218 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1d218:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1d21a:	4903      	ldr	r1, [pc, #12]	; (1d228 <keys_commit+0x10>)
   1d21c:	2200      	movs	r2, #0
   1d21e:	2002      	movs	r0, #2
   1d220:	f7ff ffec 	bl	1d1fc <bt_keys_foreach>
	}

	return 0;
}
   1d224:	2000      	movs	r0, #0
   1d226:	bd08      	pop	{r3, pc}
   1d228:	00029a73 	.word	0x00029a73

0001d22c <bt_keys_find>:
{
   1d22c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d22e:	4c09      	ldr	r4, [pc, #36]	; (1d254 <bt_keys_find+0x28>)
{
   1d230:	460b      	mov	r3, r1
   1d232:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d234:	89e2      	ldrh	r2, [r4, #14]
   1d236:	4202      	tst	r2, r0
   1d238:	d007      	beq.n	1d24a <bt_keys_find+0x1e>
   1d23a:	7822      	ldrb	r2, [r4, #0]
   1d23c:	429a      	cmp	r2, r3
   1d23e:	d104      	bne.n	1d24a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1d240:	2207      	movs	r2, #7
   1d242:	1c60      	adds	r0, r4, #1
   1d244:	f00a faca 	bl	277dc <memcmp>
   1d248:	b108      	cbz	r0, 1d24e <bt_keys_find+0x22>
	return NULL;
   1d24a:	2000      	movs	r0, #0
}
   1d24c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d24e:	4620      	mov	r0, r4
   1d250:	e7fc      	b.n	1d24c <bt_keys_find+0x20>
   1d252:	bf00      	nop
   1d254:	20002e74 	.word	0x20002e74

0001d258 <bt_keys_find_irk>:
{
   1d258:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d25a:	780b      	ldrb	r3, [r1, #0]
   1d25c:	2b01      	cmp	r3, #1
   1d25e:	4606      	mov	r6, r0
   1d260:	460d      	mov	r5, r1
   1d262:	d001      	beq.n	1d268 <bt_keys_find_irk+0x10>
		return NULL;
   1d264:	2000      	movs	r0, #0
}
   1d266:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1d268:	798b      	ldrb	r3, [r1, #6]
   1d26a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d26e:	2b40      	cmp	r3, #64	; 0x40
   1d270:	d1f8      	bne.n	1d264 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d272:	4c12      	ldr	r4, [pc, #72]	; (1d2bc <bt_keys_find_irk+0x64>)
   1d274:	89e3      	ldrh	r3, [r4, #14]
   1d276:	079b      	lsls	r3, r3, #30
   1d278:	d5f4      	bpl.n	1d264 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1d27a:	7823      	ldrb	r3, [r4, #0]
   1d27c:	42b3      	cmp	r3, r6
   1d27e:	d10b      	bne.n	1d298 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1d280:	2206      	movs	r2, #6
   1d282:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1d286:	1c68      	adds	r0, r5, #1
   1d288:	f00a faa8 	bl	277dc <memcmp>
   1d28c:	b908      	cbnz	r0, 1d292 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1d28e:	4620      	mov	r0, r4
   1d290:	e7e9      	b.n	1d266 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d292:	89e3      	ldrh	r3, [r4, #14]
   1d294:	079a      	lsls	r2, r3, #30
   1d296:	d5e5      	bpl.n	1d264 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1d298:	7823      	ldrb	r3, [r4, #0]
   1d29a:	42b3      	cmp	r3, r6
   1d29c:	d1e2      	bne.n	1d264 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1d29e:	3501      	adds	r5, #1
   1d2a0:	4807      	ldr	r0, [pc, #28]	; (1d2c0 <bt_keys_find_irk+0x68>)
   1d2a2:	4629      	mov	r1, r5
   1d2a4:	f00a fb0b 	bl	278be <bt_rpa_irk_matches>
   1d2a8:	2800      	cmp	r0, #0
   1d2aa:	d0db      	beq.n	1d264 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1d2ac:	4805      	ldr	r0, [pc, #20]	; (1d2c4 <bt_keys_find_irk+0x6c>)
   1d2ae:	2206      	movs	r2, #6
   1d2b0:	4629      	mov	r1, r5
   1d2b2:	f00a fabc 	bl	2782e <memcpy>
			return &key_pool[i];
   1d2b6:	4801      	ldr	r0, [pc, #4]	; (1d2bc <bt_keys_find_irk+0x64>)
}
   1d2b8:	e7d5      	b.n	1d266 <bt_keys_find_irk+0xe>
   1d2ba:	bf00      	nop
   1d2bc:	20002e74 	.word	0x20002e74
   1d2c0:	20002e9e 	.word	0x20002e9e
   1d2c4:	20002eae 	.word	0x20002eae

0001d2c8 <bt_keys_find_addr>:
{
   1d2c8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1d2ca:	4c06      	ldr	r4, [pc, #24]	; (1d2e4 <bt_keys_find_addr+0x1c>)
   1d2cc:	7823      	ldrb	r3, [r4, #0]
   1d2ce:	4283      	cmp	r3, r0
   1d2d0:	d104      	bne.n	1d2dc <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1d2d2:	2207      	movs	r2, #7
   1d2d4:	1c60      	adds	r0, r4, #1
   1d2d6:	f00a fa81 	bl	277dc <memcmp>
   1d2da:	b108      	cbz	r0, 1d2e0 <bt_keys_find_addr+0x18>
	return NULL;
   1d2dc:	2000      	movs	r0, #0
}
   1d2de:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d2e0:	4620      	mov	r0, r4
   1d2e2:	e7fc      	b.n	1d2de <bt_keys_find_addr+0x16>
   1d2e4:	20002e74 	.word	0x20002e74

0001d2e8 <bt_keys_clear>:
{
   1d2e8:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d2ea:	7a03      	ldrb	r3, [r0, #8]
   1d2ec:	075b      	lsls	r3, r3, #29
{
   1d2ee:	b08c      	sub	sp, #48	; 0x30
   1d2f0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d2f2:	d501      	bpl.n	1d2f8 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1d2f4:	f7fa f904 	bl	17500 <bt_id_del>
		if (keys->id) {
   1d2f8:	4625      	mov	r5, r4
   1d2fa:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d2fe:	b1b2      	cbz	r2, 1d32e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1d300:	ae02      	add	r6, sp, #8
   1d302:	2104      	movs	r1, #4
   1d304:	4630      	mov	r0, r6
   1d306:	f009 f8bd 	bl	26484 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d30a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d30c:	4a09      	ldr	r2, [pc, #36]	; (1d334 <bt_keys_clear+0x4c>)
   1d30e:	462b      	mov	r3, r5
   1d310:	2124      	movs	r1, #36	; 0x24
   1d312:	a803      	add	r0, sp, #12
   1d314:	f7f8 f9a8 	bl	15668 <bt_settings_encode_key>
		settings_delete(key);
   1d318:	a803      	add	r0, sp, #12
   1d31a:	f009 ff20 	bl	2715e <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1d31e:	2288      	movs	r2, #136	; 0x88
   1d320:	2100      	movs	r1, #0
   1d322:	4620      	mov	r0, r4
}
   1d324:	b00c      	add	sp, #48	; 0x30
   1d326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1d32a:	f00a ba8b 	b.w	27844 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d32e:	9200      	str	r2, [sp, #0]
   1d330:	e7ec      	b.n	1d30c <bt_keys_clear+0x24>
   1d332:	bf00      	nop
   1d334:	0002e59e 	.word	0x0002e59e

0001d338 <keys_set>:
{
   1d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d33c:	b0a4      	sub	sp, #144	; 0x90
   1d33e:	4614      	mov	r4, r2
   1d340:	af00      	add	r7, sp, #0
	if (!name) {
   1d342:	4606      	mov	r6, r0
   1d344:	b990      	cbnz	r0, 1d36c <keys_set+0x34>
		BT_ERR("Insufficient number of arguments");
   1d346:	4b70      	ldr	r3, [pc, #448]	; (1d508 <keys_set+0x1d0>)
   1d348:	627b      	str	r3, [r7, #36]	; 0x24
   1d34a:	2302      	movs	r3, #2
   1d34c:	623b      	str	r3, [r7, #32]
   1d34e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d352:	4603      	mov	r3, r0
   1d354:	f107 0220 	add.w	r2, r7, #32
   1d358:	486c      	ldr	r0, [pc, #432]	; (1d50c <keys_set+0x1d4>)
   1d35a:	f7f6 fb13 	bl	13984 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d35e:	f06f 0515 	mvn.w	r5, #21
}
   1d362:	4628      	mov	r0, r5
   1d364:	3790      	adds	r7, #144	; 0x90
   1d366:	46bd      	mov	sp, r7
   1d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1d36c:	227c      	movs	r2, #124	; 0x7c
   1d36e:	f107 0110 	add.w	r1, r7, #16
   1d372:	4618      	mov	r0, r3
   1d374:	47a0      	blx	r4
	if (len < 0) {
   1d376:	1e04      	subs	r4, r0, #0
   1d378:	da10      	bge.n	1d39c <keys_set+0x64>
		BT_ERR("Failed to read value (err %zd)", len);
   1d37a:	466d      	mov	r5, sp
   1d37c:	b088      	sub	sp, #32
   1d37e:	466a      	mov	r2, sp
   1d380:	4b63      	ldr	r3, [pc, #396]	; (1d510 <keys_set+0x1d8>)
   1d382:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d386:	2303      	movs	r3, #3
   1d388:	f842 3f10 	str.w	r3, [r2, #16]!
   1d38c:	485f      	ldr	r0, [pc, #380]	; (1d50c <keys_set+0x1d4>)
   1d38e:	2300      	movs	r3, #0
   1d390:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d394:	f7f6 faf6 	bl	13984 <z_impl_z_log_msg_static_create>
   1d398:	46ad      	mov	sp, r5
   1d39a:	e7e0      	b.n	1d35e <keys_set+0x26>
	err = bt_settings_decode_key(name, &addr);
   1d39c:	f107 0108 	add.w	r1, r7, #8
   1d3a0:	4630      	mov	r0, r6
   1d3a2:	f00a fab9 	bl	27918 <bt_settings_decode_key>
	if (err) {
   1d3a6:	4605      	mov	r5, r0
   1d3a8:	b190      	cbz	r0, 1d3d0 <keys_set+0x98>
		BT_ERR("Unable to decode address %s", name);
   1d3aa:	466c      	mov	r4, sp
   1d3ac:	b088      	sub	sp, #32
   1d3ae:	466a      	mov	r2, sp
   1d3b0:	4b58      	ldr	r3, [pc, #352]	; (1d514 <keys_set+0x1dc>)
   1d3b2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d3b6:	2302      	movs	r3, #2
   1d3b8:	7713      	strb	r3, [r2, #28]
   1d3ba:	4b57      	ldr	r3, [pc, #348]	; (1d518 <keys_set+0x1e0>)
   1d3bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d3c6:	4851      	ldr	r0, [pc, #324]	; (1d50c <keys_set+0x1d4>)
   1d3c8:	f7f6 fadc 	bl	13984 <z_impl_z_log_msg_static_create>
   1d3cc:	46a5      	mov	sp, r4
			return -EINVAL;
   1d3ce:	e7c6      	b.n	1d35e <keys_set+0x26>
	settings_name_next(name, &next);
   1d3d0:	1d39      	adds	r1, r7, #4
   1d3d2:	4630      	mov	r0, r6
   1d3d4:	f009 feea 	bl	271ac <settings_name_next>
	if (!next) {
   1d3d8:	6878      	ldr	r0, [r7, #4]
   1d3da:	b188      	cbz	r0, 1d400 <keys_set+0xc8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1d3dc:	220a      	movs	r2, #10
   1d3de:	4629      	mov	r1, r5
   1d3e0:	f00a f93a 	bl	27658 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1d3e4:	b160      	cbz	r0, 1d400 <keys_set+0xc8>
			BT_ERR("Invalid local identity %lu", next_id);
   1d3e6:	466c      	mov	r4, sp
   1d3e8:	b088      	sub	sp, #32
   1d3ea:	466a      	mov	r2, sp
   1d3ec:	4b4b      	ldr	r3, [pc, #300]	; (1d51c <keys_set+0x1e4>)
   1d3ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d3f2:	2303      	movs	r3, #3
   1d3f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d3fc:	462b      	mov	r3, r5
   1d3fe:	e7e2      	b.n	1d3c6 <keys_set+0x8e>
	if (!len) {
   1d400:	bb1c      	cbnz	r4, 1d44a <keys_set+0x112>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1d402:	f107 0208 	add.w	r2, r7, #8
   1d406:	4621      	mov	r1, r4
   1d408:	203f      	movs	r0, #63	; 0x3f
   1d40a:	f7ff ff0f 	bl	1d22c <bt_keys_find>
		if (keys) {
   1d40e:	b128      	cbz	r0, 1d41c <keys_set+0xe4>
			(void)memset(keys, 0, sizeof(*keys));
   1d410:	2288      	movs	r2, #136	; 0x88
   1d412:	4621      	mov	r1, r4
   1d414:	f00a fa16 	bl	27844 <memset>
		return 0;
   1d418:	4625      	mov	r5, r4
   1d41a:	e7a2      	b.n	1d362 <keys_set+0x2a>
			BT_WARN("Unable to find deleted keys for %s",
   1d41c:	f107 0008 	add.w	r0, r7, #8
   1d420:	f7f7 ffcc 	bl	153bc <bt_addr_le_str_real>
   1d424:	466d      	mov	r5, sp
   1d426:	b088      	sub	sp, #32
   1d428:	466a      	mov	r2, sp
   1d42a:	4b3d      	ldr	r3, [pc, #244]	; (1d520 <keys_set+0x1e8>)
   1d42c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d430:	2302      	movs	r3, #2
   1d432:	7713      	strb	r3, [r2, #28]
   1d434:	4b38      	ldr	r3, [pc, #224]	; (1d518 <keys_set+0x1e0>)
   1d436:	f842 3f10 	str.w	r3, [r2, #16]!
   1d43a:	4834      	ldr	r0, [pc, #208]	; (1d50c <keys_set+0x1d4>)
   1d43c:	4623      	mov	r3, r4
   1d43e:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1d442:	f7f6 fa9f 	bl	13984 <z_impl_z_log_msg_static_create>
   1d446:	46ad      	mov	sp, r5
   1d448:	e7e6      	b.n	1d418 <keys_set+0xe0>
	keys = bt_keys_get_addr(id, &addr);
   1d44a:	f107 0108 	add.w	r1, r7, #8
   1d44e:	2000      	movs	r0, #0
   1d450:	f7ff fe76 	bl	1d140 <bt_keys_get_addr>
	if (!keys) {
   1d454:	4606      	mov	r6, r0
   1d456:	b9c0      	cbnz	r0, 1d48a <keys_set+0x152>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1d458:	f107 0008 	add.w	r0, r7, #8
   1d45c:	f7f7 ffae 	bl	153bc <bt_addr_le_str_real>
   1d460:	466c      	mov	r4, sp
   1d462:	b088      	sub	sp, #32
   1d464:	466a      	mov	r2, sp
   1d466:	4b2f      	ldr	r3, [pc, #188]	; (1d524 <keys_set+0x1ec>)
   1d468:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d46c:	2302      	movs	r3, #2
   1d46e:	7713      	strb	r3, [r2, #28]
   1d470:	4b29      	ldr	r3, [pc, #164]	; (1d518 <keys_set+0x1e0>)
   1d472:	f842 3f10 	str.w	r3, [r2, #16]!
   1d476:	4825      	ldr	r0, [pc, #148]	; (1d50c <keys_set+0x1d4>)
   1d478:	4633      	mov	r3, r6
   1d47a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d47e:	f7f6 fa81 	bl	13984 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1d482:	f06f 050b 	mvn.w	r5, #11
   1d486:	46a5      	mov	sp, r4
   1d488:	e76b      	b.n	1d362 <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
   1d48a:	2c7c      	cmp	r4, #124	; 0x7c
   1d48c:	d017      	beq.n	1d4be <keys_set+0x186>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1d48e:	2c78      	cmp	r4, #120	; 0x78
   1d490:	d124      	bne.n	1d4dc <keys_set+0x1a4>
			BT_WARN("Keys for %s have no aging counter",
   1d492:	f107 0008 	add.w	r0, r7, #8
   1d496:	f7f7 ff91 	bl	153bc <bt_addr_le_str_real>
   1d49a:	46e8      	mov	r8, sp
   1d49c:	b088      	sub	sp, #32
   1d49e:	466a      	mov	r2, sp
   1d4a0:	4b21      	ldr	r3, [pc, #132]	; (1d528 <keys_set+0x1f0>)
   1d4a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d4a6:	2302      	movs	r3, #2
   1d4a8:	7713      	strb	r3, [r2, #28]
   1d4aa:	4b1b      	ldr	r3, [pc, #108]	; (1d518 <keys_set+0x1e0>)
   1d4ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4b0:	4816      	ldr	r0, [pc, #88]	; (1d50c <keys_set+0x1d4>)
   1d4b2:	2300      	movs	r3, #0
   1d4b4:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1d4b8:	f7f6 fa64 	bl	13984 <z_impl_z_log_msg_static_create>
   1d4bc:	46c5      	mov	sp, r8
		memcpy(keys->storage_start, val, len);
   1d4be:	4622      	mov	r2, r4
   1d4c0:	f107 0110 	add.w	r1, r7, #16
   1d4c4:	f106 000c 	add.w	r0, r6, #12
   1d4c8:	f00a f9b1 	bl	2782e <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1d4cc:	4b17      	ldr	r3, [pc, #92]	; (1d52c <keys_set+0x1f4>)
   1d4ce:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   1d4d2:	6819      	ldr	r1, [r3, #0]
   1d4d4:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1d4d6:	bf88      	it	hi
   1d4d8:	601a      	strhi	r2, [r3, #0]
   1d4da:	e742      	b.n	1d362 <keys_set+0x2a>
			BT_ERR("Invalid key length %zd != %zu", len,
   1d4dc:	466d      	mov	r5, sp
   1d4de:	b088      	sub	sp, #32
   1d4e0:	466a      	mov	r2, sp
   1d4e2:	4b13      	ldr	r3, [pc, #76]	; (1d530 <keys_set+0x1f8>)
   1d4e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d4e8:	237c      	movs	r3, #124	; 0x7c
   1d4ea:	61d3      	str	r3, [r2, #28]
   1d4ec:	2304      	movs	r3, #4
   1d4ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4f2:	4806      	ldr	r0, [pc, #24]	; (1d50c <keys_set+0x1d4>)
   1d4f4:	2300      	movs	r3, #0
   1d4f6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d4fa:	f7f6 fa43 	bl	13984 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1d4fe:	4630      	mov	r0, r6
   1d500:	46ad      	mov	sp, r5
   1d502:	f7ff fef1 	bl	1d2e8 <bt_keys_clear>
			return -EINVAL;
   1d506:	e72a      	b.n	1d35e <keys_set+0x26>
   1d508:	0002cc42 	.word	0x0002cc42
   1d50c:	0002b514 	.word	0x0002b514
   1d510:	0002e4dd 	.word	0x0002e4dd
   1d514:	0002de11 	.word	0x0002de11
   1d518:	01000003 	.word	0x01000003
   1d51c:	0002de2d 	.word	0x0002de2d
   1d520:	0002e4fc 	.word	0x0002e4fc
   1d524:	0002e51f 	.word	0x0002e51f
   1d528:	0002e53e 	.word	0x0002e53e
   1d52c:	20002e70 	.word	0x20002e70
   1d530:	0002e560 	.word	0x0002e560

0001d534 <bt_keys_store>:
{
   1d534:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1d536:	4605      	mov	r5, r0
{
   1d538:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1d53a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1d53e:	af02      	add	r7, sp, #8
   1d540:	4604      	mov	r4, r0
	if (keys->id) {
   1d542:	b332      	cbz	r2, 1d592 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1d544:	2104      	movs	r1, #4
   1d546:	4638      	mov	r0, r7
   1d548:	f008 ff9c 	bl	26484 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d54c:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d54e:	4a12      	ldr	r2, [pc, #72]	; (1d598 <bt_keys_store+0x64>)
   1d550:	462b      	mov	r3, r5
   1d552:	2124      	movs	r1, #36	; 0x24
   1d554:	1d38      	adds	r0, r7, #4
   1d556:	f7f8 f887 	bl	15668 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1d55a:	f104 010c 	add.w	r1, r4, #12
   1d55e:	227c      	movs	r2, #124	; 0x7c
   1d560:	1d38      	adds	r0, r7, #4
   1d562:	f7f6 fe41 	bl	141e8 <settings_save_one>
	if (err) {
   1d566:	4604      	mov	r4, r0
   1d568:	b178      	cbz	r0, 1d58a <bt_keys_store+0x56>
		BT_ERR("Failed to save keys (err %d)", err);
   1d56a:	466d      	mov	r5, sp
   1d56c:	b088      	sub	sp, #32
   1d56e:	aa02      	add	r2, sp, #8
   1d570:	4b0a      	ldr	r3, [pc, #40]	; (1d59c <bt_keys_store+0x68>)
   1d572:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d576:	2303      	movs	r3, #3
   1d578:	f842 3f10 	str.w	r3, [r2, #16]!
   1d57c:	4808      	ldr	r0, [pc, #32]	; (1d5a0 <bt_keys_store+0x6c>)
   1d57e:	2300      	movs	r3, #0
   1d580:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d584:	f7f6 f9fe 	bl	13984 <z_impl_z_log_msg_static_create>
   1d588:	46ad      	mov	sp, r5
}
   1d58a:	4620      	mov	r0, r4
   1d58c:	3728      	adds	r7, #40	; 0x28
   1d58e:	46bd      	mov	sp, r7
   1d590:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d592:	9200      	str	r2, [sp, #0]
   1d594:	e7db      	b.n	1d54e <bt_keys_store+0x1a>
   1d596:	bf00      	nop
   1d598:	0002e59e 	.word	0x0002e59e
   1d59c:	0002e57e 	.word	0x0002e57e
   1d5a0:	0002b514 	.word	0x0002b514

0001d5a4 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1d5a4:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1d5a6:	f7ff fe8f 	bl	1d2c8 <bt_keys_find_addr>

	if (!keys) {
   1d5aa:	b150      	cbz	r0, 1d5c2 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1d5ac:	4a05      	ldr	r2, [pc, #20]	; (1d5c4 <bt_keys_update_usage+0x20>)
   1d5ae:	6813      	ldr	r3, [r2, #0]
   1d5b0:	4283      	cmp	r3, r0
   1d5b2:	d006      	beq.n	1d5c2 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1d5b4:	4904      	ldr	r1, [pc, #16]	; (1d5c8 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1d5b6:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1d5b8:	680b      	ldr	r3, [r1, #0]
   1d5ba:	3301      	adds	r3, #1
   1d5bc:	600b      	str	r3, [r1, #0]
   1d5be:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1d5c2:	bd08      	pop	{r3, pc}
   1d5c4:	20002efc 	.word	0x20002efc
   1d5c8:	20002e70 	.word	0x20002e70

0001d5cc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d5cc:	4b02      	ldr	r3, [pc, #8]	; (1d5d8 <net_buf_pool_get+0xc>)
   1d5ce:	222c      	movs	r2, #44	; 0x2c
   1d5d0:	fb02 3000 	mla	r0, r2, r0, r3
   1d5d4:	4770      	bx	lr
   1d5d6:	bf00      	nop
   1d5d8:	20000af8 	.word	0x20000af8

0001d5dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d5dc:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1d5de:	4b06      	ldr	r3, [pc, #24]	; (1d5f8 <net_buf_id+0x1c>)
   1d5e0:	212c      	movs	r1, #44	; 0x2c
   1d5e2:	fb01 3302 	mla	r3, r1, r2, r3
   1d5e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d5e8:	7f1b      	ldrb	r3, [r3, #28]
   1d5ea:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1d5ec:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d5ee:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1d5f2:	fbb0 f0f3 	udiv	r0, r0, r3
   1d5f6:	4770      	bx	lr
   1d5f8:	20000af8 	.word	0x20000af8

0001d5fc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d5fc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d5fe:	4b0a      	ldr	r3, [pc, #40]	; (1d628 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d600:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d602:	242c      	movs	r4, #44	; 0x2c
   1d604:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1d608:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d60c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d60e:	6823      	ldr	r3, [r4, #0]
   1d610:	429a      	cmp	r2, r3
   1d612:	bf94      	ite	ls
   1d614:	600a      	strls	r2, [r1, #0]
   1d616:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d618:	f7ff ffe0 	bl	1d5dc <net_buf_id>
   1d61c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d620:	fb02 3000 	mla	r0, r2, r0, r3
   1d624:	bd10      	pop	{r4, pc}
   1d626:	bf00      	nop
   1d628:	20000af8 	.word	0x20000af8

0001d62c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d630:	4605      	mov	r5, r0
   1d632:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d634:	4610      	mov	r0, r2
   1d636:	4619      	mov	r1, r3
{
   1d638:	4691      	mov	r9, r2
   1d63a:	4698      	mov	r8, r3
   1d63c:	4617      	mov	r7, r2
   1d63e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d640:	f00d fb96 	bl	2ad70 <sys_clock_timeout_end_calc>
   1d644:	4682      	mov	sl, r0
   1d646:	468b      	mov	fp, r1
	__asm__ volatile(
   1d648:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d64c:	f3ef 8111 	mrs	r1, BASEPRI
   1d650:	f383 8812 	msr	BASEPRI_MAX, r3
   1d654:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d658:	8b6b      	ldrh	r3, [r5, #26]
   1d65a:	2b00      	cmp	r3, #0
   1d65c:	d05a      	beq.n	1d714 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d65e:	8b2a      	ldrh	r2, [r5, #24]
   1d660:	429a      	cmp	r2, r3
   1d662:	d93e      	bls.n	1d6e2 <net_buf_alloc_len+0xb6>
   1d664:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1d666:	2200      	movs	r2, #0
   1d668:	2300      	movs	r3, #0
   1d66a:	4628      	mov	r0, r5
   1d66c:	f004 f83a 	bl	216e4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d670:	9900      	ldr	r1, [sp, #0]
   1d672:	4604      	mov	r4, r0
   1d674:	2800      	cmp	r0, #0
   1d676:	d034      	beq.n	1d6e2 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1d678:	f381 8811 	msr	BASEPRI, r1
   1d67c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d680:	9b01      	ldr	r3, [sp, #4]
   1d682:	2b00      	cmp	r3, #0
   1d684:	d056      	beq.n	1d734 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d686:	ea58 0309 	orrs.w	r3, r8, r9
   1d68a:	d00f      	beq.n	1d6ac <net_buf_alloc_len+0x80>
   1d68c:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d690:	bf08      	it	eq
   1d692:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1d696:	d009      	beq.n	1d6ac <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1d698:	f004 ff46 	bl	22528 <sys_clock_tick_get>
   1d69c:	ebba 0700 	subs.w	r7, sl, r0
   1d6a0:	eb6b 0601 	sbc.w	r6, fp, r1
   1d6a4:	2e00      	cmp	r6, #0
   1d6a6:	bfbc      	itt	lt
   1d6a8:	2700      	movlt	r7, #0
   1d6aa:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d6ac:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d6ae:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1d74c <net_buf_alloc_len+0x120>
   1d6b2:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1d6b6:	fb09 8303 	mla	r3, r9, r3, r8
   1d6ba:	463a      	mov	r2, r7
   1d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d6be:	681b      	ldr	r3, [r3, #0]
   1d6c0:	a901      	add	r1, sp, #4
   1d6c2:	681d      	ldr	r5, [r3, #0]
   1d6c4:	4620      	mov	r0, r4
   1d6c6:	4633      	mov	r3, r6
   1d6c8:	47a8      	blx	r5
   1d6ca:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d6cc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d6ce:	2800      	cmp	r0, #0
   1d6d0:	d131      	bne.n	1d736 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1d6d2:	79a0      	ldrb	r0, [r4, #6]
   1d6d4:	4621      	mov	r1, r4
   1d6d6:	fb00 8009 	mla	r0, r0, r9, r8
   1d6da:	f00d f896 	bl	2a80a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d6de:	462c      	mov	r4, r5
}
   1d6e0:	e024      	b.n	1d72c <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1d6e2:	8b68      	ldrh	r0, [r5, #26]
   1d6e4:	1e43      	subs	r3, r0, #1
   1d6e6:	836b      	strh	r3, [r5, #26]
   1d6e8:	f381 8811 	msr	BASEPRI, r1
   1d6ec:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d6f0:	7f2a      	ldrb	r2, [r5, #28]
   1d6f2:	f102 0417 	add.w	r4, r2, #23
   1d6f6:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1d6fa:	8b2c      	ldrh	r4, [r5, #24]
   1d6fc:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1d6fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1d700:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1d704:	4811      	ldr	r0, [pc, #68]	; (1d74c <net_buf_alloc_len+0x120>)
   1d706:	4b12      	ldr	r3, [pc, #72]	; (1d750 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1d708:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1d70a:	1a2d      	subs	r5, r5, r0
   1d70c:	10ad      	asrs	r5, r5, #2
   1d70e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d710:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d712:	e7b5      	b.n	1d680 <net_buf_alloc_len+0x54>
   1d714:	f381 8811 	msr	BASEPRI, r1
   1d718:	f3bf 8f6f 	isb	sy
   1d71c:	464a      	mov	r2, r9
   1d71e:	4643      	mov	r3, r8
   1d720:	4628      	mov	r0, r5
   1d722:	f003 ffdf 	bl	216e4 <z_impl_k_queue_get>
	if (!buf) {
   1d726:	4604      	mov	r4, r0
   1d728:	2800      	cmp	r0, #0
   1d72a:	d1a9      	bne.n	1d680 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d72c:	4620      	mov	r0, r4
   1d72e:	b003      	add	sp, #12
   1d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d734:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d736:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d738:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d73a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d73c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d73e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d740:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d742:	6923      	ldr	r3, [r4, #16]
   1d744:	81e2      	strh	r2, [r4, #14]
   1d746:	60a3      	str	r3, [r4, #8]
	return buf;
   1d748:	e7f0      	b.n	1d72c <net_buf_alloc_len+0x100>
   1d74a:	bf00      	nop
   1d74c:	20000af8 	.word	0x20000af8
   1d750:	ba2e8ba3 	.word	0xba2e8ba3

0001d754 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d758:	4d16      	ldr	r5, [pc, #88]	; (1d7b4 <net_buf_unref+0x60>)
   1d75a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d75c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d75e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1d760:	b90c      	cbnz	r4, 1d766 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d766:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d768:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d76c:	3b01      	subs	r3, #1
   1d76e:	b2db      	uxtb	r3, r3
   1d770:	7123      	strb	r3, [r4, #4]
   1d772:	2b00      	cmp	r3, #0
   1d774:	d1f5      	bne.n	1d762 <net_buf_unref+0xe>
		if (buf->__buf) {
   1d776:	6921      	ldr	r1, [r4, #16]
   1d778:	b159      	cbz	r1, 1d792 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d77a:	7963      	ldrb	r3, [r4, #5]
   1d77c:	079b      	lsls	r3, r3, #30
   1d77e:	d407      	bmi.n	1d790 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d780:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d782:	fb07 5303 	mla	r3, r7, r3, r5
   1d786:	4620      	mov	r0, r4
   1d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d78a:	681b      	ldr	r3, [r3, #0]
   1d78c:	689b      	ldr	r3, [r3, #8]
   1d78e:	4798      	blx	r3
			buf->__buf = NULL;
   1d790:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d792:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d794:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d796:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d79a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d79c:	6a1b      	ldr	r3, [r3, #32]
   1d79e:	b11b      	cbz	r3, 1d7a8 <net_buf_unref+0x54>
			pool->destroy(buf);
   1d7a0:	4620      	mov	r0, r4
   1d7a2:	4798      	blx	r3
{
   1d7a4:	4644      	mov	r4, r8
   1d7a6:	e7db      	b.n	1d760 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d7a8:	4621      	mov	r1, r4
   1d7aa:	fb00 5007 	mla	r0, r0, r7, r5
   1d7ae:	f00d f82c 	bl	2a80a <k_queue_prepend>
}
   1d7b2:	e7f7      	b.n	1d7a4 <net_buf_unref+0x50>
   1d7b4:	20000af8 	.word	0x20000af8

0001d7b8 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1d7b8:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1d7ba:	4b05      	ldr	r3, [pc, #20]	; (1d7d0 <xoshiro128_initialize+0x18>)
   1d7bc:	4805      	ldr	r0, [pc, #20]	; (1d7d4 <xoshiro128_initialize+0x1c>)
   1d7be:	6018      	str	r0, [r3, #0]
   1d7c0:	f00c fec1 	bl	2a546 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1d7c4:	2800      	cmp	r0, #0
	}
	return 0;
}
   1d7c6:	bf0c      	ite	eq
   1d7c8:	f06f 0012 	mvneq.w	r0, #18
   1d7cc:	2000      	movne	r0, #0
   1d7ce:	bd08      	pop	{r3, pc}
   1d7d0:	20002f00 	.word	0x20002f00
   1d7d4:	0002b214 	.word	0x0002b214

0001d7d8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d7d8:	4b08      	ldr	r3, [pc, #32]	; (1d7fc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d7da:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d7dc:	1ac3      	subs	r3, r0, r3
{
   1d7de:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d7e0:	4907      	ldr	r1, [pc, #28]	; (1d800 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d7e2:	109b      	asrs	r3, r3, #2
{
   1d7e4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d7e6:	4359      	muls	r1, r3
   1d7e8:	4806      	ldr	r0, [pc, #24]	; (1d804 <onoff_stop+0x2c>)
   1d7ea:	2240      	movs	r2, #64	; 0x40
   1d7ec:	f00c fa64 	bl	29cb8 <stop>
	notify(mgr, res);
   1d7f0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d7f2:	4601      	mov	r1, r0
	notify(mgr, res);
   1d7f4:	4620      	mov	r0, r4
}
   1d7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d7fa:	4718      	bx	r3
   1d7fc:	20002f14 	.word	0x20002f14
   1d800:	b6db6db7 	.word	0xb6db6db7
   1d804:	0002b19c 	.word	0x0002b19c

0001d808 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d808:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d80a:	4c0c      	ldr	r4, [pc, #48]	; (1d83c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d80c:	4a0c      	ldr	r2, [pc, #48]	; (1d840 <onoff_start+0x38>)
   1d80e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1d810:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d812:	9300      	str	r3, [sp, #0]
{
   1d814:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d816:	460b      	mov	r3, r1
   1d818:	490a      	ldr	r1, [pc, #40]	; (1d844 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d81a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d81c:	4361      	muls	r1, r4
{
   1d81e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d820:	4809      	ldr	r0, [pc, #36]	; (1d848 <onoff_start+0x40>)
   1d822:	f00c fa76 	bl	29d12 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d826:	1e01      	subs	r1, r0, #0
   1d828:	da05      	bge.n	1d836 <onoff_start+0x2e>
		notify(mgr, err);
   1d82a:	4630      	mov	r0, r6
   1d82c:	462b      	mov	r3, r5
	}
}
   1d82e:	b002      	add	sp, #8
   1d830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1d834:	4718      	bx	r3
}
   1d836:	b002      	add	sp, #8
   1d838:	bd70      	pop	{r4, r5, r6, pc}
   1d83a:	bf00      	nop
   1d83c:	20002f14 	.word	0x20002f14
   1d840:	00029d81 	.word	0x00029d81
   1d844:	b6db6db7 	.word	0xb6db6db7
   1d848:	0002b19c 	.word	0x0002b19c

0001d84c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d84c:	2200      	movs	r2, #0
{
   1d84e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d850:	2101      	movs	r1, #1
{
   1d852:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d854:	4610      	mov	r0, r2
   1d856:	f7f7 f81f 	bl	14898 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d85a:	480f      	ldr	r0, [pc, #60]	; (1d898 <clk_init+0x4c>)
   1d85c:	f002 fb92 	bl	1ff84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d860:	4b0e      	ldr	r3, [pc, #56]	; (1d89c <clk_init+0x50>)
   1d862:	4298      	cmp	r0, r3
   1d864:	d115      	bne.n	1d892 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d866:	f00c fd2c 	bl	2a2c2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d86a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d86c:	490c      	ldr	r1, [pc, #48]	; (1d8a0 <clk_init+0x54>)
   1d86e:	4630      	mov	r0, r6
   1d870:	f008 ff26 	bl	266c0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d874:	2800      	cmp	r0, #0
   1d876:	db0b      	blt.n	1d890 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1d878:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d87a:	4909      	ldr	r1, [pc, #36]	; (1d8a0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d87c:	2501      	movs	r5, #1
   1d87e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d880:	f104 001c 	add.w	r0, r4, #28
   1d884:	f008 ff1c 	bl	266c0 <onoff_manager_init>
		if (err < 0) {
   1d888:	2800      	cmp	r0, #0
   1d88a:	db01      	blt.n	1d890 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d88c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1d88e:	2000      	movs	r0, #0
}
   1d890:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d892:	f06f 0004 	mvn.w	r0, #4
   1d896:	e7fb      	b.n	1d890 <clk_init+0x44>
   1d898:	0001d8d9 	.word	0x0001d8d9
   1d89c:	0bad0000 	.word	0x0bad0000
   1d8a0:	0002c00c 	.word	0x0002c00c

0001d8a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d8a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d8a6:	230c      	movs	r3, #12
   1d8a8:	4809      	ldr	r0, [pc, #36]	; (1d8d0 <clkstarted_handle.constprop.0+0x2c>)
   1d8aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d8ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d8ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1d8b0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1d8b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1d8b6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1d8b8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d8ba:	4418      	add	r0, r3
   1d8bc:	f00c f9e9 	bl	29c92 <set_on_state>
	if (callback) {
   1d8c0:	b12d      	cbz	r5, 1d8ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d8c2:	4632      	mov	r2, r6
   1d8c4:	462b      	mov	r3, r5
   1d8c6:	4803      	ldr	r0, [pc, #12]	; (1d8d4 <clkstarted_handle.constprop.0+0x30>)
}
   1d8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d8cc:	4718      	bx	r3
}
   1d8ce:	bd70      	pop	{r4, r5, r6, pc}
   1d8d0:	20002f14 	.word	0x20002f14
   1d8d4:	0002b19c 	.word	0x0002b19c

0001d8d8 <clock_event_handler>:
	switch (event) {
   1d8d8:	b110      	cbz	r0, 1d8e0 <clock_event_handler+0x8>
   1d8da:	2801      	cmp	r0, #1
   1d8dc:	d004      	beq.n	1d8e8 <clock_event_handler+0x10>
   1d8de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d8e0:	4b03      	ldr	r3, [pc, #12]	; (1d8f0 <clock_event_handler+0x18>)
   1d8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d8e4:	075b      	lsls	r3, r3, #29
   1d8e6:	d101      	bne.n	1d8ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d8e8:	f7ff bfdc 	b.w	1d8a4 <clkstarted_handle.constprop.0>
}
   1d8ec:	4770      	bx	lr
   1d8ee:	bf00      	nop
   1d8f0:	20002f14 	.word	0x20002f14

0001d8f4 <generic_hfclk_start>:
{
   1d8f4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d8f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8fa:	f3ef 8111 	mrs	r1, BASEPRI
   1d8fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d902:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d906:	4a12      	ldr	r2, [pc, #72]	; (1d950 <generic_hfclk_start+0x5c>)
   1d908:	6813      	ldr	r3, [r2, #0]
   1d90a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d90e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d912:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d914:	d00c      	beq.n	1d930 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d91a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d91e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d922:	f013 0301 	ands.w	r3, r3, #1
   1d926:	d003      	beq.n	1d930 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1d928:	480a      	ldr	r0, [pc, #40]	; (1d954 <generic_hfclk_start+0x60>)
   1d92a:	f00c f9b2 	bl	29c92 <set_on_state>
			already_started = true;
   1d92e:	2301      	movs	r3, #1
	__asm__ volatile(
   1d930:	f381 8811 	msr	BASEPRI, r1
   1d934:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d938:	b123      	cbz	r3, 1d944 <generic_hfclk_start+0x50>
}
   1d93a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d93e:	2000      	movs	r0, #0
   1d940:	f7ff bfb0 	b.w	1d8a4 <clkstarted_handle.constprop.0>
}
   1d944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d948:	2001      	movs	r0, #1
   1d94a:	f002 bb0b 	b.w	1ff64 <nrfx_clock_start>
   1d94e:	bf00      	nop
   1d950:	20002f64 	.word	0x20002f64
   1d954:	20002f54 	.word	0x20002f54

0001d958 <api_blocking_start>:
{
   1d958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d95a:	2200      	movs	r2, #0
   1d95c:	2301      	movs	r3, #1
   1d95e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d962:	ab04      	add	r3, sp, #16
   1d964:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d968:	4a09      	ldr	r2, [pc, #36]	; (1d990 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d96a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d96e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d970:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d974:	f00c f9fd 	bl	29d72 <api_start>
	if (err < 0) {
   1d978:	2800      	cmp	r0, #0
   1d97a:	db05      	blt.n	1d988 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d97c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d980:	2300      	movs	r3, #0
   1d982:	4668      	mov	r0, sp
   1d984:	f003 ff08 	bl	21798 <z_impl_k_sem_take>
}
   1d988:	b007      	add	sp, #28
   1d98a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d98e:	bf00      	nop
   1d990:	00029d9f 	.word	0x00029d9f

0001d994 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d994:	4b09      	ldr	r3, [pc, #36]	; (1d9bc <generic_hfclk_stop+0x28>)
   1d996:	f3bf 8f5b 	dmb	ish
   1d99a:	e853 2f00 	ldrex	r2, [r3]
   1d99e:	f022 0102 	bic.w	r1, r2, #2
   1d9a2:	e843 1000 	strex	r0, r1, [r3]
   1d9a6:	2800      	cmp	r0, #0
   1d9a8:	d1f7      	bne.n	1d99a <generic_hfclk_stop+0x6>
   1d9aa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d9ae:	07d3      	lsls	r3, r2, #31
   1d9b0:	d402      	bmi.n	1d9b8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d9b2:	2001      	movs	r0, #1
   1d9b4:	f00c bc80 	b.w	2a2b8 <nrfx_clock_stop>
}
   1d9b8:	4770      	bx	lr
   1d9ba:	bf00      	nop
   1d9bc:	20002f64 	.word	0x20002f64

0001d9c0 <z_nrf_clock_control_lf_on>:
{
   1d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d9c2:	4928      	ldr	r1, [pc, #160]	; (1da64 <z_nrf_clock_control_lf_on+0xa4>)
   1d9c4:	f3bf 8f5b 	dmb	ish
   1d9c8:	4606      	mov	r6, r0
   1d9ca:	2201      	movs	r2, #1
   1d9cc:	e851 3f00 	ldrex	r3, [r1]
   1d9d0:	e841 2000 	strex	r0, r2, [r1]
   1d9d4:	2800      	cmp	r0, #0
   1d9d6:	d1f9      	bne.n	1d9cc <z_nrf_clock_control_lf_on+0xc>
   1d9d8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d9dc:	b933      	cbnz	r3, 1d9ec <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d9de:	4922      	ldr	r1, [pc, #136]	; (1da68 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   1d9e0:	4822      	ldr	r0, [pc, #136]	; (1da6c <z_nrf_clock_control_lf_on+0xac>)
   1d9e2:	604b      	str	r3, [r1, #4]
   1d9e4:	60cb      	str	r3, [r1, #12]
   1d9e6:	608a      	str	r2, [r1, #8]
   1d9e8:	f008 fe7d 	bl	266e6 <onoff_request>
	switch (start_mode) {
   1d9ec:	1e73      	subs	r3, r6, #1
   1d9ee:	2b01      	cmp	r3, #1
   1d9f0:	d820      	bhi.n	1da34 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d9f2:	f00c fe60 	bl	2a6b6 <k_is_in_isr>
   1d9f6:	4604      	mov	r4, r0
   1d9f8:	b910      	cbnz	r0, 1da00 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1d9fa:	4b1d      	ldr	r3, [pc, #116]	; (1da70 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   1d9fc:	781b      	ldrb	r3, [r3, #0]
   1d9fe:	bb53      	cbnz	r3, 1da56 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   1da00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da04:	f3ef 8511 	mrs	r5, BASEPRI
   1da08:	f383 8812 	msr	BASEPRI_MAX, r3
   1da0c:	f3bf 8f6f 	isb	sy
   1da10:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1da12:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1da16:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1da1a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1da1e:	03d2      	lsls	r2, r2, #15
   1da20:	d509      	bpl.n	1da36 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1da22:	079b      	lsls	r3, r3, #30
   1da24:	d001      	beq.n	1da2a <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1da26:	2e01      	cmp	r6, #1
   1da28:	d105      	bne.n	1da36 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   1da2a:	b174      	cbz	r4, 1da4a <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   1da2c:	f385 8811 	msr	BASEPRI, r5
   1da30:	f3bf 8f6f 	isb	sy
}
   1da34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1da36:	b11c      	cbz	r4, 1da40 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1da38:	4628      	mov	r0, r5
   1da3a:	f7f6 fe8b 	bl	14754 <arch_cpu_atomic_idle>
}
   1da3e:	e7ea      	b.n	1da16 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   1da40:	2100      	movs	r1, #0
   1da42:	2021      	movs	r0, #33	; 0x21
   1da44:	f004 fb8a 	bl	2215c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1da48:	e7e5      	b.n	1da16 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   1da4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1da4e:	2202      	movs	r2, #2
   1da50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1da54:	e7ee      	b.n	1da34 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   1da56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1da5a:	2202      	movs	r2, #2
   1da5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1da60:	4605      	mov	r5, r0
}
   1da62:	e7d6      	b.n	1da12 <z_nrf_clock_control_lf_on+0x52>
   1da64:	20002f68 	.word	0x20002f68
   1da68:	20002f04 	.word	0x20002f04
   1da6c:	20002f30 	.word	0x20002f30
   1da70:	200049c4 	.word	0x200049c4

0001da74 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1da74:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1da76:	4c04      	ldr	r4, [pc, #16]	; (1da88 <rtt_console_init+0x14>)
   1da78:	4620      	mov	r0, r4
   1da7a:	f7f5 f831 	bl	12ae0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1da7e:	4620      	mov	r0, r4
   1da80:	f7f7 fc1c 	bl	152bc <__stdout_hook_install>

	return 0;
}
   1da84:	2000      	movs	r0, #0
   1da86:	bd10      	pop	{r4, pc}
   1da88:	0001da8d 	.word	0x0001da8d

0001da8c <rtt_console_out>:
{
   1da8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1da8e:	4e13      	ldr	r6, [pc, #76]	; (1dadc <rtt_console_out+0x50>)
	char c = (char)character;
   1da90:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1da94:	4604      	mov	r4, r0
	char c = (char)character;
   1da96:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1da98:	f003 fabe 	bl	21018 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1da9c:	2201      	movs	r2, #1
   1da9e:	f10d 0107 	add.w	r1, sp, #7
   1daa2:	2000      	movs	r0, #0
   1daa4:	f003 fa7e 	bl	20fa4 <SEGGER_RTT_WriteNoLock>
   1daa8:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1daaa:	f003 fabf 	bl	2102c <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1daae:	b127      	cbz	r7, 1daba <rtt_console_out+0x2e>
			host_present = true;
   1dab0:	2301      	movs	r3, #1
   1dab2:	7033      	strb	r3, [r6, #0]
}
   1dab4:	4620      	mov	r0, r4
   1dab6:	b003      	add	sp, #12
   1dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1daba:	7833      	ldrb	r3, [r6, #0]
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d0f9      	beq.n	1dab4 <rtt_console_out+0x28>
			if (max_cnt) {
   1dac0:	3d01      	subs	r5, #1
   1dac2:	d008      	beq.n	1dad6 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1dac4:	f00c fdf7 	bl	2a6b6 <k_is_in_isr>
   1dac8:	2800      	cmp	r0, #0
   1daca:	d1e5      	bne.n	1da98 <rtt_console_out+0xc>
   1dacc:	2100      	movs	r1, #0
   1dace:	2042      	movs	r0, #66	; 0x42
   1dad0:	f004 fb44 	bl	2215c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1dad4:	e7e0      	b.n	1da98 <rtt_console_out+0xc>
				host_present = false;
   1dad6:	7035      	strb	r5, [r6, #0]
   1dad8:	e7ec      	b.n	1dab4 <rtt_console_out+0x28>
   1dada:	bf00      	nop
   1dadc:	20003dae 	.word	0x20003dae

0001dae0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1dae0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1dae2:	4b08      	ldr	r3, [pc, #32]	; (1db04 <uart_console_init+0x24>)
   1dae4:	4808      	ldr	r0, [pc, #32]	; (1db08 <uart_console_init+0x28>)
   1dae6:	6018      	str	r0, [r3, #0]
   1dae8:	f00c fd2d 	bl	2a546 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1daec:	b138      	cbz	r0, 1dafe <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1daee:	4807      	ldr	r0, [pc, #28]	; (1db0c <uart_console_init+0x2c>)
   1daf0:	f7f7 fbe4 	bl	152bc <__stdout_hook_install>
	__printk_hook_install(console_out);
   1daf4:	4805      	ldr	r0, [pc, #20]	; (1db0c <uart_console_init+0x2c>)
   1daf6:	f7f4 fff3 	bl	12ae0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1dafa:	2000      	movs	r0, #0
}
   1dafc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1dafe:	f06f 0012 	mvn.w	r0, #18
   1db02:	e7fb      	b.n	1dafc <uart_console_init+0x1c>
   1db04:	20002f6c 	.word	0x20002f6c
   1db08:	0002b22c 	.word	0x0002b22c
   1db0c:	0001db11 	.word	0x0001db11

0001db10 <console_out>:
	if ('\n' == c) {
   1db10:	280a      	cmp	r0, #10
{
   1db12:	b538      	push	{r3, r4, r5, lr}
   1db14:	4d07      	ldr	r5, [pc, #28]	; (1db34 <console_out+0x24>)
   1db16:	4604      	mov	r4, r0
	if ('\n' == c) {
   1db18:	d104      	bne.n	1db24 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1db1a:	6828      	ldr	r0, [r5, #0]
   1db1c:	6883      	ldr	r3, [r0, #8]
   1db1e:	210d      	movs	r1, #13
   1db20:	685b      	ldr	r3, [r3, #4]
   1db22:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1db24:	6828      	ldr	r0, [r5, #0]
   1db26:	6883      	ldr	r3, [r0, #8]
   1db28:	b2e1      	uxtb	r1, r4
   1db2a:	685b      	ldr	r3, [r3, #4]
   1db2c:	4798      	blx	r3
}
   1db2e:	4620      	mov	r0, r4
   1db30:	bd38      	pop	{r3, r4, r5, pc}
   1db32:	bf00      	nop
   1db34:	20002f6c 	.word	0x20002f6c

0001db38 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1db38:	b530      	push	{r4, r5, lr}
	return port->config;
   1db3a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1db3c:	7b04      	ldrb	r4, [r0, #12]
   1db3e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1db42:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1db46:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1db4a:	b085      	sub	sp, #20
   1db4c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1db50:	d105      	bne.n	1db5e <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   1db52:	4628      	mov	r0, r5
   1db54:	f002 febe 	bl	208d4 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1db58:	2000      	movs	r0, #0
}
   1db5a:	b005      	add	sp, #20
   1db5c:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1db5e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1db62:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1db66:	d134      	bne.n	1dbd2 <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1db68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1db6c:	bf0c      	ite	eq
   1db6e:	2304      	moveq	r3, #4
   1db70:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1db72:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1db76:	6883      	ldr	r3, [r0, #8]
   1db78:	fa23 f101 	lsr.w	r1, r3, r1
   1db7c:	07c9      	lsls	r1, r1, #31
   1db7e:	d41a      	bmi.n	1dbb6 <gpio_nrfx_pin_interrupt_configure+0x7e>
   1db80:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1db84:	d117      	bne.n	1dbb6 <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1db86:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1db88:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1db8a:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1db8e:	4a1c      	ldr	r2, [pc, #112]	; (1dc00 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1db90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1db94:	bf18      	it	ne
   1db96:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1db9e:	07db      	lsls	r3, r3, #31
   1dba0:	d409      	bmi.n	1dbb6 <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dba2:	f10d 0407 	add.w	r4, sp, #7
   1dba6:	4621      	mov	r1, r4
   1dba8:	4628      	mov	r0, r5
   1dbaa:	f002 fdf7 	bl	2079c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1dbae:	4b15      	ldr	r3, [pc, #84]	; (1dc04 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1dbb0:	4298      	cmp	r0, r3
   1dbb2:	d019      	beq.n	1dbe8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1dbb4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dbb6:	2300      	movs	r3, #0
   1dbb8:	4619      	mov	r1, r3
   1dbba:	aa02      	add	r2, sp, #8
   1dbbc:	4628      	mov	r0, r5
   1dbbe:	f002 fcc7 	bl	20550 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dbc2:	4b11      	ldr	r3, [pc, #68]	; (1dc08 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1dbc4:	4298      	cmp	r0, r3
   1dbc6:	d118      	bne.n	1dbfa <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1dbc8:	2101      	movs	r1, #1
   1dbca:	4628      	mov	r0, r5
   1dbcc:	f002 fe3a 	bl	20844 <nrfx_gpiote_trigger_enable>
   1dbd0:	e7c2      	b.n	1db58 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1dbd2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1dbd6:	d005      	beq.n	1dbe4 <gpio_nrfx_pin_interrupt_configure+0xac>
   1dbd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1dbdc:	bf0c      	ite	eq
   1dbde:	2302      	moveq	r3, #2
   1dbe0:	2301      	movne	r3, #1
   1dbe2:	e7c6      	b.n	1db72 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1dbe4:	2303      	movs	r3, #3
   1dbe6:	e7c4      	b.n	1db72 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   1dbe8:	4620      	mov	r0, r4
   1dbea:	f002 fe25 	bl	20838 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1dbee:	4b06      	ldr	r3, [pc, #24]	; (1dc08 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1dbf0:	4298      	cmp	r0, r3
   1dbf2:	d0df      	beq.n	1dbb4 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
   1dbf4:	f06f 000b 	mvn.w	r0, #11
   1dbf8:	e7af      	b.n	1db5a <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   1dbfa:	f06f 0015 	mvn.w	r0, #21
   1dbfe:	e7ac      	b.n	1db5a <gpio_nrfx_pin_interrupt_configure+0x22>
   1dc00:	50000300 	.word	0x50000300
   1dc04:	0bad0004 	.word	0x0bad0004
   1dc08:	0bad0000 	.word	0x0bad0000

0001dc0c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1dc0c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1dc0e:	f002 fe03 	bl	20818 <nrfx_gpiote_is_init>
   1dc12:	4604      	mov	r4, r0
   1dc14:	b968      	cbnz	r0, 1dc32 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1dc16:	f002 fdd7 	bl	207c8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1dc1a:	4b08      	ldr	r3, [pc, #32]	; (1dc3c <gpio_nrfx_init+0x30>)
   1dc1c:	4298      	cmp	r0, r3
   1dc1e:	d10a      	bne.n	1dc36 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1dc20:	4807      	ldr	r0, [pc, #28]	; (1dc40 <gpio_nrfx_init+0x34>)
   1dc22:	4621      	mov	r1, r4
   1dc24:	f002 fdb4 	bl	20790 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1dc28:	4622      	mov	r2, r4
   1dc2a:	2105      	movs	r1, #5
   1dc2c:	2006      	movs	r0, #6
   1dc2e:	f7f6 fe33 	bl	14898 <z_arm_irq_priority_set>
		return 0;
   1dc32:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1dc34:	bd10      	pop	{r4, pc}
		return -EIO;
   1dc36:	f06f 0004 	mvn.w	r0, #4
   1dc3a:	e7fb      	b.n	1dc34 <gpio_nrfx_init+0x28>
   1dc3c:	0bad0000 	.word	0x0bad0000
   1dc40:	0001dc45 	.word	0x0001dc45

0001dc44 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc44:	0942      	lsrs	r2, r0, #5
{
   1dc46:	b570      	push	{r4, r5, r6, lr}
   1dc48:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc4a:	d002      	beq.n	1dc52 <nrfx_gpio_handler+0xe>
   1dc4c:	2a01      	cmp	r2, #1
   1dc4e:	d015      	beq.n	1dc7c <nrfx_gpio_handler+0x38>
}
   1dc50:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc52:	4e0b      	ldr	r6, [pc, #44]	; (1dc80 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1dc54:	6932      	ldr	r2, [r6, #16]
   1dc56:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dc58:	2900      	cmp	r1, #0
   1dc5a:	d0f9      	beq.n	1dc50 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1dc5c:	f003 031f 	and.w	r3, r3, #31
   1dc60:	2501      	movs	r5, #1
   1dc62:	680c      	ldr	r4, [r1, #0]
   1dc64:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1dc66:	688a      	ldr	r2, [r1, #8]
   1dc68:	402a      	ands	r2, r5
   1dc6a:	d002      	beq.n	1dc72 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1dc6c:	684b      	ldr	r3, [r1, #4]
   1dc6e:	4630      	mov	r0, r6
   1dc70:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dc72:	2c00      	cmp	r4, #0
   1dc74:	d0ec      	beq.n	1dc50 <nrfx_gpio_handler+0xc>
   1dc76:	4621      	mov	r1, r4
   1dc78:	6824      	ldr	r4, [r4, #0]
   1dc7a:	e7f4      	b.n	1dc66 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc7c:	4e01      	ldr	r6, [pc, #4]	; (1dc84 <nrfx_gpio_handler+0x40>)
   1dc7e:	e7e9      	b.n	1dc54 <nrfx_gpio_handler+0x10>
   1dc80:	0002b1b4 	.word	0x0002b1b4
   1dc84:	0002b1cc 	.word	0x0002b1cc

0001dc88 <gpio_nrfx_pin_configure>:
{
   1dc88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1dc8c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1dc90:	f898 300c 	ldrb.w	r3, [r8, #12]
   1dc94:	f001 061f 	and.w	r6, r1, #31
{
   1dc98:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1dc9a:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1dc9e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dca0:	4630      	mov	r0, r6
   1dca2:	f10d 0103 	add.w	r1, sp, #3
{
   1dca6:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dca8:	f002 fd78 	bl	2079c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1dcac:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dcb0:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1dcb2:	d10b      	bne.n	1dccc <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1dcb4:	4630      	mov	r0, r6
   1dcb6:	f002 fe35 	bl	20924 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1dcba:	4b43      	ldr	r3, [pc, #268]	; (1ddc8 <gpio_nrfx_pin_configure+0x140>)
   1dcbc:	4599      	cmp	r9, r3
   1dcbe:	d103      	bne.n	1dcc8 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   1dcc0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1dcc4:	f002 fdb2 	bl	2082c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dcc8:	2000      	movs	r0, #0
   1dcca:	e057      	b.n	1dd7c <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dccc:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dcce:	4619      	mov	r1, r3
   1dcd0:	aa02      	add	r2, sp, #8
   1dcd2:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dcd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dcd8:	f002 fc3a 	bl	20550 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dcdc:	4b3a      	ldr	r3, [pc, #232]	; (1ddc8 <gpio_nrfx_pin_configure+0x140>)
   1dcde:	4298      	cmp	r0, r3
   1dce0:	d002      	beq.n	1dce8 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dce2:	f06f 0015 	mvn.w	r0, #21
   1dce6:	e049      	b.n	1dd7c <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
   1dce8:	4581      	cmp	r9, r0
   1dcea:	d103      	bne.n	1dcf4 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   1dcec:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1dcf0:	f002 fd9c 	bl	2082c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1dcf4:	03a5      	lsls	r5, r4, #14
   1dcf6:	d554      	bpl.n	1dda2 <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dcf8:	f240 3306 	movw	r3, #774	; 0x306
   1dcfc:	4023      	ands	r3, r4
   1dcfe:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1dd02:	d03e      	beq.n	1dd82 <gpio_nrfx_pin_configure+0xfa>
   1dd04:	d80c      	bhi.n	1dd20 <gpio_nrfx_pin_configure+0x98>
   1dd06:	2b06      	cmp	r3, #6
   1dd08:	d015      	beq.n	1dd36 <gpio_nrfx_pin_configure+0xae>
   1dd0a:	d804      	bhi.n	1dd16 <gpio_nrfx_pin_configure+0x8e>
   1dd0c:	b19b      	cbz	r3, 1dd36 <gpio_nrfx_pin_configure+0xae>
   1dd0e:	2b02      	cmp	r3, #2
   1dd10:	d1e7      	bne.n	1dce2 <gpio_nrfx_pin_configure+0x5a>
   1dd12:	2304      	movs	r3, #4
   1dd14:	e00f      	b.n	1dd36 <gpio_nrfx_pin_configure+0xae>
   1dd16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1dd1a:	d1e2      	bne.n	1dce2 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   1dd1c:	2301      	movs	r3, #1
   1dd1e:	e00a      	b.n	1dd36 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dd20:	f240 2202 	movw	r2, #514	; 0x202
   1dd24:	4293      	cmp	r3, r2
   1dd26:	d02e      	beq.n	1dd86 <gpio_nrfx_pin_configure+0xfe>
   1dd28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1dd2c:	d02d      	beq.n	1dd8a <gpio_nrfx_pin_configure+0x102>
   1dd2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dd32:	d1d6      	bne.n	1dce2 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   1dd34:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1dd36:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1dd3a:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1dd3e:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1dd42:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1dd44:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1dd48:	bf54      	ite	pl
   1dd4a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1dd4e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dd50:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1dd52:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dd56:	d51a      	bpl.n	1dd8e <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1dd58:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dd5c:	2101      	movs	r1, #1
   1dd5e:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   1dd62:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1dd66:	2200      	movs	r2, #0
   1dd68:	a901      	add	r1, sp, #4
   1dd6a:	4630      	mov	r0, r6
   1dd6c:	f002 fc9e 	bl	206ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dd70:	4b15      	ldr	r3, [pc, #84]	; (1ddc8 <gpio_nrfx_pin_configure+0x140>)
   1dd72:	4298      	cmp	r0, r3
   1dd74:	bf14      	ite	ne
   1dd76:	f06f 0015 	mvnne.w	r0, #21
   1dd7a:	2000      	moveq	r0, #0
}
   1dd7c:	b005      	add	sp, #20
   1dd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1dd82:	2307      	movs	r3, #7
   1dd84:	e7d7      	b.n	1dd36 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   1dd86:	2305      	movs	r3, #5
   1dd88:	e7d5      	b.n	1dd36 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   1dd8a:	2303      	movs	r3, #3
   1dd8c:	e7d3      	b.n	1dd36 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1dd8e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1dd90:	bf41      	itttt	mi
   1dd92:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   1dd96:	2101      	movmi	r1, #1
   1dd98:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   1dd9c:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
   1dda0:	e7e1      	b.n	1dd66 <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
   1dda2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1dda4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1dda8:	bf54      	ite	pl
   1ddaa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1ddae:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ddb0:	461a      	mov	r2, r3
   1ddb2:	a901      	add	r1, sp, #4
   1ddb4:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1ddb6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ddba:	f002 fbc9 	bl	20550 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ddbe:	4b02      	ldr	r3, [pc, #8]	; (1ddc8 <gpio_nrfx_pin_configure+0x140>)
   1ddc0:	4298      	cmp	r0, r3
   1ddc2:	d081      	beq.n	1dcc8 <gpio_nrfx_pin_configure+0x40>
   1ddc4:	e78d      	b.n	1dce2 <gpio_nrfx_pin_configure+0x5a>
   1ddc6:	bf00      	nop
   1ddc8:	0bad0000 	.word	0x0bad0000

0001ddcc <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
   1ddcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ddd0:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1ddd2:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1ddd4:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ddd6:	6a26      	ldr	r6, [r4, #32]
{
   1ddd8:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1ddda:	1d3a      	adds	r2, r7, #4
   1dddc:	2100      	movs	r1, #0
   1ddde:	4630      	mov	r0, r6
   1dde0:	f00c f91a 	bl	2a018 <pinctrl_lookup_state>
	if (ret < 0) {
   1dde4:	2800      	cmp	r0, #0
   1dde6:	db32      	blt.n	1de4e <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1dde8:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ddea:	6832      	ldr	r2, [r6, #0]
   1ddec:	7919      	ldrb	r1, [r3, #4]
   1ddee:	6818      	ldr	r0, [r3, #0]
   1ddf0:	f00c f92f 	bl	2a052 <pinctrl_configure_pins>
	if (err < 0) {
   1ddf4:	2800      	cmp	r0, #0
   1ddf6:	db2a      	blt.n	1de4e <spi_nrfx_init+0x82>
		return err;
	}
#endif

	dev_config->irq_connect();
   1ddf8:	69e3      	ldr	r3, [r4, #28]
   1ddfa:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1ddfc:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ddfe:	2601      	movs	r6, #1
   1de00:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1de04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1de08:	429c      	cmp	r4, r3
   1de0a:	d304      	bcc.n	1de16 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1de0c:	4628      	mov	r0, r5
   1de0e:	f00c f86e 	bl	29eee <spi_context_unlock_unconditionally>

	return 0;
   1de12:	2000      	movs	r0, #0
   1de14:	e01b      	b.n	1de4e <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1de16:	6820      	ldr	r0, [r4, #0]
   1de18:	f00c fb95 	bl	2a546 <z_device_is_ready>
   1de1c:	b9d8      	cbnz	r0, 1de56 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1de1e:	6823      	ldr	r3, [r4, #0]
   1de20:	6819      	ldr	r1, [r3, #0]
   1de22:	7923      	ldrb	r3, [r4, #4]
   1de24:	466c      	mov	r4, sp
   1de26:	b08a      	sub	sp, #40	; 0x28
   1de28:	466a      	mov	r2, sp
   1de2a:	481c      	ldr	r0, [pc, #112]	; (1de9c <spi_nrfx_init+0xd0>)
   1de2c:	61d3      	str	r3, [r2, #28]
   1de2e:	2302      	movs	r3, #2
   1de30:	f882 3020 	strb.w	r3, [r2, #32]
   1de34:	4b1a      	ldr	r3, [pc, #104]	; (1dea0 <spi_nrfx_init+0xd4>)
   1de36:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1de3a:	481a      	ldr	r0, [pc, #104]	; (1dea4 <spi_nrfx_init+0xd8>)
   1de3c:	f842 3f10 	str.w	r3, [r2, #16]!
   1de40:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1de44:	f00c f81a 	bl	29e7c <z_log_msg_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   1de48:	f06f 0012 	mvn.w	r0, #18
   1de4c:	46a5      	mov	sp, r4
}
   1de4e:	370c      	adds	r7, #12
   1de50:	46bd      	mov	sp, r7
   1de52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1de56:	6820      	ldr	r0, [r4, #0]
   1de58:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1de5a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1de5c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   1de60:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de64:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1de68:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1de6a:	bf54      	ite	pl
   1de6c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1de70:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1de74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de78:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1de7c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de7e:	bf4c      	ite	mi
   1de80:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1de84:	ea2c 0308 	bicpl.w	r3, ip, r8
   1de88:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1de8c:	f8d9 3000 	ldr.w	r3, [r9]
   1de90:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1de92:	2800      	cmp	r0, #0
   1de94:	dbdb      	blt.n	1de4e <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1de96:	3408      	adds	r4, #8
   1de98:	e7b2      	b.n	1de00 <spi_nrfx_init+0x34>
   1de9a:	bf00      	nop
   1de9c:	0002e5f8 	.word	0x0002e5f8
   1dea0:	01000004 	.word	0x01000004
   1dea4:	0002b5d4 	.word	0x0002b5d4

0001dea8 <transfer_next_chunk>:
{
   1dea8:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1deaa:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1deac:	6daa      	ldr	r2, [r5, #88]	; 0x58
		return ctx->rx_len;
   1deae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   1deb0:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1deb2:	b982      	cbnz	r2, 1ded6 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1deb4:	bb73      	cbnz	r3, 1df14 <transfer_next_chunk+0x6c>
	int error = 0;
   1deb6:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1deb8:	2200      	movs	r2, #0
   1deba:	4611      	mov	r1, r2
   1debc:	4628      	mov	r0, r5
   1debe:	f00b fff4 	bl	29eaa <_spi_context_cs_control>
	ctx->sync_status = status;
   1dec2:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1dec4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1dec8:	f003 fc40 	bl	2174c <z_impl_k_sem_give>
	dev_data->busy = false;
   1decc:	2300      	movs	r3, #0
   1dece:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1ded2:	b005      	add	sp, #20
   1ded4:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1ded6:	4611      	mov	r1, r2
   1ded8:	b113      	cbz	r3, 1dee0 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1deda:	429a      	cmp	r2, r3
   1dedc:	bf28      	it	cs
   1dede:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1dee0:	6d6c      	ldr	r4, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = dev->config;
   1dee2:	6840      	ldr	r0, [r0, #4]
		xfer.p_tx_buffer = ctx->tx_buf;
   1dee4:	9400      	str	r4, [sp, #0]
		dev_data->chunk_len = chunk_len;
   1dee6:	66a9      	str	r1, [r5, #104]	; 0x68
	return !!(ctx->tx_buf && ctx->tx_len);
   1dee8:	b1b4      	cbz	r4, 1df18 <transfer_next_chunk+0x70>
   1deea:	2a00      	cmp	r2, #0
   1deec:	bf18      	it	ne
   1deee:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1def0:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1def2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1def4:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1def6:	b18a      	cbz	r2, 1df1c <transfer_next_chunk+0x74>
   1def8:	2b00      	cmp	r3, #0
   1defa:	bf18      	it	ne
   1defc:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1defe:	2200      	movs	r2, #0
   1df00:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1df02:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1df04:	f002 ff34 	bl	20d70 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1df08:	4b05      	ldr	r3, [pc, #20]	; (1df20 <transfer_next_chunk+0x78>)
   1df0a:	4298      	cmp	r0, r3
   1df0c:	d0e1      	beq.n	1ded2 <transfer_next_chunk+0x2a>
		error = -EIO;
   1df0e:	f06f 0404 	mvn.w	r4, #4
   1df12:	e7d1      	b.n	1deb8 <transfer_next_chunk+0x10>
   1df14:	4619      	mov	r1, r3
   1df16:	e7e3      	b.n	1dee0 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1df18:	4622      	mov	r2, r4
   1df1a:	e7e9      	b.n	1def0 <transfer_next_chunk+0x48>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1df1c:	4613      	mov	r3, r2
   1df1e:	e7ee      	b.n	1defe <transfer_next_chunk+0x56>
   1df20:	0bad0000 	.word	0x0bad0000

0001df24 <event_handler>:
{
   1df24:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1df26:	7803      	ldrb	r3, [r0, #0]
{
   1df28:	b086      	sub	sp, #24
   1df2a:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d154      	bne.n	1dfda <event_handler+0xb6>
	if (!ctx->tx_len) {
   1df30:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1df32:	b163      	cbz	r3, 1df4e <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1df34:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1df36:	429a      	cmp	r2, r3
   1df38:	d91e      	bls.n	1df78 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1df3a:	4b29      	ldr	r3, [pc, #164]	; (1dfe0 <event_handler+0xbc>)
   1df3c:	9305      	str	r3, [sp, #20]
   1df3e:	4829      	ldr	r0, [pc, #164]	; (1dfe4 <event_handler+0xc0>)
   1df40:	2302      	movs	r3, #2
   1df42:	aa04      	add	r2, sp, #16
   1df44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1df48:	9304      	str	r3, [sp, #16]
   1df4a:	f00b ff97 	bl	29e7c <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1df4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1df50:	b163      	cbz	r3, 1df6c <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1df52:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1df54:	429a      	cmp	r2, r3
   1df56:	d927      	bls.n	1dfa8 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1df58:	4b21      	ldr	r3, [pc, #132]	; (1dfe0 <event_handler+0xbc>)
   1df5a:	9305      	str	r3, [sp, #20]
   1df5c:	4821      	ldr	r0, [pc, #132]	; (1dfe4 <event_handler+0xc0>)
   1df5e:	2302      	movs	r3, #2
   1df60:	aa04      	add	r2, sp, #16
   1df62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1df66:	9304      	str	r3, [sp, #16]
   1df68:	f00b ff88 	bl	29e7c <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1df6c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1df6e:	b006      	add	sp, #24
   1df70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1df74:	f7ff bf98 	b.w	1dea8 <transfer_next_chunk>
	ctx->tx_len -= len;
   1df78:	1a9b      	subs	r3, r3, r2
   1df7a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1df7c:	b973      	cbnz	r3, 1df9c <event_handler+0x78>
		++ctx->current_tx;
   1df7e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1df80:	3308      	adds	r3, #8
   1df82:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1df84:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1df86:	3b01      	subs	r3, #1
   1df88:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1df8a:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1df8e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1df92:	3148      	adds	r1, #72	; 0x48
   1df94:	f00b ff61 	bl	29e5a <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1df98:	6560      	str	r0, [r4, #84]	; 0x54
   1df9a:	e7d8      	b.n	1df4e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1df9c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1df9e:	2b00      	cmp	r3, #0
   1dfa0:	d0d5      	beq.n	1df4e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1dfa2:	4413      	add	r3, r2
   1dfa4:	654b      	str	r3, [r1, #84]	; 0x54
   1dfa6:	e7d2      	b.n	1df4e <event_handler+0x2a>
	ctx->rx_len -= len;
   1dfa8:	1a9b      	subs	r3, r3, r2
   1dfaa:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1dfac:	b97b      	cbnz	r3, 1dfce <event_handler+0xaa>
		++ctx->current_rx;
   1dfae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dfb0:	3308      	adds	r3, #8
   1dfb2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1dfb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1dfb6:	3b01      	subs	r3, #1
   1dfb8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1dfba:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1dfbe:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1dfc2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1dfc6:	f00b ff48 	bl	29e5a <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1dfca:	65e0      	str	r0, [r4, #92]	; 0x5c
   1dfcc:	e7ce      	b.n	1df6c <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1dfce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1dfd0:	2b00      	cmp	r3, #0
   1dfd2:	d0cb      	beq.n	1df6c <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1dfd4:	4413      	add	r3, r2
   1dfd6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1dfd8:	e7c8      	b.n	1df6c <event_handler+0x48>
}
   1dfda:	b006      	add	sp, #24
   1dfdc:	bd10      	pop	{r4, pc}
   1dfde:	bf00      	nop
   1dfe0:	0002e61c 	.word	0x0002e61c
   1dfe4:	0002b5d4 	.word	0x0002b5d4

0001dfe8 <spi_nrfx_transceive>:
{
   1dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfec:	b08b      	sub	sp, #44	; 0x2c
   1dfee:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dff0:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1dff2:	6904      	ldr	r4, [r0, #16]
{
   1dff4:	af00      	add	r7, sp, #0
   1dff6:	049b      	lsls	r3, r3, #18
   1dff8:	4680      	mov	r8, r0
   1dffa:	460e      	mov	r6, r1
   1dffc:	60fa      	str	r2, [r7, #12]
   1dffe:	d434      	bmi.n	1e06a <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1e000:	f04f 32ff 	mov.w	r2, #4294967295
   1e004:	f04f 33ff 	mov.w	r3, #4294967295
   1e008:	f104 0010 	add.w	r0, r4, #16
   1e00c:	f003 fbc4 	bl	21798 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e010:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e012:	f8d8 9010 	ldr.w	r9, [r8, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1e016:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1e01a:	607b      	str	r3, [r7, #4]
   1e01c:	b123      	cbz	r3, 1e028 <spi_nrfx_transceive+0x40>
   1e01e:	f8d9 3000 	ldr.w	r3, [r9]
   1e022:	429e      	cmp	r6, r3
   1e024:	f000 80cc 	beq.w	1e1c0 <spi_nrfx_transceive+0x1d8>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1e028:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1e02c:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1e030:	d022      	beq.n	1e078 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1e032:	4b99      	ldr	r3, [pc, #612]	; (1e298 <spi_nrfx_transceive+0x2b0>)
   1e034:	627b      	str	r3, [r7, #36]	; 0x24
   1e036:	4899      	ldr	r0, [pc, #612]	; (1e29c <spi_nrfx_transceive+0x2b4>)
   1e038:	2302      	movs	r3, #2
   1e03a:	f107 0220 	add.w	r2, r7, #32
   1e03e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
   1e042:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1e046:	623b      	str	r3, [r7, #32]
   1e048:	f00b ff18 	bl	29e7c <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e04c:	6823      	ldr	r3, [r4, #0]
   1e04e:	889b      	ldrh	r3, [r3, #4]
   1e050:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1e054:	d104      	bne.n	1e060 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
   1e056:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1e058:	f104 0010 	add.w	r0, r4, #16
   1e05c:	f003 fb76 	bl	2174c <z_impl_k_sem_give>
}
   1e060:	4628      	mov	r0, r5
   1e062:	372c      	adds	r7, #44	; 0x2c
   1e064:	46bd      	mov	sp, r7
   1e066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e06a:	69a3      	ldr	r3, [r4, #24]
   1e06c:	2b00      	cmp	r3, #0
   1e06e:	d1c7      	bne.n	1e000 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e070:	6863      	ldr	r3, [r4, #4]
   1e072:	4299      	cmp	r1, r3
   1e074:	d1c4      	bne.n	1e000 <spi_nrfx_transceive+0x18>
   1e076:	e7cc      	b.n	1e012 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1e078:	f01c 0f01 	tst.w	ip, #1
   1e07c:	d015      	beq.n	1e0aa <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1e07e:	466d      	mov	r5, sp
   1e080:	b088      	sub	sp, #32
   1e082:	f8d8 3000 	ldr.w	r3, [r8]
   1e086:	466a      	mov	r2, sp
   1e088:	4985      	ldr	r1, [pc, #532]	; (1e2a0 <spi_nrfx_transceive+0x2b8>)
   1e08a:	4884      	ldr	r0, [pc, #528]	; (1e29c <spi_nrfx_transceive+0x2b4>)
   1e08c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e090:	2302      	movs	r3, #2
   1e092:	7713      	strb	r3, [r2, #28]
   1e094:	4b83      	ldr	r3, [pc, #524]	; (1e2a4 <spi_nrfx_transceive+0x2bc>)
   1e096:	f842 3f10 	str.w	r3, [r2, #16]!
   1e09a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e09e:	f00b feed 	bl	29e7c <z_log_msg_static_create.constprop.0>
   1e0a2:	46ad      	mov	sp, r5
		return -EINVAL;
   1e0a4:	f06f 0515 	mvn.w	r5, #21
   1e0a8:	e7d0      	b.n	1e04c <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e0aa:	f01c 0f08 	tst.w	ip, #8
   1e0ae:	d00b      	beq.n	1e0c8 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
   1e0b0:	4b7d      	ldr	r3, [pc, #500]	; (1e2a8 <spi_nrfx_transceive+0x2c0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e0b2:	627b      	str	r3, [r7, #36]	; 0x24
   1e0b4:	4879      	ldr	r0, [pc, #484]	; (1e29c <spi_nrfx_transceive+0x2b4>)
   1e0b6:	2302      	movs	r3, #2
   1e0b8:	f107 0220 	add.w	r2, r7, #32
   1e0bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e0c0:	623b      	str	r3, [r7, #32]
   1e0c2:	f00b fedb 	bl	29e7c <z_log_msg_static_create.constprop.0>
   1e0c6:	e7ed      	b.n	1e0a4 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e0c8:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1e0cc:	2b08      	cmp	r3, #8
   1e0ce:	d001      	beq.n	1e0d4 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1e0d0:	4b76      	ldr	r3, [pc, #472]	; (1e2ac <spi_nrfx_transceive+0x2c4>)
   1e0d2:	e7ee      	b.n	1e0b2 <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
   1e0d4:	6835      	ldr	r5, [r6, #0]
   1e0d6:	4b76      	ldr	r3, [pc, #472]	; (1e2b0 <spi_nrfx_transceive+0x2c8>)
   1e0d8:	429d      	cmp	r5, r3
   1e0da:	d801      	bhi.n	1e0e0 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e0dc:	4b75      	ldr	r3, [pc, #468]	; (1e2b4 <spi_nrfx_transceive+0x2cc>)
   1e0de:	e7e8      	b.n	1e0b2 <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
   1e0e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e0e4:	60bb      	str	r3, [r7, #8]
	config = dev_config->def_config;
   1e0e6:	f103 0b08 	add.w	fp, r3, #8
   1e0ea:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1e0ee:	f107 0e10 	add.w	lr, r7, #16
   1e0f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e0f6:	f8db 3000 	ldr.w	r3, [fp]
   1e0fa:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
   1e0fe:	4b6e      	ldr	r3, [pc, #440]	; (1e2b8 <spi_nrfx_transceive+0x2d0>)
   1e100:	429d      	cmp	r5, r3
   1e102:	d945      	bls.n	1e190 <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 500000) {
   1e104:	4b6d      	ldr	r3, [pc, #436]	; (1e2bc <spi_nrfx_transceive+0x2d4>)
   1e106:	429d      	cmp	r5, r3
   1e108:	d945      	bls.n	1e196 <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 1000000) {
   1e10a:	4b6d      	ldr	r3, [pc, #436]	; (1e2c0 <spi_nrfx_transceive+0x2d8>)
   1e10c:	429d      	cmp	r5, r3
   1e10e:	d945      	bls.n	1e19c <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 2000000) {
   1e110:	4b6c      	ldr	r3, [pc, #432]	; (1e2c4 <spi_nrfx_transceive+0x2dc>)
   1e112:	429d      	cmp	r5, r3
   1e114:	d945      	bls.n	1e1a2 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 4000000) {
   1e116:	4b6c      	ldr	r3, [pc, #432]	; (1e2c8 <spi_nrfx_transceive+0x2e0>)
   1e118:	429d      	cmp	r5, r3
   1e11a:	d945      	bls.n	1e1a8 <spi_nrfx_transceive+0x1c0>
		return NRF_SPI_FREQ_8M;
   1e11c:	4b6b      	ldr	r3, [pc, #428]	; (1e2cc <spi_nrfx_transceive+0x2e4>)
   1e11e:	429d      	cmp	r5, r3
   1e120:	bf34      	ite	cc
   1e122:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1e126:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e12a:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1e12e:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e130:	f00c 0304 	and.w	r3, ip, #4
   1e134:	d03b      	beq.n	1e1ae <spi_nrfx_transceive+0x1c6>
			return NRF_SPI_MODE_2;
   1e136:	2b00      	cmp	r3, #0
   1e138:	bf14      	ite	ne
   1e13a:	2303      	movne	r3, #3
   1e13c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1e13e:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1e140:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1e142:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1e146:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1e14a:	b12b      	cbz	r3, 1e158 <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
   1e14c:	68b8      	ldr	r0, [r7, #8]
   1e14e:	f002 fdd7 	bl	20d00 <nrfx_spi_uninit>
		dev_data->initialized = false;
   1e152:	2300      	movs	r3, #0
   1e154:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   1e158:	464b      	mov	r3, r9
   1e15a:	4a5d      	ldr	r2, [pc, #372]	; (1e2d0 <spi_nrfx_transceive+0x2e8>)
   1e15c:	68b8      	ldr	r0, [r7, #8]
   1e15e:	f107 0110 	add.w	r1, r7, #16
   1e162:	f002 fd21 	bl	20ba8 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1e166:	4b5b      	ldr	r3, [pc, #364]	; (1e2d4 <spi_nrfx_transceive+0x2ec>)
   1e168:	4298      	cmp	r0, r3
   1e16a:	d024      	beq.n	1e1b6 <spi_nrfx_transceive+0x1ce>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e16c:	466d      	mov	r5, sp
   1e16e:	b088      	sub	sp, #32
   1e170:	466a      	mov	r2, sp
   1e172:	4b59      	ldr	r3, [pc, #356]	; (1e2d8 <spi_nrfx_transceive+0x2f0>)
   1e174:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e178:	2303      	movs	r3, #3
   1e17a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e17e:	4847      	ldr	r0, [pc, #284]	; (1e29c <spi_nrfx_transceive+0x2b4>)
   1e180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e184:	f00b fe7a 	bl	29e7c <z_log_msg_static_create.constprop.0>
   1e188:	46ad      	mov	sp, r5
		return -EIO;
   1e18a:	f06f 0504 	mvn.w	r5, #4
   1e18e:	e75d      	b.n	1e04c <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
   1e190:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1e194:	e7c9      	b.n	1e12a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
   1e196:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1e19a:	e7c6      	b.n	1e12a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
   1e19c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1e1a0:	e7c3      	b.n	1e12a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
   1e1a2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1e1a6:	e7c0      	b.n	1e12a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
   1e1a8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1e1ac:	e7bd      	b.n	1e12a <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
   1e1ae:	3b00      	subs	r3, #0
   1e1b0:	bf18      	it	ne
   1e1b2:	2301      	movne	r3, #1
   1e1b4:	e7c3      	b.n	1e13e <spi_nrfx_transceive+0x156>
	dev_data->initialized = true;
   1e1b6:	2301      	movs	r3, #1
   1e1b8:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
   1e1bc:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
   1e1c0:	2301      	movs	r3, #1
   1e1c2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e1c6:	68fb      	ldr	r3, [r7, #12]
   1e1c8:	2b00      	cmp	r3, #0
   1e1ca:	d154      	bne.n	1e276 <spi_nrfx_transceive+0x28e>
   1e1cc:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e1ce:	461a      	mov	r2, r3
   1e1d0:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1e1d2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1e1d6:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1e1da:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e1de:	f00b fe3c 	bl	29e5a <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1e1e2:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e1e4:	f1ba 0f00 	cmp.w	sl, #0
   1e1e8:	d14c      	bne.n	1e284 <spi_nrfx_transceive+0x29c>
   1e1ea:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e1ee:	4653      	mov	r3, sl
   1e1f0:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1e1f2:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e1f6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e1fa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e1fe:	f00b fe2c 	bl	29e5a <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1e202:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1e204:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1e206:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   1e208:	2101      	movs	r1, #1
   1e20a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   1e20c:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1e20e:	f00b fe4c 	bl	29eaa <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e212:	4640      	mov	r0, r8
   1e214:	f7ff fe48 	bl	1dea8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e218:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e21a:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1e21c:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e21e:	429d      	cmp	r5, r3
   1e220:	bf38      	it	cc
   1e222:	461d      	movcc	r5, r3
   1e224:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1e228:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1e22a:	f858 3b28 	ldr.w	r3, [r8], #40
   1e22e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e232:	681b      	ldr	r3, [r3, #0]
   1e234:	fbb5 f5f3 	udiv	r5, r5, r3
   1e238:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e23a:	35c8      	adds	r5, #200	; 0xc8
   1e23c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e244:	2300      	movs	r3, #0
   1e246:	fbe5 010c 	umlal	r0, r1, r5, ip
   1e24a:	f7e2 fa73 	bl	734 <__aeabi_uldivmod>
   1e24e:	4602      	mov	r2, r0
   1e250:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e252:	4640      	mov	r0, r8
   1e254:	f003 faa0 	bl	21798 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1e258:	b1e0      	cbz	r0, 1e294 <spi_nrfx_transceive+0x2ac>
		LOG_ERR("Timeout waiting for transfer complete");
   1e25a:	4b20      	ldr	r3, [pc, #128]	; (1e2dc <spi_nrfx_transceive+0x2f4>)
   1e25c:	627b      	str	r3, [r7, #36]	; 0x24
   1e25e:	480f      	ldr	r0, [pc, #60]	; (1e29c <spi_nrfx_transceive+0x2b4>)
   1e260:	2302      	movs	r3, #2
   1e262:	f107 0220 	add.w	r2, r7, #32
   1e266:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e26a:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
   1e26c:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
   1e270:	f00b fe04 	bl	29e7c <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1e274:	e6ea      	b.n	1e04c <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e276:	68fb      	ldr	r3, [r7, #12]
   1e278:	681a      	ldr	r2, [r3, #0]
   1e27a:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e27c:	2a00      	cmp	r2, #0
   1e27e:	d0a7      	beq.n	1e1d0 <spi_nrfx_transceive+0x1e8>
   1e280:	685a      	ldr	r2, [r3, #4]
   1e282:	e7a5      	b.n	1e1d0 <spi_nrfx_transceive+0x1e8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e284:	f8da 3000 	ldr.w	r3, [sl]
   1e288:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e28a:	2b00      	cmp	r3, #0
   1e28c:	d0b0      	beq.n	1e1f0 <spi_nrfx_transceive+0x208>
   1e28e:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e292:	e7ad      	b.n	1e1f0 <spi_nrfx_transceive+0x208>
	status = ctx->sync_status;
   1e294:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1e296:	e6d9      	b.n	1e04c <spi_nrfx_transceive+0x64>
   1e298:	0002e63a 	.word	0x0002e63a
   1e29c:	0002b5d4 	.word	0x0002b5d4
   1e2a0:	0002e654 	.word	0x0002e654
   1e2a4:	01000003 	.word	0x01000003
   1e2a8:	0002e676 	.word	0x0002e676
   1e2ac:	0002e695 	.word	0x0002e695
   1e2b0:	0001e847 	.word	0x0001e847
   1e2b4:	0002e6c4 	.word	0x0002e6c4
   1e2b8:	0003d08f 	.word	0x0003d08f
   1e2bc:	0007a11f 	.word	0x0007a11f
   1e2c0:	000f423f 	.word	0x000f423f
   1e2c4:	001e847f 	.word	0x001e847f
   1e2c8:	003d08ff 	.word	0x003d08ff
   1e2cc:	007a1200 	.word	0x007a1200
   1e2d0:	0001df25 	.word	0x0001df25
   1e2d4:	0bad0000 	.word	0x0bad0000
   1e2d8:	0002e6f5 	.word	0x0002e6f5
   1e2dc:	0002e71c 	.word	0x0002e71c

0001e2e0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e2e0:	4b02      	ldr	r3, [pc, #8]	; (1e2ec <flash_nrf_pages_layout+0xc>)
   1e2e2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e2e4:	2301      	movs	r3, #1
   1e2e6:	6013      	str	r3, [r2, #0]
}
   1e2e8:	4770      	bx	lr
   1e2ea:	bf00      	nop
   1e2ec:	20002f88 	.word	0x20002f88

0001e2f0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e2f0:	4800      	ldr	r0, [pc, #0]	; (1e2f4 <flash_nrf_get_parameters+0x4>)
   1e2f2:	4770      	bx	lr
   1e2f4:	0002c0c4 	.word	0x0002c0c4

0001e2f8 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   1e2f8:	b580      	push	{r7, lr}
   1e2fa:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e2fc:	b088      	sub	sp, #32
   1e2fe:	466a      	mov	r2, sp
   1e300:	4b08      	ldr	r3, [pc, #32]	; (1e324 <flash_nrf_read.part.0+0x2c>)
   1e302:	61d1      	str	r1, [r2, #28]
   1e304:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e308:	2304      	movs	r3, #4
   1e30a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e30e:	4806      	ldr	r0, [pc, #24]	; (1e328 <flash_nrf_read.part.0+0x30>)
   1e310:	2300      	movs	r3, #0
   1e312:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e316:	f7f5 fb35 	bl	13984 <z_impl_z_log_msg_static_create>
}
   1e31a:	f06f 0015 	mvn.w	r0, #21
   1e31e:	46bd      	mov	sp, r7
   1e320:	bd80      	pop	{r7, pc}
   1e322:	bf00      	nop
   1e324:	0002e75c 	.word	0x0002e75c
   1e328:	0002b54c 	.word	0x0002b54c

0001e32c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1e32c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e32e:	2201      	movs	r2, #1
   1e330:	4611      	mov	r1, r2
   1e332:	4807      	ldr	r0, [pc, #28]	; (1e350 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e334:	4c07      	ldr	r4, [pc, #28]	; (1e354 <nrf_flash_init+0x28>)
   1e336:	f00c faae 	bl	2a896 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e33a:	f001 fe6b 	bl	20014 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e33e:	f00c f84d 	bl	2a3dc <nrfx_nvmc_flash_page_count_get>
   1e342:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e344:	f00c f846 	bl	2a3d4 <nrfx_nvmc_flash_page_size_get>
   1e348:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1e34a:	2000      	movs	r0, #0
   1e34c:	bd10      	pop	{r4, pc}
   1e34e:	bf00      	nop
   1e350:	20002f90 	.word	0x20002f90
   1e354:	20002f88 	.word	0x20002f88

0001e358 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1e358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e35c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1e360:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e364:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e368:	f023 031f 	bic.w	r3, r3, #31
   1e36c:	430b      	orrs	r3, r1
    pofcon |=
   1e36e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1e372:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1e376:	4b02      	ldr	r3, [pc, #8]	; (1e380 <restore_pofwarn.part.0+0x28>)
   1e378:	2200      	movs	r2, #0
   1e37a:	701a      	strb	r2, [r3, #0]
	}
}
   1e37c:	4770      	bx	lr
   1e37e:	bf00      	nop
   1e380:	20003daf 	.word	0x20003daf

0001e384 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e384:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e388:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e38c:	2b08      	cmp	r3, #8
   1e38e:	d122      	bne.n	1e3d6 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   1e390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e394:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   1e398:	f011 0001 	ands.w	r0, r1, #1
   1e39c:	d01c      	beq.n	1e3d8 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   1e39e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e3a2:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e3a6:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   1e3aa:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   1e3ac:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3b0:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1e3b4:	b158      	cbz	r0, 1e3ce <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   1e3b6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e3ba:	f023 031f 	bic.w	r3, r3, #31
   1e3be:	430b      	orrs	r3, r1
    pofcon |=
   1e3c0:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1e3c4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   1e3c8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e3cc:	4770      	bx	lr
		pofcon_enabled = enabled;
   1e3ce:	4b03      	ldr	r3, [pc, #12]	; (1e3dc <suspend_pofwarn+0x58>)
   1e3d0:	2201      	movs	r2, #1
   1e3d2:	701a      	strb	r2, [r3, #0]
   1e3d4:	4770      	bx	lr
		return 0;
   1e3d6:	2000      	movs	r0, #0
}
   1e3d8:	4770      	bx	lr
   1e3da:	bf00      	nop
   1e3dc:	20003daf 	.word	0x20003daf

0001e3e0 <erase_op>:
{
   1e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3e2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e3e4:	f00b fff6 	bl	2a3d4 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1e3e8:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e3ea:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1e3ec:	b10b      	cbz	r3, 1e3f2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1e3ee:	f00b ff6d 	bl	2a2cc <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e3f2:	4f13      	ldr	r7, [pc, #76]	; (1e440 <erase_op+0x60>)
{
   1e3f4:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1e3f6:	f7ff ffc5 	bl	1e384 <suspend_pofwarn>
   1e3fa:	b9e8      	cbnz	r0, 1e438 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1e3fc:	6860      	ldr	r0, [r4, #4]
   1e3fe:	f002 fb97 	bl	20b30 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1e402:	68a3      	ldr	r3, [r4, #8]
   1e404:	1b5b      	subs	r3, r3, r5
   1e406:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1e408:	6863      	ldr	r3, [r4, #4]
   1e40a:	442b      	add	r3, r5
   1e40c:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1e40e:	783b      	ldrb	r3, [r7, #0]
   1e410:	b10b      	cbz	r3, 1e416 <erase_op+0x36>
   1e412:	f7ff ffa1 	bl	1e358 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1e416:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e418:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1e41a:	b93b      	cbnz	r3, 1e42c <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1e41c:	68a3      	ldr	r3, [r4, #8]
   1e41e:	2b00      	cmp	r3, #0
   1e420:	d1e9      	bne.n	1e3f6 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1e422:	68a0      	ldr	r0, [r4, #8]
   1e424:	3800      	subs	r0, #0
   1e426:	bf18      	it	ne
   1e428:	2001      	movne	r0, #1
}
   1e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1e42c:	4630      	mov	r0, r6
   1e42e:	f001 fe95 	bl	2015c <nrf_flash_sync_check_time_limit>
   1e432:	2800      	cmp	r0, #0
   1e434:	d0f2      	beq.n	1e41c <erase_op+0x3c>
   1e436:	e7f4      	b.n	1e422 <erase_op+0x42>
			return -ECANCELED;
   1e438:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e43c:	e7f5      	b.n	1e42a <erase_op+0x4a>
   1e43e:	bf00      	nop
   1e440:	20003daf 	.word	0x20003daf

0001e444 <write_op>:
{
   1e444:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1e446:	7b03      	ldrb	r3, [r0, #12]
{
   1e448:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e44a:	b10b      	cbz	r3, 1e450 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e44c:	f00b ff3e 	bl	2a2cc <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e450:	4e19      	ldr	r6, [pc, #100]	; (1e4b8 <write_op+0x74>)
{
   1e452:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e454:	68a3      	ldr	r3, [r4, #8]
   1e456:	2b03      	cmp	r3, #3
   1e458:	d806      	bhi.n	1e468 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e45a:	4a18      	ldr	r2, [pc, #96]	; (1e4bc <write_op+0x78>)
   1e45c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e460:	07db      	lsls	r3, r3, #31
   1e462:	d5fb      	bpl.n	1e45c <write_op+0x18>
	return FLASH_OP_DONE;
   1e464:	2000      	movs	r0, #0
}
   1e466:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1e468:	f7ff ff8c 	bl	1e384 <suspend_pofwarn>
   1e46c:	bb08      	cbnz	r0, 1e4b2 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e46e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e470:	6860      	ldr	r0, [r4, #4]
   1e472:	6819      	ldr	r1, [r3, #0]
   1e474:	f002 fb7c 	bl	20b70 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e478:	7833      	ldrb	r3, [r6, #0]
   1e47a:	b10b      	cbz	r3, 1e480 <write_op+0x3c>
   1e47c:	f7ff ff6c 	bl	1e358 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1e480:	6863      	ldr	r3, [r4, #4]
   1e482:	3304      	adds	r3, #4
   1e484:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e486:	6823      	ldr	r3, [r4, #0]
   1e488:	3304      	adds	r3, #4
   1e48a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e48c:	68a3      	ldr	r3, [r4, #8]
   1e48e:	3b04      	subs	r3, #4
   1e490:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e492:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e494:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e496:	2b00      	cmp	r3, #0
   1e498:	d0dc      	beq.n	1e454 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e49a:	4628      	mov	r0, r5
   1e49c:	f001 fe5e 	bl	2015c <nrf_flash_sync_check_time_limit>
   1e4a0:	2800      	cmp	r0, #0
   1e4a2:	d0d7      	beq.n	1e454 <write_op+0x10>
   1e4a4:	4a05      	ldr	r2, [pc, #20]	; (1e4bc <write_op+0x78>)
   1e4a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e4aa:	07d9      	lsls	r1, r3, #31
   1e4ac:	d5fb      	bpl.n	1e4a6 <write_op+0x62>
				return FLASH_OP_ONGOING;
   1e4ae:	2001      	movs	r0, #1
   1e4b0:	e7d9      	b.n	1e466 <write_op+0x22>
			return -ECANCELED;
   1e4b2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e4b6:	e7d6      	b.n	1e466 <write_op+0x22>
   1e4b8:	20003daf 	.word	0x20003daf
   1e4bc:	4001e000 	.word	0x4001e000

0001e4c0 <flash_nrf_erase>:
{
   1e4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4c4:	b086      	sub	sp, #24
   1e4c6:	af00      	add	r7, sp, #0
   1e4c8:	460e      	mov	r6, r1
   1e4ca:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e4cc:	f00b ff82 	bl	2a3d4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e4d0:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e4d2:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   1e4d4:	4630      	mov	r0, r6
   1e4d6:	f00b fd2c 	bl	29f32 <is_regular_addr_valid>
   1e4da:	4603      	mov	r3, r0
   1e4dc:	b3c8      	cbz	r0, 1e552 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e4de:	fbb6 f3f8 	udiv	r3, r6, r8
   1e4e2:	fb08 6313 	mls	r3, r8, r3, r6
   1e4e6:	b923      	cbnz	r3, 1e4f2 <flash_nrf_erase+0x32>
   1e4e8:	fbb5 f4f8 	udiv	r4, r5, r8
   1e4ec:	fb08 5414 	mls	r4, r8, r4, r5
   1e4f0:	b1bc      	cbz	r4, 1e522 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e4f2:	466c      	mov	r4, sp
   1e4f4:	b088      	sub	sp, #32
   1e4f6:	466a      	mov	r2, sp
   1e4f8:	4b27      	ldr	r3, [pc, #156]	; (1e598 <flash_nrf_erase+0xd8>)
   1e4fa:	61d5      	str	r5, [r2, #28]
   1e4fc:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e500:	2304      	movs	r3, #4
   1e502:	f842 3f10 	str.w	r3, [r2, #16]!
   1e506:	2300      	movs	r3, #0
   1e508:	4824      	ldr	r0, [pc, #144]	; (1e59c <flash_nrf_erase+0xdc>)
   1e50a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e50e:	f7f5 fa39 	bl	13984 <z_impl_z_log_msg_static_create>
   1e512:	46a5      	mov	sp, r4
		return -EINVAL;
   1e514:	f06f 0415 	mvn.w	r4, #21
}
   1e518:	4620      	mov	r0, r4
   1e51a:	3718      	adds	r7, #24
   1e51c:	46bd      	mov	sp, r7
   1e51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   1e522:	4545      	cmp	r5, r8
   1e524:	d3f8      	bcc.n	1e518 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   1e526:	f04f 33ff 	mov.w	r3, #4294967295
   1e52a:	f04f 32ff 	mov.w	r2, #4294967295
   1e52e:	481c      	ldr	r0, [pc, #112]	; (1e5a0 <flash_nrf_erase+0xe0>)
   1e530:	f003 f932 	bl	21798 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e534:	f00b fec8 	bl	2a2c8 <nrf_flash_sync_is_required>
   1e538:	f107 0308 	add.w	r3, r7, #8
   1e53c:	4601      	mov	r1, r0
   1e53e:	b998      	cbnz	r0, 1e568 <flash_nrf_erase+0xa8>
	struct flash_context context = {
   1e540:	2210      	movs	r2, #16
   1e542:	4618      	mov	r0, r3
   1e544:	f009 f97e 	bl	27844 <memset>
   1e548:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   1e54c:	f7ff ff48 	bl	1e3e0 <erase_op>
   1e550:	e01c      	b.n	1e58c <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e552:	466c      	mov	r4, sp
   1e554:	b088      	sub	sp, #32
   1e556:	466a      	mov	r2, sp
   1e558:	4912      	ldr	r1, [pc, #72]	; (1e5a4 <flash_nrf_erase+0xe4>)
   1e55a:	61d5      	str	r5, [r2, #28]
   1e55c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1e560:	2104      	movs	r1, #4
   1e562:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1e566:	e7cf      	b.n	1e508 <flash_nrf_erase+0x48>
	struct flash_context context = {
   1e568:	2210      	movs	r2, #16
   1e56a:	4621      	mov	r1, r4
   1e56c:	4618      	mov	r0, r3
   1e56e:	f009 f969 	bl	27844 <memset>
   1e572:	2201      	movs	r2, #1
   1e574:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1e576:	4a0c      	ldr	r2, [pc, #48]	; (1e5a8 <flash_nrf_erase+0xe8>)
   1e578:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e57c:	480b      	ldr	r0, [pc, #44]	; (1e5ac <flash_nrf_erase+0xec>)
	struct flash_context context = {
   1e57e:	e9c7 6503 	strd	r6, r5, [r7, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e582:	f001 fd4f 	bl	20024 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e586:	4638      	mov	r0, r7
   1e588:	f001 fd52 	bl	20030 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e58c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e58e:	4804      	ldr	r0, [pc, #16]	; (1e5a0 <flash_nrf_erase+0xe0>)
   1e590:	f003 f8dc 	bl	2174c <z_impl_k_sem_give>
}
   1e594:	e7c0      	b.n	1e518 <flash_nrf_erase+0x58>
   1e596:	bf00      	nop
   1e598:	0002e779 	.word	0x0002e779
   1e59c:	0002b54c 	.word	0x0002b54c
   1e5a0:	20002f90 	.word	0x20002f90
   1e5a4:	0002e75c 	.word	0x0002e75c
   1e5a8:	0001e3e1 	.word	0x0001e3e1
   1e5ac:	00015e64 	.word	0x00015e64

0001e5b0 <flash_nrf_write>:
{
   1e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5b2:	460d      	mov	r5, r1
   1e5b4:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1e5b6:	4619      	mov	r1, r3
{
   1e5b8:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1e5ba:	4628      	mov	r0, r5
{
   1e5bc:	461c      	mov	r4, r3
   1e5be:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1e5c0:	f00b fcb7 	bl	29f32 <is_regular_addr_valid>
   1e5c4:	4603      	mov	r3, r0
   1e5c6:	b9a8      	cbnz	r0, 1e5f4 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e5c8:	466e      	mov	r6, sp
   1e5ca:	b088      	sub	sp, #32
   1e5cc:	466a      	mov	r2, sp
   1e5ce:	4925      	ldr	r1, [pc, #148]	; (1e664 <flash_nrf_write+0xb4>)
   1e5d0:	61d4      	str	r4, [r2, #28]
   1e5d2:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1e5d6:	2104      	movs	r1, #4
   1e5d8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1e5dc:	4822      	ldr	r0, [pc, #136]	; (1e668 <flash_nrf_write+0xb8>)
   1e5de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e5e2:	f7f5 f9cf 	bl	13984 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e5e6:	f06f 0415 	mvn.w	r4, #21
   1e5ea:	46b5      	mov	sp, r6
}
   1e5ec:	4620      	mov	r0, r4
   1e5ee:	371c      	adds	r7, #28
   1e5f0:	46bd      	mov	sp, r7
   1e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e5f4:	ea44 0305 	orr.w	r3, r4, r5
   1e5f8:	079b      	lsls	r3, r3, #30
   1e5fa:	d00b      	beq.n	1e614 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e5fc:	466e      	mov	r6, sp
   1e5fe:	b088      	sub	sp, #32
   1e600:	466a      	mov	r2, sp
   1e602:	4b1a      	ldr	r3, [pc, #104]	; (1e66c <flash_nrf_write+0xbc>)
   1e604:	61d4      	str	r4, [r2, #28]
   1e606:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1e60a:	2304      	movs	r3, #4
   1e60c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e610:	2300      	movs	r3, #0
   1e612:	e7e3      	b.n	1e5dc <flash_nrf_write+0x2c>
	if (!len) {
   1e614:	2c00      	cmp	r4, #0
   1e616:	d0e9      	beq.n	1e5ec <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1e618:	f04f 33ff 	mov.w	r3, #4294967295
   1e61c:	f04f 32ff 	mov.w	r2, #4294967295
   1e620:	4813      	ldr	r0, [pc, #76]	; (1e670 <flash_nrf_write+0xc0>)
   1e622:	f003 f8b9 	bl	21798 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e626:	f00b fe4f 	bl	2a2c8 <nrf_flash_sync_is_required>
   1e62a:	4603      	mov	r3, r0
	struct flash_context context = {
   1e62c:	e9c7 6502 	strd	r6, r5, [r7, #8]
   1e630:	f107 0008 	add.w	r0, r7, #8
   1e634:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   1e636:	b183      	cbz	r3, 1e65a <flash_nrf_write+0xaa>
	struct flash_context context = {
   1e638:	2301      	movs	r3, #1
   1e63a:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1e63c:	4b0d      	ldr	r3, [pc, #52]	; (1e674 <flash_nrf_write+0xc4>)
   1e63e:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e642:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e646:	f001 fced 	bl	20024 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e64a:	4638      	mov	r0, r7
   1e64c:	f001 fcf0 	bl	20030 <nrf_flash_sync_exe>
	return write_op(&context);
   1e650:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e652:	4807      	ldr	r0, [pc, #28]	; (1e670 <flash_nrf_write+0xc0>)
   1e654:	f003 f87a 	bl	2174c <z_impl_k_sem_give>
}
   1e658:	e7c8      	b.n	1e5ec <flash_nrf_write+0x3c>
	struct flash_context context = {
   1e65a:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   1e65c:	f7ff fef2 	bl	1e444 <write_op>
   1e660:	e7f6      	b.n	1e650 <flash_nrf_write+0xa0>
   1e662:	bf00      	nop
   1e664:	0002e75c 	.word	0x0002e75c
   1e668:	0002b54c 	.word	0x0002b54c
   1e66c:	0002e798 	.word	0x0002e798
   1e670:	20002f90 	.word	0x20002f90
   1e674:	0001e445 	.word	0x0001e445

0001e678 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e678:	4b07      	ldr	r3, [pc, #28]	; (1e698 <uart_nrfx_poll_in+0x20>)
   1e67a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1e67e:	b142      	cbz	r2, 1e692 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e680:	2000      	movs	r0, #0
   1e682:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e686:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1e68a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1e68e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1e690:	4770      	bx	lr
		return -1;
   1e692:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e696:	4770      	bx	lr
   1e698:	40002000 	.word	0x40002000

0001e69c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e69c:	4b02      	ldr	r3, [pc, #8]	; (1e6a8 <uart_nrfx_err_check+0xc>)
   1e69e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e6a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1e6a6:	4770      	bx	lr
   1e6a8:	40002000 	.word	0x40002000

0001e6ac <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1e6ac:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e6ae:	794b      	ldrb	r3, [r1, #5]
   1e6b0:	2b01      	cmp	r3, #1
   1e6b2:	d022      	beq.n	1e6fa <uart_nrfx_configure+0x4e>
   1e6b4:	2b03      	cmp	r3, #3
   1e6b6:	d11d      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1e6b8:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e6ba:	798b      	ldrb	r3, [r1, #6]
   1e6bc:	2b03      	cmp	r3, #3
   1e6be:	d119      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e6c0:	79cb      	ldrb	r3, [r1, #7]
   1e6c2:	b9bb      	cbnz	r3, 1e6f4 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e6c4:	790a      	ldrb	r2, [r1, #4]
   1e6c6:	b112      	cbz	r2, 1e6ce <uart_nrfx_configure+0x22>
   1e6c8:	2a02      	cmp	r2, #2
   1e6ca:	d113      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1e6cc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e6ce:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1e6d0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1e6d4:	d061      	beq.n	1e79a <uart_nrfx_configure+0xee>
   1e6d6:	d82d      	bhi.n	1e734 <uart_nrfx_configure+0x88>
   1e6d8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e6dc:	d05f      	beq.n	1e79e <uart_nrfx_configure+0xf2>
   1e6de:	d816      	bhi.n	1e70e <uart_nrfx_configure+0x62>
   1e6e0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e6e4:	d05d      	beq.n	1e7a2 <uart_nrfx_configure+0xf6>
   1e6e6:	d80a      	bhi.n	1e6fe <uart_nrfx_configure+0x52>
   1e6e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e6ec:	d05c      	beq.n	1e7a8 <uart_nrfx_configure+0xfc>
   1e6ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e6f2:	d05c      	beq.n	1e7ae <uart_nrfx_configure+0x102>
   1e6f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e6f8:	e04e      	b.n	1e798 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1e6fa:	2500      	movs	r5, #0
   1e6fc:	e7dd      	b.n	1e6ba <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1e6fe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e702:	d057      	beq.n	1e7b4 <uart_nrfx_configure+0x108>
   1e704:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e708:	d1f4      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1e70a:	4b34      	ldr	r3, [pc, #208]	; (1e7dc <uart_nrfx_configure+0x130>)
   1e70c:	e039      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e70e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e712:	d052      	beq.n	1e7ba <uart_nrfx_configure+0x10e>
   1e714:	d807      	bhi.n	1e726 <uart_nrfx_configure+0x7a>
   1e716:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e71a:	d050      	beq.n	1e7be <uart_nrfx_configure+0x112>
   1e71c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e720:	d1e8      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1e722:	4b2f      	ldr	r3, [pc, #188]	; (1e7e0 <uart_nrfx_configure+0x134>)
   1e724:	e02d      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e726:	f647 2412 	movw	r4, #31250	; 0x7a12
   1e72a:	42a3      	cmp	r3, r4
   1e72c:	d1e2      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1e72e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e732:	e026      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e734:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e738:	d044      	beq.n	1e7c4 <uart_nrfx_configure+0x118>
   1e73a:	d811      	bhi.n	1e760 <uart_nrfx_configure+0xb4>
   1e73c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e740:	d042      	beq.n	1e7c8 <uart_nrfx_configure+0x11c>
   1e742:	d808      	bhi.n	1e756 <uart_nrfx_configure+0xaa>
   1e744:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1e748:	42a3      	cmp	r3, r4
   1e74a:	d03f      	beq.n	1e7cc <uart_nrfx_configure+0x120>
   1e74c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e750:	d1d0      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1e752:	4b24      	ldr	r3, [pc, #144]	; (1e7e4 <uart_nrfx_configure+0x138>)
   1e754:	e015      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e756:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e75a:	d1cb      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1e75c:	4b22      	ldr	r3, [pc, #136]	; (1e7e8 <uart_nrfx_configure+0x13c>)
   1e75e:	e010      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e760:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e764:	d035      	beq.n	1e7d2 <uart_nrfx_configure+0x126>
   1e766:	d807      	bhi.n	1e778 <uart_nrfx_configure+0xcc>
   1e768:	4c20      	ldr	r4, [pc, #128]	; (1e7ec <uart_nrfx_configure+0x140>)
   1e76a:	42a3      	cmp	r3, r4
   1e76c:	d033      	beq.n	1e7d6 <uart_nrfx_configure+0x12a>
   1e76e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e772:	d1bf      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1e774:	4b1e      	ldr	r3, [pc, #120]	; (1e7f0 <uart_nrfx_configure+0x144>)
   1e776:	e004      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e778:	4c1e      	ldr	r4, [pc, #120]	; (1e7f4 <uart_nrfx_configure+0x148>)
   1e77a:	42a3      	cmp	r3, r4
   1e77c:	d1ba      	bne.n	1e6f4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1e77e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   1e782:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e784:	481c      	ldr	r0, [pc, #112]	; (1e7f8 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1e786:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   1e788:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e78c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   1e790:	c903      	ldmia	r1, {r0, r1}
   1e792:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   1e796:	2000      	movs	r0, #0
}
   1e798:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1e79a:	4b18      	ldr	r3, [pc, #96]	; (1e7fc <uart_nrfx_configure+0x150>)
   1e79c:	e7f1      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1e79e:	4b18      	ldr	r3, [pc, #96]	; (1e800 <uart_nrfx_configure+0x154>)
   1e7a0:	e7ef      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1e7a2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e7a6:	e7ec      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1e7a8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e7ac:	e7e9      	b.n	1e782 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e7ae:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e7b2:	e7e6      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1e7b4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e7b8:	e7e3      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1e7ba:	4b12      	ldr	r3, [pc, #72]	; (1e804 <uart_nrfx_configure+0x158>)
   1e7bc:	e7e1      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1e7be:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1e7c2:	e7de      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1e7c4:	4b10      	ldr	r3, [pc, #64]	; (1e808 <uart_nrfx_configure+0x15c>)
   1e7c6:	e7dc      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1e7c8:	4b10      	ldr	r3, [pc, #64]	; (1e80c <uart_nrfx_configure+0x160>)
   1e7ca:	e7da      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1e7cc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e7d0:	e7d7      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1e7d2:	4b0f      	ldr	r3, [pc, #60]	; (1e810 <uart_nrfx_configure+0x164>)
   1e7d4:	e7d5      	b.n	1e782 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1e7d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e7da:	e7d2      	b.n	1e782 <uart_nrfx_configure+0xd6>
   1e7dc:	0013b000 	.word	0x0013b000
   1e7e0:	004ea000 	.word	0x004ea000
   1e7e4:	00ebf000 	.word	0x00ebf000
   1e7e8:	01d7e000 	.word	0x01d7e000
   1e7ec:	0003d090 	.word	0x0003d090
   1e7f0:	075f7000 	.word	0x075f7000
   1e7f4:	000f4240 	.word	0x000f4240
   1e7f8:	40002000 	.word	0x40002000
   1e7fc:	009d5000 	.word	0x009d5000
   1e800:	00275000 	.word	0x00275000
   1e804:	0075f000 	.word	0x0075f000
   1e808:	03afb000 	.word	0x03afb000
   1e80c:	013a9000 	.word	0x013a9000
   1e810:	0ebed000 	.word	0x0ebed000

0001e814 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1e814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   1e816:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1e818:	4c12      	ldr	r4, [pc, #72]	; (1e864 <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   1e81a:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
   1e81c:	6907      	ldr	r7, [r0, #16]
   1e81e:	2100      	movs	r1, #0
{
   1e820:	4605      	mov	r5, r0
   1e822:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
   1e826:	aa01      	add	r2, sp, #4
   1e828:	4630      	mov	r0, r6
   1e82a:	f00b fbf5 	bl	2a018 <pinctrl_lookup_state>
	if (ret < 0) {
   1e82e:	2800      	cmp	r0, #0
   1e830:	db15      	blt.n	1e85e <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
   1e832:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e834:	6832      	ldr	r2, [r6, #0]
   1e836:	7919      	ldrb	r1, [r3, #4]
   1e838:	6818      	ldr	r0, [r3, #0]
   1e83a:	f00b fc0a 	bl	2a052 <pinctrl_configure_pins>
	if (err < 0) {
   1e83e:	2800      	cmp	r0, #0
   1e840:	db0d      	blt.n	1e85e <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   1e842:	4639      	mov	r1, r7
   1e844:	4628      	mov	r0, r5
   1e846:	f7ff ff31 	bl	1e6ac <uart_nrfx_configure>
	if (err) {
   1e84a:	b940      	cbnz	r0, 1e85e <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1e84c:	2304      	movs	r3, #4
   1e84e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e852:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1e856:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e85a:	2301      	movs	r3, #1
   1e85c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1e85e:	b003      	add	sp, #12
   1e860:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e862:	bf00      	nop
   1e864:	40002000 	.word	0x40002000

0001e868 <uart_nrfx_poll_out>:
{
   1e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e86a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1e86c:	f00b ff23 	bl	2a6b6 <k_is_in_isr>
   1e870:	4d1a      	ldr	r5, [pc, #104]	; (1e8dc <uart_nrfx_poll_out+0x74>)
   1e872:	bb78      	cbnz	r0, 1e8d4 <uart_nrfx_poll_out+0x6c>
   1e874:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e876:	2701      	movs	r7, #1
   1e878:	f3bf 8f5b 	dmb	ish
   1e87c:	e855 3f00 	ldrex	r3, [r5]
   1e880:	2b00      	cmp	r3, #0
   1e882:	d103      	bne.n	1e88c <uart_nrfx_poll_out+0x24>
   1e884:	e845 7200 	strex	r2, r7, [r5]
   1e888:	2a00      	cmp	r2, #0
   1e88a:	d1f7      	bne.n	1e87c <uart_nrfx_poll_out+0x14>
   1e88c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1e890:	d007      	beq.n	1e8a2 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1e892:	2021      	movs	r0, #33	; 0x21
   1e894:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1e896:	3c01      	subs	r4, #1
   1e898:	f003 fc60 	bl	2215c <z_impl_k_sleep>
   1e89c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1e8a0:	d1ea      	bne.n	1e878 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8a2:	4c0f      	ldr	r4, [pc, #60]	; (1e8e0 <uart_nrfx_poll_out+0x78>)
   1e8a4:	2300      	movs	r3, #0
   1e8a6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1e8aa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8ae:	2301      	movs	r3, #1
   1e8b0:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1e8b2:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1e8b6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e8ba:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1e8be:	b923      	cbnz	r3, 1e8ca <uart_nrfx_poll_out+0x62>
   1e8c0:	2001      	movs	r0, #1
   1e8c2:	f00b fd29 	bl	2a318 <nrfx_busy_wait>
   1e8c6:	3e01      	subs	r6, #1
   1e8c8:	d1f7      	bne.n	1e8ba <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8ca:	2301      	movs	r3, #1
   1e8cc:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1e8ce:	2300      	movs	r3, #0
   1e8d0:	602b      	str	r3, [r5, #0]
}
   1e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1e8d4:	2301      	movs	r3, #1
   1e8d6:	602b      	str	r3, [r5, #0]
   1e8d8:	e7e3      	b.n	1e8a2 <uart_nrfx_poll_out+0x3a>
   1e8da:	bf00      	nop
   1e8dc:	20002fa8 	.word	0x20002fa8
   1e8e0:	40002000 	.word	0x40002000

0001e8e4 <random_byte_get>:
	__asm__ volatile(
   1e8e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e8e8:	f3ef 8211 	mrs	r2, BASEPRI
   1e8ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8f0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e8f4:	4b09      	ldr	r3, [pc, #36]	; (1e91c <random_byte_get+0x38>)
   1e8f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e8fa:	b161      	cbz	r1, 1e916 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e8fc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e8fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e902:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e906:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e90a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e90c:	f382 8811 	msr	BASEPRI, r2
   1e910:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e914:	4770      	bx	lr
	int retval = -EAGAIN;
   1e916:	f06f 000a 	mvn.w	r0, #10
   1e91a:	e7f7      	b.n	1e90c <random_byte_get+0x28>
   1e91c:	4000d000 	.word	0x4000d000

0001e920 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e920:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e922:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e924:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e926:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e928:	f04f 0040 	mov.w	r0, #64	; 0x40
   1e92c:	f3ef 8e11 	mrs	lr, BASEPRI
   1e930:	f380 8812 	msr	BASEPRI_MAX, r0
   1e934:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e938:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e93a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e93e:	1ba4      	subs	r4, r4, r6
   1e940:	403c      	ands	r4, r7
	if (available < len) {
   1e942:	42a2      	cmp	r2, r4
		len = available;
   1e944:	bf88      	it	hi
   1e946:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e948:	18b0      	adds	r0, r6, r2
   1e94a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e94c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e94e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e950:	f38e 8811 	msr	BASEPRI, lr
   1e954:	f3bf 8f6f 	isb	sy
   1e958:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e95a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e95c:	4290      	cmp	r0, r2
   1e95e:	d119      	bne.n	1e994 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e960:	4566      	cmp	r6, ip
   1e962:	d10d      	bne.n	1e980 <rng_pool_get+0x60>
	__asm__ volatile(
   1e964:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e968:	f3ef 8011 	mrs	r0, BASEPRI
   1e96c:	f385 8812 	msr	BASEPRI_MAX, r5
   1e970:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e974:	781d      	ldrb	r5, [r3, #0]
   1e976:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e978:	f380 8811 	msr	BASEPRI, r0
   1e97c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e980:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e982:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e984:	b290      	uxth	r0, r2
	available = available - len;
   1e986:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e988:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e98a:	bf22      	ittt	cs
   1e98c:	4b06      	ldrcs	r3, [pc, #24]	; (1e9a8 <rng_pool_get+0x88>)
   1e98e:	2201      	movcs	r2, #1
   1e990:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e994:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e998:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e99a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e99e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e9a2:	403d      	ands	r5, r7
   1e9a4:	e7da      	b.n	1e95c <rng_pool_get+0x3c>
   1e9a6:	bf00      	nop
   1e9a8:	4000d000 	.word	0x4000d000

0001e9ac <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e9ac:	43db      	mvns	r3, r3
{
   1e9ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e9b2:	f013 0501 	ands.w	r5, r3, #1
{
   1e9b6:	460e      	mov	r6, r1
   1e9b8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e9ba:	d004      	beq.n	1e9c6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e9bc:	4821      	ldr	r0, [pc, #132]	; (1ea44 <entropy_nrf5_get_entropy_isr+0x98>)
   1e9be:	f7ff ffaf 	bl	1e920 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e9c6:	b3a2      	cbz	r2, 1ea32 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e9c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9cc:	f3ef 8811 	mrs	r8, BASEPRI
   1e9d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9d4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e9d8:	200d      	movs	r0, #13
   1e9da:	f7f5 ff4f 	bl	1487c <arch_irq_is_enabled>
   1e9de:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e9e0:	200d      	movs	r0, #13
   1e9e2:	f7f5 ff37 	bl	14854 <arch_irq_disable>
	__asm__ volatile(
   1e9e6:	f388 8811 	msr	BASEPRI, r8
   1e9ea:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e9ee:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ea48 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e9f2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ea4c <entropy_nrf5_get_entropy_isr+0xa0>
   1e9f6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e9fa:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e9fe:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ea02:	2301      	movs	r3, #1
   1ea04:	f8c8 3000 	str.w	r3, [r8]
   1ea08:	4625      	mov	r5, r4
   1ea0a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ea0e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ea12:	b183      	cbz	r3, 1ea36 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1ea14:	f7ff ff66 	bl	1e8e4 <random_byte_get>
			if (byte < 0) {
   1ea18:	1e03      	subs	r3, r0, #0
   1ea1a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ea1e:	dbf6      	blt.n	1ea0e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1ea20:	3d01      	subs	r5, #1
   1ea22:	b2ad      	uxth	r5, r5
   1ea24:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ea26:	2d00      	cmp	r5, #0
   1ea28:	d1f1      	bne.n	1ea0e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1ea2a:	b117      	cbz	r7, 1ea32 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1ea2c:	200d      	movs	r0, #13
   1ea2e:	f7f5 ff01 	bl	14834 <arch_irq_enable>
	return cnt;
   1ea32:	4620      	mov	r0, r4
   1ea34:	e7c5      	b.n	1e9c2 <entropy_nrf5_get_entropy_isr+0x16>
   1ea36:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ea3a:	bf20      	wfe
				__SEV();
   1ea3c:	bf40      	sev
				__WFE();
   1ea3e:	bf20      	wfe
   1ea40:	e7e5      	b.n	1ea0e <entropy_nrf5_get_entropy_isr+0x62>
   1ea42:	bf00      	nop
   1ea44:	20002fdc 	.word	0x20002fdc
   1ea48:	4000d000 	.word	0x4000d000
   1ea4c:	e000e100 	.word	0xe000e100

0001ea50 <entropy_nrf5_get_entropy>:
{
   1ea50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ea54:	4f13      	ldr	r7, [pc, #76]	; (1eaa4 <entropy_nrf5_get_entropy+0x54>)
   1ea56:	460d      	mov	r5, r1
   1ea58:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ea5a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ea5e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ea62:	b914      	cbnz	r4, 1ea6a <entropy_nrf5_get_entropy+0x1a>
}
   1ea64:	4620      	mov	r0, r4
   1ea66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ea6a:	f04f 33ff 	mov.w	r3, #4294967295
   1ea6e:	f04f 32ff 	mov.w	r2, #4294967295
   1ea72:	4638      	mov	r0, r7
   1ea74:	f002 fe90 	bl	21798 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ea78:	4622      	mov	r2, r4
   1ea7a:	4629      	mov	r1, r5
   1ea7c:	4640      	mov	r0, r8
   1ea7e:	f7ff ff4f 	bl	1e920 <rng_pool_get>
   1ea82:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ea84:	4638      	mov	r0, r7
   1ea86:	f002 fe61 	bl	2174c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ea8a:	b93e      	cbnz	r6, 1ea9c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ea8c:	f04f 32ff 	mov.w	r2, #4294967295
   1ea90:	f04f 33ff 	mov.w	r3, #4294967295
   1ea94:	4648      	mov	r0, r9
   1ea96:	f002 fe7f 	bl	21798 <z_impl_k_sem_take>
			continue;
   1ea9a:	e7e2      	b.n	1ea62 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ea9c:	1ba4      	subs	r4, r4, r6
   1ea9e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1eaa0:	4435      	add	r5, r6
   1eaa2:	e7de      	b.n	1ea62 <entropy_nrf5_get_entropy+0x12>
   1eaa4:	20002fac 	.word	0x20002fac

0001eaa8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1eaa8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1eaaa:	4c19      	ldr	r4, [pc, #100]	; (1eb10 <entropy_nrf5_init+0x68>)
   1eaac:	2201      	movs	r2, #1
   1eaae:	4611      	mov	r1, r2
   1eab0:	4620      	mov	r0, r4
   1eab2:	f00b fef0 	bl	2a896 <z_impl_k_sem_init>
   1eab6:	2201      	movs	r2, #1
   1eab8:	2100      	movs	r1, #0
   1eaba:	f104 0018 	add.w	r0, r4, #24
   1eabe:	f00b feea 	bl	2a896 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1eac2:	f240 4307 	movw	r3, #1031	; 0x407
   1eac6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1eaca:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1eace:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ead0:	230c      	movs	r3, #12
   1ead2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ead6:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1ead8:	4b0e      	ldr	r3, [pc, #56]	; (1eb14 <entropy_nrf5_init+0x6c>)
   1eada:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1eade:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1eae2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1eae6:	f022 0201 	bic.w	r2, r2, #1
   1eaea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1eaee:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eaf0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1eaf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1eaf8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1eafc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eafe:	6019      	str	r1, [r3, #0]
   1eb00:	200d      	movs	r0, #13
   1eb02:	f7f5 fec9 	bl	14898 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1eb06:	200d      	movs	r0, #13
   1eb08:	f7f5 fe94 	bl	14834 <arch_irq_enable>

	return 0;
}
   1eb0c:	4628      	mov	r0, r5
   1eb0e:	bd38      	pop	{r3, r4, r5, pc}
   1eb10:	20002fac 	.word	0x20002fac
   1eb14:	4000d000 	.word	0x4000d000

0001eb18 <isr>:
{
   1eb18:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1eb1a:	f7ff fee3 	bl	1e8e4 <random_byte_get>
	if (byte < 0) {
   1eb1e:	2800      	cmp	r0, #0
   1eb20:	db20      	blt.n	1eb64 <isr+0x4c>
	uint8_t last  = rngp->last;
   1eb22:	4b17      	ldr	r3, [pc, #92]	; (1eb80 <isr+0x68>)
   1eb24:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1eb28:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1eb2c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1eb30:	1a51      	subs	r1, r2, r1
   1eb32:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1eb36:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1eb38:	d10d      	bne.n	1eb56 <isr+0x3e>
	uint8_t last  = rngp->last;
   1eb3a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1eb3e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1eb42:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1eb46:	1a51      	subs	r1, r2, r1
   1eb48:	ea34 0101 	bics.w	r1, r4, r1
   1eb4c:	d10b      	bne.n	1eb66 <isr+0x4e>
   1eb4e:	4b0d      	ldr	r3, [pc, #52]	; (1eb84 <isr+0x6c>)
   1eb50:	2201      	movs	r2, #1
   1eb52:	605a      	str	r2, [r3, #4]
}
   1eb54:	e00e      	b.n	1eb74 <isr+0x5c>
	rngp->buffer[last] = byte;
   1eb56:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1eb58:	3201      	adds	r2, #1
   1eb5a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1eb5c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1eb60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1eb64:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1eb66:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1eb68:	3201      	adds	r2, #1
   1eb6a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1eb6c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1eb70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1eb74:	4804      	ldr	r0, [pc, #16]	; (1eb88 <isr+0x70>)
}
   1eb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb7a:	f002 bde7 	b.w	2174c <z_impl_k_sem_give>
   1eb7e:	bf00      	nop
   1eb80:	20002fac 	.word	0x20002fac
   1eb84:	4000d000 	.word	0x4000d000
   1eb88:	20002fc4 	.word	0x20002fc4

0001eb8c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1eb8c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1eb8e:	2301      	movs	r3, #1
   1eb90:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eb92:	4a11      	ldr	r2, [pc, #68]	; (1ebd8 <compare_int_lock+0x4c>)
   1eb94:	f3bf 8f5b 	dmb	ish
   1eb98:	43dc      	mvns	r4, r3
   1eb9a:	e852 1f00 	ldrex	r1, [r2]
   1eb9e:	ea01 0c04 	and.w	ip, r1, r4
   1eba2:	e842 ce00 	strex	lr, ip, [r2]
   1eba6:	f1be 0f00 	cmp.w	lr, #0
   1ebaa:	d1f6      	bne.n	1eb9a <compare_int_lock+0xe>
   1ebac:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ebb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ebb4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ebb8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ebbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ebc0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ebc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ebc8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ebcc:	420b      	tst	r3, r1
}
   1ebce:	bf14      	ite	ne
   1ebd0:	2001      	movne	r0, #1
   1ebd2:	2000      	moveq	r0, #0
   1ebd4:	bd10      	pop	{r4, pc}
   1ebd6:	bf00      	nop
   1ebd8:	20003004 	.word	0x20003004

0001ebdc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ebdc:	4919      	ldr	r1, [pc, #100]	; (1ec44 <sys_clock_timeout_handler+0x68>)
{
   1ebde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebe0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1ebe2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ebe6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1ebe8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ebec:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ebf0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1ebf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ebf6:	d222      	bcs.n	1ec3e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ebf8:	4b13      	ldr	r3, [pc, #76]	; (1ec48 <sys_clock_timeout_handler+0x6c>)
   1ebfa:	681b      	ldr	r3, [r3, #0]
   1ebfc:	0a1a      	lsrs	r2, r3, #8
   1ebfe:	061b      	lsls	r3, r3, #24
   1ec00:	195e      	adds	r6, r3, r5
   1ec02:	4b12      	ldr	r3, [pc, #72]	; (1ec4c <sys_clock_timeout_handler+0x70>)
   1ec04:	f142 0700 	adc.w	r7, r2, #0
   1ec08:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1ec0c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ec0e:	f003 fc2f 	bl	22470 <sys_clock_announce>
    return p_reg->CC[ch];
   1ec12:	00a3      	lsls	r3, r4, #2
   1ec14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ec18:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1ec1c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1ec20:	42aa      	cmp	r2, r5
   1ec22:	d10b      	bne.n	1ec3c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1ec24:	b91e      	cbnz	r6, 1ec2e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1ec26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ec2a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ec2e:	4b08      	ldr	r3, [pc, #32]	; (1ec50 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ec30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1ec34:	fa00 f404 	lsl.w	r4, r0, r4
   1ec38:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1ec3e:	2600      	movs	r6, #0
   1ec40:	e7e5      	b.n	1ec0e <sys_clock_timeout_handler+0x32>
   1ec42:	bf00      	nop
   1ec44:	20002278 	.word	0x20002278
   1ec48:	20003008 	.word	0x20003008
   1ec4c:	20002260 	.word	0x20002260
   1ec50:	40011000 	.word	0x40011000

0001ec54 <compare_int_unlock>:
	if (key) {
   1ec54:	b319      	cbz	r1, 1ec9e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ec56:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1ec5a:	2301      	movs	r3, #1
   1ec5c:	4a10      	ldr	r2, [pc, #64]	; (1eca0 <compare_int_unlock+0x4c>)
   1ec5e:	4083      	lsls	r3, r0
   1ec60:	e852 1f00 	ldrex	r1, [r2]
   1ec64:	4319      	orrs	r1, r3
   1ec66:	e842 1c00 	strex	ip, r1, [r2]
   1ec6a:	f1bc 0f00 	cmp.w	ip, #0
   1ec6e:	d1f7      	bne.n	1ec60 <compare_int_unlock+0xc>
   1ec70:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ec74:	4a0b      	ldr	r2, [pc, #44]	; (1eca4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ec76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ec7a:	4083      	lsls	r3, r0
   1ec7c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ec80:	4b09      	ldr	r3, [pc, #36]	; (1eca8 <compare_int_unlock+0x54>)
   1ec82:	f3bf 8f5b 	dmb	ish
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ec8c:	fa23 f000 	lsr.w	r0, r3, r0
   1ec90:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ec92:	bf42      	ittt	mi
   1ec94:	4b05      	ldrmi	r3, [pc, #20]	; (1ecac <compare_int_unlock+0x58>)
   1ec96:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ec9a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ec9e:	4770      	bx	lr
   1eca0:	20003004 	.word	0x20003004
   1eca4:	40011000 	.word	0x40011000
   1eca8:	20003000 	.word	0x20003000
   1ecac:	e000e100 	.word	0xe000e100

0001ecb0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ecb0:	4b0d      	ldr	r3, [pc, #52]	; (1ece8 <z_nrf_rtc_timer_read+0x38>)
   1ecb2:	6818      	ldr	r0, [r3, #0]
   1ecb4:	0a01      	lsrs	r1, r0, #8
   1ecb6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ecb8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ecbc:	4b0b      	ldr	r3, [pc, #44]	; (1ecec <z_nrf_rtc_timer_read+0x3c>)
   1ecbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ecc2:	1818      	adds	r0, r3, r0
   1ecc4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ecc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1eccc:	d20a      	bcs.n	1ece4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ecce:	4b08      	ldr	r3, [pc, #32]	; (1ecf0 <z_nrf_rtc_timer_read+0x40>)
   1ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ecd4:	4290      	cmp	r0, r2
   1ecd6:	eb71 0303 	sbcs.w	r3, r1, r3
   1ecda:	d203      	bcs.n	1ece4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1ecdc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ece0:	f141 0100 	adc.w	r1, r1, #0
}
   1ece4:	4770      	bx	lr
   1ece6:	bf00      	nop
   1ece8:	20003008 	.word	0x20003008
   1ecec:	40011000 	.word	0x40011000
   1ecf0:	20002260 	.word	0x20002260

0001ecf4 <compare_set>:
{
   1ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecf8:	b085      	sub	sp, #20
   1ecfa:	4616      	mov	r6, r2
   1ecfc:	4698      	mov	r8, r3
   1ecfe:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1ed00:	f7ff ff44 	bl	1eb8c <compare_int_lock>
   1ed04:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1ed06:	f7ff ffd3 	bl	1ecb0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1ed0a:	42b0      	cmp	r0, r6
   1ed0c:	eb71 0308 	sbcs.w	r3, r1, r8
   1ed10:	d278      	bcs.n	1ee04 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1ed12:	4b46      	ldr	r3, [pc, #280]	; (1ee2c <compare_set+0x138>)
   1ed14:	1a30      	subs	r0, r6, r0
   1ed16:	eb68 0101 	sbc.w	r1, r8, r1
   1ed1a:	4298      	cmp	r0, r3
   1ed1c:	f171 0300 	sbcs.w	r3, r1, #0
   1ed20:	f080 8081 	bcs.w	1ee26 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1ed24:	4b42      	ldr	r3, [pc, #264]	; (1ee30 <compare_set+0x13c>)
   1ed26:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1ed2a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1ed2e:	45d8      	cmp	r8, fp
   1ed30:	bf08      	it	eq
   1ed32:	4556      	cmpeq	r6, sl
   1ed34:	d051      	beq.n	1edda <compare_set+0xe6>
   1ed36:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1ed3a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1ed3e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1ed42:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1ed46:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ed48:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1ed4c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ed50:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1ed52:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1ed56:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ed5a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1ed5c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1ed60:	4b34      	ldr	r3, [pc, #208]	; (1ee34 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ed62:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1ed66:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1ed68:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1ed6c:	1a40      	subs	r0, r0, r1
   1ed6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ed72:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1ed76:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1ed78:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1ed7c:	d107      	bne.n	1ed8e <compare_set+0x9a>
   1ed7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1ed82:	2013      	movs	r0, #19
   1ed84:	f00b fff0 	bl	2ad68 <z_impl_k_busy_wait>
   1ed88:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1ed8c:	4b29      	ldr	r3, [pc, #164]	; (1ee34 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1ed8e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1ed92:	eba4 000c 	sub.w	r0, r4, ip
   1ed96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1ed9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ed9e:	bf88      	it	hi
   1eda0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eda2:	2000      	movs	r0, #0
   1eda4:	6038      	str	r0, [r7, #0]
   1eda6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1eda8:	9801      	ldr	r0, [sp, #4]
   1edaa:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1edae:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1edb2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1edb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1edba:	4281      	cmp	r1, r0
   1edbc:	d006      	beq.n	1edcc <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1edbe:	1a20      	subs	r0, r4, r0
   1edc0:	3802      	subs	r0, #2
   1edc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1edc6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1edca:	d819      	bhi.n	1ee00 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1edcc:	1aa4      	subs	r4, r4, r2
   1edce:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1edd2:	eb14 0a06 	adds.w	sl, r4, r6
   1edd6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1edda:	4915      	ldr	r1, [pc, #84]	; (1ee30 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1eddc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1edde:	012b      	lsls	r3, r5, #4
   1ede0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1ede4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1ede8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1edea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1edec:	6053      	str	r3, [r2, #4]
	return ret;
   1edee:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1edf0:	4628      	mov	r0, r5
   1edf2:	9900      	ldr	r1, [sp, #0]
   1edf4:	f7ff ff2e 	bl	1ec54 <compare_int_unlock>
}
   1edf8:	4620      	mov	r0, r4
   1edfa:	b005      	add	sp, #20
   1edfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee00:	4620      	mov	r0, r4
   1ee02:	e7b1      	b.n	1ed68 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1ee04:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ee06:	4a0c      	ldr	r2, [pc, #48]	; (1ee38 <compare_set+0x144>)
   1ee08:	f3bf 8f5b 	dmb	ish
   1ee0c:	40ab      	lsls	r3, r5
   1ee0e:	e852 1f00 	ldrex	r1, [r2]
   1ee12:	4319      	orrs	r1, r3
   1ee14:	e842 1000 	strex	r0, r1, [r2]
   1ee18:	2800      	cmp	r0, #0
   1ee1a:	d1f8      	bne.n	1ee0e <compare_set+0x11a>
   1ee1c:	f3bf 8f5b 	dmb	ish
   1ee20:	46b2      	mov	sl, r6
   1ee22:	46c3      	mov	fp, r8
   1ee24:	e7d9      	b.n	1edda <compare_set+0xe6>
			return -EINVAL;
   1ee26:	f06f 0415 	mvn.w	r4, #21
   1ee2a:	e7e1      	b.n	1edf0 <compare_set+0xfc>
   1ee2c:	01000001 	.word	0x01000001
   1ee30:	20002268 	.word	0x20002268
   1ee34:	40011000 	.word	0x40011000
   1ee38:	20003000 	.word	0x20003000

0001ee3c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1ee3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ee3e:	4b19      	ldr	r3, [pc, #100]	; (1eea4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1ee40:	4d19      	ldr	r5, [pc, #100]	; (1eea8 <sys_clock_driver_init+0x6c>)
   1ee42:	2400      	movs	r4, #0
   1ee44:	f04f 30ff 	mov.w	r0, #4294967295
   1ee48:	f04f 31ff 	mov.w	r1, #4294967295
   1ee4c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1ee50:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1ee54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ee58:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ee5c:	4b13      	ldr	r3, [pc, #76]	; (1eeac <sys_clock_driver_init+0x70>)
   1ee5e:	2602      	movs	r6, #2
   1ee60:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ee64:	2101      	movs	r1, #1
   1ee66:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1ee6a:	2011      	movs	r0, #17
   1ee6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ee70:	4622      	mov	r2, r4
   1ee72:	f7f5 fd11 	bl	14898 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ee76:	2011      	movs	r0, #17
   1ee78:	f7f5 fcdc 	bl	14834 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ee7c:	4a0c      	ldr	r2, [pc, #48]	; (1eeb0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ee7e:	2301      	movs	r3, #1
   1ee80:	60ab      	str	r3, [r5, #8]
   1ee82:	602b      	str	r3, [r5, #0]
   1ee84:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ee86:	4b0b      	ldr	r3, [pc, #44]	; (1eeb4 <sys_clock_driver_init+0x78>)
   1ee88:	4a0b      	ldr	r2, [pc, #44]	; (1eeb8 <sys_clock_driver_init+0x7c>)
   1ee8a:	9300      	str	r3, [sp, #0]
   1ee8c:	9401      	str	r4, [sp, #4]
   1ee8e:	2300      	movs	r3, #0
   1ee90:	4620      	mov	r0, r4
   1ee92:	f7ff ff2f 	bl	1ecf4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ee96:	4630      	mov	r0, r6
   1ee98:	f7fe fd92 	bl	1d9c0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ee9c:	4620      	mov	r0, r4
   1ee9e:	b002      	add	sp, #8
   1eea0:	bd70      	pop	{r4, r5, r6, pc}
   1eea2:	bf00      	nop
   1eea4:	20002268 	.word	0x20002268
   1eea8:	40011000 	.word	0x40011000
   1eeac:	e000e100 	.word	0xe000e100
   1eeb0:	20003004 	.word	0x20003004
   1eeb4:	0001ebdd 	.word	0x0001ebdd
   1eeb8:	007fffff 	.word	0x007fffff

0001eebc <rtc_nrf_isr>:
{
   1eebc:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1eec0:	4c2c      	ldr	r4, [pc, #176]	; (1ef74 <rtc_nrf_isr+0xb8>)
   1eec2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1eec6:	0799      	lsls	r1, r3, #30
   1eec8:	d50b      	bpl.n	1eee2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eeca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1eece:	b143      	cbz	r3, 1eee2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1eed0:	4a29      	ldr	r2, [pc, #164]	; (1ef78 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eed2:	2300      	movs	r3, #0
   1eed4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1eed8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1eedc:	6813      	ldr	r3, [r2, #0]
   1eede:	3301      	adds	r3, #1
   1eee0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1eee2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1eee6:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1eee8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1eeec:	03d2      	lsls	r2, r2, #15
   1eeee:	d52d      	bpl.n	1ef4c <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eef0:	f3bf 8f5b 	dmb	ish
   1eef4:	4a21      	ldr	r2, [pc, #132]	; (1ef7c <rtc_nrf_isr+0xc0>)
   1eef6:	e852 1f00 	ldrex	r1, [r2]
   1eefa:	f021 0001 	bic.w	r0, r1, #1
   1eefe:	e842 0500 	strex	r5, r0, [r2]
   1ef02:	2d00      	cmp	r5, #0
   1ef04:	d1f7      	bne.n	1eef6 <rtc_nrf_isr+0x3a>
   1ef06:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1ef0a:	b911      	cbnz	r1, 1ef12 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ef0c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1ef10:	b1e2      	cbz	r2, 1ef4c <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ef12:	2500      	movs	r5, #0
   1ef14:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1ef18:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ef1c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1ef20:	f7ff fec6 	bl	1ecb0 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ef24:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ef28:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1ef2a:	4b15      	ldr	r3, [pc, #84]	; (1ef80 <rtc_nrf_isr+0xc4>)
   1ef2c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1ef30:	42b0      	cmp	r0, r6
   1ef32:	41b9      	sbcs	r1, r7
   1ef34:	d20f      	bcs.n	1ef56 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1ef36:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ef38:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1ef3c:	b141      	cbz	r1, 1ef50 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1ef3e:	f8cd 8000 	str.w	r8, [sp]
   1ef42:	4632      	mov	r2, r6
   1ef44:	463b      	mov	r3, r7
   1ef46:	2000      	movs	r0, #0
   1ef48:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ef4a:	e001      	b.n	1ef50 <rtc_nrf_isr+0x94>
   1ef4c:	f383 8810 	msr	PRIMASK, r3
}
   1ef50:	b002      	add	sp, #8
   1ef52:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ef56:	f04f 3aff 	mov.w	sl, #4294967295
   1ef5a:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1ef5e:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ef62:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1ef66:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ef68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ef6c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1ef70:	e7e2      	b.n	1ef38 <rtc_nrf_isr+0x7c>
   1ef72:	bf00      	nop
   1ef74:	40011000 	.word	0x40011000
   1ef78:	20003008 	.word	0x20003008
   1ef7c:	20003000 	.word	0x20003000
   1ef80:	20002268 	.word	0x20002268

0001ef84 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ef84:	1c43      	adds	r3, r0, #1
{
   1ef86:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ef88:	d021      	beq.n	1efce <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1ef8a:	2801      	cmp	r0, #1
   1ef8c:	dd21      	ble.n	1efd2 <sys_clock_set_timeout+0x4e>
   1ef8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ef92:	da20      	bge.n	1efd6 <sys_clock_set_timeout+0x52>
   1ef94:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ef96:	f7ff fe8b 	bl	1ecb0 <z_nrf_rtc_timer_read>
   1ef9a:	4b10      	ldr	r3, [pc, #64]	; (1efdc <sys_clock_set_timeout+0x58>)
   1ef9c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1efa0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1efa2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1efa6:	bf28      	it	cs
   1efa8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1efaa:	3001      	adds	r0, #1
   1efac:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1efae:	480c      	ldr	r0, [pc, #48]	; (1efe0 <sys_clock_set_timeout+0x5c>)
   1efb0:	4282      	cmp	r2, r0
   1efb2:	bf28      	it	cs
   1efb4:	4602      	movcs	r2, r0
   1efb6:	1852      	adds	r2, r2, r1
   1efb8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1efbc:	4909      	ldr	r1, [pc, #36]	; (1efe4 <sys_clock_set_timeout+0x60>)
   1efbe:	9001      	str	r0, [sp, #4]
   1efc0:	9100      	str	r1, [sp, #0]
   1efc2:	f143 0300 	adc.w	r3, r3, #0
   1efc6:	f7ff fe95 	bl	1ecf4 <compare_set>
}
   1efca:	b002      	add	sp, #8
   1efcc:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1efce:	4804      	ldr	r0, [pc, #16]	; (1efe0 <sys_clock_set_timeout+0x5c>)
   1efd0:	e7e0      	b.n	1ef94 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1efd2:	2400      	movs	r4, #0
   1efd4:	e7df      	b.n	1ef96 <sys_clock_set_timeout+0x12>
   1efd6:	4c02      	ldr	r4, [pc, #8]	; (1efe0 <sys_clock_set_timeout+0x5c>)
   1efd8:	e7dd      	b.n	1ef96 <sys_clock_set_timeout+0x12>
   1efda:	bf00      	nop
   1efdc:	20002278 	.word	0x20002278
   1efe0:	007fffff 	.word	0x007fffff
   1efe4:	0001ebdd 	.word	0x0001ebdd

0001efe8 <sys_clock_elapsed>:
{
   1efe8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1efea:	f7ff fe61 	bl	1ecb0 <z_nrf_rtc_timer_read>
   1efee:	4b02      	ldr	r3, [pc, #8]	; (1eff8 <sys_clock_elapsed+0x10>)
   1eff0:	681b      	ldr	r3, [r3, #0]
}
   1eff2:	1ac0      	subs	r0, r0, r3
   1eff4:	bd08      	pop	{r3, pc}
   1eff6:	bf00      	nop
   1eff8:	20002278 	.word	0x20002278

0001effc <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   1effc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f000:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1f002:	2801      	cmp	r0, #1
   1f004:	4b04      	ldr	r3, [pc, #16]	; (1f018 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f006:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1f00a:	bf18      	it	ne
   1f00c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f010:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1f012:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1f016:	4770      	bx	lr
   1f018:	50000300 	.word	0x50000300

0001f01c <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   1f01c:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   1f01e:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f022:	2c00      	cmp	r4, #0
   1f024:	bf08      	it	eq
   1f026:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1f028:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   1f02c:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f030:	bf1c      	itt	ne
   1f032:	2501      	movne	r5, #1
   1f034:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
   1f036:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
   1f03a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f03e:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
   1f042:	4806      	ldr	r0, [pc, #24]	; (1f05c <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f044:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
   1f048:	bf08      	it	eq
   1f04a:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1f04e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f052:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1f056:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   1f05a:	bd30      	pop	{r4, r5, pc}
   1f05c:	50000300 	.word	0x50000300

0001f060 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1f060:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f064:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1f066:	2801      	cmp	r0, #1
   1f068:	4b04      	ldr	r3, [pc, #16]	; (1f07c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f06a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1f06e:	bf18      	it	ne
   1f070:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f074:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1f076:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1f07a:	4770      	bx	lr
   1f07c:	50000300 	.word	0x50000300

0001f080 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1f080:	4602      	mov	r2, r0
   1f082:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1f084:	4801      	ldr	r0, [pc, #4]	; (1f08c <multithreading_lock_acquire+0xc>)
   1f086:	f002 ba79 	b.w	2157c <z_impl_k_mutex_lock>
   1f08a:	bf00      	nop
   1f08c:	20000a20 	.word	0x20000a20

0001f090 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1f090:	4801      	ldr	r0, [pc, #4]	; (1f098 <multithreading_lock_release+0x8>)
   1f092:	f002 baeb 	b.w	2166c <z_impl_k_mutex_unlock>
   1f096:	bf00      	nop
   1f098:	20000a20 	.word	0x20000a20

0001f09c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f09c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1f09e:	f7f4 fb89 	bl	137b4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1f0a2:	4b07      	ldr	r3, [pc, #28]	; (1f0c0 <k_sys_fatal_error_handler+0x24>)
   1f0a4:	9305      	str	r3, [sp, #20]
   1f0a6:	2302      	movs	r3, #2
   1f0a8:	9304      	str	r3, [sp, #16]
   1f0aa:	4806      	ldr	r0, [pc, #24]	; (1f0c4 <k_sys_fatal_error_handler+0x28>)
   1f0ac:	2300      	movs	r3, #0
   1f0ae:	aa04      	add	r2, sp, #16
   1f0b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f0b4:	f7f4 fc66 	bl	13984 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1f0b8:	2000      	movs	r0, #0
   1f0ba:	f7f6 f93d 	bl	15338 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1f0be:	bf00      	nop
   1f0c0:	0002e817 	.word	0x0002e817
   1f0c4:	0002b544 	.word	0x0002b544

0001f0c8 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1f0c8:	b598      	push	{r3, r4, r7, lr}
   1f0ca:	af00      	add	r7, sp, #0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1f0cc:	466c      	mov	r4, sp
   1f0ce:	b08a      	sub	sp, #40	; 0x28
   1f0d0:	466a      	mov	r2, sp
   1f0d2:	4b0c      	ldr	r3, [pc, #48]	; (1f104 <sdc_assertion_handler+0x3c>)
   1f0d4:	61d1      	str	r1, [r2, #28]
   1f0d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f0da:	2302      	movs	r3, #2
   1f0dc:	f882 3020 	strb.w	r3, [r2, #32]
   1f0e0:	4b09      	ldr	r3, [pc, #36]	; (1f108 <sdc_assertion_handler+0x40>)
   1f0e2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0e6:	4809      	ldr	r0, [pc, #36]	; (1f10c <sdc_assertion_handler+0x44>)
   1f0e8:	2300      	movs	r3, #0
   1f0ea:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1f0ee:	f7f4 fc49 	bl	13984 <z_impl_z_log_msg_static_create>
   1f0f2:	46a5      	mov	sp, r4
	k_oops();
   1f0f4:	4040      	eors	r0, r0
   1f0f6:	f380 8811 	msr	BASEPRI, r0
   1f0fa:	f04f 0003 	mov.w	r0, #3
   1f0fe:	df02      	svc	2
}
   1f100:	46bd      	mov	sp, r7
   1f102:	bd98      	pop	{r3, r4, r7, pc}
   1f104:	0002e834 	.word	0x0002e834
   1f108:	01000004 	.word	0x01000004
   1f10c:	0002b5b4 	.word	0x0002b5b4

0001f110 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1f110:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1f112:	4804      	ldr	r0, [pc, #16]	; (1f124 <hci_driver_init+0x14>)
   1f114:	f7f7 fde0 	bl	16cd8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1f118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1f11c:	4802      	ldr	r0, [pc, #8]	; (1f128 <hci_driver_init+0x18>)
   1f11e:	f7e5 bcd9 	b.w	4ad4 <sdc_init>
   1f122:	bf00      	nop
   1f124:	0002c120 	.word	0x0002c120
   1f128:	0001f0c9 	.word	0x0001f0c9

0001f12c <rand_prio_low_vector_get>:
{
   1f12c:	b538      	push	{r3, r4, r5, lr}
   1f12e:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1f130:	4807      	ldr	r0, [pc, #28]	; (1f150 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1f132:	6883      	ldr	r3, [r0, #8]
   1f134:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f136:	460a      	mov	r2, r1
   1f138:	b135      	cbz	r5, 1f148 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1f13a:	2300      	movs	r3, #0
   1f13c:	4621      	mov	r1, r4
   1f13e:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1f140:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1f144:	b2c0      	uxtb	r0, r0
   1f146:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f148:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f14c:	e7f8      	b.n	1f140 <rand_prio_low_vector_get+0x14>
   1f14e:	bf00      	nop
   1f150:	0002b1e4 	.word	0x0002b1e4

0001f154 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1f154:	4901      	ldr	r1, [pc, #4]	; (1f15c <receive_signal_raise+0x8>)
   1f156:	4802      	ldr	r0, [pc, #8]	; (1f160 <receive_signal_raise+0xc>)
   1f158:	f00b bc4a 	b.w	2a9f0 <k_work_submit_to_queue>
   1f15c:	2000300c 	.word	0x2000300c
   1f160:	20002300 	.word	0x20002300

0001f164 <rand_prio_low_vector_get_blocking>:
{
   1f164:	b410      	push	{r4}
   1f166:	4603      	mov	r3, r0
   1f168:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1f16a:	4803      	ldr	r0, [pc, #12]	; (1f178 <rand_prio_low_vector_get_blocking+0x14>)
   1f16c:	6881      	ldr	r1, [r0, #8]
   1f16e:	680c      	ldr	r4, [r1, #0]
   1f170:	4619      	mov	r1, r3
   1f172:	4623      	mov	r3, r4
}
   1f174:	bc10      	pop	{r4}
   1f176:	4718      	bx	r3
   1f178:	0002b1e4 	.word	0x0002b1e4

0001f17c <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1f17c:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1f17e:	4e1a      	ldr	r6, [pc, #104]	; (1f1e8 <event_packet_process.constprop.0+0x6c>)
   1f180:	7830      	ldrb	r0, [r6, #0]
   1f182:	283e      	cmp	r0, #62	; 0x3e
static void event_packet_process(uint8_t *hci_buf)
   1f184:	b086      	sub	sp, #24
	switch (hdr->evt) {
   1f186:	d019      	beq.n	1f1bc <event_packet_process.constprop.0+0x40>
   1f188:	28ff      	cmp	r0, #255	; 0xff
   1f18a:	d01e      	beq.n	1f1ca <event_packet_process.constprop.0+0x4e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f18c:	f04f 32ff 	mov.w	r2, #4294967295
   1f190:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1f194:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f196:	4621      	mov	r1, r4
   1f198:	f7f6 fb7c 	bl	15894 <bt_buf_get_evt>
	if (!evt_buf) {
   1f19c:	4605      	mov	r5, r0
   1f19e:	b9b8      	cbnz	r0, 1f1d0 <event_packet_process.constprop.0+0x54>
		if (discardable) {
   1f1a0:	b954      	cbnz	r4, 1f1b8 <event_packet_process.constprop.0+0x3c>
		BT_ERR("No event buffer available");
   1f1a2:	4b12      	ldr	r3, [pc, #72]	; (1f1ec <event_packet_process.constprop.0+0x70>)
   1f1a4:	9305      	str	r3, [sp, #20]
   1f1a6:	2302      	movs	r3, #2
   1f1a8:	9304      	str	r3, [sp, #16]
   1f1aa:	4811      	ldr	r0, [pc, #68]	; (1f1f0 <event_packet_process.constprop.0+0x74>)
   1f1ac:	4623      	mov	r3, r4
   1f1ae:	aa04      	add	r2, sp, #16
   1f1b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f1b4:	f7f4 fbe6 	bl	13984 <z_impl_z_log_msg_static_create>
}
   1f1b8:	b006      	add	sp, #24
   1f1ba:	bd70      	pop	{r4, r5, r6, pc}
		switch (me->subevent) {
   1f1bc:	78b3      	ldrb	r3, [r6, #2]
   1f1be:	2b02      	cmp	r3, #2
		switch (subevent) {
   1f1c0:	d1e4      	bne.n	1f18c <event_packet_process.constprop.0+0x10>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f1c2:	2200      	movs	r2, #0
   1f1c4:	2300      	movs	r3, #0
		switch (subevent) {
   1f1c6:	2401      	movs	r4, #1
   1f1c8:	e7e5      	b.n	1f196 <event_packet_process.constprop.0+0x1a>
   1f1ca:	78b3      	ldrb	r3, [r6, #2]
   1f1cc:	2b80      	cmp	r3, #128	; 0x80
   1f1ce:	e7f7      	b.n	1f1c0 <event_packet_process.constprop.0+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f1d0:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f1d2:	4905      	ldr	r1, [pc, #20]	; (1f1e8 <event_packet_process.constprop.0+0x6c>)
   1f1d4:	3202      	adds	r2, #2
   1f1d6:	3008      	adds	r0, #8
   1f1d8:	f00a fd0d 	bl	29bf6 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f1dc:	4628      	mov	r0, r5
}
   1f1de:	b006      	add	sp, #24
   1f1e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1f1e4:	f7f7 bd42 	b.w	16c6c <bt_recv>
   1f1e8:	20003db0 	.word	0x20003db0
   1f1ec:	0002e859 	.word	0x0002e859
   1f1f0:	0002b5b4 	.word	0x0002b5b4

0001f1f4 <hci_driver_open>:
{
   1f1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1f8:	b08c      	sub	sp, #48	; 0x30
   1f1fa:	af00      	add	r7, sp, #0
		hci_ecdh_init();
   1f1fc:	f000 fdb4 	bl	1fd68 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1f200:	1d38      	adds	r0, r7, #4
   1f202:	f7e5 fbcb 	bl	499c <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f206:	466c      	mov	r4, sp
   1f208:	b088      	sub	sp, #32
   1f20a:	466a      	mov	r2, sp
   1f20c:	4b61      	ldr	r3, [pc, #388]	; (1f394 <hci_driver_open+0x1a0>)
   1f20e:	6153      	str	r3, [r2, #20]
   1f210:	4b61      	ldr	r3, [pc, #388]	; (1f398 <hci_driver_open+0x1a4>)
   1f212:	6193      	str	r3, [r2, #24]
   1f214:	f04f 0802 	mov.w	r8, #2
   1f218:	4b60      	ldr	r3, [pc, #384]	; (1f39c <hci_driver_open+0x1a8>)
   1f21a:	f882 801c 	strb.w	r8, [r2, #28]
   1f21e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f222:	495f      	ldr	r1, [pc, #380]	; (1f3a0 <hci_driver_open+0x1ac>)
   1f224:	485f      	ldr	r0, [pc, #380]	; (1f3a4 <hci_driver_open+0x1b0>)
   1f226:	1d3b      	adds	r3, r7, #4
   1f228:	f7f4 fbac 	bl	13984 <z_impl_z_log_msg_static_create>
   1f22c:	46a5      	mov	sp, r4
			err = sdc_support_adv();
   1f22e:	f7e5 fccf 	bl	4bd0 <sdc_support_adv>
			if (err) {
   1f232:	b128      	cbz	r0, 1f240 <hci_driver_open+0x4c>
				return -ENOTSUP;
   1f234:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1f238:	3730      	adds	r7, #48	; 0x30
   1f23a:	46bd      	mov	sp, r7
   1f23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdc_support_peripheral();
   1f240:	f7e5 fcf8 	bl	4c34 <sdc_support_peripheral>
		if (err) {
   1f244:	2800      	cmp	r0, #0
   1f246:	d1f5      	bne.n	1f234 <hci_driver_open+0x40>
			err = sdc_support_dle_peripheral();
   1f248:	f7e5 fcd2 	bl	4bf0 <sdc_support_dle_peripheral>
			if (err) {
   1f24c:	2800      	cmp	r0, #0
   1f24e:	d1f1      	bne.n	1f234 <hci_driver_open+0x40>
		err = sdc_support_le_2m_phy();
   1f250:	f7e5 fcde 	bl	4c10 <sdc_support_le_2m_phy>
		if (err) {
   1f254:	2800      	cmp	r0, #0
   1f256:	d1ed      	bne.n	1f234 <hci_driver_open+0x40>
			err = sdc_support_phy_update_peripheral();
   1f258:	f7e5 fcfc 	bl	4c54 <sdc_support_phy_update_peripheral>
			if (err) {
   1f25c:	4605      	mov	r5, r0
   1f25e:	2800      	cmp	r0, #0
   1f260:	d1e8      	bne.n	1f234 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f262:	f107 0418 	add.w	r4, r7, #24
   1f266:	4622      	mov	r2, r4
   1f268:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1f26a:	7638      	strb	r0, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f26c:	f7e5 fba4 	bl	49b8 <sdc_cfg_set>
	if (required_memory < 0) {
   1f270:	2800      	cmp	r0, #0
   1f272:	dbe1      	blt.n	1f238 <hci_driver_open+0x44>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f274:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f276:	4622      	mov	r2, r4
   1f278:	4641      	mov	r1, r8
   1f27a:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f27c:	763e      	strb	r6, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f27e:	f7e5 fb9b 	bl	49b8 <sdc_cfg_set>
	if (required_memory < 0) {
   1f282:	2800      	cmp	r0, #0
   1f284:	dbd8      	blt.n	1f238 <hci_driver_open+0x44>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f286:	4b48      	ldr	r3, [pc, #288]	; (1f3a8 <hci_driver_open+0x1b4>)
   1f288:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f28a:	4622      	mov	r2, r4
   1f28c:	2103      	movs	r1, #3
   1f28e:	4628      	mov	r0, r5
   1f290:	f7e5 fb92 	bl	49b8 <sdc_cfg_set>
	if (required_memory < 0) {
   1f294:	2800      	cmp	r0, #0
   1f296:	dbcf      	blt.n	1f238 <hci_driver_open+0x44>
	cfg.event_length.event_length_us =
   1f298:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f29c:	4622      	mov	r2, r4
   1f29e:	2104      	movs	r1, #4
   1f2a0:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1f2a2:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f2a4:	f7e5 fb88 	bl	49b8 <sdc_cfg_set>
	if (required_memory < 0) {
   1f2a8:	2800      	cmp	r0, #0
   1f2aa:	dbc5      	blt.n	1f238 <hci_driver_open+0x44>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f2ac:	4622      	mov	r2, r4
   1f2ae:	2105      	movs	r1, #5
   1f2b0:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f2b2:	763e      	strb	r6, [r7, #24]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f2b4:	f7e5 fb80 	bl	49b8 <sdc_cfg_set>
	if (required_memory < 0) {
   1f2b8:	2800      	cmp	r0, #0
   1f2ba:	dbbd      	blt.n	1f238 <hci_driver_open+0x44>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f2bc:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f2be:	4622      	mov	r2, r4
   1f2c0:	2107      	movs	r1, #7
   1f2c2:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f2c4:	833b      	strh	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f2c6:	f7e5 fb77 	bl	49b8 <sdc_cfg_set>
		if (required_memory < 0) {
   1f2ca:	2800      	cmp	r0, #0
   1f2cc:	dbb4      	blt.n	1f238 <hci_driver_open+0x44>
	if (required_memory > sizeof(sdc_mempool)) {
   1f2ce:	f240 7314 	movw	r3, #1812	; 0x714
   1f2d2:	4298      	cmp	r0, r3
   1f2d4:	dd19      	ble.n	1f30a <hci_driver_open+0x116>
		BT_ERR("Allocated memory too low: %u < %u",
   1f2d6:	466c      	mov	r4, sp
   1f2d8:	b088      	sub	sp, #32
   1f2da:	466a      	mov	r2, sp
   1f2dc:	4933      	ldr	r1, [pc, #204]	; (1f3ac <hci_driver_open+0x1b8>)
   1f2de:	61d0      	str	r0, [r2, #28]
   1f2e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f2e4:	2304      	movs	r3, #4
   1f2e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2ea:	482e      	ldr	r0, [pc, #184]	; (1f3a4 <hci_driver_open+0x1b0>)
   1f2ec:	2300      	movs	r3, #0
   1f2ee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f2f2:	f7f4 fb47 	bl	13984 <z_impl_z_log_msg_static_create>
   1f2f6:	46a5      	mov	sp, r4
		k_panic();
   1f2f8:	4040      	eors	r0, r0
   1f2fa:	f380 8811 	msr	BASEPRI, r0
   1f2fe:	f04f 0004 	mov.w	r0, #4
   1f302:	df02      	svc	2
		return -ENOMEM;
   1f304:	f06f 000b 	mvn.w	r0, #11
   1f308:	e796      	b.n	1f238 <hci_driver_open+0x44>
   1f30a:	4829      	ldr	r0, [pc, #164]	; (1f3b0 <hci_driver_open+0x1bc>)
   1f30c:	f00b f91b 	bl	2a546 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1f310:	4603      	mov	r3, r0
   1f312:	b968      	cbnz	r0, 1f330 <hci_driver_open+0x13c>
		BT_ERR("Entropy source device not ready");
   1f314:	4a27      	ldr	r2, [pc, #156]	; (1f3b4 <hci_driver_open+0x1c0>)
   1f316:	62fa      	str	r2, [r7, #44]	; 0x2c
   1f318:	2202      	movs	r2, #2
   1f31a:	62ba      	str	r2, [r7, #40]	; 0x28
   1f31c:	4821      	ldr	r0, [pc, #132]	; (1f3a4 <hci_driver_open+0x1b0>)
   1f31e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1f322:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f326:	f7f4 fb2d 	bl	13984 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1f32a:	f06f 0012 	mvn.w	r0, #18
   1f32e:	e783      	b.n	1f238 <hci_driver_open+0x44>
	sdc_rand_source_t rand_functions = {
   1f330:	4b21      	ldr	r3, [pc, #132]	; (1f3b8 <hci_driver_open+0x1c4>)
   1f332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1f336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f33a:	4620      	mov	r0, r4
   1f33c:	f7e5 fcdc 	bl	4cf8 <sdc_rand_source_register>
	if (err) {
   1f340:	b190      	cbz	r0, 1f368 <hci_driver_open+0x174>
		BT_ERR("Failed to register rand source (%d)", err);
   1f342:	466c      	mov	r4, sp
   1f344:	b088      	sub	sp, #32
   1f346:	466a      	mov	r2, sp
   1f348:	4b1c      	ldr	r3, [pc, #112]	; (1f3bc <hci_driver_open+0x1c8>)
   1f34a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f34e:	2303      	movs	r3, #3
   1f350:	f842 3f10 	str.w	r3, [r2, #16]!
   1f354:	4813      	ldr	r0, [pc, #76]	; (1f3a4 <hci_driver_open+0x1b0>)
   1f356:	2300      	movs	r3, #0
   1f358:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f35c:	f7f4 fb12 	bl	13984 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f360:	f06f 0015 	mvn.w	r0, #21
   1f364:	46a5      	mov	sp, r4
   1f366:	e767      	b.n	1f238 <hci_driver_open+0x44>
	k_work_init(&receive_work, receive_work_handler);
   1f368:	4915      	ldr	r1, [pc, #84]	; (1f3c0 <hci_driver_open+0x1cc>)
   1f36a:	4816      	ldr	r0, [pc, #88]	; (1f3c4 <hci_driver_open+0x1d0>)
   1f36c:	f00b fb13 	bl	2a996 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f370:	f04f 30ff 	mov.w	r0, #4294967295
   1f374:	f04f 31ff 	mov.w	r1, #4294967295
   1f378:	f7ff fe82 	bl	1f080 <multithreading_lock_acquire>
	if (!err) {
   1f37c:	4604      	mov	r4, r0
   1f37e:	b930      	cbnz	r0, 1f38e <hci_driver_open+0x19a>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1f380:	4911      	ldr	r1, [pc, #68]	; (1f3c8 <hci_driver_open+0x1d4>)
   1f382:	4812      	ldr	r0, [pc, #72]	; (1f3cc <hci_driver_open+0x1d8>)
   1f384:	f7e5 fb7e 	bl	4a84 <sdc_enable>
   1f388:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f38a:	f7ff fe81 	bl	1f090 <multithreading_lock_release>
	if (err < 0) {
   1f38e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f392:	e751      	b.n	1f238 <hci_driver_open+0x44>
   1f394:	0002d334 	.word	0x0002d334
   1f398:	0002e873 	.word	0x0002e873
   1f39c:	01000003 	.word	0x01000003
   1f3a0:	00a01ac0 	.word	0x00a01ac0
   1f3a4:	0002b5b4 	.word	0x0002b5b4
   1f3a8:	02031b1b 	.word	0x02031b1b
   1f3ac:	0002e89a 	.word	0x0002e89a
   1f3b0:	0002b1e4 	.word	0x0002b1e4
   1f3b4:	0002e8bc 	.word	0x0002e8bc
   1f3b8:	0002b8b8 	.word	0x0002b8b8
   1f3bc:	0002e8dc 	.word	0x0002e8dc
   1f3c0:	0002a1b1 	.word	0x0002a1b1
   1f3c4:	2000300c 	.word	0x2000300c
   1f3c8:	20003df9 	.word	0x20003df9
   1f3cc:	0001f431 	.word	0x0001f431

0001f3d0 <data_packet_process.part.0>:
static void data_packet_process(uint8_t *hci_buf)
   1f3d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("No data buffer available");
   1f3d2:	4b07      	ldr	r3, [pc, #28]	; (1f3f0 <data_packet_process.part.0+0x20>)
   1f3d4:	9305      	str	r3, [sp, #20]
   1f3d6:	2302      	movs	r3, #2
   1f3d8:	9304      	str	r3, [sp, #16]
   1f3da:	4806      	ldr	r0, [pc, #24]	; (1f3f4 <data_packet_process.part.0+0x24>)
   1f3dc:	2300      	movs	r3, #0
   1f3de:	aa04      	add	r2, sp, #16
   1f3e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f3e4:	f7f4 face 	bl	13984 <z_impl_z_log_msg_static_create>
}
   1f3e8:	b007      	add	sp, #28
   1f3ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1f3ee:	bf00      	nop
   1f3f0:	0002e900 	.word	0x0002e900
   1f3f4:	0002b5b4 	.word	0x0002b5b4

0001f3f8 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1f3f8:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f3fa:	f04f 32ff 	mov.w	r2, #4294967295
   1f3fe:	f04f 33ff 	mov.w	r3, #4294967295
   1f402:	2003      	movs	r0, #3
   1f404:	f7f6 fa1c 	bl	15840 <bt_buf_get_rx>
	if (!data_buf) {
   1f408:	4604      	mov	r4, r0
   1f40a:	b918      	cbnz	r0, 1f414 <data_packet_process.constprop.0+0x1c>
}
   1f40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f410:	f7ff bfde 	b.w	1f3d0 <data_packet_process.part.0>
	len = sys_le16_to_cpu(hdr->len);
   1f414:	4905      	ldr	r1, [pc, #20]	; (1f42c <data_packet_process.constprop.0+0x34>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1f416:	884a      	ldrh	r2, [r1, #2]
   1f418:	3008      	adds	r0, #8
   1f41a:	3204      	adds	r2, #4
   1f41c:	f00a fbeb 	bl	29bf6 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f420:	4620      	mov	r0, r4
}
   1f422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1f426:	f7f7 bc21 	b.w	16c6c <bt_recv>
   1f42a:	bf00      	nop
   1f42c:	20003db0 	.word	0x20003db0

0001f430 <hci_driver_receive_process>:
{
   1f430:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f432:	f04f 30ff 	mov.w	r0, #4294967295
   1f436:	f04f 31ff 	mov.w	r1, #4294967295
   1f43a:	f7ff fe21 	bl	1f080 <multithreading_lock_acquire>
	if (!errcode) {
   1f43e:	b1c0      	cbz	r0, 1f472 <hci_driver_receive_process+0x42>
		return false;
   1f440:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f442:	f04f 30ff 	mov.w	r0, #4294967295
   1f446:	f04f 31ff 	mov.w	r1, #4294967295
   1f44a:	f7ff fe19 	bl	1f080 <multithreading_lock_acquire>
	if (!errcode) {
   1f44e:	b1e0      	cbz	r0, 1f48a <hci_driver_receive_process+0x5a>
		return false;
   1f450:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f452:	f04f 30ff 	mov.w	r0, #4294967295
   1f456:	f04f 31ff 	mov.w	r1, #4294967295
   1f45a:	f7ff fe11 	bl	1f080 <multithreading_lock_acquire>
	if (!errcode) {
   1f45e:	b300      	cbz	r0, 1f4a2 <hci_driver_receive_process+0x72>
		return false;
   1f460:	2300      	movs	r3, #0
	if (received_evt || received_data || received_msg) {
   1f462:	b90e      	cbnz	r6, 1f468 <hci_driver_receive_process+0x38>
   1f464:	b905      	cbnz	r5, 1f468 <hci_driver_receive_process+0x38>
   1f466:	b39b      	cbz	r3, 1f4d0 <hci_driver_receive_process+0xa0>
}
   1f468:	b002      	add	sp, #8
   1f46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1f46e:	f7ff be71 	b.w	1f154 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f472:	4818      	ldr	r0, [pc, #96]	; (1f4d4 <hci_driver_receive_process+0xa4>)
   1f474:	f000 fb3e 	bl	1faf4 <hci_internal_evt_get>
   1f478:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f47a:	f7ff fe09 	bl	1f090 <multithreading_lock_release>
	if (errcode) {
   1f47e:	2c00      	cmp	r4, #0
   1f480:	d1de      	bne.n	1f440 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1f482:	f7ff fe7b 	bl	1f17c <event_packet_process.constprop.0>
	return true;
   1f486:	2601      	movs	r6, #1
   1f488:	e7db      	b.n	1f442 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f48a:	4812      	ldr	r0, [pc, #72]	; (1f4d4 <hci_driver_receive_process+0xa4>)
   1f48c:	f7ee f99f 	bl	d7ce <sdc_hci_data_get>
   1f490:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f492:	f7ff fdfd 	bl	1f090 <multithreading_lock_release>
	if (errcode) {
   1f496:	2c00      	cmp	r4, #0
   1f498:	d1da      	bne.n	1f450 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1f49a:	f7ff ffad 	bl	1f3f8 <data_packet_process.constprop.0>
	return true;
   1f49e:	2501      	movs	r5, #1
   1f4a0:	e7d7      	b.n	1f452 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1f4a2:	480c      	ldr	r0, [pc, #48]	; (1f4d4 <hci_driver_receive_process+0xa4>)
   1f4a4:	f10d 0107 	add.w	r1, sp, #7
   1f4a8:	f000 fb36 	bl	1fb18 <hci_internal_msg_get>
   1f4ac:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f4ae:	f7ff fdef 	bl	1f090 <multithreading_lock_release>
	if (errcode) {
   1f4b2:	2c00      	cmp	r4, #0
   1f4b4:	d1d4      	bne.n	1f460 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1f4b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4ba:	2b04      	cmp	r3, #4
   1f4bc:	d103      	bne.n	1f4c6 <hci_driver_receive_process+0x96>
		event_packet_process(p_hci_buffer);
   1f4be:	f7ff fe5d 	bl	1f17c <event_packet_process.constprop.0>
	return true;
   1f4c2:	2301      	movs	r3, #1
   1f4c4:	e7cd      	b.n	1f462 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1f4c6:	2b02      	cmp	r3, #2
   1f4c8:	d1ca      	bne.n	1f460 <hci_driver_receive_process+0x30>
		data_packet_process(p_hci_buffer);
   1f4ca:	f7ff ff95 	bl	1f3f8 <data_packet_process.constprop.0>
   1f4ce:	e7f8      	b.n	1f4c2 <hci_driver_receive_process+0x92>
}
   1f4d0:	b002      	add	sp, #8
   1f4d2:	bd70      	pop	{r4, r5, r6, pc}
   1f4d4:	20003db0 	.word	0x20003db0

0001f4d8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f4d8:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f4da:	4c8a      	ldr	r4, [pc, #552]	; (1f704 <hci_internal_cmd_put+0x22c>)
   1f4dc:	7823      	ldrb	r3, [r4, #0]
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	f040 8302 	bne.w	1fae8 <hci_internal_cmd_put+0x610>
	return ((uint16_t)src[1] << 8) | src[0];
   1f4e4:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1f4e6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f4ea:	b22b      	sxth	r3, r5
   1f4ec:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1f4f0:	d20d      	bcs.n	1f50e <hci_internal_cmd_put+0x36>
   1f4f2:	b17a      	cbz	r2, 1f514 <hci_internal_cmd_put+0x3c>
   1f4f4:	3a01      	subs	r2, #1
   1f4f6:	2a07      	cmp	r2, #7
   1f4f8:	d80c      	bhi.n	1f514 <hci_internal_cmd_put+0x3c>
   1f4fa:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f4fe:	000d      	.short	0x000d
   1f500:	0029000b 	.word	0x0029000b
   1f504:	000b005d 	.word	0x000b005d
   1f508:	000b000b 	.word	0x000b000b
   1f50c:	0107      	.short	0x0107
   1f50e:	2a3f      	cmp	r2, #63	; 0x3f
   1f510:	f000 825e 	beq.w	1f9d0 <hci_internal_cmd_put+0x4f8>
	switch (opcode)	{
   1f514:	2001      	movs	r0, #1
   1f516:	e00e      	b.n	1f536 <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   1f518:	f240 4206 	movw	r2, #1030	; 0x406
   1f51c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f51e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f522:	d006      	beq.n	1f532 <hci_internal_cmd_put+0x5a>
   1f524:	f240 421d 	movw	r2, #1053	; 0x41d
   1f528:	4293      	cmp	r3, r2
   1f52a:	d1f3      	bne.n	1f514 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f52c:	f7ee fa90 	bl	da50 <sdc_hci_cmd_lc_read_remote_version_information>
   1f530:	e001      	b.n	1f536 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f532:	f7ee fa8b 	bl	da4c <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f536:	230f      	movs	r3, #15
   1f538:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f53a:	2304      	movs	r3, #4
   1f53c:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f53e:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f540:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f542:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f544:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f548:	2301      	movs	r3, #1
   1f54a:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f54c:	2000      	movs	r0, #0
}
   1f54e:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1f550:	f640 4263 	movw	r2, #3171	; 0xc63
   1f554:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f556:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f55a:	d025      	beq.n	1f5a8 <hci_internal_cmd_put+0xd0>
   1f55c:	dc0f      	bgt.n	1f57e <hci_internal_cmd_put+0xa6>
   1f55e:	f640 4203 	movw	r2, #3075	; 0xc03
   1f562:	4293      	cmp	r3, r2
   1f564:	d018      	beq.n	1f598 <hci_internal_cmd_put+0xc0>
   1f566:	f640 422d 	movw	r2, #3117	; 0xc2d
   1f56a:	4293      	cmp	r3, r2
   1f56c:	d017      	beq.n	1f59e <hci_internal_cmd_put+0xc6>
   1f56e:	f640 4201 	movw	r2, #3073	; 0xc01
   1f572:	4293      	cmp	r3, r2
   1f574:	d1ce      	bne.n	1f514 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f576:	f7ee f95b 	bl	d830 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f57a:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f57c:	e0be      	b.n	1f6fc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f57e:	f640 427b 	movw	r2, #3195	; 0xc7b
   1f582:	4293      	cmp	r3, r2
   1f584:	d013      	beq.n	1f5ae <hci_internal_cmd_put+0xd6>
   1f586:	f640 427c 	movw	r2, #3196	; 0xc7c
   1f58a:	4293      	cmp	r3, r2
   1f58c:	d1c2      	bne.n	1f514 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f58e:	495e      	ldr	r1, [pc, #376]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f590:	f7ee f958 	bl	d844 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f594:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f596:	e0b1      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1f598:	f7e5 fc9c 	bl	4ed4 <sdc_hci_cmd_cb_reset>
   1f59c:	e7ed      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f59e:	495a      	ldr	r1, [pc, #360]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f5a0:	f7ee f944 	bl	d82c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f5a4:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f5a6:	e0a9      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f5a8:	f7ee f947 	bl	d83a <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f5ac:	e7e5      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f5ae:	4956      	ldr	r1, [pc, #344]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f5b0:	f7ee f93a 	bl	d828 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f5b4:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f5b6:	e0a1      	b.n	1f6fc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f5b8:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1f5bc:	3b01      	subs	r3, #1
   1f5be:	2b08      	cmp	r3, #8
   1f5c0:	d8a8      	bhi.n	1f514 <hci_internal_cmd_put+0x3c>
   1f5c2:	a201      	add	r2, pc, #4	; (adr r2, 1f5c8 <hci_internal_cmd_put+0xf0>)
   1f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f5c8:	0001f5ed 	.word	0x0001f5ed
   1f5cc:	0001f5f7 	.word	0x0001f5f7
   1f5d0:	0001f6dd 	.word	0x0001f6dd
   1f5d4:	0001f515 	.word	0x0001f515
   1f5d8:	0001f515 	.word	0x0001f515
   1f5dc:	0001f515 	.word	0x0001f515
   1f5e0:	0001f515 	.word	0x0001f515
   1f5e4:	0001f515 	.word	0x0001f515
   1f5e8:	0001f6f5 	.word	0x0001f6f5
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f5ec:	4846      	ldr	r0, [pc, #280]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f5ee:	f7ee f9e2 	bl	d9b6 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f5f2:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f5f4:	e082      	b.n	1f6fc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f5f6:	4844      	ldr	r0, [pc, #272]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f5f8:	222f      	movs	r2, #47	; 0x2f
   1f5fa:	2100      	movs	r1, #0
   1f5fc:	f008 f922 	bl	27844 <memset>
	cmds->hci_disconnect = 1;
   1f600:	79e3      	ldrb	r3, [r4, #7]
   1f602:	f043 0320 	orr.w	r3, r3, #32
   1f606:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f608:	7a63      	ldrb	r3, [r4, #9]
   1f60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f60e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f610:	7b23      	ldrb	r3, [r4, #12]
   1f612:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f616:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f618:	7c63      	ldrb	r3, [r4, #17]
   1f61a:	f043 0304 	orr.w	r3, r3, #4
   1f61e:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f620:	7d63      	ldrb	r3, [r4, #21]
   1f622:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1f626:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f62a:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f62c:	7da3      	ldrb	r3, [r4, #22]
   1f62e:	f043 0302 	orr.w	r3, r3, #2
   1f632:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f634:	7f63      	ldrb	r3, [r4, #29]
   1f636:	f043 0304 	orr.w	r3, r3, #4
   1f63a:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f63c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f640:	f063 0308 	orn	r3, r3, #8
   1f644:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f648:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f64c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1f650:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1f654:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f658:	f063 030c 	orn	r3, r3, #12
   1f65c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1f660:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f664:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1f668:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1f66c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f670:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f674:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f678:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f67c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f680:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f684:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f688:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f68c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f690:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1f694:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1f698:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1f69c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1f6a0:	f063 0301 	orn	r3, r3, #1
   1f6a4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f6a8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1f6ac:	f043 0301 	orr.w	r3, r3, #1
   1f6b0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1f6b4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1f6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f6bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1f6c0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1f6c4:	f043 0304 	orr.w	r3, r3, #4
   1f6c8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   1f6cc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1f6d0:	f043 0304 	orr.w	r3, r3, #4
   1f6d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1f6d8:	2344      	movs	r3, #68	; 0x44
   1f6da:	e0f6      	b.n	1f8ca <hci_internal_cmd_put+0x3f2>
	memset(features, 0, sizeof(*features));
   1f6dc:	480a      	ldr	r0, [pc, #40]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f6de:	2208      	movs	r2, #8
   1f6e0:	2100      	movs	r1, #0
   1f6e2:	f008 f8af 	bl	27844 <memset>
	features->bdedr_not_supported = 1;
   1f6e6:	7ae3      	ldrb	r3, [r4, #11]
   1f6e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f6ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1f6f0:	72e3      	strb	r3, [r4, #11]
   1f6f2:	e0e9      	b.n	1f8c8 <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f6f4:	4804      	ldr	r0, [pc, #16]	; (1f708 <hci_internal_cmd_put+0x230>)
   1f6f6:	f7ee f95c 	bl	d9b2 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f6fa:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f6fc:	2801      	cmp	r0, #1
   1f6fe:	f040 80e5 	bne.w	1f8cc <hci_internal_cmd_put+0x3f4>
   1f702:	e718      	b.n	1f536 <hci_internal_cmd_put+0x5e>
   1f704:	2000450d 	.word	0x2000450d
   1f708:	20004514 	.word	0x20004514
	switch (opcode)	{
   1f70c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1f710:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f712:	3003      	adds	r0, #3
	switch (opcode)	{
   1f714:	2b5d      	cmp	r3, #93	; 0x5d
   1f716:	f63f aefd 	bhi.w	1f514 <hci_internal_cmd_put+0x3c>
   1f71a:	a201      	add	r2, pc, #4	; (adr r2, 1f720 <hci_internal_cmd_put+0x248>)
   1f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f720:	0001f899 	.word	0x0001f899
   1f724:	0001f89f 	.word	0x0001f89f
   1f728:	0001f8a7 	.word	0x0001f8a7
   1f72c:	0001f515 	.word	0x0001f515
   1f730:	0001f8dd 	.word	0x0001f8dd
   1f734:	0001f8e3 	.word	0x0001f8e3
   1f738:	0001f8e9 	.word	0x0001f8e9
   1f73c:	0001f8f3 	.word	0x0001f8f3
   1f740:	0001f8f9 	.word	0x0001f8f9
   1f744:	0001f8ff 	.word	0x0001f8ff
   1f748:	0001f515 	.word	0x0001f515
   1f74c:	0001f515 	.word	0x0001f515
   1f750:	0001f515 	.word	0x0001f515
   1f754:	0001f515 	.word	0x0001f515
   1f758:	0001f905 	.word	0x0001f905
   1f75c:	0001f90d 	.word	0x0001f90d
   1f760:	0001f913 	.word	0x0001f913
   1f764:	0001f919 	.word	0x0001f919
   1f768:	0001f515 	.word	0x0001f515
   1f76c:	0001f515 	.word	0x0001f515
   1f770:	0001f91f 	.word	0x0001f91f
   1f774:	0001f929 	.word	0x0001f929
   1f778:	0001f92f 	.word	0x0001f92f
   1f77c:	0001f939 	.word	0x0001f939
   1f780:	0001f515 	.word	0x0001f515
   1f784:	0001f941 	.word	0x0001f941
   1f788:	0001f949 	.word	0x0001f949
   1f78c:	0001f951 	.word	0x0001f951
   1f790:	0001f515 	.word	0x0001f515
   1f794:	0001f515 	.word	0x0001f515
   1f798:	0001f515 	.word	0x0001f515
   1f79c:	0001f515 	.word	0x0001f515
   1f7a0:	0001f515 	.word	0x0001f515
   1f7a4:	0001f959 	.word	0x0001f959
   1f7a8:	0001f961 	.word	0x0001f961
   1f7ac:	0001f969 	.word	0x0001f969
   1f7b0:	0001f96f 	.word	0x0001f96f
   1f7b4:	0001f975 	.word	0x0001f975
   1f7b8:	0001f981 	.word	0x0001f981
   1f7bc:	0001f987 	.word	0x0001f987
   1f7c0:	0001f98d 	.word	0x0001f98d
   1f7c4:	0001f993 	.word	0x0001f993
   1f7c8:	0001f515 	.word	0x0001f515
   1f7cc:	0001f515 	.word	0x0001f515
   1f7d0:	0001f99b 	.word	0x0001f99b
   1f7d4:	0001f9a1 	.word	0x0001f9a1
   1f7d8:	0001f9a7 	.word	0x0001f9a7
   1f7dc:	0001f9af 	.word	0x0001f9af
   1f7e0:	0001f9b7 	.word	0x0001f9b7
   1f7e4:	0001f9bd 	.word	0x0001f9bd
   1f7e8:	0001f515 	.word	0x0001f515
   1f7ec:	0001f515 	.word	0x0001f515
   1f7f0:	0001f515 	.word	0x0001f515
   1f7f4:	0001f515 	.word	0x0001f515
   1f7f8:	0001f515 	.word	0x0001f515
   1f7fc:	0001f515 	.word	0x0001f515
   1f800:	0001f515 	.word	0x0001f515
   1f804:	0001f515 	.word	0x0001f515
   1f808:	0001f515 	.word	0x0001f515
   1f80c:	0001f515 	.word	0x0001f515
   1f810:	0001f515 	.word	0x0001f515
   1f814:	0001f515 	.word	0x0001f515
   1f818:	0001f515 	.word	0x0001f515
   1f81c:	0001f515 	.word	0x0001f515
   1f820:	0001f515 	.word	0x0001f515
   1f824:	0001f515 	.word	0x0001f515
   1f828:	0001f515 	.word	0x0001f515
   1f82c:	0001f515 	.word	0x0001f515
   1f830:	0001f515 	.word	0x0001f515
   1f834:	0001f515 	.word	0x0001f515
   1f838:	0001f515 	.word	0x0001f515
   1f83c:	0001f515 	.word	0x0001f515
   1f840:	0001f515 	.word	0x0001f515
   1f844:	0001f515 	.word	0x0001f515
   1f848:	0001f9c3 	.word	0x0001f9c3
   1f84c:	0001f515 	.word	0x0001f515
   1f850:	0001f515 	.word	0x0001f515
   1f854:	0001f9cb 	.word	0x0001f9cb
   1f858:	0001f515 	.word	0x0001f515
   1f85c:	0001f515 	.word	0x0001f515
   1f860:	0001f515 	.word	0x0001f515
   1f864:	0001f515 	.word	0x0001f515
   1f868:	0001f515 	.word	0x0001f515
   1f86c:	0001f515 	.word	0x0001f515
   1f870:	0001f515 	.word	0x0001f515
   1f874:	0001f515 	.word	0x0001f515
   1f878:	0001f515 	.word	0x0001f515
   1f87c:	0001f515 	.word	0x0001f515
   1f880:	0001f515 	.word	0x0001f515
   1f884:	0001f515 	.word	0x0001f515
   1f888:	0001f515 	.word	0x0001f515
   1f88c:	0001f515 	.word	0x0001f515
   1f890:	0001f515 	.word	0x0001f515
   1f894:	0001f97b 	.word	0x0001f97b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1f898:	f7ee f8c7 	bl	da2a <sdc_hci_cmd_le_set_event_mask>
   1f89c:	e66d      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f89e:	4894      	ldr	r0, [pc, #592]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f8a0:	f7ee f8a1 	bl	d9e6 <sdc_hci_cmd_le_read_buffer_size>
   1f8a4:	e67e      	b.n	1f5a4 <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   1f8a6:	4892      	ldr	r0, [pc, #584]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f8a8:	2205      	movs	r2, #5
   1f8aa:	2100      	movs	r1, #0
   1f8ac:	f007 ffca 	bl	27844 <memset>
	features->le_encryption = 1;
   1f8b0:	79e3      	ldrb	r3, [r4, #7]
   1f8b2:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1f8b6:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1f8ba:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1f8bc:	7a23      	ldrb	r3, [r4, #8]
   1f8be:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1f8c2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1f8c6:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1f8c8:	230c      	movs	r3, #12
		return 0;
   1f8ca:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f8cc:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f8ce:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f8d0:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f8d2:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f8d4:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f8d6:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f8d8:	71a0      	strb	r0, [r4, #6]
}
   1f8da:	e635      	b.n	1f548 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1f8dc:	f7ee f8ae 	bl	da3c <sdc_hci_cmd_le_set_random_address>
   1f8e0:	e64b      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1f8e2:	f7ee f89c 	bl	da1e <sdc_hci_cmd_le_set_adv_params>
   1f8e6:	e648      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1f8e8:	4881      	ldr	r0, [pc, #516]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f8ea:	f7ee f87a 	bl	d9e2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1f8ee:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f8f0:	e704      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1f8f2:	f7ee f890 	bl	da16 <sdc_hci_cmd_le_set_adv_data>
   1f8f6:	e640      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1f8f8:	f7ee f8a4 	bl	da44 <sdc_hci_cmd_le_set_scan_response_data>
   1f8fc:	e63d      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1f8fe:	f7ee f88c 	bl	da1a <sdc_hci_cmd_le_set_adv_enable>
   1f902:	e63a      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1f904:	487a      	ldr	r0, [pc, #488]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f906:	f7ee f872 	bl	d9ee <sdc_hci_cmd_le_read_filter_accept_list_size>
   1f90a:	e7f0      	b.n	1f8ee <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1f90c:	f7ee f859 	bl	d9c2 <sdc_hci_cmd_le_clear_filter_accept_list>
   1f910:	e633      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1f912:	f7ee f852 	bl	d9ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1f916:	e630      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1f918:	f7ee f877 	bl	da0a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1f91c:	e62d      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f91e:	4974      	ldr	r1, [pc, #464]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f920:	f7ee f863 	bl	d9ea <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1f924:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f926:	e6e9      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1f928:	f7ee f867 	bl	d9fa <sdc_hci_cmd_le_read_remote_features>
   1f92c:	e603      	b.n	1f536 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f92e:	4970      	ldr	r1, [pc, #448]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f930:	f7ee f84b 	bl	d9ca <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1f934:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f936:	e6e1      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1f938:	486d      	ldr	r0, [pc, #436]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f93a:	f7ee f850 	bl	d9de <sdc_hci_cmd_le_rand>
   1f93e:	e658      	b.n	1f5f2 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1f940:	496b      	ldr	r1, [pc, #428]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f942:	f7ee f848 	bl	d9d6 <sdc_hci_cmd_le_long_term_key_request_reply>
   1f946:	e625      	b.n	1f594 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1f948:	4969      	ldr	r1, [pc, #420]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f94a:	f7ee f840 	bl	d9ce <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1f94e:	e621      	b.n	1f594 <hci_internal_cmd_put+0xbc>
	*buf = states1;
   1f950:	238f      	movs	r3, #143	; 0x8f
   1f952:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1f954:	23c0      	movs	r3, #192	; 0xc0
   1f956:	e6cb      	b.n	1f6f0 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1f958:	4965      	ldr	r1, [pc, #404]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f95a:	f7ee f862 	bl	da22 <sdc_hci_cmd_le_set_data_length>
   1f95e:	e619      	b.n	1f594 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1f960:	4863      	ldr	r0, [pc, #396]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f962:	f7ee f84e 	bl	da02 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1f966:	e625      	b.n	1f5b4 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1f968:	f7ee f86e 	bl	da48 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1f96c:	e605      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   1f96e:	f000 fa25 	bl	1fdbc <hci_cmd_le_read_local_p256_public_key>
   1f972:	e5e0      	b.n	1f536 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1f974:	f00a fc5d 	bl	2a232 <hci_cmd_le_generate_dhkey>
   1f978:	e5dd      	b.n	1f536 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1f97a:	f00a fc5d 	bl	2a238 <hci_cmd_le_generate_dhkey_v2>
   1f97e:	e5fc      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1f980:	f7ee f81d 	bl	d9be <sdc_hci_cmd_le_add_device_to_resolving_list>
   1f984:	e5f9      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1f986:	f7ee f842 	bl	da0e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1f98a:	e5f6      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   1f98c:	f7ee f81b 	bl	d9c6 <sdc_hci_cmd_le_clear_resolving_list>
   1f990:	e5f3      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f992:	4857      	ldr	r0, [pc, #348]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f994:	f7ee f833 	bl	d9fe <sdc_hci_cmd_le_read_resolving_list_size>
   1f998:	e7a9      	b.n	1f8ee <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1f99a:	f7ee f83a 	bl	da12 <sdc_hci_cmd_le_set_address_resolution_enable>
   1f99e:	e5ec      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1f9a0:	f7ee f84e 	bl	da40 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1f9a4:	e5e9      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f9a6:	4852      	ldr	r0, [pc, #328]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f9a8:	f7ee f823 	bl	d9f2 <sdc_hci_cmd_le_read_max_data_length>
   1f9ac:	e621      	b.n	1f5f2 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f9ae:	4950      	ldr	r1, [pc, #320]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f9b0:	f7ee f821 	bl	d9f6 <sdc_hci_cmd_le_read_phy>
   1f9b4:	e5fe      	b.n	1f5b4 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1f9b6:	f7ee f836 	bl	da26 <sdc_hci_cmd_le_set_default_phy>
   1f9ba:	e5de      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1f9bc:	f7ee f83a 	bl	da34 <sdc_hci_cmd_le_set_phy>
   1f9c0:	e5b9      	b.n	1f536 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f9c2:	484b      	ldr	r0, [pc, #300]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1f9c4:	f7ee f81f 	bl	da06 <sdc_hci_cmd_le_read_transmit_power>
   1f9c8:	e5e4      	b.n	1f594 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1f9ca:	f7ee f835 	bl	da38 <sdc_hci_cmd_le_set_privacy_mode>
   1f9ce:	e5d4      	b.n	1f57a <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1f9d0:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1f9d4:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f9d6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f9da:	d821      	bhi.n	1fa20 <hci_internal_cmd_put+0x548>
   1f9dc:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1f9e0:	f43f ad98 	beq.w	1f514 <hci_internal_cmd_put+0x3c>
   1f9e4:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1f9e8:	3b01      	subs	r3, #1
   1f9ea:	2b09      	cmp	r3, #9
   1f9ec:	f63f ad92 	bhi.w	1f514 <hci_internal_cmd_put+0x3c>
   1f9f0:	a201      	add	r2, pc, #4	; (adr r2, 1f9f8 <hci_internal_cmd_put+0x520>)
   1f9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f9f6:	bf00      	nop
   1f9f8:	0001fa65 	.word	0x0001fa65
   1f9fc:	0001fa6f 	.word	0x0001fa6f
   1fa00:	0001f515 	.word	0x0001f515
   1fa04:	0001f515 	.word	0x0001f515
   1fa08:	0001f515 	.word	0x0001f515
   1fa0c:	0001faa7 	.word	0x0001faa7
   1fa10:	0001f515 	.word	0x0001f515
   1fa14:	0001f515 	.word	0x0001f515
   1fa18:	0001fa93 	.word	0x0001fa93
   1fa1c:	0001fa9d 	.word	0x0001fa9d
   1fa20:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1fa24:	b29b      	uxth	r3, r3
   1fa26:	2b09      	cmp	r3, #9
   1fa28:	f63f ad74 	bhi.w	1f514 <hci_internal_cmd_put+0x3c>
   1fa2c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1fa30:	2b09      	cmp	r3, #9
   1fa32:	f63f ad6f 	bhi.w	1f514 <hci_internal_cmd_put+0x3c>
   1fa36:	a201      	add	r2, pc, #4	; (adr r2, 1fa3c <hci_internal_cmd_put+0x564>)
   1fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fa3c:	0001faad 	.word	0x0001faad
   1fa40:	0001fac5 	.word	0x0001fac5
   1fa44:	0001facb 	.word	0x0001facb
   1fa48:	0001fad1 	.word	0x0001fad1
   1fa4c:	0001fad7 	.word	0x0001fad7
   1fa50:	0001fadd 	.word	0x0001fadd
   1fa54:	0001f515 	.word	0x0001f515
   1fa58:	0001f515 	.word	0x0001f515
   1fa5c:	0001f515 	.word	0x0001f515
   1fa60:	0001fae3 	.word	0x0001fae3
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fa64:	4822      	ldr	r0, [pc, #136]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1fa66:	f7e5 fa49 	bl	4efc <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1fa6a:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fa6c:	e646      	b.n	1f6fc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1fa6e:	4820      	ldr	r0, [pc, #128]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1fa70:	2202      	movs	r2, #2
   1fa72:	2100      	movs	r1, #0
   1fa74:	f007 fee6 	bl	27844 <memset>
	cmds->read_version_info = 1;
   1fa78:	79e3      	ldrb	r3, [r4, #7]
   1fa7a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1fa7e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1fa82:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1fa84:	7a23      	ldrb	r3, [r4, #8]
   1fa86:	f023 0307 	bic.w	r3, r3, #7
   1fa8a:	f043 0307 	orr.w	r3, r3, #7
   1fa8e:	7223      	strb	r3, [r4, #8]
}
   1fa90:	e622      	b.n	1f6d8 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fa92:	4817      	ldr	r0, [pc, #92]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1fa94:	f7ed ff3c 	bl	d910 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1fa98:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fa9a:	e62f      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fa9c:	4814      	ldr	r0, [pc, #80]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1fa9e:	f7ed feea 	bl	d876 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1faa2:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1faa4:	e62a      	b.n	1f6fc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1faa6:	f7ed ff82 	bl	d9ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1faaa:	e566      	b.n	1f57a <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   1faac:	4810      	ldr	r0, [pc, #64]	; (1faf0 <hci_internal_cmd_put+0x618>)
   1faae:	2202      	movs	r2, #2
   1fab0:	2100      	movs	r1, #0
   1fab2:	f007 fec7 	bl	27844 <memset>
	cmds->read_supported_vs_commands = 1;
   1fab6:	79e3      	ldrb	r3, [r4, #7]
   1fab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1fabc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1fac0:	71e3      	strb	r3, [r4, #7]
}
   1fac2:	e609      	b.n	1f6d8 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1fac4:	f7ed fecc 	bl	d860 <sdc_hci_cmd_vs_llpm_mode_set>
   1fac8:	e557      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1faca:	f7ed fec5 	bl	d858 <sdc_hci_cmd_vs_conn_update>
   1face:	e554      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1fad0:	f7ed feba 	bl	d848 <sdc_hci_cmd_vs_conn_event_extend>
   1fad4:	e551      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1fad6:	f7ed fec9 	bl	d86c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1fada:	e54e      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1fadc:	f7ed febe 	bl	d85c <sdc_hci_cmd_vs_event_length_set>
   1fae0:	e54b      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1fae2:	f7ed febf 	bl	d864 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1fae6:	e548      	b.n	1f57a <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   1fae8:	f04f 30ff 	mov.w	r0, #4294967295
   1faec:	e52f      	b.n	1f54e <hci_internal_cmd_put+0x76>
   1faee:	bf00      	nop
   1faf0:	20004514 	.word	0x20004514

0001faf4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1faf4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1faf6:	4c07      	ldr	r4, [pc, #28]	; (1fb14 <hci_internal_evt_get+0x20>)
   1faf8:	7823      	ldrb	r3, [r4, #0]
   1fafa:	b91b      	cbnz	r3, 1fb04 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1fb00:	f7ed be7d 	b.w	d7fe <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1fb04:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1fb06:	1c61      	adds	r1, r4, #1
   1fb08:	3202      	adds	r2, #2
   1fb0a:	f007 fe90 	bl	2782e <memcpy>
		cmd_complete_or_status.occurred = false;
   1fb0e:	2000      	movs	r0, #0
   1fb10:	7020      	strb	r0, [r4, #0]
}
   1fb12:	bd10      	pop	{r4, pc}
   1fb14:	2000450d 	.word	0x2000450d

0001fb18 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1fb18:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1fb1a:	4c09      	ldr	r4, [pc, #36]	; (1fb40 <hci_internal_msg_get+0x28>)
   1fb1c:	7823      	ldrb	r3, [r4, #0]
{
   1fb1e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1fb20:	b91b      	cbnz	r3, 1fb2a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1fb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1fb26:	f7ed be77 	b.w	d818 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1fb2a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1fb2c:	1c61      	adds	r1, r4, #1
   1fb2e:	3202      	adds	r2, #2
   1fb30:	f007 fe7d 	bl	2782e <memcpy>
		cmd_complete_or_status.occurred = false;
   1fb34:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fb36:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1fb38:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fb3a:	702b      	strb	r3, [r5, #0]
}
   1fb3c:	bd38      	pop	{r3, r4, r5, pc}
   1fb3e:	bf00      	nop
   1fb40:	2000450d 	.word	0x2000450d

0001fb44 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1fb44:	b570      	push	{r4, r5, r6, lr}
   1fb46:	4605      	mov	r5, r0
   1fb48:	460e      	mov	r6, r1
   1fb4a:	4c08      	ldr	r4, [pc, #32]	; (1fb6c <bt_rand+0x28>)
   1fb4c:	4620      	mov	r0, r4
   1fb4e:	f00a fcfa 	bl	2a546 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1fb52:	b138      	cbz	r0, 1fb64 <bt_rand+0x20>
   1fb54:	68a3      	ldr	r3, [r4, #8]
   1fb56:	b2b2      	uxth	r2, r6
   1fb58:	4629      	mov	r1, r5
   1fb5a:	4620      	mov	r0, r4
   1fb5c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1fb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fb62:	4718      	bx	r3
   1fb64:	f06f 0012 	mvn.w	r0, #18
   1fb68:	bd70      	pop	{r4, r5, r6, pc}
   1fb6a:	bf00      	nop
   1fb6c:	0002b1e4 	.word	0x0002b1e4

0001fb70 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1fb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fb72:	4b24      	ldr	r3, [pc, #144]	; (1fc04 <ecdh_p256_common_secret+0x94>)
   1fb74:	4924      	ldr	r1, [pc, #144]	; (1fc08 <ecdh_p256_common_secret+0x98>)
   1fb76:	f103 0220 	add.w	r2, r3, #32
   1fb7a:	2800      	cmp	r0, #0
   1fb7c:	bf08      	it	eq
   1fb7e:	4619      	moveq	r1, r3
{
   1fb80:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fb82:	4610      	mov	r0, r2
   1fb84:	f002 fe6a 	bl	2285c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1fb88:	4604      	mov	r4, r0
   1fb8a:	b180      	cbz	r0, 1fbae <ecdh_p256_common_secret+0x3e>
		BT_ERR("public key is not valid (err %d)", err);
   1fb8c:	466d      	mov	r5, sp
   1fb8e:	b088      	sub	sp, #32
   1fb90:	466a      	mov	r2, sp
   1fb92:	4b1e      	ldr	r3, [pc, #120]	; (1fc0c <ecdh_p256_common_secret+0x9c>)
   1fb94:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fb98:	2303      	movs	r3, #3
   1fb9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb9e:	481c      	ldr	r0, [pc, #112]	; (1fc10 <ecdh_p256_common_secret+0xa0>)
   1fba0:	2300      	movs	r3, #0
   1fba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fba6:	f7f3 feed 	bl	13984 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1fbaa:	2412      	movs	r4, #18
   1fbac:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fbae:	f04f 32ff 	mov.w	r2, #4294967295
   1fbb2:	f04f 33ff 	mov.w	r3, #4294967295
   1fbb6:	2001      	movs	r0, #1
   1fbb8:	f7f5 fe42 	bl	15840 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1fbbc:	f100 0608 	add.w	r6, r0, #8
   1fbc0:	2102      	movs	r1, #2
   1fbc2:	4605      	mov	r5, r0
   1fbc4:	4630      	mov	r0, r6
   1fbc6:	f00a f810 	bl	29bea <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1fbca:	233e      	movs	r3, #62	; 0x3e
   1fbcc:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1fbce:	2322      	movs	r3, #34	; 0x22
   1fbd0:	7043      	strb	r3, [r0, #1]
   1fbd2:	2101      	movs	r1, #1
   1fbd4:	4630      	mov	r0, r6
   1fbd6:	f00a f808 	bl	29bea <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1fbda:	2309      	movs	r3, #9
   1fbdc:	7003      	strb	r3, [r0, #0]
   1fbde:	2121      	movs	r1, #33	; 0x21
   1fbe0:	4630      	mov	r0, r6
   1fbe2:	f00a f802 	bl	29bea <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1fbe6:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1fbea:	b134      	cbz	r4, 1fbfa <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1fbec:	2220      	movs	r2, #32
   1fbee:	21ff      	movs	r1, #255	; 0xff
   1fbf0:	f007 fe28 	bl	27844 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1fbf4:	4628      	mov	r0, r5
   1fbf6:	46bd      	mov	sp, r7
   1fbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1fbfa:	4906      	ldr	r1, [pc, #24]	; (1fc14 <ecdh_p256_common_secret+0xa4>)
   1fbfc:	f00a fb0f 	bl	2a21e <sys_memcpy_swap.constprop.0>
   1fc00:	e7f8      	b.n	1fbf4 <ecdh_p256_common_secret+0x84>
   1fc02:	bf00      	nop
   1fc04:	20004554 	.word	0x20004554
   1fc08:	0002e9a0 	.word	0x0002e9a0
   1fc0c:	0002e95a 	.word	0x0002e95a
   1fc10:	0002b4f4 	.word	0x0002b4f4
   1fc14:	20004574 	.word	0x20004574

0001fc18 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc1a:	4e3d      	ldr	r6, [pc, #244]	; (1fd10 <ecdh_cmd_process+0xf8>)
   1fc1c:	f3bf 8f5b 	dmb	ish
   1fc20:	6833      	ldr	r3, [r6, #0]
   1fc22:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1fc26:	2b02      	cmp	r3, #2
{
   1fc28:	b087      	sub	sp, #28
	switch (atomic_get(&cmd)) {
   1fc2a:	d05a      	beq.n	1fce2 <ecdh_cmd_process+0xca>
   1fc2c:	2b04      	cmp	r3, #4
   1fc2e:	d05d      	beq.n	1fcec <ecdh_cmd_process+0xd4>
   1fc30:	2b01      	cmp	r3, #1
   1fc32:	d15d      	bne.n	1fcf0 <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   1fc34:	4c37      	ldr	r4, [pc, #220]	; (1fd14 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1fc36:	4f38      	ldr	r7, [pc, #224]	; (1fd18 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1fc38:	2120      	movs	r1, #32
   1fc3a:	4620      	mov	r0, r4
   1fc3c:	f7ff ff82 	bl	1fb44 <bt_rand>
		if (err) {
   1fc40:	2800      	cmp	r0, #0
   1fc42:	d143      	bne.n	1fccc <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1fc44:	2220      	movs	r2, #32
   1fc46:	4639      	mov	r1, r7
   1fc48:	4620      	mov	r0, r4
   1fc4a:	f007 fdc7 	bl	277dc <memcmp>
   1fc4e:	2800      	cmp	r0, #0
   1fc50:	d0f2      	beq.n	1fc38 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1fc52:	4832      	ldr	r0, [pc, #200]	; (1fd1c <ecdh_cmd_process+0x104>)
   1fc54:	4621      	mov	r1, r4
   1fc56:	f002 fded 	bl	22834 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1fc5a:	4605      	mov	r5, r0
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	d1eb      	bne.n	1fc38 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fc60:	f04f 32ff 	mov.w	r2, #4294967295
   1fc64:	f04f 33ff 	mov.w	r3, #4294967295
   1fc68:	2001      	movs	r0, #1
   1fc6a:	f7f5 fde9 	bl	15840 <bt_buf_get_rx>
   1fc6e:	f100 0708 	add.w	r7, r0, #8
   1fc72:	2102      	movs	r1, #2
   1fc74:	4604      	mov	r4, r0
   1fc76:	4638      	mov	r0, r7
   1fc78:	f009 ffb7 	bl	29bea <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1fc7c:	233e      	movs	r3, #62	; 0x3e
   1fc7e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1fc80:	2342      	movs	r3, #66	; 0x42
   1fc82:	7043      	strb	r3, [r0, #1]
   1fc84:	2101      	movs	r1, #1
   1fc86:	4638      	mov	r0, r7
   1fc88:	f009 ffaf 	bl	29bea <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1fc8c:	2308      	movs	r3, #8
   1fc8e:	7003      	strb	r3, [r0, #0]
   1fc90:	2141      	movs	r1, #65	; 0x41
   1fc92:	4638      	mov	r0, r7
   1fc94:	f009 ffa9 	bl	29bea <net_buf_simple_add>
   1fc98:	4607      	mov	r7, r0
	evt->status = status;
   1fc9a:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1fc9e:	b1bd      	cbz	r5, 1fcd0 <ecdh_cmd_process+0xb8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1fca0:	2240      	movs	r2, #64	; 0x40
   1fca2:	2100      	movs	r1, #0
   1fca4:	f007 fdce 	bl	27844 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fca8:	f3bf 8f5b 	dmb	ish
   1fcac:	2300      	movs	r3, #0
   1fcae:	e856 2f00 	ldrex	r2, [r6]
   1fcb2:	e846 3100 	strex	r1, r3, [r6]
   1fcb6:	2900      	cmp	r1, #0
   1fcb8:	d1f9      	bne.n	1fcae <ecdh_cmd_process+0x96>
   1fcba:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1fcbe:	b324      	cbz	r4, 1fd0a <ecdh_cmd_process+0xf2>
		bt_recv(buf);
   1fcc0:	4620      	mov	r0, r4
	}
}
   1fcc2:	b007      	add	sp, #28
   1fcc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1fcc8:	f7f6 bfd0 	b.w	16c6c <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1fccc:	251f      	movs	r5, #31
   1fcce:	e7c7      	b.n	1fc60 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1fcd0:	4912      	ldr	r1, [pc, #72]	; (1fd1c <ecdh_cmd_process+0x104>)
   1fcd2:	f00a faa4 	bl	2a21e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1fcd6:	3120      	adds	r1, #32
   1fcd8:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1fcdc:	f00a fa9f 	bl	2a21e <sys_memcpy_swap.constprop.0>
		break;
   1fce0:	e7e2      	b.n	1fca8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1fce2:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1fce4:	f7ff ff44 	bl	1fb70 <ecdh_p256_common_secret>
   1fce8:	4604      	mov	r4, r0
		break;
   1fcea:	e7dd      	b.n	1fca8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1fcec:	2001      	movs	r0, #1
   1fcee:	e7f9      	b.n	1fce4 <ecdh_cmd_process+0xcc>
		BT_WARN("Unknown command");
   1fcf0:	4b0b      	ldr	r3, [pc, #44]	; (1fd20 <ecdh_cmd_process+0x108>)
   1fcf2:	9305      	str	r3, [sp, #20]
   1fcf4:	2302      	movs	r3, #2
   1fcf6:	9304      	str	r3, [sp, #16]
   1fcf8:	480a      	ldr	r0, [pc, #40]	; (1fd24 <ecdh_cmd_process+0x10c>)
   1fcfa:	2300      	movs	r3, #0
   1fcfc:	aa04      	add	r2, sp, #16
   1fcfe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1fd02:	f7f3 fe3f 	bl	13984 <z_impl_z_log_msg_static_create>
		buf = NULL;
   1fd06:	2400      	movs	r4, #0
		break;
   1fd08:	e7ce      	b.n	1fca8 <ecdh_cmd_process+0x90>
}
   1fd0a:	b007      	add	sp, #28
   1fd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd0e:	bf00      	nop
   1fd10:	2000301c 	.word	0x2000301c
   1fd14:	20004554 	.word	0x20004554
   1fd18:	0002e9a0 	.word	0x0002e9a0
   1fd1c:	20004574 	.word	0x20004574
   1fd20:	0002e97b 	.word	0x0002e97b
   1fd24:	0002b4f4 	.word	0x0002b4f4

0001fd28 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1fd28:	b510      	push	{r4, lr}
   1fd2a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1fd2c:	2210      	movs	r2, #16
   1fd2e:	2100      	movs	r1, #0
   1fd30:	a801      	add	r0, sp, #4
   1fd32:	f007 fd87 	bl	27844 <memset>
   1fd36:	4c0b      	ldr	r4, [pc, #44]	; (1fd64 <ecdh_thread+0x3c>)
   1fd38:	9405      	str	r4, [sp, #20]
   1fd3a:	2301      	movs	r3, #1
   1fd3c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1fd40:	f04f 32ff 	mov.w	r2, #4294967295
   1fd44:	f04f 33ff 	mov.w	r3, #4294967295
   1fd48:	2101      	movs	r1, #1
   1fd4a:	a801      	add	r0, sp, #4
   1fd4c:	f002 fcc2 	bl	226d4 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1fd50:	4620      	mov	r0, r4
   1fd52:	f00b f9a3 	bl	2b09c <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1fd56:	9b04      	ldr	r3, [sp, #16]
   1fd58:	f36f 3352 	bfc	r3, #13, #6
   1fd5c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1fd5e:	f7ff ff5b 	bl	1fc18 <ecdh_cmd_process>
	while (true) {
   1fd62:	e7ed      	b.n	1fd40 <ecdh_thread+0x18>
   1fd64:	20003020 	.word	0x20003020

0001fd68 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1fd68:	b510      	push	{r4, lr}
   1fd6a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1fd6c:	480e      	ldr	r0, [pc, #56]	; (1fda8 <hci_ecdh_init+0x40>)
   1fd6e:	f00b f990 	bl	2b092 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fd72:	4c0e      	ldr	r4, [pc, #56]	; (1fdac <hci_ecdh_init+0x44>)
   1fd74:	490e      	ldr	r1, [pc, #56]	; (1fdb0 <hci_ecdh_init+0x48>)
   1fd76:	2200      	movs	r2, #0
   1fd78:	2300      	movs	r3, #0
   1fd7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fd7e:	2300      	movs	r3, #0
   1fd80:	220a      	movs	r2, #10
   1fd82:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1fd86:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1fd8a:	9300      	str	r3, [sp, #0]
   1fd8c:	f44f 7262 	mov.w	r2, #904	; 0x388
   1fd90:	4b08      	ldr	r3, [pc, #32]	; (1fdb4 <hci_ecdh_init+0x4c>)
   1fd92:	4620      	mov	r0, r4
   1fd94:	f001 fb4e 	bl	21434 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fd98:	4907      	ldr	r1, [pc, #28]	; (1fdb8 <hci_ecdh_init+0x50>)
   1fd9a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1fd9c:	b008      	add	sp, #32
   1fd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fda2:	f00a bc8e 	b.w	2a6c2 <z_impl_k_thread_name_set>
   1fda6:	bf00      	nop
   1fda8:	20003020 	.word	0x20003020
   1fdac:	20002280 	.word	0x20002280
   1fdb0:	200052c8 	.word	0x200052c8
   1fdb4:	0001fd29 	.word	0x0001fd29
   1fdb8:	0002e98b 	.word	0x0002e98b

0001fdbc <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1fdbc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fdbe:	4b0b      	ldr	r3, [pc, #44]	; (1fdec <hci_cmd_le_read_local_p256_public_key+0x30>)
   1fdc0:	f3bf 8f5b 	dmb	ish
   1fdc4:	2201      	movs	r2, #1
   1fdc6:	e853 1f00 	ldrex	r1, [r3]
   1fdca:	2900      	cmp	r1, #0
   1fdcc:	d103      	bne.n	1fdd6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1fdce:	e843 2000 	strex	r0, r2, [r3]
   1fdd2:	2800      	cmp	r0, #0
   1fdd4:	d1f7      	bne.n	1fdc6 <hci_cmd_le_read_local_p256_public_key+0xa>
   1fdd6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1fdda:	d105      	bne.n	1fde8 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1fddc:	4804      	ldr	r0, [pc, #16]	; (1fdf0 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1fdde:	2100      	movs	r1, #0
   1fde0:	f002 fcd4 	bl	2278c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1fde4:	2000      	movs	r0, #0
}
   1fde6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fde8:	200c      	movs	r0, #12
   1fdea:	e7fc      	b.n	1fde6 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1fdec:	2000301c 	.word	0x2000301c
   1fdf0:	20003020 	.word	0x20003020

0001fdf4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1fdf4:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1fdf6:	2900      	cmp	r1, #0
   1fdf8:	4b11      	ldr	r3, [pc, #68]	; (1fe40 <cmd_le_generate_dhkey+0x4c>)
   1fdfa:	f3bf 8f5b 	dmb	ish
{
   1fdfe:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1fe00:	bf14      	ite	ne
   1fe02:	2204      	movne	r2, #4
   1fe04:	2202      	moveq	r2, #2
   1fe06:	e853 1f00 	ldrex	r1, [r3]
   1fe0a:	2900      	cmp	r1, #0
   1fe0c:	d103      	bne.n	1fe16 <cmd_le_generate_dhkey+0x22>
   1fe0e:	e843 2000 	strex	r0, r2, [r3]
   1fe12:	2800      	cmp	r0, #0
   1fe14:	d1f7      	bne.n	1fe06 <cmd_le_generate_dhkey+0x12>
   1fe16:	f3bf 8f5b 	dmb	ish
   1fe1a:	d10e      	bne.n	1fe3a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1fe1c:	4621      	mov	r1, r4
   1fe1e:	4809      	ldr	r0, [pc, #36]	; (1fe44 <cmd_le_generate_dhkey+0x50>)
   1fe20:	f00a f9fd 	bl	2a21e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1fe24:	4808      	ldr	r0, [pc, #32]	; (1fe48 <cmd_le_generate_dhkey+0x54>)
   1fe26:	f104 0120 	add.w	r1, r4, #32
   1fe2a:	f00a f9f8 	bl	2a21e <sys_memcpy_swap.constprop.0>
   1fe2e:	4807      	ldr	r0, [pc, #28]	; (1fe4c <cmd_le_generate_dhkey+0x58>)
   1fe30:	2100      	movs	r1, #0
   1fe32:	f002 fcab 	bl	2278c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1fe36:	2000      	movs	r0, #0
}
   1fe38:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fe3a:	200c      	movs	r0, #12
   1fe3c:	e7fc      	b.n	1fe38 <cmd_le_generate_dhkey+0x44>
   1fe3e:	bf00      	nop
   1fe40:	2000301c 	.word	0x2000301c
   1fe44:	20004574 	.word	0x20004574
   1fe48:	20004594 	.word	0x20004594
   1fe4c:	20003020 	.word	0x20003020

0001fe50 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1fe50:	4901      	ldr	r1, [pc, #4]	; (1fe58 <mpsl_low_prio_irq_handler+0x8>)
   1fe52:	4802      	ldr	r0, [pc, #8]	; (1fe5c <mpsl_low_prio_irq_handler+0xc>)
   1fe54:	f00a bdcc 	b.w	2a9f0 <k_work_submit_to_queue>
   1fe58:	20003030 	.word	0x20003030
   1fe5c:	20002300 	.word	0x20002300

0001fe60 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1fe60:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1fe62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1fe66:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1fe6a:	2300      	movs	r3, #0
   1fe6c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1fe70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1fe74:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe78:	4a10      	ldr	r2, [pc, #64]	; (1febc <mpsl_lib_init+0x5c>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1fe7a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe7c:	2119      	movs	r1, #25
   1fe7e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1fe80:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe84:	f7e4 fbc4 	bl	4610 <mpsl_init>
	if (err) {
   1fe88:	4604      	mov	r4, r0
   1fe8a:	b9a0      	cbnz	r0, 1feb6 <mpsl_lib_init+0x56>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1fe8c:	480c      	ldr	r0, [pc, #48]	; (1fec0 <mpsl_lib_init+0x60>)
   1fe8e:	2101      	movs	r1, #1
   1fe90:	f7ec ff26 	bl	cce0 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1fe94:	4604      	mov	r4, r0
   1fe96:	b970      	cbnz	r0, 1feb6 <mpsl_lib_init+0x56>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fe98:	4601      	mov	r1, r0
   1fe9a:	2201      	movs	r2, #1
   1fe9c:	2008      	movs	r0, #8
   1fe9e:	f7f4 fcfb 	bl	14898 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fea2:	2201      	movs	r2, #1
   1fea4:	4621      	mov	r1, r4
   1fea6:	200b      	movs	r0, #11
   1fea8:	f7f4 fcf6 	bl	14898 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1feac:	2201      	movs	r2, #1
   1feae:	4621      	mov	r1, r4
   1feb0:	4610      	mov	r0, r2
   1feb2:	f7f4 fcf1 	bl	14898 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1feb6:	4620      	mov	r0, r4
   1feb8:	b002      	add	sp, #8
   1feba:	bd10      	pop	{r4, pc}
   1febc:	0001fec5 	.word	0x0001fec5
   1fec0:	20003040 	.word	0x20003040

0001fec4 <m_assert_handler>:
{
   1fec4:	b598      	push	{r3, r4, r7, lr}
   1fec6:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1fec8:	466c      	mov	r4, sp
   1feca:	b08a      	sub	sp, #40	; 0x28
   1fecc:	466a      	mov	r2, sp
   1fece:	4b0c      	ldr	r3, [pc, #48]	; (1ff00 <m_assert_handler+0x3c>)
   1fed0:	61d1      	str	r1, [r2, #28]
   1fed2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fed6:	2302      	movs	r3, #2
   1fed8:	f882 3020 	strb.w	r3, [r2, #32]
   1fedc:	4b09      	ldr	r3, [pc, #36]	; (1ff04 <m_assert_handler+0x40>)
   1fede:	f842 3f10 	str.w	r3, [r2, #16]!
   1fee2:	4809      	ldr	r0, [pc, #36]	; (1ff08 <m_assert_handler+0x44>)
   1fee4:	2300      	movs	r3, #0
   1fee6:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1feea:	f7f3 fd4b 	bl	13984 <z_impl_z_log_msg_static_create>
   1feee:	46a5      	mov	sp, r4
	k_oops();
   1fef0:	4040      	eors	r0, r0
   1fef2:	f380 8811 	msr	BASEPRI, r0
   1fef6:	f04f 0003 	mov.w	r0, #3
   1fefa:	df02      	svc	2
}
   1fefc:	46bd      	mov	sp, r7
   1fefe:	bd98      	pop	{r3, r4, r7, pc}
   1ff00:	0002e9c0 	.word	0x0002e9c0
   1ff04:	01000004 	.word	0x01000004
   1ff08:	0002b584 	.word	0x0002b584

0001ff0c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1ff0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ff0e:	4d0d      	ldr	r5, [pc, #52]	; (1ff44 <mpsl_low_prio_init+0x38>)
   1ff10:	490d      	ldr	r1, [pc, #52]	; (1ff48 <mpsl_low_prio_init+0x3c>)
   1ff12:	2400      	movs	r4, #0
   1ff14:	9400      	str	r4, [sp, #0]
   1ff16:	f06f 0309 	mvn.w	r3, #9
   1ff1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ff1e:	4628      	mov	r0, r5
   1ff20:	f001 fda8 	bl	21a74 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1ff24:	4909      	ldr	r1, [pc, #36]	; (1ff4c <mpsl_low_prio_init+0x40>)
   1ff26:	4628      	mov	r0, r5
   1ff28:	f00a fbcb 	bl	2a6c2 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1ff2c:	4908      	ldr	r1, [pc, #32]	; (1ff50 <mpsl_low_prio_init+0x44>)
   1ff2e:	4809      	ldr	r0, [pc, #36]	; (1ff54 <mpsl_low_prio_init+0x48>)
   1ff30:	f00a fd31 	bl	2a996 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ff34:	4622      	mov	r2, r4
   1ff36:	2104      	movs	r1, #4
   1ff38:	2019      	movs	r0, #25
   1ff3a:	f7f4 fcad 	bl	14898 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ff3e:	4620      	mov	r0, r4
   1ff40:	b003      	add	sp, #12
   1ff42:	bd30      	pop	{r4, r5, pc}
   1ff44:	20002300 	.word	0x20002300
   1ff48:	20005650 	.word	0x20005650
   1ff4c:	0002e9d4 	.word	0x0002e9d4
   1ff50:	0002a267 	.word	0x0002a267
   1ff54:	20003030 	.word	0x20003030

0001ff58 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ff58:	4b01      	ldr	r3, [pc, #4]	; (1ff60 <mpsl_hfclk_callback+0x8>)
   1ff5a:	2000      	movs	r0, #0
   1ff5c:	681b      	ldr	r3, [r3, #0]
   1ff5e:	4718      	bx	r3
   1ff60:	20003070 	.word	0x20003070

0001ff64 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1ff64:	b120      	cbz	r0, 1ff70 <nrfx_clock_start+0xc>
   1ff66:	2801      	cmp	r0, #1
   1ff68:	d106      	bne.n	1ff78 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1ff6a:	4804      	ldr	r0, [pc, #16]	; (1ff7c <nrfx_clock_start+0x18>)
   1ff6c:	f7e4 b9c6 	b.w	42fc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ff70:	4b03      	ldr	r3, [pc, #12]	; (1ff80 <nrfx_clock_start+0x1c>)
   1ff72:	2001      	movs	r0, #1
   1ff74:	681b      	ldr	r3, [r3, #0]
   1ff76:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ff78:	4770      	bx	lr
   1ff7a:	bf00      	nop
   1ff7c:	0001ff59 	.word	0x0001ff59
   1ff80:	20003070 	.word	0x20003070

0001ff84 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ff84:	4b01      	ldr	r3, [pc, #4]	; (1ff8c <nrfx_clock_init+0x8>)
   1ff86:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ff88:	4801      	ldr	r0, [pc, #4]	; (1ff90 <nrfx_clock_init+0xc>)
   1ff8a:	4770      	bx	lr
   1ff8c:	20003070 	.word	0x20003070
   1ff90:	0bad0000 	.word	0x0bad0000

0001ff94 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1ff94:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ff96:	4d1d      	ldr	r5, [pc, #116]	; (2000c <timeslot_callback+0x78>)
   1ff98:	f3bf 8f5b 	dmb	ish
   1ff9c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1ff9e:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1ffa2:	bb84      	cbnz	r4, 20006 <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   1ffa4:	2906      	cmp	r1, #6
   1ffa6:	d804      	bhi.n	1ffb2 <timeslot_callback+0x1e>
   1ffa8:	2904      	cmp	r1, #4
   1ffaa:	d822      	bhi.n	1fff2 <timeslot_callback+0x5e>
   1ffac:	b139      	cbz	r1, 1ffbe <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1ffae:	4620      	mov	r0, r4
   1ffb0:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1ffb2:	2907      	cmp	r1, #7
   1ffb4:	d1fb      	bne.n	1ffae <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1ffb6:	4628      	mov	r0, r5
   1ffb8:	f001 fbc8 	bl	2174c <z_impl_k_sem_give>
}
   1ffbc:	e7f7      	b.n	1ffae <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1ffbe:	6a2b      	ldr	r3, [r5, #32]
   1ffc0:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ffc4:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1ffc6:	2801      	cmp	r0, #1
   1ffc8:	d005      	beq.n	1ffd6 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1ffca:	462c      	mov	r4, r5
   1ffcc:	2302      	movs	r3, #2
   1ffce:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1ffd2:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1ffd4:	e7eb      	b.n	1ffae <timeslot_callback+0x1a>
			_context.timeslot_request.params.earliest.timeout_us =
   1ffd6:	f247 5330 	movw	r3, #30000	; 0x7530
   1ffda:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   1ffdc:	2303      	movs	r3, #3
   1ffde:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1ffe2:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1ffe6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1ffea:	63ab      	str	r3, [r5, #56]	; 0x38
   1ffec:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1fff0:	e7dd      	b.n	1ffae <timeslot_callback+0x1a>
	_context.timeslot_request.params.earliest.timeout_us =
   1fff2:	4b07      	ldr	r3, [pc, #28]	; (20010 <timeslot_callback+0x7c>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fff4:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1fff6:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fffa:	f105 0124 	add.w	r1, r5, #36	; 0x24
	_context.timeslot_request.params.earliest.timeout_us =
   1fffe:	632b      	str	r3, [r5, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20000:	f7ec fe12 	bl	cc28 <mpsl_timeslot_request>
}
   20004:	e7d3      	b.n	1ffae <timeslot_callback+0x1a>
		return NULL;
   20006:	2400      	movs	r4, #0
   20008:	e7d1      	b.n	1ffae <timeslot_callback+0x1a>
   2000a:	bf00      	nop
   2000c:	20003074 	.word	0x20003074
   20010:	0f423fff 	.word	0x0f423fff

00020014 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   20014:	4802      	ldr	r0, [pc, #8]	; (20020 <nrf_flash_sync_init+0xc>)
   20016:	2201      	movs	r2, #1
   20018:	2100      	movs	r1, #0
   2001a:	f00a bc3c 	b.w	2a896 <z_impl_k_sem_init>
   2001e:	bf00      	nop
   20020:	20003074 	.word	0x20003074

00020024 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   20024:	4b01      	ldr	r3, [pc, #4]	; (2002c <nrf_flash_sync_set_context+0x8>)
   20026:	61d8      	str	r0, [r3, #28]
}
   20028:	4770      	bx	lr
   2002a:	bf00      	nop
   2002c:	20003074 	.word	0x20003074

00020030 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   20030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20034:	4c43      	ldr	r4, [pc, #268]	; (20144 <nrf_flash_sync_exe+0x114>)
{
   20036:	b086      	sub	sp, #24
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20038:	f04f 31ff 	mov.w	r1, #4294967295
{
   2003c:	af00      	add	r7, sp, #0
   2003e:	4680      	mov	r8, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20040:	f04f 30ff 	mov.w	r0, #4294967295
   20044:	f7ff f81c 	bl	1f080 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20048:	f104 0118 	add.w	r1, r4, #24
   2004c:	483e      	ldr	r0, [pc, #248]	; (20148 <nrf_flash_sync_exe+0x118>)
   2004e:	f7e0 ff6f 	bl	f30 <mpsl_timeslot_session_open>
   20052:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   20054:	f7ff f81c 	bl	1f090 <multithreading_lock_release>

	if (ret < 0) {
   20058:	2d00      	cmp	r5, #0
   2005a:	da15      	bge.n	20088 <nrf_flash_sync_exe+0x58>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   2005c:	466c      	mov	r4, sp
   2005e:	b088      	sub	sp, #32
   20060:	466a      	mov	r2, sp
   20062:	4b3a      	ldr	r3, [pc, #232]	; (2014c <nrf_flash_sync_exe+0x11c>)
   20064:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20068:	2303      	movs	r3, #3
   2006a:	f842 3f10 	str.w	r3, [r2, #16]!
   2006e:	4838      	ldr	r0, [pc, #224]	; (20150 <nrf_flash_sync_exe+0x120>)
   20070:	2300      	movs	r3, #0
   20072:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20076:	f7f3 fc85 	bl	13984 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   2007a:	f06f 000b 	mvn.w	r0, #11
   2007e:	46a5      	mov	sp, r4
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   20080:	3718      	adds	r7, #24
   20082:	46bd      	mov	sp, r7
   20084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   20088:	f240 1301 	movw	r3, #257	; 0x101
   2008c:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2008e:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   20090:	f8c4 8020 	str.w	r8, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20094:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   20096:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   20098:	f247 5330 	movw	r3, #30000	; 0x7530
   2009c:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2009e:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   200a0:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   200a4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   200a8:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   200aa:	f104 0540 	add.w	r5, r4, #64	; 0x40
   200ae:	f3bf 8f5b 	dmb	ish
   200b2:	e855 3f00 	ldrex	r3, [r5]
   200b6:	e845 6200 	strex	r2, r6, [r5]
   200ba:	2a00      	cmp	r2, #0
   200bc:	d1f9      	bne.n	200b2 <nrf_flash_sync_exe+0x82>
   200be:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   200c2:	f04f 31ff 	mov.w	r1, #4294967295
   200c6:	f04f 30ff 	mov.w	r0, #4294967295
   200ca:	f7fe ffd9 	bl	1f080 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   200ce:	f104 0124 	add.w	r1, r4, #36	; 0x24
   200d2:	7e20      	ldrb	r0, [r4, #24]
   200d4:	f7ec fda8 	bl	cc28 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   200d8:	f7fe ffda 	bl	1f090 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   200dc:	4a1d      	ldr	r2, [pc, #116]	; (20154 <nrf_flash_sync_exe+0x124>)
   200de:	2300      	movs	r3, #0
   200e0:	4620      	mov	r0, r4
   200e2:	f001 fb59 	bl	21798 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   200e6:	42b0      	cmp	r0, r6
   200e8:	da16      	bge.n	20118 <nrf_flash_sync_exe+0xe8>
		LOG_ERR("timeout");
   200ea:	4b1b      	ldr	r3, [pc, #108]	; (20158 <nrf_flash_sync_exe+0x128>)
   200ec:	617b      	str	r3, [r7, #20]
   200ee:	2302      	movs	r3, #2
   200f0:	613b      	str	r3, [r7, #16]
   200f2:	4817      	ldr	r0, [pc, #92]	; (20150 <nrf_flash_sync_exe+0x120>)
   200f4:	4633      	mov	r3, r6
   200f6:	f107 0210 	add.w	r2, r7, #16
   200fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   200fe:	f7f3 fc41 	bl	13984 <z_impl_z_log_msg_static_create>
   20102:	f3bf 8f5b 	dmb	ish
   20106:	2301      	movs	r3, #1
   20108:	e855 2f00 	ldrex	r2, [r5]
   2010c:	e845 3100 	strex	r1, r3, [r5]
   20110:	2900      	cmp	r1, #0
   20112:	d1f9      	bne.n	20108 <nrf_flash_sync_exe+0xd8>
   20114:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20118:	f04f 31ff 	mov.w	r1, #4294967295
   2011c:	f04f 30ff 	mov.w	r0, #4294967295
   20120:	f7fe ffae 	bl	1f080 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   20124:	7e20      	ldrb	r0, [r4, #24]
   20126:	f7ec fdba 	bl	cc9e <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   2012a:	f7fe ffb1 	bl	1f090 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2012e:	f3bf 8f5b 	dmb	ish
   20132:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20134:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   20138:	b113      	cbz	r3, 20140 <nrf_flash_sync_exe+0x110>
	z_impl_k_sem_reset(sem);
   2013a:	4802      	ldr	r0, [pc, #8]	; (20144 <nrf_flash_sync_exe+0x114>)
   2013c:	f001 fb54 	bl	217e8 <z_impl_k_sem_reset>
	return _context.status;
   20140:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   20142:	e79d      	b.n	20080 <nrf_flash_sync_exe+0x50>
   20144:	20003074 	.word	0x20003074
   20148:	0001ff95 	.word	0x0001ff95
   2014c:	0002e9e8 	.word	0x0002e9e8
   20150:	0002b554 	.word	0x0002b554
   20154:	000b7b44 	.word	0x000b7b44
   20158:	0002d827 	.word	0x0002d827

0002015c <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2015c:	4b07      	ldr	r3, [pc, #28]	; (2017c <nrf_flash_sync_check_time_limit+0x20>)
   2015e:	2201      	movs	r2, #1
   20160:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   20162:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   20166:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2016a:	4418      	add	r0, r3
   2016c:	4b04      	ldr	r3, [pc, #16]	; (20180 <nrf_flash_sync_check_time_limit+0x24>)
   2016e:	69db      	ldr	r3, [r3, #28]
}
   20170:	4298      	cmp	r0, r3
   20172:	bf34      	ite	cc
   20174:	2000      	movcc	r0, #0
   20176:	2001      	movcs	r0, #1
   20178:	4770      	bx	lr
   2017a:	bf00      	nop
   2017c:	40008000 	.word	0x40008000
   20180:	20003074 	.word	0x20003074

00020184 <temp_nrf5_mpsl_channel_get>:
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   20184:	290c      	cmp	r1, #12
{
   20186:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   20188:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   2018a:	d113      	bne.n	201b4 <temp_nrf5_mpsl_channel_get+0x30>
		return -ENOTSUP;
	}

	uval = data->sample;
   2018c:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2018e:	4c0b      	ldr	r4, [pc, #44]	; (201bc <temp_nrf5_mpsl_channel_get+0x38>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   20190:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   20194:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   20198:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2019a:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   2019e:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   201a0:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   201a4:	bfbd      	ittte	lt
   201a6:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   201a8:	425b      	neglt	r3, r3
		val->val1 = -(int32_t)val1_abs;
   201aa:	6011      	strlt	r1, [r2, #0]
	} else {
		val->val1 = (int32_t)val1_abs;
   201ac:	6011      	strge	r1, [r2, #0]
		val->val2 = (int32_t)val2_abs;
   201ae:	6053      	str	r3, [r2, #4]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   201b0:	2000      	movs	r0, #0
}
   201b2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   201b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   201b8:	e7fb      	b.n	201b2 <temp_nrf5_mpsl_channel_get+0x2e>
   201ba:	bf00      	nop
   201bc:	0003d090 	.word	0x0003d090

000201c0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   201c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   201c4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   201c8:	2a08      	cmp	r2, #8
   201ca:	d106      	bne.n	201da <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   201cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   201d0:	2b05      	cmp	r3, #5
   201d2:	d802      	bhi.n	201da <nrf52_errata_103+0x1a>
   201d4:	4a02      	ldr	r2, [pc, #8]	; (201e0 <nrf52_errata_103+0x20>)
   201d6:	5cd0      	ldrb	r0, [r2, r3]
   201d8:	4770      	bx	lr
        return false;
   201da:	2000      	movs	r0, #0
}
   201dc:	4770      	bx	lr
   201de:	bf00      	nop
   201e0:	0002ea41 	.word	0x0002ea41

000201e4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   201e4:	4a02      	ldr	r2, [pc, #8]	; (201f0 <nvmc_wait+0xc>)
   201e6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   201ea:	2b00      	cmp	r3, #0
   201ec:	d0fb      	beq.n	201e6 <nvmc_wait+0x2>
}
   201ee:	4770      	bx	lr
   201f0:	4001e000 	.word	0x4001e000

000201f4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   201f4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   201f6:	f00a f885 	bl	2a304 <nrf52_errata_136>
   201fa:	b140      	cbz	r0, 2020e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   201fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20200:	2200      	movs	r2, #0
   20202:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20206:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2020a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2020e:	f00a f879 	bl	2a304 <nrf52_errata_136>
   20212:	2800      	cmp	r0, #0
   20214:	d046      	beq.n	202a4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2021a:	4b60      	ldr	r3, [pc, #384]	; (2039c <SystemInit+0x1a8>)
   2021c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20220:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20224:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20228:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2022c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20230:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20234:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20238:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2023c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20240:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20244:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20248:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2024c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20250:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20254:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20258:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2025c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20260:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20264:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20268:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2026c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20270:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20274:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20278:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2027c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20280:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20284:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20288:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2028c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20290:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20294:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20298:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2029c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   202a0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   202a4:	f7ff ff8c 	bl	201c0 <nrf52_errata_103>
   202a8:	b118      	cbz	r0, 202b2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   202aa:	4b3d      	ldr	r3, [pc, #244]	; (203a0 <SystemInit+0x1ac>)
   202ac:	4a3d      	ldr	r2, [pc, #244]	; (203a4 <SystemInit+0x1b0>)
   202ae:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   202b2:	f7ff ff85 	bl	201c0 <nrf52_errata_103>
   202b6:	b118      	cbz	r0, 202c0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   202b8:	4b3b      	ldr	r3, [pc, #236]	; (203a8 <SystemInit+0x1b4>)
   202ba:	22fb      	movs	r2, #251	; 0xfb
   202bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   202c0:	f7ff ff7e 	bl	201c0 <nrf52_errata_103>
   202c4:	b170      	cbz	r0, 202e4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   202c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   202ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   202ce:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   202d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   202d6:	f022 020f 	bic.w	r2, r2, #15
   202da:	f003 030f 	and.w	r3, r3, #15
   202de:	4313      	orrs	r3, r2
   202e0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   202e4:	f7ff ff6c 	bl	201c0 <nrf52_errata_103>
   202e8:	b120      	cbz	r0, 202f4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   202ea:	4b30      	ldr	r3, [pc, #192]	; (203ac <SystemInit+0x1b8>)
   202ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   202f0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   202f4:	f00a f806 	bl	2a304 <nrf52_errata_136>
   202f8:	b148      	cbz	r0, 2030e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   202fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   202fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   20302:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20304:	bf44      	itt	mi
   20306:	f06f 0201 	mvnmi.w	r2, #1
   2030a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2030e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   20312:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20316:	2a08      	cmp	r2, #8
   20318:	d10e      	bne.n	20338 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2031a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2031e:	2b05      	cmp	r3, #5
   20320:	d802      	bhi.n	20328 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   20322:	4a23      	ldr	r2, [pc, #140]	; (203b0 <SystemInit+0x1bc>)
   20324:	5cd3      	ldrb	r3, [r2, r3]
   20326:	b13b      	cbz	r3, 20338 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20328:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2032c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20334:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20338:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2033c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20340:	2a00      	cmp	r2, #0
   20342:	db03      	blt.n	2034c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20344:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20348:	2b00      	cmp	r3, #0
   2034a:	da22      	bge.n	20392 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2034c:	4919      	ldr	r1, [pc, #100]	; (203b4 <SystemInit+0x1c0>)
   2034e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20350:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20354:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20358:	2412      	movs	r4, #18
    nvmc_wait();
   2035a:	f7ff ff43 	bl	201e4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2035e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   20362:	f7ff ff3f 	bl	201e4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20366:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2036a:	f7ff ff3b 	bl	201e4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2036e:	2300      	movs	r3, #0
   20370:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20374:	f7ff ff36 	bl	201e4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   20378:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2037c:	490e      	ldr	r1, [pc, #56]	; (203b8 <SystemInit+0x1c4>)
   2037e:	4b0f      	ldr	r3, [pc, #60]	; (203bc <SystemInit+0x1c8>)
   20380:	68ca      	ldr	r2, [r1, #12]
   20382:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20386:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20388:	60cb      	str	r3, [r1, #12]
   2038a:	f3bf 8f4f 	dsb	sy
    __NOP();
   2038e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20390:	e7fd      	b.n	2038e <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20392:	4b0b      	ldr	r3, [pc, #44]	; (203c0 <SystemInit+0x1cc>)
   20394:	4a0b      	ldr	r2, [pc, #44]	; (203c4 <SystemInit+0x1d0>)
   20396:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20398:	bd10      	pop	{r4, pc}
   2039a:	bf00      	nop
   2039c:	4000c000 	.word	0x4000c000
   203a0:	40005000 	.word	0x40005000
   203a4:	00038148 	.word	0x00038148
   203a8:	4000f000 	.word	0x4000f000
   203ac:	40029000 	.word	0x40029000
   203b0:	0002ea3b 	.word	0x0002ea3b
   203b4:	4001e000 	.word	0x4001e000
   203b8:	e000ed00 	.word	0xe000ed00
   203bc:	05fa0004 	.word	0x05fa0004
   203c0:	200007a0 	.word	0x200007a0
   203c4:	03d09000 	.word	0x03d09000

000203c8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   203c8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   203ca:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   203cc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   203ce:	fab2 f382 	clz	r3, r2
   203d2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   203d6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   203d8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   203da:	d014      	beq.n	20406 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   203dc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   203e0:	fa05 f303 	lsl.w	r3, r5, r3
   203e4:	ea22 0303 	bic.w	r3, r2, r3
   203e8:	e850 6f00 	ldrex	r6, [r0]
   203ec:	4296      	cmp	r6, r2
   203ee:	d104      	bne.n	203fa <nrfx_flag32_alloc+0x32>
   203f0:	e840 3c00 	strex	ip, r3, [r0]
   203f4:	f1bc 0f00 	cmp.w	ip, #0
   203f8:	d1f6      	bne.n	203e8 <nrfx_flag32_alloc+0x20>
   203fa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   203fe:	d1e5      	bne.n	203cc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   20400:	4802      	ldr	r0, [pc, #8]	; (2040c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   20402:	700c      	strb	r4, [r1, #0]
}
   20404:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   20406:	4802      	ldr	r0, [pc, #8]	; (20410 <nrfx_flag32_alloc+0x48>)
   20408:	e7fc      	b.n	20404 <nrfx_flag32_alloc+0x3c>
   2040a:	bf00      	nop
   2040c:	0bad0000 	.word	0x0bad0000
   20410:	0bad0002 	.word	0x0bad0002

00020414 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20414:	6803      	ldr	r3, [r0, #0]
   20416:	40cb      	lsrs	r3, r1
   20418:	07db      	lsls	r3, r3, #31
{
   2041a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   2041c:	d415      	bmi.n	2044a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2041e:	2301      	movs	r3, #1
   20420:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   20424:	6803      	ldr	r3, [r0, #0]
   20426:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2042a:	ea41 0203 	orr.w	r2, r1, r3
   2042e:	e850 4f00 	ldrex	r4, [r0]
   20432:	429c      	cmp	r4, r3
   20434:	d104      	bne.n	20440 <nrfx_flag32_free+0x2c>
   20436:	e840 2c00 	strex	ip, r2, [r0]
   2043a:	f1bc 0f00 	cmp.w	ip, #0
   2043e:	d1f6      	bne.n	2042e <nrfx_flag32_free+0x1a>
   20440:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20444:	d1ee      	bne.n	20424 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   20446:	4802      	ldr	r0, [pc, #8]	; (20450 <nrfx_flag32_free+0x3c>)
}
   20448:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2044a:	4802      	ldr	r0, [pc, #8]	; (20454 <nrfx_flag32_free+0x40>)
   2044c:	e7fc      	b.n	20448 <nrfx_flag32_free+0x34>
   2044e:	bf00      	nop
   20450:	0bad0000 	.word	0x0bad0000
   20454:	0bad0004 	.word	0x0bad0004

00020458 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20458:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2045a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2045e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20460:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20462:	6002      	str	r2, [r0, #0]
}
   20464:	4802      	ldr	r0, [pc, #8]	; (20470 <nrf_gpio_pin_port_decode+0x18>)
   20466:	bf18      	it	ne
   20468:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2046c:	4770      	bx	lr
   2046e:	bf00      	nop
   20470:	50000300 	.word	0x50000300

00020474 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20474:	4b03      	ldr	r3, [pc, #12]	; (20484 <pin_in_use_by_te+0x10>)
   20476:	3008      	adds	r0, #8
   20478:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2047c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20480:	4770      	bx	lr
   20482:	bf00      	nop
   20484:	200007a4 	.word	0x200007a4

00020488 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20488:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2048a:	f100 0308 	add.w	r3, r0, #8
   2048e:	4c0c      	ldr	r4, [pc, #48]	; (204c0 <call_handler+0x38>)
   20490:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   20494:	05da      	lsls	r2, r3, #23
{
   20496:	4605      	mov	r5, r0
   20498:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2049a:	d507      	bpl.n	204ac <call_handler+0x24>
   2049c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   204a0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   204a4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   204a8:	6852      	ldr	r2, [r2, #4]
   204aa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   204ac:	68a3      	ldr	r3, [r4, #8]
   204ae:	b12b      	cbz	r3, 204bc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   204b0:	68e2      	ldr	r2, [r4, #12]
   204b2:	4631      	mov	r1, r6
   204b4:	4628      	mov	r0, r5
    }
}
   204b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   204ba:	4718      	bx	r3
}
   204bc:	bd70      	pop	{r4, r5, r6, pc}
   204be:	bf00      	nop
   204c0:	200007a4 	.word	0x200007a4

000204c4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   204c4:	4a12      	ldr	r2, [pc, #72]	; (20510 <release_handler+0x4c>)
   204c6:	3008      	adds	r0, #8
{
   204c8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   204ca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   204ce:	05d9      	lsls	r1, r3, #23
   204d0:	d51b      	bpl.n	2050a <release_handler+0x46>
   204d2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   204d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   204da:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   204de:	f102 0410 	add.w	r4, r2, #16
   204e2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   204e4:	f834 3b02 	ldrh.w	r3, [r4], #2
   204e8:	f413 7f80 	tst.w	r3, #256	; 0x100
   204ec:	d003      	beq.n	204f6 <release_handler+0x32>
   204ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
   204f2:	4299      	cmp	r1, r3
   204f4:	d009      	beq.n	2050a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   204f6:	3001      	adds	r0, #1
   204f8:	2830      	cmp	r0, #48	; 0x30
   204fa:	d1f3      	bne.n	204e4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   204fc:	2300      	movs	r3, #0
   204fe:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20502:	4804      	ldr	r0, [pc, #16]	; (20514 <release_handler+0x50>)
}
   20504:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   20506:	f7ff bf85 	b.w	20414 <nrfx_flag32_free>
}
   2050a:	bc10      	pop	{r4}
   2050c:	4770      	bx	lr
   2050e:	bf00      	nop
   20510:	200007a4 	.word	0x200007a4
   20514:	20000818 	.word	0x20000818

00020518 <pin_handler_trigger_uninit>:
{
   20518:	b538      	push	{r3, r4, r5, lr}
   2051a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2051c:	f7ff ffaa 	bl	20474 <pin_in_use_by_te>
   20520:	4c09      	ldr	r4, [pc, #36]	; (20548 <pin_handler_trigger_uninit+0x30>)
   20522:	f102 0508 	add.w	r5, r2, #8
   20526:	b140      	cbz	r0, 2053a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20528:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2052c:	4907      	ldr	r1, [pc, #28]	; (2054c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2052e:	0b5b      	lsrs	r3, r3, #13
   20530:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   20534:	2000      	movs	r0, #0
   20536:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2053a:	4610      	mov	r0, r2
   2053c:	f7ff ffc2 	bl	204c4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   20540:	2300      	movs	r3, #0
   20542:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   20546:	bd38      	pop	{r3, r4, r5, pc}
   20548:	200007a4 	.word	0x200007a4
   2054c:	40006000 	.word	0x40006000

00020550 <nrfx_gpiote_input_configure>:
{
   20550:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20554:	4604      	mov	r4, r0
   20556:	4617      	mov	r7, r2
   20558:	461d      	mov	r5, r3
    if (p_input_config)
   2055a:	b321      	cbz	r1, 205a6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2055c:	4e4e      	ldr	r6, [pc, #312]	; (20698 <nrfx_gpiote_input_configure+0x148>)
   2055e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20562:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   20566:	079b      	lsls	r3, r3, #30
   20568:	d506      	bpl.n	20578 <nrfx_gpiote_input_configure+0x28>
   2056a:	f7ff ff83 	bl	20474 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2056e:	b118      	cbz	r0, 20578 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   20570:	484a      	ldr	r0, [pc, #296]	; (2069c <nrfx_gpiote_input_configure+0x14c>)
}
   20572:	b004      	add	sp, #16
   20574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   20578:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2057a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2057e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   20582:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   20586:	f10d 020f 	add.w	r2, sp, #15
   2058a:	460b      	mov	r3, r1
   2058c:	4620      	mov	r0, r4
   2058e:	f10d 010e 	add.w	r1, sp, #14
   20592:	f009 fec3 	bl	2a31c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20596:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   2059a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2059e:	f043 0301 	orr.w	r3, r3, #1
   205a2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   205a6:	b197      	cbz	r7, 205ce <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   205a8:	4b3b      	ldr	r3, [pc, #236]	; (20698 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   205aa:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   205ac:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   205ae:	f104 0008 	add.w	r0, r4, #8
   205b2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   205b6:	078f      	lsls	r7, r1, #30
   205b8:	d50c      	bpl.n	205d4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   205ba:	2a00      	cmp	r2, #0
   205bc:	d1d8      	bne.n	20570 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   205be:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   205c2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   205c6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   205ca:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   205ce:	bbcd      	cbnz	r5, 20644 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   205d0:	4833      	ldr	r0, [pc, #204]	; (206a0 <nrfx_gpiote_input_configure+0x150>)
   205d2:	e7ce      	b.n	20572 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   205d4:	f021 0120 	bic.w	r1, r1, #32
   205d8:	04c9      	lsls	r1, r1, #19
   205da:	0cc9      	lsrs	r1, r1, #19
   205dc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   205e0:	2a00      	cmp	r2, #0
   205e2:	d0ec      	beq.n	205be <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   205e4:	2e03      	cmp	r6, #3
   205e6:	d8c3      	bhi.n	20570 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   205e8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   205ea:	b92e      	cbnz	r6, 205f8 <nrfx_gpiote_input_configure+0xa8>
   205ec:	4a2d      	ldr	r2, [pc, #180]	; (206a4 <nrfx_gpiote_input_configure+0x154>)
   205ee:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   205f2:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   205f6:	e7e2      	b.n	205be <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   205f8:	00ba      	lsls	r2, r7, #2
   205fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   205fe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20602:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   20606:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2060a:	f02c 0c03 	bic.w	ip, ip, #3
   2060e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20612:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   20616:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2061a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2061e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20622:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   20626:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2062a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2062e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   20632:	ea4c 0c0e 	orr.w	ip, ip, lr
   20636:	f041 0120 	orr.w	r1, r1, #32
   2063a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2063e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   20642:	e7bc      	b.n	205be <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20644:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20648:	4620      	mov	r0, r4
   2064a:	f7ff ff3b 	bl	204c4 <release_handler>
    if (!handler)
   2064e:	2e00      	cmp	r6, #0
   20650:	d0be      	beq.n	205d0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20652:	4d11      	ldr	r5, [pc, #68]	; (20698 <nrfx_gpiote_input_configure+0x148>)
   20654:	682b      	ldr	r3, [r5, #0]
   20656:	429e      	cmp	r6, r3
   20658:	d104      	bne.n	20664 <nrfx_gpiote_input_configure+0x114>
   2065a:	686b      	ldr	r3, [r5, #4]
   2065c:	429f      	cmp	r7, r3
   2065e:	d101      	bne.n	20664 <nrfx_gpiote_input_configure+0x114>
   20660:	2200      	movs	r2, #0
   20662:	e00a      	b.n	2067a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20664:	4810      	ldr	r0, [pc, #64]	; (206a8 <nrfx_gpiote_input_configure+0x158>)
   20666:	f10d 010f 	add.w	r1, sp, #15
   2066a:	f7ff fead 	bl	203c8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2066e:	4b0c      	ldr	r3, [pc, #48]	; (206a0 <nrfx_gpiote_input_configure+0x150>)
   20670:	4298      	cmp	r0, r3
   20672:	f47f af7e 	bne.w	20572 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   20676:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2067a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2067e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20682:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20684:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20686:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2068a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20692:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   20696:	e79b      	b.n	205d0 <nrfx_gpiote_input_configure+0x80>
   20698:	200007a4 	.word	0x200007a4
   2069c:	0bad0004 	.word	0x0bad0004
   206a0:	0bad0000 	.word	0x0bad0000
   206a4:	40006000 	.word	0x40006000
   206a8:	20000818 	.word	0x20000818

000206ac <nrfx_gpiote_output_configure>:
{
   206ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   206ae:	4604      	mov	r4, r0
   206b0:	b085      	sub	sp, #20
   206b2:	4615      	mov	r5, r2
    if (p_config)
   206b4:	b319      	cbz	r1, 206fe <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   206b6:	4e33      	ldr	r6, [pc, #204]	; (20784 <nrfx_gpiote_output_configure+0xd8>)
   206b8:	f100 0708 	add.w	r7, r0, #8
   206bc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   206c0:	0793      	lsls	r3, r2, #30
   206c2:	d403      	bmi.n	206cc <nrfx_gpiote_output_configure+0x20>
   206c4:	f7ff fed6 	bl	20474 <pin_in_use_by_te>
   206c8:	2800      	cmp	r0, #0
   206ca:	d158      	bne.n	2077e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   206cc:	f012 0f1c 	tst.w	r2, #28
   206d0:	d002      	beq.n	206d8 <nrfx_gpiote_output_configure+0x2c>
   206d2:	784b      	ldrb	r3, [r1, #1]
   206d4:	2b01      	cmp	r3, #1
   206d6:	d052      	beq.n	2077e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   206d8:	2301      	movs	r3, #1
   206da:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   206de:	2300      	movs	r3, #0
   206e0:	e9cd 1300 	strd	r1, r3, [sp]
   206e4:	1c4a      	adds	r2, r1, #1
   206e6:	1c8b      	adds	r3, r1, #2
   206e8:	4620      	mov	r0, r4
   206ea:	f10d 010f 	add.w	r1, sp, #15
   206ee:	f009 fe15 	bl	2a31c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   206f2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   206f6:	f043 0303 	orr.w	r3, r3, #3
   206fa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   206fe:	b915      	cbnz	r5, 20706 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   20700:	4821      	ldr	r0, [pc, #132]	; (20788 <nrfx_gpiote_output_configure+0xdc>)
}
   20702:	b005      	add	sp, #20
   20704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20706:	4e1f      	ldr	r6, [pc, #124]	; (20784 <nrfx_gpiote_output_configure+0xd8>)
   20708:	f104 0708 	add.w	r7, r4, #8
   2070c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   20710:	0783      	lsls	r3, r0, #30
   20712:	d534      	bpl.n	2077e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   20714:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   20718:	4661      	mov	r1, ip
   2071a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2071c:	f020 0020 	bic.w	r0, r0, #32
   20720:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20724:	04c0      	lsls	r0, r0, #19
   20726:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2072a:	0cc0      	lsrs	r0, r0, #19
   2072c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20730:	2300      	movs	r3, #0
   20732:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20736:	786a      	ldrb	r2, [r5, #1]
   20738:	2a00      	cmp	r2, #0
   2073a:	d0e1      	beq.n	20700 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2073c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20740:	78ad      	ldrb	r5, [r5, #2]
   20742:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   20746:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2074a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2074e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20752:	0223      	lsls	r3, r4, #8
   20754:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20758:	0412      	lsls	r2, r2, #16
   2075a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2075e:	ea43 030e 	orr.w	r3, r3, lr
   20762:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20764:	052a      	lsls	r2, r5, #20
   20766:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2076a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2076e:	4313      	orrs	r3, r2
   20770:	f040 0020 	orr.w	r0, r0, #32
   20774:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20778:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2077c:	e7c0      	b.n	20700 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   2077e:	4803      	ldr	r0, [pc, #12]	; (2078c <nrfx_gpiote_output_configure+0xe0>)
   20780:	e7bf      	b.n	20702 <nrfx_gpiote_output_configure+0x56>
   20782:	bf00      	nop
   20784:	200007a4 	.word	0x200007a4
   20788:	0bad0000 	.word	0x0bad0000
   2078c:	0bad0004 	.word	0x0bad0004

00020790 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20790:	4b01      	ldr	r3, [pc, #4]	; (20798 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20792:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20796:	4770      	bx	lr
   20798:	200007a4 	.word	0x200007a4

0002079c <nrfx_gpiote_channel_get>:
{
   2079c:	b508      	push	{r3, lr}
   2079e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   207a0:	f7ff fe68 	bl	20474 <pin_in_use_by_te>
   207a4:	b138      	cbz	r0, 207b6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   207a6:	4b05      	ldr	r3, [pc, #20]	; (207bc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   207a8:	4805      	ldr	r0, [pc, #20]	; (207c0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   207aa:	3208      	adds	r2, #8
   207ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   207b0:	0b5b      	lsrs	r3, r3, #13
   207b2:	700b      	strb	r3, [r1, #0]
}
   207b4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   207b6:	4803      	ldr	r0, [pc, #12]	; (207c4 <nrfx_gpiote_channel_get+0x28>)
   207b8:	e7fc      	b.n	207b4 <nrfx_gpiote_channel_get+0x18>
   207ba:	bf00      	nop
   207bc:	200007a4 	.word	0x200007a4
   207c0:	0bad0000 	.word	0x0bad0000
   207c4:	0bad0004 	.word	0x0bad0004

000207c8 <nrfx_gpiote_init>:
{
   207c8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   207ca:	4c0f      	ldr	r4, [pc, #60]	; (20808 <nrfx_gpiote_init+0x40>)
   207cc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   207d0:	b9bd      	cbnz	r5, 20802 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   207d2:	2260      	movs	r2, #96	; 0x60
   207d4:	4629      	mov	r1, r5
   207d6:	f104 0010 	add.w	r0, r4, #16
   207da:	f007 f833 	bl	27844 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   207de:	2006      	movs	r0, #6
   207e0:	f7f4 f828 	bl	14834 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   207e4:	4b09      	ldr	r3, [pc, #36]	; (2080c <nrfx_gpiote_init+0x44>)
    return err_code;
   207e6:	480a      	ldr	r0, [pc, #40]	; (20810 <nrfx_gpiote_init+0x48>)
   207e8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   207ec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   207f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   207f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   207f8:	2301      	movs	r3, #1
   207fa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   207fe:	6763      	str	r3, [r4, #116]	; 0x74
}
   20800:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20802:	4804      	ldr	r0, [pc, #16]	; (20814 <nrfx_gpiote_init+0x4c>)
   20804:	e7fc      	b.n	20800 <nrfx_gpiote_init+0x38>
   20806:	bf00      	nop
   20808:	200007a4 	.word	0x200007a4
   2080c:	40006000 	.word	0x40006000
   20810:	0bad0000 	.word	0x0bad0000
   20814:	0bad0005 	.word	0x0bad0005

00020818 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20818:	4b03      	ldr	r3, [pc, #12]	; (20828 <nrfx_gpiote_is_init+0x10>)
   2081a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2081e:	3800      	subs	r0, #0
   20820:	bf18      	it	ne
   20822:	2001      	movne	r0, #1
   20824:	4770      	bx	lr
   20826:	bf00      	nop
   20828:	200007a4 	.word	0x200007a4

0002082c <nrfx_gpiote_channel_free>:
{
   2082c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2082e:	4801      	ldr	r0, [pc, #4]	; (20834 <nrfx_gpiote_channel_free+0x8>)
   20830:	f7ff bdf0 	b.w	20414 <nrfx_flag32_free>
   20834:	20000814 	.word	0x20000814

00020838 <nrfx_gpiote_channel_alloc>:
{
   20838:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2083a:	4801      	ldr	r0, [pc, #4]	; (20840 <nrfx_gpiote_channel_alloc+0x8>)
   2083c:	f7ff bdc4 	b.w	203c8 <nrfx_flag32_alloc>
   20840:	20000814 	.word	0x20000814

00020844 <nrfx_gpiote_trigger_enable>:
{
   20844:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20846:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20848:	f7ff fe14 	bl	20474 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2084c:	f104 0208 	add.w	r2, r4, #8
   20850:	4b1e      	ldr	r3, [pc, #120]	; (208cc <nrfx_gpiote_trigger_enable+0x88>)
   20852:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20856:	b1e8      	cbz	r0, 20894 <nrfx_gpiote_trigger_enable+0x50>
   20858:	f013 0502 	ands.w	r5, r3, #2
   2085c:	d11a      	bne.n	20894 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2085e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20860:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   20862:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   20866:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2086a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2086e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20872:	6005      	str	r5, [r0, #0]
   20874:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20876:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2087a:	f040 0001 	orr.w	r0, r0, #1
   2087e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20882:	b129      	cbz	r1, 20890 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20884:	2201      	movs	r2, #1
   20886:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2088a:	4a11      	ldr	r2, [pc, #68]	; (208d0 <nrfx_gpiote_trigger_enable+0x8c>)
   2088c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20890:	b003      	add	sp, #12
   20892:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20894:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20898:	2b04      	cmp	r3, #4
   2089a:	d012      	beq.n	208c2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2089c:	2b05      	cmp	r3, #5
   2089e:	d012      	beq.n	208c6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   208a0:	a801      	add	r0, sp, #4
   208a2:	9401      	str	r4, [sp, #4]
   208a4:	f7ff fdd8 	bl	20458 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   208a8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   208aa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   208ae:	40d9      	lsrs	r1, r3
   208b0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   208b4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   208b6:	4620      	mov	r0, r4
}
   208b8:	b003      	add	sp, #12
   208ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   208be:	f009 bd74 	b.w	2a3aa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   208c2:	2103      	movs	r1, #3
   208c4:	e7f7      	b.n	208b6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   208c6:	2102      	movs	r1, #2
   208c8:	e7f5      	b.n	208b6 <nrfx_gpiote_trigger_enable+0x72>
   208ca:	bf00      	nop
   208cc:	200007a4 	.word	0x200007a4
   208d0:	40006000 	.word	0x40006000

000208d4 <nrfx_gpiote_trigger_disable>:
{
   208d4:	b508      	push	{r3, lr}
   208d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   208d8:	f7ff fdcc 	bl	20474 <pin_in_use_by_te>
   208dc:	b1c0      	cbz	r0, 20910 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   208de:	f102 0108 	add.w	r1, r2, #8
   208e2:	4b0e      	ldr	r3, [pc, #56]	; (2091c <nrfx_gpiote_trigger_disable+0x48>)
   208e4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   208e8:	0799      	lsls	r1, r3, #30
   208ea:	d411      	bmi.n	20910 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   208ec:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   208ee:	2201      	movs	r2, #1
   208f0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   208f2:	009b      	lsls	r3, r3, #2
   208f4:	490a      	ldr	r1, [pc, #40]	; (20920 <nrfx_gpiote_trigger_disable+0x4c>)
   208f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   208fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   208fe:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20902:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20906:	f022 0203 	bic.w	r2, r2, #3
   2090a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2090e:	bd08      	pop	{r3, pc}
   20910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20914:	2100      	movs	r1, #0
   20916:	4610      	mov	r0, r2
   20918:	f009 bd47 	b.w	2a3aa <nrf_gpio_cfg_sense_set>
   2091c:	200007a4 	.word	0x200007a4
   20920:	40006000 	.word	0x40006000

00020924 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20924:	4b0e      	ldr	r3, [pc, #56]	; (20960 <nrfx_gpiote_pin_uninit+0x3c>)
   20926:	f100 0208 	add.w	r2, r0, #8
{
   2092a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2092c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   20930:	07db      	lsls	r3, r3, #31
{
   20932:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20934:	d511      	bpl.n	2095a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   20936:	f7ff ffcd 	bl	208d4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2093a:	4620      	mov	r0, r4
   2093c:	f7ff fdec 	bl	20518 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20940:	a801      	add	r0, sp, #4
   20942:	9401      	str	r4, [sp, #4]
   20944:	f7ff fd88 	bl	20458 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20948:	9b01      	ldr	r3, [sp, #4]
   2094a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2094e:	2202      	movs	r2, #2
   20950:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   20954:	4803      	ldr	r0, [pc, #12]	; (20964 <nrfx_gpiote_pin_uninit+0x40>)
}
   20956:	b002      	add	sp, #8
   20958:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2095a:	4803      	ldr	r0, [pc, #12]	; (20968 <nrfx_gpiote_pin_uninit+0x44>)
   2095c:	e7fb      	b.n	20956 <nrfx_gpiote_pin_uninit+0x32>
   2095e:	bf00      	nop
   20960:	200007a4 	.word	0x200007a4
   20964:	0bad0000 	.word	0x0bad0000
   20968:	0bad0004 	.word	0x0bad0004

0002096c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20970:	4b64      	ldr	r3, [pc, #400]	; (20b04 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   20972:	4865      	ldr	r0, [pc, #404]	; (20b08 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20974:	4965      	ldr	r1, [pc, #404]	; (20b0c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   20976:	2600      	movs	r6, #0
{
   20978:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2097a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2097c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2097e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20980:	b135      	cbz	r5, 20990 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   20982:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   20986:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20988:	bf1e      	ittt	ne
   2098a:	601c      	strne	r4, [r3, #0]
   2098c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2098e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20990:	3304      	adds	r3, #4
   20992:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   20994:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20998:	d1f1      	bne.n	2097e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2099a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 20b08 <nrfx_gpiote_irq_handler+0x19c>
   2099e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   209a2:	2b00      	cmp	r3, #0
   209a4:	f000 8091 	beq.w	20aca <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   209a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   209ac:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   209b0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   209b2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   209b6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   209ba:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   209bc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   209c0:	2700      	movs	r7, #0
            while (latch[i])
   209c2:	f10d 0910 	add.w	r9, sp, #16
   209c6:	017b      	lsls	r3, r7, #5
   209c8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   209ca:	f04f 0a01 	mov.w	sl, #1
   209ce:	e049      	b.n	20a64 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   209d0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   209d2:	4a4f      	ldr	r2, [pc, #316]	; (20b10 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   209d4:	fa94 f4a4 	rbit	r4, r4
   209d8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   209dc:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   209de:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   209e2:	08e0      	lsrs	r0, r4, #3
   209e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   209e8:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   209ea:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   209ee:	fa0a fc02 	lsl.w	ip, sl, r2
   209f2:	f819 2000 	ldrb.w	r2, [r9, r0]
   209f6:	ea22 020c 	bic.w	r2, r2, ip
   209fa:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   209fe:	a803      	add	r0, sp, #12
   20a00:	f3c3 0582 	ubfx	r5, r3, #2, #3
   20a04:	0899      	lsrs	r1, r3, #2
   20a06:	f7ff fd27 	bl	20458 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20a0a:	9a03      	ldr	r2, [sp, #12]
   20a0c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   20a10:	074b      	lsls	r3, r1, #29
   20a12:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20a16:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   20a18:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   20a1c:	d529      	bpl.n	20a72 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   20a1e:	4620      	mov	r0, r4
   20a20:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20a22:	b2d5      	uxtb	r5, r2
   20a24:	f7ff fd30 	bl	20488 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20a28:	a803      	add	r0, sp, #12
   20a2a:	9403      	str	r4, [sp, #12]
   20a2c:	f7ff fd14 	bl	20458 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20a30:	9b03      	ldr	r3, [sp, #12]
   20a32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20a36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   20a3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   20a3e:	429d      	cmp	r5, r3
   20a40:	d107      	bne.n	20a52 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20a42:	2100      	movs	r1, #0
   20a44:	4620      	mov	r0, r4
   20a46:	f009 fcb0 	bl	2a3aa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   20a4a:	4629      	mov	r1, r5
   20a4c:	4620      	mov	r0, r4
   20a4e:	f009 fcac 	bl	2a3aa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20a52:	a803      	add	r0, sp, #12
   20a54:	9403      	str	r4, [sp, #12]
   20a56:	f7ff fcff 	bl	20458 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   20a5a:	9b03      	ldr	r3, [sp, #12]
   20a5c:	fa0a f303 	lsl.w	r3, sl, r3
   20a60:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   20a64:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   20a68:	2c00      	cmp	r4, #0
   20a6a:	d1b1      	bne.n	209d0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20a6c:	b9cf      	cbnz	r7, 20aa2 <nrfx_gpiote_irq_handler+0x136>
   20a6e:	2701      	movs	r7, #1
   20a70:	e7a9      	b.n	209c6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20a72:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20a74:	bf0c      	ite	eq
   20a76:	2103      	moveq	r1, #3
   20a78:	2102      	movne	r1, #2
   20a7a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20a7c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20a7e:	f009 fc94 	bl	2a3aa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20a82:	2d03      	cmp	r5, #3
   20a84:	d004      	beq.n	20a90 <nrfx_gpiote_irq_handler+0x124>
   20a86:	9a01      	ldr	r2, [sp, #4]
   20a88:	2a02      	cmp	r2, #2
   20a8a:	d106      	bne.n	20a9a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20a8c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20a8e:	d1e0      	bne.n	20a52 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   20a90:	4659      	mov	r1, fp
   20a92:	4620      	mov	r0, r4
   20a94:	f7ff fcf8 	bl	20488 <call_handler>
   20a98:	e7db      	b.n	20a52 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20a9a:	2a03      	cmp	r2, #3
   20a9c:	d1d9      	bne.n	20a52 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20a9e:	2d02      	cmp	r5, #2
   20aa0:	e7f5      	b.n	20a8e <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20aa2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   20aa6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   20aaa:	491a      	ldr	r1, [pc, #104]	; (20b14 <nrfx_gpiote_irq_handler+0x1a8>)
   20aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20ab0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20ab4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20ab6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20aba:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   20abe:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20ac0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   20ac4:	4313      	orrs	r3, r2
   20ac6:	f47f af7b 	bne.w	209c0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   20aca:	2401      	movs	r4, #1
    while (mask)
   20acc:	b916      	cbnz	r6, 20ad4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   20ace:	b007      	add	sp, #28
   20ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   20ad4:	fa96 f3a6 	rbit	r3, r6
   20ad8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20adc:	fa04 f203 	lsl.w	r2, r4, r3
   20ae0:	009b      	lsls	r3, r3, #2
   20ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20ae6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20aea:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20aee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   20af2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20af6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   20afa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   20afe:	f7ff fcc3 	bl	20488 <call_handler>
   20b02:	e7e3      	b.n	20acc <nrfx_gpiote_irq_handler+0x160>
   20b04:	40006100 	.word	0x40006100
   20b08:	40006000 	.word	0x40006000
   20b0c:	40006120 	.word	0x40006120
   20b10:	200007a4 	.word	0x200007a4
   20b14:	50000300 	.word	0x50000300

00020b18 <nvmc_word_write>:
   20b18:	4a04      	ldr	r2, [pc, #16]	; (20b2c <nvmc_word_write+0x14>)
   20b1a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20b1e:	07db      	lsls	r3, r3, #31
   20b20:	d5fb      	bpl.n	20b1a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   20b22:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20b24:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   20b28:	4770      	bx	lr
   20b2a:	bf00      	nop
   20b2c:	4001e000 	.word	0x4001e000

00020b30 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   20b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20b34:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   20b36:	fbb0 f3f2 	udiv	r3, r0, r2
   20b3a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   20b3e:	b973      	cbnz	r3, 20b5e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20b40:	4b08      	ldr	r3, [pc, #32]	; (20b64 <nrfx_nvmc_page_erase+0x34>)
   20b42:	2202      	movs	r2, #2
   20b44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20b48:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20b4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20b50:	07d2      	lsls	r2, r2, #31
   20b52:	d5fb      	bpl.n	20b4c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   20b54:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   20b56:	4804      	ldr	r0, [pc, #16]	; (20b68 <nrfx_nvmc_page_erase+0x38>)
   20b58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   20b5c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   20b5e:	4803      	ldr	r0, [pc, #12]	; (20b6c <nrfx_nvmc_page_erase+0x3c>)
}
   20b60:	4770      	bx	lr
   20b62:	bf00      	nop
   20b64:	4001e000 	.word	0x4001e000
   20b68:	0bad0000 	.word	0x0bad0000
   20b6c:	0bad000a 	.word	0x0bad000a

00020b70 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20b70:	b510      	push	{r4, lr}
   20b72:	4c05      	ldr	r4, [pc, #20]	; (20b88 <nrfx_nvmc_word_write+0x18>)
   20b74:	2301      	movs	r3, #1
   20b76:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   20b7a:	f7ff ffcd 	bl	20b18 <nvmc_word_write>
   20b7e:	2300      	movs	r3, #0
   20b80:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   20b84:	bd10      	pop	{r4, pc}
   20b86:	bf00      	nop
   20b88:	4001e000 	.word	0x4001e000

00020b8c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20b8c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   20b8e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   20b92:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20b94:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20b96:	6002      	str	r2, [r0, #0]
}
   20b98:	4802      	ldr	r0, [pc, #8]	; (20ba4 <nrf_gpio_pin_port_decode+0x18>)
   20b9a:	bf18      	it	ne
   20b9c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   20ba0:	4770      	bx	lr
   20ba2:	bf00      	nop
   20ba4:	50000300 	.word	0x50000300

00020ba8 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   20ba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20bac:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   20bae:	4c51      	ldr	r4, [pc, #324]	; (20cf4 <nrfx_spi_init+0x14c>)
   20bb0:	f04f 0c28 	mov.w	ip, #40	; 0x28
   20bb4:	fb0c fc07 	mul.w	ip, ip, r7
{
   20bb8:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   20bba:	eb04 000c 	add.w	r0, r4, ip
   20bbe:	7f05      	ldrb	r5, [r0, #28]
   20bc0:	2d00      	cmp	r5, #0
   20bc2:	f040 8095 	bne.w	20cf0 <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   20bc6:	6835      	ldr	r5, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   20bc8:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   20bca:	f844 200c 	str.w	r2, [r4, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   20bce:	7bcb      	ldrb	r3, [r1, #15]
   20bd0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   20bd4:	78ca      	ldrb	r2, [r1, #3]
   20bd6:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   20bd8:	794a      	ldrb	r2, [r1, #5]
   20bda:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   20bdc:	2b00      	cmp	r3, #0
   20bde:	d140      	bne.n	20c62 <nrfx_spi_init+0xba>
    if (value == 0)
   20be0:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   20be2:	7808      	ldrb	r0, [r1, #0]
   20be4:	2b01      	cmp	r3, #1
   20be6:	d87a      	bhi.n	20cde <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   20be8:	f009 fc17 	bl	2a41a <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   20bec:	780b      	ldrb	r3, [r1, #0]
   20bee:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20bf0:	a801      	add	r0, sp, #4
   20bf2:	f7ff ffcb 	bl	20b8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20bf6:	9b01      	ldr	r3, [sp, #4]
   20bf8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20bfc:	2201      	movs	r2, #1
   20bfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   20c02:	7848      	ldrb	r0, [r1, #1]
   20c04:	28ff      	cmp	r0, #255	; 0xff
   20c06:	d00c      	beq.n	20c22 <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   20c08:	f009 fc07 	bl	2a41a <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   20c0c:	784b      	ldrb	r3, [r1, #1]
   20c0e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20c10:	a801      	add	r0, sp, #4
   20c12:	f7ff ffbb 	bl	20b8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20c16:	9b01      	ldr	r3, [sp, #4]
   20c18:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20c1c:	2203      	movs	r2, #3
   20c1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   20c22:	788b      	ldrb	r3, [r1, #2]
   20c24:	2bff      	cmp	r3, #255	; 0xff
   20c26:	d00c      	beq.n	20c42 <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20c28:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   20c2a:	f891 800e 	ldrb.w	r8, [r1, #14]
   20c2e:	9301      	str	r3, [sp, #4]
   20c30:	f7ff ffac 	bl	20b8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20c34:	9b01      	ldr	r3, [sp, #4]
   20c36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20c3a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   20c3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20c42:	78c8      	ldrb	r0, [r1, #3]
   20c44:	28ff      	cmp	r0, #255	; 0xff
   20c46:	d00c      	beq.n	20c62 <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   20c48:	f009 fbda 	bl	2a400 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   20c4c:	78cb      	ldrb	r3, [r1, #3]
   20c4e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20c50:	a801      	add	r0, sp, #4
   20c52:	f7ff ff9b 	bl	20b8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20c56:	9b01      	ldr	r3, [sp, #4]
   20c58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20c5c:	2203      	movs	r2, #3
   20c5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20c62:	7c0b      	ldrb	r3, [r1, #16]
   20c64:	b993      	cbnz	r3, 20c8c <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   20c66:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   20c68:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   20c6a:	2bff      	cmp	r3, #255	; 0xff
   20c6c:	bf18      	it	ne
   20c6e:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   20c70:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   20c72:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   20c76:	bf08      	it	eq
   20c78:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   20c7c:	2bff      	cmp	r3, #255	; 0xff
   20c7e:	bf08      	it	eq
   20c80:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   20c84:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   20c88:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   20c8c:	688b      	ldr	r3, [r1, #8]
   20c8e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   20c92:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   20c94:	7b0a      	ldrb	r2, [r1, #12]
   20c96:	3b00      	subs	r3, #0
   20c98:	bf18      	it	ne
   20c9a:	2301      	movne	r3, #1
    switch (spi_mode)
   20c9c:	2a02      	cmp	r2, #2
   20c9e:	d021      	beq.n	20ce4 <nrfx_spi_init+0x13c>
   20ca0:	2a03      	cmp	r2, #3
   20ca2:	d022      	beq.n	20cea <nrfx_spi_init+0x142>
   20ca4:	2a01      	cmp	r2, #1
   20ca6:	d101      	bne.n	20cac <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   20ca8:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   20cac:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   20cb0:	2301      	movs	r3, #1
   20cb2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   20cb6:	2328      	movs	r3, #40	; 0x28
   20cb8:	437b      	muls	r3, r7
   20cba:	58e3      	ldr	r3, [r4, r3]
   20cbc:	b123      	cbz	r3, 20cc8 <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   20cbe:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   20cc0:	f340 3007 	sbfx	r0, r0, #12, #8
   20cc4:	f7f3 fdb6 	bl	14834 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   20cc8:	2328      	movs	r3, #40	; 0x28
   20cca:	fb03 4407 	mla	r4, r3, r7, r4
   20cce:	2300      	movs	r3, #0
   20cd0:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   20cd2:	4809      	ldr	r0, [pc, #36]	; (20cf8 <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20cd4:	2301      	movs	r3, #1
   20cd6:	7723      	strb	r3, [r4, #28]
}
   20cd8:	b002      	add	sp, #8
   20cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   20cde:	f009 fb8f 	bl	2a400 <nrf_gpio_pin_set>
   20ce2:	e783      	b.n	20bec <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   20ce4:	f043 0304 	orr.w	r3, r3, #4
        break;
   20ce8:	e7e0      	b.n	20cac <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   20cea:	f043 0306 	orr.w	r3, r3, #6
        break;
   20cee:	e7dd      	b.n	20cac <nrfx_spi_init+0x104>
        return err_code;
   20cf0:	4802      	ldr	r0, [pc, #8]	; (20cfc <nrfx_spi_init+0x154>)
   20cf2:	e7f1      	b.n	20cd8 <nrfx_spi_init+0x130>
   20cf4:	200030bc 	.word	0x200030bc
   20cf8:	0bad0000 	.word	0x0bad0000
   20cfc:	0bad0005 	.word	0x0bad0005

00020d00 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   20d00:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20d02:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   20d04:	4c19      	ldr	r4, [pc, #100]	; (20d6c <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   20d06:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   20d08:	2328      	movs	r3, #40	; 0x28
   20d0a:	4373      	muls	r3, r6
   20d0c:	58e3      	ldr	r3, [r4, r3]
   20d0e:	b133      	cbz	r3, 20d1e <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   20d10:	f345 3007 	sbfx	r0, r5, #12, #8
   20d14:	f7f3 fd9e 	bl	14854 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   20d18:	2304      	movs	r3, #4
   20d1a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   20d1e:	2300      	movs	r3, #0
   20d20:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   20d24:	2328      	movs	r3, #40	; 0x28
   20d26:	fb03 4306 	mla	r3, r3, r6, r4
   20d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   20d2e:	b9bb      	cbnz	r3, 20d60 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   20d30:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   20d34:	f009 fb56 	bl	2a3e4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   20d38:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   20d3c:	1c42      	adds	r2, r0, #1
   20d3e:	d001      	beq.n	20d44 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   20d40:	f009 fb50 	bl	2a3e4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   20d44:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   20d48:	1c43      	adds	r3, r0, #1
   20d4a:	d001      	beq.n	20d50 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   20d4c:	f009 fb4a 	bl	2a3e4 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20d50:	2328      	movs	r3, #40	; 0x28
   20d52:	fb03 4306 	mla	r3, r3, r6, r4
   20d56:	7f98      	ldrb	r0, [r3, #30]
   20d58:	28ff      	cmp	r0, #255	; 0xff
   20d5a:	d001      	beq.n	20d60 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   20d5c:	f009 fb42 	bl	2a3e4 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   20d60:	2328      	movs	r3, #40	; 0x28
   20d62:	fb03 4406 	mla	r4, r3, r6, r4
   20d66:	2300      	movs	r3, #0
   20d68:	7723      	strb	r3, [r4, #28]
}
   20d6a:	bd70      	pop	{r4, r5, r6, pc}
   20d6c:	200030bc 	.word	0x200030bc

00020d70 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   20d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20d74:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   20d76:	4c39      	ldr	r4, [pc, #228]	; (20e5c <nrfx_spi_xfer+0xec>)
   20d78:	2328      	movs	r3, #40	; 0x28
   20d7a:	437b      	muls	r3, r7
{
   20d7c:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   20d7e:	18e2      	adds	r2, r4, r3
{
   20d80:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   20d82:	7f51      	ldrb	r1, [r2, #29]
{
   20d84:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   20d86:	2900      	cmp	r1, #0
   20d88:	d165      	bne.n	20e56 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   20d8a:	58e3      	ldr	r3, [r4, r3]
   20d8c:	b10b      	cbz	r3, 20d92 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   20d8e:	2301      	movs	r3, #1
   20d90:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   20d92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   20d96:	2528      	movs	r5, #40	; 0x28
   20d98:	fb05 4507 	mla	r5, r5, r7, r4
   20d9c:	f105 0c0c 	add.w	ip, r5, #12
   20da0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20da4:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   20da6:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20da8:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   20daa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20dae:	d001      	beq.n	20db4 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   20db0:	f009 fb33 	bl	2a41a <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   20db4:	2328      	movs	r3, #40	; 0x28
   20db6:	f1b8 0f00 	cmp.w	r8, #0
   20dba:	d006      	beq.n	20dca <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   20dbc:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   20dc0:	4827      	ldr	r0, [pc, #156]	; (20e60 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   20dc2:	2300      	movs	r3, #0
   20dc4:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   20dca:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   20dce:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   20dd2:	2204      	movs	r2, #4
   20dd4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   20dd8:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ddc:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   20de0:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   20de4:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   20de6:	b192      	cbz	r2, 20e0e <nrfx_spi_xfer+0x9e>
   20de8:	6833      	ldr	r3, [r6, #0]
   20dea:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   20dec:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   20df0:	2a01      	cmp	r2, #1
   20df2:	d90e      	bls.n	20e12 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   20df4:	6833      	ldr	r3, [r6, #0]
   20df6:	785b      	ldrb	r3, [r3, #1]
   20df8:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   20dfc:	2328      	movs	r3, #40	; 0x28
   20dfe:	437b      	muls	r3, r7
   20e00:	58e6      	ldr	r6, [r4, r3]
   20e02:	b176      	cbz	r6, 20e22 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   20e04:	2304      	movs	r3, #4
   20e06:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   20e0a:	4816      	ldr	r0, [pc, #88]	; (20e64 <nrfx_spi_xfer+0xf4>)
   20e0c:	e7db      	b.n	20dc6 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   20e0e:	7fdb      	ldrb	r3, [r3, #31]
   20e10:	e7ec      	b.n	20dec <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   20e12:	68f3      	ldr	r3, [r6, #12]
   20e14:	2b01      	cmp	r3, #1
   20e16:	d9f1      	bls.n	20dfc <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   20e18:	2328      	movs	r3, #40	; 0x28
   20e1a:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   20e1e:	7fdb      	ldrb	r3, [r3, #31]
   20e20:	e7ea      	b.n	20df8 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20e22:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   20e26:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e2a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   20e2e:	2b00      	cmp	r3, #0
   20e30:	d0fb      	beq.n	20e2a <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e32:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   20e36:	4628      	mov	r0, r5
   20e38:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   20e3c:	f009 fafa 	bl	2a434 <transfer_byte>
   20e40:	2800      	cmp	r0, #0
   20e42:	d1f2      	bne.n	20e2a <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20e44:	2328      	movs	r3, #40	; 0x28
   20e46:	fb03 4407 	mla	r4, r3, r7, r4
   20e4a:	7fa0      	ldrb	r0, [r4, #30]
   20e4c:	28ff      	cmp	r0, #255	; 0xff
   20e4e:	d0dc      	beq.n	20e0a <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   20e50:	f009 fad6 	bl	2a400 <nrf_gpio_pin_set>
   20e54:	e7d9      	b.n	20e0a <nrfx_spi_xfer+0x9a>
        return err_code;
   20e56:	4804      	ldr	r0, [pc, #16]	; (20e68 <nrfx_spi_xfer+0xf8>)
   20e58:	e7b5      	b.n	20dc6 <nrfx_spi_xfer+0x56>
   20e5a:	bf00      	nop
   20e5c:	200030bc 	.word	0x200030bc
   20e60:	0bad0003 	.word	0x0bad0003
   20e64:	0bad0000 	.word	0x0bad0000
   20e68:	0bad000b 	.word	0x0bad000b

00020e6c <nrfx_spi_1_irq_handler>:
   20e6c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   20e70:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   20e72:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   20e74:	490b      	ldr	r1, [pc, #44]	; (20ea4 <nrfx_spi_1_irq_handler+0x38>)
   20e76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   20e7a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   20e7e:	f009 fad9 	bl	2a434 <transfer_byte>
   20e82:	b968      	cbnz	r0, 20ea0 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20e84:	7f88      	ldrb	r0, [r1, #30]
   20e86:	28ff      	cmp	r0, #255	; 0xff
   20e88:	d001      	beq.n	20e8e <nrfx_spi_1_irq_handler+0x22>
   20e8a:	f009 fab9 	bl	2a400 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   20e8e:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   20e90:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   20e92:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   20e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   20e98:	e9d1 3100 	ldrd	r3, r1, [r1]
   20e9c:	4802      	ldr	r0, [pc, #8]	; (20ea8 <nrfx_spi_1_irq_handler+0x3c>)
   20e9e:	4718      	bx	r3
}
   20ea0:	bd10      	pop	{r4, pc}
   20ea2:	bf00      	nop
   20ea4:	200030bc 	.word	0x200030bc
   20ea8:	200030c4 	.word	0x200030c4

00020eac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   20eac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20eae:	4c11      	ldr	r4, [pc, #68]	; (20ef4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   20eb0:	4a11      	ldr	r2, [pc, #68]	; (20ef8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   20eb2:	4912      	ldr	r1, [pc, #72]	; (20efc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20eb4:	2303      	movs	r3, #3
   20eb6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   20eb8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20eba:	4b11      	ldr	r3, [pc, #68]	; (20f00 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   20ebc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20ebe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   20ec4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   20ec6:	2300      	movs	r3, #0
   20ec8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   20eca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   20ece:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   20ed0:	4a0c      	ldr	r2, [pc, #48]	; (20f04 <_DoInit+0x58>)
   20ed2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   20ed4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20ed6:	2210      	movs	r2, #16
   20ed8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   20eda:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   20edc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20ede:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   20ee0:	f006 fc33 	bl	2774a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   20ee4:	4908      	ldr	r1, [pc, #32]	; (20f08 <_DoInit+0x5c>)
   20ee6:	4620      	mov	r0, r4
   20ee8:	f006 fc2f 	bl	2774a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20eec:	2320      	movs	r3, #32
   20eee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   20ef0:	bd10      	pop	{r4, pc}
   20ef2:	bf00      	nop
   20ef4:	200030e4 	.word	0x200030e4
   20ef8:	0002ea47 	.word	0x0002ea47
   20efc:	0002ea50 	.word	0x0002ea50
   20f00:	200045c4 	.word	0x200045c4
   20f04:	200045b4 	.word	0x200045b4
   20f08:	0002ea54 	.word	0x0002ea54

00020f0c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   20f10:	4f23      	ldr	r7, [pc, #140]	; (20fa0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   20f12:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20f16:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20f18:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20f1c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   20f1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   20f20:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20f22:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20f24:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20f26:	d834      	bhi.n	20f92 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20f28:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20f2c:	ebaa 0905 	sub.w	r9, sl, r5
   20f30:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20f34:	4294      	cmp	r4, r2
   20f36:	d811      	bhi.n	20f5c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f38:	f04f 0918 	mov.w	r9, #24
   20f3c:	fb06 9309 	mla	r3, r6, r9, r9
   20f40:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   20f42:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f44:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   20f46:	4641      	mov	r1, r8
   20f48:	4428      	add	r0, r5
   20f4a:	f006 fc70 	bl	2782e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   20f4e:	fb09 7606 	mla	r6, r9, r6, r7
   20f52:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20f54:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   20f56:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20f5c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   20f5e:	429c      	cmp	r4, r3
   20f60:	d81b      	bhi.n	20f9a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f62:	fb00 bb0b 	mla	fp, r0, fp, fp
   20f66:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20f68:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20f6a:	f8db 0004 	ldr.w	r0, [fp, #4]
   20f6e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20f70:	4428      	add	r0, r5
   20f72:	f006 fc5c 	bl	2782e <memcpy>
      if (NumBytes) {
   20f76:	ebb4 040a 	subs.w	r4, r4, sl
   20f7a:	d006      	beq.n	20f8a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   20f7c:	f8db 0004 	ldr.w	r0, [fp, #4]
   20f80:	4622      	mov	r2, r4
   20f82:	eb08 0109 	add.w	r1, r8, r9
   20f86:	f006 fc52 	bl	2782e <memcpy>
      pRing->WrOff = NumBytes;
   20f8a:	2018      	movs	r0, #24
   20f8c:	fb00 7606 	mla	r6, r0, r6, r7
   20f90:	e7e0      	b.n	20f54 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   20f92:	3b01      	subs	r3, #1
   20f94:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   20f96:	42a3      	cmp	r3, r4
   20f98:	d2ce      	bcs.n	20f38 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   20f9a:	2000      	movs	r0, #0
   20f9c:	e7dc      	b.n	20f58 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   20f9e:	bf00      	nop
   20fa0:	200030e4 	.word	0x200030e4

00020fa4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20fa4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   20fa6:	4b16      	ldr	r3, [pc, #88]	; (21000 <SEGGER_RTT_WriteNoLock+0x5c>)
   20fa8:	2418      	movs	r4, #24
   20faa:	fb00 4504 	mla	r5, r0, r4, r4
   20fae:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   20fb0:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20fb4:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   20fb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   20fb8:	2c01      	cmp	r4, #1
   20fba:	d00e      	beq.n	20fda <SEGGER_RTT_WriteNoLock+0x36>
   20fbc:	2c02      	cmp	r4, #2
   20fbe:	d018      	beq.n	20ff2 <SEGGER_RTT_WriteNoLock+0x4e>
   20fc0:	b9e4      	cbnz	r4, 20ffc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   20fc2:	4628      	mov	r0, r5
   20fc4:	f009 fa69 	bl	2a49a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   20fc8:	4286      	cmp	r6, r0
   20fca:	d804      	bhi.n	20fd6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   20fcc:	4632      	mov	r2, r6
   20fce:	4628      	mov	r0, r5
   20fd0:	f009 fa6c 	bl	2a4ac <_WriteNoCheck>
   20fd4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   20fd6:	4620      	mov	r0, r4
   20fd8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   20fda:	4628      	mov	r0, r5
   20fdc:	f009 fa5d 	bl	2a49a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   20fe0:	4286      	cmp	r6, r0
   20fe2:	4634      	mov	r4, r6
   20fe4:	bf28      	it	cs
   20fe6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   20fe8:	4622      	mov	r2, r4
   20fea:	4628      	mov	r0, r5
   20fec:	f009 fa5e 	bl	2a4ac <_WriteNoCheck>
    break;
   20ff0:	e7f1      	b.n	20fd6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20ff2:	4628      	mov	r0, r5
}
   20ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20ff8:	f009 ba74 	b.w	2a4e4 <_WriteBlocking>
  switch (pRing->Flags) {
   20ffc:	2400      	movs	r4, #0
  return Status;
   20ffe:	e7ea      	b.n	20fd6 <SEGGER_RTT_WriteNoLock+0x32>
   21000:	200030e4 	.word	0x200030e4

00021004 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   21004:	4b03      	ldr	r3, [pc, #12]	; (21014 <SEGGER_RTT_HasDataUp+0x10>)
   21006:	2218      	movs	r2, #24
   21008:	fb02 3300 	mla	r3, r2, r0, r3
   2100c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2100e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   21010:	1a80      	subs	r0, r0, r2
   21012:	4770      	bx	lr
   21014:	200030e4 	.word	0x200030e4

00021018 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   21018:	4803      	ldr	r0, [pc, #12]	; (21028 <zephyr_rtt_mutex_lock+0x10>)
   2101a:	f04f 32ff 	mov.w	r2, #4294967295
   2101e:	f04f 33ff 	mov.w	r3, #4294967295
   21022:	f000 baab 	b.w	2157c <z_impl_k_mutex_lock>
   21026:	bf00      	nop
   21028:	20000a5c 	.word	0x20000a5c

0002102c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2102c:	4801      	ldr	r0, [pc, #4]	; (21034 <zephyr_rtt_mutex_unlock+0x8>)
   2102e:	f000 bb1d 	b.w	2166c <z_impl_k_mutex_unlock>
   21032:	bf00      	nop
   21034:	20000a5c 	.word	0x20000a5c

00021038 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21038:	4b0e      	ldr	r3, [pc, #56]	; (21074 <z_sys_init_run_level+0x3c>)
{
   2103a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2103c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21040:	3001      	adds	r0, #1
   21042:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   21046:	42a6      	cmp	r6, r4
   21048:	d800      	bhi.n	2104c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2104a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   2104c:	e9d4 3500 	ldrd	r3, r5, [r4]
   21050:	4628      	mov	r0, r5
   21052:	4798      	blx	r3
		if (dev != NULL) {
   21054:	b165      	cbz	r5, 21070 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   21056:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   21058:	b130      	cbz	r0, 21068 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2105a:	2800      	cmp	r0, #0
   2105c:	bfb8      	it	lt
   2105e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   21060:	28ff      	cmp	r0, #255	; 0xff
   21062:	bfa8      	it	ge
   21064:	20ff      	movge	r0, #255	; 0xff
   21066:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   21068:	785a      	ldrb	r2, [r3, #1]
   2106a:	f042 0201 	orr.w	r2, r2, #1
   2106e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21070:	3408      	adds	r4, #8
   21072:	e7e8      	b.n	21046 <z_sys_init_run_level+0xe>
   21074:	0002c14c 	.word	0x0002c14c

00021078 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21078:	4b01      	ldr	r3, [pc, #4]	; (21080 <z_impl_z_errno+0x8>)
   2107a:	6898      	ldr	r0, [r3, #8]
}
   2107c:	3064      	adds	r0, #100	; 0x64
   2107e:	4770      	bx	lr
   21080:	2000318c 	.word	0x2000318c

00021084 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21088:	b086      	sub	sp, #24
   2108a:	4605      	mov	r5, r0
   2108c:	af00      	add	r7, sp, #0
   2108e:	460e      	mov	r6, r1
	__asm__ volatile(
   21090:	f04f 0340 	mov.w	r3, #64	; 0x40
   21094:	f3ef 8811 	mrs	r8, BASEPRI
   21098:	f383 8812 	msr	BASEPRI_MAX, r3
   2109c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   210a0:	f001 f890 	bl	221c4 <z_impl_z_current_get>
   210a4:	2d04      	cmp	r5, #4
   210a6:	bf96      	itet	ls
   210a8:	4b2c      	ldrls	r3, [pc, #176]	; (2115c <z_fatal_error+0xd8>)
   210aa:	4b2d      	ldrhi	r3, [pc, #180]	; (21160 <z_fatal_error+0xdc>)
   210ac:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   210b0:	46e9      	mov	r9, sp
   210b2:	b08a      	sub	sp, #40	; 0x28
   210b4:	4604      	mov	r4, r0
   210b6:	466a      	mov	r2, sp
   210b8:	492a      	ldr	r1, [pc, #168]	; (21164 <z_fatal_error+0xe0>)
   210ba:	61d3      	str	r3, [r2, #28]
   210bc:	2303      	movs	r3, #3
   210be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   210c2:	f04f 0a00 	mov.w	sl, #0
   210c6:	4b28      	ldr	r3, [pc, #160]	; (21168 <z_fatal_error+0xe4>)
   210c8:	f8c2 a020 	str.w	sl, [r2, #32]
   210cc:	e9c2 1505 	strd	r1, r5, [r2, #20]
   210d0:	f842 3f10 	str.w	r3, [r2, #16]!
   210d4:	4825      	ldr	r0, [pc, #148]	; (2116c <z_fatal_error+0xe8>)
   210d6:	4653      	mov	r3, sl
   210d8:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
   210dc:	f7f2 fc52 	bl	13984 <z_impl_z_log_msg_static_create>
   210e0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   210e2:	b17e      	cbz	r6, 21104 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   210e4:	69f3      	ldr	r3, [r6, #28]
   210e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   210ea:	b15b      	cbz	r3, 21104 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   210ec:	4b20      	ldr	r3, [pc, #128]	; (21170 <z_fatal_error+0xec>)
   210ee:	617b      	str	r3, [r7, #20]
   210f0:	2302      	movs	r3, #2
   210f2:	613b      	str	r3, [r7, #16]
   210f4:	481d      	ldr	r0, [pc, #116]	; (2116c <z_fatal_error+0xe8>)
   210f6:	4653      	mov	r3, sl
   210f8:	f107 0210 	add.w	r2, r7, #16
   210fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21100:	f7f2 fc40 	bl	13984 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21104:	b12c      	cbz	r4, 21112 <z_fatal_error+0x8e>
   21106:	4620      	mov	r0, r4
   21108:	f009 fade 	bl	2a6c8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2110c:	b108      	cbz	r0, 21112 <z_fatal_error+0x8e>
   2110e:	7803      	ldrb	r3, [r0, #0]
   21110:	b903      	cbnz	r3, 21114 <z_fatal_error+0x90>
		thread_name = "unknown";
   21112:	4818      	ldr	r0, [pc, #96]	; (21174 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21114:	46e9      	mov	r9, sp
   21116:	b08a      	sub	sp, #40	; 0x28
   21118:	466a      	mov	r2, sp
   2111a:	4b17      	ldr	r3, [pc, #92]	; (21178 <z_fatal_error+0xf4>)
   2111c:	61d0      	str	r0, [r2, #28]
   2111e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21122:	2303      	movs	r3, #3
   21124:	f882 3020 	strb.w	r3, [r2, #32]
   21128:	4b14      	ldr	r3, [pc, #80]	; (2117c <z_fatal_error+0xf8>)
   2112a:	f842 3f10 	str.w	r3, [r2, #16]!
   2112e:	2300      	movs	r3, #0
   21130:	480e      	ldr	r0, [pc, #56]	; (2116c <z_fatal_error+0xe8>)
   21132:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   21136:	f7f2 fc25 	bl	13984 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2113a:	4631      	mov	r1, r6
   2113c:	46cd      	mov	sp, r9
   2113e:	4628      	mov	r0, r5
   21140:	f7fd ffac 	bl	1f09c <k_sys_fatal_error_handler>
	__asm__ volatile(
   21144:	f388 8811 	msr	BASEPRI, r8
   21148:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2114c:	4620      	mov	r0, r4
   2114e:	f7f3 ffdf 	bl	15110 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21152:	3718      	adds	r7, #24
   21154:	46bd      	mov	sp, r7
   21156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2115a:	bf00      	nop
   2115c:	0002c164 	.word	0x0002c164
   21160:	0002ea5b 	.word	0x0002ea5b
   21164:	0002ea69 	.word	0x0002ea69
   21168:	01000005 	.word	0x01000005
   2116c:	0002b59c 	.word	0x0002b59c
   21170:	0002ea91 	.word	0x0002ea91
   21174:	0002cea7 	.word	0x0002cea7
   21178:	0002eab2 	.word	0x0002eab2
   2117c:	01000004 	.word	0x01000004

00021180 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21180:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   21182:	4b0a      	ldr	r3, [pc, #40]	; (211ac <bg_thread_main+0x2c>)
   21184:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21186:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21188:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2118a:	f7ff ff55 	bl	21038 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2118e:	f001 fb45 	bl	2281c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21192:	2003      	movs	r0, #3
   21194:	f7ff ff50 	bl	21038 <z_sys_init_run_level>

	z_init_static_threads();
   21198:	f000 f978 	bl	2148c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   2119c:	f7f0 fe0c 	bl	11db8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   211a0:	4a03      	ldr	r2, [pc, #12]	; (211b0 <bg_thread_main+0x30>)
   211a2:	7b13      	ldrb	r3, [r2, #12]
   211a4:	f023 0301 	bic.w	r3, r3, #1
   211a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   211aa:	bd08      	pop	{r3, pc}
   211ac:	200049c4 	.word	0x200049c4
   211b0:	20002420 	.word	0x20002420

000211b4 <z_bss_zero>:
{
   211b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   211b6:	4803      	ldr	r0, [pc, #12]	; (211c4 <z_bss_zero+0x10>)
   211b8:	4a03      	ldr	r2, [pc, #12]	; (211c8 <z_bss_zero+0x14>)
   211ba:	2100      	movs	r1, #0
   211bc:	1a12      	subs	r2, r2, r0
   211be:	f009 f9cc 	bl	2a55a <z_early_memset>
}
   211c2:	bd08      	pop	{r3, pc}
   211c4:	20000c30 	.word	0x20000c30
   211c8:	200049c8 	.word	0x200049c8

000211cc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   211cc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   211ce:	2300      	movs	r3, #0
{
   211d0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   211d2:	2201      	movs	r2, #1
   211d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   211d8:	4e11      	ldr	r6, [pc, #68]	; (21220 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   211da:	4d12      	ldr	r5, [pc, #72]	; (21224 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   211dc:	9301      	str	r3, [sp, #4]
   211de:	220f      	movs	r2, #15
   211e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   211e4:	4910      	ldr	r1, [pc, #64]	; (21228 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   211e6:	2318      	movs	r3, #24
   211e8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   211ec:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   211f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   211f4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   211f6:	fb02 1100 	mla	r1, r2, r0, r1
   211fa:	4b0c      	ldr	r3, [pc, #48]	; (2122c <z_init_cpu+0x60>)
   211fc:	9500      	str	r5, [sp, #0]
   211fe:	4630      	mov	r0, r6
   21200:	f000 f8e8 	bl	213d4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21204:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   21206:	480a      	ldr	r0, [pc, #40]	; (21230 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   21208:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2120a:	3401      	adds	r4, #1
   2120c:	f023 0304 	bic.w	r3, r3, #4
   21210:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   21214:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   21216:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   21218:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2121a:	b006      	add	sp, #24
   2121c:	bd70      	pop	{r4, r5, r6, pc}
   2121e:	bf00      	nop
   21220:	200023a0 	.word	0x200023a0
   21224:	2000318c 	.word	0x2000318c
   21228:	20006250 	.word	0x20006250
   2122c:	00021545 	.word	0x00021545
   21230:	20006390 	.word	0x20006390

00021234 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21234:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21236:	4b2f      	ldr	r3, [pc, #188]	; (212f4 <z_cstart+0xc0>)
   21238:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2123a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2123e:	4d2e      	ldr	r5, [pc, #184]	; (212f8 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   21240:	4e2e      	ldr	r6, [pc, #184]	; (212fc <z_cstart+0xc8>)
   21242:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21244:	4f2e      	ldr	r7, [pc, #184]	; (21300 <z_cstart+0xcc>)
   21246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2124a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2124c:	23e0      	movs	r3, #224	; 0xe0
   2124e:	2400      	movs	r4, #0
   21250:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21254:	2320      	movs	r3, #32
   21256:	77eb      	strb	r3, [r5, #31]
   21258:	762c      	strb	r4, [r5, #24]
   2125a:	766c      	strb	r4, [r5, #25]
   2125c:	76ac      	strb	r4, [r5, #26]
   2125e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21264:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21268:	626b      	str	r3, [r5, #36]	; 0x24
   2126a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2126e:	f7f3 fec3 	bl	14ff8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21272:	f7f3 fa5b 	bl	1472c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21276:	f04f 33ff 	mov.w	r3, #4294967295
   2127a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2127c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2127e:	f7f3 ffed 	bl	1525c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21282:	f7f3 ff5b 	bl	1513c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   21286:	f7f2 fa23 	bl	136d0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2128a:	f240 1301 	movw	r3, #257	; 0x101
   2128e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21292:	ab06      	add	r3, sp, #24
   21294:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21296:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   2129a:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2129c:	f009 f952 	bl	2a544 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   212a0:	4620      	mov	r0, r4
   212a2:	f7ff fec9 	bl	21038 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   212a6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   212a8:	4d16      	ldr	r5, [pc, #88]	; (21304 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   212aa:	f7ff fec5 	bl	21038 <z_sys_init_run_level>
	z_sched_init();
   212ae:	f000 fec1 	bl	22034 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   212b2:	4b15      	ldr	r3, [pc, #84]	; (21308 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   212b4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   212b6:	9305      	str	r3, [sp, #20]
   212b8:	2301      	movs	r3, #1
   212ba:	4914      	ldr	r1, [pc, #80]	; (2130c <z_cstart+0xd8>)
   212bc:	9400      	str	r4, [sp, #0]
   212be:	e9cd 4303 	strd	r4, r3, [sp, #12]
   212c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   212c6:	463b      	mov	r3, r7
   212c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   212cc:	4628      	mov	r0, r5
   212ce:	f000 f881 	bl	213d4 <z_setup_new_thread>
   212d2:	7b6a      	ldrb	r2, [r5, #13]
   212d4:	4606      	mov	r6, r0
   212d6:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   212da:	4628      	mov	r0, r5
   212dc:	736a      	strb	r2, [r5, #13]
   212de:	f009 fc47 	bl	2ab70 <z_ready_thread>
	z_init_cpu(0);
   212e2:	4620      	mov	r0, r4
   212e4:	f7ff ff72 	bl	211cc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   212e8:	463a      	mov	r2, r7
   212ea:	4631      	mov	r1, r6
   212ec:	4628      	mov	r0, r5
   212ee:	f7f3 fb85 	bl	149fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   212f2:	bf00      	nop
   212f4:	20006b90 	.word	0x20006b90
   212f8:	e000ed00 	.word	0xe000ed00
   212fc:	2000318c 	.word	0x2000318c
   21300:	00021181 	.word	0x00021181
   21304:	20002420 	.word	0x20002420
   21308:	0002eb14 	.word	0x0002eb14
   2130c:	20005a50 	.word	0x20005a50

00021310 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21310:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21312:	4c06      	ldr	r4, [pc, #24]	; (2132c <statics_init+0x1c>)
   21314:	4d06      	ldr	r5, [pc, #24]	; (21330 <statics_init+0x20>)
   21316:	42ac      	cmp	r4, r5
   21318:	d301      	bcc.n	2131e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2131a:	2000      	movs	r0, #0
   2131c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2131e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21322:	4620      	mov	r0, r4
   21324:	f009 f91d 	bl	2a562 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21328:	3414      	adds	r4, #20
   2132a:	e7f4      	b.n	21316 <statics_init+0x6>
   2132c:	20000a0c 	.word	0x20000a0c
   21330:	20000a0c 	.word	0x20000a0c

00021334 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21334:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21336:	4b0e      	ldr	r3, [pc, #56]	; (21370 <init_mem_slab_module+0x3c>)
   21338:	4c0e      	ldr	r4, [pc, #56]	; (21374 <init_mem_slab_module+0x40>)
   2133a:	42a3      	cmp	r3, r4
   2133c:	d301      	bcc.n	21342 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2133e:	2000      	movs	r0, #0
	return rc;
}
   21340:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21342:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   21346:	ea41 0200 	orr.w	r2, r1, r0
   2134a:	f012 0203 	ands.w	r2, r2, #3
   2134e:	d10b      	bne.n	21368 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   21350:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21352:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21354:	42aa      	cmp	r2, r5
   21356:	d101      	bne.n	2135c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21358:	331c      	adds	r3, #28
   2135a:	e7ee      	b.n	2133a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   2135c:	695e      	ldr	r6, [r3, #20]
   2135e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21360:	3201      	adds	r2, #1
		slab->free_list = p;
   21362:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   21364:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   21366:	e7f5      	b.n	21354 <init_mem_slab_module+0x20>
	return rc;
   21368:	f06f 0015 	mvn.w	r0, #21
   2136c:	e7e8      	b.n	21340 <init_mem_slab_module+0xc>
   2136e:	bf00      	nop
   21370:	200009b8 	.word	0x200009b8
   21374:	20000a0c 	.word	0x20000a0c

00021378 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21378:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2137a:	460c      	mov	r4, r1
	__asm__ volatile(
   2137c:	f04f 0540 	mov.w	r5, #64	; 0x40
   21380:	f3ef 8111 	mrs	r1, BASEPRI
   21384:	f385 8812 	msr	BASEPRI_MAX, r5
   21388:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2138c:	6945      	ldr	r5, [r0, #20]
   2138e:	b15d      	cbz	r5, 213a8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   21390:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21392:	682b      	ldr	r3, [r5, #0]
   21394:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21396:	6983      	ldr	r3, [r0, #24]
   21398:	3301      	adds	r3, #1
   2139a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2139c:	2000      	movs	r0, #0
	__asm__ volatile(
   2139e:	f381 8811 	msr	BASEPRI, r1
   213a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   213a6:	e011      	b.n	213cc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   213a8:	ea52 0c03 	orrs.w	ip, r2, r3
   213ac:	d103      	bne.n	213b6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   213ae:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   213b0:	f06f 000b 	mvn.w	r0, #11
   213b4:	e7f3      	b.n	2139e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   213b6:	e9cd 2300 	strd	r2, r3, [sp]
   213ba:	4602      	mov	r2, r0
   213bc:	3008      	adds	r0, #8
   213be:	f000 fd8f 	bl	21ee0 <z_pend_curr>
		if (result == 0) {
   213c2:	b918      	cbnz	r0, 213cc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   213c4:	4b02      	ldr	r3, [pc, #8]	; (213d0 <k_mem_slab_alloc+0x58>)
   213c6:	689b      	ldr	r3, [r3, #8]
   213c8:	695b      	ldr	r3, [r3, #20]
   213ca:	6023      	str	r3, [r4, #0]
}
   213cc:	b003      	add	sp, #12
   213ce:	bd30      	pop	{r4, r5, pc}
   213d0:	2000318c 	.word	0x2000318c

000213d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   213d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   213d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   213da:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   213dc:	2604      	movs	r6, #4
   213de:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   213e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   213e2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   213e4:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   213e8:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   213ea:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   213ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   213f0:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   213f2:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   213f6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   213fa:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   213fe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   21400:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   21402:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21404:	9202      	str	r2, [sp, #8]
   21406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21408:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2140a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2140e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21410:	9200      	str	r2, [sp, #0]
   21412:	4642      	mov	r2, r8
{
   21414:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21416:	f7f3 fad5 	bl	149c4 <arch_new_thread>
	if (!_current) {
   2141a:	4b05      	ldr	r3, [pc, #20]	; (21430 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   2141c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2141e:	689b      	ldr	r3, [r3, #8]
   21420:	b103      	cbz	r3, 21424 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   21422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   21424:	6763      	str	r3, [r4, #116]	; 0x74
}
   21426:	4640      	mov	r0, r8
   21428:	b004      	add	sp, #16
   2142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2142e:	bf00      	nop
   21430:	2000318c 	.word	0x2000318c

00021434 <z_impl_k_thread_create>:
{
   21434:	b5f0      	push	{r4, r5, r6, r7, lr}
   21436:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21438:	2700      	movs	r7, #0
   2143a:	9705      	str	r7, [sp, #20]
   2143c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2143e:	9704      	str	r7, [sp, #16]
   21440:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   21442:	9703      	str	r7, [sp, #12]
   21444:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   21446:	9702      	str	r7, [sp, #8]
{
   21448:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2144c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2144e:	9701      	str	r7, [sp, #4]
   21450:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   21452:	9700      	str	r7, [sp, #0]
{
   21454:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21456:	f7ff ffbd 	bl	213d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2145a:	f1b5 3fff 	cmp.w	r5, #4294967295
   2145e:	bf08      	it	eq
   21460:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21464:	d005      	beq.n	21472 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21466:	ea55 0306 	orrs.w	r3, r5, r6
   2146a:	d105      	bne.n	21478 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2146c:	4620      	mov	r0, r4
   2146e:	f000 fcdb 	bl	21e28 <z_sched_start>
}
   21472:	4620      	mov	r0, r4
   21474:	b007      	add	sp, #28
   21476:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21478:	4903      	ldr	r1, [pc, #12]	; (21488 <z_impl_k_thread_create+0x54>)
   2147a:	4632      	mov	r2, r6
   2147c:	462b      	mov	r3, r5
   2147e:	f104 0018 	add.w	r0, r4, #24
   21482:	f000 ff7b 	bl	2237c <z_add_timeout>
   21486:	e7f4      	b.n	21472 <z_impl_k_thread_create+0x3e>
   21488:	0002ab91 	.word	0x0002ab91

0002148c <z_init_static_threads>:
{
   2148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21490:	4c29      	ldr	r4, [pc, #164]	; (21538 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   21492:	4d2a      	ldr	r5, [pc, #168]	; (2153c <z_init_static_threads+0xb0>)
{
   21494:	b087      	sub	sp, #28
   21496:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   21498:	42ae      	cmp	r6, r5
   2149a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2149e:	d30f      	bcc.n	214c0 <z_init_static_threads+0x34>
	k_sched_lock();
   214a0:	f000 fbdc 	bl	21c5c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   214a4:	4c24      	ldr	r4, [pc, #144]	; (21538 <z_init_static_threads+0xac>)
   214a6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 21540 <z_init_static_threads+0xb4>
   214aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   214ae:	f240 37e7 	movw	r7, #999	; 0x3e7
   214b2:	42ac      	cmp	r4, r5
   214b4:	d320      	bcc.n	214f8 <z_init_static_threads+0x6c>
}
   214b6:	b007      	add	sp, #28
   214b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   214bc:	f000 bd9e 	b.w	21ffc <k_sched_unlock>
		z_setup_new_thread(
   214c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   214c4:	9305      	str	r3, [sp, #20]
   214c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   214ca:	9304      	str	r3, [sp, #16]
   214cc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   214d0:	9303      	str	r3, [sp, #12]
   214d2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   214d6:	9302      	str	r3, [sp, #8]
   214d8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   214dc:	9301      	str	r3, [sp, #4]
   214de:	f854 3c20 	ldr.w	r3, [r4, #-32]
   214e2:	9300      	str	r3, [sp, #0]
   214e4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   214e8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   214ec:	f7ff ff72 	bl	213d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   214f0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   214f4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   214f6:	e7ce      	b.n	21496 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   214f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   214fa:	1c5a      	adds	r2, r3, #1
   214fc:	d00d      	beq.n	2151a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   214fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   21502:	2100      	movs	r1, #0
   21504:	4638      	mov	r0, r7
   21506:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2150a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2150e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21512:	d104      	bne.n	2151e <z_init_static_threads+0x92>
	z_sched_start(thread);
   21514:	4640      	mov	r0, r8
   21516:	f000 fc87 	bl	21e28 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2151a:	3430      	adds	r4, #48	; 0x30
   2151c:	e7c9      	b.n	214b2 <z_init_static_threads+0x26>
   2151e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21522:	2300      	movs	r3, #0
   21524:	f7df f906 	bl	734 <__aeabi_uldivmod>
   21528:	4602      	mov	r2, r0
   2152a:	460b      	mov	r3, r1
   2152c:	f108 0018 	add.w	r0, r8, #24
   21530:	4649      	mov	r1, r9
   21532:	f000 ff23 	bl	2237c <z_add_timeout>
   21536:	e7f0      	b.n	2151a <z_init_static_threads+0x8e>
   21538:	200009b8 	.word	0x200009b8
   2153c:	200009b8 	.word	0x200009b8
   21540:	0002ab91 	.word	0x0002ab91

00021544 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   21544:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   21546:	4c0b      	ldr	r4, [pc, #44]	; (21574 <idle+0x30>)
	return !z_sys_post_kernel;
   21548:	4d0b      	ldr	r5, [pc, #44]	; (21578 <idle+0x34>)
	__asm__ volatile(
   2154a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2154e:	f3ef 8311 	mrs	r3, BASEPRI
   21552:	f382 8812 	msr	BASEPRI_MAX, r2
   21556:	f3bf 8f6f 	isb	sy
   2155a:	f009 fbd5 	bl	2ad08 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2155e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   21560:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   21562:	b913      	cbnz	r3, 2156a <idle+0x26>
	arch_cpu_idle();
   21564:	f7f3 f8e8 	bl	14738 <arch_cpu_idle>
}
   21568:	e7ef      	b.n	2154a <idle+0x6>
   2156a:	f7f2 feef 	bl	1434c <pm_system_suspend>
   2156e:	2800      	cmp	r0, #0
   21570:	d1eb      	bne.n	2154a <idle+0x6>
   21572:	e7f7      	b.n	21564 <idle+0x20>
   21574:	2000318c 	.word	0x2000318c
   21578:	200049c4 	.word	0x200049c4

0002157c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2157c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21580:	4604      	mov	r4, r0
   21582:	4617      	mov	r7, r2
   21584:	461e      	mov	r6, r3
   21586:	f04f 0340 	mov.w	r3, #64	; 0x40
   2158a:	f3ef 8811 	mrs	r8, BASEPRI
   2158e:	f383 8812 	msr	BASEPRI_MAX, r3
   21592:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21596:	68c3      	ldr	r3, [r0, #12]
   21598:	4a32      	ldr	r2, [pc, #200]	; (21664 <z_impl_k_mutex_lock+0xe8>)
   2159a:	b16b      	cbz	r3, 215b8 <z_impl_k_mutex_lock+0x3c>
   2159c:	6880      	ldr	r0, [r0, #8]
   2159e:	6891      	ldr	r1, [r2, #8]
   215a0:	4288      	cmp	r0, r1
   215a2:	d019      	beq.n	215d8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   215a4:	ea57 0306 	orrs.w	r3, r7, r6
   215a8:	d118      	bne.n	215dc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   215aa:	f388 8811 	msr	BASEPRI, r8
   215ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   215b2:	f06f 000f 	mvn.w	r0, #15
   215b6:	e00c      	b.n	215d2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   215b8:	6891      	ldr	r1, [r2, #8]
   215ba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   215be:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   215c0:	3301      	adds	r3, #1
   215c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   215c4:	6893      	ldr	r3, [r2, #8]
   215c6:	60a3      	str	r3, [r4, #8]
   215c8:	f388 8811 	msr	BASEPRI, r8
   215cc:	f3bf 8f6f 	isb	sy
		return 0;
   215d0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   215d2:	b002      	add	sp, #8
   215d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   215d8:	6921      	ldr	r1, [r4, #16]
   215da:	e7f0      	b.n	215be <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   215dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   215e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   215e4:	4299      	cmp	r1, r3
   215e6:	bfa8      	it	ge
   215e8:	4619      	movge	r1, r3
   215ea:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   215ee:	4291      	cmp	r1, r2
   215f0:	bfb8      	it	lt
   215f2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   215f4:	428b      	cmp	r3, r1
   215f6:	dd2e      	ble.n	21656 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   215f8:	f009 f871 	bl	2a6de <adjust_owner_prio.isra.0>
   215fc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   215fe:	e9cd 7600 	strd	r7, r6, [sp]
   21602:	4819      	ldr	r0, [pc, #100]	; (21668 <z_impl_k_mutex_lock+0xec>)
   21604:	4622      	mov	r2, r4
   21606:	4641      	mov	r1, r8
   21608:	f000 fc6a 	bl	21ee0 <z_pend_curr>
	if (got_mutex == 0) {
   2160c:	2800      	cmp	r0, #0
   2160e:	d0e0      	beq.n	215d2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   21610:	f04f 0340 	mov.w	r3, #64	; 0x40
   21614:	f3ef 8611 	mrs	r6, BASEPRI
   21618:	f383 8812 	msr	BASEPRI_MAX, r3
   2161c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21620:	6823      	ldr	r3, [r4, #0]
   21622:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21624:	429c      	cmp	r4, r3
   21626:	d00a      	beq.n	2163e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   21628:	b14b      	cbz	r3, 2163e <z_impl_k_mutex_lock+0xc2>
   2162a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2162e:	4299      	cmp	r1, r3
   21630:	bfa8      	it	ge
   21632:	4619      	movge	r1, r3
   21634:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   21638:	4299      	cmp	r1, r3
   2163a:	bfb8      	it	lt
   2163c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2163e:	68a0      	ldr	r0, [r4, #8]
   21640:	f009 f84d 	bl	2a6de <adjust_owner_prio.isra.0>
   21644:	b900      	cbnz	r0, 21648 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   21646:	b145      	cbz	r5, 2165a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   21648:	4807      	ldr	r0, [pc, #28]	; (21668 <z_impl_k_mutex_lock+0xec>)
   2164a:	4631      	mov	r1, r6
   2164c:	f000 faf4 	bl	21c38 <z_reschedule>
	return -EAGAIN;
   21650:	f06f 000a 	mvn.w	r0, #10
   21654:	e7bd      	b.n	215d2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   21656:	2500      	movs	r5, #0
   21658:	e7d1      	b.n	215fe <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2165a:	f386 8811 	msr	BASEPRI, r6
   2165e:	f3bf 8f6f 	isb	sy
   21662:	e7f5      	b.n	21650 <z_impl_k_mutex_lock+0xd4>
   21664:	2000318c 	.word	0x2000318c
   21668:	200049c5 	.word	0x200049c5

0002166c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2166c:	6883      	ldr	r3, [r0, #8]
{
   2166e:	b570      	push	{r4, r5, r6, lr}
   21670:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   21672:	b36b      	cbz	r3, 216d0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21674:	4a19      	ldr	r2, [pc, #100]	; (216dc <z_impl_k_mutex_unlock+0x70>)
   21676:	6892      	ldr	r2, [r2, #8]
   21678:	4293      	cmp	r3, r2
   2167a:	d12c      	bne.n	216d6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2167c:	68c3      	ldr	r3, [r0, #12]
   2167e:	2b01      	cmp	r3, #1
   21680:	d903      	bls.n	2168a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   21682:	3b01      	subs	r3, #1
   21684:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   21686:	2000      	movs	r0, #0
}
   21688:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2168a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2168e:	f3ef 8511 	mrs	r5, BASEPRI
   21692:	f383 8812 	msr	BASEPRI_MAX, r3
   21696:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2169a:	6901      	ldr	r1, [r0, #16]
   2169c:	6880      	ldr	r0, [r0, #8]
   2169e:	f009 f81e 	bl	2a6de <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   216a2:	4620      	mov	r0, r4
   216a4:	f009 fad5 	bl	2ac52 <z_unpend_first_thread>
	mutex->owner = new_owner;
   216a8:	2600      	movs	r6, #0
   216aa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   216ac:	b150      	cbz	r0, 216c4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   216ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
   216b2:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   216b4:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   216b6:	f009 fa5b 	bl	2ab70 <z_ready_thread>
		z_reschedule(&lock, key);
   216ba:	4809      	ldr	r0, [pc, #36]	; (216e0 <z_impl_k_mutex_unlock+0x74>)
   216bc:	4629      	mov	r1, r5
   216be:	f000 fabb 	bl	21c38 <z_reschedule>
   216c2:	e7e0      	b.n	21686 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   216c4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   216c6:	f385 8811 	msr	BASEPRI, r5
   216ca:	f3bf 8f6f 	isb	sy
   216ce:	e7da      	b.n	21686 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   216d0:	f06f 0015 	mvn.w	r0, #21
   216d4:	e7d8      	b.n	21688 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   216d6:	f04f 30ff 	mov.w	r0, #4294967295
   216da:	e7d5      	b.n	21688 <z_impl_k_mutex_unlock+0x1c>
   216dc:	2000318c 	.word	0x2000318c
   216e0:	200049c5 	.word	0x200049c5

000216e4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   216e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   216e6:	4611      	mov	r1, r2
	__asm__ volatile(
   216e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   216ec:	f3ef 8511 	mrs	r5, BASEPRI
   216f0:	f382 8812 	msr	BASEPRI_MAX, r2
   216f4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   216f8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   216fa:	b19c      	cbz	r4, 21724 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   216fc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   216fe:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21700:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21704:	4294      	cmp	r4, r2
	list->head = node;
   21706:	6003      	str	r3, [r0, #0]
	list->tail = node;
   21708:	bf08      	it	eq
   2170a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2170c:	2101      	movs	r1, #1
   2170e:	4620      	mov	r0, r4
   21710:	f009 f858 	bl	2a7c4 <z_queue_node_peek>
   21714:	4604      	mov	r4, r0
	__asm__ volatile(
   21716:	f385 8811 	msr	BASEPRI, r5
   2171a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2171e:	4620      	mov	r0, r4
   21720:	b003      	add	sp, #12
   21722:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21724:	ea51 0203 	orrs.w	r2, r1, r3
   21728:	d0f5      	beq.n	21716 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2172a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2172e:	e9cd 1300 	strd	r1, r3, [sp]
   21732:	4610      	mov	r0, r2
   21734:	4629      	mov	r1, r5
   21736:	f000 fbd3 	bl	21ee0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2173a:	2800      	cmp	r0, #0
   2173c:	d1ef      	bne.n	2171e <z_impl_k_queue_get+0x3a>
   2173e:	4b02      	ldr	r3, [pc, #8]	; (21748 <z_impl_k_queue_get+0x64>)
   21740:	689b      	ldr	r3, [r3, #8]
   21742:	695c      	ldr	r4, [r3, #20]
   21744:	e7eb      	b.n	2171e <z_impl_k_queue_get+0x3a>
   21746:	bf00      	nop
   21748:	2000318c 	.word	0x2000318c

0002174c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2174c:	b538      	push	{r3, r4, r5, lr}
   2174e:	4604      	mov	r4, r0
	__asm__ volatile(
   21750:	f04f 0340 	mov.w	r3, #64	; 0x40
   21754:	f3ef 8511 	mrs	r5, BASEPRI
   21758:	f383 8812 	msr	BASEPRI_MAX, r3
   2175c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21760:	f009 fa77 	bl	2ac52 <z_unpend_first_thread>

	if (thread != NULL) {
   21764:	b148      	cbz	r0, 2177a <z_impl_k_sem_give+0x2e>
   21766:	2200      	movs	r2, #0
   21768:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2176a:	f009 fa01 	bl	2ab70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2176e:	4629      	mov	r1, r5
   21770:	4808      	ldr	r0, [pc, #32]	; (21794 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21776:	f000 ba5f 	b.w	21c38 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2177a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2177e:	429a      	cmp	r2, r3
   21780:	bf18      	it	ne
   21782:	3301      	addne	r3, #1
   21784:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21786:	2102      	movs	r1, #2
   21788:	f104 0010 	add.w	r0, r4, #16
   2178c:	f009 fc73 	bl	2b076 <z_handle_obj_poll_events>
}
   21790:	e7ed      	b.n	2176e <z_impl_k_sem_give+0x22>
   21792:	bf00      	nop
   21794:	200049c5 	.word	0x200049c5

00021798 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21798:	b513      	push	{r0, r1, r4, lr}
   2179a:	f04f 0440 	mov.w	r4, #64	; 0x40
   2179e:	f3ef 8111 	mrs	r1, BASEPRI
   217a2:	f384 8812 	msr	BASEPRI_MAX, r4
   217a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   217aa:	6884      	ldr	r4, [r0, #8]
   217ac:	b144      	cbz	r4, 217c0 <z_impl_k_sem_take+0x28>
		sem->count--;
   217ae:	3c01      	subs	r4, #1
   217b0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   217b2:	f381 8811 	msr	BASEPRI, r1
   217b6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   217ba:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   217bc:	b002      	add	sp, #8
   217be:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   217c0:	ea52 0403 	orrs.w	r4, r2, r3
   217c4:	d106      	bne.n	217d4 <z_impl_k_sem_take+0x3c>
   217c6:	f381 8811 	msr	BASEPRI, r1
   217ca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   217ce:	f06f 000f 	mvn.w	r0, #15
   217d2:	e7f3      	b.n	217bc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   217d4:	e9cd 2300 	strd	r2, r3, [sp]
   217d8:	4602      	mov	r2, r0
   217da:	4802      	ldr	r0, [pc, #8]	; (217e4 <z_impl_k_sem_take+0x4c>)
   217dc:	f000 fb80 	bl	21ee0 <z_pend_curr>
	return ret;
   217e0:	e7ec      	b.n	217bc <z_impl_k_sem_take+0x24>
   217e2:	bf00      	nop
   217e4:	200049c5 	.word	0x200049c5

000217e8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   217e8:	b570      	push	{r4, r5, r6, lr}
   217ea:	4604      	mov	r4, r0
	__asm__ volatile(
   217ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   217f0:	f3ef 8511 	mrs	r5, BASEPRI
   217f4:	f383 8812 	msr	BASEPRI_MAX, r3
   217f8:	f3bf 8f6f 	isb	sy
   217fc:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   21800:	4620      	mov	r0, r4
   21802:	f009 fa26 	bl	2ac52 <z_unpend_first_thread>
		if (thread == NULL) {
   21806:	b118      	cbz	r0, 21810 <z_impl_k_sem_reset+0x28>
   21808:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   2180a:	f009 f9b1 	bl	2ab70 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2180e:	e7f7      	b.n	21800 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   21810:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21812:	2102      	movs	r1, #2
   21814:	f104 0010 	add.w	r0, r4, #16
   21818:	f009 fc2d 	bl	2b076 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   2181c:	4629      	mov	r1, r5
   2181e:	4802      	ldr	r0, [pc, #8]	; (21828 <z_impl_k_sem_reset+0x40>)
}
   21820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   21824:	f000 ba08 	b.w	21c38 <z_reschedule>
   21828:	200049c5 	.word	0x200049c5

0002182c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2182c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2182e:	4b09      	ldr	r3, [pc, #36]	; (21854 <k_sys_work_q_init+0x28>)
   21830:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21832:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21834:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21836:	9300      	str	r3, [sp, #0]
   21838:	4907      	ldr	r1, [pc, #28]	; (21858 <k_sys_work_q_init+0x2c>)
   2183a:	4808      	ldr	r0, [pc, #32]	; (2185c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2183c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21840:	f04f 33ff 	mov.w	r3, #4294967295
   21844:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21848:	f000 f914 	bl	21a74 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2184c:	4620      	mov	r0, r4
   2184e:	b004      	add	sp, #16
   21850:	bd10      	pop	{r4, pc}
   21852:	bf00      	nop
   21854:	0002eb1c 	.word	0x0002eb1c
   21858:	20006b90 	.word	0x20006b90
   2185c:	200024a0 	.word	0x200024a0

00021860 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   21864:	4e47      	ldr	r6, [pc, #284]	; (21984 <work_queue_main+0x124>)
   21866:	b085      	sub	sp, #20
   21868:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2186a:	f04f 38ff 	mov.w	r8, #4294967295
   2186e:	f04f 39ff 	mov.w	r9, #4294967295
   21872:	f04f 0340 	mov.w	r3, #64	; 0x40
   21876:	f3ef 8711 	mrs	r7, BASEPRI
   2187a:	f383 8812 	msr	BASEPRI_MAX, r3
   2187e:	f3bf 8f6f 	isb	sy
   21882:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   21886:	b98d      	cbnz	r5, 218ac <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   21888:	2102      	movs	r1, #2
   2188a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2188e:	f009 f812 	bl	2a8b6 <flag_test_and_clear>
   21892:	2800      	cmp	r0, #0
   21894:	d135      	bne.n	21902 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21896:	2300      	movs	r3, #0
   21898:	e9cd 8900 	strd	r8, r9, [sp]
   2189c:	9302      	str	r3, [sp, #8]
   2189e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   218a2:	4639      	mov	r1, r7
   218a4:	4838      	ldr	r0, [pc, #224]	; (21988 <work_queue_main+0x128>)
   218a6:	f000 fcf3 	bl	22290 <z_sched_wait>
			continue;
   218aa:	e7e2      	b.n	21872 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   218ac:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   218b0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   218b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   218b6:	4295      	cmp	r5, r2
   218b8:	d101      	bne.n	218be <work_queue_main+0x5e>
	list->tail = node;
   218ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   218be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   218c2:	f043 0302 	orr.w	r3, r3, #2
   218c6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   218ca:	68eb      	ldr	r3, [r5, #12]
   218cc:	f023 0304 	bic.w	r3, r3, #4
   218d0:	f043 0301 	orr.w	r3, r3, #1
   218d4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   218d6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   218d8:	f387 8811 	msr	BASEPRI, r7
   218dc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   218e0:	4628      	mov	r0, r5
   218e2:	4798      	blx	r3
	__asm__ volatile(
   218e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   218e8:	f3ef 8b11 	mrs	fp, BASEPRI
   218ec:	f383 8812 	msr	BASEPRI_MAX, r3
   218f0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   218f4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   218f6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   218f8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   218fc:	d40b      	bmi.n	21916 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   218fe:	60ea      	str	r2, [r5, #12]
   21900:	e00e      	b.n	21920 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21902:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21906:	2200      	movs	r2, #0
   21908:	2101      	movs	r1, #1
   2190a:	4628      	mov	r0, r5
   2190c:	f009 f9c9 	bl	2aca2 <z_sched_wake>
   21910:	2800      	cmp	r0, #0
   21912:	d1f8      	bne.n	21906 <work_queue_main+0xa6>
   21914:	e7bf      	b.n	21896 <work_queue_main+0x36>
	return list->head;
   21916:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   21918:	f023 0303 	bic.w	r3, r3, #3
   2191c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2191e:	b970      	cbnz	r0, 2193e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   21920:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21924:	f023 0302 	bic.w	r3, r3, #2
   21928:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   2192c:	f38b 8811 	msr	BASEPRI, fp
   21930:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21934:	05d8      	lsls	r0, r3, #23
   21936:	d49c      	bmi.n	21872 <work_queue_main+0x12>
	z_impl_k_yield();
   21938:	f000 fb88 	bl	2204c <z_impl_k_yield>
}
   2193c:	e799      	b.n	21872 <work_queue_main+0x12>
	return node->next;
   2193e:	2700      	movs	r7, #0
   21940:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   21944:	463b      	mov	r3, r7
		if (wc->work == work) {
   21946:	6842      	ldr	r2, [r0, #4]
   21948:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2194a:	4601      	mov	r1, r0
		if (wc->work == work) {
   2194c:	d10c      	bne.n	21968 <work_queue_main+0x108>
	return node->next;
   2194e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21950:	b997      	cbnz	r7, 21978 <work_queue_main+0x118>
   21952:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   21954:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   21956:	4282      	cmp	r2, r0
   21958:	d100      	bne.n	2195c <work_queue_main+0xfc>
	list->tail = node;
   2195a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2195c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   21960:	f7ff fef4 	bl	2174c <z_impl_k_sem_give>
}
   21964:	4639      	mov	r1, r7
   21966:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21968:	f1ba 0f00 	cmp.w	sl, #0
   2196c:	d0d8      	beq.n	21920 <work_queue_main+0xc0>
	return node->next;
   2196e:	4650      	mov	r0, sl
   21970:	460f      	mov	r7, r1
   21972:	f8da a000 	ldr.w	sl, [sl]
   21976:	e7e6      	b.n	21946 <work_queue_main+0xe6>
	return list->tail;
   21978:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   2197a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2197c:	4290      	cmp	r0, r2
	list->tail = node;
   2197e:	bf08      	it	eq
   21980:	6077      	streq	r7, [r6, #4]
}
   21982:	e7eb      	b.n	2195c <work_queue_main+0xfc>
   21984:	200031b4 	.word	0x200031b4
   21988:	200049c5 	.word	0x200049c5

0002198c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2198c:	68c3      	ldr	r3, [r0, #12]
{
   2198e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21990:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21994:	079b      	lsls	r3, r3, #30
{
   21996:	4605      	mov	r5, r0
   21998:	460c      	mov	r4, r1
	if (ret) {
   2199a:	d50d      	bpl.n	219b8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2199c:	2201      	movs	r2, #1
   2199e:	2100      	movs	r1, #0
   219a0:	f104 0008 	add.w	r0, r4, #8
   219a4:	f008 ff77 	bl	2a896 <z_impl_k_sem_init>
	parent->next = child;
   219a8:	2300      	movs	r3, #0
   219aa:	6023      	str	r3, [r4, #0]
	return list->tail;
   219ac:	4b05      	ldr	r3, [pc, #20]	; (219c4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   219ae:	6065      	str	r5, [r4, #4]
   219b0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   219b2:	b91a      	cbnz	r2, 219bc <cancel_sync_locked+0x30>
	list->head = node;
   219b4:	e9c3 4400 	strd	r4, r4, [r3]
}
   219b8:	4630      	mov	r0, r6
   219ba:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   219bc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   219be:	605c      	str	r4, [r3, #4]
}
   219c0:	e7fa      	b.n	219b8 <cancel_sync_locked+0x2c>
   219c2:	bf00      	nop
   219c4:	200031b4 	.word	0x200031b4

000219c8 <submit_to_queue_locked>:
{
   219c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   219ca:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   219cc:	079a      	lsls	r2, r3, #30
{
   219ce:	4604      	mov	r4, r0
   219d0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   219d2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   219d6:	d41f      	bmi.n	21a18 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   219d8:	075f      	lsls	r7, r3, #29
   219da:	d41f      	bmi.n	21a1c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   219dc:	680a      	ldr	r2, [r1, #0]
   219de:	b90a      	cbnz	r2, 219e4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   219e0:	6882      	ldr	r2, [r0, #8]
   219e2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   219e4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   219e6:	bf44      	itt	mi
   219e8:	68a3      	ldrmi	r3, [r4, #8]
   219ea:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   219ec:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   219ee:	bf4c      	ite	mi
   219f0:	2502      	movmi	r5, #2
		ret = 1;
   219f2:	2501      	movpl	r5, #1
	if (queue == NULL) {
   219f4:	b37f      	cbz	r7, 21a56 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   219f6:	4b1b      	ldr	r3, [pc, #108]	; (21a64 <submit_to_queue_locked+0x9c>)
   219f8:	689b      	ldr	r3, [r3, #8]
   219fa:	42bb      	cmp	r3, r7
   219fc:	d111      	bne.n	21a22 <submit_to_queue_locked+0x5a>
   219fe:	f008 fe5a 	bl	2a6b6 <k_is_in_isr>
   21a02:	f080 0001 	eor.w	r0, r0, #1
   21a06:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   21a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21a0c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21a0e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21a12:	d523      	bpl.n	21a5c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   21a14:	b13a      	cbz	r2, 21a26 <submit_to_queue_locked+0x5e>
   21a16:	b940      	cbnz	r0, 21a2a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   21a18:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   21a1c:	2300      	movs	r3, #0
   21a1e:	6033      	str	r3, [r6, #0]
	return ret;
   21a20:	e013      	b.n	21a4a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21a22:	2000      	movs	r0, #0
   21a24:	e7f0      	b.n	21a08 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   21a26:	071b      	lsls	r3, r3, #28
   21a28:	d4f6      	bmi.n	21a18 <submit_to_queue_locked+0x50>
	parent->next = child;
   21a2a:	2300      	movs	r3, #0
   21a2c:	6023      	str	r3, [r4, #0]
	return list->tail;
   21a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   21a32:	b963      	cbnz	r3, 21a4e <submit_to_queue_locked+0x86>
	list->head = node;
   21a34:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   21a38:	4638      	mov	r0, r7
   21a3a:	f008 ff55 	bl	2a8e8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21a3e:	68e3      	ldr	r3, [r4, #12]
   21a40:	f043 0304 	orr.w	r3, r3, #4
   21a44:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21a46:	6833      	ldr	r3, [r6, #0]
   21a48:	60a3      	str	r3, [r4, #8]
}
   21a4a:	4628      	mov	r0, r5
   21a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21a4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21a50:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21a54:	e7f0      	b.n	21a38 <submit_to_queue_locked+0x70>
		return -EINVAL;
   21a56:	f06f 0515 	mvn.w	r5, #21
   21a5a:	e7df      	b.n	21a1c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   21a5c:	f06f 0512 	mvn.w	r5, #18
   21a60:	e7dc      	b.n	21a1c <submit_to_queue_locked+0x54>
   21a62:	bf00      	nop
   21a64:	2000318c 	.word	0x2000318c

00021a68 <k_work_submit>:
{
   21a68:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21a6a:	4801      	ldr	r0, [pc, #4]	; (21a70 <k_work_submit+0x8>)
   21a6c:	f008 bfc0 	b.w	2a9f0 <k_work_submit_to_queue>
   21a70:	200024a0 	.word	0x200024a0

00021a74 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   21a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a76:	b089      	sub	sp, #36	; 0x24
   21a78:	4604      	mov	r4, r0
	list->head = NULL;
   21a7a:	2000      	movs	r0, #0
	list->tail = NULL;
   21a7c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   21a80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21a82:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   21a86:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   21a8a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   21a8e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   21a92:	b31d      	cbz	r5, 21adc <k_work_queue_start+0x68>
   21a94:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   21a96:	2800      	cmp	r0, #0
   21a98:	f240 1001 	movw	r0, #257	; 0x101
   21a9c:	bf08      	it	eq
   21a9e:	2001      	moveq	r0, #1
	*flagp = flags;
   21aa0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21aa4:	2000      	movs	r0, #0
   21aa6:	f04f 36ff 	mov.w	r6, #4294967295
   21aaa:	f04f 37ff 	mov.w	r7, #4294967295
   21aae:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21ab2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21ab6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21aba:	4b09      	ldr	r3, [pc, #36]	; (21ae0 <k_work_queue_start+0x6c>)
   21abc:	9400      	str	r4, [sp, #0]
   21abe:	4620      	mov	r0, r4
   21ac0:	f7ff fcb8 	bl	21434 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   21ac4:	b125      	cbz	r5, 21ad0 <k_work_queue_start+0x5c>
   21ac6:	6829      	ldr	r1, [r5, #0]
   21ac8:	b111      	cbz	r1, 21ad0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   21aca:	4620      	mov	r0, r4
   21acc:	f008 fdf9 	bl	2a6c2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   21ad0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   21ad2:	b009      	add	sp, #36	; 0x24
   21ad4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21ad8:	f008 bdf8 	b.w	2a6cc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21adc:	2001      	movs	r0, #1
   21ade:	e7df      	b.n	21aa0 <k_work_queue_start+0x2c>
   21ae0:	00021861 	.word	0x00021861

00021ae4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21ae4:	b513      	push	{r0, r1, r4, lr}
   21ae6:	9001      	str	r0, [sp, #4]
   21ae8:	4608      	mov	r0, r1
	__asm__ volatile(
   21aea:	f04f 0140 	mov.w	r1, #64	; 0x40
   21aee:	f3ef 8411 	mrs	r4, BASEPRI
   21af2:	f381 8812 	msr	BASEPRI_MAX, r1
   21af6:	f3bf 8f6f 	isb	sy
	return *flagp;
   21afa:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21afc:	f011 0f0e 	tst.w	r1, #14
   21b00:	d116      	bne.n	21b30 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21b02:	ea53 0c02 	orrs.w	ip, r3, r2
   21b06:	d108      	bne.n	21b1a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   21b08:	a901      	add	r1, sp, #4
   21b0a:	f7ff ff5d 	bl	219c8 <submit_to_queue_locked>
	__asm__ volatile(
   21b0e:	f384 8811 	msr	BASEPRI, r4
   21b12:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21b16:	b002      	add	sp, #8
   21b18:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   21b1a:	f041 0108 	orr.w	r1, r1, #8
   21b1e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   21b20:	9901      	ldr	r1, [sp, #4]
   21b22:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21b24:	3010      	adds	r0, #16
   21b26:	4903      	ldr	r1, [pc, #12]	; (21b34 <k_work_schedule_for_queue+0x50>)
   21b28:	f000 fc28 	bl	2237c <z_add_timeout>
	return ret;
   21b2c:	2001      	movs	r0, #1
   21b2e:	e7ee      	b.n	21b0e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   21b30:	2000      	movs	r0, #0
   21b32:	e7ec      	b.n	21b0e <k_work_schedule_for_queue+0x2a>
   21b34:	0002a959 	.word	0x0002a959

00021b38 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21b38:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   21b3a:	4801      	ldr	r0, [pc, #4]	; (21b40 <k_work_schedule+0x8>)
   21b3c:	f7ff bfd2 	b.w	21ae4 <k_work_schedule_for_queue>
   21b40:	200024a0 	.word	0x200024a0

00021b44 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b46:	460c      	mov	r4, r1
   21b48:	9001      	str	r0, [sp, #4]
   21b4a:	4616      	mov	r6, r2
   21b4c:	461d      	mov	r5, r3
	__asm__ volatile(
   21b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b52:	f3ef 8711 	mrs	r7, BASEPRI
   21b56:	f383 8812 	msr	BASEPRI_MAX, r3
   21b5a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21b5e:	4608      	mov	r0, r1
   21b60:	f008 feb4 	bl	2a8cc <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21b64:	ea55 0306 	orrs.w	r3, r5, r6
   21b68:	d109      	bne.n	21b7e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   21b6a:	a901      	add	r1, sp, #4
   21b6c:	4620      	mov	r0, r4
   21b6e:	f7ff ff2b 	bl	219c8 <submit_to_queue_locked>
	__asm__ volatile(
   21b72:	f387 8811 	msr	BASEPRI, r7
   21b76:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21b7a:	b003      	add	sp, #12
   21b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21b7e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21b80:	4906      	ldr	r1, [pc, #24]	; (21b9c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   21b82:	f043 0308 	orr.w	r3, r3, #8
   21b86:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21b88:	9b01      	ldr	r3, [sp, #4]
   21b8a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21b8c:	f104 0010 	add.w	r0, r4, #16
   21b90:	4632      	mov	r2, r6
   21b92:	462b      	mov	r3, r5
   21b94:	f000 fbf2 	bl	2237c <z_add_timeout>
	return ret;
   21b98:	2001      	movs	r0, #1
   21b9a:	e7ea      	b.n	21b72 <k_work_reschedule_for_queue+0x2e>
   21b9c:	0002a959 	.word	0x0002a959

00021ba0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21ba0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21ba2:	4801      	ldr	r0, [pc, #4]	; (21ba8 <k_work_reschedule+0x8>)
   21ba4:	f7ff bfce 	b.w	21b44 <k_work_reschedule_for_queue>
   21ba8:	200024a0 	.word	0x200024a0

00021bac <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21bac:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21bae:	4d07      	ldr	r5, [pc, #28]	; (21bcc <z_reset_time_slice+0x20>)
   21bb0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21bb2:	b154      	cbz	r4, 21bca <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21bb4:	f7fd fa18 	bl	1efe8 <sys_clock_elapsed>
   21bb8:	4b05      	ldr	r3, [pc, #20]	; (21bd0 <z_reset_time_slice+0x24>)
   21bba:	4404      	add	r4, r0
   21bbc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21bbe:	6828      	ldr	r0, [r5, #0]
   21bc0:	2100      	movs	r1, #0
	}
}
   21bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21bc6:	f009 b8af 	b.w	2ad28 <z_set_timeout_expiry>
}
   21bca:	bd38      	pop	{r3, r4, r5, pc}
   21bcc:	200031c4 	.word	0x200031c4
   21bd0:	2000318c 	.word	0x2000318c

00021bd4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21bd6:	4604      	mov	r4, r0
   21bd8:	460d      	mov	r5, r1
	__asm__ volatile(
   21bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bde:	f3ef 8711 	mrs	r7, BASEPRI
   21be2:	f383 8812 	msr	BASEPRI_MAX, r3
   21be6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   21bea:	4e10      	ldr	r6, [pc, #64]	; (21c2c <k_sched_time_slice_set+0x58>)
   21bec:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   21bee:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21bf2:	f240 30e7 	movw	r0, #999	; 0x3e7
   21bf6:	6131      	str	r1, [r6, #16]
   21bf8:	2300      	movs	r3, #0
   21bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21bfe:	fbe4 010c 	umlal	r0, r1, r4, ip
   21c02:	f7de fd97 	bl	734 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21c06:	2c00      	cmp	r4, #0
   21c08:	4b09      	ldr	r3, [pc, #36]	; (21c30 <k_sched_time_slice_set+0x5c>)
   21c0a:	dc0a      	bgt.n	21c22 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   21c0c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   21c0e:	4b09      	ldr	r3, [pc, #36]	; (21c34 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   21c10:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   21c12:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   21c14:	f7ff ffca 	bl	21bac <z_reset_time_slice>
	__asm__ volatile(
   21c18:	f387 8811 	msr	BASEPRI, r7
   21c1c:	f3bf 8f6f 	isb	sy
	}
}
   21c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   21c22:	2802      	cmp	r0, #2
   21c24:	bfb8      	it	lt
   21c26:	2002      	movlt	r0, #2
   21c28:	e7f0      	b.n	21c0c <k_sched_time_slice_set+0x38>
   21c2a:	bf00      	nop
   21c2c:	2000318c 	.word	0x2000318c
   21c30:	200031c4 	.word	0x200031c4
   21c34:	200031c0 	.word	0x200031c0

00021c38 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21c38:	b949      	cbnz	r1, 21c4e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21c3a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   21c3e:	b930      	cbnz	r0, 21c4e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   21c40:	4b05      	ldr	r3, [pc, #20]	; (21c58 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   21c42:	69da      	ldr	r2, [r3, #28]
   21c44:	689b      	ldr	r3, [r3, #8]
   21c46:	429a      	cmp	r2, r3
   21c48:	d001      	beq.n	21c4e <z_reschedule+0x16>
	ret = arch_swap(key);
   21c4a:	f7f2 be6d 	b.w	14928 <arch_swap>
   21c4e:	f381 8811 	msr	BASEPRI, r1
   21c52:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21c56:	4770      	bx	lr
   21c58:	2000318c 	.word	0x2000318c

00021c5c <k_sched_lock>:
	__asm__ volatile(
   21c5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c60:	f3ef 8111 	mrs	r1, BASEPRI
   21c64:	f383 8812 	msr	BASEPRI_MAX, r3
   21c68:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   21c6c:	4b04      	ldr	r3, [pc, #16]	; (21c80 <k_sched_lock+0x24>)
   21c6e:	689a      	ldr	r2, [r3, #8]
   21c70:	7bd3      	ldrb	r3, [r2, #15]
   21c72:	3b01      	subs	r3, #1
   21c74:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   21c76:	f381 8811 	msr	BASEPRI, r1
   21c7a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21c7e:	4770      	bx	lr
   21c80:	2000318c 	.word	0x2000318c

00021c84 <update_cache>:
{
   21c84:	b538      	push	{r3, r4, r5, lr}
   21c86:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   21c88:	480c      	ldr	r0, [pc, #48]	; (21cbc <update_cache+0x38>)
   21c8a:	4d0d      	ldr	r5, [pc, #52]	; (21cc0 <update_cache+0x3c>)
   21c8c:	f008 ff6a 	bl	2ab64 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21c90:	4604      	mov	r4, r0
   21c92:	b900      	cbnz	r0, 21c96 <update_cache+0x12>
   21c94:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   21c96:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21c98:	b94a      	cbnz	r2, 21cae <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   21c9a:	7b5a      	ldrb	r2, [r3, #13]
   21c9c:	06d2      	lsls	r2, r2, #27
   21c9e:	d106      	bne.n	21cae <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21ca0:	69a2      	ldr	r2, [r4, #24]
   21ca2:	b922      	cbnz	r2, 21cae <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   21ca4:	89da      	ldrh	r2, [r3, #14]
   21ca6:	2a7f      	cmp	r2, #127	; 0x7f
   21ca8:	d901      	bls.n	21cae <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   21caa:	61eb      	str	r3, [r5, #28]
}
   21cac:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   21cae:	429c      	cmp	r4, r3
   21cb0:	d002      	beq.n	21cb8 <update_cache+0x34>
			z_reset_time_slice(thread);
   21cb2:	4620      	mov	r0, r4
   21cb4:	f7ff ff7a 	bl	21bac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21cb8:	61ec      	str	r4, [r5, #28]
}
   21cba:	e7f7      	b.n	21cac <update_cache+0x28>
   21cbc:	200031ac 	.word	0x200031ac
   21cc0:	2000318c 	.word	0x2000318c

00021cc4 <move_thread_to_end_of_prio_q>:
{
   21cc4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21cc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21cca:	7b43      	ldrb	r3, [r0, #13]
   21ccc:	2a00      	cmp	r2, #0
{
   21cce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21cd0:	da04      	bge.n	21cdc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21cd6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   21cd8:	f008 feef 	bl	2aaba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21cdc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   21cde:	4a15      	ldr	r2, [pc, #84]	; (21d34 <move_thread_to_end_of_prio_q+0x70>)
   21ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21ce4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21ce6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21cea:	f102 0520 	add.w	r5, r2, #32
   21cee:	42ab      	cmp	r3, r5
   21cf0:	d01b      	beq.n	21d2a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21cf2:	b1d3      	cbz	r3, 21d2a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   21cf4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   21cf8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   21cfc:	4286      	cmp	r6, r0
   21cfe:	d00f      	beq.n	21d20 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   21d00:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21d02:	2800      	cmp	r0, #0
   21d04:	dd0c      	ble.n	21d20 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21d06:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21d08:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   21d0c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   21d0e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   21d10:	6890      	ldr	r0, [r2, #8]
   21d12:	1a43      	subs	r3, r0, r1
   21d14:	4258      	negs	r0, r3
}
   21d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21d1a:	4158      	adcs	r0, r3
   21d1c:	f7ff bfb2 	b.w	21c84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21d20:	42a3      	cmp	r3, r4
   21d22:	d002      	beq.n	21d2a <move_thread_to_end_of_prio_q+0x66>
   21d24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21d26:	2b00      	cmp	r3, #0
   21d28:	d1e6      	bne.n	21cf8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   21d2a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   21d2e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   21d30:	6251      	str	r1, [r2, #36]	; 0x24
}
   21d32:	e7ed      	b.n	21d10 <move_thread_to_end_of_prio_q+0x4c>
   21d34:	2000318c 	.word	0x2000318c

00021d38 <z_time_slice>:
{
   21d38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d3e:	f3ef 8511 	mrs	r5, BASEPRI
   21d42:	f383 8812 	msr	BASEPRI_MAX, r3
   21d46:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   21d4a:	4b17      	ldr	r3, [pc, #92]	; (21da8 <z_time_slice+0x70>)
   21d4c:	4a17      	ldr	r2, [pc, #92]	; (21dac <z_time_slice+0x74>)
   21d4e:	689c      	ldr	r4, [r3, #8]
   21d50:	6811      	ldr	r1, [r2, #0]
   21d52:	428c      	cmp	r4, r1
   21d54:	d107      	bne.n	21d66 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   21d56:	4620      	mov	r0, r4
   21d58:	f7ff ff28 	bl	21bac <z_reset_time_slice>
	__asm__ volatile(
   21d5c:	f385 8811 	msr	BASEPRI, r5
   21d60:	f3bf 8f6f 	isb	sy
}
   21d64:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   21d66:	2100      	movs	r1, #0
   21d68:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   21d6a:	4a11      	ldr	r2, [pc, #68]	; (21db0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   21d6c:	6812      	ldr	r2, [r2, #0]
   21d6e:	b1c2      	cbz	r2, 21da2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   21d70:	89e2      	ldrh	r2, [r4, #14]
   21d72:	2a7f      	cmp	r2, #127	; 0x7f
   21d74:	d815      	bhi.n	21da2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   21d76:	7b62      	ldrb	r2, [r4, #13]
   21d78:	06d2      	lsls	r2, r2, #27
   21d7a:	d112      	bne.n	21da2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21d7c:	4a0d      	ldr	r2, [pc, #52]	; (21db4 <z_time_slice+0x7c>)
   21d7e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21d82:	6812      	ldr	r2, [r2, #0]
   21d84:	4291      	cmp	r1, r2
   21d86:	db0c      	blt.n	21da2 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   21d88:	4a0b      	ldr	r2, [pc, #44]	; (21db8 <z_time_slice+0x80>)
   21d8a:	4294      	cmp	r4, r2
   21d8c:	d009      	beq.n	21da2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   21d8e:	691a      	ldr	r2, [r3, #16]
   21d90:	4282      	cmp	r2, r0
   21d92:	dc03      	bgt.n	21d9c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   21d94:	4620      	mov	r0, r4
   21d96:	f7ff ff95 	bl	21cc4 <move_thread_to_end_of_prio_q>
   21d9a:	e7dc      	b.n	21d56 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   21d9c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   21d9e:	611a      	str	r2, [r3, #16]
   21da0:	e7dc      	b.n	21d5c <z_time_slice+0x24>
   21da2:	2200      	movs	r2, #0
   21da4:	e7fb      	b.n	21d9e <z_time_slice+0x66>
   21da6:	bf00      	nop
   21da8:	2000318c 	.word	0x2000318c
   21dac:	200031bc 	.word	0x200031bc
   21db0:	200031c4 	.word	0x200031c4
   21db4:	200031c0 	.word	0x200031c0
   21db8:	200023a0 	.word	0x200023a0

00021dbc <ready_thread>:
{
   21dbc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21dbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21dc2:	7b43      	ldrb	r3, [r0, #13]
   21dc4:	2a00      	cmp	r2, #0
   21dc6:	db2a      	blt.n	21e1e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21dc8:	06da      	lsls	r2, r3, #27
   21dca:	d128      	bne.n	21e1e <ready_thread+0x62>
   21dcc:	6982      	ldr	r2, [r0, #24]
   21dce:	bb32      	cbnz	r2, 21e1e <ready_thread+0x62>
	return list->head == list;
   21dd0:	4a14      	ldr	r2, [pc, #80]	; (21e24 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   21dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21dd6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   21dd8:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ddc:	f102 0520 	add.w	r5, r2, #32
   21de0:	42ab      	cmp	r3, r5
   21de2:	d017      	beq.n	21e14 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21de4:	b1b3      	cbz	r3, 21e14 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   21de6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21dea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21dee:	428e      	cmp	r6, r1
   21df0:	d00b      	beq.n	21e0a <ready_thread+0x4e>
		return b2 - b1;
   21df2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21df4:	2900      	cmp	r1, #0
   21df6:	dd08      	ble.n	21e0a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   21df8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21dfa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21dfe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21e00:	6058      	str	r0, [r3, #4]
}
   21e02:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   21e04:	2000      	movs	r0, #0
   21e06:	f7ff bf3d 	b.w	21c84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21e0a:	42a3      	cmp	r3, r4
   21e0c:	d002      	beq.n	21e14 <ready_thread+0x58>
   21e0e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21e10:	2b00      	cmp	r3, #0
   21e12:	d1ea      	bne.n	21dea <ready_thread+0x2e>
	node->prev = tail;
   21e14:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   21e18:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21e1a:	6250      	str	r0, [r2, #36]	; 0x24
}
   21e1c:	e7f1      	b.n	21e02 <ready_thread+0x46>
}
   21e1e:	bc70      	pop	{r4, r5, r6}
   21e20:	4770      	bx	lr
   21e22:	bf00      	nop
   21e24:	2000318c 	.word	0x2000318c

00021e28 <z_sched_start>:
{
   21e28:	b510      	push	{r4, lr}
	__asm__ volatile(
   21e2a:	f04f 0240 	mov.w	r2, #64	; 0x40
   21e2e:	f3ef 8411 	mrs	r4, BASEPRI
   21e32:	f382 8812 	msr	BASEPRI_MAX, r2
   21e36:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21e3a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   21e3c:	0751      	lsls	r1, r2, #29
   21e3e:	d404      	bmi.n	21e4a <z_sched_start+0x22>
	__asm__ volatile(
   21e40:	f384 8811 	msr	BASEPRI, r4
   21e44:	f3bf 8f6f 	isb	sy
}
   21e48:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e4a:	f022 0204 	bic.w	r2, r2, #4
   21e4e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   21e50:	f7ff ffb4 	bl	21dbc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21e54:	4621      	mov	r1, r4
   21e56:	4802      	ldr	r0, [pc, #8]	; (21e60 <z_sched_start+0x38>)
}
   21e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   21e5c:	f7ff beec 	b.w	21c38 <z_reschedule>
   21e60:	200049c5 	.word	0x200049c5

00021e64 <unready_thread>:
{
   21e64:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   21e66:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21e6a:	7b43      	ldrb	r3, [r0, #13]
   21e6c:	2a00      	cmp	r2, #0
{
   21e6e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21e70:	da04      	bge.n	21e7c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21e76:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21e78:	f008 fe1f 	bl	2aaba <sys_dlist_remove>
	update_cache(thread == _current);
   21e7c:	4b04      	ldr	r3, [pc, #16]	; (21e90 <unready_thread+0x2c>)
   21e7e:	6898      	ldr	r0, [r3, #8]
   21e80:	1a43      	subs	r3, r0, r1
   21e82:	4258      	negs	r0, r3
   21e84:	4158      	adcs	r0, r3
}
   21e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   21e8a:	f7ff befb 	b.w	21c84 <update_cache>
   21e8e:	bf00      	nop
   21e90:	2000318c 	.word	0x2000318c

00021e94 <pend>:
{
   21e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e98:	4606      	mov	r6, r0
   21e9a:	4615      	mov	r5, r2
   21e9c:	461c      	mov	r4, r3
	__asm__ volatile(
   21e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ea2:	f3ef 8711 	mrs	r7, BASEPRI
   21ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   21eaa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   21eae:	f008 fe91 	bl	2abd4 <add_to_waitq_locked>
	__asm__ volatile(
   21eb2:	f387 8811 	msr	BASEPRI, r7
   21eb6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21eba:	f1b4 3fff 	cmp.w	r4, #4294967295
   21ebe:	bf08      	it	eq
   21ec0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21ec4:	d008      	beq.n	21ed8 <pend+0x44>
   21ec6:	462a      	mov	r2, r5
   21ec8:	4623      	mov	r3, r4
   21eca:	f106 0018 	add.w	r0, r6, #24
   21ece:	4903      	ldr	r1, [pc, #12]	; (21edc <pend+0x48>)
}
   21ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ed4:	f000 ba52 	b.w	2237c <z_add_timeout>
   21ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21edc:	0002ab91 	.word	0x0002ab91

00021ee0 <z_pend_curr>:
{
   21ee0:	b510      	push	{r4, lr}
	pending_current = _current;
   21ee2:	4b07      	ldr	r3, [pc, #28]	; (21f00 <z_pend_curr+0x20>)
   21ee4:	6898      	ldr	r0, [r3, #8]
   21ee6:	4b07      	ldr	r3, [pc, #28]	; (21f04 <z_pend_curr+0x24>)
{
   21ee8:	460c      	mov	r4, r1
	pending_current = _current;
   21eea:	6018      	str	r0, [r3, #0]
{
   21eec:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   21eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21ef2:	f7ff ffcf 	bl	21e94 <pend>
   21ef6:	4620      	mov	r0, r4
}
   21ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21efc:	f7f2 bd14 	b.w	14928 <arch_swap>
   21f00:	2000318c 	.word	0x2000318c
   21f04:	200031bc 	.word	0x200031bc

00021f08 <z_set_prio>:
{
   21f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f0a:	4604      	mov	r4, r0
	__asm__ volatile(
   21f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f10:	f3ef 8611 	mrs	r6, BASEPRI
   21f14:	f383 8812 	msr	BASEPRI_MAX, r3
   21f18:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   21f1c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21f1e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21f20:	b249      	sxtb	r1, r1
   21f22:	d133      	bne.n	21f8c <z_set_prio+0x84>
		if (need_sched) {
   21f24:	6982      	ldr	r2, [r0, #24]
   21f26:	bb8a      	cbnz	r2, 21f8c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21f2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21f2e:	f008 fdc4 	bl	2aaba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21f32:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   21f34:	4a17      	ldr	r2, [pc, #92]	; (21f94 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   21f36:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21f3c:	7343      	strb	r3, [r0, #13]
   21f3e:	4610      	mov	r0, r2
   21f40:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f44:	4283      	cmp	r3, r0
   21f46:	d01b      	beq.n	21f80 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f48:	b1d3      	cbz	r3, 21f80 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   21f4a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   21f4c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   21f50:	42a9      	cmp	r1, r5
   21f52:	d010      	beq.n	21f76 <z_set_prio+0x6e>
		return b2 - b1;
   21f54:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21f56:	2d00      	cmp	r5, #0
   21f58:	dd0d      	ble.n	21f76 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   21f5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21f5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21f60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21f62:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21f64:	2001      	movs	r0, #1
   21f66:	f7ff fe8d 	bl	21c84 <update_cache>
   21f6a:	2001      	movs	r0, #1
	__asm__ volatile(
   21f6c:	f386 8811 	msr	BASEPRI, r6
   21f70:	f3bf 8f6f 	isb	sy
}
   21f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21f76:	42bb      	cmp	r3, r7
   21f78:	d002      	beq.n	21f80 <z_set_prio+0x78>
   21f7a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21f7c:	2b00      	cmp	r3, #0
   21f7e:	d1e5      	bne.n	21f4c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   21f80:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   21f82:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   21f86:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21f88:	6254      	str	r4, [r2, #36]	; 0x24
}
   21f8a:	e7eb      	b.n	21f64 <z_set_prio+0x5c>
			thread->base.prio = prio;
   21f8c:	73a1      	strb	r1, [r4, #14]
   21f8e:	2000      	movs	r0, #0
   21f90:	e7ec      	b.n	21f6c <z_set_prio+0x64>
   21f92:	bf00      	nop
   21f94:	2000318c 	.word	0x2000318c

00021f98 <z_impl_k_thread_suspend>:
{
   21f98:	b570      	push	{r4, r5, r6, lr}
   21f9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21f9c:	3018      	adds	r0, #24
   21f9e:	f008 fe9d 	bl	2acdc <z_abort_timeout>
	__asm__ volatile(
   21fa2:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fa6:	f3ef 8611 	mrs	r6, BASEPRI
   21faa:	f383 8812 	msr	BASEPRI_MAX, r3
   21fae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   21fb2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21fb6:	7b63      	ldrb	r3, [r4, #13]
   21fb8:	2a00      	cmp	r2, #0
   21fba:	da05      	bge.n	21fc8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21fc0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21fc2:	4620      	mov	r0, r4
   21fc4:	f008 fd79 	bl	2aaba <sys_dlist_remove>
		update_cache(thread == _current);
   21fc8:	4d0b      	ldr	r5, [pc, #44]	; (21ff8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21fca:	7b63      	ldrb	r3, [r4, #13]
   21fcc:	68a8      	ldr	r0, [r5, #8]
   21fce:	f043 0310 	orr.w	r3, r3, #16
   21fd2:	7363      	strb	r3, [r4, #13]
   21fd4:	1b03      	subs	r3, r0, r4
   21fd6:	4258      	negs	r0, r3
   21fd8:	4158      	adcs	r0, r3
   21fda:	f7ff fe53 	bl	21c84 <update_cache>
	__asm__ volatile(
   21fde:	f386 8811 	msr	BASEPRI, r6
   21fe2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21fe6:	68ab      	ldr	r3, [r5, #8]
   21fe8:	42a3      	cmp	r3, r4
   21fea:	d103      	bne.n	21ff4 <z_impl_k_thread_suspend+0x5c>
}
   21fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21ff0:	f008 bdae 	b.w	2ab50 <z_reschedule_unlocked>
}
   21ff4:	bd70      	pop	{r4, r5, r6, pc}
   21ff6:	bf00      	nop
   21ff8:	2000318c 	.word	0x2000318c

00021ffc <k_sched_unlock>:
{
   21ffc:	b510      	push	{r4, lr}
	__asm__ volatile(
   21ffe:	f04f 0340 	mov.w	r3, #64	; 0x40
   22002:	f3ef 8411 	mrs	r4, BASEPRI
   22006:	f383 8812 	msr	BASEPRI_MAX, r3
   2200a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2200e:	4b08      	ldr	r3, [pc, #32]	; (22030 <k_sched_unlock+0x34>)
   22010:	689a      	ldr	r2, [r3, #8]
   22012:	7bd3      	ldrb	r3, [r2, #15]
   22014:	3301      	adds	r3, #1
   22016:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22018:	2000      	movs	r0, #0
   2201a:	f7ff fe33 	bl	21c84 <update_cache>
	__asm__ volatile(
   2201e:	f384 8811 	msr	BASEPRI, r4
   22022:	f3bf 8f6f 	isb	sy
}
   22026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2202a:	f008 bd91 	b.w	2ab50 <z_reschedule_unlocked>
   2202e:	bf00      	nop
   22030:	2000318c 	.word	0x2000318c

00022034 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   22034:	4b04      	ldr	r3, [pc, #16]	; (22048 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   22036:	2100      	movs	r1, #0
   22038:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2203c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   22040:	4608      	mov	r0, r1
   22042:	f7ff bdc7 	b.w	21bd4 <k_sched_time_slice_set>
   22046:	bf00      	nop
   22048:	2000318c 	.word	0x2000318c

0002204c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2204e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22052:	f3ef 8511 	mrs	r5, BASEPRI
   22056:	f383 8812 	msr	BASEPRI_MAX, r3
   2205a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2205e:	491a      	ldr	r1, [pc, #104]	; (220c8 <z_impl_k_yield+0x7c>)
   22060:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22062:	7b43      	ldrb	r3, [r0, #13]
   22064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22068:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2206a:	f008 fd26 	bl	2aaba <sys_dlist_remove>
	}
	queue_thread(_current);
   2206e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22070:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   22072:	4608      	mov	r0, r1
   22074:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22078:	735a      	strb	r2, [r3, #13]
   2207a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2207e:	4282      	cmp	r2, r0
   22080:	d01c      	beq.n	220bc <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22082:	b1da      	cbz	r2, 220bc <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   22084:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   22086:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2208a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   2208e:	42a6      	cmp	r6, r4
   22090:	d00f      	beq.n	220b2 <z_impl_k_yield+0x66>
		return b2 - b1;
   22092:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22094:	2c00      	cmp	r4, #0
   22096:	dd0c      	ble.n	220b2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   22098:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2209a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2209e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   220a0:	6053      	str	r3, [r2, #4]
	update_cache(1);
   220a2:	2001      	movs	r0, #1
   220a4:	f7ff fdee 	bl	21c84 <update_cache>
   220a8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   220aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   220ae:	f7f2 bc3b 	b.w	14928 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   220b2:	42ba      	cmp	r2, r7
   220b4:	d002      	beq.n	220bc <z_impl_k_yield+0x70>
   220b6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   220b8:	2a00      	cmp	r2, #0
   220ba:	d1e6      	bne.n	2208a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   220bc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   220be:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   220c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   220c4:	624b      	str	r3, [r1, #36]	; 0x24
}
   220c6:	e7ec      	b.n	220a2 <z_impl_k_yield+0x56>
   220c8:	2000318c 	.word	0x2000318c

000220cc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   220cc:	ea50 0301 	orrs.w	r3, r0, r1
{
   220d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220d4:	4605      	mov	r5, r0
   220d6:	460e      	mov	r6, r1
	if (ticks == 0) {
   220d8:	d103      	bne.n	220e2 <z_tick_sleep+0x16>
	z_impl_k_yield();
   220da:	f7ff ffb7 	bl	2204c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   220de:	2000      	movs	r0, #0
   220e0:	e033      	b.n	2214a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   220e2:	f06f 0401 	mvn.w	r4, #1
   220e6:	1a24      	subs	r4, r4, r0
   220e8:	f04f 33ff 	mov.w	r3, #4294967295
   220ec:	eb63 0301 	sbc.w	r3, r3, r1
   220f0:	2c01      	cmp	r4, #1
   220f2:	f173 0300 	sbcs.w	r3, r3, #0
   220f6:	da02      	bge.n	220fe <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   220f8:	f008 fe30 	bl	2ad5c <sys_clock_tick_get_32>
   220fc:	1944      	adds	r4, r0, r5
   220fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   22102:	f3ef 8811 	mrs	r8, BASEPRI
   22106:	f383 8812 	msr	BASEPRI_MAX, r3
   2210a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2210e:	4f10      	ldr	r7, [pc, #64]	; (22150 <z_tick_sleep+0x84>)
   22110:	4b10      	ldr	r3, [pc, #64]	; (22154 <z_tick_sleep+0x88>)
   22112:	68b8      	ldr	r0, [r7, #8]
   22114:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22116:	f7ff fea5 	bl	21e64 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2211a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2211c:	490e      	ldr	r1, [pc, #56]	; (22158 <z_tick_sleep+0x8c>)
   2211e:	462a      	mov	r2, r5
   22120:	4633      	mov	r3, r6
   22122:	3018      	adds	r0, #24
   22124:	f000 f92a 	bl	2237c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22128:	68ba      	ldr	r2, [r7, #8]
   2212a:	7b53      	ldrb	r3, [r2, #13]
   2212c:	f043 0310 	orr.w	r3, r3, #16
   22130:	7353      	strb	r3, [r2, #13]
   22132:	4640      	mov	r0, r8
   22134:	f7f2 fbf8 	bl	14928 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22138:	f008 fe10 	bl	2ad5c <sys_clock_tick_get_32>
   2213c:	1a20      	subs	r0, r4, r0
   2213e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22142:	2801      	cmp	r0, #1
   22144:	f173 0300 	sbcs.w	r3, r3, #0
   22148:	dbc9      	blt.n	220de <z_tick_sleep+0x12>
}
   2214a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2214e:	bf00      	nop
   22150:	2000318c 	.word	0x2000318c
   22154:	200031bc 	.word	0x200031bc
   22158:	0002ab91 	.word	0x0002ab91

0002215c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2215c:	f1b1 3fff 	cmp.w	r1, #4294967295
   22160:	bf08      	it	eq
   22162:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   22166:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22168:	d106      	bne.n	22178 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2216a:	4b08      	ldr	r3, [pc, #32]	; (2218c <z_impl_k_sleep+0x30>)
   2216c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2216e:	f7ff ff13 	bl	21f98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22172:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22176:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22178:	f7ff ffa8 	bl	220cc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2217c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22180:	fb80 0303 	smull	r0, r3, r0, r3
   22184:	0bc0      	lsrs	r0, r0, #15
   22186:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2218a:	e7f4      	b.n	22176 <z_impl_k_sleep+0x1a>
   2218c:	2000318c 	.word	0x2000318c

00022190 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   22190:	b538      	push	{r3, r4, r5, lr}
   22192:	4604      	mov	r4, r0
   22194:	4809      	ldr	r0, [pc, #36]	; (221bc <z_impl_k_usleep+0x2c>)
   22196:	4a0a      	ldr	r2, [pc, #40]	; (221c0 <z_impl_k_usleep+0x30>)
   22198:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2219c:	2100      	movs	r1, #0
   2219e:	2300      	movs	r3, #0
   221a0:	fbc4 0105 	smlal	r0, r1, r4, r5
   221a4:	f7de fac6 	bl	734 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   221a8:	17c1      	asrs	r1, r0, #31
   221aa:	f7ff ff8f 	bl	220cc <z_tick_sleep>
   221ae:	4b04      	ldr	r3, [pc, #16]	; (221c0 <z_impl_k_usleep+0x30>)
   221b0:	fb80 3003 	smull	r3, r0, r0, r3
   221b4:	0bdb      	lsrs	r3, r3, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   221b6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   221ba:	bd38      	pop	{r3, r4, r5, pc}
   221bc:	000f423f 	.word	0x000f423f
   221c0:	000f4240 	.word	0x000f4240

000221c4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   221c4:	4b01      	ldr	r3, [pc, #4]	; (221cc <z_impl_z_current_get+0x8>)
   221c6:	6898      	ldr	r0, [r3, #8]
   221c8:	4770      	bx	lr
   221ca:	bf00      	nop
   221cc:	2000318c 	.word	0x2000318c

000221d0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   221d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221d4:	4604      	mov	r4, r0
   221d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   221da:	f3ef 8611 	mrs	r6, BASEPRI
   221de:	f383 8812 	msr	BASEPRI_MAX, r3
   221e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   221e6:	7b03      	ldrb	r3, [r0, #12]
   221e8:	07d9      	lsls	r1, r3, #31
   221ea:	d50b      	bpl.n	22204 <z_thread_abort+0x34>
	__asm__ volatile(
   221ec:	f386 8811 	msr	BASEPRI, r6
   221f0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   221f4:	4040      	eors	r0, r0
   221f6:	f380 8811 	msr	BASEPRI, r0
   221fa:	f04f 0004 	mov.w	r0, #4
   221fe:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22204:	7b43      	ldrb	r3, [r0, #13]
   22206:	071a      	lsls	r2, r3, #28
   22208:	d504      	bpl.n	22214 <z_thread_abort+0x44>
   2220a:	f386 8811 	msr	BASEPRI, r6
   2220e:	f3bf 8f6f 	isb	sy
   22212:	e7f5      	b.n	22200 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22214:	f023 0220 	bic.w	r2, r3, #32
   22218:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2221c:	09d2      	lsrs	r2, r2, #7
   2221e:	d120      	bne.n	22262 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22220:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   22222:	68a3      	ldr	r3, [r4, #8]
   22224:	b113      	cbz	r3, 2222c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   22226:	4620      	mov	r0, r4
   22228:	f008 fc4f 	bl	2aaca <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2222c:	f104 0018 	add.w	r0, r4, #24
   22230:	f008 fd54 	bl	2acdc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22234:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22238:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2223c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2223e:	42bd      	cmp	r5, r7
   22240:	d000      	beq.n	22244 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22242:	b9b5      	cbnz	r5, 22272 <z_thread_abort+0xa2>
		update_cache(1);
   22244:	2001      	movs	r0, #1
   22246:	f7ff fd1d 	bl	21c84 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2224a:	4b10      	ldr	r3, [pc, #64]	; (2228c <z_thread_abort+0xbc>)
   2224c:	689b      	ldr	r3, [r3, #8]
   2224e:	42a3      	cmp	r3, r4
   22250:	d1db      	bne.n	2220a <z_thread_abort+0x3a>
   22252:	f3ef 8305 	mrs	r3, IPSR
   22256:	2b00      	cmp	r3, #0
   22258:	d1d7      	bne.n	2220a <z_thread_abort+0x3a>
   2225a:	4630      	mov	r0, r6
   2225c:	f7f2 fb64 	bl	14928 <arch_swap>
	return ret;
   22260:	e7d3      	b.n	2220a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22262:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22266:	f043 0308 	orr.w	r3, r3, #8
   2226a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2226c:	f008 fc25 	bl	2aaba <sys_dlist_remove>
}
   22270:	e7d7      	b.n	22222 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   22272:	4628      	mov	r0, r5
   22274:	f008 fc29 	bl	2aaca <unpend_thread_no_timeout>
   22278:	f105 0018 	add.w	r0, r5, #24
   2227c:	f008 fd2e 	bl	2acdc <z_abort_timeout>
   22280:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22284:	4628      	mov	r0, r5
   22286:	f7ff fd99 	bl	21dbc <ready_thread>
   2228a:	e7d7      	b.n	2223c <z_thread_abort+0x6c>
   2228c:	2000318c 	.word	0x2000318c

00022290 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22290:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22292:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22296:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22298:	e9cd 6700 	strd	r6, r7, [sp]
   2229c:	f7ff fe20 	bl	21ee0 <z_pend_curr>

	if (data != NULL) {
   222a0:	b11c      	cbz	r4, 222aa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   222a2:	4b03      	ldr	r3, [pc, #12]	; (222b0 <z_sched_wait+0x20>)
   222a4:	689b      	ldr	r3, [r3, #8]
   222a6:	695b      	ldr	r3, [r3, #20]
   222a8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   222aa:	b002      	add	sp, #8
   222ac:	bdd0      	pop	{r4, r6, r7, pc}
   222ae:	bf00      	nop
   222b0:	2000318c 	.word	0x2000318c

000222b4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   222b4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   222b6:	4806      	ldr	r0, [pc, #24]	; (222d0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   222b8:	4a06      	ldr	r2, [pc, #24]	; (222d4 <z_data_copy+0x20>)
   222ba:	4907      	ldr	r1, [pc, #28]	; (222d8 <z_data_copy+0x24>)
   222bc:	1a12      	subs	r2, r2, r0
   222be:	f008 f94e 	bl	2a55e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   222c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   222c6:	4a05      	ldr	r2, [pc, #20]	; (222dc <z_data_copy+0x28>)
   222c8:	4905      	ldr	r1, [pc, #20]	; (222e0 <z_data_copy+0x2c>)
   222ca:	4806      	ldr	r0, [pc, #24]	; (222e4 <z_data_copy+0x30>)
   222cc:	f008 b947 	b.w	2a55e <z_early_memcpy>
   222d0:	20000000 	.word	0x20000000
   222d4:	20000c2c 	.word	0x20000c2c
   222d8:	0002eb5c 	.word	0x0002eb5c
   222dc:	00000000 	.word	0x00000000
   222e0:	0002eb5c 	.word	0x0002eb5c
   222e4:	20000000 	.word	0x20000000

000222e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   222e8:	4b03      	ldr	r3, [pc, #12]	; (222f8 <elapsed+0x10>)
   222ea:	681b      	ldr	r3, [r3, #0]
   222ec:	b90b      	cbnz	r3, 222f2 <elapsed+0xa>
   222ee:	f7fc be7b 	b.w	1efe8 <sys_clock_elapsed>
}
   222f2:	2000      	movs	r0, #0
   222f4:	4770      	bx	lr
   222f6:	bf00      	nop
   222f8:	200031c8 	.word	0x200031c8

000222fc <next_timeout>:
	return list->head == list;
   222fc:	4b10      	ldr	r3, [pc, #64]	; (22340 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   222fe:	b510      	push	{r4, lr}
   22300:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22302:	429c      	cmp	r4, r3
   22304:	bf08      	it	eq
   22306:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22308:	f7ff ffee 	bl	222e8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2230c:	b1a4      	cbz	r4, 22338 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2230e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22312:	1a1b      	subs	r3, r3, r0
   22314:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   22318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2231c:	f170 0200 	sbcs.w	r2, r0, #0
   22320:	da0a      	bge.n	22338 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   22322:	2800      	cmp	r0, #0
   22324:	bfac      	ite	ge
   22326:	4618      	movge	r0, r3
   22328:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2232a:	4b06      	ldr	r3, [pc, #24]	; (22344 <next_timeout+0x48>)
   2232c:	691b      	ldr	r3, [r3, #16]
   2232e:	b113      	cbz	r3, 22336 <next_timeout+0x3a>
   22330:	4298      	cmp	r0, r3
   22332:	bfa8      	it	ge
   22334:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22336:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   22338:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2233c:	e7f5      	b.n	2232a <next_timeout+0x2e>
   2233e:	bf00      	nop
   22340:	20000820 	.word	0x20000820
   22344:	2000318c 	.word	0x2000318c

00022348 <remove_timeout>:
{
   22348:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2234a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2234c:	b168      	cbz	r0, 2236a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2234e:	4a0a      	ldr	r2, [pc, #40]	; (22378 <remove_timeout+0x30>)
   22350:	6852      	ldr	r2, [r2, #4]
   22352:	4290      	cmp	r0, r2
   22354:	d009      	beq.n	2236a <remove_timeout+0x22>
	if (next(t) != NULL) {
   22356:	b143      	cbz	r3, 2236a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22358:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2235c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22360:	1912      	adds	r2, r2, r4
   22362:	eb41 0105 	adc.w	r1, r1, r5
   22366:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2236a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2236c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2236e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22370:	2300      	movs	r3, #0
	node->prev = NULL;
   22372:	e9c0 3300 	strd	r3, r3, [r0]
}
   22376:	bd30      	pop	{r4, r5, pc}
   22378:	20000820 	.word	0x20000820

0002237c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2237c:	f1b3 3fff 	cmp.w	r3, #4294967295
   22380:	bf08      	it	eq
   22382:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22388:	4604      	mov	r4, r0
   2238a:	461f      	mov	r7, r3
   2238c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2238e:	d067      	beq.n	22460 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22390:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22392:	f04f 0340 	mov.w	r3, #64	; 0x40
   22396:	f3ef 8611 	mrs	r6, BASEPRI
   2239a:	f383 8812 	msr	BASEPRI_MAX, r3
   2239e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   223a2:	f06f 0201 	mvn.w	r2, #1
   223a6:	1b53      	subs	r3, r2, r5
   223a8:	f04f 3cff 	mov.w	ip, #4294967295
   223ac:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   223b0:	2b00      	cmp	r3, #0
   223b2:	db1b      	blt.n	223ec <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   223b4:	4b2b      	ldr	r3, [pc, #172]	; (22464 <z_add_timeout+0xe8>)
   223b6:	e9d3 1300 	ldrd	r1, r3, [r3]
   223ba:	1a52      	subs	r2, r2, r1
   223bc:	eb6c 0303 	sbc.w	r3, ip, r3
   223c0:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   223c2:	eb63 0307 	sbc.w	r3, r3, r7
   223c6:	2d01      	cmp	r5, #1
   223c8:	f173 0200 	sbcs.w	r2, r3, #0
   223cc:	bfbc      	itt	lt
   223ce:	2501      	movlt	r5, #1
   223d0:	2300      	movlt	r3, #0
   223d2:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   223d6:	4824      	ldr	r0, [pc, #144]	; (22468 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   223d8:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223dc:	4283      	cmp	r3, r0
   223de:	d118      	bne.n	22412 <z_add_timeout+0x96>
	node->prev = tail;
   223e0:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   223e4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   223e8:	6044      	str	r4, [r0, #4]
}
   223ea:	e026      	b.n	2243a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   223ec:	f7ff ff7c 	bl	222e8 <elapsed>
   223f0:	3501      	adds	r5, #1
   223f2:	f147 0700 	adc.w	r7, r7, #0
   223f6:	182d      	adds	r5, r5, r0
   223f8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   223fc:	e9c4 5704 	strd	r5, r7, [r4, #16]
   22400:	e7e9      	b.n	223d6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   22402:	1a52      	subs	r2, r2, r1
   22404:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   22408:	459c      	cmp	ip, r3
   2240a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2240e:	d0e7      	beq.n	223e0 <z_add_timeout+0x64>
   22410:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   22412:	2b00      	cmp	r3, #0
   22414:	d0e4      	beq.n	223e0 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   22416:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   2241a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2241e:	428a      	cmp	r2, r1
   22420:	eb75 0e07 	sbcs.w	lr, r5, r7
   22424:	daed      	bge.n	22402 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   22426:	1a8a      	subs	r2, r1, r2
   22428:	eb67 0505 	sbc.w	r5, r7, r5
   2242c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   22430:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22432:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22436:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22438:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2243a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2243c:	4283      	cmp	r3, r0
   2243e:	d00b      	beq.n	22458 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22440:	429c      	cmp	r4, r3
   22442:	d109      	bne.n	22458 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22444:	f7ff ff5a 	bl	222fc <next_timeout>

			if (next_time == 0 ||
   22448:	b118      	cbz	r0, 22452 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   2244a:	4b08      	ldr	r3, [pc, #32]	; (2246c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   2244c:	691b      	ldr	r3, [r3, #16]
   2244e:	4283      	cmp	r3, r0
   22450:	d002      	beq.n	22458 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   22452:	2100      	movs	r1, #0
   22454:	f7fc fd96 	bl	1ef84 <sys_clock_set_timeout>
	__asm__ volatile(
   22458:	f386 8811 	msr	BASEPRI, r6
   2245c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22462:	bf00      	nop
   22464:	20002540 	.word	0x20002540
   22468:	20000820 	.word	0x20000820
   2246c:	2000318c 	.word	0x2000318c

00022470 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22474:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22476:	f7ff fc5f 	bl	21d38 <z_time_slice>
	__asm__ volatile(
   2247a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2247e:	f3ef 8511 	mrs	r5, BASEPRI
   22482:	f383 8812 	msr	BASEPRI_MAX, r3
   22486:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2248a:	4f24      	ldr	r7, [pc, #144]	; (2251c <sys_clock_announce+0xac>)
	return list->head == list;
   2248c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 22520 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22490:	4e24      	ldr	r6, [pc, #144]	; (22524 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   22492:	603c      	str	r4, [r7, #0]
   22494:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22498:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2249a:	4540      	cmp	r0, r8
		curr_tick += dt;
   2249c:	e9d6 2e00 	ldrd	r2, lr, [r6]
   224a0:	ea4f 71e3 	mov.w	r1, r3, asr #31
   224a4:	d00b      	beq.n	224be <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   224a6:	b150      	cbz	r0, 224be <sys_clock_announce+0x4e>
   224a8:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   224ac:	42a3      	cmp	r3, r4
   224ae:	eb71 090c 	sbcs.w	r9, r1, ip
   224b2:	da16      	bge.n	224e2 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   224b4:	1ae4      	subs	r4, r4, r3
   224b6:	eb6c 0c01 	sbc.w	ip, ip, r1
   224ba:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   224be:	189b      	adds	r3, r3, r2
   224c0:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   224c4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   224c6:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   224ca:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   224cc:	f7ff ff16 	bl	222fc <next_timeout>
   224d0:	4621      	mov	r1, r4
   224d2:	f7fc fd57 	bl	1ef84 <sys_clock_set_timeout>
	__asm__ volatile(
   224d6:	f385 8811 	msr	BASEPRI, r5
   224da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   224de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   224e2:	18a2      	adds	r2, r4, r2
   224e4:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
   224e8:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   224ec:	2300      	movs	r3, #0
   224ee:	2200      	movs	r2, #0
   224f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   224f4:	f7ff ff28 	bl	22348 <remove_timeout>
   224f8:	f385 8811 	msr	BASEPRI, r5
   224fc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22500:	6883      	ldr	r3, [r0, #8]
   22502:	4798      	blx	r3
	__asm__ volatile(
   22504:	f04f 0340 	mov.w	r3, #64	; 0x40
   22508:	f3ef 8511 	mrs	r5, BASEPRI
   2250c:	f383 8812 	msr	BASEPRI_MAX, r3
   22510:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   22514:	683b      	ldr	r3, [r7, #0]
   22516:	1b1b      	subs	r3, r3, r4
   22518:	603b      	str	r3, [r7, #0]
   2251a:	e7bb      	b.n	22494 <sys_clock_announce+0x24>
   2251c:	200031c8 	.word	0x200031c8
   22520:	20000820 	.word	0x20000820
   22524:	20002540 	.word	0x20002540

00022528 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22528:	b510      	push	{r4, lr}
   2252a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2252e:	f3ef 8411 	mrs	r4, BASEPRI
   22532:	f383 8812 	msr	BASEPRI_MAX, r3
   22536:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2253a:	f7ff fed5 	bl	222e8 <elapsed>
   2253e:	4b06      	ldr	r3, [pc, #24]	; (22558 <sys_clock_tick_get+0x30>)
   22540:	4601      	mov	r1, r0
   22542:	e9d3 0300 	ldrd	r0, r3, [r3]
   22546:	1808      	adds	r0, r1, r0
   22548:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   2254c:	f384 8811 	msr	BASEPRI, r4
   22550:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22554:	bd10      	pop	{r4, pc}
   22556:	bf00      	nop
   22558:	20002540 	.word	0x20002540

0002255c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2255c:	b570      	push	{r4, r5, r6, lr}
   2255e:	4604      	mov	r4, r0
	__asm__ volatile(
   22560:	f04f 0340 	mov.w	r3, #64	; 0x40
   22564:	f3ef 8511 	mrs	r5, BASEPRI
   22568:	f383 8812 	msr	BASEPRI_MAX, r3
   2256c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22570:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   22574:	3301      	adds	r3, #1
   22576:	f142 0200 	adc.w	r2, r2, #0
   2257a:	2b02      	cmp	r3, #2
   2257c:	f172 0300 	sbcs.w	r3, r2, #0
   22580:	d322      	bcc.n	225c8 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   22582:	f008 fbef 	bl	2ad64 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22586:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2258a:	3001      	adds	r0, #1
   2258c:	f141 0100 	adc.w	r1, r1, #0
   22590:	18c0      	adds	r0, r0, r3
   22592:	eb41 0102 	adc.w	r1, r1, r2
   22596:	2801      	cmp	r0, #1
   22598:	f171 0300 	sbcs.w	r3, r1, #0
   2259c:	db32      	blt.n	22604 <z_timer_expiration_handler+0xa8>
   2259e:	f008 fbe1 	bl	2ad64 <z_impl_k_uptime_ticks>
   225a2:	3001      	adds	r0, #1
   225a4:	f141 0300 	adc.w	r3, r1, #0
   225a8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   225ac:	1880      	adds	r0, r0, r2
   225ae:	f06f 0201 	mvn.w	r2, #1
   225b2:	eb43 0301 	adc.w	r3, r3, r1
   225b6:	1a12      	subs	r2, r2, r0
   225b8:	f04f 31ff 	mov.w	r1, #4294967295
   225bc:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   225c0:	491a      	ldr	r1, [pc, #104]	; (2262c <z_timer_expiration_handler+0xd0>)
   225c2:	4620      	mov	r0, r4
   225c4:	f7ff feda 	bl	2237c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   225c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   225ca:	3301      	adds	r3, #1
   225cc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   225ce:	6a23      	ldr	r3, [r4, #32]
   225d0:	b173      	cbz	r3, 225f0 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   225d2:	f385 8811 	msr	BASEPRI, r5
   225d6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   225da:	6a23      	ldr	r3, [r4, #32]
   225dc:	4620      	mov	r0, r4
   225de:	4798      	blx	r3
	__asm__ volatile(
   225e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   225e4:	f3ef 8511 	mrs	r5, BASEPRI
   225e8:	f383 8812 	msr	BASEPRI_MAX, r3
   225ec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   225f0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225f4:	42a6      	cmp	r6, r4
   225f6:	d000      	beq.n	225fa <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   225f8:	b94e      	cbnz	r6, 2260e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   225fa:	f385 8811 	msr	BASEPRI, r5
   225fe:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   22602:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22604:	f06f 0201 	mvn.w	r2, #1
   22608:	f04f 33ff 	mov.w	r3, #4294967295
   2260c:	e7d8      	b.n	225c0 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   2260e:	4630      	mov	r0, r6
   22610:	f008 fa6e 	bl	2aaf0 <z_unpend_thread_no_timeout>
   22614:	2300      	movs	r3, #0
   22616:	67f3      	str	r3, [r6, #124]	; 0x7c
   22618:	f385 8811 	msr	BASEPRI, r5
   2261c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   22620:	4630      	mov	r0, r6
}
   22622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   22626:	f008 baa3 	b.w	2ab70 <z_ready_thread>
   2262a:	bf00      	nop
   2262c:	0002255d 	.word	0x0002255d

00022630 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22634:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22636:	f1b3 3fff 	cmp.w	r3, #4294967295
   2263a:	bf08      	it	eq
   2263c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   22640:	4606      	mov	r6, r0
   22642:	461c      	mov	r4, r3
   22644:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   22648:	4689      	mov	r9, r1
   2264a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2264c:	d03e      	beq.n	226cc <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2264e:	f1b0 3fff 	cmp.w	r0, #4294967295
   22652:	bf08      	it	eq
   22654:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22658:	4615      	mov	r5, r2
   2265a:	4607      	mov	r7, r0
   2265c:	d014      	beq.n	22688 <z_impl_k_timer_start+0x58>
   2265e:	ea50 0302 	orrs.w	r3, r0, r2
   22662:	d011      	beq.n	22688 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   22664:	f06f 0301 	mvn.w	r3, #1
   22668:	1a9b      	subs	r3, r3, r2
   2266a:	f04f 33ff 	mov.w	r3, #4294967295
   2266e:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22672:	2b00      	cmp	r3, #0
   22674:	da08      	bge.n	22688 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   22676:	2a02      	cmp	r2, #2
   22678:	f170 0300 	sbcs.w	r3, r0, #0
   2267c:	bfbc      	itt	lt
   2267e:	2502      	movlt	r5, #2
   22680:	2700      	movlt	r7, #0
   22682:	3d01      	subs	r5, #1
   22684:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22688:	f06f 0301 	mvn.w	r3, #1
   2268c:	1a5b      	subs	r3, r3, r1
   2268e:	f04f 33ff 	mov.w	r3, #4294967295
   22692:	eb63 0304 	sbc.w	r3, r3, r4
   22696:	2b00      	cmp	r3, #0
   22698:	da09      	bge.n	226ae <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2269a:	2901      	cmp	r1, #1
   2269c:	f174 0300 	sbcs.w	r3, r4, #0
   226a0:	bfbc      	itt	lt
   226a2:	2101      	movlt	r1, #1
   226a4:	2400      	movlt	r4, #0
   226a6:	f111 39ff 	adds.w	r9, r1, #4294967295
   226aa:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   226ae:	4630      	mov	r0, r6
   226b0:	f008 fb14 	bl	2acdc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   226b4:	2300      	movs	r3, #0
   226b6:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   226b8:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   226bc:	464a      	mov	r2, r9
   226be:	4643      	mov	r3, r8
   226c0:	4630      	mov	r0, r6
   226c2:	4903      	ldr	r1, [pc, #12]	; (226d0 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   226c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   226c8:	f7ff be58 	b.w	2237c <z_add_timeout>
}
   226cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   226d0:	0002255d 	.word	0x0002255d

000226d4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   226d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   226d8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   226da:	4b29      	ldr	r3, [pc, #164]	; (22780 <z_impl_k_poll+0xac>)
   226dc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   226de:	2301      	movs	r3, #1
   226e0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   226e4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   226e8:	ea52 0305 	orrs.w	r3, r2, r5
{
   226ec:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   226ee:	bf0c      	ite	eq
   226f0:	2301      	moveq	r3, #1
   226f2:	2300      	movne	r3, #0
   226f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   226f8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   226fa:	f008 fbbc 	bl	2ae76 <register_events>
   226fe:	4681      	mov	r9, r0
	__asm__ volatile(
   22700:	f04f 0340 	mov.w	r3, #64	; 0x40
   22704:	f3ef 8a11 	mrs	sl, BASEPRI
   22708:	f383 8812 	msr	BASEPRI_MAX, r3
   2270c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22710:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   22714:	b964      	cbnz	r4, 22730 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   22716:	4601      	mov	r1, r0
   22718:	4652      	mov	r2, sl
   2271a:	4640      	mov	r0, r8
   2271c:	f008 fc7c 	bl	2b018 <clear_event_registrations>
	__asm__ volatile(
   22720:	f38a 8811 	msr	BASEPRI, sl
   22724:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22728:	4620      	mov	r0, r4
   2272a:	b002      	add	sp, #8
   2272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   22730:	2300      	movs	r3, #0
   22732:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22736:	ea56 0305 	orrs.w	r3, r6, r5
   2273a:	d106      	bne.n	2274a <z_impl_k_poll+0x76>
   2273c:	f38a 8811 	msr	BASEPRI, sl
   22740:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22744:	f06f 040a 	mvn.w	r4, #10
   22748:	e7ee      	b.n	22728 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2274a:	e9cd 6500 	strd	r6, r5, [sp]
   2274e:	4a0d      	ldr	r2, [pc, #52]	; (22784 <z_impl_k_poll+0xb0>)
   22750:	480d      	ldr	r0, [pc, #52]	; (22788 <z_impl_k_poll+0xb4>)
   22752:	4651      	mov	r1, sl
   22754:	f7ff fbc4 	bl	21ee0 <z_pend_curr>
   22758:	4604      	mov	r4, r0
	__asm__ volatile(
   2275a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2275e:	f3ef 8511 	mrs	r5, BASEPRI
   22762:	f383 8812 	msr	BASEPRI_MAX, r3
   22766:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2276a:	462a      	mov	r2, r5
   2276c:	4649      	mov	r1, r9
   2276e:	4640      	mov	r0, r8
   22770:	f008 fc52 	bl	2b018 <clear_event_registrations>
	__asm__ volatile(
   22774:	f385 8811 	msr	BASEPRI, r5
   22778:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2277c:	e7d4      	b.n	22728 <z_impl_k_poll+0x54>
   2277e:	bf00      	nop
   22780:	2000318c 	.word	0x2000318c
   22784:	20000828 	.word	0x20000828
   22788:	200049c5 	.word	0x200049c5

0002278c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2278c:	b538      	push	{r3, r4, r5, lr}
   2278e:	4603      	mov	r3, r0
	__asm__ volatile(
   22790:	f04f 0240 	mov.w	r2, #64	; 0x40
   22794:	f3ef 8511 	mrs	r5, BASEPRI
   22798:	f382 8812 	msr	BASEPRI_MAX, r2
   2279c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   227a0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   227a2:	2101      	movs	r1, #1
   227a4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   227a6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   227a8:	4283      	cmp	r3, r0
   227aa:	d106      	bne.n	227ba <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   227ac:	f385 8811 	msr	BASEPRI, r5
   227b0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   227b4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   227b6:	4620      	mov	r0, r4
   227b8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   227ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   227be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   227c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   227c2:	2300      	movs	r3, #0
	node->prev = NULL;
   227c4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   227c8:	f008 fbcc 	bl	2af64 <signal_poll_event>
	z_reschedule(&lock, key);
   227cc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   227ce:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   227d0:	4801      	ldr	r0, [pc, #4]	; (227d8 <z_impl_k_poll_signal_raise+0x4c>)
   227d2:	f7ff fa31 	bl	21c38 <z_reschedule>
	return rc;
   227d6:	e7ee      	b.n	227b6 <z_impl_k_poll_signal_raise+0x2a>
   227d8:	200049c5 	.word	0x200049c5

000227dc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   227dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   227de:	4606      	mov	r6, r0
   227e0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   227e2:	f007 ff68 	bl	2a6b6 <k_is_in_isr>
   227e6:	b978      	cbnz	r0, 22808 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   227e8:	4b0b      	ldr	r3, [pc, #44]	; (22818 <z_thread_aligned_alloc+0x3c>)
   227ea:	689b      	ldr	r3, [r3, #8]
   227ec:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   227ee:	b17c      	cbz	r4, 22810 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   227f0:	1d2a      	adds	r2, r5, #4
   227f2:	d209      	bcs.n	22808 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   227f4:	2000      	movs	r0, #0
   227f6:	2100      	movs	r1, #0
   227f8:	e9cd 0100 	strd	r0, r1, [sp]
   227fc:	f046 0104 	orr.w	r1, r6, #4
   22800:	4620      	mov	r0, r4
   22802:	f007 feb6 	bl	2a572 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22806:	b908      	cbnz	r0, 2280c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22808:	2400      	movs	r4, #0
	}

	return ret;
   2280a:	e001      	b.n	22810 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   2280c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2280e:	1d04      	adds	r4, r0, #4
}
   22810:	4620      	mov	r0, r4
   22812:	b002      	add	sp, #8
   22814:	bd70      	pop	{r4, r5, r6, pc}
   22816:	bf00      	nop
   22818:	2000318c 	.word	0x2000318c

0002281c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2281c:	4a02      	ldr	r2, [pc, #8]	; (22828 <boot_banner+0xc>)
   2281e:	4903      	ldr	r1, [pc, #12]	; (2282c <boot_banner+0x10>)
   22820:	4803      	ldr	r0, [pc, #12]	; (22830 <boot_banner+0x14>)
   22822:	f003 bee4 	b.w	265ee <printk>
   22826:	bf00      	nop
   22828:	0002c42f 	.word	0x0002c42f
   2282c:	0002eb25 	.word	0x0002eb25
   22830:	0002eb34 	.word	0x0002eb34

00022834 <ocrypto_ecdh_p256_public_key>:
   22834:	b530      	push	{r4, r5, lr}
   22836:	b099      	sub	sp, #100	; 0x64
   22838:	4605      	mov	r5, r0
   2283a:	4668      	mov	r0, sp
   2283c:	f000 f828 	bl	22890 <ocrypto_sc_p256_from32bytes>
   22840:	4669      	mov	r1, sp
   22842:	4604      	mov	r4, r0
   22844:	a808      	add	r0, sp, #32
   22846:	f000 fa53 	bl	22cf0 <ocrypto_curve_p256_scalarmult_base>
   2284a:	a908      	add	r1, sp, #32
   2284c:	4304      	orrs	r4, r0
   2284e:	4628      	mov	r0, r5
   22850:	f000 f98a 	bl	22b68 <ocrypto_curve_p256_to64bytes>
   22854:	4620      	mov	r0, r4
   22856:	b019      	add	sp, #100	; 0x64
   22858:	bd30      	pop	{r4, r5, pc}
   2285a:	bf00      	nop

0002285c <ocrypto_ecdh_p256_common_secret>:
   2285c:	b570      	push	{r4, r5, r6, lr}
   2285e:	b098      	sub	sp, #96	; 0x60
   22860:	4605      	mov	r5, r0
   22862:	4668      	mov	r0, sp
   22864:	4616      	mov	r6, r2
   22866:	f000 f813 	bl	22890 <ocrypto_sc_p256_from32bytes>
   2286a:	4631      	mov	r1, r6
   2286c:	4604      	mov	r4, r0
   2286e:	a808      	add	r0, sp, #32
   22870:	f000 f946 	bl	22b00 <ocrypto_curve_p256_from64bytes>
   22874:	a908      	add	r1, sp, #32
   22876:	466a      	mov	r2, sp
   22878:	4304      	orrs	r4, r0
   2287a:	4608      	mov	r0, r1
   2287c:	f000 f982 	bl	22b84 <ocrypto_curve_p256_scalarmult>
   22880:	a908      	add	r1, sp, #32
   22882:	4304      	orrs	r4, r0
   22884:	4628      	mov	r0, r5
   22886:	f000 f96d 	bl	22b64 <ocrypto_curve_p256_to32bytes>
   2288a:	4620      	mov	r0, r4
   2288c:	b018      	add	sp, #96	; 0x60
   2288e:	bd70      	pop	{r4, r5, r6, pc}

00022890 <ocrypto_sc_p256_from32bytes>:
   22890:	b570      	push	{r4, r5, r6, lr}
   22892:	680b      	ldr	r3, [r1, #0]
   22894:	4e12      	ldr	r6, [pc, #72]	; (228e0 <ocrypto_sc_p256_from32bytes+0x50>)
   22896:	ba1b      	rev	r3, r3
   22898:	61c3      	str	r3, [r0, #28]
   2289a:	684b      	ldr	r3, [r1, #4]
   2289c:	ba1b      	rev	r3, r3
   2289e:	6183      	str	r3, [r0, #24]
   228a0:	688b      	ldr	r3, [r1, #8]
   228a2:	ba1b      	rev	r3, r3
   228a4:	6143      	str	r3, [r0, #20]
   228a6:	68cb      	ldr	r3, [r1, #12]
   228a8:	ba1b      	rev	r3, r3
   228aa:	6103      	str	r3, [r0, #16]
   228ac:	690b      	ldr	r3, [r1, #16]
   228ae:	ba1b      	rev	r3, r3
   228b0:	60c3      	str	r3, [r0, #12]
   228b2:	694b      	ldr	r3, [r1, #20]
   228b4:	ba1b      	rev	r3, r3
   228b6:	6083      	str	r3, [r0, #8]
   228b8:	698b      	ldr	r3, [r1, #24]
   228ba:	ba1b      	rev	r3, r3
   228bc:	6043      	str	r3, [r0, #4]
   228be:	69cb      	ldr	r3, [r1, #28]
   228c0:	ba1b      	rev	r3, r3
   228c2:	4632      	mov	r2, r6
   228c4:	6003      	str	r3, [r0, #0]
   228c6:	4601      	mov	r1, r0
   228c8:	4604      	mov	r4, r0
   228ca:	f7dd ff6d 	bl	7a8 <ocrypto_bigint_sub256>
   228ce:	4631      	mov	r1, r6
   228d0:	4605      	mov	r5, r0
   228d2:	4602      	mov	r2, r0
   228d4:	4620      	mov	r0, r4
   228d6:	f7dd ff87 	bl	7e8 <ocrypto_bigint_cadd256>
   228da:	1e68      	subs	r0, r5, #1
   228dc:	bd70      	pop	{r4, r5, r6, pc}
   228de:	bf00      	nop
   228e0:	0002c178 	.word	0x0002c178

000228e4 <p256_zdblu>:
   228e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228e8:	b088      	sub	sp, #32
   228ea:	460c      	mov	r4, r1
   228ec:	4606      	mov	r6, r0
   228ee:	f102 0120 	add.w	r1, r2, #32
   228f2:	4668      	mov	r0, sp
   228f4:	f106 0720 	add.w	r7, r6, #32
   228f8:	4690      	mov	r8, r2
   228fa:	f7de fa5f 	bl	dbc <ocrypto_mod_p256_sqr>
   228fe:	466a      	mov	r2, sp
   22900:	4669      	mov	r1, sp
   22902:	4668      	mov	r0, sp
   22904:	f7de f96c 	bl	be0 <ocrypto_mod_p256_add>
   22908:	4669      	mov	r1, sp
   2290a:	4638      	mov	r0, r7
   2290c:	f7de fa56 	bl	dbc <ocrypto_mod_p256_sqr>
   22910:	463a      	mov	r2, r7
   22912:	4639      	mov	r1, r7
   22914:	4638      	mov	r0, r7
   22916:	f104 0520 	add.w	r5, r4, #32
   2291a:	f7de f961 	bl	be0 <ocrypto_mod_p256_add>
   2291e:	466a      	mov	r2, sp
   22920:	4669      	mov	r1, sp
   22922:	4668      	mov	r0, sp
   22924:	f7de f95c 	bl	be0 <ocrypto_mod_p256_add>
   22928:	4641      	mov	r1, r8
   2292a:	4628      	mov	r0, r5
   2292c:	f7de fa46 	bl	dbc <ocrypto_mod_p256_sqr>
   22930:	466a      	mov	r2, sp
   22932:	4641      	mov	r1, r8
   22934:	4630      	mov	r0, r6
   22936:	f7de fa29 	bl	d8c <ocrypto_mod_p256_mul>
   2293a:	462a      	mov	r2, r5
   2293c:	4629      	mov	r1, r5
   2293e:	4668      	mov	r0, sp
   22940:	f7de f94e 	bl	be0 <ocrypto_mod_p256_add>
   22944:	462a      	mov	r2, r5
   22946:	4669      	mov	r1, sp
   22948:	4668      	mov	r0, sp
   2294a:	f7de f949 	bl	be0 <ocrypto_mod_p256_add>
   2294e:	4a12      	ldr	r2, [pc, #72]	; (22998 <p256_zdblu+0xb4>)
   22950:	4669      	mov	r1, sp
   22952:	4668      	mov	r0, sp
   22954:	f7de f944 	bl	be0 <ocrypto_mod_p256_add>
   22958:	4669      	mov	r1, sp
   2295a:	4620      	mov	r0, r4
   2295c:	f7de fa2e 	bl	dbc <ocrypto_mod_p256_sqr>
   22960:	4632      	mov	r2, r6
   22962:	4621      	mov	r1, r4
   22964:	4620      	mov	r0, r4
   22966:	f7de f979 	bl	c5c <ocrypto_mod_p256_sub>
   2296a:	4632      	mov	r2, r6
   2296c:	4621      	mov	r1, r4
   2296e:	4620      	mov	r0, r4
   22970:	f7de f974 	bl	c5c <ocrypto_mod_p256_sub>
   22974:	4622      	mov	r2, r4
   22976:	4631      	mov	r1, r6
   22978:	4628      	mov	r0, r5
   2297a:	f7de f96f 	bl	c5c <ocrypto_mod_p256_sub>
   2297e:	466a      	mov	r2, sp
   22980:	4629      	mov	r1, r5
   22982:	4628      	mov	r0, r5
   22984:	f7de fa02 	bl	d8c <ocrypto_mod_p256_mul>
   22988:	463a      	mov	r2, r7
   2298a:	4629      	mov	r1, r5
   2298c:	4628      	mov	r0, r5
   2298e:	f7de f965 	bl	c5c <ocrypto_mod_p256_sub>
   22992:	b008      	add	sp, #32
   22994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22998:	0002c218 	.word	0x0002c218

0002299c <p256_zaddc>:
   2299c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2299e:	b099      	sub	sp, #100	; 0x64
   229a0:	4604      	mov	r4, r0
   229a2:	460d      	mov	r5, r1
   229a4:	460a      	mov	r2, r1
   229a6:	4601      	mov	r1, r0
   229a8:	4668      	mov	r0, sp
   229aa:	f7de f957 	bl	c5c <ocrypto_mod_p256_sub>
   229ae:	4669      	mov	r1, sp
   229b0:	4668      	mov	r0, sp
   229b2:	f7de fa03 	bl	dbc <ocrypto_mod_p256_sqr>
   229b6:	466a      	mov	r2, sp
   229b8:	4621      	mov	r1, r4
   229ba:	a808      	add	r0, sp, #32
   229bc:	f105 0620 	add.w	r6, r5, #32
   229c0:	f104 0720 	add.w	r7, r4, #32
   229c4:	f7de f9e2 	bl	d8c <ocrypto_mod_p256_mul>
   229c8:	466a      	mov	r2, sp
   229ca:	4629      	mov	r1, r5
   229cc:	4668      	mov	r0, sp
   229ce:	f7de f9dd 	bl	d8c <ocrypto_mod_p256_mul>
   229d2:	4632      	mov	r2, r6
   229d4:	4639      	mov	r1, r7
   229d6:	a810      	add	r0, sp, #64	; 0x40
   229d8:	f7de f902 	bl	be0 <ocrypto_mod_p256_add>
   229dc:	4632      	mov	r2, r6
   229de:	4639      	mov	r1, r7
   229e0:	4630      	mov	r0, r6
   229e2:	f7de f93b 	bl	c5c <ocrypto_mod_p256_sub>
   229e6:	4631      	mov	r1, r6
   229e8:	4628      	mov	r0, r5
   229ea:	f7de f9e7 	bl	dbc <ocrypto_mod_p256_sqr>
   229ee:	466a      	mov	r2, sp
   229f0:	a908      	add	r1, sp, #32
   229f2:	4620      	mov	r0, r4
   229f4:	f7de f8f4 	bl	be0 <ocrypto_mod_p256_add>
   229f8:	4622      	mov	r2, r4
   229fa:	4629      	mov	r1, r5
   229fc:	4628      	mov	r0, r5
   229fe:	f7de f92d 	bl	c5c <ocrypto_mod_p256_sub>
   22a02:	466a      	mov	r2, sp
   22a04:	a908      	add	r1, sp, #32
   22a06:	4668      	mov	r0, sp
   22a08:	f7de f928 	bl	c5c <ocrypto_mod_p256_sub>
   22a0c:	466a      	mov	r2, sp
   22a0e:	4639      	mov	r1, r7
   22a10:	4638      	mov	r0, r7
   22a12:	f7de f9bb 	bl	d8c <ocrypto_mod_p256_mul>
   22a16:	462a      	mov	r2, r5
   22a18:	a908      	add	r1, sp, #32
   22a1a:	4668      	mov	r0, sp
   22a1c:	f7de f91e 	bl	c5c <ocrypto_mod_p256_sub>
   22a20:	466a      	mov	r2, sp
   22a22:	4631      	mov	r1, r6
   22a24:	4630      	mov	r0, r6
   22a26:	f7de f9b1 	bl	d8c <ocrypto_mod_p256_mul>
   22a2a:	463a      	mov	r2, r7
   22a2c:	4631      	mov	r1, r6
   22a2e:	4630      	mov	r0, r6
   22a30:	f7de f914 	bl	c5c <ocrypto_mod_p256_sub>
   22a34:	a910      	add	r1, sp, #64	; 0x40
   22a36:	4668      	mov	r0, sp
   22a38:	f7de f9c0 	bl	dbc <ocrypto_mod_p256_sqr>
   22a3c:	4622      	mov	r2, r4
   22a3e:	4669      	mov	r1, sp
   22a40:	4620      	mov	r0, r4
   22a42:	f7de f90b 	bl	c5c <ocrypto_mod_p256_sub>
   22a46:	a908      	add	r1, sp, #32
   22a48:	4622      	mov	r2, r4
   22a4a:	4608      	mov	r0, r1
   22a4c:	f7de f906 	bl	c5c <ocrypto_mod_p256_sub>
   22a50:	a910      	add	r1, sp, #64	; 0x40
   22a52:	aa08      	add	r2, sp, #32
   22a54:	4608      	mov	r0, r1
   22a56:	f7de f999 	bl	d8c <ocrypto_mod_p256_mul>
   22a5a:	463a      	mov	r2, r7
   22a5c:	a910      	add	r1, sp, #64	; 0x40
   22a5e:	4638      	mov	r0, r7
   22a60:	f7de f8fc 	bl	c5c <ocrypto_mod_p256_sub>
   22a64:	b019      	add	sp, #100	; 0x64
   22a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022a68 <p256_zaddu>:
   22a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a6c:	b088      	sub	sp, #32
   22a6e:	460c      	mov	r4, r1
   22a70:	4605      	mov	r5, r0
   22a72:	4690      	mov	r8, r2
   22a74:	460a      	mov	r2, r1
   22a76:	4601      	mov	r1, r0
   22a78:	4668      	mov	r0, sp
   22a7a:	f7de f8ef 	bl	c5c <ocrypto_mod_p256_sub>
   22a7e:	4669      	mov	r1, sp
   22a80:	4668      	mov	r0, sp
   22a82:	f7de f99b 	bl	dbc <ocrypto_mod_p256_sqr>
   22a86:	466a      	mov	r2, sp
   22a88:	4629      	mov	r1, r5
   22a8a:	4628      	mov	r0, r5
   22a8c:	f104 0620 	add.w	r6, r4, #32
   22a90:	f7de f97c 	bl	d8c <ocrypto_mod_p256_mul>
   22a94:	f105 0720 	add.w	r7, r5, #32
   22a98:	466a      	mov	r2, sp
   22a9a:	4621      	mov	r1, r4
   22a9c:	4668      	mov	r0, sp
   22a9e:	f7de f975 	bl	d8c <ocrypto_mod_p256_mul>
   22aa2:	4632      	mov	r2, r6
   22aa4:	4639      	mov	r1, r7
   22aa6:	4630      	mov	r0, r6
   22aa8:	f7de f8d8 	bl	c5c <ocrypto_mod_p256_sub>
   22aac:	4631      	mov	r1, r6
   22aae:	4620      	mov	r0, r4
   22ab0:	f7de f984 	bl	dbc <ocrypto_mod_p256_sqr>
   22ab4:	462a      	mov	r2, r5
   22ab6:	4621      	mov	r1, r4
   22ab8:	4620      	mov	r0, r4
   22aba:	f7de f8cf 	bl	c5c <ocrypto_mod_p256_sub>
   22abe:	466a      	mov	r2, sp
   22ac0:	4621      	mov	r1, r4
   22ac2:	4620      	mov	r0, r4
   22ac4:	f7de f8ca 	bl	c5c <ocrypto_mod_p256_sub>
   22ac8:	466a      	mov	r2, sp
   22aca:	4629      	mov	r1, r5
   22acc:	4640      	mov	r0, r8
   22ace:	f7de f8c5 	bl	c5c <ocrypto_mod_p256_sub>
   22ad2:	4642      	mov	r2, r8
   22ad4:	4639      	mov	r1, r7
   22ad6:	4638      	mov	r0, r7
   22ad8:	f7de f958 	bl	d8c <ocrypto_mod_p256_mul>
   22adc:	4622      	mov	r2, r4
   22ade:	4629      	mov	r1, r5
   22ae0:	4668      	mov	r0, sp
   22ae2:	f7de f8bb 	bl	c5c <ocrypto_mod_p256_sub>
   22ae6:	466a      	mov	r2, sp
   22ae8:	4631      	mov	r1, r6
   22aea:	4630      	mov	r0, r6
   22aec:	f7de f94e 	bl	d8c <ocrypto_mod_p256_mul>
   22af0:	463a      	mov	r2, r7
   22af2:	4631      	mov	r1, r6
   22af4:	4630      	mov	r0, r6
   22af6:	f7de f8b1 	bl	c5c <ocrypto_mod_p256_sub>
   22afa:	b008      	add	sp, #32
   22afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022b00 <ocrypto_curve_p256_from64bytes>:
   22b00:	b570      	push	{r4, r5, r6, lr}
   22b02:	f100 0620 	add.w	r6, r0, #32
   22b06:	b090      	sub	sp, #64	; 0x40
   22b08:	460d      	mov	r5, r1
   22b0a:	4604      	mov	r4, r0
   22b0c:	f000 f914 	bl	22d38 <ocrypto_mod_p256_from_bytes>
   22b10:	f105 0120 	add.w	r1, r5, #32
   22b14:	4630      	mov	r0, r6
   22b16:	f000 f90f 	bl	22d38 <ocrypto_mod_p256_from_bytes>
   22b1a:	4621      	mov	r1, r4
   22b1c:	a808      	add	r0, sp, #32
   22b1e:	f7de f94d 	bl	dbc <ocrypto_mod_p256_sqr>
   22b22:	a908      	add	r1, sp, #32
   22b24:	4608      	mov	r0, r1
   22b26:	4a0d      	ldr	r2, [pc, #52]	; (22b5c <ocrypto_curve_p256_from64bytes+0x5c>)
   22b28:	f7de f85a 	bl	be0 <ocrypto_mod_p256_add>
   22b2c:	a908      	add	r1, sp, #32
   22b2e:	4622      	mov	r2, r4
   22b30:	4608      	mov	r0, r1
   22b32:	f7de f92b 	bl	d8c <ocrypto_mod_p256_mul>
   22b36:	a908      	add	r1, sp, #32
   22b38:	4a09      	ldr	r2, [pc, #36]	; (22b60 <ocrypto_curve_p256_from64bytes+0x60>)
   22b3a:	4608      	mov	r0, r1
   22b3c:	f7de f850 	bl	be0 <ocrypto_mod_p256_add>
   22b40:	4631      	mov	r1, r6
   22b42:	4668      	mov	r0, sp
   22b44:	f7de f93a 	bl	dbc <ocrypto_mod_p256_sqr>
   22b48:	2220      	movs	r2, #32
   22b4a:	4669      	mov	r1, sp
   22b4c:	eb0d 0002 	add.w	r0, sp, r2
   22b50:	f7de f818 	bl	b84 <ocrypto_constant_time_equal>
   22b54:	3801      	subs	r0, #1
   22b56:	b010      	add	sp, #64	; 0x40
   22b58:	bd70      	pop	{r4, r5, r6, pc}
   22b5a:	bf00      	nop
   22b5c:	0002c218 	.word	0x0002c218
   22b60:	0002c238 	.word	0x0002c238

00022b64 <ocrypto_curve_p256_to32bytes>:
   22b64:	f000 b902 	b.w	22d6c <ocrypto_mod_p256_to_bytes>

00022b68 <ocrypto_curve_p256_to64bytes>:
   22b68:	b538      	push	{r3, r4, r5, lr}
   22b6a:	4604      	mov	r4, r0
   22b6c:	460d      	mov	r5, r1
   22b6e:	f000 f8fd 	bl	22d6c <ocrypto_mod_p256_to_bytes>
   22b72:	f105 0120 	add.w	r1, r5, #32
   22b76:	f104 0020 	add.w	r0, r4, #32
   22b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22b7e:	f000 b8f5 	b.w	22d6c <ocrypto_mod_p256_to_bytes>
   22b82:	bf00      	nop

00022b84 <ocrypto_curve_p256_scalarmult>:
   22b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22b88:	4613      	mov	r3, r2
   22b8a:	b0b8      	sub	sp, #224	; 0xe0
   22b8c:	4a54      	ldr	r2, [pc, #336]	; (22ce0 <ocrypto_curve_p256_scalarmult+0x15c>)
   22b8e:	4689      	mov	r9, r1
   22b90:	4680      	mov	r8, r0
   22b92:	4619      	mov	r1, r3
   22b94:	a810      	add	r0, sp, #64	; 0x40
   22b96:	f7dd fe07 	bl	7a8 <ocrypto_bigint_sub256>
   22b9a:	4952      	ldr	r1, [pc, #328]	; (22ce4 <ocrypto_curve_p256_scalarmult+0x160>)
   22b9c:	4602      	mov	r2, r0
   22b9e:	a810      	add	r0, sp, #64	; 0x40
   22ba0:	f7dd fe22 	bl	7e8 <ocrypto_bigint_cadd256>
   22ba4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   22ba6:	494e      	ldr	r1, [pc, #312]	; (22ce0 <ocrypto_curve_p256_scalarmult+0x15c>)
   22ba8:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   22bac:	4607      	mov	r7, r0
   22bae:	f1c6 0201 	rsb	r2, r6, #1
   22bb2:	a810      	add	r0, sp, #64	; 0x40
   22bb4:	f7dd fe18 	bl	7e8 <ocrypto_bigint_cadd256>
   22bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22bba:	464a      	mov	r2, r9
   22bbc:	ea6f 0a03 	mvn.w	sl, r3
   22bc0:	a928      	add	r1, sp, #160	; 0xa0
   22bc2:	a818      	add	r0, sp, #96	; 0x60
   22bc4:	f7ff fe8e 	bl	228e4 <p256_zdblu>
   22bc8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   22bcc:	a920      	add	r1, sp, #128	; 0x80
   22bce:	f1ca 0201 	rsb	r2, sl, #1
   22bd2:	4608      	mov	r0, r1
   22bd4:	f000 f892 	bl	22cfc <ocrypto_mod_p256_cneg>
   22bd8:	f1c7 0701 	rsb	r7, r7, #1
   22bdc:	24fe      	movs	r4, #254	; 0xfe
   22bde:	466a      	mov	r2, sp
   22be0:	a918      	add	r1, sp, #96	; 0x60
   22be2:	a828      	add	r0, sp, #160	; 0xa0
   22be4:	f7ff ff40 	bl	22a68 <p256_zaddu>
   22be8:	1162      	asrs	r2, r4, #5
   22bea:	ab38      	add	r3, sp, #224	; 0xe0
   22bec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22bf0:	f004 011f 	and.w	r1, r4, #31
   22bf4:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   22bf8:	40cb      	lsrs	r3, r1
   22bfa:	4655      	mov	r5, sl
   22bfc:	f003 0a01 	and.w	sl, r3, #1
   22c00:	ea8a 0505 	eor.w	r5, sl, r5
   22c04:	462a      	mov	r2, r5
   22c06:	a928      	add	r1, sp, #160	; 0xa0
   22c08:	a818      	add	r0, sp, #96	; 0x60
   22c0a:	f7dd fe49 	bl	8a0 <ocrypto_bigint_cswap256>
   22c0e:	462a      	mov	r2, r5
   22c10:	a930      	add	r1, sp, #192	; 0xc0
   22c12:	a820      	add	r0, sp, #128	; 0x80
   22c14:	f7dd fe44 	bl	8a0 <ocrypto_bigint_cswap256>
   22c18:	3c01      	subs	r4, #1
   22c1a:	a928      	add	r1, sp, #160	; 0xa0
   22c1c:	a818      	add	r0, sp, #96	; 0x60
   22c1e:	f7ff febd 	bl	2299c <p256_zaddc>
   22c22:	1c63      	adds	r3, r4, #1
   22c24:	d1db      	bne.n	22bde <ocrypto_curve_p256_scalarmult+0x5a>
   22c26:	f1ca 0201 	rsb	r2, sl, #1
   22c2a:	a920      	add	r1, sp, #128	; 0x80
   22c2c:	a808      	add	r0, sp, #32
   22c2e:	f000 f865 	bl	22cfc <ocrypto_mod_p256_cneg>
   22c32:	ea86 060a 	eor.w	r6, r6, sl
   22c36:	466a      	mov	r2, sp
   22c38:	a918      	add	r1, sp, #96	; 0x60
   22c3a:	a828      	add	r0, sp, #160	; 0xa0
   22c3c:	f7ff ff14 	bl	22a68 <p256_zaddu>
   22c40:	a928      	add	r1, sp, #160	; 0xa0
   22c42:	4632      	mov	r2, r6
   22c44:	a818      	add	r0, sp, #96	; 0x60
   22c46:	f7dd fe2b 	bl	8a0 <ocrypto_bigint_cswap256>
   22c4a:	4632      	mov	r2, r6
   22c4c:	a930      	add	r1, sp, #192	; 0xc0
   22c4e:	a820      	add	r0, sp, #128	; 0x80
   22c50:	f7dd fe26 	bl	8a0 <ocrypto_bigint_cswap256>
   22c54:	a908      	add	r1, sp, #32
   22c56:	466a      	mov	r2, sp
   22c58:	4608      	mov	r0, r1
   22c5a:	f7de f897 	bl	d8c <ocrypto_mod_p256_mul>
   22c5e:	a908      	add	r1, sp, #32
   22c60:	4608      	mov	r0, r1
   22c62:	f000 f89d 	bl	22da0 <ocrypto_mod_p256_inv>
   22c66:	a908      	add	r1, sp, #32
   22c68:	f108 0420 	add.w	r4, r8, #32
   22c6c:	f109 0220 	add.w	r2, r9, #32
   22c70:	4608      	mov	r0, r1
   22c72:	f7de f88b 	bl	d8c <ocrypto_mod_p256_mul>
   22c76:	a920      	add	r1, sp, #128	; 0x80
   22c78:	aa08      	add	r2, sp, #32
   22c7a:	4620      	mov	r0, r4
   22c7c:	f7de f886 	bl	d8c <ocrypto_mod_p256_mul>
   22c80:	aa08      	add	r2, sp, #32
   22c82:	a918      	add	r1, sp, #96	; 0x60
   22c84:	4668      	mov	r0, sp
   22c86:	f7de f881 	bl	d8c <ocrypto_mod_p256_mul>
   22c8a:	4669      	mov	r1, sp
   22c8c:	4668      	mov	r0, sp
   22c8e:	f7de f895 	bl	dbc <ocrypto_mod_p256_sqr>
   22c92:	aa18      	add	r2, sp, #96	; 0x60
   22c94:	4669      	mov	r1, sp
   22c96:	a808      	add	r0, sp, #32
   22c98:	f7de f878 	bl	d8c <ocrypto_mod_p256_mul>
   22c9c:	4621      	mov	r1, r4
   22c9e:	4668      	mov	r0, sp
   22ca0:	f7de f88c 	bl	dbc <ocrypto_mod_p256_sqr>
   22ca4:	aa08      	add	r2, sp, #32
   22ca6:	4669      	mov	r1, sp
   22ca8:	4610      	mov	r0, r2
   22caa:	f7dd ffd7 	bl	c5c <ocrypto_mod_p256_sub>
   22cae:	4a0e      	ldr	r2, [pc, #56]	; (22ce8 <ocrypto_curve_p256_scalarmult+0x164>)
   22cb0:	a908      	add	r1, sp, #32
   22cb2:	4668      	mov	r0, sp
   22cb4:	f7dd ffd2 	bl	c5c <ocrypto_mod_p256_sub>
   22cb8:	4620      	mov	r0, r4
   22cba:	2120      	movs	r1, #32
   22cbc:	f7dd ff76 	bl	bac <ocrypto_constant_time_is_zero>
   22cc0:	a908      	add	r1, sp, #32
   22cc2:	4243      	negs	r3, r0
   22cc4:	4602      	mov	r2, r0
   22cc6:	4668      	mov	r0, sp
   22cc8:	431f      	orrs	r7, r3
   22cca:	f7dd fde9 	bl	8a0 <ocrypto_bigint_cswap256>
   22cce:	4640      	mov	r0, r8
   22cd0:	4a06      	ldr	r2, [pc, #24]	; (22cec <ocrypto_curve_p256_scalarmult+0x168>)
   22cd2:	4669      	mov	r1, sp
   22cd4:	f7de f85a 	bl	d8c <ocrypto_mod_p256_mul>
   22cd8:	4638      	mov	r0, r7
   22cda:	b038      	add	sp, #224	; 0xe0
   22cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22ce0:	0002c258 	.word	0x0002c258
   22ce4:	0002c1d8 	.word	0x0002c1d8
   22ce8:	0002c238 	.word	0x0002c238
   22cec:	0002c1f8 	.word	0x0002c1f8

00022cf0 <ocrypto_curve_p256_scalarmult_base>:
   22cf0:	460a      	mov	r2, r1
   22cf2:	4901      	ldr	r1, [pc, #4]	; (22cf8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   22cf4:	f7ff bf46 	b.w	22b84 <ocrypto_curve_p256_scalarmult>
   22cf8:	0002c198 	.word	0x0002c198

00022cfc <ocrypto_mod_p256_cneg>:
   22cfc:	b570      	push	{r4, r5, r6, lr}
   22cfe:	b088      	sub	sp, #32
   22d00:	4604      	mov	r4, r0
   22d02:	460d      	mov	r5, r1
   22d04:	4616      	mov	r6, r2
   22d06:	2100      	movs	r1, #0
   22d08:	2220      	movs	r2, #32
   22d0a:	4668      	mov	r0, sp
   22d0c:	f004 fd9a 	bl	27844 <memset>
   22d10:	2300      	movs	r3, #0
   22d12:	4629      	mov	r1, r5
   22d14:	2220      	movs	r2, #32
   22d16:	4620      	mov	r0, r4
   22d18:	9300      	str	r3, [sp, #0]
   22d1a:	f004 fd88 	bl	2782e <memcpy>
   22d1e:	462a      	mov	r2, r5
   22d20:	4669      	mov	r1, sp
   22d22:	4668      	mov	r0, sp
   22d24:	f7dd ff9a 	bl	c5c <ocrypto_mod_p256_sub>
   22d28:	4632      	mov	r2, r6
   22d2a:	4669      	mov	r1, sp
   22d2c:	4620      	mov	r0, r4
   22d2e:	f7dd fdb7 	bl	8a0 <ocrypto_bigint_cswap256>
   22d32:	b008      	add	sp, #32
   22d34:	bd70      	pop	{r4, r5, r6, pc}
   22d36:	bf00      	nop

00022d38 <ocrypto_mod_p256_from_bytes>:
   22d38:	680b      	ldr	r3, [r1, #0]
   22d3a:	ba1b      	rev	r3, r3
   22d3c:	61c3      	str	r3, [r0, #28]
   22d3e:	684b      	ldr	r3, [r1, #4]
   22d40:	ba1b      	rev	r3, r3
   22d42:	6183      	str	r3, [r0, #24]
   22d44:	688b      	ldr	r3, [r1, #8]
   22d46:	ba1b      	rev	r3, r3
   22d48:	6143      	str	r3, [r0, #20]
   22d4a:	68cb      	ldr	r3, [r1, #12]
   22d4c:	ba1b      	rev	r3, r3
   22d4e:	6103      	str	r3, [r0, #16]
   22d50:	690b      	ldr	r3, [r1, #16]
   22d52:	ba1b      	rev	r3, r3
   22d54:	60c3      	str	r3, [r0, #12]
   22d56:	694b      	ldr	r3, [r1, #20]
   22d58:	ba1b      	rev	r3, r3
   22d5a:	6083      	str	r3, [r0, #8]
   22d5c:	698b      	ldr	r3, [r1, #24]
   22d5e:	ba1b      	rev	r3, r3
   22d60:	6043      	str	r3, [r0, #4]
   22d62:	69cb      	ldr	r3, [r1, #28]
   22d64:	ba1b      	rev	r3, r3
   22d66:	6003      	str	r3, [r0, #0]
   22d68:	4770      	bx	lr
   22d6a:	bf00      	nop

00022d6c <ocrypto_mod_p256_to_bytes>:
   22d6c:	69cb      	ldr	r3, [r1, #28]
   22d6e:	ba1b      	rev	r3, r3
   22d70:	6003      	str	r3, [r0, #0]
   22d72:	698b      	ldr	r3, [r1, #24]
   22d74:	ba1b      	rev	r3, r3
   22d76:	6043      	str	r3, [r0, #4]
   22d78:	694b      	ldr	r3, [r1, #20]
   22d7a:	ba1b      	rev	r3, r3
   22d7c:	6083      	str	r3, [r0, #8]
   22d7e:	690b      	ldr	r3, [r1, #16]
   22d80:	ba1b      	rev	r3, r3
   22d82:	60c3      	str	r3, [r0, #12]
   22d84:	68cb      	ldr	r3, [r1, #12]
   22d86:	ba1b      	rev	r3, r3
   22d88:	6103      	str	r3, [r0, #16]
   22d8a:	688b      	ldr	r3, [r1, #8]
   22d8c:	ba1b      	rev	r3, r3
   22d8e:	6143      	str	r3, [r0, #20]
   22d90:	684b      	ldr	r3, [r1, #4]
   22d92:	ba1b      	rev	r3, r3
   22d94:	6183      	str	r3, [r0, #24]
   22d96:	680b      	ldr	r3, [r1, #0]
   22d98:	ba1b      	rev	r3, r3
   22d9a:	61c3      	str	r3, [r0, #28]
   22d9c:	4770      	bx	lr
   22d9e:	bf00      	nop

00022da0 <ocrypto_mod_p256_inv>:
   22da0:	b570      	push	{r4, r5, r6, lr}
   22da2:	b098      	sub	sp, #96	; 0x60
   22da4:	460d      	mov	r5, r1
   22da6:	4606      	mov	r6, r0
   22da8:	a810      	add	r0, sp, #64	; 0x40
   22daa:	f7de f807 	bl	dbc <ocrypto_mod_p256_sqr>
   22dae:	462a      	mov	r2, r5
   22db0:	a910      	add	r1, sp, #64	; 0x40
   22db2:	4668      	mov	r0, sp
   22db4:	f7dd ffea 	bl	d8c <ocrypto_mod_p256_mul>
   22db8:	4669      	mov	r1, sp
   22dba:	a810      	add	r0, sp, #64	; 0x40
   22dbc:	f7dd fffe 	bl	dbc <ocrypto_mod_p256_sqr>
   22dc0:	a910      	add	r1, sp, #64	; 0x40
   22dc2:	4608      	mov	r0, r1
   22dc4:	f7dd fffa 	bl	dbc <ocrypto_mod_p256_sqr>
   22dc8:	466a      	mov	r2, sp
   22dca:	a910      	add	r1, sp, #64	; 0x40
   22dcc:	a808      	add	r0, sp, #32
   22dce:	f7dd ffdd 	bl	d8c <ocrypto_mod_p256_mul>
   22dd2:	a908      	add	r1, sp, #32
   22dd4:	a810      	add	r0, sp, #64	; 0x40
   22dd6:	f7dd fff1 	bl	dbc <ocrypto_mod_p256_sqr>
   22dda:	a910      	add	r1, sp, #64	; 0x40
   22ddc:	4608      	mov	r0, r1
   22dde:	f7dd ffed 	bl	dbc <ocrypto_mod_p256_sqr>
   22de2:	a910      	add	r1, sp, #64	; 0x40
   22de4:	4608      	mov	r0, r1
   22de6:	f7dd ffe9 	bl	dbc <ocrypto_mod_p256_sqr>
   22dea:	a910      	add	r1, sp, #64	; 0x40
   22dec:	4608      	mov	r0, r1
   22dee:	f7dd ffe5 	bl	dbc <ocrypto_mod_p256_sqr>
   22df2:	a910      	add	r1, sp, #64	; 0x40
   22df4:	aa08      	add	r2, sp, #32
   22df6:	4608      	mov	r0, r1
   22df8:	f7dd ffc8 	bl	d8c <ocrypto_mod_p256_mul>
   22dfc:	a910      	add	r1, sp, #64	; 0x40
   22dfe:	4608      	mov	r0, r1
   22e00:	f7dd ffdc 	bl	dbc <ocrypto_mod_p256_sqr>
   22e04:	a910      	add	r1, sp, #64	; 0x40
   22e06:	4608      	mov	r0, r1
   22e08:	f7dd ffd8 	bl	dbc <ocrypto_mod_p256_sqr>
   22e0c:	a910      	add	r1, sp, #64	; 0x40
   22e0e:	466a      	mov	r2, sp
   22e10:	a808      	add	r0, sp, #32
   22e12:	f7dd ffbb 	bl	d8c <ocrypto_mod_p256_mul>
   22e16:	2405      	movs	r4, #5
   22e18:	a908      	add	r1, sp, #32
   22e1a:	a810      	add	r0, sp, #64	; 0x40
   22e1c:	f7dd ffce 	bl	dbc <ocrypto_mod_p256_sqr>
   22e20:	a910      	add	r1, sp, #64	; 0x40
   22e22:	4608      	mov	r0, r1
   22e24:	f7dd ffca 	bl	dbc <ocrypto_mod_p256_sqr>
   22e28:	3c01      	subs	r4, #1
   22e2a:	a910      	add	r1, sp, #64	; 0x40
   22e2c:	d1f5      	bne.n	22e1a <ocrypto_mod_p256_inv+0x7a>
   22e2e:	aa08      	add	r2, sp, #32
   22e30:	4608      	mov	r0, r1
   22e32:	f7dd ffab 	bl	d8c <ocrypto_mod_p256_mul>
   22e36:	2405      	movs	r4, #5
   22e38:	a910      	add	r1, sp, #64	; 0x40
   22e3a:	4608      	mov	r0, r1
   22e3c:	f7dd ffbe 	bl	dbc <ocrypto_mod_p256_sqr>
   22e40:	a910      	add	r1, sp, #64	; 0x40
   22e42:	4608      	mov	r0, r1
   22e44:	f7dd ffba 	bl	dbc <ocrypto_mod_p256_sqr>
   22e48:	3c01      	subs	r4, #1
   22e4a:	d1f5      	bne.n	22e38 <ocrypto_mod_p256_inv+0x98>
   22e4c:	a910      	add	r1, sp, #64	; 0x40
   22e4e:	aa08      	add	r2, sp, #32
   22e50:	4608      	mov	r0, r1
   22e52:	f7dd ff9b 	bl	d8c <ocrypto_mod_p256_mul>
   22e56:	a910      	add	r1, sp, #64	; 0x40
   22e58:	a808      	add	r0, sp, #32
   22e5a:	f7dd ffaf 	bl	dbc <ocrypto_mod_p256_sqr>
   22e5e:	a908      	add	r1, sp, #32
   22e60:	4608      	mov	r0, r1
   22e62:	f7dd ffab 	bl	dbc <ocrypto_mod_p256_sqr>
   22e66:	a908      	add	r1, sp, #32
   22e68:	466a      	mov	r2, sp
   22e6a:	4668      	mov	r0, sp
   22e6c:	f7dd ff8e 	bl	d8c <ocrypto_mod_p256_mul>
   22e70:	2410      	movs	r4, #16
   22e72:	4669      	mov	r1, sp
   22e74:	a810      	add	r0, sp, #64	; 0x40
   22e76:	f7dd ffa1 	bl	dbc <ocrypto_mod_p256_sqr>
   22e7a:	a910      	add	r1, sp, #64	; 0x40
   22e7c:	4608      	mov	r0, r1
   22e7e:	f7dd ff9d 	bl	dbc <ocrypto_mod_p256_sqr>
   22e82:	3c01      	subs	r4, #1
   22e84:	a910      	add	r1, sp, #64	; 0x40
   22e86:	d1f5      	bne.n	22e74 <ocrypto_mod_p256_inv+0xd4>
   22e88:	462a      	mov	r2, r5
   22e8a:	4608      	mov	r0, r1
   22e8c:	f7dd ff7e 	bl	d8c <ocrypto_mod_p256_mul>
   22e90:	2440      	movs	r4, #64	; 0x40
   22e92:	a910      	add	r1, sp, #64	; 0x40
   22e94:	4608      	mov	r0, r1
   22e96:	f7dd ff91 	bl	dbc <ocrypto_mod_p256_sqr>
   22e9a:	a910      	add	r1, sp, #64	; 0x40
   22e9c:	4608      	mov	r0, r1
   22e9e:	f7dd ff8d 	bl	dbc <ocrypto_mod_p256_sqr>
   22ea2:	3c01      	subs	r4, #1
   22ea4:	d1f5      	bne.n	22e92 <ocrypto_mod_p256_inv+0xf2>
   22ea6:	a910      	add	r1, sp, #64	; 0x40
   22ea8:	466a      	mov	r2, sp
   22eaa:	4608      	mov	r0, r1
   22eac:	f7dd ff6e 	bl	d8c <ocrypto_mod_p256_mul>
   22eb0:	2410      	movs	r4, #16
   22eb2:	a910      	add	r1, sp, #64	; 0x40
   22eb4:	4608      	mov	r0, r1
   22eb6:	f7dd ff81 	bl	dbc <ocrypto_mod_p256_sqr>
   22eba:	a910      	add	r1, sp, #64	; 0x40
   22ebc:	4608      	mov	r0, r1
   22ebe:	f7dd ff7d 	bl	dbc <ocrypto_mod_p256_sqr>
   22ec2:	3c01      	subs	r4, #1
   22ec4:	d1f5      	bne.n	22eb2 <ocrypto_mod_p256_inv+0x112>
   22ec6:	a910      	add	r1, sp, #64	; 0x40
   22ec8:	466a      	mov	r2, sp
   22eca:	4608      	mov	r0, r1
   22ecc:	f7dd ff5e 	bl	d8c <ocrypto_mod_p256_mul>
   22ed0:	2410      	movs	r4, #16
   22ed2:	a910      	add	r1, sp, #64	; 0x40
   22ed4:	4608      	mov	r0, r1
   22ed6:	f7dd ff71 	bl	dbc <ocrypto_mod_p256_sqr>
   22eda:	a910      	add	r1, sp, #64	; 0x40
   22edc:	4608      	mov	r0, r1
   22ede:	f7dd ff6d 	bl	dbc <ocrypto_mod_p256_sqr>
   22ee2:	3c01      	subs	r4, #1
   22ee4:	d1f5      	bne.n	22ed2 <ocrypto_mod_p256_inv+0x132>
   22ee6:	a910      	add	r1, sp, #64	; 0x40
   22ee8:	aa08      	add	r2, sp, #32
   22eea:	4608      	mov	r0, r1
   22eec:	f7dd ff4e 	bl	d8c <ocrypto_mod_p256_mul>
   22ef0:	462a      	mov	r2, r5
   22ef2:	a910      	add	r1, sp, #64	; 0x40
   22ef4:	4630      	mov	r0, r6
   22ef6:	f7dd ff49 	bl	d8c <ocrypto_mod_p256_mul>
   22efa:	b018      	add	sp, #96	; 0x60
   22efc:	bd70      	pop	{r4, r5, r6, pc}
   22efe:	bf00      	nop

00022f00 <nrf_cc3xx_platform_init>:
   22f00:	b510      	push	{r4, lr}
   22f02:	4c0c      	ldr	r4, [pc, #48]	; (22f34 <nrf_cc3xx_platform_init+0x34>)
   22f04:	6823      	ldr	r3, [r4, #0]
   22f06:	b113      	cbz	r3, 22f0e <nrf_cc3xx_platform_init+0xe>
   22f08:	4b0b      	ldr	r3, [pc, #44]	; (22f38 <nrf_cc3xx_platform_init+0x38>)
   22f0a:	681b      	ldr	r3, [r3, #0]
   22f0c:	b92b      	cbnz	r3, 22f1a <nrf_cc3xx_platform_init+0x1a>
   22f0e:	f000 fe7d 	bl	23c0c <CC_LibInit>
   22f12:	b930      	cbnz	r0, 22f22 <nrf_cc3xx_platform_init+0x22>
   22f14:	4b08      	ldr	r3, [pc, #32]	; (22f38 <nrf_cc3xx_platform_init+0x38>)
   22f16:	2201      	movs	r2, #1
   22f18:	601a      	str	r2, [r3, #0]
   22f1a:	2301      	movs	r3, #1
   22f1c:	6023      	str	r3, [r4, #0]
   22f1e:	2000      	movs	r0, #0
   22f20:	bd10      	pop	{r4, pc}
   22f22:	3801      	subs	r0, #1
   22f24:	2806      	cmp	r0, #6
   22f26:	d901      	bls.n	22f2c <nrf_cc3xx_platform_init+0x2c>
   22f28:	4804      	ldr	r0, [pc, #16]	; (22f3c <nrf_cc3xx_platform_init+0x3c>)
   22f2a:	bd10      	pop	{r4, pc}
   22f2c:	4b04      	ldr	r3, [pc, #16]	; (22f40 <nrf_cc3xx_platform_init+0x40>)
   22f2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22f32:	bd10      	pop	{r4, pc}
   22f34:	200031cc 	.word	0x200031cc
   22f38:	200031d0 	.word	0x200031d0
   22f3c:	ffff8ffe 	.word	0xffff8ffe
   22f40:	0002c278 	.word	0x0002c278

00022f44 <nrf_cc3xx_platform_abort>:
   22f44:	f3bf 8f4f 	dsb	sy
   22f48:	4905      	ldr	r1, [pc, #20]	; (22f60 <nrf_cc3xx_platform_abort+0x1c>)
   22f4a:	4b06      	ldr	r3, [pc, #24]	; (22f64 <nrf_cc3xx_platform_abort+0x20>)
   22f4c:	68ca      	ldr	r2, [r1, #12]
   22f4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22f52:	4313      	orrs	r3, r2
   22f54:	60cb      	str	r3, [r1, #12]
   22f56:	f3bf 8f4f 	dsb	sy
   22f5a:	bf00      	nop
   22f5c:	e7fd      	b.n	22f5a <nrf_cc3xx_platform_abort+0x16>
   22f5e:	bf00      	nop
   22f60:	e000ed00 	.word	0xe000ed00
   22f64:	05fa0004 	.word	0x05fa0004

00022f68 <CC_PalAbort>:
   22f68:	b410      	push	{r4}
   22f6a:	4b09      	ldr	r3, [pc, #36]	; (22f90 <CC_PalAbort+0x28>)
   22f6c:	4909      	ldr	r1, [pc, #36]	; (22f94 <CC_PalAbort+0x2c>)
   22f6e:	4c0a      	ldr	r4, [pc, #40]	; (22f98 <CC_PalAbort+0x30>)
   22f70:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   22f74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22f78:	6849      	ldr	r1, [r1, #4]
   22f7a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22f7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22f82:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22f86:	2300      	movs	r3, #0
   22f88:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   22f8c:	bc10      	pop	{r4}
   22f8e:	4708      	bx	r1
   22f90:	5002b000 	.word	0x5002b000
   22f94:	20000830 	.word	0x20000830
   22f98:	5002a000 	.word	0x5002a000

00022f9c <nrf_cc3xx_platform_set_abort>:
   22f9c:	e9d0 1200 	ldrd	r1, r2, [r0]
   22fa0:	4b01      	ldr	r3, [pc, #4]	; (22fa8 <nrf_cc3xx_platform_set_abort+0xc>)
   22fa2:	e9c3 1200 	strd	r1, r2, [r3]
   22fa6:	4770      	bx	lr
   22fa8:	20000830 	.word	0x20000830

00022fac <nrf_cc3xx_platform_ctr_drbg_init>:
   22fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22fb0:	4c14      	ldr	r4, [pc, #80]	; (23004 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   22fb2:	4e15      	ldr	r6, [pc, #84]	; (23008 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   22fb4:	2800      	cmp	r0, #0
   22fb6:	bf18      	it	ne
   22fb8:	4604      	movne	r4, r0
   22fba:	b083      	sub	sp, #12
   22fbc:	6823      	ldr	r3, [r4, #0]
   22fbe:	42b3      	cmp	r3, r6
   22fc0:	d01c      	beq.n	22ffc <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   22fc2:	460d      	mov	r5, r1
   22fc4:	4620      	mov	r0, r4
   22fc6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   22fca:	f104 0904 	add.w	r9, r4, #4
   22fce:	4617      	mov	r7, r2
   22fd0:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   22fd4:	f000 f8d0 	bl	23178 <mbedtls_platform_zeroize>
   22fd8:	4648      	mov	r0, r9
   22fda:	f000 fd05 	bl	239e8 <cc_mbedtls_entropy_init>
   22fde:	4640      	mov	r0, r8
   22fe0:	f000 fb32 	bl	23648 <cc_mbedtls_ctr_drbg_init>
   22fe4:	4909      	ldr	r1, [pc, #36]	; (2300c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   22fe6:	9700      	str	r7, [sp, #0]
   22fe8:	462b      	mov	r3, r5
   22fea:	464a      	mov	r2, r9
   22fec:	4640      	mov	r0, r8
   22fee:	f000 fb41 	bl	23674 <cc_mbedtls_ctr_drbg_seed>
   22ff2:	b900      	cbnz	r0, 22ff6 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   22ff4:	6026      	str	r6, [r4, #0]
   22ff6:	b003      	add	sp, #12
   22ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22ffc:	2000      	movs	r0, #0
   22ffe:	b003      	add	sp, #12
   23000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23004:	200031d4 	.word	0x200031d4
   23008:	5ac9bca5 	.word	0x5ac9bca5
   2300c:	00023a69 	.word	0x00023a69

00023010 <nrf_cc3xx_platform_ctr_drbg_get>:
   23010:	b570      	push	{r4, r5, r6, lr}
   23012:	4d0d      	ldr	r5, [pc, #52]	; (23048 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   23014:	2800      	cmp	r0, #0
   23016:	bf18      	it	ne
   23018:	4605      	movne	r5, r0
   2301a:	461e      	mov	r6, r3
   2301c:	6828      	ldr	r0, [r5, #0]
   2301e:	4b0b      	ldr	r3, [pc, #44]	; (2304c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   23020:	4298      	cmp	r0, r3
   23022:	b082      	sub	sp, #8
   23024:	d10d      	bne.n	23042 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   23026:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   2302a:	2500      	movs	r5, #0
   2302c:	9500      	str	r5, [sp, #0]
   2302e:	462b      	mov	r3, r5
   23030:	4614      	mov	r4, r2
   23032:	f000 fb6d 	bl	23710 <cc_mbedtls_ctr_drbg_random_with_add>
   23036:	2800      	cmp	r0, #0
   23038:	bf18      	it	ne
   2303a:	462c      	movne	r4, r5
   2303c:	6034      	str	r4, [r6, #0]
   2303e:	b002      	add	sp, #8
   23040:	bd70      	pop	{r4, r5, r6, pc}
   23042:	4803      	ldr	r0, [pc, #12]	; (23050 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   23044:	e7fb      	b.n	2303e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   23046:	bf00      	nop
   23048:	200031d4 	.word	0x200031d4
   2304c:	5ac9bca5 	.word	0x5ac9bca5
   23050:	ffff8fe8 	.word	0xffff8fe8

00023054 <mutex_free>:
   23054:	b510      	push	{r4, lr}
   23056:	4604      	mov	r4, r0
   23058:	b130      	cbz	r0, 23068 <mutex_free+0x14>
   2305a:	6863      	ldr	r3, [r4, #4]
   2305c:	06db      	lsls	r3, r3, #27
   2305e:	d502      	bpl.n	23066 <mutex_free+0x12>
   23060:	2300      	movs	r3, #0
   23062:	6023      	str	r3, [r4, #0]
   23064:	6063      	str	r3, [r4, #4]
   23066:	bd10      	pop	{r4, pc}
   23068:	4b02      	ldr	r3, [pc, #8]	; (23074 <mutex_free+0x20>)
   2306a:	4803      	ldr	r0, [pc, #12]	; (23078 <mutex_free+0x24>)
   2306c:	685b      	ldr	r3, [r3, #4]
   2306e:	4798      	blx	r3
   23070:	e7f3      	b.n	2305a <mutex_free+0x6>
   23072:	bf00      	nop
   23074:	20000830 	.word	0x20000830
   23078:	0002c294 	.word	0x0002c294

0002307c <mutex_lock>:
   2307c:	b1b0      	cbz	r0, 230ac <mutex_lock+0x30>
   2307e:	6843      	ldr	r3, [r0, #4]
   23080:	b193      	cbz	r3, 230a8 <mutex_lock+0x2c>
   23082:	06db      	lsls	r3, r3, #27
   23084:	d50e      	bpl.n	230a4 <mutex_lock+0x28>
   23086:	2301      	movs	r3, #1
   23088:	e850 2f00 	ldrex	r2, [r0]
   2308c:	4619      	mov	r1, r3
   2308e:	e840 1c00 	strex	ip, r1, [r0]
   23092:	f09c 0f00 	teq	ip, #0
   23096:	d1f7      	bne.n	23088 <mutex_lock+0xc>
   23098:	2a01      	cmp	r2, #1
   2309a:	d0f5      	beq.n	23088 <mutex_lock+0xc>
   2309c:	f3bf 8f5f 	dmb	sy
   230a0:	2000      	movs	r0, #0
   230a2:	4770      	bx	lr
   230a4:	4803      	ldr	r0, [pc, #12]	; (230b4 <mutex_lock+0x38>)
   230a6:	4770      	bx	lr
   230a8:	4803      	ldr	r0, [pc, #12]	; (230b8 <mutex_lock+0x3c>)
   230aa:	4770      	bx	lr
   230ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   230b0:	4770      	bx	lr
   230b2:	bf00      	nop
   230b4:	ffff8fe9 	.word	0xffff8fe9
   230b8:	ffff8fea 	.word	0xffff8fea

000230bc <mutex_unlock>:
   230bc:	b168      	cbz	r0, 230da <mutex_unlock+0x1e>
   230be:	6843      	ldr	r3, [r0, #4]
   230c0:	b13b      	cbz	r3, 230d2 <mutex_unlock+0x16>
   230c2:	06db      	lsls	r3, r3, #27
   230c4:	d507      	bpl.n	230d6 <mutex_unlock+0x1a>
   230c6:	f3bf 8f5f 	dmb	sy
   230ca:	2300      	movs	r3, #0
   230cc:	6003      	str	r3, [r0, #0]
   230ce:	4618      	mov	r0, r3
   230d0:	4770      	bx	lr
   230d2:	4803      	ldr	r0, [pc, #12]	; (230e0 <mutex_unlock+0x24>)
   230d4:	4770      	bx	lr
   230d6:	4803      	ldr	r0, [pc, #12]	; (230e4 <mutex_unlock+0x28>)
   230d8:	4770      	bx	lr
   230da:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   230de:	4770      	bx	lr
   230e0:	ffff8fea 	.word	0xffff8fea
   230e4:	ffff8fe9 	.word	0xffff8fe9

000230e8 <mutex_init>:
   230e8:	b510      	push	{r4, lr}
   230ea:	4604      	mov	r4, r0
   230ec:	b120      	cbz	r0, 230f8 <mutex_init+0x10>
   230ee:	2200      	movs	r2, #0
   230f0:	2311      	movs	r3, #17
   230f2:	6022      	str	r2, [r4, #0]
   230f4:	6063      	str	r3, [r4, #4]
   230f6:	bd10      	pop	{r4, pc}
   230f8:	4801      	ldr	r0, [pc, #4]	; (23100 <mutex_init+0x18>)
   230fa:	f7ff ff35 	bl	22f68 <CC_PalAbort>
   230fe:	e7f6      	b.n	230ee <mutex_init+0x6>
   23100:	0002c2bc 	.word	0x0002c2bc

00023104 <nrf_cc3xx_platform_set_mutexes>:
   23104:	b570      	push	{r4, r5, r6, lr}
   23106:	e9d0 2300 	ldrd	r2, r3, [r0]
   2310a:	4c13      	ldr	r4, [pc, #76]	; (23158 <nrf_cc3xx_platform_set_mutexes+0x54>)
   2310c:	4d13      	ldr	r5, [pc, #76]	; (2315c <nrf_cc3xx_platform_set_mutexes+0x58>)
   2310e:	6063      	str	r3, [r4, #4]
   23110:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   23114:	e9c4 3002 	strd	r3, r0, [r4, #8]
   23118:	6022      	str	r2, [r4, #0]
   2311a:	4b11      	ldr	r3, [pc, #68]	; (23160 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   2311c:	6808      	ldr	r0, [r1, #0]
   2311e:	6018      	str	r0, [r3, #0]
   23120:	6848      	ldr	r0, [r1, #4]
   23122:	6058      	str	r0, [r3, #4]
   23124:	6888      	ldr	r0, [r1, #8]
   23126:	6098      	str	r0, [r3, #8]
   23128:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   2312c:	60d8      	str	r0, [r3, #12]
   2312e:	6119      	str	r1, [r3, #16]
   23130:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   23134:	06db      	lsls	r3, r3, #27
   23136:	d50d      	bpl.n	23154 <nrf_cc3xx_platform_set_mutexes+0x50>
   23138:	2300      	movs	r3, #0
   2313a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   2313e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   23142:	f505 708a 	add.w	r0, r5, #276	; 0x114
   23146:	4790      	blx	r2
   23148:	6823      	ldr	r3, [r4, #0]
   2314a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   2314e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23152:	4718      	bx	r3
   23154:	bd70      	pop	{r4, r5, r6, pc}
   23156:	bf00      	nop
   23158:	20000840 	.word	0x20000840
   2315c:	200031d4 	.word	0x200031d4
   23160:	20000850 	.word	0x20000850

00023164 <mbedtls_zeroize_internal>:
   23164:	b138      	cbz	r0, 23176 <mbedtls_zeroize_internal+0x12>
   23166:	b131      	cbz	r1, 23176 <mbedtls_zeroize_internal+0x12>
   23168:	4401      	add	r1, r0
   2316a:	2200      	movs	r2, #0
   2316c:	4603      	mov	r3, r0
   2316e:	3001      	adds	r0, #1
   23170:	4281      	cmp	r1, r0
   23172:	701a      	strb	r2, [r3, #0]
   23174:	d1fa      	bne.n	2316c <mbedtls_zeroize_internal+0x8>
   23176:	4770      	bx	lr

00023178 <mbedtls_platform_zeroize>:
   23178:	b138      	cbz	r0, 2318a <mbedtls_platform_zeroize+0x12>
   2317a:	b131      	cbz	r1, 2318a <mbedtls_platform_zeroize+0x12>
   2317c:	4401      	add	r1, r0
   2317e:	2200      	movs	r2, #0
   23180:	4603      	mov	r3, r0
   23182:	3001      	adds	r0, #1
   23184:	4288      	cmp	r0, r1
   23186:	701a      	strb	r2, [r3, #0]
   23188:	d1fa      	bne.n	23180 <mbedtls_platform_zeroize+0x8>
   2318a:	4770      	bx	lr

0002318c <block_cipher_df>:
   2318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23190:	b0b7      	sub	sp, #220	; 0xdc
   23192:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   23196:	9005      	str	r0, [sp, #20]
   23198:	f200 8147 	bhi.w	2342a <block_cipher_df+0x29e>
   2319c:	4614      	mov	r4, r2
   2319e:	460d      	mov	r5, r1
   231a0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   231a4:	2100      	movs	r1, #0
   231a6:	48a2      	ldr	r0, [pc, #648]	; (23430 <block_cipher_df+0x2a4>)
   231a8:	f004 fb4c 	bl	27844 <memset>
   231ac:	a819      	add	r0, sp, #100	; 0x64
   231ae:	f001 f9cb 	bl	24548 <cc_mbedtls_aes_init>
   231b2:	489f      	ldr	r0, [pc, #636]	; (23430 <block_cipher_df+0x2a4>)
   231b4:	2300      	movs	r3, #0
   231b6:	8203      	strh	r3, [r0, #16]
   231b8:	ba63      	rev16	r3, r4
   231ba:	8243      	strh	r3, [r0, #18]
   231bc:	2320      	movs	r3, #32
   231be:	4629      	mov	r1, r5
   231c0:	75c3      	strb	r3, [r0, #23]
   231c2:	4605      	mov	r5, r0
   231c4:	4622      	mov	r2, r4
   231c6:	3018      	adds	r0, #24
   231c8:	f004 fb31 	bl	2782e <memcpy>
   231cc:	462b      	mov	r3, r5
   231ce:	4423      	add	r3, r4
   231d0:	2280      	movs	r2, #128	; 0x80
   231d2:	761a      	strb	r2, [r3, #24]
   231d4:	4b97      	ldr	r3, [pc, #604]	; (23434 <block_cipher_df+0x2a8>)
   231d6:	930d      	str	r3, [sp, #52]	; 0x34
   231d8:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   231dc:	930e      	str	r3, [sp, #56]	; 0x38
   231de:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   231e2:	930f      	str	r3, [sp, #60]	; 0x3c
   231e4:	a90d      	add	r1, sp, #52	; 0x34
   231e6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   231ea:	a819      	add	r0, sp, #100	; 0x64
   231ec:	9310      	str	r3, [sp, #64]	; 0x40
   231ee:	f001 f9c1 	bl	24574 <cc_mbedtls_aes_setkey_enc>
   231f2:	4605      	mov	r5, r0
   231f4:	2800      	cmp	r0, #0
   231f6:	f040 80f4 	bne.w	233e2 <block_cipher_df+0x256>
   231fa:	f104 0319 	add.w	r3, r4, #25
   231fe:	9306      	str	r3, [sp, #24]
   23200:	f10d 0820 	add.w	r8, sp, #32
   23204:	ab11      	add	r3, sp, #68	; 0x44
   23206:	9304      	str	r3, [sp, #16]
   23208:	9307      	str	r3, [sp, #28]
   2320a:	46c1      	mov	r9, r8
   2320c:	2210      	movs	r2, #16
   2320e:	2100      	movs	r1, #0
   23210:	4648      	mov	r0, r9
   23212:	f004 fb17 	bl	27844 <memset>
   23216:	f8df a220 	ldr.w	sl, [pc, #544]	; 23438 <block_cipher_df+0x2ac>
   2321a:	9b06      	ldr	r3, [sp, #24]
   2321c:	9300      	str	r3, [sp, #0]
   2321e:	f8cd 900c 	str.w	r9, [sp, #12]
   23222:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   23226:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   2322a:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   2322e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   23232:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   23236:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   2323a:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   2323e:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   23242:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   23246:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   2324a:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   2324e:	406a      	eors	r2, r5
   23250:	ea8e 0e00 	eor.w	lr, lr, r0
   23254:	9d00      	ldr	r5, [sp, #0]
   23256:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   2325a:	9202      	str	r2, [sp, #8]
   2325c:	ea8c 0c03 	eor.w	ip, ip, r3
   23260:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   23264:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   23268:	2d10      	cmp	r5, #16
   2326a:	ea80 0003 	eor.w	r0, r0, r3
   2326e:	462b      	mov	r3, r5
   23270:	bf8c      	ite	hi
   23272:	3b10      	subhi	r3, #16
   23274:	1b6b      	subls	r3, r5, r5
   23276:	9300      	str	r3, [sp, #0]
   23278:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   2327c:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   23280:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   23284:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   23288:	4061      	eors	r1, r4
   2328a:	405f      	eors	r7, r3
   2328c:	2400      	movs	r4, #0
   2328e:	406a      	eors	r2, r5
   23290:	ea8b 0b06 	eor.w	fp, fp, r6
   23294:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   23298:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   2329c:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   232a0:	9601      	str	r6, [sp, #4]
   232a2:	4626      	mov	r6, r4
   232a4:	406b      	eors	r3, r5
   232a6:	f36b 0607 	bfi	r6, fp, #0, #8
   232aa:	4625      	mov	r5, r4
   232ac:	f367 260f 	bfi	r6, r7, #8, #8
   232b0:	462f      	mov	r7, r5
   232b2:	f361 0707 	bfi	r7, r1, #0, #8
   232b6:	9902      	ldr	r1, [sp, #8]
   232b8:	f361 0507 	bfi	r5, r1, #0, #8
   232bc:	f362 250f 	bfi	r5, r2, #8, #8
   232c0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   232c4:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   232c8:	f363 270f 	bfi	r7, r3, #8, #8
   232cc:	ea82 0909 	eor.w	r9, r2, r9
   232d0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   232d4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   232d8:	ea83 0808 	eor.w	r8, r3, r8
   232dc:	404a      	eors	r2, r1
   232de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   232e2:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   232e6:	f36e 0407 	bfi	r4, lr, #0, #8
   232ea:	404b      	eors	r3, r1
   232ec:	f368 4717 	bfi	r7, r8, #16, #8
   232f0:	f36c 240f 	bfi	r4, ip, #8, #8
   232f4:	f363 671f 	bfi	r7, r3, #24, #8
   232f8:	9b03      	ldr	r3, [sp, #12]
   232fa:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   232fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   23302:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   23306:	ea8c 0c0e 	eor.w	ip, ip, lr
   2330a:	f36c 4617 	bfi	r6, ip, #16, #8
   2330e:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   23312:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   23316:	ea8c 0c08 	eor.w	ip, ip, r8
   2331a:	f36c 661f 	bfi	r6, ip, #24, #8
   2331e:	f369 4517 	bfi	r5, r9, #16, #8
   23322:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   23326:	960b      	str	r6, [sp, #44]	; 0x2c
   23328:	f362 651f 	bfi	r5, r2, #24, #8
   2332c:	f360 4417 	bfi	r4, r0, #16, #8
   23330:	9508      	str	r5, [sp, #32]
   23332:	ea8c 050e 	eor.w	r5, ip, lr
   23336:	f365 641f 	bfi	r4, r5, #24, #8
   2333a:	461a      	mov	r2, r3
   2333c:	2101      	movs	r1, #1
   2333e:	a819      	add	r0, sp, #100	; 0x64
   23340:	f10a 0a10 	add.w	sl, sl, #16
   23344:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   23348:	f001 f92e 	bl	245a8 <cc_mbedtls_aes_crypt_ecb>
   2334c:	2800      	cmp	r0, #0
   2334e:	d168      	bne.n	23422 <block_cipher_df+0x296>
   23350:	9b00      	ldr	r3, [sp, #0]
   23352:	2b00      	cmp	r3, #0
   23354:	f47f af65 	bne.w	23222 <block_cipher_df+0x96>
   23358:	9c07      	ldr	r4, [sp, #28]
   2335a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2335e:	4620      	mov	r0, r4
   23360:	2210      	movs	r2, #16
   23362:	3410      	adds	r4, #16
   23364:	4649      	mov	r1, r9
   23366:	9407      	str	r4, [sp, #28]
   23368:	f004 fa61 	bl	2782e <memcpy>
   2336c:	4a30      	ldr	r2, [pc, #192]	; (23430 <block_cipher_df+0x2a4>)
   2336e:	78d3      	ldrb	r3, [r2, #3]
   23370:	3301      	adds	r3, #1
   23372:	70d3      	strb	r3, [r2, #3]
   23374:	ab19      	add	r3, sp, #100	; 0x64
   23376:	429c      	cmp	r4, r3
   23378:	f47f af48 	bne.w	2320c <block_cipher_df+0x80>
   2337c:	9904      	ldr	r1, [sp, #16]
   2337e:	2280      	movs	r2, #128	; 0x80
   23380:	4618      	mov	r0, r3
   23382:	f001 f8f7 	bl	24574 <cc_mbedtls_aes_setkey_enc>
   23386:	46c8      	mov	r8, r9
   23388:	4605      	mov	r5, r0
   2338a:	bb70      	cbnz	r0, 233ea <block_cipher_df+0x25e>
   2338c:	9c05      	ldr	r4, [sp, #20]
   2338e:	f104 0620 	add.w	r6, r4, #32
   23392:	ab15      	add	r3, sp, #84	; 0x54
   23394:	461a      	mov	r2, r3
   23396:	2101      	movs	r1, #1
   23398:	a819      	add	r0, sp, #100	; 0x64
   2339a:	f001 f905 	bl	245a8 <cc_mbedtls_aes_crypt_ecb>
   2339e:	2210      	movs	r2, #16
   233a0:	4605      	mov	r5, r0
   233a2:	bb10      	cbnz	r0, 233ea <block_cipher_df+0x25e>
   233a4:	4620      	mov	r0, r4
   233a6:	a915      	add	r1, sp, #84	; 0x54
   233a8:	3410      	adds	r4, #16
   233aa:	f004 fa40 	bl	2782e <memcpy>
   233ae:	42b4      	cmp	r4, r6
   233b0:	d1ef      	bne.n	23392 <block_cipher_df+0x206>
   233b2:	a819      	add	r0, sp, #100	; 0x64
   233b4:	f001 f8d8 	bl	24568 <cc_mbedtls_aes_free>
   233b8:	481d      	ldr	r0, [pc, #116]	; (23430 <block_cipher_df+0x2a4>)
   233ba:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   233be:	f7ff fedb 	bl	23178 <mbedtls_platform_zeroize>
   233c2:	9804      	ldr	r0, [sp, #16]
   233c4:	2120      	movs	r1, #32
   233c6:	f7ff fed7 	bl	23178 <mbedtls_platform_zeroize>
   233ca:	a80d      	add	r0, sp, #52	; 0x34
   233cc:	2110      	movs	r1, #16
   233ce:	f7ff fed3 	bl	23178 <mbedtls_platform_zeroize>
   233d2:	4640      	mov	r0, r8
   233d4:	2110      	movs	r1, #16
   233d6:	f7ff fecf 	bl	23178 <mbedtls_platform_zeroize>
   233da:	4628      	mov	r0, r5
   233dc:	b037      	add	sp, #220	; 0xdc
   233de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233e2:	ab11      	add	r3, sp, #68	; 0x44
   233e4:	9304      	str	r3, [sp, #16]
   233e6:	f10d 0820 	add.w	r8, sp, #32
   233ea:	a819      	add	r0, sp, #100	; 0x64
   233ec:	f001 f8bc 	bl	24568 <cc_mbedtls_aes_free>
   233f0:	480f      	ldr	r0, [pc, #60]	; (23430 <block_cipher_df+0x2a4>)
   233f2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   233f6:	f7ff febf 	bl	23178 <mbedtls_platform_zeroize>
   233fa:	9804      	ldr	r0, [sp, #16]
   233fc:	2120      	movs	r1, #32
   233fe:	f7ff febb 	bl	23178 <mbedtls_platform_zeroize>
   23402:	a80d      	add	r0, sp, #52	; 0x34
   23404:	2110      	movs	r1, #16
   23406:	f7ff feb7 	bl	23178 <mbedtls_platform_zeroize>
   2340a:	4640      	mov	r0, r8
   2340c:	2110      	movs	r1, #16
   2340e:	f7ff feb3 	bl	23178 <mbedtls_platform_zeroize>
   23412:	9805      	ldr	r0, [sp, #20]
   23414:	2120      	movs	r1, #32
   23416:	f7ff feaf 	bl	23178 <mbedtls_platform_zeroize>
   2341a:	4628      	mov	r0, r5
   2341c:	b037      	add	sp, #220	; 0xdc
   2341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23422:	f8dd 800c 	ldr.w	r8, [sp, #12]
   23426:	4605      	mov	r5, r0
   23428:	e7df      	b.n	233ea <block_cipher_df+0x25e>
   2342a:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2342e:	e7f4      	b.n	2341a <block_cipher_df+0x28e>
   23430:	200033a4 	.word	0x200033a4
   23434:	03020100 	.word	0x03020100
   23438:	200033b4 	.word	0x200033b4

0002343c <ctr_drbg_update_internal>:
   2343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23440:	b088      	sub	sp, #32
   23442:	4604      	mov	r4, r0
   23444:	460d      	mov	r5, r1
   23446:	2220      	movs	r2, #32
   23448:	2100      	movs	r1, #0
   2344a:	4668      	mov	r0, sp
   2344c:	f004 f9fa 	bl	27844 <memset>
   23450:	f104 0620 	add.w	r6, r4, #32
   23454:	466f      	mov	r7, sp
   23456:	7be2      	ldrb	r2, [r4, #15]
   23458:	3201      	adds	r2, #1
   2345a:	b2d2      	uxtb	r2, r2
   2345c:	73e2      	strb	r2, [r4, #15]
   2345e:	2a00      	cmp	r2, #0
   23460:	d14d      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   23462:	7ba2      	ldrb	r2, [r4, #14]
   23464:	3201      	adds	r2, #1
   23466:	b2d2      	uxtb	r2, r2
   23468:	73a2      	strb	r2, [r4, #14]
   2346a:	2a00      	cmp	r2, #0
   2346c:	d147      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   2346e:	7b63      	ldrb	r3, [r4, #13]
   23470:	3301      	adds	r3, #1
   23472:	b2db      	uxtb	r3, r3
   23474:	7363      	strb	r3, [r4, #13]
   23476:	2b00      	cmp	r3, #0
   23478:	d141      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   2347a:	7b23      	ldrb	r3, [r4, #12]
   2347c:	3301      	adds	r3, #1
   2347e:	b2db      	uxtb	r3, r3
   23480:	7323      	strb	r3, [r4, #12]
   23482:	2b00      	cmp	r3, #0
   23484:	d13b      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   23486:	7ae3      	ldrb	r3, [r4, #11]
   23488:	3301      	adds	r3, #1
   2348a:	b2db      	uxtb	r3, r3
   2348c:	72e3      	strb	r3, [r4, #11]
   2348e:	2b00      	cmp	r3, #0
   23490:	d135      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   23492:	7aa3      	ldrb	r3, [r4, #10]
   23494:	3301      	adds	r3, #1
   23496:	b2db      	uxtb	r3, r3
   23498:	72a3      	strb	r3, [r4, #10]
   2349a:	2b00      	cmp	r3, #0
   2349c:	d12f      	bne.n	234fe <ctr_drbg_update_internal+0xc2>
   2349e:	7a63      	ldrb	r3, [r4, #9]
   234a0:	3301      	adds	r3, #1
   234a2:	b2db      	uxtb	r3, r3
   234a4:	7263      	strb	r3, [r4, #9]
   234a6:	bb53      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234a8:	7a23      	ldrb	r3, [r4, #8]
   234aa:	3301      	adds	r3, #1
   234ac:	b2db      	uxtb	r3, r3
   234ae:	7223      	strb	r3, [r4, #8]
   234b0:	bb2b      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234b2:	79e3      	ldrb	r3, [r4, #7]
   234b4:	3301      	adds	r3, #1
   234b6:	b2db      	uxtb	r3, r3
   234b8:	71e3      	strb	r3, [r4, #7]
   234ba:	bb03      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234bc:	79a3      	ldrb	r3, [r4, #6]
   234be:	3301      	adds	r3, #1
   234c0:	b2db      	uxtb	r3, r3
   234c2:	71a3      	strb	r3, [r4, #6]
   234c4:	b9db      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234c6:	7963      	ldrb	r3, [r4, #5]
   234c8:	3301      	adds	r3, #1
   234ca:	b2db      	uxtb	r3, r3
   234cc:	7163      	strb	r3, [r4, #5]
   234ce:	b9b3      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234d0:	7923      	ldrb	r3, [r4, #4]
   234d2:	3301      	adds	r3, #1
   234d4:	b2db      	uxtb	r3, r3
   234d6:	7123      	strb	r3, [r4, #4]
   234d8:	b98b      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234da:	78e3      	ldrb	r3, [r4, #3]
   234dc:	3301      	adds	r3, #1
   234de:	b2db      	uxtb	r3, r3
   234e0:	70e3      	strb	r3, [r4, #3]
   234e2:	b963      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234e4:	78a3      	ldrb	r3, [r4, #2]
   234e6:	3301      	adds	r3, #1
   234e8:	b2db      	uxtb	r3, r3
   234ea:	70a3      	strb	r3, [r4, #2]
   234ec:	b93b      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234ee:	7863      	ldrb	r3, [r4, #1]
   234f0:	3301      	adds	r3, #1
   234f2:	b2db      	uxtb	r3, r3
   234f4:	7063      	strb	r3, [r4, #1]
   234f6:	b913      	cbnz	r3, 234fe <ctr_drbg_update_internal+0xc2>
   234f8:	7823      	ldrb	r3, [r4, #0]
   234fa:	3301      	adds	r3, #1
   234fc:	7023      	strb	r3, [r4, #0]
   234fe:	463b      	mov	r3, r7
   23500:	4622      	mov	r2, r4
   23502:	2101      	movs	r1, #1
   23504:	4630      	mov	r0, r6
   23506:	f001 f84f 	bl	245a8 <cc_mbedtls_aes_crypt_ecb>
   2350a:	4680      	mov	r8, r0
   2350c:	bb50      	cbnz	r0, 23564 <ctr_drbg_update_internal+0x128>
   2350e:	3710      	adds	r7, #16
   23510:	ab08      	add	r3, sp, #32
   23512:	429f      	cmp	r7, r3
   23514:	d19f      	bne.n	23456 <ctr_drbg_update_internal+0x1a>
   23516:	9a00      	ldr	r2, [sp, #0]
   23518:	682b      	ldr	r3, [r5, #0]
   2351a:	9906      	ldr	r1, [sp, #24]
   2351c:	4053      	eors	r3, r2
   2351e:	9300      	str	r3, [sp, #0]
   23520:	9a01      	ldr	r2, [sp, #4]
   23522:	686b      	ldr	r3, [r5, #4]
   23524:	4053      	eors	r3, r2
   23526:	9301      	str	r3, [sp, #4]
   23528:	9a02      	ldr	r2, [sp, #8]
   2352a:	68ab      	ldr	r3, [r5, #8]
   2352c:	4053      	eors	r3, r2
   2352e:	9302      	str	r3, [sp, #8]
   23530:	9a03      	ldr	r2, [sp, #12]
   23532:	68eb      	ldr	r3, [r5, #12]
   23534:	4053      	eors	r3, r2
   23536:	9303      	str	r3, [sp, #12]
   23538:	9a04      	ldr	r2, [sp, #16]
   2353a:	692b      	ldr	r3, [r5, #16]
   2353c:	4053      	eors	r3, r2
   2353e:	9304      	str	r3, [sp, #16]
   23540:	9a05      	ldr	r2, [sp, #20]
   23542:	696b      	ldr	r3, [r5, #20]
   23544:	4053      	eors	r3, r2
   23546:	69aa      	ldr	r2, [r5, #24]
   23548:	9305      	str	r3, [sp, #20]
   2354a:	404a      	eors	r2, r1
   2354c:	69eb      	ldr	r3, [r5, #28]
   2354e:	9206      	str	r2, [sp, #24]
   23550:	9a07      	ldr	r2, [sp, #28]
   23552:	4630      	mov	r0, r6
   23554:	4053      	eors	r3, r2
   23556:	4669      	mov	r1, sp
   23558:	2280      	movs	r2, #128	; 0x80
   2355a:	9307      	str	r3, [sp, #28]
   2355c:	f001 f80a 	bl	24574 <cc_mbedtls_aes_setkey_enc>
   23560:	4680      	mov	r8, r0
   23562:	b138      	cbz	r0, 23574 <ctr_drbg_update_internal+0x138>
   23564:	4668      	mov	r0, sp
   23566:	2120      	movs	r1, #32
   23568:	f7ff fe06 	bl	23178 <mbedtls_platform_zeroize>
   2356c:	4640      	mov	r0, r8
   2356e:	b008      	add	sp, #32
   23570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23574:	2210      	movs	r2, #16
   23576:	eb0d 0102 	add.w	r1, sp, r2
   2357a:	4620      	mov	r0, r4
   2357c:	f004 f957 	bl	2782e <memcpy>
   23580:	e7f0      	b.n	23564 <ctr_drbg_update_internal+0x128>
   23582:	bf00      	nop

00023584 <mbedtls_ctr_drbg_reseed_internal>:
   23584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23588:	4604      	mov	r4, r0
   2358a:	6980      	ldr	r0, [r0, #24]
   2358c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   23590:	d852      	bhi.n	23638 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23592:	461d      	mov	r5, r3
   23594:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   23598:	42ab      	cmp	r3, r5
   2359a:	d34d      	bcc.n	23638 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2359c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   235a0:	1a18      	subs	r0, r3, r0
   235a2:	4290      	cmp	r0, r2
   235a4:	4616      	mov	r6, r2
   235a6:	d347      	bcc.n	23638 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   235a8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23644 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   235ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
   235b0:	460f      	mov	r7, r1
   235b2:	4648      	mov	r0, r9
   235b4:	2100      	movs	r1, #0
   235b6:	f004 f945 	bl	27844 <memset>
   235ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   235be:	69a2      	ldr	r2, [r4, #24]
   235c0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   235c4:	4649      	mov	r1, r9
   235c6:	4798      	blx	r3
   235c8:	2800      	cmp	r0, #0
   235ca:	d138      	bne.n	2363e <mbedtls_ctr_drbg_reseed_internal+0xba>
   235cc:	f8d4 8018 	ldr.w	r8, [r4, #24]
   235d0:	b13d      	cbz	r5, 235e2 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   235d2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   235d6:	462a      	mov	r2, r5
   235d8:	eb09 0108 	add.w	r1, r9, r8
   235dc:	4798      	blx	r3
   235de:	bb70      	cbnz	r0, 2363e <mbedtls_ctr_drbg_reseed_internal+0xba>
   235e0:	44a8      	add	r8, r5
   235e2:	b107      	cbz	r7, 235e6 <mbedtls_ctr_drbg_reseed_internal+0x62>
   235e4:	b9c6      	cbnz	r6, 23618 <mbedtls_ctr_drbg_reseed_internal+0x94>
   235e6:	4917      	ldr	r1, [pc, #92]	; (23644 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235e8:	4642      	mov	r2, r8
   235ea:	4608      	mov	r0, r1
   235ec:	f7ff fdce 	bl	2318c <block_cipher_df>
   235f0:	4605      	mov	r5, r0
   235f2:	b138      	cbz	r0, 23604 <mbedtls_ctr_drbg_reseed_internal+0x80>
   235f4:	4813      	ldr	r0, [pc, #76]	; (23644 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   235f6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   235fa:	f7ff fdbd 	bl	23178 <mbedtls_platform_zeroize>
   235fe:	4628      	mov	r0, r5
   23600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23604:	490f      	ldr	r1, [pc, #60]	; (23644 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23606:	4620      	mov	r0, r4
   23608:	f7ff ff18 	bl	2343c <ctr_drbg_update_internal>
   2360c:	4605      	mov	r5, r0
   2360e:	2800      	cmp	r0, #0
   23610:	d1f0      	bne.n	235f4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   23612:	2301      	movs	r3, #1
   23614:	6123      	str	r3, [r4, #16]
   23616:	e7ed      	b.n	235f4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   23618:	eb09 0008 	add.w	r0, r9, r8
   2361c:	4639      	mov	r1, r7
   2361e:	4632      	mov	r2, r6
   23620:	f004 f905 	bl	2782e <memcpy>
   23624:	4907      	ldr	r1, [pc, #28]	; (23644 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23626:	44b0      	add	r8, r6
   23628:	4642      	mov	r2, r8
   2362a:	4608      	mov	r0, r1
   2362c:	f7ff fdae 	bl	2318c <block_cipher_df>
   23630:	4605      	mov	r5, r0
   23632:	2800      	cmp	r0, #0
   23634:	d1de      	bne.n	235f4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   23636:	e7e5      	b.n	23604 <mbedtls_ctr_drbg_reseed_internal+0x80>
   23638:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2363c:	e7df      	b.n	235fe <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2363e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   23642:	e7dc      	b.n	235fe <mbedtls_ctr_drbg_reseed_internal+0x7a>
   23644:	20003544 	.word	0x20003544

00023648 <cc_mbedtls_ctr_drbg_init>:
   23648:	b510      	push	{r4, lr}
   2364a:	22a4      	movs	r2, #164	; 0xa4
   2364c:	4604      	mov	r4, r0
   2364e:	2100      	movs	r1, #0
   23650:	f004 f8f8 	bl	27844 <memset>
   23654:	4b06      	ldr	r3, [pc, #24]	; (23670 <cc_mbedtls_ctr_drbg_init+0x28>)
   23656:	f04f 31ff 	mov.w	r1, #4294967295
   2365a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2365e:	6121      	str	r1, [r4, #16]
   23660:	61e2      	str	r2, [r4, #28]
   23662:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   23666:	681b      	ldr	r3, [r3, #0]
   23668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2366c:	4718      	bx	r3
   2366e:	bf00      	nop
   23670:	20000894 	.word	0x20000894

00023674 <cc_mbedtls_ctr_drbg_seed>:
   23674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23678:	b085      	sub	sp, #20
   2367a:	4605      	mov	r5, r0
   2367c:	460f      	mov	r7, r1
   2367e:	4616      	mov	r6, r2
   23680:	2100      	movs	r1, #0
   23682:	2210      	movs	r2, #16
   23684:	4668      	mov	r0, sp
   23686:	4699      	mov	r9, r3
   23688:	f004 f8dc 	bl	27844 <memset>
   2368c:	4b1e      	ldr	r3, [pc, #120]	; (23708 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2368e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   23692:	681b      	ldr	r3, [r3, #0]
   23694:	4640      	mov	r0, r8
   23696:	4798      	blx	r3
   23698:	b120      	cbz	r0, 236a4 <cc_mbedtls_ctr_drbg_seed+0x30>
   2369a:	4604      	mov	r4, r0
   2369c:	4620      	mov	r0, r4
   2369e:	b005      	add	sp, #20
   236a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   236a4:	f105 0420 	add.w	r4, r5, #32
   236a8:	4620      	mov	r0, r4
   236aa:	f000 ff4d 	bl	24548 <cc_mbedtls_aes_init>
   236ae:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   236b2:	69ae      	ldr	r6, [r5, #24]
   236b4:	692b      	ldr	r3, [r5, #16]
   236b6:	b9ee      	cbnz	r6, 236f4 <cc_mbedtls_ctr_drbg_seed+0x80>
   236b8:	2220      	movs	r2, #32
   236ba:	2b00      	cmp	r3, #0
   236bc:	61aa      	str	r2, [r5, #24]
   236be:	db20      	blt.n	23702 <cc_mbedtls_ctr_drbg_seed+0x8e>
   236c0:	461e      	mov	r6, r3
   236c2:	4620      	mov	r0, r4
   236c4:	4669      	mov	r1, sp
   236c6:	2280      	movs	r2, #128	; 0x80
   236c8:	f000 ff54 	bl	24574 <cc_mbedtls_aes_setkey_enc>
   236cc:	4604      	mov	r4, r0
   236ce:	b930      	cbnz	r0, 236de <cc_mbedtls_ctr_drbg_seed+0x6a>
   236d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   236d2:	4633      	mov	r3, r6
   236d4:	4649      	mov	r1, r9
   236d6:	4628      	mov	r0, r5
   236d8:	f7ff ff54 	bl	23584 <mbedtls_ctr_drbg_reseed_internal>
   236dc:	4604      	mov	r4, r0
   236de:	4b0b      	ldr	r3, [pc, #44]	; (2370c <cc_mbedtls_ctr_drbg_seed+0x98>)
   236e0:	4640      	mov	r0, r8
   236e2:	681b      	ldr	r3, [r3, #0]
   236e4:	4798      	blx	r3
   236e6:	2800      	cmp	r0, #0
   236e8:	bf18      	it	ne
   236ea:	4604      	movne	r4, r0
   236ec:	4620      	mov	r0, r4
   236ee:	b005      	add	sp, #20
   236f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   236f4:	2b00      	cmp	r3, #0
   236f6:	dae3      	bge.n	236c0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   236f8:	2e17      	cmp	r6, #23
   236fa:	d802      	bhi.n	23702 <cc_mbedtls_ctr_drbg_seed+0x8e>
   236fc:	3601      	adds	r6, #1
   236fe:	0876      	lsrs	r6, r6, #1
   23700:	e7df      	b.n	236c2 <cc_mbedtls_ctr_drbg_seed+0x4e>
   23702:	2600      	movs	r6, #0
   23704:	e7dd      	b.n	236c2 <cc_mbedtls_ctr_drbg_seed+0x4e>
   23706:	bf00      	nop
   23708:	20000898 	.word	0x20000898
   2370c:	2000089c 	.word	0x2000089c

00023710 <cc_mbedtls_ctr_drbg_random_with_add>:
   23710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23714:	b08d      	sub	sp, #52	; 0x34
   23716:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2371a:	9f16      	ldr	r7, [sp, #88]	; 0x58
   2371c:	f200 80e3 	bhi.w	238e6 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   23720:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   23724:	f200 80dc 	bhi.w	238e0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   23728:	4604      	mov	r4, r0
   2372a:	4615      	mov	r5, r2
   2372c:	460e      	mov	r6, r1
   2372e:	2220      	movs	r2, #32
   23730:	2100      	movs	r1, #0
   23732:	a804      	add	r0, sp, #16
   23734:	4698      	mov	r8, r3
   23736:	f004 f885 	bl	27844 <memset>
   2373a:	4b6c      	ldr	r3, [pc, #432]	; (238ec <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   2373c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   23740:	681b      	ldr	r3, [r3, #0]
   23742:	4648      	mov	r0, r9
   23744:	4798      	blx	r3
   23746:	4683      	mov	fp, r0
   23748:	2800      	cmp	r0, #0
   2374a:	f040 8092 	bne.w	23872 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2374e:	6922      	ldr	r2, [r4, #16]
   23750:	69e3      	ldr	r3, [r4, #28]
   23752:	429a      	cmp	r2, r3
   23754:	f300 8091 	bgt.w	2387a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23758:	6963      	ldr	r3, [r4, #20]
   2375a:	2b00      	cmp	r3, #0
   2375c:	f040 808d 	bne.w	2387a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23760:	2f00      	cmp	r7, #0
   23762:	f040 80a9 	bne.w	238b8 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   23766:	f8df a188 	ldr.w	sl, [pc, #392]	; 238f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2376a:	466f      	mov	r7, sp
   2376c:	2d00      	cmp	r5, #0
   2376e:	f000 8098 	beq.w	238a2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23772:	f104 0820 	add.w	r8, r4, #32
   23776:	466f      	mov	r7, sp
   23778:	e00e      	b.n	23798 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2377a:	2d10      	cmp	r5, #16
   2377c:	46ab      	mov	fp, r5
   2377e:	bf28      	it	cs
   23780:	f04f 0b10 	movcs.w	fp, #16
   23784:	4630      	mov	r0, r6
   23786:	465a      	mov	r2, fp
   23788:	4639      	mov	r1, r7
   2378a:	f004 f850 	bl	2782e <memcpy>
   2378e:	ebb5 050b 	subs.w	r5, r5, fp
   23792:	445e      	add	r6, fp
   23794:	f000 8085 	beq.w	238a2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23798:	7be3      	ldrb	r3, [r4, #15]
   2379a:	3301      	adds	r3, #1
   2379c:	b2db      	uxtb	r3, r3
   2379e:	73e3      	strb	r3, [r4, #15]
   237a0:	2b00      	cmp	r3, #0
   237a2:	d14d      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237a4:	7ba3      	ldrb	r3, [r4, #14]
   237a6:	3301      	adds	r3, #1
   237a8:	b2db      	uxtb	r3, r3
   237aa:	73a3      	strb	r3, [r4, #14]
   237ac:	2b00      	cmp	r3, #0
   237ae:	d147      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237b0:	7b63      	ldrb	r3, [r4, #13]
   237b2:	3301      	adds	r3, #1
   237b4:	b2db      	uxtb	r3, r3
   237b6:	7363      	strb	r3, [r4, #13]
   237b8:	2b00      	cmp	r3, #0
   237ba:	d141      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237bc:	7b23      	ldrb	r3, [r4, #12]
   237be:	3301      	adds	r3, #1
   237c0:	b2db      	uxtb	r3, r3
   237c2:	7323      	strb	r3, [r4, #12]
   237c4:	2b00      	cmp	r3, #0
   237c6:	d13b      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237c8:	7ae3      	ldrb	r3, [r4, #11]
   237ca:	3301      	adds	r3, #1
   237cc:	b2db      	uxtb	r3, r3
   237ce:	72e3      	strb	r3, [r4, #11]
   237d0:	2b00      	cmp	r3, #0
   237d2:	d135      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237d4:	7aa3      	ldrb	r3, [r4, #10]
   237d6:	3301      	adds	r3, #1
   237d8:	b2db      	uxtb	r3, r3
   237da:	72a3      	strb	r3, [r4, #10]
   237dc:	2b00      	cmp	r3, #0
   237de:	d12f      	bne.n	23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237e0:	7a63      	ldrb	r3, [r4, #9]
   237e2:	3301      	adds	r3, #1
   237e4:	b2db      	uxtb	r3, r3
   237e6:	7263      	strb	r3, [r4, #9]
   237e8:	bb53      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237ea:	7a23      	ldrb	r3, [r4, #8]
   237ec:	3301      	adds	r3, #1
   237ee:	b2db      	uxtb	r3, r3
   237f0:	7223      	strb	r3, [r4, #8]
   237f2:	bb2b      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237f4:	79e3      	ldrb	r3, [r4, #7]
   237f6:	3301      	adds	r3, #1
   237f8:	b2db      	uxtb	r3, r3
   237fa:	71e3      	strb	r3, [r4, #7]
   237fc:	bb03      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   237fe:	79a3      	ldrb	r3, [r4, #6]
   23800:	3301      	adds	r3, #1
   23802:	b2db      	uxtb	r3, r3
   23804:	71a3      	strb	r3, [r4, #6]
   23806:	b9db      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23808:	7963      	ldrb	r3, [r4, #5]
   2380a:	3301      	adds	r3, #1
   2380c:	b2db      	uxtb	r3, r3
   2380e:	7163      	strb	r3, [r4, #5]
   23810:	b9b3      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23812:	7923      	ldrb	r3, [r4, #4]
   23814:	3301      	adds	r3, #1
   23816:	b2db      	uxtb	r3, r3
   23818:	7123      	strb	r3, [r4, #4]
   2381a:	b98b      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2381c:	78e3      	ldrb	r3, [r4, #3]
   2381e:	3301      	adds	r3, #1
   23820:	b2db      	uxtb	r3, r3
   23822:	70e3      	strb	r3, [r4, #3]
   23824:	b963      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23826:	78a3      	ldrb	r3, [r4, #2]
   23828:	3301      	adds	r3, #1
   2382a:	b2db      	uxtb	r3, r3
   2382c:	70a3      	strb	r3, [r4, #2]
   2382e:	b93b      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23830:	7863      	ldrb	r3, [r4, #1]
   23832:	3301      	adds	r3, #1
   23834:	b2db      	uxtb	r3, r3
   23836:	7063      	strb	r3, [r4, #1]
   23838:	b913      	cbnz	r3, 23840 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2383a:	7823      	ldrb	r3, [r4, #0]
   2383c:	3301      	adds	r3, #1
   2383e:	7023      	strb	r3, [r4, #0]
   23840:	463b      	mov	r3, r7
   23842:	4622      	mov	r2, r4
   23844:	2101      	movs	r1, #1
   23846:	4640      	mov	r0, r8
   23848:	f000 feae 	bl	245a8 <cc_mbedtls_aes_crypt_ecb>
   2384c:	4683      	mov	fp, r0
   2384e:	2800      	cmp	r0, #0
   23850:	d093      	beq.n	2377a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   23852:	f8da 3000 	ldr.w	r3, [sl]
   23856:	4648      	mov	r0, r9
   23858:	4798      	blx	r3
   2385a:	2120      	movs	r1, #32
   2385c:	4603      	mov	r3, r0
   2385e:	a804      	add	r0, sp, #16
   23860:	2b00      	cmp	r3, #0
   23862:	bf18      	it	ne
   23864:	469b      	movne	fp, r3
   23866:	f7ff fc87 	bl	23178 <mbedtls_platform_zeroize>
   2386a:	2110      	movs	r1, #16
   2386c:	4638      	mov	r0, r7
   2386e:	f7ff fc83 	bl	23178 <mbedtls_platform_zeroize>
   23872:	4658      	mov	r0, fp
   23874:	b00d      	add	sp, #52	; 0x34
   23876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2387a:	463a      	mov	r2, r7
   2387c:	4641      	mov	r1, r8
   2387e:	2300      	movs	r3, #0
   23880:	4620      	mov	r0, r4
   23882:	f7ff fe7f 	bl	23584 <mbedtls_ctr_drbg_reseed_internal>
   23886:	f8df a068 	ldr.w	sl, [pc, #104]	; 238f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2388a:	2800      	cmp	r0, #0
   2388c:	f43f af6d 	beq.w	2376a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23890:	f8da 3000 	ldr.w	r3, [sl]
   23894:	4648      	mov	r0, r9
   23896:	4798      	blx	r3
   23898:	4683      	mov	fp, r0
   2389a:	2800      	cmp	r0, #0
   2389c:	f43f af65 	beq.w	2376a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   238a0:	e7e7      	b.n	23872 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   238a2:	a904      	add	r1, sp, #16
   238a4:	4620      	mov	r0, r4
   238a6:	f7ff fdc9 	bl	2343c <ctr_drbg_update_internal>
   238aa:	4683      	mov	fp, r0
   238ac:	2800      	cmp	r0, #0
   238ae:	d1d0      	bne.n	23852 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   238b0:	6923      	ldr	r3, [r4, #16]
   238b2:	3301      	adds	r3, #1
   238b4:	6123      	str	r3, [r4, #16]
   238b6:	e7cc      	b.n	23852 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   238b8:	463a      	mov	r2, r7
   238ba:	4641      	mov	r1, r8
   238bc:	a804      	add	r0, sp, #16
   238be:	f7ff fc65 	bl	2318c <block_cipher_df>
   238c2:	4683      	mov	fp, r0
   238c4:	b118      	cbz	r0, 238ce <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   238c6:	f8df a028 	ldr.w	sl, [pc, #40]	; 238f0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   238ca:	466f      	mov	r7, sp
   238cc:	e7c1      	b.n	23852 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   238ce:	a904      	add	r1, sp, #16
   238d0:	4620      	mov	r0, r4
   238d2:	f7ff fdb3 	bl	2343c <ctr_drbg_update_internal>
   238d6:	4683      	mov	fp, r0
   238d8:	2800      	cmp	r0, #0
   238da:	f43f af44 	beq.w	23766 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   238de:	e7f2      	b.n	238c6 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   238e0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   238e4:	e7c5      	b.n	23872 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   238e6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   238ea:	e7c2      	b.n	23872 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   238ec:	20000898 	.word	0x20000898
   238f0:	2000089c 	.word	0x2000089c

000238f4 <entropy_update>:
   238f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238f8:	2b20      	cmp	r3, #32
   238fa:	b08b      	sub	sp, #44	; 0x2c
   238fc:	461d      	mov	r5, r3
   238fe:	4606      	mov	r6, r0
   23900:	4688      	mov	r8, r1
   23902:	4691      	mov	r9, r2
   23904:	d826      	bhi.n	23954 <entropy_update+0x60>
   23906:	b2db      	uxtb	r3, r3
   23908:	af02      	add	r7, sp, #8
   2390a:	f88d 8004 	strb.w	r8, [sp, #4]
   2390e:	46b0      	mov	r8, r6
   23910:	f88d 3005 	strb.w	r3, [sp, #5]
   23914:	f858 1b04 	ldr.w	r1, [r8], #4
   23918:	b921      	cbnz	r1, 23924 <entropy_update+0x30>
   2391a:	4640      	mov	r0, r8
   2391c:	f000 fe88 	bl	24630 <cc_mbedtls_sha256_starts>
   23920:	4604      	mov	r4, r0
   23922:	b940      	cbnz	r0, 23936 <entropy_update+0x42>
   23924:	2301      	movs	r3, #1
   23926:	6033      	str	r3, [r6, #0]
   23928:	2202      	movs	r2, #2
   2392a:	a901      	add	r1, sp, #4
   2392c:	4640      	mov	r0, r8
   2392e:	f000 fe93 	bl	24658 <cc_mbedtls_sha256_update>
   23932:	4604      	mov	r4, r0
   23934:	b138      	cbz	r0, 23946 <entropy_update+0x52>
   23936:	4638      	mov	r0, r7
   23938:	2120      	movs	r1, #32
   2393a:	f7ff fc1d 	bl	23178 <mbedtls_platform_zeroize>
   2393e:	4620      	mov	r0, r4
   23940:	b00b      	add	sp, #44	; 0x2c
   23942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23946:	462a      	mov	r2, r5
   23948:	4649      	mov	r1, r9
   2394a:	4640      	mov	r0, r8
   2394c:	f000 fe84 	bl	24658 <cc_mbedtls_sha256_update>
   23950:	4604      	mov	r4, r0
   23952:	e7f0      	b.n	23936 <entropy_update+0x42>
   23954:	af02      	add	r7, sp, #8
   23956:	4619      	mov	r1, r3
   23958:	4610      	mov	r0, r2
   2395a:	2300      	movs	r3, #0
   2395c:	463a      	mov	r2, r7
   2395e:	f001 f803 	bl	24968 <cc_mbedtls_sha256>
   23962:	4604      	mov	r4, r0
   23964:	2800      	cmp	r0, #0
   23966:	d1e6      	bne.n	23936 <entropy_update+0x42>
   23968:	2320      	movs	r3, #32
   2396a:	46b9      	mov	r9, r7
   2396c:	461d      	mov	r5, r3
   2396e:	e7cc      	b.n	2390a <entropy_update+0x16>

00023970 <entropy_gather_internal.part.0>:
   23970:	b5f0      	push	{r4, r5, r6, r7, lr}
   23972:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   23976:	b0a7      	sub	sp, #156	; 0x9c
   23978:	2b00      	cmp	r3, #0
   2397a:	bfd8      	it	le
   2397c:	ae02      	addle	r6, sp, #8
   2397e:	dd2c      	ble.n	239da <entropy_gather_internal.part.0+0x6a>
   23980:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   23984:	4605      	mov	r5, r0
   23986:	2300      	movs	r3, #0
   23988:	ae02      	add	r6, sp, #8
   2398a:	9301      	str	r3, [sp, #4]
   2398c:	f1a4 0701 	sub.w	r7, r4, #1
   23990:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   23994:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   23998:	ab01      	add	r3, sp, #4
   2399a:	2290      	movs	r2, #144	; 0x90
   2399c:	4631      	mov	r1, r6
   2399e:	47a0      	blx	r4
   239a0:	fab7 f787 	clz	r7, r7
   239a4:	097f      	lsrs	r7, r7, #5
   239a6:	4604      	mov	r4, r0
   239a8:	b910      	cbnz	r0, 239b0 <entropy_gather_internal.part.0+0x40>
   239aa:	9b01      	ldr	r3, [sp, #4]
   239ac:	b93b      	cbnz	r3, 239be <entropy_gather_internal.part.0+0x4e>
   239ae:	b1a7      	cbz	r7, 239da <entropy_gather_internal.part.0+0x6a>
   239b0:	4630      	mov	r0, r6
   239b2:	2190      	movs	r1, #144	; 0x90
   239b4:	f7ff fbe0 	bl	23178 <mbedtls_platform_zeroize>
   239b8:	4620      	mov	r0, r4
   239ba:	b027      	add	sp, #156	; 0x9c
   239bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239be:	4601      	mov	r1, r0
   239c0:	4632      	mov	r2, r6
   239c2:	4628      	mov	r0, r5
   239c4:	f7ff ff96 	bl	238f4 <entropy_update>
   239c8:	b950      	cbnz	r0, 239e0 <entropy_gather_internal.part.0+0x70>
   239ca:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   239ce:	9a01      	ldr	r2, [sp, #4]
   239d0:	4413      	add	r3, r2
   239d2:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   239d6:	2f00      	cmp	r7, #0
   239d8:	d1ea      	bne.n	239b0 <entropy_gather_internal.part.0+0x40>
   239da:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   239de:	e7e7      	b.n	239b0 <entropy_gather_internal.part.0+0x40>
   239e0:	4604      	mov	r4, r0
   239e2:	4620      	mov	r0, r4
   239e4:	b027      	add	sp, #156	; 0x9c
   239e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000239e8 <cc_mbedtls_entropy_init>:
   239e8:	b570      	push	{r4, r5, r6, lr}
   239ea:	2500      	movs	r5, #0
   239ec:	4604      	mov	r4, r0
   239ee:	2214      	movs	r2, #20
   239f0:	4629      	mov	r1, r5
   239f2:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   239f6:	30fc      	adds	r0, #252	; 0xfc
   239f8:	f003 ff24 	bl	27844 <memset>
   239fc:	4b16      	ldr	r3, [pc, #88]	; (23a58 <cc_mbedtls_entropy_init+0x70>)
   239fe:	f504 7688 	add.w	r6, r4, #272	; 0x110
   23a02:	681b      	ldr	r3, [r3, #0]
   23a04:	4630      	mov	r0, r6
   23a06:	4798      	blx	r3
   23a08:	4620      	mov	r0, r4
   23a0a:	f840 5b04 	str.w	r5, [r0], #4
   23a0e:	f000 fdf5 	bl	245fc <cc_mbedtls_sha256_init>
   23a12:	4b12      	ldr	r3, [pc, #72]	; (23a5c <cc_mbedtls_entropy_init+0x74>)
   23a14:	4630      	mov	r0, r6
   23a16:	681b      	ldr	r3, [r3, #0]
   23a18:	4798      	blx	r3
   23a1a:	b9d8      	cbnz	r0, 23a54 <cc_mbedtls_entropy_init+0x6c>
   23a1c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23a20:	42ab      	cmp	r3, r5
   23a22:	dc11      	bgt.n	23a48 <cc_mbedtls_entropy_init+0x60>
   23a24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   23a28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   23a2c:	2120      	movs	r1, #32
   23a2e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   23a32:	2101      	movs	r1, #1
   23a34:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   23a38:	3301      	adds	r3, #1
   23a3a:	4909      	ldr	r1, [pc, #36]	; (23a60 <cc_mbedtls_entropy_init+0x78>)
   23a3c:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   23a40:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   23a44:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   23a48:	4b06      	ldr	r3, [pc, #24]	; (23a64 <cc_mbedtls_entropy_init+0x7c>)
   23a4a:	4630      	mov	r0, r6
   23a4c:	681b      	ldr	r3, [r3, #0]
   23a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23a52:	4718      	bx	r3
   23a54:	bd70      	pop	{r4, r5, r6, pc}
   23a56:	bf00      	nop
   23a58:	20000894 	.word	0x20000894
   23a5c:	20000898 	.word	0x20000898
   23a60:	0002444d 	.word	0x0002444d
   23a64:	2000089c 	.word	0x2000089c

00023a68 <cc_mbedtls_entropy_func>:
   23a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a6c:	2a20      	cmp	r2, #32
   23a6e:	b088      	sub	sp, #32
   23a70:	d876      	bhi.n	23b60 <cc_mbedtls_entropy_func+0xf8>
   23a72:	4b3d      	ldr	r3, [pc, #244]	; (23b68 <cc_mbedtls_entropy_func+0x100>)
   23a74:	f500 7988 	add.w	r9, r0, #272	; 0x110
   23a78:	681b      	ldr	r3, [r3, #0]
   23a7a:	4604      	mov	r4, r0
   23a7c:	4648      	mov	r0, r9
   23a7e:	4617      	mov	r7, r2
   23a80:	4688      	mov	r8, r1
   23a82:	4798      	blx	r3
   23a84:	4605      	mov	r5, r0
   23a86:	bba0      	cbnz	r0, 23af2 <cc_mbedtls_entropy_func+0x8a>
   23a88:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23a8c:	f240 1601 	movw	r6, #257	; 0x101
   23a90:	e001      	b.n	23a96 <cc_mbedtls_entropy_func+0x2e>
   23a92:	3e01      	subs	r6, #1
   23a94:	d060      	beq.n	23b58 <cc_mbedtls_entropy_func+0xf0>
   23a96:	4620      	mov	r0, r4
   23a98:	b37b      	cbz	r3, 23afa <cc_mbedtls_entropy_func+0x92>
   23a9a:	f7ff ff69 	bl	23970 <entropy_gather_internal.part.0>
   23a9e:	4605      	mov	r5, r0
   23aa0:	bb68      	cbnz	r0, 23afe <cc_mbedtls_entropy_func+0x96>
   23aa2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23aa6:	2b00      	cmp	r3, #0
   23aa8:	ddf3      	ble.n	23a92 <cc_mbedtls_entropy_func+0x2a>
   23aaa:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   23aae:	4290      	cmp	r0, r2
   23ab0:	d3ef      	bcc.n	23a92 <cc_mbedtls_entropy_func+0x2a>
   23ab2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23ab6:	2a01      	cmp	r2, #1
   23ab8:	d1eb      	bne.n	23a92 <cc_mbedtls_entropy_func+0x2a>
   23aba:	281f      	cmp	r0, #31
   23abc:	d9e9      	bls.n	23a92 <cc_mbedtls_entropy_func+0x2a>
   23abe:	466e      	mov	r6, sp
   23ac0:	4629      	mov	r1, r5
   23ac2:	2220      	movs	r2, #32
   23ac4:	4630      	mov	r0, r6
   23ac6:	f104 0a04 	add.w	sl, r4, #4
   23aca:	f003 febb 	bl	27844 <memset>
   23ace:	4631      	mov	r1, r6
   23ad0:	4650      	mov	r0, sl
   23ad2:	f000 fdeb 	bl	246ac <cc_mbedtls_sha256_finish>
   23ad6:	4605      	mov	r5, r0
   23ad8:	b198      	cbz	r0, 23b02 <cc_mbedtls_entropy_func+0x9a>
   23ada:	2120      	movs	r1, #32
   23adc:	4630      	mov	r0, r6
   23ade:	f7ff fb4b 	bl	23178 <mbedtls_platform_zeroize>
   23ae2:	4b22      	ldr	r3, [pc, #136]	; (23b6c <cc_mbedtls_entropy_func+0x104>)
   23ae4:	4648      	mov	r0, r9
   23ae6:	681b      	ldr	r3, [r3, #0]
   23ae8:	4798      	blx	r3
   23aea:	2800      	cmp	r0, #0
   23aec:	bf18      	it	ne
   23aee:	f06f 051d 	mvnne.w	r5, #29
   23af2:	4628      	mov	r0, r5
   23af4:	b008      	add	sp, #32
   23af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23afa:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   23afe:	466e      	mov	r6, sp
   23b00:	e7eb      	b.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b02:	4650      	mov	r0, sl
   23b04:	f000 fd8e 	bl	24624 <cc_mbedtls_sha256_free>
   23b08:	4650      	mov	r0, sl
   23b0a:	f000 fd77 	bl	245fc <cc_mbedtls_sha256_init>
   23b0e:	4629      	mov	r1, r5
   23b10:	4650      	mov	r0, sl
   23b12:	f000 fd8d 	bl	24630 <cc_mbedtls_sha256_starts>
   23b16:	4605      	mov	r5, r0
   23b18:	2800      	cmp	r0, #0
   23b1a:	d1de      	bne.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b1c:	4650      	mov	r0, sl
   23b1e:	2220      	movs	r2, #32
   23b20:	4631      	mov	r1, r6
   23b22:	f000 fd99 	bl	24658 <cc_mbedtls_sha256_update>
   23b26:	4605      	mov	r5, r0
   23b28:	2800      	cmp	r0, #0
   23b2a:	d1d6      	bne.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b2c:	4603      	mov	r3, r0
   23b2e:	4632      	mov	r2, r6
   23b30:	2120      	movs	r1, #32
   23b32:	4630      	mov	r0, r6
   23b34:	f000 ff18 	bl	24968 <cc_mbedtls_sha256>
   23b38:	4605      	mov	r5, r0
   23b3a:	2800      	cmp	r0, #0
   23b3c:	d1cd      	bne.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b3e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23b42:	2b00      	cmp	r3, #0
   23b44:	bfc4      	itt	gt
   23b46:	2300      	movgt	r3, #0
   23b48:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   23b4c:	463a      	mov	r2, r7
   23b4e:	4640      	mov	r0, r8
   23b50:	4631      	mov	r1, r6
   23b52:	f003 fe6c 	bl	2782e <memcpy>
   23b56:	e7c0      	b.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b58:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23b5c:	466e      	mov	r6, sp
   23b5e:	e7bc      	b.n	23ada <cc_mbedtls_entropy_func+0x72>
   23b60:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23b64:	e7c5      	b.n	23af2 <cc_mbedtls_entropy_func+0x8a>
   23b66:	bf00      	nop
   23b68:	20000898 	.word	0x20000898
   23b6c:	2000089c 	.word	0x2000089c

00023b70 <RndStartupTest.constprop.0>:
   23b70:	b530      	push	{r4, r5, lr}
   23b72:	b08d      	sub	sp, #52	; 0x34
   23b74:	2100      	movs	r1, #0
   23b76:	2228      	movs	r2, #40	; 0x28
   23b78:	a802      	add	r0, sp, #8
   23b7a:	9101      	str	r1, [sp, #4]
   23b7c:	f003 fe62 	bl	27844 <memset>
   23b80:	a802      	add	r0, sp, #8
   23b82:	f000 ff19 	bl	249b8 <RNG_PLAT_SetUserRngParameters>
   23b86:	4604      	mov	r4, r0
   23b88:	b110      	cbz	r0, 23b90 <RndStartupTest.constprop.0+0x20>
   23b8a:	4620      	mov	r0, r4
   23b8c:	b00d      	add	sp, #52	; 0x34
   23b8e:	bd30      	pop	{r4, r5, pc}
   23b90:	4d18      	ldr	r5, [pc, #96]	; (23bf4 <RndStartupTest.constprop.0+0x84>)
   23b92:	f04f 31ff 	mov.w	r1, #4294967295
   23b96:	6828      	ldr	r0, [r5, #0]
   23b98:	f000 f946 	bl	23e28 <CC_PalMutexLock>
   23b9c:	4604      	mov	r4, r0
   23b9e:	b9c0      	cbnz	r0, 23bd2 <RndStartupTest.constprop.0+0x62>
   23ba0:	2000      	movs	r0, #0
   23ba2:	f000 f971 	bl	23e88 <CC_PalPowerSaveModeSelect>
   23ba6:	bb00      	cbnz	r0, 23bea <RndStartupTest.constprop.0+0x7a>
   23ba8:	4a13      	ldr	r2, [pc, #76]	; (23bf8 <RndStartupTest.constprop.0+0x88>)
   23baa:	a902      	add	r1, sp, #8
   23bac:	a801      	add	r0, sp, #4
   23bae:	f000 fc3f 	bl	24430 <LLF_RND_RunTrngStartupTest>
   23bb2:	4604      	mov	r4, r0
   23bb4:	2001      	movs	r0, #1
   23bb6:	f000 f967 	bl	23e88 <CC_PalPowerSaveModeSelect>
   23bba:	b990      	cbnz	r0, 23be2 <RndStartupTest.constprop.0+0x72>
   23bbc:	6828      	ldr	r0, [r5, #0]
   23bbe:	f000 f93b 	bl	23e38 <CC_PalMutexUnlock>
   23bc2:	2800      	cmp	r0, #0
   23bc4:	d0e1      	beq.n	23b8a <RndStartupTest.constprop.0+0x1a>
   23bc6:	480d      	ldr	r0, [pc, #52]	; (23bfc <RndStartupTest.constprop.0+0x8c>)
   23bc8:	f7ff f9ce 	bl	22f68 <CC_PalAbort>
   23bcc:	4620      	mov	r0, r4
   23bce:	b00d      	add	sp, #52	; 0x34
   23bd0:	bd30      	pop	{r4, r5, pc}
   23bd2:	480b      	ldr	r0, [pc, #44]	; (23c00 <RndStartupTest.constprop.0+0x90>)
   23bd4:	f7ff f9c8 	bl	22f68 <CC_PalAbort>
   23bd8:	2c01      	cmp	r4, #1
   23bda:	bf08      	it	eq
   23bdc:	2405      	moveq	r4, #5
   23bde:	d0ed      	beq.n	23bbc <RndStartupTest.constprop.0+0x4c>
   23be0:	e7de      	b.n	23ba0 <RndStartupTest.constprop.0+0x30>
   23be2:	4808      	ldr	r0, [pc, #32]	; (23c04 <RndStartupTest.constprop.0+0x94>)
   23be4:	f7ff f9c0 	bl	22f68 <CC_PalAbort>
   23be8:	e7e8      	b.n	23bbc <RndStartupTest.constprop.0+0x4c>
   23bea:	4807      	ldr	r0, [pc, #28]	; (23c08 <RndStartupTest.constprop.0+0x98>)
   23bec:	f7ff f9bc 	bl	22f68 <CC_PalAbort>
   23bf0:	e7da      	b.n	23ba8 <RndStartupTest.constprop.0+0x38>
   23bf2:	bf00      	nop
   23bf4:	20000890 	.word	0x20000890
   23bf8:	20003730 	.word	0x20003730
   23bfc:	0002c338 	.word	0x0002c338
   23c00:	0002c2e0 	.word	0x0002c2e0
   23c04:	0002c318 	.word	0x0002c318
   23c08:	0002c2f8 	.word	0x0002c2f8

00023c0c <CC_LibInit>:
   23c0c:	b530      	push	{r4, r5, lr}
   23c0e:	b083      	sub	sp, #12
   23c10:	f000 f85c 	bl	23ccc <CC_HalInit>
   23c14:	b128      	cbz	r0, 23c22 <CC_LibInit+0x16>
   23c16:	f000 f8ab 	bl	23d70 <CC_PalTerminate>
   23c1a:	2403      	movs	r4, #3
   23c1c:	4620      	mov	r0, r4
   23c1e:	b003      	add	sp, #12
   23c20:	bd30      	pop	{r4, r5, pc}
   23c22:	f000 f877 	bl	23d14 <CC_PalInit>
   23c26:	b9d8      	cbnz	r0, 23c60 <CC_LibInit+0x54>
   23c28:	f000 f92e 	bl	23e88 <CC_PalPowerSaveModeSelect>
   23c2c:	b9e0      	cbnz	r0, 23c68 <CC_LibInit+0x5c>
   23c2e:	4c22      	ldr	r4, [pc, #136]	; (23cb8 <CC_LibInit+0xac>)
   23c30:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   23c34:	0e1b      	lsrs	r3, r3, #24
   23c36:	2bf0      	cmp	r3, #240	; 0xf0
   23c38:	d10a      	bne.n	23c50 <CC_LibInit+0x44>
   23c3a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   23c3e:	4b1f      	ldr	r3, [pc, #124]	; (23cbc <CC_LibInit+0xb0>)
   23c40:	429a      	cmp	r2, r3
   23c42:	d031      	beq.n	23ca8 <CC_LibInit+0x9c>
   23c44:	f000 f844 	bl	23cd0 <CC_HalTerminate>
   23c48:	2407      	movs	r4, #7
   23c4a:	f000 f891 	bl	23d70 <CC_PalTerminate>
   23c4e:	e7e5      	b.n	23c1c <CC_LibInit+0x10>
   23c50:	f000 f83e 	bl	23cd0 <CC_HalTerminate>
   23c54:	f000 f88c 	bl	23d70 <CC_PalTerminate>
   23c58:	2406      	movs	r4, #6
   23c5a:	4620      	mov	r0, r4
   23c5c:	b003      	add	sp, #12
   23c5e:	bd30      	pop	{r4, r5, pc}
   23c60:	2404      	movs	r4, #4
   23c62:	4620      	mov	r0, r4
   23c64:	b003      	add	sp, #12
   23c66:	bd30      	pop	{r4, r5, pc}
   23c68:	f000 f832 	bl	23cd0 <CC_HalTerminate>
   23c6c:	f000 f880 	bl	23d70 <CC_PalTerminate>
   23c70:	f7ff ff7e 	bl	23b70 <RndStartupTest.constprop.0>
   23c74:	4604      	mov	r4, r0
   23c76:	b998      	cbnz	r0, 23ca0 <CC_LibInit+0x94>
   23c78:	4d11      	ldr	r5, [pc, #68]	; (23cc0 <CC_LibInit+0xb4>)
   23c7a:	682b      	ldr	r3, [r5, #0]
   23c7c:	2b00      	cmp	r3, #0
   23c7e:	d1cd      	bne.n	23c1c <CC_LibInit+0x10>
   23c80:	4602      	mov	r2, r0
   23c82:	4601      	mov	r1, r0
   23c84:	f7ff f992 	bl	22fac <nrf_cc3xx_platform_ctr_drbg_init>
   23c88:	b950      	cbnz	r0, 23ca0 <CC_LibInit+0x94>
   23c8a:	490e      	ldr	r1, [pc, #56]	; (23cc4 <CC_LibInit+0xb8>)
   23c8c:	ab01      	add	r3, sp, #4
   23c8e:	2268      	movs	r2, #104	; 0x68
   23c90:	f7ff f9be 	bl	23010 <nrf_cc3xx_platform_ctr_drbg_get>
   23c94:	b920      	cbnz	r0, 23ca0 <CC_LibInit+0x94>
   23c96:	4b0c      	ldr	r3, [pc, #48]	; (23cc8 <CC_LibInit+0xbc>)
   23c98:	602b      	str	r3, [r5, #0]
   23c9a:	4620      	mov	r0, r4
   23c9c:	b003      	add	sp, #12
   23c9e:	bd30      	pop	{r4, r5, pc}
   23ca0:	2405      	movs	r4, #5
   23ca2:	4620      	mov	r0, r4
   23ca4:	b003      	add	sp, #12
   23ca6:	bd30      	pop	{r4, r5, pc}
   23ca8:	2001      	movs	r0, #1
   23caa:	f000 f8ed 	bl	23e88 <CC_PalPowerSaveModeSelect>
   23cae:	2800      	cmp	r0, #0
   23cb0:	d1da      	bne.n	23c68 <CC_LibInit+0x5c>
   23cb2:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   23cb6:	e7db      	b.n	23c70 <CC_LibInit+0x64>
   23cb8:	5002b000 	.word	0x5002b000
   23cbc:	20e00000 	.word	0x20e00000
   23cc0:	2000372c 	.word	0x2000372c
   23cc4:	200036c4 	.word	0x200036c4
   23cc8:	5a5aea5a 	.word	0x5a5aea5a

00023ccc <CC_HalInit>:
   23ccc:	2000      	movs	r0, #0
   23cce:	4770      	bx	lr

00023cd0 <CC_HalTerminate>:
   23cd0:	2000      	movs	r0, #0
   23cd2:	4770      	bx	lr

00023cd4 <CC_HalClearInterruptBit>:
   23cd4:	0543      	lsls	r3, r0, #21
   23cd6:	d504      	bpl.n	23ce2 <CC_HalClearInterruptBit+0xe>
   23cd8:	4b04      	ldr	r3, [pc, #16]	; (23cec <CC_HalClearInterruptBit+0x18>)
   23cda:	f04f 32ff 	mov.w	r2, #4294967295
   23cde:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   23ce2:	4b02      	ldr	r3, [pc, #8]	; (23cec <CC_HalClearInterruptBit+0x18>)
   23ce4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   23ce8:	4770      	bx	lr
   23cea:	bf00      	nop
   23cec:	5002b000 	.word	0x5002b000

00023cf0 <CC_HalMaskInterrupt>:
   23cf0:	4b01      	ldr	r3, [pc, #4]	; (23cf8 <CC_HalMaskInterrupt+0x8>)
   23cf2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   23cf6:	4770      	bx	lr
   23cf8:	5002b000 	.word	0x5002b000

00023cfc <CC_HalWaitInterrupt>:
   23cfc:	b108      	cbz	r0, 23d02 <CC_HalWaitInterrupt+0x6>
   23cfe:	f000 b86b 	b.w	23dd8 <CC_PalWaitInterrupt>
   23d02:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23d06:	4770      	bx	lr

00023d08 <CC_HalWaitInterruptRND>:
   23d08:	b108      	cbz	r0, 23d0e <CC_HalWaitInterruptRND+0x6>
   23d0a:	f000 b84f 	b.w	23dac <CC_PalWaitInterruptRND>
   23d0e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23d12:	4770      	bx	lr

00023d14 <CC_PalInit>:
   23d14:	b510      	push	{r4, lr}
   23d16:	4811      	ldr	r0, [pc, #68]	; (23d5c <CC_PalInit+0x48>)
   23d18:	f000 f872 	bl	23e00 <CC_PalMutexCreate>
   23d1c:	b100      	cbz	r0, 23d20 <CC_PalInit+0xc>
   23d1e:	bd10      	pop	{r4, pc}
   23d20:	480f      	ldr	r0, [pc, #60]	; (23d60 <CC_PalInit+0x4c>)
   23d22:	f000 f86d 	bl	23e00 <CC_PalMutexCreate>
   23d26:	2800      	cmp	r0, #0
   23d28:	d1f9      	bne.n	23d1e <CC_PalInit+0xa>
   23d2a:	4c0e      	ldr	r4, [pc, #56]	; (23d64 <CC_PalInit+0x50>)
   23d2c:	4620      	mov	r0, r4
   23d2e:	f000 f867 	bl	23e00 <CC_PalMutexCreate>
   23d32:	2800      	cmp	r0, #0
   23d34:	d1f3      	bne.n	23d1e <CC_PalInit+0xa>
   23d36:	4b0c      	ldr	r3, [pc, #48]	; (23d68 <CC_PalInit+0x54>)
   23d38:	480c      	ldr	r0, [pc, #48]	; (23d6c <CC_PalInit+0x58>)
   23d3a:	601c      	str	r4, [r3, #0]
   23d3c:	f000 f860 	bl	23e00 <CC_PalMutexCreate>
   23d40:	4601      	mov	r1, r0
   23d42:	2800      	cmp	r0, #0
   23d44:	d1eb      	bne.n	23d1e <CC_PalInit+0xa>
   23d46:	f000 f82d 	bl	23da4 <CC_PalDmaInit>
   23d4a:	4604      	mov	r4, r0
   23d4c:	b108      	cbz	r0, 23d52 <CC_PalInit+0x3e>
   23d4e:	4620      	mov	r0, r4
   23d50:	bd10      	pop	{r4, pc}
   23d52:	f000 f87b 	bl	23e4c <CC_PalPowerSaveModeInit>
   23d56:	4620      	mov	r0, r4
   23d58:	e7fa      	b.n	23d50 <CC_PalInit+0x3c>
   23d5a:	bf00      	nop
   23d5c:	2000088c 	.word	0x2000088c
   23d60:	20000880 	.word	0x20000880
   23d64:	20000888 	.word	0x20000888
   23d68:	20000890 	.word	0x20000890
   23d6c:	20000884 	.word	0x20000884

00023d70 <CC_PalTerminate>:
   23d70:	b508      	push	{r3, lr}
   23d72:	4808      	ldr	r0, [pc, #32]	; (23d94 <CC_PalTerminate+0x24>)
   23d74:	f000 f84e 	bl	23e14 <CC_PalMutexDestroy>
   23d78:	4807      	ldr	r0, [pc, #28]	; (23d98 <CC_PalTerminate+0x28>)
   23d7a:	f000 f84b 	bl	23e14 <CC_PalMutexDestroy>
   23d7e:	4807      	ldr	r0, [pc, #28]	; (23d9c <CC_PalTerminate+0x2c>)
   23d80:	f000 f848 	bl	23e14 <CC_PalMutexDestroy>
   23d84:	4806      	ldr	r0, [pc, #24]	; (23da0 <CC_PalTerminate+0x30>)
   23d86:	f000 f845 	bl	23e14 <CC_PalMutexDestroy>
   23d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23d8e:	f000 b80b 	b.w	23da8 <CC_PalDmaTerminate>
   23d92:	bf00      	nop
   23d94:	2000088c 	.word	0x2000088c
   23d98:	20000880 	.word	0x20000880
   23d9c:	20000888 	.word	0x20000888
   23da0:	20000884 	.word	0x20000884

00023da4 <CC_PalDmaInit>:
   23da4:	2000      	movs	r0, #0
   23da6:	4770      	bx	lr

00023da8 <CC_PalDmaTerminate>:
   23da8:	4770      	bx	lr
   23daa:	bf00      	nop

00023dac <CC_PalWaitInterruptRND>:
   23dac:	b410      	push	{r4}
   23dae:	4c09      	ldr	r4, [pc, #36]	; (23dd4 <CC_PalWaitInterruptRND+0x28>)
   23db0:	4602      	mov	r2, r0
   23db2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   23db6:	4213      	tst	r3, r2
   23db8:	d0fb      	beq.n	23db2 <CC_PalWaitInterruptRND+0x6>
   23dba:	b121      	cbz	r1, 23dc6 <CC_PalWaitInterruptRND+0x1a>
   23dbc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   23dc0:	600b      	str	r3, [r1, #0]
   23dc2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23dc6:	4b03      	ldr	r3, [pc, #12]	; (23dd4 <CC_PalWaitInterruptRND+0x28>)
   23dc8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   23dcc:	2000      	movs	r0, #0
   23dce:	bc10      	pop	{r4}
   23dd0:	4770      	bx	lr
   23dd2:	bf00      	nop
   23dd4:	5002b000 	.word	0x5002b000

00023dd8 <CC_PalWaitInterrupt>:
   23dd8:	4a04      	ldr	r2, [pc, #16]	; (23dec <CC_PalWaitInterrupt+0x14>)
   23dda:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   23dde:	4218      	tst	r0, r3
   23de0:	d0fb      	beq.n	23dda <CC_PalWaitInterrupt+0x2>
   23de2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   23de6:	2000      	movs	r0, #0
   23de8:	4770      	bx	lr
   23dea:	bf00      	nop
   23dec:	5002b000 	.word	0x5002b000

00023df0 <CC_PalMemCopyPlat>:
   23df0:	f003 bd05 	b.w	277fe <memmove>

00023df4 <CC_PalMemSetPlat>:
   23df4:	f003 bd26 	b.w	27844 <memset>

00023df8 <CC_PalMemSetZeroPlat>:
   23df8:	460a      	mov	r2, r1
   23dfa:	2100      	movs	r1, #0
   23dfc:	f003 bd22 	b.w	27844 <memset>

00023e00 <CC_PalMutexCreate>:
   23e00:	b508      	push	{r3, lr}
   23e02:	4b03      	ldr	r3, [pc, #12]	; (23e10 <CC_PalMutexCreate+0x10>)
   23e04:	6802      	ldr	r2, [r0, #0]
   23e06:	681b      	ldr	r3, [r3, #0]
   23e08:	6810      	ldr	r0, [r2, #0]
   23e0a:	4798      	blx	r3
   23e0c:	2000      	movs	r0, #0
   23e0e:	bd08      	pop	{r3, pc}
   23e10:	20000840 	.word	0x20000840

00023e14 <CC_PalMutexDestroy>:
   23e14:	b508      	push	{r3, lr}
   23e16:	4b03      	ldr	r3, [pc, #12]	; (23e24 <CC_PalMutexDestroy+0x10>)
   23e18:	6802      	ldr	r2, [r0, #0]
   23e1a:	685b      	ldr	r3, [r3, #4]
   23e1c:	6810      	ldr	r0, [r2, #0]
   23e1e:	4798      	blx	r3
   23e20:	2000      	movs	r0, #0
   23e22:	bd08      	pop	{r3, pc}
   23e24:	20000840 	.word	0x20000840

00023e28 <CC_PalMutexLock>:
   23e28:	4b02      	ldr	r3, [pc, #8]	; (23e34 <CC_PalMutexLock+0xc>)
   23e2a:	6802      	ldr	r2, [r0, #0]
   23e2c:	689b      	ldr	r3, [r3, #8]
   23e2e:	6810      	ldr	r0, [r2, #0]
   23e30:	4718      	bx	r3
   23e32:	bf00      	nop
   23e34:	20000840 	.word	0x20000840

00023e38 <CC_PalMutexUnlock>:
   23e38:	b508      	push	{r3, lr}
   23e3a:	4b03      	ldr	r3, [pc, #12]	; (23e48 <CC_PalMutexUnlock+0x10>)
   23e3c:	6802      	ldr	r2, [r0, #0]
   23e3e:	68db      	ldr	r3, [r3, #12]
   23e40:	6810      	ldr	r0, [r2, #0]
   23e42:	4798      	blx	r3
   23e44:	2000      	movs	r0, #0
   23e46:	bd08      	pop	{r3, pc}
   23e48:	20000840 	.word	0x20000840

00023e4c <CC_PalPowerSaveModeInit>:
   23e4c:	b570      	push	{r4, r5, r6, lr}
   23e4e:	4c09      	ldr	r4, [pc, #36]	; (23e74 <CC_PalPowerSaveModeInit+0x28>)
   23e50:	4d09      	ldr	r5, [pc, #36]	; (23e78 <CC_PalPowerSaveModeInit+0x2c>)
   23e52:	6920      	ldr	r0, [r4, #16]
   23e54:	68ab      	ldr	r3, [r5, #8]
   23e56:	4798      	blx	r3
   23e58:	b118      	cbz	r0, 23e62 <CC_PalPowerSaveModeInit+0x16>
   23e5a:	4b08      	ldr	r3, [pc, #32]	; (23e7c <CC_PalPowerSaveModeInit+0x30>)
   23e5c:	4808      	ldr	r0, [pc, #32]	; (23e80 <CC_PalPowerSaveModeInit+0x34>)
   23e5e:	685b      	ldr	r3, [r3, #4]
   23e60:	4798      	blx	r3
   23e62:	4a08      	ldr	r2, [pc, #32]	; (23e84 <CC_PalPowerSaveModeInit+0x38>)
   23e64:	68eb      	ldr	r3, [r5, #12]
   23e66:	6920      	ldr	r0, [r4, #16]
   23e68:	2100      	movs	r1, #0
   23e6a:	6011      	str	r1, [r2, #0]
   23e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23e70:	4718      	bx	r3
   23e72:	bf00      	nop
   23e74:	20000850 	.word	0x20000850
   23e78:	20000840 	.word	0x20000840
   23e7c:	20000830 	.word	0x20000830
   23e80:	0002c350 	.word	0x0002c350
   23e84:	20003950 	.word	0x20003950

00023e88 <CC_PalPowerSaveModeSelect>:
   23e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e8a:	4d1a      	ldr	r5, [pc, #104]	; (23ef4 <CC_PalPowerSaveModeSelect+0x6c>)
   23e8c:	4e1a      	ldr	r6, [pc, #104]	; (23ef8 <CC_PalPowerSaveModeSelect+0x70>)
   23e8e:	4604      	mov	r4, r0
   23e90:	68b2      	ldr	r2, [r6, #8]
   23e92:	6928      	ldr	r0, [r5, #16]
   23e94:	4790      	blx	r2
   23e96:	b9e8      	cbnz	r0, 23ed4 <CC_PalPowerSaveModeSelect+0x4c>
   23e98:	4f18      	ldr	r7, [pc, #96]	; (23efc <CC_PalPowerSaveModeSelect+0x74>)
   23e9a:	683b      	ldr	r3, [r7, #0]
   23e9c:	b14c      	cbz	r4, 23eb2 <CC_PalPowerSaveModeSelect+0x2a>
   23e9e:	b1a3      	cbz	r3, 23eca <CC_PalPowerSaveModeSelect+0x42>
   23ea0:	2b01      	cmp	r3, #1
   23ea2:	d019      	beq.n	23ed8 <CC_PalPowerSaveModeSelect+0x50>
   23ea4:	3b01      	subs	r3, #1
   23ea6:	603b      	str	r3, [r7, #0]
   23ea8:	6928      	ldr	r0, [r5, #16]
   23eaa:	68f3      	ldr	r3, [r6, #12]
   23eac:	4798      	blx	r3
   23eae:	2000      	movs	r0, #0
   23eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23eb2:	b943      	cbnz	r3, 23ec6 <CC_PalPowerSaveModeSelect+0x3e>
   23eb4:	4a12      	ldr	r2, [pc, #72]	; (23f00 <CC_PalPowerSaveModeSelect+0x78>)
   23eb6:	2101      	movs	r1, #1
   23eb8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   23ebc:	4911      	ldr	r1, [pc, #68]	; (23f04 <CC_PalPowerSaveModeSelect+0x7c>)
   23ebe:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   23ec2:	2a00      	cmp	r2, #0
   23ec4:	d1fb      	bne.n	23ebe <CC_PalPowerSaveModeSelect+0x36>
   23ec6:	3301      	adds	r3, #1
   23ec8:	603b      	str	r3, [r7, #0]
   23eca:	68f3      	ldr	r3, [r6, #12]
   23ecc:	6928      	ldr	r0, [r5, #16]
   23ece:	4798      	blx	r3
   23ed0:	2000      	movs	r0, #0
   23ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ed4:	480c      	ldr	r0, [pc, #48]	; (23f08 <CC_PalPowerSaveModeSelect+0x80>)
   23ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ed8:	4a0a      	ldr	r2, [pc, #40]	; (23f04 <CC_PalPowerSaveModeSelect+0x7c>)
   23eda:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   23ede:	2b00      	cmp	r3, #0
   23ee0:	d1fb      	bne.n	23eda <CC_PalPowerSaveModeSelect+0x52>
   23ee2:	4a07      	ldr	r2, [pc, #28]	; (23f00 <CC_PalPowerSaveModeSelect+0x78>)
   23ee4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   23ee8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   23eec:	f7ff ff00 	bl	23cf0 <CC_HalMaskInterrupt>
   23ef0:	683b      	ldr	r3, [r7, #0]
   23ef2:	e7d7      	b.n	23ea4 <CC_PalPowerSaveModeSelect+0x1c>
   23ef4:	20000850 	.word	0x20000850
   23ef8:	20000840 	.word	0x20000840
   23efc:	20003950 	.word	0x20003950
   23f00:	5002a000 	.word	0x5002a000
   23f04:	5002b000 	.word	0x5002b000
   23f08:	ffff8fe9 	.word	0xffff8fe9

00023f0c <mutex_init>:
   23f0c:	4b01      	ldr	r3, [pc, #4]	; (23f14 <mutex_init+0x8>)
   23f0e:	681b      	ldr	r3, [r3, #0]
   23f10:	4718      	bx	r3
   23f12:	bf00      	nop
   23f14:	20000840 	.word	0x20000840

00023f18 <mutex_lock>:
   23f18:	4b01      	ldr	r3, [pc, #4]	; (23f20 <mutex_lock+0x8>)
   23f1a:	689b      	ldr	r3, [r3, #8]
   23f1c:	4718      	bx	r3
   23f1e:	bf00      	nop
   23f20:	20000840 	.word	0x20000840

00023f24 <mutex_unlock>:
   23f24:	4b01      	ldr	r3, [pc, #4]	; (23f2c <mutex_unlock+0x8>)
   23f26:	68db      	ldr	r3, [r3, #12]
   23f28:	4718      	bx	r3
   23f2a:	bf00      	nop
   23f2c:	20000840 	.word	0x20000840

00023f30 <startTrngHW>:
   23f30:	2800      	cmp	r0, #0
   23f32:	f000 8084 	beq.w	2403e <startTrngHW+0x10e>
   23f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23f3a:	460c      	mov	r4, r1
   23f3c:	b083      	sub	sp, #12
   23f3e:	2900      	cmp	r1, #0
   23f40:	d078      	beq.n	24034 <startTrngHW+0x104>
   23f42:	461d      	mov	r5, r3
   23f44:	2b00      	cmp	r3, #0
   23f46:	d075      	beq.n	24034 <startTrngHW+0x104>
   23f48:	4607      	mov	r7, r0
   23f4a:	b11a      	cbz	r2, 23f54 <startTrngHW+0x24>
   23f4c:	2201      	movs	r2, #1
   23f4e:	2300      	movs	r3, #0
   23f50:	602a      	str	r2, [r5, #0]
   23f52:	6003      	str	r3, [r0, #0]
   23f54:	682b      	ldr	r3, [r5, #0]
   23f56:	2b00      	cmp	r3, #0
   23f58:	d067      	beq.n	2402a <startTrngHW+0xfa>
   23f5a:	4629      	mov	r1, r5
   23f5c:	4620      	mov	r0, r4
   23f5e:	f000 fde9 	bl	24b34 <LLF_RND_GetFastestRosc>
   23f62:	4603      	mov	r3, r0
   23f64:	2800      	cmp	r0, #0
   23f66:	d161      	bne.n	2402c <startTrngHW+0xfc>
   23f68:	6828      	ldr	r0, [r5, #0]
   23f6a:	4621      	mov	r1, r4
   23f6c:	f000 fdc4 	bl	24af8 <LLF_RND_GetRoscSampleCnt>
   23f70:	4603      	mov	r3, r0
   23f72:	2800      	cmp	r0, #0
   23f74:	d15a      	bne.n	2402c <startTrngHW+0xfc>
   23f76:	682a      	ldr	r2, [r5, #0]
   23f78:	2a08      	cmp	r2, #8
   23f7a:	d072      	beq.n	24062 <startTrngHW+0x132>
   23f7c:	2a04      	cmp	r2, #4
   23f7e:	d073      	beq.n	24068 <startTrngHW+0x138>
   23f80:	f1a2 0802 	sub.w	r8, r2, #2
   23f84:	fab8 f888 	clz	r8, r8
   23f88:	ea4f 1858 	mov.w	r8, r8, lsr #5
   23f8c:	4e38      	ldr	r6, [pc, #224]	; (24070 <startTrngHW+0x140>)
   23f8e:	2001      	movs	r0, #1
   23f90:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   23f94:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   23f98:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   23f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23f9e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   23fa2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   23fa6:	428a      	cmp	r2, r1
   23fa8:	d1f6      	bne.n	23f98 <startTrngHW+0x68>
   23faa:	f04f 0900 	mov.w	r9, #0
   23fae:	9301      	str	r3, [sp, #4]
   23fb0:	f04f 30ff 	mov.w	r0, #4294967295
   23fb4:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   23fb8:	f7ff fe8c 	bl	23cd4 <CC_HalClearInterruptBit>
   23fbc:	f06f 021b 	mvn.w	r2, #27
   23fc0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   23fc4:	4648      	mov	r0, r9
   23fc6:	f7ff fe93 	bl	23cf0 <CC_HalMaskInterrupt>
   23fca:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   23fce:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   23fd2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23fd6:	f7ff fe8b 	bl	23cf0 <CC_HalMaskInterrupt>
   23fda:	220a      	movs	r2, #10
   23fdc:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   23fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23fe2:	2b01      	cmp	r3, #1
   23fe4:	9b01      	ldr	r3, [sp, #4]
   23fe6:	d02d      	beq.n	24044 <startTrngHW+0x114>
   23fe8:	6922      	ldr	r2, [r4, #16]
   23fea:	4922      	ldr	r1, [pc, #136]	; (24074 <startTrngHW+0x144>)
   23fec:	fba1 1202 	umull	r1, r2, r1, r2
   23ff0:	0912      	lsrs	r2, r2, #4
   23ff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23ff4:	fb01 f202 	mul.w	r2, r1, r2
   23ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   23ffc:	491c      	ldr	r1, [pc, #112]	; (24070 <startTrngHW+0x140>)
   23ffe:	03d2      	lsls	r2, r2, #15
   24000:	0992      	lsrs	r2, r2, #6
   24002:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   24006:	2201      	movs	r2, #1
   24008:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   2400c:	683a      	ldr	r2, [r7, #0]
   2400e:	6829      	ldr	r1, [r5, #0]
   24010:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   24014:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   24018:	603a      	str	r2, [r7, #0]
   2401a:	6829      	ldr	r1, [r5, #0]
   2401c:	4618      	mov	r0, r3
   2401e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24022:	603a      	str	r2, [r7, #0]
   24024:	b003      	add	sp, #12
   24026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2402a:	4b13      	ldr	r3, [pc, #76]	; (24078 <startTrngHW+0x148>)
   2402c:	4618      	mov	r0, r3
   2402e:	b003      	add	sp, #12
   24030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24034:	4b11      	ldr	r3, [pc, #68]	; (2407c <startTrngHW+0x14c>)
   24036:	4618      	mov	r0, r3
   24038:	b003      	add	sp, #12
   2403a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2403e:	4b0f      	ldr	r3, [pc, #60]	; (2407c <startTrngHW+0x14c>)
   24040:	4618      	mov	r0, r3
   24042:	4770      	bx	lr
   24044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24048:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   2404c:	3101      	adds	r1, #1
   2404e:	d006      	beq.n	2405e <startTrngHW+0x12e>
   24050:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   24054:	4907      	ldr	r1, [pc, #28]	; (24074 <startTrngHW+0x144>)
   24056:	fba1 1202 	umull	r1, r2, r1, r2
   2405a:	0912      	lsrs	r2, r2, #4
   2405c:	e7c9      	b.n	23ff2 <startTrngHW+0xc2>
   2405e:	2216      	movs	r2, #22
   24060:	e7c7      	b.n	23ff2 <startTrngHW+0xc2>
   24062:	f04f 0803 	mov.w	r8, #3
   24066:	e791      	b.n	23f8c <startTrngHW+0x5c>
   24068:	f04f 0802 	mov.w	r8, #2
   2406c:	e78e      	b.n	23f8c <startTrngHW+0x5c>
   2406e:	bf00      	nop
   24070:	5002b000 	.word	0x5002b000
   24074:	aaaaaaab 	.word	0xaaaaaaab
   24078:	00f10c31 	.word	0x00f10c31
   2407c:	00f10c35 	.word	0x00f10c35

00024080 <LLF_RND_RepetitionCounterTest.part.0>:
   24080:	b570      	push	{r4, r5, r6, lr}
   24082:	00c9      	lsls	r1, r1, #3
   24084:	2400      	movs	r4, #0
   24086:	1e4e      	subs	r6, r1, #1
   24088:	f04f 0c01 	mov.w	ip, #1
   2408c:	4625      	mov	r5, r4
   2408e:	46a6      	mov	lr, r4
   24090:	e008      	b.n	240a4 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   24092:	459e      	cmp	lr, r3
   24094:	d015      	beq.n	240c2 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   24096:	2501      	movs	r5, #1
   24098:	45b4      	cmp	ip, r6
   2409a:	d817      	bhi.n	240cc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   2409c:	3401      	adds	r4, #1
   2409e:	f10c 0c01 	add.w	ip, ip, #1
   240a2:	469e      	mov	lr, r3
   240a4:	0963      	lsrs	r3, r4, #5
   240a6:	f004 011f 	and.w	r1, r4, #31
   240aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   240ae:	291f      	cmp	r1, #31
   240b0:	fa23 f301 	lsr.w	r3, r3, r1
   240b4:	bf18      	it	ne
   240b6:	f003 0301 	andne.w	r3, r3, #1
   240ba:	2c00      	cmp	r4, #0
   240bc:	d1e9      	bne.n	24092 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   240be:	2501      	movs	r5, #1
   240c0:	e7ec      	b.n	2409c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   240c2:	3501      	adds	r5, #1
   240c4:	4295      	cmp	r5, r2
   240c6:	d1e7      	bne.n	24098 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   240c8:	4801      	ldr	r0, [pc, #4]	; (240d0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   240ca:	bd70      	pop	{r4, r5, r6, pc}
   240cc:	2000      	movs	r0, #0
   240ce:	bd70      	pop	{r4, r5, r6, pc}
   240d0:	00f10c36 	.word	0x00f10c36

000240d4 <LLF_RND_AdaptiveProportionTest>:
   240d4:	2800      	cmp	r0, #0
   240d6:	d03f      	beq.n	24158 <LLF_RND_AdaptiveProportionTest+0x84>
   240d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240dc:	1e4c      	subs	r4, r1, #1
   240de:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   240e2:	d228      	bcs.n	24136 <LLF_RND_AdaptiveProportionTest+0x62>
   240e4:	b33b      	cbz	r3, 24136 <LLF_RND_AdaptiveProportionTest+0x62>
   240e6:	b332      	cbz	r2, 24136 <LLF_RND_AdaptiveProportionTest+0x62>
   240e8:	f04f 0e00 	mov.w	lr, #0
   240ec:	00cf      	lsls	r7, r1, #3
   240ee:	4676      	mov	r6, lr
   240f0:	4675      	mov	r5, lr
   240f2:	4674      	mov	r4, lr
   240f4:	f103 38ff 	add.w	r8, r3, #4294967295
   240f8:	0961      	lsrs	r1, r4, #5
   240fa:	f004 0c1f 	and.w	ip, r4, #31
   240fe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   24102:	f1bc 0f1f 	cmp.w	ip, #31
   24106:	fa21 f10c 	lsr.w	r1, r1, ip
   2410a:	bf18      	it	ne
   2410c:	f001 0101 	andne.w	r1, r1, #1
   24110:	b1a4      	cbz	r4, 2413c <LLF_RND_AdaptiveProportionTest+0x68>
   24112:	42ab      	cmp	r3, r5
   24114:	d018      	beq.n	24148 <LLF_RND_AdaptiveProportionTest+0x74>
   24116:	428e      	cmp	r6, r1
   24118:	bf08      	it	eq
   2411a:	f10e 0e01 	addeq.w	lr, lr, #1
   2411e:	45a8      	cmp	r8, r5
   24120:	d015      	beq.n	2414e <LLF_RND_AdaptiveProportionTest+0x7a>
   24122:	3501      	adds	r5, #1
   24124:	4631      	mov	r1, r6
   24126:	3401      	adds	r4, #1
   24128:	42bc      	cmp	r4, r7
   2412a:	d001      	beq.n	24130 <LLF_RND_AdaptiveProportionTest+0x5c>
   2412c:	460e      	mov	r6, r1
   2412e:	e7e3      	b.n	240f8 <LLF_RND_AdaptiveProportionTest+0x24>
   24130:	2000      	movs	r0, #0
   24132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24136:	4809      	ldr	r0, [pc, #36]	; (2415c <LLF_RND_AdaptiveProportionTest+0x88>)
   24138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2413c:	f04f 0e01 	mov.w	lr, #1
   24140:	4674      	mov	r4, lr
   24142:	4675      	mov	r5, lr
   24144:	460e      	mov	r6, r1
   24146:	e7d7      	b.n	240f8 <LLF_RND_AdaptiveProportionTest+0x24>
   24148:	2501      	movs	r5, #1
   2414a:	46ae      	mov	lr, r5
   2414c:	e7eb      	b.n	24126 <LLF_RND_AdaptiveProportionTest+0x52>
   2414e:	4572      	cmp	r2, lr
   24150:	d3f1      	bcc.n	24136 <LLF_RND_AdaptiveProportionTest+0x62>
   24152:	4631      	mov	r1, r6
   24154:	461d      	mov	r5, r3
   24156:	e7e6      	b.n	24126 <LLF_RND_AdaptiveProportionTest+0x52>
   24158:	4800      	ldr	r0, [pc, #0]	; (2415c <LLF_RND_AdaptiveProportionTest+0x88>)
   2415a:	4770      	bx	lr
   2415c:	00f10c37 	.word	0x00f10c37

00024160 <getTrngSource>:
   24160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24164:	b091      	sub	sp, #68	; 0x44
   24166:	460d      	mov	r5, r1
   24168:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   2416c:	4681      	mov	r9, r0
   2416e:	2900      	cmp	r1, #0
   24170:	d14c      	bne.n	2420c <getTrngSource+0xac>
   24172:	6928      	ldr	r0, [r5, #16]
   24174:	9006      	str	r0, [sp, #24]
   24176:	981a      	ldr	r0, [sp, #104]	; 0x68
   24178:	601c      	str	r4, [r3, #0]
   2417a:	2300      	movs	r3, #0
   2417c:	6003      	str	r3, [r0, #0]
   2417e:	2a00      	cmp	r2, #0
   24180:	f000 8124 	beq.w	243cc <getTrngSource+0x26c>
   24184:	4b9d      	ldr	r3, [pc, #628]	; (243fc <getTrngSource+0x29c>)
   24186:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24188:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   2418c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   24190:	429a      	cmp	r2, r3
   24192:	d147      	bne.n	24224 <getTrngSource+0xc4>
   24194:	290a      	cmp	r1, #10
   24196:	d145      	bne.n	24224 <getTrngSource+0xc4>
   24198:	f899 3003 	ldrb.w	r3, [r9, #3]
   2419c:	9308      	str	r3, [sp, #32]
   2419e:	f104 0308 	add.w	r3, r4, #8
   241a2:	9a06      	ldr	r2, [sp, #24]
   241a4:	9307      	str	r3, [sp, #28]
   241a6:	4b96      	ldr	r3, [pc, #600]	; (24400 <getTrngSource+0x2a0>)
   241a8:	4c94      	ldr	r4, [pc, #592]	; (243fc <getTrngSource+0x29c>)
   241aa:	fba3 1302 	umull	r1, r3, r3, r2
   241ae:	089b      	lsrs	r3, r3, #2
   241b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   241b4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   241b8:	9303      	str	r3, [sp, #12]
   241ba:	2304      	movs	r3, #4
   241bc:	9305      	str	r3, [sp, #20]
   241be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   241c0:	9e06      	ldr	r6, [sp, #24]
   241c2:	601e      	str	r6, [r3, #0]
   241c4:	2e00      	cmp	r6, #0
   241c6:	d033      	beq.n	24230 <getTrngSource+0xd0>
   241c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   241cc:	2700      	movs	r7, #0
   241ce:	f04f 0a01 	mov.w	sl, #1
   241d2:	f000 fcbf 	bl	24b54 <LLF_RND_TurnOffTrng>
   241d6:	2300      	movs	r3, #0
   241d8:	9309      	str	r3, [sp, #36]	; 0x24
   241da:	f1b9 0f00 	cmp.w	r9, #0
   241de:	f000 80df 	beq.w	243a0 <getTrngSource+0x240>
   241e2:	2d00      	cmp	r5, #0
   241e4:	f000 80dc 	beq.w	243a0 <getTrngSource+0x240>
   241e8:	9b08      	ldr	r3, [sp, #32]
   241ea:	b1eb      	cbz	r3, 24228 <getTrngSource+0xc8>
   241ec:	a908      	add	r1, sp, #32
   241ee:	4628      	mov	r0, r5
   241f0:	f000 fca0 	bl	24b34 <LLF_RND_GetFastestRosc>
   241f4:	2800      	cmp	r0, #0
   241f6:	d03e      	beq.n	24276 <getTrngSource+0x116>
   241f8:	4b82      	ldr	r3, [pc, #520]	; (24404 <getTrngSource+0x2a4>)
   241fa:	4298      	cmp	r0, r3
   241fc:	d118      	bne.n	24230 <getTrngSource+0xd0>
   241fe:	9003      	str	r0, [sp, #12]
   24200:	f000 fca8 	bl	24b54 <LLF_RND_TurnOffTrng>
   24204:	9803      	ldr	r0, [sp, #12]
   24206:	b011      	add	sp, #68	; 0x44
   24208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2420c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   24210:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   24214:	3601      	adds	r6, #1
   24216:	bf14      	ite	ne
   24218:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   2421c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   24220:	9006      	str	r0, [sp, #24]
   24222:	e7a8      	b.n	24176 <getTrngSource+0x16>
   24224:	4878      	ldr	r0, [pc, #480]	; (24408 <getTrngSource+0x2a8>)
   24226:	e7ea      	b.n	241fe <getTrngSource+0x9e>
   24228:	4878      	ldr	r0, [pc, #480]	; (2440c <getTrngSource+0x2ac>)
   2422a:	4b76      	ldr	r3, [pc, #472]	; (24404 <getTrngSource+0x2a4>)
   2422c:	4298      	cmp	r0, r3
   2422e:	d0e6      	beq.n	241fe <getTrngSource+0x9e>
   24230:	9b08      	ldr	r3, [sp, #32]
   24232:	2b08      	cmp	r3, #8
   24234:	f000 80c8 	beq.w	243c8 <getTrngSource+0x268>
   24238:	005b      	lsls	r3, r3, #1
   2423a:	2200      	movs	r2, #0
   2423c:	9308      	str	r3, [sp, #32]
   2423e:	9200      	str	r2, [sp, #0]
   24240:	ab08      	add	r3, sp, #32
   24242:	4629      	mov	r1, r5
   24244:	4648      	mov	r0, r9
   24246:	f7ff fe73 	bl	23f30 <startTrngHW>
   2424a:	4b70      	ldr	r3, [pc, #448]	; (2440c <getTrngSource+0x2ac>)
   2424c:	4298      	cmp	r0, r3
   2424e:	f000 80b7 	beq.w	243c0 <getTrngSource+0x260>
   24252:	2800      	cmp	r0, #0
   24254:	d1d3      	bne.n	241fe <getTrngSource+0x9e>
   24256:	f8d9 2000 	ldr.w	r2, [r9]
   2425a:	0a13      	lsrs	r3, r2, #8
   2425c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   24260:	4313      	orrs	r3, r2
   24262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   24266:	f8c9 3000 	str.w	r3, [r9]
   2426a:	9b05      	ldr	r3, [sp, #20]
   2426c:	3b01      	subs	r3, #1
   2426e:	9305      	str	r3, [sp, #20]
   24270:	d1a5      	bne.n	241be <getTrngSource+0x5e>
   24272:	2000      	movs	r0, #0
   24274:	e7c3      	b.n	241fe <getTrngSource+0x9e>
   24276:	9808      	ldr	r0, [sp, #32]
   24278:	4629      	mov	r1, r5
   2427a:	f000 fc3d 	bl	24af8 <LLF_RND_GetRoscSampleCnt>
   2427e:	2800      	cmp	r0, #0
   24280:	d1ba      	bne.n	241f8 <getTrngSource+0x98>
   24282:	9b08      	ldr	r3, [sp, #32]
   24284:	2b08      	cmp	r3, #8
   24286:	f000 8095 	beq.w	243b4 <getTrngSource+0x254>
   2428a:	2b04      	cmp	r3, #4
   2428c:	f000 8095 	beq.w	243ba <getTrngSource+0x25a>
   24290:	f1a3 0302 	sub.w	r3, r3, #2
   24294:	fab3 f383 	clz	r3, r3
   24298:	095b      	lsrs	r3, r3, #5
   2429a:	9304      	str	r3, [sp, #16]
   2429c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   242a0:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   242a4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   242a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   242aa:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   242ae:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   242b2:	4293      	cmp	r3, r2
   242b4:	d1f6      	bne.n	242a4 <getTrngSource+0x144>
   242b6:	f04f 0b00 	mov.w	fp, #0
   242ba:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   242be:	f04f 30ff 	mov.w	r0, #4294967295
   242c2:	f7ff fd07 	bl	23cd4 <CC_HalClearInterruptBit>
   242c6:	f06f 031b 	mvn.w	r3, #27
   242ca:	4658      	mov	r0, fp
   242cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   242d0:	f7ff fd0e 	bl	23cf0 <CC_HalMaskInterrupt>
   242d4:	9b04      	ldr	r3, [sp, #16]
   242d6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   242da:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   242de:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   242e2:	f7ff fd05 	bl	23cf0 <CC_HalMaskInterrupt>
   242e6:	230a      	movs	r3, #10
   242e8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   242ec:	692b      	ldr	r3, [r5, #16]
   242ee:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   242f2:	fbab 2303 	umull	r2, r3, fp, r3
   242f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   242f8:	091b      	lsrs	r3, r3, #4
   242fa:	fb02 f303 	mul.w	r3, r2, r3
   242fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24302:	03db      	lsls	r3, r3, #15
   24304:	099b      	lsrs	r3, r3, #6
   24306:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2430a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   2430e:	9908      	ldr	r1, [sp, #32]
   24310:	f8d9 2000 	ldr.w	r2, [r9]
   24314:	020b      	lsls	r3, r1, #8
   24316:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2431a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2431e:	4313      	orrs	r3, r2
   24320:	f8c9 3000 	str.w	r3, [r9]
   24324:	a809      	add	r0, sp, #36	; 0x24
   24326:	f000 fbd7 	bl	24ad8 <LLF_RND_WaitRngInterrupt>
   2432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2432c:	f003 031a 	and.w	r3, r3, #26
   24330:	4303      	orrs	r3, r0
   24332:	f47f af7d 	bne.w	24230 <getTrngSource+0xd0>
   24336:	fbab 3b06 	umull	r3, fp, fp, r6
   2433a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2433e:	930a      	str	r3, [sp, #40]	; 0x28
   24340:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   24344:	930b      	str	r3, [sp, #44]	; 0x2c
   24346:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2434a:	930c      	str	r3, [sp, #48]	; 0x30
   2434c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   24350:	930d      	str	r3, [sp, #52]	; 0x34
   24352:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   24356:	930e      	str	r3, [sp, #56]	; 0x38
   24358:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2435c:	930f      	str	r3, [sp, #60]	; 0x3c
   2435e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   24362:	d101      	bne.n	24368 <getTrngSource+0x208>
   24364:	9b03      	ldr	r3, [sp, #12]
   24366:	b9eb      	cbnz	r3, 243a4 <getTrngSource+0x244>
   24368:	4640      	mov	r0, r8
   2436a:	2218      	movs	r2, #24
   2436c:	a90a      	add	r1, sp, #40	; 0x28
   2436e:	3e18      	subs	r6, #24
   24370:	f108 0818 	add.w	r8, r8, #24
   24374:	f7ff fd3c 	bl	23df0 <CC_PalMemCopyPlat>
   24378:	3701      	adds	r7, #1
   2437a:	2e00      	cmp	r6, #0
   2437c:	f47f af29 	bne.w	241d2 <getTrngSource+0x72>
   24380:	9b06      	ldr	r3, [sp, #24]
   24382:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   24386:	d836      	bhi.n	243f6 <getTrngSource+0x296>
   24388:	9e07      	ldr	r6, [sp, #28]
   2438a:	696a      	ldr	r2, [r5, #20]
   2438c:	4619      	mov	r1, r3
   2438e:	4630      	mov	r0, r6
   24390:	461f      	mov	r7, r3
   24392:	f7ff fe75 	bl	24080 <LLF_RND_RepetitionCounterTest.part.0>
   24396:	b320      	cbz	r0, 243e2 <getTrngSource+0x282>
   24398:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2439a:	2300      	movs	r3, #0
   2439c:	6013      	str	r3, [r2, #0]
   2439e:	e72b      	b.n	241f8 <getTrngSource+0x98>
   243a0:	481b      	ldr	r0, [pc, #108]	; (24410 <getTrngSource+0x2b0>)
   243a2:	e729      	b.n	241f8 <getTrngSource+0x98>
   243a4:	4640      	mov	r0, r8
   243a6:	461a      	mov	r2, r3
   243a8:	a90a      	add	r1, sp, #40	; 0x28
   243aa:	1af6      	subs	r6, r6, r3
   243ac:	4498      	add	r8, r3
   243ae:	f7ff fd1f 	bl	23df0 <CC_PalMemCopyPlat>
   243b2:	e7e1      	b.n	24378 <getTrngSource+0x218>
   243b4:	2303      	movs	r3, #3
   243b6:	9304      	str	r3, [sp, #16]
   243b8:	e770      	b.n	2429c <getTrngSource+0x13c>
   243ba:	2302      	movs	r3, #2
   243bc:	9304      	str	r3, [sp, #16]
   243be:	e76d      	b.n	2429c <getTrngSource+0x13c>
   243c0:	6a2b      	ldr	r3, [r5, #32]
   243c2:	2b00      	cmp	r3, #0
   243c4:	f43f af1b 	beq.w	241fe <getTrngSource+0x9e>
   243c8:	4812      	ldr	r0, [pc, #72]	; (24414 <getTrngSource+0x2b4>)
   243ca:	e718      	b.n	241fe <getTrngSource+0x9e>
   243cc:	9100      	str	r1, [sp, #0]
   243ce:	ab08      	add	r3, sp, #32
   243d0:	2201      	movs	r2, #1
   243d2:	4629      	mov	r1, r5
   243d4:	4648      	mov	r0, r9
   243d6:	f7ff fdab 	bl	23f30 <startTrngHW>
   243da:	2800      	cmp	r0, #0
   243dc:	f43f aedf 	beq.w	2419e <getTrngSource+0x3e>
   243e0:	e70d      	b.n	241fe <getTrngSource+0x9e>
   243e2:	69aa      	ldr	r2, [r5, #24]
   243e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   243e8:	4639      	mov	r1, r7
   243ea:	4630      	mov	r0, r6
   243ec:	f7ff fe72 	bl	240d4 <LLF_RND_AdaptiveProportionTest>
   243f0:	2800      	cmp	r0, #0
   243f2:	d1d1      	bne.n	24398 <getTrngSource+0x238>
   243f4:	e73d      	b.n	24272 <getTrngSource+0x112>
   243f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   243f8:	601e      	str	r6, [r3, #0]
   243fa:	e719      	b.n	24230 <getTrngSource+0xd0>
   243fc:	5002b000 	.word	0x5002b000
   24400:	aaaaaaab 	.word	0xaaaaaaab
   24404:	00f10c02 	.word	0x00f10c02
   24408:	00f10c30 	.word	0x00f10c30
   2440c:	00f10c31 	.word	0x00f10c31
   24410:	00f10c35 	.word	0x00f10c35
   24414:	00f10c32 	.word	0x00f10c32

00024418 <LLF_RND_GetTrngSource>:
   24418:	b410      	push	{r4}
   2441a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   2441e:	9401      	str	r4, [sp, #4]
   24420:	9c03      	ldr	r4, [sp, #12]
   24422:	9402      	str	r4, [sp, #8]
   24424:	2400      	movs	r4, #0
   24426:	9403      	str	r4, [sp, #12]
   24428:	bc10      	pop	{r4}
   2442a:	f7ff be99 	b.w	24160 <getTrngSource>
   2442e:	bf00      	nop

00024430 <LLF_RND_RunTrngStartupTest>:
   24430:	b510      	push	{r4, lr}
   24432:	b086      	sub	sp, #24
   24434:	ab05      	add	r3, sp, #20
   24436:	2401      	movs	r4, #1
   24438:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2443c:	9300      	str	r3, [sp, #0]
   2443e:	2200      	movs	r2, #0
   24440:	ab04      	add	r3, sp, #16
   24442:	f7ff fe8d 	bl	24160 <getTrngSource>
   24446:	b006      	add	sp, #24
   24448:	bd10      	pop	{r4, pc}
   2444a:	bf00      	nop

0002444c <mbedtls_hardware_poll>:
   2444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2444e:	b089      	sub	sp, #36	; 0x24
   24450:	9205      	str	r2, [sp, #20]
   24452:	2900      	cmp	r1, #0
   24454:	d064      	beq.n	24520 <mbedtls_hardware_poll+0xd4>
   24456:	461c      	mov	r4, r3
   24458:	2b00      	cmp	r3, #0
   2445a:	d061      	beq.n	24520 <mbedtls_hardware_poll+0xd4>
   2445c:	4615      	mov	r5, r2
   2445e:	2a00      	cmp	r2, #0
   24460:	d05e      	beq.n	24520 <mbedtls_hardware_poll+0xd4>
   24462:	4f31      	ldr	r7, [pc, #196]	; (24528 <mbedtls_hardware_poll+0xdc>)
   24464:	460e      	mov	r6, r1
   24466:	6838      	ldr	r0, [r7, #0]
   24468:	f04f 31ff 	mov.w	r1, #4294967295
   2446c:	f7ff fcdc 	bl	23e28 <CC_PalMutexLock>
   24470:	2800      	cmp	r0, #0
   24472:	d14b      	bne.n	2450c <mbedtls_hardware_poll+0xc0>
   24474:	2000      	movs	r0, #0
   24476:	f7ff fd07 	bl	23e88 <CC_PalPowerSaveModeSelect>
   2447a:	2800      	cmp	r0, #0
   2447c:	d142      	bne.n	24504 <mbedtls_hardware_poll+0xb8>
   2447e:	482b      	ldr	r0, [pc, #172]	; (2452c <mbedtls_hardware_poll+0xe0>)
   24480:	f000 fa9a 	bl	249b8 <RNG_PLAT_SetUserRngParameters>
   24484:	b1d8      	cbz	r0, 244be <mbedtls_hardware_poll+0x72>
   24486:	2001      	movs	r0, #1
   24488:	f04f 36ff 	mov.w	r6, #4294967295
   2448c:	f7ff fcfc 	bl	23e88 <CC_PalPowerSaveModeSelect>
   24490:	2800      	cmp	r0, #0
   24492:	d133      	bne.n	244fc <mbedtls_hardware_poll+0xb0>
   24494:	4826      	ldr	r0, [pc, #152]	; (24530 <mbedtls_hardware_poll+0xe4>)
   24496:	f44f 7108 	mov.w	r1, #544	; 0x220
   2449a:	f7fe fe63 	bl	23164 <mbedtls_zeroize_internal>
   2449e:	4825      	ldr	r0, [pc, #148]	; (24534 <mbedtls_hardware_poll+0xe8>)
   244a0:	2104      	movs	r1, #4
   244a2:	f7fe fe5f 	bl	23164 <mbedtls_zeroize_internal>
   244a6:	4821      	ldr	r0, [pc, #132]	; (2452c <mbedtls_hardware_poll+0xe0>)
   244a8:	2128      	movs	r1, #40	; 0x28
   244aa:	f7fe fe5b 	bl	23164 <mbedtls_zeroize_internal>
   244ae:	6838      	ldr	r0, [r7, #0]
   244b0:	f7ff fcc2 	bl	23e38 <CC_PalMutexUnlock>
   244b4:	2800      	cmp	r0, #0
   244b6:	d12d      	bne.n	24514 <mbedtls_hardware_poll+0xc8>
   244b8:	4630      	mov	r0, r6
   244ba:	b009      	add	sp, #36	; 0x24
   244bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   244be:	4b1c      	ldr	r3, [pc, #112]	; (24530 <mbedtls_hardware_poll+0xe4>)
   244c0:	9302      	str	r3, [sp, #8]
   244c2:	ab07      	add	r3, sp, #28
   244c4:	9003      	str	r0, [sp, #12]
   244c6:	4602      	mov	r2, r0
   244c8:	9300      	str	r3, [sp, #0]
   244ca:	4918      	ldr	r1, [pc, #96]	; (2452c <mbedtls_hardware_poll+0xe0>)
   244cc:	4819      	ldr	r0, [pc, #100]	; (24534 <mbedtls_hardware_poll+0xe8>)
   244ce:	9401      	str	r4, [sp, #4]
   244d0:	ab05      	add	r3, sp, #20
   244d2:	f7ff ffa1 	bl	24418 <LLF_RND_GetTrngSource>
   244d6:	4603      	mov	r3, r0
   244d8:	2800      	cmp	r0, #0
   244da:	d1d4      	bne.n	24486 <mbedtls_hardware_poll+0x3a>
   244dc:	6822      	ldr	r2, [r4, #0]
   244de:	42aa      	cmp	r2, r5
   244e0:	d3d1      	bcc.n	24486 <mbedtls_hardware_poll+0x3a>
   244e2:	9907      	ldr	r1, [sp, #28]
   244e4:	4630      	mov	r0, r6
   244e6:	3108      	adds	r1, #8
   244e8:	462a      	mov	r2, r5
   244ea:	461e      	mov	r6, r3
   244ec:	f7ff fc80 	bl	23df0 <CC_PalMemCopyPlat>
   244f0:	6025      	str	r5, [r4, #0]
   244f2:	2001      	movs	r0, #1
   244f4:	f7ff fcc8 	bl	23e88 <CC_PalPowerSaveModeSelect>
   244f8:	2800      	cmp	r0, #0
   244fa:	d0cb      	beq.n	24494 <mbedtls_hardware_poll+0x48>
   244fc:	480e      	ldr	r0, [pc, #56]	; (24538 <mbedtls_hardware_poll+0xec>)
   244fe:	f7fe fd33 	bl	22f68 <CC_PalAbort>
   24502:	e7c7      	b.n	24494 <mbedtls_hardware_poll+0x48>
   24504:	480d      	ldr	r0, [pc, #52]	; (2453c <mbedtls_hardware_poll+0xf0>)
   24506:	f7fe fd2f 	bl	22f68 <CC_PalAbort>
   2450a:	e7b8      	b.n	2447e <mbedtls_hardware_poll+0x32>
   2450c:	480c      	ldr	r0, [pc, #48]	; (24540 <mbedtls_hardware_poll+0xf4>)
   2450e:	f7fe fd2b 	bl	22f68 <CC_PalAbort>
   24512:	e7af      	b.n	24474 <mbedtls_hardware_poll+0x28>
   24514:	480b      	ldr	r0, [pc, #44]	; (24544 <mbedtls_hardware_poll+0xf8>)
   24516:	f7fe fd27 	bl	22f68 <CC_PalAbort>
   2451a:	4630      	mov	r0, r6
   2451c:	b009      	add	sp, #36	; 0x24
   2451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24520:	f04f 36ff 	mov.w	r6, #4294967295
   24524:	e7c8      	b.n	244b8 <mbedtls_hardware_poll+0x6c>
   24526:	bf00      	nop
   24528:	20000890 	.word	0x20000890
   2452c:	20003b78 	.word	0x20003b78
   24530:	20003958 	.word	0x20003958
   24534:	20003954 	.word	0x20003954
   24538:	0002c318 	.word	0x0002c318
   2453c:	0002c2f8 	.word	0x0002c2f8
   24540:	0002c2e0 	.word	0x0002c2e0
   24544:	0002c370 	.word	0x0002c370

00024548 <cc_mbedtls_aes_init>:
   24548:	b510      	push	{r4, lr}
   2454a:	4604      	mov	r4, r0
   2454c:	b130      	cbz	r0, 2455c <cc_mbedtls_aes_init+0x14>
   2454e:	2200      	movs	r2, #0
   24550:	2301      	movs	r3, #1
   24552:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   24556:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2455a:	bd10      	pop	{r4, pc}
   2455c:	4801      	ldr	r0, [pc, #4]	; (24564 <cc_mbedtls_aes_init+0x1c>)
   2455e:	f7fe fd03 	bl	22f68 <CC_PalAbort>
   24562:	e7f4      	b.n	2454e <cc_mbedtls_aes_init+0x6>
   24564:	0002c388 	.word	0x0002c388

00024568 <cc_mbedtls_aes_free>:
   24568:	b118      	cbz	r0, 24572 <cc_mbedtls_aes_free+0xa>
   2456a:	2274      	movs	r2, #116	; 0x74
   2456c:	2100      	movs	r1, #0
   2456e:	f7ff bc41 	b.w	23df4 <CC_PalMemSetPlat>
   24572:	4770      	bx	lr

00024574 <cc_mbedtls_aes_setkey_enc>:
   24574:	b190      	cbz	r0, 2459c <cc_mbedtls_aes_setkey_enc+0x28>
   24576:	b1a1      	cbz	r1, 245a2 <cc_mbedtls_aes_setkey_enc+0x2e>
   24578:	b510      	push	{r4, lr}
   2457a:	2a80      	cmp	r2, #128	; 0x80
   2457c:	f04f 0400 	mov.w	r4, #0
   24580:	6384      	str	r4, [r0, #56]	; 0x38
   24582:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   24586:	d106      	bne.n	24596 <cc_mbedtls_aes_setkey_enc+0x22>
   24588:	2210      	movs	r2, #16
   2458a:	6304      	str	r4, [r0, #48]	; 0x30
   2458c:	4410      	add	r0, r2
   2458e:	f7ff fc2f 	bl	23df0 <CC_PalMemCopyPlat>
   24592:	4620      	mov	r0, r4
   24594:	bd10      	pop	{r4, pc}
   24596:	f06f 001f 	mvn.w	r0, #31
   2459a:	bd10      	pop	{r4, pc}
   2459c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   245a0:	4770      	bx	lr
   245a2:	f06f 001f 	mvn.w	r0, #31
   245a6:	4770      	bx	lr

000245a8 <cc_mbedtls_aes_crypt_ecb>:
   245a8:	b328      	cbz	r0, 245f6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   245aa:	b322      	cbz	r2, 245f6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   245ac:	b31b      	cbz	r3, 245f6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   245ae:	2901      	cmp	r1, #1
   245b0:	d821      	bhi.n	245f6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   245b2:	b570      	push	{r4, r5, r6, lr}
   245b4:	4604      	mov	r4, r0
   245b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   245b8:	b086      	sub	sp, #24
   245ba:	d017      	beq.n	245ec <cc_mbedtls_aes_crypt_ecb+0x44>
   245bc:	2901      	cmp	r1, #1
   245be:	d117      	bne.n	245f0 <cc_mbedtls_aes_crypt_ecb+0x48>
   245c0:	2510      	movs	r5, #16
   245c2:	2100      	movs	r1, #0
   245c4:	eb0d 0605 	add.w	r6, sp, r5
   245c8:	6361      	str	r1, [r4, #52]	; 0x34
   245ca:	4610      	mov	r0, r2
   245cc:	9500      	str	r5, [sp, #0]
   245ce:	9601      	str	r6, [sp, #4]
   245d0:	aa02      	add	r2, sp, #8
   245d2:	4629      	mov	r1, r5
   245d4:	f000 faca 	bl	24b6c <SetDataBuffersInfo>
   245d8:	b950      	cbnz	r0, 245f0 <cc_mbedtls_aes_crypt_ecb+0x48>
   245da:	462b      	mov	r3, r5
   245dc:	4632      	mov	r2, r6
   245de:	a902      	add	r1, sp, #8
   245e0:	4620      	mov	r0, r4
   245e2:	f000 fd4b 	bl	2507c <ProcessAesDrv>
   245e6:	b918      	cbnz	r0, 245f0 <cc_mbedtls_aes_crypt_ecb+0x48>
   245e8:	b006      	add	sp, #24
   245ea:	bd70      	pop	{r4, r5, r6, pc}
   245ec:	2900      	cmp	r1, #0
   245ee:	d0e7      	beq.n	245c0 <cc_mbedtls_aes_crypt_ecb+0x18>
   245f0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   245f4:	e7f8      	b.n	245e8 <cc_mbedtls_aes_crypt_ecb+0x40>
   245f6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   245fa:	4770      	bx	lr

000245fc <cc_mbedtls_sha256_init>:
   245fc:	b510      	push	{r4, lr}
   245fe:	4604      	mov	r4, r0
   24600:	b128      	cbz	r0, 2460e <cc_mbedtls_sha256_init+0x12>
   24602:	4620      	mov	r0, r4
   24604:	21f4      	movs	r1, #244	; 0xf4
   24606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2460a:	f7ff bbf5 	b.w	23df8 <CC_PalMemSetZeroPlat>
   2460e:	4804      	ldr	r0, [pc, #16]	; (24620 <cc_mbedtls_sha256_init+0x24>)
   24610:	f7fe fcaa 	bl	22f68 <CC_PalAbort>
   24614:	4620      	mov	r0, r4
   24616:	21f4      	movs	r1, #244	; 0xf4
   24618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2461c:	f7ff bbec 	b.w	23df8 <CC_PalMemSetZeroPlat>
   24620:	0002c39c 	.word	0x0002c39c

00024624 <cc_mbedtls_sha256_free>:
   24624:	b110      	cbz	r0, 2462c <cc_mbedtls_sha256_free+0x8>
   24626:	21f4      	movs	r1, #244	; 0xf4
   24628:	f7fe bd9c 	b.w	23164 <mbedtls_zeroize_internal>
   2462c:	4770      	bx	lr
   2462e:	bf00      	nop

00024630 <cc_mbedtls_sha256_starts>:
   24630:	b508      	push	{r3, lr}
   24632:	b161      	cbz	r1, 2464e <cc_mbedtls_sha256_starts+0x1e>
   24634:	2901      	cmp	r1, #1
   24636:	d107      	bne.n	24648 <cc_mbedtls_sha256_starts+0x18>
   24638:	2102      	movs	r1, #2
   2463a:	f000 f85b 	bl	246f4 <mbedtls_sha_starts_internal>
   2463e:	2800      	cmp	r0, #0
   24640:	bf18      	it	ne
   24642:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   24646:	bd08      	pop	{r3, pc}
   24648:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2464c:	bd08      	pop	{r3, pc}
   2464e:	2101      	movs	r1, #1
   24650:	f000 f850 	bl	246f4 <mbedtls_sha_starts_internal>
   24654:	e7f3      	b.n	2463e <cc_mbedtls_sha256_starts+0xe>
   24656:	bf00      	nop

00024658 <cc_mbedtls_sha256_update>:
   24658:	b530      	push	{r4, r5, lr}
   2465a:	4605      	mov	r5, r0
   2465c:	1888      	adds	r0, r1, r2
   2465e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   24662:	b0a1      	sub	sp, #132	; 0x84
   24664:	460b      	mov	r3, r1
   24666:	4614      	mov	r4, r2
   24668:	d801      	bhi.n	2466e <cc_mbedtls_sha256_update+0x16>
   2466a:	2a80      	cmp	r2, #128	; 0x80
   2466c:	d90c      	bls.n	24688 <cc_mbedtls_sha256_update+0x30>
   2466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24672:	d917      	bls.n	246a4 <cc_mbedtls_sha256_update+0x4c>
   24674:	4622      	mov	r2, r4
   24676:	4619      	mov	r1, r3
   24678:	4628      	mov	r0, r5
   2467a:	f000 f87d 	bl	24778 <mbedtls_sha_update_internal>
   2467e:	4604      	mov	r4, r0
   24680:	b984      	cbnz	r4, 246a4 <cc_mbedtls_sha256_update+0x4c>
   24682:	4620      	mov	r0, r4
   24684:	b021      	add	sp, #132	; 0x84
   24686:	bd30      	pop	{r4, r5, pc}
   24688:	4668      	mov	r0, sp
   2468a:	f7ff fbb1 	bl	23df0 <CC_PalMemCopyPlat>
   2468e:	4622      	mov	r2, r4
   24690:	4669      	mov	r1, sp
   24692:	4628      	mov	r0, r5
   24694:	f000 f870 	bl	24778 <mbedtls_sha_update_internal>
   24698:	2180      	movs	r1, #128	; 0x80
   2469a:	4604      	mov	r4, r0
   2469c:	4668      	mov	r0, sp
   2469e:	f7ff fbab 	bl	23df8 <CC_PalMemSetZeroPlat>
   246a2:	e7ed      	b.n	24680 <cc_mbedtls_sha256_update+0x28>
   246a4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   246a8:	e7eb      	b.n	24682 <cc_mbedtls_sha256_update+0x2a>
   246aa:	bf00      	nop

000246ac <cc_mbedtls_sha256_finish>:
   246ac:	b570      	push	{r4, r5, r6, lr}
   246ae:	b1e8      	cbz	r0, 246ec <cc_mbedtls_sha256_finish+0x40>
   246b0:	460e      	mov	r6, r1
   246b2:	b1d9      	cbz	r1, 246ec <cc_mbedtls_sha256_finish+0x40>
   246b4:	4604      	mov	r4, r0
   246b6:	f000 f831 	bl	2471c <mbedtls_sha_finish_internal>
   246ba:	4605      	mov	r5, r0
   246bc:	b9b0      	cbnz	r0, 246ec <cc_mbedtls_sha256_finish+0x40>
   246be:	6823      	ldr	r3, [r4, #0]
   246c0:	2b01      	cmp	r3, #1
   246c2:	d00b      	beq.n	246dc <cc_mbedtls_sha256_finish+0x30>
   246c4:	2b02      	cmp	r3, #2
   246c6:	d001      	beq.n	246cc <cc_mbedtls_sha256_finish+0x20>
   246c8:	4628      	mov	r0, r5
   246ca:	bd70      	pop	{r4, r5, r6, pc}
   246cc:	221c      	movs	r2, #28
   246ce:	f104 0108 	add.w	r1, r4, #8
   246d2:	4630      	mov	r0, r6
   246d4:	f7ff fb8c 	bl	23df0 <CC_PalMemCopyPlat>
   246d8:	4628      	mov	r0, r5
   246da:	bd70      	pop	{r4, r5, r6, pc}
   246dc:	2220      	movs	r2, #32
   246de:	f104 0108 	add.w	r1, r4, #8
   246e2:	4630      	mov	r0, r6
   246e4:	f7ff fb84 	bl	23df0 <CC_PalMemCopyPlat>
   246e8:	4628      	mov	r0, r5
   246ea:	bd70      	pop	{r4, r5, r6, pc}
   246ec:	f06f 0536 	mvn.w	r5, #54	; 0x36
   246f0:	e7ea      	b.n	246c8 <cc_mbedtls_sha256_finish+0x1c>
   246f2:	bf00      	nop

000246f4 <mbedtls_sha_starts_internal>:
   246f4:	b178      	cbz	r0, 24716 <mbedtls_sha_starts_internal+0x22>
   246f6:	b538      	push	{r3, r4, r5, lr}
   246f8:	4604      	mov	r4, r0
   246fa:	460d      	mov	r5, r1
   246fc:	21f0      	movs	r1, #240	; 0xf0
   246fe:	f7ff fb7b 	bl	23df8 <CC_PalMemSetZeroPlat>
   24702:	2340      	movs	r3, #64	; 0x40
   24704:	6025      	str	r5, [r4, #0]
   24706:	65e3      	str	r3, [r4, #92]	; 0x5c
   24708:	4620      	mov	r0, r4
   2470a:	f000 fa63 	bl	24bd4 <InitHashDrv>
   2470e:	3800      	subs	r0, #0
   24710:	bf18      	it	ne
   24712:	2001      	movne	r0, #1
   24714:	bd38      	pop	{r3, r4, r5, pc}
   24716:	2001      	movs	r0, #1
   24718:	4770      	bx	lr
   2471a:	bf00      	nop

0002471c <mbedtls_sha_finish_internal>:
   2471c:	b570      	push	{r4, r5, r6, lr}
   2471e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   24720:	b0a4      	sub	sp, #144	; 0x90
   24722:	4604      	mov	r4, r0
   24724:	ae04      	add	r6, sp, #16
   24726:	b9e5      	cbnz	r5, 24762 <mbedtls_sha_finish_internal+0x46>
   24728:	2201      	movs	r2, #1
   2472a:	2300      	movs	r3, #0
   2472c:	6062      	str	r2, [r4, #4]
   2472e:	4630      	mov	r0, r6
   24730:	e9cd 3300 	strd	r3, r3, [sp]
   24734:	aa02      	add	r2, sp, #8
   24736:	4629      	mov	r1, r5
   24738:	f000 fa18 	bl	24b6c <SetDataBuffersInfo>
   2473c:	b110      	cbz	r0, 24744 <mbedtls_sha_finish_internal+0x28>
   2473e:	2001      	movs	r0, #1
   24740:	b024      	add	sp, #144	; 0x90
   24742:	bd70      	pop	{r4, r5, r6, pc}
   24744:	462a      	mov	r2, r5
   24746:	a902      	add	r1, sp, #8
   24748:	4620      	mov	r0, r4
   2474a:	f000 fa6d 	bl	24c28 <ProcessHashDrv>
   2474e:	2800      	cmp	r0, #0
   24750:	d1f5      	bne.n	2473e <mbedtls_sha_finish_internal+0x22>
   24752:	4620      	mov	r0, r4
   24754:	f000 fb7e 	bl	24e54 <FinishHashDrv>
   24758:	2800      	cmp	r0, #0
   2475a:	d1f0      	bne.n	2473e <mbedtls_sha_finish_internal+0x22>
   2475c:	6620      	str	r0, [r4, #96]	; 0x60
   2475e:	b024      	add	sp, #144	; 0x90
   24760:	bd70      	pop	{r4, r5, r6, pc}
   24762:	2d80      	cmp	r5, #128	; 0x80
   24764:	462a      	mov	r2, r5
   24766:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2476a:	bf28      	it	cs
   2476c:	2280      	movcs	r2, #128	; 0x80
   2476e:	4630      	mov	r0, r6
   24770:	f7ff fb3e 	bl	23df0 <CC_PalMemCopyPlat>
   24774:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24776:	e7d7      	b.n	24728 <mbedtls_sha_finish_internal+0xc>

00024778 <mbedtls_sha_update_internal>:
   24778:	2800      	cmp	r0, #0
   2477a:	f000 80cd 	beq.w	24918 <mbedtls_sha_update_internal+0x1a0>
   2477e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24782:	4615      	mov	r5, r2
   24784:	b0a5      	sub	sp, #148	; 0x94
   24786:	2a00      	cmp	r2, #0
   24788:	f000 80b4 	beq.w	248f4 <mbedtls_sha_update_internal+0x17c>
   2478c:	460f      	mov	r7, r1
   2478e:	2900      	cmp	r1, #0
   24790:	f000 80ac 	beq.w	248ec <mbedtls_sha_update_internal+0x174>
   24794:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24798:	4606      	mov	r6, r0
   2479a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2479c:	d37d      	bcc.n	2489a <mbedtls_sha_update_internal+0x122>
   2479e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   247a2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   247a6:	e014      	b.n	247d2 <mbedtls_sha_update_internal+0x5a>
   247a8:	4283      	cmp	r3, r0
   247aa:	46ba      	mov	sl, r7
   247ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
   247b0:	d029      	beq.n	24806 <mbedtls_sha_update_internal+0x8e>
   247b2:	fbb4 fbf3 	udiv	fp, r4, r3
   247b6:	fb03 fb0b 	mul.w	fp, r3, fp
   247ba:	f1bb 0f00 	cmp.w	fp, #0
   247be:	d144      	bne.n	2484a <mbedtls_sha_update_internal+0xd2>
   247c0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   247c4:	4447      	add	r7, r8
   247c6:	3dff      	subs	r5, #255	; 0xff
   247c8:	2c00      	cmp	r4, #0
   247ca:	d159      	bne.n	24880 <mbedtls_sha_update_internal+0x108>
   247cc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   247d0:	d363      	bcc.n	2489a <mbedtls_sha_update_internal+0x122>
   247d2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   247d4:	1a1c      	subs	r4, r3, r0
   247d6:	fbb4 f2f3 	udiv	r2, r4, r3
   247da:	fb03 4412 	mls	r4, r3, r2, r4
   247de:	2c00      	cmp	r4, #0
   247e0:	d0e2      	beq.n	247a8 <mbedtls_sha_update_internal+0x30>
   247e2:	4544      	cmp	r4, r8
   247e4:	bf28      	it	cs
   247e6:	4644      	movcs	r4, r8
   247e8:	4622      	mov	r2, r4
   247ea:	4448      	add	r0, r9
   247ec:	4639      	mov	r1, r7
   247ee:	f7ff faff 	bl	23df0 <CC_PalMemCopyPlat>
   247f2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   247f4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   247f6:	4420      	add	r0, r4
   247f8:	4283      	cmp	r3, r0
   247fa:	eb07 0a04 	add.w	sl, r7, r4
   247fe:	6630      	str	r0, [r6, #96]	; 0x60
   24800:	eba8 0404 	sub.w	r4, r8, r4
   24804:	d1d5      	bne.n	247b2 <mbedtls_sha_update_internal+0x3a>
   24806:	2b80      	cmp	r3, #128	; 0x80
   24808:	bf28      	it	cs
   2480a:	2380      	movcs	r3, #128	; 0x80
   2480c:	461a      	mov	r2, r3
   2480e:	4649      	mov	r1, r9
   24810:	a804      	add	r0, sp, #16
   24812:	f7ff faed 	bl	23df0 <CC_PalMemCopyPlat>
   24816:	2300      	movs	r3, #0
   24818:	e9cd 3300 	strd	r3, r3, [sp]
   2481c:	aa02      	add	r2, sp, #8
   2481e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   24820:	a804      	add	r0, sp, #16
   24822:	f000 f9a3 	bl	24b6c <SetDataBuffersInfo>
   24826:	2800      	cmp	r0, #0
   24828:	d160      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   2482a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2482c:	a902      	add	r1, sp, #8
   2482e:	4630      	mov	r0, r6
   24830:	f000 f9fa 	bl	24c28 <ProcessHashDrv>
   24834:	2800      	cmp	r0, #0
   24836:	d159      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   24838:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2483a:	fbb4 fbf3 	udiv	fp, r4, r3
   2483e:	fb03 fb0b 	mul.w	fp, r3, fp
   24842:	6630      	str	r0, [r6, #96]	; 0x60
   24844:	f1bb 0f00 	cmp.w	fp, #0
   24848:	d0ba      	beq.n	247c0 <mbedtls_sha_update_internal+0x48>
   2484a:	2300      	movs	r3, #0
   2484c:	e9cd 3300 	strd	r3, r3, [sp]
   24850:	aa02      	add	r2, sp, #8
   24852:	4659      	mov	r1, fp
   24854:	4650      	mov	r0, sl
   24856:	f000 f989 	bl	24b6c <SetDataBuffersInfo>
   2485a:	2800      	cmp	r0, #0
   2485c:	d146      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   2485e:	a902      	add	r1, sp, #8
   24860:	465a      	mov	r2, fp
   24862:	4630      	mov	r0, r6
   24864:	f000 f9e0 	bl	24c28 <ProcessHashDrv>
   24868:	2800      	cmp	r0, #0
   2486a:	d13f      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   2486c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24870:	eba4 040b 	sub.w	r4, r4, fp
   24874:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24876:	44da      	add	sl, fp
   24878:	4447      	add	r7, r8
   2487a:	3dff      	subs	r5, #255	; 0xff
   2487c:	2c00      	cmp	r4, #0
   2487e:	d0a5      	beq.n	247cc <mbedtls_sha_update_internal+0x54>
   24880:	3019      	adds	r0, #25
   24882:	4651      	mov	r1, sl
   24884:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   24888:	4622      	mov	r2, r4
   2488a:	f7ff fab1 	bl	23df0 <CC_PalMemCopyPlat>
   2488e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24890:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   24894:	4420      	add	r0, r4
   24896:	6630      	str	r0, [r6, #96]	; 0x60
   24898:	d29b      	bcs.n	247d2 <mbedtls_sha_update_internal+0x5a>
   2489a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2489c:	1a14      	subs	r4, r2, r0
   2489e:	fbb4 f3f2 	udiv	r3, r4, r2
   248a2:	fb02 4413 	mls	r4, r2, r3, r4
   248a6:	42ac      	cmp	r4, r5
   248a8:	bf28      	it	cs
   248aa:	462c      	movcs	r4, r5
   248ac:	bb34      	cbnz	r4, 248fc <mbedtls_sha_update_internal+0x184>
   248ae:	4290      	cmp	r0, r2
   248b0:	d034      	beq.n	2491c <mbedtls_sha_update_internal+0x1a4>
   248b2:	fbb5 f4f2 	udiv	r4, r5, r2
   248b6:	fb02 f404 	mul.w	r4, r2, r4
   248ba:	b96c      	cbnz	r4, 248d8 <mbedtls_sha_update_internal+0x160>
   248bc:	b1d5      	cbz	r5, 248f4 <mbedtls_sha_update_internal+0x17c>
   248be:	6e33      	ldr	r3, [r6, #96]	; 0x60
   248c0:	3319      	adds	r3, #25
   248c2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   248c6:	462a      	mov	r2, r5
   248c8:	4639      	mov	r1, r7
   248ca:	f7ff fa91 	bl	23df0 <CC_PalMemCopyPlat>
   248ce:	6e33      	ldr	r3, [r6, #96]	; 0x60
   248d0:	442b      	add	r3, r5
   248d2:	2000      	movs	r0, #0
   248d4:	6633      	str	r3, [r6, #96]	; 0x60
   248d6:	e00a      	b.n	248ee <mbedtls_sha_update_internal+0x176>
   248d8:	2300      	movs	r3, #0
   248da:	e9cd 3300 	strd	r3, r3, [sp]
   248de:	aa02      	add	r2, sp, #8
   248e0:	4621      	mov	r1, r4
   248e2:	4638      	mov	r0, r7
   248e4:	f000 f942 	bl	24b6c <SetDataBuffersInfo>
   248e8:	2800      	cmp	r0, #0
   248ea:	d033      	beq.n	24954 <mbedtls_sha_update_internal+0x1dc>
   248ec:	2001      	movs	r0, #1
   248ee:	b025      	add	sp, #148	; 0x94
   248f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248f4:	4628      	mov	r0, r5
   248f6:	b025      	add	sp, #148	; 0x94
   248f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248fc:	f106 0364 	add.w	r3, r6, #100	; 0x64
   24900:	4639      	mov	r1, r7
   24902:	4622      	mov	r2, r4
   24904:	4418      	add	r0, r3
   24906:	f7ff fa73 	bl	23df0 <CC_PalMemCopyPlat>
   2490a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2490c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2490e:	4420      	add	r0, r4
   24910:	1b2d      	subs	r5, r5, r4
   24912:	4427      	add	r7, r4
   24914:	6630      	str	r0, [r6, #96]	; 0x60
   24916:	e7ca      	b.n	248ae <mbedtls_sha_update_internal+0x136>
   24918:	2001      	movs	r0, #1
   2491a:	4770      	bx	lr
   2491c:	2a80      	cmp	r2, #128	; 0x80
   2491e:	bf28      	it	cs
   24920:	2280      	movcs	r2, #128	; 0x80
   24922:	f106 0164 	add.w	r1, r6, #100	; 0x64
   24926:	a804      	add	r0, sp, #16
   24928:	f7ff fa62 	bl	23df0 <CC_PalMemCopyPlat>
   2492c:	2300      	movs	r3, #0
   2492e:	e9cd 3300 	strd	r3, r3, [sp]
   24932:	a804      	add	r0, sp, #16
   24934:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   24936:	aa02      	add	r2, sp, #8
   24938:	f000 f918 	bl	24b6c <SetDataBuffersInfo>
   2493c:	2800      	cmp	r0, #0
   2493e:	d1d5      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   24940:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24942:	a902      	add	r1, sp, #8
   24944:	4630      	mov	r0, r6
   24946:	f000 f96f 	bl	24c28 <ProcessHashDrv>
   2494a:	2800      	cmp	r0, #0
   2494c:	d1ce      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   2494e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24950:	6630      	str	r0, [r6, #96]	; 0x60
   24952:	e7ae      	b.n	248b2 <mbedtls_sha_update_internal+0x13a>
   24954:	a902      	add	r1, sp, #8
   24956:	4622      	mov	r2, r4
   24958:	4630      	mov	r0, r6
   2495a:	f000 f965 	bl	24c28 <ProcessHashDrv>
   2495e:	2800      	cmp	r0, #0
   24960:	d1c4      	bne.n	248ec <mbedtls_sha_update_internal+0x174>
   24962:	4427      	add	r7, r4
   24964:	1b2d      	subs	r5, r5, r4
   24966:	e7a9      	b.n	248bc <mbedtls_sha_update_internal+0x144>

00024968 <cc_mbedtls_sha256>:
   24968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2496a:	461c      	mov	r4, r3
   2496c:	4605      	mov	r5, r0
   2496e:	4811      	ldr	r0, [pc, #68]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   24970:	460e      	mov	r6, r1
   24972:	4617      	mov	r7, r2
   24974:	f7ff fe42 	bl	245fc <cc_mbedtls_sha256_init>
   24978:	4621      	mov	r1, r4
   2497a:	480e      	ldr	r0, [pc, #56]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   2497c:	f7ff fe58 	bl	24630 <cc_mbedtls_sha256_starts>
   24980:	4604      	mov	r4, r0
   24982:	b120      	cbz	r0, 2498e <cc_mbedtls_sha256+0x26>
   24984:	480b      	ldr	r0, [pc, #44]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   24986:	f7ff fe4d 	bl	24624 <cc_mbedtls_sha256_free>
   2498a:	4620      	mov	r0, r4
   2498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2498e:	4809      	ldr	r0, [pc, #36]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   24990:	4632      	mov	r2, r6
   24992:	4629      	mov	r1, r5
   24994:	f7ff fe60 	bl	24658 <cc_mbedtls_sha256_update>
   24998:	4604      	mov	r4, r0
   2499a:	2800      	cmp	r0, #0
   2499c:	d1f2      	bne.n	24984 <cc_mbedtls_sha256+0x1c>
   2499e:	4639      	mov	r1, r7
   249a0:	4804      	ldr	r0, [pc, #16]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   249a2:	f7ff fe83 	bl	246ac <cc_mbedtls_sha256_finish>
   249a6:	4604      	mov	r4, r0
   249a8:	4802      	ldr	r0, [pc, #8]	; (249b4 <cc_mbedtls_sha256+0x4c>)
   249aa:	f7ff fe3b 	bl	24624 <cc_mbedtls_sha256_free>
   249ae:	4620      	mov	r0, r4
   249b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   249b2:	bf00      	nop
   249b4:	20003ba0 	.word	0x20003ba0

000249b8 <RNG_PLAT_SetUserRngParameters>:
   249b8:	b530      	push	{r4, r5, lr}
   249ba:	b083      	sub	sp, #12
   249bc:	231c      	movs	r3, #28
   249be:	a901      	add	r1, sp, #4
   249c0:	4604      	mov	r4, r0
   249c2:	9301      	str	r3, [sp, #4]
   249c4:	f000 f834 	bl	24a30 <CC_PalTrngParamGet>
   249c8:	4605      	mov	r5, r0
   249ca:	b938      	cbnz	r0, 249dc <RNG_PLAT_SetUserRngParameters+0x24>
   249cc:	9b01      	ldr	r3, [sp, #4]
   249ce:	2b1c      	cmp	r3, #28
   249d0:	d007      	beq.n	249e2 <RNG_PLAT_SetUserRngParameters+0x2a>
   249d2:	4d15      	ldr	r5, [pc, #84]	; (24a28 <RNG_PLAT_SetUserRngParameters+0x70>)
   249d4:	211c      	movs	r1, #28
   249d6:	4620      	mov	r0, r4
   249d8:	f7ff fa0e 	bl	23df8 <CC_PalMemSetZeroPlat>
   249dc:	4628      	mov	r0, r5
   249de:	b003      	add	sp, #12
   249e0:	bd30      	pop	{r4, r5, pc}
   249e2:	e9d4 3200 	ldrd	r3, r2, [r4]
   249e6:	2101      	movs	r1, #1
   249e8:	3b00      	subs	r3, #0
   249ea:	61e1      	str	r1, [r4, #28]
   249ec:	bf18      	it	ne
   249ee:	2301      	movne	r3, #1
   249f0:	b10a      	cbz	r2, 249f6 <RNG_PLAT_SetUserRngParameters+0x3e>
   249f2:	f043 0302 	orr.w	r3, r3, #2
   249f6:	68a2      	ldr	r2, [r4, #8]
   249f8:	b932      	cbnz	r2, 24a08 <RNG_PLAT_SetUserRngParameters+0x50>
   249fa:	68e2      	ldr	r2, [r4, #12]
   249fc:	b942      	cbnz	r2, 24a10 <RNG_PLAT_SetUserRngParameters+0x58>
   249fe:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24a02:	b97b      	cbnz	r3, 24a24 <RNG_PLAT_SetUserRngParameters+0x6c>
   24a04:	4d09      	ldr	r5, [pc, #36]	; (24a2c <RNG_PLAT_SetUserRngParameters+0x74>)
   24a06:	e7e5      	b.n	249d4 <RNG_PLAT_SetUserRngParameters+0x1c>
   24a08:	68e2      	ldr	r2, [r4, #12]
   24a0a:	f043 0304 	orr.w	r3, r3, #4
   24a0e:	b13a      	cbz	r2, 24a20 <RNG_PLAT_SetUserRngParameters+0x68>
   24a10:	f043 0308 	orr.w	r3, r3, #8
   24a14:	2200      	movs	r2, #0
   24a16:	4628      	mov	r0, r5
   24a18:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24a1c:	b003      	add	sp, #12
   24a1e:	bd30      	pop	{r4, r5, pc}
   24a20:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24a24:	4615      	mov	r5, r2
   24a26:	e7d9      	b.n	249dc <RNG_PLAT_SetUserRngParameters+0x24>
   24a28:	00f00c37 	.word	0x00f00c37
   24a2c:	00f00c0e 	.word	0x00f00c0e

00024a30 <CC_PalTrngParamGet>:
   24a30:	b118      	cbz	r0, 24a3a <CC_PalTrngParamGet+0xa>
   24a32:	b111      	cbz	r1, 24a3a <CC_PalTrngParamGet+0xa>
   24a34:	680b      	ldr	r3, [r1, #0]
   24a36:	2b1c      	cmp	r3, #28
   24a38:	d001      	beq.n	24a3e <CC_PalTrngParamGet+0xe>
   24a3a:	2001      	movs	r0, #1
   24a3c:	4770      	bx	lr
   24a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24a42:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   24a46:	3201      	adds	r2, #1
   24a48:	bf14      	ite	ne
   24a4a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   24a4e:	f241 225c 	movweq	r2, #4700	; 0x125c
   24a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24a56:	6002      	str	r2, [r0, #0]
   24a58:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   24a5c:	3201      	adds	r2, #1
   24a5e:	bf14      	ite	ne
   24a60:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   24a64:	f641 1264 	movweq	r2, #6500	; 0x1964
   24a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24a6c:	6042      	str	r2, [r0, #4]
   24a6e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   24a72:	3201      	adds	r2, #1
   24a74:	bf14      	ite	ne
   24a76:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   24a7a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   24a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24a82:	6082      	str	r2, [r0, #8]
   24a84:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   24a88:	3201      	adds	r2, #1
   24a8a:	bf14      	ite	ne
   24a8c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   24a90:	f241 3288 	movweq	r2, #5000	; 0x1388
   24a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24a98:	60c2      	str	r2, [r0, #12]
   24a9a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   24a9e:	3201      	adds	r2, #1
   24aa0:	bf14      	ite	ne
   24aa2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   24aa6:	2290      	moveq	r2, #144	; 0x90
   24aa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24aac:	6102      	str	r2, [r0, #16]
   24aae:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   24ab2:	3201      	adds	r2, #1
   24ab4:	bf14      	ite	ne
   24ab6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   24aba:	2251      	moveq	r2, #81	; 0x51
   24abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24ac0:	6142      	str	r2, [r0, #20]
   24ac2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   24ac6:	3201      	adds	r2, #1
   24ac8:	bf14      	ite	ne
   24aca:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   24ace:	f240 3337 	movweq	r3, #823	; 0x337
   24ad2:	6183      	str	r3, [r0, #24]
   24ad4:	2000      	movs	r0, #0
   24ad6:	4770      	bx	lr

00024ad8 <LLF_RND_WaitRngInterrupt>:
   24ad8:	b508      	push	{r3, lr}
   24ada:	4601      	mov	r1, r0
   24adc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24ae0:	f7ff f912 	bl	23d08 <CC_HalWaitInterruptRND>
   24ae4:	4b03      	ldr	r3, [pc, #12]	; (24af4 <LLF_RND_WaitRngInterrupt+0x1c>)
   24ae6:	2200      	movs	r2, #0
   24ae8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   24aec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   24af0:	bd08      	pop	{r3, pc}
   24af2:	bf00      	nop
   24af4:	5002b000 	.word	0x5002b000

00024af8 <LLF_RND_GetRoscSampleCnt>:
   24af8:	3801      	subs	r0, #1
   24afa:	2807      	cmp	r0, #7
   24afc:	d805      	bhi.n	24b0a <LLF_RND_GetRoscSampleCnt+0x12>
   24afe:	e8df f000 	tbb	[pc, r0]
   24b02:	0e12      	.short	0x0e12
   24b04:	04040a04 	.word	0x04040a04
   24b08:	0604      	.short	0x0604
   24b0a:	4809      	ldr	r0, [pc, #36]	; (24b30 <LLF_RND_GetRoscSampleCnt+0x38>)
   24b0c:	4770      	bx	lr
   24b0e:	68cb      	ldr	r3, [r1, #12]
   24b10:	624b      	str	r3, [r1, #36]	; 0x24
   24b12:	2000      	movs	r0, #0
   24b14:	4770      	bx	lr
   24b16:	688b      	ldr	r3, [r1, #8]
   24b18:	624b      	str	r3, [r1, #36]	; 0x24
   24b1a:	2000      	movs	r0, #0
   24b1c:	4770      	bx	lr
   24b1e:	684b      	ldr	r3, [r1, #4]
   24b20:	624b      	str	r3, [r1, #36]	; 0x24
   24b22:	2000      	movs	r0, #0
   24b24:	4770      	bx	lr
   24b26:	680b      	ldr	r3, [r1, #0]
   24b28:	624b      	str	r3, [r1, #36]	; 0x24
   24b2a:	2000      	movs	r0, #0
   24b2c:	4770      	bx	lr
   24b2e:	bf00      	nop
   24b30:	00f10c31 	.word	0x00f10c31

00024b34 <LLF_RND_GetFastestRosc>:
   24b34:	680b      	ldr	r3, [r1, #0]
   24b36:	e002      	b.n	24b3e <LLF_RND_GetFastestRosc+0xa>
   24b38:	2b08      	cmp	r3, #8
   24b3a:	600b      	str	r3, [r1, #0]
   24b3c:	d806      	bhi.n	24b4c <LLF_RND_GetFastestRosc+0x18>
   24b3e:	6a02      	ldr	r2, [r0, #32]
   24b40:	4213      	tst	r3, r2
   24b42:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24b46:	d0f7      	beq.n	24b38 <LLF_RND_GetFastestRosc+0x4>
   24b48:	2000      	movs	r0, #0
   24b4a:	4770      	bx	lr
   24b4c:	4800      	ldr	r0, [pc, #0]	; (24b50 <LLF_RND_GetFastestRosc+0x1c>)
   24b4e:	4770      	bx	lr
   24b50:	00f10c31 	.word	0x00f10c31

00024b54 <LLF_RND_TurnOffTrng>:
   24b54:	4b04      	ldr	r3, [pc, #16]	; (24b68 <LLF_RND_TurnOffTrng+0x14>)
   24b56:	2200      	movs	r2, #0
   24b58:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   24b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24b60:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   24b64:	f7ff b8b6 	b.w	23cd4 <CC_HalClearInterruptBit>
   24b68:	5002b000 	.word	0x5002b000

00024b6c <SetDataBuffersInfo>:
   24b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b6e:	b083      	sub	sp, #12
   24b70:	461d      	mov	r5, r3
   24b72:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   24b76:	f04f 0300 	mov.w	r3, #0
   24b7a:	f88d 3007 	strb.w	r3, [sp, #7]
   24b7e:	d324      	bcc.n	24bca <SetDataBuffersInfo+0x5e>
   24b80:	468c      	mov	ip, r1
   24b82:	4484      	add	ip, r0
   24b84:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   24b88:	4604      	mov	r4, r0
   24b8a:	d81e      	bhi.n	24bca <SetDataBuffersInfo+0x5e>
   24b8c:	4617      	mov	r7, r2
   24b8e:	f10d 0307 	add.w	r3, sp, #7
   24b92:	2201      	movs	r2, #1
   24b94:	f000 fe68 	bl	25868 <CC_PalDataBufferAttrGet>
   24b98:	4606      	mov	r6, r0
   24b9a:	b9b0      	cbnz	r0, 24bca <SetDataBuffersInfo+0x5e>
   24b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24ba2:	603c      	str	r4, [r7, #0]
   24ba4:	713b      	strb	r3, [r7, #4]
   24ba6:	b192      	cbz	r2, 24bce <SetDataBuffersInfo+0x62>
   24ba8:	b14d      	cbz	r5, 24bbe <SetDataBuffersInfo+0x52>
   24baa:	4602      	mov	r2, r0
   24bac:	9908      	ldr	r1, [sp, #32]
   24bae:	f10d 0307 	add.w	r3, sp, #7
   24bb2:	4628      	mov	r0, r5
   24bb4:	f000 fe58 	bl	25868 <CC_PalDataBufferAttrGet>
   24bb8:	b938      	cbnz	r0, 24bca <SetDataBuffersInfo+0x5e>
   24bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24bc0:	4630      	mov	r0, r6
   24bc2:	6015      	str	r5, [r2, #0]
   24bc4:	7113      	strb	r3, [r2, #4]
   24bc6:	b003      	add	sp, #12
   24bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24bca:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   24bce:	4630      	mov	r0, r6
   24bd0:	b003      	add	sp, #12
   24bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024bd4 <InitHashDrv>:
   24bd4:	b1e8      	cbz	r0, 24c12 <InitHashDrv+0x3e>
   24bd6:	b510      	push	{r4, lr}
   24bd8:	6804      	ldr	r4, [r0, #0]
   24bda:	2c01      	cmp	r4, #1
   24bdc:	d004      	beq.n	24be8 <InitHashDrv+0x14>
   24bde:	2c02      	cmp	r4, #2
   24be0:	d010      	beq.n	24c04 <InitHashDrv+0x30>
   24be2:	b144      	cbz	r4, 24bf6 <InitHashDrv+0x22>
   24be4:	480c      	ldr	r0, [pc, #48]	; (24c18 <InitHashDrv+0x44>)
   24be6:	bd10      	pop	{r4, pc}
   24be8:	490c      	ldr	r1, [pc, #48]	; (24c1c <InitHashDrv+0x48>)
   24bea:	2220      	movs	r2, #32
   24bec:	3008      	adds	r0, #8
   24bee:	f7ff f8ff 	bl	23df0 <CC_PalMemCopyPlat>
   24bf2:	2000      	movs	r0, #0
   24bf4:	bd10      	pop	{r4, pc}
   24bf6:	490a      	ldr	r1, [pc, #40]	; (24c20 <InitHashDrv+0x4c>)
   24bf8:	2214      	movs	r2, #20
   24bfa:	3008      	adds	r0, #8
   24bfc:	f7ff f8f8 	bl	23df0 <CC_PalMemCopyPlat>
   24c00:	4620      	mov	r0, r4
   24c02:	bd10      	pop	{r4, pc}
   24c04:	4907      	ldr	r1, [pc, #28]	; (24c24 <InitHashDrv+0x50>)
   24c06:	2220      	movs	r2, #32
   24c08:	3008      	adds	r0, #8
   24c0a:	f7ff f8f1 	bl	23df0 <CC_PalMemCopyPlat>
   24c0e:	2000      	movs	r0, #0
   24c10:	bd10      	pop	{r4, pc}
   24c12:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24c16:	4770      	bx	lr
   24c18:	00f30001 	.word	0x00f30001
   24c1c:	0002c3e0 	.word	0x0002c3e0
   24c20:	0002c3ac 	.word	0x0002c3ac
   24c24:	0002c3c0 	.word	0x0002c3c0

00024c28 <ProcessHashDrv>:
   24c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c2c:	2900      	cmp	r1, #0
   24c2e:	f000 80f9 	beq.w	24e24 <ProcessHashDrv+0x1fc>
   24c32:	4604      	mov	r4, r0
   24c34:	2800      	cmp	r0, #0
   24c36:	f000 80f9 	beq.w	24e2c <ProcessHashDrv+0x204>
   24c3a:	6803      	ldr	r3, [r0, #0]
   24c3c:	4690      	mov	r8, r2
   24c3e:	460f      	mov	r7, r1
   24c40:	2b00      	cmp	r3, #0
   24c42:	f000 80c3 	beq.w	24dcc <ProcessHashDrv+0x1a4>
   24c46:	3b01      	subs	r3, #1
   24c48:	2b01      	cmp	r3, #1
   24c4a:	f200 80d7 	bhi.w	24dfc <ProcessHashDrv+0x1d4>
   24c4e:	4879      	ldr	r0, [pc, #484]	; (24e34 <ProcessHashDrv+0x20c>)
   24c50:	f04f 31ff 	mov.w	r1, #4294967295
   24c54:	f04f 0902 	mov.w	r9, #2
   24c58:	f7ff f8e6 	bl	23e28 <CC_PalMutexLock>
   24c5c:	2800      	cmp	r0, #0
   24c5e:	f040 80bf 	bne.w	24de0 <ProcessHashDrv+0x1b8>
   24c62:	2000      	movs	r0, #0
   24c64:	f7ff f910 	bl	23e88 <CC_PalPowerSaveModeSelect>
   24c68:	4606      	mov	r6, r0
   24c6a:	2800      	cmp	r0, #0
   24c6c:	f040 80c2 	bne.w	24df4 <ProcessHashDrv+0x1cc>
   24c70:	4a71      	ldr	r2, [pc, #452]	; (24e38 <ProcessHashDrv+0x210>)
   24c72:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   24c76:	2b00      	cmp	r3, #0
   24c78:	d1fb      	bne.n	24c72 <ProcessHashDrv+0x4a>
   24c7a:	4d6f      	ldr	r5, [pc, #444]	; (24e38 <ProcessHashDrv+0x210>)
   24c7c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   24c80:	2b00      	cmp	r3, #0
   24c82:	d1fb      	bne.n	24c7c <ProcessHashDrv+0x54>
   24c84:	f04f 30ff 	mov.w	r0, #4294967295
   24c88:	f7ff f824 	bl	23cd4 <CC_HalClearInterruptBit>
   24c8c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   24c90:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   24c94:	f7ff f82c 	bl	23cf0 <CC_HalMaskInterrupt>
   24c98:	2301      	movs	r3, #1
   24c9a:	2207      	movs	r2, #7
   24c9c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   24ca0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   24ca4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   24ca8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   24caa:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   24cae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   24cb0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   24cb4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   24cb8:	6823      	ldr	r3, [r4, #0]
   24cba:	b15b      	cbz	r3, 24cd4 <ProcessHashDrv+0xac>
   24cbc:	3b01      	subs	r3, #1
   24cbe:	2b01      	cmp	r3, #1
   24cc0:	d818      	bhi.n	24cf4 <ProcessHashDrv+0xcc>
   24cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24cc4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   24cc8:	6a23      	ldr	r3, [r4, #32]
   24cca:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   24cce:	69e3      	ldr	r3, [r4, #28]
   24cd0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   24cd4:	4b58      	ldr	r3, [pc, #352]	; (24e38 <ProcessHashDrv+0x210>)
   24cd6:	69a2      	ldr	r2, [r4, #24]
   24cd8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   24cdc:	6962      	ldr	r2, [r4, #20]
   24cde:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   24ce2:	6922      	ldr	r2, [r4, #16]
   24ce4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   24ce8:	68e2      	ldr	r2, [r4, #12]
   24cea:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   24cee:	68a2      	ldr	r2, [r4, #8]
   24cf0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   24cf4:	4a50      	ldr	r2, [pc, #320]	; (24e38 <ProcessHashDrv+0x210>)
   24cf6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24cfa:	2b00      	cmp	r3, #0
   24cfc:	d1fb      	bne.n	24cf6 <ProcessHashDrv+0xce>
   24cfe:	f1b8 0f00 	cmp.w	r8, #0
   24d02:	d05f      	beq.n	24dc4 <ProcessHashDrv+0x19c>
   24d04:	6863      	ldr	r3, [r4, #4]
   24d06:	2b01      	cmp	r3, #1
   24d08:	bf08      	it	eq
   24d0a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   24d0e:	4b4a      	ldr	r3, [pc, #296]	; (24e38 <ProcessHashDrv+0x210>)
   24d10:	683a      	ldr	r2, [r7, #0]
   24d12:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   24d16:	2040      	movs	r0, #64	; 0x40
   24d18:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   24d1c:	f7fe ffee 	bl	23cfc <CC_HalWaitInterrupt>
   24d20:	4606      	mov	r6, r0
   24d22:	4a45      	ldr	r2, [pc, #276]	; (24e38 <ProcessHashDrv+0x210>)
   24d24:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24d28:	2b00      	cmp	r3, #0
   24d2a:	d1fb      	bne.n	24d24 <ProcessHashDrv+0xfc>
   24d2c:	4a42      	ldr	r2, [pc, #264]	; (24e38 <ProcessHashDrv+0x210>)
   24d2e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   24d32:	2b00      	cmp	r3, #0
   24d34:	d1fb      	bne.n	24d2e <ProcessHashDrv+0x106>
   24d36:	6823      	ldr	r3, [r4, #0]
   24d38:	b15b      	cbz	r3, 24d52 <ProcessHashDrv+0x12a>
   24d3a:	3b01      	subs	r3, #1
   24d3c:	2b01      	cmp	r3, #1
   24d3e:	d818      	bhi.n	24d72 <ProcessHashDrv+0x14a>
   24d40:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   24d44:	6263      	str	r3, [r4, #36]	; 0x24
   24d46:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   24d4a:	6223      	str	r3, [r4, #32]
   24d4c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   24d50:	61e3      	str	r3, [r4, #28]
   24d52:	4b39      	ldr	r3, [pc, #228]	; (24e38 <ProcessHashDrv+0x210>)
   24d54:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   24d58:	61a2      	str	r2, [r4, #24]
   24d5a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   24d5e:	6162      	str	r2, [r4, #20]
   24d60:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   24d64:	6122      	str	r2, [r4, #16]
   24d66:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   24d6a:	60e2      	str	r2, [r4, #12]
   24d6c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   24d70:	60a3      	str	r3, [r4, #8]
   24d72:	4a31      	ldr	r2, [pc, #196]	; (24e38 <ProcessHashDrv+0x210>)
   24d74:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   24d78:	64a1      	str	r1, [r4, #72]	; 0x48
   24d7a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   24d7e:	64e1      	str	r1, [r4, #76]	; 0x4c
   24d80:	2300      	movs	r3, #0
   24d82:	2101      	movs	r1, #1
   24d84:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   24d88:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   24d8c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   24d90:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24d94:	2b00      	cmp	r3, #0
   24d96:	d1fb      	bne.n	24d90 <ProcessHashDrv+0x168>
   24d98:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   24d9c:	2e00      	cmp	r6, #0
   24d9e:	d13b      	bne.n	24e18 <ProcessHashDrv+0x1f0>
   24da0:	4b25      	ldr	r3, [pc, #148]	; (24e38 <ProcessHashDrv+0x210>)
   24da2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   24da6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   24daa:	f7fe ffa1 	bl	23cf0 <CC_HalMaskInterrupt>
   24dae:	2001      	movs	r0, #1
   24db0:	f7ff f86a 	bl	23e88 <CC_PalPowerSaveModeSelect>
   24db4:	bb60      	cbnz	r0, 24e10 <ProcessHashDrv+0x1e8>
   24db6:	481f      	ldr	r0, [pc, #124]	; (24e34 <ProcessHashDrv+0x20c>)
   24db8:	f7ff f83e 	bl	23e38 <CC_PalMutexUnlock>
   24dbc:	bb10      	cbnz	r0, 24e04 <ProcessHashDrv+0x1dc>
   24dbe:	4630      	mov	r0, r6
   24dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24dc4:	2304      	movs	r3, #4
   24dc6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   24dca:	e7aa      	b.n	24d22 <ProcessHashDrv+0xfa>
   24dcc:	4819      	ldr	r0, [pc, #100]	; (24e34 <ProcessHashDrv+0x20c>)
   24dce:	f04f 31ff 	mov.w	r1, #4294967295
   24dd2:	f04f 0901 	mov.w	r9, #1
   24dd6:	f7ff f827 	bl	23e28 <CC_PalMutexLock>
   24dda:	2800      	cmp	r0, #0
   24ddc:	f43f af41 	beq.w	24c62 <ProcessHashDrv+0x3a>
   24de0:	4816      	ldr	r0, [pc, #88]	; (24e3c <ProcessHashDrv+0x214>)
   24de2:	f7fe f8c1 	bl	22f68 <CC_PalAbort>
   24de6:	2000      	movs	r0, #0
   24de8:	f7ff f84e 	bl	23e88 <CC_PalPowerSaveModeSelect>
   24dec:	4606      	mov	r6, r0
   24dee:	2800      	cmp	r0, #0
   24df0:	f43f af3e 	beq.w	24c70 <ProcessHashDrv+0x48>
   24df4:	4812      	ldr	r0, [pc, #72]	; (24e40 <ProcessHashDrv+0x218>)
   24df6:	f7fe f8b7 	bl	22f68 <CC_PalAbort>
   24dfa:	e739      	b.n	24c70 <ProcessHashDrv+0x48>
   24dfc:	4e11      	ldr	r6, [pc, #68]	; (24e44 <ProcessHashDrv+0x21c>)
   24dfe:	4630      	mov	r0, r6
   24e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24e04:	4810      	ldr	r0, [pc, #64]	; (24e48 <ProcessHashDrv+0x220>)
   24e06:	f7fe f8af 	bl	22f68 <CC_PalAbort>
   24e0a:	4630      	mov	r0, r6
   24e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24e10:	480e      	ldr	r0, [pc, #56]	; (24e4c <ProcessHashDrv+0x224>)
   24e12:	f7fe f8a9 	bl	22f68 <CC_PalAbort>
   24e16:	e7ce      	b.n	24db6 <ProcessHashDrv+0x18e>
   24e18:	2110      	movs	r1, #16
   24e1a:	f104 0008 	add.w	r0, r4, #8
   24e1e:	f7fe ffeb 	bl	23df8 <CC_PalMemSetZeroPlat>
   24e22:	e7bd      	b.n	24da0 <ProcessHashDrv+0x178>
   24e24:	4e0a      	ldr	r6, [pc, #40]	; (24e50 <ProcessHashDrv+0x228>)
   24e26:	4630      	mov	r0, r6
   24e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24e2c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   24e30:	e7c5      	b.n	24dbe <ProcessHashDrv+0x196>
   24e32:	bf00      	nop
   24e34:	2000088c 	.word	0x2000088c
   24e38:	5002b000 	.word	0x5002b000
   24e3c:	0002c2e0 	.word	0x0002c2e0
   24e40:	0002c2f8 	.word	0x0002c2f8
   24e44:	00f30001 	.word	0x00f30001
   24e48:	0002c338 	.word	0x0002c338
   24e4c:	0002c318 	.word	0x0002c318
   24e50:	00f30003 	.word	0x00f30003

00024e54 <FinishHashDrv>:
   24e54:	b398      	cbz	r0, 24ebe <FinishHashDrv+0x6a>
   24e56:	b470      	push	{r4, r5, r6}
   24e58:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   24e5c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   24e60:	ba26      	rev	r6, r4
   24e62:	ba0d      	rev	r5, r1
   24e64:	ba14      	rev	r4, r2
   24e66:	ba19      	rev	r1, r3
   24e68:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   24e6c:	ba12      	rev	r2, r2
   24e6e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   24e72:	6182      	str	r2, [r0, #24]
   24e74:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   24e78:	e9c0 6502 	strd	r6, r5, [r0, #8]
   24e7c:	ba1b      	rev	r3, r3
   24e7e:	ba25      	rev	r5, r4
   24e80:	e9c0 3507 	strd	r3, r5, [r0, #28]
   24e84:	ba14      	rev	r4, r2
   24e86:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   24e8a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   24e8c:	ba12      	rev	r2, r2
   24e8e:	ba09      	rev	r1, r1
   24e90:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   24e94:	62c2      	str	r2, [r0, #44]	; 0x2c
   24e96:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   24e9a:	ba1b      	rev	r3, r3
   24e9c:	ba25      	rev	r5, r4
   24e9e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   24ea2:	ba14      	rev	r4, r2
   24ea4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   24ea8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   24eaa:	ba12      	rev	r2, r2
   24eac:	ba09      	rev	r1, r1
   24eae:	ba1b      	rev	r3, r3
   24eb0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   24eb4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   24eb8:	2000      	movs	r0, #0
   24eba:	bc70      	pop	{r4, r5, r6}
   24ebc:	4770      	bx	lr
   24ebe:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24ec2:	4770      	bx	lr

00024ec4 <LoadAesKey>:
   24ec4:	2800      	cmp	r0, #0
   24ec6:	d046      	beq.n	24f56 <LoadAesKey+0x92>
   24ec8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   24ecc:	2b00      	cmp	r3, #0
   24ece:	d033      	beq.n	24f38 <LoadAesKey+0x74>
   24ed0:	2b03      	cmp	r3, #3
   24ed2:	b510      	push	{r4, lr}
   24ed4:	d013      	beq.n	24efe <LoadAesKey+0x3a>
   24ed6:	4821      	ldr	r0, [pc, #132]	; (24f5c <LoadAesKey+0x98>)
   24ed8:	4c21      	ldr	r4, [pc, #132]	; (24f60 <LoadAesKey+0x9c>)
   24eda:	6822      	ldr	r2, [r4, #0]
   24edc:	4b21      	ldr	r3, [pc, #132]	; (24f64 <LoadAesKey+0xa0>)
   24ede:	6812      	ldr	r2, [r2, #0]
   24ee0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24ee4:	6822      	ldr	r2, [r4, #0]
   24ee6:	6852      	ldr	r2, [r2, #4]
   24ee8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24eec:	6822      	ldr	r2, [r4, #0]
   24eee:	6892      	ldr	r2, [r2, #8]
   24ef0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24ef4:	6822      	ldr	r2, [r4, #0]
   24ef6:	68d2      	ldr	r2, [r2, #12]
   24ef8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24efc:	bd10      	pop	{r4, pc}
   24efe:	6b01      	ldr	r1, [r0, #48]	; 0x30
   24f00:	6c00      	ldr	r0, [r0, #64]	; 0x40
   24f02:	4c17      	ldr	r4, [pc, #92]	; (24f60 <LoadAesKey+0x9c>)
   24f04:	f000 fbac 	bl	25660 <kmu_validate_kdr_slot_and_size>
   24f08:	2800      	cmp	r0, #0
   24f0a:	d1e6      	bne.n	24eda <LoadAesKey+0x16>
   24f0c:	6822      	ldr	r2, [r4, #0]
   24f0e:	4b15      	ldr	r3, [pc, #84]	; (24f64 <LoadAesKey+0xa0>)
   24f10:	6812      	ldr	r2, [r2, #0]
   24f12:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24f16:	6822      	ldr	r2, [r4, #0]
   24f18:	6852      	ldr	r2, [r2, #4]
   24f1a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24f1e:	6822      	ldr	r2, [r4, #0]
   24f20:	6892      	ldr	r2, [r2, #8]
   24f22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24f26:	6822      	ldr	r2, [r4, #0]
   24f28:	68d2      	ldr	r2, [r2, #12]
   24f2a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24f2e:	f000 fba3 	bl	25678 <kmu_use_kdr_key>
   24f32:	2800      	cmp	r0, #0
   24f34:	d1d1      	bne.n	24eda <LoadAesKey+0x16>
   24f36:	bd10      	pop	{r4, pc}
   24f38:	4a0a      	ldr	r2, [pc, #40]	; (24f64 <LoadAesKey+0xa0>)
   24f3a:	6901      	ldr	r1, [r0, #16]
   24f3c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   24f40:	6941      	ldr	r1, [r0, #20]
   24f42:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   24f46:	6981      	ldr	r1, [r0, #24]
   24f48:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   24f4c:	69c1      	ldr	r1, [r0, #28]
   24f4e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   24f52:	4618      	mov	r0, r3
   24f54:	4770      	bx	lr
   24f56:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   24f5a:	4770      	bx	lr
   24f5c:	00f10009 	.word	0x00f10009
   24f60:	2000087c 	.word	0x2000087c
   24f64:	5002b000 	.word	0x5002b000

00024f68 <InitAes.part.0>:
   24f68:	4a37      	ldr	r2, [pc, #220]	; (25048 <InitAes.part.0+0xe0>)
   24f6a:	b538      	push	{r3, r4, r5, lr}
   24f6c:	4604      	mov	r4, r0
   24f6e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24f72:	2b00      	cmp	r3, #0
   24f74:	d1fb      	bne.n	24f6e <InitAes.part.0+0x6>
   24f76:	4a34      	ldr	r2, [pc, #208]	; (25048 <InitAes.part.0+0xe0>)
   24f78:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24f7c:	2b00      	cmp	r3, #0
   24f7e:	d1fb      	bne.n	24f78 <InitAes.part.0+0x10>
   24f80:	4a31      	ldr	r2, [pc, #196]	; (25048 <InitAes.part.0+0xe0>)
   24f82:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   24f86:	2b00      	cmp	r3, #0
   24f88:	d1fb      	bne.n	24f82 <InitAes.part.0+0x1a>
   24f8a:	4a2f      	ldr	r2, [pc, #188]	; (25048 <InitAes.part.0+0xe0>)
   24f8c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   24f90:	2b00      	cmp	r3, #0
   24f92:	d1fb      	bne.n	24f8c <InitAes.part.0+0x24>
   24f94:	4a2c      	ldr	r2, [pc, #176]	; (25048 <InitAes.part.0+0xe0>)
   24f96:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   24f9a:	2b00      	cmp	r3, #0
   24f9c:	d1fb      	bne.n	24f96 <InitAes.part.0+0x2e>
   24f9e:	4d2a      	ldr	r5, [pc, #168]	; (25048 <InitAes.part.0+0xe0>)
   24fa0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   24fa4:	2b00      	cmp	r3, #0
   24fa6:	d1fb      	bne.n	24fa0 <InitAes.part.0+0x38>
   24fa8:	f04f 30ff 	mov.w	r0, #4294967295
   24fac:	f7fe fe92 	bl	23cd4 <CC_HalClearInterruptBit>
   24fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24fb2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   24fb6:	f023 0304 	bic.w	r3, r3, #4
   24fba:	2b03      	cmp	r3, #3
   24fbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24fbe:	d039      	beq.n	25034 <InitAes.part.0+0xcc>
   24fc0:	2b01      	cmp	r3, #1
   24fc2:	bf0c      	ite	eq
   24fc4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   24fc8:	f020 0020 	bicne.w	r0, r0, #32
   24fcc:	f7fe fe90 	bl	23cf0 <CC_HalMaskInterrupt>
   24fd0:	4a1d      	ldr	r2, [pc, #116]	; (25048 <InitAes.part.0+0xe0>)
   24fd2:	2301      	movs	r3, #1
   24fd4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   24fd8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24fdc:	2b00      	cmp	r3, #0
   24fde:	d1fb      	bne.n	24fd8 <InitAes.part.0+0x70>
   24fe0:	4a19      	ldr	r2, [pc, #100]	; (25048 <InitAes.part.0+0xe0>)
   24fe2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24fe6:	2b00      	cmp	r3, #0
   24fe8:	d1fb      	bne.n	24fe2 <InitAes.part.0+0x7a>
   24fea:	4917      	ldr	r1, [pc, #92]	; (25048 <InitAes.part.0+0xe0>)
   24fec:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   24ff0:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   24ff4:	2b00      	cmp	r3, #0
   24ff6:	d1fb      	bne.n	24ff0 <InitAes.part.0+0x88>
   24ff8:	4a13      	ldr	r2, [pc, #76]	; (25048 <InitAes.part.0+0xe0>)
   24ffa:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24ffe:	2b00      	cmp	r3, #0
   25000:	d1fb      	bne.n	24ffa <InitAes.part.0+0x92>
   25002:	6b62      	ldr	r2, [r4, #52]	; 0x34
   25004:	f022 0104 	bic.w	r1, r2, #4
   25008:	2903      	cmp	r1, #3
   2500a:	bf18      	it	ne
   2500c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2500e:	490e      	ldr	r1, [pc, #56]	; (25048 <InitAes.part.0+0xe0>)
   25010:	ea4f 0282 	mov.w	r2, r2, lsl #2
   25014:	bf18      	it	ne
   25016:	f003 0301 	andne.w	r3, r3, #1
   2501a:	f002 021c 	and.w	r2, r2, #28
   2501e:	4313      	orrs	r3, r2
   25020:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   25024:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25026:	2b07      	cmp	r3, #7
   25028:	bf04      	itt	eq
   2502a:	2301      	moveq	r3, #1
   2502c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   25030:	2000      	movs	r0, #0
   25032:	bd38      	pop	{r3, r4, r5, pc}
   25034:	2b01      	cmp	r3, #1
   25036:	bf0c      	ite	eq
   25038:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2503c:	f020 0010 	bicne.w	r0, r0, #16
   25040:	f7fe fe56 	bl	23cf0 <CC_HalMaskInterrupt>
   25044:	e7c4      	b.n	24fd0 <InitAes.part.0+0x68>
   25046:	bf00      	nop
   25048:	5002b000 	.word	0x5002b000

0002504c <write_invalid_key>:
   2504c:	4a09      	ldr	r2, [pc, #36]	; (25074 <write_invalid_key+0x28>)
   2504e:	4b0a      	ldr	r3, [pc, #40]	; (25078 <write_invalid_key+0x2c>)
   25050:	6811      	ldr	r1, [r2, #0]
   25052:	6809      	ldr	r1, [r1, #0]
   25054:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   25058:	6811      	ldr	r1, [r2, #0]
   2505a:	6849      	ldr	r1, [r1, #4]
   2505c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   25060:	6811      	ldr	r1, [r2, #0]
   25062:	6889      	ldr	r1, [r1, #8]
   25064:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   25068:	6812      	ldr	r2, [r2, #0]
   2506a:	68d2      	ldr	r2, [r2, #12]
   2506c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25070:	4770      	bx	lr
   25072:	bf00      	nop
   25074:	2000087c 	.word	0x2000087c
   25078:	5002b000 	.word	0x5002b000

0002507c <ProcessAesDrv>:
   2507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25080:	b085      	sub	sp, #20
   25082:	2900      	cmp	r1, #0
   25084:	f000 80a3 	beq.w	251ce <ProcessAesDrv+0x152>
   25088:	4690      	mov	r8, r2
   2508a:	2a00      	cmp	r2, #0
   2508c:	f000 809f 	beq.w	251ce <ProcessAesDrv+0x152>
   25090:	4605      	mov	r5, r0
   25092:	2800      	cmp	r0, #0
   25094:	f000 813c 	beq.w	25310 <ProcessAesDrv+0x294>
   25098:	4699      	mov	r9, r3
   2509a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2509c:	460e      	mov	r6, r1
   2509e:	2b00      	cmp	r3, #0
   250a0:	d151      	bne.n	25146 <ProcessAesDrv+0xca>
   250a2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   250a6:	d253      	bcs.n	25150 <ProcessAesDrv+0xd4>
   250a8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   250ac:	2b04      	cmp	r3, #4
   250ae:	f000 8112 	beq.w	252d6 <ProcessAesDrv+0x25a>
   250b2:	2700      	movs	r7, #0
   250b4:	48a6      	ldr	r0, [pc, #664]	; (25350 <ProcessAesDrv+0x2d4>)
   250b6:	f04f 31ff 	mov.w	r1, #4294967295
   250ba:	f7fe feb5 	bl	23e28 <CC_PalMutexLock>
   250be:	2800      	cmp	r0, #0
   250c0:	f040 80e8 	bne.w	25294 <ProcessAesDrv+0x218>
   250c4:	2000      	movs	r0, #0
   250c6:	f7fe fedf 	bl	23e88 <CC_PalPowerSaveModeSelect>
   250ca:	2800      	cmp	r0, #0
   250cc:	f040 80eb 	bne.w	252a6 <ProcessAesDrv+0x22a>
   250d0:	48a0      	ldr	r0, [pc, #640]	; (25354 <ProcessAesDrv+0x2d8>)
   250d2:	2301      	movs	r3, #1
   250d4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   250d8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   250dc:	2c00      	cmp	r4, #0
   250de:	d1fb      	bne.n	250d8 <ProcessAesDrv+0x5c>
   250e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   250e2:	2b03      	cmp	r3, #3
   250e4:	dc39      	bgt.n	2515a <ProcessAesDrv+0xde>
   250e6:	2b00      	cmp	r3, #0
   250e8:	da3a      	bge.n	25160 <ProcessAesDrv+0xe4>
   250ea:	4c9b      	ldr	r4, [pc, #620]	; (25358 <ProcessAesDrv+0x2dc>)
   250ec:	4a99      	ldr	r2, [pc, #612]	; (25354 <ProcessAesDrv+0x2d8>)
   250ee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   250f2:	2b00      	cmp	r3, #0
   250f4:	d1fb      	bne.n	250ee <ProcessAesDrv+0x72>
   250f6:	2f00      	cmp	r7, #0
   250f8:	f040 80e4 	bne.w	252c4 <ProcessAesDrv+0x248>
   250fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   250fe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25100:	f023 0304 	bic.w	r3, r3, #4
   25104:	2b03      	cmp	r3, #3
   25106:	4b93      	ldr	r3, [pc, #588]	; (25354 <ProcessAesDrv+0x2d8>)
   25108:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2510c:	d056      	beq.n	251bc <ProcessAesDrv+0x140>
   2510e:	2a01      	cmp	r2, #1
   25110:	bf0c      	ite	eq
   25112:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   25116:	f040 0020 	orrne.w	r0, r0, #32
   2511a:	f7fe fde9 	bl	23cf0 <CC_HalMaskInterrupt>
   2511e:	4b8d      	ldr	r3, [pc, #564]	; (25354 <ProcessAesDrv+0x2d8>)
   25120:	2200      	movs	r2, #0
   25122:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   25126:	2001      	movs	r0, #1
   25128:	f7fe feae 	bl	23e88 <CC_PalPowerSaveModeSelect>
   2512c:	2800      	cmp	r0, #0
   2512e:	f040 80c5 	bne.w	252bc <ProcessAesDrv+0x240>
   25132:	4887      	ldr	r0, [pc, #540]	; (25350 <ProcessAesDrv+0x2d4>)
   25134:	f7fe fe80 	bl	23e38 <CC_PalMutexUnlock>
   25138:	2800      	cmp	r0, #0
   2513a:	f040 80b8 	bne.w	252ae <ProcessAesDrv+0x232>
   2513e:	4620      	mov	r0, r4
   25140:	b005      	add	sp, #20
   25142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25146:	2b01      	cmp	r3, #1
   25148:	d1ae      	bne.n	250a8 <ProcessAesDrv+0x2c>
   2514a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2514e:	d3ab      	bcc.n	250a8 <ProcessAesDrv+0x2c>
   25150:	4c82      	ldr	r4, [pc, #520]	; (2535c <ProcessAesDrv+0x2e0>)
   25152:	4620      	mov	r0, r4
   25154:	b005      	add	sp, #20
   25156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2515a:	3b06      	subs	r3, #6
   2515c:	2b01      	cmp	r3, #1
   2515e:	d8c4      	bhi.n	250ea <ProcessAesDrv+0x6e>
   25160:	6bab      	ldr	r3, [r5, #56]	; 0x38
   25162:	2b01      	cmp	r3, #1
   25164:	f200 80d2 	bhi.w	2530c <ProcessAesDrv+0x290>
   25168:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2516a:	2b01      	cmp	r3, #1
   2516c:	d834      	bhi.n	251d8 <ProcessAesDrv+0x15c>
   2516e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25170:	2b01      	cmp	r3, #1
   25172:	f200 8122 	bhi.w	253ba <ProcessAesDrv+0x33e>
   25176:	4628      	mov	r0, r5
   25178:	f7ff fef6 	bl	24f68 <InitAes.part.0>
   2517c:	4604      	mov	r4, r0
   2517e:	2800      	cmp	r0, #0
   25180:	d1b4      	bne.n	250ec <ProcessAesDrv+0x70>
   25182:	4628      	mov	r0, r5
   25184:	f7ff fe9e 	bl	24ec4 <LoadAesKey>
   25188:	4604      	mov	r4, r0
   2518a:	2800      	cmp	r0, #0
   2518c:	d1ae      	bne.n	250ec <ProcessAesDrv+0x70>
   2518e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25190:	2b07      	cmp	r3, #7
   25192:	d8aa      	bhi.n	250ea <ProcessAesDrv+0x6e>
   25194:	a201      	add	r2, pc, #4	; (adr r2, 2519c <ProcessAesDrv+0x120>)
   25196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2519a:	bf00      	nop
   2519c:	000251f9 	.word	0x000251f9
   251a0:	000251dd 	.word	0x000251dd
   251a4:	00025381 	.word	0x00025381
   251a8:	000251dd 	.word	0x000251dd
   251ac:	000250eb 	.word	0x000250eb
   251b0:	000250eb 	.word	0x000250eb
   251b4:	00025381 	.word	0x00025381
   251b8:	000251dd 	.word	0x000251dd
   251bc:	2a01      	cmp	r2, #1
   251be:	bf0c      	ite	eq
   251c0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   251c4:	f040 0010 	orrne.w	r0, r0, #16
   251c8:	f7fe fd92 	bl	23cf0 <CC_HalMaskInterrupt>
   251cc:	e7a7      	b.n	2511e <ProcessAesDrv+0xa2>
   251ce:	4c64      	ldr	r4, [pc, #400]	; (25360 <ProcessAesDrv+0x2e4>)
   251d0:	4620      	mov	r0, r4
   251d2:	b005      	add	sp, #20
   251d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251d8:	4c62      	ldr	r4, [pc, #392]	; (25364 <ProcessAesDrv+0x2e8>)
   251da:	e787      	b.n	250ec <ProcessAesDrv+0x70>
   251dc:	4b5d      	ldr	r3, [pc, #372]	; (25354 <ProcessAesDrv+0x2d8>)
   251de:	682a      	ldr	r2, [r5, #0]
   251e0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   251e4:	686a      	ldr	r2, [r5, #4]
   251e6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   251ea:	68aa      	ldr	r2, [r5, #8]
   251ec:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   251f0:	68ea      	ldr	r2, [r5, #12]
   251f2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   251f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   251f8:	6832      	ldr	r2, [r6, #0]
   251fa:	f023 0304 	bic.w	r3, r3, #4
   251fe:	2b03      	cmp	r3, #3
   25200:	d00d      	beq.n	2521e <ProcessAesDrv+0x1a2>
   25202:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25204:	f8d8 1000 	ldr.w	r1, [r8]
   25208:	2b01      	cmp	r3, #1
   2520a:	4b52      	ldr	r3, [pc, #328]	; (25354 <ProcessAesDrv+0x2d8>)
   2520c:	bf0b      	itete	eq
   2520e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   25212:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   25216:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2521a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   2521e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25220:	2b01      	cmp	r3, #1
   25222:	4b4c      	ldr	r3, [pc, #304]	; (25354 <ProcessAesDrv+0x2d8>)
   25224:	bf0b      	itete	eq
   25226:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2522a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   2522e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   25232:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   25236:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25238:	f023 0304 	bic.w	r3, r3, #4
   2523c:	2b03      	cmp	r3, #3
   2523e:	d06a      	beq.n	25316 <ProcessAesDrv+0x29a>
   25240:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25242:	2b01      	cmp	r3, #1
   25244:	bf0c      	ite	eq
   25246:	2080      	moveq	r0, #128	; 0x80
   25248:	2020      	movne	r0, #32
   2524a:	f7fe fd57 	bl	23cfc <CC_HalWaitInterrupt>
   2524e:	4604      	mov	r4, r0
   25250:	2800      	cmp	r0, #0
   25252:	f47f af4b 	bne.w	250ec <ProcessAesDrv+0x70>
   25256:	4b3f      	ldr	r3, [pc, #252]	; (25354 <ProcessAesDrv+0x2d8>)
   25258:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   2525c:	2c00      	cmp	r4, #0
   2525e:	d1fb      	bne.n	25258 <ProcessAesDrv+0x1dc>
   25260:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25262:	3b01      	subs	r3, #1
   25264:	2b06      	cmp	r3, #6
   25266:	d812      	bhi.n	2528e <ProcessAesDrv+0x212>
   25268:	e8df f003 	tbb	[pc, r3]
   2526c:	11049904 	.word	0x11049904
   25270:	9911      	.short	0x9911
   25272:	04          	.byte	0x04
   25273:	00          	.byte	0x00
   25274:	4b37      	ldr	r3, [pc, #220]	; (25354 <ProcessAesDrv+0x2d8>)
   25276:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2527a:	602a      	str	r2, [r5, #0]
   2527c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   25280:	606a      	str	r2, [r5, #4]
   25282:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   25286:	60aa      	str	r2, [r5, #8]
   25288:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2528c:	60eb      	str	r3, [r5, #12]
   2528e:	2301      	movs	r3, #1
   25290:	65ab      	str	r3, [r5, #88]	; 0x58
   25292:	e72b      	b.n	250ec <ProcessAesDrv+0x70>
   25294:	4834      	ldr	r0, [pc, #208]	; (25368 <ProcessAesDrv+0x2ec>)
   25296:	f7fd fe67 	bl	22f68 <CC_PalAbort>
   2529a:	2000      	movs	r0, #0
   2529c:	f7fe fdf4 	bl	23e88 <CC_PalPowerSaveModeSelect>
   252a0:	2800      	cmp	r0, #0
   252a2:	f43f af15 	beq.w	250d0 <ProcessAesDrv+0x54>
   252a6:	4831      	ldr	r0, [pc, #196]	; (2536c <ProcessAesDrv+0x2f0>)
   252a8:	f7fd fe5e 	bl	22f68 <CC_PalAbort>
   252ac:	e710      	b.n	250d0 <ProcessAesDrv+0x54>
   252ae:	4830      	ldr	r0, [pc, #192]	; (25370 <ProcessAesDrv+0x2f4>)
   252b0:	f7fd fe5a 	bl	22f68 <CC_PalAbort>
   252b4:	4620      	mov	r0, r4
   252b6:	b005      	add	sp, #20
   252b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252bc:	482d      	ldr	r0, [pc, #180]	; (25374 <ProcessAesDrv+0x2f8>)
   252be:	f7fd fe53 	bl	22f68 <CC_PalAbort>
   252c2:	e736      	b.n	25132 <ProcessAesDrv+0xb6>
   252c4:	2304      	movs	r3, #4
   252c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   252ca:	2120      	movs	r1, #32
   252cc:	f105 0010 	add.w	r0, r5, #16
   252d0:	f7fe fd92 	bl	23df8 <CC_PalMemSetZeroPlat>
   252d4:	e712      	b.n	250fc <ProcessAesDrv+0x80>
   252d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   252d8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   252da:	f000 f9b5 	bl	25648 <kmu_validate_slot_and_size>
   252de:	b998      	cbnz	r0, 25308 <ProcessAesDrv+0x28c>
   252e0:	4f25      	ldr	r7, [pc, #148]	; (25378 <ProcessAesDrv+0x2fc>)
   252e2:	4c1c      	ldr	r4, [pc, #112]	; (25354 <ProcessAesDrv+0x2d8>)
   252e4:	683b      	ldr	r3, [r7, #0]
   252e6:	681b      	ldr	r3, [r3, #0]
   252e8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   252ec:	683b      	ldr	r3, [r7, #0]
   252ee:	685b      	ldr	r3, [r3, #4]
   252f0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   252f4:	683b      	ldr	r3, [r7, #0]
   252f6:	689b      	ldr	r3, [r3, #8]
   252f8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   252fc:	683b      	ldr	r3, [r7, #0]
   252fe:	68db      	ldr	r3, [r3, #12]
   25300:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   25304:	6b29      	ldr	r1, [r5, #48]	; 0x30
   25306:	b161      	cbz	r1, 25322 <ProcessAesDrv+0x2a6>
   25308:	2701      	movs	r7, #1
   2530a:	e6d3      	b.n	250b4 <ProcessAesDrv+0x38>
   2530c:	4c1b      	ldr	r4, [pc, #108]	; (2537c <ProcessAesDrv+0x300>)
   2530e:	e6ed      	b.n	250ec <ProcessAesDrv+0x70>
   25310:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   25314:	e713      	b.n	2513e <ProcessAesDrv+0xc2>
   25316:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25318:	2b01      	cmp	r3, #1
   2531a:	bf0c      	ite	eq
   2531c:	2040      	moveq	r0, #64	; 0x40
   2531e:	2010      	movne	r0, #16
   25320:	e793      	b.n	2524a <ProcessAesDrv+0x1ce>
   25322:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   25324:	9301      	str	r3, [sp, #4]
   25326:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   25328:	9300      	str	r3, [sp, #0]
   2532a:	f105 0a10 	add.w	sl, r5, #16
   2532e:	f04f 0b10 	mov.w	fp, #16
   25332:	f8cd a008 	str.w	sl, [sp, #8]
   25336:	f8cd b00c 	str.w	fp, [sp, #12]
   2533a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   2533e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   25340:	f000 f9a4 	bl	2568c <kmu_derive_cmac>
   25344:	2800      	cmp	r0, #0
   25346:	d13a      	bne.n	253be <ProcessAesDrv+0x342>
   25348:	2300      	movs	r3, #0
   2534a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2534e:	e7db      	b.n	25308 <ProcessAesDrv+0x28c>
   25350:	2000088c 	.word	0x2000088c
   25354:	5002b000 	.word	0x5002b000
   25358:	00f10001 	.word	0x00f10001
   2535c:	00f10005 	.word	0x00f10005
   25360:	00f1000b 	.word	0x00f1000b
   25364:	00f10003 	.word	0x00f10003
   25368:	0002c2e0 	.word	0x0002c2e0
   2536c:	0002c2f8 	.word	0x0002c2f8
   25370:	0002c338 	.word	0x0002c338
   25374:	0002c318 	.word	0x0002c318
   25378:	2000087c 	.word	0x2000087c
   2537c:	00f10002 	.word	0x00f10002
   25380:	4b19      	ldr	r3, [pc, #100]	; (253e8 <ProcessAesDrv+0x36c>)
   25382:	682a      	ldr	r2, [r5, #0]
   25384:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25388:	686a      	ldr	r2, [r5, #4]
   2538a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2538e:	68aa      	ldr	r2, [r5, #8]
   25390:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   25394:	68ea      	ldr	r2, [r5, #12]
   25396:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2539a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2539c:	e72c      	b.n	251f8 <ProcessAesDrv+0x17c>
   2539e:	4b12      	ldr	r3, [pc, #72]	; (253e8 <ProcessAesDrv+0x36c>)
   253a0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   253a4:	602a      	str	r2, [r5, #0]
   253a6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   253aa:	606a      	str	r2, [r5, #4]
   253ac:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   253b0:	60aa      	str	r2, [r5, #8]
   253b2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   253b6:	60eb      	str	r3, [r5, #12]
   253b8:	e769      	b.n	2528e <ProcessAesDrv+0x212>
   253ba:	4c0c      	ldr	r4, [pc, #48]	; (253ec <ProcessAesDrv+0x370>)
   253bc:	e696      	b.n	250ec <ProcessAesDrv+0x70>
   253be:	683b      	ldr	r3, [r7, #0]
   253c0:	681b      	ldr	r3, [r3, #0]
   253c2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   253c6:	683b      	ldr	r3, [r7, #0]
   253c8:	685b      	ldr	r3, [r3, #4]
   253ca:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   253ce:	683b      	ldr	r3, [r7, #0]
   253d0:	689b      	ldr	r3, [r3, #8]
   253d2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   253d6:	683b      	ldr	r3, [r7, #0]
   253d8:	68db      	ldr	r3, [r3, #12]
   253da:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   253de:	4659      	mov	r1, fp
   253e0:	4650      	mov	r0, sl
   253e2:	f7fe fd09 	bl	23df8 <CC_PalMemSetZeroPlat>
   253e6:	e7af      	b.n	25348 <ProcessAesDrv+0x2cc>
   253e8:	5002b000 	.word	0x5002b000
   253ec:	00f10004 	.word	0x00f10004

000253f0 <FinishAesDrv>:
   253f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253f4:	b301      	cbz	r1, 25438 <FinishAesDrv+0x48>
   253f6:	b1fa      	cbz	r2, 25438 <FinishAesDrv+0x48>
   253f8:	4604      	mov	r4, r0
   253fa:	2800      	cmp	r0, #0
   253fc:	d07c      	beq.n	254f8 <FinishAesDrv+0x108>
   253fe:	461d      	mov	r5, r3
   25400:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25402:	2b07      	cmp	r3, #7
   25404:	460e      	mov	r6, r1
   25406:	d01b      	beq.n	25440 <FinishAesDrv+0x50>
   25408:	b95d      	cbnz	r5, 25422 <FinishAesDrv+0x32>
   2540a:	2b03      	cmp	r3, #3
   2540c:	d110      	bne.n	25430 <FinishAesDrv+0x40>
   2540e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   25410:	b973      	cbnz	r3, 25430 <FinishAesDrv+0x40>
   25412:	f100 0364 	add.w	r3, r0, #100	; 0x64
   25416:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2541a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2541e:	600b      	str	r3, [r1, #0]
   25420:	2510      	movs	r5, #16
   25422:	462b      	mov	r3, r5
   25424:	4631      	mov	r1, r6
   25426:	4620      	mov	r0, r4
   25428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2542c:	f7ff be26 	b.w	2507c <ProcessAesDrv>
   25430:	462f      	mov	r7, r5
   25432:	4638      	mov	r0, r7
   25434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25438:	4f77      	ldr	r7, [pc, #476]	; (25618 <FinishAesDrv+0x228>)
   2543a:	4638      	mov	r0, r7
   2543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25440:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   25442:	2b00      	cmp	r3, #0
   25444:	d15b      	bne.n	254fe <FinishAesDrv+0x10e>
   25446:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2544a:	d25d      	bcs.n	25508 <FinishAesDrv+0x118>
   2544c:	b915      	cbnz	r5, 25454 <FinishAesDrv+0x64>
   2544e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25450:	2b00      	cmp	r3, #0
   25452:	d159      	bne.n	25508 <FinishAesDrv+0x118>
   25454:	4871      	ldr	r0, [pc, #452]	; (2561c <FinishAesDrv+0x22c>)
   25456:	f04f 31ff 	mov.w	r1, #4294967295
   2545a:	f7fe fce5 	bl	23e28 <CC_PalMutexLock>
   2545e:	2800      	cmp	r0, #0
   25460:	f040 80b8 	bne.w	255d4 <FinishAesDrv+0x1e4>
   25464:	2000      	movs	r0, #0
   25466:	f7fe fd0f 	bl	23e88 <CC_PalPowerSaveModeSelect>
   2546a:	2800      	cmp	r0, #0
   2546c:	f040 80ae 	bne.w	255cc <FinishAesDrv+0x1dc>
   25470:	4a6b      	ldr	r2, [pc, #428]	; (25620 <FinishAesDrv+0x230>)
   25472:	2301      	movs	r3, #1
   25474:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25478:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2547c:	2b00      	cmp	r3, #0
   2547e:	d1fb      	bne.n	25478 <FinishAesDrv+0x88>
   25480:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25482:	2b03      	cmp	r3, #3
   25484:	dd20      	ble.n	254c8 <FinishAesDrv+0xd8>
   25486:	3b06      	subs	r3, #6
   25488:	2b01      	cmp	r3, #1
   2548a:	d81f      	bhi.n	254cc <FinishAesDrv+0xdc>
   2548c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2548e:	2b01      	cmp	r3, #1
   25490:	d83c      	bhi.n	2550c <FinishAesDrv+0x11c>
   25492:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25494:	2b01      	cmp	r3, #1
   25496:	f200 80a5 	bhi.w	255e4 <FinishAesDrv+0x1f4>
   2549a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2549c:	2b01      	cmp	r3, #1
   2549e:	f200 80a3 	bhi.w	255e8 <FinishAesDrv+0x1f8>
   254a2:	4620      	mov	r0, r4
   254a4:	f7ff fd60 	bl	24f68 <InitAes.part.0>
   254a8:	4607      	mov	r7, r0
   254aa:	b980      	cbnz	r0, 254ce <FinishAesDrv+0xde>
   254ac:	4620      	mov	r0, r4
   254ae:	f7ff fd09 	bl	24ec4 <LoadAesKey>
   254b2:	4607      	mov	r7, r0
   254b4:	b958      	cbnz	r0, 254ce <FinishAesDrv+0xde>
   254b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   254b8:	2b07      	cmp	r3, #7
   254ba:	d807      	bhi.n	254cc <FinishAesDrv+0xdc>
   254bc:	e8df f003 	tbb	[pc, r3]
   254c0:	285c2835 	.word	0x285c2835
   254c4:	285c0606 	.word	0x285c0606
   254c8:	2b00      	cmp	r3, #0
   254ca:	dadf      	bge.n	2548c <FinishAesDrv+0x9c>
   254cc:	4f55      	ldr	r7, [pc, #340]	; (25624 <FinishAesDrv+0x234>)
   254ce:	4a54      	ldr	r2, [pc, #336]	; (25620 <FinishAesDrv+0x230>)
   254d0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   254d4:	2b00      	cmp	r3, #0
   254d6:	d1fb      	bne.n	254d0 <FinishAesDrv+0xe0>
   254d8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   254dc:	2001      	movs	r0, #1
   254de:	f7fe fcd3 	bl	23e88 <CC_PalPowerSaveModeSelect>
   254e2:	2800      	cmp	r0, #0
   254e4:	d17a      	bne.n	255dc <FinishAesDrv+0x1ec>
   254e6:	484d      	ldr	r0, [pc, #308]	; (2561c <FinishAesDrv+0x22c>)
   254e8:	f7fe fca6 	bl	23e38 <CC_PalMutexUnlock>
   254ec:	2800      	cmp	r0, #0
   254ee:	d0a0      	beq.n	25432 <FinishAesDrv+0x42>
   254f0:	484d      	ldr	r0, [pc, #308]	; (25628 <FinishAesDrv+0x238>)
   254f2:	f7fd fd39 	bl	22f68 <CC_PalAbort>
   254f6:	e79c      	b.n	25432 <FinishAesDrv+0x42>
   254f8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   254fc:	e799      	b.n	25432 <FinishAesDrv+0x42>
   254fe:	2b01      	cmp	r3, #1
   25500:	d1a4      	bne.n	2544c <FinishAesDrv+0x5c>
   25502:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25506:	d3a1      	bcc.n	2544c <FinishAesDrv+0x5c>
   25508:	4f48      	ldr	r7, [pc, #288]	; (2562c <FinishAesDrv+0x23c>)
   2550a:	e792      	b.n	25432 <FinishAesDrv+0x42>
   2550c:	4f48      	ldr	r7, [pc, #288]	; (25630 <FinishAesDrv+0x240>)
   2550e:	e7de      	b.n	254ce <FinishAesDrv+0xde>
   25510:	4b43      	ldr	r3, [pc, #268]	; (25620 <FinishAesDrv+0x230>)
   25512:	6822      	ldr	r2, [r4, #0]
   25514:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   25518:	6862      	ldr	r2, [r4, #4]
   2551a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2551e:	68a2      	ldr	r2, [r4, #8]
   25520:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   25524:	68e2      	ldr	r2, [r4, #12]
   25526:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2552a:	4b3d      	ldr	r3, [pc, #244]	; (25620 <FinishAesDrv+0x230>)
   2552c:	2201      	movs	r2, #1
   2552e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   25532:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   25536:	2d00      	cmp	r5, #0
   25538:	d158      	bne.n	255ec <FinishAesDrv+0x1fc>
   2553a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2553c:	b909      	cbnz	r1, 25542 <FinishAesDrv+0x152>
   2553e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   25542:	4b37      	ldr	r3, [pc, #220]	; (25620 <FinishAesDrv+0x230>)
   25544:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   25548:	2f00      	cmp	r7, #0
   2554a:	d1fb      	bne.n	25544 <FinishAesDrv+0x154>
   2554c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2554e:	3b01      	subs	r3, #1
   25550:	2b06      	cmp	r3, #6
   25552:	d8bc      	bhi.n	254ce <FinishAesDrv+0xde>
   25554:	a201      	add	r2, pc, #4	; (adr r2, 2555c <FinishAesDrv+0x16c>)
   25556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2555a:	bf00      	nop
   2555c:	00025595 	.word	0x00025595
   25560:	000255b1 	.word	0x000255b1
   25564:	00025595 	.word	0x00025595
   25568:	000254cf 	.word	0x000254cf
   2556c:	000254cf 	.word	0x000254cf
   25570:	000255b1 	.word	0x000255b1
   25574:	00025595 	.word	0x00025595
   25578:	4b29      	ldr	r3, [pc, #164]	; (25620 <FinishAesDrv+0x230>)
   2557a:	6822      	ldr	r2, [r4, #0]
   2557c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25580:	6862      	ldr	r2, [r4, #4]
   25582:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   25586:	68a2      	ldr	r2, [r4, #8]
   25588:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2558c:	68e2      	ldr	r2, [r4, #12]
   2558e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   25592:	e7ca      	b.n	2552a <FinishAesDrv+0x13a>
   25594:	4b22      	ldr	r3, [pc, #136]	; (25620 <FinishAesDrv+0x230>)
   25596:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2559a:	6022      	str	r2, [r4, #0]
   2559c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   255a0:	6062      	str	r2, [r4, #4]
   255a2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   255a6:	60a2      	str	r2, [r4, #8]
   255a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   255ac:	60e3      	str	r3, [r4, #12]
   255ae:	e78e      	b.n	254ce <FinishAesDrv+0xde>
   255b0:	4b1b      	ldr	r3, [pc, #108]	; (25620 <FinishAesDrv+0x230>)
   255b2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   255b6:	6022      	str	r2, [r4, #0]
   255b8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   255bc:	6062      	str	r2, [r4, #4]
   255be:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   255c2:	60a2      	str	r2, [r4, #8]
   255c4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   255c8:	60e3      	str	r3, [r4, #12]
   255ca:	e780      	b.n	254ce <FinishAesDrv+0xde>
   255cc:	4819      	ldr	r0, [pc, #100]	; (25634 <FinishAesDrv+0x244>)
   255ce:	f7fd fccb 	bl	22f68 <CC_PalAbort>
   255d2:	e74d      	b.n	25470 <FinishAesDrv+0x80>
   255d4:	4818      	ldr	r0, [pc, #96]	; (25638 <FinishAesDrv+0x248>)
   255d6:	f7fd fcc7 	bl	22f68 <CC_PalAbort>
   255da:	e743      	b.n	25464 <FinishAesDrv+0x74>
   255dc:	4817      	ldr	r0, [pc, #92]	; (2563c <FinishAesDrv+0x24c>)
   255de:	f7fd fcc3 	bl	22f68 <CC_PalAbort>
   255e2:	e780      	b.n	254e6 <FinishAesDrv+0xf6>
   255e4:	4f16      	ldr	r7, [pc, #88]	; (25640 <FinishAesDrv+0x250>)
   255e6:	e772      	b.n	254ce <FinishAesDrv+0xde>
   255e8:	4f16      	ldr	r7, [pc, #88]	; (25644 <FinishAesDrv+0x254>)
   255ea:	e770      	b.n	254ce <FinishAesDrv+0xde>
   255ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   255ee:	6832      	ldr	r2, [r6, #0]
   255f0:	2901      	cmp	r1, #1
   255f2:	d00a      	beq.n	2560a <FinishAesDrv+0x21a>
   255f4:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   255f8:	2010      	movs	r0, #16
   255fa:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   255fe:	f7fe fb7d 	bl	23cfc <CC_HalWaitInterrupt>
   25602:	4607      	mov	r7, r0
   25604:	2800      	cmp	r0, #0
   25606:	d09c      	beq.n	25542 <FinishAesDrv+0x152>
   25608:	e761      	b.n	254ce <FinishAesDrv+0xde>
   2560a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2560e:	2040      	movs	r0, #64	; 0x40
   25610:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   25614:	e7f3      	b.n	255fe <FinishAesDrv+0x20e>
   25616:	bf00      	nop
   25618:	00f1000b 	.word	0x00f1000b
   2561c:	2000088c 	.word	0x2000088c
   25620:	5002b000 	.word	0x5002b000
   25624:	00f10001 	.word	0x00f10001
   25628:	0002c338 	.word	0x0002c338
   2562c:	00f10005 	.word	0x00f10005
   25630:	00f10002 	.word	0x00f10002
   25634:	0002c2f8 	.word	0x0002c2f8
   25638:	0002c2e0 	.word	0x0002c2e0
   2563c:	0002c318 	.word	0x0002c318
   25640:	00f10003 	.word	0x00f10003
   25644:	00f10004 	.word	0x00f10004

00025648 <kmu_validate_slot_and_size>:
   25648:	b921      	cbnz	r1, 25654 <kmu_validate_slot_and_size+0xc>
   2564a:	4b03      	ldr	r3, [pc, #12]	; (25658 <kmu_validate_slot_and_size+0x10>)
   2564c:	2800      	cmp	r0, #0
   2564e:	bf18      	it	ne
   25650:	4618      	movne	r0, r3
   25652:	4770      	bx	lr
   25654:	4801      	ldr	r0, [pc, #4]	; (2565c <kmu_validate_slot_and_size+0x14>)
   25656:	4770      	bx	lr
   25658:	00f70001 	.word	0x00f70001
   2565c:	00f70003 	.word	0x00f70003

00025660 <kmu_validate_kdr_slot_and_size>:
   25660:	b921      	cbnz	r1, 2566c <kmu_validate_kdr_slot_and_size+0xc>
   25662:	4b03      	ldr	r3, [pc, #12]	; (25670 <kmu_validate_kdr_slot_and_size+0x10>)
   25664:	2800      	cmp	r0, #0
   25666:	bf18      	it	ne
   25668:	4618      	movne	r0, r3
   2566a:	4770      	bx	lr
   2566c:	4801      	ldr	r0, [pc, #4]	; (25674 <kmu_validate_kdr_slot_and_size+0x14>)
   2566e:	4770      	bx	lr
   25670:	00f70001 	.word	0x00f70001
   25674:	00f70003 	.word	0x00f70003

00025678 <kmu_use_kdr_key>:
   25678:	4b03      	ldr	r3, [pc, #12]	; (25688 <kmu_use_kdr_key+0x10>)
   2567a:	2000      	movs	r0, #0
   2567c:	2201      	movs	r2, #1
   2567e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   25682:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   25686:	4770      	bx	lr
   25688:	5002b000 	.word	0x5002b000

0002568c <kmu_derive_cmac>:
   2568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25690:	b0cc      	sub	sp, #304	; 0x130
   25692:	2400      	movs	r4, #0
   25694:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   25696:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2569a:	4682      	mov	sl, r0
   2569c:	4689      	mov	r9, r1
   2569e:	4616      	mov	r6, r2
   256a0:	4621      	mov	r1, r4
   256a2:	2274      	movs	r2, #116	; 0x74
   256a4:	a80e      	add	r0, sp, #56	; 0x38
   256a6:	461f      	mov	r7, r3
   256a8:	f002 f8cc 	bl	27844 <memset>
   256ac:	2280      	movs	r2, #128	; 0x80
   256ae:	4621      	mov	r1, r4
   256b0:	a82c      	add	r0, sp, #176	; 0xb0
   256b2:	942b      	str	r4, [sp, #172]	; 0xac
   256b4:	f002 f8c6 	bl	27844 <memset>
   256b8:	2384      	movs	r3, #132	; 0x84
   256ba:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   256be:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   256c2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   256c6:	9305      	str	r3, [sp, #20]
   256c8:	d863      	bhi.n	25792 <kmu_derive_cmac+0x106>
   256ca:	f7ff fcbf 	bl	2504c <write_invalid_key>
   256ce:	ab05      	add	r3, sp, #20
   256d0:	4630      	mov	r0, r6
   256d2:	ae2b      	add	r6, sp, #172	; 0xac
   256d4:	9301      	str	r3, [sp, #4]
   256d6:	9502      	str	r5, [sp, #8]
   256d8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   256dc:	4639      	mov	r1, r7
   256de:	9600      	str	r6, [sp, #0]
   256e0:	f000 f862 	bl	257a8 <UtilCmacBuildDataForDerivation>
   256e4:	2800      	cmp	r0, #0
   256e6:	d14f      	bne.n	25788 <kmu_derive_cmac+0xfc>
   256e8:	2303      	movs	r3, #3
   256ea:	f88d 3013 	strb.w	r3, [sp, #19]
   256ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   256f2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   256f6:	2307      	movs	r3, #7
   256f8:	2200      	movs	r2, #0
   256fa:	901c      	str	r0, [sp, #112]	; 0x70
   256fc:	2110      	movs	r1, #16
   256fe:	a80e      	add	r0, sp, #56	; 0x38
   25700:	931b      	str	r3, [sp, #108]	; 0x6c
   25702:	2401      	movs	r4, #1
   25704:	2301      	movs	r3, #1
   25706:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2570a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2570e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   25712:	9426      	str	r4, [sp, #152]	; 0x98
   25714:	f10d 0920 	add.w	r9, sp, #32
   25718:	f7fe fb6e 	bl	23df8 <CC_PalMemSetZeroPlat>
   2571c:	2210      	movs	r2, #16
   2571e:	9200      	str	r2, [sp, #0]
   25720:	9905      	ldr	r1, [sp, #20]
   25722:	f8cd 9004 	str.w	r9, [sp, #4]
   25726:	ab0a      	add	r3, sp, #40	; 0x28
   25728:	4630      	mov	r0, r6
   2572a:	aa06      	add	r2, sp, #24
   2572c:	f7ff fa1e 	bl	24b6c <SetDataBuffersInfo>
   25730:	4607      	mov	r7, r0
   25732:	b170      	cbz	r0, 25752 <kmu_derive_cmac+0xc6>
   25734:	e01d      	b.n	25772 <kmu_derive_cmac+0xe6>
   25736:	a90e      	add	r1, sp, #56	; 0x38
   25738:	eb08 0007 	add.w	r0, r8, r7
   2573c:	f7fe fb58 	bl	23df0 <CC_PalMemCopyPlat>
   25740:	2110      	movs	r1, #16
   25742:	a80e      	add	r0, sp, #56	; 0x38
   25744:	f7fe fb58 	bl	23df8 <CC_PalMemSetZeroPlat>
   25748:	3401      	adds	r4, #1
   2574a:	1bad      	subs	r5, r5, r6
   2574c:	4437      	add	r7, r6
   2574e:	b2e4      	uxtb	r4, r4
   25750:	d024      	beq.n	2579c <kmu_derive_cmac+0x110>
   25752:	2d10      	cmp	r5, #16
   25754:	464a      	mov	r2, r9
   25756:	9b05      	ldr	r3, [sp, #20]
   25758:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2575c:	a906      	add	r1, sp, #24
   2575e:	a80e      	add	r0, sp, #56	; 0x38
   25760:	462e      	mov	r6, r5
   25762:	bf28      	it	cs
   25764:	2610      	movcs	r6, #16
   25766:	f7ff fe43 	bl	253f0 <FinishAesDrv>
   2576a:	4632      	mov	r2, r6
   2576c:	2800      	cmp	r0, #0
   2576e:	d0e2      	beq.n	25736 <kmu_derive_cmac+0xaa>
   25770:	4607      	mov	r7, r0
   25772:	a80e      	add	r0, sp, #56	; 0x38
   25774:	2274      	movs	r2, #116	; 0x74
   25776:	2100      	movs	r1, #0
   25778:	f7fe fb3c 	bl	23df4 <CC_PalMemSetPlat>
   2577c:	f7ff fc66 	bl	2504c <write_invalid_key>
   25780:	4638      	mov	r0, r7
   25782:	b04c      	add	sp, #304	; 0x130
   25784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25788:	4f05      	ldr	r7, [pc, #20]	; (257a0 <kmu_derive_cmac+0x114>)
   2578a:	4638      	mov	r0, r7
   2578c:	b04c      	add	sp, #304	; 0x130
   2578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25792:	4f04      	ldr	r7, [pc, #16]	; (257a4 <kmu_derive_cmac+0x118>)
   25794:	4638      	mov	r0, r7
   25796:	b04c      	add	sp, #304	; 0x130
   25798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2579c:	462f      	mov	r7, r5
   2579e:	e7e8      	b.n	25772 <kmu_derive_cmac+0xe6>
   257a0:	00f1000e 	.word	0x00f1000e
   257a4:	00f1000f 	.word	0x00f1000f

000257a8 <UtilCmacBuildDataForDerivation>:
   257a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257ac:	b082      	sub	sp, #8
   257ae:	461e      	mov	r6, r3
   257b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   257b2:	2300      	movs	r3, #0
   257b4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   257b8:	9301      	str	r3, [sp, #4]
   257ba:	d83e      	bhi.n	2583a <UtilCmacBuildDataForDerivation+0x92>
   257bc:	00e4      	lsls	r4, r4, #3
   257be:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   257c2:	4617      	mov	r7, r2
   257c4:	f101 32ff 	add.w	r2, r1, #4294967295
   257c8:	bf34      	ite	cc
   257ca:	2303      	movcc	r3, #3
   257cc:	2304      	movcs	r3, #4
   257ce:	2a3f      	cmp	r2, #63	; 0x3f
   257d0:	460d      	mov	r5, r1
   257d2:	9300      	str	r3, [sp, #0]
   257d4:	d831      	bhi.n	2583a <UtilCmacBuildDataForDerivation+0x92>
   257d6:	b380      	cbz	r0, 2583a <UtilCmacBuildDataForDerivation+0x92>
   257d8:	b116      	cbz	r6, 257e0 <UtilCmacBuildDataForDerivation+0x38>
   257da:	b377      	cbz	r7, 2583a <UtilCmacBuildDataForDerivation+0x92>
   257dc:	2e40      	cmp	r6, #64	; 0x40
   257de:	d82c      	bhi.n	2583a <UtilCmacBuildDataForDerivation+0x92>
   257e0:	9a08      	ldr	r2, [sp, #32]
   257e2:	b352      	cbz	r2, 2583a <UtilCmacBuildDataForDerivation+0x92>
   257e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   257e6:	6811      	ldr	r1, [r2, #0]
   257e8:	b339      	cbz	r1, 2583a <UtilCmacBuildDataForDerivation+0x92>
   257ea:	19aa      	adds	r2, r5, r6
   257ec:	4413      	add	r3, r2
   257ee:	4299      	cmp	r1, r3
   257f0:	d323      	bcc.n	2583a <UtilCmacBuildDataForDerivation+0x92>
   257f2:	9b08      	ldr	r3, [sp, #32]
   257f4:	4601      	mov	r1, r0
   257f6:	462a      	mov	r2, r5
   257f8:	1c58      	adds	r0, r3, #1
   257fa:	f7fe faf9 	bl	23df0 <CC_PalMemCopyPlat>
   257fe:	9b08      	ldr	r3, [sp, #32]
   25800:	f105 0802 	add.w	r8, r5, #2
   25804:	441d      	add	r5, r3
   25806:	2300      	movs	r3, #0
   25808:	706b      	strb	r3, [r5, #1]
   2580a:	bb0e      	cbnz	r6, 25850 <UtilCmacBuildDataForDerivation+0xa8>
   2580c:	9b08      	ldr	r3, [sp, #32]
   2580e:	9400      	str	r4, [sp, #0]
   25810:	2cff      	cmp	r4, #255	; 0xff
   25812:	eb03 0008 	add.w	r0, r3, r8
   25816:	d914      	bls.n	25842 <UtilCmacBuildDataForDerivation+0x9a>
   25818:	0223      	lsls	r3, r4, #8
   2581a:	b29b      	uxth	r3, r3
   2581c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   25820:	2202      	movs	r2, #2
   25822:	a901      	add	r1, sp, #4
   25824:	9401      	str	r4, [sp, #4]
   25826:	f7fe fae3 	bl	23df0 <CC_PalMemCopyPlat>
   2582a:	f108 0302 	add.w	r3, r8, #2
   2582e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25830:	2000      	movs	r0, #0
   25832:	6013      	str	r3, [r2, #0]
   25834:	b002      	add	sp, #8
   25836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2583a:	480a      	ldr	r0, [pc, #40]	; (25864 <UtilCmacBuildDataForDerivation+0xbc>)
   2583c:	b002      	add	sp, #8
   2583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25842:	2201      	movs	r2, #1
   25844:	4669      	mov	r1, sp
   25846:	f7fe fad3 	bl	23df0 <CC_PalMemCopyPlat>
   2584a:	f108 0301 	add.w	r3, r8, #1
   2584e:	e7ee      	b.n	2582e <UtilCmacBuildDataForDerivation+0x86>
   25850:	9b08      	ldr	r3, [sp, #32]
   25852:	4632      	mov	r2, r6
   25854:	eb03 0008 	add.w	r0, r3, r8
   25858:	4639      	mov	r1, r7
   2585a:	f7fe fac9 	bl	23df0 <CC_PalMemCopyPlat>
   2585e:	44b0      	add	r8, r6
   25860:	e7d4      	b.n	2580c <UtilCmacBuildDataForDerivation+0x64>
   25862:	bf00      	nop
   25864:	80000006 	.word	0x80000006

00025868 <CC_PalDataBufferAttrGet>:
   25868:	2000      	movs	r0, #0
   2586a:	7018      	strb	r0, [r3, #0]
   2586c:	4770      	bx	lr
   2586e:	bf00      	nop

00025870 <_is_value_in_table>:
{
   25870:	b530      	push	{r4, r5, lr}
  for(int i=0; i<len; i++)
   25872:	2400      	movs	r4, #0
    if(value == table[i])
   25874:	5d0d      	ldrb	r5, [r1, r4]
   25876:	4285      	cmp	r5, r0
   25878:	d102      	bne.n	25880 <_is_value_in_table+0x10>
      *index = i;
   2587a:	701c      	strb	r4, [r3, #0]
      return bTRUE;
   2587c:	2001      	movs	r0, #1
}
   2587e:	bd30      	pop	{r4, r5, pc}
  for(int i=0; i<len; i++)
   25880:	3401      	adds	r4, #1
   25882:	42a2      	cmp	r2, r4
   25884:	dcf6      	bgt.n	25874 <_is_value_in_table+0x4>
  return bFALSE;
   25886:	2000      	movs	r0, #0
   25888:	e7f9      	b.n	2587e <_is_value_in_table+0xe>

0002588a <AD5940_ReadWrite16B>:
{
   2588a:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = data>>8;
   2588c:	0a03      	lsrs	r3, r0, #8
   SendBuffer[1] = data&0xff;
   2588e:	f88d 0001 	strb.w	r0, [sp, #1]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   25892:	2202      	movs	r2, #2
   25894:	4668      	mov	r0, sp
   25896:	a901      	add	r1, sp, #4
   SendBuffer[0] = data>>8;
   25898:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   2589c:	f7ec fa28 	bl	11cf0 <AD5940_ReadWriteNBytes>
   return (((uint16_t)RecvBuffer[0])<<8)|RecvBuffer[1];
   258a0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   258a4:	ba40      	rev16	r0, r0
}
   258a6:	b280      	uxth	r0, r0
   258a8:	b003      	add	sp, #12
   258aa:	f85d fb04 	ldr.w	pc, [sp], #4

000258ae <AD5940_ReadWrite32B>:
{
   258ae:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = (data>>24)&0xff;
   258b0:	0e03      	lsrs	r3, r0, #24
   258b2:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   258b6:	2204      	movs	r2, #4
   SendBuffer[1] = (data>>16)&0xff;
   258b8:	0c03      	lsrs	r3, r0, #16
   258ba:	f88d 3001 	strb.w	r3, [sp, #1]
   SendBuffer[3] = (data    )&0xff;
   258be:	f88d 0003 	strb.w	r0, [sp, #3]
   SendBuffer[2] = (data>> 8)&0xff;
   258c2:	0a03      	lsrs	r3, r0, #8
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   258c4:	eb0d 0102 	add.w	r1, sp, r2
   258c8:	4668      	mov	r0, sp
   SendBuffer[2] = (data>> 8)&0xff;
   258ca:	f88d 3002 	strb.w	r3, [sp, #2]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   258ce:	f7ec fa0f 	bl	11cf0 <AD5940_ReadWriteNBytes>
}
   258d2:	9801      	ldr	r0, [sp, #4]
   258d4:	ba00      	rev	r0, r0
   258d6:	b003      	add	sp, #12
   258d8:	f85d fb04 	ldr.w	pc, [sp], #4

000258dc <AD5940_ReadWrite8B.isra.0>:
static unsigned char AD5940_ReadWrite8B(unsigned char data)
   258dc:	b507      	push	{r0, r1, r2, lr}
   AD5940_ReadWriteNBytes(tx,rx,1);
   258de:	2201      	movs	r2, #1
   tx[0] = data;
   258e0:	f88d 0000 	strb.w	r0, [sp]
   AD5940_ReadWriteNBytes(tx,rx,1);
   258e4:	a901      	add	r1, sp, #4
   258e6:	4668      	mov	r0, sp
   258e8:	f7ec fa02 	bl	11cf0 <AD5940_ReadWriteNBytes>
}
   258ec:	b003      	add	sp, #12
   258ee:	f85d fb04 	ldr.w	pc, [sp], #4

000258f2 <AD5940_SPIReadReg>:
{  
   258f2:	b510      	push	{r4, lr}
   258f4:	4604      	mov	r4, r0
  AD5940_CsClr();
   258f6:	f000 fd88 	bl	2640a <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   258fa:	2020      	movs	r0, #32
   258fc:	f7ff ffee 	bl	258dc <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   25900:	4620      	mov	r0, r4
   25902:	f7ff ffc2 	bl	2588a <AD5940_ReadWrite16B>
  AD5940_CsSet();
   25906:	f000 fd84 	bl	26412 <AD5940_CsSet>
  AD5940_CsClr();
   2590a:	f000 fd7e 	bl	2640a <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_READREG);
   2590e:	206d      	movs	r0, #109	; 0x6d
   25910:	f7ff ffe4 	bl	258dc <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   25914:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_ReadWrite8B(0);  //Dummy read
   25918:	2000      	movs	r0, #0
   2591a:	f7ff ffdf 	bl	258dc <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   2591e:	b2a4      	uxth	r4, r4
   25920:	f242 0314 	movw	r3, #8212	; 0x2014
   25924:	429c      	cmp	r4, r3
    Data = AD5940_ReadWrite32B(0);
   25926:	f04f 0000 	mov.w	r0, #0
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   2592a:	d806      	bhi.n	2593a <AD5940_SPIReadReg+0x48>
    Data = AD5940_ReadWrite32B(0);
   2592c:	f7ff ffbf 	bl	258ae <AD5940_ReadWrite32B>
    Data = AD5940_ReadWrite16B(0);
   25930:	4604      	mov	r4, r0
  AD5940_CsSet();
   25932:	f000 fd6e 	bl	26412 <AD5940_CsSet>
}
   25936:	4620      	mov	r0, r4
   25938:	bd10      	pop	{r4, pc}
    Data = AD5940_ReadWrite16B(0);
   2593a:	f7ff ffa6 	bl	2588a <AD5940_ReadWrite16B>
   2593e:	e7f7      	b.n	25930 <AD5940_SPIReadReg+0x3e>

00025940 <AD5940_FIFORd>:
   if(uiReadCount < 3)
   25940:	2902      	cmp	r1, #2
{
   25942:	b570      	push	{r4, r5, r6, lr}
   25944:	4604      	mov	r4, r0
   25946:	460d      	mov	r5, r1
   if(uiReadCount < 3)
   25948:	d81f      	bhi.n	2598a <AD5940_FIFORd+0x4a>
      AD5940_CsClr();
   2594a:	f000 fd5e 	bl	2640a <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_SETADDR);
   2594e:	2020      	movs	r0, #32
   25950:	f7ff ffc4 	bl	258dc <AD5940_ReadWrite8B.isra.0>
      AD5940_ReadWrite16B(REG_AFE_DATAFIFORD);
   25954:	f242 006c 	movw	r0, #8300	; 0x206c
   25958:	f7ff ff97 	bl	2588a <AD5940_ReadWrite16B>
      AD5940_CsSet();
   2595c:	f000 fd59 	bl	26412 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   25960:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   25964:	42ac      	cmp	r4, r5
   25966:	d100      	bne.n	2596a <AD5940_FIFORd+0x2a>
}
   25968:	bd70      	pop	{r4, r5, r6, pc}
         AD5940_CsClr();
   2596a:	f000 fd4e 	bl	2640a <AD5940_CsClr>
         AD5940_ReadWrite8B(SPICMD_READREG);
   2596e:	206d      	movs	r0, #109	; 0x6d
   25970:	f7ff ffb4 	bl	258dc <AD5940_ReadWrite8B.isra.0>
         AD5940_ReadWrite8B(0);//Write Host status/Don't care
   25974:	2000      	movs	r0, #0
   25976:	f7ff ffb1 	bl	258dc <AD5940_ReadWrite8B.isra.0>
         pBuffer[i] = AD5940_ReadWrite32B(0);
   2597a:	2000      	movs	r0, #0
   2597c:	f7ff ff97 	bl	258ae <AD5940_ReadWrite32B>
   25980:	f844 0b04 	str.w	r0, [r4], #4
         AD5940_CsSet();
   25984:	f000 fd45 	bl	26412 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   25988:	e7ec      	b.n	25964 <AD5940_FIFORd+0x24>
      AD5940_CsClr();
   2598a:	f000 fd3e 	bl	2640a <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_READFIFO);
   2598e:	205f      	movs	r0, #95	; 0x5f
   25990:	f7ff ffa4 	bl	258dc <AD5940_ReadWrite8B.isra.0>
   25994:	2606      	movs	r6, #6
         AD5940_ReadWrite8B(0);
   25996:	2000      	movs	r0, #0
   25998:	f7ff ffa0 	bl	258dc <AD5940_ReadWrite8B.isra.0>
      for(i=0;i<6;i++)
   2599c:	3e01      	subs	r6, #1
   2599e:	d1fa      	bne.n	25996 <AD5940_FIFORd+0x56>
      for(i=0;i<uiReadCount-2;i++)
   259a0:	3d02      	subs	r5, #2
         pBuffer[i] = AD5940_ReadWrite32B(0); /*Offset is 0, so we always read DATAFIFORD register */
   259a2:	2000      	movs	r0, #0
   259a4:	f7ff ff83 	bl	258ae <AD5940_ReadWrite32B>
   259a8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      for(i=0;i<uiReadCount-2;i++)
   259ac:	3601      	adds	r6, #1
   259ae:	42b5      	cmp	r5, r6
   259b0:	d8f7      	bhi.n	259a2 <AD5940_FIFORd+0x62>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   259b2:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   259b6:	f7ff ff7a 	bl	258ae <AD5940_ReadWrite32B>
   259ba:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   259be:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   259c2:	f7ff ff74 	bl	258ae <AD5940_ReadWrite32B>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   259c6:	00ae      	lsls	r6, r5, #2
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   259c8:	3604      	adds	r6, #4
   259ca:	51a0      	str	r0, [r4, r6]
}
   259cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      AD5940_CsSet();
   259d0:	f000 bd1f 	b.w	26412 <AD5940_CsSet>

000259d4 <AD5940_AFECtrlS>:
{
   259d4:	b538      	push	{r3, r4, r5, lr}
   259d6:	4604      	mov	r4, r0
   259d8:	460d      	mov	r5, r1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   259da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   259de:	f7ec f807 	bl	119f0 <AD5940_ReadReg>
  if (State == bTRUE) {
   259e2:	2d01      	cmp	r5, #1
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   259e4:	f004 0320 	and.w	r3, r4, #32
  if (State == bTRUE) {
   259e8:	d112      	bne.n	25a10 <AD5940_AFECtrlS+0x3c>
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   259ea:	b11b      	cbz	r3, 259f4 <AD5940_AFECtrlS+0x20>
        tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   259ec:	f020 0020 	bic.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   259f0:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   259f4:	0322      	lsls	r2, r4, #12
      tempreg &= ~BITM_AFE_AFECON_ALDOILIMITEN;
   259f6:	bf44      	itt	mi
   259f8:	f420 2000 	bicmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   259fc:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg |= AfeCtrlSet;
   25a00:	ea44 0100 	orr.w	r1, r4, r0
}
   25a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   25a08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25a0c:	f7eb bfa0 	b.w	11950 <AD5940_WriteReg>
    if(AfeCtrlSet & AFECTRL_HPREFPWR)
   25a10:	b11b      	cbz	r3, 25a1a <AD5940_AFECtrlS+0x46>
        tempreg |= BITM_AFE_AFECON_HPREFDIS;
   25a12:	f040 0020 	orr.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   25a16:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   25a1a:	0323      	lsls	r3, r4, #12
      tempreg |= BITM_AFE_AFECON_ALDOILIMITEN;
   25a1c:	bf44      	itt	mi
   25a1e:	f440 2000 	orrmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   25a22:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg &= ~AfeCtrlSet;
   25a26:	ea20 0104 	bic.w	r1, r0, r4
   25a2a:	e7eb      	b.n	25a04 <AD5940_AFECtrlS+0x30>

00025a2c <AD5940_AFEPwrBW>:
  AD5940_WriteReg(REG_AFE_PMBW, tempreg);
   25a2c:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   25a30:	f242 20f0 	movw	r0, #8944	; 0x22f0
   25a34:	f7eb bf8c 	b.w	11950 <AD5940_WriteReg>

00025a38 <AD5940_REFCfgS>:
{
   25a38:	b510      	push	{r4, lr}
   25a3a:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   25a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25a40:	f7eb ffd6 	bl	119f0 <AD5940_ReadReg>
  if(pBufCfg->HpBandgapEn == bFALSE)
   25a44:	7823      	ldrb	r3, [r4, #0]
  tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   25a46:	f020 0120 	bic.w	r1, r0, #32
  if(pBufCfg->HpBandgapEn == bFALSE)
   25a4a:	b90b      	cbnz	r3, 25a50 <AD5940_REFCfgS+0x18>
    tempreg |= BITM_AFE_AFECON_HPREFDIS;
   25a4c:	f041 0120 	orr.w	r1, r1, #32
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   25a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25a54:	f7eb ff7c 	bl	11950 <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   25a58:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   25a5c:	f7eb ffc8 	bl	119f0 <AD5940_ReadReg>
  if(pBufCfg->Hp1V8BuffEn == bTRUE)
   25a60:	7863      	ldrb	r3, [r4, #1]
   25a62:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   25a64:	78a3      	ldrb	r3, [r4, #2]
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   25a66:	4601      	mov	r1, r0
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCEN;
   25a68:	bf08      	it	eq
   25a6a:	f040 0101 	orreq.w	r1, r0, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   25a6e:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   25a70:	78e3      	ldrb	r3, [r4, #3]
    tempreg |= BITM_AFE_BUFSENCON_V1P1HPADCEN;
   25a72:	bf08      	it	eq
   25a74:	f041 0110 	orreq.w	r1, r1, #16
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   25a78:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   25a7a:	7923      	ldrb	r3, [r4, #4]
    tempreg |= BITM_AFE_BUFSENCON_V1P8LPADCEN;
   25a7c:	bf08      	it	eq
   25a7e:	f041 0104 	orreq.w	r1, r1, #4
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   25a82:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   25a84:	7a63      	ldrb	r3, [r4, #9]
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCEN;
   25a86:	bf08      	it	eq
   25a88:	f041 0120 	orreq.w	r1, r1, #32
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   25a8c:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   25a8e:	7aa3      	ldrb	r3, [r4, #10]
    tempreg |= BITM_AFE_BUFSENCON_V1P8THERMSTEN;
   25a90:	bf08      	it	eq
   25a92:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   25a96:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V8Cap == bTRUE)
   25a98:	7ae3      	ldrb	r3, [r4, #11]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCILIMITEN;
   25a9a:	bf08      	it	eq
   25a9c:	f041 0102 	orreq.w	r1, r1, #2
  if(pBufCfg->Disc1V8Cap == bTRUE)
   25aa0:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V1Cap == bTRUE)
   25aa2:	7b23      	ldrb	r3, [r4, #12]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCCHGDIS;
   25aa4:	bf08      	it	eq
   25aa6:	f041 0108 	orreq.w	r1, r1, #8
  if(pBufCfg->Disc1V1Cap == bTRUE)
   25aaa:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCCHGDIS;
   25aac:	bf08      	it	eq
   25aae:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
  AD5940_WriteReg(REG_AFE_BUFSENCON, tempreg);
   25ab2:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   25ab6:	f7eb ff4b 	bl	11950 <AD5940_WriteReg>
  if(pBufCfg->LpRefBufEn == bFALSE)
   25aba:	79a3      	ldrb	r3, [r4, #6]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   25abc:	2b00      	cmp	r3, #0
  if(pBufCfg->LpBandgapEn == bFALSE)
   25abe:	7963      	ldrb	r3, [r4, #5]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   25ac0:	bf14      	ite	ne
   25ac2:	2100      	movne	r1, #0
   25ac4:	2102      	moveq	r1, #2
  if(pBufCfg->LpBandgapEn == bFALSE)
   25ac6:	b90b      	cbnz	r3, 25acc <AD5940_REFCfgS+0x94>
    tempreg |= BITM_AFE_LPREFBUFCON_LPREFDIS;
   25ac8:	f041 0101 	orr.w	r1, r1, #1
  if(pBufCfg->LpRefBoostEn == bTRUE)
   25acc:	79e3      	ldrb	r3, [r4, #7]
   25ace:	2b01      	cmp	r3, #1
}
   25ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_LPREFBUFCON_BOOSTCURRENT;
   25ad4:	bf08      	it	eq
   25ad6:	f041 0104 	orreq.w	r1, r1, #4
  AD5940_WriteReg(REG_AFE_LPREFBUFCON, tempreg);
   25ada:	f242 0050 	movw	r0, #8272	; 0x2050
   25ade:	f7eb bf37 	b.w	11950 <AD5940_WriteReg>

00025ae2 <AD5940_SWMatrixCfgS>:
{
   25ae2:	b510      	push	{r4, lr}
   25ae4:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_DSWFULLCON, pSwMatrix->Dswitch);
   25ae6:	6801      	ldr	r1, [r0, #0]
   25ae8:	f242 1050 	movw	r0, #8528	; 0x2150
   25aec:	f7eb ff30 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_PSWFULLCON, pSwMatrix->Pswitch);
   25af0:	6861      	ldr	r1, [r4, #4]
   25af2:	f242 1058 	movw	r0, #8536	; 0x2158
   25af6:	f7eb ff2b 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_NSWFULLCON, pSwMatrix->Nswitch);
   25afa:	68a1      	ldr	r1, [r4, #8]
   25afc:	f242 1054 	movw	r0, #8532	; 0x2154
   25b00:	f7eb ff26 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_TSWFULLCON, pSwMatrix->Tswitch);
   25b04:	68e1      	ldr	r1, [r4, #12]
   25b06:	f242 105c 	movw	r0, #8540	; 0x215c
   25b0a:	f7eb ff21 	bl	11950 <AD5940_WriteReg>
}
   25b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_SWCON, BITM_AFE_SWCON_SWSOURCESEL); /* Update switch configuration */
   25b12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   25b16:	f242 000c 	movw	r0, #8204	; 0x200c
   25b1a:	f7eb bf19 	b.w	11950 <AD5940_WriteReg>

00025b1e <AD5940_LPDAC0WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT0, ((uint32_t)Data6Bit<<12)|Data12Bit);
   25b1e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   25b22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   25b26:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   25b2a:	f242 1020 	movw	r0, #8480	; 0x2120
   25b2e:	f7eb bf0f 	b.w	11950 <AD5940_WriteReg>

00025b32 <AD5940_LPDAC1WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT1, ((uint32_t)Data6Bit<<12)|Data12Bit);
   25b32:	f3c0 000b 	ubfx	r0, r0, #0, #12
   25b36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   25b3a:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   25b3e:	f242 102c 	movw	r0, #8492	; 0x212c
   25b42:	f7eb bf05 	b.w	11950 <AD5940_WriteReg>

00025b46 <AD5940_LPDACCfgS>:
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   25b46:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
{
   25b4a:	b510      	push	{r4, lr}
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   25b4c:	0119      	lsls	r1, r3, #4
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   25b4e:	68c3      	ldr	r3, [r0, #12]
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   25b50:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   25b54:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
  tempreg |= (pLpDacCfg->LpDacRef)<<BITP_AFE_LPDACCON0_REFSEL;
   25b58:	6943      	ldr	r3, [r0, #20]
   25b5a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
  if(pLpDacCfg->DataRst == bFALSE)
   25b5e:	7e03      	ldrb	r3, [r0, #24]
{
   25b60:	4604      	mov	r4, r0
  if(pLpDacCfg->DataRst == bFALSE)
   25b62:	b90b      	cbnz	r3, 25b68 <AD5940_LPDACCfgS+0x22>
    tempreg |= BITM_AFE_LPDACCON0_RSTEN;
   25b64:	f041 0101 	orr.w	r1, r1, #1
  if(pLpDacCfg->PowerEn == bFALSE)
   25b68:	7e63      	ldrb	r3, [r4, #25]
   25b6a:	b90b      	cbnz	r3, 25b70 <AD5940_LPDACCfgS+0x2a>
    tempreg |= BITM_AFE_LPDACCON0_PWDEN;
   25b6c:	f041 0102 	orr.w	r1, r1, #2
  if(pLpDacCfg->LpdacSel == LPDAC0)
   25b70:	6823      	ldr	r3, [r4, #0]
   25b72:	b983      	cbnz	r3, 25b96 <AD5940_LPDACCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPDACCON0, tempreg);
   25b74:	f242 1028 	movw	r0, #8488	; 0x2128
   25b78:	f7eb feea 	bl	11950 <AD5940_WriteReg>
    AD5940_LPDAC0WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   25b7c:	7f21      	ldrb	r1, [r4, #28]
   25b7e:	8b60      	ldrh	r0, [r4, #26]
   25b80:	f7ff ffcd 	bl	25b1e <AD5940_LPDAC0WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW0, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   25b84:	6921      	ldr	r1, [r4, #16]
   25b86:	f242 1024 	movw	r0, #8484	; 0x2124
   25b8a:	f041 0120 	orr.w	r1, r1, #32
}
   25b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   25b92:	f7eb bedd 	b.w	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPDACCON1, tempreg);
   25b96:	f242 1034 	movw	r0, #8500	; 0x2134
   25b9a:	f7eb fed9 	bl	11950 <AD5940_WriteReg>
    AD5940_LPDAC1WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   25b9e:	7f21      	ldrb	r1, [r4, #28]
   25ba0:	8b60      	ldrh	r0, [r4, #26]
   25ba2:	f7ff ffc6 	bl	25b32 <AD5940_LPDAC1WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   25ba6:	6921      	ldr	r1, [r4, #16]
   25ba8:	f242 1030 	movw	r0, #8496	; 0x2130
   25bac:	f041 0120 	orr.w	r1, r1, #32
   25bb0:	e7ed      	b.n	25b8e <AD5940_LPDACCfgS+0x48>

00025bb2 <AD5940_LPAMPCfgS>:
{
   25bb2:	b510      	push	{r4, lr}
  if(pLpAmpCfg->LpPaPwrEn == bFALSE)
   25bb4:	7e03      	ldrb	r3, [r0, #24]
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   25bb6:	2b00      	cmp	r3, #0
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   25bb8:	7e43      	ldrb	r3, [r0, #25]
{
   25bba:	4604      	mov	r4, r0
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   25bbc:	bf14      	ite	ne
   25bbe:	2100      	movne	r1, #0
   25bc0:	2102      	moveq	r1, #2
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   25bc2:	b90b      	cbnz	r3, 25bc8 <AD5940_LPAMPCfgS+0x16>
    tempreg |= BITM_AFE_LPTIACON0_TIAPDEN;
   25bc4:	f041 0101 	orr.w	r1, r1, #1
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   25bc8:	6922      	ldr	r2, [r4, #16]
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   25bca:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   25bce:	2a04      	cmp	r2, #4
    tempreg |= BITM_AFE_LPTIACON0_HALFPWR;
   25bd0:	bf0c      	ite	eq
   25bd2:	f041 0204 	orreq.w	r2, r1, #4
    tempreg |= pLpAmpCfg->LpAmpPwrMod<<BITP_AFE_LPTIACON0_IBOOST;
   25bd6:	ea41 02c2 	orrne.w	r2, r1, r2, lsl #3
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   25bda:	0299      	lsls	r1, r3, #10
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   25bdc:	6863      	ldr	r3, [r4, #4]
   25bde:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
   25be2:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   25be6:	6823      	ldr	r3, [r4, #0]
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   25be8:	4311      	orrs	r1, r2
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   25bea:	b953      	cbnz	r3, 25c02 <AD5940_LPAMPCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPTIACON0, tempreg);
   25bec:	f242 00ec 	movw	r0, #8428	; 0x20ec
   25bf0:	f7eb feae 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW0, pLpAmpCfg->LpTiaSW);
   25bf4:	6961      	ldr	r1, [r4, #20]
   25bf6:	f242 00e4 	movw	r0, #8420	; 0x20e4
}
   25bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   25bfe:	f7eb bea7 	b.w	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIACON1, tempreg);
   25c02:	f242 00e8 	movw	r0, #8424	; 0x20e8
   25c06:	f7eb fea3 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   25c0a:	6961      	ldr	r1, [r4, #20]
   25c0c:	f242 00e0 	movw	r0, #8416	; 0x20e0
   25c10:	e7f3      	b.n	25bfa <AD5940_LPAMPCfgS+0x48>

00025c12 <AD5940_LPLoopCfgS>:
{
   25c12:	b510      	push	{r4, lr}
   25c14:	4604      	mov	r4, r0
  AD5940_LPDACCfgS(&pLpLoopCfg->LpDacCfg);
   25c16:	f7ff ff96 	bl	25b46 <AD5940_LPDACCfgS>
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   25c1a:	f104 0020 	add.w	r0, r4, #32
}
   25c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   25c22:	f7ff bfc6 	b.w	25bb2 <AD5940_LPAMPCfgS>

00025c26 <AD5940_ADCBaseCfgS>:
  tempreg |= (uint32_t)(pADCInit->ADCMuxN)<<BITP_AFE_ADCCON_MUXSELN;
   25c26:	e9d0 1200 	ldrd	r1, r2, [r0]
  tempreg |= (uint32_t)(pADCInit->ADCPga)<<BITP_AFE_ADCCON_GNPGA;
   25c2a:	6883      	ldr	r3, [r0, #8]
   25c2c:	041b      	lsls	r3, r3, #16
   25c2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
   25c32:	4319      	orrs	r1, r3
   25c34:	f242 10a8 	movw	r0, #8616	; 0x21a8
   25c38:	f7eb be8a 	b.w	11950 <AD5940_WriteReg>

00025c3c <AD5940_ADCFilterCfgS>:
{
   25c3c:	b510      	push	{r4, lr}
   25c3e:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   25c40:	f242 0044 	movw	r0, #8260	; 0x2044
   25c44:	f7eb fed4 	bl	119f0 <AD5940_ReadReg>
  if(pFiltCfg->BpNotch == bTRUE)
   25c48:	7c23      	ldrb	r3, [r4, #16]
  tempreg |= pFiltCfg->ADCRate;
   25c4a:	68e1      	ldr	r1, [r4, #12]
  if(pFiltCfg->BpNotch == bTRUE)
   25c4c:	2b01      	cmp	r3, #1
  tempreg &= BITM_AFE_ADCFILTERCON_AVRGEN; /* Keep this bit setting. */
   25c4e:	f000 0080 	and.w	r0, r0, #128	; 0x80
  if(pFiltCfg->BpSinc3 == bTRUE)
   25c52:	7c63      	ldrb	r3, [r4, #17]
  tempreg |= pFiltCfg->ADCRate;
   25c54:	ea40 0001 	orr.w	r0, r0, r1
    tempreg |= BITM_AFE_ADCFILTERCON_LPFBYPEN;
   25c58:	bf08      	it	eq
   25c5a:	f040 0010 	orreq.w	r0, r0, #16
  if(pFiltCfg->BpSinc3 == bTRUE)
   25c5e:	2b01      	cmp	r3, #1
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc3Osr)<<BITP_AFE_ADCFILTERCON_SINC3OSR;
   25c60:	e9d4 1300 	ldrd	r1, r3, [r4]
   25c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   25c68:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   25c6c:	68a3      	ldr	r3, [r4, #8]
    tempreg |= BITM_AFE_ADCFILTERCON_SINC3BYP;
   25c6e:	bf08      	it	eq
   25c70:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   25c74:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
  AD5940_WriteReg(REG_AFE_ADCFILTERCON, tempreg);
   25c78:	4301      	orrs	r1, r0
   25c7a:	f242 0044 	movw	r0, #8260	; 0x2044
   25c7e:	f7eb fe67 	bl	11950 <AD5940_WriteReg>
  if(pFiltCfg->Sinc2NotchEnable)
   25c82:	7ca3      	ldrb	r3, [r4, #18]
   25c84:	b133      	cbz	r3, 25c94 <AD5940_ADCFilterCfgS+0x58>
}
   25c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_AFECtrlS(AFECTRL_SINC2NOTCH,bTRUE);
   25c8a:	2101      	movs	r1, #1
   25c8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   25c90:	f7ff bea0 	b.w	259d4 <AD5940_AFECtrlS>
}
   25c94:	bd10      	pop	{r4, pc}

00025c96 <AD5940_ADCDigCompCfgS>:
{
   25c96:	b510      	push	{r4, lr}
   25c98:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_ADCMIN, pCompCfg->ADCMin);
   25c9a:	8801      	ldrh	r1, [r0, #0]
   25c9c:	f242 00a8 	movw	r0, #8360	; 0x20a8
   25ca0:	f7eb fe56 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMINSM, pCompCfg->ADCMinHys);
   25ca4:	8861      	ldrh	r1, [r4, #2]
   25ca6:	f242 00ac 	movw	r0, #8364	; 0x20ac
   25caa:	f7eb fe51 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAX, pCompCfg->ADCMax);
   25cae:	88a1      	ldrh	r1, [r4, #4]
   25cb0:	f242 00b0 	movw	r0, #8368	; 0x20b0
   25cb4:	f7eb fe4c 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   25cb8:	88e1      	ldrh	r1, [r4, #6]
   25cba:	f242 00b4 	movw	r0, #8372	; 0x20b4
}
   25cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   25cc2:	f7eb be45 	b.w	11950 <AD5940_WriteReg>

00025cc6 <AD5940_StatisticCfgS>:
  tempreg |= (pStatCfg->StatDev) << BITP_AFE_STATSCON_STDDEV;
   25cc6:	e9d0 3100 	ldrd	r3, r1, [r0]
   25cca:	01db      	lsls	r3, r3, #7
   25ccc:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  if(pStatCfg->StatEnable == bTRUE)
   25cd0:	7a03      	ldrb	r3, [r0, #8]
  AD5940_WriteReg(REG_AFE_STATSCON, tempreg);
   25cd2:	f242 10c4 	movw	r0, #8644	; 0x21c4
   25cd6:	2b01      	cmp	r3, #1
   25cd8:	bf08      	it	eq
   25cda:	f041 0101 	orreq.w	r1, r1, #1
   25cde:	f7eb be37 	b.w	11950 <AD5940_WriteReg>

00025ce2 <AD5940_DFTCfgS>:
{
   25ce2:	b510      	push	{r4, lr}
   25ce4:	4604      	mov	r4, r0
  reg_adcfilter = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   25ce6:	f242 0044 	movw	r0, #8260	; 0x2044
   25cea:	f7eb fe81 	bl	119f0 <AD5940_ReadReg>
  if(pDftCfg->DftSrc == DFTSRC_AVG)
   25cee:	6863      	ldr	r3, [r4, #4]
   25cf0:	2b03      	cmp	r3, #3
   25cf2:	d114      	bne.n	25d1e <AD5940_DFTCfgS+0x3c>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   25cf4:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   25cf8:	f242 0044 	movw	r0, #8260	; 0x2044
   25cfc:	f7eb fe28 	bl	11950 <AD5940_WriteReg>
  reg_dftcon = 0;
   25d00:	2100      	movs	r1, #0
  reg_dftcon |= (pDftCfg->DftNum) << BITP_AFE_DFTCON_DFTNUM;
   25d02:	6823      	ldr	r3, [r4, #0]
   25d04:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
  if(pDftCfg->HanWinEn == bTRUE)
   25d08:	7a23      	ldrb	r3, [r4, #8]
   25d0a:	2b01      	cmp	r3, #1
}
   25d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reg_dftcon |= BITM_AFE_DFTCON_HANNINGEN;
   25d10:	bf08      	it	eq
   25d12:	f041 0101 	orreq.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_DFTCON, reg_dftcon);
   25d16:	f242 00d0 	movw	r0, #8400	; 0x20d0
   25d1a:	f7eb be19 	b.w	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   25d1e:	f020 0180 	bic.w	r1, r0, #128	; 0x80
   25d22:	f242 0044 	movw	r0, #8260	; 0x2044
   25d26:	f7eb fe13 	bl	11950 <AD5940_WriteReg>
    reg_dftcon |= (pDftCfg->DftSrc) << BITP_AFE_DFTCON_DFTINSEL;
   25d2a:	6861      	ldr	r1, [r4, #4]
   25d2c:	0509      	lsls	r1, r1, #20
   25d2e:	e7e8      	b.n	25d02 <AD5940_DFTCfgS+0x20>

00025d30 <AD5940_DSPCfgS>:
{
   25d30:	b510      	push	{r4, lr}
   25d32:	4604      	mov	r4, r0
  AD5940_ADCBaseCfgS(&pDSPCfg->ADCBaseCfg);
   25d34:	f7ff ff77 	bl	25c26 <AD5940_ADCBaseCfgS>
  AD5940_ADCFilterCfgS(&pDSPCfg->ADCFilterCfg);
   25d38:	f104 000c 	add.w	r0, r4, #12
   25d3c:	f7ff ff7e 	bl	25c3c <AD5940_ADCFilterCfgS>
  AD5940_ADCDigCompCfgS(&pDSPCfg->ADCDigCompCfg);
   25d40:	f104 0020 	add.w	r0, r4, #32
   25d44:	f7ff ffa7 	bl	25c96 <AD5940_ADCDigCompCfgS>
  AD5940_DFTCfgS(&pDSPCfg->DftCfg);
   25d48:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25d4c:	f7ff ffc9 	bl	25ce2 <AD5940_DFTCfgS>
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   25d50:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
   25d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   25d58:	f7ff bfb5 	b.w	25cc6 <AD5940_StatisticCfgS>

00025d5c <AD5940_FIFOCfg>:
{
   25d5c:	b510      	push	{r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   25d5e:	2100      	movs	r1, #0
{
   25d60:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   25d62:	f242 0008 	movw	r0, #8200	; 0x2008
   25d66:	f7eb fdf3 	bl	11950 <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   25d6a:	f242 10d8 	movw	r0, #8664	; 0x21d8
   25d6e:	f7eb fe3f 	bl	119f0 <AD5940_ReadReg>
  tempreg |= pFifoCfg->FIFOSize << BITP_AFE_CMDDATACON_DATA_MEM_SEL;  		  /* Data FIFO memory size */
   25d72:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   25d76:	019b      	lsls	r3, r3, #6
   25d78:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
  tempreg &= BITM_AFE_CMDDATACON_CMD_MEM_SEL|BITM_AFE_CMDDATACON_CMDMEMMDE; /* Keep sequencer memory settings */
   25d7c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   25d80:	4319      	orrs	r1, r3
   25d82:	f242 10d8 	movw	r0, #8664	; 0x21d8
   25d86:	f7eb fde3 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_DATAFIFOTHRES, pFifoCfg->FIFOThresh << BITP_AFE_DATAFIFOTHRES_HIGHTHRES);
   25d8a:	6921      	ldr	r1, [r4, #16]
   25d8c:	f242 10e0 	movw	r0, #8672	; 0x21e0
   25d90:	0409      	lsls	r1, r1, #16
   25d92:	f7eb fddd 	bl	11950 <AD5940_WriteReg>
  if(pFifoCfg->FIFOEn == bTRUE)
   25d96:	7823      	ldrb	r3, [r4, #0]
  tempreg |= pFifoCfg->FIFOSrc << BITP_AFE_FIFOCON_DATAFIFOSRCSEL;
   25d98:	68e1      	ldr	r1, [r4, #12]
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;																/* Enable FIFO after everything set. */
   25d9a:	2b01      	cmp	r3, #1
   25d9c:	bf14      	ite	ne
   25d9e:	2300      	movne	r3, #0
   25da0:	f44f 6300 	moveq.w	r3, #2048	; 0x800
}
   25da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   25da8:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
   25dac:	f242 0008 	movw	r0, #8200	; 0x2008
   25db0:	f7eb bdce 	b.w	11950 <AD5940_WriteReg>

00025db4 <AD5940_FIFOCtrlS>:
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;
   25db4:	2901      	cmp	r1, #1
   25db6:	bf14      	ite	ne
   25db8:	2100      	movne	r1, #0
   25dba:	f44f 6100 	moveq.w	r1, #2048	; 0x800
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   25dbe:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
   25dc2:	f242 0008 	movw	r0, #8200	; 0x2008
   25dc6:	f7eb bdc3 	b.w	11950 <AD5940_WriteReg>

00025dca <AD5940_FIFOGetCnt>:
{
   25dca:	b508      	push	{r3, lr}
  return AD5940_ReadReg(REG_AFE_FIFOCNTSTA) >> BITP_AFE_FIFOCNTSTA_DATAFIFOCNTSTA;
   25dcc:	f44f 5008 	mov.w	r0, #8704	; 0x2200
   25dd0:	f7eb fe0e 	bl	119f0 <AD5940_ReadReg>
}
   25dd4:	0c00      	lsrs	r0, r0, #16
   25dd6:	bd08      	pop	{r3, pc}

00025dd8 <AD5940_SEQCfg>:
{
   25dd8:	b538      	push	{r3, r4, r5, lr}
   25dda:	4604      	mov	r4, r0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   25ddc:	f242 0008 	movw	r0, #8200	; 0x2008
   25de0:	f7eb fe06 	bl	119f0 <AD5940_ReadReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   25de4:	2100      	movs	r1, #0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   25de6:	4605      	mov	r5, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   25de8:	f242 0008 	movw	r0, #8200	; 0x2008
   25dec:	f7eb fdb0 	bl	11950 <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   25df0:	f242 10d8 	movw	r0, #8664	; 0x21d8
   25df4:	f7eb fdfc 	bl	119f0 <AD5940_ReadReg>
  tempreg &= ~(BITM_AFE_CMDDATACON_CMDMEMMDE|BITM_AFE_CMDDATACON_CMD_MEM_SEL);  /* Clear settings for sequencer memory */
   25df8:	f020 013f 	bic.w	r1, r0, #63	; 0x3f
   25dfc:	6820      	ldr	r0, [r4, #0]
   25dfe:	4301      	orrs	r1, r0
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   25e00:	f041 0108 	orr.w	r1, r1, #8
   25e04:	f242 10d8 	movw	r0, #8664	; 0x21d8
   25e08:	f7eb fda2 	bl	11950 <AD5940_WriteReg>
  if(pSeqCfg->SeqCntCRCClr)
   25e0c:	79e3      	ldrb	r3, [r4, #7]
   25e0e:	b14b      	cbz	r3, 25e24 <AD5940_SEQCfg+0x4c>
    AD5940_WriteReg(REG_AFE_SEQCON, 0);  /* Disable sequencer firstly */
   25e10:	2100      	movs	r1, #0
   25e12:	f242 0004 	movw	r0, #8196	; 0x2004
   25e16:	f7eb fd9b 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_SEQCNT, 0);  /* When sequencer is disabled, any write to SEQCNT will clear CNT and CRC register */  
   25e1a:	2100      	movs	r1, #0
   25e1c:	f242 0064 	movw	r0, #8292	; 0x2064
   25e20:	f7eb fd96 	bl	11950 <AD5940_WriteReg>
  if(pSeqCfg->SeqEnable == bTRUE)
   25e24:	7923      	ldrb	r3, [r4, #4]
  tempreg |= (pSeqCfg->SeqWrTimer) << BITP_AFE_SEQCON_SEQWRTMR;
   25e26:	68a1      	ldr	r1, [r4, #8]
  if(pSeqCfg->SeqEnable == bTRUE)
   25e28:	1e5a      	subs	r2, r3, #1
   25e2a:	4253      	negs	r3, r2
   25e2c:	4153      	adcs	r3, r2
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   25e2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   25e32:	f242 0004 	movw	r0, #8196	; 0x2004
   25e36:	f7eb fd8b 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   25e3a:	4629      	mov	r1, r5
   25e3c:	f242 0008 	movw	r0, #8200	; 0x2008
}
   25e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   25e44:	f7eb bd84 	b.w	11950 <AD5940_WriteReg>

00025e48 <AD5940_SEQGetCfg>:
{
   25e48:	b538      	push	{r3, r4, r5, lr}
  if(pSeqCfg == NULL)
   25e4a:	4604      	mov	r4, r0
   25e4c:	b1a0      	cbz	r0, 25e78 <AD5940_SEQGetCfg+0x30>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   25e4e:	f242 10d8 	movw	r0, #8664	; 0x21d8
   25e52:	f7eb fdcd 	bl	119f0 <AD5940_ReadReg>
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   25e56:	2500      	movs	r5, #0
  pSeqCfg->SeqMemSize = (tempreg&BITM_AFE_CMDDATACON_CMD_MEM_SEL) >> BITP_AFE_CMDDATACON_CMD_MEM_SEL;
   25e58:	f000 0007 	and.w	r0, r0, #7
   25e5c:	6020      	str	r0, [r4, #0]
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   25e5e:	71e5      	strb	r5, [r4, #7]
  tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   25e60:	f242 0004 	movw	r0, #8196	; 0x2004
   25e64:	f7eb fdc4 	bl	119f0 <AD5940_ReadReg>
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   25e68:	f000 0301 	and.w	r3, r0, #1
  pSeqCfg->SeqWrTimer = (tempreg&BITM_AFE_SEQCON_SEQWRTMR) >> BITP_AFE_SEQCON_SEQWRTMR;
   25e6c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   25e70:	60a0      	str	r0, [r4, #8]
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   25e72:	7123      	strb	r3, [r4, #4]
  return AD5940ERR_OK;
   25e74:	4628      	mov	r0, r5
}
   25e76:	bd38      	pop	{r3, r4, r5, pc}
    return AD5940ERR_NULLP;
   25e78:	f06f 0002 	mvn.w	r0, #2
   25e7c:	e7fb      	b.n	25e76 <AD5940_SEQGetCfg+0x2e>

00025e7e <AD5940_SEQCtrlS>:
{
   25e7e:	b510      	push	{r4, lr}
   25e80:	4604      	mov	r4, r0
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   25e82:	f242 0004 	movw	r0, #8196	; 0x2004
   25e86:	f7eb fdb3 	bl	119f0 <AD5940_ReadReg>
  if(SeqEn == bTRUE)
   25e8a:	2c01      	cmp	r4, #1
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   25e8c:	4601      	mov	r1, r0
}
   25e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_SEQCON_SEQEN;
   25e92:	bf0c      	ite	eq
   25e94:	f040 0101 	orreq.w	r1, r0, #1
    tempreg &= ~BITM_AFE_SEQCON_SEQEN;
   25e98:	f021 0101 	bicne.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   25e9c:	f242 0004 	movw	r0, #8196	; 0x2004
   25ea0:	f7eb bd56 	b.w	11950 <AD5940_WriteReg>

00025ea4 <AD5940_SEQMmrTrig>:
  if(SeqId > SEQID_3)
   25ea4:	2803      	cmp	r0, #3
   25ea6:	d805      	bhi.n	25eb4 <AD5940_SEQMmrTrig+0x10>
  AD5940_WriteReg(REG_AFECON_TRIGSEQ, 1L<<SeqId);
   25ea8:	2101      	movs	r1, #1
   25eaa:	4081      	lsls	r1, r0
   25eac:	f44f 6086 	mov.w	r0, #1072	; 0x430
   25eb0:	f7eb bd4e 	b.w	11950 <AD5940_WriteReg>
}
   25eb4:	4770      	bx	lr

00025eb6 <AD5940_SEQCmdWrite>:
{
   25eb6:	b570      	push	{r4, r5, r6, lr}
   25eb8:	460c      	mov	r4, r1
  while(CmdCnt--)
   25eba:	1885      	adds	r5, r0, r2
   25ebc:	42a8      	cmp	r0, r5
   25ebe:	d100      	bne.n	25ec2 <AD5940_SEQCmdWrite+0xc>
}
   25ec0:	bd70      	pop	{r4, r5, r6, pc}
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   25ec2:	4601      	mov	r1, r0
   25ec4:	1c46      	adds	r6, r0, #1
   25ec6:	f242 10d4 	movw	r0, #8660	; 0x21d4
   25eca:	f7eb fd41 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWRITE, *pCommand++);
   25ece:	f242 0070 	movw	r0, #8304	; 0x2070
   25ed2:	f854 1b04 	ldr.w	r1, [r4], #4
   25ed6:	f7eb fd3b 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   25eda:	4630      	mov	r0, r6
   25edc:	e7ee      	b.n	25ebc <AD5940_SEQCmdWrite+0x6>

00025ede <AD5940_SEQInfoCfg>:
  switch(pSeq->SeqId)
   25ede:	6803      	ldr	r3, [r0, #0]
{
   25ee0:	b510      	push	{r4, lr}
   25ee2:	4604      	mov	r4, r0
  switch(pSeq->SeqId)
   25ee4:	2b03      	cmp	r3, #3
   25ee6:	d80b      	bhi.n	25f00 <AD5940_SEQInfoCfg+0x22>
   25ee8:	e8df f003 	tbb	[pc, r3]
   25eec:	221b1402 	.word	0x221b1402
    AD5940_WriteReg(REG_AFE_SEQ0INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   25ef0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25ef4:	f242 10cc 	movw	r0, #8652	; 0x21cc
   25ef8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   25efc:	f7eb fd28 	bl	11950 <AD5940_WriteReg>
  if(pSeq->WriteSRAM == bTRUE)
   25f00:	7b23      	ldrb	r3, [r4, #12]
   25f02:	2b01      	cmp	r3, #1
   25f04:	d11b      	bne.n	25f3e <AD5940_SEQInfoCfg+0x60>
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   25f06:	68a2      	ldr	r2, [r4, #8]
   25f08:	6921      	ldr	r1, [r4, #16]
   25f0a:	6860      	ldr	r0, [r4, #4]
}
   25f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   25f10:	f7ff bfd1 	b.w	25eb6 <AD5940_SEQCmdWrite>
    AD5940_WriteReg(REG_AFE_SEQ1INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   25f14:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25f18:	f242 10e8 	movw	r0, #8680	; 0x21e8
   25f1c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   25f20:	e7ec      	b.n	25efc <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ2INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   25f22:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25f26:	f242 10d0 	movw	r0, #8656	; 0x21d0
   25f2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   25f2e:	e7e5      	b.n	25efc <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   25f30:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   25f34:	f242 10e4 	movw	r0, #8676	; 0x21e4
   25f38:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   25f3c:	e7de      	b.n	25efc <AD5940_SEQInfoCfg+0x1e>
}
   25f3e:	bd10      	pop	{r4, pc}

00025f40 <AD5940_SEQGpioCtrlS>:
{
   25f40:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SYNCEXTDEVICE, Gpio);
   25f42:	f242 0054 	movw	r0, #8276	; 0x2054
   25f46:	f7eb bd03 	b.w	11950 <AD5940_WriteReg>

00025f4a <AD5940_SEQTimeOutRd>:
  return AD5940_ReadReg(REG_AFE_SEQTIMEOUT);
   25f4a:	f242 0068 	movw	r0, #8296	; 0x2068
   25f4e:	f7eb bd4f 	b.w	119f0 <AD5940_ReadReg>

00025f52 <AD5940_WUPTCfg>:
{
   25f52:	b510      	push	{r4, lr}
   25f54:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (pWuptCfg->SeqxWakeupTime[0] & 0xFFFF));    
   25f56:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   25f58:	f640 0008 	movw	r0, #2056	; 0x808
   25f5c:	f7eb fcf8 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (pWuptCfg->SeqxWakeupTime[0] & 0xF0000)>>16);
   25f60:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   25f62:	f640 000c 	movw	r0, #2060	; 0x80c
   25f66:	f001 010f 	and.w	r1, r1, #15
   25f6a:	f7eb fcf1 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (pWuptCfg->SeqxSleepTime[0] & 0xFFFF));    
   25f6e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   25f70:	f44f 6001 	mov.w	r0, #2064	; 0x810
   25f74:	f7eb fcec 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (pWuptCfg->SeqxSleepTime[0] & 0xF0000)>>16);
   25f78:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   25f7a:	f640 0014 	movw	r0, #2068	; 0x814
   25f7e:	f001 010f 	and.w	r1, r1, #15
   25f82:	f7eb fce5 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (pWuptCfg->SeqxWakeupTime[1] & 0xFFFF));    
   25f86:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   25f88:	f640 0018 	movw	r0, #2072	; 0x818
   25f8c:	f7eb fce0 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (pWuptCfg->SeqxWakeupTime[1] & 0xF0000)>>16);
   25f90:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   25f92:	f640 001c 	movw	r0, #2076	; 0x81c
   25f96:	f001 010f 	and.w	r1, r1, #15
   25f9a:	f7eb fcd9 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (pWuptCfg->SeqxSleepTime[1] & 0xFFFF));    
   25f9e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   25fa0:	f44f 6002 	mov.w	r0, #2080	; 0x820
   25fa4:	f7eb fcd4 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (pWuptCfg->SeqxSleepTime[1] & 0xF0000)>>16);
   25fa8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   25faa:	f640 0024 	movw	r0, #2084	; 0x824
   25fae:	f001 010f 	and.w	r1, r1, #15
   25fb2:	f7eb fccd 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (pWuptCfg->SeqxWakeupTime[2] & 0xFFFF));    
   25fb6:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
   25fb8:	f640 0028 	movw	r0, #2088	; 0x828
   25fbc:	f7eb fcc8 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (pWuptCfg->SeqxWakeupTime[2] & 0xF0000)>>16);
   25fc0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   25fc2:	f640 002c 	movw	r0, #2092	; 0x82c
   25fc6:	f001 010f 	and.w	r1, r1, #15
   25fca:	f7eb fcc1 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (pWuptCfg->SeqxSleepTime[2] & 0xFFFF));    
   25fce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   25fd0:	f44f 6003 	mov.w	r0, #2096	; 0x830
   25fd4:	f7eb fcbc 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (pWuptCfg->SeqxSleepTime[2] & 0xF0000)>>16);
   25fd8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   25fda:	f640 0034 	movw	r0, #2100	; 0x834
   25fde:	f001 010f 	and.w	r1, r1, #15
   25fe2:	f7eb fcb5 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (pWuptCfg->SeqxWakeupTime[3] & 0xFFFF));    
   25fe6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   25fea:	f640 0038 	movw	r0, #2104	; 0x838
   25fee:	f7eb fcaf 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (pWuptCfg->SeqxWakeupTime[3] & 0xF0000)>>16);
   25ff2:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   25ff6:	f640 003c 	movw	r0, #2108	; 0x83c
   25ffa:	f001 010f 	and.w	r1, r1, #15
   25ffe:	f7eb fca7 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (pWuptCfg->SeqxSleepTime[3] & 0xFFFF));    
   26002:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   26004:	f44f 6004 	mov.w	r0, #2112	; 0x840
   26008:	f7eb fca2 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (pWuptCfg->SeqxSleepTime[3] & 0xF0000)>>16);
   2600c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   2600e:	f640 0044 	movw	r0, #2116	; 0x844
   26012:	f001 010f 	and.w	r1, r1, #15
   26016:	f7eb fc9b 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_TMRCON, BITM_ALLON_TMRCON_TMRINTEN);
   2601a:	2101      	movs	r1, #1
   2601c:	f640 201c 	movw	r0, #2588	; 0xa1c
   26020:	f7eb fc96 	bl	11950 <AD5940_WriteReg>
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   26024:	68a3      	ldr	r3, [r4, #8]
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   26026:	68e2      	ldr	r2, [r4, #12]
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   26028:	6960      	ldr	r0, [r4, #20]
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   2602a:	009b      	lsls	r3, r3, #2
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   2602c:	0112      	lsls	r2, r2, #4
   2602e:	f002 0230 	and.w	r2, r2, #48	; 0x30
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   26032:	f003 030c 	and.w	r3, r3, #12
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   26036:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[0]&0x03) << BITP_WUPTMR_SEQORDER_SEQA; /* position A */
   26038:	6862      	ldr	r2, [r4, #4]
   2603a:	f002 0203 	and.w	r2, r2, #3
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   2603e:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   26040:	6922      	ldr	r2, [r4, #16]
   26042:	0192      	lsls	r2, r2, #6
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   26044:	0200      	lsls	r0, r0, #8
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   26046:	b2d2      	uxtb	r2, r2
   26048:	431a      	orrs	r2, r3
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   2604a:	f400 7140 	and.w	r1, r0, #768	; 0x300
   2604e:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[5]&0x03) << BITP_WUPTMR_SEQORDER_SEQF; /* position F */
   26050:	69a1      	ldr	r1, [r4, #24]
   26052:	0289      	lsls	r1, r1, #10
   26054:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
   26058:	4311      	orrs	r1, r2
  tempreg |= (pWuptCfg->WuptOrder[6]&0x03) << BITP_WUPTMR_SEQORDER_SEQG; /* position G */
   2605a:	69e2      	ldr	r2, [r4, #28]
   2605c:	0312      	lsls	r2, r2, #12
   2605e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
   26062:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[7]&0x03) << BITP_WUPTMR_SEQORDER_SEQH; /* position H */
   26064:	6a21      	ldr	r1, [r4, #32]
   26066:	0389      	lsls	r1, r1, #14
   26068:	b289      	uxth	r1, r1
  AD5940_WriteReg(REG_WUPTMR_SEQORDER, tempreg);
   2606a:	4311      	orrs	r1, r2
   2606c:	f640 0004 	movw	r0, #2052	; 0x804
   26070:	f7eb fc6e 	bl	11950 <AD5940_WriteReg>
  if(pWuptCfg->WuptEn == bTRUE)
   26074:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  tempreg |= pWuptCfg->WuptEndSeq << BITP_WUPTMR_CON_ENDSEQ;
   26078:	6821      	ldr	r1, [r4, #0]
  if(pWuptCfg->WuptEn == bTRUE)
   2607a:	1e5a      	subs	r2, r3, #1
   2607c:	4253      	negs	r3, r2
   2607e:	4153      	adcs	r3, r2
}
   26080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   26084:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
   26088:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2608c:	f7eb bc60 	b.w	11950 <AD5940_WriteReg>

00026090 <AD5940_WUPTCtrl>:
{
   26090:	b510      	push	{r4, lr}
   26092:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_WUPTMR_CON);
   26094:	f44f 6000 	mov.w	r0, #2048	; 0x800
   26098:	f7eb fcaa 	bl	119f0 <AD5940_ReadReg>
  tempreg &= ~BITM_WUPTMR_CON_EN;
   2609c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   260a0:	4001      	ands	r1, r0
  if(Enable == bTRUE)
   260a2:	2c01      	cmp	r4, #1
    tempreg |= BITM_WUPTMR_CON_EN;
   260a4:	bf08      	it	eq
   260a6:	f041 0101 	orreq.w	r1, r1, #1
}
   260aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   260ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
   260b2:	f7eb bc4d 	b.w	11950 <AD5940_WriteReg>

000260b6 <AD5940_WUPTTime>:
{
   260b6:	b538      	push	{r3, r4, r5, lr}
   260b8:	460c      	mov	r4, r1
   260ba:	4615      	mov	r5, r2
  switch (SeqId)
   260bc:	2803      	cmp	r0, #3
   260be:	d85a      	bhi.n	26176 <AD5940_WUPTTime+0xc0>
   260c0:	e8df f000 	tbb	[pc, r0]
   260c4:	442f1a02 	.word	0x442f1a02
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (WakeupTime & 0xFFFF));    
   260c8:	b291      	uxth	r1, r2
   260ca:	f640 0008 	movw	r0, #2056	; 0x808
   260ce:	f7eb fc3f 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (WakeupTime & 0xF0000)>>16);
   260d2:	f3c5 4103 	ubfx	r1, r5, #16, #4
   260d6:	f640 000c 	movw	r0, #2060	; 0x80c
   260da:	f7eb fc39 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (SleepTime & 0xFFFF));    
   260de:	b2a1      	uxth	r1, r4
   260e0:	f44f 6001 	mov.w	r0, #2064	; 0x810
   260e4:	f7eb fc34 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (SleepTime & 0xF0000)>>16);
   260e8:	f3c4 4103 	ubfx	r1, r4, #16, #4
   260ec:	f640 0014 	movw	r0, #2068	; 0x814
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   260f0:	f7eb fc2e 	bl	11950 <AD5940_WriteReg>
  return AD5940ERR_OK;
   260f4:	2000      	movs	r0, #0
}
   260f6:	bd38      	pop	{r3, r4, r5, pc}
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (WakeupTime & 0xFFFF));    
   260f8:	b291      	uxth	r1, r2
   260fa:	f640 0018 	movw	r0, #2072	; 0x818
   260fe:	f7eb fc27 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (WakeupTime & 0xF0000)>>16);
   26102:	f3c5 4103 	ubfx	r1, r5, #16, #4
   26106:	f640 001c 	movw	r0, #2076	; 0x81c
   2610a:	f7eb fc21 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (SleepTime & 0xFFFF));    
   2610e:	b2a1      	uxth	r1, r4
   26110:	f44f 6002 	mov.w	r0, #2080	; 0x820
   26114:	f7eb fc1c 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (SleepTime & 0xF0000)>>16);
   26118:	f3c4 4103 	ubfx	r1, r4, #16, #4
   2611c:	f640 0024 	movw	r0, #2084	; 0x824
   26120:	e7e6      	b.n	260f0 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (WakeupTime & 0xFFFF));    
   26122:	b291      	uxth	r1, r2
   26124:	f640 0028 	movw	r0, #2088	; 0x828
   26128:	f7eb fc12 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (WakeupTime & 0xF0000)>>16);
   2612c:	f3c5 4103 	ubfx	r1, r5, #16, #4
   26130:	f640 002c 	movw	r0, #2092	; 0x82c
   26134:	f7eb fc0c 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (SleepTime & 0xFFFF));    
   26138:	b2a1      	uxth	r1, r4
   2613a:	f44f 6003 	mov.w	r0, #2096	; 0x830
   2613e:	f7eb fc07 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (SleepTime & 0xF0000)>>16);
   26142:	f3c4 4103 	ubfx	r1, r4, #16, #4
   26146:	f640 0034 	movw	r0, #2100	; 0x834
   2614a:	e7d1      	b.n	260f0 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (WakeupTime & 0xFFFF));    
   2614c:	b291      	uxth	r1, r2
   2614e:	f640 0038 	movw	r0, #2104	; 0x838
   26152:	f7eb fbfd 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (WakeupTime & 0xF0000)>>16);
   26156:	f3c5 4103 	ubfx	r1, r5, #16, #4
   2615a:	f640 003c 	movw	r0, #2108	; 0x83c
   2615e:	f7eb fbf7 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (SleepTime & 0xFFFF));    
   26162:	b2a1      	uxth	r1, r4
   26164:	f44f 6004 	mov.w	r0, #2112	; 0x840
   26168:	f7eb fbf2 	bl	11950 <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   2616c:	f3c4 4103 	ubfx	r1, r4, #16, #4
   26170:	f640 0044 	movw	r0, #2116	; 0x844
   26174:	e7bc      	b.n	260f0 <AD5940_WUPTTime+0x3a>
  switch (SeqId)
   26176:	f06f 0001 	mvn.w	r0, #1
   2617a:	e7bc      	b.n	260f6 <AD5940_WUPTTime+0x40>

0002617c <AD5940_HFOSC32MHzCtrl>:
{
   2617c:	b538      	push	{r3, r4, r5, lr}
   2617e:	4605      	mov	r5, r0
  RdCLKEN1 = AD5940_ReadReg(REG_AFECON_CLKEN1);
   26180:	f44f 6082 	mov.w	r0, #1040	; 0x410
   26184:	f7eb fc34 	bl	119f0 <AD5940_ReadReg>
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   26188:	0844      	lsrs	r4, r0, #1
   2618a:	0041      	lsls	r1, r0, #1
   2618c:	f401 7100 	and.w	r1, r1, #512	; 0x200
   26190:	f404 7480 	and.w	r4, r4, #256	; 0x100
  RdCLKEN1 = RdCLKEN1&0xff;
   26194:	b2c3      	uxtb	r3, r0
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   26196:	430c      	orrs	r4, r1
   26198:	431c      	orrs	r4, r3
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1|BITM_AFECON_CLKEN1_ACLKDIS); /* Disable ACLK during clock changing */
   2619a:	f044 0120 	orr.w	r1, r4, #32
   2619e:	f44f 6082 	mov.w	r0, #1040	; 0x410
   261a2:	f7eb fbd5 	bl	11950 <AD5940_WriteReg>
  RdHPOSCCON = AD5940_ReadReg(REG_AFE_HPOSCCON); 
   261a6:	f242 00bc 	movw	r0, #8380	; 0x20bc
   261aa:	f7eb fc21 	bl	119f0 <AD5940_ReadReg>
  if(Mode32MHz == bTRUE)
   261ae:	2d01      	cmp	r5, #1
   261b0:	d113      	bne.n	261da <AD5940_HFOSC32MHzCtrl+0x5e>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON&(~BITM_AFE_HPOSCCON_CLK32MHZEN)); /* Enable 32MHz output(bit definition-0: 32MHz, 1: 16MHz) */  
   261b2:	f020 0104 	bic.w	r1, r0, #4
   261b6:	f242 00bc 	movw	r0, #8380	; 0x20bc
   261ba:	f7eb fbc9 	bl	11950 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   261be:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   261c2:	f7eb fc15 	bl	119f0 <AD5940_ReadReg>
   261c6:	0582      	lsls	r2, r0, #22
   261c8:	d5f9      	bpl.n	261be <AD5940_HFOSC32MHzCtrl+0x42>
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   261ca:	f024 0120 	bic.w	r1, r4, #32
   261ce:	f44f 6082 	mov.w	r0, #1040	; 0x410
}
   261d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   261d6:	f7eb bbbb 	b.w	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON|BITM_AFE_HPOSCCON_CLK32MHZEN); /* Enable 16MHz output(bit definition-0: 32MHz, 1: 16MHz) */       
   261da:	f040 0104 	orr.w	r1, r0, #4
   261de:	f242 00bc 	movw	r0, #8380	; 0x20bc
   261e2:	f7eb fbb5 	bl	11950 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   261e6:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   261ea:	f7eb fc01 	bl	119f0 <AD5940_ReadReg>
   261ee:	0583      	lsls	r3, r0, #22
   261f0:	d5f9      	bpl.n	261e6 <AD5940_HFOSC32MHzCtrl+0x6a>
   261f2:	e7ea      	b.n	261ca <AD5940_HFOSC32MHzCtrl+0x4e>

000261f4 <AD5940_CLKCfg>:
{
   261f4:	b538      	push	{r3, r4, r5, lr}
   261f6:	4605      	mov	r5, r0
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   261f8:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   261fc:	f7eb fbf8 	bl	119f0 <AD5940_ReadReg>
  if(pClkCfg->HFXTALEn == bTRUE)
   26200:	7ceb      	ldrb	r3, [r5, #19]
   26202:	2b01      	cmp	r3, #1
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   26204:	4604      	mov	r4, r0
  if(pClkCfg->HFXTALEn == bTRUE)
   26206:	d112      	bne.n	2622e <AD5940_CLKCfg+0x3a>
    reg_osccon |= BITM_ALLON_OSCCON_HFXTALEN;
   26208:	f040 0404 	orr.w	r4, r0, #4
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   2620c:	f64c 3114 	movw	r1, #51988	; 0xcb14
   26210:	f640 200c 	movw	r0, #2572	; 0xa0c
   26214:	f7eb fb9c 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFXTAL */
   26218:	4621      	mov	r1, r4
   2621a:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2621e:	f7eb fb97 	bl	11950 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFXTALOK) == 0); /* Wait for clock ready */
   26222:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   26226:	f7eb fbe3 	bl	119f0 <AD5940_ReadReg>
   2622a:	0541      	lsls	r1, r0, #21
   2622c:	d5f9      	bpl.n	26222 <AD5940_CLKCfg+0x2e>
  if(pClkCfg->HFOSCEn == bTRUE)
   2622e:	7c2b      	ldrb	r3, [r5, #16]
   26230:	2b01      	cmp	r3, #1
   26232:	d118      	bne.n	26266 <AD5940_CLKCfg+0x72>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   26234:	f64c 3114 	movw	r1, #51988	; 0xcb14
   26238:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_HFOSCEN;
   2623c:	f044 0402 	orr.w	r4, r4, #2
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   26240:	f7eb fb86 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFOSC */
   26244:	4621      	mov	r1, r4
   26246:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2624a:	f7eb fb81 	bl	11950 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   2624e:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   26252:	f7eb fbcd 	bl	119f0 <AD5940_ReadReg>
   26256:	0582      	lsls	r2, r0, #22
   26258:	d5f9      	bpl.n	2624e <AD5940_CLKCfg+0x5a>
    if(pClkCfg->HfOSC32MHzMode  == bTRUE)
   2625a:	7c68      	ldrb	r0, [r5, #17]
   2625c:	2801      	cmp	r0, #1
      AD5940_HFOSC32MHzCtrl(bFALSE);
   2625e:	bf18      	it	ne
   26260:	2000      	movne	r0, #0
   26262:	f7ff ff8b 	bl	2617c <AD5940_HFOSC32MHzCtrl>
  if(pClkCfg->LFOSCEn == bTRUE)
   26266:	7cab      	ldrb	r3, [r5, #18]
   26268:	2b01      	cmp	r3, #1
   2626a:	d112      	bne.n	26292 <AD5940_CLKCfg+0x9e>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   2626c:	f64c 3114 	movw	r1, #51988	; 0xcb14
   26270:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_LFOSCEN;  
   26274:	f044 0401 	orr.w	r4, r4, #1
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   26278:	f7eb fb6a 	bl	11950 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable LFOSC */
   2627c:	4621      	mov	r1, r4
   2627e:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   26282:	f7eb fb65 	bl	11950 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_LFOSCOK) == 0); /* Wait for clock ready */
   26286:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2628a:	f7eb fbb1 	bl	119f0 <AD5940_ReadReg>
   2628e:	05c3      	lsls	r3, r0, #23
   26290:	d5f9      	bpl.n	26286 <AD5940_CLKCfg+0x92>
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   26292:	68eb      	ldr	r3, [r5, #12]
  tempreg = pClkCfg->SysClkDiv&0x3f;
   26294:	68a9      	ldr	r1, [r5, #8]
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   26296:	019b      	lsls	r3, r3, #6
   26298:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
  tempreg = pClkCfg->SysClkDiv&0x3f;
   2629c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  AD5940_WriteReg(REG_AFECON_CLKCON0, tempreg);
   262a0:	4319      	orrs	r1, r3
   262a2:	f44f 6081 	mov.w	r0, #1032	; 0x408
   262a6:	f7eb fb53 	bl	11950 <AD5940_WriteReg>
  AD5940_Delay10us(10);
   262aa:	200a      	movs	r0, #10
   262ac:	f000 f8a6 	bl	263fc <AD5940_Delay10us>
  tempreg |= pClkCfg->ADCCLkSrc << BITP_AFECON_CLKSEL_ADCCLKSEL;
   262b0:	e9d5 3100 	ldrd	r3, r1, [r5]
  AD5940_WriteReg(REG_AFECON_CLKSEL, tempreg);
   262b4:	f240 4014 	movw	r0, #1044	; 0x414
   262b8:	ea43 0181 	orr.w	r1, r3, r1, lsl #2
   262bc:	f7eb fb48 	bl	11950 <AD5940_WriteReg>
  if(pClkCfg->HFXTALEn == bFALSE)
   262c0:	7ceb      	ldrb	r3, [r5, #19]
   262c2:	b90b      	cbnz	r3, 262c8 <AD5940_CLKCfg+0xd4>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFXTALEN;
   262c4:	f024 0404 	bic.w	r4, r4, #4
  if(pClkCfg->HFOSCEn == bFALSE)
   262c8:	7c2b      	ldrb	r3, [r5, #16]
   262ca:	b90b      	cbnz	r3, 262d0 <AD5940_CLKCfg+0xdc>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFOSCEN;
   262cc:	f024 0402 	bic.w	r4, r4, #2
  if(pClkCfg->LFOSCEn == bFALSE)
   262d0:	7cab      	ldrb	r3, [r5, #18]
   262d2:	b90b      	cbnz	r3, 262d8 <AD5940_CLKCfg+0xe4>
    reg_osccon &= ~BITM_ALLON_OSCCON_LFOSCEN;
   262d4:	f024 0401 	bic.w	r4, r4, #1
  AD5940_WriteReg(REG_ALLON_OSCKEY, KEY_OSCCON); /* Write Key */
   262d8:	f64c 3114 	movw	r1, #51988	; 0xcb14
   262dc:	f640 200c 	movw	r0, #2572	; 0xa0c
   262e0:	f7eb fb36 	bl	11950 <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   262e4:	4621      	mov	r1, r4
   262e6:	f44f 6021 	mov.w	r0, #2576	; 0xa10
}
   262ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   262ee:	f7eb bb2f 	b.w	11950 <AD5940_WriteReg>

000262f2 <AD5940_INTCCfg>:
{
   262f2:	b570      	push	{r4, r5, r6, lr}
  tempreg = AD5940_ReadReg(regaddr);
   262f4:	f243 030c 	movw	r3, #12300	; 0x300c
   262f8:	f243 0408 	movw	r4, #12296	; 0x3008
   262fc:	2801      	cmp	r0, #1
   262fe:	bf08      	it	eq
   26300:	461c      	moveq	r4, r3
   26302:	4620      	mov	r0, r4
{
   26304:	460d      	mov	r5, r1
   26306:	4616      	mov	r6, r2
  tempreg = AD5940_ReadReg(regaddr);
   26308:	f7eb fb72 	bl	119f0 <AD5940_ReadReg>
  if(State == bTRUE)
   2630c:	2e01      	cmp	r6, #1
    tempreg |= AFEIntSrc;    /* Enable this interrupt */
   2630e:	bf0c      	ite	eq
   26310:	ea40 0105 	orreq.w	r1, r0, r5
    tempreg &= ~(AFEIntSrc); /* Disable this interrupt  */
   26314:	ea20 0105 	bicne.w	r1, r0, r5
  AD5940_WriteReg(regaddr,tempreg);
   26318:	4620      	mov	r0, r4
}
   2631a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  AD5940_WriteReg(regaddr,tempreg);
   2631e:	f7eb bb17 	b.w	11950 <AD5940_WriteReg>

00026322 <AD5940_INTCClrFlag>:
{
   26322:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_INTC_INTCCLR,AfeIntSrcSel);
   26324:	f243 0004 	movw	r0, #12292	; 0x3004
   26328:	f7eb bb12 	b.w	11950 <AD5940_WriteReg>

0002632c <AD5940_INTCTestFlag>:
  tempreg = AD5940_ReadReg(regaddr);
   2632c:	f243 0210 	movw	r2, #12304	; 0x3010
   26330:	f243 0314 	movw	r3, #12308	; 0x3014
{
   26334:	b510      	push	{r4, lr}
  tempreg = AD5940_ReadReg(regaddr);
   26336:	2800      	cmp	r0, #0
   26338:	bf0c      	ite	eq
   2633a:	4610      	moveq	r0, r2
   2633c:	4618      	movne	r0, r3
{
   2633e:	460c      	mov	r4, r1
  tempreg = AD5940_ReadReg(regaddr);
   26340:	f7eb fb56 	bl	119f0 <AD5940_ReadReg>
  if(tempreg & AfeIntSrcSel)
   26344:	4220      	tst	r0, r4
}
   26346:	bf14      	ite	ne
   26348:	2001      	movne	r0, #1
   2634a:	2000      	moveq	r0, #0
   2634c:	bd10      	pop	{r4, pc}

0002634e <AD5940_AGPIOFuncCfg>:
{
   2634e:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0CON,uiCfgSet);
   26350:	2000      	movs	r0, #0
   26352:	f7eb bafd 	b.w	11950 <AD5940_WriteReg>

00026356 <AD5940_AGPIOOen>:
{
   26356:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0OEN,uiPinSet);
   26358:	2004      	movs	r0, #4
   2635a:	f7eb baf9 	b.w	11950 <AD5940_WriteReg>

0002635e <AD5940_AGPIOIen>:
{
   2635e:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0IEN,uiPinSet);
   26360:	200c      	movs	r0, #12
   26362:	f7eb baf5 	b.w	11950 <AD5940_WriteReg>

00026366 <AD5940_AGPIOPen>:
{
   26366:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0PE,uiPinSet);
   26368:	2008      	movs	r0, #8
   2636a:	f7eb baf1 	b.w	11950 <AD5940_WriteReg>

0002636e <AD5940_AGPIOCfg>:
{
   2636e:	b510      	push	{r4, lr}
   26370:	4604      	mov	r4, r0
  AD5940_AGPIOFuncCfg(pAgpioCfg->FuncSet);
   26372:	6800      	ldr	r0, [r0, #0]
   26374:	f7ff ffeb 	bl	2634e <AD5940_AGPIOFuncCfg>
  AD5940_AGPIOOen(pAgpioCfg->OutputEnSet);
   26378:	6860      	ldr	r0, [r4, #4]
   2637a:	f7ff ffec 	bl	26356 <AD5940_AGPIOOen>
  AD5940_AGPIOIen(pAgpioCfg->InputEnSet);
   2637e:	68a0      	ldr	r0, [r4, #8]
   26380:	f7ff ffed 	bl	2635e <AD5940_AGPIOIen>
  AD5940_AGPIOPen(pAgpioCfg->PullEnSet);
   26384:	68e0      	ldr	r0, [r4, #12]
   26386:	f7ff ffee 	bl	26366 <AD5940_AGPIOPen>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   2638a:	6921      	ldr	r1, [r4, #16]
   2638c:	2014      	movs	r0, #20
}
   2638e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   26392:	f7eb badd 	b.w	11950 <AD5940_WriteReg>

00026396 <AD5940_SleepKeyCtrlS>:
{
   26396:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SEQSLPLOCK, SlpKey);
   26398:	f242 1018 	movw	r0, #8472	; 0x2118
   2639c:	f7eb bad8 	b.w	11950 <AD5940_WriteReg>

000263a0 <AD5940_EnterSleepS>:
{
   263a0:	b508      	push	{r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 0);
   263a2:	2100      	movs	r1, #0
   263a4:	f242 101c 	movw	r0, #8476	; 0x211c
   263a8:	f7eb fad2 	bl	11950 <AD5940_WriteReg>
}
   263ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 1);
   263b0:	2101      	movs	r1, #1
   263b2:	f242 101c 	movw	r0, #8476	; 0x211c
   263b6:	f7eb bacb 	b.w	11950 <AD5940_WriteReg>

000263ba <AD5940_WakeUp>:
{
   263ba:	b570      	push	{r4, r5, r6, lr}
   263bc:	4605      	mov	r5, r0
  uint32_t count = 0;
   263be:	2400      	movs	r4, #0
    if(AD5940_ReadReg(REG_AFECON_ADIID) == AD5940_ADIID)
   263c0:	f244 1644 	movw	r6, #16708	; 0x4144
   263c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   263c8:	f7eb fb12 	bl	119f0 <AD5940_ReadReg>
   263cc:	42b0      	cmp	r0, r6
    count++;
   263ce:	f104 0401 	add.w	r4, r4, #1
    if(AD5940_ReadReg(REG_AFECON_ADIID) == AD5940_ADIID)
   263d2:	d003      	beq.n	263dc <AD5940_WakeUp+0x22>
    if(TryCount<=0) 
   263d4:	2d00      	cmp	r5, #0
   263d6:	ddf5      	ble.n	263c4 <AD5940_WakeUp+0xa>
    if(count > TryCount)
   263d8:	42a5      	cmp	r5, r4
   263da:	d2f3      	bcs.n	263c4 <AD5940_WakeUp+0xa>
}
   263dc:	4620      	mov	r0, r4
   263de:	bd70      	pop	{r4, r5, r6, pc}

000263e0 <AD5940_HWReset>:
{
   263e0:	b508      	push	{r3, lr}
  AD5940_RstClr();
   263e2:	f000 f81a 	bl	2641a <AD5940_RstClr>
  AD5940_Delay10us(200); /* Delay some time */
   263e6:	20c8      	movs	r0, #200	; 0xc8
   263e8:	f000 f808 	bl	263fc <AD5940_Delay10us>
  AD5940_RstSet();
   263ec:	f000 f819 	bl	26422 <AD5940_RstSet>
}
   263f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_Delay10us(500); /* AD5940 need some time to exit reset status. 200us looks good. */
   263f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   263f8:	f000 b800 	b.w	263fc <AD5940_Delay10us>

000263fc <AD5940_Delay10us>:
    uint32_t time_total_us = time * 10 ; 
   263fc:	2801      	cmp	r0, #1
   263fe:	bf38      	it	cc
   26400:	2001      	movcc	r0, #1
	return z_impl_k_usleep(us);
   26402:	230a      	movs	r3, #10
   26404:	4358      	muls	r0, r3
   26406:	f7fb bec3 	b.w	22190 <z_impl_k_usleep>

0002640a <AD5940_CsClr>:
    gpio_pin_set(gpio_dev, CS_PIN, 0);
   2640a:	2100      	movs	r1, #0
   2640c:	201f      	movs	r0, #31
   2640e:	f7eb bc29 	b.w	11c64 <gpio_pin_set.constprop.0.isra.0>

00026412 <AD5940_CsSet>:
    gpio_pin_set(gpio_dev, CS_PIN, 1);
   26412:	2101      	movs	r1, #1
   26414:	201f      	movs	r0, #31
   26416:	f7eb bc25 	b.w	11c64 <gpio_pin_set.constprop.0.isra.0>

0002641a <AD5940_RstClr>:
    gpio_pin_set(gpio_dev, RESET_PIN, 0);
   2641a:	2100      	movs	r1, #0
   2641c:	201e      	movs	r0, #30
   2641e:	f7eb bc21 	b.w	11c64 <gpio_pin_set.constprop.0.isra.0>

00026422 <AD5940_RstSet>:
    gpio_pin_set(gpio_dev, RESET_PIN, 1);
   26422:	2101      	movs	r1, #1
   26424:	201e      	movs	r0, #30
   26426:	f7eb bc1d 	b.w	11c64 <gpio_pin_set.constprop.0.isra.0>

0002642a <cbpprintf_external>:
{
   2642a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2642e:	4607      	mov	r7, r0
   26430:	460e      	mov	r6, r1
   26432:	4690      	mov	r8, r2
	if (buf == NULL) {
   26434:	461d      	mov	r5, r3
   26436:	b30b      	cbz	r3, 2647c <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   26438:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2643a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2643c:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   26440:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   26442:	441c      	add	r4, r3
   26444:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   26448:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   2644a:	f04f 0900 	mov.w	r9, #0
   2644e:	45d1      	cmp	r9, sl
   26450:	d308      	bcc.n	26464 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   26452:	686a      	ldr	r2, [r5, #4]
   26454:	f105 0308 	add.w	r3, r5, #8
   26458:	4641      	mov	r1, r8
   2645a:	4638      	mov	r0, r7
   2645c:	46b4      	mov	ip, r6
}
   2645e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   26462:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   26464:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   26468:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   2646c:	4620      	mov	r0, r4
   2646e:	f001 f988 	bl	27782 <strlen>
   26472:	3001      	adds	r0, #1
   26474:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   26476:	f109 0901 	add.w	r9, r9, #1
   2647a:	e7e8      	b.n	2644e <cbpprintf_external+0x24>
}
   2647c:	f06f 0015 	mvn.w	r0, #21
   26480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026484 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   26484:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   26486:	2364      	movs	r3, #100	; 0x64
{
   26488:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2648a:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   2648c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2648e:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   26492:	b111      	cbz	r1, 2649a <u8_to_dec+0x16>
   26494:	3d01      	subs	r5, #1
   26496:	d101      	bne.n	2649c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   26498:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   2649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2649c:	429a      	cmp	r2, r3
		digit = value / divisor;
   2649e:	fbb2 f7f3 	udiv	r7, r2, r3
   264a2:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   264a4:	d202      	bcs.n	264ac <u8_to_dec+0x28>
   264a6:	2b01      	cmp	r3, #1
   264a8:	d000      	beq.n	264ac <u8_to_dec+0x28>
   264aa:	b130      	cbz	r0, 264ba <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   264ac:	3630      	adds	r6, #48	; 0x30
			buflen--;
   264ae:	3901      	subs	r1, #1
			num_digits++;
   264b0:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   264b2:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   264b6:	b2c9      	uxtb	r1, r1
			num_digits++;
   264b8:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   264ba:	fb03 2217 	mls	r2, r3, r7, r2
   264be:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   264c0:	fbb3 f3fc 	udiv	r3, r3, ip
   264c4:	e7e5      	b.n	26492 <u8_to_dec+0xe>

000264c6 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   264c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   264ca:	b2db      	uxtb	r3, r3
   264cc:	2b09      	cmp	r3, #9
   264ce:	d802      	bhi.n	264d6 <char2hex+0x10>
		*x = c - '0';
   264d0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   264d2:	2000      	movs	r0, #0
   264d4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   264d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   264da:	2b05      	cmp	r3, #5
   264dc:	d802      	bhi.n	264e4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   264de:	3857      	subs	r0, #87	; 0x57
   264e0:	7008      	strb	r0, [r1, #0]
   264e2:	e7f6      	b.n	264d2 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   264e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   264e8:	2b05      	cmp	r3, #5
   264ea:	d801      	bhi.n	264f0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   264ec:	3837      	subs	r0, #55	; 0x37
   264ee:	e7f7      	b.n	264e0 <char2hex+0x1a>
		return -EINVAL;
   264f0:	f06f 0015 	mvn.w	r0, #21
}
   264f4:	4770      	bx	lr

000264f6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   264f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   264f8:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   264fa:	f001 0001 	and.w	r0, r1, #1
   264fe:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   26502:	429d      	cmp	r5, r3
   26504:	ea4f 0651 	mov.w	r6, r1, lsr #1
   26508:	d903      	bls.n	26512 <hex2bin+0x1c>
		return 0;
   2650a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2650c:	4628      	mov	r0, r5
   2650e:	b003      	add	sp, #12
   26510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26512:	b158      	cbz	r0, 2652c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26514:	7820      	ldrb	r0, [r4, #0]
   26516:	f10d 0107 	add.w	r1, sp, #7
   2651a:	f7ff ffd4 	bl	264c6 <char2hex>
   2651e:	2800      	cmp	r0, #0
   26520:	dbf3      	blt.n	2650a <hex2bin+0x14>
		buf[0] = dec;
   26522:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26526:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2652a:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2652c:	3401      	adds	r4, #1
   2652e:	4416      	add	r6, r2
   26530:	42b2      	cmp	r2, r6
   26532:	d0eb      	beq.n	2650c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26534:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   26538:	f10d 0107 	add.w	r1, sp, #7
   2653c:	f7ff ffc3 	bl	264c6 <char2hex>
   26540:	2800      	cmp	r0, #0
   26542:	dbe2      	blt.n	2650a <hex2bin+0x14>
		buf[i] = dec << 4;
   26544:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26548:	011b      	lsls	r3, r3, #4
   2654a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2654c:	f814 0b02 	ldrb.w	r0, [r4], #2
   26550:	f7ff ffb9 	bl	264c6 <char2hex>
   26554:	2800      	cmp	r0, #0
   26556:	dbd8      	blt.n	2650a <hex2bin+0x14>
		buf[i] += dec;
   26558:	7813      	ldrb	r3, [r2, #0]
   2655a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2655e:	440b      	add	r3, r1
   26560:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26564:	e7e4      	b.n	26530 <hex2bin+0x3a>

00026566 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   26566:	4603      	mov	r3, r0
   26568:	b140      	cbz	r0, 2657c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2656a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2656c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   26570:	2a02      	cmp	r2, #2
   26572:	d006      	beq.n	26582 <sys_notify_validate+0x1c>
   26574:	2a03      	cmp	r2, #3
   26576:	d004      	beq.n	26582 <sys_notify_validate+0x1c>
   26578:	2a01      	cmp	r2, #1
   2657a:	d005      	beq.n	26588 <sys_notify_validate+0x22>
		return -EINVAL;
   2657c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   26580:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26582:	681a      	ldr	r2, [r3, #0]
   26584:	2a00      	cmp	r2, #0
   26586:	d0f9      	beq.n	2657c <sys_notify_validate+0x16>
		notify->result = 0;
   26588:	2000      	movs	r0, #0
   2658a:	6098      	str	r0, [r3, #8]
   2658c:	4770      	bx	lr

0002658e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2658e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26590:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   26594:	2a02      	cmp	r2, #2
{
   26596:	b510      	push	{r4, lr}
   26598:	4603      	mov	r3, r0
	notify->result = res;
   2659a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2659c:	d00a      	beq.n	265b4 <sys_notify_finalize+0x26>
   2659e:	2a03      	cmp	r2, #3
   265a0:	d10b      	bne.n	265ba <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   265a2:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   265a4:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   265a6:	2200      	movs	r2, #0
   265a8:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   265aa:	b108      	cbz	r0, 265b0 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   265ac:	f7fc f8ee 	bl	2278c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   265b0:	4620      	mov	r0, r4
   265b2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   265b4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   265b6:	2400      	movs	r4, #0
		break;
   265b8:	e7f5      	b.n	265a6 <sys_notify_finalize+0x18>
	switch (method) {
   265ba:	2400      	movs	r4, #0
   265bc:	4620      	mov	r0, r4
   265be:	e7f2      	b.n	265a6 <sys_notify_finalize+0x18>

000265c0 <arch_printk_char_out>:
}
   265c0:	2000      	movs	r0, #0
   265c2:	4770      	bx	lr

000265c4 <str_out>:
{
   265c4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   265c6:	688a      	ldr	r2, [r1, #8]
   265c8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   265ca:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   265cc:	b114      	cbz	r4, 265d4 <str_out+0x10>
   265ce:	684b      	ldr	r3, [r1, #4]
   265d0:	4293      	cmp	r3, r2
   265d2:	dc01      	bgt.n	265d8 <str_out+0x14>
		ctx->count++;
   265d4:	608d      	str	r5, [r1, #8]
}
   265d6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   265d8:	3b01      	subs	r3, #1
   265da:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   265dc:	bf08      	it	eq
   265de:	2200      	moveq	r2, #0
   265e0:	608d      	str	r5, [r1, #8]
   265e2:	bf0c      	ite	eq
   265e4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   265e6:	54a0      	strbne	r0, [r4, r2]
   265e8:	e7f5      	b.n	265d6 <str_out+0x12>

000265ea <vprintk>:
		z_log_vprintk(fmt, ap);
   265ea:	f000 bd0e 	b.w	2700a <z_log_vprintk>

000265ee <printk>:
{
   265ee:	b40f      	push	{r0, r1, r2, r3}
   265f0:	b507      	push	{r0, r1, r2, lr}
   265f2:	a904      	add	r1, sp, #16
   265f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   265f8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   265fa:	f000 fd06 	bl	2700a <z_log_vprintk>
}
   265fe:	b003      	add	sp, #12
   26600:	f85d eb04 	ldr.w	lr, [sp], #4
   26604:	b004      	add	sp, #16
   26606:	4770      	bx	lr

00026608 <snprintk>:
{
   26608:	b40c      	push	{r2, r3}
   2660a:	b507      	push	{r0, r1, r2, lr}
   2660c:	ab04      	add	r3, sp, #16
   2660e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26612:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26614:	f7ec fa6a 	bl	12aec <vsnprintk>
}
   26618:	b003      	add	sp, #12
   2661a:	f85d eb04 	ldr.w	lr, [sp], #4
   2661e:	b002      	add	sp, #8
   26620:	4770      	bx	lr

00026622 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26622:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   26624:	f013 0307 	ands.w	r3, r3, #7
   26628:	d105      	bne.n	26636 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2662a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2662c:	2b00      	cmp	r3, #0
   2662e:	bf0c      	ite	eq
   26630:	2000      	moveq	r0, #0
   26632:	2003      	movne	r0, #3
   26634:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26636:	2b02      	cmp	r3, #2
   26638:	d105      	bne.n	26646 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2663a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   2663c:	2b00      	cmp	r3, #0
   2663e:	bf14      	ite	ne
   26640:	2000      	movne	r0, #0
   26642:	2004      	moveq	r0, #4
   26644:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26646:	2b01      	cmp	r3, #1
   26648:	d105      	bne.n	26656 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2664a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2664c:	2b00      	cmp	r3, #0
   2664e:	bf0c      	ite	eq
   26650:	2000      	moveq	r0, #0
   26652:	2005      	movne	r0, #5
   26654:	4770      	bx	lr
	int evt = EVT_NOP;
   26656:	2000      	movs	r0, #0
}
   26658:	4770      	bx	lr

0002665a <notify_one>:
{
   2665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2665e:	460d      	mov	r5, r1
   26660:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26662:	4619      	mov	r1, r3
   26664:	1d28      	adds	r0, r5, #4
{
   26666:	4690      	mov	r8, r2
   26668:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2666a:	f7ff ff90 	bl	2658e <sys_notify_finalize>
	if (cb) {
   2666e:	4604      	mov	r4, r0
   26670:	b138      	cbz	r0, 26682 <notify_one+0x28>
		cb(mgr, cli, state, res);
   26672:	4633      	mov	r3, r6
   26674:	4642      	mov	r2, r8
   26676:	4629      	mov	r1, r5
   26678:	4638      	mov	r0, r7
   2667a:	46a4      	mov	ip, r4
}
   2667c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26680:	4760      	bx	ip
}
   26682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026686 <transition_complete>:
{
   26686:	b410      	push	{r4}
	__asm__ volatile(
   26688:	f04f 0440 	mov.w	r4, #64	; 0x40
   2668c:	f3ef 8211 	mrs	r2, BASEPRI
   26690:	f384 8812 	msr	BASEPRI_MAX, r4
   26694:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   26698:	6141      	str	r1, [r0, #20]
}
   2669a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2669c:	2101      	movs	r1, #1
   2669e:	f7ec ba3b 	b.w	12b18 <process_event>

000266a2 <validate_args>:
{
   266a2:	b510      	push	{r4, lr}
   266a4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   266a6:	b140      	cbz	r0, 266ba <validate_args+0x18>
   266a8:	b139      	cbz	r1, 266ba <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   266aa:	1d08      	adds	r0, r1, #4
   266ac:	f7ff ff5b 	bl	26566 <sys_notify_validate>
	if ((rv == 0)
   266b0:	b928      	cbnz	r0, 266be <validate_args+0x1c>
	    && ((cli->notify.flags
   266b2:	68a3      	ldr	r3, [r4, #8]
   266b4:	f033 0303 	bics.w	r3, r3, #3
   266b8:	d001      	beq.n	266be <validate_args+0x1c>
		rv = -EINVAL;
   266ba:	f06f 0015 	mvn.w	r0, #21
}
   266be:	bd10      	pop	{r4, pc}

000266c0 <onoff_manager_init>:
{
   266c0:	b538      	push	{r3, r4, r5, lr}
   266c2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   266c4:	4605      	mov	r5, r0
   266c6:	b158      	cbz	r0, 266e0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   266c8:	b151      	cbz	r1, 266e0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   266ca:	680b      	ldr	r3, [r1, #0]
   266cc:	b143      	cbz	r3, 266e0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   266ce:	684b      	ldr	r3, [r1, #4]
   266d0:	b133      	cbz	r3, 266e0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   266d2:	221c      	movs	r2, #28
   266d4:	2100      	movs	r1, #0
   266d6:	f001 f8b5 	bl	27844 <memset>
   266da:	612c      	str	r4, [r5, #16]
	return 0;
   266dc:	2000      	movs	r0, #0
}
   266de:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   266e0:	f06f 0015 	mvn.w	r0, #21
   266e4:	e7fb      	b.n	266de <onoff_manager_init+0x1e>

000266e6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   266e6:	b570      	push	{r4, r5, r6, lr}
   266e8:	4604      	mov	r4, r0
   266ea:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   266ec:	f7ff ffd9 	bl	266a2 <validate_args>

	if (rv < 0) {
   266f0:	1e05      	subs	r5, r0, #0
   266f2:	db31      	blt.n	26758 <onoff_request+0x72>
   266f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   266f8:	f3ef 8111 	mrs	r1, BASEPRI
   266fc:	f383 8812 	msr	BASEPRI_MAX, r3
   26700:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   26704:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26706:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   26708:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2670c:	42ab      	cmp	r3, r5
   2670e:	f000 0207 	and.w	r2, r0, #7
   26712:	d02e      	beq.n	26772 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   26714:	2a02      	cmp	r2, #2
   26716:	d10e      	bne.n	26736 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   26718:	3301      	adds	r3, #1
   2671a:	8363      	strh	r3, [r4, #26]
	rv = state;
   2671c:	4615      	mov	r5, r2
		notify = true;
   2671e:	2301      	movs	r3, #1
	__asm__ volatile(
   26720:	f381 8811 	msr	BASEPRI, r1
   26724:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   26728:	b1b3      	cbz	r3, 26758 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   2672a:	2300      	movs	r3, #0
   2672c:	4631      	mov	r1, r6
   2672e:	4620      	mov	r0, r4
   26730:	f7ff ff93 	bl	2665a <notify_one>
   26734:	e010      	b.n	26758 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   26736:	0783      	lsls	r3, r0, #30
   26738:	d001      	beq.n	2673e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   2673a:	2a06      	cmp	r2, #6
   2673c:	d10e      	bne.n	2675c <onoff_request+0x76>
	parent->next = child;
   2673e:	2300      	movs	r3, #0
   26740:	6033      	str	r3, [r6, #0]
	return list->tail;
   26742:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   26744:	b993      	cbnz	r3, 2676c <onoff_request+0x86>
	list->head = node;
   26746:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   2674a:	4615      	mov	r5, r2
   2674c:	b962      	cbnz	r2, 26768 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2674e:	460a      	mov	r2, r1
   26750:	4620      	mov	r0, r4
   26752:	2102      	movs	r1, #2
   26754:	f7ec f9e0 	bl	12b18 <process_event>
		}
	}

	return rv;
}
   26758:	4628      	mov	r0, r5
   2675a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2675c:	2a05      	cmp	r2, #5
   2675e:	bf0c      	ite	eq
   26760:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   26764:	f06f 0504 	mvnne.w	r5, #4
   26768:	2300      	movs	r3, #0
   2676a:	e7d9      	b.n	26720 <onoff_request+0x3a>
	parent->next = child;
   2676c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2676e:	6066      	str	r6, [r4, #4]
}
   26770:	e7eb      	b.n	2674a <onoff_request+0x64>
		rv = -EAGAIN;
   26772:	f06f 050a 	mvn.w	r5, #10
   26776:	e7f7      	b.n	26768 <onoff_request+0x82>

00026778 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26778:	4604      	mov	r4, r0
   2677a:	b508      	push	{r3, lr}
   2677c:	4608      	mov	r0, r1
   2677e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26780:	461a      	mov	r2, r3
   26782:	47a0      	blx	r4
	return z_impl_z_current_get();
   26784:	f7fb fd1e 	bl	221c4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26788:	f7ee fcc2 	bl	15110 <z_impl_k_thread_abort>

0002678c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2678c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26790:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   26792:	0840      	lsrs	r0, r0, #1
   26794:	4770      	bx	lr

00026796 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   26796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26798:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2679a:	f7ff fff7 	bl	2678c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2679e:	fab0 f080 	clz	r0, r0
   267a2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   267a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   267aa:	00ca      	lsls	r2, r1, #3
   267ac:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   267b0:	1d17      	adds	r7, r2, #4
{
   267b2:	460c      	mov	r4, r1
   267b4:	3206      	adds	r2, #6
   267b6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   267b8:	b956      	cbnz	r6, 267d0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   267ba:	2101      	movs	r1, #1
   267bc:	fa01 f000 	lsl.w	r0, r1, r0
   267c0:	68d9      	ldr	r1, [r3, #12]
   267c2:	4301      	orrs	r1, r0
   267c4:	60d9      	str	r1, [r3, #12]
		b->next = c;
   267c6:	f8cc 4010 	str.w	r4, [ip, #16]
   267ca:	53dd      	strh	r5, [r3, r7]
   267cc:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   267ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   267d0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   267d2:	3104      	adds	r1, #4
   267d4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   267d6:	53d8      	strh	r0, [r3, r7]
   267d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   267dc:	529e      	strh	r6, [r3, r2]
   267de:	80c5      	strh	r5, [r0, #6]
   267e0:	525d      	strh	r5, [r3, r1]
   267e2:	e7f4      	b.n	267ce <free_list_add+0x38>

000267e4 <free_list_remove_bidx>:
{
   267e4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   267e6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   267ea:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   267ec:	4299      	cmp	r1, r3
   267ee:	f102 0104 	add.w	r1, r2, #4
   267f2:	d10a      	bne.n	2680a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   267f4:	2301      	movs	r3, #1
   267f6:	fa03 f202 	lsl.w	r2, r3, r2
   267fa:	68c3      	ldr	r3, [r0, #12]
   267fc:	ea23 0302 	bic.w	r3, r3, r2
   26800:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26802:	2300      	movs	r3, #0
   26804:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26808:	bd10      	pop	{r4, pc}
   2680a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2680c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26810:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26814:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26818:	80cb      	strh	r3, [r1, #6]
   2681a:	8082      	strh	r2, [r0, #4]
}
   2681c:	e7f4      	b.n	26808 <free_list_remove_bidx+0x24>

0002681e <free_list_remove>:
{
   2681e:	b508      	push	{r3, lr}
   26820:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26822:	f7ff ffb3 	bl	2678c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26826:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2682a:	f1c2 021f 	rsb	r2, r2, #31
   2682e:	4618      	mov	r0, r3
}
   26830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   26834:	f7ff bfd6 	b.w	267e4 <free_list_remove_bidx>

00026838 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   26838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2683c:	fab1 f581 	clz	r5, r1
   26840:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   26844:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   26848:	4603      	mov	r3, r0
	if (b->next) {
   2684a:	693a      	ldr	r2, [r7, #16]
{
   2684c:	460e      	mov	r6, r1
	if (b->next) {
   2684e:	b1c2      	cbz	r2, 26882 <alloc_chunk+0x4a>
   26850:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   26854:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   26856:	4618      	mov	r0, r3
   26858:	4621      	mov	r1, r4
   2685a:	f7ff ff97 	bl	2678c <chunk_size>
   2685e:	42b0      	cmp	r0, r6
   26860:	d306      	bcc.n	26870 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   26862:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   26864:	4618      	mov	r0, r3
   26866:	f7ff ffbd 	bl	267e4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2686a:	4620      	mov	r0, r4
   2686c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26870:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   26874:	f1b8 0801 	subs.w	r8, r8, #1
   26878:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   2687a:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2687c:	d001      	beq.n	26882 <alloc_chunk+0x4a>
   2687e:	4282      	cmp	r2, r0
   26880:	d1e8      	bne.n	26854 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26882:	f1c5 0220 	rsb	r2, r5, #32
   26886:	f04f 34ff 	mov.w	r4, #4294967295
   2688a:	4094      	lsls	r4, r2
   2688c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2688e:	4014      	ands	r4, r2
   26890:	d0eb      	beq.n	2686a <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   26892:	fa94 f2a4 	rbit	r2, r4
   26896:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2689a:	1d11      	adds	r1, r2, #4
   2689c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   268a0:	4621      	mov	r1, r4
   268a2:	e7df      	b.n	26864 <alloc_chunk+0x2c>

000268a4 <merge_chunks>:
{
   268a4:	b538      	push	{r3, r4, r5, lr}
   268a6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   268a8:	f7ff ff70 	bl	2678c <chunk_size>
{
   268ac:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   268ae:	4604      	mov	r4, r0
   268b0:	4611      	mov	r1, r2
   268b2:	4618      	mov	r0, r3
   268b4:	f7ff ff6a 	bl	2678c <chunk_size>
		((uint16_t *)cmem)[f] = val;
   268b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   268bc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   268be:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   268c0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   268c2:	4618      	mov	r0, r3
   268c4:	f7ff ff62 	bl	2678c <chunk_size>
	void *cmem = &buf[c];
   268c8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   268ca:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   268ce:	bd38      	pop	{r3, r4, r5, pc}

000268d0 <split_chunks>:
{
   268d0:	b538      	push	{r3, r4, r5, lr}
   268d2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   268d4:	f7ff ff5a 	bl	2678c <chunk_size>
{
   268d8:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   268da:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   268dc:	1a51      	subs	r1, r2, r1
   268de:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   268e2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   268e4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   268e6:	8060      	strh	r0, [r4, #2]
   268e8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   268ec:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   268ee:	8044      	strh	r4, [r0, #2]
   268f0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   268f4:	4618      	mov	r0, r3
   268f6:	4611      	mov	r1, r2
   268f8:	f7ff ff48 	bl	2678c <chunk_size>
	void *cmem = &buf[c];
   268fc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   268fe:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26902:	bd38      	pop	{r3, r4, r5, pc}

00026904 <free_chunk>:
{
   26904:	b538      	push	{r3, r4, r5, lr}
   26906:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26908:	f7ff ff40 	bl	2678c <chunk_size>
   2690c:	460c      	mov	r4, r1
   2690e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26910:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26914:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26916:	07da      	lsls	r2, r3, #31
   26918:	d40a      	bmi.n	26930 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2691a:	4628      	mov	r0, r5
   2691c:	f7ff ff7f 	bl	2681e <free_list_remove>
	return c + chunk_size(h, c);
   26920:	4621      	mov	r1, r4
   26922:	4628      	mov	r0, r5
   26924:	f7ff ff32 	bl	2678c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26928:	1822      	adds	r2, r4, r0
   2692a:	4628      	mov	r0, r5
   2692c:	f7ff ffba 	bl	268a4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26930:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26934:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26936:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2693a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2693c:	07db      	lsls	r3, r3, #31
   2693e:	d40c      	bmi.n	2695a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   26940:	4628      	mov	r0, r5
   26942:	f7ff ff6c 	bl	2681e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26946:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2694a:	4622      	mov	r2, r4
   2694c:	1a61      	subs	r1, r4, r1
   2694e:	4628      	mov	r0, r5
   26950:	f7ff ffa8 	bl	268a4 <merge_chunks>
   26954:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26958:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2695a:	4621      	mov	r1, r4
   2695c:	4628      	mov	r0, r5
}
   2695e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26962:	f7ff bf18 	b.w	26796 <free_list_add>

00026966 <sys_heap_free>:
	if (mem == NULL) {
   26966:	b161      	cbz	r1, 26982 <sys_heap_free+0x1c>
   26968:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2696a:	3904      	subs	r1, #4
   2696c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2696e:	f021 0307 	bic.w	r3, r1, #7
   26972:	4403      	add	r3, r0
	free_chunk(h, c);
   26974:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26976:	885a      	ldrh	r2, [r3, #2]
   26978:	f022 0201 	bic.w	r2, r2, #1
   2697c:	805a      	strh	r2, [r3, #2]
   2697e:	f7ff bfc1 	b.w	26904 <free_chunk>
}
   26982:	4770      	bx	lr

00026984 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   26984:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26986:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   26988:	b909      	cbnz	r1, 2698e <sys_heap_alloc+0xa>
		return NULL;
   2698a:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2698c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2698e:	68ab      	ldr	r3, [r5, #8]
   26990:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   26994:	d9f9      	bls.n	2698a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26996:	310b      	adds	r1, #11
   26998:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2699a:	4621      	mov	r1, r4
   2699c:	4628      	mov	r0, r5
   2699e:	f7ff ff4b 	bl	26838 <alloc_chunk>
	if (c == 0U) {
   269a2:	4606      	mov	r6, r0
   269a4:	2800      	cmp	r0, #0
   269a6:	d0f0      	beq.n	2698a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   269a8:	4601      	mov	r1, r0
   269aa:	4628      	mov	r0, r5
   269ac:	f7ff feee 	bl	2678c <chunk_size>
   269b0:	42a0      	cmp	r0, r4
   269b2:	d907      	bls.n	269c4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   269b4:	1932      	adds	r2, r6, r4
   269b6:	4628      	mov	r0, r5
   269b8:	f7ff ff8a 	bl	268d0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   269bc:	4611      	mov	r1, r2
   269be:	4628      	mov	r0, r5
   269c0:	f7ff fee9 	bl	26796 <free_list_add>
	void *cmem = &buf[c];
   269c4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   269c8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   269ca:	8853      	ldrh	r3, [r2, #2]
   269cc:	f043 0301 	orr.w	r3, r3, #1
   269d0:	8053      	strh	r3, [r2, #2]
   269d2:	3004      	adds	r0, #4
	return mem;
   269d4:	e7da      	b.n	2698c <sys_heap_alloc+0x8>

000269d6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   269d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   269da:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   269dc:	424a      	negs	r2, r1
   269de:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   269e2:	ea31 0202 	bics.w	r2, r1, r2
{
   269e6:	4603      	mov	r3, r0
	if (align != rew) {
   269e8:	d00a      	beq.n	26a00 <sys_heap_aligned_alloc+0x2a>
		return false;
   269ea:	2f04      	cmp	r7, #4
   269ec:	463a      	mov	r2, r7
   269ee:	46b9      	mov	r9, r7
   269f0:	bf28      	it	cs
   269f2:	2204      	movcs	r2, #4
		align -= rew;
   269f4:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   269f6:	b974      	cbnz	r4, 26a16 <sys_heap_aligned_alloc+0x40>
		return NULL;
   269f8:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   269fa:	4628      	mov	r0, r5
   269fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   26a00:	2904      	cmp	r1, #4
   26a02:	d804      	bhi.n	26a0e <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   26a04:	4621      	mov	r1, r4
}
   26a06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   26a0a:	f7ff bfbb 	b.w	26984 <sys_heap_alloc>
		rew = 0;
   26a0e:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   26a12:	2204      	movs	r2, #4
   26a14:	e7ef      	b.n	269f6 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   26a16:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   26a18:	68b3      	ldr	r3, [r6, #8]
   26a1a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   26a1e:	d9eb      	bls.n	269f8 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26a20:	f104 010b 	add.w	r1, r4, #11
   26a24:	4439      	add	r1, r7
   26a26:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   26a28:	08c9      	lsrs	r1, r1, #3
   26a2a:	4630      	mov	r0, r6
   26a2c:	f7ff ff04 	bl	26838 <alloc_chunk>
	if (c0 == 0) {
   26a30:	4680      	mov	r8, r0
   26a32:	2800      	cmp	r0, #0
   26a34:	d0e0      	beq.n	269f8 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   26a36:	f109 0504 	add.w	r5, r9, #4
   26a3a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   26a3e:	1e7b      	subs	r3, r7, #1
   26a40:	4435      	add	r5, r6
   26a42:	441d      	add	r5, r3
   26a44:	427f      	negs	r7, r7
   26a46:	403d      	ands	r5, r7
   26a48:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26a4c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26a4e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26a50:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26a52:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26a54:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   26a58:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   26a5a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   26a5e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   26a62:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   26a66:	d208      	bcs.n	26a7a <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   26a68:	4601      	mov	r1, r0
   26a6a:	463a      	mov	r2, r7
   26a6c:	4630      	mov	r0, r6
   26a6e:	f7ff ff2f 	bl	268d0 <split_chunks>
		free_list_add(h, c0);
   26a72:	4641      	mov	r1, r8
   26a74:	4630      	mov	r0, r6
   26a76:	f7ff fe8e 	bl	26796 <free_list_add>
	return c + chunk_size(h, c);
   26a7a:	4639      	mov	r1, r7
   26a7c:	4630      	mov	r0, r6
   26a7e:	f7ff fe85 	bl	2678c <chunk_size>
   26a82:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   26a84:	4284      	cmp	r4, r0
   26a86:	d207      	bcs.n	26a98 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   26a88:	4630      	mov	r0, r6
   26a8a:	4622      	mov	r2, r4
   26a8c:	f7ff ff20 	bl	268d0 <split_chunks>
		free_list_add(h, c_end);
   26a90:	4621      	mov	r1, r4
   26a92:	4630      	mov	r0, r6
   26a94:	f7ff fe7f 	bl	26796 <free_list_add>
	void *cmem = &buf[c];
   26a98:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26a9c:	8873      	ldrh	r3, [r6, #2]
   26a9e:	f043 0301 	orr.w	r3, r3, #1
   26aa2:	8073      	strh	r3, [r6, #2]
   26aa4:	e7a9      	b.n	269fa <sys_heap_aligned_alloc+0x24>

00026aa6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   26aa6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26aa8:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26aaa:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   26aac:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   26ab0:	f021 0107 	bic.w	r1, r1, #7
{
   26ab4:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   26ab6:	1acd      	subs	r5, r1, r3
   26ab8:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   26aba:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   26abc:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   26ac0:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   26ac4:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26ac6:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   26ac8:	2600      	movs	r6, #0
   26aca:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   26acc:	f1c0 0020 	rsb	r0, r0, #32
   26ad0:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   26ad4:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   26ad6:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   26ad8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   26adc:	4284      	cmp	r4, r0
   26ade:	d118      	bne.n	26b12 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26ae0:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26ae2:	f040 0001 	orr.w	r0, r0, #1
   26ae6:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   26ae8:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   26aec:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26aee:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   26af0:	801e      	strh	r6, [r3, #0]
   26af2:	8067      	strh	r7, [r4, #2]
   26af4:	195c      	adds	r4, r3, r5
   26af6:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   26afa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   26afe:	8066      	strh	r6, [r4, #2]
   26b00:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26b02:	8850      	ldrh	r0, [r2, #2]
   26b04:	f040 0001 	orr.w	r0, r0, #1
   26b08:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   26b0a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   26b0c:	4618      	mov	r0, r3
   26b0e:	f7ff be42 	b.w	26796 <free_list_add>
		h->buckets[i].next = 0;
   26b12:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   26b16:	e7e1      	b.n	26adc <sys_heap_init+0x36>

00026b18 <encode_uint>:
{
   26b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b1c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   26b1e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   26b20:	2b6f      	cmp	r3, #111	; 0x6f
{
   26b22:	4680      	mov	r8, r0
   26b24:	460f      	mov	r7, r1
   26b26:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26b28:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   26b2c:	d029      	beq.n	26b82 <encode_uint+0x6a>
   26b2e:	d824      	bhi.n	26b7a <encode_uint+0x62>
		return 16;
   26b30:	2b58      	cmp	r3, #88	; 0x58
   26b32:	bf14      	ite	ne
   26b34:	260a      	movne	r6, #10
   26b36:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26b38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   26b3c:	4632      	mov	r2, r6
   26b3e:	2300      	movs	r3, #0
   26b40:	4640      	mov	r0, r8
   26b42:	4639      	mov	r1, r7
   26b44:	f7d9 fdf6 	bl	734 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26b48:	2a09      	cmp	r2, #9
   26b4a:	b2d4      	uxtb	r4, r2
   26b4c:	d81e      	bhi.n	26b8c <encode_uint+0x74>
   26b4e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   26b50:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26b52:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   26b54:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26b58:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   26b5c:	d301      	bcc.n	26b62 <encode_uint+0x4a>
   26b5e:	45d1      	cmp	r9, sl
   26b60:	d811      	bhi.n	26b86 <encode_uint+0x6e>
	if (conv->flag_hash) {
   26b62:	782b      	ldrb	r3, [r5, #0]
   26b64:	069b      	lsls	r3, r3, #26
   26b66:	d505      	bpl.n	26b74 <encode_uint+0x5c>
		if (radix == 8) {
   26b68:	2e08      	cmp	r6, #8
   26b6a:	d115      	bne.n	26b98 <encode_uint+0x80>
			conv->altform_0 = true;
   26b6c:	78ab      	ldrb	r3, [r5, #2]
   26b6e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   26b72:	70ab      	strb	r3, [r5, #2]
}
   26b74:	4648      	mov	r0, r9
   26b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   26b7a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   26b7e:	2b70      	cmp	r3, #112	; 0x70
   26b80:	e7d7      	b.n	26b32 <encode_uint+0x1a>
	switch (specifier) {
   26b82:	2608      	movs	r6, #8
   26b84:	e7d8      	b.n	26b38 <encode_uint+0x20>
		value /= radix;
   26b86:	4680      	mov	r8, r0
   26b88:	460f      	mov	r7, r1
   26b8a:	e7d7      	b.n	26b3c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26b8c:	f1bb 0f19 	cmp.w	fp, #25
   26b90:	bf94      	ite	ls
   26b92:	3437      	addls	r4, #55	; 0x37
   26b94:	3457      	addhi	r4, #87	; 0x57
   26b96:	e7db      	b.n	26b50 <encode_uint+0x38>
		} else if (radix == 16) {
   26b98:	2e10      	cmp	r6, #16
   26b9a:	d1eb      	bne.n	26b74 <encode_uint+0x5c>
			conv->altform_0c = true;
   26b9c:	78ab      	ldrb	r3, [r5, #2]
   26b9e:	f043 0310 	orr.w	r3, r3, #16
   26ba2:	e7e6      	b.n	26b72 <encode_uint+0x5a>

00026ba4 <outs>:
{
   26ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ba8:	4607      	mov	r7, r0
   26baa:	4688      	mov	r8, r1
   26bac:	4615      	mov	r5, r2
   26bae:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   26bb0:	4614      	mov	r4, r2
   26bb2:	42b4      	cmp	r4, r6
   26bb4:	eba4 0005 	sub.w	r0, r4, r5
   26bb8:	d302      	bcc.n	26bc0 <outs+0x1c>
   26bba:	b93e      	cbnz	r6, 26bcc <outs+0x28>
   26bbc:	7823      	ldrb	r3, [r4, #0]
   26bbe:	b12b      	cbz	r3, 26bcc <outs+0x28>
		int rc = out((int)*sp++, ctx);
   26bc0:	f814 0b01 	ldrb.w	r0, [r4], #1
   26bc4:	4641      	mov	r1, r8
   26bc6:	47b8      	blx	r7
		if (rc < 0) {
   26bc8:	2800      	cmp	r0, #0
   26bca:	daf2      	bge.n	26bb2 <outs+0xe>
}
   26bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026bd0 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   26bd0:	b40f      	push	{r0, r1, r2, r3}
   26bd2:	b507      	push	{r0, r1, r2, lr}
   26bd4:	a904      	add	r1, sp, #16
   26bd6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26bda:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   26bdc:	f7ff fd05 	bl	265ea <vprintk>

	va_end(ap);
}
   26be0:	b003      	add	sp, #12
   26be2:	f85d eb04 	ldr.w	lr, [sp], #4
   26be6:	b004      	add	sp, #16
   26be8:	4770      	bx	lr

00026bea <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   26bea:	4602      	mov	r2, r0
   26bec:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   26bee:	68c0      	ldr	r0, [r0, #12]
   26bf0:	6814      	ldr	r4, [r2, #0]
   26bf2:	42a0      	cmp	r0, r4
   26bf4:	d904      	bls.n	26c00 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   26bf6:	3801      	subs	r0, #1
   26bf8:	1b00      	subs	r0, r0, r4
   26bfa:	6008      	str	r0, [r1, #0]

		return false;
   26bfc:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   26bfe:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26c00:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   26c02:	b918      	cbnz	r0, 26c0c <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26c04:	3b01      	subs	r3, #1
   26c06:	1b1b      	subs	r3, r3, r4
   26c08:	600b      	str	r3, [r1, #0]
		return false;
   26c0a:	e7f8      	b.n	26bfe <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   26c0c:	1b1b      	subs	r3, r3, r4
   26c0e:	600b      	str	r3, [r1, #0]
	return true;
   26c10:	2001      	movs	r0, #1
   26c12:	e7f4      	b.n	26bfe <free_space+0x14>

00026c14 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   26c14:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   26c16:	a901      	add	r1, sp, #4
{
   26c18:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   26c1a:	f7ff ffe6 	bl	26bea <free_space>
   26c1e:	b120      	cbz	r0, 26c2a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   26c20:	9b01      	ldr	r3, [sp, #4]
   26c22:	68e2      	ldr	r2, [r4, #12]
   26c24:	3b01      	subs	r3, #1
   26c26:	4413      	add	r3, r2
   26c28:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   26c2a:	9801      	ldr	r0, [sp, #4]
   26c2c:	6a23      	ldr	r3, [r4, #32]
   26c2e:	43c0      	mvns	r0, r0
}
   26c30:	4418      	add	r0, r3
   26c32:	b002      	add	sp, #8
   26c34:	bd10      	pop	{r4, pc}

00026c36 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   26c36:	b510      	push	{r4, lr}
   26c38:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   26c3a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26c3c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   26c3e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26c40:	07d2      	lsls	r2, r2, #31
   26c42:	d502      	bpl.n	26c4a <idx_inc+0x14>
		return i & (buffer->size - 1);
   26c44:	3b01      	subs	r3, #1
   26c46:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   26c48:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26c4a:	4298      	cmp	r0, r3
   26c4c:	bf28      	it	cs
   26c4e:	1ac0      	subcs	r0, r0, r3
   26c50:	e7fa      	b.n	26c48 <idx_inc+0x12>

00026c52 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   26c52:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26c54:	69c2      	ldr	r2, [r0, #28]
{
   26c56:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   26c58:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26c5a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   26c5c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26c60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26c64:	462a      	mov	r2, r5
   26c66:	6801      	ldr	r1, [r0, #0]
{
   26c68:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26c6a:	f7ff ffe4 	bl	26c36 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26c6e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26c70:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26c72:	462a      	mov	r2, r5
   26c74:	4620      	mov	r0, r4
   26c76:	f7ff ffde 	bl	26c36 <idx_inc>
   26c7a:	6060      	str	r0, [r4, #4]
}
   26c7c:	bd38      	pop	{r3, r4, r5, pc}

00026c7e <max_utilization_update>:
{
   26c7e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26c80:	6903      	ldr	r3, [r0, #16]
   26c82:	075b      	lsls	r3, r3, #29
{
   26c84:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26c86:	d506      	bpl.n	26c96 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   26c88:	6a45      	ldr	r5, [r0, #36]	; 0x24
   26c8a:	f7ff ffc3 	bl	26c14 <get_usage>
   26c8e:	4285      	cmp	r5, r0
   26c90:	d902      	bls.n	26c98 <max_utilization_update+0x1a>
   26c92:	6a60      	ldr	r0, [r4, #36]	; 0x24
   26c94:	6260      	str	r0, [r4, #36]	; 0x24
}
   26c96:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   26c98:	4620      	mov	r0, r4
   26c9a:	f7ff ffbb 	bl	26c14 <get_usage>
   26c9e:	e7f9      	b.n	26c94 <max_utilization_update+0x16>

00026ca0 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   26ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26ca4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   26ca8:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   26cac:	461f      	mov	r7, r3
	*user_packet = false;
   26cae:	2300      	movs	r3, #0
   26cb0:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   26cb2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26cb6:	f003 0303 	and.w	r3, r3, #3
   26cba:	2b02      	cmp	r3, #2
{
   26cbc:	4604      	mov	r4, r0
   26cbe:	468b      	mov	fp, r1
   26cc0:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26cc2:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26cc6:	d103      	bne.n	26cd0 <drop_item_locked+0x30>
		return item->skip.len;
   26cc8:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   26ccc:	08ad      	lsrs	r5, r5, #2
   26cce:	d12e      	bne.n	26d2e <drop_item_locked+0x8e>
   26cd0:	69a3      	ldr	r3, [r4, #24]
   26cd2:	4630      	mov	r0, r6
   26cd4:	4798      	blx	r3
   26cd6:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   26cd8:	f1b8 0f00 	cmp.w	r8, #0
   26cdc:	d036      	beq.n	26d4c <drop_item_locked+0xac>
		if (item->hdr.busy) {
   26cde:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26ce2:	079b      	lsls	r3, r3, #30
   26ce4:	d52f      	bpl.n	26d46 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   26ce6:	f10b 0101 	add.w	r1, fp, #1
   26cea:	4620      	mov	r0, r4
   26cec:	f7ff ffb1 	bl	26c52 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26cf0:	6861      	ldr	r1, [r4, #4]
   26cf2:	462a      	mov	r2, r5
   26cf4:	4620      	mov	r0, r4
   26cf6:	f7ff ff9e 	bl	26c36 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26cfa:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26cfc:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26cfe:	462a      	mov	r2, r5
   26d00:	4620      	mov	r0, r4
   26d02:	f7ff ff98 	bl	26c36 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26d06:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26d08:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26d0a:	68e1      	ldr	r1, [r4, #12]
   26d0c:	4620      	mov	r0, r4
   26d0e:	f7ff ff92 	bl	26c36 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26d12:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   26d14:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   26d18:	f002 0203 	and.w	r2, r2, #3
   26d1c:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26d1e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26d22:	d10c      	bne.n	26d3e <drop_item_locked+0x9e>
		return item->skip.len;
   26d24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   26d28:	089b      	lsrs	r3, r3, #2
   26d2a:	d008      	beq.n	26d3e <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   26d2c:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26d2e:	68e1      	ldr	r1, [r4, #12]
   26d30:	462a      	mov	r2, r5
   26d32:	4620      	mov	r0, r4
   26d34:	f7ff ff7f 	bl	26c36 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   26d38:	e9c4 0002 	strd	r0, r0, [r4, #8]
   26d3c:	e007      	b.n	26d4e <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   26d3e:	69a3      	ldr	r3, [r4, #24]
   26d40:	4630      	mov	r0, r6
   26d42:	4798      	blx	r3
   26d44:	4405      	add	r5, r0
			*user_packet = true;
   26d46:	2301      	movs	r3, #1
   26d48:	703b      	strb	r3, [r7, #0]
   26d4a:	e7f0      	b.n	26d2e <drop_item_locked+0x8e>
		item = NULL;
   26d4c:	4646      	mov	r6, r8
	}

	return item;
}
   26d4e:	4630      	mov	r0, r6
   26d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026d54 <mpsc_pbuf_init>:
{
   26d54:	b538      	push	{r3, r4, r5, lr}
   26d56:	460d      	mov	r5, r1
   26d58:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   26d5a:	221c      	movs	r2, #28
   26d5c:	2100      	movs	r1, #0
   26d5e:	f000 fd71 	bl	27844 <memset>
	buffer->get_wlen = cfg->get_wlen;
   26d62:	68eb      	ldr	r3, [r5, #12]
   26d64:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   26d66:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
   26d68:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
   26d6a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   26d6c:	682b      	ldr	r3, [r5, #0]
   26d6e:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   26d70:	2300      	movs	r3, #0
   26d72:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   26d74:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   26d76:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   26d78:	b122      	cbz	r2, 26d84 <mpsc_pbuf_init+0x30>
   26d7a:	1e51      	subs	r1, r2, #1
   26d7c:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   26d7e:	bf08      	it	eq
   26d80:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   26d84:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26d86:	2201      	movs	r2, #1
   26d88:	f104 0028 	add.w	r0, r4, #40	; 0x28
   26d8c:	2100      	movs	r1, #0
}
   26d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26d92:	f003 bd80 	b.w	2a896 <z_impl_k_sem_init>

00026d96 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   26d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d9a:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   26d9c:	6a03      	ldr	r3, [r0, #32]
   26d9e:	3b01      	subs	r3, #1
   26da0:	428b      	cmp	r3, r1
{
   26da2:	b085      	sub	sp, #20
   26da4:	4604      	mov	r4, r0
   26da6:	460f      	mov	r7, r1
   26da8:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   26daa:	d367      	bcc.n	26e7c <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
   26dac:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   26dae:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   26db0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   26db4:	f04f 0340 	mov.w	r3, #64	; 0x40
   26db8:	f3ef 8611 	mrs	r6, BASEPRI
   26dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   26dc0:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   26dc4:	a903      	add	r1, sp, #12
   26dc6:	4620      	mov	r0, r4
   26dc8:	f7ff ff0f 	bl	26bea <free_space>
		if (free_wlen >= wlen) {
   26dcc:	9903      	ldr	r1, [sp, #12]
   26dce:	42b9      	cmp	r1, r7
   26dd0:	d324      	bcc.n	26e1c <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   26dd2:	6821      	ldr	r1, [r4, #0]
			item =
   26dd4:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   26dd6:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   26dda:	f022 0203 	bic.w	r2, r2, #3
   26dde:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   26de2:	4620      	mov	r0, r4
   26de4:	463a      	mov	r2, r7
			item =
   26de6:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   26dea:	f7ff ff24 	bl	26c36 <idx_inc>
		cont = false;
   26dee:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   26df0:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   26df2:	f386 8811 	msr	BASEPRI, r6
   26df6:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   26dfa:	2b00      	cmp	r3, #0
   26dfc:	d040      	beq.n	26e80 <mpsc_pbuf_alloc+0xea>
   26dfe:	2d00      	cmp	r5, #0
   26e00:	d0d8      	beq.n	26db4 <mpsc_pbuf_alloc+0x1e>
   26e02:	f89d 300b 	ldrb.w	r3, [sp, #11]
   26e06:	2b00      	cmp	r3, #0
   26e08:	d0d4      	beq.n	26db4 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   26e0a:	6963      	ldr	r3, [r4, #20]
   26e0c:	b123      	cbz	r3, 26e18 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
   26e0e:	4629      	mov	r1, r5
   26e10:	4620      	mov	r0, r4
   26e12:	4798      	blx	r3
			}
			dropped_item = NULL;
   26e14:	2500      	movs	r5, #0
   26e16:	e7cd      	b.n	26db4 <mpsc_pbuf_alloc+0x1e>
   26e18:	461d      	mov	r5, r3
   26e1a:	e7cb      	b.n	26db4 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   26e1c:	b128      	cbz	r0, 26e2a <mpsc_pbuf_alloc+0x94>
   26e1e:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   26e20:	4620      	mov	r0, r4
   26e22:	f7ff ff16 	bl	26c52 <add_skip_item>
			cont = true;
   26e26:	9b01      	ldr	r3, [sp, #4]
   26e28:	e7e3      	b.n	26df2 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26e2a:	ea58 0309 	orrs.w	r3, r8, r9
   26e2e:	d017      	beq.n	26e60 <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
   26e30:	f003 fc41 	bl	2a6b6 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26e34:	b9a0      	cbnz	r0, 26e60 <mpsc_pbuf_alloc+0xca>
   26e36:	f386 8811 	msr	BASEPRI, r6
   26e3a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   26e3e:	4642      	mov	r2, r8
   26e40:	464b      	mov	r3, r9
   26e42:	4658      	mov	r0, fp
   26e44:	f7fa fca8 	bl	21798 <z_impl_k_sem_take>
	__asm__ volatile(
   26e48:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e4c:	f3ef 8611 	mrs	r6, BASEPRI
   26e50:	f383 8812 	msr	BASEPRI_MAX, r3
   26e54:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   26e58:	fab0 f380 	clz	r3, r0
   26e5c:	095b      	lsrs	r3, r3, #5
   26e5e:	e7c8      	b.n	26df2 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   26e60:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   26e62:	9903      	ldr	r1, [sp, #12]
   26e64:	f10d 030b 	add.w	r3, sp, #11
   26e68:	f3c2 0240 	ubfx	r2, r2, #1, #1
   26e6c:	4620      	mov	r0, r4
   26e6e:	f7ff ff17 	bl	26ca0 <drop_item_locked>
			cont = dropped_item != NULL;
   26e72:	1e03      	subs	r3, r0, #0
   26e74:	4605      	mov	r5, r0
   26e76:	bf18      	it	ne
   26e78:	2301      	movne	r3, #1
   26e7a:	e7ba      	b.n	26df2 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   26e7c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   26e80:	4650      	mov	r0, sl
   26e82:	b005      	add	sp, #20
   26e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026e88 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   26e88:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   26e8a:	6983      	ldr	r3, [r0, #24]
{
   26e8c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26e8e:	4608      	mov	r0, r1
{
   26e90:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   26e92:	4798      	blx	r3
   26e94:	4602      	mov	r2, r0
   26e96:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e9a:	f3ef 8611 	mrs	r6, BASEPRI
   26e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   26ea2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   26ea6:	782b      	ldrb	r3, [r5, #0]
   26ea8:	f043 0301 	orr.w	r3, r3, #1
   26eac:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26eae:	6861      	ldr	r1, [r4, #4]
   26eb0:	4620      	mov	r0, r4
   26eb2:	f7ff fec0 	bl	26c36 <idx_inc>
   26eb6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   26eb8:	4620      	mov	r0, r4
   26eba:	f7ff fee0 	bl	26c7e <max_utilization_update>
	__asm__ volatile(
   26ebe:	f386 8811 	msr	BASEPRI, r6
   26ec2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   26ec6:	bd70      	pop	{r4, r5, r6, pc}

00026ec8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   26ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ecc:	4604      	mov	r4, r0
	__asm__ volatile(
   26ece:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ed2:	f3ef 8611 	mrs	r6, BASEPRI
   26ed6:	f383 8812 	msr	BASEPRI_MAX, r3
   26eda:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26ede:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   26ee2:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   26ee4:	bf88      	it	hi
   26ee6:	6a23      	ldrhi	r3, [r4, #32]
   26ee8:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   26eea:	b1f3      	cbz	r3, 26f2a <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   26eec:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   26eee:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   26ef2:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   26ef6:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   26efa:	d016      	beq.n	26f2a <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   26efc:	2b02      	cmp	r3, #2
   26efe:	d103      	bne.n	26f08 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   26f00:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   26f04:	08ad      	lsrs	r5, r5, #2
   26f06:	d115      	bne.n	26f34 <mpsc_pbuf_claim+0x6c>
   26f08:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   26f0a:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   26f0c:	d50f      	bpl.n	26f2e <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   26f0e:	f042 0202 	orr.w	r2, r2, #2
   26f12:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   26f16:	4640      	mov	r0, r8
   26f18:	4798      	blx	r3
   26f1a:	4639      	mov	r1, r7
   26f1c:	4602      	mov	r2, r0
   26f1e:	4620      	mov	r0, r4
   26f20:	f7ff fe89 	bl	26c36 <idx_inc>
		cont = false;
   26f24:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   26f26:	60a0      	str	r0, [r4, #8]
   26f28:	e011      	b.n	26f4e <mpsc_pbuf_claim+0x86>
			item = NULL;
   26f2a:	4698      	mov	r8, r3
   26f2c:	e00f      	b.n	26f4e <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   26f2e:	4640      	mov	r0, r8
   26f30:	4798      	blx	r3
   26f32:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   26f34:	68a1      	ldr	r1, [r4, #8]
   26f36:	462a      	mov	r2, r5
   26f38:	4620      	mov	r0, r4
   26f3a:	f7ff fe7c 	bl	26c36 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   26f3e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   26f40:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   26f42:	462a      	mov	r2, r5
   26f44:	4620      	mov	r0, r4
   26f46:	f7ff fe76 	bl	26c36 <idx_inc>
				cont = true;
   26f4a:	2301      	movs	r3, #1
				buffer->rd_idx =
   26f4c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26f4e:	f386 8811 	msr	BASEPRI, r6
   26f52:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   26f56:	2b00      	cmp	r3, #0
   26f58:	d1b9      	bne.n	26ece <mpsc_pbuf_claim+0x6>

	return item;
}
   26f5a:	4640      	mov	r0, r8
   26f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026f60 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   26f60:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   26f62:	6983      	ldr	r3, [r0, #24]
{
   26f64:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26f66:	4608      	mov	r0, r1
{
   26f68:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   26f6a:	4798      	blx	r3
   26f6c:	4602      	mov	r2, r0
	__asm__ volatile(
   26f6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f72:	f3ef 8611 	mrs	r6, BASEPRI
   26f76:	f383 8812 	msr	BASEPRI_MAX, r3
   26f7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   26f7e:	782b      	ldrb	r3, [r5, #0]
   26f80:	f36f 0300 	bfc	r3, #0, #1
   26f84:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26f86:	6923      	ldr	r3, [r4, #16]
   26f88:	079b      	lsls	r3, r3, #30
   26f8a:	d505      	bpl.n	26f98 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   26f8c:	68e1      	ldr	r1, [r4, #12]
   26f8e:	69e3      	ldr	r3, [r4, #28]
   26f90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26f94:	429d      	cmp	r5, r3
   26f96:	d112      	bne.n	26fbe <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   26f98:	782b      	ldrb	r3, [r5, #0]
   26f9a:	f36f 0341 	bfc	r3, #1, #1
   26f9e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   26fa0:	68e1      	ldr	r1, [r4, #12]
   26fa2:	4620      	mov	r0, r4
   26fa4:	f7ff fe47 	bl	26c36 <idx_inc>
   26fa8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26faa:	f386 8811 	msr	BASEPRI, r6
   26fae:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   26fb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   26fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26fba:	f7fa bbc7 	b.w	2174c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   26fbe:	682b      	ldr	r3, [r5, #0]
   26fc0:	f360 039f 	bfi	r3, r0, #2, #30
   26fc4:	602b      	str	r3, [r5, #0]
   26fc6:	e7f0      	b.n	26faa <mpsc_pbuf_free+0x4a>

00026fc8 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26fc8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   26fcc:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   26fce:	bf8a      	itet	hi
   26fd0:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   26fd2:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   26fd4:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26fd6:	1e18      	subs	r0, r3, #0
   26fd8:	bf18      	it	ne
   26fda:	2001      	movne	r0, #1
   26fdc:	4770      	bx	lr

00026fde <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   26fde:	4770      	bx	lr

00026fe0 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26fe0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26fe2:	075b      	lsls	r3, r3, #29
   26fe4:	d40b      	bmi.n	26ffe <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26fe6:	6803      	ldr	r3, [r0, #0]
   26fe8:	8840      	ldrh	r0, [r0, #2]
   26fea:	f3c3 2349 	ubfx	r3, r3, #9, #10
   26fee:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   26ff2:	4418      	add	r0, r3
   26ff4:	3017      	adds	r0, #23
   26ff6:	f020 0007 	bic.w	r0, r0, #7
   26ffa:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   26ffc:	4770      	bx	lr
	return 0;
   26ffe:	2000      	movs	r0, #0
}
   27000:	4770      	bx	lr

00027002 <dummy_timestamp>:
}
   27002:	2000      	movs	r0, #0
   27004:	4770      	bx	lr

00027006 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   27006:	f003 b803 	b.w	2a010 <sys_clock_cycle_get_32>

0002700a <z_log_vprintk>:
{
   2700a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2700c:	2300      	movs	r3, #0
   2700e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   27012:	e9cd 3300 	strd	r3, r3, [sp]
   27016:	461a      	mov	r2, r3
   27018:	4619      	mov	r1, r3
   2701a:	4618      	mov	r0, r3
   2701c:	f7ec fd06 	bl	13a2c <z_impl_z_log_msg_runtime_vcreate>
}
   27020:	b005      	add	sp, #20
   27022:	f85d fb04 	ldr.w	pc, [sp], #4

00027026 <notify_drop>:
	z_log_dropped(true);
   27026:	2001      	movs	r0, #1
   27028:	f7ec bb00 	b.w	1362c <z_log_dropped>

0002702c <z_log_get_tag>:
}
   2702c:	2000      	movs	r0, #0
   2702e:	4770      	bx	lr

00027030 <z_cbprintf_cpy>:
{
   27030:	b570      	push	{r4, r5, r6, lr}
   27032:	4603      	mov	r3, r0
   27034:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   27036:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
   2703a:	1a12      	subs	r2, r2, r0
   2703c:	428a      	cmp	r2, r1
{
   2703e:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
   27040:	d30a      	bcc.n	27058 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   27042:	682e      	ldr	r6, [r5, #0]
   27044:	460a      	mov	r2, r1
   27046:	4430      	add	r0, r6
   27048:	4619      	mov	r1, r3
   2704a:	f000 fbf0 	bl	2782e <memcpy>
	desc->off += len;
   2704e:	68ab      	ldr	r3, [r5, #8]
   27050:	4423      	add	r3, r4
   27052:	60ab      	str	r3, [r5, #8]
	return len;
   27054:	4620      	mov	r0, r4
}
   27056:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   27058:	f06f 001b 	mvn.w	r0, #27
   2705c:	e7fb      	b.n	27056 <z_cbprintf_cpy+0x26>

0002705e <z_log_msg_finalize>:
{
   2705e:	b570      	push	{r4, r5, r6, lr}
   27060:	460e      	mov	r6, r1
   27062:	4615      	mov	r5, r2
   27064:	4619      	mov	r1, r3
	if (!msg) {
   27066:	4604      	mov	r4, r0
   27068:	b918      	cbnz	r0, 27072 <z_log_msg_finalize+0x14>
}
   2706a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2706e:	f7ec badd 	b.w	1362c <z_log_dropped>
	if (data) {
   27072:	b143      	cbz	r3, 27086 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   27074:	f100 0310 	add.w	r3, r0, #16
   27078:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   2707c:	4418      	add	r0, r3
   2707e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   27082:	f000 fbd4 	bl	2782e <memcpy>
	msg->hdr.source = source;
   27086:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2708a:	4620      	mov	r0, r4
}
   2708c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   27090:	f7ec bc0a 	b.w	138a8 <z_log_msg_commit>

00027094 <buffer_write>:
{
   27094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27096:	4606      	mov	r6, r0
   27098:	460d      	mov	r5, r1
   2709a:	4614      	mov	r4, r2
   2709c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2709e:	4621      	mov	r1, r4
   270a0:	4628      	mov	r0, r5
   270a2:	463a      	mov	r2, r7
   270a4:	47b0      	blx	r6
	} while (len != 0);
   270a6:	1a24      	subs	r4, r4, r0
		buf += processed;
   270a8:	4405      	add	r5, r0
	} while (len != 0);
   270aa:	d1f8      	bne.n	2709e <buffer_write+0xa>
}
   270ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000270ae <cbvprintf>:
{
   270ae:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   270b0:	2400      	movs	r4, #0
   270b2:	9400      	str	r4, [sp, #0]
   270b4:	f7eb fe10 	bl	12cd8 <z_cbvprintf_impl>
}
   270b8:	b002      	add	sp, #8
   270ba:	bd10      	pop	{r4, pc}

000270bc <log_output_flush>:
		     output->control_block->offset,
   270bc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   270be:	6881      	ldr	r1, [r0, #8]
{
   270c0:	b510      	push	{r4, lr}
   270c2:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   270c4:	e9d2 2300 	ldrd	r2, r3, [r2]
   270c8:	6800      	ldr	r0, [r0, #0]
   270ca:	f7ff ffe3 	bl	27094 <buffer_write>
	output->control_block->offset = 0;
   270ce:	6863      	ldr	r3, [r4, #4]
   270d0:	2200      	movs	r2, #0
   270d2:	601a      	str	r2, [r3, #0]
}
   270d4:	bd10      	pop	{r4, pc}

000270d6 <out_func>:
{
   270d6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   270d8:	684b      	ldr	r3, [r1, #4]
   270da:	681a      	ldr	r2, [r3, #0]
   270dc:	68cb      	ldr	r3, [r1, #12]
   270de:	429a      	cmp	r2, r3
{
   270e0:	4605      	mov	r5, r0
   270e2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   270e4:	d102      	bne.n	270ec <out_func+0x16>
		log_output_flush(out_ctx);
   270e6:	4608      	mov	r0, r1
   270e8:	f7ff ffe8 	bl	270bc <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   270ec:	6863      	ldr	r3, [r4, #4]
   270ee:	f3bf 8f5b 	dmb	ish
   270f2:	e853 2f00 	ldrex	r2, [r3]
   270f6:	1c51      	adds	r1, r2, #1
   270f8:	e843 1000 	strex	r0, r1, [r3]
   270fc:	2800      	cmp	r0, #0
   270fe:	d1f8      	bne.n	270f2 <out_func+0x1c>
   27100:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   27104:	68a3      	ldr	r3, [r4, #8]
   27106:	549d      	strb	r5, [r3, r2]
}
   27108:	2000      	movs	r0, #0
   2710a:	bd38      	pop	{r3, r4, r5, pc}

0002710c <cr_out_func>:
{
   2710c:	b538      	push	{r3, r4, r5, lr}
   2710e:	4605      	mov	r5, r0
   27110:	460c      	mov	r4, r1
	out_func(c, ctx);
   27112:	f7ff ffe0 	bl	270d6 <out_func>
	if (c == '\n') {
   27116:	2d0a      	cmp	r5, #10
   27118:	d103      	bne.n	27122 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   2711a:	4621      	mov	r1, r4
   2711c:	200d      	movs	r0, #13
   2711e:	f7ff ffda 	bl	270d6 <out_func>
}
   27122:	2000      	movs	r0, #0
   27124:	bd38      	pop	{r3, r4, r5, pc}

00027126 <read_str>:
{
   27126:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2712a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2712e:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   27130:	4640      	mov	r0, r8
{
   27132:	461f      	mov	r7, r3
   27134:	460c      	mov	r4, r1
   27136:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   27138:	f000 fb23 	bl	27782 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2713c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   27140:	9300      	str	r3, [sp, #0]
   27142:	b280      	uxth	r0, r0
   27144:	e9cd 8001 	strd	r8, r0, [sp, #4]
   27148:	463b      	mov	r3, r7
   2714a:	4632      	mov	r2, r6
   2714c:	4621      	mov	r1, r4
   2714e:	4628      	mov	r0, r5
   27150:	f001 ff15 	bl	28f7e <bt_gatt_attr_read>
}
   27154:	b004      	add	sp, #16
   27156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002715a <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   2715a:	2000      	movs	r0, #0
   2715c:	4770      	bx	lr

0002715e <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   2715e:	2200      	movs	r2, #0
   27160:	4611      	mov	r1, r2
   27162:	f7ed b841 	b.w	141e8 <settings_save_one>

00027166 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   27166:	4603      	mov	r3, r0
   27168:	b530      	push	{r4, r5, lr}
   2716a:	4608      	mov	r0, r1
	if (next) {
   2716c:	b10a      	cbz	r2, 27172 <settings_name_steq+0xc>
		*next = NULL;
   2716e:	2100      	movs	r1, #0
   27170:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   27172:	b163      	cbz	r3, 2718e <settings_name_steq+0x28>
   27174:	b190      	cbz	r0, 2719c <settings_name_steq+0x36>
   27176:	1e41      	subs	r1, r0, #1
   27178:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   2717a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2717e:	4604      	mov	r4, r0
   27180:	f810 3b01 	ldrb.w	r3, [r0], #1
   27184:	b15d      	cbz	r5, 2719e <settings_name_steq+0x38>
   27186:	429d      	cmp	r5, r3
   27188:	d101      	bne.n	2718e <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2718a:	2d3d      	cmp	r5, #61	; 0x3d
   2718c:	d1f5      	bne.n	2717a <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   2718e:	2000      	movs	r0, #0
   27190:	e004      	b.n	2719c <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   27192:	2b3d      	cmp	r3, #61	; 0x3d
   27194:	d008      	beq.n	271a8 <settings_name_steq+0x42>
   27196:	fab3 f083 	clz	r0, r3
   2719a:	0940      	lsrs	r0, r0, #5
}
   2719c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2719e:	2b2f      	cmp	r3, #47	; 0x2f
   271a0:	d1f7      	bne.n	27192 <settings_name_steq+0x2c>
		if (next) {
   271a2:	b10a      	cbz	r2, 271a8 <settings_name_steq+0x42>
			*next = name + 1;
   271a4:	3401      	adds	r4, #1
   271a6:	6014      	str	r4, [r2, #0]
		return 1;
   271a8:	2001      	movs	r0, #1
   271aa:	e7f7      	b.n	2719c <settings_name_steq+0x36>

000271ac <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   271ac:	b530      	push	{r4, r5, lr}
   271ae:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   271b0:	b109      	cbz	r1, 271b6 <settings_name_next+0xa>
		*next = NULL;
   271b2:	2200      	movs	r2, #0
   271b4:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   271b6:	b16b      	cbz	r3, 271d4 <settings_name_next+0x28>
   271b8:	461a      	mov	r2, r3
   271ba:	4614      	mov	r4, r2
   271bc:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   271be:	f812 5b01 	ldrb.w	r5, [r2], #1
   271c2:	b135      	cbz	r5, 271d2 <settings_name_next+0x26>
   271c4:	2d3d      	cmp	r5, #61	; 0x3d
   271c6:	d004      	beq.n	271d2 <settings_name_next+0x26>
   271c8:	2d2f      	cmp	r5, #47	; 0x2f
   271ca:	d1f6      	bne.n	271ba <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   271cc:	b109      	cbz	r1, 271d2 <settings_name_next+0x26>
			*next = name + 1;
   271ce:	3401      	adds	r4, #1
   271d0:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   271d2:	bd30      	pop	{r4, r5, pc}
		return 0;
   271d4:	4618      	mov	r0, r3
   271d6:	e7fc      	b.n	271d2 <settings_name_next+0x26>

000271d8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   271d8:	b538      	push	{r3, r4, r5, lr}
   271da:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   271dc:	42ab      	cmp	r3, r5
{
   271de:	4611      	mov	r1, r2
   271e0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   271e2:	d804      	bhi.n	271ee <_copy+0x16>
		(void)memcpy(to, from, from_len);
   271e4:	461a      	mov	r2, r3
   271e6:	f000 fb22 	bl	2782e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   271ea:	4620      	mov	r0, r4
   271ec:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   271ee:	2400      	movs	r4, #0
   271f0:	e7fb      	b.n	271ea <_copy+0x12>

000271f2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   271f2:	f000 bb27 	b.w	27844 <memset>

000271f6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   271f6:	09c3      	lsrs	r3, r0, #7
   271f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   271fc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27200:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27204:	b2c0      	uxtb	r0, r0
   27206:	4770      	bx	lr

00027208 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27208:	78cb      	ldrb	r3, [r1, #3]
   2720a:	7802      	ldrb	r2, [r0, #0]
   2720c:	4053      	eors	r3, r2
   2720e:	7003      	strb	r3, [r0, #0]
   27210:	884b      	ldrh	r3, [r1, #2]
   27212:	7842      	ldrb	r2, [r0, #1]
   27214:	4053      	eors	r3, r2
   27216:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27218:	680a      	ldr	r2, [r1, #0]
   2721a:	7883      	ldrb	r3, [r0, #2]
   2721c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27220:	7083      	strb	r3, [r0, #2]
   27222:	680a      	ldr	r2, [r1, #0]
   27224:	78c3      	ldrb	r3, [r0, #3]
   27226:	4053      	eors	r3, r2
   27228:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2722a:	79cb      	ldrb	r3, [r1, #7]
   2722c:	7902      	ldrb	r2, [r0, #4]
   2722e:	4053      	eors	r3, r2
   27230:	7103      	strb	r3, [r0, #4]
   27232:	88cb      	ldrh	r3, [r1, #6]
   27234:	7942      	ldrb	r2, [r0, #5]
   27236:	4053      	eors	r3, r2
   27238:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2723a:	684a      	ldr	r2, [r1, #4]
   2723c:	7983      	ldrb	r3, [r0, #6]
   2723e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27242:	7183      	strb	r3, [r0, #6]
   27244:	684a      	ldr	r2, [r1, #4]
   27246:	79c3      	ldrb	r3, [r0, #7]
   27248:	4053      	eors	r3, r2
   2724a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2724c:	7acb      	ldrb	r3, [r1, #11]
   2724e:	7a02      	ldrb	r2, [r0, #8]
   27250:	4053      	eors	r3, r2
   27252:	7203      	strb	r3, [r0, #8]
   27254:	7a42      	ldrb	r2, [r0, #9]
   27256:	894b      	ldrh	r3, [r1, #10]
   27258:	4053      	eors	r3, r2
   2725a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2725c:	688a      	ldr	r2, [r1, #8]
   2725e:	7a83      	ldrb	r3, [r0, #10]
   27260:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27264:	7283      	strb	r3, [r0, #10]
   27266:	688a      	ldr	r2, [r1, #8]
   27268:	7ac3      	ldrb	r3, [r0, #11]
   2726a:	4053      	eors	r3, r2
   2726c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2726e:	7bcb      	ldrb	r3, [r1, #15]
   27270:	7b02      	ldrb	r2, [r0, #12]
   27272:	4053      	eors	r3, r2
   27274:	7303      	strb	r3, [r0, #12]
   27276:	89cb      	ldrh	r3, [r1, #14]
   27278:	7b42      	ldrb	r2, [r0, #13]
   2727a:	4053      	eors	r3, r2
   2727c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2727e:	68ca      	ldr	r2, [r1, #12]
   27280:	7b83      	ldrb	r3, [r0, #14]
   27282:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27286:	7383      	strb	r3, [r0, #14]
   27288:	68ca      	ldr	r2, [r1, #12]
   2728a:	7bc3      	ldrb	r3, [r0, #15]
   2728c:	4053      	eors	r3, r2
   2728e:	73c3      	strb	r3, [r0, #15]
}
   27290:	4770      	bx	lr

00027292 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   27292:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27294:	7802      	ldrb	r2, [r0, #0]
   27296:	f88d 2000 	strb.w	r2, [sp]
   2729a:	7942      	ldrb	r2, [r0, #5]
   2729c:	f88d 2001 	strb.w	r2, [sp, #1]
   272a0:	7a82      	ldrb	r2, [r0, #10]
   272a2:	f88d 2002 	strb.w	r2, [sp, #2]
   272a6:	7bc2      	ldrb	r2, [r0, #15]
   272a8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   272ac:	7902      	ldrb	r2, [r0, #4]
   272ae:	f88d 2004 	strb.w	r2, [sp, #4]
   272b2:	7a42      	ldrb	r2, [r0, #9]
   272b4:	f88d 2005 	strb.w	r2, [sp, #5]
   272b8:	7b82      	ldrb	r2, [r0, #14]
   272ba:	f88d 2006 	strb.w	r2, [sp, #6]
   272be:	78c2      	ldrb	r2, [r0, #3]
   272c0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   272c4:	7a02      	ldrb	r2, [r0, #8]
   272c6:	f88d 2008 	strb.w	r2, [sp, #8]
   272ca:	7b42      	ldrb	r2, [r0, #13]
   272cc:	f88d 2009 	strb.w	r2, [sp, #9]
   272d0:	7882      	ldrb	r2, [r0, #2]
   272d2:	f88d 200a 	strb.w	r2, [sp, #10]
   272d6:	79c2      	ldrb	r2, [r0, #7]
   272d8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   272dc:	7b02      	ldrb	r2, [r0, #12]
   272de:	f88d 200c 	strb.w	r2, [sp, #12]
   272e2:	7842      	ldrb	r2, [r0, #1]
   272e4:	7ac3      	ldrb	r3, [r0, #11]
   272e6:	f88d 200d 	strb.w	r2, [sp, #13]
   272ea:	7982      	ldrb	r2, [r0, #6]
   272ec:	f88d 200e 	strb.w	r2, [sp, #14]
   272f0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   272f4:	2310      	movs	r3, #16
   272f6:	466a      	mov	r2, sp
   272f8:	4619      	mov	r1, r3
   272fa:	f7ff ff6d 	bl	271d8 <_copy>
}
   272fe:	b005      	add	sp, #20
   27300:	f85d fb04 	ldr.w	pc, [sp], #4

00027304 <mult_row_column>:
{
   27304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27306:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27308:	7808      	ldrb	r0, [r1, #0]
{
   2730a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2730c:	f7ff ff73 	bl	271f6 <_double_byte>
   27310:	4605      	mov	r5, r0
   27312:	7860      	ldrb	r0, [r4, #1]
   27314:	f7ff ff6f 	bl	271f6 <_double_byte>
   27318:	78a2      	ldrb	r2, [r4, #2]
   2731a:	7863      	ldrb	r3, [r4, #1]
   2731c:	4053      	eors	r3, r2
   2731e:	78e2      	ldrb	r2, [r4, #3]
   27320:	4053      	eors	r3, r2
   27322:	405d      	eors	r5, r3
   27324:	4045      	eors	r5, r0
   27326:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27328:	7860      	ldrb	r0, [r4, #1]
   2732a:	7827      	ldrb	r7, [r4, #0]
   2732c:	f7ff ff63 	bl	271f6 <_double_byte>
   27330:	4605      	mov	r5, r0
   27332:	78a0      	ldrb	r0, [r4, #2]
   27334:	f7ff ff5f 	bl	271f6 <_double_byte>
   27338:	78a3      	ldrb	r3, [r4, #2]
   2733a:	405f      	eors	r7, r3
   2733c:	78e3      	ldrb	r3, [r4, #3]
   2733e:	405f      	eors	r7, r3
   27340:	407d      	eors	r5, r7
   27342:	4045      	eors	r5, r0
   27344:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27346:	78a0      	ldrb	r0, [r4, #2]
   27348:	7865      	ldrb	r5, [r4, #1]
   2734a:	7827      	ldrb	r7, [r4, #0]
   2734c:	f7ff ff53 	bl	271f6 <_double_byte>
   27350:	406f      	eors	r7, r5
   27352:	4605      	mov	r5, r0
   27354:	78e0      	ldrb	r0, [r4, #3]
   27356:	f7ff ff4e 	bl	271f6 <_double_byte>
   2735a:	78e3      	ldrb	r3, [r4, #3]
   2735c:	405f      	eors	r7, r3
   2735e:	407d      	eors	r5, r7
   27360:	4045      	eors	r5, r0
   27362:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27364:	7820      	ldrb	r0, [r4, #0]
   27366:	f7ff ff46 	bl	271f6 <_double_byte>
   2736a:	7863      	ldrb	r3, [r4, #1]
   2736c:	7825      	ldrb	r5, [r4, #0]
   2736e:	405d      	eors	r5, r3
   27370:	78a3      	ldrb	r3, [r4, #2]
   27372:	405d      	eors	r5, r3
   27374:	4045      	eors	r5, r0
   27376:	78e0      	ldrb	r0, [r4, #3]
   27378:	f7ff ff3d 	bl	271f6 <_double_byte>
   2737c:	b2ed      	uxtb	r5, r5
   2737e:	4045      	eors	r5, r0
   27380:	70f5      	strb	r5, [r6, #3]
}
   27382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027384 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   27384:	b570      	push	{r4, r5, r6, lr}
   27386:	4614      	mov	r4, r2
   27388:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2738a:	4605      	mov	r5, r0
   2738c:	2800      	cmp	r0, #0
   2738e:	d049      	beq.n	27424 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   27390:	2900      	cmp	r1, #0
   27392:	d049      	beq.n	27428 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   27394:	2a00      	cmp	r2, #0
   27396:	d049      	beq.n	2742c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   27398:	2310      	movs	r3, #16
   2739a:	460a      	mov	r2, r1
   2739c:	4668      	mov	r0, sp
   2739e:	4619      	mov	r1, r3
   273a0:	f7ff ff1a 	bl	271d8 <_copy>
	add_round_key(state, s->words);
   273a4:	4621      	mov	r1, r4
   273a6:	4668      	mov	r0, sp
   273a8:	f7ff ff2e 	bl	27208 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   273ac:	3410      	adds	r4, #16
   273ae:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   273b2:	4668      	mov	r0, sp
   273b4:	f7ed f892 	bl	144dc <sub_bytes>
		shift_rows(state);
   273b8:	4668      	mov	r0, sp
   273ba:	f7ff ff6a 	bl	27292 <shift_rows>
	mult_row_column(t, s);
   273be:	4669      	mov	r1, sp
   273c0:	a804      	add	r0, sp, #16
   273c2:	f7ff ff9f 	bl	27304 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   273c6:	a901      	add	r1, sp, #4
   273c8:	a805      	add	r0, sp, #20
   273ca:	f7ff ff9b 	bl	27304 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   273ce:	a902      	add	r1, sp, #8
   273d0:	a806      	add	r0, sp, #24
   273d2:	f7ff ff97 	bl	27304 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   273d6:	a903      	add	r1, sp, #12
   273d8:	a807      	add	r0, sp, #28
   273da:	f7ff ff93 	bl	27304 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   273de:	2310      	movs	r3, #16
   273e0:	4619      	mov	r1, r3
   273e2:	eb0d 0203 	add.w	r2, sp, r3
   273e6:	4668      	mov	r0, sp
   273e8:	f7ff fef6 	bl	271d8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   273ec:	4621      	mov	r1, r4
   273ee:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   273f0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   273f2:	f7ff ff09 	bl	27208 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   273f6:	42a6      	cmp	r6, r4
   273f8:	d1db      	bne.n	273b2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   273fa:	f7ed f86f 	bl	144dc <sub_bytes>
	shift_rows(state);
   273fe:	4668      	mov	r0, sp
   27400:	f7ff ff47 	bl	27292 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   27404:	4631      	mov	r1, r6
   27406:	4668      	mov	r0, sp
   27408:	f7ff fefe 	bl	27208 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2740c:	2310      	movs	r3, #16
   2740e:	4619      	mov	r1, r3
   27410:	466a      	mov	r2, sp
   27412:	4628      	mov	r0, r5
   27414:	f7ff fee0 	bl	271d8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   27418:	4668      	mov	r0, sp
   2741a:	2210      	movs	r2, #16
   2741c:	2100      	movs	r1, #0
   2741e:	f7ff fee8 	bl	271f2 <_set>

	return TC_CRYPTO_SUCCESS;
   27422:	2001      	movs	r0, #1
}
   27424:	b008      	add	sp, #32
   27426:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27428:	4608      	mov	r0, r1
   2742a:	e7fb      	b.n	27424 <tc_aes_encrypt+0xa0>
   2742c:	4610      	mov	r0, r2
   2742e:	e7f9      	b.n	27424 <tc_aes_encrypt+0xa0>

00027430 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   27430:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27432:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   27434:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27436:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2743a:	2b00      	cmp	r3, #0
   2743c:	bfb4      	ite	lt
   2743e:	2387      	movlt	r3, #135	; 0x87
   27440:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   27442:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27446:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2744a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2744c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   27450:	d002      	beq.n	27458 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   27452:	7813      	ldrb	r3, [r2, #0]
   27454:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   27456:	e7f4      	b.n	27442 <gf_double+0x12>
	}
}
   27458:	bd10      	pop	{r4, pc}

0002745a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2745a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2745c:	b120      	cbz	r0, 27468 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2745e:	2258      	movs	r2, #88	; 0x58
   27460:	2100      	movs	r1, #0
   27462:	f7ff fec6 	bl	271f2 <_set>
   27466:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   27468:	bd08      	pop	{r3, pc}

0002746a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2746a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2746c:	4604      	mov	r4, r0
   2746e:	b188      	cbz	r0, 27494 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27470:	2210      	movs	r2, #16
   27472:	2100      	movs	r1, #0
   27474:	f7ff febd 	bl	271f2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   27478:	2210      	movs	r2, #16
   2747a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2747e:	2100      	movs	r1, #0
   27480:	f7ff feb7 	bl	271f2 <_set>
	s->leftover_offset = 0;
   27484:	2300      	movs	r3, #0
   27486:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   27488:	2200      	movs	r2, #0
   2748a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2748e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   27492:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   27494:	bd10      	pop	{r4, pc}

00027496 <tc_cmac_setup>:
{
   27496:	b570      	push	{r4, r5, r6, lr}
   27498:	460d      	mov	r5, r1
   2749a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2749c:	4604      	mov	r4, r0
   2749e:	b310      	cbz	r0, 274e6 <tc_cmac_setup+0x50>
   274a0:	b311      	cbz	r1, 274e8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   274a2:	2258      	movs	r2, #88	; 0x58
   274a4:	2100      	movs	r1, #0
   274a6:	f7ff fea4 	bl	271f2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   274aa:	4629      	mov	r1, r5
	s->sched = sched;
   274ac:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   274ae:	4630      	mov	r0, r6
   274b0:	f7ed f820 	bl	144f4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   274b4:	2210      	movs	r2, #16
   274b6:	2100      	movs	r1, #0
   274b8:	4620      	mov	r0, r4
   274ba:	f7ff fe9a 	bl	271f2 <_set>
	gf_double (s->K1, s->iv);
   274be:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   274c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   274c4:	4621      	mov	r1, r4
   274c6:	4620      	mov	r0, r4
   274c8:	f7ff ff5c 	bl	27384 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   274cc:	4621      	mov	r1, r4
   274ce:	4628      	mov	r0, r5
   274d0:	f7ff ffae 	bl	27430 <gf_double>
	gf_double (s->K2, s->K1);
   274d4:	4629      	mov	r1, r5
   274d6:	f104 0020 	add.w	r0, r4, #32
   274da:	f7ff ffa9 	bl	27430 <gf_double>
	tc_cmac_init(s);
   274de:	4620      	mov	r0, r4
   274e0:	f7ff ffc3 	bl	2746a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   274e4:	2001      	movs	r0, #1
}
   274e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   274e8:	4608      	mov	r0, r1
   274ea:	e7fc      	b.n	274e6 <tc_cmac_setup+0x50>

000274ec <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   274ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274f0:	460d      	mov	r5, r1
   274f2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   274f4:	4604      	mov	r4, r0
   274f6:	2800      	cmp	r0, #0
   274f8:	d061      	beq.n	275be <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   274fa:	b912      	cbnz	r2, 27502 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   274fc:	2001      	movs	r0, #1
}
   274fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   27502:	2900      	cmp	r1, #0
   27504:	d05b      	beq.n	275be <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   27506:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2750a:	ea53 0102 	orrs.w	r1, r3, r2
   2750e:	d056      	beq.n	275be <tc_cmac_update+0xd2>
	s->countdown--;
   27510:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   27512:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   27516:	f142 32ff 	adc.w	r2, r2, #4294967295
   2751a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2751e:	f1b8 0f00 	cmp.w	r8, #0
   27522:	d02a      	beq.n	2757a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27524:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27528:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2752c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2752e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   27530:	d208      	bcs.n	27544 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27532:	462a      	mov	r2, r5
   27534:	4633      	mov	r3, r6
   27536:	4631      	mov	r1, r6
   27538:	f7ff fe4e 	bl	271d8 <_copy>
			s->leftover_offset += data_length;
   2753c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2753e:	4432      	add	r2, r6
   27540:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   27542:	e7db      	b.n	274fc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   27544:	463b      	mov	r3, r7
   27546:	462a      	mov	r2, r5
   27548:	4639      	mov	r1, r7
   2754a:	f7ff fe45 	bl	271d8 <_copy>
		data_length -= remaining_space;
   2754e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   27550:	2300      	movs	r3, #0
   27552:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   27554:	4446      	add	r6, r8
		data += remaining_space;
   27556:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27558:	1e63      	subs	r3, r4, #1
   2755a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2755e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27562:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27566:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   27568:	ea82 0200 	eor.w	r2, r2, r0
   2756c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2756e:	d1f6      	bne.n	2755e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27570:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27572:	4621      	mov	r1, r4
   27574:	4620      	mov	r0, r4
   27576:	f7ff ff05 	bl	27384 <tc_aes_encrypt>
   2757a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2757e:	2e10      	cmp	r6, #16
   27580:	d80a      	bhi.n	27598 <tc_cmac_update+0xac>
	if (data_length > 0) {
   27582:	2e00      	cmp	r6, #0
   27584:	d0ba      	beq.n	274fc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   27586:	4633      	mov	r3, r6
   27588:	462a      	mov	r2, r5
   2758a:	4631      	mov	r1, r6
   2758c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27590:	f7ff fe22 	bl	271d8 <_copy>
		s->leftover_offset = data_length;
   27594:	6466      	str	r6, [r4, #68]	; 0x44
   27596:	e7b1      	b.n	274fc <tc_cmac_update+0x10>
   27598:	1e63      	subs	r3, r4, #1
   2759a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2759c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   275a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   275a4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   275a6:	ea82 0200 	eor.w	r2, r2, r0
   275aa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   275ac:	d1f6      	bne.n	2759c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   275ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   275b0:	4621      	mov	r1, r4
   275b2:	4620      	mov	r0, r4
   275b4:	f7ff fee6 	bl	27384 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   275b8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   275ba:	3e10      	subs	r6, #16
   275bc:	e7df      	b.n	2757e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   275be:	2000      	movs	r0, #0
   275c0:	e79d      	b.n	274fe <tc_cmac_update+0x12>

000275c2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   275c2:	b570      	push	{r4, r5, r6, lr}
   275c4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   275c6:	4605      	mov	r5, r0
   275c8:	b1e8      	cbz	r0, 27606 <tc_cmac_final+0x44>
   275ca:	b369      	cbz	r1, 27628 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   275cc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   275ce:	2a10      	cmp	r2, #16
   275d0:	d11a      	bne.n	27608 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   275d2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   275d4:	1e63      	subs	r3, r4, #1
   275d6:	3901      	subs	r1, #1
   275d8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   275dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   275e0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   275e4:	4072      	eors	r2, r6
   275e6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   275ea:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   275ec:	ea82 0206 	eor.w	r2, r2, r6
   275f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   275f2:	d1f3      	bne.n	275dc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   275f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   275f6:	4621      	mov	r1, r4
   275f8:	4628      	mov	r0, r5
   275fa:	f7ff fec3 	bl	27384 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   275fe:	4620      	mov	r0, r4
   27600:	f7ff ff2b 	bl	2745a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27604:	2001      	movs	r0, #1
}
   27606:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27608:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2760c:	2100      	movs	r1, #0
   2760e:	f1c2 0210 	rsb	r2, r2, #16
   27612:	4420      	add	r0, r4
   27614:	f7ff fded 	bl	271f2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27618:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2761a:	4423      	add	r3, r4
   2761c:	2280      	movs	r2, #128	; 0x80
   2761e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27622:	f104 0120 	add.w	r1, r4, #32
   27626:	e7d5      	b.n	275d4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   27628:	4608      	mov	r0, r1
   2762a:	e7ec      	b.n	27606 <tc_cmac_final+0x44>

0002762c <abort_function>:
{
   2762c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2762e:	2000      	movs	r0, #0
   27630:	f7eb ff18 	bl	13464 <sys_reboot>

00027634 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27634:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27636:	6800      	ldr	r0, [r0, #0]
   27638:	f7ed b896 	b.w	14768 <z_arm_fatal_error>

0002763c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2763c:	2100      	movs	r1, #0
   2763e:	2001      	movs	r0, #1
   27640:	f7ed b892 	b.w	14768 <z_arm_fatal_error>

00027644 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   27644:	b508      	push	{r3, lr}
	handler();
   27646:	f7ed f94f 	bl	148e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2764a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2764e:	f7ed ba07 	b.w	14a60 <z_arm_exc_exit>

00027652 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   27652:	2300      	movs	r3, #0
   27654:	f7ec b996 	b.w	13984 <z_impl_z_log_msg_static_create>

00027658 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   27658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2765c:	4607      	mov	r7, r0
   2765e:	4688      	mov	r8, r1
	register const char *s = nptr;
   27660:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   27662:	4621      	mov	r1, r4
   27664:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   27668:	2b20      	cmp	r3, #32
   2766a:	d0fa      	beq.n	27662 <strtoul+0xa>
   2766c:	f1a3 0009 	sub.w	r0, r3, #9
   27670:	2804      	cmp	r0, #4
   27672:	d9f6      	bls.n	27662 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   27674:	2b2d      	cmp	r3, #45	; 0x2d
   27676:	d12f      	bne.n	276d8 <strtoul+0x80>
		neg = 1;
		c = *s++;
   27678:	784b      	ldrb	r3, [r1, #1]
   2767a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2767c:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   27680:	2a00      	cmp	r2, #0
   27682:	d05e      	beq.n	27742 <strtoul+0xea>
   27684:	2a10      	cmp	r2, #16
   27686:	d109      	bne.n	2769c <strtoul+0x44>
   27688:	2b30      	cmp	r3, #48	; 0x30
   2768a:	d107      	bne.n	2769c <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2768c:	7823      	ldrb	r3, [r4, #0]
   2768e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27692:	2b58      	cmp	r3, #88	; 0x58
   27694:	d150      	bne.n	27738 <strtoul+0xe0>
		c = s[1];
   27696:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   27698:	2210      	movs	r2, #16
		s += 2;
   2769a:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2769c:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   276a0:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   276a2:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   276a6:	fb02 fe01 	mul.w	lr, r2, r1
   276aa:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   276ae:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   276b0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   276b4:	2d09      	cmp	r5, #9
   276b6:	d816      	bhi.n	276e6 <strtoul+0x8e>
			c -= '0';
   276b8:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   276ba:	429a      	cmp	r2, r3
   276bc:	dd23      	ble.n	27706 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   276be:	2e00      	cmp	r6, #0
   276c0:	db1e      	blt.n	27700 <strtoul+0xa8>
   276c2:	4288      	cmp	r0, r1
   276c4:	d81c      	bhi.n	27700 <strtoul+0xa8>
   276c6:	d101      	bne.n	276cc <strtoul+0x74>
   276c8:	4573      	cmp	r3, lr
   276ca:	dc19      	bgt.n	27700 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   276cc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   276d0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   276d2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   276d6:	e7eb      	b.n	276b0 <strtoul+0x58>
	} else if (c == '+') {
   276d8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   276da:	bf04      	itt	eq
   276dc:	784b      	ldrbeq	r3, [r1, #1]
   276de:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   276e0:	f04f 0c00 	mov.w	ip, #0
   276e4:	e7cc      	b.n	27680 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   276e6:	f043 0520 	orr.w	r5, r3, #32
   276ea:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   276ec:	2d19      	cmp	r5, #25
   276ee:	d80a      	bhi.n	27706 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   276f0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   276f4:	2d1a      	cmp	r5, #26
   276f6:	bf34      	ite	cc
   276f8:	2537      	movcc	r5, #55	; 0x37
   276fa:	2557      	movcs	r5, #87	; 0x57
   276fc:	1b5b      	subs	r3, r3, r5
   276fe:	e7dc      	b.n	276ba <strtoul+0x62>
			any = -1;
   27700:	f04f 36ff 	mov.w	r6, #4294967295
   27704:	e7e5      	b.n	276d2 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   27706:	2e00      	cmp	r6, #0
   27708:	da0a      	bge.n	27720 <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2770a:	f7f9 fcb5 	bl	21078 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2770e:	2322      	movs	r3, #34	; 0x22
   27710:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   27712:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   27716:	f1b8 0f00 	cmp.w	r8, #0
   2771a:	d109      	bne.n	27730 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   27720:	f1bc 0f00 	cmp.w	ip, #0
   27724:	d000      	beq.n	27728 <strtoul+0xd0>
		acc = -acc;
   27726:	4240      	negs	r0, r0
	if (endptr != NULL) {
   27728:	f1b8 0f00 	cmp.w	r8, #0
   2772c:	d0f6      	beq.n	2771c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2772e:	b106      	cbz	r6, 27732 <strtoul+0xda>
   27730:	1e67      	subs	r7, r4, #1
   27732:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   27736:	e7f1      	b.n	2771c <strtoul+0xc4>
	if (base == 0) {
   27738:	2330      	movs	r3, #48	; 0x30
   2773a:	2a00      	cmp	r2, #0
   2773c:	d1ae      	bne.n	2769c <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2773e:	2208      	movs	r2, #8
   27740:	e7ac      	b.n	2769c <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   27742:	2b30      	cmp	r3, #48	; 0x30
   27744:	d0a2      	beq.n	2768c <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   27746:	220a      	movs	r2, #10
   27748:	e7a8      	b.n	2769c <strtoul+0x44>

0002774a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2774a:	3901      	subs	r1, #1
   2774c:	4603      	mov	r3, r0
   2774e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   27752:	b90a      	cbnz	r2, 27758 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   27754:	701a      	strb	r2, [r3, #0]

	return dest;
}
   27756:	4770      	bx	lr
		*d = *s;
   27758:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2775c:	e7f7      	b.n	2774e <strcpy+0x4>

0002775e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   2775e:	b570      	push	{r4, r5, r6, lr}
   27760:	4605      	mov	r5, r0
   27762:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   27764:	b142      	cbz	r2, 27778 <strncpy+0x1a>
   27766:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   2776a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   2776c:	b92c      	cbnz	r4, 2777a <strncpy+0x1c>
   2776e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   27770:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   27774:	429a      	cmp	r2, r3
   27776:	d1fb      	bne.n	27770 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   27778:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2777a:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   2777e:	4632      	mov	r2, r6
   27780:	e7ef      	b.n	27762 <strncpy+0x4>

00027782 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   27782:	4603      	mov	r3, r0
	size_t n = 0;
   27784:	2000      	movs	r0, #0

	while (*s != '\0') {
   27786:	5c1a      	ldrb	r2, [r3, r0]
   27788:	b902      	cbnz	r2, 2778c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2778a:	4770      	bx	lr
		n++;
   2778c:	3001      	adds	r0, #1
   2778e:	e7fa      	b.n	27786 <strlen+0x4>

00027790 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   27790:	4603      	mov	r3, r0
	size_t n = 0;
   27792:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   27794:	5c1a      	ldrb	r2, [r3, r0]
   27796:	b10a      	cbz	r2, 2779c <strnlen+0xc>
   27798:	4288      	cmp	r0, r1
   2779a:	d100      	bne.n	2779e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2779c:	4770      	bx	lr
		n++;
   2779e:	3001      	adds	r0, #1
   277a0:	e7f8      	b.n	27794 <strnlen+0x4>

000277a2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   277a2:	1e43      	subs	r3, r0, #1
   277a4:	3901      	subs	r1, #1
   277a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   277aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   277ae:	4282      	cmp	r2, r0
   277b0:	d101      	bne.n	277b6 <strcmp+0x14>
   277b2:	2a00      	cmp	r2, #0
   277b4:	d1f7      	bne.n	277a6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   277b6:	1a10      	subs	r0, r2, r0
   277b8:	4770      	bx	lr

000277ba <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   277ba:	b510      	push	{r4, lr}
   277bc:	3901      	subs	r1, #1
   277be:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   277c0:	4282      	cmp	r2, r0
   277c2:	d009      	beq.n	277d8 <strncmp+0x1e>
   277c4:	7803      	ldrb	r3, [r0, #0]
   277c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   277ca:	42a3      	cmp	r3, r4
   277cc:	d100      	bne.n	277d0 <strncmp+0x16>
   277ce:	b90b      	cbnz	r3, 277d4 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   277d0:	1b18      	subs	r0, r3, r4
   277d2:	e002      	b.n	277da <strncmp+0x20>
		s1++;
   277d4:	3001      	adds	r0, #1
		n--;
   277d6:	e7f3      	b.n	277c0 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   277d8:	2000      	movs	r0, #0
}
   277da:	bd10      	pop	{r4, pc}

000277dc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   277dc:	b510      	push	{r4, lr}
   277de:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   277e0:	b15a      	cbz	r2, 277fa <memcmp+0x1e>
   277e2:	3901      	subs	r1, #1
   277e4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   277e6:	f813 0b01 	ldrb.w	r0, [r3], #1
   277ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   277ee:	42a3      	cmp	r3, r4
   277f0:	d001      	beq.n	277f6 <memcmp+0x1a>
   277f2:	4290      	cmp	r0, r2
   277f4:	d0f7      	beq.n	277e6 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   277f6:	1a80      	subs	r0, r0, r2
}
   277f8:	bd10      	pop	{r4, pc}
		return 0;
   277fa:	4610      	mov	r0, r2
   277fc:	e7fc      	b.n	277f8 <memcmp+0x1c>

000277fe <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   277fe:	1a43      	subs	r3, r0, r1
   27800:	4293      	cmp	r3, r2
{
   27802:	b510      	push	{r4, lr}
   27804:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   27808:	d308      	bcc.n	2781c <memmove+0x1e>
   2780a:	3901      	subs	r1, #1
	char *dest = d;
   2780c:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2780e:	429a      	cmp	r2, r3
   27810:	d007      	beq.n	27822 <memmove+0x24>
			*dest = *src;
   27812:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   27816:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2781a:	e7f8      	b.n	2780e <memmove+0x10>
   2781c:	440a      	add	r2, r1
		while (n > 0) {
   2781e:	428a      	cmp	r2, r1
   27820:	d100      	bne.n	27824 <memmove+0x26>
		}
	}

	return d;
}
   27822:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   27824:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27828:	f803 4d01 	strb.w	r4, [r3, #-1]!
   2782c:	e7f7      	b.n	2781e <memmove+0x20>

0002782e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2782e:	b510      	push	{r4, lr}
   27830:	1e43      	subs	r3, r0, #1
   27832:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   27834:	4291      	cmp	r1, r2
   27836:	d100      	bne.n	2783a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   27838:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2783a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2783e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   27842:	e7f7      	b.n	27834 <memcpy+0x6>

00027844 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   27844:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   27846:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   27848:	4603      	mov	r3, r0
	while (n > 0) {
   2784a:	4293      	cmp	r3, r2
   2784c:	d100      	bne.n	27850 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2784e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   27850:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27854:	e7f9      	b.n	2784a <memset+0x6>

00027856 <_stdout_hook_default>:
}
   27856:	f04f 30ff 	mov.w	r0, #4294967295
   2785a:	4770      	bx	lr

0002785c <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   2785c:	f7ed bd34 	b.w	152c8 <z_impl_zephyr_fputc>

00027860 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   27860:	2806      	cmp	r0, #6
   27862:	d108      	bne.n	27876 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   27864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27868:	2201      	movs	r2, #1
   2786a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2786e:	f3bf 8f4f 	dsb	sy
        __WFE();
   27872:	bf20      	wfe
    while (true)
   27874:	e7fd      	b.n	27872 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27876:	4770      	bx	lr

00027878 <pm_state_exit_post_ops>:
   27878:	2300      	movs	r3, #0
   2787a:	f383 8811 	msr	BASEPRI, r3
   2787e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27882:	4770      	bx	lr

00027884 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   27884:	b530      	push	{r4, r5, lr}
   27886:	b085      	sub	sp, #20
   27888:	4604      	mov	r4, r0
   2788a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2788c:	4668      	mov	r0, sp
   2788e:	2203      	movs	r2, #3
   27890:	f7ff ffcd 	bl	2782e <memcpy>
	(void)memset(res + 3, 0, 13);
   27894:	220d      	movs	r2, #13
   27896:	2100      	movs	r1, #0
   27898:	f10d 0003 	add.w	r0, sp, #3
   2789c:	f7ff ffd2 	bl	27844 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   278a0:	4620      	mov	r0, r4
   278a2:	466a      	mov	r2, sp
   278a4:	4669      	mov	r1, sp
   278a6:	f002 fc85 	bl	2a1b4 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   278aa:	4604      	mov	r4, r0
   278ac:	b920      	cbnz	r0, 278b8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   278ae:	2203      	movs	r2, #3
   278b0:	4669      	mov	r1, sp
   278b2:	4628      	mov	r0, r5
   278b4:	f7ff ffbb 	bl	2782e <memcpy>

	return 0;
}
   278b8:	4620      	mov	r0, r4
   278ba:	b005      	add	sp, #20
   278bc:	bd30      	pop	{r4, r5, pc}

000278be <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   278be:	b513      	push	{r0, r1, r4, lr}
   278c0:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   278c2:	aa01      	add	r2, sp, #4
   278c4:	3103      	adds	r1, #3
   278c6:	f7ff ffdd 	bl	27884 <ah>
	if (err) {
   278ca:	b948      	cbnz	r0, 278e0 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   278cc:	2203      	movs	r2, #3
   278ce:	a901      	add	r1, sp, #4
   278d0:	4620      	mov	r0, r4
   278d2:	f7ff ff83 	bl	277dc <memcmp>
   278d6:	fab0 f080 	clz	r0, r0
   278da:	0940      	lsrs	r0, r0, #5
}
   278dc:	b002      	add	sp, #8
   278de:	bd10      	pop	{r4, pc}
		return false;
   278e0:	2000      	movs	r0, #0
   278e2:	e7fb      	b.n	278dc <bt_rpa_irk_matches+0x1e>

000278e4 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   278e4:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   278e6:	1cce      	adds	r6, r1, #3
{
   278e8:	4605      	mov	r5, r0
   278ea:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   278ec:	4630      	mov	r0, r6
   278ee:	2103      	movs	r1, #3
   278f0:	f7f8 f928 	bl	1fb44 <bt_rand>
	if (err) {
   278f4:	b960      	cbnz	r0, 27910 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   278f6:	7963      	ldrb	r3, [r4, #5]
   278f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   278fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27900:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   27902:	4622      	mov	r2, r4
   27904:	4631      	mov	r1, r6
   27906:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   27908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2790c:	f7ff bfba 	b.w	27884 <ah>
}
   27910:	bd70      	pop	{r4, r5, r6, pc}

00027912 <z_log_msg_static_create.constprop.0>:
   27912:	2300      	movs	r3, #0
   27914:	f7ec b836 	b.w	13984 <z_impl_z_log_msg_static_create>

00027918 <bt_settings_decode_key>:
{
   27918:	b570      	push	{r4, r5, r6, lr}
   2791a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2791c:	2100      	movs	r1, #0
{
   2791e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   27920:	f7ff fc44 	bl	271ac <settings_name_next>
   27924:	280d      	cmp	r0, #13
   27926:	d118      	bne.n	2795a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   27928:	7b23      	ldrb	r3, [r4, #12]
   2792a:	2b30      	cmp	r3, #48	; 0x30
   2792c:	d111      	bne.n	27952 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2792e:	2300      	movs	r3, #0
   27930:	702b      	strb	r3, [r5, #0]
   27932:	f104 060c 	add.w	r6, r4, #12
   27936:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   27938:	462a      	mov	r2, r5
   2793a:	4620      	mov	r0, r4
   2793c:	2301      	movs	r3, #1
   2793e:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   27940:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   27942:	f7fe fdd8 	bl	264f6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   27946:	42b4      	cmp	r4, r6
   27948:	f105 35ff 	add.w	r5, r5, #4294967295
   2794c:	d1f4      	bne.n	27938 <bt_settings_decode_key+0x20>
	return 0;
   2794e:	2000      	movs	r0, #0
}
   27950:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   27952:	2b31      	cmp	r3, #49	; 0x31
   27954:	d101      	bne.n	2795a <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   27956:	2301      	movs	r3, #1
   27958:	e7ea      	b.n	27930 <bt_settings_decode_key+0x18>
		return -EINVAL;
   2795a:	f06f 0015 	mvn.w	r0, #21
   2795e:	e7f7      	b.n	27950 <bt_settings_decode_key+0x38>

00027960 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   27960:	b510      	push	{r4, lr}
   27962:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   27964:	7801      	ldrb	r1, [r0, #0]
   27966:	7822      	ldrb	r2, [r4, #0]
   27968:	428a      	cmp	r2, r1
{
   2796a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2796c:	d00f      	beq.n	2798e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2796e:	4669      	mov	r1, sp
   27970:	f7ed ff30 	bl	157d4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   27974:	a905      	add	r1, sp, #20
   27976:	4620      	mov	r0, r4
   27978:	f7ed ff2c 	bl	157d4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2797c:	2210      	movs	r2, #16
   2797e:	f10d 0115 	add.w	r1, sp, #21
   27982:	f10d 0001 	add.w	r0, sp, #1
   27986:	f7ff ff29 	bl	277dc <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2798a:	b00a      	add	sp, #40	; 0x28
   2798c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2798e:	2a01      	cmp	r2, #1
   27990:	d006      	beq.n	279a0 <bt_uuid_cmp+0x40>
   27992:	2a02      	cmp	r2, #2
   27994:	d007      	beq.n	279a6 <bt_uuid_cmp+0x46>
   27996:	b972      	cbnz	r2, 279b6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   27998:	8840      	ldrh	r0, [r0, #2]
   2799a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2799c:	1ac0      	subs	r0, r0, r3
   2799e:	e7f4      	b.n	2798a <bt_uuid_cmp+0x2a>
   279a0:	6840      	ldr	r0, [r0, #4]
   279a2:	6863      	ldr	r3, [r4, #4]
   279a4:	e7fa      	b.n	2799c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   279a6:	2210      	movs	r2, #16
   279a8:	1c61      	adds	r1, r4, #1
   279aa:	3001      	adds	r0, #1
}
   279ac:	b00a      	add	sp, #40	; 0x28
   279ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   279b2:	f7ff bf13 	b.w	277dc <memcmp>
	switch (u1->type) {
   279b6:	f06f 0015 	mvn.w	r0, #21
   279ba:	e7e6      	b.n	2798a <bt_uuid_cmp+0x2a>

000279bc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   279bc:	2a04      	cmp	r2, #4
{
   279be:	b510      	push	{r4, lr}
	switch (data_len) {
   279c0:	d00a      	beq.n	279d8 <bt_uuid_create+0x1c>
   279c2:	2a10      	cmp	r2, #16
   279c4:	d00d      	beq.n	279e2 <bt_uuid_create+0x26>
   279c6:	2a02      	cmp	r2, #2
   279c8:	f04f 0300 	mov.w	r3, #0
   279cc:	d10f      	bne.n	279ee <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   279ce:	7003      	strb	r3, [r0, #0]
   279d0:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   279d2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   279d4:	2001      	movs	r0, #1
}
   279d6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   279d8:	2301      	movs	r3, #1
   279da:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   279dc:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   279de:	6042      	str	r2, [r0, #4]
		break;
   279e0:	e7f8      	b.n	279d4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   279e2:	2302      	movs	r3, #2
   279e4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   279e8:	f7ff ff21 	bl	2782e <memcpy>
		break;
   279ec:	e7f2      	b.n	279d4 <bt_uuid_create+0x18>
	switch (data_len) {
   279ee:	4618      	mov	r0, r3
   279f0:	e7f1      	b.n	279d6 <bt_uuid_create+0x1a>

000279f2 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   279f2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   279f4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   279f6:	2106      	movs	r1, #6
{
   279f8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   279fa:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   279fe:	f7f8 f8a1 	bl	1fb44 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   27a02:	b918      	cbnz	r0, 27a0c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   27a04:	79a3      	ldrb	r3, [r4, #6]
   27a06:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27a0a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   27a0c:	bd10      	pop	{r4, pc}

00027a0e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   27a0e:	280f      	cmp	r0, #15
   27a10:	d806      	bhi.n	27a20 <bt_hci_evt_get_flags+0x12>
   27a12:	280d      	cmp	r0, #13
   27a14:	d80b      	bhi.n	27a2e <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   27a16:	2805      	cmp	r0, #5
   27a18:	bf14      	ite	ne
   27a1a:	2002      	movne	r0, #2
   27a1c:	2003      	moveq	r0, #3
   27a1e:	4770      	bx	lr
	switch (evt) {
   27a20:	2813      	cmp	r0, #19
   27a22:	d004      	beq.n	27a2e <bt_hci_evt_get_flags+0x20>
   27a24:	281a      	cmp	r0, #26
   27a26:	bf14      	ite	ne
   27a28:	2002      	movne	r0, #2
   27a2a:	2001      	moveq	r0, #1
   27a2c:	4770      	bx	lr
   27a2e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   27a30:	4770      	bx	lr

00027a32 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   27a32:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   27a36:	b193      	cbz	r3, 27a5e <update_sec_level+0x2c>
   27a38:	7b5a      	ldrb	r2, [r3, #13]
   27a3a:	07d1      	lsls	r1, r2, #31
   27a3c:	d50f      	bpl.n	27a5e <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   27a3e:	06d2      	lsls	r2, r2, #27
   27a40:	d50b      	bpl.n	27a5a <update_sec_level+0x28>
   27a42:	7b1b      	ldrb	r3, [r3, #12]
   27a44:	2b10      	cmp	r3, #16
   27a46:	d108      	bne.n	27a5a <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   27a48:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   27a4a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   27a4c:	7a82      	ldrb	r2, [r0, #10]
   27a4e:	7a40      	ldrb	r0, [r0, #9]
}
   27a50:	4282      	cmp	r2, r0
   27a52:	bf8c      	ite	hi
   27a54:	2000      	movhi	r0, #0
   27a56:	2001      	movls	r0, #1
   27a58:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   27a5a:	2303      	movs	r3, #3
   27a5c:	e7f5      	b.n	27a4a <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   27a5e:	2302      	movs	r3, #2
   27a60:	e7f3      	b.n	27a4a <update_sec_level+0x18>

00027a62 <hci_vendor_event>:
}
   27a62:	4770      	bx	lr

00027a64 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   27a64:	2207      	movs	r2, #7
   27a66:	f7ff bee2 	b.w	2782e <memcpy>

00027a6a <atomic_or>:
{
   27a6a:	4603      	mov	r3, r0
}
   27a6c:	f3bf 8f5b 	dmb	ish
   27a70:	e853 0f00 	ldrex	r0, [r3]
   27a74:	ea40 0201 	orr.w	r2, r0, r1
   27a78:	e843 2c00 	strex	ip, r2, [r3]
   27a7c:	f1bc 0f00 	cmp.w	ip, #0
   27a80:	d1f6      	bne.n	27a70 <atomic_or+0x6>
   27a82:	f3bf 8f5b 	dmb	ish
   27a86:	4770      	bx	lr

00027a88 <unpair_remote>:
{
   27a88:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   27a8a:	4601      	mov	r1, r0
   27a8c:	7818      	ldrb	r0, [r3, #0]
   27a8e:	f7ed bf47 	b.w	15920 <unpair>

00027a92 <z_log_msg_static_create.constprop.0>:
   27a92:	2300      	movs	r3, #0
   27a94:	f7eb bf76 	b.w	13984 <z_impl_z_log_msg_static_create>

00027a98 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27a98:	f3bf 8f5b 	dmb	ish
   27a9c:	e850 3f00 	ldrex	r3, [r0]
   27aa0:	400b      	ands	r3, r1
   27aa2:	e840 3200 	strex	r2, r3, [r0]
   27aa6:	2a00      	cmp	r2, #0
   27aa8:	d1f8      	bne.n	27a9c <atomic_and.isra.0+0x4>
   27aaa:	f3bf 8f5b 	dmb	ish
}
   27aae:	4770      	bx	lr

00027ab0 <sys_put_le64>:
	dst[1] = val >> 8;
   27ab0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   27ab4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   27ab6:	0e00      	lsrs	r0, r0, #24
   27ab8:	7053      	strb	r3, [r2, #1]
   27aba:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   27abc:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   27abe:	f3c1 2007 	ubfx	r0, r1, #8, #8
   27ac2:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   27ac4:	7093      	strb	r3, [r2, #2]
   27ac6:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   27ac8:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   27aca:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   27acc:	71d1      	strb	r1, [r2, #7]
}
   27ace:	4770      	bx	lr

00027ad0 <bt_hci_disconnect>:
{
   27ad0:	b570      	push	{r4, r5, r6, lr}
   27ad2:	4606      	mov	r6, r0
   27ad4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27ad6:	f240 4006 	movw	r0, #1030	; 0x406
   27ada:	2103      	movs	r1, #3
   27adc:	f7ee fb9e 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27ae0:	4604      	mov	r4, r0
   27ae2:	b168      	cbz	r0, 27b00 <bt_hci_disconnect+0x30>
   27ae4:	2103      	movs	r1, #3
   27ae6:	3008      	adds	r0, #8
   27ae8:	f002 f87f 	bl	29bea <net_buf_simple_add>
	disconn->reason = reason;
   27aec:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   27aee:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27af0:	4621      	mov	r1, r4
   27af2:	2200      	movs	r2, #0
}
   27af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27af8:	f240 4006 	movw	r0, #1030	; 0x406
   27afc:	f7ee bbc8 	b.w	16290 <bt_hci_cmd_send_sync>
}
   27b00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b04:	bd70      	pop	{r4, r5, r6, pc}

00027b06 <bt_le_set_data_len>:
{
   27b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b08:	4607      	mov	r7, r0
   27b0a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27b0c:	f242 0022 	movw	r0, #8226	; 0x2022
   27b10:	2106      	movs	r1, #6
{
   27b12:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27b14:	f7ee fb82 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27b18:	4604      	mov	r4, r0
   27b1a:	b178      	cbz	r0, 27b3c <bt_le_set_data_len+0x36>
   27b1c:	2106      	movs	r1, #6
   27b1e:	3008      	adds	r0, #8
   27b20:	f002 f863 	bl	29bea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27b24:	883b      	ldrh	r3, [r7, #0]
   27b26:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27b28:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27b2a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27b2c:	4621      	mov	r1, r4
   27b2e:	2200      	movs	r2, #0
}
   27b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27b34:	f242 0022 	movw	r0, #8226	; 0x2022
   27b38:	f7ee bbaa 	b.w	16290 <bt_hci_cmd_send_sync>
}
   27b3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027b42 <bt_le_set_phy>:
{
   27b42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b46:	4680      	mov	r8, r0
   27b48:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27b4a:	f242 0032 	movw	r0, #8242	; 0x2032
   27b4e:	2107      	movs	r1, #7
{
   27b50:	f89d 9020 	ldrb.w	r9, [sp, #32]
   27b54:	4616      	mov	r6, r2
   27b56:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27b58:	f7ee fb60 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27b5c:	4604      	mov	r4, r0
   27b5e:	b198      	cbz	r0, 27b88 <bt_le_set_phy+0x46>
   27b60:	2107      	movs	r1, #7
   27b62:	3008      	adds	r0, #8
   27b64:	f002 f841 	bl	29bea <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27b68:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   27b6c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27b6e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27b70:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27b72:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   27b74:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27b78:	4621      	mov	r1, r4
   27b7a:	2200      	movs	r2, #0
}
   27b7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27b80:	f242 0032 	movw	r0, #8242	; 0x2032
   27b84:	f7ee bb84 	b.w	16290 <bt_hci_cmd_send_sync>
}
   27b88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027b90 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   27b90:	6880      	ldr	r0, [r0, #8]
   27b92:	f7ee bc4d 	b.w	16430 <bt_hci_le_enh_conn_complete>

00027b96 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   27b96:	8803      	ldrh	r3, [r0, #0]
   27b98:	8842      	ldrh	r2, [r0, #2]
   27b9a:	4293      	cmp	r3, r2
{
   27b9c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   27b9e:	d819      	bhi.n	27bd4 <bt_le_conn_params_valid+0x3e>
   27ba0:	2b05      	cmp	r3, #5
   27ba2:	d917      	bls.n	27bd4 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   27ba4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   27ba8:	d814      	bhi.n	27bd4 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   27baa:	8883      	ldrh	r3, [r0, #4]
   27bac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   27bb0:	d210      	bcs.n	27bd4 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   27bb2:	88c0      	ldrh	r0, [r0, #6]
   27bb4:	f1a0 010a 	sub.w	r1, r0, #10
   27bb8:	b289      	uxth	r1, r1
   27bba:	f640 4476 	movw	r4, #3190	; 0xc76
   27bbe:	42a1      	cmp	r1, r4
   27bc0:	d808      	bhi.n	27bd4 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   27bc2:	3301      	adds	r3, #1
   27bc4:	b29b      	uxth	r3, r3
   27bc6:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   27bc8:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   27bcc:	bf34      	ite	cc
   27bce:	2001      	movcc	r0, #1
   27bd0:	2000      	movcs	r0, #0
}
   27bd2:	bd10      	pop	{r4, pc}
		return false;
   27bd4:	2000      	movs	r0, #0
   27bd6:	e7fc      	b.n	27bd2 <bt_le_conn_params_valid+0x3c>

00027bd8 <le_conn_param_neg_reply>:
{
   27bd8:	b570      	push	{r4, r5, r6, lr}
   27bda:	4606      	mov	r6, r0
   27bdc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   27bde:	f242 0021 	movw	r0, #8225	; 0x2021
   27be2:	2103      	movs	r1, #3
   27be4:	f7ee fb1a 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27be8:	4604      	mov	r4, r0
   27bea:	b918      	cbnz	r0, 27bf4 <le_conn_param_neg_reply+0x1c>
}
   27bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27bf0:	f7ed bf40 	b.w	15a74 <le_conn_param_neg_reply.part.0>
   27bf4:	2103      	movs	r1, #3
   27bf6:	3008      	adds	r0, #8
   27bf8:	f001 fff7 	bl	29bea <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   27bfc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   27bfe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27c00:	4621      	mov	r1, r4
   27c02:	f242 0021 	movw	r0, #8225	; 0x2021
}
   27c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27c0a:	f7ee bed5 	b.w	169b8 <bt_hci_cmd_send>

00027c0e <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   27c0e:	f240 3041 	movw	r0, #833	; 0x341
   27c12:	4770      	bx	lr

00027c14 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   27c14:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   27c16:	f7f5 fb57 	bl	1d2c8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   27c1a:	b118      	cbz	r0, 27c24 <bt_addr_le_is_bonded+0x10>
   27c1c:	89c0      	ldrh	r0, [r0, #14]
   27c1e:	3800      	subs	r0, #0
   27c20:	bf18      	it	ne
   27c22:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   27c24:	bd08      	pop	{r3, pc}

00027c26 <bt_addr_le_copy>:
   27c26:	2207      	movs	r2, #7
   27c28:	f7ff be01 	b.w	2782e <memcpy>

00027c2c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27c2c:	f3bf 8f5b 	dmb	ish
   27c30:	6800      	ldr	r0, [r0, #0]
   27c32:	f3bf 8f5b 	dmb	ish
}
   27c36:	4770      	bx	lr

00027c38 <atomic_test_bit>:
{
   27c38:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27c3a:	f7ff fff7 	bl	27c2c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27c3e:	4108      	asrs	r0, r1
}
   27c40:	f000 0001 	and.w	r0, r0, #1
   27c44:	bd08      	pop	{r3, pc}

00027c46 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27c46:	f100 0210 	add.w	r2, r0, #16
{
   27c4a:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27c4c:	4610      	mov	r0, r2
{
   27c4e:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27c50:	2106      	movs	r1, #6
   27c52:	f7ff fff1 	bl	27c38 <atomic_test_bit>
   27c56:	b130      	cbz	r0, 27c66 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   27c58:	210c      	movs	r1, #12
   27c5a:	4610      	mov	r0, r2
   27c5c:	f7ff ffec 	bl	27c38 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27c60:	b908      	cbnz	r0, 27c66 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   27c62:	2301      	movs	r3, #1
   27c64:	7023      	strb	r3, [r4, #0]
}
   27c66:	bd10      	pop	{r4, pc}

00027c68 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27c68:	f100 0310 	add.w	r3, r0, #16
   27c6c:	f3bf 8f5b 	dmb	ish
   27c70:	e853 2f00 	ldrex	r2, [r3]
   27c74:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   27c78:	e843 1c00 	strex	ip, r1, [r3]
   27c7c:	f1bc 0f00 	cmp.w	ip, #0
   27c80:	d1f6      	bne.n	27c70 <adv_unpause_enabled+0x8>
   27c82:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   27c86:	0453      	lsls	r3, r2, #17
   27c88:	d502      	bpl.n	27c90 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   27c8a:	2101      	movs	r1, #1
   27c8c:	f000 b8b2 	b.w	27df4 <bt_le_adv_set_enable>
}
   27c90:	4770      	bx	lr

00027c92 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   27c92:	7a03      	ldrb	r3, [r0, #8]
   27c94:	075b      	lsls	r3, r3, #29
{
   27c96:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27c98:	d505      	bpl.n	27ca6 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   27c9a:	4601      	mov	r1, r0
   27c9c:	322a      	adds	r2, #42	; 0x2a
   27c9e:	f811 0b01 	ldrb.w	r0, [r1], #1
   27ca2:	f7ef b937 	b.w	16f14 <hci_id_add>
}
   27ca6:	4770      	bx	lr

00027ca8 <z_log_msg_static_create.constprop.0>:
   27ca8:	2300      	movs	r3, #0
   27caa:	f7eb be6b 	b.w	13984 <z_impl_z_log_msg_static_create>

00027cae <addr_res_enable>:
{
   27cae:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27cb0:	2101      	movs	r1, #1
{
   27cb2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27cb4:	f242 002d 	movw	r0, #8237	; 0x202d
   27cb8:	f7ee fab0 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27cbc:	4604      	mov	r4, r0
   27cbe:	b158      	cbz	r0, 27cd8 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   27cc0:	4629      	mov	r1, r5
   27cc2:	3008      	adds	r0, #8
   27cc4:	f001 ffa0 	bl	29c08 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27cc8:	4621      	mov	r1, r4
   27cca:	2200      	movs	r2, #0
}
   27ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27cd0:	f242 002d 	movw	r0, #8237	; 0x202d
   27cd4:	f7ee badc 	b.w	16290 <bt_hci_cmd_send_sync>
}
   27cd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27cdc:	bd38      	pop	{r3, r4, r5, pc}

00027cde <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27cde:	f3bf 8f5b 	dmb	ish
   27ce2:	e850 3f00 	ldrex	r3, [r0]
   27ce6:	430b      	orrs	r3, r1
   27ce8:	e840 3200 	strex	r2, r3, [r0]
   27cec:	2a00      	cmp	r2, #0
   27cee:	d1f8      	bne.n	27ce2 <atomic_or.isra.0+0x4>
   27cf0:	f3bf 8f5b 	dmb	ish
}
   27cf4:	4770      	bx	lr

00027cf6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   27cf6:	f100 0210 	add.w	r2, r0, #16
{
   27cfa:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   27cfc:	2106      	movs	r1, #6
{
   27cfe:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   27d00:	4610      	mov	r0, r2
   27d02:	f7ff ff99 	bl	27c38 <atomic_test_bit>
   27d06:	b150      	cbz	r0, 27d1e <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   27d0c:	4610      	mov	r0, r2
   27d0e:	f7ff ffe6 	bl	27cde <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   27d12:	4620      	mov	r0, r4
   27d14:	2100      	movs	r1, #0
}
   27d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   27d1a:	f000 b86b 	b.w	27df4 <bt_le_adv_set_enable>
}
   27d1e:	bd10      	pop	{r4, pc}

00027d20 <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   27d20:	f100 0210 	add.w	r2, r0, #16
{
   27d24:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   27d26:	2105      	movs	r1, #5
   27d28:	4610      	mov	r0, r2
   27d2a:	f7ff ff85 	bl	27c38 <atomic_test_bit>
   27d2e:	b958      	cbnz	r0, 27d48 <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27d30:	f3bf 8f5b 	dmb	ish
   27d34:	e852 3f00 	ldrex	r3, [r2]
   27d38:	f023 0310 	bic.w	r3, r3, #16
   27d3c:	e842 3100 	strex	r1, r3, [r2]
   27d40:	2900      	cmp	r1, #0
   27d42:	d1f7      	bne.n	27d34 <adv_rpa_invalidate+0x14>
   27d44:	f3bf 8f5b 	dmb	ish
}
   27d48:	bd08      	pop	{r3, pc}

00027d4a <bt_lookup_id_addr>:
{
   27d4a:	b510      	push	{r4, lr}
   27d4c:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   27d4e:	f7f5 fa83 	bl	1d258 <bt_keys_find_irk>
		if (keys) {
   27d52:	b100      	cbz	r0, 27d56 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   27d54:	1c44      	adds	r4, r0, #1
}
   27d56:	4620      	mov	r0, r4
   27d58:	bd10      	pop	{r4, pc}

00027d5a <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   27d5a:	7800      	ldrb	r0, [r0, #0]
   27d5c:	f7ef baf6 	b.w	1734c <bt_id_set_private_addr>

00027d60 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   27d60:	7a03      	ldrb	r3, [r0, #8]
   27d62:	07d9      	lsls	r1, r3, #31
   27d64:	d504      	bpl.n	27d70 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27d66:	f023 0301 	bic.w	r3, r3, #1
   27d6a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   27d6c:	f7ef bbb0 	b.w	174d0 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   27d70:	0799      	lsls	r1, r3, #30
   27d72:	d504      	bpl.n	27d7e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27d74:	f023 0302 	bic.w	r3, r3, #2
   27d78:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   27d7a:	f7ef bbc1 	b.w	17500 <bt_id_del>
}
   27d7e:	4770      	bx	lr

00027d80 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27d80:	f3bf 8f5b 	dmb	ish
   27d84:	6800      	ldr	r0, [r0, #0]
   27d86:	f3bf 8f5b 	dmb	ish
}
   27d8a:	4770      	bx	lr

00027d8c <atomic_and>:
{
   27d8c:	4603      	mov	r3, r0
}
   27d8e:	f3bf 8f5b 	dmb	ish
   27d92:	e853 0f00 	ldrex	r0, [r3]
   27d96:	ea00 0201 	and.w	r2, r0, r1
   27d9a:	e843 2c00 	strex	ip, r2, [r3]
   27d9e:	f1bc 0f00 	cmp.w	ip, #0
   27da2:	d1f6      	bne.n	27d92 <atomic_and+0x6>
   27da4:	f3bf 8f5b 	dmb	ish
   27da8:	4770      	bx	lr

00027daa <bt_le_adv_set_enable_legacy>:
{
   27daa:	b570      	push	{r4, r5, r6, lr}
   27dac:	4606      	mov	r6, r0
   27dae:	b086      	sub	sp, #24
   27db0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27db2:	f242 000a 	movw	r0, #8202	; 0x200a
   27db6:	2101      	movs	r1, #1
   27db8:	f7ee fa30 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27dbc:	4604      	mov	r4, r0
   27dbe:	b1b0      	cbz	r0, 27dee <bt_le_adv_set_enable_legacy+0x44>
   27dc0:	3008      	adds	r0, #8
	if (enable) {
   27dc2:	b195      	cbz	r5, 27dea <bt_le_adv_set_enable_legacy+0x40>
   27dc4:	2101      	movs	r1, #1
   27dc6:	f001 ff1f 	bl	29c08 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27dca:	f106 0210 	add.w	r2, r6, #16
   27dce:	a903      	add	r1, sp, #12
   27dd0:	4620      	mov	r0, r4
   27dd2:	9500      	str	r5, [sp, #0]
   27dd4:	2306      	movs	r3, #6
   27dd6:	f7ee fa0f 	bl	161f8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   27dda:	2200      	movs	r2, #0
   27ddc:	4621      	mov	r1, r4
   27dde:	f242 000a 	movw	r0, #8202	; 0x200a
   27de2:	f7ee fa55 	bl	16290 <bt_hci_cmd_send_sync>
}
   27de6:	b006      	add	sp, #24
   27de8:	bd70      	pop	{r4, r5, r6, pc}
   27dea:	4629      	mov	r1, r5
   27dec:	e7eb      	b.n	27dc6 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27dee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27df2:	e7f8      	b.n	27de6 <bt_le_adv_set_enable_legacy+0x3c>

00027df4 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   27df4:	f7ff bfd9 	b.w	27daa <bt_le_adv_set_enable_legacy>

00027df8 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   27df8:	3018      	adds	r0, #24
   27dfa:	f002 be1e 	b.w	2aa3a <k_work_cancel_delayable>

00027dfe <atomic_and>:
{
   27dfe:	4603      	mov	r3, r0
}
   27e00:	f3bf 8f5b 	dmb	ish
   27e04:	e853 0f00 	ldrex	r0, [r3]
   27e08:	ea00 0201 	and.w	r2, r0, r1
   27e0c:	e843 2c00 	strex	ip, r2, [r3]
   27e10:	f1bc 0f00 	cmp.w	ip, #0
   27e14:	d1f6      	bne.n	27e04 <atomic_and+0x6>
   27e16:	f3bf 8f5b 	dmb	ish
   27e1a:	4770      	bx	lr

00027e1c <z_log_msg_static_create.constprop.0>:
   27e1c:	2300      	movs	r3, #0
   27e1e:	f7eb bdb1 	b.w	13984 <z_impl_z_log_msg_static_create>

00027e22 <tx_complete_work>:
	tx_notify(conn);
   27e22:	3828      	subs	r0, #40	; 0x28
   27e24:	f7ef bf50 	b.w	17cc8 <tx_notify>

00027e28 <bt_conn_reset_rx_state>:
{
   27e28:	b510      	push	{r4, lr}
   27e2a:	4604      	mov	r4, r0
	if (!conn->rx) {
   27e2c:	6900      	ldr	r0, [r0, #16]
   27e2e:	b118      	cbz	r0, 27e38 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27e30:	f7f5 fc90 	bl	1d754 <net_buf_unref>
	conn->rx = NULL;
   27e34:	2300      	movs	r3, #0
   27e36:	6123      	str	r3, [r4, #16]
}
   27e38:	bd10      	pop	{r4, pc}

00027e3a <bt_conn_ref>:
{
   27e3a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   27e3c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27e40:	f3bf 8f5b 	dmb	ish
   27e44:	6813      	ldr	r3, [r2, #0]
   27e46:	f3bf 8f5b 	dmb	ish
		if (!old) {
   27e4a:	b17b      	cbz	r3, 27e6c <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27e4c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   27e50:	1c59      	adds	r1, r3, #1
   27e52:	e852 4f00 	ldrex	r4, [r2]
   27e56:	429c      	cmp	r4, r3
   27e58:	d104      	bne.n	27e64 <bt_conn_ref+0x2a>
   27e5a:	e842 1c00 	strex	ip, r1, [r2]
   27e5e:	f1bc 0f00 	cmp.w	ip, #0
   27e62:	d1f6      	bne.n	27e52 <bt_conn_ref+0x18>
   27e64:	f3bf 8f5b 	dmb	ish
   27e68:	d1ea      	bne.n	27e40 <bt_conn_ref+0x6>
}
   27e6a:	bd10      	pop	{r4, pc}
			return NULL;
   27e6c:	4618      	mov	r0, r3
   27e6e:	e7fc      	b.n	27e6a <bt_conn_ref+0x30>

00027e70 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   27e70:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27e74:	f3bf 8f5b 	dmb	ish
   27e78:	e853 2f00 	ldrex	r2, [r3]
   27e7c:	3a01      	subs	r2, #1
   27e7e:	e843 2100 	strex	r1, r2, [r3]
   27e82:	2900      	cmp	r1, #0
   27e84:	d1f8      	bne.n	27e78 <bt_conn_unref+0x8>
   27e86:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   27e8a:	7883      	ldrb	r3, [r0, #2]
   27e8c:	2b01      	cmp	r3, #1
   27e8e:	d108      	bne.n	27ea2 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27e90:	f3bf 8f5b 	dmb	ish
   27e94:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27e98:	f3bf 8f5b 	dmb	ish
   27e9c:	b90b      	cbnz	r3, 27ea2 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   27e9e:	f7ef bd3d 	b.w	1791c <bt_le_adv_resume>
}
   27ea2:	4770      	bx	lr

00027ea4 <conn_lookup_handle>:
{
   27ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27ea8:	4607      	mov	r7, r0
   27eaa:	460e      	mov	r6, r1
   27eac:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27eae:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27eb0:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   27eb4:	42b4      	cmp	r4, r6
   27eb6:	d103      	bne.n	27ec0 <conn_lookup_handle+0x1c>
	return NULL;
   27eb8:	2300      	movs	r3, #0
}
   27eba:	4618      	mov	r0, r3
   27ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27ec0:	fb09 7004 	mla	r0, r9, r4, r7
   27ec4:	f7ff ffb9 	bl	27e3a <bt_conn_ref>
   27ec8:	4603      	mov	r3, r0
		if (!conn) {
   27eca:	b158      	cbz	r0, 27ee4 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27ecc:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27ece:	2d01      	cmp	r5, #1
   27ed0:	d002      	beq.n	27ed8 <conn_lookup_handle+0x34>
   27ed2:	3d07      	subs	r5, #7
   27ed4:	2d01      	cmp	r5, #1
   27ed6:	d803      	bhi.n	27ee0 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27ed8:	881a      	ldrh	r2, [r3, #0]
   27eda:	4542      	cmp	r2, r8
   27edc:	d0ed      	beq.n	27eba <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27ede:	4618      	mov	r0, r3
   27ee0:	f7ff ffc6 	bl	27e70 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27ee4:	3401      	adds	r4, #1
   27ee6:	e7e5      	b.n	27eb4 <conn_lookup_handle+0x10>

00027ee8 <bt_conn_connected>:
{
   27ee8:	b510      	push	{r4, lr}
   27eea:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27eec:	f7f0 fbe2 	bl	186b4 <bt_l2cap_connected>
	notify_connected(conn);
   27ef0:	4620      	mov	r0, r4
}
   27ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27ef6:	f7ef beb5 	b.w	17c64 <notify_connected>

00027efa <bt_conn_disconnect>:
{
   27efa:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   27efc:	7b43      	ldrb	r3, [r0, #13]
   27efe:	3b02      	subs	r3, #2
{
   27f00:	4604      	mov	r4, r0
	switch (conn->state) {
   27f02:	2b06      	cmp	r3, #6
   27f04:	d805      	bhi.n	27f12 <bt_conn_disconnect+0x18>
   27f06:	e8df f003 	tbb	[pc, r3]
   27f0a:	0408      	.short	0x0408
   27f0c:	0e0c0404 	.word	0x0e0c0404
   27f10:	0c          	.byte	0x0c
   27f11:	00          	.byte	0x00
   27f12:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   27f16:	4628      	mov	r0, r5
   27f18:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   27f1a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27f1c:	2100      	movs	r1, #0
   27f1e:	f7f0 f859 	bl	17fd4 <bt_conn_set_state>
		return 0;
   27f22:	2500      	movs	r5, #0
   27f24:	e7f7      	b.n	27f16 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   27f26:	8800      	ldrh	r0, [r0, #0]
   27f28:	f7ff fdd2 	bl	27ad0 <bt_hci_disconnect>
	if (err) {
   27f2c:	4605      	mov	r5, r0
   27f2e:	2800      	cmp	r0, #0
   27f30:	d1f1      	bne.n	27f16 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   27f32:	7b63      	ldrb	r3, [r4, #13]
   27f34:	2b07      	cmp	r3, #7
   27f36:	d1ee      	bne.n	27f16 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27f38:	2108      	movs	r1, #8
   27f3a:	4620      	mov	r0, r4
   27f3c:	f7f0 f84a 	bl	17fd4 <bt_conn_set_state>
   27f40:	e7e9      	b.n	27f16 <bt_conn_disconnect+0x1c>

00027f42 <bt_conn_set_security>:
{
   27f42:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   27f44:	7b43      	ldrb	r3, [r0, #13]
   27f46:	2b07      	cmp	r3, #7
{
   27f48:	4604      	mov	r4, r0
   27f4a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   27f4c:	d124      	bne.n	27f98 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27f4e:	7a43      	ldrb	r3, [r0, #9]
   27f50:	428b      	cmp	r3, r1
   27f52:	d224      	bcs.n	27f9e <bt_conn_set_security+0x5c>
   27f54:	7a83      	ldrb	r3, [r0, #10]
   27f56:	428b      	cmp	r3, r1
   27f58:	d221      	bcs.n	27f9e <bt_conn_set_security+0x5c>
	if (val) {
   27f5a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27f5c:	f100 0004 	add.w	r0, r0, #4
   27f60:	d515      	bpl.n	27f8e <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27f62:	f3bf 8f5b 	dmb	ish
   27f66:	e850 3f00 	ldrex	r3, [r0]
   27f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27f6e:	e840 3200 	strex	r2, r3, [r0]
   27f72:	2a00      	cmp	r2, #0
   27f74:	d1f7      	bne.n	27f66 <bt_conn_set_security+0x24>
   27f76:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27f7a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   27f7e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   27f80:	4620      	mov	r0, r4
   27f82:	f7f4 facd 	bl	1c520 <bt_smp_start_security>
	if (err) {
   27f86:	b108      	cbz	r0, 27f8c <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   27f88:	7a63      	ldrb	r3, [r4, #9]
   27f8a:	72a3      	strb	r3, [r4, #10]
}
   27f8c:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27f8e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   27f92:	f7ff ff34 	bl	27dfe <atomic_and>
   27f96:	e7f0      	b.n	27f7a <bt_conn_set_security+0x38>
		return -ENOTCONN;
   27f98:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27f9c:	e7f6      	b.n	27f8c <bt_conn_set_security+0x4a>
		return 0;
   27f9e:	2000      	movs	r0, #0
   27fa0:	e7f4      	b.n	27f8c <bt_conn_set_security+0x4a>

00027fa2 <bt_conn_get_security>:
}
   27fa2:	7a40      	ldrb	r0, [r0, #9]
   27fa4:	4770      	bx	lr

00027fa6 <bt_conn_is_peer_addr_le>:
{
   27fa6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27fa8:	7a03      	ldrb	r3, [r0, #8]
   27faa:	428b      	cmp	r3, r1
{
   27fac:	4604      	mov	r4, r0
   27fae:	4615      	mov	r5, r2
	if (id != conn->id) {
   27fb0:	d115      	bne.n	27fde <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27fb2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   27fb6:	2207      	movs	r2, #7
   27fb8:	4628      	mov	r0, r5
   27fba:	f7ff fc0f 	bl	277dc <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   27fbe:	b180      	cbz	r0, 27fe2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27fc0:	78e3      	ldrb	r3, [r4, #3]
   27fc2:	2207      	movs	r2, #7
   27fc4:	b943      	cbnz	r3, 27fd8 <bt_conn_is_peer_addr_le+0x32>
   27fc6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   27fca:	4628      	mov	r0, r5
   27fcc:	f7ff fc06 	bl	277dc <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   27fd0:	fab0 f080 	clz	r0, r0
   27fd4:	0940      	lsrs	r0, r0, #5
}
   27fd6:	bd38      	pop	{r3, r4, r5, pc}
   27fd8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   27fdc:	e7f5      	b.n	27fca <bt_conn_is_peer_addr_le+0x24>
		return false;
   27fde:	2000      	movs	r0, #0
   27fe0:	e7f9      	b.n	27fd6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   27fe2:	2001      	movs	r0, #1
   27fe4:	e7f7      	b.n	27fd6 <bt_conn_is_peer_addr_le+0x30>

00027fe6 <bt_conn_le_conn_update>:
{
   27fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fe8:	4607      	mov	r7, r0
   27fea:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27fec:	f242 0013 	movw	r0, #8211	; 0x2013
   27ff0:	210e      	movs	r1, #14
   27ff2:	f7ee f913 	bl	1621c <bt_hci_cmd_create>
	if (!buf) {
   27ff6:	4606      	mov	r6, r0
   27ff8:	b1d0      	cbz	r0, 28030 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   27ffa:	210e      	movs	r1, #14
   27ffc:	3008      	adds	r0, #8
   27ffe:	f001 fdf4 	bl	29bea <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   28002:	220e      	movs	r2, #14
   28004:	4604      	mov	r4, r0
   28006:	2100      	movs	r1, #0
   28008:	f7ff fc1c 	bl	27844 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2800c:	883b      	ldrh	r3, [r7, #0]
   2800e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28010:	882b      	ldrh	r3, [r5, #0]
   28012:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28014:	886b      	ldrh	r3, [r5, #2]
   28016:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28018:	88ab      	ldrh	r3, [r5, #4]
   2801a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2801c:	88eb      	ldrh	r3, [r5, #6]
   2801e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28020:	4631      	mov	r1, r6
   28022:	2200      	movs	r2, #0
}
   28024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28028:	f242 0013 	movw	r0, #8211	; 0x2013
   2802c:	f7ee b930 	b.w	16290 <bt_hci_cmd_send_sync>
}
   28030:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028036 <l2cap_connected>:
}
   28036:	4770      	bx	lr

00028038 <z_log_msg_static_create.constprop.0>:
   28038:	2300      	movs	r3, #0
   2803a:	f7eb bca3 	b.w	13984 <z_impl_z_log_msg_static_create>

0002803e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2803e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28040:	4605      	mov	r5, r0
   28042:	460f      	mov	r7, r1
   28044:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   28046:	2300      	movs	r3, #0
   28048:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2804c:	2104      	movs	r1, #4
   2804e:	2000      	movs	r0, #0
   28050:	f7f0 f8ba 	bl	181c8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   28054:	4604      	mov	r4, r0
   28056:	b920      	cbnz	r0, 28062 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   28058:	4628      	mov	r0, r5
}
   2805a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2805e:	f7f0 baed 	b.w	1863c <l2cap_create_le_sig_pdu.part.0>
   28062:	2104      	movs	r1, #4
   28064:	3008      	adds	r0, #8
   28066:	f001 fdc0 	bl	29bea <net_buf_simple_add>
	hdr->code = code;
   2806a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2806c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2806e:	8046      	strh	r6, [r0, #2]
}
   28070:	4620      	mov	r0, r4
   28072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028074 <l2cap_disconnected>:
   28074:	4770      	bx	lr

00028076 <bt_l2cap_chan_del>:
{
   28076:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   28078:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2807c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2807e:	b123      	cbz	r3, 2808a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28080:	686b      	ldr	r3, [r5, #4]
   28082:	b103      	cbz	r3, 28086 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28084:	4798      	blx	r3
	chan->conn = NULL;
   28086:	2300      	movs	r3, #0
   28088:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2808a:	68e3      	ldr	r3, [r4, #12]
   2808c:	b10b      	cbz	r3, 28092 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2808e:	4620      	mov	r0, r4
   28090:	4798      	blx	r3
	if (ops->released) {
   28092:	69eb      	ldr	r3, [r5, #28]
   28094:	b11b      	cbz	r3, 2809e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   28096:	4620      	mov	r0, r4
}
   28098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2809c:	4718      	bx	r3
}
   2809e:	bd70      	pop	{r4, r5, r6, pc}

000280a0 <bt_l2cap_disconnected>:
	return list->head;
   280a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   280a2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280a4:	b160      	cbz	r0, 280c0 <bt_l2cap_disconnected+0x20>
	return node->next;
   280a6:	f850 4908 	ldr.w	r4, [r0], #-8
   280aa:	b104      	cbz	r4, 280ae <bt_l2cap_disconnected+0xe>
   280ac:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   280ae:	f7ff ffe2 	bl	28076 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280b2:	b12c      	cbz	r4, 280c0 <bt_l2cap_disconnected+0x20>
   280b4:	68a3      	ldr	r3, [r4, #8]
   280b6:	b103      	cbz	r3, 280ba <bt_l2cap_disconnected+0x1a>
   280b8:	3b08      	subs	r3, #8
{
   280ba:	4620      	mov	r0, r4
   280bc:	461c      	mov	r4, r3
   280be:	e7f6      	b.n	280ae <bt_l2cap_disconnected+0xe>
}
   280c0:	bd10      	pop	{r4, pc}

000280c2 <bt_l2cap_security_changed>:
	return list->head;
   280c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   280c4:	b538      	push	{r3, r4, r5, lr}
   280c6:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280c8:	b178      	cbz	r0, 280ea <bt_l2cap_security_changed+0x28>
	return node->next;
   280ca:	f850 4908 	ldr.w	r4, [r0], #-8
   280ce:	b104      	cbz	r4, 280d2 <bt_l2cap_security_changed+0x10>
   280d0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   280d2:	6843      	ldr	r3, [r0, #4]
   280d4:	689b      	ldr	r3, [r3, #8]
   280d6:	b10b      	cbz	r3, 280dc <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   280d8:	4629      	mov	r1, r5
   280da:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280dc:	b12c      	cbz	r4, 280ea <bt_l2cap_security_changed+0x28>
   280de:	68a3      	ldr	r3, [r4, #8]
   280e0:	b103      	cbz	r3, 280e4 <bt_l2cap_security_changed+0x22>
   280e2:	3b08      	subs	r3, #8
{
   280e4:	4620      	mov	r0, r4
   280e6:	461c      	mov	r4, r3
   280e8:	e7f3      	b.n	280d2 <bt_l2cap_security_changed+0x10>
}
   280ea:	bd38      	pop	{r3, r4, r5, pc}

000280ec <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   280ec:	3104      	adds	r1, #4
   280ee:	f7f0 b86b 	b.w	181c8 <bt_conn_create_pdu_timeout>

000280f2 <bt_l2cap_send_cb>:
{
   280f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280f6:	4614      	mov	r4, r2
   280f8:	4605      	mov	r5, r0
   280fa:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   280fc:	f102 0008 	add.w	r0, r2, #8
   28100:	2104      	movs	r1, #4
   28102:	461e      	mov	r6, r3
   28104:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28108:	f001 fd86 	bl	29c18 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2810c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2810e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28110:	3a04      	subs	r2, #4
   28112:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28114:	4643      	mov	r3, r8
   28116:	4632      	mov	r2, r6
   28118:	4621      	mov	r1, r4
   2811a:	4628      	mov	r0, r5
}
   2811c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28120:	f7ef bee8 	b.w	17ef4 <bt_conn_send_cb>

00028124 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   28124:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28126:	b130      	cbz	r0, 28136 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28128:	8b83      	ldrh	r3, [r0, #28]
   2812a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2812c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28130:	d001      	beq.n	28136 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   28132:	6880      	ldr	r0, [r0, #8]
   28134:	e7f7      	b.n	28126 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   28136:	4770      	bx	lr

00028138 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28138:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2813a:	b130      	cbz	r0, 2814a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2813c:	8983      	ldrh	r3, [r0, #12]
   2813e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28140:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28144:	d001      	beq.n	2814a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   28146:	6880      	ldr	r0, [r0, #8]
   28148:	e7f7      	b.n	2813a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2814a:	4770      	bx	lr

0002814c <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2814c:	4770      	bx	lr

0002814e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2814e:	4603      	mov	r3, r0
	return list->head;
   28150:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28152:	b128      	cbz	r0, 28160 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28154:	6859      	ldr	r1, [r3, #4]
	return node->next;
   28156:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28158:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2815a:	4288      	cmp	r0, r1
	list->tail = node;
   2815c:	bf08      	it	eq
   2815e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   28160:	4770      	bx	lr

00028162 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28162:	4603      	mov	r3, r0
	size_t bytes = 0;
   28164:	2000      	movs	r0, #0

	while (buf) {
   28166:	b903      	cbnz	r3, 2816a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   28168:	4770      	bx	lr
		bytes += buf->len;
   2816a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2816c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2816e:	4410      	add	r0, r2
		buf = buf->frags;
   28170:	e7f9      	b.n	28166 <net_buf_frags_len+0x4>

00028172 <attr_read_type_cb>:
{
   28172:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   28174:	68d4      	ldr	r4, [r2, #12]
   28176:	7823      	ldrb	r3, [r4, #0]
   28178:	3102      	adds	r1, #2
   2817a:	b913      	cbnz	r3, 28182 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2817c:	7021      	strb	r1, [r4, #0]
	return true;
   2817e:	2001      	movs	r0, #1
   28180:	e006      	b.n	28190 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   28182:	428b      	cmp	r3, r1
   28184:	d0fb      	beq.n	2817e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   28186:	8983      	ldrh	r3, [r0, #12]
   28188:	3b02      	subs	r3, #2
   2818a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2818c:	2000      	movs	r0, #0
   2818e:	6110      	str	r0, [r2, #16]
}
   28190:	bd10      	pop	{r4, pc}

00028192 <att_op_get_type>:
	switch (op) {
   28192:	2852      	cmp	r0, #82	; 0x52
   28194:	d830      	bhi.n	281f8 <att_op_get_type+0x66>
   28196:	b388      	cbz	r0, 281fc <att_op_get_type+0x6a>
   28198:	1e43      	subs	r3, r0, #1
   2819a:	2b51      	cmp	r3, #81	; 0x51
   2819c:	d82e      	bhi.n	281fc <att_op_get_type+0x6a>
   2819e:	e8df f003 	tbb	[pc, r3]
   281a2:	3933      	.short	0x3933
   281a4:	39333933 	.word	0x39333933
   281a8:	39333933 	.word	0x39333933
   281ac:	39333933 	.word	0x39333933
   281b0:	39333933 	.word	0x39333933
   281b4:	392d2d33 	.word	0x392d2d33
   281b8:	2d333933 	.word	0x2d333933
   281bc:	29372d35 	.word	0x29372d35
   281c0:	2d33392d 	.word	0x2d33392d
   281c4:	2d2d2d35 	.word	0x2d2d2d35
   281c8:	2d2d2d2d 	.word	0x2d2d2d2d
   281cc:	2d2d2d2d 	.word	0x2d2d2d2d
   281d0:	2d2d2d2d 	.word	0x2d2d2d2d
   281d4:	2d2d2d2d 	.word	0x2d2d2d2d
   281d8:	2d2d2d2d 	.word	0x2d2d2d2d
   281dc:	2d2d2d2d 	.word	0x2d2d2d2d
   281e0:	2d2d2d2d 	.word	0x2d2d2d2d
   281e4:	2d2d2d2d 	.word	0x2d2d2d2d
   281e8:	2d2d2d2d 	.word	0x2d2d2d2d
   281ec:	2d2d2d2d 	.word	0x2d2d2d2d
   281f0:	3b2d2d2d 	.word	0x3b2d2d2d
   281f4:	2004      	movs	r0, #4
   281f6:	4770      	bx	lr
   281f8:	28d2      	cmp	r0, #210	; 0xd2
   281fa:	d00d      	beq.n	28218 <att_op_get_type+0x86>
		return ATT_COMMAND;
   281fc:	f010 0f40 	tst.w	r0, #64	; 0x40
   28200:	bf0c      	ite	eq
   28202:	2006      	moveq	r0, #6
   28204:	2000      	movne	r0, #0
   28206:	4770      	bx	lr
		return ATT_RESPONSE;
   28208:	2002      	movs	r0, #2
   2820a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2820c:	2003      	movs	r0, #3
   2820e:	4770      	bx	lr
		return ATT_INDICATION;
   28210:	2005      	movs	r0, #5
   28212:	4770      	bx	lr
		return ATT_REQUEST;
   28214:	2001      	movs	r0, #1
   28216:	4770      	bx	lr
		return ATT_COMMAND;
   28218:	2000      	movs	r0, #0
}
   2821a:	4770      	bx	lr

0002821c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2821c:	f3bf 8f5b 	dmb	ish
   28220:	6800      	ldr	r0, [r0, #0]
   28222:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28226:	4108      	asrs	r0, r1
}
   28228:	f000 0001 	and.w	r0, r0, #1
   2822c:	4770      	bx	lr

0002822e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2822e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28230:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28234:	2300      	movs	r3, #0
   28236:	9300      	str	r3, [sp, #0]
   28238:	461a      	mov	r2, r3
   2823a:	f7f2 fa99 	bl	1a770 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2823e:	b005      	add	sp, #20
   28240:	f85d fb04 	ldr.w	pc, [sp], #4

00028244 <find_info_cb>:
{
   28244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   28246:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   28248:	6817      	ldr	r7, [r2, #0]
{
   2824a:	4605      	mov	r5, r0
   2824c:	460e      	mov	r6, r1
   2824e:	4614      	mov	r4, r2
	if (!data->rsp) {
   28250:	b963      	cbnz	r3, 2826c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   28252:	6850      	ldr	r0, [r2, #4]
   28254:	2101      	movs	r1, #1
   28256:	3008      	adds	r0, #8
   28258:	f001 fcc7 	bl	29bea <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2825c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2825e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   28260:	781b      	ldrb	r3, [r3, #0]
   28262:	2b00      	cmp	r3, #0
   28264:	bf0c      	ite	eq
   28266:	2301      	moveq	r3, #1
   28268:	2302      	movne	r3, #2
   2826a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2826c:	68a3      	ldr	r3, [r4, #8]
   2826e:	781b      	ldrb	r3, [r3, #0]
   28270:	2b01      	cmp	r3, #1
   28272:	d003      	beq.n	2827c <find_info_cb+0x38>
   28274:	2b02      	cmp	r3, #2
   28276:	d018      	beq.n	282aa <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   28278:	2000      	movs	r0, #0
   2827a:	e015      	b.n	282a8 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2827c:	682b      	ldr	r3, [r5, #0]
   2827e:	781b      	ldrb	r3, [r3, #0]
   28280:	2b00      	cmp	r3, #0
   28282:	d1f9      	bne.n	28278 <find_info_cb+0x34>
   28284:	6860      	ldr	r0, [r4, #4]
   28286:	2104      	movs	r1, #4
   28288:	3008      	adds	r0, #8
   2828a:	f001 fcae 	bl	29bea <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2828e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   28290:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   28292:	885b      	ldrh	r3, [r3, #2]
   28294:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   28296:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   28298:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2829a:	899b      	ldrh	r3, [r3, #12]
   2829c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2829e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   282a0:	2804      	cmp	r0, #4
   282a2:	bf94      	ite	ls
   282a4:	2000      	movls	r0, #0
   282a6:	2001      	movhi	r0, #1
}
   282a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   282aa:	682b      	ldr	r3, [r5, #0]
   282ac:	781b      	ldrb	r3, [r3, #0]
   282ae:	2b02      	cmp	r3, #2
   282b0:	d1e2      	bne.n	28278 <find_info_cb+0x34>
   282b2:	6860      	ldr	r0, [r4, #4]
   282b4:	2112      	movs	r1, #18
   282b6:	3008      	adds	r0, #8
   282b8:	f001 fc97 	bl	29bea <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   282bc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   282be:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   282c0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   282c2:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   282c6:	3101      	adds	r1, #1
   282c8:	f7ff fab1 	bl	2782e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   282cc:	6863      	ldr	r3, [r4, #4]
   282ce:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   282d0:	899b      	ldrh	r3, [r3, #12]
   282d2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   282d4:	2812      	cmp	r0, #18
   282d6:	e7e4      	b.n	282a2 <find_info_cb+0x5e>

000282d8 <att_chan_mtu_updated>:
{
   282d8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   282da:	6806      	ldr	r6, [r0, #0]
	return list->head;
   282dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282de:	b1c3      	cbz	r3, 28312 <att_chan_mtu_updated+0x3a>
   282e0:	461a      	mov	r2, r3
	return node->next;
   282e2:	f852 49e0 	ldr.w	r4, [r2], #-224
   282e6:	b104      	cbz	r4, 282ea <att_chan_mtu_updated+0x12>
   282e8:	3ce0      	subs	r4, #224	; 0xe0
{
   282ea:	2300      	movs	r3, #0
   282ec:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   282ee:	4290      	cmp	r0, r2
   282f0:	d007      	beq.n	28302 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   282f2:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   282f4:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   282f6:	42a9      	cmp	r1, r5
   282f8:	bf38      	it	cc
   282fa:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   282fc:	4293      	cmp	r3, r2
   282fe:	bf38      	it	cc
   28300:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28302:	b13c      	cbz	r4, 28314 <att_chan_mtu_updated+0x3c>
   28304:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   28308:	b105      	cbz	r5, 2830c <att_chan_mtu_updated+0x34>
   2830a:	3de0      	subs	r5, #224	; 0xe0
{
   2830c:	4622      	mov	r2, r4
   2830e:	462c      	mov	r4, r5
   28310:	e7ed      	b.n	282ee <att_chan_mtu_updated+0x16>
   28312:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28314:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   28316:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28318:	428c      	cmp	r4, r1
   2831a:	d801      	bhi.n	28320 <att_chan_mtu_updated+0x48>
   2831c:	429a      	cmp	r2, r3
   2831e:	d909      	bls.n	28334 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28320:	429a      	cmp	r2, r3
   28322:	bf38      	it	cc
   28324:	461a      	movcc	r2, r3
   28326:	42a1      	cmp	r1, r4
   28328:	6830      	ldr	r0, [r6, #0]
   2832a:	bf38      	it	cc
   2832c:	4621      	movcc	r1, r4
}
   2832e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28330:	f7f2 bf1c 	b.w	1b16c <bt_gatt_att_max_mtu_changed>
}
   28334:	bc70      	pop	{r4, r5, r6}
   28336:	4770      	bx	lr

00028338 <attr_read_group_cb>:
	if (!data->rsp->len) {
   28338:	68d0      	ldr	r0, [r2, #12]
   2833a:	7803      	ldrb	r3, [r0, #0]
   2833c:	3104      	adds	r1, #4
   2833e:	b913      	cbnz	r3, 28346 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28340:	7001      	strb	r1, [r0, #0]
	return true;
   28342:	2001      	movs	r0, #1
}
   28344:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   28346:	428b      	cmp	r3, r1
   28348:	d0fb      	beq.n	28342 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2834a:	6891      	ldr	r1, [r2, #8]
   2834c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2834e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   28350:	3b04      	subs	r3, #4
   28352:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   28354:	6110      	str	r0, [r2, #16]
		return false;
   28356:	4770      	bx	lr

00028358 <write_cb>:
{
   28358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2835a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2835c:	4601      	mov	r1, r0
{
   2835e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   28360:	f44f 7295 	mov.w	r2, #298	; 0x12a
   28364:	6820      	ldr	r0, [r4, #0]
   28366:	f000 fe7a 	bl	2905e <bt_gatt_check_perm>
   2836a:	4605      	mov	r5, r0
   2836c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2836e:	bb20      	cbnz	r0, 283ba <write_cb+0x62>
	if (!data->req) {
   28370:	7a23      	ldrb	r3, [r4, #8]
   28372:	b1ab      	cbz	r3, 283a0 <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   28374:	2b18      	cmp	r3, #24
   28376:	bf14      	ite	ne
   28378:	2300      	movne	r3, #0
   2837a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2837c:	9301      	str	r3, [sp, #4]
   2837e:	8a63      	ldrh	r3, [r4, #18]
   28380:	9300      	str	r3, [sp, #0]
   28382:	68b7      	ldr	r7, [r6, #8]
   28384:	8a23      	ldrh	r3, [r4, #16]
   28386:	68e2      	ldr	r2, [r4, #12]
   28388:	6820      	ldr	r0, [r4, #0]
   2838a:	4631      	mov	r1, r6
   2838c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2838e:	1e03      	subs	r3, r0, #0
   28390:	db08      	blt.n	283a4 <write_cb+0x4c>
   28392:	8a22      	ldrh	r2, [r4, #16]
   28394:	4293      	cmp	r3, r2
   28396:	d10e      	bne.n	283b6 <write_cb+0x5e>
	data->err = 0U;
   28398:	2300      	movs	r3, #0
   2839a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2839c:	2501      	movs	r5, #1
   2839e:	e007      	b.n	283b0 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   283a0:	2302      	movs	r3, #2
   283a2:	e7eb      	b.n	2837c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   283a4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   283a8:	d305      	bcc.n	283b6 <write_cb+0x5e>
		return -err;
   283aa:	425b      	negs	r3, r3
   283ac:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   283ae:	7523      	strb	r3, [r4, #20]
}
   283b0:	4628      	mov	r0, r5
   283b2:	b003      	add	sp, #12
   283b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   283b6:	230e      	movs	r3, #14
   283b8:	e7f9      	b.n	283ae <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   283ba:	2500      	movs	r5, #0
   283bc:	e7f8      	b.n	283b0 <write_cb+0x58>

000283be <z_log_msg_static_create.constprop.0>:
   283be:	2300      	movs	r3, #0
   283c0:	f7eb bae0 	b.w	13984 <z_impl_z_log_msg_static_create>

000283c4 <chan_req_send>:
{
   283c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   283c6:	688e      	ldr	r6, [r1, #8]
{
   283c8:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   283ca:	4630      	mov	r0, r6
   283cc:	f7ff fec9 	bl	28162 <net_buf_frags_len>
   283d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   283d2:	4283      	cmp	r3, r0
{
   283d4:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   283d6:	d30c      	bcc.n	283f2 <chan_req_send+0x2e>
	req->buf = NULL;
   283d8:	2700      	movs	r7, #0
	chan->req = req;
   283da:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	return chan_send(chan, buf);
   283de:	4620      	mov	r0, r4
	req->buf = NULL;
   283e0:	608f      	str	r7, [r1, #8]
	return chan_send(chan, buf);
   283e2:	4631      	mov	r1, r6
   283e4:	f7f0 fbc8 	bl	18b78 <chan_send>
	if (err) {
   283e8:	b110      	cbz	r0, 283f0 <chan_req_send+0x2c>
		req->buf = buf;
   283ea:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   283ec:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
}
   283f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   283f2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   283f6:	e7fb      	b.n	283f0 <chan_req_send+0x2c>

000283f8 <process_queue>:
{
   283f8:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   283fa:	2200      	movs	r2, #0
{
   283fc:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   283fe:	2300      	movs	r3, #0
   28400:	4608      	mov	r0, r1
{
   28402:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   28404:	f001 fb51 	bl	29aaa <net_buf_get>
	if (buf) {
   28408:	4605      	mov	r5, r0
   2840a:	b158      	cbz	r0, 28424 <process_queue+0x2c>
	return chan_send(chan, buf);
   2840c:	4601      	mov	r1, r0
   2840e:	4620      	mov	r0, r4
   28410:	f7f0 fbb2 	bl	18b78 <chan_send>
		if (err) {
   28414:	4604      	mov	r4, r0
   28416:	b118      	cbz	r0, 28420 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   28418:	4629      	mov	r1, r5
   2841a:	4630      	mov	r0, r6
   2841c:	f002 f9f5 	bl	2a80a <k_queue_prepend>
}
   28420:	4620      	mov	r0, r4
   28422:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   28424:	f06f 0401 	mvn.w	r4, #1
   28428:	e7fa      	b.n	28420 <process_queue+0x28>

0002842a <bt_att_chan_send_rsp>:
{
   2842a:	b538      	push	{r3, r4, r5, lr}
   2842c:	4604      	mov	r4, r0
   2842e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   28430:	f7f0 fba2 	bl	18b78 <chan_send>
	if (err) {
   28434:	b130      	cbz	r0, 28444 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28436:	4629      	mov	r1, r5
   28438:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2843c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   28440:	f001 bba0 	b.w	29b84 <net_buf_put>
}
   28444:	bd38      	pop	{r3, r4, r5, pc}

00028446 <sys_slist_find_and_remove.isra.0>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28446:	b510      	push	{r4, lr}
	return list->head;
   28448:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2844a:	2200      	movs	r2, #0
   2844c:	b153      	cbz	r3, 28464 <sys_slist_find_and_remove.isra.0+0x1e>
   2844e:	428b      	cmp	r3, r1
   28450:	d10e      	bne.n	28470 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   28452:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   28454:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28456:	b932      	cbnz	r2, 28466 <sys_slist_find_and_remove.isra.0+0x20>
   28458:	42a1      	cmp	r1, r4
	list->head = node;
   2845a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2845c:	d100      	bne.n	28460 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2845e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28460:	2300      	movs	r3, #0
   28462:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28464:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   28466:	42a1      	cmp	r1, r4
	parent->next = child;
   28468:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2846a:	bf08      	it	eq
   2846c:	6042      	streq	r2, [r0, #4]
}
   2846e:	e7f7      	b.n	28460 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   28470:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28472:	681b      	ldr	r3, [r3, #0]
   28474:	e7ea      	b.n	2844c <sys_slist_find_and_remove.isra.0+0x6>

00028476 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28476:	2301      	movs	r3, #1
   28478:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2847c:	f3bf 8f5b 	dmb	ish
   28480:	e850 3f00 	ldrex	r3, [r0]
   28484:	ea43 0201 	orr.w	r2, r3, r1
   28488:	e840 2c00 	strex	ip, r2, [r0]
   2848c:	f1bc 0f00 	cmp.w	ip, #0
   28490:	d1f6      	bne.n	28480 <atomic_test_and_set_bit+0xa>
   28492:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28496:	4219      	tst	r1, r3
}
   28498:	bf14      	ite	ne
   2849a:	2001      	movne	r0, #1
   2849c:	2000      	moveq	r0, #0
   2849e:	4770      	bx	lr

000284a0 <att_chan_read>:
{
   284a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284a4:	4680      	mov	r8, r0
   284a6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   284a8:	4610      	mov	r0, r2
{
   284aa:	4699      	mov	r9, r3
   284ac:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   284ae:	f7ff fe58 	bl	28162 <net_buf_frags_len>
   284b2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   284b6:	4283      	cmp	r3, r0
{
   284b8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   284ba:	d97a      	bls.n	285b2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   284bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   284c0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   284c2:	4630      	mov	r0, r6
   284c4:	f001 fb6f 	bl	29ba6 <net_buf_frag_last>
	size_t len, total = 0;
   284c8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   284cc:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   284ce:	4630      	mov	r0, r6
   284d0:	f7ff fe47 	bl	28162 <net_buf_frags_len>
   284d4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   284d8:	f105 0708 	add.w	r7, r5, #8
   284dc:	1a24      	subs	r4, r4, r0
   284de:	4638      	mov	r0, r7
   284e0:	f001 fbc6 	bl	29c70 <net_buf_simple_tailroom>
   284e4:	4284      	cmp	r4, r0
   284e6:	d211      	bcs.n	2850c <att_chan_read+0x6c>
   284e8:	4630      	mov	r0, r6
   284ea:	f7ff fe3a 	bl	28162 <net_buf_frags_len>
   284ee:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   284f2:	1a24      	subs	r4, r4, r0
		if (!len) {
   284f4:	bb34      	cbnz	r4, 28544 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   284f6:	79b0      	ldrb	r0, [r6, #6]
   284f8:	f7f5 f868 	bl	1d5cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   284fc:	2200      	movs	r2, #0
   284fe:	2300      	movs	r3, #0
   28500:	f001 face 	bl	29aa0 <net_buf_alloc_fixed>
			if (!frag) {
   28504:	4605      	mov	r5, r0
   28506:	b930      	cbnz	r0, 28516 <att_chan_read+0x76>
	return total;
   28508:	4657      	mov	r7, sl
   2850a:	e02c      	b.n	28566 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2850c:	4638      	mov	r0, r7
   2850e:	f001 fbaf 	bl	29c70 <net_buf_simple_tailroom>
   28512:	4604      	mov	r4, r0
   28514:	e7ee      	b.n	284f4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   28516:	4601      	mov	r1, r0
   28518:	4630      	mov	r0, r6
   2851a:	f001 fb55 	bl	29bc8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2851e:	4630      	mov	r0, r6
   28520:	f7ff fe1f 	bl	28162 <net_buf_frags_len>
   28524:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28528:	f105 0708 	add.w	r7, r5, #8
   2852c:	1a24      	subs	r4, r4, r0
   2852e:	4638      	mov	r0, r7
   28530:	f001 fb9e 	bl	29c70 <net_buf_simple_tailroom>
   28534:	4284      	cmp	r4, r0
   28536:	d21a      	bcs.n	2856e <att_chan_read+0xce>
   28538:	4630      	mov	r0, r6
   2853a:	f7ff fe12 	bl	28162 <net_buf_frags_len>
   2853e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28542:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28544:	68a9      	ldr	r1, [r5, #8]
   28546:	89aa      	ldrh	r2, [r5, #12]
   28548:	f8db 7004 	ldr.w	r7, [fp, #4]
   2854c:	9803      	ldr	r0, [sp, #12]
   2854e:	f8cd 9000 	str.w	r9, [sp]
   28552:	440a      	add	r2, r1
   28554:	b2a3      	uxth	r3, r4
   28556:	4659      	mov	r1, fp
   28558:	47b8      	blx	r7
		if (read < 0) {
   2855a:	1e07      	subs	r7, r0, #0
   2855c:	da0c      	bge.n	28578 <att_chan_read+0xd8>
				return total;
   2855e:	f1ba 0f00 	cmp.w	sl, #0
   28562:	bf18      	it	ne
   28564:	4657      	movne	r7, sl
}
   28566:	4638      	mov	r0, r7
   28568:	b005      	add	sp, #20
   2856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2856e:	4638      	mov	r0, r7
   28570:	f001 fb7e 	bl	29c70 <net_buf_simple_tailroom>
   28574:	4604      	mov	r4, r0
   28576:	e7e5      	b.n	28544 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   28578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2857a:	b993      	cbnz	r3, 285a2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2857c:	4639      	mov	r1, r7
   2857e:	f105 0008 	add.w	r0, r5, #8
   28582:	f001 fb32 	bl	29bea <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28586:	4630      	mov	r0, r6
   28588:	f7ff fdeb 	bl	28162 <net_buf_frags_len>
   2858c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   28590:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28592:	4283      	cmp	r3, r0
		total += read;
   28594:	44ba      	add	sl, r7
		offset += read;
   28596:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2859a:	d9b5      	bls.n	28508 <att_chan_read+0x68>
   2859c:	42a7      	cmp	r7, r4
   2859e:	d096      	beq.n	284ce <att_chan_read+0x2e>
   285a0:	e7b2      	b.n	28508 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   285a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   285a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   285a6:	4639      	mov	r1, r7
   285a8:	4628      	mov	r0, r5
   285aa:	4798      	blx	r3
   285ac:	2800      	cmp	r0, #0
   285ae:	d1e5      	bne.n	2857c <att_chan_read+0xdc>
   285b0:	e7aa      	b.n	28508 <att_chan_read+0x68>
		return 0;
   285b2:	2700      	movs	r7, #0
   285b4:	e7d7      	b.n	28566 <att_chan_read+0xc6>

000285b6 <read_cb>:
{
   285b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   285ba:	f8d2 8000 	ldr.w	r8, [r2]
{
   285be:	4606      	mov	r6, r0
	data->err = 0x00;
   285c0:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   285c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   285c6:	7317      	strb	r7, [r2, #12]
{
   285c8:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   285ca:	4631      	mov	r1, r6
   285cc:	2295      	movs	r2, #149	; 0x95
   285ce:	f000 fd46 	bl	2905e <bt_gatt_check_perm>
   285d2:	4604      	mov	r4, r0
   285d4:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   285d6:	b9a0      	cbnz	r0, 28602 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   285d8:	e9cd 0000 	strd	r0, r0, [sp]
   285dc:	88ab      	ldrh	r3, [r5, #4]
   285de:	68aa      	ldr	r2, [r5, #8]
   285e0:	4631      	mov	r1, r6
   285e2:	4640      	mov	r0, r8
   285e4:	f7ff ff5c 	bl	284a0 <att_chan_read>
	if (ret < 0) {
   285e8:	1e03      	subs	r3, r0, #0
   285ea:	da0c      	bge.n	28606 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   285ec:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   285f0:	bf26      	itte	cs
   285f2:	425b      	negcs	r3, r3
   285f4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   285f6:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   285f8:	732b      	strb	r3, [r5, #12]
}
   285fa:	4620      	mov	r0, r4
   285fc:	b002      	add	sp, #8
   285fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   28602:	463c      	mov	r4, r7
   28604:	e7f9      	b.n	285fa <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   28606:	2401      	movs	r4, #1
   28608:	e7f7      	b.n	285fa <read_cb+0x44>

0002860a <read_vl_cb>:
{
   2860a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2860e:	f8d2 8000 	ldr.w	r8, [r2]
{
   28612:	4606      	mov	r6, r0
	data->err = 0x00;
   28614:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   28616:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2861a:	7317      	strb	r7, [r2, #12]
{
   2861c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2861e:	4631      	mov	r1, r6
   28620:	2295      	movs	r2, #149	; 0x95
   28622:	f000 fd1c 	bl	2905e <bt_gatt_check_perm>
   28626:	4604      	mov	r4, r0
   28628:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2862a:	bb18      	cbnz	r0, 28674 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2862c:	68a8      	ldr	r0, [r5, #8]
   2862e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28632:	8982      	ldrh	r2, [r0, #12]
   28634:	1a9b      	subs	r3, r3, r2
   28636:	2b01      	cmp	r3, #1
   28638:	dd15      	ble.n	28666 <read_vl_cb+0x5c>
   2863a:	2102      	movs	r1, #2
   2863c:	3008      	adds	r0, #8
   2863e:	f001 fad4 	bl	29bea <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28642:	88ab      	ldrh	r3, [r5, #4]
   28644:	68aa      	ldr	r2, [r5, #8]
   28646:	e9cd 4400 	strd	r4, r4, [sp]
   2864a:	4607      	mov	r7, r0
   2864c:	4631      	mov	r1, r6
   2864e:	4640      	mov	r0, r8
   28650:	f7ff ff26 	bl	284a0 <att_chan_read>
	if (read < 0) {
   28654:	1e03      	subs	r3, r0, #0
   28656:	da0a      	bge.n	2866e <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   28658:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2865c:	bf26      	itte	cs
   2865e:	425b      	negcs	r3, r3
   28660:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   28662:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   28664:	732b      	strb	r3, [r5, #12]
}
   28666:	4620      	mov	r0, r4
   28668:	b002      	add	sp, #8
   2866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2866e:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   28670:	2401      	movs	r4, #1
   28672:	e7f8      	b.n	28666 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   28674:	463c      	mov	r4, r7
   28676:	e7f6      	b.n	28666 <read_vl_cb+0x5c>

00028678 <bt_att_sent>:
{
   28678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2867a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2867c:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2867e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   28682:	f850 4c04 	ldr.w	r4, [r0, #-4]
   28686:	f3bf 8f5b 	dmb	ish
   2868a:	e853 2f00 	ldrex	r2, [r3]
   2868e:	f022 0210 	bic.w	r2, r2, #16
   28692:	e843 2100 	strex	r1, r2, [r3]
   28696:	2900      	cmp	r1, #0
   28698:	d1f7      	bne.n	2868a <bt_att_sent+0x12>
   2869a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2869e:	b30c      	cbz	r4, 286e4 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   286a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   286a4:	b98b      	cbnz	r3, 286ca <bt_att_sent+0x52>
   286a6:	6863      	ldr	r3, [r4, #4]
   286a8:	b17b      	cbz	r3, 286ca <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   286aa:	1d20      	adds	r0, r4, #4
   286ac:	f7ff fd4f 	bl	2814e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   286b0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   286b2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   286b4:	4638      	mov	r0, r7
   286b6:	f7ff fe85 	bl	283c4 <chan_req_send>
   286ba:	2800      	cmp	r0, #0
   286bc:	da12      	bge.n	286e4 <bt_att_sent+0x6c>
	parent->next = child;
   286be:	6863      	ldr	r3, [r4, #4]
   286c0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   286c2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   286c4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   286c6:	b903      	cbnz	r3, 286ca <bt_att_sent+0x52>
	list->tail = node;
   286c8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   286ca:	f105 0194 	add.w	r1, r5, #148	; 0x94
   286ce:	4638      	mov	r0, r7
   286d0:	f7ff fe92 	bl	283f8 <process_queue>
	if (!err) {
   286d4:	b130      	cbz	r0, 286e4 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   286d6:	f104 010c 	add.w	r1, r4, #12
   286da:	4638      	mov	r0, r7
}
   286dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   286e0:	f7ff be8a 	b.w	283f8 <process_queue>
}
   286e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000286e6 <att_req_send_process>:
{
   286e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   286ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   286ec:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   286ee:	2c00      	cmp	r4, #0
   286f0:	d03b      	beq.n	2876a <att_req_send_process+0x84>
	return node->next;
   286f2:	f854 59e0 	ldr.w	r5, [r4], #-224
   286f6:	b105      	cbz	r5, 286fa <att_req_send_process+0x14>
   286f8:	3de0      	subs	r5, #224	; 0xe0
{
   286fa:	2300      	movs	r3, #0
   286fc:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   286fe:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   28702:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   28706:	b9e2      	cbnz	r2, 28742 <att_req_send_process+0x5c>
		if (!req && prev &&
   28708:	b16e      	cbz	r6, 28726 <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   2870a:	4638      	mov	r0, r7
   2870c:	f7ff fd1f 	bl	2814e <sys_slist_get>
	if (node) {
   28710:	4606      	mov	r6, r0
   28712:	b9c0      	cbnz	r0, 28746 <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28714:	b34d      	cbz	r5, 2876a <att_req_send_process+0x84>
   28716:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
   2871a:	b102      	cbz	r2, 2871e <att_req_send_process+0x38>
   2871c:	3ae0      	subs	r2, #224	; 0xe0
{
   2871e:	4623      	mov	r3, r4
   28720:	462c      	mov	r4, r5
   28722:	4615      	mov	r5, r2
   28724:	e7ed      	b.n	28702 <att_req_send_process+0x1c>
		if (!req && prev &&
   28726:	2b00      	cmp	r3, #0
   28728:	d0ef      	beq.n	2870a <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2872a:	2103      	movs	r1, #3
   2872c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   28730:	f7ff fd74 	bl	2821c <atomic_test_bit>
   28734:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28736:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2873a:	f7ff fd6f 	bl	2821c <atomic_test_bit>
		if (!req && prev &&
   2873e:	4282      	cmp	r2, r0
   28740:	d1e3      	bne.n	2870a <att_req_send_process+0x24>
   28742:	461c      	mov	r4, r3
   28744:	e7e6      	b.n	28714 <att_req_send_process+0x2e>
	return chan_req_send(chan, req);
   28746:	4601      	mov	r1, r0
   28748:	4620      	mov	r0, r4
   2874a:	f7ff fe3b 	bl	283c4 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2874e:	2800      	cmp	r0, #0
   28750:	da0b      	bge.n	2876a <att_req_send_process+0x84>
	parent->next = child;
   28752:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28756:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28758:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2875c:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   28760:	2b00      	cmp	r3, #0
   28762:	d1d7      	bne.n	28714 <att_req_send_process+0x2e>
	list->tail = node;
   28764:	f8c8 6008 	str.w	r6, [r8, #8]
}
   28768:	e7d4      	b.n	28714 <att_req_send_process+0x2e>
}
   2876a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002876e <bt_att_status>:
{
   2876e:	b538      	push	{r3, r4, r5, lr}
   28770:	4605      	mov	r5, r0
   28772:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   28774:	2100      	movs	r1, #0
   28776:	f7ff fd51 	bl	2821c <atomic_test_bit>
   2877a:	b1c0      	cbz	r0, 287ae <bt_att_status+0x40>
	if (!chan->att) {
   2877c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   28780:	b1a8      	cbz	r0, 287ae <bt_att_status+0x40>
	if (chan->req) {
   28782:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   28786:	b993      	cbnz	r3, 287ae <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   28788:	3004      	adds	r0, #4
   2878a:	f7ff fce0 	bl	2814e <sys_slist_get>
	if (!node) {
   2878e:	4604      	mov	r4, r0
   28790:	b168      	cbz	r0, 287ae <bt_att_status+0x40>
	return chan_req_send(chan, req);
   28792:	4601      	mov	r1, r0
   28794:	1f28      	subs	r0, r5, #4
   28796:	f7ff fe15 	bl	283c4 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2879a:	2800      	cmp	r0, #0
   2879c:	da07      	bge.n	287ae <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2879e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   287a2:	685a      	ldr	r2, [r3, #4]
   287a4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   287a6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   287a8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   287aa:	b902      	cbnz	r2, 287ae <bt_att_status+0x40>
	list->tail = node;
   287ac:	609c      	str	r4, [r3, #8]
}
   287ae:	bd38      	pop	{r3, r4, r5, pc}

000287b0 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   287b0:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   287b2:	6883      	ldr	r3, [r0, #8]
   287b4:	695b      	ldr	r3, [r3, #20]
   287b6:	b10b      	cbz	r3, 287bc <att_sent+0xc>
		chan->ops->sent(chan);
   287b8:	3004      	adds	r0, #4
   287ba:	4718      	bx	r3
}
   287bc:	4770      	bx	lr

000287be <att_unknown>:
{
   287be:	b510      	push	{r4, lr}
   287c0:	460c      	mov	r4, r1
	if (!err) {
   287c2:	b90a      	cbnz	r2, 287c8 <att_unknown+0xa>
		att_sent(conn, user_data);
   287c4:	f7ff fff4 	bl	287b0 <att_sent>
	tx_meta_data_free(user_data);
   287c8:	4620      	mov	r0, r4
}
   287ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   287ce:	f7f0 b8b1 	b.w	18934 <tx_meta_data_free>

000287d2 <att_tx_complete>:
{
   287d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   287d6:	4606      	mov	r6, r0
   287d8:	460d      	mov	r5, r1
	if (!err) {
   287da:	4614      	mov	r4, r2
   287dc:	b90a      	cbnz	r2, 287e2 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   287de:	f7ff ffe7 	bl	287b0 <att_sent>
	tx_meta_data_free(data);
   287e2:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   287e4:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   287e6:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   287ea:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   287ee:	f7f0 f8a1 	bl	18934 <tx_meta_data_free>
	if (!err && func) {
   287f2:	b904      	cbnz	r4, 287f6 <att_tx_complete+0x24>
   287f4:	b92f      	cbnz	r7, 28802 <att_tx_complete+0x30>
}
   287f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   287fa:	4649      	mov	r1, r9
   287fc:	4630      	mov	r0, r6
   287fe:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   28800:	3401      	adds	r4, #1
   28802:	b2a3      	uxth	r3, r4
   28804:	4598      	cmp	r8, r3
   28806:	d8f8      	bhi.n	287fa <att_tx_complete+0x28>
   28808:	e7f5      	b.n	287f6 <att_tx_complete+0x24>

0002880a <att_req_sent>:
{
   2880a:	b510      	push	{r4, lr}
   2880c:	460c      	mov	r4, r1
	if (!err) {
   2880e:	b90a      	cbnz	r2, 28814 <att_req_sent+0xa>
		att_sent(conn, user_data);
   28810:	f7ff ffce 	bl	287b0 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   28814:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   28816:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2881a:	b12b      	cbz	r3, 28828 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2881c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28820:	2300      	movs	r3, #0
   28822:	30b0      	adds	r0, #176	; 0xb0
   28824:	f7f9 f9bc 	bl	21ba0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   28828:	4620      	mov	r0, r4
}
   2882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2882e:	f7f0 b881 	b.w	18934 <tx_meta_data_free>

00028832 <att_cfm_sent>:
{
   28832:	b510      	push	{r4, lr}
   28834:	460c      	mov	r4, r1
	if (!err) {
   28836:	b90a      	cbnz	r2, 2883c <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   28838:	f7ff ffba 	bl	287b0 <att_sent>
   2883c:	6823      	ldr	r3, [r4, #0]
   2883e:	f3bf 8f5b 	dmb	ish
   28842:	3390      	adds	r3, #144	; 0x90
   28844:	e853 2f00 	ldrex	r2, [r3]
   28848:	f022 0202 	bic.w	r2, r2, #2
   2884c:	e843 2100 	strex	r1, r2, [r3]
   28850:	2900      	cmp	r1, #0
   28852:	d1f7      	bne.n	28844 <att_cfm_sent+0x12>
   28854:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28858:	4620      	mov	r0, r4
}
   2885a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2885e:	f7f0 b869 	b.w	18934 <tx_meta_data_free>

00028862 <att_rsp_sent>:
{
   28862:	b510      	push	{r4, lr}
   28864:	460c      	mov	r4, r1
	if (!err) {
   28866:	b90a      	cbnz	r2, 2886c <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   28868:	f7ff ffa2 	bl	287b0 <att_sent>
   2886c:	6823      	ldr	r3, [r4, #0]
   2886e:	f3bf 8f5b 	dmb	ish
   28872:	3390      	adds	r3, #144	; 0x90
   28874:	e853 2f00 	ldrex	r2, [r3]
   28878:	f022 0201 	bic.w	r2, r2, #1
   2887c:	e843 2100 	strex	r1, r2, [r3]
   28880:	2900      	cmp	r1, #0
   28882:	d1f7      	bne.n	28874 <att_rsp_sent+0x12>
   28884:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28888:	4620      	mov	r0, r4
}
   2888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2888e:	f7f0 b851 	b.w	18934 <tx_meta_data_free>

00028892 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   28892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28896:	4688      	mov	r8, r1
   28898:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2889a:	2101      	movs	r1, #1
   2889c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2889e:	4605      	mov	r5, r0
   288a0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   288a2:	f7f0 fb3b 	bl	18f1c <bt_att_chan_create_pdu>
	if (!buf) {
   288a6:	4604      	mov	r4, r0
   288a8:	b170      	cbz	r0, 288c8 <send_err_rsp.part.0+0x36>
   288aa:	2104      	movs	r1, #4
   288ac:	3008      	adds	r0, #8
   288ae:	f001 f99c 	bl	29bea <net_buf_simple_add>
	rsp->request = req;
   288b2:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   288b6:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   288b8:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   288bc:	4621      	mov	r1, r4
   288be:	4628      	mov	r0, r5
}
   288c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   288c4:	f7ff bdb1 	b.w	2842a <bt_att_chan_send_rsp>
}
   288c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000288cc <att_write_cmd>:
{
   288cc:	b530      	push	{r4, r5, lr}
   288ce:	460c      	mov	r4, r1
   288d0:	b085      	sub	sp, #20
   288d2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   288d4:	f101 0008 	add.w	r0, r1, #8
   288d8:	f001 f9be 	bl	29c58 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   288dc:	89a2      	ldrh	r2, [r4, #12]
   288de:	9202      	str	r2, [sp, #8]
   288e0:	68a2      	ldr	r2, [r4, #8]
   288e2:	9201      	str	r2, [sp, #4]
   288e4:	2200      	movs	r2, #0
   288e6:	4603      	mov	r3, r0
   288e8:	9200      	str	r2, [sp, #0]
   288ea:	4611      	mov	r1, r2
   288ec:	4628      	mov	r0, r5
   288ee:	f7f0 fc27 	bl	19140 <att_write_rsp>
}
   288f2:	b005      	add	sp, #20
   288f4:	bd30      	pop	{r4, r5, pc}

000288f6 <att_write_req>:
{
   288f6:	b530      	push	{r4, r5, lr}
   288f8:	460c      	mov	r4, r1
   288fa:	b085      	sub	sp, #20
   288fc:	4605      	mov	r5, r0
   288fe:	f101 0008 	add.w	r0, r1, #8
   28902:	f001 f9a9 	bl	29c58 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   28906:	89a2      	ldrh	r2, [r4, #12]
   28908:	9202      	str	r2, [sp, #8]
   2890a:	68a2      	ldr	r2, [r4, #8]
   2890c:	9201      	str	r2, [sp, #4]
   2890e:	2200      	movs	r2, #0
   28910:	4603      	mov	r3, r0
   28912:	9200      	str	r2, [sp, #0]
   28914:	2112      	movs	r1, #18
   28916:	2213      	movs	r2, #19
   28918:	4628      	mov	r0, r5
   2891a:	f7f0 fc11 	bl	19140 <att_write_rsp>
}
   2891e:	b005      	add	sp, #20
   28920:	bd30      	pop	{r4, r5, pc}

00028922 <att_read_blob_req>:
{
   28922:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   28924:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28926:	8813      	ldrh	r3, [r2, #0]
   28928:	8852      	ldrh	r2, [r2, #2]
   2892a:	9200      	str	r2, [sp, #0]
   2892c:	210c      	movs	r1, #12
   2892e:	220d      	movs	r2, #13
   28930:	f7f0 ff30 	bl	19794 <att_read_rsp>
}
   28934:	b003      	add	sp, #12
   28936:	f85d fb04 	ldr.w	pc, [sp], #4

0002893a <att_read_req>:
{
   2893a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2893c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2893e:	2200      	movs	r2, #0
   28940:	881b      	ldrh	r3, [r3, #0]
   28942:	9200      	str	r2, [sp, #0]
   28944:	210a      	movs	r1, #10
   28946:	220b      	movs	r2, #11
   28948:	f7f0 ff24 	bl	19794 <att_read_rsp>
}
   2894c:	b003      	add	sp, #12
   2894e:	f85d fb04 	ldr.w	pc, [sp], #4

00028952 <att_mtu_req>:
{
   28952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28954:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   28956:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2895a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2895c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2895e:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28960:	f7ff fc5c 	bl	2821c <atomic_test_bit>
   28964:	4604      	mov	r4, r0
   28966:	b9f0      	cbnz	r0, 289a6 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   28968:	689b      	ldr	r3, [r3, #8]
   2896a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2896c:	2e16      	cmp	r6, #22
   2896e:	d91c      	bls.n	289aa <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   28970:	4638      	mov	r0, r7
   28972:	2202      	movs	r2, #2
   28974:	f7f0 fc96 	bl	192a4 <bt_att_create_pdu>
	if (!pdu) {
   28978:	4607      	mov	r7, r0
   2897a:	b1c0      	cbz	r0, 289ae <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2897c:	2102      	movs	r1, #2
   2897e:	3008      	adds	r0, #8
   28980:	f001 f933 	bl	29bea <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   28984:	2341      	movs	r3, #65	; 0x41
   28986:	7003      	strb	r3, [r0, #0]
   28988:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2898a:	4639      	mov	r1, r7
   2898c:	4628      	mov	r0, r5
   2898e:	f7ff fd4c 	bl	2842a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28992:	2e41      	cmp	r6, #65	; 0x41
   28994:	bf28      	it	cs
   28996:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   28998:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2899a:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2899c:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2899e:	f7ff fc9b 	bl	282d8 <att_chan_mtu_updated>
	return 0;
   289a2:	4620      	mov	r0, r4
}
   289a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   289a6:	2006      	movs	r0, #6
   289a8:	e7fc      	b.n	289a4 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   289aa:	2004      	movs	r0, #4
   289ac:	e7fa      	b.n	289a4 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   289ae:	200e      	movs	r0, #14
   289b0:	e7f8      	b.n	289a4 <att_mtu_req+0x52>

000289b2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   289b2:	898a      	ldrh	r2, [r1, #12]
   289b4:	6889      	ldr	r1, [r1, #8]
   289b6:	2300      	movs	r3, #0
   289b8:	f7f1 b8a2 	b.w	19b00 <att_handle_rsp>

000289bc <bt_att_encrypt_change>:
	if (!att_chan->att) {
   289bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   289c0:	b570      	push	{r4, r5, r6, lr}
   289c2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   289c4:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   289c6:	2b00      	cmp	r3, #0
   289c8:	d039      	beq.n	28a3e <bt_att_encrypt_change+0x82>
	if (hci_status) {
   289ca:	b171      	cbz	r1, 289ea <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   289cc:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   289d0:	2b00      	cmp	r3, #0
   289d2:	d034      	beq.n	28a3e <bt_att_encrypt_change+0x82>
   289d4:	7c1b      	ldrb	r3, [r3, #16]
   289d6:	07da      	lsls	r2, r3, #31
   289d8:	d531      	bpl.n	28a3e <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   289da:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   289dc:	2200      	movs	r2, #0
   289de:	4630      	mov	r0, r6
   289e0:	4611      	mov	r1, r2
}
   289e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   289e6:	f7f1 b88b 	b.w	19b00 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   289ea:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   289ec:	4628      	mov	r0, r5
   289ee:	f7f2 fbd1 	bl	1b194 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   289f2:	7a6b      	ldrb	r3, [r5, #9]
   289f4:	2b01      	cmp	r3, #1
   289f6:	d022      	beq.n	28a3e <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   289f8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   289fc:	b1fd      	cbz	r5, 28a3e <bt_att_encrypt_change+0x82>
   289fe:	7c2b      	ldrb	r3, [r5, #16]
   28a00:	07db      	lsls	r3, r3, #31
   28a02:	d51c      	bpl.n	28a3e <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   28a04:	68eb      	ldr	r3, [r5, #12]
   28a06:	2b00      	cmp	r3, #0
   28a08:	d0e7      	beq.n	289da <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   28a0a:	696a      	ldr	r2, [r5, #20]
   28a0c:	7c69      	ldrb	r1, [r5, #17]
   28a0e:	4630      	mov	r0, r6
   28a10:	f7f0 fa84 	bl	18f1c <bt_att_chan_create_pdu>
	if (!buf) {
   28a14:	4604      	mov	r4, r0
   28a16:	b150      	cbz	r0, 28a2e <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   28a18:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   28a1c:	68eb      	ldr	r3, [r5, #12]
   28a1e:	4798      	blx	r3
   28a20:	b138      	cbz	r0, 28a32 <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28a22:	6960      	ldr	r0, [r4, #20]
   28a24:	f7ef ff86 	bl	18934 <tx_meta_data_free>
		net_buf_unref(buf);
   28a28:	4620      	mov	r0, r4
   28a2a:	f7f4 fe93 	bl	1d754 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   28a2e:	230e      	movs	r3, #14
   28a30:	e7d4      	b.n	289dc <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   28a32:	4621      	mov	r1, r4
   28a34:	4630      	mov	r0, r6
   28a36:	f7f0 f89f 	bl	18b78 <chan_send>
   28a3a:	2800      	cmp	r0, #0
   28a3c:	d1f1      	bne.n	28a22 <bt_att_encrypt_change+0x66>
}
   28a3e:	bd70      	pop	{r4, r5, r6, pc}

00028a40 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   28a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a42:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   28a44:	f7f0 f846 	bl	18ad4 <att_get>
	if (!att) {
   28a48:	4604      	mov	r4, r0
   28a4a:	b940      	cbnz	r0, 28a5e <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28a4c:	6968      	ldr	r0, [r5, #20]
   28a4e:	f7ef ff71 	bl	18934 <tx_meta_data_free>
		net_buf_unref(buf);
   28a52:	4628      	mov	r0, r5
   28a54:	f7f4 fe7e 	bl	1d754 <net_buf_unref>
		return -ENOTCONN;
   28a58:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   28a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   28a5e:	f100 060c 	add.w	r6, r0, #12
   28a62:	4629      	mov	r1, r5
   28a64:	4630      	mov	r0, r6
   28a66:	f001 f88d 	bl	29b84 <net_buf_put>
	return list->head;
   28a6a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28a6c:	4625      	mov	r5, r4
   28a6e:	b11c      	cbz	r4, 28a78 <bt_att_send+0x38>
	return node->next;
   28a70:	f855 49e0 	ldr.w	r4, [r5], #-224
   28a74:	b104      	cbz	r4, 28a78 <bt_att_send+0x38>
   28a76:	3ce0      	subs	r4, #224	; 0xe0
   28a78:	2300      	movs	r3, #0
   28a7a:	461f      	mov	r7, r3
   28a7c:	b13d      	cbz	r5, 28a8e <bt_att_send+0x4e>
		if (err == -ENOENT && prev &&
   28a7e:	1c9a      	adds	r2, r3, #2
   28a80:	d007      	beq.n	28a92 <bt_att_send+0x52>
		err = process_queue(chan, &att->tx_queue);
   28a82:	4631      	mov	r1, r6
   28a84:	4628      	mov	r0, r5
   28a86:	f7ff fcb7 	bl	283f8 <process_queue>
		if (!err) {
   28a8a:	4603      	mov	r3, r0
   28a8c:	b980      	cbnz	r0, 28ab0 <bt_att_send+0x70>
	return 0;
   28a8e:	2000      	movs	r0, #0
   28a90:	e7e4      	b.n	28a5c <bt_att_send+0x1c>
		if (err == -ENOENT && prev &&
   28a92:	2f00      	cmp	r7, #0
   28a94:	d0f5      	beq.n	28a82 <bt_att_send+0x42>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28a96:	2103      	movs	r1, #3
   28a98:	f105 0090 	add.w	r0, r5, #144	; 0x90
   28a9c:	f7ff fbbe 	bl	2821c <atomic_test_bit>
   28aa0:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28aa2:	f107 0090 	add.w	r0, r7, #144	; 0x90
   28aa6:	f7ff fbb9 	bl	2821c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   28aaa:	4282      	cmp	r2, r0
   28aac:	d1e9      	bne.n	28a82 <bt_att_send+0x42>
   28aae:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28ab0:	b13c      	cbz	r4, 28ac2 <bt_att_send+0x82>
   28ab2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   28ab6:	b102      	cbz	r2, 28aba <bt_att_send+0x7a>
   28ab8:	3ae0      	subs	r2, #224	; 0xe0
   28aba:	462f      	mov	r7, r5
   28abc:	4625      	mov	r5, r4
   28abe:	4614      	mov	r4, r2
   28ac0:	e7dc      	b.n	28a7c <bt_att_send+0x3c>
   28ac2:	4622      	mov	r2, r4
   28ac4:	e7f9      	b.n	28aba <bt_att_send+0x7a>

00028ac6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   28ac6:	b510      	push	{r4, lr}
   28ac8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   28aca:	f7f0 f803 	bl	18ad4 <att_get>
	if (!att) {
   28ace:	b160      	cbz	r0, 28aea <bt_att_req_send+0x24>
	parent->next = child;
   28ad0:	2300      	movs	r3, #0
   28ad2:	6023      	str	r3, [r4, #0]
	return list->tail;
   28ad4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   28ad6:	b92b      	cbnz	r3, 28ae4 <bt_att_req_send+0x1e>
	list->head = node;
   28ad8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   28adc:	f7ff fe03 	bl	286e6 <att_req_send_process>

	return 0;
   28ae0:	2000      	movs	r0, #0
}
   28ae2:	bd10      	pop	{r4, pc}
	parent->next = child;
   28ae4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28ae6:	6084      	str	r4, [r0, #8]
}
   28ae8:	e7f8      	b.n	28adc <bt_att_req_send+0x16>
		return -ENOTCONN;
   28aea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28aee:	e7f8      	b.n	28ae2 <bt_att_req_send+0x1c>

00028af0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   28af0:	2001      	movs	r0, #1
   28af2:	4770      	bx	lr

00028af4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   28af4:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   28af6:	f7ef ffed 	bl	18ad4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   28afa:	b198      	cbz	r0, 28b24 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   28afc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28afe:	b18b      	cbz	r3, 28b24 <bt_att_clear_out_of_sync_sent+0x30>
   28b00:	f3bf 8f5b 	dmb	ish
   28b04:	3be0      	subs	r3, #224	; 0xe0
   28b06:	f103 0290 	add.w	r2, r3, #144	; 0x90
   28b0a:	e852 1f00 	ldrex	r1, [r2]
   28b0e:	f021 0120 	bic.w	r1, r1, #32
   28b12:	e842 1000 	strex	r0, r1, [r2]
   28b16:	2800      	cmp	r0, #0
   28b18:	d1f7      	bne.n	28b0a <bt_att_clear_out_of_sync_sent+0x16>
   28b1a:	f3bf 8f5b 	dmb	ish
	return node->next;
   28b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   28b22:	e7ec      	b.n	28afe <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   28b24:	bd08      	pop	{r3, pc}

00028b26 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28b26:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28b28:	2104      	movs	r1, #4
   28b2a:	f7ff fb05 	bl	28138 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   28b2e:	b128      	cbz	r0, 28b3c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   28b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   28b34:	2105      	movs	r1, #5
   28b36:	308c      	adds	r0, #140	; 0x8c
   28b38:	f7ff bb70 	b.w	2821c <atomic_test_bit>
}
   28b3c:	bd08      	pop	{r3, pc}

00028b3e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   28b3e:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   28b40:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   28b44:	2201      	movs	r2, #1
   28b46:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28b48:	7403      	strb	r3, [r0, #16]
}
   28b4a:	4770      	bx	lr

00028b4c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   28b4c:	6010      	str	r0, [r2, #0]
}
   28b4e:	2000      	movs	r0, #0
   28b50:	4770      	bx	lr

00028b52 <gatt_ccc_changed>:
{
   28b52:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   28b54:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   28b56:	895a      	ldrh	r2, [r3, #10]
   28b58:	428a      	cmp	r2, r1
   28b5a:	d003      	beq.n	28b64 <gatt_ccc_changed+0x12>
		ccc->value = value;
   28b5c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   28b5e:	68db      	ldr	r3, [r3, #12]
   28b60:	b103      	cbz	r3, 28b64 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   28b62:	4718      	bx	r3
}
   28b64:	4770      	bx	lr

00028b66 <gatt_indicate_rsp>:
{
   28b66:	b510      	push	{r4, lr}
   28b68:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   28b6a:	68a3      	ldr	r3, [r4, #8]
{
   28b6c:	460a      	mov	r2, r1
	if (params->func) {
   28b6e:	b10b      	cbz	r3, 28b74 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   28b70:	4621      	mov	r1, r4
   28b72:	4798      	blx	r3
	params->_ref--;
   28b74:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28b76:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   28b78:	3b01      	subs	r3, #1
   28b7a:	b2db      	uxtb	r3, r3
   28b7c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28b7e:	b122      	cbz	r2, 28b8a <gatt_indicate_rsp+0x24>
   28b80:	b91b      	cbnz	r3, 28b8a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   28b82:	4620      	mov	r0, r4
}
   28b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   28b88:	4710      	bx	r2
}
   28b8a:	bd10      	pop	{r4, pc}

00028b8c <match_uuid>:
	data->attr = attr;
   28b8c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28b8e:	8091      	strh	r1, [r2, #4]
}
   28b90:	2000      	movs	r0, #0
   28b92:	4770      	bx	lr

00028b94 <ccc_set_cb>:
}
   28b94:	2000      	movs	r0, #0
   28b96:	4770      	bx	lr

00028b98 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28b98:	2207      	movs	r2, #7
   28b9a:	f7fe be48 	b.w	2782e <memcpy>

00028b9e <clear_ccc_cfg>:
{
   28b9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28ba0:	2500      	movs	r5, #0
{
   28ba2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28ba4:	4669      	mov	r1, sp
   28ba6:	3001      	adds	r0, #1
   28ba8:	9500      	str	r5, [sp, #0]
   28baa:	f8cd 5003 	str.w	r5, [sp, #3]
   28bae:	f7ff fff3 	bl	28b98 <bt_addr_le_copy>
	cfg->id = 0U;
   28bb2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   28bb4:	8125      	strh	r5, [r4, #8]
}
   28bb6:	b003      	add	sp, #12
   28bb8:	bd30      	pop	{r4, r5, pc}

00028bba <write_name>:
{
   28bba:	b570      	push	{r4, r5, r6, lr}
   28bbc:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28bbe:	2100      	movs	r1, #0
{
   28bc0:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28bc4:	9101      	str	r1, [sp, #4]
{
   28bc6:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28bc8:	a802      	add	r0, sp, #8
   28bca:	223d      	movs	r2, #61	; 0x3d
{
   28bcc:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28bce:	f7fe fe39 	bl	27844 <memset>
	if (offset >= sizeof(value)) {
   28bd2:	2d40      	cmp	r5, #64	; 0x40
   28bd4:	d80d      	bhi.n	28bf2 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   28bd6:	4425      	add	r5, r4
   28bd8:	2d40      	cmp	r5, #64	; 0x40
   28bda:	dc0d      	bgt.n	28bf8 <write_name+0x3e>
	memcpy(value, buf, len);
   28bdc:	4622      	mov	r2, r4
   28bde:	4631      	mov	r1, r6
   28be0:	a801      	add	r0, sp, #4
   28be2:	f7fe fe24 	bl	2782e <memcpy>
	bt_set_name(value);
   28be6:	a801      	add	r0, sp, #4
   28be8:	f7ee f93c 	bl	16e64 <bt_set_name>
}
   28bec:	4620      	mov	r0, r4
   28bee:	b012      	add	sp, #72	; 0x48
   28bf0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28bf2:	f06f 0406 	mvn.w	r4, #6
   28bf6:	e7f9      	b.n	28bec <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   28bf8:	f06f 040c 	mvn.w	r4, #12
   28bfc:	e7f6      	b.n	28bec <write_name+0x32>

00028bfe <gen_hash_m>:
{
   28bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28c00:	6807      	ldr	r7, [r0, #0]
   28c02:	783d      	ldrb	r5, [r7, #0]
{
   28c04:	b089      	sub	sp, #36	; 0x24
   28c06:	4606      	mov	r6, r0
   28c08:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28c0a:	b10d      	cbz	r5, 28c10 <gen_hash_m+0x12>
	switch (u16->val) {
   28c0c:	2501      	movs	r5, #1
   28c0e:	e014      	b.n	28c3a <gen_hash_m+0x3c>
   28c10:	887b      	ldrh	r3, [r7, #2]
   28c12:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   28c16:	d004      	beq.n	28c22 <gen_hash_m+0x24>
   28c18:	d812      	bhi.n	28c40 <gen_hash_m+0x42>
   28c1a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   28c1e:	2b03      	cmp	r3, #3
   28c20:	d8f4      	bhi.n	28c0c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   28c22:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28c26:	2202      	movs	r2, #2
   28c28:	f10d 010a 	add.w	r1, sp, #10
   28c2c:	4620      	mov	r0, r4
   28c2e:	f7fe fc5d 	bl	274ec <tc_cmac_update>
   28c32:	b9e0      	cbnz	r0, 28c6e <gen_hash_m+0x70>
			state->err = -EINVAL;
   28c34:	f06f 0315 	mvn.w	r3, #21
   28c38:	65a3      	str	r3, [r4, #88]	; 0x58
}
   28c3a:	4628      	mov	r0, r5
   28c3c:	b009      	add	sp, #36	; 0x24
   28c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   28c40:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   28c44:	33ff      	adds	r3, #255	; 0xff
   28c46:	b29b      	uxth	r3, r3
   28c48:	2b04      	cmp	r3, #4
   28c4a:	d8df      	bhi.n	28c0c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   28c4c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28c50:	2202      	movs	r2, #2
   28c52:	f10d 010a 	add.w	r1, sp, #10
   28c56:	4620      	mov	r0, r4
   28c58:	f7fe fc48 	bl	274ec <tc_cmac_update>
   28c5c:	2800      	cmp	r0, #0
   28c5e:	d0e9      	beq.n	28c34 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   28c60:	887b      	ldrh	r3, [r7, #2]
   28c62:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28c66:	2202      	movs	r2, #2
   28c68:	f10d 010a 	add.w	r1, sp, #10
   28c6c:	e016      	b.n	28c9c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   28c6e:	887b      	ldrh	r3, [r7, #2]
   28c70:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28c74:	2202      	movs	r2, #2
   28c76:	f10d 010a 	add.w	r1, sp, #10
   28c7a:	4620      	mov	r0, r4
   28c7c:	f7fe fc36 	bl	274ec <tc_cmac_update>
   28c80:	2800      	cmp	r0, #0
   28c82:	d0d7      	beq.n	28c34 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   28c84:	2000      	movs	r0, #0
   28c86:	aa03      	add	r2, sp, #12
   28c88:	6877      	ldr	r7, [r6, #4]
   28c8a:	9000      	str	r0, [sp, #0]
   28c8c:	2313      	movs	r3, #19
   28c8e:	4631      	mov	r1, r6
   28c90:	47b8      	blx	r7
		if (len < 0) {
   28c92:	1e02      	subs	r2, r0, #0
   28c94:	da01      	bge.n	28c9a <gen_hash_m+0x9c>
			state->err = len;
   28c96:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28c98:	e7cf      	b.n	28c3a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   28c9a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28c9c:	4620      	mov	r0, r4
   28c9e:	f7fe fc25 	bl	274ec <tc_cmac_update>
   28ca2:	2800      	cmp	r0, #0
   28ca4:	d1b2      	bne.n	28c0c <gen_hash_m+0xe>
   28ca6:	e7c5      	b.n	28c34 <gen_hash_m+0x36>

00028ca8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28ca8:	f3bf 8f5b 	dmb	ish
   28cac:	6800      	ldr	r0, [r0, #0]
   28cae:	f3bf 8f5b 	dmb	ish
}
   28cb2:	4770      	bx	lr

00028cb4 <atomic_or>:
{
   28cb4:	4603      	mov	r3, r0
}
   28cb6:	f3bf 8f5b 	dmb	ish
   28cba:	e853 0f00 	ldrex	r0, [r3]
   28cbe:	ea40 0201 	orr.w	r2, r0, r1
   28cc2:	e843 2c00 	strex	ip, r2, [r3]
   28cc6:	f1bc 0f00 	cmp.w	ip, #0
   28cca:	d1f6      	bne.n	28cba <atomic_or+0x6>
   28ccc:	f3bf 8f5b 	dmb	ish
   28cd0:	4770      	bx	lr

00028cd2 <atomic_and>:
{
   28cd2:	4603      	mov	r3, r0
}
   28cd4:	f3bf 8f5b 	dmb	ish
   28cd8:	e853 0f00 	ldrex	r0, [r3]
   28cdc:	ea00 0201 	and.w	r2, r0, r1
   28ce0:	e843 2c00 	strex	ip, r2, [r3]
   28ce4:	f1bc 0f00 	cmp.w	ip, #0
   28ce8:	d1f6      	bne.n	28cd8 <atomic_and+0x6>
   28cea:	f3bf 8f5b 	dmb	ish
   28cee:	4770      	bx	lr

00028cf0 <z_log_msg_static_create.constprop.0>:
   28cf0:	2300      	movs	r3, #0
   28cf2:	f7ea be47 	b.w	13984 <z_impl_z_log_msg_static_create>

00028cf6 <clear_cf_cfg>:
{
   28cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28cf8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28cfa:	2500      	movs	r5, #0
   28cfc:	4669      	mov	r1, sp
   28cfe:	3001      	adds	r0, #1
   28d00:	9500      	str	r5, [sp, #0]
   28d02:	f8cd 5003 	str.w	r5, [sp, #3]
   28d06:	f7ff ff47 	bl	28b98 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   28d0a:	f104 0008 	add.w	r0, r4, #8
   28d0e:	2201      	movs	r2, #1
   28d10:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28d12:	340c      	adds	r4, #12
   28d14:	f7fe fd96 	bl	27844 <memset>
   28d18:	f3bf 8f5b 	dmb	ish
   28d1c:	e854 3f00 	ldrex	r3, [r4]
   28d20:	e844 5200 	strex	r2, r5, [r4]
   28d24:	2a00      	cmp	r2, #0
   28d26:	d1f9      	bne.n	28d1c <clear_cf_cfg+0x26>
   28d28:	f3bf 8f5b 	dmb	ish
}
   28d2c:	b003      	add	sp, #12
   28d2e:	bd30      	pop	{r4, r5, pc}

00028d30 <read_ppcp>:
{
   28d30:	b513      	push	{r0, r1, r4, lr}
   28d32:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28d34:	2218      	movs	r2, #24
{
   28d36:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28d3a:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   28d3e:	2228      	movs	r2, #40	; 0x28
   28d40:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   28d44:	2200      	movs	r2, #0
   28d46:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   28d4a:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   28d4c:	f04f 022a 	mov.w	r2, #42	; 0x2a
   28d50:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   28d54:	d80b      	bhi.n	28d6e <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   28d56:	f1c1 0408 	rsb	r4, r1, #8
   28d5a:	429c      	cmp	r4, r3
   28d5c:	bfa8      	it	ge
   28d5e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28d60:	4622      	mov	r2, r4
   28d62:	4469      	add	r1, sp
   28d64:	f7fe fd63 	bl	2782e <memcpy>
}
   28d68:	4620      	mov	r0, r4
   28d6a:	b002      	add	sp, #8
   28d6c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28d6e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   28d72:	e7f9      	b.n	28d68 <read_ppcp+0x38>

00028d74 <read_appearance>:
{
   28d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28d76:	4615      	mov	r5, r2
   28d78:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28d7c:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28d7e:	f7fe ff46 	bl	27c0e <bt_get_appearance>
	if (offset > value_len) {
   28d82:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28d84:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28d88:	d80e      	bhi.n	28da8 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   28d8a:	f1c6 0402 	rsb	r4, r6, #2
   28d8e:	42bc      	cmp	r4, r7
   28d90:	bfa8      	it	ge
   28d92:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28d94:	f10d 0306 	add.w	r3, sp, #6
   28d98:	4622      	mov	r2, r4
   28d9a:	1999      	adds	r1, r3, r6
   28d9c:	4628      	mov	r0, r5
   28d9e:	f7fe fd46 	bl	2782e <memcpy>
}
   28da2:	4620      	mov	r0, r4
   28da4:	b003      	add	sp, #12
   28da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28da8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28dac:	e7f9      	b.n	28da2 <read_appearance+0x2e>

00028dae <read_name>:
{
   28dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28db2:	4698      	mov	r8, r3
   28db4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   28db8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   28dba:	f7ee f88d 	bl	16ed8 <bt_get_name>
   28dbe:	4607      	mov	r7, r0
				 strlen(name));
   28dc0:	f7fe fcdf 	bl	27782 <strlen>
	if (offset > value_len) {
   28dc4:	b283      	uxth	r3, r0
   28dc6:	42b3      	cmp	r3, r6
   28dc8:	d30c      	bcc.n	28de4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   28dca:	1b9c      	subs	r4, r3, r6
   28dcc:	4544      	cmp	r4, r8
   28dce:	bfa8      	it	ge
   28dd0:	4644      	movge	r4, r8
   28dd2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28dd4:	4622      	mov	r2, r4
   28dd6:	19b9      	adds	r1, r7, r6
   28dd8:	4628      	mov	r0, r5
   28dda:	f7fe fd28 	bl	2782e <memcpy>
}
   28dde:	4620      	mov	r0, r4
   28de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28de4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28de8:	e7f9      	b.n	28dde <read_name+0x30>

00028dea <cf_read>:
{
   28dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28dec:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28dee:	2300      	movs	r3, #0
{
   28df0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   28df4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28df8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28dfa:	f7f0 ff4b 	bl	19c94 <find_cf_cfg>
	if (cfg) {
   28dfe:	b128      	cbz	r0, 28e0c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   28e00:	f100 0108 	add.w	r1, r0, #8
   28e04:	2201      	movs	r2, #1
   28e06:	a801      	add	r0, sp, #4
   28e08:	f7fe fd11 	bl	2782e <memcpy>
	if (offset > value_len) {
   28e0c:	2e01      	cmp	r6, #1
   28e0e:	d80d      	bhi.n	28e2c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28e10:	f1c6 0401 	rsb	r4, r6, #1
   28e14:	42bc      	cmp	r4, r7
   28e16:	bfa8      	it	ge
   28e18:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28e1a:	ab01      	add	r3, sp, #4
   28e1c:	4622      	mov	r2, r4
   28e1e:	1999      	adds	r1, r3, r6
   28e20:	4628      	mov	r0, r5
   28e22:	f7fe fd04 	bl	2782e <memcpy>
}
   28e26:	4620      	mov	r0, r4
   28e28:	b003      	add	sp, #12
   28e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28e2c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28e30:	e7f9      	b.n	28e26 <cf_read+0x3c>

00028e32 <bt_gatt_attr_read_service>:
{
   28e32:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   28e34:	68c9      	ldr	r1, [r1, #12]
{
   28e36:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   28e3a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   28e3c:	780b      	ldrb	r3, [r1, #0]
{
   28e3e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28e40:	b993      	cbnz	r3, 28e68 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   28e42:	884b      	ldrh	r3, [r1, #2]
   28e44:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   28e48:	2d02      	cmp	r5, #2
   28e4a:	d819      	bhi.n	28e80 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28e4c:	f1c5 0202 	rsb	r2, r5, #2
   28e50:	4294      	cmp	r4, r2
   28e52:	bfa8      	it	ge
   28e54:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28e56:	f10d 0306 	add.w	r3, sp, #6
   28e5a:	4622      	mov	r2, r4
   28e5c:	1959      	adds	r1, r3, r5
   28e5e:	f7fe fce6 	bl	2782e <memcpy>
}
   28e62:	4620      	mov	r0, r4
   28e64:	b003      	add	sp, #12
   28e66:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   28e68:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   28e6a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28e6e:	d807      	bhi.n	28e80 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28e70:	f1c5 0210 	rsb	r2, r5, #16
   28e74:	4294      	cmp	r4, r2
   28e76:	bfa8      	it	ge
   28e78:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28e7a:	4622      	mov	r2, r4
   28e7c:	4429      	add	r1, r5
   28e7e:	e7ee      	b.n	28e5e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28e80:	f06f 0406 	mvn.w	r4, #6
   28e84:	e7ed      	b.n	28e62 <bt_gatt_attr_read_service+0x30>

00028e86 <ccc_find_cfg>:
{
   28e86:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   28e88:	7803      	ldrb	r3, [r0, #0]
   28e8a:	4293      	cmp	r3, r2
{
   28e8c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   28e8e:	d001      	beq.n	28e94 <ccc_find_cfg+0xe>
	return NULL;
   28e90:	2000      	movs	r0, #0
}
   28e92:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   28e94:	2207      	movs	r2, #7
   28e96:	3001      	adds	r0, #1
   28e98:	f7fe fca0 	bl	277dc <memcmp>
		if (id == ccc->cfg[i].id &&
   28e9c:	2800      	cmp	r0, #0
   28e9e:	d1f7      	bne.n	28e90 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   28ea0:	4620      	mov	r0, r4
   28ea2:	e7f6      	b.n	28e92 <ccc_find_cfg+0xc>

00028ea4 <find_ccc_cfg>:
{
   28ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28ea6:	460c      	mov	r4, r1
						    &cfg->peer)) {
   28ea8:	1c4d      	adds	r5, r1, #1
		if (conn) {
   28eaa:	b148      	cbz	r0, 28ec0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   28eac:	7809      	ldrb	r1, [r1, #0]
   28eae:	462a      	mov	r2, r5
   28eb0:	f7ff f879 	bl	27fa6 <bt_conn_is_peer_addr_le>
	return NULL;
   28eb4:	2800      	cmp	r0, #0
   28eb6:	bf08      	it	eq
   28eb8:	2400      	moveq	r4, #0
}
   28eba:	4620      	mov	r0, r4
   28ebc:	b003      	add	sp, #12
   28ebe:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   28ec0:	9000      	str	r0, [sp, #0]
   28ec2:	2207      	movs	r2, #7
   28ec4:	f8cd 0003 	str.w	r0, [sp, #3]
   28ec8:	4669      	mov	r1, sp
   28eca:	4628      	mov	r0, r5
   28ecc:	f7fe fc86 	bl	277dc <memcmp>
	return NULL;
   28ed0:	2800      	cmp	r0, #0
   28ed2:	bf18      	it	ne
   28ed4:	2400      	movne	r4, #0
   28ed6:	e7f0      	b.n	28eba <find_ccc_cfg+0x16>

00028ed8 <bt_gatt_attr_read_ccc>:
{
   28ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   28eda:	68c9      	ldr	r1, [r1, #12]
{
   28edc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28ee0:	4615      	mov	r5, r2
   28ee2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   28ee4:	f7ff ffde 	bl	28ea4 <find_ccc_cfg>
	if (cfg) {
   28ee8:	b100      	cbz	r0, 28eec <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   28eea:	8900      	ldrh	r0, [r0, #8]
   28eec:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28ef0:	2e02      	cmp	r6, #2
   28ef2:	d80e      	bhi.n	28f12 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   28ef4:	f1c6 0402 	rsb	r4, r6, #2
   28ef8:	42bc      	cmp	r4, r7
   28efa:	bfa8      	it	ge
   28efc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28efe:	f10d 0306 	add.w	r3, sp, #6
   28f02:	4622      	mov	r2, r4
   28f04:	1999      	adds	r1, r3, r6
   28f06:	4628      	mov	r0, r5
   28f08:	f7fe fc91 	bl	2782e <memcpy>
}
   28f0c:	4620      	mov	r0, r4
   28f0e:	b003      	add	sp, #12
   28f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28f12:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28f16:	e7f9      	b.n	28f0c <bt_gatt_attr_read_ccc+0x34>

00028f18 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28f18:	2a02      	cmp	r2, #2
{
   28f1a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28f1c:	d108      	bne.n	28f30 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28f1e:	2300      	movs	r3, #0
   28f20:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28f24:	461a      	mov	r2, r3
   28f26:	7a00      	ldrb	r0, [r0, #8]
   28f28:	f7f1 f9d2 	bl	1a2d0 <sc_save>
}
   28f2c:	2002      	movs	r0, #2
   28f2e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28f30:	f7f1 fa4e 	bl	1a3d0 <sc_clear>
   28f34:	e7fa      	b.n	28f2c <sc_ccc_cfg_write+0x14>

00028f36 <sc_restore_rsp>:
{
   28f36:	b538      	push	{r3, r4, r5, lr}
   28f38:	4604      	mov	r4, r0
   28f3a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   28f3c:	f7ff fdd8 	bl	28af0 <bt_att_fixed_chan_only>
   28f40:	b150      	cbz	r0, 28f58 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   28f42:	4620      	mov	r0, r4
   28f44:	f7f0 fea6 	bl	19c94 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   28f48:	b130      	cbz	r0, 28f58 <sc_restore_rsp+0x22>
   28f4a:	7a03      	ldrb	r3, [r0, #8]
   28f4c:	07db      	lsls	r3, r3, #31
   28f4e:	d503      	bpl.n	28f58 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28f50:	2101      	movs	r1, #1
   28f52:	300c      	adds	r0, #12
   28f54:	f7ff feae 	bl	28cb4 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   28f58:	b985      	cbnz	r5, 28f7c <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28f5a:	7a20      	ldrb	r0, [r4, #8]
   28f5c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   28f60:	f7f1 f994 	bl	1a28c <find_sc_cfg>
		if (sc_cfg) {
   28f64:	4604      	mov	r4, r0
   28f66:	b148      	cbz	r0, 28f7c <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   28f68:	4629      	mov	r1, r5
   28f6a:	2204      	movs	r2, #4
   28f6c:	3008      	adds	r0, #8
   28f6e:	f7fe fc69 	bl	27844 <memset>
		sc_store(cfg);
   28f72:	4620      	mov	r0, r4
}
   28f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   28f78:	f7f0 beec 	b.w	19d54 <sc_store>
}
   28f7c:	bd38      	pop	{r3, r4, r5, pc}

00028f7e <bt_gatt_attr_read>:
{
   28f7e:	b538      	push	{r3, r4, r5, lr}
   28f80:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28f84:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   28f88:	42a9      	cmp	r1, r5
{
   28f8a:	4610      	mov	r0, r2
	if (offset > value_len) {
   28f8c:	d80b      	bhi.n	28fa6 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28f8e:	1a6d      	subs	r5, r5, r1
   28f90:	429d      	cmp	r5, r3
   28f92:	bfa8      	it	ge
   28f94:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28f96:	9b05      	ldr	r3, [sp, #20]
   28f98:	b2ad      	uxth	r5, r5
   28f9a:	462a      	mov	r2, r5
   28f9c:	4419      	add	r1, r3
   28f9e:	f7fe fc46 	bl	2782e <memcpy>
}
   28fa2:	4628      	mov	r0, r5
   28fa4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28fa6:	f06f 0506 	mvn.w	r5, #6
   28faa:	e7fa      	b.n	28fa2 <bt_gatt_attr_read+0x24>

00028fac <bt_gatt_attr_value_handle>:
{
   28fac:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28fae:	4604      	mov	r4, r0
   28fb0:	b910      	cbnz	r0, 28fb8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28fb2:	2000      	movs	r0, #0
}
   28fb4:	b002      	add	sp, #8
   28fb6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28fb8:	2300      	movs	r3, #0
   28fba:	f88d 3004 	strb.w	r3, [sp, #4]
   28fbe:	6800      	ldr	r0, [r0, #0]
   28fc0:	f642 0303 	movw	r3, #10243	; 0x2803
   28fc4:	a901      	add	r1, sp, #4
   28fc6:	f8ad 3006 	strh.w	r3, [sp, #6]
   28fca:	f7fe fcc9 	bl	27960 <bt_uuid_cmp>
   28fce:	2800      	cmp	r0, #0
   28fd0:	d1ef      	bne.n	28fb2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28fd2:	68e3      	ldr	r3, [r4, #12]
   28fd4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28fd6:	2800      	cmp	r0, #0
   28fd8:	d1ec      	bne.n	28fb4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28fda:	4620      	mov	r0, r4
   28fdc:	f7f1 fb98 	bl	1a710 <bt_gatt_attr_get_handle>
   28fe0:	3001      	adds	r0, #1
   28fe2:	b280      	uxth	r0, r0
	return handle;
   28fe4:	e7e6      	b.n	28fb4 <bt_gatt_attr_value_handle+0x8>

00028fe6 <bt_gatt_attr_read_chrc>:
{
   28fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28fe8:	68cf      	ldr	r7, [r1, #12]
{
   28fea:	b087      	sub	sp, #28
   28fec:	4608      	mov	r0, r1
   28fee:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   28ff0:	79bb      	ldrb	r3, [r7, #6]
   28ff2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28ff6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   28ffa:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28ffc:	f7ff ffd6 	bl	28fac <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29000:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29002:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29006:	780b      	ldrb	r3, [r1, #0]
   29008:	b99b      	cbnz	r3, 29032 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2900a:	884b      	ldrh	r3, [r1, #2]
   2900c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   29010:	2105      	movs	r1, #5
	if (offset > value_len) {
   29012:	42b1      	cmp	r1, r6
   29014:	d315      	bcc.n	29042 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   29016:	1b89      	subs	r1, r1, r6
   29018:	42a1      	cmp	r1, r4
   2901a:	bfa8      	it	ge
   2901c:	4621      	movge	r1, r4
   2901e:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   29020:	ab01      	add	r3, sp, #4
   29022:	4622      	mov	r2, r4
   29024:	1999      	adds	r1, r3, r6
   29026:	4628      	mov	r0, r5
   29028:	f7fe fc01 	bl	2782e <memcpy>
}
   2902c:	4620      	mov	r0, r4
   2902e:	b007      	add	sp, #28
   29030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29032:	3101      	adds	r1, #1
   29034:	2210      	movs	r2, #16
   29036:	f10d 0007 	add.w	r0, sp, #7
   2903a:	f7fe fbf8 	bl	2782e <memcpy>
		value_len += 16U;
   2903e:	2113      	movs	r1, #19
   29040:	e7e7      	b.n	29012 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29042:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29046:	e7f1      	b.n	2902c <bt_gatt_attr_read_chrc+0x46>

00029048 <bt_gatt_foreach_attr>:
{
   29048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2904a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2904e:	2300      	movs	r3, #0
   29050:	9300      	str	r3, [sp, #0]
   29052:	461a      	mov	r2, r3
   29054:	f7f1 fb8c 	bl	1a770 <bt_gatt_foreach_attr_type>
}
   29058:	b005      	add	sp, #20
   2905a:	f85d fb04 	ldr.w	pc, [sp], #4

0002905e <bt_gatt_check_perm>:
{
   2905e:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29060:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29062:	8a4c      	ldrh	r4, [r1, #18]
{
   29064:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   29066:	d504      	bpl.n	29072 <bt_gatt_check_perm+0x14>
   29068:	f014 0f95 	tst.w	r4, #149	; 0x95
   2906c:	d026      	beq.n	290bc <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2906e:	684b      	ldr	r3, [r1, #4]
   29070:	b323      	cbz	r3, 290bc <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29072:	0790      	lsls	r0, r2, #30
   29074:	d504      	bpl.n	29080 <bt_gatt_check_perm+0x22>
   29076:	f414 7f95 	tst.w	r4, #298	; 0x12a
   2907a:	d021      	beq.n	290c0 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2907c:	688b      	ldr	r3, [r1, #8]
   2907e:	b1fb      	cbz	r3, 290c0 <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   29080:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   29082:	f414 7fc0 	tst.w	r4, #384	; 0x180
   29086:	d007      	beq.n	29098 <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29088:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2908c:	b90b      	cbnz	r3, 29092 <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   2908e:	2005      	movs	r0, #5
}
   29090:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29092:	7b5b      	ldrb	r3, [r3, #13]
   29094:	06db      	lsls	r3, r3, #27
   29096:	d5fa      	bpl.n	2908e <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29098:	f014 0f30 	tst.w	r4, #48	; 0x30
   2909c:	d108      	bne.n	290b0 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2909e:	f014 000c 	ands.w	r0, r4, #12
   290a2:	d0f5      	beq.n	29090 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   290a4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   290a6:	2b00      	cmp	r3, #0
   290a8:	bf14      	ite	ne
   290aa:	2000      	movne	r0, #0
   290ac:	200f      	moveq	r0, #15
   290ae:	e7ef      	b.n	29090 <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   290b0:	4628      	mov	r0, r5
   290b2:	f7fe ff76 	bl	27fa2 <bt_conn_get_security>
   290b6:	2802      	cmp	r0, #2
   290b8:	d8f1      	bhi.n	2909e <bt_gatt_check_perm+0x40>
   290ba:	e7e8      	b.n	2908e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   290bc:	2002      	movs	r0, #2
   290be:	e7e7      	b.n	29090 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   290c0:	2003      	movs	r0, #3
   290c2:	e7e5      	b.n	29090 <bt_gatt_check_perm+0x32>

000290c4 <bt_gatt_is_subscribed>:
{
   290c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   290c8:	7b43      	ldrb	r3, [r0, #13]
   290ca:	2b07      	cmp	r3, #7
{
   290cc:	4606      	mov	r6, r0
   290ce:	460c      	mov	r4, r1
   290d0:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   290d2:	d003      	beq.n	290dc <bt_gatt_is_subscribed+0x18>
		return false;
   290d4:	2000      	movs	r0, #0
}
   290d6:	b004      	add	sp, #16
   290d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   290dc:	2300      	movs	r3, #0
   290de:	f88d 300c 	strb.w	r3, [sp, #12]
   290e2:	6820      	ldr	r0, [r4, #0]
   290e4:	f642 0303 	movw	r3, #10243	; 0x2803
   290e8:	a903      	add	r1, sp, #12
   290ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   290ee:	f7fe fc37 	bl	27960 <bt_uuid_cmp>
   290f2:	b940      	cbnz	r0, 29106 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   290f4:	68e3      	ldr	r3, [r4, #12]
   290f6:	7999      	ldrb	r1, [r3, #6]
   290f8:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   290fc:	d0eb      	beq.n	290d6 <bt_gatt_is_subscribed+0x12>
		attr = bt_gatt_attr_next(attr);
   290fe:	4620      	mov	r0, r4
   29100:	f7f1 fd0e 	bl	1ab20 <bt_gatt_attr_next>
   29104:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   29106:	2300      	movs	r3, #0
   29108:	6820      	ldr	r0, [r4, #0]
   2910a:	f88d 300c 	strb.w	r3, [sp, #12]
   2910e:	a903      	add	r1, sp, #12
   29110:	f642 1302 	movw	r3, #10498	; 0x2902
   29114:	f8ad 300e 	strh.w	r3, [sp, #14]
   29118:	f7fe fc22 	bl	27960 <bt_uuid_cmp>
   2911c:	b118      	cbz	r0, 29126 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2911e:	4620      	mov	r0, r4
   29120:	f7f1 fcfe 	bl	1ab20 <bt_gatt_attr_next>
   29124:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   29126:	2500      	movs	r5, #0
   29128:	f642 1802 	movw	r8, #10498	; 0x2902
   2912c:	6820      	ldr	r0, [r4, #0]
   2912e:	f88d 5000 	strb.w	r5, [sp]
   29132:	4669      	mov	r1, sp
   29134:	f8ad 8002 	strh.w	r8, [sp, #2]
   29138:	f7fe fc12 	bl	27960 <bt_uuid_cmp>
   2913c:	b9d8      	cbnz	r0, 29176 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2913e:	6820      	ldr	r0, [r4, #0]
   29140:	2500      	movs	r5, #0
   29142:	f642 1302 	movw	r3, #10498	; 0x2902
   29146:	a903      	add	r1, sp, #12
   29148:	f88d 500c 	strb.w	r5, [sp, #12]
   2914c:	f8ad 300e 	strh.w	r3, [sp, #14]
   29150:	f7fe fc06 	bl	27960 <bt_uuid_cmp>
   29154:	2800      	cmp	r0, #0
   29156:	d1bd      	bne.n	290d4 <bt_gatt_is_subscribed+0x10>
	ccc = attr->user_data;
   29158:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2915a:	4622      	mov	r2, r4
   2915c:	4630      	mov	r0, r6
   2915e:	f812 1b01 	ldrb.w	r1, [r2], #1
   29162:	f7fe ff20 	bl	27fa6 <bt_conn_is_peer_addr_le>
   29166:	2800      	cmp	r0, #0
   29168:	d0b4      	beq.n	290d4 <bt_gatt_is_subscribed+0x10>
   2916a:	8923      	ldrh	r3, [r4, #8]
   2916c:	421f      	tst	r7, r3
   2916e:	bf14      	ite	ne
   29170:	2001      	movne	r0, #1
   29172:	2000      	moveq	r0, #0
   29174:	e7af      	b.n	290d6 <bt_gatt_is_subscribed+0x12>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   29176:	6820      	ldr	r0, [r4, #0]
   29178:	f88d 5004 	strb.w	r5, [sp, #4]
   2917c:	f642 0303 	movw	r3, #10243	; 0x2803
   29180:	a901      	add	r1, sp, #4
   29182:	f8ad 3006 	strh.w	r3, [sp, #6]
   29186:	f7fe fbeb 	bl	27960 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2918a:	2800      	cmp	r0, #0
   2918c:	d0d7      	beq.n	2913e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2918e:	6820      	ldr	r0, [r4, #0]
   29190:	f88d 5008 	strb.w	r5, [sp, #8]
   29194:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29198:	a902      	add	r1, sp, #8
   2919a:	f8ad 300a 	strh.w	r3, [sp, #10]
   2919e:	f7fe fbdf 	bl	27960 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   291a2:	2800      	cmp	r0, #0
   291a4:	d0cb      	beq.n	2913e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   291a6:	6820      	ldr	r0, [r4, #0]
   291a8:	f88d 500c 	strb.w	r5, [sp, #12]
   291ac:	f642 0301 	movw	r3, #10241	; 0x2801
   291b0:	a903      	add	r1, sp, #12
   291b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   291b6:	f7fe fbd3 	bl	27960 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   291ba:	2800      	cmp	r0, #0
   291bc:	d0bf      	beq.n	2913e <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   291be:	4620      	mov	r0, r4
   291c0:	f7f1 fcae 	bl	1ab20 <bt_gatt_attr_next>
		if (!attr) {
   291c4:	4604      	mov	r4, r0
   291c6:	2800      	cmp	r0, #0
   291c8:	d1b0      	bne.n	2912c <bt_gatt_is_subscribed+0x68>
   291ca:	e783      	b.n	290d4 <bt_gatt_is_subscribed+0x10>

000291cc <bt_gatt_change_aware>:
{
   291cc:	b570      	push	{r4, r5, r6, lr}
   291ce:	4606      	mov	r6, r0
   291d0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   291d2:	f7f0 fd5f 	bl	19c94 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   291d6:	b910      	cbnz	r0, 291de <bt_gatt_change_aware+0x12>
		return true;
   291d8:	2401      	movs	r4, #1
}
   291da:	4620      	mov	r0, r4
   291dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   291de:	7a03      	ldrb	r3, [r0, #8]
   291e0:	07da      	lsls	r2, r3, #31
   291e2:	d5f9      	bpl.n	291d8 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   291e4:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   291e8:	4628      	mov	r0, r5
   291ea:	f7ff fd5d 	bl	28ca8 <atomic_get>
   291ee:	07c3      	lsls	r3, r0, #31
   291f0:	d4f2      	bmi.n	291d8 <bt_gatt_change_aware+0xc>
	if (!req) {
   291f2:	b90c      	cbnz	r4, 291f8 <bt_gatt_change_aware+0x2c>
		return false;
   291f4:	2400      	movs	r4, #0
   291f6:	e7f0      	b.n	291da <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   291f8:	f06f 0102 	mvn.w	r1, #2
   291fc:	4628      	mov	r0, r5
   291fe:	f7ff fd68 	bl	28cd2 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29202:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   29206:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29208:	d006      	beq.n	29218 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2920a:	f7ff fc73 	bl	28af4 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2920e:	2101      	movs	r1, #1
   29210:	4628      	mov	r0, r5
   29212:	f7ff fd4f 	bl	28cb4 <atomic_or>
}
   29216:	e7e0      	b.n	291da <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   29218:	f7ff fc6a 	bl	28af0 <bt_att_fixed_chan_only>
   2921c:	2800      	cmp	r0, #0
   2921e:	d0e9      	beq.n	291f4 <bt_gatt_change_aware+0x28>
   29220:	4630      	mov	r0, r6
   29222:	f7ff fc80 	bl	28b26 <bt_att_out_of_sync_sent_on_fixed>
   29226:	4604      	mov	r4, r0
   29228:	2800      	cmp	r0, #0
   2922a:	d0e3      	beq.n	291f4 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2922c:	f06f 0102 	mvn.w	r1, #2
   29230:	4628      	mov	r0, r5
   29232:	f7ff fd4e 	bl	28cd2 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   29236:	4630      	mov	r0, r6
   29238:	e7e7      	b.n	2920a <bt_gatt_change_aware+0x3e>

0002923a <ccc_delayed_store>:
{
   2923a:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2923c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   29240:	4605      	mov	r5, r0
		if (!conn) {
   29242:	b194      	cbz	r4, 2926a <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29244:	f104 0688 	add.w	r6, r4, #136	; 0x88
   29248:	7a20      	ldrb	r0, [r4, #8]
   2924a:	4631      	mov	r1, r6
   2924c:	f7fe fce2 	bl	27c14 <bt_addr_le_is_bonded>
   29250:	b158      	cbz	r0, 2926a <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   29252:	2300      	movs	r3, #0
   29254:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   29258:	7a20      	ldrb	r0, [r4, #8]
   2925a:	4631      	mov	r1, r6
   2925c:	f7f1 ffaa 	bl	1b1b4 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   29260:	4620      	mov	r0, r4
}
   29262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   29266:	f7fe be03 	b.w	27e70 <bt_conn_unref>
}
   2926a:	bd70      	pop	{r4, r5, r6, pc}

0002926c <sys_memcpy_swap>:
	psrc += length - 1;
   2926c:	1e53      	subs	r3, r2, #1
   2926e:	4419      	add	r1, r3
	for (; length > 0; length--) {
   29270:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   29272:	f811 3901 	ldrb.w	r3, [r1], #-1
   29276:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2927a:	4290      	cmp	r0, r2
   2927c:	d1f9      	bne.n	29272 <sys_memcpy_swap+0x6>
}
   2927e:	4770      	bx	lr

00029280 <sys_mem_swap>:
{
   29280:	b510      	push	{r4, lr}
   29282:	1843      	adds	r3, r0, r1
   29284:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2928c:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2928e:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   29292:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   29294:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   29296:	d1f7      	bne.n	29288 <sys_mem_swap+0x8>
	}
}
   29298:	bd10      	pop	{r4, pc}

0002929a <smp_pairing_rsp>:
}
   2929a:	2007      	movs	r0, #7
   2929c:	4770      	bx	lr

0002929e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2929e:	f3bf 8f5b 	dmb	ish
   292a2:	6800      	ldr	r0, [r0, #0]
   292a4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   292a8:	4108      	asrs	r0, r1
}
   292aa:	f000 0001 	and.w	r0, r0, #1
   292ae:	4770      	bx	lr

000292b0 <update_keys_check>:
{
   292b0:	b510      	push	{r4, lr}
   292b2:	4603      	mov	r3, r0
	if (!keys ||
   292b4:	b1d9      	cbz	r1, 292ee <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   292b6:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   292b8:	f010 0f24 	tst.w	r0, #36	; 0x24
   292bc:	d017      	beq.n	292ee <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   292be:	7d1a      	ldrb	r2, [r3, #20]
   292c0:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   292c2:	7b09      	ldrb	r1, [r1, #12]
   292c4:	42a2      	cmp	r2, r4
   292c6:	bf28      	it	cs
   292c8:	4622      	movcs	r2, r4
   292ca:	4291      	cmp	r1, r2
   292cc:	d901      	bls.n	292d2 <update_keys_check+0x22>
		return false;
   292ce:	2000      	movs	r0, #0
}
   292d0:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   292d2:	0682      	lsls	r2, r0, #26
   292d4:	d404      	bmi.n	292e0 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   292d6:	7a18      	ldrb	r0, [r3, #8]
   292d8:	3800      	subs	r0, #0
   292da:	bf18      	it	ne
   292dc:	2001      	movne	r0, #1
   292de:	e7f7      	b.n	292d0 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   292e0:	2105      	movs	r1, #5
   292e2:	1d18      	adds	r0, r3, #4
   292e4:	f7ff ffdb 	bl	2929e <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   292e8:	2800      	cmp	r0, #0
   292ea:	d1f4      	bne.n	292d6 <update_keys_check+0x26>
   292ec:	e7ef      	b.n	292ce <update_keys_check+0x1e>
		return true;
   292ee:	2001      	movs	r0, #1
   292f0:	e7ee      	b.n	292d0 <update_keys_check+0x20>

000292f2 <bt_smp_aes_cmac>:
{
   292f2:	b570      	push	{r4, r5, r6, lr}
   292f4:	b0c2      	sub	sp, #264	; 0x108
   292f6:	460d      	mov	r5, r1
   292f8:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   292fa:	4601      	mov	r1, r0
   292fc:	aa16      	add	r2, sp, #88	; 0x58
   292fe:	4668      	mov	r0, sp
{
   29300:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   29302:	f7fe f8c8 	bl	27496 <tc_cmac_setup>
   29306:	b150      	cbz	r0, 2931e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   29308:	4632      	mov	r2, r6
   2930a:	4629      	mov	r1, r5
   2930c:	4668      	mov	r0, sp
   2930e:	f7fe f8ed 	bl	274ec <tc_cmac_update>
   29312:	b120      	cbz	r0, 2931e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   29314:	4669      	mov	r1, sp
   29316:	4620      	mov	r0, r4
   29318:	f7fe f953 	bl	275c2 <tc_cmac_final>
   2931c:	b918      	cbnz	r0, 29326 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2931e:	f06f 0004 	mvn.w	r0, #4
}
   29322:	b042      	add	sp, #264	; 0x108
   29324:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   29326:	2000      	movs	r0, #0
   29328:	e7fb      	b.n	29322 <bt_smp_aes_cmac+0x30>

0002932a <smp_f4>:
{
   2932a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2932c:	b097      	sub	sp, #92	; 0x5c
   2932e:	4614      	mov	r4, r2
   29330:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   29332:	2220      	movs	r2, #32
   29334:	4601      	mov	r1, r0
   29336:	a805      	add	r0, sp, #20
{
   29338:	461d      	mov	r5, r3
   2933a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2933c:	f7ff ff96 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   29340:	2220      	movs	r2, #32
   29342:	4631      	mov	r1, r6
   29344:	a80d      	add	r0, sp, #52	; 0x34
   29346:	f7ff ff91 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2934a:	4621      	mov	r1, r4
   2934c:	2210      	movs	r2, #16
   2934e:	a801      	add	r0, sp, #4
	m[64] = z;
   29350:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   29354:	f7ff ff8a 	bl	2926c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   29358:	463b      	mov	r3, r7
   2935a:	2241      	movs	r2, #65	; 0x41
   2935c:	a905      	add	r1, sp, #20
   2935e:	a801      	add	r0, sp, #4
   29360:	f7ff ffc7 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   29364:	4604      	mov	r4, r0
   29366:	b918      	cbnz	r0, 29370 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   29368:	2110      	movs	r1, #16
   2936a:	4638      	mov	r0, r7
   2936c:	f7ff ff88 	bl	29280 <sys_mem_swap>
}
   29370:	4620      	mov	r0, r4
   29372:	b017      	add	sp, #92	; 0x5c
   29374:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029376 <smp_f6>:
{
   29376:	b5f0      	push	{r4, r5, r6, r7, lr}
   29378:	b097      	sub	sp, #92	; 0x5c
   2937a:	4605      	mov	r5, r0
   2937c:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2937e:	a805      	add	r0, sp, #20
   29380:	2210      	movs	r2, #16
{
   29382:	461c      	mov	r4, r3
   29384:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   29386:	f7ff ff71 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2938a:	2210      	movs	r2, #16
   2938c:	4631      	mov	r1, r6
   2938e:	a809      	add	r0, sp, #36	; 0x24
   29390:	f7ff ff6c 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   29394:	4621      	mov	r1, r4
   29396:	2210      	movs	r2, #16
   29398:	a80d      	add	r0, sp, #52	; 0x34
   2939a:	f7ff ff67 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2939e:	991c      	ldr	r1, [sp, #112]	; 0x70
   293a0:	2203      	movs	r2, #3
   293a2:	a811      	add	r0, sp, #68	; 0x44
   293a4:	f7ff ff62 	bl	2926c <sys_memcpy_swap>
	m[51] = a1->type;
   293a8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   293aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   293ae:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   293b2:	4621      	mov	r1, r4
   293b4:	2206      	movs	r2, #6
   293b6:	a812      	add	r0, sp, #72	; 0x48
   293b8:	f7fe fa39 	bl	2782e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   293bc:	4621      	mov	r1, r4
   293be:	2206      	movs	r2, #6
   293c0:	a812      	add	r0, sp, #72	; 0x48
   293c2:	f7ff ff53 	bl	2926c <sys_memcpy_swap>
	m[58] = a2->type;
   293c6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   293c8:	f814 3b01 	ldrb.w	r3, [r4], #1
   293cc:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   293d0:	4621      	mov	r1, r4
   293d2:	2206      	movs	r2, #6
   293d4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   293d8:	f7fe fa29 	bl	2782e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   293dc:	4621      	mov	r1, r4
   293de:	2206      	movs	r2, #6
   293e0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   293e4:	f7ff ff42 	bl	2926c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   293e8:	2210      	movs	r2, #16
   293ea:	4629      	mov	r1, r5
   293ec:	a801      	add	r0, sp, #4
   293ee:	f7ff ff3d 	bl	2926c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   293f2:	463b      	mov	r3, r7
   293f4:	2241      	movs	r2, #65	; 0x41
   293f6:	a905      	add	r1, sp, #20
   293f8:	a801      	add	r0, sp, #4
   293fa:	f7ff ff7a 	bl	292f2 <bt_smp_aes_cmac>
	if (err) {
   293fe:	4604      	mov	r4, r0
   29400:	b918      	cbnz	r0, 2940a <smp_f6+0x94>
	sys_mem_swap(check, 16);
   29402:	2110      	movs	r1, #16
   29404:	4638      	mov	r0, r7
   29406:	f7ff ff3b 	bl	29280 <sys_mem_swap>
}
   2940a:	4620      	mov	r0, r4
   2940c:	b017      	add	sp, #92	; 0x5c
   2940e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029410 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29410:	2301      	movs	r3, #1
   29412:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29414:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29416:	f3bf 8f5b 	dmb	ish
   2941a:	e850 2f00 	ldrex	r2, [r0]
   2941e:	401a      	ands	r2, r3
   29420:	e840 2100 	strex	r1, r2, [r0]
   29424:	2900      	cmp	r1, #0
   29426:	d1f8      	bne.n	2941a <atomic_clear_bit+0xa>
   29428:	f3bf 8f5b 	dmb	ish
}
   2942c:	4770      	bx	lr

0002942e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2942e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29430:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29432:	2200      	movs	r2, #0
   29434:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29436:	4604      	mov	r4, r0
   29438:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2943a:	460a      	mov	r2, r1
   2943c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   29440:	2106      	movs	r1, #6
   29442:	f7fe fe56 	bl	280f2 <bt_l2cap_send_cb>
   29446:	b128      	cbz	r0, 29454 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   29448:	4628      	mov	r0, r5
}
   2944a:	b003      	add	sp, #12
   2944c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   29450:	f7f4 b980 	b.w	1d754 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29454:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29458:	2300      	movs	r3, #0
   2945a:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2945e:	b003      	add	sp, #12
   29460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29464:	f7f8 bb9c 	b.w	21ba0 <k_work_reschedule>

00029468 <z_log_msg_static_create.constprop.0>:
   29468:	2300      	movs	r3, #0
   2946a:	f7ea ba8b 	b.w	13984 <z_impl_z_log_msg_static_create>

0002946e <smp_chan_get>:
{
   2946e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   29470:	2106      	movs	r1, #6
   29472:	f7fe fe61 	bl	28138 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   29476:	b918      	cbnz	r0, 29480 <smp_chan_get+0x12>
}
   29478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2947c:	f7f2 b8b4 	b.w	1b5e8 <smp_chan_get.part.0>
   29480:	38ec      	subs	r0, #236	; 0xec
   29482:	bd08      	pop	{r3, pc}

00029484 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29484:	2301      	movs	r3, #1
   29486:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29488:	f3bf 8f5b 	dmb	ish
   2948c:	e850 2f00 	ldrex	r2, [r0]
   29490:	431a      	orrs	r2, r3
   29492:	e840 2100 	strex	r1, r2, [r0]
   29496:	2900      	cmp	r1, #0
   29498:	d1f8      	bne.n	2948c <atomic_set_bit+0x8>
   2949a:	f3bf 8f5b 	dmb	ish
}
   2949e:	4770      	bx	lr

000294a0 <smp_keypress_notif>:
{
   294a0:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   294a2:	210e      	movs	r1, #14
   294a4:	f7ff ffee 	bl	29484 <atomic_set_bit>
}
   294a8:	2000      	movs	r0, #0
   294aa:	bd08      	pop	{r3, pc}

000294ac <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   294ac:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   294ae:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   294b0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   294b2:	4628      	mov	r0, r5
   294b4:	2104      	movs	r1, #4
   294b6:	f7ff fef2 	bl	2929e <atomic_test_bit>
   294ba:	b970      	cbnz	r0, 294da <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   294bc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   294c0:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   294c2:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   294c4:	4608      	mov	r0, r1
   294c6:	f7fe fe11 	bl	280ec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   294ca:	4604      	mov	r4, r0
   294cc:	b938      	cbnz	r0, 294de <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   294ce:	2104      	movs	r1, #4
   294d0:	4628      	mov	r0, r5
   294d2:	f7ff ffd7 	bl	29484 <atomic_set_bit>
}
   294d6:	4620      	mov	r0, r4
   294d8:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   294da:	2200      	movs	r2, #0
   294dc:	e7f0      	b.n	294c0 <smp_create_pdu.constprop.0+0x14>
   294de:	2101      	movs	r1, #1
   294e0:	3008      	adds	r0, #8
   294e2:	f000 fb82 	bl	29bea <net_buf_simple_add>
	hdr->code = op;
   294e6:	7006      	strb	r6, [r0, #0]
	return buf;
   294e8:	e7f5      	b.n	294d6 <smp_create_pdu.constprop.0+0x2a>

000294ea <send_pairing_rsp>:
{
   294ea:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   294ec:	2102      	movs	r1, #2
{
   294ee:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   294f0:	f7ff ffdc 	bl	294ac <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   294f4:	4604      	mov	r4, r0
   294f6:	b178      	cbz	r0, 29518 <send_pairing_rsp+0x2e>
   294f8:	2106      	movs	r1, #6
   294fa:	3008      	adds	r0, #8
   294fc:	f000 fb75 	bl	29bea <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   29500:	2206      	movs	r2, #6
   29502:	f105 0111 	add.w	r1, r5, #17
   29506:	f7fe f992 	bl	2782e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2950a:	4628      	mov	r0, r5
   2950c:	2200      	movs	r2, #0
   2950e:	4621      	mov	r1, r4
   29510:	f7ff ff8d 	bl	2942e <smp_send.constprop.0>
	return 0;
   29514:	2000      	movs	r0, #0
}
   29516:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29518:	2008      	movs	r0, #8
   2951a:	e7fc      	b.n	29516 <send_pairing_rsp+0x2c>

0002951c <smp_send_pairing_random>:
{
   2951c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2951e:	2104      	movs	r1, #4
{
   29520:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29522:	f7ff ffc3 	bl	294ac <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   29526:	4604      	mov	r4, r0
   29528:	b178      	cbz	r0, 2954a <smp_send_pairing_random+0x2e>
   2952a:	2110      	movs	r1, #16
   2952c:	3008      	adds	r0, #8
   2952e:	f000 fb5c 	bl	29bea <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   29532:	2210      	movs	r2, #16
   29534:	f105 0127 	add.w	r1, r5, #39	; 0x27
   29538:	f7fe f979 	bl	2782e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2953c:	4628      	mov	r0, r5
   2953e:	2200      	movs	r2, #0
   29540:	4621      	mov	r1, r4
   29542:	f7ff ff74 	bl	2942e <smp_send.constprop.0>
	return 0;
   29546:	2000      	movs	r0, #0
}
   29548:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2954a:	2008      	movs	r0, #8
   2954c:	e7fc      	b.n	29548 <smp_send_pairing_random+0x2c>

0002954e <smp_dhkey_check>:
{
   2954e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   29550:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   29554:	78db      	ldrb	r3, [r3, #3]
   29556:	2b01      	cmp	r3, #1
{
   29558:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2955a:	d114      	bne.n	29586 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2955c:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2955e:	1d05      	adds	r5, r0, #4
   29560:	2110      	movs	r1, #16
   29562:	4628      	mov	r0, r5
   29564:	f7ff ff54 	bl	29410 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   29568:	4631      	mov	r1, r6
   2956a:	2210      	movs	r2, #16
   2956c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   29570:	f7fe f95d 	bl	2782e <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   29574:	2107      	movs	r1, #7
   29576:	4628      	mov	r0, r5
   29578:	f7ff fe91 	bl	2929e <atomic_test_bit>
   2957c:	b128      	cbz	r0, 2958a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2957e:	2109      	movs	r1, #9
   29580:	4628      	mov	r0, r5
   29582:	f7ff ff7f 	bl	29484 <atomic_set_bit>
}
   29586:	2000      	movs	r0, #0
   29588:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2958a:	210a      	movs	r1, #10
   2958c:	4628      	mov	r0, r5
   2958e:	f7ff fe86 	bl	2929e <atomic_test_bit>
   29592:	2800      	cmp	r0, #0
   29594:	d1f3      	bne.n	2957e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   29596:	4620      	mov	r0, r4
}
   29598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2959c:	f7f2 baae 	b.w	1bafc <compute_and_check_and_send_periph_dhcheck>

000295a0 <smp_security_request>:
   295a0:	2007      	movs	r0, #7
   295a2:	4770      	bx	lr

000295a4 <atomic_test_and_clear_bit>:
{
   295a4:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   295a6:	2301      	movs	r3, #1
   295a8:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   295ac:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   295ae:	f3bf 8f5b 	dmb	ish
   295b2:	e850 3f00 	ldrex	r3, [r0]
   295b6:	ea03 0c02 	and.w	ip, r3, r2
   295ba:	e840 ce00 	strex	lr, ip, [r0]
   295be:	f1be 0f00 	cmp.w	lr, #0
   295c2:	d1f6      	bne.n	295b2 <atomic_test_and_clear_bit+0xe>
   295c4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   295c8:	420b      	tst	r3, r1
}
   295ca:	bf14      	ite	ne
   295cc:	2001      	movne	r0, #1
   295ce:	2000      	moveq	r0, #0
   295d0:	f85d fb04 	ldr.w	pc, [sp], #4

000295d4 <smp_reset>:
{
   295d4:	b538      	push	{r3, r4, r5, lr}
   295d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   295d8:	1d03      	adds	r3, r0, #4
   295da:	2500      	movs	r5, #0
   295dc:	f3bf 8f5b 	dmb	ish
   295e0:	e853 2f00 	ldrex	r2, [r3]
   295e4:	e843 5100 	strex	r1, r5, [r3]
   295e8:	2900      	cmp	r1, #0
   295ea:	d1f9      	bne.n	295e0 <smp_reset+0xc>
   295ec:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   295f0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   295f4:	f001 fa21 	bl	2aa3a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   295f8:	7225      	strb	r5, [r4, #8]
   295fa:	f3bf 8f5b 	dmb	ish
   295fe:	e854 3f00 	ldrex	r3, [r4]
   29602:	e844 5200 	strex	r2, r5, [r4]
   29606:	2a00      	cmp	r2, #0
   29608:	d1f9      	bne.n	295fe <smp_reset+0x2a>
   2960a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2960e:	4620      	mov	r0, r4
   29610:	2101      	movs	r1, #1
}
   29612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   29616:	f7ff bf35 	b.w	29484 <atomic_set_bit>

0002961a <smp_c1>:
{
   2961a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2961e:	b089      	sub	sp, #36	; 0x24
   29620:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   29624:	4699      	mov	r9, r3
	p1[0] = ia->type;
   29626:	783b      	ldrb	r3, [r7, #0]
{
   29628:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2962a:	f88d 3000 	strb.w	r3, [sp]
{
   2962e:	460c      	mov	r4, r1
	p1[1] = ra->type;
   29630:	f898 3000 	ldrb.w	r3, [r8]
   29634:	f88d 3001 	strb.w	r3, [sp, #1]
{
   29638:	4611      	mov	r1, r2
   2963a:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2963c:	2207      	movs	r2, #7
   2963e:	f10d 0002 	add.w	r0, sp, #2
   29642:	f7fe f8f4 	bl	2782e <memcpy>
	memcpy(p1 + 9, pres, 7);
   29646:	2207      	movs	r2, #7
   29648:	4649      	mov	r1, r9
   2964a:	f10d 0009 	add.w	r0, sp, #9
   2964e:	f7fe f8ee 	bl	2782e <memcpy>
	while (len--) {
   29652:	f104 0010 	add.w	r0, r4, #16
   29656:	4629      	mov	r1, r5
   29658:	466a      	mov	r2, sp
   2965a:	42a0      	cmp	r0, r4
   2965c:	d127      	bne.n	296ae <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2965e:	462a      	mov	r2, r5
   29660:	4629      	mov	r1, r5
   29662:	4630      	mov	r0, r6
   29664:	f000 fda6 	bl	2a1b4 <bt_encrypt_le>
	if (err) {
   29668:	4604      	mov	r4, r0
   2966a:	b9e0      	cbnz	r0, 296a6 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2966c:	2206      	movs	r2, #6
   2966e:	f108 0101 	add.w	r1, r8, #1
   29672:	a804      	add	r0, sp, #16
   29674:	f7fe f8db 	bl	2782e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   29678:	2206      	movs	r2, #6
   2967a:	1c79      	adds	r1, r7, #1
   2967c:	f10d 0016 	add.w	r0, sp, #22
   29680:	f7fe f8d5 	bl	2782e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   29684:	2204      	movs	r2, #4
   29686:	4621      	mov	r1, r4
   29688:	a807      	add	r0, sp, #28
   2968a:	f7fe f8db 	bl	27844 <memset>
	while (len--) {
   2968e:	f105 0010 	add.w	r0, r5, #16
   29692:	462a      	mov	r2, r5
   29694:	ab04      	add	r3, sp, #16
   29696:	4282      	cmp	r2, r0
   29698:	d112      	bne.n	296c0 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2969a:	462a      	mov	r2, r5
   2969c:	4629      	mov	r1, r5
   2969e:	4630      	mov	r0, r6
   296a0:	f000 fd88 	bl	2a1b4 <bt_encrypt_le>
   296a4:	4604      	mov	r4, r0
}
   296a6:	4620      	mov	r0, r4
   296a8:	b009      	add	sp, #36	; 0x24
   296aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   296ae:	f814 3b01 	ldrb.w	r3, [r4], #1
   296b2:	f812 cb01 	ldrb.w	ip, [r2], #1
   296b6:	ea83 030c 	eor.w	r3, r3, ip
   296ba:	f801 3b01 	strb.w	r3, [r1], #1
   296be:	e7cc      	b.n	2965a <smp_c1+0x40>
   296c0:	f812 1b01 	ldrb.w	r1, [r2], #1
   296c4:	f813 4b01 	ldrb.w	r4, [r3], #1
   296c8:	4061      	eors	r1, r4
   296ca:	f802 1c01 	strb.w	r1, [r2, #-1]
   296ce:	e7e2      	b.n	29696 <smp_c1+0x7c>

000296d0 <legacy_pairing_confirm>:
{
   296d0:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   296d2:	1d07      	adds	r7, r0, #4
{
   296d4:	b085      	sub	sp, #20
   296d6:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   296d8:	210a      	movs	r1, #10
   296da:	4638      	mov	r0, r7
   296dc:	f7ff fddf 	bl	2929e <atomic_test_bit>
   296e0:	bb88      	cbnz	r0, 29746 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   296e2:	2104      	movs	r1, #4
   296e4:	4628      	mov	r0, r5
   296e6:	f7ff fecd 	bl	29484 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   296ea:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   296ec:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   296f0:	f7ff fedc 	bl	294ac <smp_create_pdu.constprop.0>
	if (!buf) {
   296f4:	4606      	mov	r6, r0
   296f6:	b1c0      	cbz	r0, 2972a <legacy_pairing_confirm+0x5a>
   296f8:	2110      	movs	r1, #16
   296fa:	3008      	adds	r0, #8
   296fc:	f000 fa75 	bl	29bea <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   29700:	f104 0396 	add.w	r3, r4, #150	; 0x96
   29704:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   29706:	9002      	str	r0, [sp, #8]
   29708:	9301      	str	r3, [sp, #4]
   2970a:	9400      	str	r4, [sp, #0]
   2970c:	f105 0310 	add.w	r3, r5, #16
   29710:	f105 0209 	add.w	r2, r5, #9
   29714:	f105 0127 	add.w	r1, r5, #39	; 0x27
   29718:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2971c:	f7ff ff7d 	bl	2961a <smp_c1>
   29720:	4604      	mov	r4, r0
   29722:	b120      	cbz	r0, 2972e <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   29724:	4630      	mov	r0, r6
   29726:	f7f4 f815 	bl	1d754 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2972a:	2008      	movs	r0, #8
   2972c:	e009      	b.n	29742 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2972e:	4602      	mov	r2, r0
   29730:	4631      	mov	r1, r6
   29732:	4628      	mov	r0, r5
   29734:	f7ff fe7b 	bl	2942e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29738:	4621      	mov	r1, r4
   2973a:	4638      	mov	r0, r7
   2973c:	f7ff fe68 	bl	29410 <atomic_clear_bit>
	return 0;
   29740:	2000      	movs	r0, #0
}
   29742:	b005      	add	sp, #20
   29744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29746:	2100      	movs	r1, #0
   29748:	4638      	mov	r0, r7
   2974a:	f7ff fe9b 	bl	29484 <atomic_set_bit>
   2974e:	e7f7      	b.n	29740 <legacy_pairing_confirm+0x70>

00029750 <bt_smp_request_ltk>:
{
   29750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29754:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   29758:	e9cd 2300 	strd	r2, r3, [sp]
   2975c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2975e:	f7ff fe86 	bl	2946e <smp_chan_get>
	if (!smp) {
   29762:	4605      	mov	r5, r0
   29764:	2800      	cmp	r0, #0
   29766:	f000 8090 	beq.w	2988a <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2976a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2976e:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   29770:	f1b9 0f00 	cmp.w	r9, #0
   29774:	d12a      	bne.n	297cc <bt_smp_request_ltk+0x7c>
   29776:	e9dd 2300 	ldrd	r2, r3, [sp]
   2977a:	4313      	orrs	r3, r2
   2977c:	d126      	bne.n	297cc <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2977e:	2103      	movs	r1, #3
   29780:	4638      	mov	r0, r7
   29782:	f7ff fd8c 	bl	2929e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   29786:	b308      	cbz	r0, 297cc <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29788:	2101      	movs	r1, #1
   2978a:	4638      	mov	r0, r7
   2978c:	f7ff fd87 	bl	2929e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29790:	4606      	mov	r6, r0
   29792:	b1d8      	cbz	r0, 297cc <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   29794:	7d2c      	ldrb	r4, [r5, #20]
   29796:	7b6b      	ldrb	r3, [r5, #13]
   29798:	429c      	cmp	r4, r3
   2979a:	bf28      	it	cs
   2979c:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2979e:	4622      	mov	r2, r4
   297a0:	f105 0147 	add.w	r1, r5, #71	; 0x47
   297a4:	4640      	mov	r0, r8
   297a6:	f7fe f842 	bl	2782e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   297aa:	2c0f      	cmp	r4, #15
   297ac:	d806      	bhi.n	297bc <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   297ae:	f1c4 0210 	rsb	r2, r4, #16
   297b2:	4649      	mov	r1, r9
   297b4:	eb08 0004 	add.w	r0, r8, r4
   297b8:	f7fe f844 	bl	27844 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   297bc:	2101      	movs	r1, #1
   297be:	4638      	mov	r0, r7
   297c0:	f7ff fe60 	bl	29484 <atomic_set_bit>
}
   297c4:	4630      	mov	r0, r6
   297c6:	b003      	add	sp, #12
   297c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   297cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   297d0:	b983      	cbnz	r3, 297f4 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   297d2:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   297d6:	7a21      	ldrb	r1, [r4, #8]
   297d8:	4632      	mov	r2, r6
   297da:	2020      	movs	r0, #32
   297dc:	f7f3 fd26 	bl	1d22c <bt_keys_find>
   297e0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   297e4:	b930      	cbnz	r0, 297f4 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   297e6:	7a21      	ldrb	r1, [r4, #8]
   297e8:	4632      	mov	r2, r6
   297ea:	2001      	movs	r0, #1
   297ec:	f7f3 fd1e 	bl	1d22c <bt_keys_find>
   297f0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   297f4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   297f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   297fc:	b9ee      	cbnz	r6, 2983a <bt_smp_request_ltk+0xea>
   297fe:	e9dd 2300 	ldrd	r2, r3, [sp]
   29802:	4313      	orrs	r3, r2
   29804:	d119      	bne.n	2983a <bt_smp_request_ltk+0xea>
   29806:	b388      	cbz	r0, 2986c <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   29808:	89c3      	ldrh	r3, [r0, #14]
   2980a:	069a      	lsls	r2, r3, #26
   2980c:	d516      	bpl.n	2983c <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2980e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   29810:	f100 011a 	add.w	r1, r0, #26
   29814:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   29816:	4640      	mov	r0, r8
   29818:	f7fe f809 	bl	2782e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2981c:	2c0f      	cmp	r4, #15
   2981e:	d806      	bhi.n	2982e <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   29820:	f1c4 0210 	rsb	r2, r4, #16
   29824:	4631      	mov	r1, r6
   29826:	eb08 0004 	add.w	r0, r8, r4
   2982a:	f7fe f80b 	bl	27844 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2982e:	2101      	movs	r1, #1
   29830:	4638      	mov	r0, r7
   29832:	f7ff fe27 	bl	29484 <atomic_set_bit>
		return true;
   29836:	2601      	movs	r6, #1
   29838:	e7c4      	b.n	297c4 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2983a:	b1b8      	cbz	r0, 2986c <bt_smp_request_ltk+0x11c>
   2983c:	89c3      	ldrh	r3, [r0, #14]
   2983e:	07db      	lsls	r3, r3, #31
   29840:	d514      	bpl.n	2986c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   29842:	2208      	movs	r2, #8
   29844:	4669      	mov	r1, sp
   29846:	3068      	adds	r0, #104	; 0x68
   29848:	f7fd ffc8 	bl	277dc <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2984c:	b970      	cbnz	r0, 2986c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2984e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   29852:	2202      	movs	r2, #2
   29854:	a90a      	add	r1, sp, #40	; 0x28
   29856:	3070      	adds	r0, #112	; 0x70
   29858:	f7fd ffc0 	bl	277dc <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2985c:	4606      	mov	r6, r0
   2985e:	b928      	cbnz	r0, 2986c <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   29860:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   29864:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   29866:	3172      	adds	r1, #114	; 0x72
   29868:	4622      	mov	r2, r4
   2986a:	e7d4      	b.n	29816 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2986c:	210f      	movs	r1, #15
   2986e:	4638      	mov	r0, r7
   29870:	f7ff fd15 	bl	2929e <atomic_test_bit>
   29874:	b120      	cbz	r0, 29880 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   29876:	2202      	movs	r2, #2
   29878:	2106      	movs	r1, #6
   2987a:	4620      	mov	r0, r4
   2987c:	f7ee fd66 	bl	1834c <bt_conn_security_changed>
	smp_reset(smp);
   29880:	4628      	mov	r0, r5
   29882:	f7ff fea7 	bl	295d4 <smp_reset>
	return false;
   29886:	2600      	movs	r6, #0
   29888:	e79c      	b.n	297c4 <bt_smp_request_ltk+0x74>
		return false;
   2988a:	4606      	mov	r6, r0
   2988c:	e79a      	b.n	297c4 <bt_smp_request_ltk+0x74>

0002988e <bt_smp_irk_get>:
{
   2988e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   29890:	2500      	movs	r5, #0
{
   29892:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   29894:	2210      	movs	r2, #16
   29896:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   29898:	e9cd 5500 	strd	r5, r5, [sp]
   2989c:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   298a0:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   298a2:	f7fd ff9b 	bl	277dc <memcmp>
   298a6:	b180      	cbz	r0, 298ca <bt_smp_irk_get+0x3c>
	dst[0] = val;
   298a8:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   298aa:	220c      	movs	r2, #12
   298ac:	4629      	mov	r1, r5
   298ae:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   298b0:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   298b2:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   298b4:	70e5      	strb	r5, [r4, #3]
   298b6:	1d20      	adds	r0, r4, #4
   298b8:	f7fd ffc4 	bl	27844 <memset>
	err = bt_encrypt_le(key, res, res);
   298bc:	4622      	mov	r2, r4
   298be:	4621      	mov	r1, r4
   298c0:	4630      	mov	r0, r6
   298c2:	f000 fc77 	bl	2a1b4 <bt_encrypt_le>
}
   298c6:	b004      	add	sp, #16
   298c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   298ca:	f06f 0015 	mvn.w	r0, #21
   298ce:	e7fa      	b.n	298c6 <bt_smp_irk_get+0x38>

000298d0 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   298d0:	1d03      	adds	r3, r0, #4
{
   298d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   298d4:	4605      	mov	r5, r0
   298d6:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   298d8:	4618      	mov	r0, r3
   298da:	2103      	movs	r1, #3
   298dc:	f7ff fcdf 	bl	2929e <atomic_test_bit>
   298e0:	b1f0      	cbz	r0, 29920 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   298e2:	4631      	mov	r1, r6
   298e4:	4628      	mov	r0, r5
   298e6:	f7f2 fee9 	bl	1c6bc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   298ea:	2105      	movs	r1, #5
   298ec:	4628      	mov	r0, r5
   298ee:	f7ff fddd 	bl	294ac <smp_create_pdu.constprop.0>
	if (!buf) {
   298f2:	4604      	mov	r4, r0
   298f4:	b308      	cbz	r0, 2993a <smp_error+0x6a>
   298f6:	2101      	movs	r1, #1
   298f8:	3008      	adds	r0, #8
   298fa:	f000 f976 	bl	29bea <net_buf_simple_add>
	rsp->reason = reason;
   298fe:	7006      	strb	r6, [r0, #0]
   29900:	2600      	movs	r6, #0
   29902:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   29906:	9600      	str	r6, [sp, #0]
   29908:	4633      	mov	r3, r6
   2990a:	4622      	mov	r2, r4
   2990c:	2106      	movs	r1, #6
   2990e:	f7fe fbf0 	bl	280f2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   29912:	b118      	cbz	r0, 2991c <smp_error+0x4c>
		net_buf_unref(buf);
   29914:	4620      	mov	r0, r4
   29916:	f7f3 ff1d 	bl	1d754 <net_buf_unref>
	return 0;
   2991a:	4630      	mov	r0, r6
}
   2991c:	b002      	add	sp, #8
   2991e:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29920:	2101      	movs	r1, #1
   29922:	4618      	mov	r0, r3
   29924:	f7ff fcbb 	bl	2929e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29928:	2800      	cmp	r0, #0
   2992a:	d1da      	bne.n	298e2 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2992c:	210f      	movs	r1, #15
   2992e:	4618      	mov	r0, r3
   29930:	f7ff fcb5 	bl	2929e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29934:	2800      	cmp	r0, #0
   29936:	d1d4      	bne.n	298e2 <smp_error+0x12>
   29938:	e7d7      	b.n	298ea <smp_error+0x1a>
		return -ENOBUFS;
   2993a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2993e:	e7ed      	b.n	2991c <smp_error+0x4c>

00029940 <bt_smp_dhkey_ready>:
{
   29940:	b570      	push	{r4, r5, r6, lr}
   29942:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   29944:	2008      	movs	r0, #8
   29946:	f7f1 fd67 	bl	1b418 <smp_find>
	if (smp) {
   2994a:	4604      	mov	r4, r0
   2994c:	b1b8      	cbz	r0, 2997e <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2994e:	1d05      	adds	r5, r0, #4
   29950:	2108      	movs	r1, #8
   29952:	4628      	mov	r0, r5
   29954:	f7ff fd5c 	bl	29410 <atomic_clear_bit>
	if (!dhkey) {
   29958:	b38e      	cbz	r6, 299be <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2995a:	2107      	movs	r1, #7
   2995c:	f7ff fd58 	bl	29410 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   29960:	4631      	mov	r1, r6
   29962:	2220      	movs	r2, #32
   29964:	f104 0097 	add.w	r0, r4, #151	; 0x97
   29968:	f7fd ff61 	bl	2782e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2996c:	210a      	movs	r1, #10
   2996e:	4628      	mov	r0, r5
   29970:	f7ff fc95 	bl	2929e <atomic_test_bit>
   29974:	b168      	cbz	r0, 29992 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29976:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29978:	4628      	mov	r0, r5
   2997a:	f7ff fd83 	bl	29484 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2997e:	2007      	movs	r0, #7
   29980:	f7f1 fd4a 	bl	1b418 <smp_find>
		if (smp) {
   29984:	4604      	mov	r4, r0
   29986:	b118      	cbz	r0, 29990 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   29988:	f7f1 fe5e 	bl	1b648 <smp_dhkey_generate>
			if (err) {
   2998c:	4601      	mov	r1, r0
   2998e:	b990      	cbnz	r0, 299b6 <bt_smp_dhkey_ready+0x76>
}
   29990:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29992:	2110      	movs	r1, #16
   29994:	4628      	mov	r0, r5
   29996:	f7ff fc82 	bl	2929e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2999a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2999c:	2800      	cmp	r0, #0
   2999e:	d1eb      	bne.n	29978 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   299a0:	4628      	mov	r0, r5
   299a2:	f7ff fc7c 	bl	2929e <atomic_test_bit>
   299a6:	2800      	cmp	r0, #0
   299a8:	d0e9      	beq.n	2997e <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   299aa:	4620      	mov	r0, r4
   299ac:	f7f2 f8a6 	bl	1bafc <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   299b0:	4601      	mov	r1, r0
   299b2:	2800      	cmp	r0, #0
   299b4:	d0e3      	beq.n	2997e <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   299b6:	4620      	mov	r0, r4
   299b8:	f7ff ff8a 	bl	298d0 <smp_error>
   299bc:	e7df      	b.n	2997e <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   299be:	210b      	movs	r1, #11
   299c0:	e7f9      	b.n	299b6 <bt_smp_dhkey_ready+0x76>

000299c2 <smp_check_complete>:
{
   299c2:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   299c4:	7883      	ldrb	r3, [r0, #2]
   299c6:	2b01      	cmp	r3, #1
{
   299c8:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   299ca:	d110      	bne.n	299ee <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   299cc:	2106      	movs	r1, #6
   299ce:	f7fe fba9 	bl	28124 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   299d2:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   299d6:	ea23 0104 	bic.w	r1, r3, r4
   299da:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   299de:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   299e2:	b921      	cbnz	r1, 299ee <smp_check_complete+0x2c>
}
   299e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   299e8:	38ec      	subs	r0, #236	; 0xec
   299ea:	f7f2 be67 	b.w	1c6bc <smp_pairing_complete>
}
   299ee:	bd10      	pop	{r4, pc}

000299f0 <smp_sign_info_sent>:
	if (!err) {
   299f0:	b912      	cbnz	r2, 299f8 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   299f2:	2104      	movs	r1, #4
   299f4:	f7ff bfe5 	b.w	299c2 <smp_check_complete>
}
   299f8:	4770      	bx	lr

000299fa <smp_id_sent>:
	if (!err) {
   299fa:	b912      	cbnz	r2, 29a02 <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   299fc:	2102      	movs	r1, #2
   299fe:	f7ff bfe0 	b.w	299c2 <smp_check_complete>
}
   29a02:	4770      	bx	lr

00029a04 <smp_ident_sent>:
	if (!err) {
   29a04:	b912      	cbnz	r2, 29a0c <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   29a06:	2101      	movs	r1, #1
   29a08:	f7ff bfdb 	b.w	299c2 <smp_check_complete>
}
   29a0c:	4770      	bx	lr

00029a0e <bt_smp_disconnected>:
{
   29a0e:	b570      	push	{r4, r5, r6, lr}
   29a10:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   29a12:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   29a16:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29a1a:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   29a1c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   29a20:	f001 f80b 	bl	2aa3a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29a24:	2103      	movs	r1, #3
   29a26:	4620      	mov	r0, r4
   29a28:	f7ff fc39 	bl	2929e <atomic_test_bit>
   29a2c:	b1a0      	cbz	r0, 29a58 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29a2e:	2108      	movs	r1, #8
   29a30:	4630      	mov	r0, r6
   29a32:	f7f2 fe43 	bl	1c6bc <smp_pairing_complete>
	if (keys) {
   29a36:	b13d      	cbz	r5, 29a48 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   29a38:	89eb      	ldrh	r3, [r5, #14]
   29a3a:	b113      	cbz	r3, 29a42 <bt_smp_disconnected+0x34>
   29a3c:	7b6b      	ldrb	r3, [r5, #13]
   29a3e:	079b      	lsls	r3, r3, #30
   29a40:	d502      	bpl.n	29a48 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   29a42:	4628      	mov	r0, r5
   29a44:	f7f3 fc50 	bl	1d2e8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   29a48:	4630      	mov	r0, r6
   29a4a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   29a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   29a52:	2100      	movs	r1, #0
   29a54:	f7fd bef6 	b.w	27844 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29a58:	2101      	movs	r1, #1
   29a5a:	4620      	mov	r0, r4
   29a5c:	f7ff fc1f 	bl	2929e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29a60:	2800      	cmp	r0, #0
   29a62:	d1e4      	bne.n	29a2e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   29a64:	210f      	movs	r1, #15
   29a66:	4620      	mov	r0, r4
   29a68:	f7ff fc19 	bl	2929e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29a6c:	2800      	cmp	r0, #0
   29a6e:	d1de      	bne.n	29a2e <bt_smp_disconnected+0x20>
   29a70:	e7e1      	b.n	29a36 <bt_smp_disconnected+0x28>

00029a72 <id_add>:
	bt_id_add(keys);
   29a72:	f7ed bd2d 	b.w	174d0 <bt_id_add>

00029a76 <bt_keys_get_type>:
{
   29a76:	b570      	push	{r4, r5, r6, lr}
   29a78:	4604      	mov	r4, r0
   29a7a:	460d      	mov	r5, r1
   29a7c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   29a7e:	f7f3 fbd5 	bl	1d22c <bt_keys_find>
	if (keys) {
   29a82:	b938      	cbnz	r0, 29a94 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   29a84:	4631      	mov	r1, r6
   29a86:	4628      	mov	r0, r5
   29a88:	f7f3 fb5a 	bl	1d140 <bt_keys_get_addr>
	if (!keys) {
   29a8c:	b110      	cbz	r0, 29a94 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   29a8e:	89c3      	ldrh	r3, [r0, #14]
   29a90:	431c      	orrs	r4, r3
   29a92:	81c4      	strh	r4, [r0, #14]
}
   29a94:	bd70      	pop	{r4, r5, r6, pc}

00029a96 <bt_keys_add_type>:
	keys->keys |= type;
   29a96:	89c3      	ldrh	r3, [r0, #14]
   29a98:	4319      	orrs	r1, r3
   29a9a:	81c1      	strh	r1, [r0, #14]
}
   29a9c:	4770      	bx	lr

00029a9e <fixed_data_unref>:
}
   29a9e:	4770      	bx	lr

00029aa0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29aa0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   29aa2:	6849      	ldr	r1, [r1, #4]
   29aa4:	6809      	ldr	r1, [r1, #0]
   29aa6:	f7f3 bdc1 	b.w	1d62c <net_buf_alloc_len>

00029aaa <net_buf_get>:
{
   29aaa:	b570      	push	{r4, r5, r6, lr}
   29aac:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   29aae:	f7f7 fe19 	bl	216e4 <z_impl_k_queue_get>
	if (!buf) {
   29ab2:	4605      	mov	r5, r0
   29ab4:	b128      	cbz	r0, 29ac2 <net_buf_get+0x18>
   29ab6:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29ab8:	7963      	ldrb	r3, [r4, #5]
   29aba:	f013 0301 	ands.w	r3, r3, #1
   29abe:	d102      	bne.n	29ac6 <net_buf_get+0x1c>
	frag->frags = NULL;
   29ac0:	6023      	str	r3, [r4, #0]
}
   29ac2:	4628      	mov	r0, r5
   29ac4:	bd70      	pop	{r4, r5, r6, pc}
   29ac6:	2300      	movs	r3, #0
   29ac8:	2200      	movs	r2, #0
   29aca:	4630      	mov	r0, r6
   29acc:	f7f7 fe0a 	bl	216e4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   29ad0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   29ad2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   29ad4:	f023 0301 	bic.w	r3, r3, #1
   29ad8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29ada:	4604      	mov	r4, r0
   29adc:	e7ec      	b.n	29ab8 <net_buf_get+0xe>

00029ade <net_buf_simple_init_with_data>:
	buf->size  = size;
   29ade:	b292      	uxth	r2, r2
	buf->__buf = data;
   29ae0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   29ae2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   29ae4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   29ae6:	8082      	strh	r2, [r0, #4]
}
   29ae8:	4770      	bx	lr

00029aea <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   29aea:	6883      	ldr	r3, [r0, #8]
   29aec:	440b      	add	r3, r1
   29aee:	6003      	str	r3, [r0, #0]
}
   29af0:	4770      	bx	lr

00029af2 <net_buf_slist_put>:
{
   29af2:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   29af4:	460b      	mov	r3, r1
   29af6:	681c      	ldr	r4, [r3, #0]
   29af8:	b98c      	cbnz	r4, 29b1e <net_buf_slist_put+0x2c>
	__asm__ volatile(
   29afa:	f04f 0240 	mov.w	r2, #64	; 0x40
   29afe:	f3ef 8411 	mrs	r4, BASEPRI
   29b02:	f382 8812 	msr	BASEPRI_MAX, r2
   29b06:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   29b0a:	b119      	cbz	r1, 29b14 <net_buf_slist_put+0x22>
	return list->tail;
   29b0c:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   29b0e:	b962      	cbnz	r2, 29b2a <net_buf_slist_put+0x38>
	list->head = node;
   29b10:	6001      	str	r1, [r0, #0]
	list->tail = node;
   29b12:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   29b14:	f384 8811 	msr	BASEPRI, r4
   29b18:	f3bf 8f6f 	isb	sy
}
   29b1c:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   29b1e:	795a      	ldrb	r2, [r3, #5]
   29b20:	f042 0201 	orr.w	r2, r2, #1
   29b24:	715a      	strb	r2, [r3, #5]
   29b26:	4623      	mov	r3, r4
   29b28:	e7e5      	b.n	29af6 <net_buf_slist_put+0x4>
	parent->next = child;
   29b2a:	6011      	str	r1, [r2, #0]
}
   29b2c:	e7f1      	b.n	29b12 <net_buf_slist_put+0x20>

00029b2e <net_buf_slist_get>:
{
   29b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b30:	4603      	mov	r3, r0
	__asm__ volatile(
   29b32:	f04f 0240 	mov.w	r2, #64	; 0x40
   29b36:	f3ef 8611 	mrs	r6, BASEPRI
   29b3a:	f382 8812 	msr	BASEPRI_MAX, r2
   29b3e:	f3bf 8f6f 	isb	sy
	return list->head;
   29b42:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29b44:	b158      	cbz	r0, 29b5e <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b46:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29b48:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29b4a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b4c:	4288      	cmp	r0, r1
	list->tail = node;
   29b4e:	bf08      	it	eq
   29b50:	605a      	streq	r2, [r3, #4]
   29b52:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29b54:	7951      	ldrb	r1, [r2, #5]
   29b56:	f011 0401 	ands.w	r4, r1, #1
   29b5a:	d105      	bne.n	29b68 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   29b5c:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   29b5e:	f386 8811 	msr	BASEPRI, r6
   29b62:	f3bf 8f6f 	isb	sy
}
   29b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   29b68:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   29b6a:	b12c      	cbz	r4, 29b78 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b6c:	685f      	ldr	r7, [r3, #4]
	return node->next;
   29b6e:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   29b70:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b72:	42bc      	cmp	r4, r7
	list->tail = node;
   29b74:	bf08      	it	eq
   29b76:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   29b78:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   29b7c:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   29b7e:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29b80:	4622      	mov	r2, r4
   29b82:	e7e7      	b.n	29b54 <net_buf_slist_get+0x26>

00029b84 <net_buf_put>:
{
   29b84:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   29b86:	460a      	mov	r2, r1
   29b88:	6814      	ldr	r4, [r2, #0]
   29b8a:	b914      	cbnz	r4, 29b92 <net_buf_put+0xe>
}
   29b8c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   29b8e:	f000 be46 	b.w	2a81e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   29b92:	7953      	ldrb	r3, [r2, #5]
   29b94:	f043 0301 	orr.w	r3, r3, #1
   29b98:	7153      	strb	r3, [r2, #5]
   29b9a:	4622      	mov	r2, r4
   29b9c:	e7f4      	b.n	29b88 <net_buf_put+0x4>

00029b9e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29b9e:	7902      	ldrb	r2, [r0, #4]
   29ba0:	3201      	adds	r2, #1
   29ba2:	7102      	strb	r2, [r0, #4]
	return buf;
}
   29ba4:	4770      	bx	lr

00029ba6 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29ba6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   29ba8:	4618      	mov	r0, r3
   29baa:	681b      	ldr	r3, [r3, #0]
   29bac:	2b00      	cmp	r3, #0
   29bae:	d1fb      	bne.n	29ba8 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   29bb0:	4770      	bx	lr

00029bb2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   29bb2:	6802      	ldr	r2, [r0, #0]
{
   29bb4:	b510      	push	{r4, lr}
	if (parent->frags) {
   29bb6:	b12a      	cbz	r2, 29bc4 <net_buf_frag_insert+0x12>
   29bb8:	460b      	mov	r3, r1
	while (buf->frags) {
   29bba:	461c      	mov	r4, r3
   29bbc:	681b      	ldr	r3, [r3, #0]
   29bbe:	2b00      	cmp	r3, #0
   29bc0:	d1fb      	bne.n	29bba <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   29bc2:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   29bc4:	6001      	str	r1, [r0, #0]
}
   29bc6:	bd10      	pop	{r4, pc}

00029bc8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   29bc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   29bca:	4604      	mov	r4, r0
   29bcc:	b920      	cbnz	r0, 29bd8 <net_buf_frag_add+0x10>
	buf->ref++;
   29bce:	790b      	ldrb	r3, [r1, #4]
   29bd0:	3301      	adds	r3, #1
   29bd2:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   29bd4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   29bd6:	bd10      	pop	{r4, pc}
   29bd8:	4603      	mov	r3, r0
	while (buf->frags) {
   29bda:	4618      	mov	r0, r3
   29bdc:	681b      	ldr	r3, [r3, #0]
   29bde:	2b00      	cmp	r3, #0
   29be0:	d1fb      	bne.n	29bda <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   29be2:	f7ff ffe6 	bl	29bb2 <net_buf_frag_insert>
   29be6:	4620      	mov	r0, r4
   29be8:	e7f5      	b.n	29bd6 <net_buf_frag_add+0xe>

00029bea <net_buf_simple_add>:
	return buf->data + buf->len;
   29bea:	8883      	ldrh	r3, [r0, #4]
   29bec:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   29bee:	4419      	add	r1, r3
   29bf0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   29bf2:	18d0      	adds	r0, r2, r3
   29bf4:	4770      	bx	lr

00029bf6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   29bf6:	b430      	push	{r4, r5}
   29bf8:	8884      	ldrh	r4, [r0, #4]
   29bfa:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   29bfc:	18a3      	adds	r3, r4, r2
   29bfe:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29c00:	1928      	adds	r0, r5, r4
}
   29c02:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29c04:	f7fd be13 	b.w	2782e <memcpy>

00029c08 <net_buf_simple_add_u8>:
   29c08:	8883      	ldrh	r3, [r0, #4]
   29c0a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   29c0c:	b510      	push	{r4, lr}
	buf->len += len;
   29c0e:	1c5c      	adds	r4, r3, #1
   29c10:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   29c12:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   29c14:	18d0      	adds	r0, r2, r3
   29c16:	bd10      	pop	{r4, pc}

00029c18 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   29c18:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   29c1a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   29c1c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   29c1e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   29c20:	4411      	add	r1, r2
	buf->data -= len;
   29c22:	6018      	str	r0, [r3, #0]
	buf->len += len;
   29c24:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   29c26:	4770      	bx	lr

00029c28 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29c28:	8882      	ldrh	r2, [r0, #4]
   29c2a:	1a52      	subs	r2, r2, r1
{
   29c2c:	4603      	mov	r3, r0
	buf->len -= len;
   29c2e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   29c30:	6800      	ldr	r0, [r0, #0]
   29c32:	4408      	add	r0, r1
   29c34:	6018      	str	r0, [r3, #0]
}
   29c36:	4770      	bx	lr

00029c38 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29c38:	4603      	mov	r3, r0
	void *data = buf->data;
   29c3a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29c3c:	889a      	ldrh	r2, [r3, #4]
   29c3e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   29c40:	4401      	add	r1, r0
	buf->len -= len;
   29c42:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   29c44:	6019      	str	r1, [r3, #0]

	return data;
}
   29c46:	4770      	bx	lr

00029c48 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   29c48:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   29c4a:	6803      	ldr	r3, [r0, #0]
   29c4c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   29c4e:	2101      	movs	r1, #1
   29c50:	f7ff ffea 	bl	29c28 <net_buf_simple_pull>

	return val;
}
   29c54:	4620      	mov	r0, r4
   29c56:	bd10      	pop	{r4, pc}

00029c58 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   29c58:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   29c5a:	6803      	ldr	r3, [r0, #0]
   29c5c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29c5e:	2102      	movs	r1, #2
   29c60:	f7ff ffe2 	bl	29c28 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   29c64:	4620      	mov	r0, r4
   29c66:	bd10      	pop	{r4, pc}

00029c68 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29c68:	6802      	ldr	r2, [r0, #0]
   29c6a:	6880      	ldr	r0, [r0, #8]
}
   29c6c:	1a10      	subs	r0, r2, r0
   29c6e:	4770      	bx	lr

00029c70 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29c70:	8883      	ldrh	r3, [r0, #4]
   29c72:	88c2      	ldrh	r2, [r0, #6]
   29c74:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29c76:	6803      	ldr	r3, [r0, #0]
   29c78:	6880      	ldr	r0, [r0, #8]
   29c7a:	1a18      	subs	r0, r3, r0
}
   29c7c:	1a10      	subs	r0, r2, r0
   29c7e:	4770      	bx	lr

00029c80 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   29c80:	6903      	ldr	r3, [r0, #16]
   29c82:	b2c9      	uxtb	r1, r1
   29c84:	220c      	movs	r2, #12
   29c86:	fb01 3302 	mla	r3, r1, r2, r3
   29c8a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   29c8c:	f000 0007 	and.w	r0, r0, #7
   29c90:	4770      	bx	lr

00029c92 <set_on_state>:
	__asm__ volatile(
   29c92:	f04f 0340 	mov.w	r3, #64	; 0x40
   29c96:	f3ef 8211 	mrs	r2, BASEPRI
   29c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   29c9e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29ca2:	6803      	ldr	r3, [r0, #0]
   29ca4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29ca8:	f043 0302 	orr.w	r3, r3, #2
   29cac:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29cae:	f382 8811 	msr	BASEPRI, r2
   29cb2:	f3bf 8f6f 	isb	sy
}
   29cb6:	4770      	bx	lr

00029cb8 <stop>:
{
   29cb8:	4603      	mov	r3, r0
   29cba:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   29cbc:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   29cbe:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29cc0:	f04f 0440 	mov.w	r4, #64	; 0x40
   29cc4:	f3ef 8611 	mrs	r6, BASEPRI
   29cc8:	f384 8812 	msr	BASEPRI_MAX, r4
   29ccc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29cd0:	250c      	movs	r5, #12
   29cd2:	fb05 0401 	mla	r4, r5, r1, r0
   29cd6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   29cd8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   29cdc:	d001      	beq.n	29ce2 <stop+0x2a>
   29cde:	42a2      	cmp	r2, r4
   29ce0:	d111      	bne.n	29d06 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   29ce2:	fb05 0001 	mla	r0, r5, r1, r0
   29ce6:	2201      	movs	r2, #1
   29ce8:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   29cea:	2000      	movs	r0, #0
	__asm__ volatile(
   29cec:	f386 8811 	msr	BASEPRI, r6
   29cf0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   29cf4:	b930      	cbnz	r0, 29d04 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   29cf6:	685b      	ldr	r3, [r3, #4]
   29cf8:	220c      	movs	r2, #12
   29cfa:	fb02 3101 	mla	r1, r2, r1, r3
   29cfe:	684b      	ldr	r3, [r1, #4]
   29d00:	4798      	blx	r3
	return 0;
   29d02:	2000      	movs	r0, #0
}
   29d04:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   29d06:	f04f 30ff 	mov.w	r0, #4294967295
   29d0a:	e7ef      	b.n	29cec <stop+0x34>

00029d0c <api_stop>:
	return stop(dev, subsys, CTX_API);
   29d0c:	2280      	movs	r2, #128	; 0x80
   29d0e:	f7ff bfd3 	b.w	29cb8 <stop>

00029d12 <async_start>:
{
   29d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d14:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29d16:	6904      	ldr	r4, [r0, #16]
{
   29d18:	4605      	mov	r5, r0
   29d1a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29d1c:	f04f 0040 	mov.w	r0, #64	; 0x40
   29d20:	f3ef 8c11 	mrs	ip, BASEPRI
   29d24:	f380 8812 	msr	BASEPRI_MAX, r0
   29d28:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29d2c:	260c      	movs	r6, #12
   29d2e:	fb06 4601 	mla	r6, r6, r1, r4
   29d32:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29d34:	f000 0e07 	and.w	lr, r0, #7
   29d38:	f1be 0f01 	cmp.w	lr, #1
   29d3c:	d110      	bne.n	29d60 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29d3e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   29d40:	2600      	movs	r6, #0
	__asm__ volatile(
   29d42:	f38c 8811 	msr	BASEPRI, ip
   29d46:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   29d4a:	b93e      	cbnz	r6, 29d5c <async_start+0x4a>
	subdata->cb = cb;
   29d4c:	200c      	movs	r0, #12
   29d4e:	4341      	muls	r1, r0
   29d50:	440c      	add	r4, r1
	subdata->user_data = user_data;
   29d52:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   29d56:	686b      	ldr	r3, [r5, #4]
   29d58:	585b      	ldr	r3, [r3, r1]
   29d5a:	4798      	blx	r3
}
   29d5c:	4630      	mov	r0, r6
   29d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29d60:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   29d64:	4287      	cmp	r7, r0
   29d66:	bf14      	ite	ne
   29d68:	f04f 36ff 	movne.w	r6, #4294967295
   29d6c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   29d70:	e7e7      	b.n	29d42 <async_start+0x30>

00029d72 <api_start>:
{
   29d72:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   29d74:	2480      	movs	r4, #128	; 0x80
   29d76:	9400      	str	r4, [sp, #0]
   29d78:	f7ff ffcb 	bl	29d12 <async_start>
}
   29d7c:	b002      	add	sp, #8
   29d7e:	bd10      	pop	{r4, pc}

00029d80 <onoff_started_callback>:
	return &data->mgr[type];
   29d80:	6900      	ldr	r0, [r0, #16]
{
   29d82:	b410      	push	{r4}
	return &data->mgr[type];
   29d84:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   29d86:	241c      	movs	r4, #28
   29d88:	fb03 0004 	mla	r0, r3, r4, r0
   29d8c:	2100      	movs	r1, #0
}
   29d8e:	bc10      	pop	{r4}
	notify(mgr, 0);
   29d90:	4710      	bx	r2

00029d92 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   29d92:	2000      	movs	r0, #0
   29d94:	f7f6 b8e6 	b.w	1ff64 <nrfx_clock_start>

00029d98 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29d98:	2000      	movs	r0, #0
   29d9a:	f000 ba8d 	b.w	2a2b8 <nrfx_clock_stop>

00029d9e <blocking_start_callback>:
{
   29d9e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   29da0:	f7f7 bcd4 	b.w	2174c <z_impl_k_sem_give>

00029da4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29da4:	6843      	ldr	r3, [r0, #4]
   29da6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29da8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   29dac:	600b      	str	r3, [r1, #0]
}
   29dae:	2000      	movs	r0, #0
   29db0:	4770      	bx	lr

00029db2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29db2:	6843      	ldr	r3, [r0, #4]
   29db4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   29db6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   29dba:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   29dbe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29dc2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   29dc6:	2000      	movs	r0, #0
   29dc8:	4770      	bx	lr

00029dca <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dca:	6843      	ldr	r3, [r0, #4]
   29dcc:	685b      	ldr	r3, [r3, #4]
}
   29dce:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   29dd0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29dd4:	4770      	bx	lr

00029dd6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dd6:	6843      	ldr	r3, [r0, #4]
   29dd8:	685b      	ldr	r3, [r3, #4]
}
   29dda:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29ddc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   29de0:	4770      	bx	lr

00029de2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29de2:	6843      	ldr	r3, [r0, #4]
   29de4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29de6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   29dea:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   29dee:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   29df0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29df4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   29df8:	2000      	movs	r0, #0
   29dfa:	4770      	bx	lr

00029dfc <gpio_nrfx_manage_callback>:
	return port->data;
   29dfc:	6903      	ldr	r3, [r0, #16]
	return list->head;
   29dfe:	6858      	ldr	r0, [r3, #4]
{
   29e00:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   29e02:	b158      	cbz	r0, 29e1c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29e04:	2400      	movs	r4, #0
   29e06:	4281      	cmp	r1, r0
   29e08:	d112      	bne.n	29e30 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   29e0a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   29e0c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   29e0e:	b954      	cbnz	r4, 29e26 <gpio_nrfx_manage_callback+0x2a>
   29e10:	428d      	cmp	r5, r1
	list->head = node;
   29e12:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   29e14:	d100      	bne.n	29e18 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   29e16:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29e18:	2000      	movs	r0, #0
   29e1a:	6008      	str	r0, [r1, #0]
	if (set) {
   29e1c:	b96a      	cbnz	r2, 29e3a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   29e1e:	2000      	movs	r0, #0
}
   29e20:	bd30      	pop	{r4, r5, pc}
   29e22:	4628      	mov	r0, r5
   29e24:	e7ef      	b.n	29e06 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   29e26:	428d      	cmp	r5, r1
	parent->next = child;
   29e28:	6020      	str	r0, [r4, #0]
	list->tail = node;
   29e2a:	bf08      	it	eq
   29e2c:	609c      	streq	r4, [r3, #8]
}
   29e2e:	e7f3      	b.n	29e18 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   29e30:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29e32:	4604      	mov	r4, r0
   29e34:	2d00      	cmp	r5, #0
   29e36:	d1f4      	bne.n	29e22 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   29e38:	b13a      	cbz	r2, 29e4a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   29e3a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   29e3c:	685a      	ldr	r2, [r3, #4]
   29e3e:	600a      	str	r2, [r1, #0]
	list->head = node;
   29e40:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29e42:	2800      	cmp	r0, #0
   29e44:	d1eb      	bne.n	29e1e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   29e46:	6099      	str	r1, [r3, #8]
}
   29e48:	e7ea      	b.n	29e20 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   29e4a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29e4e:	e7e7      	b.n	29e20 <gpio_nrfx_manage_callback+0x24>

00029e50 <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   29e50:	2200      	movs	r2, #0
   29e52:	2101      	movs	r1, #1
   29e54:	2004      	movs	r0, #4
   29e56:	f7ea bd1f 	b.w	14898 <z_arm_irq_priority_set>

00029e5a <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   29e5a:	b530      	push	{r4, r5, lr}
   29e5c:	4604      	mov	r4, r0
	while (*count) {
   29e5e:	6808      	ldr	r0, [r1, #0]
   29e60:	b908      	cbnz	r0, 29e66 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   29e62:	6010      	str	r0, [r2, #0]
	return NULL;
   29e64:	e004      	b.n	29e70 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   29e66:	6823      	ldr	r3, [r4, #0]
   29e68:	685d      	ldr	r5, [r3, #4]
   29e6a:	b115      	cbz	r5, 29e72 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   29e6c:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   29e6e:	6015      	str	r5, [r2, #0]
}
   29e70:	bd30      	pop	{r4, r5, pc}
		++(*current);
   29e72:	3308      	adds	r3, #8
		--(*count);
   29e74:	3801      	subs	r0, #1
		++(*current);
   29e76:	6023      	str	r3, [r4, #0]
		--(*count);
   29e78:	6008      	str	r0, [r1, #0]
   29e7a:	e7f0      	b.n	29e5e <spi_context_get_next_buf.constprop.0+0x4>

00029e7c <z_log_msg_static_create.constprop.0>:
   29e7c:	2300      	movs	r3, #0
   29e7e:	f7e9 bd81 	b.w	13984 <z_impl_z_log_msg_static_create>

00029e82 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   29e82:	4603      	mov	r3, r0
   29e84:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   29e86:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29e88:	7919      	ldrb	r1, [r3, #4]
   29e8a:	2301      	movs	r3, #1
   29e8c:	fa03 f101 	lsl.w	r1, r3, r1
   29e90:	6903      	ldr	r3, [r0, #16]
   29e92:	681b      	ldr	r3, [r3, #0]
   29e94:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   29e96:	bf18      	it	ne
   29e98:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   29e9c:	b112      	cbz	r2, 29ea4 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   29e9e:	6883      	ldr	r3, [r0, #8]
   29ea0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29ea2:	4718      	bx	r3
   29ea4:	6883      	ldr	r3, [r0, #8]
   29ea6:	691b      	ldr	r3, [r3, #16]
   29ea8:	e7fb      	b.n	29ea2 <gpio_pin_set_dt.isra.0+0x20>

00029eaa <_spi_context_cs_control>:
{
   29eaa:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29eac:	6803      	ldr	r3, [r0, #0]
{
   29eae:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29eb0:	b1e3      	cbz	r3, 29eec <_spi_context_cs_control+0x42>
   29eb2:	6898      	ldr	r0, [r3, #8]
   29eb4:	b1d0      	cbz	r0, 29eec <_spi_context_cs_control+0x42>
   29eb6:	6805      	ldr	r5, [r0, #0]
   29eb8:	b1c5      	cbz	r5, 29eec <_spi_context_cs_control+0x42>
		if (on) {
   29eba:	b149      	cbz	r1, 29ed0 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   29ebc:	2101      	movs	r1, #1
   29ebe:	f7ff ffe0 	bl	29e82 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   29ec2:	6823      	ldr	r3, [r4, #0]
   29ec4:	689b      	ldr	r3, [r3, #8]
   29ec6:	6898      	ldr	r0, [r3, #8]
}
   29ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   29ecc:	f000 bf4c 	b.w	2ad68 <z_impl_k_busy_wait>
			if (!force_off &&
   29ed0:	b912      	cbnz	r2, 29ed8 <_spi_context_cs_control+0x2e>
   29ed2:	889b      	ldrh	r3, [r3, #4]
   29ed4:	04db      	lsls	r3, r3, #19
   29ed6:	d409      	bmi.n	29eec <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   29ed8:	6880      	ldr	r0, [r0, #8]
   29eda:	f000 ff45 	bl	2ad68 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   29ede:	6823      	ldr	r3, [r4, #0]
   29ee0:	2100      	movs	r1, #0
   29ee2:	6898      	ldr	r0, [r3, #8]
}
   29ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   29ee8:	f7ff bfcb 	b.w	29e82 <gpio_pin_set_dt.isra.0>
}
   29eec:	bd38      	pop	{r3, r4, r5, pc}

00029eee <spi_context_unlock_unconditionally>:
{
   29eee:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   29ef0:	2201      	movs	r2, #1
   29ef2:	2100      	movs	r1, #0
{
   29ef4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   29ef6:	f7ff ffd8 	bl	29eaa <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   29efa:	69a3      	ldr	r3, [r4, #24]
   29efc:	b933      	cbnz	r3, 29f0c <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   29efe:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   29f00:	f104 0010 	add.w	r0, r4, #16
}
   29f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29f08:	f7f7 bc20 	b.w	2174c <z_impl_k_sem_give>
   29f0c:	bd10      	pop	{r4, pc}

00029f0e <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
   29f0e:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   29f10:	6803      	ldr	r3, [r0, #0]
   29f12:	428b      	cmp	r3, r1
{
   29f14:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   29f16:	d106      	bne.n	29f26 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   29f18:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   29f1c:	b934      	cbnz	r4, 29f2c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   29f1e:	f7ff ffe6 	bl	29eee <spi_context_unlock_unconditionally>
	return 0;
   29f22:	4620      	mov	r0, r4
}
   29f24:	bd10      	pop	{r4, pc}
		return -EINVAL;
   29f26:	f06f 0015 	mvn.w	r0, #21
   29f2a:	e7fb      	b.n	29f24 <spi_nrfx_release+0x16>
		return -EBUSY;
   29f2c:	f06f 000f 	mvn.w	r0, #15
   29f30:	e7f8      	b.n	29f24 <spi_nrfx_release+0x16>

00029f32 <is_regular_addr_valid>:
{
   29f32:	b538      	push	{r3, r4, r5, lr}
   29f34:	4605      	mov	r5, r0
   29f36:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29f38:	f000 fa46 	bl	2a3c8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   29f3c:	2d00      	cmp	r5, #0
   29f3e:	db07      	blt.n	29f50 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   29f40:	42a8      	cmp	r0, r5
   29f42:	d905      	bls.n	29f50 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29f44:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29f46:	4284      	cmp	r4, r0
   29f48:	bf8c      	ite	hi
   29f4a:	2000      	movhi	r0, #0
   29f4c:	2001      	movls	r0, #1
}
   29f4e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   29f50:	2000      	movs	r0, #0
   29f52:	e7fc      	b.n	29f4e <is_regular_addr_valid+0x1c>

00029f54 <flash_nrf_read>:
{
   29f54:	b570      	push	{r4, r5, r6, lr}
   29f56:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   29f58:	4628      	mov	r0, r5
   29f5a:	4619      	mov	r1, r3
{
   29f5c:	4616      	mov	r6, r2
   29f5e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   29f60:	f7ff ffe7 	bl	29f32 <is_regular_addr_valid>
   29f64:	b928      	cbnz	r0, 29f72 <flash_nrf_read+0x1e>
   29f66:	4621      	mov	r1, r4
   29f68:	4628      	mov	r0, r5
}
   29f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29f6e:	f7f4 b9c3 	b.w	1e2f8 <flash_nrf_read.part.0>
	if (!len) {
   29f72:	b124      	cbz	r4, 29f7e <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   29f74:	4622      	mov	r2, r4
   29f76:	4629      	mov	r1, r5
   29f78:	4630      	mov	r0, r6
   29f7a:	f7fd fc58 	bl	2782e <memcpy>
}
   29f7e:	2000      	movs	r0, #0
   29f80:	bd70      	pop	{r4, r5, r6, pc}

00029f82 <uart_nrfx_config_get>:
	*cfg = data->uart_config;
   29f82:	6902      	ldr	r2, [r0, #16]
{
   29f84:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29f86:	e892 0003 	ldmia.w	r2, {r0, r1}
   29f8a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   29f8e:	2000      	movs	r0, #0
   29f90:	4770      	bx	lr

00029f92 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   29f92:	2000      	movs	r0, #0
   29f94:	4770      	bx	lr

00029f96 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   29f96:	b538      	push	{r3, r4, r5, lr}
   29f98:	460c      	mov	r4, r1
   29f9a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29f9c:	f7ec ff56 	bl	16e4c <bt_is_ready>
   29fa0:	b128      	cbz	r0, 29fae <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   29fa2:	4629      	mov	r1, r5
   29fa4:	4620      	mov	r0, r4
}
   29fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   29faa:	f7ec ba15 	b.w	163d8 <bt_hci_le_rand>
}
   29fae:	f06f 000a 	mvn.w	r0, #10
   29fb2:	bd38      	pop	{r3, r4, r5, pc}

00029fb4 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   29fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29fb6:	460f      	mov	r7, r1
   29fb8:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   29fba:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   29fbe:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   29fc0:	42a6      	cmp	r6, r4
   29fc2:	d803      	bhi.n	29fcc <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   29fc4:	d116      	bne.n	29ff4 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   29fc6:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   29fc8:	b003      	add	sp, #12
   29fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   29fcc:	1b33      	subs	r3, r6, r4
   29fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   29fd2:	bf38      	it	cc
   29fd4:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   29fd6:	462a      	mov	r2, r5
   29fd8:	ab01      	add	r3, sp, #4
   29fda:	1939      	adds	r1, r7, r4
   29fdc:	2000      	movs	r0, #0
   29fde:	f7f9 f817 	bl	23010 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   29fe2:	b920      	cbnz	r0, 29fee <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   29fe4:	9b01      	ldr	r3, [sp, #4]
   29fe6:	42ab      	cmp	r3, r5
   29fe8:	d101      	bne.n	29fee <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   29fea:	442c      	add	r4, r5
   29fec:	e7e8      	b.n	29fc0 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   29fee:	f06f 0015 	mvn.w	r0, #21
   29ff2:	e7e9      	b.n	29fc8 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   29ff4:	2016      	movs	r0, #22
   29ff6:	e7e7      	b.n	29fc8 <entropy_cc3xx_rng_get_entropy+0x14>

00029ff8 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   29ff8:	2200      	movs	r2, #0
{
   29ffa:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   29ffc:	4611      	mov	r1, r2
   29ffe:	4610      	mov	r0, r2
   2a000:	f7f8 ffd4 	bl	22fac <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2a004:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   2a006:	bf18      	it	ne
   2a008:	f06f 0015 	mvnne.w	r0, #21
   2a00c:	bd08      	pop	{r3, pc}

0002a00e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2a00e:	4770      	bx	lr

0002a010 <sys_clock_cycle_get_32>:
{
   2a010:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2a012:	f7f4 fe4d 	bl	1ecb0 <z_nrf_rtc_timer_read>
}
   2a016:	bd08      	pop	{r3, pc}

0002a018 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2a018:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2a01a:	6843      	ldr	r3, [r0, #4]
   2a01c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2a01e:	7a03      	ldrb	r3, [r0, #8]
   2a020:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2a024:	3b01      	subs	r3, #1
   2a026:	00db      	lsls	r3, r3, #3
   2a028:	6845      	ldr	r5, [r0, #4]
   2a02a:	6814      	ldr	r4, [r2, #0]
   2a02c:	441d      	add	r5, r3
   2a02e:	42ac      	cmp	r4, r5
   2a030:	d902      	bls.n	2a038 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2a032:	f06f 0001 	mvn.w	r0, #1
}
   2a036:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2a038:	7965      	ldrb	r5, [r4, #5]
   2a03a:	428d      	cmp	r5, r1
   2a03c:	d002      	beq.n	2a044 <pinctrl_lookup_state+0x2c>
		(*state)++;
   2a03e:	3408      	adds	r4, #8
   2a040:	6014      	str	r4, [r2, #0]
   2a042:	e7f1      	b.n	2a028 <pinctrl_lookup_state+0x10>
			return 0;
   2a044:	2000      	movs	r0, #0
   2a046:	e7f6      	b.n	2a036 <pinctrl_lookup_state+0x1e>

0002a048 <nrf_gpio_pin_write>:
    if (value == 0)
   2a048:	b909      	cbnz	r1, 2a04e <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2a04a:	f7f4 bfd7 	b.w	1effc <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2a04e:	f7f5 b807 	b.w	1f060 <nrf_gpio_pin_set>

0002a052 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a056:	4616      	mov	r6, r2
   2a058:	4605      	mov	r5, r0
   2a05a:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a05e:	42af      	cmp	r7, r5
   2a060:	d102      	bne.n	2a068 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2a062:	2000      	movs	r0, #0
}
   2a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a068:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   2a06a:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a06c:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2a070:	2b19      	cmp	r3, #25
   2a072:	d862      	bhi.n	2a13a <pinctrl_configure_pins+0xe8>
   2a074:	e8df f003 	tbb	[pc, r3]
   2a078:	4121190d 	.word	0x4121190d
   2a07c:	61413726 	.word	0x61413726
   2a080:	61616161 	.word	0x61616161
   2a084:	61616161 	.word	0x61616161
   2a088:	61616161 	.word	0x61616161
   2a08c:	52466161 	.word	0x52466161
   2a090:	5c57      	.short	0x5c57
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2a092:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a096:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2a09a:	6828      	ldr	r0, [r5, #0]
   2a09c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2a0a0:	f7f4 ffde 	bl	1f060 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2a0a4:	4643      	mov	r3, r8
   2a0a6:	2201      	movs	r2, #1
   2a0a8:	e005      	b.n	2a0b6 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2a0aa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a0ae:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2a0b2:	4643      	mov	r3, r8
   2a0b4:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2a0b6:	4611      	mov	r1, r2
   2a0b8:	e010      	b.n	2a0dc <pinctrl_configure_pins+0x8a>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2a0ba:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a0be:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2a0c2:	e7ea      	b.n	2a09a <pinctrl_configure_pins+0x48>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2a0c4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a0c8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2a0cc:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   2a0ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2a0d2:	f7f4 ff93 	bl	1effc <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2a0d6:	4643      	mov	r3, r8
   2a0d8:	2200      	movs	r2, #0
   2a0da:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2a0dc:	6828      	ldr	r0, [r5, #0]
   2a0de:	f7f4 ff9d 	bl	1f01c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a0e2:	3504      	adds	r5, #4
   2a0e4:	e7bb      	b.n	2a05e <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2a0e6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a0ea:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2a0ee:	6828      	ldr	r0, [r5, #0]
   2a0f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2a0f4:	f7f4 ff82 	bl	1effc <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2a0f8:	e7d4      	b.n	2a0a4 <pinctrl_configure_pins+0x52>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   2a0fa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a0fe:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   2a102:	e7d6      	b.n	2a0b2 <pinctrl_configure_pins+0x60>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2a104:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a108:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2a10c:	6828      	ldr	r0, [r5, #0]
   2a10e:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2a112:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2a116:	f7ff ff97 	bl	2a048 <nrf_gpio_pin_write>
   2a11a:	e7c3      	b.n	2a0a4 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2a11c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a120:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2a124:	e7f2      	b.n	2a10c <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2a126:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a12a:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2a12e:	e7ed      	b.n	2a10c <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2a130:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2a134:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   2a138:	e7e8      	b.n	2a10c <pinctrl_configure_pins+0xba>
		switch (NRF_GET_FUN(pins[i])) {
   2a13a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a13e:	e791      	b.n	2a064 <pinctrl_configure_pins+0x12>

0002a140 <rand_prio_high_vector_get>:
   2a140:	f7f4 bff4 	b.w	1f12c <rand_prio_low_vector_get>

0002a144 <hci_driver_send>:
{
   2a144:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2a146:	8983      	ldrh	r3, [r0, #12]
{
   2a148:	4605      	mov	r5, r0
	if (!buf->len) {
   2a14a:	b373      	cbz	r3, 2a1aa <hci_driver_send+0x66>
   2a14c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2a14e:	b1a3      	cbz	r3, 2a17a <hci_driver_send+0x36>
   2a150:	2b02      	cmp	r3, #2
   2a152:	d12a      	bne.n	2a1aa <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2a154:	f04f 30ff 	mov.w	r0, #4294967295
   2a158:	f04f 31ff 	mov.w	r1, #4294967295
   2a15c:	f7f4 ff90 	bl	1f080 <multithreading_lock_acquire>
	if (!errcode) {
   2a160:	4604      	mov	r4, r0
   2a162:	b940      	cbnz	r0, 2a176 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2a164:	68a8      	ldr	r0, [r5, #8]
   2a166:	f7e3 fb3f 	bl	d7e8 <sdc_hci_data_put>
   2a16a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2a16c:	f7f4 ff90 	bl	1f090 <multithreading_lock_release>
		if (errcode) {
   2a170:	b1b4      	cbz	r4, 2a1a0 <hci_driver_send+0x5c>
			receive_signal_raise();
   2a172:	f7f4 ffef 	bl	1f154 <receive_signal_raise>
}
   2a176:	4620      	mov	r0, r4
   2a178:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2a17a:	f04f 30ff 	mov.w	r0, #4294967295
   2a17e:	f04f 31ff 	mov.w	r1, #4294967295
   2a182:	f7f4 ff7d 	bl	1f080 <multithreading_lock_acquire>
	if (!errcode) {
   2a186:	4604      	mov	r4, r0
   2a188:	2800      	cmp	r0, #0
   2a18a:	d1f4      	bne.n	2a176 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2a18c:	68a8      	ldr	r0, [r5, #8]
   2a18e:	f7f5 f9a3 	bl	1f4d8 <hci_internal_cmd_put>
   2a192:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2a194:	f7f4 ff7c 	bl	1f090 <multithreading_lock_release>
	if (errcode) {
   2a198:	2c00      	cmp	r4, #0
   2a19a:	d1ec      	bne.n	2a176 <hci_driver_send+0x32>
	receive_signal_raise();
   2a19c:	f7f4 ffda 	bl	1f154 <receive_signal_raise>
		net_buf_unref(buf);
   2a1a0:	4628      	mov	r0, r5
   2a1a2:	f7f3 fad7 	bl	1d754 <net_buf_unref>
   2a1a6:	2400      	movs	r4, #0
   2a1a8:	e7e5      	b.n	2a176 <hci_driver_send+0x32>
	switch (type) {
   2a1aa:	f06f 0415 	mvn.w	r4, #21
   2a1ae:	e7e2      	b.n	2a176 <hci_driver_send+0x32>

0002a1b0 <receive_work_handler>:
	hci_driver_receive_process();
   2a1b0:	f7f5 b93e 	b.w	1f430 <hci_driver_receive_process>

0002a1b4 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1b6:	b08d      	sub	sp, #52	; 0x34
   2a1b8:	4615      	mov	r5, r2
   2a1ba:	466a      	mov	r2, sp
   2a1bc:	f100 0310 	add.w	r3, r0, #16
   2a1c0:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2a1c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a1c6:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2a1ca:	4298      	cmp	r0, r3
   2a1cc:	d1f9      	bne.n	2a1c2 <bt_encrypt_le+0xe>
   2a1ce:	aa04      	add	r2, sp, #16
   2a1d0:	f101 0310 	add.w	r3, r1, #16
   2a1d4:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2a1d6:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2a1da:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2a1de:	428b      	cmp	r3, r1
   2a1e0:	d1f9      	bne.n	2a1d6 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2a1e2:	f04f 30ff 	mov.w	r0, #4294967295
   2a1e6:	f04f 31ff 	mov.w	r1, #4294967295
   2a1ea:	f7f4 ff49 	bl	1f080 <multithreading_lock_acquire>

	if (!errcode) {
   2a1ee:	4604      	mov	r4, r0
   2a1f0:	b990      	cbnz	r0, 2a218 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2a1f2:	aa08      	add	r2, sp, #32
   2a1f4:	4639      	mov	r1, r7
   2a1f6:	4630      	mov	r0, r6
   2a1f8:	f7e3 f86a 	bl	d2d0 <sdc_soc_ecb_block_encrypt>
   2a1fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2a1fe:	f7f4 ff47 	bl	1f090 <multithreading_lock_release>
	}

	if (!errcode) {
   2a202:	b94c      	cbnz	r4, 2a218 <bt_encrypt_le+0x64>
   2a204:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2a206:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2a20a:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2a20c:	f812 1901 	ldrb.w	r1, [r2], #-1
   2a210:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2a214:	429d      	cmp	r5, r3
   2a216:	d1f9      	bne.n	2a20c <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2a218:	4620      	mov	r0, r4
   2a21a:	b00d      	add	sp, #52	; 0x34
   2a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a21e <sys_memcpy_swap.constprop.0>:
   2a21e:	f101 0320 	add.w	r3, r1, #32
   2a222:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2a224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2a228:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2a22c:	428b      	cmp	r3, r1
   2a22e:	d1f9      	bne.n	2a224 <sys_memcpy_swap.constprop.0+0x6>
}
   2a230:	4770      	bx	lr

0002a232 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2a232:	2100      	movs	r1, #0
   2a234:	f7f5 bdde 	b.w	1fdf4 <cmd_le_generate_dhkey>

0002a238 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2a238:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2a23c:	2901      	cmp	r1, #1
   2a23e:	d801      	bhi.n	2a244 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2a240:	f7f5 bdd8 	b.w	1fdf4 <cmd_le_generate_dhkey>
}
   2a244:	2012      	movs	r0, #18
   2a246:	4770      	bx	lr

0002a248 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2a248:	4668      	mov	r0, sp
   2a24a:	f020 0107 	bic.w	r1, r0, #7
   2a24e:	468d      	mov	sp, r1
   2a250:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2a252:	f7d9 f9e9 	bl	3628 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2a256:	f7ea fb39 	bl	148cc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2a25a:	f7ea fc01 	bl	14a60 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2a25e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a262:	4685      	mov	sp, r0
   2a264:	4770      	bx	lr

0002a266 <mpsl_low_prio_work_handler>:
{
   2a266:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2a268:	f04f 31ff 	mov.w	r1, #4294967295
   2a26c:	f04f 30ff 	mov.w	r0, #4294967295
   2a270:	f7f4 ff06 	bl	1f080 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2a274:	f7e2 fe51 	bl	cf1a <mpsl_low_priority_process>
}
   2a278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2a27c:	f7f4 bf08 	b.w	1f090 <multithreading_lock_release>

0002a280 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2a280:	4668      	mov	r0, sp
   2a282:	f020 0107 	bic.w	r1, r0, #7
   2a286:	468d      	mov	sp, r1
   2a288:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2a28a:	f7d9 f943 	bl	3514 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2a28e:	f7ea fb1d 	bl	148cc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2a292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a296:	4685      	mov	sp, r0
   2a298:	4770      	bx	lr

0002a29a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2a29a:	4668      	mov	r0, sp
   2a29c:	f020 0107 	bic.w	r1, r0, #7
   2a2a0:	468d      	mov	sp, r1
   2a2a2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2a2a4:	f7d6 fea6 	bl	ff4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2a2a8:	f7ea fb10 	bl	148cc <_arch_isr_direct_pm>
   2a2ac:	f7ea fbd8 	bl	14a60 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2a2b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a2b4:	4685      	mov	sp, r0
   2a2b6:	4770      	bx	lr

0002a2b8 <nrfx_clock_stop>:
	switch (domain) {
   2a2b8:	2801      	cmp	r0, #1
   2a2ba:	d101      	bne.n	2a2c0 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2a2bc:	f7da b810 	b.w	42e0 <mpsl_clock_hfclk_release>
}
   2a2c0:	4770      	bx	lr

0002a2c2 <nrfx_clock_enable>:
}
   2a2c2:	4770      	bx	lr

0002a2c4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2a2c4:	f7d9 be20 	b.w	3f08 <MPSL_IRQ_CLOCK_Handler>

0002a2c8 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2a2c8:	f7da b9da 	b.w	4680 <mpsl_is_initialized>

0002a2cc <nrf_flash_sync_get_timestamp_begin>:
}
   2a2cc:	4770      	bx	lr

0002a2ce <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   2a2ce:	2000      	movs	r0, #0
   2a2d0:	4770      	bx	lr

0002a2d2 <temp_nrf5_mpsl_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2a2d2:	2939      	cmp	r1, #57	; 0x39
{
   2a2d4:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   2a2d6:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2a2d8:	d001      	beq.n	2a2de <temp_nrf5_mpsl_sample_fetch+0xc>
   2a2da:	290c      	cmp	r1, #12
   2a2dc:	d104      	bne.n	2a2e8 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   2a2de:	f7da f9e7 	bl	46b0 <mpsl_temperature_get>
   2a2e2:	6020      	str	r0, [r4, #0]
	return 0;
   2a2e4:	2000      	movs	r0, #0
}
   2a2e6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2a2e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a2ec:	e7fb      	b.n	2a2e6 <temp_nrf5_mpsl_sample_fetch+0x14>

0002a2ee <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2a2ee:	f7f8 be07 	b.w	22f00 <nrf_cc3xx_platform_init>

0002a2f2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2a2f2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2a2f4:	f7ea f950 	bl	14598 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2a2f8:	f7ea fa02 	bl	14700 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2a2fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2a300:	f7f8 bdfe 	b.w	22f00 <nrf_cc3xx_platform_init>

0002a304 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a304:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2a308:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2a30c:	f1a0 0308 	sub.w	r3, r0, #8
   2a310:	4258      	negs	r0, r3
   2a312:	4158      	adcs	r0, r3
   2a314:	4770      	bx	lr

0002a316 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2a316:	4700      	bx	r0

0002a318 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2a318:	f000 bd26 	b.w	2ad68 <z_impl_k_busy_wait>

0002a31c <nrf_gpio_reconfigure>:
{
   2a31c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a31e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a320:	a801      	add	r0, sp, #4
{
   2a322:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2a326:	4617      	mov	r7, r2
   2a328:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a32a:	f7f6 f895 	bl	20458 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a32e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a330:	2f00      	cmp	r7, #0
   2a332:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2a336:	bf14      	ite	ne
   2a338:	2302      	movne	r3, #2
   2a33a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a33c:	2900      	cmp	r1, #0
   2a33e:	bf18      	it	ne
   2a340:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a344:	2d00      	cmp	r5, #0
   2a346:	bf14      	ite	ne
   2a348:	f04f 0c0c 	movne.w	ip, #12
   2a34c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a350:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a352:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a356:	bf14      	ite	ne
   2a358:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2a35c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a360:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a362:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a366:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a36a:	bf14      	ite	ne
   2a36c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2a370:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a374:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2a378:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a37c:	b101      	cbz	r1, 2a380 <nrf_gpio_reconfigure+0x64>
   2a37e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2a380:	b10f      	cbz	r7, 2a386 <nrf_gpio_reconfigure+0x6a>
   2a382:	783f      	ldrb	r7, [r7, #0]
   2a384:	007f      	lsls	r7, r7, #1
   2a386:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2a388:	b10d      	cbz	r5, 2a38e <nrf_gpio_reconfigure+0x72>
   2a38a:	782d      	ldrb	r5, [r5, #0]
   2a38c:	00ad      	lsls	r5, r5, #2
   2a38e:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2a390:	b10c      	cbz	r4, 2a396 <nrf_gpio_reconfigure+0x7a>
   2a392:	7822      	ldrb	r2, [r4, #0]
   2a394:	0214      	lsls	r4, r2, #8
   2a396:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2a398:	b10e      	cbz	r6, 2a39e <nrf_gpio_reconfigure+0x82>
   2a39a:	7836      	ldrb	r6, [r6, #0]
   2a39c:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a39e:	432c      	orrs	r4, r5
   2a3a0:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2a3a2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2a3a6:	b003      	add	sp, #12
   2a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a3aa <nrf_gpio_cfg_sense_set>:
{
   2a3aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2a3ac:	f10d 030f 	add.w	r3, sp, #15
   2a3b0:	9301      	str	r3, [sp, #4]
   2a3b2:	2300      	movs	r3, #0
{
   2a3b4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2a3b8:	9300      	str	r3, [sp, #0]
   2a3ba:	461a      	mov	r2, r3
   2a3bc:	4619      	mov	r1, r3
   2a3be:	f7ff ffad 	bl	2a31c <nrf_gpio_reconfigure>
}
   2a3c2:	b005      	add	sp, #20
   2a3c4:	f85d fb04 	ldr.w	pc, [sp], #4

0002a3c8 <nrfx_nvmc_flash_size_get>:
   2a3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a3cc:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2a3ce:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2a3d0:	4350      	muls	r0, r2
   2a3d2:	4770      	bx	lr

0002a3d4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2a3d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a3d8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2a3da:	4770      	bx	lr

0002a3dc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2a3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a3e0:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2a3e2:	4770      	bx	lr

0002a3e4 <nrf_gpio_cfg_default>:
{
   2a3e4:	b507      	push	{r0, r1, r2, lr}
   2a3e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a3e8:	a801      	add	r0, sp, #4
   2a3ea:	f7f6 fbcf 	bl	20b8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2a3ee:	9b01      	ldr	r3, [sp, #4]
   2a3f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2a3f4:	2202      	movs	r2, #2
   2a3f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2a3fa:	b003      	add	sp, #12
   2a3fc:	f85d fb04 	ldr.w	pc, [sp], #4

0002a400 <nrf_gpio_pin_set>:
{
   2a400:	b507      	push	{r0, r1, r2, lr}
   2a402:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a404:	a801      	add	r0, sp, #4
   2a406:	f7f6 fbc1 	bl	20b8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a40a:	9a01      	ldr	r2, [sp, #4]
   2a40c:	2301      	movs	r3, #1
   2a40e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2a410:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2a414:	b003      	add	sp, #12
   2a416:	f85d fb04 	ldr.w	pc, [sp], #4

0002a41a <nrf_gpio_pin_clear>:
{
   2a41a:	b507      	push	{r0, r1, r2, lr}
   2a41c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a41e:	a801      	add	r0, sp, #4
   2a420:	f7f6 fbb4 	bl	20b8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2a424:	9a01      	ldr	r2, [sp, #4]
   2a426:	2301      	movs	r3, #1
   2a428:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2a42a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2a42e:	b003      	add	sp, #12
   2a430:	f85d fb04 	ldr.w	pc, [sp], #4

0002a434 <transfer_byte>:
{
   2a434:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2a436:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2a43a:	698a      	ldr	r2, [r1, #24]
   2a43c:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2a43e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2a442:	6a0b      	ldr	r3, [r1, #32]
   2a444:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2a446:	bf3e      	ittt	cc
   2a448:	694a      	ldrcc	r2, [r1, #20]
   2a44a:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2a44e:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2a450:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2a452:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2a456:	1c53      	adds	r3, r2, #1
   2a458:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2a45a:	3202      	adds	r2, #2
    if (p_cb->abort)
   2a45c:	b13c      	cbz	r4, 2a46e <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2a45e:	690c      	ldr	r4, [r1, #16]
   2a460:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2a462:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2a464:	bf38      	it	cc
   2a466:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2a468:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2a46a:	bf88      	it	hi
   2a46c:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2a46e:	690d      	ldr	r5, [r1, #16]
   2a470:	4295      	cmp	r5, r2
   2a472:	d905      	bls.n	2a480 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2a474:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2a476:	5c9b      	ldrb	r3, [r3, r2]
   2a478:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2a47c:	2001      	movs	r0, #1
   2a47e:	e00a      	b.n	2a496 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2a480:	698c      	ldr	r4, [r1, #24]
   2a482:	4294      	cmp	r4, r2
   2a484:	d901      	bls.n	2a48a <transfer_byte+0x56>
   2a486:	7fcb      	ldrb	r3, [r1, #31]
   2a488:	e7f6      	b.n	2a478 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2a48a:	42ab      	cmp	r3, r5
   2a48c:	d3f6      	bcc.n	2a47c <transfer_byte+0x48>
   2a48e:	42a3      	cmp	r3, r4
   2a490:	bf2c      	ite	cs
   2a492:	2000      	movcs	r0, #0
   2a494:	2001      	movcc	r0, #1
}
   2a496:	b003      	add	sp, #12
   2a498:	bd30      	pop	{r4, r5, pc}

0002a49a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2a49a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2a49c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2a49e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2a4a0:	bf9c      	itt	ls
   2a4a2:	6880      	ldrls	r0, [r0, #8]
   2a4a4:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2a4a6:	3b01      	subs	r3, #1
   2a4a8:	1a98      	subs	r0, r3, r2
}
   2a4aa:	4770      	bx	lr

0002a4ac <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   2a4b0:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2a4b4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2a4b6:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2a4ba:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   2a4bc:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2a4be:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2a4c0:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   2a4c2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   2a4c4:	d904      	bls.n	2a4d0 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2a4c6:	f7fd f9b2 	bl	2782e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2a4ca:	60ec      	str	r4, [r5, #12]
}
   2a4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2a4d0:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   2a4d2:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2a4d6:	f7fd f9aa 	bl	2782e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2a4da:	6868      	ldr	r0, [r5, #4]
   2a4dc:	4622      	mov	r2, r4
   2a4de:	eb07 0108 	add.w	r1, r7, r8
   2a4e2:	e7f0      	b.n	2a4c6 <_WriteNoCheck+0x1a>

0002a4e4 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2a4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2a4e8:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2a4ea:	4606      	mov	r6, r0
   2a4ec:	4689      	mov	r9, r1
   2a4ee:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2a4f0:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2a4f4:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2a4f6:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2a4f8:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2a4fa:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2a4fc:	bf28      	it	cs
   2a4fe:	18e4      	addcs	r4, r4, r3
   2a500:	3c01      	subs	r4, #1
   2a502:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2a504:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2a506:	42bc      	cmp	r4, r7
   2a508:	bf28      	it	cs
   2a50a:	463c      	movcs	r4, r7
   2a50c:	4294      	cmp	r4, r2
   2a50e:	bf28      	it	cs
   2a510:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   2a512:	4649      	mov	r1, r9
   2a514:	4428      	add	r0, r5
   2a516:	4622      	mov	r2, r4
   2a518:	f7fd f989 	bl	2782e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2a51c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2a51e:	4425      	add	r5, r4
      WrOff = 0u;
   2a520:	42ab      	cmp	r3, r5
   2a522:	bf08      	it	eq
   2a524:	2500      	moveq	r5, #0
  } while (NumBytes);
   2a526:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2a528:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2a52a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2a52c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2a52e:	d1e1      	bne.n	2a4f4 <_WriteBlocking+0x10>
}
   2a530:	4640      	mov	r0, r8
   2a532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a536 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2a536:	f7f6 bcb9 	b.w	20eac <_DoInit>

0002a53a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2a53a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2a53c:	f7ff fffb 	bl	2a536 <SEGGER_RTT_Init>

	return 0;
}
   2a540:	2000      	movs	r0, #0
   2a542:	bd08      	pop	{r3, pc}

0002a544 <z_device_state_init>:
}
   2a544:	4770      	bx	lr

0002a546 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2a546:	b138      	cbz	r0, 2a558 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2a548:	68c3      	ldr	r3, [r0, #12]
   2a54a:	8818      	ldrh	r0, [r3, #0]
   2a54c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2a550:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2a554:	4258      	negs	r0, r3
   2a556:	4158      	adcs	r0, r3
}
   2a558:	4770      	bx	lr

0002a55a <z_early_memset>:
	(void) memset(dst, c, n);
   2a55a:	f7fd b973 	b.w	27844 <memset>

0002a55e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2a55e:	f7fd b966 	b.w	2782e <memcpy>

0002a562 <k_heap_init>:
{
   2a562:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2a564:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a568:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a56c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2a56e:	f7fc ba9a 	b.w	26aa6 <sys_heap_init>

0002a572 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2a572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a576:	b085      	sub	sp, #20
   2a578:	4606      	mov	r6, r0
   2a57a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a57c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2a580:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a582:	f000 fbf5 	bl	2ad70 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a586:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a58a:	4605      	mov	r5, r0
   2a58c:	460f      	mov	r7, r1
	__asm__ volatile(
   2a58e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a592:	f3ef 8411 	mrs	r4, BASEPRI
   2a596:	f383 8812 	msr	BASEPRI_MAX, r3
   2a59a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a59e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2a5a2:	464a      	mov	r2, r9
   2a5a4:	4641      	mov	r1, r8
   2a5a6:	4630      	mov	r0, r6
   2a5a8:	f7fc fa15 	bl	269d6 <sys_heap_aligned_alloc>
   2a5ac:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2a5ae:	f7f7 ffbb 	bl	22528 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2a5b2:	9b03      	ldr	r3, [sp, #12]
   2a5b4:	b13b      	cbz	r3, 2a5c6 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2a5b6:	f384 8811 	msr	BASEPRI, r4
   2a5ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2a5be:	4618      	mov	r0, r3
   2a5c0:	b005      	add	sp, #20
   2a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2a5c6:	1a28      	subs	r0, r5, r0
   2a5c8:	eb67 0101 	sbc.w	r1, r7, r1
   2a5cc:	2801      	cmp	r0, #1
   2a5ce:	f171 0200 	sbcs.w	r2, r1, #0
   2a5d2:	dbf0      	blt.n	2a5b6 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a5d4:	e9cd 0100 	strd	r0, r1, [sp]
   2a5d8:	465a      	mov	r2, fp
   2a5da:	4621      	mov	r1, r4
   2a5dc:	4650      	mov	r0, sl
   2a5de:	f7f7 fc7f 	bl	21ee0 <z_pend_curr>
	__asm__ volatile(
   2a5e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a5e6:	f3ef 8411 	mrs	r4, BASEPRI
   2a5ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2a5ee:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2a5f2:	e7d6      	b.n	2a5a2 <k_heap_aligned_alloc+0x30>

0002a5f4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2a5f4:	b538      	push	{r3, r4, r5, lr}
   2a5f6:	4604      	mov	r4, r0
   2a5f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a5fc:	f3ef 8511 	mrs	r5, BASEPRI
   2a600:	f383 8812 	msr	BASEPRI_MAX, r3
   2a604:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2a608:	f7fc f9ad 	bl	26966 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2a60c:	f104 000c 	add.w	r0, r4, #12
   2a610:	f000 fb37 	bl	2ac82 <z_unpend_all>
   2a614:	b130      	cbz	r0, 2a624 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2a616:	4629      	mov	r1, r5
   2a618:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2a61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2a620:	f7f7 bb0a 	b.w	21c38 <z_reschedule>
	__asm__ volatile(
   2a624:	f385 8811 	msr	BASEPRI, r5
   2a628:	f3bf 8f6f 	isb	sy
}
   2a62c:	bd38      	pop	{r3, r4, r5, pc}

0002a62e <k_mem_slab_init>:
{
   2a62e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2a630:	2400      	movs	r4, #0
   2a632:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a634:	ea41 0402 	orr.w	r4, r1, r2
   2a638:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2a63c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2a640:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a642:	d10c      	bne.n	2a65e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2a644:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a646:	42a3      	cmp	r3, r4
   2a648:	d103      	bne.n	2a652 <k_mem_slab_init+0x24>
   2a64a:	e9c0 0000 	strd	r0, r0, [r0]
}
   2a64e:	2000      	movs	r0, #0
}
   2a650:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2a652:	6945      	ldr	r5, [r0, #20]
   2a654:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a656:	3401      	adds	r4, #1
		slab->free_list = p;
   2a658:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2a65a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2a65c:	e7f3      	b.n	2a646 <k_mem_slab_init+0x18>
		return -EINVAL;
   2a65e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2a662:	e7f5      	b.n	2a650 <k_mem_slab_init+0x22>

0002a664 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a666:	4604      	mov	r4, r0
   2a668:	460d      	mov	r5, r1
	__asm__ volatile(
   2a66a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a66e:	f3ef 8611 	mrs	r6, BASEPRI
   2a672:	f383 8812 	msr	BASEPRI_MAX, r3
   2a676:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2a67a:	6947      	ldr	r7, [r0, #20]
   2a67c:	b977      	cbnz	r7, 2a69c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2a67e:	f000 fae8 	bl	2ac52 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2a682:	b158      	cbz	r0, 2a69c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2a684:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a686:	6142      	str	r2, [r0, #20]
   2a688:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2a68a:	f000 fa71 	bl	2ab70 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2a68e:	4631      	mov	r1, r6
   2a690:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2a694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2a698:	f7f7 bace 	b.w	21c38 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2a69c:	682b      	ldr	r3, [r5, #0]
   2a69e:	6962      	ldr	r2, [r4, #20]
   2a6a0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2a6a2:	682b      	ldr	r3, [r5, #0]
   2a6a4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2a6a6:	69a3      	ldr	r3, [r4, #24]
   2a6a8:	3b01      	subs	r3, #1
   2a6aa:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2a6ac:	f386 8811 	msr	BASEPRI, r6
   2a6b0:	f3bf 8f6f 	isb	sy
}
   2a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a6b6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a6b6:	f3ef 8005 	mrs	r0, IPSR
}
   2a6ba:	3800      	subs	r0, #0
   2a6bc:	bf18      	it	ne
   2a6be:	2001      	movne	r0, #1
   2a6c0:	4770      	bx	lr

0002a6c2 <z_impl_k_thread_name_set>:
}
   2a6c2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2a6c6:	4770      	bx	lr

0002a6c8 <k_thread_name_get>:
}
   2a6c8:	2000      	movs	r0, #0
   2a6ca:	4770      	bx	lr

0002a6cc <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a6cc:	f7f7 bbac 	b.w	21e28 <z_sched_start>

0002a6d0 <z_pm_save_idle_exit>:
{
   2a6d0:	b508      	push	{r3, lr}
	pm_system_resume();
   2a6d2:	f7e9 fdfd 	bl	142d0 <pm_system_resume>
}
   2a6d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2a6da:	f7ff bc98 	b.w	2a00e <sys_clock_idle_exit>

0002a6de <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2a6de:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2a6e2:	428b      	cmp	r3, r1
   2a6e4:	d001      	beq.n	2a6ea <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2a6e6:	f7f7 bc0f 	b.w	21f08 <z_set_prio>
}
   2a6ea:	2000      	movs	r0, #0
   2a6ec:	4770      	bx	lr

0002a6ee <z_impl_k_mutex_init>:
{
   2a6ee:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2a6f0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2a6f2:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2a6f6:	e9c3 3300 	strd	r3, r3, [r3]
}
   2a6fa:	4770      	bx	lr

0002a6fc <queue_insert>:
{
   2a6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a700:	4699      	mov	r9, r3
   2a702:	4604      	mov	r4, r0
   2a704:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2a708:	460d      	mov	r5, r1
   2a70a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a70c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2a710:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a714:	f3ef 8711 	mrs	r7, BASEPRI
   2a718:	f382 8812 	msr	BASEPRI_MAX, r2
   2a71c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2a720:	b103      	cbz	r3, 2a724 <queue_insert+0x28>
	return list->tail;
   2a722:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2a724:	4630      	mov	r0, r6
   2a726:	f000 fa94 	bl	2ac52 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2a72a:	b158      	cbz	r0, 2a744 <queue_insert+0x48>
   2a72c:	2400      	movs	r4, #0
   2a72e:	67c4      	str	r4, [r0, #124]	; 0x7c
   2a730:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2a734:	f000 fa1c 	bl	2ab70 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2a738:	4630      	mov	r0, r6
   2a73a:	4639      	mov	r1, r7
   2a73c:	f7f7 fa7c 	bl	21c38 <z_reschedule>
	return 0;
   2a740:	2000      	movs	r0, #0
   2a742:	e00c      	b.n	2a75e <queue_insert+0x62>
	if (alloc) {
   2a744:	f1b9 0f00 	cmp.w	r9, #0
   2a748:	d01b      	beq.n	2a782 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2a74a:	2108      	movs	r1, #8
   2a74c:	f7f8 f846 	bl	227dc <z_thread_aligned_alloc>
		if (anode == NULL) {
   2a750:	b938      	cbnz	r0, 2a762 <queue_insert+0x66>
	__asm__ volatile(
   2a752:	f387 8811 	msr	BASEPRI, r7
   2a756:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a75a:	f06f 000b 	mvn.w	r0, #11
}
   2a75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2a762:	2301      	movs	r3, #1
		anode->data = data;
   2a764:	f8c0 8004 	str.w	r8, [r0, #4]
   2a768:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a76a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a76c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2a770:	b95d      	cbnz	r5, 2a78a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a772:	6823      	ldr	r3, [r4, #0]
   2a774:	4313      	orrs	r3, r2
   2a776:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a778:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2a77a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a77c:	b973      	cbnz	r3, 2a79c <queue_insert+0xa0>
	list->tail = node;
   2a77e:	6060      	str	r0, [r4, #4]
}
   2a780:	e00c      	b.n	2a79c <queue_insert+0xa0>
	node->next_and_flags = flags;
   2a782:	f8c8 9000 	str.w	r9, [r8]
}
   2a786:	4640      	mov	r0, r8
   2a788:	e7ef      	b.n	2a76a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a78a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2a78c:	f033 0303 	bics.w	r3, r3, #3
   2a790:	d110      	bne.n	2a7b4 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a792:	6002      	str	r2, [r0, #0]
	return list->tail;
   2a794:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2a796:	b93a      	cbnz	r2, 2a7a8 <queue_insert+0xac>
	list->head = node;
   2a798:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a79c:	2104      	movs	r1, #4
   2a79e:	f104 0010 	add.w	r0, r4, #16
   2a7a2:	f000 fc68 	bl	2b076 <z_handle_obj_poll_events>
   2a7a6:	e7c7      	b.n	2a738 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a7a8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a7aa:	f003 0303 	and.w	r3, r3, #3
   2a7ae:	4303      	orrs	r3, r0
   2a7b0:	6013      	str	r3, [r2, #0]
   2a7b2:	e7e4      	b.n	2a77e <queue_insert+0x82>
   2a7b4:	4313      	orrs	r3, r2
   2a7b6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a7b8:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a7ba:	f003 0303 	and.w	r3, r3, #3
   2a7be:	4303      	orrs	r3, r0
   2a7c0:	602b      	str	r3, [r5, #0]
}
   2a7c2:	e7eb      	b.n	2a79c <queue_insert+0xa0>

0002a7c4 <z_queue_node_peek>:
{
   2a7c4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a7c6:	4604      	mov	r4, r0
   2a7c8:	b130      	cbz	r0, 2a7d8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a7ca:	6802      	ldr	r2, [r0, #0]
   2a7cc:	0793      	lsls	r3, r2, #30
   2a7ce:	d003      	beq.n	2a7d8 <z_queue_node_peek+0x14>
		ret = anode->data;
   2a7d0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a7d2:	b109      	cbz	r1, 2a7d8 <z_queue_node_peek+0x14>
			k_free(anode);
   2a7d4:	f000 fc65 	bl	2b0a2 <k_free>
}
   2a7d8:	4620      	mov	r0, r4
   2a7da:	bd10      	pop	{r4, pc}

0002a7dc <z_impl_k_queue_init>:
	list->head = NULL;
   2a7dc:	2300      	movs	r3, #0
	list->tail = NULL;
   2a7de:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2a7e2:	f100 0308 	add.w	r3, r0, #8
   2a7e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2a7ea:	f100 0310 	add.w	r3, r0, #16
   2a7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2a7f2:	4770      	bx	lr

0002a7f4 <k_queue_append>:
{
   2a7f4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a7f6:	2301      	movs	r3, #1
   2a7f8:	9300      	str	r3, [sp, #0]
   2a7fa:	2300      	movs	r3, #0
{
   2a7fc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a7fe:	4619      	mov	r1, r3
   2a800:	f7ff ff7c 	bl	2a6fc <queue_insert>
}
   2a804:	b003      	add	sp, #12
   2a806:	f85d fb04 	ldr.w	pc, [sp], #4

0002a80a <k_queue_prepend>:
{
   2a80a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2a80c:	2300      	movs	r3, #0
{
   2a80e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2a810:	9300      	str	r3, [sp, #0]
   2a812:	4619      	mov	r1, r3
   2a814:	f7ff ff72 	bl	2a6fc <queue_insert>
}
   2a818:	b003      	add	sp, #12
   2a81a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a81e <k_queue_append_list>:
{
   2a81e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a822:	4605      	mov	r5, r0
   2a824:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2a826:	460c      	mov	r4, r1
   2a828:	b391      	cbz	r1, 2a890 <k_queue_append_list+0x72>
   2a82a:	b38a      	cbz	r2, 2a890 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a82c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2a830:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a834:	f3ef 8811 	mrs	r8, BASEPRI
   2a838:	f383 8812 	msr	BASEPRI_MAX, r3
   2a83c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2a840:	4638      	mov	r0, r7
   2a842:	f000 fa06 	bl	2ac52 <z_unpend_first_thread>
   2a846:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2a84a:	b920      	cbnz	r0, 2a856 <k_queue_append_list+0x38>
	return list->tail;
   2a84c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a84e:	b9ca      	cbnz	r2, 2a884 <k_queue_append_list+0x66>
	list->head = node;
   2a850:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2a852:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a854:	e00a      	b.n	2a86c <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2a856:	6144      	str	r4, [r0, #20]
   2a858:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2a85c:	f000 f988 	bl	2ab70 <z_ready_thread>
		head = *(void **)head;
   2a860:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2a862:	4638      	mov	r0, r7
   2a864:	f000 f9f5 	bl	2ac52 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2a868:	2c00      	cmp	r4, #0
   2a86a:	d1ee      	bne.n	2a84a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a86c:	2104      	movs	r1, #4
   2a86e:	f105 0010 	add.w	r0, r5, #16
   2a872:	f000 fc00 	bl	2b076 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2a876:	4638      	mov	r0, r7
   2a878:	4641      	mov	r1, r8
   2a87a:	f7f7 f9dd 	bl	21c38 <z_reschedule>
	return 0;
   2a87e:	2000      	movs	r0, #0
}
   2a880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a884:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a886:	f003 0303 	and.w	r3, r3, #3
   2a88a:	431c      	orrs	r4, r3
   2a88c:	6014      	str	r4, [r2, #0]
}
   2a88e:	e7e0      	b.n	2a852 <k_queue_append_list+0x34>
		return -EINVAL;
   2a890:	f06f 0015 	mvn.w	r0, #21
   2a894:	e7f4      	b.n	2a880 <k_queue_append_list+0x62>

0002a896 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a896:	b15a      	cbz	r2, 2a8b0 <z_impl_k_sem_init+0x1a>
   2a898:	428a      	cmp	r2, r1
   2a89a:	d309      	bcc.n	2a8b0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a89c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a8a0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2a8a4:	e9c0 0000 	strd	r0, r0, [r0]
   2a8a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a8ac:	2000      	movs	r0, #0
   2a8ae:	4770      	bx	lr
		return -EINVAL;
   2a8b0:	f06f 0015 	mvn.w	r0, #21
}
   2a8b4:	4770      	bx	lr

0002a8b6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2a8b6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2a8b8:	2301      	movs	r3, #1
   2a8ba:	408b      	lsls	r3, r1
   2a8bc:	ea22 0303 	bic.w	r3, r2, r3
   2a8c0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2a8c2:	fa22 f001 	lsr.w	r0, r2, r1
}
   2a8c6:	f000 0001 	and.w	r0, r0, #1
   2a8ca:	4770      	bx	lr

0002a8cc <unschedule_locked>:
{
   2a8cc:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a8ce:	2103      	movs	r1, #3
{
   2a8d0:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a8d2:	300c      	adds	r0, #12
   2a8d4:	f7ff ffef 	bl	2a8b6 <flag_test_and_clear>
   2a8d8:	4604      	mov	r4, r0
   2a8da:	b118      	cbz	r0, 2a8e4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2a8dc:	f105 0010 	add.w	r0, r5, #16
   2a8e0:	f000 f9fc 	bl	2acdc <z_abort_timeout>
}
   2a8e4:	4620      	mov	r0, r4
   2a8e6:	bd38      	pop	{r3, r4, r5, pc}

0002a8e8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2a8e8:	b120      	cbz	r0, 2a8f4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2a8ea:	2200      	movs	r2, #0
   2a8ec:	4611      	mov	r1, r2
   2a8ee:	3088      	adds	r0, #136	; 0x88
   2a8f0:	f000 b9d7 	b.w	2aca2 <z_sched_wake>
}
   2a8f4:	4770      	bx	lr

0002a8f6 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2a8f6:	68c3      	ldr	r3, [r0, #12]
{
   2a8f8:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a8fa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2a8fe:	079b      	lsls	r3, r3, #30
{
   2a900:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a902:	d416      	bmi.n	2a932 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2a904:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a906:	2102      	movs	r1, #2
   2a908:	300c      	adds	r0, #12
   2a90a:	f7ff ffd4 	bl	2a8b6 <flag_test_and_clear>
   2a90e:	b180      	cbz	r0, 2a932 <cancel_async_locked+0x3c>
	return list->head;
   2a910:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a914:	b16a      	cbz	r2, 2a932 <cancel_async_locked+0x3c>
   2a916:	4294      	cmp	r4, r2
   2a918:	d11b      	bne.n	2a952 <cancel_async_locked+0x5c>
	return node->next;
   2a91a:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2a91c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2a920:	b98d      	cbnz	r5, 2a946 <cancel_async_locked+0x50>
   2a922:	428c      	cmp	r4, r1
	list->head = node;
   2a924:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2a928:	d101      	bne.n	2a92e <cancel_async_locked+0x38>
	list->tail = node;
   2a92a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2a92e:	2300      	movs	r3, #0
   2a930:	6023      	str	r3, [r4, #0]
	return *flagp;
   2a932:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2a934:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2a938:	bf1e      	ittt	ne
   2a93a:	f043 0302 	orrne.w	r3, r3, #2
   2a93e:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a940:	f003 000f 	andne.w	r0, r3, #15
}
   2a944:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a946:	428c      	cmp	r4, r1
	parent->next = child;
   2a948:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a94a:	bf08      	it	eq
   2a94c:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2a950:	e7ed      	b.n	2a92e <cancel_async_locked+0x38>
	return node->next;
   2a952:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a954:	6812      	ldr	r2, [r2, #0]
   2a956:	e7dd      	b.n	2a914 <cancel_async_locked+0x1e>

0002a958 <work_timeout>:
{
   2a958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a95a:	4604      	mov	r4, r0
   2a95c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a960:	f3ef 8511 	mrs	r5, BASEPRI
   2a964:	f383 8812 	msr	BASEPRI_MAX, r3
   2a968:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a96c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a96e:	f1a0 0610 	sub.w	r6, r0, #16
   2a972:	2103      	movs	r1, #3
   2a974:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2a976:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a978:	f7ff ff9d 	bl	2a8b6 <flag_test_and_clear>
   2a97c:	b128      	cbz	r0, 2a98a <work_timeout+0x32>
		queue = dw->queue;
   2a97e:	69a3      	ldr	r3, [r4, #24]
   2a980:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a982:	a901      	add	r1, sp, #4
   2a984:	4630      	mov	r0, r6
   2a986:	f7f7 f81f 	bl	219c8 <submit_to_queue_locked>
	__asm__ volatile(
   2a98a:	f385 8811 	msr	BASEPRI, r5
   2a98e:	f3bf 8f6f 	isb	sy
}
   2a992:	b002      	add	sp, #8
   2a994:	bd70      	pop	{r4, r5, r6, pc}

0002a996 <k_work_init>:
{
   2a996:	b538      	push	{r3, r4, r5, lr}
   2a998:	4604      	mov	r4, r0
   2a99a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2a99c:	2210      	movs	r2, #16
   2a99e:	2100      	movs	r1, #0
   2a9a0:	f7fc ff50 	bl	27844 <memset>
   2a9a4:	6065      	str	r5, [r4, #4]
}
   2a9a6:	bd38      	pop	{r3, r4, r5, pc}

0002a9a8 <k_work_busy_get>:
	__asm__ volatile(
   2a9a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a9ac:	f3ef 8311 	mrs	r3, BASEPRI
   2a9b0:	f382 8812 	msr	BASEPRI_MAX, r2
   2a9b4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2a9b8:	68c0      	ldr	r0, [r0, #12]
   2a9ba:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2a9be:	f383 8811 	msr	BASEPRI, r3
   2a9c2:	f3bf 8f6f 	isb	sy
}
   2a9c6:	4770      	bx	lr

0002a9c8 <z_work_submit_to_queue>:
{
   2a9c8:	b513      	push	{r0, r1, r4, lr}
   2a9ca:	9001      	str	r0, [sp, #4]
   2a9cc:	4608      	mov	r0, r1
	__asm__ volatile(
   2a9ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a9d2:	f3ef 8411 	mrs	r4, BASEPRI
   2a9d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9da:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a9de:	a901      	add	r1, sp, #4
   2a9e0:	f7f6 fff2 	bl	219c8 <submit_to_queue_locked>
	__asm__ volatile(
   2a9e4:	f384 8811 	msr	BASEPRI, r4
   2a9e8:	f3bf 8f6f 	isb	sy
}
   2a9ec:	b002      	add	sp, #8
   2a9ee:	bd10      	pop	{r4, pc}

0002a9f0 <k_work_submit_to_queue>:
{
   2a9f0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2a9f2:	f7ff ffe9 	bl	2a9c8 <z_work_submit_to_queue>
	if (ret > 0) {
   2a9f6:	1e04      	subs	r4, r0, #0
   2a9f8:	dd09      	ble.n	2aa0e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2a9fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a9fe:	f3ef 8011 	mrs	r0, BASEPRI
   2aa02:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa06:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2aa0a:	f000 f895 	bl	2ab38 <z_reschedule_irqlock>
}
   2aa0e:	4620      	mov	r0, r4
   2aa10:	bd10      	pop	{r4, pc}

0002aa12 <k_work_queue_init>:
{
   2aa12:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2aa14:	22a0      	movs	r2, #160	; 0xa0
   2aa16:	2100      	movs	r1, #0
   2aa18:	f7fc ff14 	bl	27844 <memset>
}
   2aa1c:	bd08      	pop	{r3, pc}

0002aa1e <k_work_init_delayable>:
{
   2aa1e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2aa20:	2230      	movs	r2, #48	; 0x30
{
   2aa22:	4604      	mov	r4, r0
   2aa24:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2aa26:	2100      	movs	r1, #0
   2aa28:	f7fc ff0c 	bl	27844 <memset>
   2aa2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   2aa30:	6065      	str	r5, [r4, #4]
   2aa32:	60e3      	str	r3, [r4, #12]
}
   2aa34:	bd38      	pop	{r3, r4, r5, pc}

0002aa36 <k_work_delayable_busy_get>:
   2aa36:	f7ff bfb7 	b.w	2a9a8 <k_work_busy_get>

0002aa3a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2aa3a:	b538      	push	{r3, r4, r5, lr}
   2aa3c:	4604      	mov	r4, r0
   2aa3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aa42:	f3ef 8511 	mrs	r5, BASEPRI
   2aa46:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa4a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2aa4e:	f7ff ff3d 	bl	2a8cc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2aa52:	4620      	mov	r0, r4
   2aa54:	f7ff ff4f 	bl	2a8f6 <cancel_async_locked>
	__asm__ volatile(
   2aa58:	f385 8811 	msr	BASEPRI, r5
   2aa5c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2aa60:	bd38      	pop	{r3, r4, r5, pc}

0002aa62 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2aa62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa64:	4604      	mov	r4, r0
   2aa66:	460d      	mov	r5, r1
	__asm__ volatile(
   2aa68:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aa6c:	f3ef 8711 	mrs	r7, BASEPRI
   2aa70:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa74:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2aa78:	68c3      	ldr	r3, [r0, #12]
   2aa7a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2aa7e:	2b00      	cmp	r3, #0
   2aa80:	bf14      	ite	ne
   2aa82:	2601      	movne	r6, #1
   2aa84:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2aa86:	d009      	beq.n	2aa9c <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2aa88:	f7ff ff20 	bl	2a8cc <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2aa8c:	4620      	mov	r0, r4
   2aa8e:	f7ff ff32 	bl	2a8f6 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2aa92:	4629      	mov	r1, r5
   2aa94:	4620      	mov	r0, r4
   2aa96:	f7f6 ff79 	bl	2198c <cancel_sync_locked>
   2aa9a:	4603      	mov	r3, r0
	__asm__ volatile(
   2aa9c:	f387 8811 	msr	BASEPRI, r7
   2aaa0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2aaa4:	b13b      	cbz	r3, 2aab6 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2aaa6:	f04f 32ff 	mov.w	r2, #4294967295
   2aaaa:	f04f 33ff 	mov.w	r3, #4294967295
   2aaae:	f105 0008 	add.w	r0, r5, #8
   2aab2:	f7f6 fe71 	bl	21798 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2aab6:	4630      	mov	r0, r6
   2aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aaba <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2aaba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2aabe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2aac0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2aac2:	2300      	movs	r3, #0
	node->prev = NULL;
   2aac4:	e9c0 3300 	strd	r3, r3, [r0]
}
   2aac8:	4770      	bx	lr

0002aaca <unpend_thread_no_timeout>:
{
   2aaca:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2aacc:	f7ff fff5 	bl	2aaba <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2aad0:	7b43      	ldrb	r3, [r0, #13]
   2aad2:	f023 0302 	bic.w	r3, r3, #2
   2aad6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2aad8:	2300      	movs	r3, #0
   2aada:	6083      	str	r3, [r0, #8]
}
   2aadc:	bd08      	pop	{r3, pc}

0002aade <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2aade:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2aae2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2aae6:	4283      	cmp	r3, r0
		return b2 - b1;
   2aae8:	bf14      	ite	ne
   2aaea:	1ac0      	subne	r0, r0, r3
	return 0;
   2aaec:	2000      	moveq	r0, #0
}
   2aaee:	4770      	bx	lr

0002aaf0 <z_unpend_thread_no_timeout>:
{
   2aaf0:	b508      	push	{r3, lr}
	__asm__ volatile(
   2aaf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aaf6:	f3ef 8111 	mrs	r1, BASEPRI
   2aafa:	f383 8812 	msr	BASEPRI_MAX, r3
   2aafe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2ab02:	f7ff ffe2 	bl	2aaca <unpend_thread_no_timeout>
	__asm__ volatile(
   2ab06:	f381 8811 	msr	BASEPRI, r1
   2ab0a:	f3bf 8f6f 	isb	sy
}
   2ab0e:	bd08      	pop	{r3, pc}

0002ab10 <z_unpend_thread>:
{
   2ab10:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ab12:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab16:	f3ef 8411 	mrs	r4, BASEPRI
   2ab1a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab1e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2ab22:	f7ff ffd2 	bl	2aaca <unpend_thread_no_timeout>
	__asm__ volatile(
   2ab26:	f384 8811 	msr	BASEPRI, r4
   2ab2a:	f3bf 8f6f 	isb	sy
}
   2ab2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ab32:	3018      	adds	r0, #24
   2ab34:	f000 b8d2 	b.w	2acdc <z_abort_timeout>

0002ab38 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ab38:	4603      	mov	r3, r0
   2ab3a:	b920      	cbnz	r0, 2ab46 <z_reschedule_irqlock+0xe>
   2ab3c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2ab40:	b90a      	cbnz	r2, 2ab46 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2ab42:	f7e9 bef1 	b.w	14928 <arch_swap>
   2ab46:	f383 8811 	msr	BASEPRI, r3
   2ab4a:	f3bf 8f6f 	isb	sy
}
   2ab4e:	4770      	bx	lr

0002ab50 <z_reschedule_unlocked>:
	__asm__ volatile(
   2ab50:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab54:	f3ef 8011 	mrs	r0, BASEPRI
   2ab58:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab5c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ab60:	f7ff bfea 	b.w	2ab38 <z_reschedule_irqlock>

0002ab64 <z_priq_dumb_best>:
{
   2ab64:	4603      	mov	r3, r0
	return list->head == list;
   2ab66:	6800      	ldr	r0, [r0, #0]
}
   2ab68:	4283      	cmp	r3, r0
   2ab6a:	bf08      	it	eq
   2ab6c:	2000      	moveq	r0, #0
   2ab6e:	4770      	bx	lr

0002ab70 <z_ready_thread>:
{
   2ab70:	b510      	push	{r4, lr}
   2ab72:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab76:	f3ef 8411 	mrs	r4, BASEPRI
   2ab7a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab7e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2ab82:	f7f7 f91b 	bl	21dbc <ready_thread>
	__asm__ volatile(
   2ab86:	f384 8811 	msr	BASEPRI, r4
   2ab8a:	f3bf 8f6f 	isb	sy
}
   2ab8e:	bd10      	pop	{r4, pc}

0002ab90 <z_thread_timeout>:
{
   2ab90:	b510      	push	{r4, lr}
   2ab92:	4601      	mov	r1, r0
	__asm__ volatile(
   2ab94:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab98:	f3ef 8411 	mrs	r4, BASEPRI
   2ab9c:	f383 8812 	msr	BASEPRI_MAX, r3
   2aba0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2aba4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2aba8:	f013 0f28 	tst.w	r3, #40	; 0x28
   2abac:	d10d      	bne.n	2abca <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2abae:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2abb2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2abb4:	b10b      	cbz	r3, 2abba <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2abb6:	f7ff ff88 	bl	2aaca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2abba:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2abbe:	f023 0314 	bic.w	r3, r3, #20
   2abc2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2abc6:	f7f7 f8f9 	bl	21dbc <ready_thread>
	__asm__ volatile(
   2abca:	f384 8811 	msr	BASEPRI, r4
   2abce:	f3bf 8f6f 	isb	sy
}
   2abd2:	bd10      	pop	{r4, pc}

0002abd4 <add_to_waitq_locked>:
{
   2abd4:	b538      	push	{r3, r4, r5, lr}
   2abd6:	4604      	mov	r4, r0
   2abd8:	460d      	mov	r5, r1
	unready_thread(thread);
   2abda:	f7f7 f943 	bl	21e64 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2abde:	7b63      	ldrb	r3, [r4, #13]
   2abe0:	f043 0302 	orr.w	r3, r3, #2
   2abe4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2abe6:	b195      	cbz	r5, 2ac0e <add_to_waitq_locked+0x3a>
   2abe8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2abea:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2abec:	429d      	cmp	r5, r3
   2abee:	d015      	beq.n	2ac1c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2abf0:	b1a3      	cbz	r3, 2ac1c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2abf2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2abf6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2abfa:	4291      	cmp	r1, r2
   2abfc:	d008      	beq.n	2ac10 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2abfe:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ac00:	2a00      	cmp	r2, #0
   2ac02:	dd05      	ble.n	2ac10 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2ac04:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ac06:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2ac0a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ac0c:	605c      	str	r4, [r3, #4]
}
   2ac0e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2ac10:	686a      	ldr	r2, [r5, #4]
   2ac12:	4293      	cmp	r3, r2
   2ac14:	d002      	beq.n	2ac1c <add_to_waitq_locked+0x48>
   2ac16:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ac18:	2b00      	cmp	r3, #0
   2ac1a:	d1ec      	bne.n	2abf6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2ac1c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2ac1e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2ac22:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ac24:	606c      	str	r4, [r5, #4]
}
   2ac26:	e7f2      	b.n	2ac0e <add_to_waitq_locked+0x3a>

0002ac28 <z_unpend1_no_timeout>:
{
   2ac28:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ac2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ac2e:	f3ef 8411 	mrs	r4, BASEPRI
   2ac32:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac36:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2ac3a:	f7ff ff93 	bl	2ab64 <z_priq_dumb_best>
		if (thread != NULL) {
   2ac3e:	4601      	mov	r1, r0
   2ac40:	b108      	cbz	r0, 2ac46 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2ac42:	f7ff ff42 	bl	2aaca <unpend_thread_no_timeout>
	__asm__ volatile(
   2ac46:	f384 8811 	msr	BASEPRI, r4
   2ac4a:	f3bf 8f6f 	isb	sy
}
   2ac4e:	4608      	mov	r0, r1
   2ac50:	bd10      	pop	{r4, pc}

0002ac52 <z_unpend_first_thread>:
{
   2ac52:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ac54:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ac58:	f3ef 8511 	mrs	r5, BASEPRI
   2ac5c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac60:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2ac64:	f7ff ff7e 	bl	2ab64 <z_priq_dumb_best>
		if (thread != NULL) {
   2ac68:	4604      	mov	r4, r0
   2ac6a:	b120      	cbz	r0, 2ac76 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2ac6c:	f7ff ff2d 	bl	2aaca <unpend_thread_no_timeout>
   2ac70:	3018      	adds	r0, #24
   2ac72:	f000 f833 	bl	2acdc <z_abort_timeout>
	__asm__ volatile(
   2ac76:	f385 8811 	msr	BASEPRI, r5
   2ac7a:	f3bf 8f6f 	isb	sy
}
   2ac7e:	4620      	mov	r0, r4
   2ac80:	bd38      	pop	{r3, r4, r5, pc}

0002ac82 <z_unpend_all>:
{
   2ac82:	b538      	push	{r3, r4, r5, lr}
   2ac84:	4605      	mov	r5, r0
	int need_sched = 0;
   2ac86:	2000      	movs	r0, #0
	return list->head == list;
   2ac88:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ac8a:	42a5      	cmp	r5, r4
   2ac8c:	d000      	beq.n	2ac90 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ac8e:	b904      	cbnz	r4, 2ac92 <z_unpend_all+0x10>
}
   2ac90:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ac92:	4620      	mov	r0, r4
   2ac94:	f7ff ff3c 	bl	2ab10 <z_unpend_thread>
		z_ready_thread(thread);
   2ac98:	4620      	mov	r0, r4
   2ac9a:	f7ff ff69 	bl	2ab70 <z_ready_thread>
		need_sched = 1;
   2ac9e:	2001      	movs	r0, #1
   2aca0:	e7f2      	b.n	2ac88 <z_unpend_all+0x6>

0002aca2 <z_sched_wake>:
{
   2aca2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2aca4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aca8:	f3ef 8511 	mrs	r5, BASEPRI
   2acac:	f383 8812 	msr	BASEPRI_MAX, r3
   2acb0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2acb4:	f7ff ff56 	bl	2ab64 <z_priq_dumb_best>
		if (thread != NULL) {
   2acb8:	4604      	mov	r4, r0
   2acba:	b150      	cbz	r0, 2acd2 <z_sched_wake+0x30>
   2acbc:	67c1      	str	r1, [r0, #124]	; 0x7c
   2acbe:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2acc0:	f7ff ff03 	bl	2aaca <unpend_thread_no_timeout>
   2acc4:	3018      	adds	r0, #24
   2acc6:	f000 f809 	bl	2acdc <z_abort_timeout>
			ready_thread(thread);
   2acca:	4620      	mov	r0, r4
   2accc:	f7f7 f876 	bl	21dbc <ready_thread>
			ret = true;
   2acd0:	2001      	movs	r0, #1
	__asm__ volatile(
   2acd2:	f385 8811 	msr	BASEPRI, r5
   2acd6:	f3bf 8f6f 	isb	sy
}
   2acda:	bd38      	pop	{r3, r4, r5, pc}

0002acdc <z_abort_timeout>:
{
   2acdc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2acde:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ace2:	f3ef 8411 	mrs	r4, BASEPRI
   2ace6:	f382 8812 	msr	BASEPRI_MAX, r2
   2acea:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2acee:	6803      	ldr	r3, [r0, #0]
   2acf0:	b13b      	cbz	r3, 2ad02 <z_abort_timeout+0x26>
			remove_timeout(to);
   2acf2:	f7f7 fb29 	bl	22348 <remove_timeout>
			ret = 0;
   2acf6:	2000      	movs	r0, #0
	__asm__ volatile(
   2acf8:	f384 8811 	msr	BASEPRI, r4
   2acfc:	f3bf 8f6f 	isb	sy
}
   2ad00:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2ad02:	f06f 0015 	mvn.w	r0, #21
   2ad06:	e7f7      	b.n	2acf8 <z_abort_timeout+0x1c>

0002ad08 <z_get_next_timeout_expiry>:
{
   2ad08:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ad0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ad0e:	f3ef 8411 	mrs	r4, BASEPRI
   2ad12:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad16:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2ad1a:	f7f7 faef 	bl	222fc <next_timeout>
	__asm__ volatile(
   2ad1e:	f384 8811 	msr	BASEPRI, r4
   2ad22:	f3bf 8f6f 	isb	sy
}
   2ad26:	bd10      	pop	{r4, pc}

0002ad28 <z_set_timeout_expiry>:
{
   2ad28:	b570      	push	{r4, r5, r6, lr}
   2ad2a:	4604      	mov	r4, r0
   2ad2c:	460d      	mov	r5, r1
	__asm__ volatile(
   2ad2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ad32:	f3ef 8611 	mrs	r6, BASEPRI
   2ad36:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad3a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2ad3e:	f7f7 fadd 	bl	222fc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2ad42:	2801      	cmp	r0, #1
   2ad44:	dd05      	ble.n	2ad52 <z_set_timeout_expiry+0x2a>
   2ad46:	42a0      	cmp	r0, r4
   2ad48:	db03      	blt.n	2ad52 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2ad4a:	4629      	mov	r1, r5
   2ad4c:	4620      	mov	r0, r4
   2ad4e:	f7f4 f919 	bl	1ef84 <sys_clock_set_timeout>
	__asm__ volatile(
   2ad52:	f386 8811 	msr	BASEPRI, r6
   2ad56:	f3bf 8f6f 	isb	sy
}
   2ad5a:	bd70      	pop	{r4, r5, r6, pc}

0002ad5c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ad5c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ad5e:	f7f7 fbe3 	bl	22528 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ad62:	bd08      	pop	{r3, pc}

0002ad64 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ad64:	f7f7 bbe0 	b.w	22528 <sys_clock_tick_get>

0002ad68 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ad68:	b108      	cbz	r0, 2ad6e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ad6a:	f7ea bafb 	b.w	15364 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ad6e:	4770      	bx	lr

0002ad70 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ad70:	f1b1 3fff 	cmp.w	r1, #4294967295
   2ad74:	bf08      	it	eq
   2ad76:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ad7a:	b538      	push	{r3, r4, r5, lr}
   2ad7c:	4605      	mov	r5, r0
   2ad7e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ad80:	d01d      	beq.n	2adbe <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ad82:	ea51 0300 	orrs.w	r3, r1, r0
   2ad86:	d103      	bne.n	2ad90 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ad88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ad8c:	f7f7 bbcc 	b.w	22528 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ad90:	f06f 0301 	mvn.w	r3, #1
   2ad94:	1a18      	subs	r0, r3, r0
   2ad96:	f04f 33ff 	mov.w	r3, #4294967295
   2ad9a:	eb63 0101 	sbc.w	r1, r3, r1
   2ad9e:	2900      	cmp	r1, #0
   2ada0:	da0c      	bge.n	2adbc <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2ada2:	f7f7 fbc1 	bl	22528 <sys_clock_tick_get>
   2ada6:	2d01      	cmp	r5, #1
   2ada8:	4622      	mov	r2, r4
   2adaa:	f174 0400 	sbcs.w	r4, r4, #0
   2adae:	462b      	mov	r3, r5
   2adb0:	bfbc      	itt	lt
   2adb2:	2301      	movlt	r3, #1
   2adb4:	2200      	movlt	r2, #0
   2adb6:	1818      	adds	r0, r3, r0
   2adb8:	eb41 0102 	adc.w	r1, r1, r2
}
   2adbc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2adbe:	f04f 30ff 	mov.w	r0, #4294967295
   2adc2:	4601      	mov	r1, r0
   2adc4:	e7fa      	b.n	2adbc <sys_clock_timeout_end_calc+0x4c>

0002adc6 <k_timer_init>:
	timer->status = 0U;
   2adc6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2adc8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2adcc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2add0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2add4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2add8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2adda:	6343      	str	r3, [r0, #52]	; 0x34
}
   2addc:	4770      	bx	lr

0002adde <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2adde:	b510      	push	{r4, lr}
   2ade0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2ade2:	f7ff ff7b 	bl	2acdc <z_abort_timeout>

	if (inactive) {
   2ade6:	b9b0      	cbnz	r0, 2ae16 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ade8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2adea:	b10b      	cbz	r3, 2adf0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2adec:	4620      	mov	r0, r4
   2adee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2adf0:	f104 0018 	add.w	r0, r4, #24
   2adf4:	f7ff ff18 	bl	2ac28 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2adf8:	b168      	cbz	r0, 2ae16 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2adfa:	f7ff feb9 	bl	2ab70 <z_ready_thread>
	__asm__ volatile(
   2adfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ae02:	f3ef 8011 	mrs	r0, BASEPRI
   2ae06:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae0a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2ae0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ae12:	f7ff be91 	b.w	2ab38 <z_reschedule_irqlock>
   2ae16:	bd10      	pop	{r4, pc}

0002ae18 <add_event>:
{
   2ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae1a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ae1c:	e9d0 1300 	ldrd	r1, r3, [r0]
   2ae20:	4288      	cmp	r0, r1
   2ae22:	4604      	mov	r4, r0
   2ae24:	d00d      	beq.n	2ae42 <add_event+0x2a>
	if ((pending == NULL) ||
   2ae26:	b163      	cbz	r3, 2ae42 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ae28:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ae2a:	b100      	cbz	r0, 2ae2e <add_event+0x16>
   2ae2c:	3860      	subs	r0, #96	; 0x60
   2ae2e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ae32:	4639      	mov	r1, r7
   2ae34:	f7ff fe53 	bl	2aade <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ae38:	2800      	cmp	r0, #0
   2ae3a:	dc02      	bgt.n	2ae42 <add_event+0x2a>
	return list->head == list;
   2ae3c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ae3e:	42b4      	cmp	r4, r6
   2ae40:	d109      	bne.n	2ae56 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2ae42:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2ae44:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2ae48:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ae4a:	6065      	str	r5, [r4, #4]
}
   2ae4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ae4e:	6863      	ldr	r3, [r4, #4]
   2ae50:	42b3      	cmp	r3, r6
   2ae52:	d0f6      	beq.n	2ae42 <add_event+0x2a>
   2ae54:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ae56:	2e00      	cmp	r6, #0
   2ae58:	d0f3      	beq.n	2ae42 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ae5a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ae5c:	b101      	cbz	r1, 2ae60 <add_event+0x48>
   2ae5e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2ae60:	4638      	mov	r0, r7
   2ae62:	f7ff fe3c 	bl	2aade <z_sched_prio_cmp>
   2ae66:	2800      	cmp	r0, #0
   2ae68:	ddf1      	ble.n	2ae4e <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2ae6a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ae6c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2ae70:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ae72:	6075      	str	r5, [r6, #4]
			return;
   2ae74:	e7ea      	b.n	2ae4c <add_event+0x34>

0002ae76 <register_events>:
{
   2ae76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2ae7a:	2500      	movs	r5, #0
{
   2ae7c:	468b      	mov	fp, r1
   2ae7e:	4614      	mov	r4, r2
   2ae80:	461f      	mov	r7, r3
   2ae82:	4682      	mov	sl, r0
	int events_registered = 0;
   2ae84:	462e      	mov	r6, r5
	event->poller = NULL;
   2ae86:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2ae88:	455d      	cmp	r5, fp
   2ae8a:	db02      	blt.n	2ae92 <register_events+0x1c>
}
   2ae8c:	4630      	mov	r0, r6
   2ae8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae92:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ae96:	f3ef 8911 	mrs	r9, BASEPRI
   2ae9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae9e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2aea2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2aea6:	f003 031f 	and.w	r3, r3, #31
   2aeaa:	3b01      	subs	r3, #1
   2aeac:	2b07      	cmp	r3, #7
   2aeae:	d80f      	bhi.n	2aed0 <register_events+0x5a>
   2aeb0:	e8df f003 	tbb	[pc, r3]
   2aeb4:	0a0e041e 	.word	0x0a0e041e
   2aeb8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2aebc:	f8da 3010 	ldr.w	r3, [sl, #16]
   2aec0:	689b      	ldr	r3, [r3, #8]
   2aec2:	b12b      	cbz	r3, 2aed0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2aec4:	2302      	movs	r3, #2
   2aec6:	e020      	b.n	2af0a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2aec8:	f8da 3010 	ldr.w	r3, [sl, #16]
   2aecc:	681b      	ldr	r3, [r3, #0]
   2aece:	bb8b      	cbnz	r3, 2af34 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2aed0:	bb47      	cbnz	r7, 2af24 <register_events+0xae>
   2aed2:	7823      	ldrb	r3, [r4, #0]
   2aed4:	b333      	cbz	r3, 2af24 <register_events+0xae>
	switch (event->type) {
   2aed6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2aeda:	f003 031f 	and.w	r3, r3, #31
   2aede:	3b01      	subs	r3, #1
   2aee0:	2b07      	cmp	r3, #7
   2aee2:	d830      	bhi.n	2af46 <register_events+0xd0>
   2aee4:	e8df f003 	tbb	[pc, r3]
   2aee8:	282f2833 	.word	0x282f2833
   2aeec:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2aef0:	f8da 3010 	ldr.w	r3, [sl, #16]
   2aef4:	689b      	ldr	r3, [r3, #8]
   2aef6:	2b00      	cmp	r3, #0
   2aef8:	d0ea      	beq.n	2aed0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2aefa:	2301      	movs	r3, #1
   2aefc:	e005      	b.n	2af0a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2aefe:	f8da 3010 	ldr.w	r3, [sl, #16]
   2af02:	6a1b      	ldr	r3, [r3, #32]
   2af04:	2b00      	cmp	r3, #0
   2af06:	d0e3      	beq.n	2aed0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2af08:	2310      	movs	r3, #16
	event->state |= state;
   2af0a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2af0e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2af12:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2af16:	430b      	orrs	r3, r1
   2af18:	f363 3252 	bfi	r2, r3, #13, #6
   2af1c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2af20:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2af24:	f389 8811 	msr	BASEPRI, r9
   2af28:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2af2c:	3501      	adds	r5, #1
   2af2e:	f10a 0a14 	add.w	sl, sl, #20
   2af32:	e7a9      	b.n	2ae88 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2af34:	2304      	movs	r3, #4
   2af36:	e7e8      	b.n	2af0a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2af38:	f8da 0010 	ldr.w	r0, [sl, #16]
   2af3c:	4622      	mov	r2, r4
   2af3e:	4651      	mov	r1, sl
   2af40:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2af42:	f7ff ff69 	bl	2ae18 <add_event>
	event->poller = poller;
   2af46:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2af4a:	3601      	adds	r6, #1
   2af4c:	e7ea      	b.n	2af24 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2af4e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2af52:	4622      	mov	r2, r4
   2af54:	4651      	mov	r1, sl
   2af56:	e7f4      	b.n	2af42 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2af58:	f8da 0010 	ldr.w	r0, [sl, #16]
   2af5c:	4622      	mov	r2, r4
   2af5e:	4651      	mov	r1, sl
   2af60:	3024      	adds	r0, #36	; 0x24
   2af62:	e7ee      	b.n	2af42 <register_events+0xcc>

0002af64 <signal_poll_event>:
{
   2af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2af68:	6884      	ldr	r4, [r0, #8]
{
   2af6a:	4605      	mov	r5, r0
   2af6c:	460e      	mov	r6, r1
	if (poller != NULL) {
   2af6e:	b144      	cbz	r4, 2af82 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2af70:	7863      	ldrb	r3, [r4, #1]
   2af72:	2b01      	cmp	r3, #1
   2af74:	d136      	bne.n	2afe4 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2af76:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2af7a:	f013 0302 	ands.w	r3, r3, #2
   2af7e:	d10a      	bne.n	2af96 <signal_poll_event+0x32>
		poller->is_polling = false;
   2af80:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2af82:	68eb      	ldr	r3, [r5, #12]
   2af84:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2af88:	430e      	orrs	r6, r1
	event->poller = NULL;
   2af8a:	2000      	movs	r0, #0
	event->state |= state;
   2af8c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2af90:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2af92:	60eb      	str	r3, [r5, #12]
	return retcode;
   2af94:	e00b      	b.n	2afae <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2af96:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2af9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2af9e:	bf08      	it	eq
   2afa0:	f112 0f02 	cmneq.w	r2, #2
   2afa4:	d105      	bne.n	2afb2 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2afa6:	2300      	movs	r3, #0
   2afa8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2afaa:	f06f 000a 	mvn.w	r0, #10
}
   2afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2afb2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2afb6:	4640      	mov	r0, r8
   2afb8:	f7ff fdaa 	bl	2ab10 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2afbc:	2e08      	cmp	r6, #8
   2afbe:	bf0c      	ite	eq
   2afc0:	f06f 0303 	mvneq.w	r3, #3
   2afc4:	2300      	movne	r3, #0
   2afc6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2afc8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2afcc:	06db      	lsls	r3, r3, #27
   2afce:	d102      	bne.n	2afd6 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2afd0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2afd4:	b10f      	cbz	r7, 2afda <signal_poll_event+0x76>
		poller->is_polling = false;
   2afd6:	2300      	movs	r3, #0
   2afd8:	e7d2      	b.n	2af80 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2afda:	4640      	mov	r0, r8
   2afdc:	f7ff fdc8 	bl	2ab70 <z_ready_thread>
		poller->is_polling = false;
   2afe0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2afe2:	e7ce      	b.n	2af82 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2afe4:	2b02      	cmp	r3, #2
   2afe6:	d1f6      	bne.n	2afd6 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2afe8:	7823      	ldrb	r3, [r4, #0]
   2afea:	2b00      	cmp	r3, #0
   2afec:	d0c9      	beq.n	2af82 <signal_poll_event+0x1e>
   2afee:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2aff2:	2f00      	cmp	r7, #0
   2aff4:	d0f4      	beq.n	2afe0 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2aff6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2affa:	f1a4 0914 	sub.w	r9, r4, #20
   2affe:	f104 0014 	add.w	r0, r4, #20
   2b002:	f7ff fe6b 	bl	2acdc <z_abort_timeout>
		twork->poll_result = 0;
   2b006:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2b00a:	4649      	mov	r1, r9
   2b00c:	4638      	mov	r0, r7
   2b00e:	f7ff fcdb 	bl	2a9c8 <z_work_submit_to_queue>
		poller->is_polling = false;
   2b012:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b016:	e7b4      	b.n	2af82 <signal_poll_event+0x1e>

0002b018 <clear_event_registrations>:
	while (num_events--) {
   2b018:	2314      	movs	r3, #20
{
   2b01a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b01c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2b020:	2400      	movs	r4, #0
   2b022:	2601      	movs	r6, #1
	while (num_events--) {
   2b024:	b901      	cbnz	r1, 2b028 <clear_event_registrations+0x10>
}
   2b026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2b028:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2b02c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2b030:	f003 031f 	and.w	r3, r3, #31
   2b034:	2b08      	cmp	r3, #8
   2b036:	f1a0 0714 	sub.w	r7, r0, #20
   2b03a:	d80d      	bhi.n	2b058 <clear_event_registrations+0x40>
   2b03c:	fa06 f303 	lsl.w	r3, r6, r3
   2b040:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2b044:	d008      	beq.n	2b058 <clear_event_registrations+0x40>
	return node->next != NULL;
   2b046:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2b04a:	b12b      	cbz	r3, 2b058 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2b04c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2b050:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2b052:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b054:	e940 4405 	strd	r4, r4, [r0, #-20]
   2b058:	f382 8811 	msr	BASEPRI, r2
   2b05c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b060:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b064:	f3ef 8211 	mrs	r2, BASEPRI
   2b068:	f383 8812 	msr	BASEPRI_MAX, r3
   2b06c:	f3bf 8f6f 	isb	sy
   2b070:	3901      	subs	r1, #1
   2b072:	4638      	mov	r0, r7
   2b074:	e7d6      	b.n	2b024 <clear_event_registrations+0xc>

0002b076 <z_handle_obj_poll_events>:
{
   2b076:	4603      	mov	r3, r0
	return list->head == list;
   2b078:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b07a:	4283      	cmp	r3, r0
   2b07c:	d008      	beq.n	2b090 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2b07e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b082:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b084:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b086:	2300      	movs	r3, #0
	node->prev = NULL;
   2b088:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b08c:	f7ff bf6a 	b.w	2af64 <signal_poll_event>
}
   2b090:	4770      	bx	lr

0002b092 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2b092:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2b094:	e9c0 0000 	strd	r0, r0, [r0]
   2b098:	6083      	str	r3, [r0, #8]
}
   2b09a:	4770      	bx	lr

0002b09c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2b09c:	2300      	movs	r3, #0
   2b09e:	6083      	str	r3, [r0, #8]
}
   2b0a0:	4770      	bx	lr

0002b0a2 <k_free>:
	if (ptr != NULL) {
   2b0a2:	b120      	cbz	r0, 2b0ae <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b0a4:	1f01      	subs	r1, r0, #4
   2b0a6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b0aa:	f7ff baa3 	b.w	2a5f4 <k_heap_free>
}
   2b0ae:	4770      	bx	lr

0002b0b0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b0b0:	4770      	bx	lr
