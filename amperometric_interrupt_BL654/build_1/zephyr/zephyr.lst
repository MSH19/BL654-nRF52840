
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   0:	50 63 00 20 45 53 01 00 c7 86 02 00 19 53 01 00     Pc. ES.......S..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	19 53 01 00 19 53 01 00 19 53 01 00 00 00 00 00     .S...S...S......
	...
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
  2c:	a9 4c 01 00 19 53 01 00 00 00 00 00 61 4c 01 00     .L...S......aL..
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	19 53 01 00                                         .S..

00000040 <_irq_vector_table>:
  40:	25 4d 01 00 95 b1 02 00 25 4d 01 00 25 4d 01 00     %M......%M..%M..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  50:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
  60:	43 b1 02 00 25 4d 01 00 25 4d 01 00 7b b1 02 00     C...%M..%M..{...
	if (!fs->sector_size || fs->sector_size % info.size) {
  70:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
	if (fs->sector_count < 2) {
  80:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  90:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
  a0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
	for (i = 0; i < fs->sector_count; i++) {
  b0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
  c0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
			nvs_sector_advance(fs, &addr);
  d0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
	rc = nvs_recover_last_ate(fs, &addr);
  e0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..
	fs->data_wra = addr & ADDR_SECT_MASK;
  f0:	25 4d 01 00 25 4d 01 00 25 4d 01 00 25 4d 01 00     %M..%M..%M..%M..

Disassembly of section text:

00000100 <memchr>:
	while (fs->ate_wra >= fs->data_wra) {
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
		if (rc) {
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
		if (data8[i] != value) {
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	nvs_sector_advance(fs, &addr);
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
	addr = fs->ate_wra & ADDR_SECT_MASK;
     12a:	f022 0407 	bic.w	r4, r2, #7
	nvs_sector_advance(fs, &addr);
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
	if (rc < 0) {
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
		       (uint16_t)(fs->sector_size - ate_size);
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
		addr = (i << ADDR_SECT_SHIFT) +
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
		if (rc) {
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
			nvs_sector_advance(fs, &addr);
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
			closed_sectors++;
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
			closed_sectors++;
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
			if (!rc) {
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
	for (i = 0; i < fs->sector_count; i++) {
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
				rc = -ESPIPE;
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
		addr = fs->ate_wra + ate_size;
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_frsub>:
     1a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__addsf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_fsub>:
     1a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000001ac <__addsf3>:
		LOG_INF("No GC Done marker found: restarting gc");
     1ac:	0042      	lsls	r2, r0, #1
     1ae:	bf1f      	itttt	ne
     1b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     1b4:	ea92 0f03 	teqne	r2, r3
     1b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     1bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1c0:	d06a      	beq.n	298 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     1c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
     1c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
		if (rc) {
     1ca:	bfc1      	itttt	gt
     1cc:	18d2      	addgt	r2, r2, r3
		fs->ate_wra &= ADDR_SECT_MASK;
     1ce:	4041      	eorgt	r1, r0
     1d0:	4048      	eorgt	r0, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d2:	4041      	eorgt	r1, r0
		fs->ate_wra &= ADDR_SECT_MASK;
     1d4:	bfb8      	it	lt
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d6:	425b      	neglt	r3, r3
     1d8:	2b19      	cmp	r3, #25
     1da:	bf88      	it	hi
     1dc:	4770      	bxhi	lr
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     1de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
		rc = nvs_gc(fs);
     1e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     1e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     1ea:	bf18      	it	ne
     1ec:	4240      	negne	r0, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     1ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
			if (rc) {
     1fa:	bf18      	it	ne
     1fc:	4249      	negne	r1, r1
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     1fe:	ea92 0f03 	teq	r2, r3
     202:	d03f      	beq.n	284 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x90>
     204:	f1a2 0201 	sub.w	r2, r2, #1
     208:	fa41 fc03 	asr.w	ip, r1, r3
     20c:	eb10 000c 	adds.w	r0, r0, ip
			    (gc_done_ate.id == 0xffff) &&
     210:	f1c3 0320 	rsb	r3, r3, #32
     214:	fa01 f103 	lsl.w	r1, r1, r3
			addr += ate_size;
     218:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     21c:	d502      	bpl.n	224 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x30>
     21e:	4249      	negs	r1, r1
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     220:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     224:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     228:	d313      	bcc.n	252 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x5e>
		if (rc < 0) {
     22a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
		if (!rc) {
     22e:	d306      	bcc.n	23e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4a>
		fs->data_wra += fs->flash_parameters->write_block_size;
     230:	0840      	lsrs	r0, r0, #1
     232:	ea4f 0131 	mov.w	r1, r1, rrx
     236:	f102 0201 	add.w	r2, r2, #1
	while (fs->ate_wra > fs->data_wra) {
     23a:	2afe      	cmp	r2, #254	; 0xfe
     23c:	d251      	bcs.n	2e2 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xee>
     23e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     242:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     246:	bf08      	it	eq
     248:	f020 0001 	biceq.w	r0, r0, #1
     24c:	ea40 0003 	orr.w	r0, r0, r3
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     250:	4770      	bx	lr
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     252:	0049      	lsls	r1, r1, #1
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     254:	eb40 0000 	adc.w	r0, r0, r0
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     258:	3a01      	subs	r2, #1
     25a:	bf28      	it	cs
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     25c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     260:	d2ed      	bcs.n	23e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4a>
		if (rc) {
     262:	fab0 fc80 	clz	ip, r0
     266:	f1ac 0c08 	sub.w	ip, ip, #8
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     26a:	ebb2 020c 	subs.w	r2, r2, ip
     26e:	fa00 f00c 	lsl.w	r0, r0, ip
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     272:	bfaa      	itet	ge
		      (fs->sector_size - 2 * ate_size))) {
     274:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     278:	4252      	neglt	r2, r2
     27a:	4318      	orrge	r0, r3
		rc = nvs_add_gc_done_ate(fs);
     27c:	bfbc      	itt	lt
     27e:	40d0      	lsrlt	r0, r2
     280:	4318      	orrlt	r0, r3
     282:	4770      	bx	lr
     284:	f092 0f00 	teq	r2, #0
     288:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     28c:	bf06      	itte	eq
     28e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     292:	3201      	addeq	r2, #1
     294:	3b01      	subne	r3, #1
     296:	e7b5      	b.n	204 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x10>
     298:	ea4f 0341 	mov.w	r3, r1, lsl #1
     29c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     2a0:	bf18      	it	ne
     2a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
		rc = -EDEADLK;
     2a6:	d021      	beq.n	2ec <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf8>
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2a8:	ea92 0f03 	teq	r2, r3
     2ac:	d004      	beq.n	2b8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc4>
	if (rc) {
     2ae:	f092 0f00 	teq	r2, #0
     2b2:	bf08      	it	eq
	fs->ready = true;
     2b4:	4608      	moveq	r0, r1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2b6:	4770      	bx	lr
     2b8:	ea90 0f01 	teq	r0, r1
     2bc:	bf1c      	itt	ne
     2be:	2000      	movne	r0, #0
     2c0:	4770      	bxne	lr
     2c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     2c6:	d104      	bne.n	2d2 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xde>
     2c8:	0040      	lsls	r0, r0, #1
     2ca:	bf28      	it	cs
     2cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     2d0:	4770      	bx	lr
     2d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     2d6:	bf3c      	itt	cc
     2d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     2dc:	4770      	bxcc	lr
     2de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
	LOG_INF("alloc wra: %d, %x",
     2e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     2e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ea:	4770      	bx	lr
     2ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2f0:	bf16      	itet	ne
     2f2:	4608      	movne	r0, r1
     2f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2f8:	4601      	movne	r1, r0
     2fa:	0242      	lsls	r2, r0, #9
     2fc:	bf06      	itte	eq
     2fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     302:	ea90 0f01 	teqeq	r0, r1
	LOG_INF("data wra: %d, %x",
     306:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     30a:	4770      	bx	lr

0000030c <__aeabi_ui2f>:
     30c:	f04f 0300 	mov.w	r3, #0
     310:	e004      	b.n	31c <__aeabi_i2f+0x8>
     312:	bf00      	nop

00000314 <__aeabi_i2f>:
     314:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     318:	bf48      	it	mi
     31a:	4240      	negmi	r0, r0
     31c:	ea5f 0c00 	movs.w	ip, r0
     320:	bf08      	it	eq
     322:	4770      	bxeq	lr
     324:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
			LOG_INF("GC Done marker found");
     328:	4601      	mov	r1, r0
     32a:	f04f 0000 	mov.w	r0, #0
     32e:	e01c      	b.n	36a <CONFIG_BT_DEVICE_APPEARANCE+0x29>

00000330 <__aeabi_ul2f>:
     330:	ea50 0201 	orrs.w	r2, r0, r1
     334:	bf08      	it	eq
     336:	4770      	bxeq	lr
     338:	f04f 0300 	mov.w	r3, #0
     33c:	e00a      	b.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
			addr = fs->ate_wra & ADDR_SECT_MASK;
     33e:	bf00      	nop

00000340 <__aeabi_l2f>:
			nvs_sector_advance(fs, &addr);
     340:	ea50 0201 	orrs.w	r2, r0, r1
			addr = fs->ate_wra & ADDR_SECT_MASK;
     344:	bf08      	it	eq
			nvs_sector_advance(fs, &addr);
     346:	4770      	bxeq	lr
     348:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     34c:	d502      	bpl.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     34e:	4240      	negs	r0, r0
			rc = nvs_flash_erase_sector(fs, addr);
     350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     354:	ea5f 0c01 	movs.w	ip, r1
			goto end;
     358:	bf02      	ittt	eq
		if (nvs_ate_valid(fs, &last_ate)) {
     35a:	4684      	moveq	ip, r0
     35c:	4601      	moveq	r1, r0
     35e:	2000      	moveq	r0, #0
     360:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     364:	bf08      	it	eq
     366:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
			fs->data_wra = addr & ADDR_SECT_MASK;
     36a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     36e:	fabc f28c 	clz	r2, ip
     372:	3a08      	subs	r2, #8
			fs->data_wra = addr & ADDR_SECT_MASK;
     374:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     378:	db10      	blt.n	39c <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x18>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37a:	fa01 fc02 	lsl.w	ip, r1, r2
     37e:	4463      	add	r3, ip
     380:	fa00 fc02 	lsl.w	ip, r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     384:	f1c2 0220 	rsb	r2, r2, #32
     388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
		fs->ate_wra -= ate_size;
     38c:	fa20 f202 	lsr.w	r2, r0, r2
     390:	eb43 0002 	adc.w	r0, r3, r2
     394:	bf08      	it	eq
     396:	f020 0001 	biceq.w	r0, r0, #1
     39a:	4770      	bx	lr
     39c:	f102 0220 	add.w	r2, r2, #32
     3a0:	fa01 fc02 	lsl.w	ip, r1, r2
     3a4:	f1c2 0220 	rsb	r2, r2, #32
     3a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     3ac:	fa21 f202 	lsr.w	r2, r1, r2
     3b0:	eb43 0002 	adc.w	r0, r3, r2
     3b4:	bf08      	it	eq
     3b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3ba:	4770      	bx	lr

000003bc <__aeabi_fmul>:
     3bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     3c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     3c4:	bf1e      	ittt	ne
     3c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     3ca:	ea92 0f0c 	teqne	r2, ip
     3ce:	ea93 0f0c 	teqne	r3, ip
     3d2:	d06f      	beq.n	4b4 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xb4>
     3d4:	441a      	add	r2, r3
     3d6:	ea80 0c01 	eor.w	ip, r0, r1
     3da:	0240      	lsls	r0, r0, #9
     3dc:	bf18      	it	ne
     3de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     3e2:	d01e      	beq.n	422 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x22>
     3e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     3e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     3ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     3f0:	fba0 3101 	umull	r3, r1, r0, r1
     3f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     3f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     3fc:	bf3e      	ittt	cc
     3fe:	0049      	lslcc	r1, r1, #1
     400:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     404:	005b      	lslcc	r3, r3, #1
     406:	ea40 0001 	orr.w	r0, r0, r1
     40a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     40e:	2afd      	cmp	r2, #253	; 0xfd
     410:	d81d      	bhi.n	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     41a:	bf08      	it	eq
     41c:	f020 0001 	biceq.w	r0, r0, #1
     420:	4770      	bx	lr
     422:	f090 0f00 	teq	r0, #0
     426:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     42a:	bf08      	it	eq
     42c:	0249      	lsleq	r1, r1, #9
     42e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     432:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     436:	3a7f      	subs	r2, #127	; 0x7f
     438:	bfc2      	ittt	gt
     43a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     43e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     442:	4770      	bxgt	lr
     444:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     448:	f04f 0300 	mov.w	r3, #0
     44c:	3a01      	subs	r2, #1
     44e:	dc5d      	bgt.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     450:	f112 0f19 	cmn.w	r2, #25
     454:	bfdc      	itt	le
     456:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     45a:	4770      	bxle	lr
     45c:	f1c2 0200 	rsb	r2, r2, #0
     460:	0041      	lsls	r1, r0, #1
     462:	fa21 f102 	lsr.w	r1, r1, r2
     466:	f1c2 0220 	rsb	r2, r2, #32
     46a:	fa00 fc02 	lsl.w	ip, r0, r2
     46e:	ea5f 0031 	movs.w	r0, r1, rrx
     472:	f140 0000 	adc.w	r0, r0, #0
     476:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     47a:	bf08      	it	eq
     47c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     480:	4770      	bx	lr
     482:	f092 0f00 	teq	r2, #0
     486:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     48a:	bf02      	ittt	eq
     48c:	0040      	lsleq	r0, r0, #1
     48e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     492:	3a01      	subeq	r2, #1
     494:	d0f9      	beq.n	48a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8a>
     496:	ea40 000c 	orr.w	r0, r0, ip
     49a:	f093 0f00 	teq	r3, #0
     49e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     4a2:	bf02      	ittt	eq
     4a4:	0049      	lsleq	r1, r1, #1
     4a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     4aa:	3b01      	subeq	r3, #1
     4ac:	d0f9      	beq.n	4a2 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xa2>
     4ae:	ea41 010c 	orr.w	r1, r1, ip
     4b2:	e78f      	b.n	3d4 <__aeabi_fmul+0x18>
     4b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     4b8:	ea92 0f0c 	teq	r2, ip
     4bc:	bf18      	it	ne
     4be:	ea93 0f0c 	teqne	r3, ip
     4c2:	d00a      	beq.n	4da <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xda>
     4c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     4c8:	bf18      	it	ne
     4ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     4ce:	d1d8      	bne.n	482 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x82>
     4d0:	ea80 0001 	eor.w	r0, r0, r1
     4d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     4d8:	4770      	bx	lr
     4da:	f090 0f00 	teq	r0, #0
     4de:	bf17      	itett	ne
     4e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     4e4:	4608      	moveq	r0, r1
     4e6:	f091 0f00 	teqne	r1, #0
     4ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     4ee:	d014      	beq.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     4f0:	ea92 0f0c 	teq	r2, ip
     4f4:	d101      	bne.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     4f6:	0242      	lsls	r2, r0, #9
     4f8:	d10f      	bne.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     4fa:	ea93 0f0c 	teq	r3, ip
     4fe:	d103      	bne.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     500:	024b      	lsls	r3, r1, #9
     502:	bf18      	it	ne
     504:	4608      	movne	r0, r1
     506:	d108      	bne.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     508:	ea80 0001 	eor.w	r0, r0, r1
     50c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     518:	4770      	bx	lr
     51a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     51e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     522:	4770      	bx	lr

00000524 <__aeabi_fdiv>:
     524:	f04f 0cff 	mov.w	ip, #255	; 0xff
     528:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     52c:	bf1e      	ittt	ne
     52e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     532:	ea92 0f0c 	teqne	r2, ip
     536:	ea93 0f0c 	teqne	r3, ip
     53a:	d069      	beq.n	610 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     53c:	eba2 0203 	sub.w	r2, r2, r3
     540:	ea80 0c01 	eor.w	ip, r0, r1
     544:	0249      	lsls	r1, r1, #9
     546:	ea4f 2040 	mov.w	r0, r0, lsl #9
     54a:	d037      	beq.n	5bc <__aeabi_fdiv+0x98>
     54c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     550:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     554:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     558:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     55c:	428b      	cmp	r3, r1
     55e:	bf38      	it	cc
     560:	005b      	lslcc	r3, r3, #1
     562:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     566:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     56a:	428b      	cmp	r3, r1
     56c:	bf24      	itt	cs
     56e:	1a5b      	subcs	r3, r3, r1
     570:	ea40 000c 	orrcs.w	r0, r0, ip
     574:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     578:	bf24      	itt	cs
     57a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     57e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     582:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     586:	bf24      	itt	cs
     588:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     58c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     590:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     594:	bf24      	itt	cs
     596:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     59a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     59e:	011b      	lsls	r3, r3, #4
     5a0:	bf18      	it	ne
     5a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     5a6:	d1e0      	bne.n	56a <__aeabi_fdiv+0x46>
     5a8:	2afd      	cmp	r2, #253	; 0xfd
     5aa:	f63f af50 	bhi.w	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     5ae:	428b      	cmp	r3, r1
     5b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     5b4:	bf08      	it	eq
     5b6:	f020 0001 	biceq.w	r0, r0, #1
     5ba:	4770      	bx	lr
     5bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     5c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     5c4:	327f      	adds	r2, #127	; 0x7f
     5c6:	bfc2      	ittt	gt
     5c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     5cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     5d0:	4770      	bxgt	lr
     5d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     5d6:	f04f 0300 	mov.w	r3, #0
     5da:	3a01      	subs	r2, #1
     5dc:	e737      	b.n	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     5de:	f092 0f00 	teq	r2, #0
     5e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     5e6:	bf02      	ittt	eq
     5e8:	0040      	lsleq	r0, r0, #1
     5ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     5ee:	3a01      	subeq	r2, #1
     5f0:	d0f9      	beq.n	5e6 <__aeabi_fdiv+0xc2>
     5f2:	ea40 000c 	orr.w	r0, r0, ip
     5f6:	f093 0f00 	teq	r3, #0
     5fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     5fe:	bf02      	ittt	eq
     600:	0049      	lsleq	r1, r1, #1
     602:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     606:	3b01      	subeq	r3, #1
     608:	d0f9      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60a:	ea41 010c 	orr.w	r1, r1, ip
     60e:	e795      	b.n	53c <__aeabi_fdiv+0x18>
     610:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     614:	ea92 0f0c 	teq	r2, ip
     618:	d108      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     61a:	0242      	lsls	r2, r0, #9
     61c:	f47f af7d 	bne.w	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     620:	ea93 0f0c 	teq	r3, ip
     624:	f47f af70 	bne.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     628:	4608      	mov	r0, r1
     62a:	e776      	b.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     62c:	ea93 0f0c 	teq	r3, ip
     630:	d104      	bne.n	63c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     632:	024b      	lsls	r3, r1, #9
     634:	f43f af4c 	beq.w	4d0 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xd0>
     638:	4608      	mov	r0, r1
     63a:	e76e      	b.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     63c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     640:	bf18      	it	ne
     642:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     646:	d1ca      	bne.n	5de <__aeabi_fdiv+0xba>
     648:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     64c:	f47f af5c 	bne.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     650:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     654:	f47f af3c 	bne.w	4d0 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xd0>
     658:	e75f      	b.n	51a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x6>
     65a:	bf00      	nop

0000065c <__gesf2>:
     65c:	f04f 3cff 	mov.w	ip, #4294967295
     660:	e006      	b.n	670 <__cmpsf2+0x4>
     662:	bf00      	nop

00000664 <__lesf2>:
     664:	f04f 0c01 	mov.w	ip, #1
     668:	e002      	b.n	670 <__cmpsf2+0x4>
     66a:	bf00      	nop

0000066c <__cmpsf2>:
     66c:	f04f 0c01 	mov.w	ip, #1
     670:	f84d cd04 	str.w	ip, [sp, #-4]!
     674:	ea4f 0240 	mov.w	r2, r0, lsl #1
     678:	ea4f 0341 	mov.w	r3, r1, lsl #1
     67c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     680:	bf18      	it	ne
     682:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     686:	d011      	beq.n	6ac <__cmpsf2+0x40>
     688:	b001      	add	sp, #4
     68a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     68e:	bf18      	it	ne
     690:	ea90 0f01 	teqne	r0, r1
     694:	bf58      	it	pl
     696:	ebb2 0003 	subspl.w	r0, r2, r3
     69a:	bf88      	it	hi
     69c:	17c8      	asrhi	r0, r1, #31
     69e:	bf38      	it	cc
     6a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     6a4:	bf18      	it	ne
     6a6:	f040 0001 	orrne.w	r0, r0, #1
     6aa:	4770      	bx	lr
     6ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     6b0:	d102      	bne.n	6b8 <__cmpsf2+0x4c>
     6b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     6b6:	d105      	bne.n	6c4 <__cmpsf2+0x58>
     6b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     6bc:	d1e4      	bne.n	688 <__cmpsf2+0x1c>
     6be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     6c2:	d0e1      	beq.n	688 <__cmpsf2+0x1c>
     6c4:	f85d 0b04 	ldr.w	r0, [sp], #4
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop

000006cc <__aeabi_cfrcmple>:
     6cc:	4684      	mov	ip, r0
     6ce:	4608      	mov	r0, r1
     6d0:	4661      	mov	r1, ip
     6d2:	e7ff      	b.n	6d4 <__aeabi_cfcmpeq>

000006d4 <__aeabi_cfcmpeq>:
     6d4:	b50f      	push	{r0, r1, r2, r3, lr}
     6d6:	f7ff ffc9 	bl	66c <__cmpsf2>
     6da:	2800      	cmp	r0, #0
     6dc:	bf48      	it	mi
     6de:	f110 0f00 	cmnmi.w	r0, #0
     6e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000006e4 <__aeabi_fcmpeq>:
     6e4:	f84d ed08 	str.w	lr, [sp, #-8]!
     6e8:	f7ff fff4 	bl	6d4 <__aeabi_cfcmpeq>
     6ec:	bf0c      	ite	eq
     6ee:	2001      	moveq	r0, #1
     6f0:	2000      	movne	r0, #0
     6f2:	f85d fb08 	ldr.w	pc, [sp], #8
     6f6:	bf00      	nop

000006f8 <__aeabi_fcmplt>:
     6f8:	f84d ed08 	str.w	lr, [sp, #-8]!
     6fc:	f7ff ffea 	bl	6d4 <__aeabi_cfcmpeq>
     700:	bf34      	ite	cc
     702:	2001      	movcc	r0, #1
     704:	2000      	movcs	r0, #0
     706:	f85d fb08 	ldr.w	pc, [sp], #8
     70a:	bf00      	nop

0000070c <__aeabi_fcmple>:
     70c:	f84d ed08 	str.w	lr, [sp, #-8]!
     710:	f7ff ffe0 	bl	6d4 <__aeabi_cfcmpeq>
     714:	bf94      	ite	ls
     716:	2001      	movls	r0, #1
     718:	2000      	movhi	r0, #0
     71a:	f85d fb08 	ldr.w	pc, [sp], #8
     71e:	bf00      	nop

00000720 <__aeabi_fcmpge>:
     720:	f84d ed08 	str.w	lr, [sp, #-8]!
     724:	f7ff ffd2 	bl	6cc <__aeabi_cfrcmple>
     728:	bf94      	ite	ls
     72a:	2001      	movls	r0, #1
     72c:	2000      	movhi	r0, #0
     72e:	f85d fb08 	ldr.w	pc, [sp], #8
     732:	bf00      	nop

00000734 <__aeabi_fcmpgt>:
     734:	f84d ed08 	str.w	lr, [sp, #-8]!
     738:	f7ff ffc8 	bl	6cc <__aeabi_cfrcmple>
     73c:	bf34      	ite	cc
     73e:	2001      	movcc	r0, #1
     740:	2000      	movcs	r0, #0
     742:	f85d fb08 	ldr.w	pc, [sp], #8
     746:	bf00      	nop

00000748 <__aeabi_f2iz>:
     748:	ea4f 0240 	mov.w	r2, r0, lsl #1
     74c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     750:	d30f      	bcc.n	772 <__aeabi_f2iz+0x2a>
     752:	f04f 039e 	mov.w	r3, #158	; 0x9e
     756:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     75a:	d90d      	bls.n	778 <__aeabi_f2iz+0x30>
     75c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     764:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     768:	fa23 f002 	lsr.w	r0, r3, r2
     76c:	bf18      	it	ne
     76e:	4240      	negne	r0, r0
     770:	4770      	bx	lr
     772:	f04f 0000 	mov.w	r0, #0
     776:	4770      	bx	lr
     778:	f112 0f61 	cmn.w	r2, #97	; 0x61
     77c:	d101      	bne.n	782 <__aeabi_f2iz+0x3a>
     77e:	0242      	lsls	r2, r0, #9
     780:	d105      	bne.n	78e <__aeabi_f2iz+0x46>
     782:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     786:	bf08      	it	eq
     788:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     78c:	4770      	bx	lr
     78e:	f04f 0000 	mov.w	r0, #0
     792:	4770      	bx	lr

00000794 <__aeabi_f2uiz>:
     794:	0042      	lsls	r2, r0, #1
     796:	d20e      	bcs.n	7b6 <__aeabi_f2uiz+0x22>
     798:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     79c:	d30b      	bcc.n	7b6 <__aeabi_f2uiz+0x22>
     79e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     7a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     7a6:	d409      	bmi.n	7bc <__aeabi_f2uiz+0x28>
     7a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
     7ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7b0:	fa23 f002 	lsr.w	r0, r3, r2
     7b4:	4770      	bx	lr
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	4770      	bx	lr
     7bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     7c0:	d101      	bne.n	7c6 <__aeabi_f2uiz+0x32>
     7c2:	0242      	lsls	r2, r0, #9
     7c4:	d102      	bne.n	7cc <__aeabi_f2uiz+0x38>
     7c6:	f04f 30ff 	mov.w	r0, #4294967295
     7ca:	4770      	bx	lr
     7cc:	f04f 0000 	mov.w	r0, #0
     7d0:	4770      	bx	lr
     7d2:	bf00      	nop

000007d4 <__aeabi_uldivmod>:
     7d4:	b953      	cbnz	r3, 7ec <__aeabi_uldivmod+0x18>
     7d6:	b94a      	cbnz	r2, 7ec <__aeabi_uldivmod+0x18>
     7d8:	2900      	cmp	r1, #0
     7da:	bf08      	it	eq
     7dc:	2800      	cmpeq	r0, #0
     7de:	bf1c      	itt	ne
     7e0:	f04f 31ff 	movne.w	r1, #4294967295
     7e4:	f04f 30ff 	movne.w	r0, #4294967295
     7e8:	f000 b80c 	b.w	804 <__aeabi_idiv0>
     7ec:	f1ad 0c08 	sub.w	ip, sp, #8
     7f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     7f4:	f00b ff32 	bl	c65c <__udivmoddi4>
     7f8:	f8dd e004 	ldr.w	lr, [sp, #4]
     7fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     800:	b004      	add	sp, #16
     802:	4770      	bx	lr

00000804 <__aeabi_idiv0>:
     804:	4770      	bx	lr
     806:	bf00      	nop

00000808 <ocrypto_bigint_add256>:
     808:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     80c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     810:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     814:	185b      	adds	r3, r3, r1
     816:	eb54 040c 	adcs.w	r4, r4, ip
     81a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     81e:	414d      	adcs	r5, r1
     820:	eb56 060c 	adcs.w	r6, r6, ip
     824:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     828:	414f      	adcs	r7, r1
     82a:	eb58 080c 	adcs.w	r8, r8, ip
     82e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     832:	eb59 0901 	adcs.w	r9, r9, r1
     836:	eb5a 0a0c 	adcs.w	sl, sl, ip
     83a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     83e:	4180      	sbcs	r0, r0
     840:	3001      	adds	r0, #1
     842:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     846:	4770      	bx	lr

00000848 <ocrypto_bigint_sub256>:
     848:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     84c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     850:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     854:	1a5b      	subs	r3, r3, r1
     856:	eb74 040c 	sbcs.w	r4, r4, ip
     85a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     85e:	418d      	sbcs	r5, r1
     860:	eb76 060c 	sbcs.w	r6, r6, ip
     864:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     868:	418f      	sbcs	r7, r1
     86a:	eb78 080c 	sbcs.w	r8, r8, ip
     86e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     872:	eb79 0901 	sbcs.w	r9, r9, r1
     876:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     87a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     87e:	4180      	sbcs	r0, r0
     880:	4240      	negs	r0, r0
     882:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     886:	4770      	bx	lr

00000888 <ocrypto_bigint_cadd256>:
     888:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     88c:	4252      	negs	r2, r2
     88e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     892:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     896:	4017      	ands	r7, r2
     898:	19db      	adds	r3, r3, r7
     89a:	ea18 0802 	ands.w	r8, r8, r2
     89e:	eb54 0408 	adcs.w	r4, r4, r8
     8a2:	ea19 0902 	ands.w	r9, r9, r2
     8a6:	eb55 0509 	adcs.w	r5, r5, r9
     8aa:	ea1a 0a02 	ands.w	sl, sl, r2
     8ae:	eb56 060a 	adcs.w	r6, r6, sl
     8b2:	c078      	stmia	r0!, {r3, r4, r5, r6}
     8b4:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     8b8:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     8bc:	4017      	ands	r7, r2
     8be:	417b      	adcs	r3, r7
     8c0:	ea18 0802 	ands.w	r8, r8, r2
     8c4:	eb54 0408 	adcs.w	r4, r4, r8
     8c8:	ea19 0902 	ands.w	r9, r9, r2
     8cc:	eb55 0509 	adcs.w	r5, r5, r9
     8d0:	ea1a 0a02 	ands.w	sl, sl, r2
     8d4:	eb56 060a 	adcs.w	r6, r6, sl
     8d8:	c078      	stmia	r0!, {r3, r4, r5, r6}
     8da:	4180      	sbcs	r0, r0
     8dc:	3001      	adds	r0, #1
     8de:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8e2:	4770      	bx	lr

000008e4 <ocrypto_bigint_csub256>:
     8e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8e8:	4252      	negs	r2, r2
     8ea:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     8ee:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     8f2:	4017      	ands	r7, r2
     8f4:	1bdb      	subs	r3, r3, r7
     8f6:	ea18 0802 	ands.w	r8, r8, r2
     8fa:	eb74 0408 	sbcs.w	r4, r4, r8
     8fe:	ea19 0902 	ands.w	r9, r9, r2
     902:	eb75 0509 	sbcs.w	r5, r5, r9
     906:	ea1a 0a02 	ands.w	sl, sl, r2
     90a:	eb76 060a 	sbcs.w	r6, r6, sl
     90e:	c078      	stmia	r0!, {r3, r4, r5, r6}
     910:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     914:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     918:	4017      	ands	r7, r2
     91a:	41bb      	sbcs	r3, r7
     91c:	ea18 0802 	ands.w	r8, r8, r2
     920:	eb74 0408 	sbcs.w	r4, r4, r8
     924:	ea19 0902 	ands.w	r9, r9, r2
     928:	eb75 0509 	sbcs.w	r5, r5, r9
     92c:	ea1a 0a02 	ands.w	sl, sl, r2
     930:	eb76 060a 	sbcs.w	r6, r6, sl
     934:	c078      	stmia	r0!, {r3, r4, r5, r6}
     936:	4180      	sbcs	r0, r0
     938:	4240      	negs	r0, r0
     93a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     93e:	4770      	bx	lr

00000940 <ocrypto_bigint_cswap256>:
     940:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     944:	4252      	negs	r2, r2
     946:	f04f 0804 	mov.w	r8, #4

0000094a <cswap256_loop>:
     94a:	e890 0030 	ldmia.w	r0, {r4, r5}
     94e:	e891 00c0 	ldmia.w	r1, {r6, r7}
     952:	1ba3      	subs	r3, r4, r6
     954:	4013      	ands	r3, r2
     956:	1ae4      	subs	r4, r4, r3
     958:	18f6      	adds	r6, r6, r3
     95a:	1beb      	subs	r3, r5, r7
     95c:	4013      	ands	r3, r2
     95e:	1aed      	subs	r5, r5, r3
     960:	18ff      	adds	r7, r7, r3
     962:	c030      	stmia	r0!, {r4, r5}
     964:	c1c0      	stmia	r1!, {r6, r7}
     966:	f1b8 0801 	subs.w	r8, r8, #1
     96a:	d1ee      	bne.n	94a <cswap256_loop>
     96c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     970:	4770      	bx	lr
     972:	bf00      	nop

00000974 <ocrypto_mul256_noframe>:
     974:	b500      	push	{lr}
     976:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     97a:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     97e:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     982:	b402      	push	{r1}
     984:	fba7 5102 	umull	r5, r1, r7, r2
     988:	950a      	str	r5, [sp, #40]	; 0x28
     98a:	fba8 0b02 	umull	r0, fp, r8, r2
     98e:	fbe7 1063 	umaal	r1, r0, r7, r3
     992:	fbe9 b062 	umaal	fp, r0, r9, r2
     996:	910b      	str	r1, [sp, #44]	; 0x2c
     998:	fba8 5103 	umull	r5, r1, r8, r3
     99c:	fbea 0162 	umaal	r0, r1, sl, r2
     9a0:	fbe7 b564 	umaal	fp, r5, r7, r4
     9a4:	fbe7 0566 	umaal	r0, r5, r7, r6
     9a8:	fbe8 1566 	umaal	r1, r5, r8, r6
     9ac:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     9b0:	fba9 b603 	umull	fp, r6, r9, r3
     9b4:	fbea 1663 	umaal	r1, r6, sl, r3
     9b8:	fbec 5663 	umaal	r5, r6, ip, r3
     9bc:	fbe8 0b64 	umaal	r0, fp, r8, r4
     9c0:	fbe9 1b64 	umaal	r1, fp, r9, r4
     9c4:	fbea 5b64 	umaal	r5, fp, sl, r4
     9c8:	fbec 6b64 	umaal	r6, fp, ip, r4
     9cc:	900d      	str	r0, [sp, #52]	; 0x34
     9ce:	fbac 3002 	umull	r3, r0, ip, r2
     9d2:	9c05      	ldr	r4, [sp, #20]
     9d4:	fbee 5062 	umaal	r5, r0, lr, r2
     9d8:	fbe9 6064 	umaal	r6, r0, r9, r4
     9dc:	fbea b064 	umaal	fp, r0, sl, r4
     9e0:	fbe7 3164 	umaal	r3, r1, r7, r4
     9e4:	fbe8 5164 	umaal	r5, r1, r8, r4
     9e8:	9c06      	ldr	r4, [sp, #24]
     9ea:	fbe8 6164 	umaal	r6, r1, r8, r4
     9ee:	fbe9 b164 	umaal	fp, r1, r9, r4
     9f2:	fbea 0164 	umaal	r0, r1, sl, r4
     9f6:	930e      	str	r3, [sp, #56]	; 0x38
     9f8:	fba7 3204 	umull	r3, r2, r7, r4
     9fc:	9c07      	ldr	r4, [sp, #28]
     9fe:	fbe7 6264 	umaal	r6, r2, r7, r4
     a02:	fbe8 b264 	umaal	fp, r2, r8, r4
     a06:	fbe9 0264 	umaal	r0, r2, r9, r4
     a0a:	fbea 1264 	umaal	r1, r2, sl, r4
     a0e:	9c04      	ldr	r4, [sp, #16]
     a10:	fbe9 5364 	umaal	r5, r3, r9, r4
     a14:	fbea 6364 	umaal	r6, r3, sl, r4
     a18:	9c08      	ldr	r4, [sp, #32]
     a1a:	fbe7 b364 	umaal	fp, r3, r7, r4
     a1e:	fbe8 0364 	umaal	r0, r3, r8, r4
     a22:	fbe9 1364 	umaal	r1, r3, r9, r4
     a26:	fbea 2364 	umaal	r2, r3, sl, r4
     a2a:	950f      	str	r5, [sp, #60]	; 0x3c
     a2c:	f85d 9b04 	ldr.w	r9, [sp], #4
     a30:	e899 0600 	ldmia.w	r9, {r9, sl}
     a34:	f8dd 8000 	ldr.w	r8, [sp]
     a38:	fba9 5408 	umull	r5, r4, r9, r8
     a3c:	fbea b468 	umaal	fp, r4, sl, r8
     a40:	f8dd 8010 	ldr.w	r8, [sp, #16]
     a44:	fbec 0468 	umaal	r0, r4, ip, r8
     a48:	fbee 1468 	umaal	r1, r4, lr, r8
     a4c:	fbe9 2468 	umaal	r2, r4, r9, r8
     a50:	fbea 3468 	umaal	r3, r4, sl, r8
     a54:	f8dd 8004 	ldr.w	r8, [sp, #4]
     a58:	fbee 6568 	umaal	r6, r5, lr, r8
     a5c:	fbe9 b568 	umaal	fp, r5, r9, r8
     a60:	fbea 0568 	umaal	r0, r5, sl, r8
     a64:	f8dd 8014 	ldr.w	r8, [sp, #20]
     a68:	fbec 1568 	umaal	r1, r5, ip, r8
     a6c:	fbee 2568 	umaal	r2, r5, lr, r8
     a70:	fbe9 3568 	umaal	r3, r5, r9, r8
     a74:	fbea 4568 	umaal	r4, r5, sl, r8
     a78:	960f      	str	r6, [sp, #60]	; 0x3c
     a7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
     a7e:	fbae 7608 	umull	r7, r6, lr, r8
     a82:	fbe9 0668 	umaal	r0, r6, r9, r8
     a86:	fbea 1668 	umaal	r1, r6, sl, r8
     a8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
     a8e:	fbec 2668 	umaal	r2, r6, ip, r8
     a92:	fbee 3668 	umaal	r3, r6, lr, r8
     a96:	fbe9 4668 	umaal	r4, r6, r9, r8
     a9a:	fbea 5668 	umaal	r5, r6, sl, r8
     a9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
     aa2:	fbec b768 	umaal	fp, r7, ip, r8
     aa6:	fbee 0768 	umaal	r0, r7, lr, r8
     aaa:	fbe9 1768 	umaal	r1, r7, r9, r8
     aae:	fbea 2768 	umaal	r2, r7, sl, r8
     ab2:	f8dd 801c 	ldr.w	r8, [sp, #28]
     ab6:	fbec 3768 	umaal	r3, r7, ip, r8
     aba:	fbee 4768 	umaal	r4, r7, lr, r8
     abe:	fbe9 5768 	umaal	r5, r7, r9, r8
     ac2:	fbea 6768 	umaal	r6, r7, sl, r8
     ac6:	b008      	add	sp, #32
     ac8:	bd00      	pop	{pc}
     aca:	bf00      	nop

00000acc <ocrypto_bigint_mul256>:
     acc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ad0:	b087      	sub	sp, #28
     ad2:	f7ff ff4f 	bl	974 <ocrypto_mul256_noframe>
     ad6:	f8dd 801c 	ldr.w	r8, [sp, #28]
     ada:	f108 0820 	add.w	r8, r8, #32
     ade:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ae2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     ae4:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000aec <ocrypto_sqr256_noframe>:
     aec:	b500      	push	{lr}
     aee:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     af2:	fba3 5203 	umull	r5, r2, r3, r3
     af6:	9501      	str	r5, [sp, #4]
     af8:	fba3 0104 	umull	r0, r1, r3, r4
     afc:	fbe3 2064 	umaal	r2, r0, r3, r4
     b00:	fbe3 1067 	umaal	r1, r0, r3, r7
     b04:	9202      	str	r2, [sp, #8]
     b06:	fba3 5207 	umull	r5, r2, r3, r7
     b0a:	fbe3 0268 	umaal	r0, r2, r3, r8
     b0e:	fbe4 1564 	umaal	r1, r5, r4, r4
     b12:	fbe3 0568 	umaal	r0, r5, r3, r8
     b16:	fbe3 2569 	umaal	r2, r5, r3, r9
     b1a:	9103      	str	r1, [sp, #12]
     b1c:	fba4 b607 	umull	fp, r6, r4, r7
     b20:	fbe3 2669 	umaal	r2, r6, r3, r9
     b24:	fbe3 566a 	umaal	r5, r6, r3, sl
     b28:	fbe4 0b67 	umaal	r0, fp, r4, r7
     b2c:	fbe4 2b68 	umaal	r2, fp, r4, r8
     b30:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     b34:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     b38:	9004      	str	r0, [sp, #16]
     b3a:	fba4 1008 	umull	r1, r0, r4, r8
     b3e:	fbe4 5069 	umaal	r5, r0, r4, r9
     b42:	fbe3 606c 	umaal	r6, r0, r3, ip
     b46:	fbe3 b06e 	umaal	fp, r0, r3, lr
     b4a:	fbe7 2167 	umaal	r2, r1, r7, r7
     b4e:	fbe4 5169 	umaal	r5, r1, r4, r9
     b52:	fbe4 616a 	umaal	r6, r1, r4, sl
     b56:	fbe3 b16e 	umaal	fp, r1, r3, lr
     b5a:	fbe4 016e 	umaal	r0, r1, r4, lr
     b5e:	9205      	str	r2, [sp, #20]
     b60:	fba7 3208 	umull	r3, r2, r7, r8
     b64:	fbe4 626a 	umaal	r6, r2, r4, sl
     b68:	fbe4 b26c 	umaal	fp, r2, r4, ip
     b6c:	fbe4 026e 	umaal	r0, r2, r4, lr
     b70:	fbe7 126e 	umaal	r1, r2, r7, lr
     b74:	fbe7 5368 	umaal	r5, r3, r7, r8
     b78:	fbe7 6369 	umaal	r6, r3, r7, r9
     b7c:	fbe4 b36c 	umaal	fp, r3, r4, ip
     b80:	fbe7 036c 	umaal	r0, r3, r7, ip
     b84:	fbe7 136e 	umaal	r1, r3, r7, lr
     b88:	fbe8 236e 	umaal	r2, r3, r8, lr
     b8c:	9506      	str	r5, [sp, #24]
     b8e:	fba7 5409 	umull	r5, r4, r7, r9
     b92:	fbe7 b46a 	umaal	fp, r4, r7, sl
     b96:	fbe7 046c 	umaal	r0, r4, r7, ip
     b9a:	fbe8 146c 	umaal	r1, r4, r8, ip
     b9e:	fbe8 246e 	umaal	r2, r4, r8, lr
     ba2:	fbe9 346e 	umaal	r3, r4, r9, lr
     ba6:	fbe8 6568 	umaal	r6, r5, r8, r8
     baa:	fbe7 b56a 	umaal	fp, r5, r7, sl
     bae:	fbe8 056a 	umaal	r0, r5, r8, sl
     bb2:	fbe8 156c 	umaal	r1, r5, r8, ip
     bb6:	fbe9 256c 	umaal	r2, r5, r9, ip
     bba:	fbe9 356e 	umaal	r3, r5, r9, lr
     bbe:	fbea 456e 	umaal	r4, r5, sl, lr
     bc2:	9607      	str	r6, [sp, #28]
     bc4:	fba8 7609 	umull	r7, r6, r8, r9
     bc8:	fbe8 066a 	umaal	r0, r6, r8, sl
     bcc:	fbe9 166a 	umaal	r1, r6, r9, sl
     bd0:	fbe9 266c 	umaal	r2, r6, r9, ip
     bd4:	fbea 366c 	umaal	r3, r6, sl, ip
     bd8:	fbea 466e 	umaal	r4, r6, sl, lr
     bdc:	fbec 566e 	umaal	r5, r6, ip, lr
     be0:	fbe8 b769 	umaal	fp, r7, r8, r9
     be4:	fbe9 0769 	umaal	r0, r7, r9, r9
     be8:	fbe9 176a 	umaal	r1, r7, r9, sl
     bec:	fbea 276a 	umaal	r2, r7, sl, sl
     bf0:	fbea 376c 	umaal	r3, r7, sl, ip
     bf4:	fbec 476c 	umaal	r4, r7, ip, ip
     bf8:	fbec 576e 	umaal	r5, r7, ip, lr
     bfc:	fbee 676e 	umaal	r6, r7, lr, lr
     c00:	bd00      	pop	{pc}
     c02:	bf00      	nop

00000c04 <ocrypto_bigint_sqr256>:
     c04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c08:	b087      	sub	sp, #28
     c0a:	f7ff ff6f 	bl	aec <ocrypto_sqr256_noframe>
     c0e:	f8dd 801c 	ldr.w	r8, [sp, #28]
     c12:	f108 0820 	add.w	r8, r8, #32
     c16:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     c1a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     c1c:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c24 <ocrypto_constant_time_equal>:
     c24:	b430      	push	{r4, r5}
     c26:	f04f 0300 	mov.w	r3, #0

00000c2a <constant_time_equal_loop>:
     c2a:	f810 4b01 	ldrb.w	r4, [r0], #1
     c2e:	f811 5b01 	ldrb.w	r5, [r1], #1
     c32:	3a01      	subs	r2, #1
     c34:	ea84 0405 	eor.w	r4, r4, r5
     c38:	ea43 0304 	orr.w	r3, r3, r4
     c3c:	d1f5      	bne.n	c2a <constant_time_equal_loop>
     c3e:	f1a3 0301 	sub.w	r3, r3, #1
     c42:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     c46:	bc30      	pop	{r4, r5}
     c48:	4770      	bx	lr
     c4a:	bf00      	nop

00000c4c <ocrypto_constant_time_is_zero>:
     c4c:	f04f 0300 	mov.w	r3, #0

00000c50 <constant_time_is_zero_loop>:
     c50:	f810 2b01 	ldrb.w	r2, [r0], #1
     c54:	3901      	subs	r1, #1
     c56:	ea43 0302 	orr.w	r3, r3, r2
     c5a:	d1f9      	bne.n	c50 <constant_time_is_zero_loop>
     c5c:	f1a3 0301 	sub.w	r3, r3, #1
     c60:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     c64:	4770      	bx	lr
     c66:	bf00      	nop

00000c68 <ocrypto_constant_time_xor>:
     c68:	b430      	push	{r4, r5}

00000c6a <constant_time_xor_loop>:
     c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
     c6e:	f812 5b01 	ldrb.w	r5, [r2], #1
     c72:	406c      	eors	r4, r5
     c74:	f800 4b01 	strb.w	r4, [r0], #1
     c78:	3b01      	subs	r3, #1
     c7a:	d1f6      	bne.n	c6a <constant_time_xor_loop>
     c7c:	bc30      	pop	{r4, r5}
     c7e:	4770      	bx	lr

00000c80 <ocrypto_mod_p256_add>:
     c80:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     c84:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     c88:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c8c:	185b      	adds	r3, r3, r1
     c8e:	eb54 040c 	adcs.w	r4, r4, ip
     c92:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c96:	414d      	adcs	r5, r1
     c98:	eb56 060c 	adcs.w	r6, r6, ip
     c9c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ca0:	414f      	adcs	r7, r1
     ca2:	eb58 080c 	adcs.w	r8, r8, ip
     ca6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     caa:	eb59 0901 	adcs.w	r9, r9, r1
     cae:	eb5a 0a0c 	adcs.w	sl, sl, ip
     cb2:	4189      	sbcs	r1, r1
     cb4:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     cb8:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     cbc:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     cc0:	f176 0600 	sbcs.w	r6, r6, #0
     cc4:	f177 0700 	sbcs.w	r7, r7, #0
     cc8:	f178 0800 	sbcs.w	r8, r8, #0
     ccc:	f179 0901 	sbcs.w	r9, r9, #1
     cd0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     cd4:	f151 0100 	adcs.w	r1, r1, #0
     cd8:	185b      	adds	r3, r3, r1
     cda:	414c      	adcs	r4, r1
     cdc:	414d      	adcs	r5, r1
     cde:	f156 0600 	adcs.w	r6, r6, #0
     ce2:	f157 0700 	adcs.w	r7, r7, #0
     ce6:	f158 0800 	adcs.w	r8, r8, #0
     cea:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     cee:	eb5a 0a01 	adcs.w	sl, sl, r1
     cf2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     cf6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     cfa:	4770      	bx	lr

00000cfc <ocrypto_mod_p256_sub>:
     cfc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d00:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     d04:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d08:	1a5b      	subs	r3, r3, r1
     d0a:	eb74 040c 	sbcs.w	r4, r4, ip
     d0e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d12:	418d      	sbcs	r5, r1
     d14:	eb76 060c 	sbcs.w	r6, r6, ip
     d18:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d1c:	418f      	sbcs	r7, r1
     d1e:	eb78 080c 	sbcs.w	r8, r8, ip
     d22:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d26:	eb79 0901 	sbcs.w	r9, r9, r1
     d2a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     d2e:	4189      	sbcs	r1, r1
     d30:	185b      	adds	r3, r3, r1
     d32:	414c      	adcs	r4, r1
     d34:	414d      	adcs	r5, r1
     d36:	f156 0600 	adcs.w	r6, r6, #0
     d3a:	f157 0700 	adcs.w	r7, r7, #0
     d3e:	f158 0800 	adcs.w	r8, r8, #0
     d42:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     d46:	eb5a 0a01 	adcs.w	sl, sl, r1
     d4a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     d4e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d52:	4770      	bx	lr

00000d54 <mul_reduce>:
     d54:	eb18 0804 	adds.w	r8, r8, r4
     d58:	eb59 0905 	adcs.w	r9, r9, r5
     d5c:	eb5a 0a06 	adcs.w	sl, sl, r6
     d60:	eb5b 0b07 	adcs.w	fp, fp, r7
     d64:	f05f 0c00 	movs.w	ip, #0
     d68:	f14c 0c00 	adc.w	ip, ip, #0
     d6c:	eb18 0805 	adds.w	r8, r8, r5
     d70:	eb59 0906 	adcs.w	r9, r9, r6
     d74:	eb5a 0a07 	adcs.w	sl, sl, r7
     d78:	eb5b 0b07 	adcs.w	fp, fp, r7
     d7c:	eb50 000c 	adcs.w	r0, r0, ip
     d80:	f05f 0c00 	movs.w	ip, #0
     d84:	eb51 010c 	adcs.w	r1, r1, ip
     d88:	eb52 020c 	adcs.w	r2, r2, ip
     d8c:	4163      	adcs	r3, r4
     d8e:	f14c 0c00 	adc.w	ip, ip, #0
     d92:	ebb8 0807 	subs.w	r8, r8, r7
     d96:	f179 0900 	sbcs.w	r9, r9, #0
     d9a:	f17a 0a00 	sbcs.w	sl, sl, #0
     d9e:	eb7b 0b04 	sbcs.w	fp, fp, r4
     da2:	41a8      	sbcs	r0, r5
     da4:	41b1      	sbcs	r1, r6
     da6:	41a2      	sbcs	r2, r4
     da8:	41b3      	sbcs	r3, r6
     daa:	f16c 0c00 	sbc.w	ip, ip, #0
     dae:	ebbb 0b05 	subs.w	fp, fp, r5
     db2:	41b0      	sbcs	r0, r6
     db4:	41b9      	sbcs	r1, r7
     db6:	41aa      	sbcs	r2, r5
     db8:	41bb      	sbcs	r3, r7
     dba:	f16c 0c00 	sbc.w	ip, ip, #0
     dbe:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     dc2:	ebb8 0804 	subs.w	r8, r8, r4
     dc6:	eb79 0904 	sbcs.w	r9, r9, r4
     dca:	eb7a 0a04 	sbcs.w	sl, sl, r4
     dce:	f17b 0b00 	sbcs.w	fp, fp, #0
     dd2:	f170 0000 	sbcs.w	r0, r0, #0
     dd6:	f171 0100 	sbcs.w	r1, r1, #0
     dda:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     dde:	41a3      	sbcs	r3, r4
     de0:	f16c 0c00 	sbc.w	ip, ip, #0
     de4:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     de8:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     dec:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     df0:	f15b 0b00 	adcs.w	fp, fp, #0
     df4:	f150 0400 	adcs.w	r4, r0, #0
     df8:	f151 0500 	adcs.w	r5, r1, #0
     dfc:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     e00:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     e04:	f14c 0c00 	adc.w	ip, ip, #0
     e08:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     e0c:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     e10:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     e14:	f15b 0300 	adcs.w	r3, fp, #0
     e18:	f154 0400 	adcs.w	r4, r4, #0
     e1c:	f155 0500 	adcs.w	r5, r5, #0
     e20:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     e24:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     e28:	4770      	bx	lr
     e2a:	bf00      	nop

00000e2c <ocrypto_mod_p256_mul>:
     e2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e30:	b087      	sub	sp, #28
     e32:	f7ff fd9f 	bl	974 <ocrypto_mul256_noframe>
     e36:	f8dd 8010 	ldr.w	r8, [sp, #16]
     e3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
     e3e:	f8dd a018 	ldr.w	sl, [sp, #24]
     e42:	f7ff ff87 	bl	d54 <mul_reduce>
     e46:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     e4a:	f7ff ff83 	bl	d54 <mul_reduce>
     e4e:	b003      	add	sp, #12
     e50:	f85d 8b04 	ldr.w	r8, [sp], #4
     e54:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e5c <ocrypto_mod_p256_sqr>:
     e5c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e60:	b087      	sub	sp, #28
     e62:	f7ff fe43 	bl	aec <ocrypto_sqr256_noframe>
     e66:	f8dd 8010 	ldr.w	r8, [sp, #16]
     e6a:	f8dd 9014 	ldr.w	r9, [sp, #20]
     e6e:	f8dd a018 	ldr.w	sl, [sp, #24]
     e72:	f7ff ff6f 	bl	d54 <mul_reduce>
     e76:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     e7a:	f7ff ff6b 	bl	d54 <mul_reduce>
     e7e:	b003      	add	sp, #12
     e80:	f85d 8b04 	ldr.w	r8, [sp], #4
     e84:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e8c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     e8c:	4801      	ldr	r0, [pc, #4]	; (e94 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     e8e:	7800      	ldrb	r0, [r0, #0]
     e90:	4770      	bx	lr
     e92:	0000      	.short	0x0000
     e94:	20000028 	.word	0x20000028

00000e98 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	f00c f8cd 	bl	d038 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     e9e:	4c13      	ldr	r4, [pc, #76]	; (eec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
     ea0:	f06f 0527 	mvn.w	r5, #39	; 0x27
     ea4:	b928      	cbnz	r0, eb2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     ea6:	f00c f8fd 	bl	d0a4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     eaa:	b910      	cbnz	r0, eb2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     eac:	f00c f904 	bl	d0b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     eb0:	b120      	cbz	r0, ebc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     eb2:	480f      	ldr	r0, [pc, #60]	; (ef0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     eb4:	6060      	str	r0, [r4, #4]
     eb6:	7065      	strb	r5, [r4, #1]
     eb8:	2008      	movs	r0, #8
     eba:	e010      	b.n	ede <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     ebc:	f00c f891 	bl	cfe2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     ec0:	b940      	cbnz	r0, ed4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     ec2:	f00c f898 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     ec6:	b928      	cbnz	r0, ed4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     ec8:	f00c f8ac 	bl	d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     ecc:	b910      	cbnz	r0, ed4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     ece:	f00c f8bd 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     ed2:	b130      	cbz	r0, ee2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
     ed4:	4806      	ldr	r0, [pc, #24]	; (ef0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     ed6:	3031      	adds	r0, #49	; 0x31
     ed8:	6060      	str	r0, [r4, #4]
     eda:	7065      	strb	r5, [r4, #1]
     edc:	2004      	movs	r0, #4
     ede:	70a0      	strb	r0, [r4, #2]
     ee0:	bd70      	pop	{r4, r5, r6, pc}
     ee2:	21e8      	movs	r1, #232	; 0xe8
     ee4:	2074      	movs	r0, #116	; 0x74
     ee6:	f003 fbbf 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eea:	0000      	.short	0x0000
     eec:	20000028 	.word	0x20000028
     ef0:	0001100c 	.word	0x0001100c

00000ef4 <mpsl_tx_power_radio_supported_power_adjust>:
     ef4:	4907      	ldr	r1, [pc, #28]	; (f14 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     ef6:	f991 2002 	ldrsb.w	r2, [r1, #2]
     efa:	4290      	cmp	r0, r2
     efc:	da03      	bge.n	f06 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     efe:	f991 2001 	ldrsb.w	r2, [r1, #1]
     f02:	4290      	cmp	r0, r2
     f04:	dc01      	bgt.n	f0a <mpsl_tx_power_radio_supported_power_adjust+0x16>
     f06:	4610      	mov	r0, r2
     f08:	4770      	bx	lr
     f0a:	6849      	ldr	r1, [r1, #4]
     f0c:	1a80      	subs	r0, r0, r2
     f0e:	5608      	ldrsb	r0, [r1, r0]
     f10:	4770      	bx	lr
     f12:	0000      	.short	0x0000
     f14:	20000028 	.word	0x20000028

00000f18 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f1c:	461c      	mov	r4, r3
     f1e:	4690      	mov	r8, r2
     f20:	460d      	mov	r5, r1
     f22:	4606      	mov	r6, r0
     f24:	f06f 0715 	mvn.w	r7, #21
     f28:	2804      	cmp	r0, #4
     f2a:	d804      	bhi.n	f36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     f2c:	b11c      	cbz	r4, f36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     f2e:	f00b fcfa 	bl	c926 <strlen+0x10>
     f32:	42a8      	cmp	r0, r5
     f34:	d802      	bhi.n	f3c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     f36:	4638      	mov	r0, r7
     f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f3c:	4805      	ldr	r0, [pc, #20]	; (f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     f3e:	4642      	mov	r2, r8
     f40:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     f44:	b118      	cbz	r0, f4e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     f46:	5740      	ldrsb	r0, [r0, r5]
     f48:	4282      	cmp	r2, r0
     f4a:	dd00      	ble.n	f4e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     f4c:	4602      	mov	r2, r0
     f4e:	7022      	strb	r2, [r4, #0]
     f50:	2000      	movs	r0, #0
     f52:	e7f1      	b.n	f38 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     f54:	20000e80 	.word	0x20000e80
     f58:	2800      	cmp	r0, #0
     f5a:	d019      	beq.n	f90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
     f5c:	7803      	ldrb	r3, [r0, #0]
     f5e:	4913      	ldr	r1, [pc, #76]	; (fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>)
     f60:	4a13      	ldr	r2, [pc, #76]	; (fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>)
     f62:	b113      	cbz	r3, f6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
     f64:	2b01      	cmp	r3, #1
     f66:	d00e      	beq.n	f86 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
     f68:	e011      	b.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f6a:	7903      	ldrb	r3, [r0, #4]
     f6c:	2b01      	cmp	r3, #1
     f6e:	d000      	beq.n	f72 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
     f70:	b96b      	cbnz	r3, f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f72:	7943      	ldrb	r3, [r0, #5]
     f74:	b10b      	cbz	r3, f7a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
     f76:	2b01      	cmp	r3, #1
     f78:	d109      	bne.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f7a:	6883      	ldr	r3, [r0, #8]
     f7c:	3b64      	subs	r3, #100	; 0x64
     f7e:	428b      	cmp	r3, r1
     f80:	d205      	bcs.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f82:	68c0      	ldr	r0, [r0, #12]
     f84:	e00e      	b.n	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     f86:	7903      	ldrb	r3, [r0, #4]
     f88:	2b01      	cmp	r3, #1
     f8a:	d002      	beq.n	f92 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     f8c:	b10b      	cbz	r3, f92 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     f8e:	2000      	movs	r0, #0
     f90:	4770      	bx	lr
     f92:	7943      	ldrb	r3, [r0, #5]
     f94:	b10b      	cbz	r3, f9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
     f96:	2b01      	cmp	r3, #1
     f98:	d1f9      	bne.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     f9a:	68c3      	ldr	r3, [r0, #12]
     f9c:	3b64      	subs	r3, #100	; 0x64
     f9e:	428b      	cmp	r3, r1
     fa0:	d2f5      	bcs.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     fa2:	6880      	ldr	r0, [r0, #8]
     fa4:	4290      	cmp	r0, r2
     fa6:	d8f2      	bhi.n	f8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     fa8:	2001      	movs	r0, #1
     faa:	4770      	bx	lr
     fac:	0001863d 	.word	0x0001863d
     fb0:	0f423fff 	.word	0x0f423fff
     fb4:	b510      	push	{r4, lr}
     fb6:	4c05      	ldr	r4, [pc, #20]	; (fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>)
     fb8:	6820      	ldr	r0, [r4, #0]
     fba:	b110      	cbz	r0, fc2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x22>
     fbc:	4780      	blx	r0
     fbe:	2000      	movs	r0, #0
     fc0:	6020      	str	r0, [r4, #0]
     fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     fc6:	f002 b8bd 	b.w	3144 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     fca:	0000      	.short	0x0000
     fcc:	20000030 	.word	0x20000030

00000fd0 <mpsl_timeslot_session_open>:
     fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fd4:	460e      	mov	r6, r1
     fd6:	0005      	movs	r5, r0
     fd8:	d004      	beq.n	fe4 <mpsl_timeslot_session_open+0x14>
     fda:	f000 f847 	bl	106c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     fde:	4607      	mov	r7, r0
     fe0:	2400      	movs	r4, #0
     fe2:	e00b      	b.n	ffc <mpsl_timeslot_session_open+0x2c>
     fe4:	f06f 0015 	mvn.w	r0, #21
     fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fec:	4620      	mov	r0, r4
     fee:	f000 f843 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     ff2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     ff6:	b130      	cbz	r0, 1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
     ff8:	1c64      	adds	r4, r4, #1
     ffa:	b2e4      	uxtb	r4, r4
     ffc:	42bc      	cmp	r4, r7
     ffe:	d3f5      	bcc.n	fec <mpsl_timeslot_session_open+0x1c>
    1000:	f06f 000b 	mvn.w	r0, #11
    1004:	e7f0      	b.n	fe8 <mpsl_timeslot_session_open+0x18>
    1006:	4627      	mov	r7, r4
    1008:	2cff      	cmp	r4, #255	; 0xff
    100a:	d0f9      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    100c:	4620      	mov	r0, r4
    100e:	f000 f833 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    1012:	4604      	mov	r4, r0
    1014:	f00b fe53 	bl	ccbe <strlen+0x3a8>
    1018:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    101c:	4621      	mov	r1, r4
    101e:	4808      	ldr	r0, [pc, #32]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
    1020:	f002 f868 	bl	30f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    1024:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1028:	2820      	cmp	r0, #32
    102a:	d006      	beq.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    102c:	2001      	movs	r0, #1
    102e:	6225      	str	r5, [r4, #32]
    1030:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    1034:	7037      	strb	r7, [r6, #0]
    1036:	2000      	movs	r0, #0
    1038:	e7d6      	b.n	fe8 <mpsl_timeslot_session_open+0x18>
    103a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    103e:	e7d3      	b.n	fe8 <mpsl_timeslot_session_open+0x18>
    1040:	0000c9e9 	.word	0x0000c9e9

00001044 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    1044:	b510      	push	{r4, lr}
    1046:	0782      	lsls	r2, r0, #30
    1048:	d002      	beq.n	1050 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    104a:	f06f 000d 	mvn.w	r0, #13
    104e:	bd10      	pop	{r4, pc}
    1050:	4a05      	ldr	r2, [pc, #20]	; (1068 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    1052:	7011      	strb	r1, [r2, #0]
    1054:	6050      	str	r0, [r2, #4]
    1056:	b128      	cbz	r0, 1064 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1058:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    105c:	010a      	lsls	r2, r1, #4
    105e:	2100      	movs	r1, #0
    1060:	f00c f8ae 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1064:	2000      	movs	r0, #0
    1066:	bd10      	pop	{r4, pc}
    1068:	20000034 	.word	0x20000034

0000106c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    106c:	4801      	ldr	r0, [pc, #4]	; (1074 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    106e:	7800      	ldrb	r0, [r0, #0]
    1070:	4770      	bx	lr
    1072:	0000      	.short	0x0000
    1074:	20000034 	.word	0x20000034

00001078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1078:	4905      	ldr	r1, [pc, #20]	; (1090 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    107a:	780a      	ldrb	r2, [r1, #0]
    107c:	4290      	cmp	r0, r2
    107e:	d301      	bcc.n	1084 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1080:	2000      	movs	r0, #0
    1082:	4770      	bx	lr
    1084:	6849      	ldr	r1, [r1, #4]
    1086:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    108a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    108e:	4770      	bx	lr
    1090:	20000034 	.word	0x20000034

00001094 <MPSL_IRQ_RADIO_Handler>:
    1094:	490e      	ldr	r1, [pc, #56]	; (10d0 <MPSL_IRQ_RADIO_Handler+0x3c>)
    1096:	b510      	push	{r4, lr}
    1098:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    109c:	2820      	cmp	r0, #32
    109e:	d012      	beq.n	10c6 <MPSL_IRQ_RADIO_Handler+0x32>
    10a0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    10a4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    10a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    10ac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    10b0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    10b4:	6840      	ldr	r0, [r0, #4]
    10b6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    10ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    10be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    10c2:	2104      	movs	r1, #4
    10c4:	4710      	bx	r2
    10c6:	f640 0187 	movw	r1, #2183	; 0x887
    10ca:	2070      	movs	r0, #112	; 0x70
    10cc:	f003 facc 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d0:	20001294 	.word	0x20001294
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	4605      	mov	r5, r0
    10d8:	2a20      	cmp	r2, #32
    10da:	d028      	beq.n	112e <MPSL_IRQ_RADIO_Handler+0x9a>
    10dc:	4819      	ldr	r0, [pc, #100]	; (1144 <MPSL_IRQ_RADIO_Handler+0xb0>)
    10de:	4c1a      	ldr	r4, [pc, #104]	; (1148 <MPSL_IRQ_RADIO_Handler+0xb4>)
    10e0:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    10e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    10e8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    10ec:	4423      	add	r3, r4
    10ee:	2920      	cmp	r1, #32
    10f0:	d022      	beq.n	1138 <MPSL_IRQ_RADIO_Handler+0xa4>
    10f2:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    10f6:	7840      	ldrb	r0, [r0, #1]
    10f8:	784c      	ldrb	r4, [r1, #1]
    10fa:	7048      	strb	r0, [r1, #1]
    10fc:	4620      	mov	r0, r4
    10fe:	4601      	mov	r1, r0
    1100:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1104:	4291      	cmp	r1, r2
    1106:	7005      	strb	r5, [r0, #0]
    1108:	7840      	ldrb	r0, [r0, #1]
    110a:	d1f8      	bne.n	10fe <MPSL_IRQ_RADIO_Handler+0x6a>
    110c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1110:	2a20      	cmp	r2, #32
    1112:	bf1a      	itte	ne
    1114:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1118:	7054      	strbne	r4, [r2, #1]
    111a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    111e:	2220      	movs	r2, #32
    1120:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1124:	f88c 2001 	strb.w	r2, [ip, #1]
    1128:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    112c:	bd70      	pop	{r4, r5, r6, pc}
    112e:	f240 2192 	movw	r1, #658	; 0x292
    1132:	2070      	movs	r0, #112	; 0x70
    1134:	f003 fa98 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1138:	f893 4020 	ldrb.w	r4, [r3, #32]
    113c:	7840      	ldrb	r0, [r0, #1]
    113e:	f883 0020 	strb.w	r0, [r3, #32]
    1142:	e7db      	b.n	10fc <MPSL_IRQ_RADIO_Handler+0x68>
    1144:	20001214 	.word	0x20001214
    1148:	20001294 	.word	0x20001294
    114c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1150:	b085      	sub	sp, #20
    1152:	4615      	mov	r5, r2
    1154:	460c      	mov	r4, r1
    1156:	f002 f9e3 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    115a:	4428      	add	r0, r5
    115c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1160:	9102      	str	r1, [sp, #8]
    1162:	6820      	ldr	r0, [r4, #0]
    1164:	1a40      	subs	r0, r0, r1
    1166:	0200      	lsls	r0, r0, #8
    1168:	17c1      	asrs	r1, r0, #31
    116a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    116e:	1200      	asrs	r0, r0, #8
    1170:	2800      	cmp	r0, #0
    1172:	f300 80f0 	bgt.w	1356 <MPSL_IRQ_RADIO_Handler+0x2c2>
    1176:	f8dd 8020 	ldr.w	r8, [sp, #32]
    117a:	48ca      	ldr	r0, [pc, #808]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
    117c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1180:	4408      	add	r0, r1
    1182:	9003      	str	r0, [sp, #12]
    1184:	f890 5020 	ldrb.w	r5, [r0, #32]
    1188:	2020      	movs	r0, #32
    118a:	4ec7      	ldr	r6, [pc, #796]	; (14a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120>)
    118c:	46ea      	mov	sl, sp
    118e:	f10d 0904 	add.w	r9, sp, #4
    1192:	f88d 0000 	strb.w	r0, [sp]
    1196:	2d20      	cmp	r5, #32
    1198:	bf1c      	itt	ne
    119a:	48c4      	ldrne	r0, [pc, #784]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    119c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    11a0:	d039      	beq.n	1216 <MPSL_IRQ_RADIO_Handler+0x182>
    11a2:	bf00      	nop
    11a4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    11a8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    11ac:	f100 0108 	add.w	r1, r0, #8
    11b0:	68c0      	ldr	r0, [r0, #12]
    11b2:	6827      	ldr	r7, [r4, #0]
    11b4:	1a38      	subs	r0, r7, r0
    11b6:	0200      	lsls	r0, r0, #8
    11b8:	17c2      	asrs	r2, r0, #31
    11ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11be:	1200      	asrs	r0, r0, #8
    11c0:	d429      	bmi.n	1216 <MPSL_IRQ_RADIO_Handler+0x182>
    11c2:	89e0      	ldrh	r0, [r4, #14]
    11c4:	b300      	cbz	r0, 1208 <MPSL_IRQ_RADIO_Handler+0x174>
    11c6:	89c8      	ldrh	r0, [r1, #14]
    11c8:	b9f0      	cbnz	r0, 1208 <MPSL_IRQ_RADIO_Handler+0x174>
    11ca:	6808      	ldr	r0, [r1, #0]
    11cc:	9004      	str	r0, [sp, #16]
    11ce:	f003 f8a1 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11d2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11d6:	bf08      	it	eq
    11d8:	200d      	moveq	r0, #13
    11da:	d00b      	beq.n	11f4 <MPSL_IRQ_RADIO_Handler+0x160>
    11dc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11e0:	3856      	subs	r0, #86	; 0x56
    11e2:	bf08      	it	eq
    11e4:	201c      	moveq	r0, #28
    11e6:	d005      	beq.n	11f4 <MPSL_IRQ_RADIO_Handler+0x160>
    11e8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11ec:	389f      	subs	r0, #159	; 0x9f
    11ee:	bf14      	ite	ne
    11f0:	2000      	movne	r0, #0
    11f2:	2032      	moveq	r0, #50	; 0x32
    11f4:	1c41      	adds	r1, r0, #1
    11f6:	9804      	ldr	r0, [sp, #16]
    11f8:	1a38      	subs	r0, r7, r0
    11fa:	0200      	lsls	r0, r0, #8
    11fc:	17c2      	asrs	r2, r0, #31
    11fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1202:	1200      	asrs	r0, r0, #8
    1204:	4288      	cmp	r0, r1
    1206:	db06      	blt.n	1216 <MPSL_IRQ_RADIO_Handler+0x182>
    1208:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    120c:	f88a 5000 	strb.w	r5, [sl]
    1210:	7845      	ldrb	r5, [r0, #1]
    1212:	2d20      	cmp	r5, #32
    1214:	d1c6      	bne.n	11a4 <MPSL_IRQ_RADIO_Handler+0x110>
    1216:	f89a 0000 	ldrb.w	r0, [sl]
    121a:	f889 0000 	strb.w	r0, [r9]
    121e:	2d20      	cmp	r5, #32
    1220:	bf1c      	itt	ne
    1222:	48a2      	ldrne	r0, [pc, #648]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1224:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1228:	f000 8138 	beq.w	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    122c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1230:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1234:	6860      	ldr	r0, [r4, #4]
    1236:	f8d7 8008 	ldr.w	r8, [r7, #8]
    123a:	f107 0108 	add.w	r1, r7, #8
    123e:	eba8 0000 	sub.w	r0, r8, r0
    1242:	0200      	lsls	r0, r0, #8
    1244:	17c2      	asrs	r2, r0, #31
    1246:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    124a:	1200      	asrs	r0, r0, #8
    124c:	d427      	bmi.n	129e <MPSL_IRQ_RADIO_Handler+0x20a>
    124e:	89c8      	ldrh	r0, [r1, #14]
    1250:	2800      	cmp	r0, #0
    1252:	f000 8123 	beq.w	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    1256:	89e0      	ldrh	r0, [r4, #14]
    1258:	2800      	cmp	r0, #0
    125a:	f040 811f 	bne.w	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    125e:	f8d4 a000 	ldr.w	sl, [r4]
    1262:	f003 f857 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1266:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    126a:	bf08      	it	eq
    126c:	200d      	moveq	r0, #13
    126e:	d00b      	beq.n	1288 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1270:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1274:	3856      	subs	r0, #86	; 0x56
    1276:	bf08      	it	eq
    1278:	201c      	moveq	r0, #28
    127a:	d005      	beq.n	1288 <MPSL_IRQ_RADIO_Handler+0x1f4>
    127c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1280:	389f      	subs	r0, #159	; 0x9f
    1282:	bf14      	ite	ne
    1284:	2000      	movne	r0, #0
    1286:	2032      	moveq	r0, #50	; 0x32
    1288:	1c41      	adds	r1, r0, #1
    128a:	eba8 000a 	sub.w	r0, r8, sl
    128e:	0200      	lsls	r0, r0, #8
    1290:	17c2      	asrs	r2, r0, #31
    1292:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1296:	1200      	asrs	r0, r0, #8
    1298:	4288      	cmp	r0, r1
    129a:	f280 80ff 	bge.w	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    129e:	f889 5000 	strb.w	r5, [r9]
    12a2:	7e39      	ldrb	r1, [r7, #24]
    12a4:	7c20      	ldrb	r0, [r4, #16]
    12a6:	4281      	cmp	r1, r0
    12a8:	d906      	bls.n	12b8 <MPSL_IRQ_RADIO_Handler+0x224>
    12aa:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    12ae:	7845      	ldrb	r5, [r0, #1]
    12b0:	2d20      	cmp	r5, #32
    12b2:	d1bb      	bne.n	122c <MPSL_IRQ_RADIO_Handler+0x198>
    12b4:	f000 b8f2 	b.w	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    12b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    12bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    12c0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    12c4:	8ac1      	ldrh	r1, [r0, #22]
    12c6:	68c5      	ldr	r5, [r0, #12]
    12c8:	bbe1      	cbnz	r1, 1344 <MPSL_IRQ_RADIO_Handler+0x2b0>
    12ca:	89e1      	ldrh	r1, [r4, #14]
    12cc:	b3d1      	cbz	r1, 1344 <MPSL_IRQ_RADIO_Handler+0x2b0>
    12ce:	6887      	ldr	r7, [r0, #8]
    12d0:	f003 f820 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    12d4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    12d8:	bf08      	it	eq
    12da:	200d      	moveq	r0, #13
    12dc:	d00b      	beq.n	12f6 <MPSL_IRQ_RADIO_Handler+0x262>
    12de:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    12e2:	3856      	subs	r0, #86	; 0x56
    12e4:	bf08      	it	eq
    12e6:	201c      	moveq	r0, #28
    12e8:	d005      	beq.n	12f6 <MPSL_IRQ_RADIO_Handler+0x262>
    12ea:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    12ee:	389f      	subs	r0, #159	; 0x9f
    12f0:	bf14      	ite	ne
    12f2:	2000      	movne	r0, #0
    12f4:	2032      	moveq	r0, #50	; 0x32
    12f6:	1c41      	adds	r1, r0, #1
    12f8:	1be8      	subs	r0, r5, r7
    12fa:	0200      	lsls	r0, r0, #8
    12fc:	17c2      	asrs	r2, r0, #31
    12fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1302:	1200      	asrs	r0, r0, #8
    1304:	4288      	cmp	r0, r1
    1306:	da1d      	bge.n	1344 <MPSL_IRQ_RADIO_Handler+0x2b0>
    1308:	f003 f804 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    130c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1310:	bf08      	it	eq
    1312:	200d      	moveq	r0, #13
    1314:	d00b      	beq.n	132e <MPSL_IRQ_RADIO_Handler+0x29a>
    1316:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    131a:	3856      	subs	r0, #86	; 0x56
    131c:	bf08      	it	eq
    131e:	201c      	moveq	r0, #28
    1320:	d005      	beq.n	132e <MPSL_IRQ_RADIO_Handler+0x29a>
    1322:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1326:	389f      	subs	r0, #159	; 0x9f
    1328:	bf14      	ite	ne
    132a:	2000      	movne	r0, #0
    132c:	2032      	moveq	r0, #50	; 0x32
    132e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1332:	1c40      	adds	r0, r0, #1
    1334:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1338:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    133c:	6889      	ldr	r1, [r1, #8]
    133e:	4408      	add	r0, r1
    1340:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1344:	9802      	ldr	r0, [sp, #8]
    1346:	1a28      	subs	r0, r5, r0
    1348:	0200      	lsls	r0, r0, #8
    134a:	17c1      	asrs	r1, r0, #31
    134c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1350:	1200      	asrs	r0, r0, #8
    1352:	2800      	cmp	r0, #0
    1354:	dd03      	ble.n	135e <MPSL_IRQ_RADIO_Handler+0x2ca>
    1356:	b009      	add	sp, #36	; 0x24
    1358:	2000      	movs	r0, #0
    135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    135e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1362:	1a40      	subs	r0, r0, r1
    1364:	4428      	add	r0, r5
    1366:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    136a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    136e:	e9c4 1000 	strd	r1, r0, [r4]
    1372:	9808      	ldr	r0, [sp, #32]
    1374:	9004      	str	r0, [sp, #16]
    1376:	9803      	ldr	r0, [sp, #12]
    1378:	46ea      	mov	sl, sp
    137a:	f10d 0804 	add.w	r8, sp, #4
    137e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1382:	2020      	movs	r0, #32
    1384:	f88d 0000 	strb.w	r0, [sp]
    1388:	2d20      	cmp	r5, #32
    138a:	d03c      	beq.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    138c:	4847      	ldr	r0, [pc, #284]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    138e:	9904      	ldr	r1, [sp, #16]
    1390:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    1394:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1398:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    139c:	f100 0108 	add.w	r1, r0, #8
    13a0:	68c0      	ldr	r0, [r0, #12]
    13a2:	6827      	ldr	r7, [r4, #0]
    13a4:	1a38      	subs	r0, r7, r0
    13a6:	0200      	lsls	r0, r0, #8
    13a8:	17c2      	asrs	r2, r0, #31
    13aa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13ae:	1200      	asrs	r0, r0, #8
    13b0:	d429      	bmi.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13b2:	89e0      	ldrh	r0, [r4, #14]
    13b4:	b300      	cbz	r0, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    13b6:	89c8      	ldrh	r0, [r1, #14]
    13b8:	b9f0      	cbnz	r0, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    13ba:	f8d1 9000 	ldr.w	r9, [r1]
    13be:	f002 ffa9 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    13c2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    13c6:	bf08      	it	eq
    13c8:	200d      	moveq	r0, #13
    13ca:	d00b      	beq.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    13cc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    13d0:	3856      	subs	r0, #86	; 0x56
    13d2:	bf08      	it	eq
    13d4:	201c      	moveq	r0, #28
    13d6:	d005      	beq.n	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
    13d8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    13dc:	389f      	subs	r0, #159	; 0x9f
    13de:	bf14      	ite	ne
    13e0:	2000      	movne	r0, #0
    13e2:	2032      	moveq	r0, #50	; 0x32
    13e4:	1c41      	adds	r1, r0, #1
    13e6:	eba7 0009 	sub.w	r0, r7, r9
    13ea:	0200      	lsls	r0, r0, #8
    13ec:	17c2      	asrs	r2, r0, #31
    13ee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13f2:	1200      	asrs	r0, r0, #8
    13f4:	4288      	cmp	r0, r1
    13f6:	db06      	blt.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13f8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    13fc:	f88a 5000 	strb.w	r5, [sl]
    1400:	7845      	ldrb	r5, [r0, #1]
    1402:	2d20      	cmp	r5, #32
    1404:	d1c6      	bne.n	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
    1406:	f89a 0000 	ldrb.w	r0, [sl]
    140a:	f888 0000 	strb.w	r0, [r8]
    140e:	9804      	ldr	r0, [sp, #16]
    1410:	2d20      	cmp	r5, #32
    1412:	bf1c      	itt	ne
    1414:	4925      	ldrne	r1, [pc, #148]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1416:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    141a:	d03f      	beq.n	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    141c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1420:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1424:	6861      	ldr	r1, [r4, #4]
    1426:	f8d7 9008 	ldr.w	r9, [r7, #8]
    142a:	f107 0008 	add.w	r0, r7, #8
    142e:	eba9 0101 	sub.w	r1, r9, r1
    1432:	0209      	lsls	r1, r1, #8
    1434:	17ca      	asrs	r2, r1, #31
    1436:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    143a:	1209      	asrs	r1, r1, #8
    143c:	d422      	bmi.n	1484 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc>
    143e:	89c0      	ldrh	r0, [r0, #14]
    1440:	b360      	cbz	r0, 149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    1442:	89e0      	ldrh	r0, [r4, #14]
    1444:	bb50      	cbnz	r0, 149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    1446:	f8d4 a000 	ldr.w	sl, [r4]
    144a:	f002 ff63 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    144e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1452:	bf08      	it	eq
    1454:	200d      	moveq	r0, #13
    1456:	d00b      	beq.n	1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>
    1458:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    145c:	3856      	subs	r0, #86	; 0x56
    145e:	bf08      	it	eq
    1460:	201c      	moveq	r0, #28
    1462:	d005      	beq.n	1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>
    1464:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1468:	389f      	subs	r0, #159	; 0x9f
    146a:	bf14      	ite	ne
    146c:	2000      	movne	r0, #0
    146e:	2032      	moveq	r0, #50	; 0x32
    1470:	1c41      	adds	r1, r0, #1
    1472:	eba9 000a 	sub.w	r0, r9, sl
    1476:	0200      	lsls	r0, r0, #8
    1478:	17c2      	asrs	r2, r0, #31
    147a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    147e:	1200      	asrs	r0, r0, #8
    1480:	4288      	cmp	r0, r1
    1482:	da0b      	bge.n	149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>
    1484:	f888 5000 	strb.w	r5, [r8]
    1488:	7e38      	ldrb	r0, [r7, #24]
    148a:	7c21      	ldrb	r1, [r4, #16]
    148c:	4288      	cmp	r0, r1
    148e:	f67f af13 	bls.w	12b8 <MPSL_IRQ_RADIO_Handler+0x224>
    1492:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1496:	7845      	ldrb	r5, [r0, #1]
    1498:	2d20      	cmp	r5, #32
    149a:	d1bf      	bne.n	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
    149c:	b009      	add	sp, #36	; 0x24
    149e:	2001      	movs	r0, #1
    14a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14a4:	20001294 	.word	0x20001294
    14a8:	20000e94 	.word	0x20000e94
    14ac:	20001214 	.word	0x20001214
    14b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b4:	460f      	mov	r7, r1
    14b6:	4606      	mov	r6, r0
    14b8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    14bc:	494b      	ldr	r1, [pc, #300]	; (15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>)
    14be:	4699      	mov	r9, r3
    14c0:	4408      	add	r0, r1
    14c2:	4692      	mov	sl, r2
    14c4:	f890 4020 	ldrb.w	r4, [r0, #32]
    14c8:	2020      	movs	r0, #32
    14ca:	7010      	strb	r0, [r2, #0]
    14cc:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    14d0:	2c20      	cmp	r4, #32
    14d2:	bf1c      	itt	ne
    14d4:	4846      	ldrne	r0, [pc, #280]	; (15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    14d6:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    14da:	d038      	beq.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    14dc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    14e0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    14e4:	f100 0108 	add.w	r1, r0, #8
    14e8:	68c0      	ldr	r0, [r0, #12]
    14ea:	6835      	ldr	r5, [r6, #0]
    14ec:	1a28      	subs	r0, r5, r0
    14ee:	0200      	lsls	r0, r0, #8
    14f0:	17c2      	asrs	r2, r0, #31
    14f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14f6:	1200      	asrs	r0, r0, #8
    14f8:	d429      	bmi.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    14fa:	89f0      	ldrh	r0, [r6, #14]
    14fc:	b300      	cbz	r0, 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    14fe:	89c8      	ldrh	r0, [r1, #14]
    1500:	b9f0      	cbnz	r0, 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    1502:	6808      	ldr	r0, [r1, #0]
    1504:	9000      	str	r0, [sp, #0]
    1506:	f002 ff05 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    150a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    150e:	bf08      	it	eq
    1510:	200d      	moveq	r0, #13
    1512:	d00b      	beq.n	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    1514:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1518:	3856      	subs	r0, #86	; 0x56
    151a:	bf08      	it	eq
    151c:	201c      	moveq	r0, #28
    151e:	d005      	beq.n	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    1520:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1524:	389f      	subs	r0, #159	; 0x9f
    1526:	bf14      	ite	ne
    1528:	2000      	movne	r0, #0
    152a:	2032      	moveq	r0, #50	; 0x32
    152c:	1c41      	adds	r1, r0, #1
    152e:	9800      	ldr	r0, [sp, #0]
    1530:	1a28      	subs	r0, r5, r0
    1532:	0200      	lsls	r0, r0, #8
    1534:	17c2      	asrs	r2, r0, #31
    1536:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    153a:	1200      	asrs	r0, r0, #8
    153c:	4288      	cmp	r0, r1
    153e:	db06      	blt.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    1540:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1544:	f88a 4000 	strb.w	r4, [sl]
    1548:	7844      	ldrb	r4, [r0, #1]
    154a:	2c20      	cmp	r4, #32
    154c:	d1c6      	bne.n	14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>
    154e:	f89a 0000 	ldrb.w	r0, [sl]
    1552:	f889 0000 	strb.w	r0, [r9]
    1556:	2c20      	cmp	r4, #32
    1558:	bf1c      	itt	ne
    155a:	4825      	ldrne	r0, [pc, #148]	; (15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    155c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1560:	d040      	beq.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1562:	bf00      	nop
    1564:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1568:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    156c:	6870      	ldr	r0, [r6, #4]
    156e:	68bd      	ldr	r5, [r7, #8]
    1570:	f107 0108 	add.w	r1, r7, #8
    1574:	1a28      	subs	r0, r5, r0
    1576:	0200      	lsls	r0, r0, #8
    1578:	17c2      	asrs	r2, r0, #31
    157a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    157e:	1200      	asrs	r0, r0, #8
    1580:	d422      	bmi.n	15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>
    1582:	89c8      	ldrh	r0, [r1, #14]
    1584:	b370      	cbz	r0, 15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1586:	89f0      	ldrh	r0, [r6, #14]
    1588:	bb60      	cbnz	r0, 15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    158a:	f8d6 b000 	ldr.w	fp, [r6]
    158e:	f002 fec1 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1592:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1596:	bf08      	it	eq
    1598:	200d      	moveq	r0, #13
    159a:	d00b      	beq.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    159c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    15a0:	3856      	subs	r0, #86	; 0x56
    15a2:	bf08      	it	eq
    15a4:	201c      	moveq	r0, #28
    15a6:	d005      	beq.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
    15a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    15ac:	389f      	subs	r0, #159	; 0x9f
    15ae:	bf14      	ite	ne
    15b0:	2000      	movne	r0, #0
    15b2:	2032      	moveq	r0, #50	; 0x32
    15b4:	1c41      	adds	r1, r0, #1
    15b6:	eba5 000b 	sub.w	r0, r5, fp
    15ba:	0200      	lsls	r0, r0, #8
    15bc:	17c2      	asrs	r2, r0, #31
    15be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    15c2:	1200      	asrs	r0, r0, #8
    15c4:	4288      	cmp	r0, r1
    15c6:	da0d      	bge.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    15c8:	f889 4000 	strb.w	r4, [r9]
    15cc:	7e38      	ldrb	r0, [r7, #24]
    15ce:	7c31      	ldrb	r1, [r6, #16]
    15d0:	4288      	cmp	r0, r1
    15d2:	d802      	bhi.n	15da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x252>
    15d4:	2000      	movs	r0, #0
    15d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15da:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    15de:	7844      	ldrb	r4, [r0, #1]
    15e0:	2c20      	cmp	r4, #32
    15e2:	d1bf      	bne.n	1564 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1dc>
    15e4:	2001      	movs	r0, #1
    15e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ea:	0000      	.short	0x0000
    15ec:	20001294 	.word	0x20001294
    15f0:	20001214 	.word	0x20001214
    15f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f8:	b082      	sub	sp, #8
    15fa:	4605      	mov	r5, r0
    15fc:	4614      	mov	r4, r2
    15fe:	4688      	mov	r8, r1
    1600:	89d0      	ldrh	r0, [r2, #14]
    1602:	aa01      	add	r2, sp, #4
    1604:	4669      	mov	r1, sp
    1606:	f001 ffa7 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    160a:	f002 fcb5 	bl	3f78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    160e:	f001 ff87 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1612:	4607      	mov	r7, r0
    1614:	4820      	ldr	r0, [pc, #128]	; (1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>)
    1616:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    161a:	2920      	cmp	r1, #32
    161c:	d004      	beq.n	1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>
    161e:	68c0      	ldr	r0, [r0, #12]
    1620:	1d40      	adds	r0, r0, #5
    1622:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1626:	e024      	b.n	1672 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ea>
    1628:	89e0      	ldrh	r0, [r4, #14]
    162a:	f105 0609 	add.w	r6, r5, #9
    162e:	b1b0      	cbz	r0, 165e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d6>
    1630:	f002 ffa2 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1634:	b998      	cbnz	r0, 165e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d6>
    1636:	f002 fe6d 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    163a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    163e:	bf08      	it	eq
    1640:	200d      	moveq	r0, #13
    1642:	d00b      	beq.n	165c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d4>
    1644:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1648:	3856      	subs	r0, #86	; 0x56
    164a:	bf08      	it	eq
    164c:	201c      	moveq	r0, #28
    164e:	d005      	beq.n	165c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d4>
    1650:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1654:	389f      	subs	r0, #159	; 0x9f
    1656:	bf14      	ite	ne
    1658:	2000      	movne	r0, #0
    165a:	2032      	moveq	r0, #50	; 0x32
    165c:	4406      	add	r6, r0
    165e:	f1b8 0f00 	cmp.w	r8, #0
    1662:	d104      	bne.n	166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
    1664:	9800      	ldr	r0, [sp, #0]
    1666:	4287      	cmp	r7, r0
    1668:	bf84      	itt	hi
    166a:	1a38      	subhi	r0, r7, r0
    166c:	4406      	addhi	r6, r0
    166e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1672:	e9d4 2000 	ldrd	r2, r0, [r4]
    1676:	1a80      	subs	r0, r0, r2
    1678:	4408      	add	r0, r1
    167a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    167e:	e9c4 1000 	strd	r1, r0, [r4]
    1682:	42a9      	cmp	r1, r5
    1684:	bf24      	itt	cs
    1686:	b002      	addcs	sp, #8
    1688:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    168c:	68a0      	ldr	r0, [r4, #8]
    168e:	1c40      	adds	r0, r0, #1
    1690:	60a0      	str	r0, [r4, #8]
    1692:	b002      	add	sp, #8
    1694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1698:	20001294 	.word	0x20001294
    169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16a0:	b097      	sub	sp, #92	; 0x5c
    16a2:	4617      	mov	r7, r2
    16a4:	468b      	mov	fp, r1
    16a6:	4605      	mov	r5, r0
    16a8:	f002 f9e8 	bl	3a7c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    16ac:	4604      	mov	r4, r0
    16ae:	f002 fc63 	bl	3f78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    16b2:	4606      	mov	r6, r0
    16b4:	f1bb 0f01 	cmp.w	fp, #1
    16b8:	bf18      	it	ne
    16ba:	f1bb 0f02 	cmpne.w	fp, #2
    16be:	d005      	beq.n	16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>
    16c0:	f640 115d 	movw	r1, #2397	; 0x95d
    16c4:	f04f 0070 	mov.w	r0, #112	; 0x70
    16c8:	f002 ffce 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16cc:	49f8      	ldr	r1, [pc, #992]	; (1ab0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x728>)
    16ce:	2001      	movs	r0, #1
    16d0:	6008      	str	r0, [r1, #0]
    16d2:	49f8      	ldr	r1, [pc, #992]	; (1ab4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72c>)
    16d4:	6889      	ldr	r1, [r1, #8]
    16d6:	6008      	str	r0, [r1, #0]
    16d8:	2000      	movs	r0, #0
    16da:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    16de:	900c      	str	r0, [sp, #48]	; 0x30
    16e0:	1e40      	subs	r0, r0, #1
    16e2:	900d      	str	r0, [sp, #52]	; 0x34
    16e4:	49f4      	ldr	r1, [pc, #976]	; (1ab8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x730>)
    16e6:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    16ea:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    16ee:	f100 0108 	add.w	r1, r0, #8
    16f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    16f6:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    16fa:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    16fe:	6980      	ldr	r0, [r0, #24]
    1700:	9012      	str	r0, [sp, #72]	; 0x48
    1702:	a80e      	add	r0, sp, #56	; 0x38
    1704:	f000 fbc4 	bl	1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    1708:	9007      	str	r0, [sp, #28]
    170a:	48ec      	ldr	r0, [pc, #944]	; (1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>)
    170c:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    1710:	8b80      	ldrh	r0, [r0, #28]
    1712:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1716:	f1b8 0f00 	cmp.w	r8, #0
    171a:	bf04      	itt	eq
    171c:	2000      	moveq	r0, #0
    171e:	9006      	streq	r0, [sp, #24]
    1720:	d00b      	beq.n	173a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b2>
    1722:	2001      	movs	r0, #1
    1724:	9006      	str	r0, [sp, #24]
    1726:	48e5      	ldr	r0, [pc, #916]	; (1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>)
    1728:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    172c:	b928      	cbnz	r0, 173a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b2>
    172e:	f002 ff23 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1732:	2800      	cmp	r0, #0
    1734:	bf08      	it	eq
    1736:	2701      	moveq	r7, #1
    1738:	d000      	beq.n	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
    173a:	2700      	movs	r7, #0
    173c:	f002 fdea 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1740:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1744:	bf08      	it	eq
    1746:	200d      	moveq	r0, #13
    1748:	d00b      	beq.n	1762 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3da>
    174a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    174e:	3856      	subs	r0, #86	; 0x56
    1750:	bf08      	it	eq
    1752:	201c      	moveq	r0, #28
    1754:	d005      	beq.n	1762 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3da>
    1756:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    175a:	389f      	subs	r0, #159	; 0x9f
    175c:	bf14      	ite	ne
    175e:	2000      	movne	r0, #0
    1760:	2032      	moveq	r0, #50	; 0x32
    1762:	f04f 0900 	mov.w	r9, #0
    1766:	46ca      	mov	sl, r9
    1768:	900b      	str	r0, [sp, #44]	; 0x2c
    176a:	4546      	cmp	r6, r8
    176c:	d938      	bls.n	17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>
    176e:	9907      	ldr	r1, [sp, #28]
    1770:	f8df 934c 	ldr.w	r9, [pc, #844]	; 1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>
    1774:	ea6f 0c06 	mvn.w	ip, r6
    1778:	466b      	mov	r3, sp
    177a:	aa16      	add	r2, sp, #88	; 0x58
    177c:	eb01 000c 	add.w	r0, r1, ip
    1780:	4549      	cmp	r1, r9
    1782:	d904      	bls.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
    1784:	f240 516f 	movw	r1, #1391	; 0x56f
    1788:	2070      	movs	r0, #112	; 0x70
    178a:	f002 ff6d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    178e:	49cd      	ldr	r1, [pc, #820]	; (1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>)
    1790:	458c      	cmp	ip, r1
    1792:	dd04      	ble.n	179e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x416>
    1794:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1798:	2070      	movs	r0, #112	; 0x70
    179a:	f002 ff65 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    179e:	49ca      	ldr	r1, [pc, #808]	; (1ac8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x740>)
    17a0:	458c      	cmp	ip, r1
    17a2:	da04      	bge.n	17ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x426>
    17a4:	f240 5171 	movw	r1, #1393	; 0x571
    17a8:	2070      	movs	r0, #112	; 0x70
    17aa:	f002 ff5d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ae:	49c7      	ldr	r1, [pc, #796]	; (1acc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x744>)
    17b0:	4281      	cmp	r1, r0
    17b2:	bfdc      	itt	le
    17b4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    17b8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    17bc:	dd05      	ble.n	17ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x442>
    17be:	2800      	cmp	r0, #0
    17c0:	bfbc      	itt	lt
    17c2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    17c6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    17ca:	4619      	mov	r1, r3
    17cc:	f001 fec4 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    17d0:	9800      	ldr	r0, [sp, #0]
    17d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    17d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17d8:	9000      	str	r0, [sp, #0]
    17da:	1a08      	subs	r0, r1, r0
    17dc:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    17e0:	2f00      	cmp	r7, #0
    17e2:	bf18      	it	ne
    17e4:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    17e8:	d105      	bne.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17ea:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    17ee:	2800      	cmp	r0, #0
    17f0:	bf18      	it	ne
    17f2:	f04f 0a02 	movne.w	sl, #2
    17f6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    17fa:	d008      	beq.n	180e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x486>
    17fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    17fe:	1b00      	subs	r0, r0, r4
    1800:	0200      	lsls	r0, r0, #8
    1802:	17c1      	asrs	r1, r0, #31
    1804:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1808:	1200      	asrs	r0, r0, #8
    180a:	2801      	cmp	r0, #1
    180c:	da01      	bge.n	1812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48a>
    180e:	2003      	movs	r0, #3
    1810:	e00d      	b.n	182e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a6>
    1812:	b157      	cbz	r7, 182a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a2>
    1814:	48a9      	ldr	r0, [pc, #676]	; (1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>)
    1816:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    181a:	b130      	cbz	r0, 182a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a2>
    181c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1820:	f110 0a00 	adds.w	sl, r0, #0
    1824:	bf18      	it	ne
    1826:	f04f 0a02 	movne.w	sl, #2
    182a:	4625      	mov	r5, r4
    182c:	2000      	movs	r0, #0
    182e:	4482      	add	sl, r0
    1830:	980e      	ldr	r0, [sp, #56]	; 0x38
    1832:	eba0 0009 	sub.w	r0, r0, r9
    1836:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    183a:	1e50      	subs	r0, r2, #1
    183c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1840:	1b41      	subs	r1, r0, r5
    1842:	0209      	lsls	r1, r1, #8
    1844:	17cb      	asrs	r3, r1, #31
    1846:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    184a:	1209      	asrs	r1, r1, #8
    184c:	4551      	cmp	r1, sl
    184e:	db04      	blt.n	185a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d2>
    1850:	f1b9 0f00 	cmp.w	r9, #0
    1854:	bf18      	it	ne
    1856:	920e      	strne	r2, [sp, #56]	; 0x38
    1858:	e02d      	b.n	18b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52e>
    185a:	f1b9 0f00 	cmp.w	r9, #0
    185e:	d005      	beq.n	186c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e4>
    1860:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    1864:	b920      	cbnz	r0, 1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    1866:	f002 fb7d 	bl	3f64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    186a:	b108      	cbz	r0, 1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    186c:	b9af      	cbnz	r7, 189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    186e:	e00c      	b.n	188a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x502>
    1870:	b92f      	cbnz	r7, 187e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f6>
    1872:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1876:	2800      	cmp	r0, #0
    1878:	bf18      	it	ne
    187a:	f1aa 0a02 	subne.w	sl, sl, #2
    187e:	f04f 0900 	mov.w	r9, #0
    1882:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    1886:	464e      	mov	r6, r9
    1888:	e007      	b.n	189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    188a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    188e:	b120      	cbz	r0, 189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    1890:	2000      	movs	r0, #0
    1892:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    1896:	f1aa 0a02 	sub.w	sl, sl, #2
    189a:	980e      	ldr	r0, [sp, #56]	; 0x38
    189c:	eba0 0009 	sub.w	r0, r0, r9
    18a0:	1e40      	subs	r0, r0, #1
    18a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18a6:	1b41      	subs	r1, r0, r5
    18a8:	0209      	lsls	r1, r1, #8
    18aa:	17ca      	asrs	r2, r1, #31
    18ac:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    18b0:	1209      	asrs	r1, r1, #8
    18b2:	4551      	cmp	r1, sl
    18b4:	db7e      	blt.n	19b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62c>
    18b6:	9714      	str	r7, [sp, #80]	; 0x50
    18b8:	4605      	mov	r5, r0
    18ba:	f04f 0900 	mov.w	r9, #0
    18be:	9f06      	ldr	r7, [sp, #24]
    18c0:	f001 ffb4 	bl	382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18c4:	1a28      	subs	r0, r5, r0
    18c6:	0200      	lsls	r0, r0, #8
    18c8:	17c1      	asrs	r1, r0, #31
    18ca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    18ce:	ea4f 2a20 	mov.w	sl, r0, asr #8
    18d2:	f002 fd1f 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    18d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    18da:	bf08      	it	eq
    18dc:	200d      	moveq	r0, #13
    18de:	d00b      	beq.n	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
    18e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    18e4:	3856      	subs	r0, #86	; 0x56
    18e6:	bf08      	it	eq
    18e8:	201c      	moveq	r0, #28
    18ea:	d005      	beq.n	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
    18ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    18f0:	389f      	subs	r0, #159	; 0x9f
    18f2:	bf14      	ite	ne
    18f4:	2000      	movne	r0, #0
    18f6:	2032      	moveq	r0, #50	; 0x32
    18f8:	300b      	adds	r0, #11
    18fa:	4582      	cmp	sl, r0
    18fc:	da20      	bge.n	1940 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b8>
    18fe:	f1bb 0f01 	cmp.w	fp, #1
    1902:	d002      	beq.n	190a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x582>
    1904:	9814      	ldr	r0, [sp, #80]	; 0x50
    1906:	b140      	cbz	r0, 191a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x592>
    1908:	e012      	b.n	1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>
    190a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    190e:	d11c      	bne.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    1910:	f640 01de 	movw	r1, #2270	; 0x8de
    1914:	2070      	movs	r0, #112	; 0x70
    1916:	f002 fea7 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    191a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    191e:	d007      	beq.n	1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>
    1920:	1b60      	subs	r0, r4, r5
    1922:	0200      	lsls	r0, r0, #8
    1924:	17c1      	asrs	r1, r0, #31
    1926:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    192a:	1200      	asrs	r0, r0, #8
    192c:	2804      	cmp	r0, #4
    192e:	dd04      	ble.n	193a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b2>
    1930:	462c      	mov	r4, r5
    1932:	4620      	mov	r0, r4
    1934:	f001 ffa0 	bl	3878 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1938:	e007      	b.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    193a:	2800      	cmp	r0, #0
    193c:	dc63      	bgt.n	1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
    193e:	e004      	b.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    1940:	462c      	mov	r4, r5
    1942:	4620      	mov	r0, r4
    1944:	f001 ff98 	bl	3878 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1948:	46b9      	mov	r9, r7
    194a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    194e:	d055      	beq.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    1950:	980e      	ldr	r0, [sp, #56]	; 0x38
    1952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1954:	1b00      	subs	r0, r0, r4
    1956:	1b12      	subs	r2, r2, r4
    1958:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    195c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1960:	2801      	cmp	r0, #1
    1962:	d350      	bcc.n	1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
    1964:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1968:	bf98      	it	ls
    196a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    196e:	d84a      	bhi.n	1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
    1970:	4620      	mov	r0, r4
    1972:	f00b fa51 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1976:	9907      	ldr	r1, [sp, #28]
    1978:	4a52      	ldr	r2, [pc, #328]	; (1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>)
    197a:	1a0d      	subs	r5, r1, r0
    197c:	f04f 0a00 	mov.w	sl, #0
    1980:	1aaa      	subs	r2, r5, r2
    1982:	f17a 0200 	sbcs.w	r2, sl, #0
    1986:	d318      	bcc.n	19ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x632>
    1988:	4b4e      	ldr	r3, [pc, #312]	; (1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>)
    198a:	1a42      	subs	r2, r0, r1
    198c:	1ad3      	subs	r3, r2, r3
    198e:	f17a 0300 	sbcs.w	r3, sl, #0
    1992:	d312      	bcc.n	19ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x632>
    1994:	4b4a      	ldr	r3, [pc, #296]	; (1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>)
    1996:	42ab      	cmp	r3, r5
    1998:	bf3e      	ittt	cc
    199a:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    199e:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    19a2:	1845      	addcc	r5, r0, r1
    19a4:	d309      	bcc.n	19ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x632>
    19a6:	4293      	cmp	r3, r2
    19a8:	d231      	bcs.n	1a0e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x686>
    19aa:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    19ae:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    19b2:	e000      	b.n	19b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62e>
    19b4:	e027      	b.n	1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
    19b6:	4408      	add	r0, r1
    19b8:	4245      	negs	r5, r0
    19ba:	4f40      	ldr	r7, [pc, #256]	; (1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>)
    19bc:	7fb8      	ldrb	r0, [r7, #30]
    19be:	b358      	cbz	r0, 1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>
    19c0:	f1bb 0f01 	cmp.w	fp, #1
    19c4:	d005      	beq.n	19d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64a>
    19c6:	2002      	movs	r0, #2
    19c8:	f002 f992 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19cc:	2001      	movs	r0, #1
    19ce:	f002 f98f 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19d2:	45b0      	cmp	r8, r6
    19d4:	d22c      	bcs.n	1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>
    19d6:	eba5 0106 	sub.w	r1, r5, r6
    19da:	f04f 0002 	mov.w	r0, #2
    19de:	f002 f8d1 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19e2:	b390      	cbz	r0, 1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
    19e4:	f1b8 0f00 	cmp.w	r8, #0
    19e8:	bf1c      	itt	ne
    19ea:	eba5 0108 	subne.w	r1, r5, r8
    19ee:	2001      	movne	r0, #1
    19f0:	d034      	beq.n	1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>
    19f2:	bf00      	nop
    19f4:	f002 f8c6 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19f8:	b338      	cbz	r0, 1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
    19fa:	e02f      	b.n	1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>
    19fc:	f640 11f1 	movw	r1, #2545	; 0x9f1
    1a00:	2070      	movs	r0, #112	; 0x70
    1a02:	f002 fe31 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a06:	b017      	add	sp, #92	; 0x5c
    1a08:	2000      	movs	r0, #0
    1a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a0e:	f640 21c2 	movw	r1, #2754	; 0xac2
    1a12:	2070      	movs	r0, #112	; 0x70
    1a14:	f002 fe28 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a18:	45b0      	cmp	r8, r6
    1a1a:	bf34      	ite	cc
    1a1c:	4630      	movcc	r0, r6
    1a1e:	4640      	movcs	r0, r8
    1a20:	301e      	adds	r0, #30
    1a22:	42a8      	cmp	r0, r5
    1a24:	dbcc      	blt.n	19c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x638>
    1a26:	f640 2105 	movw	r1, #2565	; 0xa05
    1a2a:	2070      	movs	r0, #112	; 0x70
    1a2c:	f002 fe1c 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a30:	d90c      	bls.n	1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>
    1a32:	eba5 0108 	sub.w	r1, r5, r8
    1a36:	2001      	movs	r0, #1
    1a38:	f002 f8a4 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a3c:	b128      	cbz	r0, 1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
    1a3e:	2e00      	cmp	r6, #0
    1a40:	bf1c      	itt	ne
    1a42:	1ba9      	subne	r1, r5, r6
    1a44:	2002      	movne	r0, #2
    1a46:	d009      	beq.n	1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>
    1a48:	e7d4      	b.n	19f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66c>
    1a4a:	e030      	b.n	1aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x726>
    1a4c:	ea56 0008 	orrs.w	r0, r6, r8
    1a50:	d004      	beq.n	1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>
    1a52:	f640 1141 	movw	r1, #2369	; 0x941
    1a56:	2070      	movs	r0, #112	; 0x70
    1a58:	f002 fe06 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a5c:	4629      	mov	r1, r5
    1a5e:	2000      	movs	r0, #0
    1a60:	f002 f890 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a64:	b318      	cbz	r0, 1aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x726>
    1a66:	9806      	ldr	r0, [sp, #24]
    1a68:	2601      	movs	r6, #1
    1a6a:	2800      	cmp	r0, #0
    1a6c:	bf04      	itt	eq
    1a6e:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    1a72:	2800      	cmpeq	r0, #0
    1a74:	d002      	beq.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a76:	f1b9 0f00 	cmp.w	r9, #0
    1a7a:	d033      	beq.n	1ae4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75c>
    1a7c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1a80:	b118      	cbz	r0, 1a8a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x702>
    1a82:	f002 fc4d 	bl	4320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a86:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1a8a:	f1b9 0f00 	cmp.w	r9, #0
    1a8e:	d02c      	beq.n	1aea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x762>
    1a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a92:	1a20      	subs	r0, r4, r0
    1a94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1a98:	2005      	movs	r0, #5
    1a9a:	f002 f873 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a9e:	b3e0      	cbz	r0, 1b1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x792>
    1aa0:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1aa4:	2800      	cmp	r0, #0
    1aa6:	bf08      	it	eq
    1aa8:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    1aac:	e025      	b.n	1afa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x772>
    1aae:	e00f      	b.n	1ad0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x748>
    1ab0:	40000508 	.word	0x40000508
    1ab4:	2000003c 	.word	0x2000003c
    1ab8:	20000e94 	.word	0x20000e94
    1abc:	20001294 	.word	0x20001294
    1ac0:	1e847fff 	.word	0x1e847fff
    1ac4:	0f424000 	.word	0x0f424000
    1ac8:	f0bdc000 	.word	0xf0bdc000
    1acc:	1e848000 	.word	0x1e848000
    1ad0:	2002      	movs	r0, #2
    1ad2:	f002 f90d 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ad6:	2001      	movs	r0, #1
    1ad8:	f002 f90a 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1adc:	b017      	add	sp, #92	; 0x5c
    1ade:	2000      	movs	r0, #0
    1ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae4:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1ae8:	b190      	cbz	r0, 1b10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x788>
    1aea:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1aee:	b120      	cbz	r0, 1afa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x772>
    1af0:	2005      	movs	r0, #5
    1af2:	f002 f8fd 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1af6:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    1afa:	eba5 0008 	sub.w	r0, r5, r8
    1afe:	f1a0 0119 	sub.w	r1, r0, #25
    1b02:	2900      	cmp	r1, #0
    1b04:	dc0f      	bgt.n	1b26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79e>
    1b06:	f640 212e 	movw	r1, #2606	; 0xa2e
    1b0a:	2070      	movs	r0, #112	; 0x70
    1b0c:	f002 fdac 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b10:	f002 fc22 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1b14:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    1b18:	e7b7      	b.n	1a8a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x702>
    1b1a:	e7ff      	b.n	1b1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x794>
    1b1c:	f240 21f2 	movw	r1, #754	; 0x2f2
    1b20:	2070      	movs	r0, #112	; 0x70
    1b22:	f002 fda1 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b26:	2003      	movs	r0, #3
    1b28:	f002 f82c 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1b2c:	b1c0      	cbz	r0, 1b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d8>
    1b2e:	480f      	ldr	r0, [pc, #60]	; (1b6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e4>)
    1b30:	6880      	ldr	r0, [r0, #8]
    1b32:	f8c0 a000 	str.w	sl, [r0]
    1b36:	480e      	ldr	r0, [pc, #56]	; (1b70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e8>)
    1b38:	f8c0 a000 	str.w	sl, [r0]
    1b3c:	ac0c      	add	r4, sp, #48	; 0x30
    1b3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1b42:	6038      	str	r0, [r7, #0]
    1b44:	6079      	str	r1, [r7, #4]
    1b46:	60ba      	str	r2, [r7, #8]
    1b48:	60fb      	str	r3, [r7, #12]
    1b4a:	ac10      	add	r4, sp, #64	; 0x40
    1b4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1b50:	6138      	str	r0, [r7, #16]
    1b52:	6179      	str	r1, [r7, #20]
    1b54:	61ba      	str	r2, [r7, #24]
    1b56:	61fb      	str	r3, [r7, #28]
    1b58:	b017      	add	sp, #92	; 0x5c
    1b5a:	2001      	movs	r0, #1
    1b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b60:	f640 2136 	movw	r1, #2614	; 0xa36
    1b64:	2070      	movs	r0, #112	; 0x70
    1b66:	f002 fd7f 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b6a:	0000      	.short	0x0000
    1b6c:	2000003c 	.word	0x2000003c
    1b70:	40000508 	.word	0x40000508
    1b74:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b78:	4606      	mov	r6, r0
    1b7a:	7808      	ldrb	r0, [r1, #0]
    1b7c:	7490      	strb	r0, [r2, #18]
    1b7e:	7ac8      	ldrb	r0, [r1, #11]
    1b80:	7450      	strb	r0, [r2, #17]
    1b82:	7a88      	ldrb	r0, [r1, #10]
    1b84:	7410      	strb	r0, [r2, #16]
    1b86:	8908      	ldrh	r0, [r1, #8]
    1b88:	81d0      	strh	r0, [r2, #14]
    1b8a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1d24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x99c>
    1b8e:	6870      	ldr	r0, [r6, #4]
    1b90:	469a      	mov	sl, r3
    1b92:	fba0 7908 	umull	r7, r9, r0, r8
    1b96:	4614      	mov	r4, r2
    1b98:	460d      	mov	r5, r1
    1b9a:	6830      	ldr	r0, [r6, #0]
    1b9c:	f00b f93c 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1ba0:	19c1      	adds	r1, r0, r7
    1ba2:	7828      	ldrb	r0, [r5, #0]
    1ba4:	ea4f 0c68 	mov.w	ip, r8, asr #1
    1ba8:	f149 0200 	adc.w	r2, r9, #0
    1bac:	f1a8 0e01 	sub.w	lr, r8, #1
    1bb0:	f1cc 0b00 	rsb	fp, ip, #0
    1bb4:	b168      	cbz	r0, 1bd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84a>
    1bb6:	89e0      	ldrh	r0, [r4, #14]
    1bb8:	7c67      	ldrb	r7, [r4, #17]
    1bba:	43c0      	mvns	r0, r0
    1bbc:	f8d5 9004 	ldr.w	r9, [r5, #4]
    1bc0:	f104 020c 	add.w	r2, r4, #12
    1bc4:	4560      	cmp	r0, ip
    1bc6:	dd5f      	ble.n	1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    1bc8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1bcc:	2070      	movs	r0, #112	; 0x70
    1bce:	f002 fd4b 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bd2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a0>
    1bd6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    1bda:	eb11 0a09 	adds.w	sl, r1, r9
    1bde:	f142 0900 	adc.w	r9, r2, #0
    1be2:	ebb0 0a0a 	subs.w	sl, r0, sl
    1be6:	eb73 0909 	sbcs.w	r9, r3, r9
    1bea:	d245      	bcs.n	1c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f0>
    1bec:	1a41      	subs	r1, r0, r1
    1bee:	eb73 0102 	sbcs.w	r1, r3, r2
    1bf2:	d341      	bcc.n	1c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f0>
    1bf4:	1bc7      	subs	r7, r0, r7
    1bf6:	6870      	ldr	r0, [r6, #4]
    1bf8:	60a0      	str	r0, [r4, #8]
    1bfa:	4547      	cmp	r7, r8
    1bfc:	d305      	bcc.n	1c0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x882>
    1bfe:	1c40      	adds	r0, r0, #1
    1c00:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    1c04:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    1c08:	60a0      	str	r0, [r4, #8]
    1c0a:	89e0      	ldrh	r0, [r4, #14]
    1c0c:	686d      	ldr	r5, [r5, #4]
    1c0e:	43c1      	mvns	r1, r0
    1c10:	7c66      	ldrb	r6, [r4, #17]
    1c12:	1878      	adds	r0, r7, r1
    1c14:	f104 020c 	add.w	r2, r4, #12
    1c18:	4577      	cmp	r7, lr
    1c1a:	d904      	bls.n	1c26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x89e>
    1c1c:	f240 516f 	movw	r1, #1391	; 0x56f
    1c20:	2070      	movs	r0, #112	; 0x70
    1c22:	f002 fd21 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c26:	4561      	cmp	r1, ip
    1c28:	dcce      	bgt.n	1bc8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x840>
    1c2a:	4559      	cmp	r1, fp
    1c2c:	db2f      	blt.n	1c8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x906>
    1c2e:	4580      	cmp	r8, r0
    1c30:	bfdc      	itt	le
    1c32:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1c36:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1c3a:	dd05      	ble.n	1c48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c0>
    1c3c:	2800      	cmp	r0, #0
    1c3e:	bfbc      	itt	lt
    1c40:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1c44:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1c48:	4621      	mov	r1, r4
    1c4a:	f001 fc85 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c4e:	6820      	ldr	r0, [r4, #0]
    1c50:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c54:	1978      	adds	r0, r7, r5
    1c56:	1c40      	adds	r0, r0, #1
    1c58:	6021      	str	r1, [r4, #0]
    1c5a:	2e00      	cmp	r6, #0
    1c5c:	bf08      	it	eq
    1c5e:	307a      	addeq	r0, #122	; 0x7a
    1c60:	d003      	beq.n	1c6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e2>
    1c62:	2e01      	cmp	r6, #1
    1c64:	bf08      	it	eq
    1c66:	3048      	addeq	r0, #72	; 0x48
    1c68:	d134      	bne.n	1cd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94c>
    1c6a:	f001 fc59 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c72:	6060      	str	r0, [r4, #4]
    1c74:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c78:	6830      	ldr	r0, [r6, #0]
    1c7a:	1e40      	subs	r0, r0, #1
    1c7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c80:	6020      	str	r0, [r4, #0]
    1c82:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1c86:	e7f4      	b.n	1c72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ea>
    1c88:	4601      	mov	r1, r0
    1c8a:	4558      	cmp	r0, fp
    1c8c:	da04      	bge.n	1c98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x910>
    1c8e:	f240 5171 	movw	r1, #1393	; 0x571
    1c92:	2070      	movs	r0, #112	; 0x70
    1c94:	f002 fce8 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c98:	4580      	cmp	r8, r0
    1c9a:	bfdc      	itt	le
    1c9c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1ca0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1ca4:	dd05      	ble.n	1cb2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92a>
    1ca6:	2800      	cmp	r0, #0
    1ca8:	bfbc      	itt	lt
    1caa:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1cae:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1cb2:	4621      	mov	r1, r4
    1cb4:	f001 fc50 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1cb8:	6820      	ldr	r0, [r4, #0]
    1cba:	2f00      	cmp	r7, #0
    1cbc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1cc0:	f109 0001 	add.w	r0, r9, #1
    1cc4:	6021      	str	r1, [r4, #0]
    1cc6:	bf08      	it	eq
    1cc8:	307a      	addeq	r0, #122	; 0x7a
    1cca:	d008      	beq.n	1cde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x956>
    1ccc:	2f01      	cmp	r7, #1
    1cce:	bf08      	it	eq
    1cd0:	3048      	addeq	r0, #72	; 0x48
    1cd2:	d004      	beq.n	1cde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x956>
    1cd4:	f240 6124 	movw	r1, #1572	; 0x624
    1cd8:	2070      	movs	r0, #112	; 0x70
    1cda:	f002 fcc5 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cde:	f001 fc1f 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ce2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ce6:	6061      	str	r1, [r4, #4]
    1ce8:	6870      	ldr	r0, [r6, #4]
    1cea:	60a0      	str	r0, [r4, #8]
    1cec:	2100      	movs	r1, #0
    1cee:	4622      	mov	r2, r4
    1cf0:	6830      	ldr	r0, [r6, #0]
    1cf2:	f7ff fc7f 	bl	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    1cf6:	6832      	ldr	r2, [r6, #0]
    1cf8:	4653      	mov	r3, sl
    1cfa:	4621      	mov	r1, r4
    1cfc:	6928      	ldr	r0, [r5, #16]
    1cfe:	f7ff fa25 	bl	114c <MPSL_IRQ_RADIO_Handler+0xb8>
    1d02:	2800      	cmp	r0, #0
    1d04:	bf18      	it	ne
    1d06:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d0a:	e9d4 2100 	ldrd	r2, r1, [r4]
    1d0e:	6830      	ldr	r0, [r6, #0]
    1d10:	1a89      	subs	r1, r1, r2
    1d12:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d16:	4408      	add	r0, r1
    1d18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d1c:	e9c4 2000 	strd	r2, r0, [r4]
    1d20:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d24:	1e848000 	.word	0x1e848000
    1d28:	0f424000 	.word	0x0f424000
    1d2c:	b570      	push	{r4, r5, r6, lr}
    1d2e:	4d1e      	ldr	r5, [pc, #120]	; (1da8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>)
    1d30:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1d34:	2820      	cmp	r0, #32
    1d36:	bf18      	it	ne
    1d38:	bd70      	popne	{r4, r5, r6, pc}
    1d3a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1d3e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1d42:	4428      	add	r0, r5
    1d44:	f890 4020 	ldrb.w	r4, [r0, #32]
    1d48:	2c20      	cmp	r4, #32
    1d4a:	d027      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d4c:	4b17      	ldr	r3, [pc, #92]	; (1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>)
    1d4e:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1d52:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1d56:	7849      	ldrb	r1, [r1, #1]
    1d58:	f880 1020 	strb.w	r1, [r0, #32]
    1d5c:	20ff      	movs	r0, #255	; 0xff
    1d5e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1d62:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1d66:	4621      	mov	r1, r4
    1d68:	2002      	movs	r0, #2
    1d6a:	f000 f8cb 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1d6e:	2000      	movs	r0, #0
    1d70:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1d74:	77a8      	strb	r0, [r5, #30]
    1d76:	490e      	ldr	r1, [pc, #56]	; (1db0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>)
    1d78:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1d7c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1d80:	7e00      	ldrb	r0, [r0, #24]
    1d82:	2800      	cmp	r0, #0
    1d84:	bf08      	it	eq
    1d86:	f002 fdc9 	bleq	491c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1d8a:	2000      	movs	r0, #0
    1d8c:	4909      	ldr	r1, [pc, #36]	; (1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>)
    1d8e:	6849      	ldr	r1, [r1, #4]
    1d90:	2900      	cmp	r1, #0
    1d92:	bf08      	it	eq
    1d94:	bd70      	popeq	{r4, r5, r6, pc}
    1d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1d9a:	4708      	bx	r1
    1d9c:	f44f 714b 	mov.w	r1, #812	; 0x32c
    1da0:	2070      	movs	r0, #112	; 0x70
    1da2:	f002 fc61 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1da6:	0000      	.short	0x0000
    1da8:	20001294 	.word	0x20001294
    1dac:	20001214 	.word	0x20001214
    1db0:	20000e94 	.word	0x20000e94
    1db4:	2000003c 	.word	0x2000003c
    1db8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1dbc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>
    1dc0:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1dc4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1dc8:	4440      	add	r0, r8
    1dca:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1dce:	2c20      	cmp	r4, #32
    1dd0:	bf08      	it	eq
    1dd2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1dd6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1dda:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1dde:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    1de2:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1de6:	2607      	movs	r6, #7
    1de8:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1dec:	2801      	cmp	r0, #1
    1dee:	d00e      	beq.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1df0:	2804      	cmp	r0, #4
    1df2:	bf08      	it	eq
    1df4:	2602      	moveq	r6, #2
    1df6:	d00a      	beq.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1df8:	2805      	cmp	r0, #5
    1dfa:	bf0c      	ite	eq
    1dfc:	2603      	moveq	r6, #3
    1dfe:	2806      	cmpne	r0, #6
    1e00:	d005      	beq.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1e02:	f640 01a8 	movw	r1, #2216	; 0x8a8
    1e06:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e0a:	f002 fc2d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e0e:	f1bb 0f00 	cmp.w	fp, #0
    1e12:	bf18      	it	ne
    1e14:	f3af 8000 	nopne.w
    1e18:	f3ef 8010 	mrs	r0, PRIMASK
    1e1c:	b672      	cpsid	i
    1e1e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1e22:	784a      	ldrb	r2, [r1, #1]
    1e24:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1e28:	4441      	add	r1, r8
    1e2a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1e2e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1e32:	42a2      	cmp	r2, r4
    1e34:	bf04      	itt	eq
    1e36:	2220      	moveq	r2, #32
    1e38:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1e3c:	b1c0      	cbz	r0, 1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>
    1e3e:	462a      	mov	r2, r5
    1e40:	4621      	mov	r1, r4
    1e42:	2001      	movs	r0, #1
    1e44:	f000 f85e 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1e48:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1e4c:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1e50:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1e54:	6840      	ldr	r0, [r0, #4]
    1e56:	4631      	mov	r1, r6
    1e58:	4790      	blx	r2
    1e5a:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1e5e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1e62:	4440      	add	r0, r8
    1e64:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1e68:	2c20      	cmp	r4, #32
    1e6a:	d1ba      	bne.n	1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1e6c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e70:	4806      	ldr	r0, [pc, #24]	; (1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1e72:	2800      	cmp	r0, #0
    1e74:	bf18      	it	ne
    1e76:	f3af 8000 	nopne.w
    1e7a:	b662      	cpsie	i
    1e7c:	e7df      	b.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e7e:	0000      	.short	0x0000
    1e80:	20001294 	.word	0x20001294
    1e84:	00000000 	.word	0x00000000
    1e88:	20001214 	.word	0x20001214
    1e8c:	00000000 	.word	0x00000000
    1e90:	b510      	push	{r4, lr}
    1e92:	4604      	mov	r4, r0
    1e94:	6800      	ldr	r0, [r0, #0]
    1e96:	f00a ffbf 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e9a:	4602      	mov	r2, r0
    1e9c:	89e0      	ldrh	r0, [r4, #14]
    1e9e:	7b21      	ldrb	r1, [r4, #12]
    1ea0:	4b14      	ldr	r3, [pc, #80]	; (1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>)
    1ea2:	4408      	add	r0, r1
    1ea4:	1c41      	adds	r1, r0, #1
    1ea6:	1850      	adds	r0, r2, r1
    1ea8:	429a      	cmp	r2, r3
    1eaa:	d904      	bls.n	1eb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1eac:	f240 516f 	movw	r1, #1391	; 0x56f
    1eb0:	2070      	movs	r0, #112	; 0x70
    1eb2:	f002 fbd9 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb6:	4a10      	ldr	r2, [pc, #64]	; (1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>)
    1eb8:	4291      	cmp	r1, r2
    1eba:	dd04      	ble.n	1ec6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1ebc:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1ec0:	2070      	movs	r0, #112	; 0x70
    1ec2:	f002 fbd1 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ec6:	4a0d      	ldr	r2, [pc, #52]	; (1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>)
    1ec8:	4291      	cmp	r1, r2
    1eca:	da04      	bge.n	1ed6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1ecc:	f240 5171 	movw	r1, #1393	; 0x571
    1ed0:	2070      	movs	r0, #112	; 0x70
    1ed2:	f002 fbc9 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed6:	490a      	ldr	r1, [pc, #40]	; (1f00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>)
    1ed8:	4281      	cmp	r1, r0
    1eda:	bfde      	ittt	le
    1edc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1ee0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1ee4:	bd10      	pople	{r4, pc}
    1ee6:	2800      	cmp	r0, #0
    1ee8:	bfbc      	itt	lt
    1eea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1eee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	1e847fff 	.word	0x1e847fff
    1ef8:	0f424000 	.word	0x0f424000
    1efc:	f0bdc000 	.word	0xf0bdc000
    1f00:	1e848000 	.word	0x1e848000
    1f04:	f8df c058 	ldr.w	ip, [pc, #88]	; 1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f08:	b510      	push	{r4, lr}
    1f0a:	2300      	movs	r3, #0
    1f0c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1f10:	2807      	cmp	r0, #7
    1f12:	d21f      	bcs.n	1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f14:	e8df f000 	tbb	[pc, r0]
    1f18:	05050505 	.word	0x05050505
    1f1c:	00040404 	.word	0x00040404
    1f20:	2301      	movs	r3, #1
    1f22:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1f26:	2b00      	cmp	r3, #0
    1f28:	bf08      	it	eq
    1f2a:	bd10      	popeq	{r4, pc}
    1f2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1f30:	480c      	ldr	r0, [pc, #48]	; (1f64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>)
    1f32:	4402      	add	r2, r0
    1f34:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1f38:	2820      	cmp	r0, #32
    1f3a:	bf0e      	itee	eq
    1f3c:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1f40:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1f44:	7041      	strbne	r1, [r0, #1]
    1f46:	2020      	movs	r0, #32
    1f48:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1f4c:	7058      	strb	r0, [r3, #1]
    1f4e:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1f52:	bd10      	pop	{r4, pc}
    1f54:	f44f 711a 	mov.w	r1, #616	; 0x268
    1f58:	2070      	movs	r0, #112	; 0x70
    1f5a:	f002 fb85 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f5e:	0000      	.short	0x0000
    1f60:	20001214 	.word	0x20001214
    1f64:	20001294 	.word	0x20001294
    1f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f6c:	4617      	mov	r7, r2
    1f6e:	f8df a158 	ldr.w	sl, [pc, #344]	; 20c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc8>
    1f72:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    1f76:	4450      	add	r0, sl
    1f78:	4688      	mov	r8, r1
    1f7a:	f890 4020 	ldrb.w	r4, [r0, #32]
    1f7e:	2901      	cmp	r1, #1
    1f80:	4625      	mov	r5, r4
    1f82:	bf18      	it	ne
    1f84:	f1b8 0f02 	cmpne.w	r8, #2
    1f88:	d005      	beq.n	1f96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24a>
    1f8a:	f640 216c 	movw	r1, #2668	; 0xa6c
    1f8e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1f92:	f002 fb69 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f96:	f04f 0b00 	mov.w	fp, #0
    1f9a:	2d20      	cmp	r5, #32
    1f9c:	d044      	beq.n	2028 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28>
    1f9e:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1fa2:	2600      	movs	r6, #0
    1fa4:	2800      	cmp	r0, #0
    1fa6:	bf08      	it	eq
    1fa8:	2602      	moveq	r6, #2
    1faa:	f001 fc3f 	bl	382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1fae:	4b47      	ldr	r3, [pc, #284]	; (20cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xcc>)
    1fb0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1fb8:	688a      	ldr	r2, [r1, #8]
    1fba:	68c9      	ldr	r1, [r1, #12]
    1fbc:	1a12      	subs	r2, r2, r0
    1fbe:	1a09      	subs	r1, r1, r0
    1fc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1fc4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1fc8:	4296      	cmp	r6, r2
    1fca:	bf99      	ittee	ls
    1fcc:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1fd0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1fd4:	4a3e      	ldrhi	r2, [pc, #248]	; (20d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd0>)
    1fd6:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1fda:	d923      	bls.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    1fdc:	4622      	mov	r2, r4
    1fde:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1fe2:	784c      	ldrb	r4, [r1, #1]
    1fe4:	2c20      	cmp	r4, #32
    1fe6:	d015      	beq.n	2014 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14>
    1fe8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1fec:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1ff0:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1ff4:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1ff8:	1a09      	subs	r1, r1, r0
    1ffa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1ffe:	ebac 0c00 	sub.w	ip, ip, r0
    2002:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2006:	428e      	cmp	r6, r1
    2008:	bf9c      	itt	ls
    200a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    200e:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    2012:	d8e3      	bhi.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    2014:	2a20      	cmp	r2, #32
    2016:	d005      	beq.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    2018:	463b      	mov	r3, r7
    201a:	2120      	movs	r1, #32
    201c:	2004      	movs	r0, #4
    201e:	f7ff f859 	bl	10d4 <MPSL_IRQ_RADIO_Handler+0x40>
    2022:	4604      	mov	r4, r0
    2024:	42ac      	cmp	r4, r5
    2026:	d10f      	bne.n	2048 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48>
    2028:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    202c:	2820      	cmp	r0, #32
    202e:	d00f      	beq.n	2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2030:	9900      	ldr	r1, [sp, #0]
    2032:	f8da 0008 	ldr.w	r0, [sl, #8]
    2036:	1c89      	adds	r1, r1, #2
    2038:	1a08      	subs	r0, r1, r0
    203a:	0200      	lsls	r0, r0, #8
    203c:	17c1      	asrs	r1, r0, #31
    203e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2042:	1200      	asrs	r0, r0, #8
    2044:	2800      	cmp	r0, #0
    2046:	dd03      	ble.n	2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2048:	b003      	add	sp, #12
    204a:	2000      	movs	r0, #0
    204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2050:	2d20      	cmp	r5, #32
    2052:	d016      	beq.n	2082 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82>
    2054:	462a      	mov	r2, r5
    2056:	4641      	mov	r1, r8
    2058:	9800      	ldr	r0, [sp, #0]
    205a:	f7ff fb1f 	bl	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
    205e:	2800      	cmp	r0, #0
    2060:	bf1f      	itttt	ne
    2062:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    2066:	2002      	movne	r0, #2
    2068:	b003      	addne	sp, #12
    206a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    206e:	463b      	mov	r3, r7
    2070:	462a      	mov	r2, r5
    2072:	2120      	movs	r1, #32
    2074:	2004      	movs	r0, #4
    2076:	f7ff f82d 	bl	10d4 <MPSL_IRQ_RADIO_Handler+0x40>
    207a:	b003      	add	sp, #12
    207c:	2000      	movs	r0, #0
    207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2082:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    2086:	b118      	cbz	r0, 2090 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x90>
    2088:	f002 f94a 	bl	4320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    208c:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    2090:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    2094:	b120      	cbz	r0, 20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
    2096:	2005      	movs	r0, #5
    2098:	f001 fe2a 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    209c:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    20a0:	2004      	movs	r0, #4
    20a2:	f001 fe25 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    20a6:	f001 fe93 	bl	3dd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    20aa:	2020      	movs	r0, #32
    20ac:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    20b0:	4808      	ldr	r0, [pc, #32]	; (20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>)
    20b2:	6880      	ldr	r0, [r0, #8]
    20b4:	f8c0 b000 	str.w	fp, [r0]
    20b8:	4807      	ldr	r0, [pc, #28]	; (20d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd8>)
    20ba:	f8c0 b000 	str.w	fp, [r0]
    20be:	b003      	add	sp, #12
    20c0:	2001      	movs	r0, #1
    20c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20c6:	0000      	.short	0x0000
    20c8:	20001294 	.word	0x20001294
    20cc:	20000e94 	.word	0x20000e94
    20d0:	20001214 	.word	0x20001214
    20d4:	2000003c 	.word	0x2000003c
    20d8:	40000508 	.word	0x40000508

000020dc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    20dc:	4906      	ldr	r1, [pc, #24]	; (20f8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    20de:	b510      	push	{r4, lr}
    20e0:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    20e4:	2a20      	cmp	r2, #32
    20e6:	bf1c      	itt	ne
    20e8:	7788      	strbne	r0, [r1, #30]
    20ea:	bd10      	popne	{r4, pc}
    20ec:	f240 317a 	movw	r1, #890	; 0x37a
    20f0:	2070      	movs	r0, #112	; 0x70
    20f2:	f002 fab9 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20f6:	0000      	.short	0x0000
    20f8:	20001294 	.word	0x20001294

000020fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    20fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2100:	4e69      	ldr	r6, [pc, #420]	; (22a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2102:	4607      	mov	r7, r0
    2104:	b08d      	sub	sp, #52	; 0x34
    2106:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    210a:	4688      	mov	r8, r1
    210c:	2820      	cmp	r0, #32
    210e:	d055      	beq.n	21bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2110:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2114:	f106 0408 	add.w	r4, r6, #8
    2118:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    211c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2120:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2124:	2020      	movs	r0, #32
    2126:	f88d 0020 	strb.w	r0, [sp, #32]
    212a:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    212e:	aa0a      	add	r2, sp, #40	; 0x28
    2130:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2134:	4430      	add	r0, r6
    2136:	a909      	add	r1, sp, #36	; 0x24
    2138:	f890 5020 	ldrb.w	r5, [r0, #32]
    213c:	68f0      	ldr	r0, [r6, #12]
    213e:	9002      	str	r0, [sp, #8]
    2140:	6830      	ldr	r0, [r6, #0]
    2142:	4438      	add	r0, r7
    2144:	f001 fa08 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2148:	f8da 000c 	ldr.w	r0, [sl, #12]
    214c:	9909      	ldr	r1, [sp, #36]	; 0x24
    214e:	2f65      	cmp	r7, #101	; 0x65
    2150:	4408      	add	r0, r1
    2152:	d338      	bcc.n	21c6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2154:	4a55      	ldr	r2, [pc, #340]	; (22ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2156:	2100      	movs	r1, #0
    2158:	1bd2      	subs	r2, r2, r7
    215a:	eb71 0201 	sbcs.w	r2, r1, r1
    215e:	d332      	bcc.n	21c6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2160:	6822      	ldr	r2, [r4, #0]
    2162:	1a82      	subs	r2, r0, r2
    2164:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2168:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    216c:	d82b      	bhi.n	21c6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    216e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2172:	6060      	str	r0, [r4, #4]
    2174:	4630      	mov	r0, r6
    2176:	f884 8010 	strb.w	r8, [r4, #16]
    217a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    217e:	f10d 0a20 	add.w	sl, sp, #32
    2182:	2d20      	cmp	r5, #32
    2184:	bf1c      	itt	ne
    2186:	494a      	ldrne	r1, [pc, #296]	; (22b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2188:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    218c:	d050      	beq.n	2230 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    218e:	bf00      	nop
    2190:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2194:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2198:	6861      	ldr	r1, [r4, #4]
    219a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    219e:	f108 0008 	add.w	r0, r8, #8
    21a2:	1a71      	subs	r1, r6, r1
    21a4:	0209      	lsls	r1, r1, #8
    21a6:	17ca      	asrs	r2, r1, #31
    21a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    21ac:	1209      	asrs	r1, r1, #8
    21ae:	d42d      	bmi.n	220c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    21b0:	89c0      	ldrh	r0, [r0, #14]
    21b2:	2800      	cmp	r0, #0
    21b4:	d03c      	beq.n	2230 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    21b6:	89e0      	ldrh	r0, [r4, #14]
    21b8:	b148      	cbz	r0, 21ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    21ba:	e039      	b.n	2230 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    21bc:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    21c0:	2070      	movs	r0, #112	; 0x70
    21c2:	f002 fa51 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21c6:	b00d      	add	sp, #52	; 0x34
    21c8:	2001      	movs	r0, #1
    21ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ce:	6820      	ldr	r0, [r4, #0]
    21d0:	900c      	str	r0, [sp, #48]	; 0x30
    21d2:	f002 f89f 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    21d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    21da:	bf08      	it	eq
    21dc:	200d      	moveq	r0, #13
    21de:	d00b      	beq.n	21f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    21e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    21e4:	3856      	subs	r0, #86	; 0x56
    21e6:	bf08      	it	eq
    21e8:	201c      	moveq	r0, #28
    21ea:	d005      	beq.n	21f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    21ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    21f0:	389f      	subs	r0, #159	; 0x9f
    21f2:	bf14      	ite	ne
    21f4:	2000      	movne	r0, #0
    21f6:	2032      	moveq	r0, #50	; 0x32
    21f8:	1c41      	adds	r1, r0, #1
    21fa:	980c      	ldr	r0, [sp, #48]	; 0x30
    21fc:	1a30      	subs	r0, r6, r0
    21fe:	0200      	lsls	r0, r0, #8
    2200:	17c2      	asrs	r2, r0, #31
    2202:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2206:	1200      	asrs	r0, r0, #8
    2208:	4288      	cmp	r0, r1
    220a:	da11      	bge.n	2230 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    220c:	f88a 5000 	strb.w	r5, [sl]
    2210:	f898 1018 	ldrb.w	r1, [r8, #24]
    2214:	7c20      	ldrb	r0, [r4, #16]
    2216:	4281      	cmp	r1, r0
    2218:	d805      	bhi.n	2226 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    221a:	9802      	ldr	r0, [sp, #8]
    221c:	6060      	str	r0, [r4, #4]
    221e:	b00d      	add	sp, #52	; 0x34
    2220:	2002      	movs	r0, #2
    2222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2226:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    222a:	7845      	ldrb	r5, [r0, #1]
    222c:	2d20      	cmp	r5, #32
    222e:	d1af      	bne.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2230:	2005      	movs	r0, #5
    2232:	f001 fd5d 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2236:	4c1c      	ldr	r4, [pc, #112]	; (22a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2238:	f04f 30ff 	mov.w	r0, #4294967295
    223c:	6060      	str	r0, [r4, #4]
    223e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2242:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2246:	2120      	movs	r1, #32
    2248:	2a20      	cmp	r2, #32
    224a:	d003      	beq.n	2254 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    224c:	2005      	movs	r0, #5
    224e:	f7fe ff41 	bl	10d4 <MPSL_IRQ_RADIO_Handler+0x40>
    2252:	e004      	b.n	225e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2254:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2258:	4420      	add	r0, r4
    225a:	f890 0020 	ldrb.w	r0, [r0, #32]
    225e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2262:	4913      	ldr	r1, [pc, #76]	; (22b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2264:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2268:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    226c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2270:	7048      	strb	r0, [r1, #1]
    2272:	6820      	ldr	r0, [r4, #0]
    2274:	4438      	add	r0, r7
    2276:	6020      	str	r0, [r4, #0]
    2278:	20ff      	movs	r0, #255	; 0xff
    227a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    227e:	7e60      	ldrb	r0, [r4, #25]
    2280:	2801      	cmp	r0, #1
    2282:	d105      	bne.n	2290 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2284:	68e0      	ldr	r0, [r4, #12]
    2286:	1e40      	subs	r0, r0, #1
    2288:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    228c:	f001 fb94 	bl	39b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2290:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2294:	2820      	cmp	r0, #32
    2296:	d003      	beq.n	22a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2298:	4806      	ldr	r0, [pc, #24]	; (22b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    229a:	7840      	ldrb	r0, [r0, #1]
    229c:	f002 fab8 	bl	4810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    22a0:	b00d      	add	sp, #52	; 0x34
    22a2:	2000      	movs	r0, #0
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	20001294 	.word	0x20001294
    22ac:	0f424000 	.word	0x0f424000
    22b0:	20001214 	.word	0x20001214
    22b4:	2000003c 	.word	0x2000003c

000022b8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    22b8:	4806      	ldr	r0, [pc, #24]	; (22d4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    22ba:	b510      	push	{r4, lr}
    22bc:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    22c0:	2920      	cmp	r1, #32
    22c2:	bf1c      	itt	ne
    22c4:	7e00      	ldrbne	r0, [r0, #24]
    22c6:	bd10      	popne	{r4, pc}
    22c8:	f640 312a 	movw	r1, #2858	; 0xb2a
    22cc:	2070      	movs	r0, #112	; 0x70
    22ce:	f002 f9cb 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22d2:	0000      	.short	0x0000
    22d4:	20001294 	.word	0x20001294

000022d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    22d8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    22dc:	b570      	push	{r4, r5, r6, lr}
    22de:	4807      	ldr	r0, [pc, #28]	; (22fc <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    22e0:	4a07      	ldr	r2, [pc, #28]	; (2300 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    22e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    22e6:	6901      	ldr	r1, [r0, #16]
    22e8:	3008      	adds	r0, #8
    22ea:	fba1 4502 	umull	r4, r5, r1, r2
    22ee:	f7ff fdcf 	bl	1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    22f2:	1900      	adds	r0, r0, r4
    22f4:	f145 0100 	adc.w	r1, r5, #0
    22f8:	bd70      	pop	{r4, r5, r6, pc}
    22fa:	0000      	.short	0x0000
    22fc:	20000e94 	.word	0x20000e94
    2300:	1e848000 	.word	0x1e848000

00002304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2306:	4d6b      	ldr	r5, [pc, #428]	; (24b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2308:	4a6b      	ldr	r2, [pc, #428]	; (24b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    230a:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    230e:	2601      	movs	r6, #1
    2310:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2314:	2808      	cmp	r0, #8
    2316:	d27c      	bcs.n	2412 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2318:	e8df f000 	tbb	[pc, r0]
    231c:	a9977004 	.word	0xa9977004
    2320:	b3ae41c7 	.word	0xb3ae41c7
    2324:	b919      	cbnz	r1, 232e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2326:	f002 f817 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    232a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    232e:	8ae0      	ldrh	r0, [r4, #22]
    2330:	b110      	cbz	r0, 2338 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2332:	f002 f921 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2336:	b180      	cbz	r0, 235a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2338:	f7ff fcf8 	bl	1d2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a4>
    233c:	20ff      	movs	r0, #255	; 0xff
    233e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2342:	6861      	ldr	r1, [r4, #4]
    2344:	f1b1 3fff 	cmp.w	r1, #4294967295
    2348:	d003      	beq.n	2352 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    234a:	2005      	movs	r0, #5
    234c:	f001 fc1a 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2350:	b140      	cbz	r0, 2364 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2352:	7e60      	ldrb	r0, [r4, #25]
    2354:	2801      	cmp	r0, #1
    2356:	d110      	bne.n	237a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    2358:	e009      	b.n	236e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    235a:	f640 0134 	movw	r1, #2100	; 0x834
    235e:	2070      	movs	r0, #112	; 0x70
    2360:	f002 f982 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2364:	f640 0139 	movw	r1, #2105	; 0x839
    2368:	2070      	movs	r0, #112	; 0x70
    236a:	f002 f97d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    236e:	68e0      	ldr	r0, [r4, #12]
    2370:	1e40      	subs	r0, r0, #1
    2372:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2376:	f001 fb1f 	bl	39b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    237a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    237e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2382:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2386:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    238a:	6840      	ldr	r0, [r0, #4]
    238c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2390:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2394:	b001      	add	sp, #4
    2396:	2101      	movs	r1, #1
    2398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    239c:	4710      	bx	r2
    239e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    23a2:	b140      	cbz	r0, 23b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    23a4:	b919      	cbnz	r1, 23ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    23a6:	f001 ffd7 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    23aa:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    23ae:	2000      	movs	r0, #0
    23b0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    23b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23b6:	f7ff fcb9 	bl	1d2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a4>
    23ba:	f04f 30ff 	mov.w	r0, #4294967295
    23be:	6060      	str	r0, [r4, #4]
    23c0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    23c4:	f88d 0000 	strb.w	r0, [sp]
    23c8:	f89d 0000 	ldrb.w	r0, [sp]
    23cc:	b188      	cbz	r0, 23f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    23ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23d2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    23d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23da:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    23de:	6840      	ldr	r0, [r0, #4]
    23e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    23e4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    23e8:	b001      	add	sp, #4
    23ea:	2106      	movs	r1, #6
    23ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    23f0:	4710      	bx	r2
    23f2:	f44f 6105 	mov.w	r1, #2128	; 0x850
    23f6:	2070      	movs	r0, #112	; 0x70
    23f8:	f002 f936 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fc:	f7ff fc96 	bl	1d2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a4>
    2400:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2404:	f002 f8b8 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2408:	b120      	cbz	r0, 2414 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    240a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    240e:	b130      	cbz	r0, 241e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2410:	e009      	b.n	2426 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2412:	e04a      	b.n	24aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2414:	f640 015e 	movw	r1, #2142	; 0x85e
    2418:	2070      	movs	r0, #112	; 0x70
    241a:	f002 f925 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    241e:	f001 ff9b 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2422:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2426:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    242a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    242e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2432:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2436:	6840      	ldr	r0, [r0, #4]
    2438:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    243c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2440:	b001      	add	sp, #4
    2442:	2100      	movs	r1, #0
    2444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2448:	4710      	bx	r2
    244a:	f001 fd77 	bl	3f3c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    244e:	8ae0      	ldrh	r0, [r4, #22]
    2450:	b110      	cbz	r0, 2458 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2452:	f002 f891 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2456:	b128      	cbz	r0, 2464 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    2458:	f001 fd84 	bl	3f64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    245c:	2800      	cmp	r0, #0
    245e:	bf18      	it	ne
    2460:	7766      	strbne	r6, [r4, #29]
    2462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2464:	f640 0168 	movw	r1, #2152	; 0x868
    2468:	2070      	movs	r0, #112	; 0x70
    246a:	f002 f8fd 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    246e:	4813      	ldr	r0, [pc, #76]	; (24bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2470:	6006      	str	r6, [r0, #0]
    2472:	6890      	ldr	r0, [r2, #8]
    2474:	6006      	str	r6, [r0, #0]
    2476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2478:	7810      	ldrb	r0, [r2, #0]
    247a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    247e:	f002 b9c7 	b.w	4810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2482:	f7ff fc53 	bl	1d2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a4>
    2486:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    248a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    248e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2492:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2496:	6840      	ldr	r0, [r0, #4]
    2498:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    249c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    24a0:	b001      	add	sp, #4
    24a2:	2105      	movs	r1, #5
    24a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    24a8:	4710      	bx	r2
    24aa:	f640 017b 	movw	r1, #2171	; 0x87b
    24ae:	2070      	movs	r0, #112	; 0x70
    24b0:	f002 f8da 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24b4:	20000e94 	.word	0x20000e94
    24b8:	2000003c 	.word	0x2000003c
    24bc:	40000508 	.word	0x40000508

000024c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    24c0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24c4:	4682      	mov	sl, r0
    24c6:	48f0      	ldr	r0, [pc, #960]	; (2888 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    24c8:	b095      	sub	sp, #84	; 0x54
    24ca:	6800      	ldr	r0, [r0, #0]
    24cc:	4def      	ldr	r5, [pc, #956]	; (288c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    24ce:	05c0      	lsls	r0, r0, #23
    24d0:	0dc0      	lsrs	r0, r0, #23
    24d2:	d00e      	beq.n	24f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    24d4:	3810      	subs	r0, #16
    24d6:	b240      	sxtb	r0, r0
    24d8:	2800      	cmp	r0, #0
    24da:	bfb8      	it	lt
    24dc:	f000 000f 	andlt.w	r0, r0, #15
    24e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    24e4:	bfac      	ite	ge
    24e6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    24ea:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    24ee:	0940      	lsrs	r0, r0, #5
    24f0:	d00d      	beq.n	250e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    24f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    24f4:	f04f 0b00 	mov.w	fp, #0
    24f8:	7800      	ldrb	r0, [r0, #0]
    24fa:	2800      	cmp	r0, #0
    24fc:	bf18      	it	ne
    24fe:	2801      	cmpne	r0, #1
    2500:	d018      	beq.n	2534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2502:	f240 7104 	movw	r1, #1796	; 0x704
    2506:	f04f 0070 	mov.w	r0, #112	; 0x70
    250a:	f002 f8ad 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    250e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2512:	f04f 0b01 	mov.w	fp, #1
    2516:	2820      	cmp	r0, #32
    2518:	d007      	beq.n	252a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    251a:	9816      	ldr	r0, [sp, #88]	; 0x58
    251c:	7800      	ldrb	r0, [r0, #0]
    251e:	b148      	cbz	r0, 2534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2520:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2524:	2070      	movs	r0, #112	; 0x70
    2526:	f002 f89f 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252a:	f240 61fd 	movw	r1, #1789	; 0x6fd
    252e:	2070      	movs	r0, #112	; 0x70
    2530:	f002 f89a 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2534:	4cd6      	ldr	r4, [pc, #856]	; (2890 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2536:	b124      	cbz	r4, 2542 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2538:	2100      	movs	r1, #0
    253a:	f240 7007 	movw	r0, #1799	; 0x707
    253e:	f3af 8000 	nop.w
    2542:	2000      	movs	r0, #0
    2544:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    2548:	49d2      	ldr	r1, [pc, #840]	; (2894 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    254a:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    254e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2552:	f04f 0901 	mov.w	r9, #1
    2556:	9000      	str	r0, [sp, #0]
    2558:	b124      	cbz	r4, 2564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    255a:	2100      	movs	r1, #0
    255c:	f240 7012 	movw	r0, #1810	; 0x712
    2560:	f3af 8000 	nop.w
    2564:	f1b9 0f00 	cmp.w	r9, #0
    2568:	d00a      	beq.n	2580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    256a:	bf00      	nop
    256c:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2570:	f04f 0800 	mov.w	r8, #0
    2574:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2578:	f1bb 0f00 	cmp.w	fp, #0
    257c:	d007      	beq.n	258e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    257e:	e038      	b.n	25f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2580:	48c5      	ldr	r0, [pc, #788]	; (2898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    2582:	2800      	cmp	r0, #0
    2584:	bf18      	it	ne
    2586:	f3af 8000 	nopne.w
    258a:	b662      	cpsie	i
    258c:	e7ee      	b.n	256c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    258e:	4637      	mov	r7, r6
    2590:	2001      	movs	r0, #1
    2592:	ea20 0607 	bic.w	r6, r0, r7
    2596:	48c1      	ldr	r0, [pc, #772]	; (289c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2598:	2240      	movs	r2, #64	; 0x40
    259a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    259e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    25a2:	f00a fd93 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25a6:	b124      	cbz	r4, 25b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    25a8:	2100      	movs	r1, #0
    25aa:	f240 502f 	movw	r0, #1327	; 0x52f
    25ae:	f3af 8000 	nop.w
    25b2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    25b6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    25ba:	4429      	add	r1, r5
    25bc:	4428      	add	r0, r5
    25be:	8c0a      	ldrh	r2, [r1, #32]
    25c0:	8402      	strh	r2, [r0, #32]
    25c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    25c6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    25ca:	b124      	cbz	r4, 25d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    25cc:	2100      	movs	r1, #0
    25ce:	f240 5033 	movw	r0, #1331	; 0x533
    25d2:	f3af 8000 	nop.w
    25d6:	b124      	cbz	r4, 25e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    25d8:	2100      	movs	r1, #0
    25da:	f240 701c 	movw	r0, #1820	; 0x71c
    25de:	f3af 8000 	nop.w
    25e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    25e6:	f88d 0008 	strb.w	r0, [sp, #8]
    25ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25ee:	2800      	cmp	r0, #0
    25f0:	d1b2      	bne.n	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    25f2:	b124      	cbz	r4, 25fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    25f4:	2100      	movs	r1, #0
    25f6:	f240 7026 	movw	r0, #1830	; 0x726
    25fa:	f3af 8000 	nop.w
    25fe:	a802      	add	r0, sp, #8
    2600:	f001 f91a 	bl	3838 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2608:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    260c:	4633      	mov	r3, r6
    260e:	aa09      	add	r2, sp, #36	; 0x24
    2610:	a80e      	add	r0, sp, #56	; 0x38
    2612:	9916      	ldr	r1, [sp, #88]	; 0x58
    2614:	f7ff faae 	bl	1b74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ec>
    2618:	b124      	cbz	r4, 2624 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    261a:	2100      	movs	r1, #0
    261c:	f240 702d 	movw	r0, #1837	; 0x72d
    2620:	f3af 8000 	nop.w
    2624:	4a9d      	ldr	r2, [pc, #628]	; (289c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2626:	990e      	ldr	r1, [sp, #56]	; 0x38
    2628:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    262c:	a809      	add	r0, sp, #36	; 0x24
    262e:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2632:	2a01      	cmp	r2, #1
    2634:	bf18      	it	ne
    2636:	2a02      	cmpne	r2, #2
    2638:	d138      	bne.n	26ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    263a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    263c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    263e:	eba2 0201 	sub.w	r2, r2, r1
    2642:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2646:	eba3 0101 	sub.w	r1, r3, r1
    264a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    264e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2652:	2a02      	cmp	r2, #2
    2654:	d364      	bcc.n	2720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2656:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    265a:	bf98      	it	ls
    265c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2660:	d85e      	bhi.n	2720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2662:	f04f 0801 	mov.w	r8, #1
    2666:	ab14      	add	r3, sp, #80	; 0x50
    2668:	aa13      	add	r2, sp, #76	; 0x4c
    266a:	4631      	mov	r1, r6
    266c:	f7fe ff20 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
    2670:	2800      	cmp	r0, #0
    2672:	d05d      	beq.n	2730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2674:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    2678:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    267c:	4633      	mov	r3, r6
    267e:	428a      	cmp	r2, r1
    2680:	d05a      	beq.n	2738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    2682:	2005      	movs	r0, #5
    2684:	f7fe fd26 	bl	10d4 <MPSL_IRQ_RADIO_Handler+0x40>
    2688:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    268c:	7048      	strb	r0, [r1, #1]
    268e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2692:	2820      	cmp	r0, #32
    2694:	bf1c      	itt	ne
    2696:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    269a:	f880 a001 	strbne.w	sl, [r0, #1]
    269e:	d057      	beq.n	2750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    26a0:	4632      	mov	r2, r6
    26a2:	4651      	mov	r1, sl
    26a4:	f05f 0003 	movs.w	r0, #3
    26a8:	f7ff fc2c 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    26ac:	b124      	cbz	r4, 26b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    26ae:	2100      	movs	r1, #0
    26b0:	f240 7032 	movw	r0, #1842	; 0x732
    26b4:	f3af 8000 	nop.w
    26b8:	4879      	ldr	r0, [pc, #484]	; (28a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    26ba:	2800      	cmp	r0, #0
    26bc:	bf18      	it	ne
    26be:	f3af 8000 	nopne.w
    26c2:	f3ef 8910 	mrs	r9, PRIMASK
    26c6:	b672      	cpsid	i
    26c8:	b124      	cbz	r4, 26d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    26ca:	2100      	movs	r1, #0
    26cc:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    26d0:	f3af 8000 	nop.w
    26d4:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    26d8:	f88d 0008 	strb.w	r0, [sp, #8]
    26dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    26e0:	2800      	cmp	r0, #0
    26e2:	f47f af39 	bne.w	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    26e6:	b124      	cbz	r4, 26f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    26e8:	2100      	movs	r1, #0
    26ea:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    26ee:	f3af 8000 	nop.w
    26f2:	af09      	add	r7, sp, #36	; 0x24
    26f4:	9800      	ldr	r0, [sp, #0]
    26f6:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    26fa:	f100 0708 	add.w	r7, r0, #8
    26fe:	f1b8 0f00 	cmp.w	r8, #0
    2702:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    2706:	990d      	ldr	r1, [sp, #52]	; 0x34
    2708:	6181      	str	r1, [r0, #24]
    270a:	d053      	beq.n	27b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    270c:	b124      	cbz	r4, 2718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    270e:	2100      	movs	r1, #0
    2710:	f240 704d 	movw	r0, #1869	; 0x74d
    2714:	f3af 8000 	nop.w
    2718:	f1bb 0f00 	cmp.w	fp, #0
    271c:	d13a      	bne.n	2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    271e:	e01f      	b.n	2760 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    2720:	4632      	mov	r2, r6
    2722:	4651      	mov	r1, sl
    2724:	2004      	movs	r0, #4
    2726:	f7ff fbed 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    272a:	f04f 0801 	mov.w	r8, #1
    272e:	e7bd      	b.n	26ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2730:	4632      	mov	r2, r6
    2732:	4651      	mov	r1, sl
    2734:	2004      	movs	r0, #4
    2736:	e7b7      	b.n	26a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    2738:	2920      	cmp	r1, #32
    273a:	bf19      	ittee	ne
    273c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2740:	7840      	ldrbne	r0, [r0, #1]
    2742:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    2746:	4428      	addeq	r0, r5
    2748:	bf08      	it	eq
    274a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    274e:	e79b      	b.n	2688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2750:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2754:	4429      	add	r1, r5
    2756:	f881 a020 	strb.w	sl, [r1, #32]
    275a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    275e:	e79f      	b.n	26a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    2760:	9811      	ldr	r0, [sp, #68]	; 0x44
    2762:	f010 0fff 	tst.w	r0, #255	; 0xff
    2766:	d015      	beq.n	2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2768:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    276c:	2820      	cmp	r0, #32
    276e:	d111      	bne.n	2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2770:	b124      	cbz	r4, 277c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    2772:	2100      	movs	r1, #0
    2774:	f240 7052 	movw	r0, #1874	; 0x752
    2778:	f3af 8000 	nop.w
    277c:	4632      	mov	r2, r6
    277e:	2102      	movs	r1, #2
    2780:	980e      	ldr	r0, [sp, #56]	; 0x38
    2782:	f7ff fbf1 	bl	1f68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2786:	9010      	str	r0, [sp, #64]	; 0x40
    2788:	b920      	cbnz	r0, 2794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    278a:	9816      	ldr	r0, [sp, #88]	; 0x58
    278c:	7800      	ldrb	r0, [r0, #0]
    278e:	b1f0      	cbz	r0, 27ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    2790:	2801      	cmp	r0, #1
    2792:	d02b      	beq.n	27ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    2794:	b124      	cbz	r4, 27a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    2796:	2100      	movs	r1, #0
    2798:	f240 706f 	movw	r0, #1903	; 0x76f
    279c:	f3af 8000 	nop.w
    27a0:	20ff      	movs	r0, #255	; 0xff
    27a2:	f1bb 0f00 	cmp.w	fp, #0
    27a6:	bf18      	it	ne
    27a8:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    27ac:	d027      	beq.n	27fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    27ae:	bf00      	nop
    27b0:	f04f 0801 	mov.w	r8, #1
    27b4:	b124      	cbz	r4, 27c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    27b6:	2100      	movs	r1, #0
    27b8:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    27bc:	f3af 8000 	nop.w
    27c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    27c2:	4e38      	ldr	r6, [pc, #224]	; (28a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    27c4:	2802      	cmp	r0, #2
    27c6:	d023      	beq.n	2810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    27c8:	2801      	cmp	r0, #1
    27ca:	d029      	beq.n	2820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    27cc:	e02d      	b.n	282a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    27ce:	b124      	cbz	r4, 27da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    27d0:	2100      	movs	r1, #0
    27d2:	f240 705a 	movw	r0, #1882	; 0x75a
    27d6:	f3af 8000 	nop.w
    27da:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    27de:	4651      	mov	r1, sl
    27e0:	2004      	movs	r0, #4
    27e2:	f7ff fb8f 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    27e6:	f04f 0801 	mov.w	r8, #1
    27ea:	e7e3      	b.n	27b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    27ec:	2c00      	cmp	r4, #0
    27ee:	f43f aeb3 	beq.w	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    27f2:	2100      	movs	r1, #0
    27f4:	f240 7065 	movw	r0, #1893	; 0x765
    27f8:	f3af 8000 	nop.w
    27fc:	e6ac      	b.n	2558 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    27fe:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2802:	2101      	movs	r1, #1
    2804:	4391      	bics	r1, r2
    2806:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    280a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    280e:	e7cf      	b.n	27b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    2810:	68a8      	ldr	r0, [r5, #8]
    2812:	990e      	ldr	r1, [sp, #56]	; 0x38
    2814:	1a40      	subs	r0, r0, r1
    2816:	f00a faff 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    281a:	6871      	ldr	r1, [r6, #4]
    281c:	b921      	cbnz	r1, 2828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    281e:	e004      	b.n	282a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2820:	6871      	ldr	r1, [r6, #4]
    2822:	f04f 30ff 	mov.w	r0, #4294967295
    2826:	b101      	cbz	r1, 282a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2828:	4788      	blx	r1
    282a:	f1b9 0f00 	cmp.w	r9, #0
    282e:	d024      	beq.n	287a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    2830:	b124      	cbz	r4, 283c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    2832:	2100      	movs	r1, #0
    2834:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    2838:	f3af 8000 	nop.w
    283c:	f1b8 0f00 	cmp.w	r8, #0
    2840:	d011      	beq.n	2866 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    2842:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    284a:	4428      	add	r0, r5
    284c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2850:	2820      	cmp	r0, #32
    2852:	d008      	beq.n	2866 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    2854:	b124      	cbz	r4, 2860 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    2856:	2100      	movs	r1, #0
    2858:	f240 7097 	movw	r0, #1943	; 0x797
    285c:	f3af 8000 	nop.w
    2860:	7870      	ldrb	r0, [r6, #1]
    2862:	f001 ffd5 	bl	4810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2866:	b124      	cbz	r4, 2872 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    2868:	2100      	movs	r1, #0
    286a:	f240 709c 	movw	r0, #1948	; 0x79c
    286e:	f3af 8000 	nop.w
    2872:	b017      	add	sp, #92	; 0x5c
    2874:	4640      	mov	r0, r8
    2876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    287a:	4807      	ldr	r0, [pc, #28]	; (2898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    287c:	2800      	cmp	r0, #0
    287e:	bf18      	it	ne
    2880:	f3af 8000 	nopne.w
    2884:	b662      	cpsie	i
    2886:	e7d3      	b.n	2830 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    2888:	e000ed04 	.word	0xe000ed04
    288c:	20001294 	.word	0x20001294
    2890:	00000000 	.word	0x00000000
    2894:	20000e94 	.word	0x20000e94
    2898:	00000000 	.word	0x00000000
    289c:	20001214 	.word	0x20001214
    28a0:	00000000 	.word	0x00000000
    28a4:	2000003c 	.word	0x2000003c

000028a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    28a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ac:	48c9      	ldr	r0, [pc, #804]	; (2bd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    28ae:	b08a      	sub	sp, #40	; 0x28
    28b0:	6800      	ldr	r0, [r0, #0]
    28b2:	05c0      	lsls	r0, r0, #23
    28b4:	0dc0      	lsrs	r0, r0, #23
    28b6:	d011      	beq.n	28dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    28b8:	3810      	subs	r0, #16
    28ba:	b240      	sxtb	r0, r0
    28bc:	2800      	cmp	r0, #0
    28be:	bfb8      	it	lt
    28c0:	f000 000f 	andlt.w	r0, r0, #15
    28c4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    28c8:	bfac      	ite	ge
    28ca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    28ce:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    28d2:	0940      	lsrs	r0, r0, #5
    28d4:	bf08      	it	eq
    28d6:	f04f 0b01 	moveq.w	fp, #1
    28da:	d001      	beq.n	28e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    28dc:	f04f 0b00 	mov.w	fp, #0
    28e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    28e2:	7800      	ldrb	r0, [r0, #0]
    28e4:	2800      	cmp	r0, #0
    28e6:	bf1e      	ittt	ne
    28e8:	2000      	movne	r0, #0
    28ea:	b00b      	addne	sp, #44	; 0x2c
    28ec:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28f0:	f04f 0a00 	mov.w	sl, #0
    28f4:	4db8      	ldr	r5, [pc, #736]	; (2bd8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    28f6:	4cb9      	ldr	r4, [pc, #740]	; (2bdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    28f8:	46d1      	mov	r9, sl
    28fa:	b125      	cbz	r5, 2906 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    28fc:	2100      	movs	r1, #0
    28fe:	f240 50b9 	movw	r0, #1465	; 0x5b9
    2902:	f3af 8000 	nop.w
    2906:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    290a:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    290e:	f04f 0800 	mov.w	r8, #0
    2912:	b125      	cbz	r5, 291e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2914:	2100      	movs	r1, #0
    2916:	f240 50be 	movw	r0, #1470	; 0x5be
    291a:	f3af 8000 	nop.w
    291e:	f1bb 0f00 	cmp.w	fp, #0
    2922:	d123      	bne.n	296c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2924:	4637      	mov	r7, r6
    2926:	2001      	movs	r0, #1
    2928:	ea20 0607 	bic.w	r6, r0, r7
    292c:	48ac      	ldr	r0, [pc, #688]	; (2be0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    292e:	2240      	movs	r2, #64	; 0x40
    2930:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2934:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2938:	f00a fbc8 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    293c:	b125      	cbz	r5, 2948 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    293e:	2100      	movs	r1, #0
    2940:	f240 502f 	movw	r0, #1327	; 0x52f
    2944:	f3af 8000 	nop.w
    2948:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    294c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2950:	4421      	add	r1, r4
    2952:	4420      	add	r0, r4
    2954:	8c0a      	ldrh	r2, [r1, #32]
    2956:	8402      	strh	r2, [r0, #32]
    2958:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    295c:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2960:	b125      	cbz	r5, 296c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2962:	2100      	movs	r1, #0
    2964:	f240 5033 	movw	r0, #1331	; 0x533
    2968:	f3af 8000 	nop.w
    296c:	b125      	cbz	r5, 2978 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    296e:	2100      	movs	r1, #0
    2970:	f240 50c6 	movw	r0, #1478	; 0x5c6
    2974:	f3af 8000 	nop.w
    2978:	a808      	add	r0, sp, #32
    297a:	f000 ff5d 	bl	3838 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    297e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2982:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2986:	4633      	mov	r3, r6
    2988:	466a      	mov	r2, sp
    298a:	a806      	add	r0, sp, #24
    298c:	990a      	ldr	r1, [sp, #40]	; 0x28
    298e:	f7ff f8f1 	bl	1b74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ec>
    2992:	b125      	cbz	r5, 299e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    2994:	2100      	movs	r1, #0
    2996:	f240 50cc 	movw	r0, #1484	; 0x5cc
    299a:	f3af 8000 	nop.w
    299e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29a2:	2820      	cmp	r0, #32
    29a4:	d019      	beq.n	29da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    29a6:	68e0      	ldr	r0, [r4, #12]
    29a8:	9900      	ldr	r1, [sp, #0]
    29aa:	1a09      	subs	r1, r1, r0
    29ac:	0209      	lsls	r1, r1, #8
    29ae:	17ca      	asrs	r2, r1, #31
    29b0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    29b4:	1209      	asrs	r1, r1, #8
    29b6:	d510      	bpl.n	29da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    29b8:	e9dd 2100 	ldrd	r2, r1, [sp]
    29bc:	1a89      	subs	r1, r1, r2
    29be:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    29c2:	4408      	add	r0, r1
    29c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29c8:	e9cd 3000 	strd	r3, r0, [sp]
    29cc:	4293      	cmp	r3, r2
    29ce:	d202      	bcs.n	29d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    29d0:	9802      	ldr	r0, [sp, #8]
    29d2:	1c40      	adds	r0, r0, #1
    29d4:	9002      	str	r0, [sp, #8]
    29d6:	f04f 0801 	mov.w	r8, #1
    29da:	b14d      	cbz	r5, 29f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    29dc:	2100      	movs	r1, #0
    29de:	f240 50df 	movw	r0, #1503	; 0x5df
    29e2:	f3af 8000 	nop.w
    29e6:	2100      	movs	r1, #0
    29e8:	f240 50e5 	movw	r0, #1509	; 0x5e5
    29ec:	f3af 8000 	nop.w
    29f0:	9900      	ldr	r1, [sp, #0]
    29f2:	9806      	ldr	r0, [sp, #24]
    29f4:	9a01      	ldr	r2, [sp, #4]
    29f6:	1a09      	subs	r1, r1, r0
    29f8:	1a10      	subs	r0, r2, r0
    29fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a02:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2a06:	bf98      	it	ls
    2a08:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    2a0c:	d803      	bhi.n	2a16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    2a0e:	f1bb 0f00 	cmp.w	fp, #0
    2a12:	d10c      	bne.n	2a2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    2a14:	e003      	b.n	2a1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    2a16:	f1bb 0f00 	cmp.w	fp, #0
    2a1a:	d039      	beq.n	2a90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    2a1c:	e0c0      	b.n	2ba0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2a1e:	4633      	mov	r3, r6
    2a20:	4669      	mov	r1, sp
    2a22:	4870      	ldr	r0, [pc, #448]	; (2be4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2a24:	9a06      	ldr	r2, [sp, #24]
    2a26:	f7fe fb91 	bl	114c <MPSL_IRQ_RADIO_Handler+0xb8>
    2a2a:	ea48 0800 	orr.w	r8, r8, r0
    2a2e:	f1b8 0f00 	cmp.w	r8, #0
    2a32:	d023      	beq.n	2a7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    2a34:	9800      	ldr	r0, [sp, #0]
    2a36:	f00a f9ef 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a3a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2a3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2a42:	4b69      	ldr	r3, [pc, #420]	; (2be8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2a44:	4411      	add	r1, r2
    2a46:	1c49      	adds	r1, r1, #1
    2a48:	1842      	adds	r2, r0, r1
    2a4a:	4298      	cmp	r0, r3
    2a4c:	d856      	bhi.n	2afc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2a4e:	4865      	ldr	r0, [pc, #404]	; (2be4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2a50:	4281      	cmp	r1, r0
    2a52:	dc7c      	bgt.n	2b4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    2a54:	4240      	negs	r0, r0
    2a56:	4281      	cmp	r1, r0
    2a58:	db7a      	blt.n	2b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    2a5a:	1c58      	adds	r0, r3, #1
    2a5c:	4290      	cmp	r0, r2
    2a5e:	bfdc      	itt	le
    2a60:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2a64:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2a68:	dd05      	ble.n	2a76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    2a6a:	2a00      	cmp	r2, #0
    2a6c:	bfbc      	itt	lt
    2a6e:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2a72:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2a76:	980a      	ldr	r0, [sp, #40]	; 0x28
    2a78:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2a7c:	f04f 0a01 	mov.w	sl, #1
    2a80:	2d00      	cmp	r5, #0
    2a82:	d07c      	beq.n	2b7e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    2a84:	2100      	movs	r1, #0
    2a86:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    2a8a:	f3af 8000 	nop.w
    2a8e:	e087      	b.n	2ba0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2a90:	9807      	ldr	r0, [sp, #28]
    2a92:	9002      	str	r0, [sp, #8]
    2a94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2a98:	aa08      	add	r2, sp, #32
    2a9a:	a905      	add	r1, sp, #20
    2a9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    2aa0:	f000 fd5a 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2aa4:	f001 fa68 	bl	3f78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2aa8:	f000 fd3a 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2aac:	4607      	mov	r7, r0
    2aae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2ab2:	2820      	cmp	r0, #32
    2ab4:	d027      	beq.n	2b06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2ab6:	68e0      	ldr	r0, [r4, #12]
    2ab8:	1d40      	adds	r0, r0, #5
    2aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2abe:	bf00      	nop
    2ac0:	e9dd 2100 	ldrd	r2, r1, [sp]
    2ac4:	1a89      	subs	r1, r1, r2
    2ac6:	9000      	str	r0, [sp, #0]
    2ac8:	4408      	add	r0, r1
    2aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ace:	9001      	str	r0, [sp, #4]
    2ad0:	9800      	ldr	r0, [sp, #0]
    2ad2:	4540      	cmp	r0, r8
    2ad4:	d202      	bcs.n	2adc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2ad6:	9802      	ldr	r0, [sp, #8]
    2ad8:	1c40      	adds	r0, r0, #1
    2ada:	9002      	str	r0, [sp, #8]
    2adc:	201f      	movs	r0, #31
    2ade:	f88d 000c 	strb.w	r0, [sp, #12]
    2ae2:	9800      	ldr	r0, [sp, #0]
    2ae4:	f00a f998 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2ae8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2aec:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2af0:	4b3d      	ldr	r3, [pc, #244]	; (2be8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2af2:	4411      	add	r1, r2
    2af4:	1c49      	adds	r1, r1, #1
    2af6:	1842      	adds	r2, r0, r1
    2af8:	4298      	cmp	r0, r3
    2afa:	d92a      	bls.n	2b52 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    2afc:	f240 516f 	movw	r1, #1391	; 0x56f
    2b00:	2070      	movs	r0, #112	; 0x70
    2b02:	f001 fdb1 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b06:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2b0a:	f108 0609 	add.w	r6, r8, #9
    2b0e:	b1b0      	cbz	r0, 2b3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2b10:	f001 fd32 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b14:	b998      	cbnz	r0, 2b3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2b16:	f001 fbfd 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b1a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2b1e:	bf08      	it	eq
    2b20:	200d      	moveq	r0, #13
    2b22:	d00b      	beq.n	2b3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2b24:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2b28:	3856      	subs	r0, #86	; 0x56
    2b2a:	bf08      	it	eq
    2b2c:	201c      	moveq	r0, #28
    2b2e:	d005      	beq.n	2b3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2b30:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b34:	389f      	subs	r0, #159	; 0x9f
    2b36:	bf14      	ite	ne
    2b38:	4648      	movne	r0, r9
    2b3a:	2032      	moveq	r0, #50	; 0x32
    2b3c:	4406      	add	r6, r0
    2b3e:	9805      	ldr	r0, [sp, #20]
    2b40:	4287      	cmp	r7, r0
    2b42:	bf84      	itt	hi
    2b44:	1a38      	subhi	r0, r7, r0
    2b46:	4406      	addhi	r6, r0
    2b48:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2b4c:	e7b8      	b.n	2ac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    2b4e:	e003      	b.n	2b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    2b50:	e00a      	b.n	2b68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    2b52:	4824      	ldr	r0, [pc, #144]	; (2be4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2b54:	4281      	cmp	r1, r0
    2b56:	dd04      	ble.n	2b62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    2b58:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2b5c:	2070      	movs	r0, #112	; 0x70
    2b5e:	f001 fd83 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b62:	4822      	ldr	r0, [pc, #136]	; (2bec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    2b64:	4281      	cmp	r1, r0
    2b66:	da04      	bge.n	2b72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    2b68:	f240 5171 	movw	r1, #1393	; 0x571
    2b6c:	2070      	movs	r0, #112	; 0x70
    2b6e:	f001 fd7b 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b72:	481f      	ldr	r0, [pc, #124]	; (2bf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2b74:	4290      	cmp	r0, r2
    2b76:	bfd8      	it	le
    2b78:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2b7c:	e000      	b.n	2b80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    2b7e:	e00f      	b.n	2ba0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2b80:	bfd8      	it	le
    2b82:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2b86:	dd05      	ble.n	2b94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    2b88:	2a00      	cmp	r2, #0
    2b8a:	bfbc      	itt	lt
    2b8c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2b90:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2b94:	980a      	ldr	r0, [sp, #40]	; 0x28
    2b96:	f04f 0a01 	mov.w	sl, #1
    2b9a:	46d0      	mov	r8, sl
    2b9c:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2ba0:	ea1a 0f08 	tst.w	sl, r8
    2ba4:	d009      	beq.n	2bba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    2ba6:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ba8:	4911      	ldr	r1, [pc, #68]	; (2bf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2baa:	9b02      	ldr	r3, [sp, #8]
    2bac:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    2bb0:	fbe3 2001 	umlal	r2, r0, r3, r1
    2bb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bb6:	e9c1 2004 	strd	r2, r0, [r1, #16]
    2bba:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2bbe:	f88d 0014 	strb.w	r0, [sp, #20]
    2bc2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2bc6:	2800      	cmp	r0, #0
    2bc8:	f47f ae97 	bne.w	28fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2bcc:	b00b      	add	sp, #44	; 0x2c
    2bce:	4650      	mov	r0, sl
    2bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd4:	e000ed04 	.word	0xe000ed04
    2bd8:	00000000 	.word	0x00000000
    2bdc:	20001294 	.word	0x20001294
    2be0:	20001214 	.word	0x20001214
    2be4:	0f424000 	.word	0x0f424000
    2be8:	1e847fff 	.word	0x1e847fff
    2bec:	f0bdc000 	.word	0xf0bdc000
    2bf0:	1e848000 	.word	0x1e848000

00002bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2bf4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bf8:	4d94      	ldr	r5, [pc, #592]	; (2e4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2bfa:	b08c      	sub	sp, #48	; 0x30
    2bfc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2c00:	2000      	movs	r0, #0
    2c02:	9009      	str	r0, [sp, #36]	; 0x24
    2c04:	9006      	str	r0, [sp, #24]
    2c06:	2001      	movs	r0, #1
    2c08:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2c0c:	f04f 0800 	mov.w	r8, #0
    2c10:	4607      	mov	r7, r0
    2c12:	4c8f      	ldr	r4, [pc, #572]	; (2e50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2c14:	f8cd 001c 	str.w	r0, [sp, #28]
    2c18:	f000 fe08 	bl	382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2c1c:	9008      	str	r0, [sp, #32]
    2c1e:	b124      	cbz	r4, 2c2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    2c20:	2100      	movs	r1, #0
    2c22:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    2c26:	f3af 8000 	nop.w
    2c2a:	9807      	ldr	r0, [sp, #28]
    2c2c:	2800      	cmp	r0, #0
    2c2e:	d03c      	beq.n	2caa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    2c30:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2c34:	b124      	cbz	r4, 2c40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    2c36:	2100      	movs	r1, #0
    2c38:	f240 70b5 	movw	r0, #1973	; 0x7b5
    2c3c:	f3af 8000 	nop.w
    2c40:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2c44:	2240      	movs	r2, #64	; 0x40
    2c46:	ea27 060a 	bic.w	r6, r7, sl
    2c4a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    2c4e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    2c52:	4683      	mov	fp, r0
    2c54:	f00a fa3a 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c58:	b124      	cbz	r4, 2c64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    2c5a:	2100      	movs	r1, #0
    2c5c:	f240 502f 	movw	r0, #1327	; 0x52f
    2c60:	f3af 8000 	nop.w
    2c64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2c68:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2c6c:	4428      	add	r0, r5
    2c6e:	4429      	add	r1, r5
    2c70:	9000      	str	r0, [sp, #0]
    2c72:	8c0a      	ldrh	r2, [r1, #32]
    2c74:	8402      	strh	r2, [r0, #32]
    2c76:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2c7a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2c7e:	b124      	cbz	r4, 2c8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2c80:	2100      	movs	r1, #0
    2c82:	f240 5033 	movw	r0, #1331	; 0x533
    2c86:	f3af 8000 	nop.w
    2c8a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2c8e:	f88d 0008 	strb.w	r0, [sp, #8]
    2c92:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2c96:	b178      	cbz	r0, 2cb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    2c98:	2c00      	cmp	r4, #0
    2c9a:	bf1c      	itt	ne
    2c9c:	2100      	movne	r1, #0
    2c9e:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    2ca2:	d0b9      	beq.n	2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2ca4:	f3af 8000 	nop.w
    2ca8:	e7b6      	b.n	2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2caa:	486a      	ldr	r0, [pc, #424]	; (2e54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2cac:	2800      	cmp	r0, #0
    2cae:	bf18      	it	ne
    2cb0:	f3af 8000 	nopne.w
    2cb4:	b662      	cpsie	i
    2cb6:	e7bb      	b.n	2c30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    2cb8:	b124      	cbz	r4, 2cc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    2cba:	2100      	movs	r1, #0
    2cbc:	f240 70bf 	movw	r0, #1983	; 0x7bf
    2cc0:	f3af 8000 	nop.w
    2cc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2cc6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2cca:	2803      	cmp	r0, #3
    2ccc:	d17d      	bne.n	2dca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    2cce:	9a00      	ldr	r2, [sp, #0]
    2cd0:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cd2:	f892 0020 	ldrb.w	r0, [r2, #32]
    2cd6:	4288      	cmp	r0, r1
    2cd8:	bf14      	ite	ne
    2cda:	f04f 0a00 	movne.w	sl, #0
    2cde:	f04f 0a01 	moveq.w	sl, #1
    2ce2:	f102 0c20 	add.w	ip, r2, #32
    2ce6:	4683      	mov	fp, r0
    2ce8:	2220      	movs	r2, #32
    2cea:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2cee:	e003      	b.n	2cf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    2cf0:	4602      	mov	r2, r0
    2cf2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2cf6:	7840      	ldrb	r0, [r0, #1]
    2cf8:	4288      	cmp	r0, r1
    2cfa:	d002      	beq.n	2d02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2cfc:	2820      	cmp	r0, #32
    2cfe:	d00a      	beq.n	2d16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2d00:	e7f6      	b.n	2cf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2d02:	2820      	cmp	r0, #32
    2d04:	d007      	beq.n	2d16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2d06:	4583      	cmp	fp, r0
    2d08:	d107      	bne.n	2d1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2d0a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    2d0e:	7840      	ldrb	r0, [r0, #1]
    2d10:	f88c 0000 	strb.w	r0, [ip]
    2d14:	e007      	b.n	2d26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2d16:	4640      	mov	r0, r8
    2d18:	e00c      	b.n	2d34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2d1a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2d1e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2d22:	7840      	ldrb	r0, [r0, #1]
    2d24:	7048      	strb	r0, [r1, #1]
    2d26:	b124      	cbz	r4, 2d32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    2d28:	2100      	movs	r1, #0
    2d2a:	f240 409a 	movw	r0, #1178	; 0x49a
    2d2e:	f3af 8000 	nop.w
    2d32:	4638      	mov	r0, r7
    2d34:	46c3      	mov	fp, r8
    2d36:	ea10 0f0a 	tst.w	r0, sl
    2d3a:	bf18      	it	ne
    2d3c:	46bb      	movne	fp, r7
    2d3e:	2800      	cmp	r0, #0
    2d40:	d04f      	beq.n	2de2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2d42:	b124      	cbz	r4, 2d4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    2d44:	2100      	movs	r1, #0
    2d46:	f240 70c4 	movw	r0, #1988	; 0x7c4
    2d4a:	f3af 8000 	nop.w
    2d4e:	4632      	mov	r2, r6
    2d50:	2001      	movs	r0, #1
    2d52:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d54:	f7ff f8d6 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    2d58:	b124      	cbz	r4, 2d64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2d5a:	2100      	movs	r1, #0
    2d5c:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2d60:	f3af 8000 	nop.w
    2d64:	483c      	ldr	r0, [pc, #240]	; (2e58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    2d66:	2800      	cmp	r0, #0
    2d68:	bf18      	it	ne
    2d6a:	f3af 8000 	nopne.w
    2d6e:	f3ef 8010 	mrs	r0, PRIMASK
    2d72:	b672      	cpsid	i
    2d74:	9007      	str	r0, [sp, #28]
    2d76:	b124      	cbz	r4, 2d82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2d78:	2100      	movs	r1, #0
    2d7a:	f240 70d2 	movw	r0, #2002	; 0x7d2
    2d7e:	f3af 8000 	nop.w
    2d82:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2d86:	f88d 0008 	strb.w	r0, [sp, #8]
    2d8a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2d8e:	b138      	cbz	r0, 2da0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2d90:	2c00      	cmp	r4, #0
    2d92:	bf1c      	itt	ne
    2d94:	2100      	movne	r1, #0
    2d96:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    2d9a:	f43f af3d 	beq.w	2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2d9e:	e781      	b.n	2ca4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2da0:	f1bb 0f00 	cmp.w	fp, #0
    2da4:	d00a      	beq.n	2dbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2da6:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2daa:	2820      	cmp	r0, #32
    2dac:	d106      	bne.n	2dbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2dae:	4632      	mov	r2, r6
    2db0:	2102      	movs	r1, #2
    2db2:	9808      	ldr	r0, [sp, #32]
    2db4:	f7ff f8d8 	bl	1f68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    2db8:	9006      	str	r0, [sp, #24]
    2dba:	b1f8      	cbz	r0, 2dfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    2dbc:	b124      	cbz	r4, 2dc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2dbe:	2100      	movs	r1, #0
    2dc0:	f240 70ea 	movw	r0, #2026	; 0x7ea
    2dc4:	f3af 8000 	nop.w
    2dc8:	e000      	b.n	2dcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    2dca:	e00a      	b.n	2de2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2dcc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2dd0:	ea27 0000 	bic.w	r0, r7, r0
    2dd4:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2dd8:	20ff      	movs	r0, #255	; 0xff
    2dda:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2dde:	2001      	movs	r0, #1
    2de0:	9009      	str	r0, [sp, #36]	; 0x24
    2de2:	b124      	cbz	r4, 2dee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    2de4:	2100      	movs	r1, #0
    2de6:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2dea:	f3af 8000 	nop.w
    2dee:	9806      	ldr	r0, [sp, #24]
    2df0:	4e1a      	ldr	r6, [pc, #104]	; (2e5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    2df2:	2802      	cmp	r0, #2
    2df4:	d009      	beq.n	2e0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    2df6:	2801      	cmp	r0, #1
    2df8:	d00f      	beq.n	2e1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2dfa:	e013      	b.n	2e24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2dfc:	b194      	cbz	r4, 2e24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2dfe:	2100      	movs	r1, #0
    2e00:	f240 70e5 	movw	r0, #2021	; 0x7e5
    2e04:	f3af 8000 	nop.w
    2e08:	e7ec      	b.n	2de4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    2e0a:	68a9      	ldr	r1, [r5, #8]
    2e0c:	9808      	ldr	r0, [sp, #32]
    2e0e:	1a08      	subs	r0, r1, r0
    2e10:	f00a f802 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2e14:	6871      	ldr	r1, [r6, #4]
    2e16:	b921      	cbnz	r1, 2e22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    2e18:	e004      	b.n	2e24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2e1a:	6871      	ldr	r1, [r6, #4]
    2e1c:	f04f 30ff 	mov.w	r0, #4294967295
    2e20:	b101      	cbz	r1, 2e24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2e22:	4788      	blx	r1
    2e24:	9807      	ldr	r0, [sp, #28]
    2e26:	b148      	cbz	r0, 2e3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    2e28:	b124      	cbz	r4, 2e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2e2a:	2100      	movs	r1, #0
    2e2c:	f640 0007 	movw	r0, #2055	; 0x807
    2e30:	f3af 8000 	nop.w
    2e34:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e36:	b00d      	add	sp, #52	; 0x34
    2e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e3c:	4805      	ldr	r0, [pc, #20]	; (2e54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2e3e:	2800      	cmp	r0, #0
    2e40:	bf18      	it	ne
    2e42:	f3af 8000 	nopne.w
    2e46:	b662      	cpsie	i
    2e48:	e7ee      	b.n	2e28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    2e4a:	0000      	.short	0x0000
    2e4c:	20001294 	.word	0x20001294
	...
    2e5c:	2000003c 	.word	0x2000003c

00002e60 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2e60:	2820      	cmp	r0, #32
    2e62:	bf24      	itt	cs
    2e64:	2000      	movcs	r0, #0
    2e66:	4770      	bxcs	lr
    2e68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e6c:	4b03      	ldr	r3, [pc, #12]	; (2e7c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2e6e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2e72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2e76:	6042      	str	r2, [r0, #4]
    2e78:	2001      	movs	r0, #1
    2e7a:	4770      	bx	lr
    2e7c:	20000e94 	.word	0x20000e94

00002e80 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2e80:	b510      	push	{r4, lr}
    2e82:	2820      	cmp	r0, #32
    2e84:	d211      	bcs.n	2eaa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2e86:	490e      	ldr	r1, [pc, #56]	; (2ec0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2e88:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2e8c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2e90:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2e94:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2e98:	b13b      	cbz	r3, 2eaa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2e9a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2e9e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2ea2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2ea6:	2a01      	cmp	r2, #1
    2ea8:	d001      	beq.n	2eae <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2eaa:	2000      	movs	r0, #0
    2eac:	bd10      	pop	{r4, pc}
    2eae:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2eb2:	4601      	mov	r1, r0
    2eb4:	2000      	movs	r0, #0
    2eb6:	f7ff f825 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    2eba:	2001      	movs	r0, #1
    2ebc:	bd10      	pop	{r4, pc}
    2ebe:	0000      	.short	0x0000
    2ec0:	20001294 	.word	0x20001294

00002ec4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec8:	4e86      	ldr	r6, [pc, #536]	; (30e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2eca:	4680      	mov	r8, r0
    2ecc:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2ed0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2ed4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2ed8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2edc:	2800      	cmp	r0, #0
    2ede:	d071      	beq.n	2fc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2ee0:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2ee4:	4d80      	ldr	r5, [pc, #512]	; (30e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2ee6:	b125      	cbz	r5, 2ef2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2ee8:	2100      	movs	r1, #0
    2eea:	f640 3076 	movw	r0, #2934	; 0xb76
    2eee:	f3af 8000 	nop.w
    2ef2:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2ef6:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2efa:	2801      	cmp	r0, #1
    2efc:	d018      	beq.n	2f30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2efe:	b2c0      	uxtb	r0, r0
    2f00:	2804      	cmp	r0, #4
    2f02:	bf1c      	itt	ne
    2f04:	2805      	cmpne	r0, #5
    2f06:	2806      	cmpne	r0, #6
    2f08:	d061      	beq.n	2fce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2f0a:	b12d      	cbz	r5, 2f18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2f0c:	f04f 0100 	mov.w	r1, #0
    2f10:	f640 3082 	movw	r0, #2946	; 0xb82
    2f14:	f3af 8000 	nop.w
    2f18:	f001 fcd0 	bl	48bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2f1c:	b125      	cbz	r5, 2f28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2f1e:	2100      	movs	r1, #0
    2f20:	f640 3086 	movw	r0, #2950	; 0xb86
    2f24:	f3af 8000 	nop.w
    2f28:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2f2c:	2801      	cmp	r0, #1
    2f2e:	d1e6      	bne.n	2efe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2f30:	2401      	movs	r4, #1
    2f32:	b125      	cbz	r5, 2f3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2f34:	2100      	movs	r1, #0
    2f36:	f640 308d 	movw	r0, #2957	; 0xb8d
    2f3a:	f3af 8000 	nop.w
    2f3e:	2c00      	cmp	r4, #0
    2f40:	d04b      	beq.n	2fda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2f42:	2000      	movs	r0, #0
    2f44:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2f48:	b125      	cbz	r5, 2f54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2f4a:	2100      	movs	r1, #0
    2f4c:	f640 3092 	movw	r0, #2962	; 0xb92
    2f50:	f3af 8000 	nop.w
    2f54:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2f58:	2001      	movs	r0, #1
    2f5a:	ea20 090b 	bic.w	r9, r0, fp
    2f5e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2f62:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2f66:	2240      	movs	r2, #64	; 0x40
    2f68:	f00a f8b0 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f6c:	b125      	cbz	r5, 2f78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2f6e:	2100      	movs	r1, #0
    2f70:	f240 502f 	movw	r0, #1327	; 0x52f
    2f74:	f3af 8000 	nop.w
    2f78:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2f7c:	eb00 0a06 	add.w	sl, r0, r6
    2f80:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2f84:	4430      	add	r0, r6
    2f86:	8c01      	ldrh	r1, [r0, #32]
    2f88:	f8aa 1020 	strh.w	r1, [sl, #32]
    2f8c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2f90:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2f94:	b125      	cbz	r5, 2fa0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2f96:	2100      	movs	r1, #0
    2f98:	f240 5033 	movw	r0, #1331	; 0x533
    2f9c:	f3af 8000 	nop.w
    2fa0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2fa4:	f88d 0000 	strb.w	r0, [sp]
    2fa8:	f89d 0000 	ldrb.w	r0, [sp]
    2fac:	b1e0      	cbz	r0, 2fe8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2fae:	2d00      	cmp	r5, #0
    2fb0:	bf1c      	itt	ne
    2fb2:	2100      	movne	r1, #0
    2fb4:	f640 3098 	movwne	r0, #2968	; 0xb98
    2fb8:	d0bb      	beq.n	2f32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2fba:	bf00      	nop
    2fbc:	f3af 8000 	nop.w
    2fc0:	e7b7      	b.n	2f32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2fc2:	e7ff      	b.n	2fc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2fc4:	f640 316d 	movw	r1, #2925	; 0xb6d
    2fc8:	2070      	movs	r0, #112	; 0x70
    2fca:	f001 fb4d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fce:	464a      	mov	r2, r9
    2fd0:	4641      	mov	r1, r8
    2fd2:	2001      	movs	r0, #1
    2fd4:	f7fe ff96 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    2fd8:	e7a0      	b.n	2f1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2fda:	4844      	ldr	r0, [pc, #272]	; (30ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2fdc:	2800      	cmp	r0, #0
    2fde:	bf18      	it	ne
    2fe0:	f3af 8000 	nopne.w
    2fe4:	b662      	cpsie	i
    2fe6:	e7ac      	b.n	2f42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2fe8:	b125      	cbz	r5, 2ff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2fea:	2100      	movs	r1, #0
    2fec:	f640 309c 	movw	r0, #2972	; 0xb9c
    2ff0:	f3af 8000 	nop.w
    2ff4:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2ff8:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2ffc:	4640      	mov	r0, r8
    2ffe:	461c      	mov	r4, r3
    3000:	f04f 0b20 	mov.w	fp, #32
    3004:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    3008:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    300c:	e004      	b.n	3018 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    300e:	46a3      	mov	fp, r4
    3010:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    3014:	f89c 4001 	ldrb.w	r4, [ip, #1]
    3018:	4284      	cmp	r4, r0
    301a:	d002      	beq.n	3022 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    301c:	2c20      	cmp	r4, #32
    301e:	d02b      	beq.n	3078 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    3020:	e7f5      	b.n	300e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    3022:	2c20      	cmp	r4, #32
    3024:	d028      	beq.n	3078 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    3026:	42a3      	cmp	r3, r4
    3028:	d104      	bne.n	3034 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    302a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    302e:	7840      	ldrb	r0, [r0, #1]
    3030:	7008      	strb	r0, [r1, #0]
    3032:	e005      	b.n	3040 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    3034:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3038:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    303c:	7840      	ldrb	r0, [r0, #1]
    303e:	7048      	strb	r0, [r1, #1]
    3040:	f1ba 0f00 	cmp.w	sl, #0
    3044:	d011      	beq.n	306a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3046:	b125      	cbz	r5, 3052 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    3048:	2100      	movs	r1, #0
    304a:	f240 4092 	movw	r0, #1170	; 0x492
    304e:	f3af 8000 	nop.w
    3052:	f89a 0000 	ldrb.w	r0, [sl]
    3056:	42a0      	cmp	r0, r4
    3058:	d107      	bne.n	306a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    305a:	b125      	cbz	r5, 3066 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    305c:	2100      	movs	r1, #0
    305e:	f240 4095 	movw	r0, #1173	; 0x495
    3062:	f3af 8000 	nop.w
    3066:	f88a b000 	strb.w	fp, [sl]
    306a:	b15d      	cbz	r5, 3084 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    306c:	2100      	movs	r1, #0
    306e:	f240 409a 	movw	r0, #1178	; 0x49a
    3072:	f3af 8000 	nop.w
    3076:	e000      	b.n	307a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    3078:	b125      	cbz	r5, 3084 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    307a:	2100      	movs	r1, #0
    307c:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    3080:	f3af 8000 	nop.w
    3084:	481a      	ldr	r0, [pc, #104]	; (30f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    3086:	2800      	cmp	r0, #0
    3088:	bf18      	it	ne
    308a:	f3af 8000 	nopne.w
    308e:	f3ef 8410 	mrs	r4, PRIMASK
    3092:	b672      	cpsid	i
    3094:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    3098:	f88d 0000 	strb.w	r0, [sp]
    309c:	f89d 0000 	ldrb.w	r0, [sp]
    30a0:	b138      	cbz	r0, 30b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    30a2:	2d00      	cmp	r5, #0
    30a4:	bf1c      	itt	ne
    30a6:	2100      	movne	r1, #0
    30a8:	f640 30a6 	movwne	r0, #2982	; 0xba6
    30ac:	f43f af41 	beq.w	2f32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    30b0:	e784      	b.n	2fbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    30b2:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    30b6:	20ff      	movs	r0, #255	; 0xff
    30b8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    30bc:	b154      	cbz	r4, 30d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    30be:	2d00      	cmp	r5, #0
    30c0:	bf08      	it	eq
    30c2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30c6:	2100      	movs	r1, #0
    30c8:	f640 30b3 	movw	r0, #2995	; 0xbb3
    30cc:	f3af 8000 	nop.w
    30d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d4:	4805      	ldr	r0, [pc, #20]	; (30ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    30d6:	2800      	cmp	r0, #0
    30d8:	bf18      	it	ne
    30da:	f3af 8000 	nopne.w
    30de:	b662      	cpsie	i
    30e0:	e7ed      	b.n	30be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    30e2:	0000      	.short	0x0000
    30e4:	20001294 	.word	0x20001294
	...

000030f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    30f4:	b570      	push	{r4, r5, r6, lr}
    30f6:	460d      	mov	r5, r1
    30f8:	4606      	mov	r6, r0
    30fa:	f001 fa2b 	bl	4554 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    30fe:	480f      	ldr	r0, [pc, #60]	; (313c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3100:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    3104:	2400      	movs	r4, #0
    3106:	3880      	subs	r0, #128	; 0x80
    3108:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    310c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3110:	b129      	cbz	r1, 311e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3112:	1c61      	adds	r1, r4, #1
    3114:	b2cc      	uxtb	r4, r1
    3116:	2c20      	cmp	r4, #32
    3118:	d3f8      	bcc.n	310c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    311a:	2020      	movs	r0, #32
    311c:	bd70      	pop	{r4, r5, r6, pc}
    311e:	4808      	ldr	r0, [pc, #32]	; (3140 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3120:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3124:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3128:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    312c:	4621      	mov	r1, r4
    312e:	6045      	str	r5, [r0, #4]
    3130:	2001      	movs	r0, #1
    3132:	f7fe fee7 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    3136:	4620      	mov	r0, r4
    3138:	bd70      	pop	{r4, r5, r6, pc}
    313a:	0000      	.short	0x0000
    313c:	20001294 	.word	0x20001294
    3140:	20000e94 	.word	0x20000e94

00003144 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3148:	f000 fb70 	bl	382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    314c:	4605      	mov	r5, r0
    314e:	f000 fe3f 	bl	3dd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3152:	4c60      	ldr	r4, [pc, #384]	; (32d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    3154:	6860      	ldr	r0, [r4, #4]
    3156:	f1b0 3fff 	cmp.w	r0, #4294967295
    315a:	bf1c      	itt	ne
    315c:	f04f 30ff 	movne.w	r0, #4294967295
    3160:	6060      	strne	r0, [r4, #4]
    3162:	7fa0      	ldrb	r0, [r4, #30]
    3164:	4f5c      	ldr	r7, [pc, #368]	; (32d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    3166:	b990      	cbnz	r0, 318e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    3168:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    316c:	1a40      	subs	r0, r0, r1
    316e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3172:	f44f 710c 	mov.w	r1, #560	; 0x230
    3176:	f009 fe7a 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    317a:	68e1      	ldr	r1, [r4, #12]
    317c:	4408      	add	r0, r1
    317e:	1a28      	subs	r0, r5, r0
    3180:	0200      	lsls	r0, r0, #8
    3182:	17c1      	asrs	r1, r0, #31
    3184:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3188:	1200      	asrs	r0, r0, #8
    318a:	0fc0      	lsrs	r0, r0, #31
    318c:	d012      	beq.n	31b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    318e:	7e60      	ldrb	r0, [r4, #25]
    3190:	b320      	cbz	r0, 31dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3192:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3196:	f88d 0000 	strb.w	r0, [sp]
    319a:	f89d 0000 	ldrb.w	r0, [sp]
    319e:	b1e8      	cbz	r0, 31dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    31a0:	f000 fc72 	bl	3a88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    31a4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    31a8:	b1f0      	cbz	r0, 31e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    31aa:	f240 31d5 	movw	r1, #981	; 0x3d5
    31ae:	2070      	movs	r0, #112	; 0x70
    31b0:	f001 fa5a 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    31b8:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    31bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    31c0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    31c4:	6840      	ldr	r0, [r0, #4]
    31c6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    31ca:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    31ce:	2108      	movs	r1, #8
    31d0:	4790      	blx	r2
    31d2:	f240 31bd 	movw	r1, #957	; 0x3bd
    31d6:	2070      	movs	r0, #112	; 0x70
    31d8:	f001 fa46 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31dc:	1ce8      	adds	r0, r5, #3
    31de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31e2:	f000 fb49 	bl	3878 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    31e6:	e7dd      	b.n	31a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    31e8:	2001      	movs	r0, #1
    31ea:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    31ee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    31f2:	2820      	cmp	r0, #32
    31f4:	d021      	beq.n	323a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    31f6:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    31fa:	2020      	movs	r0, #32
    31fc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3200:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3204:	2600      	movs	r6, #0
    3206:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    320a:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    320e:	6026      	str	r6, [r4, #0]
    3210:	f000 feb8 	bl	3f84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3214:	7720      	strb	r0, [r4, #28]
    3216:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    321a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    321e:	eb00 0a04 	add.w	sl, r0, r4
    3222:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3226:	2820      	cmp	r0, #32
    3228:	d012      	beq.n	3250 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    322a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    322e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3232:	7e81      	ldrb	r1, [r0, #26]
    3234:	2901      	cmp	r1, #1
    3236:	d005      	beq.n	3244 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3238:	e00a      	b.n	3250 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    323a:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    323e:	2070      	movs	r0, #112	; 0x70
    3240:	f001 fa12 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3244:	f100 0208 	add.w	r2, r0, #8
    3248:	2101      	movs	r1, #1
    324a:	4628      	mov	r0, r5
    324c:	f7fe f9d2 	bl	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
    3250:	4642      	mov	r2, r8
    3252:	2101      	movs	r1, #1
    3254:	4628      	mov	r0, r5
    3256:	f7fe fe87 	bl	1f68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21c>
    325a:	0007      	movs	r7, r0
    325c:	d0f8      	beq.n	3250 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    325e:	481f      	ldr	r0, [pc, #124]	; (32dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    3260:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3264:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    3268:	2802      	cmp	r0, #2
    326a:	d104      	bne.n	3276 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    326c:	4642      	mov	r2, r8
    326e:	4649      	mov	r1, r9
    3270:	2006      	movs	r0, #6
    3272:	f7fe fe47 	bl	1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    3276:	20ff      	movs	r0, #255	; 0xff
    3278:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    327c:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3280:	f8df 805c 	ldr.w	r8, [pc, #92]	; 32e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    3284:	2820      	cmp	r0, #32
    3286:	bf1c      	itt	ne
    3288:	f898 0001 	ldrbne.w	r0, [r8, #1]
    328c:	f001 fac0 	blne	4810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3290:	7f20      	ldrb	r0, [r4, #28]
    3292:	b118      	cbz	r0, 329c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    3294:	f000 fe52 	bl	3f3c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    3298:	7726      	strb	r6, [r4, #28]
    329a:	7766      	strb	r6, [r4, #29]
    329c:	2f02      	cmp	r7, #2
    329e:	d00f      	beq.n	32c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    32a0:	2f01      	cmp	r7, #1
    32a2:	bf18      	it	ne
    32a4:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32a8:	f04f 30ff 	mov.w	r0, #4294967295
    32ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
    32b0:	2900      	cmp	r1, #0
    32b2:	bf08      	it	eq
    32b4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32b8:	b001      	add	sp, #4
    32ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32be:	4708      	bx	r1
    32c0:	68a0      	ldr	r0, [r4, #8]
    32c2:	1b40      	subs	r0, r0, r5
    32c4:	f009 fda8 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    32c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    32cc:	2900      	cmp	r1, #0
    32ce:	d1f3      	bne.n	32b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    32d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32d4:	20001294 	.word	0x20001294
    32d8:	20000e94 	.word	0x20000e94
    32dc:	20001214 	.word	0x20001214
    32e0:	2000003c 	.word	0x2000003c

000032e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    32e4:	b530      	push	{r4, r5, lr}
    32e6:	4c36      	ldr	r4, [pc, #216]	; (33c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    32e8:	4605      	mov	r5, r0
    32ea:	b083      	sub	sp, #12
    32ec:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    32f0:	2820      	cmp	r0, #32
    32f2:	d008      	beq.n	3306 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    32f4:	6860      	ldr	r0, [r4, #4]
    32f6:	f1b0 3fff 	cmp.w	r0, #4294967295
    32fa:	d009      	beq.n	3310 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    32fc:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3300:	2070      	movs	r0, #112	; 0x70
    3302:	f001 f9b1 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3306:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    330a:	2070      	movs	r0, #112	; 0x70
    330c:	f001 f9ac 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3310:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3314:	492b      	ldr	r1, [pc, #172]	; (33c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3316:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    331a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    331e:	3008      	adds	r0, #8
    3320:	f7fe fdb6 	bl	1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    3324:	4601      	mov	r1, r0
    3326:	4a28      	ldr	r2, [pc, #160]	; (33c8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3328:	4428      	add	r0, r5
    332a:	4291      	cmp	r1, r2
    332c:	d904      	bls.n	3338 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    332e:	f240 516f 	movw	r1, #1391	; 0x56f
    3332:	2070      	movs	r0, #112	; 0x70
    3334:	f001 f998 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3338:	4924      	ldr	r1, [pc, #144]	; (33cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    333a:	428d      	cmp	r5, r1
    333c:	dd04      	ble.n	3348 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    333e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3342:	2070      	movs	r0, #112	; 0x70
    3344:	f001 f990 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3348:	4921      	ldr	r1, [pc, #132]	; (33d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    334a:	428d      	cmp	r5, r1
    334c:	da04      	bge.n	3358 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    334e:	f240 5171 	movw	r1, #1393	; 0x571
    3352:	2070      	movs	r0, #112	; 0x70
    3354:	f001 f988 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3358:	491e      	ldr	r1, [pc, #120]	; (33d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    335a:	4281      	cmp	r1, r0
    335c:	bfdc      	itt	le
    335e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3362:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3366:	dd05      	ble.n	3374 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    3368:	2800      	cmp	r0, #0
    336a:	bfbc      	itt	lt
    336c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3370:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3374:	aa01      	add	r2, sp, #4
    3376:	4669      	mov	r1, sp
    3378:	f000 f8ee 	bl	3558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    337c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3380:	280f      	cmp	r0, #15
    3382:	bf8c      	ite	hi
    3384:	2001      	movhi	r0, #1
    3386:	2000      	movls	r0, #0
    3388:	9900      	ldr	r1, [sp, #0]
    338a:	4408      	add	r0, r1
    338c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3390:	6061      	str	r1, [r4, #4]
    3392:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3396:	f88d 0000 	strb.w	r0, [sp]
    339a:	f89d 0000 	ldrb.w	r0, [sp]
    339e:	2800      	cmp	r0, #0
    33a0:	bf04      	itt	eq
    33a2:	b003      	addeq	sp, #12
    33a4:	bd30      	popeq	{r4, r5, pc}
    33a6:	2005      	movs	r0, #5
    33a8:	f000 fbec 	bl	3b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    33ac:	2800      	cmp	r0, #0
    33ae:	bf1c      	itt	ne
    33b0:	b003      	addne	sp, #12
    33b2:	bd30      	popne	{r4, r5, pc}
    33b4:	f640 21a8 	movw	r1, #2728	; 0xaa8
    33b8:	2070      	movs	r0, #112	; 0x70
    33ba:	f001 f955 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33be:	0000      	.short	0x0000
    33c0:	20001294 	.word	0x20001294
    33c4:	20000e94 	.word	0x20000e94
    33c8:	1e847fff 	.word	0x1e847fff
    33cc:	0f424000 	.word	0x0f424000
    33d0:	f0bdc000 	.word	0xf0bdc000
    33d4:	1e848000 	.word	0x1e848000

000033d8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    33d8:	b570      	push	{r4, r5, r6, lr}
    33da:	4c1c      	ldr	r4, [pc, #112]	; (344c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    33dc:	2120      	movs	r1, #32
    33de:	f884 1020 	strb.w	r1, [r4, #32]
    33e2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    33e6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    33ea:	2000      	movs	r0, #0
    33ec:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    33f0:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    33f4:	1e42      	subs	r2, r0, #1
    33f6:	e9c4 0200 	strd	r0, r2, [r4]
    33fa:	77a0      	strb	r0, [r4, #30]
    33fc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3400:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3404:	7720      	strb	r0, [r4, #28]
    3406:	7760      	strb	r0, [r4, #29]
    3408:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    340c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3410:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3414:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3418:	2210      	movs	r2, #16
    341a:	7088      	strb	r0, [r1, #2]
    341c:	f801 0f04 	strb.w	r0, [r1, #4]!
    3420:	1e52      	subs	r2, r2, #1
    3422:	d1fa      	bne.n	341a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3424:	f000 fdb8 	bl	3f98 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3428:	4d09      	ldr	r5, [pc, #36]	; (3450 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    342a:	2601      	movs	r6, #1
    342c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3430:	20ff      	movs	r0, #255	; 0xff
    3432:	7028      	strb	r0, [r5, #0]
    3434:	4807      	ldr	r0, [pc, #28]	; (3454 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3436:	f001 f9cd 	bl	47d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    343a:	7068      	strb	r0, [r5, #1]
    343c:	f001 fa28 	bl	4890 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3440:	60a8      	str	r0, [r5, #8]
    3442:	f000 fd33 	bl	3eac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3446:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    344a:	bd70      	pop	{r4, r5, r6, pc}
    344c:	20001294 	.word	0x20001294
    3450:	2000003c 	.word	0x2000003c
    3454:	00001db9 	.word	0x00001db9

00003458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3458:	b500      	push	{lr}
    345a:	b083      	sub	sp, #12
    345c:	4668      	mov	r0, sp
    345e:	f000 f9eb 	bl	3838 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3462:	9800      	ldr	r0, [sp, #0]
    3464:	f009 fcd8 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3468:	9a01      	ldr	r2, [sp, #4]
    346a:	4b03      	ldr	r3, [pc, #12]	; (3478 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    346c:	2100      	movs	r1, #0
    346e:	fbe2 0103 	umlal	r0, r1, r2, r3
    3472:	b003      	add	sp, #12
    3474:	bd00      	pop	{pc}
    3476:	0000      	.short	0x0000
    3478:	1e848000 	.word	0x1e848000

0000347c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    347c:	b570      	push	{r4, r5, r6, lr}
    347e:	4606      	mov	r6, r0
    3480:	b082      	sub	sp, #8
    3482:	461d      	mov	r5, r3
    3484:	4610      	mov	r0, r2
    3486:	f009 fcc7 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    348a:	4604      	mov	r4, r0
    348c:	4668      	mov	r0, sp
    348e:	f000 f9d3 	bl	3838 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3492:	4920      	ldr	r1, [pc, #128]	; (3514 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    3494:	9801      	ldr	r0, [sp, #4]
    3496:	fba0 0201 	umull	r0, r2, r0, r1
    349a:	1a30      	subs	r0, r6, r0
    349c:	bf44      	itt	mi
    349e:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    34a2:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    34a6:	d504      	bpl.n	34b2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    34a8:	f640 31c8 	movw	r1, #3016	; 0xbc8
    34ac:	2070      	movs	r0, #112	; 0x70
    34ae:	f001 f8db 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34b2:	4288      	cmp	r0, r1
    34b4:	db04      	blt.n	34c0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    34b6:	f640 31c9 	movw	r1, #3017	; 0xbc9
    34ba:	2070      	movs	r0, #112	; 0x70
    34bc:	f001 f8d4 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34c0:	4a15      	ldr	r2, [pc, #84]	; (3518 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    34c2:	1a21      	subs	r1, r4, r0
    34c4:	2300      	movs	r3, #0
    34c6:	1a8a      	subs	r2, r1, r2
    34c8:	f173 0200 	sbcs.w	r2, r3, #0
    34cc:	d318      	bcc.n	3500 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    34ce:	f8df c048 	ldr.w	ip, [pc, #72]	; 3518 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    34d2:	1b02      	subs	r2, r0, r4
    34d4:	ebb2 0c0c 	subs.w	ip, r2, ip
    34d8:	f173 0300 	sbcs.w	r3, r3, #0
    34dc:	d310      	bcc.n	3500 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    34de:	4b0f      	ldr	r3, [pc, #60]	; (351c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    34e0:	428b      	cmp	r3, r1
    34e2:	bf3e      	ittt	cc
    34e4:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    34e8:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    34ec:	1901      	addcc	r1, r0, r4
    34ee:	d307      	bcc.n	3500 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    34f0:	4293      	cmp	r3, r2
    34f2:	d20a      	bcs.n	350a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    34f4:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    34f8:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    34fc:	4408      	add	r0, r1
    34fe:	4241      	negs	r1, r0
    3500:	f101 000f 	add.w	r0, r1, #15
    3504:	b002      	add	sp, #8
    3506:	1a28      	subs	r0, r5, r0
    3508:	bd70      	pop	{r4, r5, r6, pc}
    350a:	f640 21c2 	movw	r1, #2754	; 0xac2
    350e:	2070      	movs	r0, #112	; 0x70
    3510:	f001 f8aa 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3514:	1e848000 	.word	0x1e848000
    3518:	0f424000 	.word	0x0f424000
    351c:	1e847fff 	.word	0x1e847fff

00003520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3520:	0b41      	lsrs	r1, r0, #13
    3522:	f248 6237 	movw	r2, #34359	; 0x8637
    3526:	4351      	muls	r1, r2
    3528:	0c0a      	lsrs	r2, r1, #16
    352a:	4b09      	ldr	r3, [pc, #36]	; (3550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    352c:	0251      	lsls	r1, r2, #9
    352e:	fb02 0203 	mla	r2, r2, r3, r0
    3532:	4808      	ldr	r0, [pc, #32]	; (3554 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3534:	4350      	muls	r0, r2
    3536:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    353a:	306e      	adds	r0, #110	; 0x6e
    353c:	0d40      	lsrs	r0, r0, #21
    353e:	425b      	negs	r3, r3
    3540:	fb10 f303 	smulbb	r3, r0, r3
    3544:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3548:	bf88      	it	hi
    354a:	1c49      	addhi	r1, r1, #1
    354c:	4408      	add	r0, r1
    354e:	4770      	bx	lr
    3550:	ffffc2f7 	.word	0xffffc2f7
    3554:	00010c6f 	.word	0x00010c6f

00003558 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3558:	0b43      	lsrs	r3, r0, #13
    355a:	f248 6c37 	movw	ip, #34359	; 0x8637
    355e:	fb03 f30c 	mul.w	r3, r3, ip
    3562:	b430      	push	{r4, r5}
    3564:	0c1b      	lsrs	r3, r3, #16
    3566:	f8df c044 	ldr.w	ip, [pc, #68]	; 35ac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    356a:	025c      	lsls	r4, r3, #9
    356c:	fb03 030c 	mla	r3, r3, ip, r0
    3570:	480f      	ldr	r0, [pc, #60]	; (35b0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3572:	4358      	muls	r0, r3
    3574:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3578:	eb04 000c 	add.w	r0, r4, ip
    357c:	f643 5409 	movw	r4, #15625	; 0x3d09
    3580:	fb1c f404 	smulbb	r4, ip, r4
    3584:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3588:	f643 5508 	movw	r5, #15624	; 0x3d08
    358c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3590:	442c      	add	r4, r5
    3592:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3596:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    359a:	bf84      	itt	hi
    359c:	f04f 0c00 	movhi.w	ip, #0
    35a0:	1c40      	addhi	r0, r0, #1
    35a2:	6008      	str	r0, [r1, #0]
    35a4:	f882 c000 	strb.w	ip, [r2]
    35a8:	bc30      	pop	{r4, r5}
    35aa:	4770      	bx	lr
    35ac:	ffffc2f7 	.word	0xffffc2f7
    35b0:	00010c6f 	.word	0x00010c6f

000035b4 <MPSL_IRQ_RTC0_Handler>:
    35b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35b8:	4d3b      	ldr	r5, [pc, #236]	; (36a8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    35ba:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    35be:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 36ac <MPSL_IRQ_RTC0_Handler+0xf8>
    35c2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    35c6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    35ca:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    35ce:	f04f 0400 	mov.w	r4, #0
    35d2:	d019      	beq.n	3608 <MPSL_IRQ_RTC0_Handler+0x54>
    35d4:	4836      	ldr	r0, [pc, #216]	; (36b0 <MPSL_IRQ_RTC0_Handler+0xfc>)
    35d6:	6800      	ldr	r0, [r0, #0]
    35d8:	b1b0      	cbz	r0, 3608 <MPSL_IRQ_RTC0_Handler+0x54>
    35da:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    35de:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    35e2:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    35e6:	f8d8 1000 	ldr.w	r1, [r8]
    35ea:	1a40      	subs	r0, r0, r1
    35ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35f0:	2802      	cmp	r0, #2
    35f2:	d302      	bcc.n	35fa <MPSL_IRQ_RTC0_Handler+0x46>
    35f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    35f8:	d906      	bls.n	3608 <MPSL_IRQ_RTC0_Handler+0x54>
    35fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    35fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3602:	2004      	movs	r0, #4
    3604:	f7fe fe7e 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3608:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    360c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3610:	d01a      	beq.n	3648 <MPSL_IRQ_RTC0_Handler+0x94>
    3612:	4828      	ldr	r0, [pc, #160]	; (36b4 <MPSL_IRQ_RTC0_Handler+0x100>)
    3614:	6800      	ldr	r0, [r0, #0]
    3616:	b1b8      	cbz	r0, 3648 <MPSL_IRQ_RTC0_Handler+0x94>
    3618:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    361c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3620:	4825      	ldr	r0, [pc, #148]	; (36b8 <MPSL_IRQ_RTC0_Handler+0x104>)
    3622:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3626:	f8d8 1000 	ldr.w	r1, [r8]
    362a:	1a40      	subs	r0, r0, r1
    362c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3630:	2802      	cmp	r0, #2
    3632:	d302      	bcc.n	363a <MPSL_IRQ_RTC0_Handler+0x86>
    3634:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3638:	d906      	bls.n	3648 <MPSL_IRQ_RTC0_Handler+0x94>
    363a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    363e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3642:	2005      	movs	r0, #5
    3644:	f7fe fe5e 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3648:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    364c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3650:	d01a      	beq.n	3688 <MPSL_IRQ_RTC0_Handler+0xd4>
    3652:	481a      	ldr	r0, [pc, #104]	; (36bc <MPSL_IRQ_RTC0_Handler+0x108>)
    3654:	6800      	ldr	r0, [r0, #0]
    3656:	b1b8      	cbz	r0, 3688 <MPSL_IRQ_RTC0_Handler+0xd4>
    3658:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    365c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3660:	4817      	ldr	r0, [pc, #92]	; (36c0 <MPSL_IRQ_RTC0_Handler+0x10c>)
    3662:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3666:	f8d8 1000 	ldr.w	r1, [r8]
    366a:	1a40      	subs	r0, r0, r1
    366c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3670:	2802      	cmp	r0, #2
    3672:	d302      	bcc.n	367a <MPSL_IRQ_RTC0_Handler+0xc6>
    3674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3678:	d906      	bls.n	3688 <MPSL_IRQ_RTC0_Handler+0xd4>
    367a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    367e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3682:	2006      	movs	r0, #6
    3684:	f7fe fe3e 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3688:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    368c:	2800      	cmp	r0, #0
    368e:	bf08      	it	eq
    3690:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3694:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3698:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    369c:	4809      	ldr	r0, [pc, #36]	; (36c4 <MPSL_IRQ_RTC0_Handler+0x110>)
    369e:	68c1      	ldr	r1, [r0, #12]
    36a0:	1c49      	adds	r1, r1, #1
    36a2:	60c1      	str	r1, [r0, #12]
    36a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a8:	4000b000 	.word	0x4000b000
    36ac:	4000b504 	.word	0x4000b504
    36b0:	4000b140 	.word	0x4000b140
    36b4:	4000b144 	.word	0x4000b144
    36b8:	4000b004 	.word	0x4000b004
    36bc:	4000b148 	.word	0x4000b148
    36c0:	4000b008 	.word	0x4000b008
    36c4:	20000048 	.word	0x20000048

000036c8 <MPSL_IRQ_TIMER0_Handler>:
    36c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36cc:	4d38      	ldr	r5, [pc, #224]	; (37b0 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    36ce:	7828      	ldrb	r0, [r5, #0]
    36d0:	2804      	cmp	r0, #4
    36d2:	d068      	beq.n	37a6 <MPSL_IRQ_TIMER0_Handler+0xde>
    36d4:	1ca8      	adds	r0, r5, #2
    36d6:	2201      	movs	r2, #1
    36d8:	7801      	ldrb	r1, [r0, #0]
    36da:	b159      	cbz	r1, 36f4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    36dc:	2901      	cmp	r1, #1
    36de:	bf08      	it	eq
    36e0:	706a      	strbeq	r2, [r5, #1]
    36e2:	d002      	beq.n	36ea <MPSL_IRQ_TIMER0_Handler+0x22>
    36e4:	7869      	ldrb	r1, [r5, #1]
    36e6:	2900      	cmp	r1, #0
    36e8:	d058      	beq.n	379c <MPSL_IRQ_TIMER0_Handler+0xd4>
    36ea:	2102      	movs	r1, #2
    36ec:	7001      	strb	r1, [r0, #0]
    36ee:	7840      	ldrb	r0, [r0, #1]
    36f0:	f000 fafe 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    36f4:	4c2f      	ldr	r4, [pc, #188]	; (37b4 <MPSL_IRQ_TIMER0_Handler+0xec>)
    36f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36fa:	f04f 0800 	mov.w	r8, #0
    36fe:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3702:	f44f 7780 	mov.w	r7, #256	; 0x100
    3706:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    370a:	d00a      	beq.n	3722 <MPSL_IRQ_TIMER0_Handler+0x5a>
    370c:	482a      	ldr	r0, [pc, #168]	; (37b8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    370e:	6800      	ldr	r0, [r0, #0]
    3710:	b138      	cbz	r0, 3722 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3712:	2003      	movs	r0, #3
    3714:	f000 faec 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3718:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    371c:	2003      	movs	r0, #3
    371e:	f7fe fdf1 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3722:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3726:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    372a:	d00a      	beq.n	3742 <MPSL_IRQ_TIMER0_Handler+0x7a>
    372c:	4823      	ldr	r0, [pc, #140]	; (37bc <MPSL_IRQ_TIMER0_Handler+0xf4>)
    372e:	6800      	ldr	r0, [r0, #0]
    3730:	b138      	cbz	r0, 3742 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3732:	2002      	movs	r0, #2
    3734:	f000 fadc 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3738:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    373c:	2002      	movs	r0, #2
    373e:	f7fe fde1 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3742:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3746:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    374a:	d00a      	beq.n	3762 <MPSL_IRQ_TIMER0_Handler+0x9a>
    374c:	481c      	ldr	r0, [pc, #112]	; (37c0 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    374e:	6800      	ldr	r0, [r0, #0]
    3750:	b138      	cbz	r0, 3762 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3752:	2001      	movs	r0, #1
    3754:	f000 facc 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3758:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    375c:	2001      	movs	r0, #1
    375e:	f7fe fdd1 	bl	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3762:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3766:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    376a:	bf08      	it	eq
    376c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3770:	4814      	ldr	r0, [pc, #80]	; (37c4 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3772:	6800      	ldr	r0, [r0, #0]
    3774:	2800      	cmp	r0, #0
    3776:	bf08      	it	eq
    3778:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    377c:	2000      	movs	r0, #0
    377e:	f000 fab7 	bl	3cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3782:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3786:	2004      	movs	r0, #4
    3788:	7028      	strb	r0, [r5, #0]
    378a:	f8c5 8004 	str.w	r8, [r5, #4]
    378e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3796:	2000      	movs	r0, #0
    3798:	f7fe bdb4 	b.w	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    379c:	f240 419f 	movw	r1, #1183	; 0x49f
    37a0:	206c      	movs	r0, #108	; 0x6c
    37a2:	f000 ff61 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37aa:	2007      	movs	r0, #7
    37ac:	f7fe bdaa 	b.w	2304 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37b0:	20000048 	.word	0x20000048
    37b4:	40008000 	.word	0x40008000
    37b8:	4000814c 	.word	0x4000814c
    37bc:	40008148 	.word	0x40008148
    37c0:	40008144 	.word	0x40008144
    37c4:	40008140 	.word	0x40008140
    37c8:	2201      	movs	r2, #1
    37ca:	0211      	lsls	r1, r2, #8
    37cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    37d0:	2000      	movs	r0, #0
    37d2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    37d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    37da:	f3bf 8f4f 	dsb	sy
    37de:	f3bf 8f6f 	isb	sy
    37e2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    37e6:	490e      	ldr	r1, [pc, #56]	; (3820 <MPSL_IRQ_TIMER0_Handler+0x158>)
    37e8:	f841 2f04 	str.w	r2, [r1, #4]!
    37ec:	1e43      	subs	r3, r0, #1
    37ee:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    37f2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    37f6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    37fa:	4b0a      	ldr	r3, [pc, #40]	; (3824 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    37fc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3800:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3804:	1d1b      	adds	r3, r3, #4
    3806:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    380a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    380e:	1d1b      	adds	r3, r3, #4
    3810:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3814:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3818:	60ca      	str	r2, [r1, #12]
    381a:	4903      	ldr	r1, [pc, #12]	; (3828 <MPSL_IRQ_TIMER0_Handler+0x160>)
    381c:	7048      	strb	r0, [r1, #1]
    381e:	4770      	bx	lr
    3820:	40008000 	.word	0x40008000
    3824:	40008004 	.word	0x40008004
    3828:	20000048 	.word	0x20000048

0000382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    382c:	4801      	ldr	r0, [pc, #4]	; (3834 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    382e:	6800      	ldr	r0, [r0, #0]
    3830:	4770      	bx	lr
    3832:	0000      	.short	0x0000
    3834:	4000b504 	.word	0x4000b504

00003838 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3838:	b430      	push	{r4, r5}
    383a:	f3ef 8c10 	mrs	ip, PRIMASK
    383e:	b672      	cpsid	i
    3840:	2500      	movs	r5, #0
    3842:	4b0b      	ldr	r3, [pc, #44]	; (3870 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    3844:	4a0b      	ldr	r2, [pc, #44]	; (3874 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    3846:	bf00      	nop
    3848:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    384c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3850:	b12c      	cbz	r4, 385e <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    3852:	68d1      	ldr	r1, [r2, #12]
    3854:	1c49      	adds	r1, r1, #1
    3856:	60d1      	str	r1, [r2, #12]
    3858:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    385c:	e7f4      	b.n	3848 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    385e:	68d2      	ldr	r2, [r2, #12]
    3860:	f1bc 0f00 	cmp.w	ip, #0
    3864:	d100      	bne.n	3868 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    3866:	b662      	cpsie	i
    3868:	e9c0 1200 	strd	r1, r2, [r0]
    386c:	bc30      	pop	{r4, r5}
    386e:	4770      	bx	lr
    3870:	4000b000 	.word	0x4000b000
    3874:	20000048 	.word	0x20000048

00003878 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    387c:	4e46      	ldr	r6, [pc, #280]	; (3998 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    387e:	4605      	mov	r5, r0
    3880:	1eb7      	subs	r7, r6, #2
    3882:	7833      	ldrb	r3, [r6, #0]
    3884:	68b9      	ldr	r1, [r7, #8]
    3886:	2b01      	cmp	r3, #1
    3888:	bf04      	itt	eq
    388a:	42a9      	cmpeq	r1, r5
    388c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3890:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3894:	4a41      	ldr	r2, [pc, #260]	; (399c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    3896:	6010      	str	r0, [r2, #0]
    3898:	4a42      	ldr	r2, [pc, #264]	; (39a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    389a:	4841      	ldr	r0, [pc, #260]	; (39a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    389c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    38a0:	f102 0c04 	add.w	ip, r2, #4
    38a4:	f04f 0400 	mov.w	r4, #0
    38a8:	2b00      	cmp	r3, #0
    38aa:	d062      	beq.n	3972 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    38ac:	483e      	ldr	r0, [pc, #248]	; (39a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    38ae:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    38b2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    38b6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    38ba:	bf00      	nop
    38bc:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    38c0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    38c4:	f04f 0801 	mov.w	r8, #1
    38c8:	2800      	cmp	r0, #0
    38ca:	bf01      	itttt	eq
    38cc:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    38d0:	2800      	cmpeq	r0, #0
    38d2:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    38d6:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    38da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    38de:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    38e2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    38e6:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    38ea:	4830      	ldr	r0, [pc, #192]	; (39ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    38ec:	f8d0 c000 	ldr.w	ip, [r0]
    38f0:	eba5 0c0c 	sub.w	ip, r5, ip
    38f4:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    38f8:	f1bc 0f02 	cmp.w	ip, #2
    38fc:	d344      	bcc.n	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    38fe:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3902:	d841      	bhi.n	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3904:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3908:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    390c:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3910:	b12b      	cbz	r3, 391e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    3912:	6802      	ldr	r2, [r0, #0]
    3914:	1a8a      	subs	r2, r1, r2
    3916:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    391a:	2a02      	cmp	r2, #2
    391c:	d3f9      	bcc.n	3912 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    391e:	f8c7 8004 	str.w	r8, [r7, #4]
    3922:	703c      	strb	r4, [r7, #0]
    3924:	f7ff ff50 	bl	37c8 <MPSL_IRQ_TIMER0_Handler+0x100>
    3928:	4821      	ldr	r0, [pc, #132]	; (39b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    392a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    392e:	f364 0101 	bfi	r1, r4, #0, #2
    3932:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3936:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    393a:	2102      	movs	r1, #2
    393c:	f361 0201 	bfi	r2, r1, #0, #2
    3940:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3944:	2104      	movs	r1, #4
    3946:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    394a:	f8c0 800c 	str.w	r8, [r0, #12]
    394e:	6879      	ldr	r1, [r7, #4]
    3950:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3954:	1580      	asrs	r0, r0, #22
    3956:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    395a:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    395e:	4915      	ldr	r1, [pc, #84]	; (39b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3960:	05c0      	lsls	r0, r0, #23
    3962:	6008      	str	r0, [r1, #0]
    3964:	2004      	movs	r0, #4
    3966:	60bd      	str	r5, [r7, #8]
    3968:	7070      	strb	r0, [r6, #1]
    396a:	f886 8000 	strb.w	r8, [r6]
    396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3972:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3976:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    397a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    397e:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    3982:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3986:	e799      	b.n	38bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    3988:	2000      	movs	r0, #0
    398a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    398e:	f240 2193 	movw	r1, #659	; 0x293
    3992:	206c      	movs	r0, #108	; 0x6c
    3994:	f000 fe68 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3998:	2000004a 	.word	0x2000004a
    399c:	4001f508 	.word	0x4001f508
    39a0:	fffbfffd 	.word	0xfffbfffd
    39a4:	4000b000 	.word	0x4000b000
    39a8:	fffafffd 	.word	0xfffafffd
    39ac:	4000b504 	.word	0x4000b504
    39b0:	40008000 	.word	0x40008000
    39b4:	4001f504 	.word	0x4001f504

000039b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    39b8:	b570      	push	{r4, r5, r6, lr}
    39ba:	4c2a      	ldr	r4, [pc, #168]	; (3a64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    39bc:	68a1      	ldr	r1, [r4, #8]
    39be:	4281      	cmp	r1, r0
    39c0:	bf14      	ite	ne
    39c2:	2201      	movne	r2, #1
    39c4:	2200      	moveq	r2, #0
    39c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3a68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    39ca:	f89c 5000 	ldrb.w	r5, [ip]
    39ce:	2d02      	cmp	r5, #2
    39d0:	d002      	beq.n	39d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    39d2:	2a00      	cmp	r2, #0
    39d4:	d034      	beq.n	3a40 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    39d6:	e002      	b.n	39de <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    39d8:	2a00      	cmp	r2, #0
    39da:	bf08      	it	eq
    39dc:	bd70      	popeq	{r4, r5, r6, pc}
    39de:	7862      	ldrb	r2, [r4, #1]
    39e0:	b39a      	cbz	r2, 3a4a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    39e2:	4b22      	ldr	r3, [pc, #136]	; (3a6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    39e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    39e8:	601a      	str	r2, [r3, #0]
    39ea:	4b21      	ldr	r3, [pc, #132]	; (3a70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    39ec:	1392      	asrs	r2, r2, #14
    39ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    39f2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    39f6:	2200      	movs	r2, #0
    39f8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    39fc:	4a1d      	ldr	r2, [pc, #116]	; (3a74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    39fe:	6816      	ldr	r6, [r2, #0]
    3a00:	1b86      	subs	r6, r0, r6
    3a02:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3a06:	2e02      	cmp	r6, #2
    3a08:	d324      	bcc.n	3a54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3a0a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3a0e:	d821      	bhi.n	3a54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3a10:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a14:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3a18:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3a1c:	b12d      	cbz	r5, 3a2a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3a1e:	6813      	ldr	r3, [r2, #0]
    3a20:	1acb      	subs	r3, r1, r3
    3a22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3a26:	2b02      	cmp	r3, #2
    3a28:	d3f9      	bcc.n	3a1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3a2a:	4b13      	ldr	r3, [pc, #76]	; (3a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3a2c:	2102      	movs	r1, #2
    3a2e:	074a      	lsls	r2, r1, #29
    3a30:	601a      	str	r2, [r3, #0]
    3a32:	60a0      	str	r0, [r4, #8]
    3a34:	2004      	movs	r0, #4
    3a36:	f88c 0001 	strb.w	r0, [ip, #1]
    3a3a:	f88c 1000 	strb.w	r1, [ip]
    3a3e:	bd70      	pop	{r4, r5, r6, pc}
    3a40:	f240 21a1 	movw	r1, #673	; 0x2a1
    3a44:	206c      	movs	r0, #108	; 0x6c
    3a46:	f000 fe0f 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a4a:	f240 21a5 	movw	r1, #677	; 0x2a5
    3a4e:	206c      	movs	r0, #108	; 0x6c
    3a50:	f000 fe0a 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a54:	2000      	movs	r0, #0
    3a56:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a5a:	f240 21b1 	movw	r1, #689	; 0x2b1
    3a5e:	206c      	movs	r0, #108	; 0x6c
    3a60:	f000 fe02 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a64:	20000048 	.word	0x20000048
    3a68:	2000004a 	.word	0x2000004a
    3a6c:	4001f508 	.word	0x4001f508
    3a70:	4000b000 	.word	0x4000b000
    3a74:	4000b504 	.word	0x4000b504
    3a78:	4001f504 	.word	0x4001f504

00003a7c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3a7c:	4801      	ldr	r0, [pc, #4]	; (3a84 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3a7e:	6880      	ldr	r0, [r0, #8]
    3a80:	4770      	bx	lr
    3a82:	0000      	.short	0x0000
    3a84:	20000048 	.word	0x20000048

00003a88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a8c:	4836      	ldr	r0, [pc, #216]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3a8e:	4a35      	ldr	r2, [pc, #212]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3a90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3a94:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3a98:	1d03      	adds	r3, r0, #4
    3a9a:	2100      	movs	r1, #0
    3a9c:	f89c 4000 	ldrb.w	r4, [ip]
    3aa0:	b184      	cbz	r4, 3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    3aa2:	4a33      	ldr	r2, [pc, #204]	; (3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>)
    3aa4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3aa8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3aac:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3ab0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3ab4:	2301      	movs	r3, #1
    3ab6:	2a00      	cmp	r2, #0
    3ab8:	bf04      	itt	eq
    3aba:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3abe:	2800      	cmpeq	r0, #0
    3ac0:	d111      	bne.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3ac2:	e00a      	b.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
    3ac4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3ac8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3acc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3ad0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3ad4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3ad8:	e7ea      	b.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3ada:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3ade:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3ae2:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3ae6:	2c02      	cmp	r4, #2
    3ae8:	d004      	beq.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
    3aea:	f240 21bd 	movw	r1, #701	; 0x2bd
    3aee:	206c      	movs	r0, #108	; 0x6c
    3af0:	f000 fdba 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3af4:	4e1f      	ldr	r6, [pc, #124]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3af6:	6830      	ldr	r0, [r6, #0]
    3af8:	4c1f      	ldr	r4, [pc, #124]	; (3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>)
    3afa:	1cc0      	adds	r0, r0, #3
    3afc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b00:	68a2      	ldr	r2, [r4, #8]
    3b02:	4d1e      	ldr	r5, [pc, #120]	; (3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>)
    3b04:	4290      	cmp	r0, r2
    3b06:	d00b      	beq.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b08:	6837      	ldr	r7, [r6, #0]
    3b0a:	1bd7      	subs	r7, r2, r7
    3b0c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3b10:	2f04      	cmp	r7, #4
    3b12:	d305      	bcc.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b14:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3b18:	d802      	bhi.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3b1a:	f7ff fead 	bl	3878 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3b1e:	e01b      	b.n	3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>
    3b20:	6830      	ldr	r0, [r6, #0]
    3b22:	1a10      	subs	r0, r2, r0
    3b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b28:	2802      	cmp	r0, #2
    3b2a:	d313      	bcc.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b30:	d810      	bhi.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b32:	4a13      	ldr	r2, [pc, #76]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3b34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3b38:	6010      	str	r0, [r2, #0]
    3b3a:	6063      	str	r3, [r4, #4]
    3b3c:	7021      	strb	r1, [r4, #0]
    3b3e:	606b      	str	r3, [r5, #4]
    3b40:	60eb      	str	r3, [r5, #12]
    3b42:	0040      	lsls	r0, r0, #1
    3b44:	1f11      	subs	r1, r2, #4
    3b46:	6008      	str	r0, [r1, #0]
    3b48:	2004      	movs	r0, #4
    3b4a:	f88c 0001 	strb.w	r0, [ip, #1]
    3b4e:	f88c 3000 	strb.w	r3, [ip]
    3b52:	e001      	b.n	3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>
    3b54:	6063      	str	r3, [r4, #4]
    3b56:	7021      	strb	r1, [r4, #0]
    3b58:	6860      	ldr	r0, [r4, #4]
    3b5a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b62:	0000      	.short	0x0000
    3b64:	fffbfffd 	.word	0xfffbfffd
    3b68:	4000b000 	.word	0x4000b000
    3b6c:	2000004a 	.word	0x2000004a
    3b70:	fffafffd 	.word	0xfffafffd
    3b74:	4000b504 	.word	0x4000b504
    3b78:	20000048 	.word	0x20000048
    3b7c:	40008000 	.word	0x40008000
    3b80:	4001f508 	.word	0x4001f508

00003b84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b88:	4a54      	ldr	r2, [pc, #336]	; (3cdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    3b8a:	2500      	movs	r5, #0
    3b8c:	2401      	movs	r4, #1
    3b8e:	f892 c000 	ldrb.w	ip, [r2]
    3b92:	7853      	ldrb	r3, [r2, #1]
    3b94:	f44f 76a0 	mov.w	r6, #320	; 0x140
    3b98:	2807      	cmp	r0, #7
    3b9a:	d27d      	bcs.n	3c98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3b9c:	e8df f000 	tbb	[pc, r0]
    3ba0:	04040404 	.word	0x04040404
    3ba4:	00585858 	.word	0x00585858
    3ba8:	4a4d      	ldr	r2, [pc, #308]	; (3ce0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    3baa:	6897      	ldr	r7, [r2, #8]
    3bac:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    3bb0:	bf04      	itt	eq
    3bb2:	7852      	ldrbeq	r2, [r2, #1]
    3bb4:	2a00      	cmpeq	r2, #0
    3bb6:	d003      	beq.n	3bc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3bb8:	f1bc 0f02 	cmp.w	ip, #2
    3bbc:	d005      	beq.n	3bca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3bbe:	e026      	b.n	3c0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3bc0:	f240 314d 	movw	r1, #845	; 0x34d
    3bc4:	206c      	movs	r0, #108	; 0x6c
    3bc6:	f000 fd4f 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bca:	1f1a      	subs	r2, r3, #4
    3bcc:	b2d2      	uxtb	r2, r2
    3bce:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    3bd2:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    3bd6:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3bda:	2200      	movs	r2, #0
    3bdc:	f1bc 0f01 	cmp.w	ip, #1
    3be0:	d003      	beq.n	3bea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    3be2:	f1bc 0f02 	cmp.w	ip, #2
    3be6:	d008      	beq.n	3bfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3be8:	e00e      	b.n	3c08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3bea:	2b04      	cmp	r3, #4
    3bec:	bf24      	itt	cs
    3bee:	6837      	ldrcs	r7, [r6, #0]
    3bf0:	2f00      	cmpcs	r7, #0
    3bf2:	bf08      	it	eq
    3bf4:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3bf8:	e006      	b.n	3c08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3bfa:	2b04      	cmp	r3, #4
    3bfc:	bf24      	itt	cs
    3bfe:	6837      	ldrcs	r7, [r6, #0]
    3c00:	2f00      	cmpcs	r7, #0
    3c02:	bf08      	it	eq
    3c04:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3c08:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3c0c:	d1e5      	bne.n	3bda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3c0e:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    3c12:	f100 0210 	add.w	r2, r0, #16
    3c16:	fa04 f202 	lsl.w	r2, r4, r2
    3c1a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3c22:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3c26:	b2db      	uxtb	r3, r3
    3c28:	4463      	add	r3, ip
    3c2a:	601c      	str	r4, [r3, #0]
    3c2c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3c30:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3c34:	eba1 0303 	sub.w	r3, r1, r3
    3c38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3c3c:	2b03      	cmp	r3, #3
    3c3e:	bf26      	itte	cs
    3c40:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3c44:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3c48:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3c4c:	d237      	bcs.n	3cbe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3c4e:	e03c      	b.n	3cca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3c50:	f1bc 0f00 	cmp.w	ip, #0
    3c54:	d006      	beq.n	3c64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3c56:	4283      	cmp	r3, r0
    3c58:	d104      	bne.n	3c64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3c5a:	f240 316d 	movw	r1, #877	; 0x36d
    3c5e:	206c      	movs	r0, #108	; 0x6c
    3c60:	f000 fd02 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c64:	1f02      	subs	r2, r0, #4
    3c66:	b2d3      	uxtb	r3, r2
    3c68:	2b03      	cmp	r3, #3
    3c6a:	d304      	bcc.n	3c76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3c6c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    3c70:	206c      	movs	r0, #108	; 0x6c
    3c72:	f000 fcf9 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c76:	f8df c070 	ldr.w	ip, [pc, #112]	; 3ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    3c7a:	f103 0210 	add.w	r2, r3, #16
    3c7e:	fa04 f202 	lsl.w	r2, r4, r2
    3c82:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3c86:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3c8a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3c8e:	f84c 5003 	str.w	r5, [ip, r3]
    3c92:	4b16      	ldr	r3, [pc, #88]	; (3cec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	e000      	b.n	3c9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3c98:	e01a      	b.n	3cd0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    3c9a:	1f00      	subs	r0, r0, #4
    3c9c:	1acb      	subs	r3, r1, r3
    3c9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ca2:	b2c0      	uxtb	r0, r0
    3ca4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3ca8:	2b02      	cmp	r3, #2
    3caa:	d30b      	bcc.n	3cc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    3cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3cb0:	d808      	bhi.n	3cc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    3cb2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3cb6:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3cba:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3cbe:	2001      	movs	r0, #1
    3cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc4:	2100      	movs	r1, #0
    3cc6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3cca:	2000      	movs	r0, #0
    3ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cd0:	f240 3171 	movw	r1, #881	; 0x371
    3cd4:	206c      	movs	r0, #108	; 0x6c
    3cd6:	f000 fcc7 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cda:	0000      	.short	0x0000
    3cdc:	2000004a 	.word	0x2000004a
    3ce0:	20000048 	.word	0x20000048
    3ce4:	40008000 	.word	0x40008000
    3ce8:	4000b000 	.word	0x4000b000
    3cec:	4000b504 	.word	0x4000b504

00003cf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3cf4:	2601      	movs	r6, #1
    3cf6:	2700      	movs	r7, #0
    3cf8:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3cfc:	2807      	cmp	r0, #7
    3cfe:	d251      	bcs.n	3da4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3d00:	e8df f000 	tbb	[pc, r0]
    3d04:	04040404 	.word	0x04040404
    3d08:	00191919 	.word	0x00191919
    3d0c:	f100 0110 	add.w	r1, r0, #16
    3d10:	fa06 f201 	lsl.w	r2, r6, r1
    3d14:	4926      	ldr	r1, [pc, #152]	; (3db0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3d16:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3d1a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3d1e:	2200      	movs	r2, #0
    3d20:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3d24:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3d28:	508f      	str	r7, [r1, r2]
    3d2a:	4922      	ldr	r1, [pc, #136]	; (3db4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3d2c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3d30:	9000      	str	r0, [sp, #0]
    3d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d36:	4d20      	ldr	r5, [pc, #128]	; (3db8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3d38:	1f01      	subs	r1, r0, #4
    3d3a:	b2cc      	uxtb	r4, r1
    3d3c:	7829      	ldrb	r1, [r5, #0]
    3d3e:	b179      	cbz	r1, 3d60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3d40:	786a      	ldrb	r2, [r5, #1]
    3d42:	4282      	cmp	r2, r0
    3d44:	d10c      	bne.n	3d60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3d46:	4a1d      	ldr	r2, [pc, #116]	; (3dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3d48:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3d4c:	6010      	str	r0, [r2, #0]
    3d4e:	2901      	cmp	r1, #1
    3d50:	bf08      	it	eq
    3d52:	f7ff fd39 	bleq	37c8 <MPSL_IRQ_TIMER0_Handler+0x100>
    3d56:	702f      	strb	r7, [r5, #0]
    3d58:	4919      	ldr	r1, [pc, #100]	; (3dc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3d5a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3d5e:	6088      	str	r0, [r1, #8]
    3d60:	4918      	ldr	r1, [pc, #96]	; (3dc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3d62:	f104 0010 	add.w	r0, r4, #16
    3d66:	fa06 f000 	lsl.w	r0, r6, r0
    3d6a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3d6e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3d72:	00a0      	lsls	r0, r4, #2
    3d74:	4408      	add	r0, r1
    3d76:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3d7a:	4a13      	ldr	r2, [pc, #76]	; (3dc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3d7c:	6812      	ldr	r2, [r2, #0]
    3d7e:	1a80      	subs	r0, r0, r2
    3d80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d84:	2802      	cmp	r0, #2
    3d86:	d307      	bcc.n	3d98 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3d88:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3d8c:	2000      	movs	r0, #0
    3d8e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3d92:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    3d96:	500f      	str	r7, [r1, r0]
    3d98:	480c      	ldr	r0, [pc, #48]	; (3dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3d9a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3d9e:	9000      	str	r0, [sp, #0]
    3da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3da4:	f240 31f5 	movw	r1, #1013	; 0x3f5
    3da8:	206c      	movs	r0, #108	; 0x6c
    3daa:	f000 fc5d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dae:	0000      	.short	0x0000
    3db0:	40008000 	.word	0x40008000
    3db4:	40008140 	.word	0x40008140
    3db8:	2000004a 	.word	0x2000004a
    3dbc:	4001f508 	.word	0x4001f508
    3dc0:	20000048 	.word	0x20000048
    3dc4:	4000b000 	.word	0x4000b000
    3dc8:	4000b504 	.word	0x4000b504
    3dcc:	4000b140 	.word	0x4000b140

00003dd0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3dd0:	4825      	ldr	r0, [pc, #148]	; (3e68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    3dd2:	4a24      	ldr	r2, [pc, #144]	; (3e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    3dd4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3dd8:	4924      	ldr	r1, [pc, #144]	; (3e6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3dda:	1d03      	adds	r3, r0, #4
    3ddc:	f891 c000 	ldrb.w	ip, [r1]
    3de0:	2100      	movs	r1, #0
    3de2:	f1bc 0f00 	cmp.w	ip, #0
    3de6:	d010      	beq.n	3e0a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3de8:	4a21      	ldr	r2, [pc, #132]	; (3e70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3dea:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3dee:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3df2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3df6:	bf00      	nop
    3df8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3dfc:	2a00      	cmp	r2, #0
    3dfe:	bf04      	itt	eq
    3e00:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3e04:	2800      	cmpeq	r0, #0
    3e06:	d111      	bne.n	3e2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3e08:	e00a      	b.n	3e20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3e0a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3e0e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3e12:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3e16:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3e1a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3e1e:	e7eb      	b.n	3df8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3e20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3e24:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3e28:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3e2c:	4811      	ldr	r0, [pc, #68]	; (3e74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3e2e:	f04f 32ff 	mov.w	r2, #4294967295
    3e32:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3e36:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3e3a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3e3e:	f100 0204 	add.w	r2, r0, #4
    3e42:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3e46:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3e4a:	f102 0204 	add.w	r2, r2, #4
    3e4e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3e52:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3e56:	f102 0204 	add.w	r2, r2, #4
    3e5a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3e5e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    3e62:	4770      	bx	lr
    3e64:	fffbfffd 	.word	0xfffbfffd
    3e68:	4000b000 	.word	0x4000b000
    3e6c:	2000004a 	.word	0x2000004a
    3e70:	fffafffd 	.word	0xfffafffd
    3e74:	40008000 	.word	0x40008000

00003e78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3e78:	b510      	push	{r4, lr}
    3e7a:	2807      	cmp	r0, #7
    3e7c:	d20d      	bcs.n	3e9a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3e7e:	e8df f000 	tbb	[pc, r0]
    3e82:	0404      	.short	0x0404
    3e84:	06060404 	.word	0x06060404
    3e88:	0006      	.short	0x0006
    3e8a:	4906      	ldr	r1, [pc, #24]	; (3ea4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3e8c:	e002      	b.n	3e94 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3e8e:	1f00      	subs	r0, r0, #4
    3e90:	4905      	ldr	r1, [pc, #20]	; (3ea8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3e92:	b2c0      	uxtb	r0, r0
    3e94:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3e98:	bd10      	pop	{r4, pc}
    3e9a:	f240 3195 	movw	r1, #917	; 0x395
    3e9e:	206c      	movs	r0, #108	; 0x6c
    3ea0:	f000 fbe2 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ea4:	40008140 	.word	0x40008140
    3ea8:	4000b140 	.word	0x4000b140

00003eac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3eac:	b570      	push	{r4, r5, r6, lr}
    3eae:	481f      	ldr	r0, [pc, #124]	; (3f2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3eb0:	2400      	movs	r4, #0
    3eb2:	2104      	movs	r1, #4
    3eb4:	7004      	strb	r4, [r0, #0]
    3eb6:	1e80      	subs	r0, r0, #2
    3eb8:	7001      	strb	r1, [r0, #0]
    3eba:	0589      	lsls	r1, r1, #22
    3ebc:	60c4      	str	r4, [r0, #12]
    3ebe:	6081      	str	r1, [r0, #8]
    3ec0:	f7ff fc82 	bl	37c8 <MPSL_IRQ_TIMER0_Handler+0x100>
    3ec4:	2501      	movs	r5, #1
    3ec6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3eca:	02eb      	lsls	r3, r5, #11
    3ecc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3ed0:	f3bf 8f4f 	dsb	sy
    3ed4:	f3bf 8f6f 	isb	sy
    3ed8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3edc:	4814      	ldr	r0, [pc, #80]	; (3f30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3ede:	6045      	str	r5, [r0, #4]
    3ee0:	6085      	str	r5, [r0, #8]
    3ee2:	4914      	ldr	r1, [pc, #80]	; (3f34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3ee4:	680a      	ldr	r2, [r1, #0]
    3ee6:	2a00      	cmp	r2, #0
    3ee8:	d1fc      	bne.n	3ee4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3eea:	1e51      	subs	r1, r2, #1
    3eec:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3ef0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3ef4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3ef8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3efc:	490e      	ldr	r1, [pc, #56]	; (3f38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3efe:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3f02:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3f06:	1d09      	adds	r1, r1, #4
    3f08:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3f0c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3f10:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3f14:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3f18:	6005      	str	r5, [r0, #0]
    3f1a:	f44f 7182 	mov.w	r1, #260	; 0x104
    3f1e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3f22:	2102      	movs	r1, #2
    3f24:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3f28:	bd70      	pop	{r4, r5, r6, pc}
    3f2a:	0000      	.short	0x0000
    3f2c:	2000004a 	.word	0x2000004a
    3f30:	4000b000 	.word	0x4000b000
    3f34:	4000b504 	.word	0x4000b504
    3f38:	4000b004 	.word	0x4000b004

00003f3c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3f3c:	4808      	ldr	r0, [pc, #32]	; (3f60 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3f3e:	f990 0000 	ldrsb.w	r0, [r0]
    3f42:	2800      	cmp	r0, #0
    3f44:	bfb8      	it	lt
    3f46:	4770      	bxlt	lr
    3f48:	f000 011f 	and.w	r1, r0, #31
    3f4c:	2201      	movs	r2, #1
    3f4e:	fa02 f101 	lsl.w	r1, r2, r1
    3f52:	0940      	lsrs	r0, r0, #5
    3f54:	0080      	lsls	r0, r0, #2
    3f56:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3f5a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f5e:	4770      	bx	lr
    3f60:	20000328 	.word	0x20000328

00003f64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3f64:	4803      	ldr	r0, [pc, #12]	; (3f74 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3f66:	7800      	ldrb	r0, [r0, #0]
    3f68:	2803      	cmp	r0, #3
    3f6a:	bf0c      	ite	eq
    3f6c:	2001      	moveq	r0, #1
    3f6e:	2000      	movne	r0, #0
    3f70:	4770      	bx	lr
    3f72:	0000      	.short	0x0000
    3f74:	20000314 	.word	0x20000314

00003f78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3f78:	4801      	ldr	r0, [pc, #4]	; (3f80 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3f7a:	8840      	ldrh	r0, [r0, #2]
    3f7c:	4770      	bx	lr
    3f7e:	0000      	.short	0x0000
    3f80:	20000314 	.word	0x20000314

00003f84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3f84:	4803      	ldr	r0, [pc, #12]	; (3f94 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3f86:	7800      	ldrb	r0, [r0, #0]
    3f88:	2802      	cmp	r0, #2
    3f8a:	bf16      	itet	ne
    3f8c:	2803      	cmpne	r0, #3
    3f8e:	2001      	moveq	r0, #1
    3f90:	2000      	movne	r0, #0
    3f92:	4770      	bx	lr
    3f94:	20000314 	.word	0x20000314

00003f98 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3f98:	4802      	ldr	r0, [pc, #8]	; (3fa4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3f9a:	2100      	movs	r1, #0
    3f9c:	7001      	strb	r1, [r0, #0]
    3f9e:	8041      	strh	r1, [r0, #2]
    3fa0:	4770      	bx	lr
    3fa2:	0000      	.short	0x0000
    3fa4:	20000314 	.word	0x20000314

00003fa8 <MPSL_IRQ_CLOCK_Handler>:
    3fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fac:	4c16      	ldr	r4, [pc, #88]	; (4008 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3fae:	7a60      	ldrb	r0, [r4, #9]
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d027      	beq.n	4004 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
    3fb8:	058d      	lsls	r5, r1, #22
    3fba:	4628      	mov	r0, r5
    3fbc:	f008 ff7b 	bl	ceb6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3fc0:	4680      	mov	r8, r0
    3fc2:	f44f 7182 	mov.w	r1, #260	; 0x104
    3fc6:	4628      	mov	r0, r5
    3fc8:	f008 ff75 	bl	ceb6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3fcc:	2600      	movs	r6, #0
    3fce:	4607      	mov	r7, r0
    3fd0:	f1b8 0f00 	cmp.w	r8, #0
    3fd4:	d009      	beq.n	3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fd6:	2001      	movs	r0, #1
    3fd8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3fdc:	7920      	ldrb	r0, [r4, #4]
    3fde:	b120      	cbz	r0, 3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fe0:	7126      	strb	r6, [r4, #4]
    3fe2:	69e0      	ldr	r0, [r4, #28]
    3fe4:	b108      	cbz	r0, 3fea <MPSL_IRQ_CLOCK_Handler+0x42>
    3fe6:	4780      	blx	r0
    3fe8:	61e6      	str	r6, [r4, #28]
    3fea:	b137      	cbz	r7, 3ffa <MPSL_IRQ_CLOCK_Handler+0x52>
    3fec:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3ff0:	2002      	movs	r0, #2
    3ff2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3ff6:	f000 fa6b 	bl	44d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3ffa:	4640      	mov	r0, r8
    3ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4000:	f000 b858 	b.w	40b4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    4004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4008:	20000058 	.word	0x20000058
    400c:	b510      	push	{r4, lr}
    400e:	f008 fffc 	bl	d00a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4012:	b930      	cbnz	r0, 4022 <MPSL_IRQ_CLOCK_Handler+0x7a>
    4014:	f009 f81a 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4018:	b918      	cbnz	r0, 4022 <MPSL_IRQ_CLOCK_Handler+0x7a>
    401a:	f009 f84d 	bl	d0b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    401e:	2800      	cmp	r0, #0
    4020:	d002      	beq.n	4028 <MPSL_IRQ_CLOCK_Handler+0x80>
    4022:	4902      	ldr	r1, [pc, #8]	; (402c <MPSL_IRQ_CLOCK_Handler+0x84>)
    4024:	2002      	movs	r0, #2
    4026:	6008      	str	r0, [r1, #0]
    4028:	bd10      	pop	{r4, pc}
    402a:	0000      	.short	0x0000
    402c:	40000c34 	.word	0x40000c34
    4030:	b570      	push	{r4, r5, r6, lr}
    4032:	f000 f991 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4036:	f000 fa9f 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    403a:	4c09      	ldr	r4, [pc, #36]	; (4060 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    403c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4040:	b130      	cbz	r0, 4050 <MPSL_IRQ_CLOCK_Handler+0xa8>
    4042:	f7ff ffe3 	bl	400c <MPSL_IRQ_CLOCK_Handler+0x64>
    4046:	2001      	movs	r0, #1
    4048:	6128      	str	r0, [r5, #16]
    404a:	2004      	movs	r0, #4
    404c:	72a0      	strb	r0, [r4, #10]
    404e:	e004      	b.n	405a <MPSL_IRQ_CLOCK_Handler+0xb2>
    4050:	2003      	movs	r0, #3
    4052:	72a0      	strb	r0, [r4, #10]
    4054:	2001      	movs	r0, #1
    4056:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    405a:	2000      	movs	r0, #0
    405c:	71e0      	strb	r0, [r4, #7]
    405e:	bd70      	pop	{r4, r5, r6, pc}
    4060:	20000058 	.word	0x20000058
    4064:	b570      	push	{r4, r5, r6, lr}
    4066:	4c12      	ldr	r4, [pc, #72]	; (40b0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    4068:	79a0      	ldrb	r0, [r4, #6]
    406a:	b1e0      	cbz	r0, 40a6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    406c:	79e1      	ldrb	r1, [r4, #7]
    406e:	1e40      	subs	r0, r0, #1
    4070:	4281      	cmp	r1, r0
    4072:	da18      	bge.n	40a6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4074:	f000 fa80 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4078:	4605      	mov	r5, r0
    407a:	f000 fb69 	bl	4750 <mpsl_temperature_get>
    407e:	79a1      	ldrb	r1, [r4, #6]
    4080:	2901      	cmp	r1, #1
    4082:	d902      	bls.n	408a <MPSL_IRQ_CLOCK_Handler+0xe2>
    4084:	79e1      	ldrb	r1, [r4, #7]
    4086:	1c49      	adds	r1, r1, #1
    4088:	71e1      	strb	r1, [r4, #7]
    408a:	b10d      	cbz	r5, 4090 <MPSL_IRQ_CLOCK_Handler+0xe8>
    408c:	6961      	ldr	r1, [r4, #20]
    408e:	e000      	b.n	4092 <MPSL_IRQ_CLOCK_Handler+0xea>
    4090:	6921      	ldr	r1, [r4, #16]
    4092:	1a41      	subs	r1, r0, r1
    4094:	2902      	cmp	r1, #2
    4096:	da02      	bge.n	409e <MPSL_IRQ_CLOCK_Handler+0xf6>
    4098:	f111 0f02 	cmn.w	r1, #2
    409c:	dc07      	bgt.n	40ae <MPSL_IRQ_CLOCK_Handler+0x106>
    409e:	b10d      	cbz	r5, 40a4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    40a0:	6160      	str	r0, [r4, #20]
    40a2:	e000      	b.n	40a6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    40a4:	6120      	str	r0, [r4, #16]
    40a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40aa:	f7ff bfc1 	b.w	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    40ae:	bd70      	pop	{r4, r5, r6, pc}
    40b0:	20000058 	.word	0x20000058
    40b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40b8:	4606      	mov	r6, r0
    40ba:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    40be:	f44f 7186 	mov.w	r1, #268	; 0x10c
    40c2:	4628      	mov	r0, r5
    40c4:	f008 fef7 	bl	ceb6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40c8:	4680      	mov	r8, r0
    40ca:	f44f 7188 	mov.w	r1, #272	; 0x110
    40ce:	4628      	mov	r0, r5
    40d0:	f008 fef1 	bl	ceb6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40d4:	4c27      	ldr	r4, [pc, #156]	; (4174 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    40d6:	4682      	mov	sl, r0
    40d8:	7827      	ldrb	r7, [r4, #0]
    40da:	f104 0008 	add.w	r0, r4, #8
    40de:	f008 ff5e 	bl	cf9e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    40e2:	b110      	cbz	r0, 40ea <MPSL_IRQ_CLOCK_Handler+0x142>
    40e4:	f240 11b9 	movw	r1, #441	; 0x1b9
    40e8:	e016      	b.n	4118 <MPSL_IRQ_CLOCK_Handler+0x170>
    40ea:	f04f 0901 	mov.w	r9, #1
    40ee:	b146      	cbz	r6, 4102 <MPSL_IRQ_CLOCK_Handler+0x15a>
    40f0:	7aa0      	ldrb	r0, [r4, #10]
    40f2:	2803      	cmp	r0, #3
    40f4:	d105      	bne.n	4102 <MPSL_IRQ_CLOCK_Handler+0x15a>
    40f6:	2004      	movs	r0, #4
    40f8:	72a0      	strb	r0, [r4, #10]
    40fa:	f7ff ff87 	bl	400c <MPSL_IRQ_CLOCK_Handler+0x64>
    40fe:	f8c5 9010 	str.w	r9, [r5, #16]
    4102:	2600      	movs	r6, #0
    4104:	f1b8 0f00 	cmp.w	r8, #0
    4108:	d018      	beq.n	413c <MPSL_IRQ_CLOCK_Handler+0x194>
    410a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    410e:	7aa0      	ldrb	r0, [r4, #10]
    4110:	2804      	cmp	r0, #4
    4112:	d004      	beq.n	411e <MPSL_IRQ_CLOCK_Handler+0x176>
    4114:	f240 11cb 	movw	r1, #459	; 0x1cb
    4118:	206d      	movs	r0, #109	; 0x6d
    411a:	f000 faa5 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    411e:	f008 ff74 	bl	d00a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4122:	b928      	cbnz	r0, 4130 <MPSL_IRQ_CLOCK_Handler+0x188>
    4124:	f008 ff92 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4128:	b910      	cbnz	r0, 4130 <MPSL_IRQ_CLOCK_Handler+0x188>
    412a:	f008 ffc5 	bl	d0b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    412e:	b108      	cbz	r0, 4134 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4130:	4811      	ldr	r0, [pc, #68]	; (4178 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4132:	6006      	str	r6, [r0, #0]
    4134:	2002      	movs	r0, #2
    4136:	72a0      	strb	r0, [r4, #10]
    4138:	f000 f8f2 	bl	4320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    413c:	f1ba 0f00 	cmp.w	sl, #0
    4140:	d008      	beq.n	4154 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4142:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4146:	7aa0      	ldrb	r0, [r4, #10]
    4148:	2802      	cmp	r0, #2
    414a:	d101      	bne.n	4150 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    414c:	f7ff ff8a 	bl	4064 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4150:	f8c5 9014 	str.w	r9, [r5, #20]
    4154:	b13f      	cbz	r7, 4166 <MPSL_IRQ_CLOCK_Handler+0x1be>
    4156:	7026      	strb	r6, [r4, #0]
    4158:	7aa0      	ldrb	r0, [r4, #10]
    415a:	2802      	cmp	r0, #2
    415c:	d101      	bne.n	4162 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    415e:	f7ff ff67 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    4162:	f000 f8dd 	bl	4320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    416a:	4802      	ldr	r0, [pc, #8]	; (4174 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    416c:	3008      	adds	r0, #8
    416e:	f008 bf2d 	b.w	cfcc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4172:	0000      	.short	0x0000
    4174:	20000058 	.word	0x20000058
    4178:	40000c34 	.word	0x40000c34
    417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4180:	4c5f      	ldr	r4, [pc, #380]	; (4300 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4182:	2700      	movs	r7, #0
    4184:	4606      	mov	r6, r0
    4186:	61a7      	str	r7, [r4, #24]
    4188:	7842      	ldrb	r2, [r0, #1]
    418a:	7881      	ldrb	r1, [r0, #2]
    418c:	7800      	ldrb	r0, [r0, #0]
    418e:	72e0      	strb	r0, [r4, #11]
    4190:	7162      	strb	r2, [r4, #5]
    4192:	71a1      	strb	r1, [r4, #6]
    4194:	71e7      	strb	r7, [r4, #7]
    4196:	f04f 0801 	mov.w	r8, #1
    419a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    419e:	2805      	cmp	r0, #5
    41a0:	d225      	bcs.n	41ee <MPSL_IRQ_CLOCK_Handler+0x246>
    41a2:	e8df f000 	tbb	[pc, r0]
    41a6:	0310      	.short	0x0310
    41a8:	00222006 	.word	0x00222006
    41ac:	f8c4 8018 	str.w	r8, [r4, #24]
    41b0:	e009      	b.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    41b2:	f000 f8d1 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41b6:	2101      	movs	r1, #1
    41b8:	4628      	mov	r0, r5
    41ba:	f008 fe81 	bl	cec0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    41be:	2800      	cmp	r0, #0
    41c0:	d0f9      	beq.n	41b6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    41c2:	2002      	movs	r0, #2
    41c4:	61a0      	str	r0, [r4, #24]
    41c6:	f008 fea7 	bl	cf18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    41ca:	b1b0      	cbz	r0, 41fa <MPSL_IRQ_CLOCK_Handler+0x252>
    41cc:	f000 f9ee 	bl	45ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    41d0:	7e21      	ldrb	r1, [r4, #24]
    41d2:	f001 0103 	and.w	r1, r1, #3
    41d6:	4288      	cmp	r0, r1
    41d8:	d10f      	bne.n	41fa <MPSL_IRQ_CLOCK_Handler+0x252>
    41da:	79b0      	ldrb	r0, [r6, #6]
    41dc:	b150      	cbz	r0, 41f4 <MPSL_IRQ_CLOCK_Handler+0x24c>
    41de:	2002      	movs	r0, #2
    41e0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    41e4:	e070      	b.n	42c8 <MPSL_IRQ_CLOCK_Handler+0x320>
    41e6:	4847      	ldr	r0, [pc, #284]	; (4304 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    41e8:	e7ec      	b.n	41c4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    41ea:	4847      	ldr	r0, [pc, #284]	; (4308 <MPSL_IRQ_CLOCK_Handler+0x360>)
    41ec:	e7ea      	b.n	41c4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    41ee:	f240 313a 	movw	r1, #826	; 0x33a
    41f2:	e04d      	b.n	4290 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    41f4:	f000 f9ae 	bl	4554 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    41f8:	e066      	b.n	42c8 <MPSL_IRQ_CLOCK_Handler+0x320>
    41fa:	f8c5 800c 	str.w	r8, [r5, #12]
    41fe:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4202:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4206:	69a0      	ldr	r0, [r4, #24]
    4208:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    420c:	f008 fee9 	bl	cfe2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4210:	b940      	cbnz	r0, 4224 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4212:	f008 fef0 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4216:	b928      	cbnz	r0, 4224 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4218:	f008 ff04 	bl	d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    421c:	b910      	cbnz	r0, 4224 <MPSL_IRQ_CLOCK_Handler+0x27c>
    421e:	f008 ff15 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4222:	b138      	cbz	r0, 4234 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4224:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4228:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    422c:	4937      	ldr	r1, [pc, #220]	; (430c <MPSL_IRQ_CLOCK_Handler+0x364>)
    422e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4232:	6008      	str	r0, [r1, #0]
    4234:	f008 fed5 	bl	cfe2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4238:	b940      	cbnz	r0, 424c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    423a:	f008 fedc 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    423e:	b928      	cbnz	r0, 424c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4240:	f008 fef0 	bl	d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4244:	b910      	cbnz	r0, 424c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4246:	f008 ff01 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    424a:	b118      	cbz	r0, 4254 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    424c:	492f      	ldr	r1, [pc, #188]	; (430c <MPSL_IRQ_CLOCK_Handler+0x364>)
    424e:	3110      	adds	r1, #16
    4250:	f8c1 8000 	str.w	r8, [r1]
    4254:	f8c5 8008 	str.w	r8, [r5, #8]
    4258:	2002      	movs	r0, #2
    425a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    425e:	79b0      	ldrb	r0, [r6, #6]
    4260:	bb90      	cbnz	r0, 42c8 <MPSL_IRQ_CLOCK_Handler+0x320>
    4262:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4266:	f010 0f02 	tst.w	r0, #2
    426a:	d00f      	beq.n	428c <MPSL_IRQ_CLOCK_Handler+0x2e4>
    426c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4310 <MPSL_IRQ_CLOCK_Handler+0x368>
    4270:	f8d9 1000 	ldr.w	r1, [r9]
    4274:	43c9      	mvns	r1, r1
    4276:	f341 1100 	sbfx	r1, r1, #4, #1
    427a:	f101 0801 	add.w	r8, r1, #1
    427e:	f8d9 1000 	ldr.w	r1, [r9]
    4282:	f041 0110 	orr.w	r1, r1, #16
    4286:	f8c9 1000 	str.w	r1, [r9]
    428a:	e007      	b.n	429c <MPSL_IRQ_CLOCK_Handler+0x2f4>
    428c:	f240 21fb 	movw	r1, #763	; 0x2fb
    4290:	206d      	movs	r0, #109	; 0x6d
    4292:	f000 f9e9 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4296:	bf00      	nop
    4298:	f000 fb10 	bl	48bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    429c:	4651      	mov	r1, sl
    429e:	4628      	mov	r0, r5
    42a0:	f008 fe09 	bl	ceb6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    42a4:	2800      	cmp	r0, #0
    42a6:	d0f7      	beq.n	4298 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    42a8:	f000 f954 	bl	4554 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    42ac:	f1b8 0f00 	cmp.w	r8, #0
    42b0:	d105      	bne.n	42be <MPSL_IRQ_CLOCK_Handler+0x316>
    42b2:	f8d9 1000 	ldr.w	r1, [r9]
    42b6:	f021 0110 	bic.w	r1, r1, #16
    42ba:	f8c9 1000 	str.w	r1, [r9]
    42be:	2002      	movs	r0, #2
    42c0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    42c4:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    42c8:	79a0      	ldrb	r0, [r4, #6]
    42ca:	b170      	cbz	r0, 42ea <MPSL_IRQ_CLOCK_Handler+0x342>
    42cc:	7830      	ldrb	r0, [r6, #0]
    42ce:	b960      	cbnz	r0, 42ea <MPSL_IRQ_CLOCK_Handler+0x342>
    42d0:	f000 f952 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    42d4:	4606      	mov	r6, r0
    42d6:	f000 fa3b 	bl	4750 <mpsl_temperature_get>
    42da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    42de:	b116      	cbz	r6, 42e6 <MPSL_IRQ_CLOCK_Handler+0x33e>
    42e0:	e9c4 1004 	strd	r1, r0, [r4, #16]
    42e4:	e001      	b.n	42ea <MPSL_IRQ_CLOCK_Handler+0x342>
    42e6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    42ea:	2101      	movs	r1, #1
    42ec:	4628      	mov	r0, r5
    42ee:	f008 fde7 	bl	cec0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42f2:	b108      	cbz	r0, 42f8 <MPSL_IRQ_CLOCK_Handler+0x350>
    42f4:	f000 f93a 	bl	456c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    42f8:	72a7      	strb	r7, [r4, #10]
    42fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fe:	0000      	.short	0x0000
    4300:	20000058 	.word	0x20000058
    4304:	00020001 	.word	0x00020001
    4308:	00030001 	.word	0x00030001
    430c:	4000053c 	.word	0x4000053c
    4310:	e000ed10 	.word	0xe000ed10

00004314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4314:	4801      	ldr	r0, [pc, #4]	; (431c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4316:	89c0      	ldrh	r0, [r0, #14]
    4318:	4770      	bx	lr
    431a:	0000      	.short	0x0000
    431c:	20000058 	.word	0x20000058

00004320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4320:	b510      	push	{r4, lr}
    4322:	f3ef 8410 	mrs	r4, PRIMASK
    4326:	b672      	cpsid	i
    4328:	480a      	ldr	r0, [pc, #40]	; (4354 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    432a:	7841      	ldrb	r1, [r0, #1]
    432c:	b129      	cbz	r1, 433a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    432e:	7841      	ldrb	r1, [r0, #1]
    4330:	1e49      	subs	r1, r1, #1
    4332:	7041      	strb	r1, [r0, #1]
    4334:	7841      	ldrb	r1, [r0, #1]
    4336:	b129      	cbz	r1, 4344 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4338:	e008      	b.n	434c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    433a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    433e:	206d      	movs	r0, #109	; 0x6d
    4340:	f000 f992 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4344:	7880      	ldrb	r0, [r0, #2]
    4346:	b908      	cbnz	r0, 434c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4348:	f000 f924 	bl	4594 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    434c:	2c00      	cmp	r4, #0
    434e:	d100      	bne.n	4352 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4350:	b662      	cpsie	i
    4352:	bd10      	pop	{r4, pc}
    4354:	20000058 	.word	0x20000058

00004358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4358:	b510      	push	{r4, lr}
    435a:	f3ef 8410 	mrs	r4, PRIMASK
    435e:	b672      	cpsid	i
    4360:	4806      	ldr	r0, [pc, #24]	; (437c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4362:	7841      	ldrb	r1, [r0, #1]
    4364:	1c49      	adds	r1, r1, #1
    4366:	7041      	strb	r1, [r0, #1]
    4368:	7840      	ldrb	r0, [r0, #1]
    436a:	2801      	cmp	r0, #1
    436c:	d101      	bne.n	4372 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    436e:	f008 fdbe 	bl	ceee <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4372:	2c00      	cmp	r4, #0
    4374:	d100      	bne.n	4378 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4376:	b662      	cpsie	i
    4378:	bd10      	pop	{r4, pc}
    437a:	0000      	.short	0x0000
    437c:	20000058 	.word	0x20000058

00004380 <mpsl_clock_hfclk_release>:
    4380:	4805      	ldr	r0, [pc, #20]	; (4398 <mpsl_clock_hfclk_release+0x18>)
    4382:	b510      	push	{r4, lr}
    4384:	78c1      	ldrb	r1, [r0, #3]
    4386:	b121      	cbz	r1, 4392 <mpsl_clock_hfclk_release+0x12>
    4388:	2100      	movs	r1, #0
    438a:	7101      	strb	r1, [r0, #4]
    438c:	70c1      	strb	r1, [r0, #3]
    438e:	f7ff ffc7 	bl	4320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4392:	2000      	movs	r0, #0
    4394:	bd10      	pop	{r4, pc}
    4396:	0000      	.short	0x0000
    4398:	20000058 	.word	0x20000058

0000439c <mpsl_clock_hfclk_request>:
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	4c0c      	ldr	r4, [pc, #48]	; (43d0 <mpsl_clock_hfclk_request+0x34>)
    43a0:	78e1      	ldrb	r1, [r4, #3]
    43a2:	b961      	cbnz	r1, 43be <mpsl_clock_hfclk_request+0x22>
    43a4:	2501      	movs	r5, #1
    43a6:	70e5      	strb	r5, [r4, #3]
    43a8:	61e0      	str	r0, [r4, #28]
    43aa:	f7ff ffd5 	bl	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    43ae:	f000 f8e3 	bl	4578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    43b2:	b130      	cbz	r0, 43c2 <mpsl_clock_hfclk_request+0x26>
    43b4:	69e0      	ldr	r0, [r4, #28]
    43b6:	b110      	cbz	r0, 43be <mpsl_clock_hfclk_request+0x22>
    43b8:	4780      	blx	r0
    43ba:	2000      	movs	r0, #0
    43bc:	61e0      	str	r0, [r4, #28]
    43be:	2000      	movs	r0, #0
    43c0:	bd70      	pop	{r4, r5, r6, pc}
    43c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    43c6:	7125      	strb	r5, [r4, #4]
    43c8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    43cc:	e7f7      	b.n	43be <mpsl_clock_hfclk_request+0x22>
    43ce:	0000      	.short	0x0000
    43d0:	20000058 	.word	0x20000058

000043d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43d8:	0005      	movs	r5, r0
    43da:	f06f 0015 	mvn.w	r0, #21
    43de:	d03f      	beq.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43e0:	7829      	ldrb	r1, [r5, #0]
    43e2:	2904      	cmp	r1, #4
    43e4:	d83c      	bhi.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43e6:	2900      	cmp	r1, #0
    43e8:	7869      	ldrb	r1, [r5, #1]
    43ea:	d03b      	beq.n	4464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    43ec:	2900      	cmp	r1, #0
    43ee:	d137      	bne.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43f0:	78a9      	ldrb	r1, [r5, #2]
    43f2:	2900      	cmp	r1, #0
    43f4:	d134      	bne.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    43f6:	2000      	movs	r0, #0
    43f8:	f008 fd28 	bl	ce4c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    43fc:	2000      	movs	r0, #0
    43fe:	f008 fd18 	bl	ce32 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4402:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4406:	f04f 31ff 	mov.w	r1, #4294967295
    440a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    440e:	2600      	movs	r6, #0
    4410:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4414:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4418:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    441c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4420:	4c14      	ldr	r4, [pc, #80]	; (4474 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4422:	7066      	strb	r6, [r4, #1]
    4424:	88a8      	ldrh	r0, [r5, #4]
    4426:	81a0      	strh	r0, [r4, #12]
    4428:	f008 fd58 	bl	cedc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    442c:	2701      	movs	r7, #1
    442e:	b108      	cbz	r0, 4434 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4430:	70e7      	strb	r7, [r4, #3]
    4432:	7067      	strb	r7, [r4, #1]
    4434:	2101      	movs	r1, #1
    4436:	4640      	mov	r0, r8
    4438:	f008 fd42 	bl	cec0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    443c:	b108      	cbz	r0, 4442 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    443e:	f000 f895 	bl	456c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4442:	f240 50f5 	movw	r0, #1525	; 0x5f5
    4446:	81e0      	strh	r0, [r4, #14]
    4448:	4628      	mov	r0, r5
    444a:	f7ff fe97 	bl	417c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    444e:	7267      	strb	r7, [r4, #9]
    4450:	2000      	movs	r0, #0
    4452:	f008 fcee 	bl	ce32 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    445a:	4630      	mov	r0, r6
    445c:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4464:	2900      	cmp	r1, #0
    4466:	d0fb      	beq.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4468:	2920      	cmp	r1, #32
    446a:	d8f9      	bhi.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    446c:	78a9      	ldrb	r1, [r5, #2]
    446e:	2921      	cmp	r1, #33	; 0x21
    4470:	d9c1      	bls.n	43f6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4472:	e7f5      	b.n	4460 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4474:	20000058 	.word	0x20000058

00004478 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4478:	4801      	ldr	r0, [pc, #4]	; (4480 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    447a:	8980      	ldrh	r0, [r0, #12]
    447c:	4770      	bx	lr
    447e:	0000      	.short	0x0000
    4480:	20000058 	.word	0x20000058

00004484 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4484:	b510      	push	{r4, lr}
    4486:	480d      	ldr	r0, [pc, #52]	; (44bc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4488:	f008 fd89 	bl	cf9e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    448c:	490b      	ldr	r1, [pc, #44]	; (44bc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    448e:	3908      	subs	r1, #8
    4490:	b148      	cbz	r0, 44a6 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4492:	2001      	movs	r0, #1
    4494:	7008      	strb	r0, [r1, #0]
    4496:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    449a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    449e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44a2:	f7ff bf59 	b.w	4358 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44a6:	7a88      	ldrb	r0, [r1, #10]
    44a8:	2802      	cmp	r0, #2
    44aa:	d101      	bne.n	44b0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    44ac:	f7ff fdc0 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    44b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44b4:	4801      	ldr	r0, [pc, #4]	; (44bc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    44b6:	f008 bd89 	b.w	cfcc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    44ba:	0000      	.short	0x0000
    44bc:	20000060 	.word	0x20000060

000044c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    44c0:	4802      	ldr	r0, [pc, #8]	; (44cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    44c2:	7a80      	ldrb	r0, [r0, #10]
    44c4:	2800      	cmp	r0, #0
    44c6:	d000      	beq.n	44ca <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    44c8:	2001      	movs	r0, #1
    44ca:	4770      	bx	lr
    44cc:	20000058 	.word	0x20000058

000044d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44d2:	4d1f      	ldr	r5, [pc, #124]	; (4550 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    44d4:	7ae8      	ldrb	r0, [r5, #11]
    44d6:	2800      	cmp	r0, #0
    44d8:	d10f      	bne.n	44fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    44da:	7e28      	ldrb	r0, [r5, #24]
    44dc:	f000 0003 	and.w	r0, r0, #3
    44e0:	f008 fd0a 	bl	cef8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    44e4:	2800      	cmp	r0, #0
    44e6:	d008      	beq.n	44fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    44e8:	f3ef 8110 	mrs	r1, PRIMASK
    44ec:	b672      	cpsid	i
    44ee:	f7ff ffe7 	bl	44c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    44f2:	b118      	cbz	r0, 44fc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    44f4:	2900      	cmp	r1, #0
    44f6:	d100      	bne.n	44fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    44f8:	b662      	cpsie	i
    44fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44fc:	2601      	movs	r6, #1
    44fe:	72ae      	strb	r6, [r5, #10]
    4500:	b901      	cbnz	r1, 4504 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4502:	b662      	cpsie	i
    4504:	2018      	movs	r0, #24
    4506:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    450a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    450e:	61a6      	str	r6, [r4, #24]
    4510:	f44f 7020 	mov.w	r0, #640	; 0x280
    4514:	f8ad 0000 	strh.w	r0, [sp]
    4518:	f8bd 0000 	ldrh.w	r0, [sp]
    451c:	1e41      	subs	r1, r0, #1
    451e:	f8ad 1000 	strh.w	r1, [sp]
    4522:	d2f9      	bcs.n	4518 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4524:	2700      	movs	r7, #0
    4526:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    452a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    452e:	4808      	ldr	r0, [pc, #32]	; (4550 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4530:	3008      	adds	r0, #8
    4532:	f008 fd47 	bl	cfc4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4536:	702f      	strb	r7, [r5, #0]
    4538:	f7ff fd7a 	bl	4030 <MPSL_IRQ_CLOCK_Handler+0x88>
    453c:	6166      	str	r6, [r4, #20]
    453e:	7968      	ldrb	r0, [r5, #5]
    4540:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4544:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4548:	2018      	movs	r0, #24
    454a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4550:	20000058 	.word	0x20000058

00004554 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4554:	b510      	push	{r4, lr}
    4556:	4c04      	ldr	r4, [pc, #16]	; (4568 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4558:	7e20      	ldrb	r0, [r4, #24]
    455a:	f000 0003 	and.w	r0, r0, #3
    455e:	f008 fccb 	bl	cef8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4562:	2800      	cmp	r0, #0
    4564:	d0f8      	beq.n	4558 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4566:	bd10      	pop	{r4, pc}
    4568:	20000058 	.word	0x20000058

0000456c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    456c:	4901      	ldr	r1, [pc, #4]	; (4574 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    456e:	2001      	movs	r0, #1
    4570:	7008      	strb	r0, [r1, #0]
    4572:	4770      	bx	lr
    4574:	20000329 	.word	0x20000329

00004578 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    457c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4580:	b918      	cbnz	r0, 458a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4582:	4803      	ldr	r0, [pc, #12]	; (4590 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4584:	7800      	ldrb	r0, [r0, #0]
    4586:	2800      	cmp	r0, #0
    4588:	d000      	beq.n	458c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    458a:	2001      	movs	r0, #1
    458c:	4770      	bx	lr
    458e:	0000      	.short	0x0000
    4590:	20000329 	.word	0x20000329

00004594 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4594:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4598:	2101      	movs	r1, #1
    459a:	6041      	str	r1, [r0, #4]
    459c:	2100      	movs	r1, #0
    459e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    45a2:	4801      	ldr	r0, [pc, #4]	; (45a8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    45a4:	7001      	strb	r1, [r0, #0]
    45a6:	4770      	bx	lr
    45a8:	20000329 	.word	0x20000329

000045ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    45ac:	4802      	ldr	r0, [pc, #8]	; (45b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    45ae:	6800      	ldr	r0, [r0, #0]
    45b0:	f000 0003 	and.w	r0, r0, #3
    45b4:	4770      	bx	lr
    45b6:	0000      	.short	0x0000
    45b8:	4000041c 	.word	0x4000041c
    45bc:	b510      	push	{r4, lr}
    45be:	b131      	cbz	r1, 45ce <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    45c0:	2901      	cmp	r1, #1
    45c2:	d007      	beq.n	45d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    45c4:	f240 3102 	movw	r1, #770	; 0x302
    45c8:	a005      	add	r0, pc, #20	; (adr r0, 45e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    45ca:	f000 f821 	bl	4610 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    45ce:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    45d2:	e001      	b.n	45d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    45d4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    45d8:	f000 0001 	and.w	r0, r0, #1
    45dc:	bd10      	pop	{r4, pc}
    45de:	0000      	.short	0x0000
    45e0:	5f66726e 	.word	0x5f66726e
    45e4:	636f6c63 	.word	0x636f6c63
    45e8:	00682e6b 	.word	0x00682e6b
    45ec:	f3bf 8f4f 	dsb	sy
    45f0:	4805      	ldr	r0, [pc, #20]	; (4608 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    45f2:	6801      	ldr	r1, [r0, #0]
    45f4:	4a05      	ldr	r2, [pc, #20]	; (460c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    45f6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    45fa:	4311      	orrs	r1, r2
    45fc:	6001      	str	r1, [r0, #0]
    45fe:	f3bf 8f4f 	dsb	sy
    4602:	bf00      	nop
    4604:	e7fd      	b.n	4602 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4606:	0000      	.short	0x0000
    4608:	e000ed0c 	.word	0xe000ed0c
    460c:	05fa0004 	.word	0x05fa0004

00004610 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4610:	b672      	cpsid	i
    4612:	4a03      	ldr	r2, [pc, #12]	; (4620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4614:	6852      	ldr	r2, [r2, #4]
    4616:	b102      	cbz	r2, 461a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4618:	4790      	blx	r2
    461a:	f7ff ffe7 	bl	45ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    461e:	0000      	.short	0x0000
    4620:	20000078 	.word	0x20000078
    4624:	4806      	ldr	r0, [pc, #24]	; (4640 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4626:	b510      	push	{r4, lr}
    4628:	2100      	movs	r1, #0
    462a:	6001      	str	r1, [r0, #0]
    462c:	2101      	movs	r1, #1
    462e:	6001      	str	r1, [r0, #0]
    4630:	4608      	mov	r0, r1
    4632:	f008 fc88 	bl	cf46 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    463a:	2001      	movs	r0, #1
    463c:	f008 bc76 	b.w	cf2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4640:	40001ffc 	.word	0x40001ffc
    4644:	4807      	ldr	r0, [pc, #28]	; (4664 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4646:	b510      	push	{r4, lr}
    4648:	2101      	movs	r1, #1
    464a:	6041      	str	r1, [r0, #4]
    464c:	1e89      	subs	r1, r1, #2
    464e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4652:	200c      	movs	r0, #12
    4654:	f008 fc77 	bl	cf46 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    465c:	200c      	movs	r0, #12
    465e:	f008 bc65 	b.w	cf2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4662:	0000      	.short	0x0000
    4664:	4000c000 	.word	0x4000c000

00004668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4668:	b50e      	push	{r1, r2, r3, lr}
    466a:	b672      	cpsid	i
    466c:	4a0f      	ldr	r2, [pc, #60]	; (46ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    466e:	6855      	ldr	r5, [r2, #4]
    4670:	b1d5      	cbz	r5, 46a8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4672:	2200      	movs	r2, #0
    4674:	4603      	mov	r3, r0
    4676:	466e      	mov	r6, sp
    4678:	240a      	movs	r4, #10
    467a:	e003      	b.n	4684 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    467c:	fbb0 f0f4 	udiv	r0, r0, r4
    4680:	1c52      	adds	r2, r2, #1
    4682:	b2d2      	uxtb	r2, r2
    4684:	2800      	cmp	r0, #0
    4686:	d1f9      	bne.n	467c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4688:	54b0      	strb	r0, [r6, r2]
    468a:	e009      	b.n	46a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    468c:	fbb3 f0f4 	udiv	r0, r3, r4
    4690:	fb04 3010 	mls	r0, r4, r0, r3
    4694:	fbb3 f3f4 	udiv	r3, r3, r4
    4698:	1e52      	subs	r2, r2, #1
    469a:	b2d2      	uxtb	r2, r2
    469c:	3030      	adds	r0, #48	; 0x30
    469e:	54b0      	strb	r0, [r6, r2]
    46a0:	2a00      	cmp	r2, #0
    46a2:	d1f3      	bne.n	468c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    46a4:	4630      	mov	r0, r6
    46a6:	47a8      	blx	r5
    46a8:	f7ff ffa0 	bl	45ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    46ac:	20000078 	.word	0x20000078

000046b0 <mpsl_init>:
    46b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46b4:	4c18      	ldr	r4, [pc, #96]	; (4718 <mpsl_init+0x68>)
    46b6:	4606      	mov	r6, r0
    46b8:	4617      	mov	r7, r2
    46ba:	7860      	ldrb	r0, [r4, #1]
    46bc:	460d      	mov	r5, r1
    46be:	b118      	cbz	r0, 46c8 <mpsl_init+0x18>
    46c0:	f04f 30ff 	mov.w	r0, #4294967295
    46c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46c8:	f7fc fbe6 	bl	e98 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    46cc:	b906      	cbnz	r6, 46d0 <mpsl_init+0x20>
    46ce:	4e13      	ldr	r6, [pc, #76]	; (471c <mpsl_init+0x6c>)
    46d0:	6067      	str	r7, [r4, #4]
    46d2:	7025      	strb	r5, [r4, #0]
    46d4:	f7ff ffa6 	bl	4624 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    46d8:	f7ff ffb4 	bl	4644 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    46dc:	4630      	mov	r0, r6
    46de:	f7ff fe79 	bl	43d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    46e2:	0006      	movs	r6, r0
    46e4:	d1ee      	bne.n	46c4 <mpsl_init+0x14>
    46e6:	f7fe fe77 	bl	33d8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    46ea:	f7ff fef1 	bl	44d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    46ee:	f008 faed 	bl	cccc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    46f2:	4628      	mov	r0, r5
    46f4:	f008 fc1a 	bl	cf2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    46f8:	2001      	movs	r0, #1
    46fa:	2d00      	cmp	r5, #0
    46fc:	db09      	blt.n	4712 <mpsl_init+0x62>
    46fe:	f005 011f 	and.w	r1, r5, #31
    4702:	fa00 f101 	lsl.w	r1, r0, r1
    4706:	096a      	lsrs	r2, r5, #5
    4708:	0092      	lsls	r2, r2, #2
    470a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    470e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4712:	7060      	strb	r0, [r4, #1]
    4714:	4630      	mov	r0, r6
    4716:	e7d5      	b.n	46c4 <mpsl_init+0x14>
    4718:	20000078 	.word	0x20000078
    471c:	0000cf68 	.word	0x0000cf68

00004720 <mpsl_is_initialized>:
    4720:	4801      	ldr	r0, [pc, #4]	; (4728 <mpsl_is_initialized+0x8>)
    4722:	7840      	ldrb	r0, [r0, #1]
    4724:	4770      	bx	lr
    4726:	0000      	.short	0x0000
    4728:	20000078 	.word	0x20000078

0000472c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    472c:	4807      	ldr	r0, [pc, #28]	; (474c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    472e:	f990 0000 	ldrsb.w	r0, [r0]
    4732:	2800      	cmp	r0, #0
    4734:	db09      	blt.n	474a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4736:	f000 021f 	and.w	r2, r0, #31
    473a:	2101      	movs	r1, #1
    473c:	4091      	lsls	r1, r2
    473e:	0940      	lsrs	r0, r0, #5
    4740:	0080      	lsls	r0, r0, #2
    4742:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4746:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    474a:	4770      	bx	lr
    474c:	20000078 	.word	0x20000078

00004750 <mpsl_temperature_get>:
    4750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4754:	2601      	movs	r6, #1
    4756:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    475a:	0331      	lsls	r1, r6, #12
    475c:	f04f 0800 	mov.w	r8, #0
    4760:	4640      	mov	r0, r8
    4762:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4766:	f3bf 8f4f 	dsb	sy
    476a:	f3bf 8f6f 	isb	sy
    476e:	4c16      	ldr	r4, [pc, #88]	; (47c8 <mpsl_temperature_get+0x78>)
    4770:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4774:	200c      	movs	r0, #12
    4776:	f008 fc05 	bl	cf84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    477a:	4d14      	ldr	r5, [pc, #80]	; (47cc <mpsl_temperature_get+0x7c>)
    477c:	6828      	ldr	r0, [r5, #0]
    477e:	43c0      	mvns	r0, r0
    4780:	f340 1700 	sbfx	r7, r0, #4, #1
    4784:	6828      	ldr	r0, [r5, #0]
    4786:	f040 0010 	orr.w	r0, r0, #16
    478a:	6028      	str	r0, [r5, #0]
    478c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4790:	6026      	str	r6, [r4, #0]
    4792:	1c7f      	adds	r7, r7, #1
    4794:	e002      	b.n	479c <mpsl_temperature_get+0x4c>
    4796:	bf00      	nop
    4798:	f000 f890 	bl	48bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    479c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    47a0:	2800      	cmp	r0, #0
    47a2:	d0f9      	beq.n	4798 <mpsl_temperature_get+0x48>
    47a4:	b91f      	cbnz	r7, 47ae <mpsl_temperature_get+0x5e>
    47a6:	6828      	ldr	r0, [r5, #0]
    47a8:	f020 0010 	bic.w	r0, r0, #16
    47ac:	6028      	str	r0, [r5, #0]
    47ae:	4808      	ldr	r0, [pc, #32]	; (47d0 <mpsl_temperature_get+0x80>)
    47b0:	6805      	ldr	r5, [r0, #0]
    47b2:	6066      	str	r6, [r4, #4]
    47b4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    47b8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    47bc:	200c      	movs	r0, #12
    47be:	f008 fbe1 	bl	cf84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    47c2:	4628      	mov	r0, r5
    47c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47c8:	4000c000 	.word	0x4000c000
    47cc:	e000ed10 	.word	0xe000ed10
    47d0:	4000c508 	.word	0x4000c508

000047d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    47d4:	b510      	push	{r4, lr}
    47d6:	4602      	mov	r2, r0
    47d8:	2005      	movs	r0, #5
    47da:	490c      	ldr	r1, [pc, #48]	; (480c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    47dc:	e004      	b.n	47e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    47de:	bf00      	nop
    47e0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    47e4:	791b      	ldrb	r3, [r3, #4]
    47e6:	b133      	cbz	r3, 47f6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    47e8:	1e40      	subs	r0, r0, #1
    47ea:	b2c0      	uxtb	r0, r0
    47ec:	d2f8      	bcs.n	47e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    47ee:	2148      	movs	r1, #72	; 0x48
    47f0:	2069      	movs	r0, #105	; 0x69
    47f2:	f7ff ff39 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47f6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    47fa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    47fe:	2200      	movs	r2, #0
    4800:	714a      	strb	r2, [r1, #5]
    4802:	718a      	strb	r2, [r1, #6]
    4804:	2201      	movs	r2, #1
    4806:	710a      	strb	r2, [r1, #4]
    4808:	bd10      	pop	{r4, pc}
    480a:	0000      	.short	0x0000
    480c:	200012c4 	.word	0x200012c4

00004810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4810:	b510      	push	{r4, lr}
    4812:	2805      	cmp	r0, #5
    4814:	d301      	bcc.n	481a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4816:	2158      	movs	r1, #88	; 0x58
    4818:	e006      	b.n	4828 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    481a:	490a      	ldr	r1, [pc, #40]	; (4844 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    481c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4820:	7901      	ldrb	r1, [r0, #4]
    4822:	2901      	cmp	r1, #1
    4824:	d003      	beq.n	482e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4826:	2159      	movs	r1, #89	; 0x59
    4828:	2069      	movs	r0, #105	; 0x69
    482a:	f7ff ff1d 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    482e:	7941      	ldrb	r1, [r0, #5]
    4830:	7982      	ldrb	r2, [r0, #6]
    4832:	1c49      	adds	r1, r1, #1
    4834:	b2c9      	uxtb	r1, r1
    4836:	428a      	cmp	r2, r1
    4838:	d000      	beq.n	483c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    483a:	7141      	strb	r1, [r0, #5]
    483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4840:	f7ff bf74 	b.w	472c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4844:	200012c4 	.word	0x200012c4

00004848 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4848:	b570      	push	{r4, r5, r6, lr}
    484a:	2505      	movs	r5, #5
    484c:	4e0e      	ldr	r6, [pc, #56]	; (4888 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    484e:	4c0f      	ldr	r4, [pc, #60]	; (488c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4850:	e016      	b.n	4880 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4852:	7821      	ldrb	r1, [r4, #0]
    4854:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4858:	7902      	ldrb	r2, [r0, #4]
    485a:	2a01      	cmp	r2, #1
    485c:	d108      	bne.n	4870 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    485e:	7942      	ldrb	r2, [r0, #5]
    4860:	7983      	ldrb	r3, [r0, #6]
    4862:	429a      	cmp	r2, r3
    4864:	d004      	beq.n	4870 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4866:	7942      	ldrb	r2, [r0, #5]
    4868:	7182      	strb	r2, [r0, #6]
    486a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    486e:	4780      	blx	r0
    4870:	7820      	ldrb	r0, [r4, #0]
    4872:	1c40      	adds	r0, r0, #1
    4874:	b2c0      	uxtb	r0, r0
    4876:	7020      	strb	r0, [r4, #0]
    4878:	2805      	cmp	r0, #5
    487a:	d301      	bcc.n	4880 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    487c:	2000      	movs	r0, #0
    487e:	7020      	strb	r0, [r4, #0]
    4880:	1e6d      	subs	r5, r5, #1
    4882:	b2ed      	uxtb	r5, r5
    4884:	d2e5      	bcs.n	4852 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4886:	bd70      	pop	{r4, r5, r6, pc}
    4888:	200012c4 	.word	0x200012c4
    488c:	2000032a 	.word	0x2000032a

00004890 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4890:	b500      	push	{lr}
    4892:	f008 fba6 	bl	cfe2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4896:	b940      	cbnz	r0, 48aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4898:	f008 fbad 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    489c:	b928      	cbnz	r0, 48aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    489e:	f008 fbc1 	bl	d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    48a2:	b910      	cbnz	r0, 48aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    48a4:	f008 fbd2 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    48a8:	b108      	cbz	r0, 48ae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    48aa:	4802      	ldr	r0, [pc, #8]	; (48b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    48ac:	bd00      	pop	{pc}
    48ae:	4802      	ldr	r0, [pc, #8]	; (48b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    48b0:	bd00      	pop	{pc}
    48b2:	0000      	.short	0x0000
    48b4:	4000050c 	.word	0x4000050c
    48b8:	4001e700 	.word	0x4001e700

000048bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    48bc:	b510      	push	{r4, lr}
    48be:	f008 fbc5 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    48c2:	b330      	cbz	r0, 4912 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    48c4:	f3ef 8010 	mrs	r0, PRIMASK
    48c8:	b1c8      	cbz	r0, 48fe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    48ca:	2100      	movs	r1, #0
    48cc:	b672      	cpsid	i
    48ce:	4812      	ldr	r0, [pc, #72]	; (4918 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    48d0:	6802      	ldr	r2, [r0, #0]
    48d2:	6803      	ldr	r3, [r0, #0]
    48d4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    48d8:	f043 0310 	orr.w	r3, r3, #16
    48dc:	6003      	str	r3, [r0, #0]
    48de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    48e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    48ea:	431c      	orrs	r4, r3
    48ec:	d000      	beq.n	48f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    48ee:	bf40      	sev
    48f0:	bf20      	wfe
    48f2:	bf00      	nop
    48f4:	bf00      	nop
    48f6:	bf00      	nop
    48f8:	bf00      	nop
    48fa:	b112      	cbz	r2, 4902 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    48fc:	e005      	b.n	490a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    48fe:	2101      	movs	r1, #1
    4900:	e7e4      	b.n	48cc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4902:	6802      	ldr	r2, [r0, #0]
    4904:	f022 0210 	bic.w	r2, r2, #16
    4908:	6002      	str	r2, [r0, #0]
    490a:	2900      	cmp	r1, #0
    490c:	d000      	beq.n	4910 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    490e:	b662      	cpsie	i
    4910:	bd10      	pop	{r4, pc}
    4912:	bf20      	wfe
    4914:	bd10      	pop	{r4, pc}
    4916:	0000      	.short	0x0000
    4918:	e000ed10 	.word	0xe000ed10

0000491c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    491c:	4901      	ldr	r1, [pc, #4]	; (4924 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    491e:	2001      	movs	r0, #1
    4920:	7088      	strb	r0, [r1, #2]
    4922:	4770      	bx	lr
    4924:	20000080 	.word	0x20000080

00004928 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4928:	0000d299 0000d2d1 0000d2bb 0000d2a9     ................
    4938:	0000d2b5 0000d2a3 0000d297 0000d295     ................
    4948:	0000d2cd 0000d2c1 0000d2af 0000d29d     ................
    4958:	0000d28f 0000d287 0000d28b 0000d281     ................

00004968 <mpsl_fem_disable>:
    4968:	4801      	ldr	r0, [pc, #4]	; (4970 <mpsl_fem_disable+0x8>)
    496a:	6800      	ldr	r0, [r0, #0]
    496c:	6800      	ldr	r0, [r0, #0]
    496e:	4700      	bx	r0
    4970:	20000094 	.word	0x20000094

00004974 <mpsl_fem_lna_configuration_clear>:
    4974:	4801      	ldr	r0, [pc, #4]	; (497c <mpsl_fem_lna_configuration_clear+0x8>)
    4976:	6800      	ldr	r0, [r0, #0]
    4978:	6940      	ldr	r0, [r0, #20]
    497a:	4700      	bx	r0
    497c:	20000094 	.word	0x20000094

00004980 <mpsl_fem_lna_configuration_set>:
    4980:	4a01      	ldr	r2, [pc, #4]	; (4988 <mpsl_fem_lna_configuration_set+0x8>)
    4982:	6812      	ldr	r2, [r2, #0]
    4984:	68d2      	ldr	r2, [r2, #12]
    4986:	4710      	bx	r2
    4988:	20000094 	.word	0x20000094

0000498c <mpsl_fem_lna_is_configured>:
    498c:	4901      	ldr	r1, [pc, #4]	; (4994 <mpsl_fem_lna_is_configured+0x8>)
    498e:	6809      	ldr	r1, [r1, #0]
    4990:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4992:	4708      	bx	r1
    4994:	20000094 	.word	0x20000094

00004998 <mpsl_fem_pa_configuration_clear>:
    4998:	4801      	ldr	r0, [pc, #4]	; (49a0 <mpsl_fem_pa_configuration_clear+0x8>)
    499a:	6800      	ldr	r0, [r0, #0]
    499c:	6900      	ldr	r0, [r0, #16]
    499e:	4700      	bx	r0
    49a0:	20000094 	.word	0x20000094

000049a4 <mpsl_fem_pa_configuration_set>:
    49a4:	4a01      	ldr	r2, [pc, #4]	; (49ac <mpsl_fem_pa_configuration_set+0x8>)
    49a6:	6812      	ldr	r2, [r2, #0]
    49a8:	6892      	ldr	r2, [r2, #8]
    49aa:	4710      	bx	r2
    49ac:	20000094 	.word	0x20000094

000049b0 <mpsl_fem_pa_gain_set>:
    49b0:	4901      	ldr	r1, [pc, #4]	; (49b8 <mpsl_fem_pa_gain_set+0x8>)
    49b2:	6809      	ldr	r1, [r1, #0]
    49b4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    49b6:	4708      	bx	r1
    49b8:	20000094 	.word	0x20000094

000049bc <mpsl_fem_pa_is_configured>:
    49bc:	4901      	ldr	r1, [pc, #4]	; (49c4 <mpsl_fem_pa_is_configured+0x8>)
    49be:	6809      	ldr	r1, [r1, #0]
    49c0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    49c2:	4708      	bx	r1
    49c4:	20000094 	.word	0x20000094

000049c8 <mpsl_fem_tx_power_split>:
    49c8:	4b01      	ldr	r3, [pc, #4]	; (49d0 <mpsl_fem_tx_power_split+0x8>)
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	685b      	ldr	r3, [r3, #4]
    49ce:	4718      	bx	r3
    49d0:	20000094 	.word	0x20000094

000049d4 <mpsl_fem_device_config_254_apply_get>:
    49d4:	4801      	ldr	r0, [pc, #4]	; (49dc <mpsl_fem_device_config_254_apply_get+0x8>)
    49d6:	7800      	ldrb	r0, [r0, #0]
    49d8:	4770      	bx	lr
    49da:	0000      	.short	0x0000
    49dc:	2000032b 	.word	0x2000032b
    49e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    49e2:	4c14      	ldr	r4, [pc, #80]	; (4a34 <mpsl_fem_device_config_254_apply_get+0x60>)
    49e4:	7a20      	ldrb	r0, [r4, #8]
    49e6:	f88d 0001 	strb.w	r0, [sp, #1]
    49ea:	79e0      	ldrb	r0, [r4, #7]
    49ec:	f88d 0000 	strb.w	r0, [sp]
    49f0:	79a0      	ldrb	r0, [r4, #6]
    49f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    49f6:	7960      	ldrb	r0, [r4, #5]
    49f8:	f8ad 0002 	strh.w	r0, [sp, #2]
    49fc:	4668      	mov	r0, sp
    49fe:	f006 f973 	bl	ace8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4a02:	b108      	cbz	r0, 4a08 <mpsl_fem_device_config_254_apply_get+0x34>
    4a04:	2183      	movs	r1, #131	; 0x83
    4a06:	e010      	b.n	4a2a <mpsl_fem_device_config_254_apply_get+0x56>
    4a08:	68e0      	ldr	r0, [r4, #12]
    4a0a:	9002      	str	r0, [sp, #8]
    4a0c:	a802      	add	r0, sp, #8
    4a0e:	f006 f981 	bl	ad14 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4a12:	b108      	cbz	r0, 4a18 <mpsl_fem_device_config_254_apply_get+0x44>
    4a14:	2187      	movs	r1, #135	; 0x87
    4a16:	e008      	b.n	4a2a <mpsl_fem_device_config_254_apply_get+0x56>
    4a18:	4807      	ldr	r0, [pc, #28]	; (4a38 <mpsl_fem_device_config_254_apply_get+0x64>)
    4a1a:	6800      	ldr	r0, [r0, #0]
    4a1c:	9003      	str	r0, [sp, #12]
    4a1e:	a803      	add	r0, sp, #12
    4a20:	f00b fe46 	bl	106b0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4a24:	2800      	cmp	r0, #0
    4a26:	d003      	beq.n	4a30 <mpsl_fem_device_config_254_apply_get+0x5c>
    4a28:	218b      	movs	r1, #139	; 0x8b
    4a2a:	2003      	movs	r0, #3
    4a2c:	f000 f8ec 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a30:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4a32:	0000      	.short	0x0000
    4a34:	200012ec 	.word	0x200012ec
    4a38:	00004d14 	.word	0x00004d14

00004a3c <sdc_build_revision_get>:
    4a3c:	b510      	push	{r4, lr}
    4a3e:	b128      	cbz	r0, 4a4c <sdc_build_revision_get+0x10>
    4a40:	2214      	movs	r2, #20
    4a42:	4904      	ldr	r1, [pc, #16]	; (4a54 <sdc_build_revision_get+0x18>)
    4a44:	f008 fb42 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a48:	2000      	movs	r0, #0
    4a4a:	bd10      	pop	{r4, pc}
    4a4c:	f06f 0015 	mvn.w	r0, #21
    4a50:	bd10      	pop	{r4, pc}
    4a52:	0000      	.short	0x0000
    4a54:	00004d30 	.word	0x00004d30

00004a58 <sdc_cfg_set>:
    4a58:	b570      	push	{r4, r5, r6, lr}
    4a5a:	0003      	movs	r3, r0
    4a5c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4a60:	d103      	bne.n	4a6a <sdc_cfg_set+0x12>
    4a62:	4c2e      	ldr	r4, [pc, #184]	; (4b1c <sdc_cfg_set+0xc4>)
    4a64:	7863      	ldrb	r3, [r4, #1]
    4a66:	b10b      	cbz	r3, 4a6c <sdc_cfg_set+0x14>
    4a68:	1180      	asrs	r0, r0, #6
    4a6a:	bd70      	pop	{r4, r5, r6, pc}
    4a6c:	b301      	cbz	r1, 4ab0 <sdc_cfg_set+0x58>
    4a6e:	f06f 0515 	mvn.w	r5, #21
    4a72:	b38a      	cbz	r2, 4ad8 <sdc_cfg_set+0x80>
    4a74:	4b2a      	ldr	r3, [pc, #168]	; (4b20 <sdc_cfg_set+0xc8>)
    4a76:	290c      	cmp	r1, #12
    4a78:	d24b      	bcs.n	4b12 <sdc_cfg_set+0xba>
    4a7a:	e8df f001 	tbb	[pc, r1]
    4a7e:	064a      	.short	0x064a
    4a80:	1d1a0c09 	.word	0x1d1a0c09
    4a84:	31202e25 	.word	0x31202e25
    4a88:	3b36      	.short	0x3b36
    4a8a:	7810      	ldrb	r0, [r2, #0]
    4a8c:	7018      	strb	r0, [r3, #0]
    4a8e:	e035      	b.n	4afc <sdc_cfg_set+0xa4>
    4a90:	7810      	ldrb	r0, [r2, #0]
    4a92:	7058      	strb	r0, [r3, #1]
    4a94:	e032      	b.n	4afc <sdc_cfg_set+0xa4>
    4a96:	7890      	ldrb	r0, [r2, #2]
    4a98:	b1f0      	cbz	r0, 4ad8 <sdc_cfg_set+0x80>
    4a9a:	78d0      	ldrb	r0, [r2, #3]
    4a9c:	b1e0      	cbz	r0, 4ad8 <sdc_cfg_set+0x80>
    4a9e:	7810      	ldrb	r0, [r2, #0]
    4aa0:	281b      	cmp	r0, #27
    4aa2:	d336      	bcc.n	4b12 <sdc_cfg_set+0xba>
    4aa4:	7850      	ldrb	r0, [r2, #1]
    4aa6:	281b      	cmp	r0, #27
    4aa8:	d333      	bcc.n	4b12 <sdc_cfg_set+0xba>
    4aaa:	6810      	ldr	r0, [r2, #0]
    4aac:	f8c3 0005 	str.w	r0, [r3, #5]
    4ab0:	e024      	b.n	4afc <sdc_cfg_set+0xa4>
    4ab2:	6810      	ldr	r0, [r2, #0]
    4ab4:	60d8      	str	r0, [r3, #12]
    4ab6:	e021      	b.n	4afc <sdc_cfg_set+0xa4>
    4ab8:	7810      	ldrb	r0, [r2, #0]
    4aba:	7098      	strb	r0, [r3, #2]
    4abc:	e01e      	b.n	4afc <sdc_cfg_set+0xa4>
    4abe:	7811      	ldrb	r1, [r2, #0]
    4ac0:	2900      	cmp	r1, #0
    4ac2:	d1d2      	bne.n	4a6a <sdc_cfg_set+0x12>
    4ac4:	70d9      	strb	r1, [r3, #3]
    4ac6:	e019      	b.n	4afc <sdc_cfg_set+0xa4>
    4ac8:	78e0      	ldrb	r0, [r4, #3]
    4aca:	b110      	cbz	r0, 4ad2 <sdc_cfg_set+0x7a>
    4acc:	7810      	ldrb	r0, [r2, #0]
    4ace:	2802      	cmp	r0, #2
    4ad0:	d31f      	bcc.n	4b12 <sdc_cfg_set+0xba>
    4ad2:	7810      	ldrb	r0, [r2, #0]
    4ad4:	7418      	strb	r0, [r3, #16]
    4ad6:	e011      	b.n	4afc <sdc_cfg_set+0xa4>
    4ad8:	e01b      	b.n	4b12 <sdc_cfg_set+0xba>
    4ada:	8810      	ldrh	r0, [r2, #0]
    4adc:	8258      	strh	r0, [r3, #18]
    4ade:	e00d      	b.n	4afc <sdc_cfg_set+0xa4>
    4ae0:	7811      	ldrb	r1, [r2, #0]
    4ae2:	2900      	cmp	r1, #0
    4ae4:	d1c1      	bne.n	4a6a <sdc_cfg_set+0x12>
    4ae6:	7119      	strb	r1, [r3, #4]
    4ae8:	e008      	b.n	4afc <sdc_cfg_set+0xa4>
    4aea:	7810      	ldrb	r0, [r2, #0]
    4aec:	2802      	cmp	r0, #2
    4aee:	d310      	bcc.n	4b12 <sdc_cfg_set+0xba>
    4af0:	7518      	strb	r0, [r3, #20]
    4af2:	e003      	b.n	4afc <sdc_cfg_set+0xa4>
    4af4:	7811      	ldrb	r1, [r2, #0]
    4af6:	2900      	cmp	r1, #0
    4af8:	d1b7      	bne.n	4a6a <sdc_cfg_set+0x12>
    4afa:	7559      	strb	r1, [r3, #21]
    4afc:	2201      	movs	r2, #1
    4afe:	4908      	ldr	r1, [pc, #32]	; (4b20 <sdc_cfg_set+0xc8>)
    4b00:	2000      	movs	r0, #0
    4b02:	f008 fbff 	bl	d304 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4b06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4b0a:	db04      	blt.n	4b16 <sdc_cfg_set+0xbe>
    4b0c:	f06f 000b 	mvn.w	r0, #11
    4b10:	bd70      	pop	{r4, r5, r6, pc}
    4b12:	4628      	mov	r0, r5
    4b14:	bd70      	pop	{r4, r5, r6, pc}
    4b16:	2101      	movs	r1, #1
    4b18:	70a1      	strb	r1, [r4, #2]
    4b1a:	bd70      	pop	{r4, r5, r6, pc}
    4b1c:	20000098 	.word	0x20000098
    4b20:	200012ec 	.word	0x200012ec

00004b24 <sdc_enable>:
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	460c      	mov	r4, r1
    4b28:	0005      	movs	r5, r0
    4b2a:	d019      	beq.n	4b60 <sdc_enable+0x3c>
    4b2c:	b1c4      	cbz	r4, 4b60 <sdc_enable+0x3c>
    4b2e:	f000 f925 	bl	4d7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4b32:	b1c0      	cbz	r0, 4b66 <sdc_enable+0x42>
    4b34:	4628      	mov	r0, r5
    4b36:	f7ff fe4d 	bl	47d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b3a:	4d0c      	ldr	r5, [pc, #48]	; (4b6c <sdc_enable+0x48>)
    4b3c:	2200      	movs	r2, #0
    4b3e:	490c      	ldr	r1, [pc, #48]	; (4b70 <sdc_enable+0x4c>)
    4b40:	7028      	strb	r0, [r5, #0]
    4b42:	4620      	mov	r0, r4
    4b44:	f008 fbde 	bl	d304 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4b48:	f00c f9f1 	bl	10f2e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4b4c:	2100      	movs	r1, #0
    4b4e:	7828      	ldrb	r0, [r5, #0]
    4b50:	f006 fb28 	bl	b1a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4b54:	f7ff ff44 	bl	49e0 <mpsl_fem_device_config_254_apply_get+0xc>
    4b58:	2001      	movs	r0, #1
    4b5a:	7068      	strb	r0, [r5, #1]
    4b5c:	2000      	movs	r0, #0
    4b5e:	bd70      	pop	{r4, r5, r6, pc}
    4b60:	f06f 0015 	mvn.w	r0, #21
    4b64:	bd70      	pop	{r4, r5, r6, pc}
    4b66:	f04f 30ff 	mov.w	r0, #4294967295
    4b6a:	bd70      	pop	{r4, r5, r6, pc}
    4b6c:	20000098 	.word	0x20000098
    4b70:	200012ec 	.word	0x200012ec

00004b74 <sdc_init>:
    4b74:	b530      	push	{r4, r5, lr}
    4b76:	b087      	sub	sp, #28
    4b78:	0005      	movs	r5, r0
    4b7a:	d00c      	beq.n	4b96 <sdc_init+0x22>
    4b7c:	f7ff fdd0 	bl	4720 <mpsl_is_initialized>
    4b80:	f04f 34ff 	mov.w	r4, #4294967295
    4b84:	b120      	cbz	r0, 4b90 <sdc_init+0x1c>
    4b86:	f7ff fc77 	bl	4478 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4b8a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4b8e:	d905      	bls.n	4b9c <sdc_init+0x28>
    4b90:	4620      	mov	r0, r4
    4b92:	b007      	add	sp, #28
    4b94:	bd30      	pop	{r4, r5, pc}
    4b96:	f06f 0015 	mvn.w	r0, #21
    4b9a:	e7fa      	b.n	4b92 <sdc_init+0x1e>
    4b9c:	4c15      	ldr	r4, [pc, #84]	; (4bf4 <sdc_init+0x80>)
    4b9e:	4816      	ldr	r0, [pc, #88]	; (4bf8 <sdc_init+0x84>)
    4ba0:	6065      	str	r5, [r4, #4]
    4ba2:	f000 f9f5 	bl	4f90 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4ba6:	2000      	movs	r0, #0
    4ba8:	7060      	strb	r0, [r4, #1]
    4baa:	70a0      	strb	r0, [r4, #2]
    4bac:	70e0      	strb	r0, [r4, #3]
    4bae:	4601      	mov	r1, r0
    4bb0:	2218      	movs	r2, #24
    4bb2:	4668      	mov	r0, sp
    4bb4:	f008 fb04 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4bb8:	2218      	movs	r2, #24
    4bba:	4910      	ldr	r1, [pc, #64]	; (4bfc <sdc_init+0x88>)
    4bbc:	4668      	mov	r0, sp
    4bbe:	f008 fa85 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4bc2:	2218      	movs	r2, #24
    4bc4:	4669      	mov	r1, sp
    4bc6:	480e      	ldr	r0, [pc, #56]	; (4c00 <sdc_init+0x8c>)
    4bc8:	f008 fa80 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4bcc:	f3ef 8410 	mrs	r4, PRIMASK
    4bd0:	b672      	cpsid	i
    4bd2:	f06f 000c 	mvn.w	r0, #12
    4bd6:	f000 fd57 	bl	5688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4bda:	480a      	ldr	r0, [pc, #40]	; (4c04 <sdc_init+0x90>)
    4bdc:	f000 fe22 	bl	5824 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4be0:	b118      	cbz	r0, 4bea <sdc_init+0x76>
    4be2:	219e      	movs	r1, #158	; 0x9e
    4be4:	2003      	movs	r0, #3
    4be6:	f000 f80f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bea:	b904      	cbnz	r4, 4bee <sdc_init+0x7a>
    4bec:	b662      	cpsie	i
    4bee:	2000      	movs	r0, #0
    4bf0:	e7cf      	b.n	4b92 <sdc_init+0x1e>
    4bf2:	0000      	.short	0x0000
    4bf4:	20000098 	.word	0x20000098
    4bf8:	000049e1 	.word	0x000049e1
    4bfc:	00004d18 	.word	0x00004d18
    4c00:	200012ec 	.word	0x200012ec
    4c04:	00004da9 	.word	0x00004da9

00004c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4c08:	b50e      	push	{r1, r2, r3, lr}
    4c0a:	b672      	cpsid	i
    4c0c:	4a15      	ldr	r2, [pc, #84]	; (4c64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4c0e:	6855      	ldr	r5, [r2, #4]
    4c10:	b1dd      	cbz	r5, 4c4a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4c12:	2200      	movs	r2, #0
    4c14:	4603      	mov	r3, r0
    4c16:	466e      	mov	r6, sp
    4c18:	240a      	movs	r4, #10
    4c1a:	e003      	b.n	4c24 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4c1c:	fbb0 f0f4 	udiv	r0, r0, r4
    4c20:	1c52      	adds	r2, r2, #1
    4c22:	b2d2      	uxtb	r2, r2
    4c24:	2800      	cmp	r0, #0
    4c26:	d1f9      	bne.n	4c1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4c28:	54b0      	strb	r0, [r6, r2]
    4c2a:	e00a      	b.n	4c42 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4c2c:	b2d8      	uxtb	r0, r3
    4c2e:	fbb0 f7f4 	udiv	r7, r0, r4
    4c32:	fbb3 f3f4 	udiv	r3, r3, r4
    4c36:	fb04 0017 	mls	r0, r4, r7, r0
    4c3a:	1e52      	subs	r2, r2, #1
    4c3c:	b2d2      	uxtb	r2, r2
    4c3e:	3030      	adds	r0, #48	; 0x30
    4c40:	54b0      	strb	r0, [r6, r2]
    4c42:	2a00      	cmp	r2, #0
    4c44:	d1f2      	bne.n	4c2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4c46:	4630      	mov	r0, r6
    4c48:	47a8      	blx	r5
    4c4a:	f3bf 8f4f 	dsb	sy
    4c4e:	4806      	ldr	r0, [pc, #24]	; (4c68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4c50:	6801      	ldr	r1, [r0, #0]
    4c52:	4a06      	ldr	r2, [pc, #24]	; (4c6c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4c54:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4c58:	4311      	orrs	r1, r2
    4c5a:	6001      	str	r1, [r0, #0]
    4c5c:	f3bf 8f4f 	dsb	sy
    4c60:	bf00      	nop
    4c62:	e7fd      	b.n	4c60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4c64:	20000098 	.word	0x20000098
    4c68:	e000ed0c 	.word	0xe000ed0c
    4c6c:	05fa0004 	.word	0x05fa0004

00004c70 <sdc_support_adv>:
    4c70:	4806      	ldr	r0, [pc, #24]	; (4c8c <sdc_support_adv+0x1c>)
    4c72:	b510      	push	{r4, lr}
    4c74:	7881      	ldrb	r1, [r0, #2]
    4c76:	7840      	ldrb	r0, [r0, #1]
    4c78:	4301      	orrs	r1, r0
    4c7a:	d002      	beq.n	4c82 <sdc_support_adv+0x12>
    4c7c:	f04f 30ff 	mov.w	r0, #4294967295
    4c80:	bd10      	pop	{r4, pc}
    4c82:	f006 faad 	bl	b1e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4c86:	2000      	movs	r0, #0
    4c88:	bd10      	pop	{r4, pc}
    4c8a:	0000      	.short	0x0000
    4c8c:	20000098 	.word	0x20000098

00004c90 <sdc_support_dle_peripheral>:
    4c90:	4806      	ldr	r0, [pc, #24]	; (4cac <sdc_support_dle_peripheral+0x1c>)
    4c92:	b510      	push	{r4, lr}
    4c94:	7881      	ldrb	r1, [r0, #2]
    4c96:	7840      	ldrb	r0, [r0, #1]
    4c98:	4301      	orrs	r1, r0
    4c9a:	d002      	beq.n	4ca2 <sdc_support_dle_peripheral+0x12>
    4c9c:	f04f 30ff 	mov.w	r0, #4294967295
    4ca0:	bd10      	pop	{r4, pc}
    4ca2:	f006 f84f 	bl	ad44 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    4ca6:	2000      	movs	r0, #0
    4ca8:	bd10      	pop	{r4, pc}
    4caa:	0000      	.short	0x0000
    4cac:	20000098 	.word	0x20000098

00004cb0 <sdc_support_le_2m_phy>:
    4cb0:	4807      	ldr	r0, [pc, #28]	; (4cd0 <sdc_support_le_2m_phy+0x20>)
    4cb2:	b510      	push	{r4, lr}
    4cb4:	7881      	ldrb	r1, [r0, #2]
    4cb6:	7840      	ldrb	r0, [r0, #1]
    4cb8:	4301      	orrs	r1, r0
    4cba:	d002      	beq.n	4cc2 <sdc_support_le_2m_phy+0x12>
    4cbc:	f04f 30ff 	mov.w	r0, #4294967295
    4cc0:	bd10      	pop	{r4, pc}
    4cc2:	f00b fec2 	bl	10a4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4cc6:	f00b fed0 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4cca:	2000      	movs	r0, #0
    4ccc:	bd10      	pop	{r4, pc}
    4cce:	0000      	.short	0x0000
    4cd0:	20000098 	.word	0x20000098

00004cd4 <sdc_support_peripheral>:
    4cd4:	4806      	ldr	r0, [pc, #24]	; (4cf0 <sdc_support_peripheral+0x1c>)
    4cd6:	b510      	push	{r4, lr}
    4cd8:	7881      	ldrb	r1, [r0, #2]
    4cda:	7840      	ldrb	r0, [r0, #1]
    4cdc:	4301      	orrs	r1, r0
    4cde:	d002      	beq.n	4ce6 <sdc_support_peripheral+0x12>
    4ce0:	f04f 30ff 	mov.w	r0, #4294967295
    4ce4:	bd10      	pop	{r4, pc}
    4ce6:	f006 fa8d 	bl	b204 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4cea:	2000      	movs	r0, #0
    4cec:	bd10      	pop	{r4, pc}
    4cee:	0000      	.short	0x0000
    4cf0:	20000098 	.word	0x20000098

00004cf4 <sdc_support_phy_update_peripheral>:
    4cf4:	4806      	ldr	r0, [pc, #24]	; (4d10 <sdc_support_phy_update_peripheral+0x1c>)
    4cf6:	b510      	push	{r4, lr}
    4cf8:	7881      	ldrb	r1, [r0, #2]
    4cfa:	7840      	ldrb	r0, [r0, #1]
    4cfc:	4301      	orrs	r1, r0
    4cfe:	d002      	beq.n	4d06 <sdc_support_phy_update_peripheral+0x12>
    4d00:	f04f 30ff 	mov.w	r0, #4294967295
    4d04:	bd10      	pop	{r4, pc}
    4d06:	f00b feb0 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4d0a:	2000      	movs	r0, #0
    4d0c:	bd10      	pop	{r4, pc}
    4d0e:	0000      	.short	0x0000
    4d10:	20000098 	.word	0x20000098
    4d14:	00000001 	.word	0x00000001
    4d18:	00010101 	.word	0x00010101
    4d1c:	031b1b00 	.word	0x031b1b00
    4d20:	00000002 	.word	0x00000002
    4d24:	00001d4c 	.word	0x00001d4c
    4d28:	001f0003 	.word	0x001f0003
    4d2c:	00000000 	.word	0x00000000
    4d30:	f1925c29 	.word	0xf1925c29
    4d34:	d1928136 	.word	0xd1928136
    4d38:	f1f0a9b7 	.word	0xf1f0a9b7
    4d3c:	194ce999 	.word	0x194ce999
    4d40:	4a83231f 	.word	0x4a83231f

00004d44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4d44:	4a05      	ldr	r2, [pc, #20]	; (4d5c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4d46:	b510      	push	{r4, lr}
    4d48:	6852      	ldr	r2, [r2, #4]
    4d4a:	b112      	cbz	r2, 4d52 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d50:	4710      	bx	r2
    4d52:	2192      	movs	r1, #146	; 0x92
    4d54:	2004      	movs	r0, #4
    4d56:	f7ff ff57 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d5a:	0000      	.short	0x0000
    4d5c:	20001304 	.word	0x20001304

00004d60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4d60:	4a05      	ldr	r2, [pc, #20]	; (4d78 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4d62:	b510      	push	{r4, lr}
    4d64:	6892      	ldr	r2, [r2, #8]
    4d66:	b112      	cbz	r2, 4d6e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d6c:	4710      	bx	r2
    4d6e:	2198      	movs	r1, #152	; 0x98
    4d70:	2004      	movs	r0, #4
    4d72:	f7ff ff49 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d76:	0000      	.short	0x0000
    4d78:	20001304 	.word	0x20001304

00004d7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4d7c:	4805      	ldr	r0, [pc, #20]	; (4d94 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4d7e:	6801      	ldr	r1, [r0, #0]
    4d80:	b129      	cbz	r1, 4d8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4d82:	6841      	ldr	r1, [r0, #4]
    4d84:	b119      	cbz	r1, 4d8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4d86:	6880      	ldr	r0, [r0, #8]
    4d88:	b108      	cbz	r0, 4d8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4d8a:	2001      	movs	r0, #1
    4d8c:	4770      	bx	lr
    4d8e:	2000      	movs	r0, #0
    4d90:	4770      	bx	lr
    4d92:	0000      	.short	0x0000
    4d94:	20001304 	.word	0x20001304

00004d98 <sdc_rand_source_register>:
    4d98:	4902      	ldr	r1, [pc, #8]	; (4da4 <sdc_rand_source_register+0xc>)
    4d9a:	c80d      	ldmia	r0, {r0, r2, r3}
    4d9c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4da0:	2000      	movs	r0, #0
    4da2:	4770      	bx	lr
    4da4:	20001304 	.word	0x20001304

00004da8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4daa:	4c12      	ldr	r4, [pc, #72]	; (4df4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4dac:	2600      	movs	r6, #0
    4dae:	6825      	ldr	r5, [r4, #0]
    4db0:	e011      	b.n	4dd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4db2:	9800      	ldr	r0, [sp, #0]
    4db4:	2802      	cmp	r0, #2
    4db6:	d002      	beq.n	4dbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4db8:	2803      	cmp	r0, #3
    4dba:	d10c      	bne.n	4dd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4dbc:	e006      	b.n	4dcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4dbe:	6820      	ldr	r0, [r4, #0]
    4dc0:	b110      	cbz	r0, 4dc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4dc2:	2000      	movs	r0, #0
    4dc4:	6026      	str	r6, [r4, #0]
    4dc6:	e005      	b.n	4dd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4dc8:	2128      	movs	r1, #40	; 0x28
    4dca:	e00c      	b.n	4de6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4dcc:	6820      	ldr	r0, [r4, #0]
    4dce:	b168      	cbz	r0, 4dec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4dd0:	2001      	movs	r0, #1
    4dd2:	6026      	str	r6, [r4, #0]
    4dd4:	47a8      	blx	r5
    4dd6:	4668      	mov	r0, sp
    4dd8:	f000 fcf6 	bl	57c8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4ddc:	2800      	cmp	r0, #0
    4dde:	d0e8      	beq.n	4db2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4de0:	2805      	cmp	r0, #5
    4de2:	d005      	beq.n	4df0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4de4:	2135      	movs	r1, #53	; 0x35
    4de6:	2004      	movs	r0, #4
    4de8:	f7ff ff0e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dec:	212d      	movs	r1, #45	; 0x2d
    4dee:	e7fa      	b.n	4de6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4df2:	0000      	.short	0x0000
    4df4:	200000a0 	.word	0x200000a0
    4df8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4dfa:	4c1f      	ldr	r4, [pc, #124]	; (4e78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4dfc:	4605      	mov	r5, r0
    4dfe:	7820      	ldrb	r0, [r4, #0]
    4e00:	b140      	cbz	r0, 4e14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4e02:	78a2      	ldrb	r2, [r4, #2]
    4e04:	1c61      	adds	r1, r4, #1
    4e06:	4628      	mov	r0, r5
    4e08:	1c92      	adds	r2, r2, #2
    4e0a:	f008 f95f 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e0e:	2000      	movs	r0, #0
    4e10:	7020      	strb	r0, [r4, #0]
    4e12:	e021      	b.n	4e58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4e14:	4819      	ldr	r0, [pc, #100]	; (4e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e16:	f002 f821 	bl	6e5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d01d      	beq.n	4e5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4e1e:	4c17      	ldr	r4, [pc, #92]	; (4e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e20:	7820      	ldrb	r0, [r4, #0]
    4e22:	2811      	cmp	r0, #17
    4e24:	d104      	bne.n	4e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4e26:	210a      	movs	r1, #10
    4e28:	203e      	movs	r0, #62	; 0x3e
    4e2a:	f008 faf6 	bl	d41a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4e2e:	b118      	cbz	r0, 4e38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4e30:	7820      	ldrb	r0, [r4, #0]
    4e32:	2808      	cmp	r0, #8
    4e34:	d005      	beq.n	4e42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4e36:	e009      	b.n	4e4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4e38:	4910      	ldr	r1, [pc, #64]	; (4e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e3a:	4628      	mov	r0, r5
    4e3c:	f008 fcf6 	bl	d82c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4e40:	e00a      	b.n	4e58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4e42:	2105      	movs	r1, #5
    4e44:	203e      	movs	r0, #62	; 0x3e
    4e46:	f008 fae8 	bl	d41a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4e4a:	b138      	cbz	r0, 4e5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4e4c:	490b      	ldr	r1, [pc, #44]	; (4e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e4e:	4628      	mov	r0, r5
    4e50:	f008 fb3f 	bl	d4d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4e54:	2800      	cmp	r0, #0
    4e56:	d000      	beq.n	4e5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4e58:	2001      	movs	r0, #1
    4e5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e5c:	88a0      	ldrh	r0, [r4, #4]
    4e5e:	f8ad 0000 	strh.w	r0, [sp]
    4e62:	a901      	add	r1, sp, #4
    4e64:	4668      	mov	r0, sp
    4e66:	f008 fe14 	bl	da92 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4e6a:	2800      	cmp	r0, #0
    4e6c:	d0f5      	beq.n	4e5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4e6e:	219c      	movs	r1, #156	; 0x9c
    4e70:	2008      	movs	r0, #8
    4e72:	f7ff fec9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e76:	0000      	.short	0x0000
    4e78:	200014a2 	.word	0x200014a2
    4e7c:	200013a0 	.word	0x200013a0
    4e80:	b570      	push	{r4, r5, r6, lr}
    4e82:	780a      	ldrb	r2, [r1, #0]
    4e84:	7082      	strb	r2, [r0, #2]
    4e86:	b33a      	cbz	r2, 4ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4e88:	2a01      	cmp	r2, #1
    4e8a:	d825      	bhi.n	4ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4e8c:	2313      	movs	r3, #19
    4e8e:	7003      	strb	r3, [r0, #0]
    4e90:	2300      	movs	r3, #0
    4e92:	e00a      	b.n	4eaa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4e94:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4e98:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4e9c:	78a6      	ldrb	r6, [r4, #2]
    4e9e:	70ee      	strb	r6, [r5, #3]
    4ea0:	8864      	ldrh	r4, [r4, #2]
    4ea2:	0a24      	lsrs	r4, r4, #8
    4ea4:	1c5b      	adds	r3, r3, #1
    4ea6:	712c      	strb	r4, [r5, #4]
    4ea8:	b2db      	uxtb	r3, r3
    4eaa:	4293      	cmp	r3, r2
    4eac:	d3f2      	bcc.n	4e94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4eae:	2300      	movs	r3, #0
    4eb0:	e00b      	b.n	4eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4eb2:	bf00      	nop
    4eb4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4eb8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4ebc:	792e      	ldrb	r6, [r5, #4]
    4ebe:	7166      	strb	r6, [r4, #5]
    4ec0:	88ad      	ldrh	r5, [r5, #4]
    4ec2:	0a2d      	lsrs	r5, r5, #8
    4ec4:	1c5b      	adds	r3, r3, #1
    4ec6:	71a5      	strb	r5, [r4, #6]
    4ec8:	b2db      	uxtb	r3, r3
    4eca:	4293      	cmp	r3, r2
    4ecc:	d3f2      	bcc.n	4eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4ece:	2101      	movs	r1, #1
    4ed0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4ed4:	b2c0      	uxtb	r0, r0
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	2000      	movs	r0, #0
    4eda:	bd70      	pop	{r4, r5, r6, pc}

00004edc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4edc:	2840      	cmp	r0, #64	; 0x40
    4ede:	d203      	bcs.n	4ee8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4ee0:	1e40      	subs	r0, r0, #1
    4ee2:	b2c1      	uxtb	r1, r0
    4ee4:	4805      	ldr	r0, [pc, #20]	; (4efc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4ee6:	e005      	b.n	4ef4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4ee8:	28ff      	cmp	r0, #255	; 0xff
    4eea:	d005      	beq.n	4ef8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4eec:	3840      	subs	r0, #64	; 0x40
    4eee:	b2c1      	uxtb	r1, r0
    4ef0:	4802      	ldr	r0, [pc, #8]	; (4efc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4ef2:	3008      	adds	r0, #8
    4ef4:	f008 bcc4 	b.w	d880 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4ef8:	2001      	movs	r0, #1
    4efa:	4770      	bx	lr
    4efc:	200000a4 	.word	0x200000a4

00004f00 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4f00:	1e40      	subs	r0, r0, #1
    4f02:	b2c1      	uxtb	r1, r0
    4f04:	4801      	ldr	r0, [pc, #4]	; (4f0c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4f06:	f008 bcbb 	b.w	d880 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4f0a:	0000      	.short	0x0000
    4f0c:	200000b4 	.word	0x200000b4

00004f10 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4f10:	4902      	ldr	r1, [pc, #8]	; (4f1c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4f12:	6802      	ldr	r2, [r0, #0]
    4f14:	610a      	str	r2, [r1, #16]
    4f16:	6840      	ldr	r0, [r0, #4]
    4f18:	6148      	str	r0, [r1, #20]
    4f1a:	4770      	bx	lr
    4f1c:	200000a4 	.word	0x200000a4

00004f20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4f20:	4905      	ldr	r1, [pc, #20]	; (4f38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4f22:	6802      	ldr	r2, [r0, #0]
    4f24:	600a      	str	r2, [r1, #0]
    4f26:	6840      	ldr	r0, [r0, #4]
    4f28:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4f2c:	600a      	str	r2, [r1, #0]
    4f2e:	4a03      	ldr	r2, [pc, #12]	; (4f3c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4f30:	4310      	orrs	r0, r2
    4f32:	6048      	str	r0, [r1, #4]
    4f34:	4770      	bx	lr
    4f36:	0000      	.short	0x0000
    4f38:	200000a4 	.word	0x200000a4
    4f3c:	024007f8 	.word	0x024007f8

00004f40 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4f40:	4902      	ldr	r1, [pc, #8]	; (4f4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4f42:	6802      	ldr	r2, [r0, #0]
    4f44:	608a      	str	r2, [r1, #8]
    4f46:	6840      	ldr	r0, [r0, #4]
    4f48:	60c8      	str	r0, [r1, #12]
    4f4a:	4770      	bx	lr
    4f4c:	200000a4 	.word	0x200000a4

00004f50 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4f50:	4807      	ldr	r0, [pc, #28]	; (4f70 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4f52:	f04f 31ff 	mov.w	r1, #4294967295
    4f56:	2200      	movs	r2, #0
    4f58:	6001      	str	r1, [r0, #0]
    4f5a:	0cc9      	lsrs	r1, r1, #19
    4f5c:	6041      	str	r1, [r0, #4]
    4f5e:	f100 0108 	add.w	r1, r0, #8
    4f62:	201f      	movs	r0, #31
    4f64:	600a      	str	r2, [r1, #0]
    4f66:	604a      	str	r2, [r1, #4]
    4f68:	3108      	adds	r1, #8
    4f6a:	e9c1 0200 	strd	r0, r2, [r1]
    4f6e:	4770      	bx	lr
    4f70:	200000a4 	.word	0x200000a4

00004f74 <sdc_hci_cmd_cb_reset>:
    4f74:	b510      	push	{r4, lr}
    4f76:	f7ff ffeb 	bl	4f50 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4f7a:	f00b fcdf 	bl	1093c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4f7e:	4604      	mov	r4, r0
    4f80:	4802      	ldr	r0, [pc, #8]	; (4f8c <sdc_hci_cmd_cb_reset+0x18>)
    4f82:	6800      	ldr	r0, [r0, #0]
    4f84:	b100      	cbz	r0, 4f88 <sdc_hci_cmd_cb_reset+0x14>
    4f86:	4780      	blx	r0
    4f88:	4620      	mov	r0, r4
    4f8a:	bd10      	pop	{r4, pc}
    4f8c:	200000bc 	.word	0x200000bc

00004f90 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4f90:	4901      	ldr	r1, [pc, #4]	; (4f98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4f92:	6008      	str	r0, [r1, #0]
    4f94:	4770      	bx	lr
    4f96:	0000      	.short	0x0000
    4f98:	200000bc 	.word	0x200000bc

00004f9c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4f9c:	2102      	movs	r1, #2
    4f9e:	8001      	strh	r1, [r0, #0]
    4fa0:	8041      	strh	r1, [r0, #2]
    4fa2:	2100      	movs	r1, #0
    4fa4:	7101      	strb	r1, [r0, #4]
    4fa6:	2129      	movs	r1, #41	; 0x29
    4fa8:	7141      	strb	r1, [r0, #5]
    4faa:	f249 215c 	movw	r1, #37468	; 0x925c
    4fae:	80c1      	strh	r1, [r0, #6]
    4fb0:	4901      	ldr	r1, [pc, #4]	; (4fb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4fb2:	6081      	str	r1, [r0, #8]
    4fb4:	2000      	movs	r0, #0
    4fb6:	4770      	bx	lr
    4fb8:	928136f1 	.word	0x928136f1

00004fbc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4fbc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4fbe:	4604      	mov	r4, r0
    4fc0:	4669      	mov	r1, sp
    4fc2:	f009 f8bf 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4fc6:	b170      	cbz	r0, 4fe6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4fc8:	f240 215a 	movw	r1, #602	; 0x25a
    4fcc:	e008      	b.n	4fe0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4fce:	bf00      	nop
    4fd0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4fd4:	4621      	mov	r1, r4
    4fd6:	f000 f8ab 	bl	5130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4fda:	b120      	cbz	r0, 4fe6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4fdc:	f240 215f 	movw	r1, #607	; 0x25f
    4fe0:	2017      	movs	r0, #23
    4fe2:	f7ff fe11 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fe6:	4668      	mov	r0, sp
    4fe8:	f000 f852 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4fec:	2800      	cmp	r0, #0
    4fee:	d0ef      	beq.n	4fd0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4ff0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004ff4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4ff4:	b510      	push	{r4, lr}
    4ff6:	2802      	cmp	r0, #2
    4ff8:	d304      	bcc.n	5004 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4ffa:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4ffe:	2017      	movs	r0, #23
    5000:	f7ff fe02 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5004:	4901      	ldr	r1, [pc, #4]	; (500c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5006:	5c08      	ldrb	r0, [r1, r0]
    5008:	bd10      	pop	{r4, pc}
    500a:	0000      	.short	0x0000
    500c:	20001310 	.word	0x20001310

00005010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5012:	0005      	movs	r5, r0
    5014:	9500      	str	r5, [sp, #0]
    5016:	d010      	beq.n	503a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5018:	2600      	movs	r6, #0
    501a:	7808      	ldrb	r0, [r1, #0]
    501c:	7849      	ldrb	r1, [r1, #1]
    501e:	4604      	mov	r4, r0
    5020:	42a1      	cmp	r1, r4
    5022:	d900      	bls.n	5026 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5024:	460c      	mov	r4, r1
    5026:	1cea      	adds	r2, r5, #3
    5028:	f022 0203 	bic.w	r2, r2, #3
    502c:	42aa      	cmp	r2, r5
    502e:	d006      	beq.n	503e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5030:	f240 1179 	movw	r1, #377	; 0x179
    5034:	2017      	movs	r0, #23
    5036:	f7ff fde7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    503a:	2601      	movs	r6, #1
    503c:	e7ed      	b.n	501a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    503e:	4f13      	ldr	r7, [pc, #76]	; (508c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5040:	7038      	strb	r0, [r7, #0]
    5042:	7079      	strb	r1, [r7, #1]
    5044:	4631      	mov	r1, r6
    5046:	4668      	mov	r0, sp
    5048:	f000 f8ee 	bl	5228 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    504c:	2100      	movs	r1, #0
    504e:	460b      	mov	r3, r1
    5050:	9800      	ldr	r0, [sp, #0]
    5052:	1cc0      	adds	r0, r0, #3
    5054:	f020 0003 	bic.w	r0, r0, #3
    5058:	9000      	str	r0, [sp, #0]
    505a:	b96e      	cbnz	r6, 5078 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    505c:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    5060:	60d0      	str	r0, [r2, #12]
    5062:	2000      	movs	r0, #0
    5064:	e006      	b.n	5074 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5066:	bf00      	nop
    5068:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    506c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    5070:	1c40      	adds	r0, r0, #1
    5072:	b2c0      	uxtb	r0, r0
    5074:	42a0      	cmp	r0, r4
    5076:	d3f7      	bcc.n	5068 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5078:	9800      	ldr	r0, [sp, #0]
    507a:	1c49      	adds	r1, r1, #1
    507c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5080:	b2c9      	uxtb	r1, r1
    5082:	9000      	str	r0, [sp, #0]
    5084:	2902      	cmp	r1, #2
    5086:	d3e3      	bcc.n	5050 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    5088:	1b40      	subs	r0, r0, r5
    508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    508c:	20001310 	.word	0x20001310

00005090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5090:	b570      	push	{r4, r5, r6, lr}
    5092:	4604      	mov	r4, r0
    5094:	f009 fa05 	bl	e4a2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5098:	b108      	cbz	r0, 509e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    509a:	2010      	movs	r0, #16
    509c:	bd70      	pop	{r4, r5, r6, pc}
    509e:	7825      	ldrb	r5, [r4, #0]
    50a0:	f000 f8fe 	bl	52a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    50a4:	4602      	mov	r2, r0
    50a6:	480c      	ldr	r0, [pc, #48]	; (50d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    50a8:	8861      	ldrh	r1, [r4, #2]
    50aa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    50ae:	e00e      	b.n	50ce <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    50b0:	68c3      	ldr	r3, [r0, #12]
    50b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    50b6:	b143      	cbz	r3, 50ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    50b8:	1c4a      	adds	r2, r1, #1
    50ba:	8062      	strh	r2, [r4, #2]
    50bc:	80a1      	strh	r1, [r4, #4]
    50be:	68c0      	ldr	r0, [r0, #12]
    50c0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    50c4:	60a0      	str	r0, [r4, #8]
    50c6:	2000      	movs	r0, #0
    50c8:	bd70      	pop	{r4, r5, r6, pc}
    50ca:	1c49      	adds	r1, r1, #1
    50cc:	b289      	uxth	r1, r1
    50ce:	4291      	cmp	r1, r2
    50d0:	d3ee      	bcc.n	50b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    50d2:	8061      	strh	r1, [r4, #2]
    50d4:	2005      	movs	r0, #5
    50d6:	bd70      	pop	{r4, r5, r6, pc}
    50d8:	20001310 	.word	0x20001310

000050dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    50dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50e0:	b121      	cbz	r1, 50ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    50e2:	2901      	cmp	r1, #1
    50e4:	d002      	beq.n	50ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    50e6:	2000      	movs	r0, #0
    50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50ec:	4c0f      	ldr	r4, [pc, #60]	; (512c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    50ee:	2700      	movs	r7, #0
    50f0:	463b      	mov	r3, r7
    50f2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    50f6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    50fa:	f814 c001 	ldrb.w	ip, [r4, r1]
    50fe:	e00a      	b.n	5116 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5100:	19dc      	adds	r4, r3, r7
    5102:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5106:	b2a4      	uxth	r4, r4
    5108:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    510c:	f1be 0f00 	cmp.w	lr, #0
    5110:	d004      	beq.n	511c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5112:	1c5b      	adds	r3, r3, #1
    5114:	b29b      	uxth	r3, r3
    5116:	459c      	cmp	ip, r3
    5118:	d8f2      	bhi.n	5100 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    511a:	4634      	mov	r4, r6
    511c:	8004      	strh	r4, [r0, #0]
    511e:	4620      	mov	r0, r4
    5120:	42b4      	cmp	r4, r6
    5122:	d0e0      	beq.n	50e6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5128:	f000 b834 	b.w	5194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    512c:	20001310 	.word	0x20001310

00005130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5134:	4606      	mov	r6, r0
    5136:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    513a:	460c      	mov	r4, r1
    513c:	f243 0702 	movw	r7, #12290	; 0x3002
    5140:	38ff      	subs	r0, #255	; 0xff
    5142:	d020      	beq.n	5186 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5144:	2c02      	cmp	r4, #2
    5146:	d302      	bcc.n	514e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5148:	2007      	movs	r0, #7
    514a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    514e:	4630      	mov	r0, r6
    5150:	f000 f85a 	bl	5208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5154:	0005      	movs	r5, r0
    5156:	d016      	beq.n	5186 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5158:	480c      	ldr	r0, [pc, #48]	; (518c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    515a:	4629      	mov	r1, r5
    515c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5160:	4630      	mov	r0, r6
    5162:	4790      	blx	r2
    5164:	480a      	ldr	r0, [pc, #40]	; (5190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5166:	2100      	movs	r1, #0
    5168:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    516c:	68f8      	ldr	r0, [r7, #12]
    516e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5172:	4620      	mov	r0, r4
    5174:	f000 f88a 	bl	528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5178:	4602      	mov	r2, r0
    517a:	4629      	mov	r1, r5
    517c:	6878      	ldr	r0, [r7, #4]
    517e:	f008 ffc0 	bl	e102 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5182:	2000      	movs	r0, #0
    5184:	e7e1      	b.n	514a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5186:	4638      	mov	r0, r7
    5188:	e7df      	b.n	514a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    518a:	0000      	.short	0x0000
    518c:	000052c0 	.word	0x000052c0
    5190:	20001310 	.word	0x20001310
    5194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5198:	4690      	mov	r8, r2
    519a:	460d      	mov	r5, r1
    519c:	4607      	mov	r7, r0
    519e:	f008 ffe2 	bl	e166 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    51a2:	b148      	cbz	r0, 51b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    51a4:	4816      	ldr	r0, [pc, #88]	; (5200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    51a6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    51aa:	68f0      	ldr	r0, [r6, #12]
    51ac:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    51b0:	b128      	cbz	r0, 51be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    51b2:	f44f 719d 	mov.w	r1, #314	; 0x13a
    51b6:	e015      	b.n	51e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    51b8:	f240 1139 	movw	r1, #313	; 0x139
    51bc:	e012      	b.n	51e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    51be:	6870      	ldr	r0, [r6, #4]
    51c0:	2800      	cmp	r0, #0
    51c2:	d01a      	beq.n	51fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    51c4:	4628      	mov	r0, r5
    51c6:	f000 f861 	bl	528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    51ca:	4601      	mov	r1, r0
    51cc:	6870      	ldr	r0, [r6, #4]
    51ce:	f008 ff40 	bl	e052 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    51d2:	0004      	movs	r4, r0
    51d4:	d010      	beq.n	51f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    51d6:	68f0      	ldr	r0, [r6, #12]
    51d8:	2d02      	cmp	r5, #2
    51da:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    51de:	d304      	bcc.n	51ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    51e0:	f240 1145 	movw	r1, #325	; 0x145
    51e4:	2017      	movs	r0, #23
    51e6:	f7ff fd0f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ea:	4806      	ldr	r0, [pc, #24]	; (5204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    51ec:	4642      	mov	r2, r8
    51ee:	4621      	mov	r1, r4
    51f0:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    51f4:	4638      	mov	r0, r7
    51f6:	4798      	blx	r3
    51f8:	4620      	mov	r0, r4
    51fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51fe:	0000      	.short	0x0000
    5200:	20001310 	.word	0x20001310
    5204:	000052b8 	.word	0x000052b8
    5208:	b570      	push	{r4, r5, r6, lr}
    520a:	460c      	mov	r4, r1
    520c:	4605      	mov	r5, r0
    520e:	f008 ffaa 	bl	e166 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5212:	2800      	cmp	r0, #0
    5214:	d005      	beq.n	5222 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5216:	4803      	ldr	r0, [pc, #12]	; (5224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5218:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    521c:	68c0      	ldr	r0, [r0, #12]
    521e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5222:	bd70      	pop	{r4, r5, r6, pc}
    5224:	20001310 	.word	0x20001310
    5228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    522c:	4e16      	ldr	r6, [pc, #88]	; (5288 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    522e:	4688      	mov	r8, r1
    5230:	4605      	mov	r5, r0
    5232:	2400      	movs	r4, #0
    5234:	6828      	ldr	r0, [r5, #0]
    5236:	1cc0      	adds	r0, r0, #3
    5238:	f020 0003 	bic.w	r0, r0, #3
    523c:	6028      	str	r0, [r5, #0]
    523e:	4620      	mov	r0, r4
    5240:	f000 f824 	bl	528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5244:	5d31      	ldrb	r1, [r6, r4]
    5246:	4348      	muls	r0, r1
    5248:	f1b8 0f00 	cmp.w	r8, #0
    524c:	d001      	beq.n	5252 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    524e:	2200      	movs	r2, #0
    5250:	e000      	b.n	5254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5252:	682a      	ldr	r2, [r5, #0]
    5254:	4601      	mov	r1, r0
    5256:	9200      	str	r2, [sp, #0]
    5258:	b132      	cbz	r2, 5268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    525a:	2700      	movs	r7, #0
    525c:	ea4f 000d 	mov.w	r0, sp
    5260:	f008 ff28 	bl	e0b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5264:	b11f      	cbz	r7, 526e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5266:	e006      	b.n	5276 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5268:	2701      	movs	r7, #1
    526a:	2000      	movs	r0, #0
    526c:	e7f8      	b.n	5260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    526e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5272:	9a00      	ldr	r2, [sp, #0]
    5274:	604a      	str	r2, [r1, #4]
    5276:	6829      	ldr	r1, [r5, #0]
    5278:	1c64      	adds	r4, r4, #1
    527a:	4408      	add	r0, r1
    527c:	b2e4      	uxtb	r4, r4
    527e:	6028      	str	r0, [r5, #0]
    5280:	2c02      	cmp	r4, #2
    5282:	d3d7      	bcc.n	5234 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5288:	20001310 	.word	0x20001310
    528c:	4903      	ldr	r1, [pc, #12]	; (529c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    528e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5292:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5296:	1cc0      	adds	r0, r0, #3
    5298:	4008      	ands	r0, r1
    529a:	4770      	bx	lr
    529c:	000052b4 	.word	0x000052b4
    52a0:	4903      	ldr	r1, [pc, #12]	; (52b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    52a2:	7808      	ldrb	r0, [r1, #0]
    52a4:	7849      	ldrb	r1, [r1, #1]
    52a6:	4288      	cmp	r0, r1
    52a8:	d200      	bcs.n	52ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    52aa:	4608      	mov	r0, r1
    52ac:	4770      	bx	lr
    52ae:	0000      	.short	0x0000
    52b0:	20001310 	.word	0x20001310
    52b4:	011002a0 	.word	0x011002a0
    52b8:	0000e17b 	.word	0x0000e17b
    52bc:	0000e17b 	.word	0x0000e17b
    52c0:	0000ffe9 	.word	0x0000ffe9
    52c4:	0000f309 	.word	0x0000f309

000052c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    52c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52cc:	4c27      	ldr	r4, [pc, #156]	; (536c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    52ce:	4606      	mov	r6, r0
    52d0:	b081      	sub	sp, #4
    52d2:	6820      	ldr	r0, [r4, #0]
    52d4:	469a      	mov	sl, r3
    52d6:	4693      	mov	fp, r2
    52d8:	b158      	cbz	r0, 52f2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    52da:	7a01      	ldrb	r1, [r0, #8]
    52dc:	42b1      	cmp	r1, r6
    52de:	d903      	bls.n	52e8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    52e0:	6840      	ldr	r0, [r0, #4]
    52e2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    52e6:	b140      	cbz	r0, 52fa <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    52e8:	f243 0002 	movw	r0, #12290	; 0x3002
    52ec:	b005      	add	sp, #20
    52ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52f2:	21a5      	movs	r1, #165	; 0xa5
    52f4:	2018      	movs	r0, #24
    52f6:	f7ff fc87 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52fa:	4619      	mov	r1, r3
    52fc:	9802      	ldr	r0, [sp, #8]
    52fe:	f008 ff56 	bl	e1ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5302:	4680      	mov	r8, r0
    5304:	4658      	mov	r0, fp
    5306:	990e      	ldr	r1, [sp, #56]	; 0x38
    5308:	f008 ff47 	bl	e19a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    530c:	4605      	mov	r5, r0
    530e:	eb08 0005 	add.w	r0, r8, r5
    5312:	1d00      	adds	r0, r0, #4
    5314:	b287      	uxth	r7, r0
    5316:	6820      	ldr	r0, [r4, #0]
    5318:	46a1      	mov	r9, r4
    531a:	4639      	mov	r1, r7
    531c:	6800      	ldr	r0, [r0, #0]
    531e:	f008 fe98 	bl	e052 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5322:	0004      	movs	r4, r0
    5324:	d01f      	beq.n	5366 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5326:	8067      	strh	r7, [r4, #2]
    5328:	8025      	strh	r5, [r4, #0]
    532a:	4629      	mov	r1, r5
    532c:	1d20      	adds	r0, r4, #4
    532e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5330:	4607      	mov	r7, r0
    5332:	465a      	mov	r2, fp
    5334:	2301      	movs	r3, #1
    5336:	9500      	str	r5, [sp, #0]
    5338:	f008 fdea 	bl	df10 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    533c:	8820      	ldrh	r0, [r4, #0]
    533e:	4641      	mov	r1, r8
    5340:	4438      	add	r0, r7
    5342:	230a      	movs	r3, #10
    5344:	9a02      	ldr	r2, [sp, #8]
    5346:	f8cd a000 	str.w	sl, [sp]
    534a:	f008 fde1 	bl	df10 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    534e:	8820      	ldrh	r0, [r4, #0]
    5350:	19c1      	adds	r1, r0, r7
    5352:	4638      	mov	r0, r7
    5354:	f008 fe0d 	bl	df72 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5358:	f8d9 0000 	ldr.w	r0, [r9]
    535c:	6840      	ldr	r0, [r0, #4]
    535e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5362:	2000      	movs	r0, #0
    5364:	e7c2      	b.n	52ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5366:	2004      	movs	r0, #4
    5368:	e7c0      	b.n	52ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    536a:	0000      	.short	0x0000
    536c:	200000c0 	.word	0x200000c0

00005370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5370:	b570      	push	{r4, r5, r6, lr}
    5372:	4c14      	ldr	r4, [pc, #80]	; (53c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5374:	6823      	ldr	r3, [r4, #0]
    5376:	b18b      	cbz	r3, 539c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5378:	7a19      	ldrb	r1, [r3, #8]
    537a:	4281      	cmp	r1, r0
    537c:	d912      	bls.n	53a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    537e:	685a      	ldr	r2, [r3, #4]
    5380:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5384:	b171      	cbz	r1, 53a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5386:	2500      	movs	r5, #0
    5388:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    538c:	884a      	ldrh	r2, [r1, #2]
    538e:	6818      	ldr	r0, [r3, #0]
    5390:	f008 feb7 	bl	e102 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5394:	6821      	ldr	r1, [r4, #0]
    5396:	2000      	movs	r0, #0
    5398:	7a0a      	ldrb	r2, [r1, #8]
    539a:	e00c      	b.n	53b6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    539c:	21c8      	movs	r1, #200	; 0xc8
    539e:	2018      	movs	r0, #24
    53a0:	f7ff fc32 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53a4:	f243 0002 	movw	r0, #12290	; 0x3002
    53a8:	bd70      	pop	{r4, r5, r6, pc}
    53aa:	684b      	ldr	r3, [r1, #4]
    53ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    53b0:	b933      	cbnz	r3, 53c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    53b2:	1c40      	adds	r0, r0, #1
    53b4:	b2c0      	uxtb	r0, r0
    53b6:	4282      	cmp	r2, r0
    53b8:	d8f7      	bhi.n	53aa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    53ba:	6808      	ldr	r0, [r1, #0]
    53bc:	f008 fe96 	bl	e0ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    53c0:	2000      	movs	r0, #0
    53c2:	bd70      	pop	{r4, r5, r6, pc}
    53c4:	200000c0 	.word	0x200000c0

000053c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    53c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53cc:	460d      	mov	r5, r1
    53ce:	0004      	movs	r4, r0
    53d0:	4690      	mov	r8, r2
    53d2:	f04f 0600 	mov.w	r6, #0
    53d6:	d009      	beq.n	53ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    53d8:	2700      	movs	r7, #0
    53da:	1ce0      	adds	r0, r4, #3
    53dc:	f020 0003 	bic.w	r0, r0, #3
    53e0:	42a0      	cmp	r0, r4
    53e2:	d005      	beq.n	53f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    53e4:	2186      	movs	r1, #134	; 0x86
    53e6:	2018      	movs	r0, #24
    53e8:	f7ff fc0e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ec:	2701      	movs	r7, #1
    53ee:	e7f4      	b.n	53da <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    53f0:	b1cd      	cbz	r5, 5426 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    53f2:	4611      	mov	r1, r2
    53f4:	2000      	movs	r0, #0
    53f6:	f008 fe5d 	bl	e0b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    53fa:	300c      	adds	r0, #12
    53fc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5400:	b98f      	cbnz	r7, 5426 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5402:	4f0a      	ldr	r7, [pc, #40]	; (542c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5404:	f104 000c 	add.w	r0, r4, #12
    5408:	00aa      	lsls	r2, r5, #2
    540a:	603c      	str	r4, [r7, #0]
    540c:	7225      	strb	r5, [r4, #8]
    540e:	6060      	str	r0, [r4, #4]
    5410:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5414:	6020      	str	r0, [r4, #0]
    5416:	2100      	movs	r1, #0
    5418:	6860      	ldr	r0, [r4, #4]
    541a:	f007 fed1 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    541e:	4641      	mov	r1, r8
    5420:	6838      	ldr	r0, [r7, #0]
    5422:	f008 fe47 	bl	e0b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5426:	4630      	mov	r0, r6
    5428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    542c:	200000c0 	.word	0x200000c0

00005430 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	4d08      	ldr	r5, [pc, #32]	; (5454 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5434:	6828      	ldr	r0, [r5, #0]
    5436:	2800      	cmp	r0, #0
    5438:	d00a      	beq.n	5450 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    543a:	2400      	movs	r4, #0
    543c:	e004      	b.n	5448 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    543e:	4620      	mov	r0, r4
    5440:	f7ff ff96 	bl	5370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5444:	1c64      	adds	r4, r4, #1
    5446:	b2e4      	uxtb	r4, r4
    5448:	6828      	ldr	r0, [r5, #0]
    544a:	7a00      	ldrb	r0, [r0, #8]
    544c:	42a0      	cmp	r0, r4
    544e:	d8f6      	bhi.n	543e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5450:	bd70      	pop	{r4, r5, r6, pc}
    5452:	0000      	.short	0x0000
    5454:	200000c0 	.word	0x200000c0

00005458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5458:	4909      	ldr	r1, [pc, #36]	; (5480 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    545a:	b510      	push	{r4, lr}
    545c:	4602      	mov	r2, r0
    545e:	6809      	ldr	r1, [r1, #0]
    5460:	2000      	movs	r0, #0
    5462:	b149      	cbz	r1, 5478 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5464:	7a0b      	ldrb	r3, [r1, #8]
    5466:	4293      	cmp	r3, r2
    5468:	d905      	bls.n	5476 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    546a:	6849      	ldr	r1, [r1, #4]
    546c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5470:	2900      	cmp	r1, #0
    5472:	d000      	beq.n	5476 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5474:	1d08      	adds	r0, r1, #4
    5476:	bd10      	pop	{r4, pc}
    5478:	21ee      	movs	r1, #238	; 0xee
    547a:	2018      	movs	r0, #24
    547c:	f7ff fbc4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5480:	200000c0 	.word	0x200000c0

00005484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5484:	490a      	ldr	r1, [pc, #40]	; (54b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5486:	b510      	push	{r4, lr}
    5488:	4602      	mov	r2, r0
    548a:	6809      	ldr	r1, [r1, #0]
    548c:	2000      	movs	r0, #0
    548e:	b159      	cbz	r1, 54a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5490:	7a0b      	ldrb	r3, [r1, #8]
    5492:	4293      	cmp	r3, r2
    5494:	d907      	bls.n	54a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5496:	6849      	ldr	r1, [r1, #4]
    5498:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    549c:	2900      	cmp	r1, #0
    549e:	d002      	beq.n	54a6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    54a0:	f831 0b04 	ldrh.w	r0, [r1], #4
    54a4:	4408      	add	r0, r1
    54a6:	bd10      	pop	{r4, pc}
    54a8:	21fc      	movs	r1, #252	; 0xfc
    54aa:	2018      	movs	r0, #24
    54ac:	f7ff fbac 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b0:	200000c0 	.word	0x200000c0
    54b4:	b570      	push	{r4, r5, r6, lr}
    54b6:	4b1e      	ldr	r3, [pc, #120]	; (5530 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    54b8:	6845      	ldr	r5, [r0, #4]
    54ba:	4604      	mov	r4, r0
    54bc:	2200      	movs	r2, #0
    54be:	b1a1      	cbz	r1, 54ea <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    54c0:	2001      	movs	r0, #1
    54c2:	7060      	strb	r0, [r4, #1]
    54c4:	8858      	ldrh	r0, [r3, #2]
    54c6:	0881      	lsrs	r1, r0, #2
    54c8:	f05f 0000 	movs.w	r0, #0
    54cc:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    54d0:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    54d4:	831a      	strh	r2, [r3, #24]
    54d6:	8419      	strh	r1, [r3, #32]
    54d8:	fb00 5301 	mla	r3, r0, r1, r5
    54dc:	6073      	str	r3, [r6, #4]
    54de:	1823      	adds	r3, r4, r0
    54e0:	1c40      	adds	r0, r0, #1
    54e2:	751a      	strb	r2, [r3, #20]
    54e4:	2804      	cmp	r0, #4
    54e6:	d3f1      	bcc.n	54cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    54e8:	bd70      	pop	{r4, r5, r6, pc}
    54ea:	7062      	strb	r2, [r4, #1]
    54ec:	f05f 0000 	movs.w	r0, #0
    54f0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    54f4:	830a      	strh	r2, [r1, #24]
    54f6:	840a      	strh	r2, [r1, #32]
    54f8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    54fc:	604a      	str	r2, [r1, #4]
    54fe:	1821      	adds	r1, r4, r0
    5500:	1c40      	adds	r0, r0, #1
    5502:	750a      	strb	r2, [r1, #20]
    5504:	2804      	cmp	r0, #4
    5506:	d3f3      	bcc.n	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5508:	8858      	ldrh	r0, [r3, #2]
    550a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    550e:	d201      	bcs.n	5514 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5510:	0846      	lsrs	r6, r0, #1
    5512:	e000      	b.n	5516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5514:	26ff      	movs	r6, #255	; 0xff
    5516:	f008 febe 	bl	e296 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    551a:	6065      	str	r5, [r4, #4]
    551c:	8420      	strh	r0, [r4, #32]
    551e:	1829      	adds	r1, r5, r0
    5520:	60a1      	str	r1, [r4, #8]
    5522:	8466      	strh	r6, [r4, #34]	; 0x22
    5524:	60e5      	str	r5, [r4, #12]
    5526:	84a0      	strh	r0, [r4, #36]	; 0x24
    5528:	6121      	str	r1, [r4, #16]
    552a:	84e6      	strh	r6, [r4, #38]	; 0x26
    552c:	bd70      	pop	{r4, r5, r6, pc}
    552e:	0000      	.short	0x0000
    5530:	200000c4 	.word	0x200000c4

00005534 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5538:	b170      	cbz	r0, 5558 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    553a:	2500      	movs	r5, #0
    553c:	4411      	add	r1, r2
    553e:	b2cc      	uxtb	r4, r1
    5540:	4e25      	ldr	r6, [pc, #148]	; (55d8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5542:	1cc1      	adds	r1, r0, #3
    5544:	2700      	movs	r7, #0
    5546:	f021 0103 	bic.w	r1, r1, #3
    554a:	7034      	strb	r4, [r6, #0]
    554c:	4281      	cmp	r1, r0
    554e:	d005      	beq.n	555c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5550:	214e      	movs	r1, #78	; 0x4e
    5552:	2009      	movs	r0, #9
    5554:	f7ff fb58 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5558:	2501      	movs	r5, #1
    555a:	e7ef      	b.n	553c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    555c:	2b1f      	cmp	r3, #31
    555e:	d804      	bhi.n	556a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5560:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5564:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5568:	e009      	b.n	557e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    556a:	0059      	lsls	r1, r3, #1
    556c:	2bff      	cmp	r3, #255	; 0xff
    556e:	d90c      	bls.n	558a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    5570:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5574:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5578:	d200      	bcs.n	557c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    557a:	4611      	mov	r1, r2
    557c:	b289      	uxth	r1, r1
    557e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5582:	1cc9      	adds	r1, r1, #3
    5584:	4011      	ands	r1, r2
    5586:	b135      	cbz	r5, 5596 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    5588:	e007      	b.n	559a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    558a:	227c      	movs	r2, #124	; 0x7c
    558c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5590:	d3f4      	bcc.n	557c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5592:	217c      	movs	r1, #124	; 0x7c
    5594:	e7f2      	b.n	557c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5596:	6070      	str	r0, [r6, #4]
    5598:	8071      	strh	r1, [r6, #2]
    559a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    559e:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    55a2:	2200      	movs	r2, #0
    55a4:	6876      	ldr	r6, [r6, #4]
    55a6:	f04f 0c01 	mov.w	ip, #1
    55aa:	e00d      	b.n	55c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    55ac:	b94d      	cbnz	r5, 55c2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    55ae:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    55b2:	eb00 0e03 	add.w	lr, r0, r3
    55b6:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    55ba:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    55be:	f8c7 e004 	str.w	lr, [r7, #4]
    55c2:	1c52      	adds	r2, r2, #1
    55c4:	440b      	add	r3, r1
    55c6:	b2d2      	uxtb	r2, r2
    55c8:	42a2      	cmp	r2, r4
    55ca:	d3ef      	bcc.n	55ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    55cc:	1ddb      	adds	r3, r3, #7
    55ce:	f023 0007 	bic.w	r0, r3, #7
    55d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55d6:	0000      	.short	0x0000
    55d8:	200000c4 	.word	0x200000c4

000055dc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    55dc:	b570      	push	{r4, r5, r6, lr}
    55de:	4a10      	ldr	r2, [pc, #64]	; (5620 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    55e0:	2000      	movs	r0, #0
    55e2:	6851      	ldr	r1, [r2, #4]
    55e4:	7812      	ldrb	r2, [r2, #0]
    55e6:	e014      	b.n	5612 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    55e8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    55ec:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    55f0:	b16b      	cbz	r3, 560e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    55f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    55f6:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    55fa:	d00c      	beq.n	5616 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    55fc:	2500      	movs	r5, #0
    55fe:	70a5      	strb	r5, [r4, #2]
    5600:	2101      	movs	r1, #1
    5602:	4620      	mov	r0, r4
    5604:	f7ff ff56 	bl	54b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5608:	7025      	strb	r5, [r4, #0]
    560a:	4620      	mov	r0, r4
    560c:	bd70      	pop	{r4, r5, r6, pc}
    560e:	1c40      	adds	r0, r0, #1
    5610:	b2c0      	uxtb	r0, r0
    5612:	4290      	cmp	r0, r2
    5614:	d3e8      	bcc.n	55e8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5616:	21a9      	movs	r1, #169	; 0xa9
    5618:	2009      	movs	r0, #9
    561a:	f7ff faf5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    561e:	0000      	.short	0x0000
    5620:	200000c4 	.word	0x200000c4

00005624 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5624:	4804      	ldr	r0, [pc, #16]	; (5638 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5626:	b510      	push	{r4, lr}
    5628:	8840      	ldrh	r0, [r0, #2]
    562a:	0884      	lsrs	r4, r0, #2
    562c:	f008 fe33 	bl	e296 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5630:	4284      	cmp	r4, r0
    5632:	d300      	bcc.n	5636 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5634:	4620      	mov	r0, r4
    5636:	bd10      	pop	{r4, pc}
    5638:	200000c4 	.word	0x200000c4
    563c:	b530      	push	{r4, r5, lr}
    563e:	490d      	ldr	r1, [pc, #52]	; (5674 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5640:	2001      	movs	r0, #1
    5642:	6048      	str	r0, [r1, #4]
    5644:	1e82      	subs	r2, r0, #2
    5646:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    564a:	490b      	ldr	r1, [pc, #44]	; (5678 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    564c:	6088      	str	r0, [r1, #8]
    564e:	2300      	movs	r3, #0
    5650:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5654:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5658:	4c08      	ldr	r4, [pc, #32]	; (567c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    565a:	6023      	str	r3, [r4, #0]
    565c:	1d25      	adds	r5, r4, #4
    565e:	6028      	str	r0, [r5, #0]
    5660:	6088      	str	r0, [r1, #8]
    5662:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5666:	6023      	str	r3, [r4, #0]
    5668:	6028      	str	r0, [r5, #0]
    566a:	4906      	ldr	r1, [pc, #24]	; (5684 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    566c:	4804      	ldr	r0, [pc, #16]	; (5680 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    566e:	6008      	str	r0, [r1, #0]
    5670:	bd30      	pop	{r4, r5, pc}
    5672:	0000      	.short	0x0000
    5674:	4000e000 	.word	0x4000e000
    5678:	4000f000 	.word	0x4000f000
    567c:	4000f500 	.word	0x4000f500
    5680:	3ff60000 	.word	0x3ff60000
    5684:	4001f508 	.word	0x4001f508

00005688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5688:	b510      	push	{r4, lr}
    568a:	4604      	mov	r4, r0
    568c:	f7ff ffd6 	bl	563c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5690:	f008 fed4 	bl	e43c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5694:	f000 f888 	bl	57a8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5698:	4905      	ldr	r1, [pc, #20]	; (56b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    569a:	4804      	ldr	r0, [pc, #16]	; (56ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    569c:	6008      	str	r0, [r1, #0]
    569e:	4620      	mov	r0, r4
    56a0:	f000 f8b8 	bl	5814 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    56a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56a8:	f000 b8d0 	b.w	584c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    56ac:	3ff60000 	.word	0x3ff60000
    56b0:	4001f508 	.word	0x4001f508
    56b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56b8:	4682      	mov	sl, r0
    56ba:	4838      	ldr	r0, [pc, #224]	; (579c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    56bc:	f007 fc6f 	bl	cf9e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    56c0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 579c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    56c4:	b128      	cbz	r0, 56d2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    56c6:	2601      	movs	r6, #1
    56c8:	f10b 0001 	add.w	r0, fp, #1
    56cc:	21ff      	movs	r1, #255	; 0xff
    56ce:	7001      	strb	r1, [r0, #0]
    56d0:	e000      	b.n	56d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    56d2:	2600      	movs	r6, #0
    56d4:	f44f 7580 	mov.w	r5, #256	; 0x100
    56d8:	4c31      	ldr	r4, [pc, #196]	; (57a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    56da:	f04f 0800 	mov.w	r8, #0
    56de:	1d2f      	adds	r7, r5, #4
    56e0:	2101      	movs	r1, #1
    56e2:	6061      	str	r1, [r4, #4]
    56e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    56e8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    56ec:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    56f0:	6021      	str	r1, [r4, #0]
    56f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 57a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    56f6:	e01c      	b.n	5732 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    56f8:	f8d9 0000 	ldr.w	r0, [r9]
    56fc:	06c0      	lsls	r0, r0, #27
    56fe:	d518      	bpl.n	5732 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5700:	200e      	movs	r0, #14
    5702:	f008 feaa 	bl	e45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5706:	f3ef 8010 	mrs	r0, PRIMASK
    570a:	9000      	str	r0, [sp, #0]
    570c:	b672      	cpsid	i
    570e:	2103      	movs	r1, #3
    5710:	4620      	mov	r0, r4
    5712:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5716:	4629      	mov	r1, r5
    5718:	f008 feac 	bl	e474 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    571c:	b930      	cbnz	r0, 572c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    571e:	4639      	mov	r1, r7
    5720:	4620      	mov	r0, r4
    5722:	f008 fea7 	bl	e474 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5726:	b908      	cbnz	r0, 572c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5728:	f7ff f8c8 	bl	48bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    572c:	9800      	ldr	r0, [sp, #0]
    572e:	b900      	cbnz	r0, 5732 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5730:	b662      	cpsie	i
    5732:	4629      	mov	r1, r5
    5734:	4620      	mov	r0, r4
    5736:	f008 fe9d 	bl	e474 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    573a:	b928      	cbnz	r0, 5748 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    573c:	4639      	mov	r1, r7
    573e:	4620      	mov	r0, r4
    5740:	f008 fe98 	bl	e474 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5744:	2800      	cmp	r0, #0
    5746:	d0d7      	beq.n	56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5748:	4639      	mov	r1, r7
    574a:	4620      	mov	r0, r4
    574c:	f008 fe92 	bl	e474 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5750:	2800      	cmp	r0, #0
    5752:	d1c5      	bne.n	56e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5754:	bb06      	cbnz	r6, 5798 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5756:	f89b 1001 	ldrb.w	r1, [fp, #1]
    575a:	f88d 1000 	strb.w	r1, [sp]
    575e:	9900      	ldr	r1, [sp, #0]
    5760:	9100      	str	r1, [sp, #0]
    5762:	f89d 1000 	ldrb.w	r1, [sp]
    5766:	b109      	cbz	r1, 576c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5768:	2501      	movs	r5, #1
    576a:	e000      	b.n	576e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    576c:	2500      	movs	r5, #0
    576e:	f10b 0001 	add.w	r0, fp, #1
    5772:	f880 8000 	strb.w	r8, [r0]
    5776:	2003      	movs	r0, #3
    5778:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    577c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5780:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5784:	200e      	movs	r0, #14
    5786:	f008 fe68 	bl	e45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    578a:	4804      	ldr	r0, [pc, #16]	; (579c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    578c:	f007 fc1e 	bl	cfcc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5790:	b115      	cbz	r5, 5798 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5792:	2011      	movs	r0, #17
    5794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5798:	2000      	movs	r0, #0
    579a:	e7fb      	b.n	5794 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    579c:	2000032c 	.word	0x2000032c
    57a0:	4000e000 	.word	0x4000e000
    57a4:	e000ed10 	.word	0xe000ed10

000057a8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    57a8:	b510      	push	{r4, lr}
    57aa:	4806      	ldr	r0, [pc, #24]	; (57c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    57ac:	f007 fc0a 	bl	cfc4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57b0:	b118      	cbz	r0, 57ba <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    57b2:	2127      	movs	r1, #39	; 0x27
    57b4:	201d      	movs	r0, #29
    57b6:	f7ff fa27 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ba:	4802      	ldr	r0, [pc, #8]	; (57c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    57bc:	2100      	movs	r1, #0
    57be:	7041      	strb	r1, [r0, #1]
    57c0:	bd10      	pop	{r4, pc}
    57c2:	0000      	.short	0x0000
    57c4:	2000032c 	.word	0x2000032c

000057c8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	4911      	ldr	r1, [pc, #68]	; (5810 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    57cc:	680a      	ldr	r2, [r1, #0]
    57ce:	b1ea      	cbz	r2, 580c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    57d0:	2300      	movs	r3, #0
    57d2:	461d      	mov	r5, r3
    57d4:	2401      	movs	r4, #1
    57d6:	684a      	ldr	r2, [r1, #4]
    57d8:	1c52      	adds	r2, r2, #1
    57da:	604a      	str	r2, [r1, #4]
    57dc:	2a09      	cmp	r2, #9
    57de:	d300      	bcc.n	57e2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    57e0:	604d      	str	r5, [r1, #4]
    57e2:	790e      	ldrb	r6, [r1, #4]
    57e4:	fa04 f206 	lsl.w	r2, r4, r6
    57e8:	680e      	ldr	r6, [r1, #0]
    57ea:	4216      	tst	r6, r2
    57ec:	d00b      	beq.n	5806 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    57ee:	f3ef 8310 	mrs	r3, PRIMASK
    57f2:	b672      	cpsid	i
    57f4:	680c      	ldr	r4, [r1, #0]
    57f6:	4394      	bics	r4, r2
    57f8:	600c      	str	r4, [r1, #0]
    57fa:	b903      	cbnz	r3, 57fe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    57fc:	b662      	cpsie	i
    57fe:	6849      	ldr	r1, [r1, #4]
    5800:	6001      	str	r1, [r0, #0]
    5802:	2000      	movs	r0, #0
    5804:	bd70      	pop	{r4, r5, r6, pc}
    5806:	1c5b      	adds	r3, r3, #1
    5808:	2b09      	cmp	r3, #9
    580a:	d3e4      	bcc.n	57d6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    580c:	2005      	movs	r0, #5
    580e:	bd70      	pop	{r4, r5, r6, pc}
    5810:	200000cc 	.word	0x200000cc

00005814 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5814:	4802      	ldr	r0, [pc, #8]	; (5820 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5816:	2100      	movs	r1, #0
    5818:	6001      	str	r1, [r0, #0]
    581a:	6041      	str	r1, [r0, #4]
    581c:	4770      	bx	lr
    581e:	0000      	.short	0x0000
    5820:	200000cc 	.word	0x200000cc

00005824 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5824:	b510      	push	{r4, lr}
    5826:	4c08      	ldr	r4, [pc, #32]	; (5848 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5828:	7861      	ldrb	r1, [r4, #1]
    582a:	b109      	cbz	r1, 5830 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    582c:	200f      	movs	r0, #15
    582e:	bd10      	pop	{r4, pc}
    5830:	f7fe ffd0 	bl	47d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5834:	7020      	strb	r0, [r4, #0]
    5836:	28ff      	cmp	r0, #255	; 0xff
    5838:	d001      	beq.n	583e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    583a:	2000      	movs	r0, #0
    583c:	bd10      	pop	{r4, pc}
    583e:	2178      	movs	r1, #120	; 0x78
    5840:	201f      	movs	r0, #31
    5842:	f7ff f9e1 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5846:	0000      	.short	0x0000
    5848:	20000000 	.word	0x20000000

0000584c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    584c:	4901      	ldr	r1, [pc, #4]	; (5854 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    584e:	2000      	movs	r0, #0
    5850:	7048      	strb	r0, [r1, #1]
    5852:	4770      	bx	lr
    5854:	20000000 	.word	0x20000000

00005858 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5858:	4806      	ldr	r0, [pc, #24]	; (5874 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    585a:	4a07      	ldr	r2, [pc, #28]	; (5878 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    585c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    585e:	8852      	ldrh	r2, [r2, #2]
    5860:	4291      	cmp	r1, r2
    5862:	d104      	bne.n	586e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5864:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5868:	b108      	cbz	r0, 586e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    586a:	2000      	movs	r0, #0
    586c:	4770      	bx	lr
    586e:	2001      	movs	r0, #1
    5870:	4770      	bx	lr
    5872:	0000      	.short	0x0000
    5874:	200015a4 	.word	0x200015a4
    5878:	20000318 	.word	0x20000318

0000587c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    587c:	4901      	ldr	r1, [pc, #4]	; (5884 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    587e:	8048      	strh	r0, [r1, #2]
    5880:	4770      	bx	lr
    5882:	0000      	.short	0x0000
    5884:	20000318 	.word	0x20000318

00005888 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5888:	4808      	ldr	r0, [pc, #32]	; (58ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    588a:	4a09      	ldr	r2, [pc, #36]	; (58b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    588c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    588e:	8852      	ldrh	r2, [r2, #2]
    5890:	4291      	cmp	r1, r2
    5892:	d109      	bne.n	58a8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5894:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5898:	8481      	strh	r1, [r0, #36]	; 0x24
    589a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    589e:	b119      	cbz	r1, 58a8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58a0:	2100      	movs	r1, #0
    58a2:	7001      	strb	r1, [r0, #0]
    58a4:	2001      	movs	r0, #1
    58a6:	4770      	bx	lr
    58a8:	2000      	movs	r0, #0
    58aa:	4770      	bx	lr
    58ac:	200015a4 	.word	0x200015a4
    58b0:	20000318 	.word	0x20000318

000058b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    58b4:	4807      	ldr	r0, [pc, #28]	; (58d4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58b6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ba:	2901      	cmp	r1, #1
    58bc:	d007      	beq.n	58ce <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    58be:	2101      	movs	r1, #1
    58c0:	7001      	strb	r1, [r0, #0]
    58c2:	4805      	ldr	r0, [pc, #20]	; (58d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    58c4:	4903      	ldr	r1, [pc, #12]	; (58d4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58c6:	8800      	ldrh	r0, [r0, #0]
    58c8:	8488      	strh	r0, [r1, #36]	; 0x24
    58ca:	2001      	movs	r0, #1
    58cc:	4770      	bx	lr
    58ce:	2000      	movs	r0, #0
    58d0:	4770      	bx	lr
    58d2:	0000      	.short	0x0000
    58d4:	200015a4 	.word	0x200015a4
    58d8:	20000318 	.word	0x20000318

000058dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    58dc:	4906      	ldr	r1, [pc, #24]	; (58f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    58de:	4b07      	ldr	r3, [pc, #28]	; (58fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    58e0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    58e2:	885b      	ldrh	r3, [r3, #2]
    58e4:	429a      	cmp	r2, r3
    58e6:	d105      	bne.n	58f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    58e8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    58ec:	b112      	cbz	r2, 58f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    58ee:	6001      	str	r1, [r0, #0]
    58f0:	2001      	movs	r0, #1
    58f2:	4770      	bx	lr
    58f4:	2000      	movs	r0, #0
    58f6:	4770      	bx	lr
    58f8:	200015a4 	.word	0x200015a4
    58fc:	20000318 	.word	0x20000318

00005900 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5900:	4909      	ldr	r1, [pc, #36]	; (5928 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5902:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5904:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5908:	3bff      	subs	r3, #255	; 0xff
    590a:	d002      	beq.n	5912 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    590c:	2100      	movs	r1, #0
    590e:	6001      	str	r1, [r0, #0]
    5910:	e007      	b.n	5922 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5912:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5916:	4904      	ldr	r1, [pc, #16]	; (5928 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5918:	2a01      	cmp	r2, #1
    591a:	d002      	beq.n	5922 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    591c:	6001      	str	r1, [r0, #0]
    591e:	2001      	movs	r0, #1
    5920:	4770      	bx	lr
    5922:	2000      	movs	r0, #0
    5924:	4770      	bx	lr
    5926:	0000      	.short	0x0000
    5928:	200015a4 	.word	0x200015a4

0000592c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    592c:	4901      	ldr	r1, [pc, #4]	; (5934 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    592e:	8008      	strh	r0, [r1, #0]
    5930:	4770      	bx	lr
    5932:	0000      	.short	0x0000
    5934:	20000318 	.word	0x20000318

00005938 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5938:	4905      	ldr	r1, [pc, #20]	; (5950 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    593a:	2000      	movs	r0, #0
    593c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5940:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5944:	8488      	strh	r0, [r1, #36]	; 0x24
    5946:	4903      	ldr	r1, [pc, #12]	; (5954 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5948:	8008      	strh	r0, [r1, #0]
    594a:	8048      	strh	r0, [r1, #2]
    594c:	4770      	bx	lr
    594e:	0000      	.short	0x0000
    5950:	200015a4 	.word	0x200015a4
    5954:	20000318 	.word	0x20000318
    5958:	4905      	ldr	r1, [pc, #20]	; (5970 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    595a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    595c:	4282      	cmp	r2, r0
    595e:	d105      	bne.n	596c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5960:	2000      	movs	r0, #0
    5962:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5966:	f64f 70ff 	movw	r0, #65535	; 0xffff
    596a:	8488      	strh	r0, [r1, #36]	; 0x24
    596c:	4770      	bx	lr
    596e:	0000      	.short	0x0000
    5970:	200015a4 	.word	0x200015a4

00005974 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5974:	4a0a      	ldr	r2, [pc, #40]	; (59a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5976:	b110      	cbz	r0, 597e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5978:	2801      	cmp	r0, #1
    597a:	d007      	beq.n	598c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    597c:	e00e      	b.n	599c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    597e:	7850      	ldrb	r0, [r2, #1]
    5980:	b160      	cbz	r0, 599c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5982:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5986:	6008      	str	r0, [r1, #0]
    5988:	88d0      	ldrh	r0, [r2, #6]
    598a:	e004      	b.n	5996 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    598c:	7810      	ldrb	r0, [r2, #0]
    598e:	b128      	cbz	r0, 599c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5990:	6890      	ldr	r0, [r2, #8]
    5992:	6008      	str	r0, [r1, #0]
    5994:	8990      	ldrh	r0, [r2, #12]
    5996:	8088      	strh	r0, [r1, #4]
    5998:	2001      	movs	r0, #1
    599a:	4770      	bx	lr
    599c:	2000      	movs	r0, #0
    599e:	4770      	bx	lr
    59a0:	2000032e 	.word	0x2000032e

000059a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    59a4:	4a08      	ldr	r2, [pc, #32]	; (59c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    59a6:	2301      	movs	r3, #1
    59a8:	b138      	cbz	r0, 59ba <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    59aa:	2801      	cmp	r0, #1
    59ac:	d104      	bne.n	59b8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    59ae:	7013      	strb	r3, [r2, #0]
    59b0:	6808      	ldr	r0, [r1, #0]
    59b2:	6090      	str	r0, [r2, #8]
    59b4:	8888      	ldrh	r0, [r1, #4]
    59b6:	8190      	strh	r0, [r2, #12]
    59b8:	4770      	bx	lr
    59ba:	7053      	strb	r3, [r2, #1]
    59bc:	6808      	ldr	r0, [r1, #0]
    59be:	f8c2 0002 	str.w	r0, [r2, #2]
    59c2:	8888      	ldrh	r0, [r1, #4]
    59c4:	80d0      	strh	r0, [r2, #6]
    59c6:	4770      	bx	lr
    59c8:	2000032e 	.word	0x2000032e

000059cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    59cc:	4906      	ldr	r1, [pc, #24]	; (59e8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    59ce:	b110      	cbz	r0, 59d6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    59d0:	2801      	cmp	r0, #1
    59d2:	d002      	beq.n	59da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    59d4:	e005      	b.n	59e2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    59d6:	7848      	ldrb	r0, [r1, #1]
    59d8:	e000      	b.n	59dc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    59da:	7808      	ldrb	r0, [r1, #0]
    59dc:	b108      	cbz	r0, 59e2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    59de:	2001      	movs	r0, #1
    59e0:	4770      	bx	lr
    59e2:	2000      	movs	r0, #0
    59e4:	4770      	bx	lr
    59e6:	0000      	.short	0x0000
    59e8:	2000032e 	.word	0x2000032e

000059ec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    59ec:	4901      	ldr	r1, [pc, #4]	; (59f4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    59ee:	7708      	strb	r0, [r1, #28]
    59f0:	4770      	bx	lr
    59f2:	0000      	.short	0x0000
    59f4:	20000e5a 	.word	0x20000e5a

000059f8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    59f8:	4801      	ldr	r0, [pc, #4]	; (5a00 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    59fa:	78c0      	ldrb	r0, [r0, #3]
    59fc:	4770      	bx	lr
    59fe:	0000      	.short	0x0000
    5a00:	200000d4 	.word	0x200000d4

00005a04 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5a04:	4801      	ldr	r0, [pc, #4]	; (5a0c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5a06:	7900      	ldrb	r0, [r0, #4]
    5a08:	4770      	bx	lr
    5a0a:	0000      	.short	0x0000
    5a0c:	200000d4 	.word	0x200000d4

00005a10 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    5a10:	4608      	mov	r0, r1
    5a12:	2100      	movs	r1, #0
    5a14:	7041      	strb	r1, [r0, #1]
    5a16:	211a      	movs	r1, #26
    5a18:	f800 1b04 	strb.w	r1, [r0], #4
    5a1c:	220e      	movs	r2, #14
    5a1e:	4901      	ldr	r1, [pc, #4]	; (5a24 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    5a20:	f007 bb54 	b.w	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a24:	20000e68 	.word	0x20000e68

00005a28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5a28:	b510      	push	{r4, lr}
    5a2a:	4604      	mov	r4, r0
    5a2c:	f000 f952 	bl	5cd4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5a30:	b118      	cbz	r0, 5a3a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5a32:	21c2      	movs	r1, #194	; 0xc2
    5a34:	2027      	movs	r0, #39	; 0x27
    5a36:	f7ff f8e7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a3a:	4803      	ldr	r0, [pc, #12]	; (5a48 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5a3c:	2101      	movs	r1, #1
    5a3e:	f009 f933 	bl	eca8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5a42:	4802      	ldr	r0, [pc, #8]	; (5a4c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5a44:	62c4      	str	r4, [r0, #44]	; 0x2c
    5a46:	bd10      	pop	{r4, pc}
    5a48:	20000e38 	.word	0x20000e38
    5a4c:	200000d4 	.word	0x200000d4

00005a50 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5a50:	4901      	ldr	r1, [pc, #4]	; (5a58 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5a52:	2001      	movs	r0, #1
    5a54:	7188      	strb	r0, [r1, #6]
    5a56:	4770      	bx	lr
    5a58:	200000d4 	.word	0x200000d4

00005a5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a60:	4c5e      	ldr	r4, [pc, #376]	; (5bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    5a62:	9d06      	ldr	r5, [sp, #24]
    5a64:	7826      	ldrb	r6, [r4, #0]
    5a66:	2e00      	cmp	r6, #0
    5a68:	d16b      	bne.n	5b42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5a6a:	2a00      	cmp	r2, #0
    5a6c:	d069      	beq.n	5b42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d067      	beq.n	5b42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5a72:	2d00      	cmp	r5, #0
    5a74:	d065      	beq.n	5b42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5a76:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5a7a:	f104 0614 	add.w	r6, r4, #20
    5a7e:	2000      	movs	r0, #0
    5a80:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    5a84:	71a0      	strb	r0, [r4, #6]
    5a86:	7160      	strb	r0, [r4, #5]
    5a88:	70e0      	strb	r0, [r4, #3]
    5a8a:	70a0      	strb	r0, [r4, #2]
    5a8c:	7120      	strb	r0, [r4, #4]
    5a8e:	81a0      	strh	r0, [r4, #12]
    5a90:	81e0      	strh	r0, [r4, #14]
    5a92:	f000 f957 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a96:	4606      	mov	r6, r0
    5a98:	f000 f94e 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5a9c:	4605      	mov	r5, r0
    5a9e:	f006 f813 	bl	bac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5aa2:	f005 fd6b 	bl	b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5aa6:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    5aaa:	f006 f891 	bl	bbd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5aae:	f105 001c 	add.w	r0, r5, #28
    5ab2:	f006 f963 	bl	bd7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5ab6:	6968      	ldr	r0, [r5, #20]
    5ab8:	f006 f956 	bl	bd68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5abc:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    5ac0:	f006 f990 	bl	bde4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5ac4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5ac8:	6840      	ldr	r0, [r0, #4]
    5aca:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    5ace:	b108      	cbz	r0, 5ad4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5ad0:	f005 ff7a 	bl	b9c8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5ad4:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5ad8:	2001      	movs	r0, #1
    5ada:	f005 feb9 	bl	b850 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5ade:	2800      	cmp	r0, #0
    5ae0:	d075      	beq.n	5bce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5ae2:	483f      	ldr	r0, [pc, #252]	; (5be0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5ae4:	f005 ff20 	bl	b928 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5ae8:	8828      	ldrh	r0, [r5, #0]
    5aea:	f7ff fccb 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5aee:	6320      	str	r0, [r4, #48]	; 0x30
    5af0:	8828      	ldrh	r0, [r5, #0]
    5af2:	f7ff fcb1 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5af6:	6360      	str	r0, [r4, #52]	; 0x34
    5af8:	3678      	adds	r6, #120	; 0x78
    5afa:	483a      	ldr	r0, [pc, #232]	; (5be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5afc:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    5afe:	f100 0808 	add.w	r8, r0, #8
    5b02:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5b06:	f856 1b04 	ldr.w	r1, [r6], #4
    5b0a:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5b0e:	f856 198c 	ldr.w	r1, [r6], #-140
    5b12:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    5b16:	f000 f999 	bl	5e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    5b1a:	4601      	mov	r1, r0
    5b1c:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5b1e:	f008 fe34 	bl	e78a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5b22:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5b24:	4281      	cmp	r1, r0
    5b26:	d200      	bcs.n	5b2a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    5b28:	4608      	mov	r0, r1
    5b2a:	7220      	strb	r0, [r4, #8]
    5b2c:	46a0      	mov	r8, r4
    5b2e:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5b32:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    5b36:	7d37      	ldrb	r7, [r6, #20]
    5b38:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5b3c:	2908      	cmp	r1, #8
    5b3e:	d104      	bne.n	5b4a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5b40:	e002      	b.n	5b48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5b42:	f44f 718d 	mov.w	r1, #282	; 0x11a
    5b46:	e046      	b.n	5bd6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    5b48:	2104      	movs	r1, #4
    5b4a:	f008 fe1e 	bl	e78a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5b4e:	b90f      	cbnz	r7, 5b54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5b50:	1d00      	adds	r0, r0, #4
    5b52:	b280      	uxth	r0, r0
    5b54:	4284      	cmp	r4, r0
    5b56:	d200      	bcs.n	5b5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5b58:	4620      	mov	r0, r4
    5b5a:	b2c4      	uxtb	r4, r0
    5b5c:	f888 4009 	strb.w	r4, [r8, #9]
    5b60:	7d31      	ldrb	r1, [r6, #20]
    5b62:	2900      	cmp	r1, #0
    5b64:	d002      	beq.n	5b6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5b66:	bf00      	nop
    5b68:	f04f 0104 	mov.w	r1, #4
    5b6c:	4421      	add	r1, r4
    5b6e:	f888 1007 	strb.w	r1, [r8, #7]
    5b72:	d014      	beq.n	5b9e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    5b74:	481b      	ldr	r0, [pc, #108]	; (5be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5b76:	f04f 0701 	mov.w	r7, #1
    5b7a:	f100 0008 	add.w	r0, r0, #8
    5b7e:	7607      	strb	r7, [r0, #24]
    5b80:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    5b84:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5b88:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    5b8c:	f008 fd03 	bl	e596 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5b90:	4914      	ldr	r1, [pc, #80]	; (5be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5b92:	4603      	mov	r3, r0
    5b94:	4622      	mov	r2, r4
    5b96:	3108      	adds	r1, #8
    5b98:	4638      	mov	r0, r7
    5b9a:	f005 fc5b 	bl	b454 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5b9e:	2001      	movs	r0, #1
    5ba0:	f000 fb9a 	bl	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5ba4:	4810      	ldr	r0, [pc, #64]	; (5be8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5ba6:	6800      	ldr	r0, [r0, #0]
    5ba8:	2803      	cmp	r0, #3
    5baa:	d012      	beq.n	5bd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5bac:	280b      	cmp	r0, #11
    5bae:	d010      	beq.n	5bd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5bb0:	480c      	ldr	r0, [pc, #48]	; (5be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5bb2:	220e      	movs	r2, #14
    5bb4:	2100      	movs	r1, #0
    5bb6:	3052      	adds	r0, #82	; 0x52
    5bb8:	f007 fb02 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bbc:	4809      	ldr	r0, [pc, #36]	; (5be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5bbe:	88b1      	ldrh	r1, [r6, #4]
    5bc0:	3052      	adds	r0, #82	; 0x52
    5bc2:	8041      	strh	r1, [r0, #2]
    5bc4:	8829      	ldrh	r1, [r5, #0]
    5bc6:	8001      	strh	r1, [r0, #0]
    5bc8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    5bcc:	7101      	strb	r1, [r0, #4]
    5bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bd2:	f240 11d5 	movw	r1, #469	; 0x1d5
    5bd6:	2027      	movs	r0, #39	; 0x27
    5bd8:	f7ff f816 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bdc:	200000d4 	.word	0x200000d4
    5be0:	000064d8 	.word	0x000064d8
    5be4:	20000e08 	.word	0x20000e08
    5be8:	40001550 	.word	0x40001550

00005bec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bf0:	4605      	mov	r5, r0
    5bf2:	f000 f8a7 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5bf6:	4e32      	ldr	r6, [pc, #200]	; (5cc0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    5bf8:	4604      	mov	r4, r0
    5bfa:	f04f 0800 	mov.w	r8, #0
    5bfe:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5c00:	7847      	ldrb	r7, [r0, #1]
    5c02:	b10d      	cbz	r5, 5c08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5c04:	2d01      	cmp	r5, #1
    5c06:	d101      	bne.n	5c0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5c08:	f886 8001 	strb.w	r8, [r6, #1]
    5c0c:	7870      	ldrb	r0, [r6, #1]
    5c0e:	f04f 0901 	mov.w	r9, #1
    5c12:	b150      	cbz	r0, 5c2a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5c14:	2801      	cmp	r0, #1
    5c16:	d01a      	beq.n	5c4e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    5c18:	2802      	cmp	r0, #2
    5c1a:	d034      	beq.n	5c86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5c1c:	2803      	cmp	r0, #3
    5c1e:	d048      	beq.n	5cb2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5c20:	f240 411d 	movw	r1, #1053	; 0x41d
    5c24:	2027      	movs	r0, #39	; 0x27
    5c26:	f7fe ffef 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c2a:	2d01      	cmp	r5, #1
    5c2c:	d032      	beq.n	5c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5c2e:	f000 f8f9 	bl	5e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5c32:	4639      	mov	r1, r7
    5c34:	2201      	movs	r2, #1
    5c36:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5c38:	f008 f807 	bl	dc4a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5c3c:	e028      	b.n	5c90 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5c3e:	bf00      	nop
    5c40:	f884 8008 	strb.w	r8, [r4, #8]
    5c44:	e031      	b.n	5caa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5c46:	bf00      	nop
    5c48:	f884 9008 	strb.w	r9, [r4, #8]
    5c4c:	e02d      	b.n	5caa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5c4e:	2d01      	cmp	r5, #1
    5c50:	d008      	beq.n	5c64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5c52:	f000 f8e7 	bl	5e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5c56:	4639      	mov	r1, r7
    5c58:	2200      	movs	r2, #0
    5c5a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5c5c:	f007 fff5 	bl	dc4a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5c60:	2d02      	cmp	r5, #2
    5c62:	d00b      	beq.n	5c7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5c64:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5c68:	1c40      	adds	r0, r0, #1
    5c6a:	f141 0100 	adc.w	r1, r1, #0
    5c6e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5c72:	7a20      	ldrb	r0, [r4, #8]
    5c74:	2801      	cmp	r0, #1
    5c76:	d003      	beq.n	5c80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5c78:	f884 9008 	strb.w	r9, [r4, #8]
    5c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c80:	f884 8008 	strb.w	r8, [r4, #8]
    5c84:	e7fa      	b.n	5c7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5c86:	2d01      	cmp	r5, #1
    5c88:	d004      	beq.n	5c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5c8a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5c8c:	f008 f9dc 	bl	e048 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5c90:	2d02      	cmp	r5, #2
    5c92:	d0f3      	beq.n	5c7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5c94:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5c98:	1c40      	adds	r0, r0, #1
    5c9a:	f141 0100 	adc.w	r1, r1, #0
    5c9e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5ca2:	7a20      	ldrb	r0, [r4, #8]
    5ca4:	2801      	cmp	r0, #1
    5ca6:	d1cf      	bne.n	5c48 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    5ca8:	e7ca      	b.n	5c40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    5caa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cae:	f001 b983 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5cb2:	2d01      	cmp	r5, #1
    5cb4:	d0e2      	beq.n	5c7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5cb6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5cb8:	f008 f9c6 	bl	e048 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5cbc:	e7f5      	b.n	5caa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5cbe:	0000      	.short	0x0000
    5cc0:	200000d4 	.word	0x200000d4

00005cc4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5cc4:	4802      	ldr	r0, [pc, #8]	; (5cd0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5cc6:	89c0      	ldrh	r0, [r0, #14]
    5cc8:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5ccc:	4770      	bx	lr
    5cce:	0000      	.short	0x0000
    5cd0:	200000d4 	.word	0x200000d4

00005cd4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5cd4:	4804      	ldr	r0, [pc, #16]	; (5ce8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5cd6:	7800      	ldrb	r0, [r0, #0]
    5cd8:	b108      	cbz	r0, 5cde <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5cda:	200c      	movs	r0, #12
    5cdc:	4770      	bx	lr
    5cde:	4903      	ldr	r1, [pc, #12]	; (5cec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5ce0:	2000      	movs	r0, #0
    5ce2:	7708      	strb	r0, [r1, #28]
    5ce4:	4770      	bx	lr
    5ce6:	0000      	.short	0x0000
    5ce8:	200000d4 	.word	0x200000d4
    5cec:	20000e5a 	.word	0x20000e5a

00005cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5cf0:	480c      	ldr	r0, [pc, #48]	; (5d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5cf2:	b510      	push	{r4, lr}
    5cf4:	7801      	ldrb	r1, [r0, #0]
    5cf6:	b149      	cbz	r1, 5d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5cf8:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5cfc:	7800      	ldrb	r0, [r0, #0]
    5cfe:	2802      	cmp	r0, #2
    5d00:	d008      	beq.n	5d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5d02:	f240 11f1 	movw	r1, #497	; 0x1f1
    5d06:	2027      	movs	r0, #39	; 0x27
    5d08:	f7fe ff7e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d10:	f000 b9fe 	b.w	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5d14:	6848      	ldr	r0, [r1, #4]
    5d16:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    5d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d1e:	f005 be0b 	b.w	b938 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5d22:	0000      	.short	0x0000
    5d24:	200000d4 	.word	0x200000d4
    5d28:	4a02      	ldr	r2, [pc, #8]	; (5d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5d2a:	8993      	ldrh	r3, [r2, #12]
    5d2c:	4303      	orrs	r3, r0
    5d2e:	8193      	strh	r3, [r2, #12]
    5d30:	6952      	ldr	r2, [r2, #20]
    5d32:	4710      	bx	r2
    5d34:	200000d4 	.word	0x200000d4
    5d38:	4801      	ldr	r0, [pc, #4]	; (5d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5d3a:	6840      	ldr	r0, [r0, #4]
    5d3c:	4770      	bx	lr
    5d3e:	0000      	.short	0x0000
    5d40:	2000010c 	.word	0x2000010c
    5d44:	4801      	ldr	r0, [pc, #4]	; (5d4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5d46:	6840      	ldr	r0, [r0, #4]
    5d48:	3078      	adds	r0, #120	; 0x78
    5d4a:	4770      	bx	lr
    5d4c:	2000010c 	.word	0x2000010c
    5d50:	4a01      	ldr	r2, [pc, #4]	; (5d58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5d52:	2100      	movs	r1, #0
    5d54:	6952      	ldr	r2, [r2, #20]
    5d56:	4710      	bx	r2
    5d58:	200000d4 	.word	0x200000d4
    5d5c:	b570      	push	{r4, r5, r6, lr}
    5d5e:	f7ff fff1 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d62:	4604      	mov	r4, r0
    5d64:	f7ff ffe8 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5d68:	4605      	mov	r5, r0
    5d6a:	4621      	mov	r1, r4
    5d6c:	f008 fd9e 	bl	e8ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5d70:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    5d74:	2901      	cmp	r1, #1
    5d76:	d112      	bne.n	5d9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5d78:	2800      	cmp	r0, #0
    5d7a:	d010      	beq.n	5d9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5d7c:	4808      	ldr	r0, [pc, #32]	; (5da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    5d7e:	882a      	ldrh	r2, [r5, #0]
    5d80:	6841      	ldr	r1, [r0, #4]
    5d82:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    5d86:	8142      	strh	r2, [r0, #10]
    5d88:	7a62      	ldrb	r2, [r4, #9]
    5d8a:	7302      	strb	r2, [r0, #12]
    5d8c:	7aa2      	ldrb	r2, [r4, #10]
    5d8e:	7342      	strb	r2, [r0, #13]
    5d90:	2218      	movs	r2, #24
    5d92:	f001 f83f 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d9a:	f001 b90d 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
    5da0:	2000010c 	.word	0x2000010c
    5da4:	b570      	push	{r4, r5, r6, lr}
    5da6:	4605      	mov	r5, r0
    5da8:	2901      	cmp	r1, #1
    5daa:	d818      	bhi.n	5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5dac:	4c12      	ldr	r4, [pc, #72]	; (5df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    5dae:	69a1      	ldr	r1, [r4, #24]
    5db0:	4788      	blx	r1
    5db2:	b1a0      	cbz	r0, 5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5db4:	7960      	ldrb	r0, [r4, #5]
    5db6:	b990      	cbnz	r0, 5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5db8:	b9e5      	cbnz	r5, 5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5dba:	f104 0010 	add.w	r0, r4, #16
    5dbe:	7801      	ldrb	r1, [r0, #0]
    5dc0:	06c8      	lsls	r0, r1, #27
    5dc2:	d405      	bmi.n	5dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5dc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5dc6:	7800      	ldrb	r0, [r0, #0]
    5dc8:	06c0      	lsls	r0, r0, #27
    5dca:	d401      	bmi.n	5dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5dcc:	2001      	movs	r0, #1
    5dce:	e000      	b.n	5dd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5dd0:	2000      	movs	r0, #0
    5dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5dd4:	b92a      	cbnz	r2, 5de2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5dd6:	8962      	ldrh	r2, [r4, #10]
    5dd8:	b11a      	cbz	r2, 5de2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5dda:	06c9      	lsls	r1, r1, #27
    5ddc:	d401      	bmi.n	5de2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5dde:	2001      	movs	r0, #1
    5de0:	bd70      	pop	{r4, r5, r6, pc}
    5de2:	89a1      	ldrh	r1, [r4, #12]
    5de4:	078a      	lsls	r2, r1, #30
    5de6:	d503      	bpl.n	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5de8:	6a22      	ldr	r2, [r4, #32]
    5dea:	78d2      	ldrb	r2, [r2, #3]
    5dec:	2a02      	cmp	r2, #2
    5dee:	d001      	beq.n	5df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5df0:	4308      	orrs	r0, r1
    5df2:	d1f4      	bne.n	5dde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5df4:	2000      	movs	r0, #0
    5df6:	bd70      	pop	{r4, r5, r6, pc}
    5df8:	200000d4 	.word	0x200000d4
    5dfc:	b530      	push	{r4, r5, lr}
    5dfe:	4b08      	ldr	r3, [pc, #32]	; (5e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    5e00:	88dd      	ldrh	r5, [r3, #6]
    5e02:	891c      	ldrh	r4, [r3, #8]
    5e04:	b12a      	cbz	r2, 5e12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5e06:	b908      	cbnz	r0, 5e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5e08:	b905      	cbnz	r5, 5e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5e0a:	b114      	cbz	r4, 5e12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5e0c:	8958      	ldrh	r0, [r3, #10]
    5e0e:	1c40      	adds	r0, r0, #1
    5e10:	8158      	strh	r0, [r3, #10]
    5e12:	b111      	cbz	r1, 5e1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    5e14:	1c6d      	adds	r5, r5, #1
    5e16:	80dd      	strh	r5, [r3, #6]
    5e18:	bd30      	pop	{r4, r5, pc}
    5e1a:	1c64      	adds	r4, r4, #1
    5e1c:	811c      	strh	r4, [r3, #8]
    5e1e:	bd30      	pop	{r4, r5, pc}
    5e20:	20000e5a 	.word	0x20000e5a
    5e24:	b510      	push	{r4, lr}
    5e26:	4c08      	ldr	r4, [pc, #32]	; (5e48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    5e28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e2a:	b138      	cbz	r0, 5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    5e2c:	8962      	ldrh	r2, [r4, #10]
    5e2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5e30:	1cd2      	adds	r2, r2, #3
    5e32:	f007 f94b 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e38:	6260      	str	r0, [r4, #36]	; 0x24
    5e3a:	bd10      	pop	{r4, pc}
    5e3c:	f240 4163 	movw	r1, #1123	; 0x463
    5e40:	2027      	movs	r0, #39	; 0x27
    5e42:	f7fe fee1 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e46:	0000      	.short	0x0000
    5e48:	200000d4 	.word	0x200000d4
    5e4c:	b510      	push	{r4, lr}
    5e4e:	f7ff ff73 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5e52:	4604      	mov	r4, r0
    5e54:	f7ff ff76 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e58:	4601      	mov	r1, r0
    5e5a:	7b42      	ldrb	r2, [r0, #13]
    5e5c:	4815      	ldr	r0, [pc, #84]	; (5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    5e5e:	2a24      	cmp	r2, #36	; 0x24
    5e60:	d00e      	beq.n	5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5e62:	7b89      	ldrb	r1, [r1, #14]
    5e64:	2924      	cmp	r1, #36	; 0x24
    5e66:	d00b      	beq.n	5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5e68:	2a1f      	cmp	r2, #31
    5e6a:	d00d      	beq.n	5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5e6c:	2a20      	cmp	r2, #32
    5e6e:	d00b      	beq.n	5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5e70:	2922      	cmp	r1, #34	; 0x22
    5e72:	d00f      	beq.n	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5e74:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5e78:	2804      	cmp	r0, #4
    5e7a:	d100      	bne.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    5e7c:	2008      	movs	r0, #8
    5e7e:	bd10      	pop	{r4, pc}
    5e80:	6840      	ldr	r0, [r0, #4]
    5e82:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    5e86:	e00e      	b.n	5ea6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    5e88:	2922      	cmp	r1, #34	; 0x22
    5e8a:	d003      	beq.n	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5e8c:	6840      	ldr	r0, [r0, #4]
    5e8e:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5e92:	e005      	b.n	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    5e94:	6841      	ldr	r1, [r0, #4]
    5e96:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    5e9a:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5e9e:	4008      	ands	r0, r1
    5ea0:	f008 fb6f 	bl	e582 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5ea4:	4601      	mov	r1, r0
    5ea6:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5eae:	f008 bb80 	b.w	e5b2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5eb2:	0000      	.short	0x0000
    5eb4:	2000010c 	.word	0x2000010c
    5eb8:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5ebc:	468b      	mov	fp, r1
    5ebe:	4607      	mov	r7, r0
    5ec0:	f7ff ff40 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ec4:	f04f 0900 	mov.w	r9, #0
    5ec8:	4c61      	ldr	r4, [pc, #388]	; (6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    5eca:	4605      	mov	r5, r0
    5ecc:	f88d 9000 	strb.w	r9, [sp]
    5ed0:	f8cd 9004 	str.w	r9, [sp, #4]
    5ed4:	7820      	ldrb	r0, [r4, #0]
    5ed6:	464e      	mov	r6, r9
    5ed8:	2802      	cmp	r0, #2
    5eda:	d004      	beq.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    5edc:	f240 41ea 	movw	r1, #1258	; 0x4ea
    5ee0:	2027      	movs	r0, #39	; 0x27
    5ee2:	f7fe fe91 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ee6:	7ba0      	ldrb	r0, [r4, #14]
    5ee8:	0640      	lsls	r0, r0, #25
    5eea:	d406      	bmi.n	5efa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5eec:	2040      	movs	r0, #64	; 0x40
    5eee:	f7ff ff2f 	bl	5d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ef2:	89e0      	ldrh	r0, [r4, #14]
    5ef4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5ef8:	81e0      	strh	r0, [r4, #14]
    5efa:	7d28      	ldrb	r0, [r5, #20]
    5efc:	b3df      	cbz	r7, 5f76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5efe:	b180      	cbz	r0, 5f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5f00:	f005 fb76 	bl	b5f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5f04:	f005 fb50 	bl	b5a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5f08:	b958      	cbnz	r0, 5f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f0c:	7841      	ldrb	r1, [r0, #1]
    5f0e:	b141      	cbz	r1, 5f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5f10:	7800      	ldrb	r0, [r0, #0]
    5f12:	7a29      	ldrb	r1, [r5, #8]
    5f14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f18:	4288      	cmp	r0, r1
    5f1a:	d102      	bne.n	5f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5f1c:	2001      	movs	r0, #1
    5f1e:	70a0      	strb	r0, [r4, #2]
    5f20:	e092      	b.n	6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f24:	7841      	ldrb	r1, [r0, #1]
    5f26:	8161      	strh	r1, [r4, #10]
    5f28:	b121      	cbz	r1, 5f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5f2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5f2c:	f008 f859 	bl	dfe2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5f30:	62a0      	str	r0, [r4, #40]	; 0x28
    5f32:	e000      	b.n	5f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    5f34:	62a6      	str	r6, [r4, #40]	; 0x28
    5f36:	89e0      	ldrh	r0, [r4, #14]
    5f38:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5f3c:	81e0      	strh	r0, [r4, #14]
    5f3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f40:	79e9      	ldrb	r1, [r5, #7]
    5f42:	7800      	ldrb	r0, [r0, #0]
    5f44:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5f48:	4288      	cmp	r0, r1
    5f4a:	d007      	beq.n	5f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    5f4c:	a801      	add	r0, sp, #4
    5f4e:	f000 f975 	bl	623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    5f52:	89e0      	ldrh	r0, [r4, #14]
    5f54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5f58:	81e0      	strh	r0, [r4, #14]
    5f5a:	e001      	b.n	5f60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    5f5c:	f04f 0901 	mov.w	r9, #1
    5f60:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f62:	7a29      	ldrb	r1, [r5, #8]
    5f64:	7800      	ldrb	r0, [r0, #0]
    5f66:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f6a:	4288      	cmp	r0, r1
    5f6c:	d10e      	bne.n	5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5f6e:	4668      	mov	r0, sp
    5f70:	f000 f926 	bl	61c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    5f74:	e00a      	b.n	5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5f76:	e7ff      	b.n	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5f78:	b108      	cbz	r0, 5f7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5f7a:	f005 fb33 	bl	b5e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5f7e:	78e0      	ldrb	r0, [r4, #3]
    5f80:	1c40      	adds	r0, r0, #1
    5f82:	70e0      	strb	r0, [r4, #3]
    5f84:	89e0      	ldrh	r0, [r4, #14]
    5f86:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5f8a:	81e0      	strh	r0, [r4, #14]
    5f8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5f90:	7ce8      	ldrb	r0, [r5, #19]
    5f92:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    5f96:	b188      	cbz	r0, 5fbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    5f98:	f7ff fece 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f9c:	492d      	ldr	r1, [pc, #180]	; (6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5f9e:	760e      	strb	r6, [r1, #24]
    5fa0:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    5fa4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5fa8:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    5fac:	f008 faf3 	bl	e596 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5fb0:	4603      	mov	r3, r0
    5fb2:	22fb      	movs	r2, #251	; 0xfb
    5fb4:	4927      	ldr	r1, [pc, #156]	; (6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5fb6:	4630      	mov	r0, r6
    5fb8:	f005 fa4c 	bl	b454 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5fbc:	f04f 0800 	mov.w	r8, #0
    5fc0:	f1bb 0f00 	cmp.w	fp, #0
    5fc4:	d104      	bne.n	5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    5fc6:	78e1      	ldrb	r1, [r4, #3]
    5fc8:	2001      	movs	r0, #1
    5fca:	f7ff feeb 	bl	5da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    5fce:	b198      	cbz	r0, 5ff8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    5fd0:	f005 feb6 	bl	bd40 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5fd4:	f89d 0000 	ldrb.w	r0, [sp]
    5fd8:	b110      	cbz	r0, 5fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    5fda:	2000      	movs	r0, #0
    5fdc:	f7ff fe06 	bl	5bec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5fe0:	88a8      	ldrh	r0, [r5, #4]
    5fe2:	464a      	mov	r2, r9
    5fe4:	4639      	mov	r1, r7
    5fe6:	f7ff ff09 	bl	5dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5fea:	b117      	cbz	r7, 5ff2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5fec:	70e6      	strb	r6, [r4, #3]
    5fee:	f7ff feb5 	bl	5d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ff2:	f04f 0801 	mov.w	r8, #1
    5ff6:	e017      	b.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5ff8:	f89d 0000 	ldrb.w	r0, [sp]
    5ffc:	b110      	cbz	r0, 6004 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    5ffe:	2001      	movs	r0, #1
    6000:	f7ff fdf4 	bl	5bec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6004:	2000      	movs	r0, #0
    6006:	f000 f9a3 	bl	6350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    600a:	f89d 0000 	ldrb.w	r0, [sp]
    600e:	b110      	cbz	r0, 6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    6010:	2002      	movs	r0, #2
    6012:	f7ff fdeb 	bl	5bec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6016:	88a8      	ldrh	r0, [r5, #4]
    6018:	464a      	mov	r2, r9
    601a:	4639      	mov	r1, r7
    601c:	f7ff feee 	bl	5dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    6020:	b117      	cbz	r7, 6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    6022:	70e6      	strb	r6, [r4, #3]
    6024:	f7ff fe9a 	bl	5d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6028:	9801      	ldr	r0, [sp, #4]
    602a:	b150      	cbz	r0, 6042 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    602c:	f007 fe65 	bl	dcfa <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    6030:	f8da 1004 	ldr.w	r1, [sl, #4]
    6034:	1c40      	adds	r0, r0, #1
    6036:	7206      	strb	r6, [r0, #8]
    6038:	220b      	movs	r2, #11
    603a:	f000 feeb 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    603e:	f000 ffbb 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6042:	f1b8 0f00 	cmp.w	r8, #0
    6046:	d001      	beq.n	604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    6048:	f000 f862 	bl	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    604c:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6050:	200000d4 	.word	0x200000d4
    6054:	20000e10 	.word	0x20000e10
    6058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    605c:	460f      	mov	r7, r1
    605e:	4680      	mov	r8, r0
    6060:	f7ff fe70 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6064:	4d28      	ldr	r5, [pc, #160]	; (6108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6066:	4604      	mov	r4, r0
    6068:	7828      	ldrb	r0, [r5, #0]
    606a:	2801      	cmp	r0, #1
    606c:	d004      	beq.n	6078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    606e:	f240 4172 	movw	r1, #1138	; 0x472
    6072:	2027      	movs	r0, #39	; 0x27
    6074:	f7fe fdc8 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6078:	7821      	ldrb	r1, [r4, #0]
    607a:	2000      	movs	r0, #0
    607c:	2601      	movs	r6, #1
    607e:	b129      	cbz	r1, 608c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    6080:	7020      	strb	r0, [r4, #0]
    6082:	2100      	movs	r1, #0
    6084:	2004      	movs	r0, #4
    6086:	f7ff fe4f 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    608a:	70a6      	strb	r6, [r4, #2]
    608c:	6a29      	ldr	r1, [r5, #32]
    608e:	7808      	ldrb	r0, [r1, #0]
    6090:	43c0      	mvns	r0, r0
    6092:	0780      	lsls	r0, r0, #30
    6094:	d109      	bne.n	60aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    6096:	79a0      	ldrb	r0, [r4, #6]
    6098:	bb78      	cbnz	r0, 60fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    609a:	2002      	movs	r0, #2
    609c:	f7ff fe44 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    60a0:	6a28      	ldr	r0, [r5, #32]
    60a2:	7800      	ldrb	r0, [r0, #0]
    60a4:	43c0      	mvns	r0, r0
    60a6:	0780      	lsls	r0, r0, #30
    60a8:	d027      	beq.n	60fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    60aa:	6a28      	ldr	r0, [r5, #32]
    60ac:	7840      	ldrb	r0, [r0, #1]
    60ae:	b110      	cbz	r0, 60b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    60b0:	2002      	movs	r0, #2
    60b2:	71a0      	strb	r0, [r4, #6]
    60b4:	e000      	b.n	60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    60b6:	71a6      	strb	r6, [r4, #6]
    60b8:	7d20      	ldrb	r0, [r4, #20]
    60ba:	b190      	cbz	r0, 60e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    60bc:	f7ff fe3c 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    60c0:	4912      	ldr	r1, [pc, #72]	; (610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    60c2:	7a6d      	ldrb	r5, [r5, #9]
    60c4:	760e      	strb	r6, [r1, #24]
    60c6:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    60ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60ce:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    60d2:	f008 fa60 	bl	e596 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    60d6:	4603      	mov	r3, r0
    60d8:	462a      	mov	r2, r5
    60da:	490c      	ldr	r1, [pc, #48]	; (610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    60dc:	4630      	mov	r0, r6
    60de:	f005 f9b9 	bl	b454 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    60e2:	ea37 0708 	bics.w	r7, r7, r8
    60e6:	d004      	beq.n	60f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    60e8:	2100      	movs	r1, #0
    60ea:	4608      	mov	r0, r1
    60ec:	f7ff fe5a 	bl	5da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    60f0:	b128      	cbz	r0, 60fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    60f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60f6:	f000 b80b 	b.w	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    60fa:	2003      	movs	r0, #3
    60fc:	e7d9      	b.n	60b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    60fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6102:	2000      	movs	r0, #0
    6104:	f000 b8e8 	b.w	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    6108:	200000d4 	.word	0x200000d4
    610c:	20000e10 	.word	0x20000e10
    6110:	b510      	push	{r4, lr}
    6112:	f005 fb13 	bl	b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6116:	f005 fa31 	bl	b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    611a:	4c0e      	ldr	r4, [pc, #56]	; (6154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    611c:	89e0      	ldrh	r0, [r4, #14]
    611e:	f7ff fe17 	bl	5d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6122:	69e2      	ldr	r2, [r4, #28]
    6124:	7961      	ldrb	r1, [r4, #5]
    6126:	78a0      	ldrb	r0, [r4, #2]
    6128:	4790      	blx	r2
    612a:	480b      	ldr	r0, [pc, #44]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    612c:	7f00      	ldrb	r0, [r0, #28]
    612e:	b168      	cbz	r0, 614c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6130:	4909      	ldr	r1, [pc, #36]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6132:	220e      	movs	r2, #14
    6134:	f101 000e 	add.w	r0, r1, #14
    6138:	f006 ffc8 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    613c:	4806      	ldr	r0, [pc, #24]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    613e:	221d      	movs	r2, #29
    6140:	2100      	movs	r1, #0
    6142:	301d      	adds	r0, #29
    6144:	f000 fe66 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6148:	f000 ff36 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    614c:	2000      	movs	r0, #0
    614e:	7020      	strb	r0, [r4, #0]
    6150:	bd10      	pop	{r4, pc}
    6152:	0000      	.short	0x0000
    6154:	200000d4 	.word	0x200000d4
    6158:	20000e5a 	.word	0x20000e5a
    615c:	4808      	ldr	r0, [pc, #32]	; (6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    615e:	b510      	push	{r4, lr}
    6160:	7800      	ldrb	r0, [r0, #0]
    6162:	2802      	cmp	r0, #2
    6164:	d004      	beq.n	6170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6166:	f240 212a 	movw	r1, #554	; 0x22a
    616a:	2027      	movs	r0, #39	; 0x27
    616c:	f7fe fd4c 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6170:	4904      	ldr	r1, [pc, #16]	; (6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6172:	2001      	movs	r0, #1
    6174:	7308      	strb	r0, [r1, #12]
    6176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    617a:	f7ff bfc9 	b.w	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    617e:	0000      	.short	0x0000
    6180:	200000d4 	.word	0x200000d4
    6184:	20000e5a 	.word	0x20000e5a
    6188:	4b0c      	ldr	r3, [pc, #48]	; (61bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    618a:	b430      	push	{r4, r5}
    618c:	79db      	ldrb	r3, [r3, #7]
    618e:	b93a      	cbnz	r2, 61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6190:	2bff      	cmp	r3, #255	; 0xff
    6192:	d105      	bne.n	61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6194:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6198:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    619c:	42a2      	cmp	r2, r4
    619e:	d00a      	beq.n	61b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    61a0:	b129      	cbz	r1, 61ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    61a2:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    61a6:	bc30      	pop	{r4, r5}
    61a8:	4618      	mov	r0, r3
    61aa:	f005 bdf1 	b.w	bd90 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    61ae:	23ff      	movs	r3, #255	; 0xff
    61b0:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    61b4:	e7f7      	b.n	61a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    61b6:	bc30      	pop	{r4, r5}
    61b8:	4770      	bx	lr
    61ba:	0000      	.short	0x0000
    61bc:	200000d4 	.word	0x200000d4
    61c0:	b570      	push	{r4, r5, r6, lr}
    61c2:	4606      	mov	r6, r0
    61c4:	f7ff fdbe 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    61c8:	4a1b      	ldr	r2, [pc, #108]	; (6238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    61ca:	4604      	mov	r4, r0
    61cc:	2501      	movs	r5, #1
    61ce:	6a51      	ldr	r1, [r2, #36]	; 0x24
    61d0:	7808      	ldrb	r0, [r1, #0]
    61d2:	f000 0003 	and.w	r0, r0, #3
    61d6:	2801      	cmp	r0, #1
    61d8:	d00c      	beq.n	61f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    61da:	2802      	cmp	r0, #2
    61dc:	d00a      	beq.n	61f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    61de:	2803      	cmp	r0, #3
    61e0:	d121      	bne.n	6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    61e2:	7025      	strb	r5, [r4, #0]
    61e4:	89d0      	ldrh	r0, [r2, #14]
    61e6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    61ea:	81d0      	strh	r0, [r2, #14]
    61ec:	2001      	movs	r0, #1
    61ee:	f7ff fd9b 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61f2:	e018      	b.n	6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    61f4:	7848      	ldrb	r0, [r1, #1]
    61f6:	b1b0      	cbz	r0, 6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    61f8:	89d1      	ldrh	r1, [r2, #14]
    61fa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    61fe:	81d1      	strh	r1, [r2, #14]
    6200:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6202:	2900      	cmp	r1, #0
    6204:	d009      	beq.n	621a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6206:	28fb      	cmp	r0, #251	; 0xfb
    6208:	d808      	bhi.n	621c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    620a:	7990      	ldrb	r0, [r2, #6]
    620c:	b120      	cbz	r0, 6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    620e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6212:	2020      	movs	r0, #32
    6214:	f7ff bd9c 	b.w	5d50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6218:	7035      	strb	r5, [r6, #0]
    621a:	bd70      	pop	{r4, r5, r6, pc}
    621c:	7950      	ldrb	r0, [r2, #5]
    621e:	f040 0010 	orr.w	r0, r0, #16
    6222:	7150      	strb	r0, [r2, #5]
    6224:	bd70      	pop	{r4, r5, r6, pc}
    6226:	7a20      	ldrb	r0, [r4, #8]
    6228:	2801      	cmp	r0, #1
    622a:	d001      	beq.n	6230 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    622c:	7225      	strb	r5, [r4, #8]
    622e:	bd70      	pop	{r4, r5, r6, pc}
    6230:	2000      	movs	r0, #0
    6232:	7220      	strb	r0, [r4, #8]
    6234:	bd70      	pop	{r4, r5, r6, pc}
    6236:	0000      	.short	0x0000
    6238:	200000d4 	.word	0x200000d4
    623c:	b570      	push	{r4, r5, r6, lr}
    623e:	4605      	mov	r5, r0
    6240:	f7ff fd80 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6244:	4604      	mov	r4, r0
    6246:	7980      	ldrb	r0, [r0, #6]
    6248:	2800      	cmp	r0, #0
    624a:	d02d      	beq.n	62a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    624c:	2802      	cmp	r0, #2
    624e:	d10c      	bne.n	626a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6250:	481b      	ldr	r0, [pc, #108]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6252:	4629      	mov	r1, r5
    6254:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6256:	f007 fccc 	bl	dbf2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    625a:	b330      	cbz	r0, 62aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    625c:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6260:	1c40      	adds	r0, r0, #1
    6262:	f141 0100 	adc.w	r1, r1, #0
    6266:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    626a:	2500      	movs	r5, #0
    626c:	71a5      	strb	r5, [r4, #6]
    626e:	78a0      	ldrb	r0, [r4, #2]
    6270:	b120      	cbz	r0, 627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    6272:	70a5      	strb	r5, [r4, #2]
    6274:	2100      	movs	r1, #0
    6276:	2010      	movs	r0, #16
    6278:	f7ff fd56 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    627c:	7860      	ldrb	r0, [r4, #1]
    627e:	b170      	cbz	r0, 629e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    6280:	7065      	strb	r5, [r4, #1]
    6282:	f7ff fb01 	bl	5888 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6286:	b198      	cbz	r0, 62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    6288:	2100      	movs	r1, #0
    628a:	2008      	movs	r0, #8
    628c:	f7ff fd4c 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6290:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6294:	1c40      	adds	r0, r0, #1
    6296:	f141 0100 	adc.w	r1, r1, #0
    629a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    629e:	79e0      	ldrb	r0, [r4, #7]
    62a0:	2801      	cmp	r0, #1
    62a2:	d00a      	beq.n	62ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    62a4:	2001      	movs	r0, #1
    62a6:	71e0      	strb	r0, [r4, #7]
    62a8:	bd70      	pop	{r4, r5, r6, pc}
    62aa:	f240 31b9 	movw	r1, #953	; 0x3b9
    62ae:	e001      	b.n	62b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    62b0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    62b4:	2027      	movs	r0, #39	; 0x27
    62b6:	f7fe fca7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62ba:	71e5      	strb	r5, [r4, #7]
    62bc:	bd70      	pop	{r4, r5, r6, pc}
    62be:	0000      	.short	0x0000
    62c0:	200000d4 	.word	0x200000d4
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    62c6:	7800      	ldrb	r0, [r0, #0]
    62c8:	2800      	cmp	r0, #0
    62ca:	d001      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    62cc:	f7ff bf20 	b.w	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    62d0:	4770      	bx	lr
    62d2:	0000      	.short	0x0000
    62d4:	200000d4 	.word	0x200000d4
    62d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62dc:	4606      	mov	r6, r0
    62de:	f7ff fd2b 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    62e2:	4680      	mov	r8, r0
    62e4:	f7ff fd2e 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62e8:	4c16      	ldr	r4, [pc, #88]	; (6344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    62ea:	4605      	mov	r5, r0
    62ec:	4632      	mov	r2, r6
    62ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62f0:	6260      	str	r0, [r4, #36]	; 0x24
    62f2:	2101      	movs	r1, #1
    62f4:	4640      	mov	r0, r8
    62f6:	f7ff ff47 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    62fa:	7d28      	ldrb	r0, [r5, #20]
    62fc:	2700      	movs	r7, #0
    62fe:	b170      	cbz	r0, 631e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6300:	4811      	ldr	r0, [pc, #68]	; (6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6302:	f005 fc87 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6306:	4811      	ldr	r0, [pc, #68]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6308:	2101      	movs	r1, #1
    630a:	7601      	strb	r1, [r0, #24]
    630c:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6310:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6314:	490c      	ldr	r1, [pc, #48]	; (6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6316:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6318:	f005 f8ee 	bl	b4f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    631c:	e004      	b.n	6328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    631e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6320:	f005 fc78 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6324:	f005 f92a 	bl	b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6328:	b916      	cbnz	r6, 6330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    632a:	4638      	mov	r0, r7
    632c:	f005 fb28 	bl	b980 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6330:	2100      	movs	r1, #0
    6332:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6336:	4608      	mov	r0, r1
    6338:	f005 fce4 	bl	bd04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    633c:	2002      	movs	r0, #2
    633e:	7020      	strb	r0, [r4, #0]
    6340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6344:	200000d4 	.word	0x200000d4
    6348:	20000d08 	.word	0x20000d08
    634c:	20000e10 	.word	0x20000e10
    6350:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6354:	4604      	mov	r4, r0
    6356:	f7ff fcf5 	bl	5d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    635a:	4605      	mov	r5, r0
    635c:	f7ff fcec 	bl	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6360:	2700      	movs	r7, #0
    6362:	4606      	mov	r6, r0
    6364:	f8df 9164 	ldr.w	r9, [pc, #356]	; 64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    6368:	f88d 7000 	strb.w	r7, [sp]
    636c:	4622      	mov	r2, r4
    636e:	4639      	mov	r1, r7
    6370:	f7ff ff0a 	bl	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6374:	79a8      	ldrb	r0, [r5, #6]
    6376:	f04f 0801 	mov.w	r8, #1
    637a:	f1a9 0420 	sub.w	r4, r9, #32
    637e:	b140      	cbz	r0, 6392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6380:	2801      	cmp	r0, #1
    6382:	d020      	beq.n	63c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6384:	2802      	cmp	r0, #2
    6386:	d02f      	beq.n	63e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6388:	2803      	cmp	r0, #3
    638a:	d03b      	beq.n	6404 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    638c:	f240 21d5 	movw	r1, #725	; 0x2d5
    6390:	e057      	b.n	6442 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6392:	7a20      	ldrb	r0, [r4, #8]
    6394:	2154      	movs	r1, #84	; 0x54
    6396:	f8ad 0004 	strh.w	r0, [sp, #4]
    639a:	5388      	strh	r0, [r1, r6]
    639c:	4648      	mov	r0, r9
    639e:	f7ff fa9d 	bl	58dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    63a2:	b130      	cbz	r0, 63b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    63a4:	2080      	movs	r0, #128	; 0x80
    63a6:	6a21      	ldr	r1, [r4, #32]
    63a8:	f7ff fcbe 	bl	5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    63ac:	f885 8001 	strb.w	r8, [r5, #1]
    63b0:	e02c      	b.n	640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    63b2:	466a      	mov	r2, sp
    63b4:	a901      	add	r1, sp, #4
    63b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63b8:	f008 f905 	bl	e5c6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    63bc:	6220      	str	r0, [r4, #32]
    63be:	b110      	cbz	r0, 63c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    63c0:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    63c4:	b111      	cbz	r1, 63cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    63c6:	4842      	ldr	r0, [pc, #264]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    63c8:	6220      	str	r0, [r4, #32]
    63ca:	e01f      	b.n	640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    63cc:	f89d 1000 	ldrb.w	r1, [sp]
    63d0:	b921      	cbnz	r1, 63dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    63d2:	8007      	strh	r7, [r0, #0]
    63d4:	7087      	strb	r7, [r0, #2]
    63d6:	2101      	movs	r1, #1
    63d8:	f008 fc66 	bl	eca8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    63dc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    63e0:	6a20      	ldr	r0, [r4, #32]
    63e2:	f008 fc15 	bl	ec10 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    63e6:	e011      	b.n	640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    63e8:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    63ec:	f8ad 0004 	strh.w	r0, [sp, #4]
    63f0:	466a      	mov	r2, sp
    63f2:	a901      	add	r1, sp, #4
    63f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63f6:	f008 f8e6 	bl	e5c6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    63fa:	6220      	str	r0, [r4, #32]
    63fc:	b930      	cbnz	r0, 640c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    63fe:	f240 21c6 	movw	r1, #710	; 0x2c6
    6402:	e01e      	b.n	6442 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6404:	4648      	mov	r0, r9
    6406:	f7ff fa69 	bl	58dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    640a:	b1c0      	cbz	r0, 643e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    640c:	6a20      	ldr	r0, [r4, #32]
    640e:	2308      	movs	r3, #8
    6410:	7801      	ldrb	r1, [r0, #0]
    6412:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6416:	7001      	strb	r1, [r0, #0]
    6418:	79ea      	ldrb	r2, [r5, #7]
    641a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    641e:	4311      	orrs	r1, r2
    6420:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6424:	7001      	strb	r1, [r0, #0]
    6426:	7a2a      	ldrb	r2, [r5, #8]
    6428:	2304      	movs	r3, #4
    642a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    642e:	4311      	orrs	r1, r2
    6430:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6434:	7001      	strb	r1, [r0, #0]
    6436:	43c9      	mvns	r1, r1
    6438:	0789      	lsls	r1, r1, #30
    643a:	d005      	beq.n	6448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    643c:	e007      	b.n	644e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    643e:	f240 21cf 	movw	r1, #719	; 0x2cf
    6442:	2027      	movs	r0, #39	; 0x27
    6444:	f7fe fbe0 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6448:	78c0      	ldrb	r0, [r0, #3]
    644a:	2802      	cmp	r0, #2
    644c:	d00f      	beq.n	646e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    644e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6450:	f007 fce9 	bl	de26 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6454:	b108      	cbz	r0, 645a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    6456:	2101      	movs	r1, #1
    6458:	e00a      	b.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    645a:	6a20      	ldr	r0, [r4, #32]
    645c:	7800      	ldrb	r0, [r0, #0]
    645e:	43c0      	mvns	r0, r0
    6460:	0780      	lsls	r0, r0, #30
    6462:	d004      	beq.n	646e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6464:	f7ff f9f8 	bl	5858 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6468:	f080 0101 	eor.w	r1, r0, #1
    646c:	e000      	b.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    646e:	2100      	movs	r1, #0
    6470:	6a20      	ldr	r0, [r4, #32]
    6472:	7802      	ldrb	r2, [r0, #0]
    6474:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6478:	7001      	strb	r1, [r0, #0]
    647a:	7ce9      	ldrb	r1, [r5, #19]
    647c:	b181      	cbz	r1, 64a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    647e:	7841      	ldrb	r1, [r0, #1]
    6480:	b171      	cbz	r1, 64a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6482:	4814      	ldr	r0, [pc, #80]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6484:	f005 fbc6 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6488:	4811      	ldr	r0, [pc, #68]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    648a:	3828      	subs	r0, #40	; 0x28
    648c:	7607      	strb	r7, [r0, #24]
    648e:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    6492:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6496:	480f      	ldr	r0, [pc, #60]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6498:	6a21      	ldr	r1, [r4, #32]
    649a:	f005 f82d 	bl	b4f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    649e:	e003      	b.n	64a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    64a0:	f005 fbb8 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64a4:	f005 f86a 	bl	b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64a8:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    64ac:	2101      	movs	r1, #1
    64ae:	2000      	movs	r0, #0
    64b0:	f005 fc28 	bl	bd04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64b4:	f884 8004 	strb.w	r8, [r4, #4]
    64b8:	6a21      	ldr	r1, [r4, #32]
    64ba:	880a      	ldrh	r2, [r1, #0]
    64bc:	8222      	strh	r2, [r4, #16]
    64be:	7889      	ldrb	r1, [r1, #2]
    64c0:	74a1      	strb	r1, [r4, #18]
    64c2:	f884 8000 	strb.w	r8, [r4]
    64c6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    64ca:	0000      	.short	0x0000
    64cc:	200000f4 	.word	0x200000f4
    64d0:	20000e38 	.word	0x20000e38
    64d4:	20000d08 	.word	0x20000d08
    64d8:	0000615d 	.word	0x0000615d
    64dc:	00005eb9 	.word	0x00005eb9
    64e0:	00006059 	.word	0x00006059
    64e4:	000062c5 	.word	0x000062c5

000064e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    64e8:	4800      	ldr	r0, [pc, #0]	; (64ec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    64ea:	4770      	bx	lr
    64ec:	2000179d 	.word	0x2000179d

000064f0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    64f0:	4904      	ldr	r1, [pc, #16]	; (6504 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    64f2:	788a      	ldrb	r2, [r1, #2]
    64f4:	4282      	cmp	r2, r0
    64f6:	d903      	bls.n	6500 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    64f8:	4408      	add	r0, r1
    64fa:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    64fe:	4770      	bx	lr
    6500:	2000      	movs	r0, #0
    6502:	4770      	bx	lr
    6504:	200015ca 	.word	0x200015ca

00006508 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6508:	4904      	ldr	r1, [pc, #16]	; (651c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    650a:	788a      	ldrb	r2, [r1, #2]
    650c:	4282      	cmp	r2, r0
    650e:	d903      	bls.n	6518 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6510:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6514:	3083      	adds	r0, #131	; 0x83
    6516:	4770      	bx	lr
    6518:	2000      	movs	r0, #0
    651a:	4770      	bx	lr
    651c:	200015ca 	.word	0x200015ca

00006520 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6520:	4a05      	ldr	r2, [pc, #20]	; (6538 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6522:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6526:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    652a:	6802      	ldr	r2, [r0, #0]
    652c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6530:	8880      	ldrh	r0, [r0, #4]
    6532:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6536:	4770      	bx	lr
    6538:	200015ca 	.word	0x200015ca

0000653c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6540:	460e      	mov	r6, r1
    6542:	4607      	mov	r7, r0
    6544:	4615      	mov	r5, r2
    6546:	2106      	movs	r1, #6
    6548:	4630      	mov	r0, r6
    654a:	f008 fa3d 	bl	e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    654e:	4c0d      	ldr	r4, [pc, #52]	; (6584 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6550:	b160      	cbz	r0, 656c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6552:	2000      	movs	r0, #0
    6554:	e004      	b.n	6560 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6556:	1821      	adds	r1, r4, r0
    6558:	1c40      	adds	r0, r0, #1
    655a:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    655e:	b2c0      	uxtb	r0, r0
    6560:	78a1      	ldrb	r1, [r4, #2]
    6562:	4281      	cmp	r1, r0
    6564:	d8f7      	bhi.n	6556 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6566:	2001      	movs	r0, #1
    6568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    656c:	4631      	mov	r1, r6
    656e:	4638      	mov	r0, r7
    6570:	f008 f838 	bl	e5e4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6574:	2808      	cmp	r0, #8
    6576:	d003      	beq.n	6580 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6578:	4420      	add	r0, r4
    657a:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    657e:	e7f2      	b.n	6566 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6580:	2000      	movs	r0, #0
    6582:	e7f1      	b.n	6568 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6584:	200015ca 	.word	0x200015ca

00006588 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6588:	4904      	ldr	r1, [pc, #16]	; (659c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    658a:	788a      	ldrb	r2, [r1, #2]
    658c:	4282      	cmp	r2, r0
    658e:	d903      	bls.n	6598 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6590:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6594:	1cc0      	adds	r0, r0, #3
    6596:	4770      	bx	lr
    6598:	2000      	movs	r0, #0
    659a:	4770      	bx	lr
    659c:	200015ca 	.word	0x200015ca

000065a0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    65a0:	b510      	push	{r4, lr}
    65a2:	f240 12d3 	movw	r2, #467	; 0x1d3
    65a6:	2100      	movs	r1, #0
    65a8:	4808      	ldr	r0, [pc, #32]	; (65cc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    65aa:	f006 fe09 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    65ae:	2208      	movs	r2, #8
    65b0:	21ff      	movs	r1, #255	; 0xff
    65b2:	4807      	ldr	r0, [pc, #28]	; (65d0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    65b4:	f006 fe04 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    65b8:	4805      	ldr	r0, [pc, #20]	; (65d0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    65ba:	2100      	movs	r1, #0
    65bc:	1f00      	subs	r0, r0, #4
    65be:	7001      	strb	r1, [r0, #0]
    65c0:	7041      	strb	r1, [r0, #1]
    65c2:	f44f 7161 	mov.w	r1, #900	; 0x384
    65c6:	8041      	strh	r1, [r0, #2]
    65c8:	bd10      	pop	{r4, pc}
    65ca:	0000      	.short	0x0000
    65cc:	200015ca 	.word	0x200015ca
    65d0:	20000320 	.word	0x20000320

000065d4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    65d4:	4901      	ldr	r1, [pc, #4]	; (65dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    65d6:	7008      	strb	r0, [r1, #0]
    65d8:	4770      	bx	lr
    65da:	0000      	.short	0x0000
    65dc:	2000031c 	.word	0x2000031c

000065e0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    65e0:	4801      	ldr	r0, [pc, #4]	; (65e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    65e2:	7800      	ldrb	r0, [r0, #0]
    65e4:	4770      	bx	lr
    65e6:	0000      	.short	0x0000
    65e8:	2000031c 	.word	0x2000031c

000065ec <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    65ec:	4b0b      	ldr	r3, [pc, #44]	; (661c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    65ee:	b510      	push	{r4, lr}
    65f0:	789c      	ldrb	r4, [r3, #2]
    65f2:	4284      	cmp	r4, r0
    65f4:	d90f      	bls.n	6616 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    65f6:	4418      	add	r0, r3
    65f8:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    65fc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6600:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6604:	700b      	strb	r3, [r1, #0]
    6606:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    660a:	6011      	str	r1, [r2, #0]
    660c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6610:	8090      	strh	r0, [r2, #4]
    6612:	2001      	movs	r0, #1
    6614:	bd10      	pop	{r4, pc}
    6616:	2000      	movs	r0, #0
    6618:	bd10      	pop	{r4, pc}
    661a:	0000      	.short	0x0000
    661c:	200015ca 	.word	0x200015ca

00006620 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6620:	4907      	ldr	r1, [pc, #28]	; (6640 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6622:	788a      	ldrb	r2, [r1, #2]
    6624:	4282      	cmp	r2, r0
    6626:	d909      	bls.n	663c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6628:	4408      	add	r0, r1
    662a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    662e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6632:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6636:	f000 0001 	and.w	r0, r0, #1
    663a:	4770      	bx	lr
    663c:	2000      	movs	r0, #0
    663e:	4770      	bx	lr
    6640:	200015ca 	.word	0x200015ca

00006644 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6648:	4698      	mov	r8, r3
    664a:	4691      	mov	r9, r2
    664c:	460c      	mov	r4, r1
    664e:	4605      	mov	r5, r0
    6650:	f000 f936 	bl	68c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6654:	4606      	mov	r6, r0
    6656:	2810      	cmp	r0, #16
    6658:	d006      	beq.n	6668 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    665a:	f000 f901 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    665e:	2810      	cmp	r0, #16
    6660:	d002      	beq.n	6668 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6662:	2012      	movs	r0, #18
    6664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6668:	4f18      	ldr	r7, [pc, #96]	; (66cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    666a:	78b8      	ldrb	r0, [r7, #2]
    666c:	2808      	cmp	r0, #8
    666e:	d22a      	bcs.n	66c6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6670:	2e10      	cmp	r6, #16
    6672:	d105      	bne.n	6680 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6674:	2200      	movs	r2, #0
    6676:	4621      	mov	r1, r4
    6678:	4628      	mov	r0, r5
    667a:	f000 f905 	bl	6888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    667e:	4606      	mov	r6, r0
    6680:	78bc      	ldrb	r4, [r7, #2]
    6682:	2210      	movs	r2, #16
    6684:	1c60      	adds	r0, r4, #1
    6686:	70b8      	strb	r0, [r7, #2]
    6688:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    668c:	1ce8      	adds	r0, r5, #3
    668e:	4649      	mov	r1, r9
    6690:	f008 f8ff 	bl	e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6694:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6698:	2210      	movs	r2, #16
    669a:	4641      	mov	r1, r8
    669c:	f008 f8f9 	bl	e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    66a0:	2110      	movs	r1, #16
    66a2:	4640      	mov	r0, r8
    66a4:	f008 f990 	bl	e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    66a8:	443c      	add	r4, r7
    66aa:	2110      	movs	r1, #16
    66ac:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    66b0:	4648      	mov	r0, r9
    66b2:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    66b6:	f008 f987 	bl	e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    66ba:	77e0      	strb	r0, [r4, #31]
    66bc:	f804 6c29 	strb.w	r6, [r4, #-41]
    66c0:	2000      	movs	r0, #0
    66c2:	73e0      	strb	r0, [r4, #15]
    66c4:	e7ce      	b.n	6664 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    66c6:	2007      	movs	r0, #7
    66c8:	e7cc      	b.n	6664 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    66ca:	0000      	.short	0x0000
    66cc:	200015ca 	.word	0x200015ca

000066d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    66d0:	4806      	ldr	r0, [pc, #24]	; (66ec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    66d2:	b510      	push	{r4, lr}
    66d4:	7880      	ldrb	r0, [r0, #2]
    66d6:	1e40      	subs	r0, r0, #1
    66d8:	b244      	sxtb	r4, r0
    66da:	e004      	b.n	66e6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    66dc:	b2e0      	uxtb	r0, r4
    66de:	f000 f94d 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    66e2:	1e64      	subs	r4, r4, #1
    66e4:	b264      	sxtb	r4, r4
    66e6:	2c00      	cmp	r4, #0
    66e8:	daf8      	bge.n	66dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    66ea:	bd10      	pop	{r4, pc}
    66ec:	200015ca 	.word	0x200015ca

000066f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    66f0:	4801      	ldr	r0, [pc, #4]	; (66f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    66f2:	8840      	ldrh	r0, [r0, #2]
    66f4:	4770      	bx	lr
    66f6:	0000      	.short	0x0000
    66f8:	2000031c 	.word	0x2000031c

000066fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    66fc:	b138      	cbz	r0, 670e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    66fe:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6702:	4288      	cmp	r0, r1
    6704:	d803      	bhi.n	670e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6706:	4903      	ldr	r1, [pc, #12]	; (6714 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6708:	8048      	strh	r0, [r1, #2]
    670a:	2001      	movs	r0, #1
    670c:	4770      	bx	lr
    670e:	2000      	movs	r0, #0
    6710:	4770      	bx	lr
    6712:	0000      	.short	0x0000
    6714:	2000031c 	.word	0x2000031c

00006718 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6718:	4905      	ldr	r1, [pc, #20]	; (6730 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    671a:	788a      	ldrb	r2, [r1, #2]
    671c:	4282      	cmp	r2, r0
    671e:	d903      	bls.n	6728 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6720:	4408      	add	r0, r1
    6722:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6726:	b108      	cbz	r0, 672c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6728:	2000      	movs	r0, #0
    672a:	4770      	bx	lr
    672c:	2001      	movs	r0, #1
    672e:	4770      	bx	lr
    6730:	200015ca 	.word	0x200015ca

00006734 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6734:	b570      	push	{r4, r5, r6, lr}
    6736:	460d      	mov	r5, r1
    6738:	4606      	mov	r6, r0
    673a:	f000 f8c1 	bl	68c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    673e:	4c10      	ldr	r4, [pc, #64]	; (6780 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6740:	2810      	cmp	r0, #16
    6742:	d007      	beq.n	6754 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6744:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6748:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    674c:	07c9      	lsls	r1, r1, #31
    674e:	d001      	beq.n	6754 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6750:	2001      	movs	r0, #1
    6752:	bd70      	pop	{r4, r5, r6, pc}
    6754:	7861      	ldrb	r1, [r4, #1]
    6756:	2908      	cmp	r1, #8
    6758:	d210      	bcs.n	677c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    675a:	2810      	cmp	r0, #16
    675c:	d008      	beq.n	6770 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    675e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6762:	2101      	movs	r1, #1
    6764:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6768:	7860      	ldrb	r0, [r4, #1]
    676a:	1c40      	adds	r0, r0, #1
    676c:	7060      	strb	r0, [r4, #1]
    676e:	e7ef      	b.n	6750 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6770:	2201      	movs	r2, #1
    6772:	4629      	mov	r1, r5
    6774:	4630      	mov	r0, r6
    6776:	f000 f887 	bl	6888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    677a:	e7f5      	b.n	6768 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    677c:	2000      	movs	r0, #0
    677e:	bd70      	pop	{r4, r5, r6, pc}
    6780:	200015ca 	.word	0x200015ca

00006784 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6784:	b570      	push	{r4, r5, r6, lr}
    6786:	4d0b      	ldr	r5, [pc, #44]	; (67b4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6788:	7828      	ldrb	r0, [r5, #0]
    678a:	1e40      	subs	r0, r0, #1
    678c:	b244      	sxtb	r4, r0
    678e:	e00a      	b.n	67a6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6790:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6794:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6798:	07c0      	lsls	r0, r0, #31
    679a:	d002      	beq.n	67a2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    679c:	b2e0      	uxtb	r0, r4
    679e:	f000 f935 	bl	6a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    67a2:	1e64      	subs	r4, r4, #1
    67a4:	b264      	sxtb	r4, r4
    67a6:	2c00      	cmp	r4, #0
    67a8:	daf2      	bge.n	6790 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    67aa:	4903      	ldr	r1, [pc, #12]	; (67b8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    67ac:	2000      	movs	r0, #0
    67ae:	7048      	strb	r0, [r1, #1]
    67b0:	bd70      	pop	{r4, r5, r6, pc}
    67b2:	0000      	.short	0x0000
    67b4:	200015ca 	.word	0x200015ca
    67b8:	2000031c 	.word	0x2000031c

000067bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    67bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67c0:	2400      	movs	r4, #0
    67c2:	4625      	mov	r5, r4
    67c4:	4e18      	ldr	r6, [pc, #96]	; (6828 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    67c6:	e029      	b.n	681c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    67c8:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    67cc:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    67d0:	07c0      	lsls	r0, r0, #31
    67d2:	d021      	beq.n	6818 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    67d4:	4628      	mov	r0, r5
    67d6:	f000 f843 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    67da:	4603      	mov	r3, r0
    67dc:	f7ff fed4 	bl	6588 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    67e0:	4601      	mov	r1, r0
    67e2:	2000      	movs	r0, #0
    67e4:	2b10      	cmp	r3, #16
    67e6:	d009      	beq.n	67fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    67e8:	18f2      	adds	r2, r6, r3
    67ea:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    67ee:	f1bc 0f01 	cmp.w	ip, #1
    67f2:	d002      	beq.n	67fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    67f4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    67f8:	b102      	cbz	r2, 67fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    67fa:	2001      	movs	r0, #1
    67fc:	1e40      	subs	r0, r0, #1
    67fe:	4201      	tst	r1, r0
    6800:	d10a      	bne.n	6818 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6802:	480a      	ldr	r0, [pc, #40]	; (682c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6804:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6808:	5503      	strb	r3, [r0, r4]
    680a:	4620      	mov	r0, r4
    680c:	1c64      	adds	r4, r4, #1
    680e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6812:	b2e4      	uxtb	r4, r4
    6814:	f005 fb9e 	bl	bf54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6818:	1c6d      	adds	r5, r5, #1
    681a:	b2ed      	uxtb	r5, r5
    681c:	7830      	ldrb	r0, [r6, #0]
    681e:	42a8      	cmp	r0, r5
    6820:	d8d2      	bhi.n	67c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6826:	0000      	.short	0x0000
    6828:	200015ca 	.word	0x200015ca
    682c:	20000320 	.word	0x20000320
    6830:	4602      	mov	r2, r0
    6832:	4809      	ldr	r0, [pc, #36]	; (6858 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6834:	b510      	push	{r4, lr}
    6836:	7800      	ldrb	r0, [r0, #0]
    6838:	460b      	mov	r3, r1
    683a:	b158      	cbz	r0, 6854 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    683c:	4807      	ldr	r0, [pc, #28]	; (685c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    683e:	7881      	ldrb	r1, [r0, #2]
    6840:	b141      	cbz	r1, 6854 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6842:	b10b      	cbz	r3, 6848 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6844:	1cc0      	adds	r0, r0, #3
    6846:	e001      	b.n	684c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6848:	4804      	ldr	r0, [pc, #16]	; (685c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    684a:	3083      	adds	r0, #131	; 0x83
    684c:	f004 fd5c 	bl	b308 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6850:	2001      	movs	r0, #1
    6852:	bd10      	pop	{r4, pc}
    6854:	2000      	movs	r0, #0
    6856:	bd10      	pop	{r4, pc}
    6858:	2000031c 	.word	0x2000031c
    685c:	200015ca 	.word	0x200015ca
    6860:	4908      	ldr	r1, [pc, #32]	; (6884 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6862:	b510      	push	{r4, lr}
    6864:	4603      	mov	r3, r0
    6866:	2000      	movs	r0, #0
    6868:	788a      	ldrb	r2, [r1, #2]
    686a:	e006      	b.n	687a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    686c:	180c      	adds	r4, r1, r0
    686e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6872:	429c      	cmp	r4, r3
    6874:	d004      	beq.n	6880 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6876:	1c40      	adds	r0, r0, #1
    6878:	b2c0      	uxtb	r0, r0
    687a:	4282      	cmp	r2, r0
    687c:	d8f6      	bhi.n	686c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    687e:	2010      	movs	r0, #16
    6880:	bd10      	pop	{r4, pc}
    6882:	0000      	.short	0x0000
    6884:	200015ca 	.word	0x200015ca
    6888:	b570      	push	{r4, r5, r6, lr}
    688a:	4b0c      	ldr	r3, [pc, #48]	; (68bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    688c:	4604      	mov	r4, r0
    688e:	7818      	ldrb	r0, [r3, #0]
    6890:	1c45      	adds	r5, r0, #1
    6892:	701d      	strb	r5, [r3, #0]
    6894:	2810      	cmp	r0, #16
    6896:	d303      	bcc.n	68a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6898:	2146      	movs	r1, #70	; 0x46
    689a:	2028      	movs	r0, #40	; 0x28
    689c:	f7fe f9b4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68a0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    68a4:	680d      	ldr	r5, [r1, #0]
    68a6:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    68aa:	8889      	ldrh	r1, [r1, #4]
    68ac:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    68b0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    68b4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    68b8:	bd70      	pop	{r4, r5, r6, pc}
    68ba:	0000      	.short	0x0000
    68bc:	200015ca 	.word	0x200015ca
    68c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c2:	4c1a      	ldr	r4, [pc, #104]	; (692c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    68c4:	4603      	mov	r3, r0
    68c6:	2000      	movs	r0, #0
    68c8:	7825      	ldrb	r5, [r4, #0]
    68ca:	e02a      	b.n	6922 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    68cc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    68d0:	780f      	ldrb	r7, [r1, #0]
    68d2:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    68d6:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    68da:	ea87 070c 	eor.w	r7, r7, ip
    68de:	405e      	eors	r6, r3
    68e0:	443e      	add	r6, r7
    68e2:	784f      	ldrb	r7, [r1, #1]
    68e4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    68e8:	ea87 070c 	eor.w	r7, r7, ip
    68ec:	443e      	add	r6, r7
    68ee:	788f      	ldrb	r7, [r1, #2]
    68f0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    68f4:	ea87 070c 	eor.w	r7, r7, ip
    68f8:	443e      	add	r6, r7
    68fa:	78cf      	ldrb	r7, [r1, #3]
    68fc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    6900:	ea87 070c 	eor.w	r7, r7, ip
    6904:	443e      	add	r6, r7
    6906:	790f      	ldrb	r7, [r1, #4]
    6908:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    690c:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    6910:	ea87 070c 	eor.w	r7, r7, ip
    6914:	443e      	add	r6, r7
    6916:	794f      	ldrb	r7, [r1, #5]
    6918:	4057      	eors	r7, r2
    691a:	42f7      	cmn	r7, r6
    691c:	d004      	beq.n	6928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    691e:	1c40      	adds	r0, r0, #1
    6920:	b2c0      	uxtb	r0, r0
    6922:	4285      	cmp	r5, r0
    6924:	d8d2      	bhi.n	68cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    6926:	2010      	movs	r0, #16
    6928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    692a:	0000      	.short	0x0000
    692c:	200015ca 	.word	0x200015ca
    6930:	b570      	push	{r4, r5, r6, lr}
    6932:	4605      	mov	r5, r0
    6934:	f7ff ff94 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6938:	2810      	cmp	r0, #16
    693a:	d11c      	bne.n	6976 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    693c:	4c0e      	ldr	r4, [pc, #56]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    693e:	7820      	ldrb	r0, [r4, #0]
    6940:	1e40      	subs	r0, r0, #1
    6942:	b2c0      	uxtb	r0, r0
    6944:	7020      	strb	r0, [r4, #0]
    6946:	42a8      	cmp	r0, r5
    6948:	d015      	beq.n	6976 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    694a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    694e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6952:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6956:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    695a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    695e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6962:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6966:	7820      	ldrb	r0, [r4, #0]
    6968:	f7ff ff7a 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    696c:	2810      	cmp	r0, #16
    696e:	d002      	beq.n	6976 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6970:	4420      	add	r0, r4
    6972:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6976:	bd70      	pop	{r4, r5, r6, pc}
    6978:	200015ca 	.word	0x200015ca
    697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6980:	4c21      	ldr	r4, [pc, #132]	; (6a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24c>)
    6982:	4606      	mov	r6, r0
    6984:	19a7      	adds	r7, r4, r6
    6986:	78a0      	ldrb	r0, [r4, #2]
    6988:	1e40      	subs	r0, r0, #1
    698a:	b2c5      	uxtb	r5, r0
    698c:	70a5      	strb	r5, [r4, #2]
    698e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6992:	42ae      	cmp	r6, r5
    6994:	d02a      	beq.n	69ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x230>
    6996:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    699a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    699e:	f10a 0103 	add.w	r1, sl, #3
    69a2:	f109 0003 	add.w	r0, r9, #3
    69a6:	2210      	movs	r2, #16
    69a8:	f006 fb90 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    69ac:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    69b0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    69b4:	2210      	movs	r2, #16
    69b6:	f006 fb89 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    69ba:	1960      	adds	r0, r4, r5
    69bc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    69c0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    69c4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    69c8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    69cc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    69d0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    69d4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    69d8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    69dc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    69e0:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    69e4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    69e8:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    69ec:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    69f0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    69f4:	07c0      	lsls	r0, r0, #31
    69f6:	d104      	bne.n	6a02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x246>
    69f8:	4640      	mov	r0, r8
    69fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69fe:	f7ff bf97 	b.w	6930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a06:	0000      	.short	0x0000
    6a08:	200015ca 	.word	0x200015ca
    6a0c:	4905      	ldr	r1, [pc, #20]	; (6a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x268>)
    6a0e:	784a      	ldrb	r2, [r1, #1]
    6a10:	1e52      	subs	r2, r2, #1
    6a12:	704a      	strb	r2, [r1, #1]
    6a14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6a18:	2200      	movs	r2, #0
    6a1a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6a1e:	f7ff bf87 	b.w	6930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6a22:	0000      	.short	0x0000
    6a24:	200015ca 	.word	0x200015ca

00006a28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a2c:	4604      	mov	r4, r0
    6a2e:	f04f 0801 	mov.w	r8, #1
    6a32:	b181      	cbz	r1, 6a56 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6a34:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    6a38:	1e75      	subs	r5, r6, #1
    6a3a:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6a3e:	2901      	cmp	r1, #1
    6a40:	d022      	beq.n	6a88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    6a42:	2902      	cmp	r1, #2
    6a44:	d045      	beq.n	6ad2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    6a46:	2903      	cmp	r1, #3
    6a48:	d11c      	bne.n	6a84 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6a4a:	4631      	mov	r1, r6
    6a4c:	4628      	mov	r0, r5
    6a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a52:	f007 bfe9 	b.w	ea28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6a56:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    6a5a:	2100      	movs	r1, #0
    6a5c:	f006 fbb0 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6a60:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    6a64:	3484      	adds	r4, #132	; 0x84
    6a66:	f004 fc1f 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6a6a:	f644 122b 	movw	r2, #18731	; 0x492b
    6a6e:	4010      	ands	r0, r2
    6a70:	6520      	str	r0, [r4, #80]	; 0x50
    6a72:	f001 0106 	and.w	r1, r1, #6
    6a76:	6561      	str	r1, [r4, #84]	; 0x54
    6a78:	20fe      	movs	r0, #254	; 0xfe
    6a7a:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    6a7e:	207f      	movs	r0, #127	; 0x7f
    6a80:	f804 0c03 	strb.w	r0, [r4, #-3]
    6a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a88:	2700      	movs	r7, #0
    6a8a:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    6a8e:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    6a92:	4a14      	ldr	r2, [pc, #80]	; (6ae4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    6a94:	6921      	ldr	r1, [r4, #16]
    6a96:	440a      	add	r2, r1
    6a98:	fbb2 f2f1 	udiv	r2, r2, r1
    6a9c:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    6aa0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6aa4:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    6aa8:	8b63      	ldrh	r3, [r4, #26]
    6aaa:	460a      	mov	r2, r1
    6aac:	f000 f81c 	bl	6ae8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    6ab0:	4631      	mov	r1, r6
    6ab2:	4628      	mov	r0, r5
    6ab4:	f007 ffb8 	bl	ea28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6ab8:	f006 fae4 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6abc:	b118      	cbz	r0, 6ac6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    6abe:	6960      	ldr	r0, [r4, #20]
    6ac0:	f000 fbae 	bl	7220 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6ac4:	b110      	cbz	r0, 6acc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    6ac6:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    6aca:	e7db      	b.n	6a84 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6acc:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    6ad0:	e7d8      	b.n	6a84 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6ad2:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    6ad6:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    6ada:	6921      	ldr	r1, [r4, #16]
    6adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ae0:	f000 b802 	b.w	6ae8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    6ae4:	01c9c37f 	.word	0x01c9c37f
    6ae8:	b530      	push	{r4, r5, lr}
    6aea:	2400      	movs	r4, #0
    6aec:	8784      	strh	r4, [r0, #60]	; 0x3c
    6aee:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    6af2:	4d15      	ldr	r5, [pc, #84]	; (6b48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6af4:	434c      	muls	r4, r1
    6af6:	fbb4 f4f2 	udiv	r4, r4, r2
    6afa:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    6afe:	f242 7410 	movw	r4, #10000	; 0x2710
    6b02:	4363      	muls	r3, r4
    6b04:	fbb3 f3f2 	udiv	r3, r3, r2
    6b08:	1c5b      	adds	r3, r3, #1
    6b0a:	b29b      	uxth	r3, r3
    6b0c:	fb03 f402 	mul.w	r4, r3, r2
    6b10:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6b12:	42ac      	cmp	r4, r5
    6b14:	d901      	bls.n	6b1a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    6b16:	1e5b      	subs	r3, r3, #1
    6b18:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6b1a:	4b0c      	ldr	r3, [pc, #48]	; (6b4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    6b1c:	f240 2471 	movw	r4, #625	; 0x271
    6b20:	fbb3 f3f2 	udiv	r3, r3, r2
    6b24:	1c5b      	adds	r3, r3, #1
    6b26:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    6b2a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    6b2c:	4363      	muls	r3, r4
    6b2e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6b32:	1e5b      	subs	r3, r3, #1
    6b34:	fbb3 f3f2 	udiv	r3, r3, r2
    6b38:	6343      	str	r3, [r0, #52]	; 0x34
    6b3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6b3c:	434b      	muls	r3, r1
    6b3e:	fbb3 f1f2 	udiv	r1, r3, r2
    6b42:	6301      	str	r1, [r0, #48]	; 0x30
    6b44:	bd30      	pop	{r4, r5, pc}
    6b46:	0000      	.short	0x0000
    6b48:	01e84800 	.word	0x01e84800
    6b4c:	02625a00 	.word	0x02625a00

00006b50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6b50:	b570      	push	{r4, r5, r6, lr}
    6b52:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6b56:	b28b      	uxth	r3, r1
    6b58:	7ac5      	ldrb	r5, [r0, #11]
    6b5a:	ea83 0102 	eor.w	r1, r3, r2
    6b5e:	2200      	movs	r2, #0
    6b60:	b2cc      	uxtb	r4, r1
    6b62:	0a09      	lsrs	r1, r1, #8
    6b64:	fa94 f4a4 	rbit	r4, r4
    6b68:	fa91 f1a1 	rbit	r1, r1
    6b6c:	0e24      	lsrs	r4, r4, #24
    6b6e:	0e09      	lsrs	r1, r1, #24
    6b70:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6b74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6b78:	1c52      	adds	r2, r2, #1
    6b7a:	4419      	add	r1, r3
    6b7c:	b2d2      	uxtb	r2, r2
    6b7e:	b289      	uxth	r1, r1
    6b80:	2a03      	cmp	r2, #3
    6b82:	d3ed      	bcc.n	6b60 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6b84:	4059      	eors	r1, r3
    6b86:	2225      	movs	r2, #37	; 0x25
    6b88:	fbb1 f3f2 	udiv	r3, r1, r2
    6b8c:	fb02 1213 	mls	r2, r2, r3, r1
    6b90:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6b94:	f002 0607 	and.w	r6, r2, #7
    6b98:	785b      	ldrb	r3, [r3, #1]
    6b9a:	2401      	movs	r4, #1
    6b9c:	fa04 f606 	lsl.w	r6, r4, r6
    6ba0:	4233      	tst	r3, r6
    6ba2:	d001      	beq.n	6ba8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6ba4:	4610      	mov	r0, r2
    6ba6:	bd70      	pop	{r4, r5, r6, pc}
    6ba8:	434d      	muls	r5, r1
    6baa:	0c29      	lsrs	r1, r5, #16
    6bac:	1c49      	adds	r1, r1, #1
    6bae:	b2c9      	uxtb	r1, r1
    6bb0:	2200      	movs	r2, #0
    6bb2:	1885      	adds	r5, r0, r2
    6bb4:	79ab      	ldrb	r3, [r5, #6]
    6bb6:	428b      	cmp	r3, r1
    6bb8:	d312      	bcc.n	6be0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6bba:	f895 5001 	ldrb.w	r5, [r5, #1]
    6bbe:	2300      	movs	r3, #0
    6bc0:	fa04 f603 	lsl.w	r6, r4, r3
    6bc4:	4235      	tst	r5, r6
    6bc6:	d001      	beq.n	6bcc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6bc8:	1e49      	subs	r1, r1, #1
    6bca:	b2c9      	uxtb	r1, r1
    6bcc:	b121      	cbz	r1, 6bd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6bce:	1c5b      	adds	r3, r3, #1
    6bd0:	b2db      	uxtb	r3, r3
    6bd2:	2b08      	cmp	r3, #8
    6bd4:	d3f4      	bcc.n	6bc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6bd6:	e005      	b.n	6be4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6bd8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6bdc:	b2c0      	uxtb	r0, r0
    6bde:	bd70      	pop	{r4, r5, r6, pc}
    6be0:	1ac9      	subs	r1, r1, r3
    6be2:	b2c9      	uxtb	r1, r1
    6be4:	1c52      	adds	r2, r2, #1
    6be6:	b2d2      	uxtb	r2, r2
    6be8:	2a05      	cmp	r2, #5
    6bea:	d3e2      	bcc.n	6bb2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6bec:	f240 110d 	movw	r1, #269	; 0x10d
    6bf0:	2046      	movs	r0, #70	; 0x46
    6bf2:	f7fe f809 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf6:	0000      	movs	r0, r0
    6bf8:	b570      	push	{r4, r5, r6, lr}
    6bfa:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    6bfe:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    6c02:	2401      	movs	r4, #1
    6c04:	fb03 2101 	mla	r1, r3, r1, r2
    6c08:	2225      	movs	r2, #37	; 0x25
    6c0a:	fbb1 f3f2 	udiv	r3, r1, r2
    6c0e:	fb02 1113 	mls	r1, r2, r3, r1
    6c12:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6c16:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6c1a:	f001 0307 	and.w	r3, r1, #7
    6c1e:	7dd2      	ldrb	r2, [r2, #23]
    6c20:	fa04 f303 	lsl.w	r3, r4, r3
    6c24:	421a      	tst	r2, r3
    6c26:	d003      	beq.n	6c30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6c28:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    6c2c:	2000      	movs	r0, #0
    6c2e:	bd70      	pop	{r4, r5, r6, pc}
    6c30:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    6c34:	fbb1 f3f2 	udiv	r3, r1, r2
    6c38:	fb02 1113 	mls	r1, r2, r3, r1
    6c3c:	1c49      	adds	r1, r1, #1
    6c3e:	b2c9      	uxtb	r1, r1
    6c40:	2300      	movs	r3, #0
    6c42:	18c5      	adds	r5, r0, r3
    6c44:	7f2a      	ldrb	r2, [r5, #28]
    6c46:	428a      	cmp	r2, r1
    6c48:	d311      	bcc.n	6c6e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6c4a:	f895 5017 	ldrb.w	r5, [r5, #23]
    6c4e:	2200      	movs	r2, #0
    6c50:	fa04 f602 	lsl.w	r6, r4, r2
    6c54:	4235      	tst	r5, r6
    6c56:	d001      	beq.n	6c5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6c58:	1e49      	subs	r1, r1, #1
    6c5a:	b2c9      	uxtb	r1, r1
    6c5c:	b121      	cbz	r1, 6c68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6c5e:	1c52      	adds	r2, r2, #1
    6c60:	b2d2      	uxtb	r2, r2
    6c62:	2a08      	cmp	r2, #8
    6c64:	d3f4      	bcc.n	6c50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6c66:	e004      	b.n	6c72 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6c68:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6c6c:	e7dc      	b.n	6c28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6c6e:	1a89      	subs	r1, r1, r2
    6c70:	b2c9      	uxtb	r1, r1
    6c72:	1c5b      	adds	r3, r3, #1
    6c74:	b2db      	uxtb	r3, r3
    6c76:	2b05      	cmp	r3, #5
    6c78:	d3e3      	bcc.n	6c42 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6c7a:	201f      	movs	r0, #31
    6c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006c80 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6c80:	7841      	ldrb	r1, [r0, #1]
    6c82:	b141      	cbz	r1, 6c96 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6c84:	78c0      	ldrb	r0, [r0, #3]
    6c86:	2826      	cmp	r0, #38	; 0x26
    6c88:	d203      	bcs.n	6c92 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6c8a:	4a04      	ldr	r2, [pc, #16]	; (6c9c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6c8c:	5c10      	ldrb	r0, [r2, r0]
    6c8e:	4288      	cmp	r0, r1
    6c90:	d101      	bne.n	6c96 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6c92:	2001      	movs	r0, #1
    6c94:	4770      	bx	lr
    6c96:	2000      	movs	r0, #0
    6c98:	4770      	bx	lr
    6c9a:	0000      	.short	0x0000
    6c9c:	0001106a 	.word	0x0001106a

00006ca0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6ca0:	b510      	push	{r4, lr}
    6ca2:	2201      	movs	r2, #1
    6ca4:	70c1      	strb	r1, [r0, #3]
    6ca6:	2926      	cmp	r1, #38	; 0x26
    6ca8:	d202      	bcs.n	6cb0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6caa:	4a06      	ldr	r2, [pc, #24]	; (6cc4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6cac:	5c52      	ldrb	r2, [r2, r1]
    6cae:	e006      	b.n	6cbe <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6cb0:	29ff      	cmp	r1, #255	; 0xff
    6cb2:	d004      	beq.n	6cbe <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6cb4:	f240 411d 	movw	r1, #1053	; 0x41d
    6cb8:	202a      	movs	r0, #42	; 0x2a
    6cba:	f7fd ffa5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cbe:	7042      	strb	r2, [r0, #1]
    6cc0:	bd10      	pop	{r4, pc}
    6cc2:	0000      	.short	0x0000
    6cc4:	0001106a 	.word	0x0001106a

00006cc8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6cc8:	4904      	ldr	r1, [pc, #16]	; (6cdc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6cca:	7c89      	ldrb	r1, [r1, #18]
    6ccc:	0749      	lsls	r1, r1, #29
    6cce:	d400      	bmi.n	6cd2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    6cd0:	b108      	cbz	r0, 6cd6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    6cd2:	2000      	movs	r0, #0
    6cd4:	4770      	bx	lr
    6cd6:	2001      	movs	r0, #1
    6cd8:	4770      	bx	lr
    6cda:	0000      	.short	0x0000
    6cdc:	20001324 	.word	0x20001324

00006ce0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    6ce0:	4803      	ldr	r0, [pc, #12]	; (6cf0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    6ce2:	7c80      	ldrb	r0, [r0, #18]
    6ce4:	0780      	lsls	r0, r0, #30
    6ce6:	d401      	bmi.n	6cec <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6ce8:	2001      	movs	r0, #1
    6cea:	4770      	bx	lr
    6cec:	2000      	movs	r0, #0
    6cee:	4770      	bx	lr
    6cf0:	20001324 	.word	0x20001324

00006cf4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6cf4:	4803      	ldr	r0, [pc, #12]	; (6d04 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6cf6:	7c80      	ldrb	r0, [r0, #18]
    6cf8:	07c0      	lsls	r0, r0, #31
    6cfa:	d001      	beq.n	6d00 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6cfc:	2000      	movs	r0, #0
    6cfe:	4770      	bx	lr
    6d00:	2001      	movs	r0, #1
    6d02:	4770      	bx	lr
    6d04:	20001324 	.word	0x20001324

00006d08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d0c:	4c12      	ldr	r4, [pc, #72]	; (6d58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6d0e:	4607      	mov	r7, r0
    6d10:	460e      	mov	r6, r1
    6d12:	7da0      	ldrb	r0, [r4, #22]
    6d14:	b110      	cbz	r0, 6d1c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6d16:	8b20      	ldrh	r0, [r4, #24]
    6d18:	2800      	cmp	r0, #0
    6d1a:	d012      	beq.n	6d42 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6d1c:	480e      	ldr	r0, [pc, #56]	; (6d58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6d1e:	3014      	adds	r0, #20
    6d20:	4680      	mov	r8, r0
    6d22:	f008 f840 	bl	eda6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6d26:	b9a8      	cbnz	r0, 6d54 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6d28:	8aa5      	ldrh	r5, [r4, #20]
    6d2a:	8aa0      	ldrh	r0, [r4, #20]
    6d2c:	4632      	mov	r2, r6
    6d2e:	4639      	mov	r1, r7
    6d30:	f008 f87d 	bl	ee2e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6d34:	b138      	cbz	r0, 6d46 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6d36:	7da0      	ldrb	r0, [r4, #22]
    6d38:	b110      	cbz	r0, 6d40 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6d3a:	8b20      	ldrh	r0, [r4, #24]
    6d3c:	1e40      	subs	r0, r0, #1
    6d3e:	8320      	strh	r0, [r4, #24]
    6d40:	2001      	movs	r0, #1
    6d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d46:	4640      	mov	r0, r8
    6d48:	f008 f82d 	bl	eda6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6d4c:	b910      	cbnz	r0, 6d54 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6d4e:	8aa0      	ldrh	r0, [r4, #20]
    6d50:	42a8      	cmp	r0, r5
    6d52:	d1ea      	bne.n	6d2a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6d54:	2000      	movs	r0, #0
    6d56:	e7f4      	b.n	6d42 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6d58:	20001324 	.word	0x20001324
    6d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6d60:	468a      	mov	sl, r1
    6d62:	4699      	mov	r9, r3
    6d64:	4615      	mov	r5, r2
    6d66:	4604      	mov	r4, r0
    6d68:	a901      	add	r1, sp, #4
    6d6a:	f007 fc7e 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6d6e:	bbe0      	cbnz	r0, 6dea <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6d70:	9f02      	ldr	r7, [sp, #8]
    6d72:	f04f 0800 	mov.w	r8, #0
    6d76:	3778      	adds	r7, #120	; 0x78
    6d78:	b18d      	cbz	r5, 6d9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6d7a:	4620      	mov	r0, r4
    6d7c:	f7fe fb82 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6d80:	0004      	movs	r4, r0
    6d82:	d00f      	beq.n	6da4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6d84:	4629      	mov	r1, r5
    6d86:	f007 f820 	bl	ddca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6d8a:	0006      	movs	r6, r0
    6d8c:	d003      	beq.n	6d96 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6d8e:	481d      	ldr	r0, [pc, #116]	; (6e04 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6d90:	8840      	ldrh	r0, [r0, #2]
    6d92:	42a8      	cmp	r0, r5
    6d94:	d208      	bcs.n	6da8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6d96:	2000      	movs	r0, #0
    6d98:	b004      	add	sp, #16
    6d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d9e:	2001      	movs	r0, #1
    6da0:	7578      	strb	r0, [r7, #21]
    6da2:	e029      	b.n	6df8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6da4:	216e      	movs	r1, #110	; 0x6e
    6da6:	e02a      	b.n	6dfe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6da8:	4620      	mov	r0, r4
    6daa:	4631      	mov	r1, r6
    6dac:	aa03      	add	r2, sp, #12
    6dae:	f007 f805 	bl	ddbc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6db2:	9803      	ldr	r0, [sp, #12]
    6db4:	f8a0 8000 	strh.w	r8, [r0]
    6db8:	f880 8002 	strb.w	r8, [r0, #2]
    6dbc:	7d79      	ldrb	r1, [r7, #21]
    6dbe:	b109      	cbz	r1, 6dc4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6dc0:	f04f 0a02 	mov.w	sl, #2
    6dc4:	4651      	mov	r1, sl
    6dc6:	f007 ff6f 	bl	eca8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6dca:	4631      	mov	r1, r6
    6dcc:	2603      	movs	r6, #3
    6dce:	4620      	mov	r0, r4
    6dd0:	464a      	mov	r2, r9
    6dd2:	462b      	mov	r3, r5
    6dd4:	9600      	str	r6, [sp, #0]
    6dd6:	f006 fee5 	bl	dba4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6dda:	4620      	mov	r0, r4
    6ddc:	4629      	mov	r1, r5
    6dde:	f006 ffa6 	bl	dd2e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6de2:	b158      	cbz	r0, 6dfc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6de4:	4644      	mov	r4, r8
    6de6:	a801      	add	r0, sp, #4
    6de8:	e000      	b.n	6dec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6dea:	e005      	b.n	6df8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6dec:	f007 fffc 	bl	ede8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6df0:	9802      	ldr	r0, [sp, #8]
    6df2:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    6df6:	757c      	strb	r4, [r7, #21]
    6df8:	2001      	movs	r0, #1
    6dfa:	e7cd      	b.n	6d98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6dfc:	2184      	movs	r1, #132	; 0x84
    6dfe:	202b      	movs	r0, #43	; 0x2b
    6e00:	f7fd ff02 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e04:	20001324 	.word	0x20001324

00006e08 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6e08:	4901      	ldr	r1, [pc, #4]	; (6e10 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6e0a:	2001      	movs	r0, #1
    6e0c:	7008      	strb	r0, [r1, #0]
    6e0e:	4770      	bx	lr
    6e10:	200017ad 	.word	0x200017ad

00006e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6e14:	b538      	push	{r3, r4, r5, lr}
    6e16:	b198      	cbz	r0, 6e40 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    6e18:	7a03      	ldrb	r3, [r0, #8]
    6e1a:	f88d 3000 	strb.w	r3, [sp]
    6e1e:	9b00      	ldr	r3, [sp, #0]
    6e20:	9300      	str	r3, [sp, #0]
    6e22:	f89d 3000 	ldrb.w	r3, [sp]
    6e26:	2b00      	cmp	r3, #0
    6e28:	d114      	bne.n	6e54 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    6e2a:	6003      	str	r3, [r0, #0]
    6e2c:	6041      	str	r1, [r0, #4]
    6e2e:	f3ef 8310 	mrs	r3, PRIMASK
    6e32:	b672      	cpsid	i
    6e34:	4908      	ldr	r1, [pc, #32]	; (6e58 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    6e36:	680c      	ldr	r4, [r1, #0]
    6e38:	b13c      	cbz	r4, 6e4a <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    6e3a:	684c      	ldr	r4, [r1, #4]
    6e3c:	6020      	str	r0, [r4, #0]
    6e3e:	e005      	b.n	6e4c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    6e40:	f240 4141 	movw	r1, #1089	; 0x441
    6e44:	2010      	movs	r0, #16
    6e46:	f7fd fedf 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e4a:	6008      	str	r0, [r1, #0]
    6e4c:	6048      	str	r0, [r1, #4]
    6e4e:	b903      	cbnz	r3, 6e52 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    6e50:	b662      	cpsie	i
    6e52:	7202      	strb	r2, [r0, #8]
    6e54:	bd38      	pop	{r3, r4, r5, pc}
    6e56:	0000      	.short	0x0000
    6e58:	20000118 	.word	0x20000118

00006e5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e60:	0004      	movs	r4, r0
    6e62:	d00a      	beq.n	6e7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6e64:	484d      	ldr	r0, [pc, #308]	; (6f9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    6e66:	2600      	movs	r6, #0
    6e68:	7801      	ldrb	r1, [r0, #0]
    6e6a:	b149      	cbz	r1, 6e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6e6c:	7066      	strb	r6, [r4, #1]
    6e6e:	2103      	movs	r1, #3
    6e70:	7021      	strb	r1, [r4, #0]
    6e72:	2101      	movs	r1, #1
    6e74:	7121      	strb	r1, [r4, #4]
    6e76:	7006      	strb	r6, [r0, #0]
    6e78:	e08d      	b.n	6f96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6e7a:	f240 315d 	movw	r1, #861	; 0x35d
    6e7e:	e050      	b.n	6f22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6e80:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6fa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    6e84:	f88d 6000 	strb.w	r6, [sp]
    6e88:	4668      	mov	r0, sp
    6e8a:	f000 f8b9 	bl	7000 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6e8e:	f89d 1000 	ldrb.w	r1, [sp]
    6e92:	2900      	cmp	r1, #0
    6e94:	d1f8      	bne.n	6e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    6e96:	2800      	cmp	r0, #0
    6e98:	d07e      	beq.n	6f98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6e9a:	4605      	mov	r5, r0
    6e9c:	7a00      	ldrb	r0, [r0, #8]
    6e9e:	f88d 0000 	strb.w	r0, [sp]
    6ea2:	9800      	ldr	r0, [sp, #0]
    6ea4:	9000      	str	r0, [sp, #0]
    6ea6:	f89d 7000 	ldrb.w	r7, [sp]
    6eaa:	2f1f      	cmp	r7, #31
    6eac:	d26e      	bcs.n	6f8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6eae:	e8df f007 	tbb	[pc, r7]
    6eb2:	3d6d      	.short	0x3d6d
    6eb4:	3d6d106d 	.word	0x3d6d106d
    6eb8:	3d3d4d3d 	.word	0x3d3d4d3d
    6ebc:	6d3d3d3d 	.word	0x6d3d3d3d
    6ec0:	3d3d6d10 	.word	0x3d3d6d10
    6ec4:	6d6d6d10 	.word	0x6d6d6d10
    6ec8:	103d3d6d 	.word	0x103d3d6d
    6ecc:	626d3d3d 	.word	0x626d3d3d
    6ed0:	0010      	.short	0x0010
    6ed2:	4834      	ldr	r0, [pc, #208]	; (6fa4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    6ed4:	6803      	ldr	r3, [r0, #0]
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d05c      	beq.n	6f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    6eda:	6868      	ldr	r0, [r5, #4]
    6edc:	463a      	mov	r2, r7
    6ede:	4621      	mov	r1, r4
    6ee0:	4798      	blx	r3
    6ee2:	7820      	ldrb	r0, [r4, #0]
    6ee4:	6869      	ldr	r1, [r5, #4]
    6ee6:	2811      	cmp	r0, #17
    6ee8:	d002      	beq.n	6ef0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6eea:	2814      	cmp	r0, #20
    6eec:	d003      	beq.n	6ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6eee:	e01b      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ef0:	7920      	ldrb	r0, [r4, #4]
    6ef2:	b930      	cbnz	r0, 6f02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    6ef4:	e018      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6ef6:	7920      	ldrb	r0, [r4, #4]
    6ef8:	b1b0      	cbz	r0, 6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6efa:	4608      	mov	r0, r1
    6efc:	f008 faab 	bl	f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6f00:	b990      	cbnz	r0, 6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f02:	88e4      	ldrh	r4, [r4, #6]
    6f04:	2100      	movs	r1, #0
    6f06:	4620      	mov	r0, r4
    6f08:	f007 f912 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f0c:	b160      	cbz	r0, 6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f0e:	8800      	ldrh	r0, [r0, #0]
    6f10:	f007 facc 	bl	e4ac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6f14:	2100      	movs	r1, #0
    6f16:	4620      	mov	r0, r4
    6f18:	f7fe f90a 	bl	5130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f1c:	b120      	cbz	r0, 6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f1e:	f44f 71af 	mov.w	r1, #350	; 0x15e
    6f22:	2010      	movs	r0, #16
    6f24:	f7fd fe70 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f28:	722e      	strb	r6, [r5, #8]
    6f2a:	e034      	b.n	6f96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6f2c:	f8d8 0000 	ldr.w	r0, [r8]
    6f30:	b358      	cbz	r0, 6f8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    6f32:	463a      	mov	r2, r7
    6f34:	4629      	mov	r1, r5
    6f36:	4620      	mov	r0, r4
    6f38:	f000 f892 	bl	7060 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    6f3c:	b110      	cbz	r0, 6f44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    6f3e:	2f0b      	cmp	r7, #11
    6f40:	d029      	beq.n	6f96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6f42:	e7f1      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f44:	2f0b      	cmp	r7, #11
    6f46:	d026      	beq.n	6f96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6f48:	722e      	strb	r6, [r5, #8]
    6f4a:	e79b      	b.n	6e84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    6f4c:	f8d8 0000 	ldr.w	r0, [r8]
    6f50:	b180      	cbz	r0, 6f74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    6f52:	6868      	ldr	r0, [r5, #4]
    6f54:	7066      	strb	r6, [r4, #1]
    6f56:	2108      	movs	r1, #8
    6f58:	7021      	strb	r1, [r4, #0]
    6f5a:	8801      	ldrh	r1, [r0, #0]
    6f5c:	80a1      	strh	r1, [r4, #4]
    6f5e:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    6f62:	f8c4 1006 	str.w	r1, [r4, #6]
    6f66:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    6f6a:	f8c4 100a 	str.w	r1, [r4, #10]
    6f6e:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    6f72:	81e0      	strh	r0, [r4, #14]
    6f74:	e7d8      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f76:	480c      	ldr	r0, [pc, #48]	; (6fa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    6f78:	6803      	ldr	r3, [r0, #0]
    6f7a:	b11b      	cbz	r3, 6f84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    6f7c:	2200      	movs	r2, #0
    6f7e:	4621      	mov	r1, r4
    6f80:	4610      	mov	r0, r2
    6f82:	4798      	blx	r3
    6f84:	e7d0      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f86:	e007      	b.n	6f98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6f88:	e000      	b.n	6f8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6f8a:	e002      	b.n	6f92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    6f8c:	f240 412d 	movw	r1, #1069	; 0x42d
    6f90:	e7c7      	b.n	6f22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6f92:	e7c9      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f94:	e7c8      	b.n	6f28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6f96:	2001      	movs	r0, #1
    6f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f9c:	200017ad 	.word	0x200017ad
    6fa0:	20000124 	.word	0x20000124
    6fa4:	20000120 	.word	0x20000120
    6fa8:	20000128 	.word	0x20000128

00006fac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6fac:	4901      	ldr	r1, [pc, #4]	; (6fb4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6fae:	7008      	strb	r0, [r1, #0]
    6fb0:	f000 b928 	b.w	7204 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    6fb4:	20000114 	.word	0x20000114

00006fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6fb8:	4801      	ldr	r0, [pc, #4]	; (6fc0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6fba:	7800      	ldrb	r0, [r0, #0]
    6fbc:	f7fd bc28 	b.w	4810 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6fc0:	20000114 	.word	0x20000114

00006fc4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6fc4:	4902      	ldr	r1, [pc, #8]	; (6fd0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6fc6:	4801      	ldr	r0, [pc, #4]	; (6fcc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6fc8:	6008      	str	r0, [r1, #0]
    6fca:	4770      	bx	lr
    6fcc:	0000f381 	.word	0x0000f381
    6fd0:	20000120 	.word	0x20000120

00006fd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6fd4:	4905      	ldr	r1, [pc, #20]	; (6fec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6fd6:	4804      	ldr	r0, [pc, #16]	; (6fe8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6fd8:	6008      	str	r0, [r1, #0]
    6fda:	4906      	ldr	r1, [pc, #24]	; (6ff4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6fdc:	4804      	ldr	r0, [pc, #16]	; (6ff0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6fde:	6008      	str	r0, [r1, #0]
    6fe0:	4906      	ldr	r1, [pc, #24]	; (6ffc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6fe2:	4805      	ldr	r0, [pc, #20]	; (6ff8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6fe4:	6008      	str	r0, [r1, #0]
    6fe6:	4770      	bx	lr
    6fe8:	0000f381 	.word	0x0000f381
    6fec:	20000120 	.word	0x20000120
    6ff0:	0000eec1 	.word	0x0000eec1
    6ff4:	20000124 	.word	0x20000124
    6ff8:	00005a11 	.word	0x00005a11
    6ffc:	20000128 	.word	0x20000128
    7000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7002:	4605      	mov	r5, r0
    7004:	4c15      	ldr	r4, [pc, #84]	; (705c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    7006:	2000      	movs	r0, #0
    7008:	7028      	strb	r0, [r5, #0]
    700a:	6820      	ldr	r0, [r4, #0]
    700c:	2800      	cmp	r0, #0
    700e:	d023      	beq.n	7058 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7010:	7a01      	ldrb	r1, [r0, #8]
    7012:	2601      	movs	r6, #1
    7014:	f88d 1000 	strb.w	r1, [sp]
    7018:	9900      	ldr	r1, [sp, #0]
    701a:	9100      	str	r1, [sp, #0]
    701c:	f89d 1000 	ldrb.w	r1, [sp]
    7020:	2908      	cmp	r1, #8
    7022:	d107      	bne.n	7034 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    7024:	6840      	ldr	r0, [r0, #4]
    7026:	8800      	ldrh	r0, [r0, #0]
    7028:	f7fe fa16 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    702c:	f006 fdd1 	bl	dbd2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7030:	2800      	cmp	r0, #0
    7032:	d011      	beq.n	7058 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7034:	f3ef 8110 	mrs	r1, PRIMASK
    7038:	6820      	ldr	r0, [r4, #0]
    703a:	b672      	cpsid	i
    703c:	6802      	ldr	r2, [r0, #0]
    703e:	6022      	str	r2, [r4, #0]
    7040:	b901      	cbnz	r1, 7044 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    7042:	b662      	cpsie	i
    7044:	7a01      	ldrb	r1, [r0, #8]
    7046:	f88d 1000 	strb.w	r1, [sp]
    704a:	9900      	ldr	r1, [sp, #0]
    704c:	9100      	str	r1, [sp, #0]
    704e:	f89d 1000 	ldrb.w	r1, [sp]
    7052:	2900      	cmp	r1, #0
    7054:	d100      	bne.n	7058 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7056:	702e      	strb	r6, [r5, #0]
    7058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    705a:	0000      	.short	0x0000
    705c:	20000118 	.word	0x20000118
    7060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7064:	b086      	sub	sp, #24
    7066:	000f      	movs	r7, r1
    7068:	4604      	mov	r4, r0
    706a:	4691      	mov	r9, r2
    706c:	d013      	beq.n	7096 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    706e:	6878      	ldr	r0, [r7, #4]
    7070:	b188      	cbz	r0, 7096 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    7072:	f100 0578 	add.w	r5, r0, #120	; 0x78
    7076:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    707a:	8806      	ldrh	r6, [r0, #0]
    707c:	4610      	mov	r0, r2
    707e:	f04f 0800 	mov.w	r8, #0
    7082:	2a10      	cmp	r2, #16
    7084:	d079      	beq.n	717a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    7086:	dc09      	bgt.n	709c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    7088:	f04f 0a01 	mov.w	sl, #1
    708c:	2801      	cmp	r0, #1
    708e:	d00a      	beq.n	70a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    7090:	2a0b      	cmp	r2, #11
    7092:	d171      	bne.n	7178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7094:	e01a      	b.n	70cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    7096:	f240 2182 	movw	r1, #642	; 0x282
    709a:	e0ad      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    709c:	281a      	cmp	r0, #26
    709e:	d04d      	beq.n	713c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    70a0:	2a1b      	cmp	r2, #27
    70a2:	d169      	bne.n	7178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    70a4:	e027      	b.n	70f6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    70a6:	2d00      	cmp	r5, #0
    70a8:	d00f      	beq.n	70ca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    70aa:	f884 8001 	strb.w	r8, [r4, #1]
    70ae:	f884 a000 	strb.w	sl, [r4]
    70b2:	f884 8004 	strb.w	r8, [r4, #4]
    70b6:	f8a4 6005 	strh.w	r6, [r4, #5]
    70ba:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    70be:	71e0      	strb	r0, [r4, #7]
    70c0:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    70c4:	8120      	strh	r0, [r4, #8]
    70c6:	8868      	ldrh	r0, [r5, #2]
    70c8:	8160      	strh	r0, [r4, #10]
    70ca:	e076      	b.n	71ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    70cc:	4630      	mov	r0, r6
    70ce:	f7fe f9d9 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    70d2:	b168      	cbz	r0, 70f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    70d4:	f884 8001 	strb.w	r8, [r4, #1]
    70d8:	220d      	movs	r2, #13
    70da:	7022      	strb	r2, [r4, #0]
    70dc:	80e6      	strh	r6, [r4, #6]
    70de:	4641      	mov	r1, r8
    70e0:	f8a4 a008 	strh.w	sl, [r4, #8]
    70e4:	f884 a004 	strb.w	sl, [r4, #4]
    70e8:	460a      	mov	r2, r1
    70ea:	f006 ff45 	bl	df78 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    70ee:	e064      	b.n	71ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    70f0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    70f4:	e080      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    70f6:	f7ff fdfd 	bl	6cf4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    70fa:	b3e8      	cbz	r0, 7178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    70fc:	f887 8008 	strb.w	r8, [r7, #8]
    7100:	4630      	mov	r0, r6
    7102:	f8ad 6000 	strh.w	r6, [sp]
    7106:	a902      	add	r1, sp, #8
    7108:	f007 faaf 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    710c:	b110      	cbz	r0, 7114 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    710e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    7112:	e071      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7114:	9803      	ldr	r0, [sp, #12]
    7116:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    711a:	f88d 1002 	strb.w	r1, [sp, #2]
    711e:	7841      	ldrb	r1, [r0, #1]
    7120:	f88d 1003 	strb.w	r1, [sp, #3]
    7124:	8840      	ldrh	r0, [r0, #2]
    7126:	f8ad 0004 	strh.w	r0, [sp, #4]
    712a:	2102      	movs	r1, #2
    712c:	4668      	mov	r0, sp
    712e:	f009 fc2c 	bl	1098a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7132:	2800      	cmp	r0, #0
    7134:	d034      	beq.n	71a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7136:	f44f 71c2 	mov.w	r1, #388	; 0x184
    713a:	e05d      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    713c:	f7ff fdd0 	bl	6ce0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    7140:	b1d0      	cbz	r0, 7178 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7142:	f887 8008 	strb.w	r8, [r7, #8]
    7146:	a903      	add	r1, sp, #12
    7148:	4630      	mov	r0, r6
    714a:	f009 fa95 	bl	10678 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    714e:	b110      	cbz	r0, 7156 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    7150:	f240 118b 	movw	r1, #395	; 0x18b
    7154:	e050      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7156:	f8ad 6000 	strh.w	r6, [sp]
    715a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    715e:	f8ad 0002 	strh.w	r0, [sp, #2]
    7162:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7166:	f8ad 0004 	strh.w	r0, [sp, #4]
    716a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    716e:	f8ad 0006 	strh.w	r0, [sp, #6]
    7172:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7176:	e001      	b.n	717c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    7178:	e015      	b.n	71a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    717a:	e009      	b.n	7190 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    717c:	f8ad 0008 	strh.w	r0, [sp, #8]
    7180:	4668      	mov	r0, sp
    7182:	f009 fa9d 	bl	106c0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7186:	2800      	cmp	r0, #0
    7188:	d00a      	beq.n	71a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    718a:	f44f 71ca 	mov.w	r1, #404	; 0x194
    718e:	e033      	b.n	71f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7190:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    7194:	f000 0001 	and.w	r0, r0, #1
    7198:	f7ff fd96 	bl	6cc8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    719c:	b130      	cbz	r0, 71ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    719e:	2000      	movs	r0, #0
    71a0:	b006      	add	sp, #24
    71a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71a6:	f1b9 0f08 	cmp.w	r9, #8
    71aa:	d008      	beq.n	71be <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    71ac:	4814      	ldr	r0, [pc, #80]	; (7200 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    71ae:	6803      	ldr	r3, [r0, #0]
    71b0:	b11b      	cbz	r3, 71ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    71b2:	6878      	ldr	r0, [r7, #4]
    71b4:	464a      	mov	r2, r9
    71b6:	4621      	mov	r1, r4
    71b8:	4798      	blx	r3
    71ba:	2001      	movs	r0, #1
    71bc:	e7f0      	b.n	71a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    71be:	4630      	mov	r0, r6
    71c0:	f7fe f94a 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    71c4:	f006 fd05 	bl	dbd2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    71c8:	b1a0      	cbz	r0, 71f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    71ca:	4630      	mov	r0, r6
    71cc:	f007 f96e 	bl	e4ac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    71d0:	2100      	movs	r1, #0
    71d2:	4630      	mov	r0, r6
    71d4:	f7fd ffac 	bl	5130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    71d8:	2d00      	cmp	r5, #0
    71da:	d0ee      	beq.n	71ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    71dc:	f884 8001 	strb.w	r8, [r4, #1]
    71e0:	210a      	movs	r1, #10
    71e2:	7021      	strb	r1, [r4, #0]
    71e4:	f884 8004 	strb.w	r8, [r4, #4]
    71e8:	f8a4 6005 	strh.w	r6, [r4, #5]
    71ec:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    71f0:	71e0      	strb	r0, [r4, #7]
    71f2:	e7e2      	b.n	71ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    71f4:	f240 21c3 	movw	r1, #707	; 0x2c3
    71f8:	2010      	movs	r0, #16
    71fa:	f7fd fd05 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71fe:	0000      	.short	0x0000
    7200:	20000124 	.word	0x20000124
    7204:	4904      	ldr	r1, [pc, #16]	; (7218 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    7206:	2000      	movs	r0, #0
    7208:	6048      	str	r0, [r1, #4]
    720a:	6088      	str	r0, [r1, #8]
    720c:	4903      	ldr	r1, [pc, #12]	; (721c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    720e:	6008      	str	r0, [r1, #0]
    7210:	6048      	str	r0, [r1, #4]
    7212:	8108      	strh	r0, [r1, #8]
    7214:	4770      	bx	lr
    7216:	0000      	.short	0x0000
    7218:	20000114 	.word	0x20000114
    721c:	200017ad 	.word	0x200017ad

00007220 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7220:	b5f0      	push	{r4, r5, r6, r7, lr}
    7222:	f06f 021f 	mvn.w	r2, #31
    7226:	0c01      	lsrs	r1, r0, #16
    7228:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    722c:	251f      	movs	r5, #31
    722e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7232:	3854      	subs	r0, #84	; 0x54
    7234:	d00d      	beq.n	7252 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7236:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    723a:	3855      	subs	r0, #85	; 0x55
    723c:	d009      	beq.n	7252 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    723e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7242:	38aa      	subs	r0, #170	; 0xaa
    7244:	d005      	beq.n	7252 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7246:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    724a:	38aa      	subs	r0, #170	; 0xaa
    724c:	d001      	beq.n	7252 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    724e:	2001      	movs	r0, #1
    7250:	e000      	b.n	7254 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7252:	2000      	movs	r0, #0
    7254:	2200      	movs	r2, #0
    7256:	4613      	mov	r3, r2
    7258:	ea4f 0402 	mov.w	r4, r2
    725c:	ea82 0701 	eor.w	r7, r2, r1
    7260:	43ff      	mvns	r7, r7
    7262:	431f      	orrs	r7, r3
    7264:	1c7f      	adds	r7, r7, #1
    7266:	d00f      	beq.n	7288 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7268:	f006 0701 	and.w	r7, r6, #1
    726c:	0852      	lsrs	r2, r2, #1
    726e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7272:	f005 0701 	and.w	r7, r5, #1
    7276:	085b      	lsrs	r3, r3, #1
    7278:	0876      	lsrs	r6, r6, #1
    727a:	086d      	lsrs	r5, r5, #1
    727c:	1c64      	adds	r4, r4, #1
    727e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7282:	2c16      	cmp	r4, #22
    7284:	d3ea      	bcc.n	725c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7288:	2000      	movs	r0, #0
    728a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000728c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    728c:	b510      	push	{r4, lr}
    728e:	4804      	ldr	r0, [pc, #16]	; (72a0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7290:	f007 ffe0 	bl	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7294:	4802      	ldr	r0, [pc, #8]	; (72a0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    729a:	3008      	adds	r0, #8
    729c:	f007 bfda 	b.w	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    72a0:	2000012c 	.word	0x2000012c

000072a4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    72a4:	4801      	ldr	r0, [pc, #4]	; (72ac <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    72a6:	f000 b809 	b.w	72bc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    72aa:	0000      	.short	0x0000
    72ac:	2000012c 	.word	0x2000012c

000072b0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    72b0:	4801      	ldr	r0, [pc, #4]	; (72b8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    72b2:	f000 b803 	b.w	72bc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    72b6:	0000      	.short	0x0000
    72b8:	20000134 	.word	0x20000134
    72bc:	b510      	push	{r4, lr}
    72be:	e9d0 2100 	ldrd	r2, r1, [r0]
    72c2:	4b09      	ldr	r3, [pc, #36]	; (72e8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    72c4:	4c09      	ldr	r4, [pc, #36]	; (72ec <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    72c6:	4353      	muls	r3, r2
    72c8:	4354      	muls	r4, r2
    72ca:	4051      	eors	r1, r2
    72cc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    72d0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    72d4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    72d8:	e9c0 2100 	strd	r2, r1, [r0]
    72dc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    72e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    72e4:	4618      	mov	r0, r3
    72e6:	bd10      	pop	{r4, pc}
    72e8:	c6ef3760 	.word	0xc6ef3760
    72ec:	9e3779bb 	.word	0x9e3779bb

000072f0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    72f0:	b570      	push	{r4, r5, r6, lr}
    72f2:	4604      	mov	r4, r0
    72f4:	7c00      	ldrb	r0, [r0, #16]
    72f6:	b300      	cbz	r0, 733a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    72f8:	2802      	cmp	r0, #2
    72fa:	d01e      	beq.n	733a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    72fc:	f05f 0001 	movs.w	r0, #1
    7300:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7304:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7308:	460d      	mov	r5, r1
    730a:	b1c0      	cbz	r0, 733e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    730c:	7de0      	ldrb	r0, [r4, #23]
    730e:	b1f0      	cbz	r0, 734e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7310:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7314:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7318:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    731c:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7320:	7c20      	ldrb	r0, [r4, #16]
    7322:	f007 ffb8 	bl	f296 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7326:	7620      	strb	r0, [r4, #24]
    7328:	2008      	movs	r0, #8
    732a:	7660      	strb	r0, [r4, #25]
    732c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7330:	4629      	mov	r1, r5
    7332:	f007 ff9c 	bl	f26e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7336:	b9a8      	cbnz	r0, 7364 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7338:	e00e      	b.n	7358 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    733a:	2000      	movs	r0, #0
    733c:	e7e0      	b.n	7300 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    733e:	2000      	movs	r0, #0
    7340:	f7fe fb18 	bl	5974 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7344:	2800      	cmp	r0, #0
    7346:	d1eb      	bne.n	7320 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7348:	f240 418a 	movw	r1, #1162	; 0x48a
    734c:	e001      	b.n	7352 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    734e:	f240 418e 	movw	r1, #1166	; 0x48e
    7352:	202d      	movs	r0, #45	; 0x2d
    7354:	f7fd fc58 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7358:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    735c:	4629      	mov	r1, r5
    735e:	f007 ff8f 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7362:	b100      	cbz	r0, 7366 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7364:	2001      	movs	r0, #1
    7366:	76a0      	strb	r0, [r4, #26]
    7368:	7e20      	ldrb	r0, [r4, #24]
    736a:	b130      	cbz	r0, 737a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    736c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7370:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7374:	f007 f936 	bl	e5e4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7378:	7660      	strb	r0, [r4, #25]
    737a:	f7ff f9b9 	bl	66f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    737e:	490c      	ldr	r1, [pc, #48]	; (73b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    7380:	fba0 2301 	umull	r2, r3, r0, r1
    7384:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7388:	f008 f91e 	bl	f5c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    738c:	2100      	movs	r1, #0
    738e:	4620      	mov	r0, r4
    7390:	f008 f8c8 	bl	f524 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7394:	2000      	movs	r0, #0
    7396:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    739a:	78a0      	ldrb	r0, [r4, #2]
    739c:	0740      	lsls	r0, r0, #29
    739e:	d505      	bpl.n	73ac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    73a0:	4620      	mov	r0, r4
    73a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    73a6:	2100      	movs	r1, #0
    73a8:	f000 bdac 	b.w	7f04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    73ac:	bd70      	pop	{r4, r5, r6, pc}
    73ae:	0000      	.short	0x0000
    73b0:	000f4240 	.word	0x000f4240

000073b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    73b4:	b530      	push	{r4, r5, lr}
    73b6:	460c      	mov	r4, r1
    73b8:	b08d      	sub	sp, #52	; 0x34
    73ba:	4605      	mov	r5, r0
    73bc:	4601      	mov	r1, r0
    73be:	2220      	movs	r2, #32
    73c0:	a802      	add	r0, sp, #8
    73c2:	f005 fe83 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    73c6:	a80a      	add	r0, sp, #40	; 0x28
    73c8:	f008 f964 	bl	f694 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    73cc:	7aa0      	ldrb	r0, [r4, #10]
    73ce:	f88d 0018 	strb.w	r0, [sp, #24]
    73d2:	7820      	ldrb	r0, [r4, #0]
    73d4:	f88d 0008 	strb.w	r0, [sp, #8]
    73d8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    73dc:	f8ad 0000 	strh.w	r0, [sp]
    73e0:	f89d 0000 	ldrb.w	r0, [sp]
    73e4:	f000 0101 	and.w	r1, r0, #1
    73e8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    73ec:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    73f0:	f3c0 0280 	ubfx	r2, r0, #2, #1
    73f4:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    73f8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    73fc:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7400:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7404:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7408:	f3c0 1240 	ubfx	r2, r0, #5, #1
    740c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7410:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7414:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7418:	f8ad 000a 	strh.w	r0, [sp, #10]
    741c:	7d20      	ldrb	r0, [r4, #20]
    741e:	2801      	cmp	r0, #1
    7420:	d006      	beq.n	7430 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7422:	2802      	cmp	r0, #2
    7424:	d004      	beq.n	7430 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7426:	f240 21bb 	movw	r1, #699	; 0x2bb
    742a:	2006      	movs	r0, #6
    742c:	f7fd fbec 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7430:	f88d 000c 	strb.w	r0, [sp, #12]
    7434:	7a61      	ldrb	r1, [r4, #9]
    7436:	a80a      	add	r0, sp, #40	; 0x28
    7438:	f008 f913 	bl	f662 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    743c:	7d20      	ldrb	r0, [r4, #20]
    743e:	2101      	movs	r1, #1
    7440:	2802      	cmp	r0, #2
    7442:	d102      	bne.n	744a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7444:	7d60      	ldrb	r0, [r4, #21]
    7446:	1c40      	adds	r0, r0, #1
    7448:	b2c1      	uxtb	r1, r0
    744a:	7ea0      	ldrb	r0, [r4, #26]
    744c:	1c40      	adds	r0, r0, #1
    744e:	b2c2      	uxtb	r2, r0
    7450:	a80a      	add	r0, sp, #40	; 0x28
    7452:	f008 f8cd 	bl	f5f0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7456:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    745a:	0700      	lsls	r0, r0, #28
    745c:	d501      	bpl.n	7462 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    745e:	2000      	movs	r0, #0
    7460:	e020      	b.n	74a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7462:	a80a      	add	r0, sp, #40	; 0x28
    7464:	f008 f8d6 	bl	f614 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7468:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    746c:	2228      	movs	r2, #40	; 0x28
    746e:	f000 fdef 	bl	8050 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7472:	f240 2171 	movw	r1, #625	; 0x271
    7476:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    747a:	fbb0 f0f1 	udiv	r0, r0, r1
    747e:	4348      	muls	r0, r1
    7480:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7484:	f240 2371 	movw	r3, #625	; 0x271
    7488:	0a0a      	lsrs	r2, r1, #8
    748a:	f240 2171 	movw	r1, #625	; 0x271
    748e:	434a      	muls	r2, r1
    7490:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7494:	0a09      	lsrs	r1, r1, #8
    7496:	4359      	muls	r1, r3
    7498:	4290      	cmp	r0, r2
    749a:	d801      	bhi.n	74a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    749c:	9204      	str	r2, [sp, #16]
    749e:	e004      	b.n	74aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    74a0:	4288      	cmp	r0, r1
    74a2:	d801      	bhi.n	74a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    74a4:	9004      	str	r0, [sp, #16]
    74a6:	e000      	b.n	74aa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    74a8:	9104      	str	r1, [sp, #16]
    74aa:	7ca0      	ldrb	r0, [r4, #18]
    74ac:	f88d 0017 	strb.w	r0, [sp, #23]
    74b0:	7e20      	ldrb	r0, [r4, #24]
    74b2:	2801      	cmp	r0, #1
    74b4:	d000      	beq.n	74b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    74b6:	2000      	movs	r0, #0
    74b8:	f88d 0014 	strb.w	r0, [sp, #20]
    74bc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    74be:	f006 fef8 	bl	e2b2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    74c2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    74c4:	f006 ff99 	bl	e3fa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    74c8:	2220      	movs	r2, #32
    74ca:	a902      	add	r1, sp, #8
    74cc:	4628      	mov	r0, r5
    74ce:	f005 fdfd 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    74d4:	6228      	str	r0, [r5, #32]
    74d6:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    74da:	84a8      	strh	r0, [r5, #36]	; 0x24
    74dc:	7ae0      	ldrb	r0, [r4, #11]
    74de:	b168      	cbz	r0, 74fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    74e0:	2802      	cmp	r0, #2
    74e2:	d00b      	beq.n	74fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    74e4:	f05f 0001 	movs.w	r0, #1
    74e8:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    74ec:	68e0      	ldr	r0, [r4, #12]
    74ee:	6528      	str	r0, [r5, #80]	; 0x50
    74f0:	8a20      	ldrh	r0, [r4, #16]
    74f2:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    74f6:	b00d      	add	sp, #52	; 0x34
    74f8:	2000      	movs	r0, #0
    74fa:	bd30      	pop	{r4, r5, pc}
    74fc:	2000      	movs	r0, #0
    74fe:	e7f3      	b.n	74e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007500 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7500:	4a0a      	ldr	r2, [pc, #40]	; (752c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7502:	b510      	push	{r4, lr}
    7504:	2100      	movs	r1, #0
    7506:	7011      	strb	r1, [r2, #0]
    7508:	4c09      	ldr	r4, [pc, #36]	; (7530 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    750a:	6060      	str	r0, [r4, #4]
    750c:	f000 f822 	bl	7554 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7510:	b110      	cbz	r0, 7518 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7512:	f240 310a 	movw	r1, #778	; 0x30a
    7516:	e004      	b.n	7522 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7518:	68a0      	ldr	r0, [r4, #8]
    751a:	2800      	cmp	r0, #0
    751c:	d104      	bne.n	7528 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    751e:	f240 310d 	movw	r1, #781	; 0x30d
    7522:	202d      	movs	r0, #45	; 0x2d
    7524:	f7fd fb70 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7528:	bd10      	pop	{r4, pc}
    752a:	0000      	.short	0x0000
    752c:	20001340 	.word	0x20001340
    7530:	2000013c 	.word	0x2000013c

00007534 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7534:	4902      	ldr	r1, [pc, #8]	; (7540 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7536:	4801      	ldr	r0, [pc, #4]	; (753c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7538:	6088      	str	r0, [r1, #8]
    753a:	4770      	bx	lr
    753c:	00008038 	.word	0x00008038
    7540:	2000013c 	.word	0x2000013c

00007544 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7544:	4902      	ldr	r1, [pc, #8]	; (7550 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7546:	6008      	str	r0, [r1, #0]
    7548:	6889      	ldr	r1, [r1, #8]
    754a:	6809      	ldr	r1, [r1, #0]
    754c:	4708      	bx	r1
    754e:	0000      	.short	0x0000
    7550:	2000013c 	.word	0x2000013c

00007554 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7554:	4808      	ldr	r0, [pc, #32]	; (7578 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7556:	b510      	push	{r4, lr}
    7558:	7800      	ldrb	r0, [r0, #0]
    755a:	b110      	cbz	r0, 7562 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    755c:	240c      	movs	r4, #12
    755e:	4620      	mov	r0, r4
    7560:	bd10      	pop	{r4, pc}
    7562:	2400      	movs	r4, #0
    7564:	2218      	movs	r2, #24
    7566:	4621      	mov	r1, r4
    7568:	4803      	ldr	r0, [pc, #12]	; (7578 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    756a:	f005 fe29 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    756e:	f004 f8bd 	bl	b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7572:	f003 fee1 	bl	b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7576:	e7f2      	b.n	755e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7578:	20001340 	.word	0x20001340

0000757c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    757c:	4904      	ldr	r1, [pc, #16]	; (7590 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    757e:	b510      	push	{r4, lr}
    7580:	7809      	ldrb	r1, [r1, #0]
    7582:	2901      	cmp	r1, #1
    7584:	d101      	bne.n	758a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7586:	f000 fb7b 	bl	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    758a:	2000      	movs	r0, #0
    758c:	bd10      	pop	{r4, pc}
    758e:	0000      	.short	0x0000
    7590:	20001340 	.word	0x20001340

00007594 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7594:	4902      	ldr	r1, [pc, #8]	; (75a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7596:	4801      	ldr	r0, [pc, #4]	; (759c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7598:	6008      	str	r0, [r1, #0]
    759a:	4770      	bx	lr
    759c:	00007dbd 	.word	0x00007dbd
    75a0:	20000148 	.word	0x20000148
    75a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75a8:	000f      	movs	r7, r1
    75aa:	4604      	mov	r4, r0
    75ac:	d023      	beq.n	75f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    75ae:	f104 0020 	add.w	r0, r4, #32
    75b2:	4605      	mov	r5, r0
    75b4:	f008 f857 	bl	f666 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    75b8:	b9b0      	cbnz	r0, 75e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    75ba:	78a0      	ldrb	r0, [r4, #2]
    75bc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    75c0:	b350      	cbz	r0, 7618 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    75c2:	4628      	mov	r0, r5
    75c4:	f008 f826 	bl	f614 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    75c8:	4606      	mov	r6, r0
    75ca:	4628      	mov	r0, r5
    75cc:	f008 f84b 	bl	f666 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    75d0:	1a30      	subs	r0, r6, r0
    75d2:	b2c0      	uxtb	r0, r0
    75d4:	f008 f89c 	bl	f710 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    75d8:	4601      	mov	r1, r0
    75da:	4835      	ldr	r0, [pc, #212]	; (76b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    75dc:	6842      	ldr	r2, [r0, #4]
    75de:	4411      	add	r1, r2
    75e0:	6041      	str	r1, [r0, #4]
    75e2:	4628      	mov	r0, r5
    75e4:	f008 f85d 	bl	f6a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    75e8:	4628      	mov	r0, r5
    75ea:	f008 f81f 	bl	f62c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    75ee:	4601      	mov	r1, r0
    75f0:	4620      	mov	r0, r4
    75f2:	f007 ffd3 	bl	f59c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    75f6:	4d2f      	ldr	r5, [pc, #188]	; (76b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    75f8:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    75fc:	2100      	movs	r1, #0
    75fe:	6868      	ldr	r0, [r5, #4]
    7600:	8001      	strh	r1, [r0, #0]
    7602:	f007 ffec 	bl	f5de <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7606:	8860      	ldrh	r0, [r4, #2]
    7608:	2813      	cmp	r0, #19
    760a:	d013      	beq.n	7634 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    760c:	dc09      	bgt.n	7622 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    760e:	2810      	cmp	r0, #16
    7610:	d036      	beq.n	7680 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7612:	2812      	cmp	r0, #18
    7614:	d109      	bne.n	762a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7616:	e031      	b.n	767c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7618:	4620      	mov	r0, r4
    761a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    761e:	f000 bb2f 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7622:	2815      	cmp	r0, #21
    7624:	d00f      	beq.n	7646 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7626:	281d      	cmp	r0, #29
    7628:	d00d      	beq.n	7646 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    762a:	f240 614a 	movw	r1, #1610	; 0x64a
    762e:	202d      	movs	r0, #45	; 0x2d
    7630:	f7fd faea 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7634:	2100      	movs	r1, #0
    7636:	6868      	ldr	r0, [r5, #4]
    7638:	f007 fb6e 	bl	ed18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    763c:	2101      	movs	r1, #1
    763e:	6868      	ldr	r0, [r5, #4]
    7640:	f007 ffcd 	bl	f5de <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7644:	e020      	b.n	7688 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7646:	2101      	movs	r1, #1
    7648:	6868      	ldr	r0, [r5, #4]
    764a:	f007 fb65 	bl	ed18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    764e:	2101      	movs	r1, #1
    7650:	6868      	ldr	r0, [r5, #4]
    7652:	f007 ffc4 	bl	f5de <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7656:	b136      	cbz	r6, 7666 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7658:	f104 0157 	add.w	r1, r4, #87	; 0x57
    765c:	6868      	ldr	r0, [r5, #4]
    765e:	f007 fb76 	bl	ed4e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7662:	2101      	movs	r1, #1
    7664:	e006      	b.n	7674 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7666:	f104 0150 	add.w	r1, r4, #80	; 0x50
    766a:	6868      	ldr	r0, [r5, #4]
    766c:	f007 fb6f 	bl	ed4e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7670:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7674:	6868      	ldr	r0, [r5, #4]
    7676:	f007 fb70 	bl	ed5a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    767a:	e005      	b.n	7688 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    767c:	2106      	movs	r1, #6
    767e:	e000      	b.n	7682 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7680:	2102      	movs	r1, #2
    7682:	6868      	ldr	r0, [r5, #4]
    7684:	f007 fb48 	bl	ed18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7688:	4620      	mov	r0, r4
    768a:	f000 fcb1 	bl	7ff0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    768e:	8860      	ldrh	r0, [r4, #2]
    7690:	281d      	cmp	r0, #29
    7692:	d007      	beq.n	76a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7694:	2815      	cmp	r0, #21
    7696:	d005      	beq.n	76a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7698:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    769c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    769e:	6868      	ldr	r0, [r5, #4]
    76a0:	f007 fb2a 	bl	ecf8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    76a4:	4639      	mov	r1, r7
    76a6:	4620      	mov	r0, r4
    76a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76ac:	f000 b9e4 	b.w	7a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    76b0:	20001340 	.word	0x20001340
    76b4:	2000013c 	.word	0x2000013c
    76b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76bc:	4d2e      	ldr	r5, [pc, #184]	; (7778 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    76be:	4607      	mov	r7, r0
    76c0:	7828      	ldrb	r0, [r5, #0]
    76c2:	2802      	cmp	r0, #2
    76c4:	d005      	beq.n	76d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    76c6:	7828      	ldrb	r0, [r5, #0]
    76c8:	2803      	cmp	r0, #3
    76ca:	d002      	beq.n	76d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    76cc:	f640 41b9 	movw	r1, #3257	; 0xcb9
    76d0:	e028      	b.n	7724 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    76d2:	4c2a      	ldr	r4, [pc, #168]	; (777c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    76d4:	6820      	ldr	r0, [r4, #0]
    76d6:	7b01      	ldrb	r1, [r0, #12]
    76d8:	b109      	cbz	r1, 76de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    76da:	f007 ff6a 	bl	f5b2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    76de:	f8d4 c004 	ldr.w	ip, [r4, #4]
    76e2:	f04f 0800 	mov.w	r8, #0
    76e6:	f89c 0000 	ldrb.w	r0, [ip]
    76ea:	f000 060f 	and.w	r6, r0, #15
    76ee:	b33f      	cbz	r7, 7740 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    76f0:	6821      	ldr	r1, [r4, #0]
    76f2:	09c0      	lsrs	r0, r0, #7
    76f4:	f101 0349 	add.w	r3, r1, #73	; 0x49
    76f8:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    76fc:	f10c 0109 	add.w	r1, ip, #9
    7700:	f006 fed8 	bl	e4b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7704:	b1e0      	cbz	r0, 7740 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7706:	4641      	mov	r1, r8
    7708:	6860      	ldr	r0, [r4, #4]
    770a:	f007 fae5 	bl	ecd8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    770e:	b1b8      	cbz	r0, 7740 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7710:	782a      	ldrb	r2, [r5, #0]
    7712:	6820      	ldr	r0, [r4, #0]
    7714:	4631      	mov	r1, r6
    7716:	2a02      	cmp	r2, #2
    7718:	d007      	beq.n	772a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    771a:	782a      	ldrb	r2, [r5, #0]
    771c:	2a03      	cmp	r2, #3
    771e:	d004      	beq.n	772a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7720:	f640 4192 	movw	r1, #3218	; 0xc92
    7724:	202d      	movs	r0, #45	; 0x2d
    7726:	f7fd fa6f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    772a:	68a2      	ldr	r2, [r4, #8]
    772c:	782b      	ldrb	r3, [r5, #0]
    772e:	6952      	ldr	r2, [r2, #20]
    7730:	f06f 0607 	mvn.w	r6, #7
    7734:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7738:	58d2      	ldr	r2, [r2, r3]
    773a:	4790      	blx	r2
    773c:	4606      	mov	r6, r0
    773e:	e000      	b.n	7742 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7740:	2601      	movs	r6, #1
    7742:	7ba8      	ldrb	r0, [r5, #14]
    7744:	b118      	cbz	r0, 774e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7746:	f003 ffd1 	bl	b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    774a:	f003 fdf5 	bl	b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    774e:	2e00      	cmp	r6, #0
    7750:	d00f      	beq.n	7772 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7752:	6820      	ldr	r0, [r4, #0]
    7754:	f007 fff2 	bl	f73c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7758:	b130      	cbz	r0, 7768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    775a:	f003 ffef 	bl	b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    775e:	68a0      	ldr	r0, [r4, #8]
    7760:	6880      	ldr	r0, [r0, #8]
    7762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7766:	4700      	bx	r0
    7768:	6820      	ldr	r0, [r4, #0]
    776a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    776e:	f000 ba87 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7776:	0000      	.short	0x0000
    7778:	20001340 	.word	0x20001340
    777c:	2000013c 	.word	0x2000013c
    7780:	b510      	push	{r4, lr}
    7782:	2903      	cmp	r1, #3
    7784:	d002      	beq.n	778c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7786:	2905      	cmp	r1, #5
    7788:	d10a      	bne.n	77a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    778a:	e002      	b.n	7792 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    778c:	f000 fb7e 	bl	7e8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    7790:	e003      	b.n	779a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7792:	4904      	ldr	r1, [pc, #16]	; (77a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7794:	6809      	ldr	r1, [r1, #0]
    7796:	b109      	cbz	r1, 779c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7798:	4788      	blx	r1
    779a:	b108      	cbz	r0, 77a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    779c:	2000      	movs	r0, #0
    779e:	bd10      	pop	{r4, pc}
    77a0:	2001      	movs	r0, #1
    77a2:	bd10      	pop	{r4, pc}
    77a4:	20000148 	.word	0x20000148
    77a8:	4a09      	ldr	r2, [pc, #36]	; (77d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    77aa:	0003      	movs	r3, r0
    77ac:	6810      	ldr	r0, [r2, #0]
    77ae:	d001      	beq.n	77b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    77b0:	f000 ba66 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    77b4:	2900      	cmp	r1, #0
    77b6:	d009      	beq.n	77cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    77b8:	6891      	ldr	r1, [r2, #8]
    77ba:	4a06      	ldr	r2, [pc, #24]	; (77d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    77bc:	6909      	ldr	r1, [r1, #16]
    77be:	7812      	ldrb	r2, [r2, #0]
    77c0:	f06f 030f 	mvn.w	r3, #15
    77c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    77c8:	5889      	ldr	r1, [r1, r2]
    77ca:	4708      	bx	r1
    77cc:	4770      	bx	lr
    77ce:	0000      	.short	0x0000
    77d0:	2000013c 	.word	0x2000013c
    77d4:	20001340 	.word	0x20001340
    77d8:	b570      	push	{r4, r5, r6, lr}
    77da:	4604      	mov	r4, r0
    77dc:	8840      	ldrh	r0, [r0, #2]
    77de:	2810      	cmp	r0, #16
    77e0:	d019      	beq.n	7816 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    77e2:	4d10      	ldr	r5, [pc, #64]	; (7824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    77e4:	7ba8      	ldrb	r0, [r5, #14]
    77e6:	b120      	cbz	r0, 77f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    77e8:	f003 fdc6 	bl	b378 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    77ec:	2040      	movs	r0, #64	; 0x40
    77ee:	f003 ff8b 	bl	b708 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    77f2:	480d      	ldr	r0, [pc, #52]	; (7828 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    77f4:	6840      	ldr	r0, [r0, #4]
    77f6:	f004 fa0d 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    77fa:	78a0      	ldrb	r0, [r4, #2]
    77fc:	0740      	lsls	r0, r0, #29
    77fe:	d404      	bmi.n	780a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7800:	2100      	movs	r1, #0
    7802:	7922      	ldrb	r2, [r4, #4]
    7804:	4608      	mov	r0, r1
    7806:	f004 fa7d 	bl	bd04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    780a:	2000      	movs	r0, #0
    780c:	f004 f8b8 	bl	b980 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7810:	2002      	movs	r0, #2
    7812:	7028      	strb	r0, [r5, #0]
    7814:	bd70      	pop	{r4, r5, r6, pc}
    7816:	4620      	mov	r0, r4
    7818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    781c:	2101      	movs	r1, #1
    781e:	f7ff bec1 	b.w	75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7822:	0000      	.short	0x0000
    7824:	20001340 	.word	0x20001340
    7828:	2000013c 	.word	0x2000013c
    782c:	b510      	push	{r4, lr}
    782e:	4c12      	ldr	r4, [pc, #72]	; (7878 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7830:	6820      	ldr	r0, [r4, #0]
    7832:	f000 f825 	bl	7880 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7836:	6820      	ldr	r0, [r4, #0]
    7838:	f007 ff80 	bl	f73c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    783c:	2800      	cmp	r0, #0
    783e:	6820      	ldr	r0, [r4, #0]
    7840:	d00b      	beq.n	785a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7842:	490e      	ldr	r1, [pc, #56]	; (787c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7844:	780a      	ldrb	r2, [r1, #0]
    7846:	2a02      	cmp	r2, #2
    7848:	d00b      	beq.n	7862 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    784a:	780a      	ldrb	r2, [r1, #0]
    784c:	2a03      	cmp	r2, #3
    784e:	d008      	beq.n	7862 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7850:	f640 31c6 	movw	r1, #3014	; 0xbc6
    7854:	202d      	movs	r0, #45	; 0x2d
    7856:	f7fd f9d7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    785a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    785e:	f000 ba0f 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7862:	68a2      	ldr	r2, [r4, #8]
    7864:	7809      	ldrb	r1, [r1, #0]
    7866:	68d2      	ldr	r2, [r2, #12]
    7868:	f06f 0307 	mvn.w	r3, #7
    786c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7870:	5851      	ldr	r1, [r2, r1]
    7872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7876:	4708      	bx	r1
    7878:	2000013c 	.word	0x2000013c
    787c:	20001340 	.word	0x20001340
    7880:	b510      	push	{r4, lr}
    7882:	7b01      	ldrb	r1, [r0, #12]
    7884:	b109      	cbz	r1, 788a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7886:	f007 fe94 	bl	f5b2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    788a:	4805      	ldr	r0, [pc, #20]	; (78a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    788c:	7b80      	ldrb	r0, [r0, #14]
    788e:	2800      	cmp	r0, #0
    7890:	d005      	beq.n	789e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7892:	f003 ff2b 	bl	b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    789a:	f003 bd4d 	b.w	b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    789e:	bd10      	pop	{r4, pc}
    78a0:	20001340 	.word	0x20001340

000078a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    78a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78a6:	4d59      	ldr	r5, [pc, #356]	; (7a0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    78a8:	4604      	mov	r4, r0
    78aa:	b08b      	sub	sp, #44	; 0x2c
    78ac:	7828      	ldrb	r0, [r5, #0]
    78ae:	bbe8      	cbnz	r0, 792c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    78b0:	7820      	ldrb	r0, [r4, #0]
    78b2:	28ff      	cmp	r0, #255	; 0xff
    78b4:	d03d      	beq.n	7932 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    78b6:	2000      	movs	r0, #0
    78b8:	81a8      	strh	r0, [r5, #12]
    78ba:	6068      	str	r0, [r5, #4]
    78bc:	7068      	strb	r0, [r5, #1]
    78be:	70a8      	strb	r0, [r5, #2]
    78c0:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    78c4:	4b52      	ldr	r3, [pc, #328]	; (7a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    78c6:	af06      	add	r7, sp, #24
    78c8:	4e52      	ldr	r6, [pc, #328]	; (7a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    78ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    78cc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    78d0:	68b0      	ldr	r0, [r6, #8]
    78d2:	6840      	ldr	r0, [r0, #4]
    78d4:	9009      	str	r0, [sp, #36]	; 0x24
    78d6:	a806      	add	r0, sp, #24
    78d8:	f004 f826 	bl	b928 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    78dc:	f004 f8f4 	bl	bac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    78e0:	f004 fb68 	bl	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    78e4:	f003 ff02 	bl	b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78e8:	f003 fd26 	bl	b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78ec:	484a      	ldr	r0, [pc, #296]	; (7a18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    78ee:	f004 fa3b 	bl	bd68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    78f2:	4847      	ldr	r0, [pc, #284]	; (7a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    78f4:	1f00      	subs	r0, r0, #4
    78f6:	f004 fa41 	bl	bd7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    78fa:	f104 0020 	add.w	r0, r4, #32
    78fe:	4607      	mov	r7, r0
    7900:	f007 fecf 	bl	f6a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7904:	4638      	mov	r0, r7
    7906:	f007 fe91 	bl	f62c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    790a:	4601      	mov	r1, r0
    790c:	4620      	mov	r0, r4
    790e:	f007 fe45 	bl	f59c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7912:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7916:	f004 f95b 	bl	bbd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    791a:	7921      	ldrb	r1, [r4, #4]
    791c:	2000      	movs	r0, #0
    791e:	f003 ff97 	bl	b850 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7922:	2101      	movs	r1, #1
    7924:	60a8      	str	r0, [r5, #8]
    7926:	b138      	cbz	r0, 7938 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7928:	7ea0      	ldrb	r0, [r4, #26]
    792a:	e000      	b.n	792e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    792c:	e001      	b.n	7932 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    792e:	b950      	cbnz	r0, 7946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    7930:	e004      	b.n	793c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    7932:	200c      	movs	r0, #12
    7934:	b00b      	add	sp, #44	; 0x2c
    7936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7938:	7029      	strb	r1, [r5, #0]
    793a:	e064      	b.n	7a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    793c:	7e20      	ldrb	r0, [r4, #24]
    793e:	b910      	cbnz	r0, 7946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    7940:	78a0      	ldrb	r0, [r4, #2]
    7942:	0740      	lsls	r0, r0, #29
    7944:	d522      	bpl.n	798c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    7946:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    794a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    794e:	4050      	eors	r0, r2
    7950:	ea70 0101 	orns	r1, r0, r1
    7954:	d01a      	beq.n	798c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    7956:	f7fb fd7f 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    795a:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    795e:	1a80      	subs	r0, r0, r2
    7960:	4199      	sbcs	r1, r3
    7962:	d313      	bcc.n	798c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    7964:	f7fe fec4 	bl	66f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7968:	492c      	ldr	r1, [pc, #176]	; (7a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    796a:	fba0 2301 	umull	r2, r3, r0, r1
    796e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7972:	f007 fe29 	bl	f5c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7976:	2101      	movs	r1, #1
    7978:	4620      	mov	r0, r4
    797a:	f007 fdd3 	bl	f524 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    797e:	78a0      	ldrb	r0, [r4, #2]
    7980:	0740      	lsls	r0, r0, #29
    7982:	d503      	bpl.n	798c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    7984:	2101      	movs	r1, #1
    7986:	4620      	mov	r0, r4
    7988:	f000 fabc 	bl	7f04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    798c:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7990:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7992:	f006 fd01 	bl	e398 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7996:	f104 0138 	add.w	r1, r4, #56	; 0x38
    799a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    799c:	f006 fcff 	bl	e39e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    79a0:	f7fe ff0c 	bl	67bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    79a4:	6870      	ldr	r0, [r6, #4]
    79a6:	1cc0      	adds	r0, r0, #3
    79a8:	f006 fe0f 	bl	e5ca <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    79ac:	73a8      	strb	r0, [r5, #14]
    79ae:	78a0      	ldrb	r0, [r4, #2]
    79b0:	07c0      	lsls	r0, r0, #31
    79b2:	d028      	beq.n	7a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    79b4:	a903      	add	r1, sp, #12
    79b6:	2000      	movs	r0, #0
    79b8:	f006 fbc4 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    79bc:	b120      	cbz	r0, 79c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    79be:	f640 118c 	movw	r1, #2444	; 0x98c
    79c2:	202d      	movs	r0, #45	; 0x2d
    79c4:	f7fd f920 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79c8:	20ff      	movs	r0, #255	; 0xff
    79ca:	73e8      	strb	r0, [r5, #15]
    79cc:	69e6      	ldr	r6, [r4, #28]
    79ce:	f106 070a 	add.w	r7, r6, #10
    79d2:	e013      	b.n	79fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    79d4:	9c05      	ldr	r4, [sp, #20]
    79d6:	42b4      	cmp	r4, r6
    79d8:	d010      	beq.n	79fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    79da:	7a72      	ldrb	r2, [r6, #9]
    79dc:	7a60      	ldrb	r0, [r4, #9]
    79de:	463b      	mov	r3, r7
    79e0:	f104 010a 	add.w	r1, r4, #10
    79e4:	f006 fd66 	bl	e4b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    79e8:	b140      	cbz	r0, 79fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    79ea:	78a0      	ldrb	r0, [r4, #2]
    79ec:	73e8      	strb	r0, [r5, #15]
    79ee:	f8d4 0003 	ldr.w	r0, [r4, #3]
    79f2:	6128      	str	r0, [r5, #16]
    79f4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    79f8:	82a8      	strh	r0, [r5, #20]
    79fa:	e004      	b.n	7a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    79fc:	a803      	add	r0, sp, #12
    79fe:	f7fd fb47 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a02:	2800      	cmp	r0, #0
    7a04:	d0e6      	beq.n	79d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    7a06:	2000      	movs	r0, #0
    7a08:	e794      	b.n	7934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    7a0a:	0000      	.short	0x0000
    7a0c:	20001340 	.word	0x20001340
    7a10:	00008018 	.word	0x00008018
    7a14:	2000013c 	.word	0x2000013c
    7a18:	8e89bed6 	.word	0x8e89bed6
    7a1c:	000f4240 	.word	0x000f4240
    7a20:	b510      	push	{r4, lr}
    7a22:	4604      	mov	r4, r0
    7a24:	f7ff ff3e 	bl	78a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7a28:	2800      	cmp	r0, #0
    7a2a:	d108      	bne.n	7a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    7a2c:	4804      	ldr	r0, [pc, #16]	; (7a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    7a2e:	7800      	ldrb	r0, [r0, #0]
    7a30:	2801      	cmp	r0, #1
    7a32:	d003      	beq.n	7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    7a34:	2100      	movs	r1, #0
    7a36:	4620      	mov	r0, r4
    7a38:	f7ff fdb4 	bl	75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7a3c:	2000      	movs	r0, #0
    7a3e:	bd10      	pop	{r4, pc}
    7a40:	20001340 	.word	0x20001340
    7a44:	480a      	ldr	r0, [pc, #40]	; (7a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    7a46:	b510      	push	{r4, lr}
    7a48:	490a      	ldr	r1, [pc, #40]	; (7a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    7a4a:	6804      	ldr	r4, [r0, #0]
    7a4c:	7808      	ldrb	r0, [r1, #0]
    7a4e:	2800      	cmp	r0, #0
    7a50:	d00d      	beq.n	7a6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    7a52:	7808      	ldrb	r0, [r1, #0]
    7a54:	2802      	cmp	r0, #2
    7a56:	d002      	beq.n	7a5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    7a58:	7808      	ldrb	r0, [r1, #0]
    7a5a:	2803      	cmp	r0, #3
    7a5c:	d102      	bne.n	7a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    7a5e:	4620      	mov	r0, r4
    7a60:	f7ff ff0e 	bl	7880 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7a64:	4620      	mov	r0, r4
    7a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a6a:	f000 b909 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	2000013c 	.word	0x2000013c
    7a74:	20001340 	.word	0x20001340
    7a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a7c:	4604      	mov	r4, r0
    7a7e:	4827      	ldr	r0, [pc, #156]	; (7b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    7a80:	460d      	mov	r5, r1
    7a82:	6840      	ldr	r0, [r0, #4]
    7a84:	f004 f8c6 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7a88:	4e25      	ldr	r6, [pc, #148]	; (7b20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    7a8a:	2004      	movs	r0, #4
    7a8c:	7030      	strb	r0, [r6, #0]
    7a8e:	b325      	cbz	r5, 7ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7a90:	8860      	ldrh	r0, [r4, #2]
    7a92:	2810      	cmp	r0, #16
    7a94:	d02a      	beq.n	7aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    7a96:	f104 0020 	add.w	r0, r4, #32
    7a9a:	4680      	mov	r8, r0
    7a9c:	68b5      	ldr	r5, [r6, #8]
    7a9e:	f007 fdb9 	bl	f614 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7aa2:	4607      	mov	r7, r0
    7aa4:	4640      	mov	r0, r8
    7aa6:	f007 fdde 	bl	f666 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7aaa:	1a38      	subs	r0, r7, r0
    7aac:	1e40      	subs	r0, r0, #1
    7aae:	b2c0      	uxtb	r0, r0
    7ab0:	8861      	ldrh	r1, [r4, #2]
    7ab2:	2228      	movs	r2, #40	; 0x28
    7ab4:	f000 faec 	bl	8090 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7ab8:	4405      	add	r5, r0
    7aba:	78a0      	ldrb	r0, [r4, #2]
    7abc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7ac0:	b130      	cbz	r0, 7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    7ac2:	6870      	ldr	r0, [r6, #4]
    7ac4:	4405      	add	r5, r0
    7ac6:	f007 fe27 	bl	f718 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7aca:	4428      	add	r0, r5
    7acc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7ad0:	7922      	ldrb	r2, [r4, #4]
    7ad2:	4629      	mov	r1, r5
    7ad4:	2000      	movs	r0, #0
    7ad6:	f004 f8b3 	bl	bc40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7ada:	8860      	ldrh	r0, [r4, #2]
    7adc:	2813      	cmp	r0, #19
    7ade:	d013      	beq.n	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7ae0:	dc09      	bgt.n	7af6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    7ae2:	2810      	cmp	r0, #16
    7ae4:	d017      	beq.n	7b16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7ae6:	2812      	cmp	r0, #18
    7ae8:	d109      	bne.n	7afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    7aea:	e00d      	b.n	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7aec:	7921      	ldrb	r1, [r4, #4]
    7aee:	2000      	movs	r0, #0
    7af0:	f003 fe74 	bl	b7dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7af4:	e7f1      	b.n	7ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7af6:	2815      	cmp	r0, #21
    7af8:	d006      	beq.n	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7afa:	281d      	cmp	r0, #29
    7afc:	d004      	beq.n	7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7afe:	f640 5148 	movw	r1, #3400	; 0xd48
    7b02:	202d      	movs	r0, #45	; 0x2d
    7b04:	f7fd f880 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b08:	7922      	ldrb	r2, [r4, #4]
    7b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b0e:	2101      	movs	r1, #1
    7b10:	2000      	movs	r0, #0
    7b12:	f004 b8f7 	b.w	bd04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b1a:	0000      	.short	0x0000
    7b1c:	2000013c 	.word	0x2000013c
    7b20:	20001340 	.word	0x20001340
    7b24:	b510      	push	{r4, lr}
    7b26:	4604      	mov	r4, r0
    7b28:	7800      	ldrb	r0, [r0, #0]
    7b2a:	460b      	mov	r3, r1
    7b2c:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    7b30:	29ff      	cmp	r1, #255	; 0xff
    7b32:	d010      	beq.n	7b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    7b34:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    7b38:	1e51      	subs	r1, r2, #1
    7b3a:	4618      	mov	r0, r3
    7b3c:	f7fe fd56 	bl	65ec <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7b40:	b130      	cbz	r0, 7b50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    7b42:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    7b46:	f040 0002 	orr.w	r0, r0, #2
    7b4a:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    7b4e:	e011      	b.n	7b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    7b50:	f640 7193 	movw	r1, #3987	; 0xf93
    7b54:	e023      	b.n	7b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    7b56:	4813      	ldr	r0, [pc, #76]	; (7ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    7b58:	6840      	ldr	r0, [r0, #4]
    7b5a:	7801      	ldrb	r1, [r0, #0]
    7b5c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7b60:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    7b64:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7b68:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    7b6c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7b70:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    7b74:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7b78:	287f      	cmp	r0, #127	; 0x7f
    7b7a:	d00e      	beq.n	7b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    7b7c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7b80:	207f      	movs	r0, #127	; 0x7f
    7b82:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7b86:	2219      	movs	r2, #25
    7b88:	4621      	mov	r1, r4
    7b8a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    7b8e:	f7ff f941 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b96:	f7ff ba0f 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b9a:	f640 51fb 	movw	r1, #3579	; 0xdfb
    7b9e:	202d      	movs	r0, #45	; 0x2d
    7ba0:	f7fd f832 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ba4:	2000013c 	.word	0x2000013c
    7ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bac:	4690      	mov	r8, r2
    7bae:	460e      	mov	r6, r1
    7bb0:	4604      	mov	r4, r0
    7bb2:	2903      	cmp	r1, #3
    7bb4:	d004      	beq.n	7bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7bb6:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7bba:	b108      	cbz	r0, 7bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7bbc:	2001      	movs	r0, #1
    7bbe:	e000      	b.n	7bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    7bc0:	2000      	movs	r0, #0
    7bc2:	4681      	mov	r9, r0
    7bc4:	f003 fdac 	bl	b720 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7bc8:	4605      	mov	r5, r0
    7bca:	2e03      	cmp	r6, #3
    7bcc:	d003      	beq.n	7bd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7bce:	2701      	movs	r7, #1
    7bd0:	2e05      	cmp	r6, #5
    7bd2:	d005      	beq.n	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7bd4:	e008      	b.n	7be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    7bd6:	78a0      	ldrb	r0, [r4, #2]
    7bd8:	2702      	movs	r7, #2
    7bda:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7bde:	e001      	b.n	7be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7be0:	78a0      	ldrb	r0, [r4, #2]
    7be2:	07c0      	lsls	r0, r0, #31
    7be4:	2800      	cmp	r0, #0
    7be6:	d042      	beq.n	7c6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7be8:	f1b9 0f00 	cmp.w	r9, #0
    7bec:	d13e      	bne.n	7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7bee:	4822      	ldr	r0, [pc, #136]	; (7c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    7bf0:	7b80      	ldrb	r0, [r0, #14]
    7bf2:	b140      	cbz	r0, 7c06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7bf4:	f006 fcec 	bl	e5d0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7bf8:	f888 0000 	strb.w	r0, [r8]
    7bfc:	28ff      	cmp	r0, #255	; 0xff
    7bfe:	d002      	beq.n	7c06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7c00:	f7fe fd0e 	bl	6620 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7c04:	4305      	orrs	r5, r0
    7c06:	4e1d      	ldr	r6, [pc, #116]	; (7c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    7c08:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7c0c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7c10:	6871      	ldr	r1, [r6, #4]
    7c12:	f811 0b03 	ldrb.w	r0, [r1], #3
    7c16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7c1a:	f006 fc4b 	bl	e4b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7c1e:	f898 1000 	ldrb.w	r1, [r8]
    7c22:	29ff      	cmp	r1, #255	; 0xff
    7c24:	d004      	beq.n	7c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    7c26:	b990      	cbnz	r0, 7c4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7c28:	7e60      	ldrb	r0, [r4, #25]
    7c2a:	4288      	cmp	r0, r1
    7c2c:	d00f      	beq.n	7c4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7c2e:	e008      	b.n	7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7c30:	b138      	cbz	r0, 7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7c32:	6871      	ldr	r1, [r6, #4]
    7c34:	f811 0b03 	ldrb.w	r0, [r1], #3
    7c38:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7c3c:	f007 fc59 	bl	f4f2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7c40:	b128      	cbz	r0, 7c4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7c42:	2000      	movs	r0, #0
    7c44:	78a1      	ldrb	r1, [r4, #2]
    7c46:	0749      	lsls	r1, r1, #29
    7c48:	d503      	bpl.n	7c52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    7c4a:	b990      	cbnz	r0, 7c72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7c4c:	e00e      	b.n	7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7c4e:	2001      	movs	r0, #1
    7c50:	e7f8      	b.n	7c44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7c52:	b975      	cbnz	r5, 7c72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7c54:	7be0      	ldrb	r0, [r4, #15]
    7c56:	b108      	cbz	r0, 7c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    7c58:	42b8      	cmp	r0, r7
    7c5a:	d107      	bne.n	7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7c5c:	6871      	ldr	r1, [r6, #4]
    7c5e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7c62:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7c66:	f007 fc44 	bl	f4f2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7c6a:	b110      	cbz	r0, 7c72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7c6c:	2000      	movs	r0, #0
    7c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c72:	2001      	movs	r0, #1
    7c74:	e7fb      	b.n	7c6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7c76:	0000      	.short	0x0000
    7c78:	20001340 	.word	0x20001340
    7c7c:	2000013c 	.word	0x2000013c
    7c80:	b570      	push	{r4, r5, r6, lr}
    7c82:	4604      	mov	r4, r0
    7c84:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    7c86:	4d13      	ldr	r5, [pc, #76]	; (7cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    7c88:	1c40      	adds	r0, r0, #1
    7c8a:	8520      	strh	r0, [r4, #40]	; 0x28
    7c8c:	7ba8      	ldrb	r0, [r5, #14]
    7c8e:	2600      	movs	r6, #0
    7c90:	b120      	cbz	r0, 7c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    7c92:	f003 fd2b 	bl	b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7c96:	f003 fb4f 	bl	b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7c9a:	73ae      	strb	r6, [r5, #14]
    7c9c:	702e      	strb	r6, [r5, #0]
    7c9e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7ca2:	b108      	cbz	r0, 7ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    7ca4:	2101      	movs	r1, #1
    7ca6:	e00f      	b.n	7cc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    7ca8:	7b60      	ldrb	r0, [r4, #13]
    7caa:	b160      	cbz	r0, 7cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7cac:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    7cae:	4288      	cmp	r0, r1
    7cb0:	d809      	bhi.n	7cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7cb2:	2101      	movs	r1, #1
    7cb4:	4620      	mov	r0, r4
    7cb6:	f007 fd53 	bl	f760 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7cba:	78a0      	ldrb	r0, [r4, #2]
    7cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cc0:	07c0      	lsls	r0, r0, #31
    7cc2:	f7ff b979 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7cc6:	2100      	movs	r1, #0
    7cc8:	4620      	mov	r0, r4
    7cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cce:	f007 bd47 	b.w	f760 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7cd2:	0000      	.short	0x0000
    7cd4:	20001340 	.word	0x20001340
    7cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cda:	4604      	mov	r4, r0
    7cdc:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    7ce0:	4616      	mov	r6, r2
    7ce2:	460d      	mov	r5, r1
    7ce4:	f88d 0000 	strb.w	r0, [sp]
    7ce8:	9800      	ldr	r0, [sp, #0]
    7cea:	9000      	str	r0, [sp, #0]
    7cec:	f89d 0000 	ldrb.w	r0, [sp]
    7cf0:	b110      	cbz	r0, 7cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    7cf2:	f640 31fa 	movw	r1, #3066	; 0xbfa
    7cf6:	e055      	b.n	7da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    7cf8:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    7cfc:	2700      	movs	r7, #0
    7cfe:	8828      	ldrh	r0, [r5, #0]
    7d00:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    7d04:	2b00      	cmp	r3, #0
    7d06:	d14a      	bne.n	7d9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    7d08:	6928      	ldr	r0, [r5, #16]
    7d0a:	f006 fcbf 	bl	e68c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7d0e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7d12:	8b28      	ldrh	r0, [r5, #24]
    7d14:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    7d18:	8b68      	ldrh	r0, [r5, #26]
    7d1a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    7d1e:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    7d22:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7d26:	7e20      	ldrb	r0, [r4, #24]
    7d28:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7d2c:	460d      	mov	r5, r1
    7d2e:	b120      	cbz	r0, 7d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    7d30:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d34:	f007 faa4 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7d38:	b940      	cbnz	r0, 7d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    7d3a:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7d3e:	b170      	cbz	r0, 7d5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7d40:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d44:	4629      	mov	r1, r5
    7d46:	f007 fa92 	bl	f26e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7d4a:	b140      	cbz	r0, 7d5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7d4c:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7d50:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    7d54:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7d58:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7d5c:	e003      	b.n	7d66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7d5e:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    7d62:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    7d66:	4814      	ldr	r0, [pc, #80]	; (7db8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    7d68:	2eff      	cmp	r6, #255	; 0xff
    7d6a:	6840      	ldr	r0, [r0, #4]
    7d6c:	7801      	ldrb	r1, [r0, #0]
    7d6e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7d72:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    7d76:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7d7a:	d016      	beq.n	7daa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    7d7c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    7d80:	8880      	ldrh	r0, [r0, #4]
    7d82:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    7d86:	f104 0274 	add.w	r2, r4, #116	; 0x74
    7d8a:	1e51      	subs	r1, r2, #1
    7d8c:	4630      	mov	r0, r6
    7d8e:	f7fe fc2d 	bl	65ec <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7d92:	b128      	cbz	r0, 7da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    7d94:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    7d98:	f040 0002 	orr.w	r0, r0, #2
    7d9c:	7020      	strb	r0, [r4, #0]
    7d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7da0:	f640 411b 	movw	r1, #3099	; 0xc1b
    7da4:	202d      	movs	r0, #45	; 0x2d
    7da6:	f7fc ff2f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7daa:	f844 1f74 	str.w	r1, [r4, #116]!
    7dae:	8880      	ldrh	r0, [r0, #4]
    7db0:	80a0      	strh	r0, [r4, #4]
    7db2:	60e7      	str	r7, [r4, #12]
    7db4:	8227      	strh	r7, [r4, #16]
    7db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7db8:	2000013c 	.word	0x2000013c
    7dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dbe:	4604      	mov	r4, r0
    7dc0:	20ff      	movs	r0, #255	; 0xff
    7dc2:	f88d 0000 	strb.w	r0, [sp]
    7dc6:	2601      	movs	r6, #1
    7dc8:	466a      	mov	r2, sp
    7dca:	2105      	movs	r1, #5
    7dcc:	4620      	mov	r0, r4
    7dce:	f7ff feeb 	bl	7ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7dd2:	b160      	cbz	r0, 7dee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    7dd4:	4d2c      	ldr	r5, [pc, #176]	; (7e88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7dd6:	4f2b      	ldr	r7, [pc, #172]	; (7e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7dd8:	6869      	ldr	r1, [r5, #4]
    7dda:	7bfa      	ldrb	r2, [r7, #15]
    7ddc:	f107 0310 	add.w	r3, r7, #16
    7de0:	f811 0b03 	ldrb.w	r0, [r1], #3
    7de4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7de8:	f006 fb64 	bl	e4b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7dec:	b110      	cbz	r0, 7df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    7dee:	2600      	movs	r6, #0
    7df0:	4630      	mov	r0, r6
    7df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7df4:	686a      	ldr	r2, [r5, #4]
    7df6:	69e0      	ldr	r0, [r4, #28]
    7df8:	7812      	ldrb	r2, [r2, #0]
    7dfa:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    7dfe:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7e02:	4011      	ands	r1, r2
    7e04:	7001      	strb	r1, [r0, #0]
    7e06:	2201      	movs	r2, #1
    7e08:	4620      	mov	r0, r4
    7e0a:	69e1      	ldr	r1, [r4, #28]
    7e0c:	f000 f8a8 	bl	7f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    7e10:	2300      	movs	r3, #0
    7e12:	f89d 2000 	ldrb.w	r2, [sp]
    7e16:	4620      	mov	r0, r4
    7e18:	69e1      	ldr	r1, [r4, #28]
    7e1a:	f7ff ff5d 	bl	7cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    7e1e:	220e      	movs	r2, #14
    7e20:	4621      	mov	r1, r4
    7e22:	f104 0064 	add.w	r0, r4, #100	; 0x64
    7e26:	f7fe fff5 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7e2a:	69e0      	ldr	r0, [r4, #28]
    7e2c:	2203      	movs	r2, #3
    7e2e:	8801      	ldrh	r1, [r0, #0]
    7e30:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    7e34:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    7e38:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    7e3c:	4621      	mov	r1, r4
    7e3e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    7e42:	f7fe ffe7 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7e46:	f7ff f8b7 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e4a:	2000      	movs	r0, #0
    7e4c:	7038      	strb	r0, [r7, #0]
    7e4e:	2200      	movs	r2, #0
    7e50:	4621      	mov	r1, r4
    7e52:	69e0      	ldr	r0, [r4, #28]
    7e54:	f000 fa74 	bl	8340 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7e58:	69e0      	ldr	r0, [r4, #28]
    7e5a:	8800      	ldrh	r0, [r0, #0]
    7e5c:	f7fd fafc 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7e60:	f006 f842 	bl	dee8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7e64:	6868      	ldr	r0, [r5, #4]
    7e66:	69e1      	ldr	r1, [r4, #28]
    7e68:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7e6c:	f841 2f03 	str.w	r2, [r1, #3]!
    7e70:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7e74:	808a      	strh	r2, [r1, #4]
    7e76:	7800      	ldrb	r0, [r0, #0]
    7e78:	69e1      	ldr	r1, [r4, #28]
    7e7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7e7e:	7088      	strb	r0, [r1, #2]
    7e80:	e7b6      	b.n	7df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    7e82:	0000      	.short	0x0000
    7e84:	20001340 	.word	0x20001340
    7e88:	2000013c 	.word	0x2000013c
    7e8c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7e90:	4604      	mov	r4, r0
    7e92:	20ff      	movs	r0, #255	; 0xff
    7e94:	f88d 0000 	strb.w	r0, [sp]
    7e98:	2501      	movs	r5, #1
    7e9a:	466a      	mov	r2, sp
    7e9c:	2103      	movs	r1, #3
    7e9e:	4620      	mov	r0, r4
    7ea0:	f7ff fe82 	bl	7ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7ea4:	b330      	cbz	r0, 7ef4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    7ea6:	7b20      	ldrb	r0, [r4, #12]
    7ea8:	2700      	movs	r7, #0
    7eaa:	b168      	cbz	r0, 7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7eac:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    7eb0:	f88d 0004 	strb.w	r0, [sp, #4]
    7eb4:	9801      	ldr	r0, [sp, #4]
    7eb6:	9001      	str	r0, [sp, #4]
    7eb8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7ebc:	b920      	cbnz	r0, 7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7ebe:	f89d 1000 	ldrb.w	r1, [sp]
    7ec2:	4620      	mov	r0, r4
    7ec4:	f7ff fe2e 	bl	7b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7ec8:	4e0c      	ldr	r6, [pc, #48]	; (7efc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7eca:	2104      	movs	r1, #4
    7ecc:	6870      	ldr	r0, [r6, #4]
    7ece:	8007      	strh	r7, [r0, #0]
    7ed0:	f006 ff22 	bl	ed18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7ed4:	4620      	mov	r0, r4
    7ed6:	f000 f88b 	bl	7ff0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    7eda:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    7ede:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7ee0:	6870      	ldr	r0, [r6, #4]
    7ee2:	f006 ff50 	bl	ed86 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7ee6:	4906      	ldr	r1, [pc, #24]	; (7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    7ee8:	2005      	movs	r0, #5
    7eea:	7008      	strb	r0, [r1, #0]
    7eec:	6870      	ldr	r0, [r6, #4]
    7eee:	f003 fe91 	bl	bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ef2:	e000      	b.n	7ef6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    7ef4:	2500      	movs	r5, #0
    7ef6:	4628      	mov	r0, r5
    7ef8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7efc:	2000013c 	.word	0x2000013c
    7f00:	20001340 	.word	0x20001340
    7f04:	b570      	push	{r4, r5, r6, lr}
    7f06:	4604      	mov	r4, r0
    7f08:	460e      	mov	r6, r1
    7f0a:	7e40      	ldrb	r0, [r0, #25]
    7f0c:	f7fe fb3c 	bl	6588 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7f10:	0005      	movs	r5, r0
    7f12:	d019      	beq.n	7f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7f14:	2110      	movs	r1, #16
    7f16:	f006 fd57 	bl	e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d114      	bne.n	7f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7f1e:	2001      	movs	r0, #1
    7f20:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7f24:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7f28:	4632      	mov	r2, r6
    7f2a:	460c      	mov	r4, r1
    7f2c:	4628      	mov	r0, r5
    7f2e:	f006 faf1 	bl	e514 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7f32:	4621      	mov	r1, r4
    7f34:	4c05      	ldr	r4, [pc, #20]	; (7f4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    7f36:	6860      	ldr	r0, [r4, #4]
    7f38:	f006 ff09 	bl	ed4e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7f3c:	6860      	ldr	r0, [r4, #4]
    7f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f42:	2101      	movs	r1, #1
    7f44:	f006 bf09 	b.w	ed5a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7f48:	bd70      	pop	{r4, r5, r6, pc}
    7f4a:	0000      	.short	0x0000
    7f4c:	2000013c 	.word	0x2000013c
    7f50:	4802      	ldr	r0, [pc, #8]	; (7f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    7f52:	2101      	movs	r1, #1
    7f54:	6800      	ldr	r0, [r0, #0]
    7f56:	f7ff bb25 	b.w	75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7f5a:	0000      	.short	0x0000
    7f5c:	2000013c 	.word	0x2000013c
    7f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f64:	4e21      	ldr	r6, [pc, #132]	; (7fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    7f66:	4680      	mov	r8, r0
    7f68:	460c      	mov	r4, r1
    7f6a:	6870      	ldr	r0, [r6, #4]
    7f6c:	4615      	mov	r5, r2
    7f6e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7f72:	6161      	str	r1, [r4, #20]
    7f74:	8881      	ldrh	r1, [r0, #4]
    7f76:	83a1      	strh	r1, [r4, #28]
    7f78:	7981      	ldrb	r1, [r0, #6]
    7f7a:	77a1      	strb	r1, [r4, #30]
    7f7c:	8940      	ldrh	r0, [r0, #10]
    7f7e:	f006 fb81 	bl	e684 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7f82:	4607      	mov	r7, r0
    7f84:	6120      	str	r0, [r4, #16]
    7f86:	6870      	ldr	r0, [r6, #4]
    7f88:	4639      	mov	r1, r7
    7f8a:	7d80      	ldrb	r0, [r0, #22]
    7f8c:	f006 fd13 	bl	e9b6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7f90:	8420      	strh	r0, [r4, #32]
    7f92:	6870      	ldr	r0, [r6, #4]
    7f94:	4639      	mov	r1, r7
    7f96:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7f9a:	f006 fd08 	bl	e9ae <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7f9e:	6260      	str	r0, [r4, #36]	; 0x24
    7fa0:	6870      	ldr	r0, [r6, #4]
    7fa2:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7fa6:	8321      	strh	r1, [r4, #24]
    7fa8:	8841      	ldrh	r1, [r0, #2]
    7faa:	8361      	strh	r1, [r4, #26]
    7fac:	6841      	ldr	r1, [r0, #4]
    7fae:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    7fb2:	7a01      	ldrb	r1, [r0, #8]
    7fb4:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    7fb8:	7a41      	ldrb	r1, [r0, #9]
    7fba:	f001 011f 	and.w	r1, r1, #31
    7fbe:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7fc2:	7a40      	ldrb	r0, [r0, #9]
    7fc4:	0940      	lsrs	r0, r0, #5
    7fc6:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    7fca:	f104 0066 	add.w	r0, r4, #102	; 0x66
    7fce:	7205      	strb	r5, [r0, #8]
    7fd0:	7245      	strb	r5, [r0, #9]
    7fd2:	21ff      	movs	r1, #255	; 0xff
    7fd4:	7281      	strb	r1, [r0, #10]
    7fd6:	2100      	movs	r1, #0
    7fd8:	3836      	subs	r0, #54	; 0x36
    7fda:	f007 f8b6 	bl	f14a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7fde:	f898 000e 	ldrb.w	r0, [r8, #14]
    7fe2:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    7fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fea:	0000      	.short	0x0000
    7fec:	2000013c 	.word	0x2000013c
    7ff0:	b570      	push	{r4, r5, r6, lr}
    7ff2:	4d07      	ldr	r5, [pc, #28]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ff4:	4604      	mov	r4, r0
    7ff6:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7ffa:	6868      	ldr	r0, [r5, #4]
    7ffc:	f006 feb4 	bl	ed68 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8000:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8004:	6868      	ldr	r0, [r5, #4]
    8006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    800a:	f006 beb3 	b.w	ed74 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    800e:	0000      	.short	0x0000
    8010:	2000013c 	.word	0x2000013c
    8014:	00555555 	.word	0x00555555
    8018:	0000782d 	.word	0x0000782d
    801c:	000076b9 	.word	0x000076b9
    8020:	000077a9 	.word	0x000077a9
    8024:	00000000 	.word	0x00000000
    8028:	00007781 	.word	0x00007781
    802c:	000077d9 	.word	0x000077d9
    8030:	0000f519 	.word	0x0000f519
    8034:	0000f51f 	.word	0x0000f51f
    8038:	00007a21 	.word	0x00007a21
    803c:	00007a45 	.word	0x00007a45
    8040:	00007f51 	.word	0x00007f51
    8044:	00008034 	.word	0x00008034
    8048:	0000802c 	.word	0x0000802c
    804c:	00008028 	.word	0x00008028

00008050 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8050:	b510      	push	{r4, lr}
    8052:	1e42      	subs	r2, r0, #1
    8054:	2a02      	cmp	r2, #2
    8056:	d901      	bls.n	805c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8058:	21ca      	movs	r1, #202	; 0xca
    805a:	e009      	b.n	8070 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    805c:	1e40      	subs	r0, r0, #1
    805e:	2910      	cmp	r1, #16
    8060:	d009      	beq.n	8076 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8062:	2912      	cmp	r1, #18
    8064:	d00c      	beq.n	8080 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8066:	2913      	cmp	r1, #19
    8068:	d00a      	beq.n	8080 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    806a:	2915      	cmp	r1, #21
    806c:	d005      	beq.n	807a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    806e:	21d8      	movs	r1, #216	; 0xd8
    8070:	202f      	movs	r0, #47	; 0x2f
    8072:	f7fc fdc9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8076:	4905      	ldr	r1, [pc, #20]	; (808c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8078:	e004      	b.n	8084 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    807a:	4904      	ldr	r1, [pc, #16]	; (808c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    807c:	1d89      	adds	r1, r1, #6
    807e:	e001      	b.n	8084 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8080:	4902      	ldr	r1, [pc, #8]	; (808c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8082:	1f89      	subs	r1, r1, #6
    8084:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8088:	bd10      	pop	{r4, pc}
    808a:	0000      	.short	0x0000
    808c:	0000f730 	.word	0x0000f730

00008090 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8090:	1e42      	subs	r2, r0, #1
    8092:	b510      	push	{r4, lr}
    8094:	b2d2      	uxtb	r2, r2
    8096:	2a01      	cmp	r2, #1
    8098:	d903      	bls.n	80a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    809a:	291d      	cmp	r1, #29
    809c:	d001      	beq.n	80a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    809e:	21ee      	movs	r1, #238	; 0xee
    80a0:	e00d      	b.n	80be <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    80a2:	2913      	cmp	r1, #19
    80a4:	d013      	beq.n	80ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    80a6:	dc04      	bgt.n	80b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    80a8:	2910      	cmp	r1, #16
    80aa:	d00b      	beq.n	80c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    80ac:	2912      	cmp	r1, #18
    80ae:	d104      	bne.n	80ba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    80b0:	e00d      	b.n	80ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    80b2:	2915      	cmp	r1, #21
    80b4:	d008      	beq.n	80c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    80b6:	291d      	cmp	r1, #29
    80b8:	d00e      	beq.n	80d8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    80ba:	f44f 7181 	mov.w	r1, #258	; 0x102
    80be:	202f      	movs	r0, #47	; 0x2f
    80c0:	f7fc fda2 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80c4:	4807      	ldr	r0, [pc, #28]	; (80e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    80c6:	e004      	b.n	80d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    80c8:	4806      	ldr	r0, [pc, #24]	; (80e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    80ca:	3008      	adds	r0, #8
    80cc:	e001      	b.n	80d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    80ce:	4805      	ldr	r0, [pc, #20]	; (80e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    80d0:	1d00      	adds	r0, r0, #4
    80d2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    80d6:	bd10      	pop	{r4, pc}
    80d8:	f240 315a 	movw	r1, #858	; 0x35a
    80dc:	fb10 f001 	smulbb	r0, r0, r1
    80e0:	bd10      	pop	{r4, pc}
    80e2:	0000      	.short	0x0000
    80e4:	0000f71e 	.word	0x0000f71e

000080e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    80e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80ec:	4604      	mov	r4, r0
    80ee:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    80f2:	4616      	mov	r6, r2
    80f4:	460f      	mov	r7, r1
    80f6:	2800      	cmp	r0, #0
    80f8:	d15e      	bne.n	81b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    80fa:	4621      	mov	r1, r4
    80fc:	484d      	ldr	r0, [pc, #308]	; (8234 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    80fe:	f7fa fff9 	bl	30f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8102:	4605      	mov	r5, r0
    8104:	2820      	cmp	r0, #32
    8106:	d057      	beq.n	81b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8108:	2250      	movs	r2, #80	; 0x50
    810a:	2100      	movs	r1, #0
    810c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8110:	f005 f856 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8114:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    8118:	2501      	movs	r5, #1
    811a:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    811e:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    8122:	b137      	cbz	r7, 8132 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    8124:	f7ff f8c4 	bl	72b0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8128:	f000 0007 	and.w	r0, r0, #7
    812c:	1c40      	adds	r0, r0, #1
    812e:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    8132:	4620      	mov	r0, r4
    8134:	f007 fce6 	bl	fb04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    8138:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    813c:	2002      	movs	r0, #2
    813e:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    8142:	46a8      	mov	r8, r5
    8144:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    8148:	2500      	movs	r5, #0
    814a:	f804 5fe0 	strb.w	r5, [r4, #224]!
    814e:	f7fc f8e1 	bl	4314 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8152:	4607      	mov	r7, r0
    8154:	f004 fe57 	bl	ce06 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8158:	8921      	ldrh	r1, [r4, #8]
    815a:	3ce0      	subs	r4, #224	; 0xe0
    815c:	4288      	cmp	r0, r1
    815e:	d800      	bhi.n	8162 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    8160:	4608      	mov	r0, r1
    8162:	4438      	add	r0, r7
    8164:	30cc      	adds	r0, #204	; 0xcc
    8166:	b287      	uxth	r7, r0
    8168:	4620      	mov	r0, r4
    816a:	f007 f974 	bl	f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    816e:	b330      	cbz	r0, 81be <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    8170:	f008 fec3 	bl	10efa <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8174:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8178:	b281      	uxth	r1, r0
    817a:	4630      	mov	r0, r6
    817c:	f004 fe77 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8180:	4430      	add	r0, r6
    8182:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    8186:	34c4      	adds	r4, #196	; 0xc4
    8188:	f7fb f966 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    818c:	19c0      	adds	r0, r0, r7
    818e:	4169      	adcs	r1, r5
    8190:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    8194:	f804 5c03 	strb.w	r5, [r4, #-3]
    8198:	f884 8004 	strb.w	r8, [r4, #4]
    819c:	2001      	movs	r0, #1
    819e:	f007 fab7 	bl	f710 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    81a2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    81a6:	1a30      	subs	r0, r6, r0
    81a8:	60a0      	str	r0, [r4, #8]
    81aa:	f04f 30ff 	mov.w	r0, #4294967295
    81ae:	0841      	lsrs	r1, r0, #1
    81b0:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    81b4:	3cc4      	subs	r4, #196	; 0xc4
    81b6:	e022      	b.n	81fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    81b8:	200c      	movs	r0, #12
    81ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81be:	4620      	mov	r0, r4
    81c0:	f007 fbf3 	bl	f9aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    81c4:	f844 0fe4 	str.w	r0, [r4, #228]!
    81c8:	f804 8c23 	strb.w	r8, [r4, #-35]
    81cc:	f7fb f944 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    81d0:	4680      	mov	r8, r0
    81d2:	4689      	mov	r9, r1
    81d4:	f7ff f86c 	bl	72b0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    81d8:	f242 7110 	movw	r1, #10000	; 0x2710
    81dc:	fbb0 f2f1 	udiv	r2, r0, r1
    81e0:	fb01 0012 	mls	r0, r1, r2, r0
    81e4:	1839      	adds	r1, r7, r0
    81e6:	eb11 0108 	adds.w	r1, r1, r8
    81ea:	eb45 0009 	adc.w	r0, r5, r9
    81ee:	e9c4 1003 	strd	r1, r0, [r4, #12]
    81f2:	3ce4      	subs	r4, #228	; 0xe4
    81f4:	b196      	cbz	r6, 821c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    81f6:	1989      	adds	r1, r1, r6
    81f8:	4168      	adcs	r0, r5
    81fa:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    81fe:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8202:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    8206:	f007 fc7b 	bl	fb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    820a:	b168      	cbz	r0, 8228 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    820c:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8210:	2100      	movs	r1, #0
    8212:	4620      	mov	r0, r4
    8214:	f007 f94b 	bl	f4ae <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8218:	2000      	movs	r0, #0
    821a:	e7ce      	b.n	81ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    821c:	f04f 30ff 	mov.w	r0, #4294967295
    8220:	0841      	lsrs	r1, r0, #1
    8222:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    8226:	e7ea      	b.n	81fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8228:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    822c:	2030      	movs	r0, #48	; 0x30
    822e:	f7fc fceb 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8232:	0000      	.short	0x0000
    8234:	0000fc81 	.word	0x0000fc81

00008238 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8238:	4803      	ldr	r0, [pc, #12]	; (8248 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    823a:	2100      	movs	r1, #0
    823c:	7001      	strb	r1, [r0, #0]
    823e:	2201      	movs	r2, #1
    8240:	7082      	strb	r2, [r0, #2]
    8242:	7041      	strb	r1, [r0, #1]
    8244:	f007 bacc 	b.w	f7e0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8248:	2000014c 	.word	0x2000014c

0000824c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    824c:	4901      	ldr	r1, [pc, #4]	; (8254 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    824e:	7008      	strb	r0, [r1, #0]
    8250:	4770      	bx	lr
    8252:	0000      	.short	0x0000
    8254:	2000014c 	.word	0x2000014c

00008258 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8258:	4908      	ldr	r1, [pc, #32]	; (827c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    825a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    825e:	fbb1 f1f2 	udiv	r1, r1, r2
    8262:	b510      	push	{r4, lr}
    8264:	f501 7125 	add.w	r1, r1, #660	; 0x294
    8268:	f006 ff88 	bl	f17c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    826c:	f640 0148 	movw	r1, #2120	; 0x848
    8270:	4288      	cmp	r0, r1
    8272:	d300      	bcc.n	8276 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    8274:	4608      	mov	r0, r1
    8276:	b280      	uxth	r0, r0
    8278:	bd10      	pop	{r4, pc}
    827a:	0000      	.short	0x0000
    827c:	0001527d 	.word	0x0001527d

00008280 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8284:	4c10      	ldr	r4, [pc, #64]	; (82c8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8286:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    828a:	f003 fbdd 	bl	ba48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    828e:	4606      	mov	r6, r0
    8290:	7820      	ldrb	r0, [r4, #0]
    8292:	b128      	cbz	r0, 82a0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8294:	4632      	mov	r2, r6
    8296:	4639      	mov	r1, r7
    8298:	4628      	mov	r0, r5
    829a:	f006 f9fd 	bl	e698 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    829e:	4605      	mov	r5, r0
    82a0:	6860      	ldr	r0, [r4, #4]
    82a2:	4285      	cmp	r5, r0
    82a4:	d005      	beq.n	82b2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    82a6:	68e1      	ldr	r1, [r4, #12]
    82a8:	1a28      	subs	r0, r5, r0
    82aa:	4408      	add	r0, r1
    82ac:	60e0      	str	r0, [r4, #12]
    82ae:	f7fb f819 	bl	32e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    82b2:	6065      	str	r5, [r4, #4]
    82b4:	42ae      	cmp	r6, r5
    82b6:	d801      	bhi.n	82bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    82b8:	7860      	ldrb	r0, [r4, #1]
    82ba:	b110      	cbz	r0, 82c2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    82bc:	2000      	movs	r0, #0
    82be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82c2:	2001      	movs	r0, #1
    82c4:	e7fb      	b.n	82be <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    82c6:	0000      	.short	0x0000
    82c8:	2000014c 	.word	0x2000014c

000082cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    82cc:	b510      	push	{r4, lr}
    82ce:	4604      	mov	r4, r0
    82d0:	2906      	cmp	r1, #6
    82d2:	d22e      	bcs.n	8332 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    82d4:	e8df f001 	tbb	[pc, r1]
    82d8:	14031105 	.word	0x14031105
    82dc:	2815      	.short	0x2815
    82de:	2100      	movs	r1, #0
    82e0:	e006      	b.n	82f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    82e2:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    82e6:	b110      	cbz	r0, 82ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    82e8:	4620      	mov	r0, r4
    82ea:	f007 fb9c 	bl	fa26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    82ee:	2101      	movs	r1, #1
    82f0:	4620      	mov	r0, r4
    82f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82f6:	f000 b8fb 	b.w	84f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    82fa:	2003      	movs	r0, #3
    82fc:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8300:	bd10      	pop	{r4, pc}
    8302:	f003 fba7 	bl	ba54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8306:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    830a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    830e:	f003 fc65 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8312:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8316:	1a09      	subs	r1, r1, r0
    8318:	4808      	ldr	r0, [pc, #32]	; (833c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    831a:	6842      	ldr	r2, [r0, #4]
    831c:	440a      	add	r2, r1
    831e:	6042      	str	r2, [r0, #4]
    8320:	6882      	ldr	r2, [r0, #8]
    8322:	4411      	add	r1, r2
    8324:	6081      	str	r1, [r0, #8]
    8326:	bd10      	pop	{r4, pc}
    8328:	4620      	mov	r0, r4
    832a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    832e:	f007 bb65 	b.w	f9fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8332:	f240 715b 	movw	r1, #1883	; 0x75b
    8336:	2030      	movs	r0, #48	; 0x30
    8338:	f7fc fc66 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    833c:	2000014c 	.word	0x2000014c

00008340 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8340:	b570      	push	{r4, r5, r6, lr}
    8342:	460c      	mov	r4, r1
    8344:	4605      	mov	r5, r0
    8346:	b112      	cbz	r2, 834e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8348:	f240 7185 	movw	r1, #1925	; 0x785
    834c:	e010      	b.n	8370 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    834e:	f003 fb7b 	bl	ba48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8352:	4601      	mov	r1, r0
    8354:	2200      	movs	r2, #0
    8356:	4620      	mov	r0, r4
    8358:	f007 fc46 	bl	fbe8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    835c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8360:	462a      	mov	r2, r5
    8362:	4905      	ldr	r1, [pc, #20]	; (8378 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8364:	f7fa fd7c 	bl	2e60 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8368:	2800      	cmp	r0, #0
    836a:	d104      	bne.n	8376 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    836c:	f240 716e 	movw	r1, #1902	; 0x76e
    8370:	2030      	movs	r0, #48	; 0x30
    8372:	f7fc fc49 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8376:	bd70      	pop	{r4, r5, r6, pc}
    8378:	0000fd21 	.word	0x0000fd21
    837c:	b510      	push	{r4, lr}
    837e:	280c      	cmp	r0, #12
    8380:	d304      	bcc.n	838c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8382:	f44f 7157 	mov.w	r1, #860	; 0x35c
    8386:	2006      	movs	r0, #6
    8388:	f7fc fc3e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    838c:	4901      	ldr	r1, [pc, #4]	; (8394 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    838e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8392:	bd10      	pop	{r4, pc}
    8394:	0000ff44 	.word	0x0000ff44
    8398:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    839a:	4c18      	ldr	r4, [pc, #96]	; (83fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    839c:	2001      	movs	r0, #1
    839e:	7060      	strb	r0, [r4, #1]
    83a0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    83a4:	e00b      	b.n	83be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    83a6:	2100      	movs	r1, #0
    83a8:	f005 fec2 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    83ac:	0006      	movs	r6, r0
    83ae:	d010      	beq.n	83d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    83b0:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    83b4:	f7fa fd86 	bl	2ec4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    83b8:	4630      	mov	r0, r6
    83ba:	f007 fc08 	bl	fbce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    83be:	4669      	mov	r1, sp
    83c0:	2000      	movs	r0, #0
    83c2:	f005 febf 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    83c6:	b180      	cbz	r0, 83ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    83c8:	f240 1103 	movw	r1, #259	; 0x103
    83cc:	2030      	movs	r0, #48	; 0x30
    83ce:	f7fc fc1b 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83d2:	f240 1123 	movw	r1, #291	; 0x123
    83d6:	e7f9      	b.n	83cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    83d8:	9802      	ldr	r0, [sp, #8]
    83da:	b130      	cbz	r0, 83ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    83dc:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    83e0:	b119      	cbz	r1, 83ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    83e2:	8800      	ldrh	r0, [r0, #0]
    83e4:	42a8      	cmp	r0, r5
    83e6:	d1de      	bne.n	83a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    83e8:	e004      	b.n	83f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    83ea:	4668      	mov	r0, sp
    83ec:	f7fc fe50 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    83f0:	2800      	cmp	r0, #0
    83f2:	d0f1      	beq.n	83d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    83f4:	2000      	movs	r0, #0
    83f6:	7060      	strb	r0, [r4, #1]
    83f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83fa:	0000      	.short	0x0000
    83fc:	2000014c 	.word	0x2000014c
    8400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8404:	4604      	mov	r4, r0
    8406:	4839      	ldr	r0, [pc, #228]	; (84ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8408:	461e      	mov	r6, r3
    840a:	4690      	mov	r8, r2
    840c:	7880      	ldrb	r0, [r0, #2]
    840e:	4689      	mov	r9, r1
    8410:	2500      	movs	r5, #0
    8412:	2800      	cmp	r0, #0
    8414:	d063      	beq.n	84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8416:	f7fc f853 	bl	44c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    841a:	b3e0      	cbz	r0, 8496 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    841c:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8420:	2802      	cmp	r0, #2
    8422:	d35c      	bcc.n	84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8424:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8428:	2802      	cmp	r0, #2
    842a:	d058      	beq.n	84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    842c:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8430:	bb88      	cbnz	r0, 8496 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8432:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8436:	f7ff ffa1 	bl	837c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    843a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    843e:	b281      	uxth	r1, r0
    8440:	8031      	strh	r1, [r6, #0]
    8442:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8446:	2700      	movs	r7, #0
    8448:	2801      	cmp	r0, #1
    844a:	d00d      	beq.n	8468 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    844c:	6920      	ldr	r0, [r4, #16]
    844e:	f004 fd0e 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8452:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8456:	4442      	add	r2, r8
    8458:	eba2 0109 	sub.w	r1, r2, r9
    845c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8460:	1a82      	subs	r2, r0, r2
    8462:	fb01 7502 	mla	r5, r1, r2, r7
    8466:	e035      	b.n	84d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    8468:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    846c:	2803      	cmp	r0, #3
    846e:	d039      	beq.n	84e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8470:	2101      	movs	r1, #1
    8472:	2000      	movs	r0, #0
    8474:	f006 f9cb 	bl	e80e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8478:	6a61      	ldr	r1, [r4, #36]	; 0x24
    847a:	1847      	adds	r7, r0, r1
    847c:	8831      	ldrh	r1, [r6, #0]
    847e:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8482:	f004 fcf4 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8486:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    848a:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    848e:	1a82      	subs	r2, r0, r2
    8490:	fb01 5502 	mla	r5, r1, r2, r5
    8494:	e000      	b.n	8498 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    8496:	e022      	b.n	84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8498:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    849c:	8831      	ldrh	r1, [r6, #0]
    849e:	4638      	mov	r0, r7
    84a0:	f004 fce5 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    84a4:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    84a8:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    84ac:	1a41      	subs	r1, r0, r1
    84ae:	440d      	add	r5, r1
    84b0:	8831      	ldrh	r1, [r6, #0]
    84b2:	6920      	ldr	r0, [r4, #16]
    84b4:	f004 fcdb 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    84b8:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    84bc:	4442      	add	r2, r8
    84be:	eba2 0109 	sub.w	r1, r2, r9
    84c2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    84c6:	1a89      	subs	r1, r1, r2
    84c8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    84cc:	1a82      	subs	r2, r0, r2
    84ce:	1e49      	subs	r1, r1, #1
    84d0:	fb01 5502 	mla	r5, r1, r2, r5
    84d4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    84d8:	2001      	movs	r0, #1
    84da:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    84de:	4628      	mov	r0, r5
    84e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84e4:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    84e8:	e7c6      	b.n	8478 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    84ea:	0000      	.short	0x0000
    84ec:	2000014c 	.word	0x2000014c
    84f0:	b538      	push	{r3, r4, r5, lr}
    84f2:	2500      	movs	r5, #0
    84f4:	4604      	mov	r4, r0
    84f6:	2901      	cmp	r1, #1
    84f8:	d102      	bne.n	8500 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    84fa:	4810      	ldr	r0, [pc, #64]	; (853c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    84fc:	7840      	ldrb	r0, [r0, #1]
    84fe:	b170      	cbz	r0, 851e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8500:	2004      	movs	r0, #4
    8502:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8506:	bf00      	nop
    8508:	f007 fa86 	bl	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    850c:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8510:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8514:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8518:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    851c:	bd38      	pop	{r3, r4, r5, pc}
    851e:	9500      	str	r5, [sp, #0]
    8520:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8524:	2301      	movs	r3, #1
    8526:	2200      	movs	r2, #0
    8528:	4620      	mov	r0, r4
    852a:	f000 f809 	bl	8540 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    852e:	2800      	cmp	r0, #0
    8530:	d0ea      	beq.n	8508 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8532:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8536:	2030      	movs	r0, #48	; 0x30
    8538:	f7fc fb66 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    853c:	2000014c 	.word	0x2000014c
    8540:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8544:	b08b      	sub	sp, #44	; 0x2c
    8546:	4604      	mov	r4, r0
    8548:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    854c:	4699      	mov	r9, r3
    854e:	460f      	mov	r7, r1
    8550:	9307      	str	r3, [sp, #28]
    8552:	9005      	str	r0, [sp, #20]
    8554:	f008 fcd1 	bl	10efa <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8558:	4605      	mov	r5, r0
    855a:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    855e:	f7ff ff0d 	bl	837c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8562:	4428      	add	r0, r5
    8564:	f8ad 0004 	strh.w	r0, [sp, #4]
    8568:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    856c:	280d      	cmp	r0, #13
    856e:	d004      	beq.n	857a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    8570:	2000      	movs	r0, #0
    8572:	9008      	str	r0, [sp, #32]
    8574:	980d      	ldr	r0, [sp, #52]	; 0x34
    8576:	b110      	cbz	r0, 857e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    8578:	e02e      	b.n	85d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    857a:	2001      	movs	r0, #1
    857c:	e7f9      	b.n	8572 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    857e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8582:	2803      	cmp	r0, #3
    8584:	d128      	bne.n	85d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8586:	9808      	ldr	r0, [sp, #32]
    8588:	b330      	cbz	r0, 85d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    858a:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    858e:	42b8      	cmp	r0, r7
    8590:	d122      	bne.n	85d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8592:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8596:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    859a:	6920      	ldr	r0, [r4, #16]
    859c:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    85a0:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    85a4:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    85a8:	4408      	add	r0, r1
    85aa:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    85ae:	4620      	mov	r0, r4
    85b0:	f007 fce8 	bl	ff84 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    85b4:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    85b8:	6260      	str	r0, [r4, #36]	; 0x24
    85ba:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    85be:	8420      	strh	r0, [r4, #32]
    85c0:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    85c4:	6120      	str	r0, [r4, #16]
    85c6:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    85ca:	8320      	strh	r0, [r4, #24]
    85cc:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    85d0:	8360      	strh	r0, [r4, #26]
    85d2:	2002      	movs	r0, #2
    85d4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    85d8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    85dc:	f504 7508 	add.w	r5, r4, #544	; 0x220
    85e0:	1a38      	subs	r0, r7, r0
    85e2:	fa0f fa80 	sxth.w	sl, r0
    85e6:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    85ea:	1a38      	subs	r0, r7, r0
    85ec:	fa0f f880 	sxth.w	r8, r0
    85f0:	f1b8 0f00 	cmp.w	r8, #0
    85f4:	da08      	bge.n	8608 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    85f6:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    85fa:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    85fe:	46d0      	mov	r8, sl
    8600:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8604:	2001      	movs	r0, #1
    8606:	9007      	str	r0, [sp, #28]
    8608:	ab01      	add	r3, sp, #4
    860a:	4652      	mov	r2, sl
    860c:	4641      	mov	r1, r8
    860e:	4620      	mov	r0, r4
    8610:	f7ff fef6 	bl	8400 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8614:	9004      	str	r0, [sp, #16]
    8616:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    861a:	f8df b334 	ldr.w	fp, [pc, #820]	; 8950 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    861e:	b140      	cbz	r0, 8632 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8620:	2801      	cmp	r0, #1
    8622:	d07d      	beq.n	8720 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8624:	2802      	cmp	r0, #2
    8626:	d051      	beq.n	86cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8628:	2803      	cmp	r0, #3
    862a:	d07a      	beq.n	8722 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    862c:	f240 514b 	movw	r1, #1355	; 0x54b
    8630:	e18a      	b.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8632:	2101      	movs	r1, #1
    8634:	2000      	movs	r0, #0
    8636:	f006 f8ea 	bl	e80e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    863a:	4606      	mov	r6, r0
    863c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    863e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8642:	4430      	add	r0, r6
    8644:	f004 fc13 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8648:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    864c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8650:	6920      	ldr	r0, [r4, #16]
    8652:	f004 fc0c 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8656:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    865a:	a907      	add	r1, sp, #28
    865c:	a806      	add	r0, sp, #24
    865e:	f003 f95b 	bl	b918 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8662:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    8666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    866a:	f7fa ff07 	bl	347c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    866e:	4682      	mov	sl, r0
    8670:	4620      	mov	r0, r4
    8672:	f007 f9c3 	bl	f9fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8676:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    867a:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    867e:	f003 fad9 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8682:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8686:	4401      	add	r1, r0
    8688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    868c:	fbb1 f0f0 	udiv	r0, r1, r0
    8690:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8692:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    8696:	4431      	add	r1, r6
    8698:	1a08      	subs	r0, r1, r0
    869a:	1a81      	subs	r1, r0, r2
    869c:	4441      	add	r1, r8
    869e:	3920      	subs	r1, #32
    86a0:	eba1 060a 	sub.w	r6, r1, sl
    86a4:	0050      	lsls	r0, r2, #1
    86a6:	8c21      	ldrh	r1, [r4, #32]
    86a8:	3060      	adds	r0, #96	; 0x60
    86aa:	4401      	add	r1, r0
    86ac:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    86b0:	f007 fa14 	bl	fadc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    86b4:	3022      	adds	r0, #34	; 0x22
    86b6:	f8cb 0010 	str.w	r0, [fp, #16]
    86ba:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    86be:	1a30      	subs	r0, r6, r0
    86c0:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    86c4:	d258      	bcs.n	8778 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    86c6:	f240 41e4 	movw	r1, #1252	; 0x4e4
    86ca:	e13d      	b.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    86cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    86ce:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    86d2:	4408      	add	r0, r1
    86d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    86d8:	f004 fbc9 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86dc:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    86e0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    86e4:	6920      	ldr	r0, [r4, #16]
    86e6:	f004 fbc2 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86ea:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    86ee:	4620      	mov	r0, r4
    86f0:	f007 f984 	bl	f9fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    86f4:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    86f8:	bb10      	cbnz	r0, 8740 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    86fa:	f1b9 0f00 	cmp.w	r9, #0
    86fe:	d01f      	beq.n	8740 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8700:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8704:	4640      	mov	r0, r8
    8706:	f003 fa95 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    870a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    870e:	4401      	add	r1, r0
    8710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8714:	fbb1 f0f0 	udiv	r0, r1, r0
    8718:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    871c:	4408      	add	r0, r1
    871e:	e001      	b.n	8724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8720:	e02b      	b.n	877a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8722:	e047      	b.n	87b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8724:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8726:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    872a:	4411      	add	r1, r2
    872c:	1a0e      	subs	r6, r1, r0
    872e:	4640      	mov	r0, r8
    8730:	f003 fa54 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8734:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8738:	1a08      	subs	r0, r1, r0
    873a:	4406      	add	r6, r0
    873c:	3e20      	subs	r6, #32
    873e:	e006      	b.n	874e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    8740:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8742:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8746:	4408      	add	r0, r1
    8748:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    874c:	1a46      	subs	r6, r0, r1
    874e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8752:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    8756:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    875a:	fb01 0002 	mla	r0, r1, r2, r0
    875e:	0040      	lsls	r0, r0, #1
    8760:	8c21      	ldrh	r1, [r4, #32]
    8762:	3060      	adds	r0, #96	; 0x60
    8764:	4401      	add	r1, r0
    8766:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    876a:	f007 f9b7 	bl	fadc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    876e:	f8cb 0010 	str.w	r0, [fp, #16]
    8772:	2001      	movs	r0, #1
    8774:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8778:	e061      	b.n	883e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    877a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    877e:	6920      	ldr	r0, [r4, #16]
    8780:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8784:	1a86      	subs	r6, r0, r2
    8786:	eb01 000a 	add.w	r0, r1, sl
    878a:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    878e:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    8792:	1a40      	subs	r0, r0, r1
    8794:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    8798:	1e40      	subs	r0, r0, #1
    879a:	fb0c 3101 	mla	r1, ip, r1, r3
    879e:	fb00 1002 	mla	r0, r0, r2, r1
    87a2:	0040      	lsls	r0, r0, #1
    87a4:	8c21      	ldrh	r1, [r4, #32]
    87a6:	3060      	adds	r0, #96	; 0x60
    87a8:	4401      	add	r1, r0
    87aa:	fb06 f608 	mul.w	r6, r6, r8
    87ae:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    87b2:	e040      	b.n	8836 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    87b4:	6920      	ldr	r0, [r4, #16]
    87b6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    87ba:	fb00 f008 	mul.w	r0, r0, r8
    87be:	fb08 0611 	mls	r6, r8, r1, r0
    87c2:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    87c6:	2824      	cmp	r0, #36	; 0x24
    87c8:	d003      	beq.n	87d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    87ca:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    87ce:	2824      	cmp	r0, #36	; 0x24
    87d0:	d109      	bne.n	87e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    87d2:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    87d6:	1a38      	subs	r0, r7, r0
    87d8:	b200      	sxth	r0, r0
    87da:	2800      	cmp	r0, #0
    87dc:	db03      	blt.n	87e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    87de:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    87e2:	b100      	cbz	r0, 87e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    87e4:	9005      	str	r0, [sp, #20]
    87e6:	9807      	ldr	r0, [sp, #28]
    87e8:	b1d8      	cbz	r0, 8822 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    87ea:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    87ee:	b9c0      	cbnz	r0, 8822 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    87f0:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    87f4:	2800      	cmp	r0, #0
    87f6:	d07d      	beq.n	88f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    87f8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    87fc:	f003 fa1a 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8800:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8804:	4401      	add	r1, r0
    8806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    880a:	fbb1 f0f0 	udiv	r0, r1, r0
    880e:	1a36      	subs	r6, r6, r0
    8810:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8814:	f003 f9e2 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8818:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    881c:	1a08      	subs	r0, r1, r0
    881e:	4406      	add	r6, r0
    8820:	3e20      	subs	r6, #32
    8822:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8826:	eb01 000a 	add.w	r0, r1, sl
    882a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    882e:	4348      	muls	r0, r1
    8830:	0041      	lsls	r1, r0, #1
    8832:	3160      	adds	r1, #96	; 0x60
    8834:	9805      	ldr	r0, [sp, #20]
    8836:	f007 f951 	bl	fadc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    883a:	f8cb 0010 	str.w	r0, [fp, #16]
    883e:	9804      	ldr	r0, [sp, #16]
    8840:	f8db 2010 	ldr.w	r2, [fp, #16]
    8844:	1a31      	subs	r1, r6, r0
    8846:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    884a:	6920      	ldr	r0, [r4, #16]
    884c:	1b80      	subs	r0, r0, r6
    884e:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    8852:	f8cb 0014 	str.w	r0, [fp, #20]
    8856:	4282      	cmp	r2, r0
    8858:	d800      	bhi.n	885c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    885a:	4610      	mov	r0, r2
    885c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    8860:	2600      	movs	r6, #0
    8862:	702e      	strb	r6, [r5, #0]
    8864:	2064      	movs	r0, #100	; 0x64
    8866:	8128      	strh	r0, [r5, #8]
    8868:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    886c:	1851      	adds	r1, r2, r1
    886e:	4170      	adcs	r0, r6
    8870:	e9c5 1004 	strd	r1, r0, [r5, #16]
    8874:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8878:	f006 fc51 	bl	f11e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    887c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    8880:	4408      	add	r0, r1
    8882:	6068      	str	r0, [r5, #4]
    8884:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    8888:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    888c:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    8890:	72ae      	strb	r6, [r5, #10]
    8892:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    8896:	1bc0      	subs	r0, r0, r7
    8898:	b200      	sxth	r0, r0
    889a:	2800      	cmp	r0, #0
    889c:	dd01      	ble.n	88a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    889e:	2002      	movs	r0, #2
    88a0:	72a8      	strb	r0, [r5, #10]
    88a2:	9808      	ldr	r0, [sp, #32]
    88a4:	b338      	cbz	r0, 88f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    88a6:	f1b9 0f00 	cmp.w	r9, #0
    88aa:	d01c      	beq.n	88e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    88ac:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    88b0:	b3f1      	cbz	r1, 8930 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    88b2:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    88b6:	bf00      	nop
    88b8:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    88bc:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    88c0:	1c40      	adds	r0, r0, #1
    88c2:	4342      	muls	r2, r0
    88c4:	428a      	cmp	r2, r1
    88c6:	d20e      	bcs.n	88e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    88c8:	7aa8      	ldrb	r0, [r5, #10]
    88ca:	b160      	cbz	r0, 88e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    88cc:	72ae      	strb	r6, [r5, #10]
    88ce:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    88d2:	1c40      	adds	r0, r0, #1
    88d4:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    88d8:	f7fe fce4 	bl	72a4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    88dc:	f000 0007 	and.w	r0, r0, #7
    88e0:	1c40      	adds	r0, r0, #1
    88e2:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    88e6:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    88ea:	4629      	mov	r1, r5
    88ec:	f007 f908 	bl	fb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    88f0:	b340      	cbz	r0, 8944 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    88f2:	e001      	b.n	88f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    88f4:	e009      	b.n	890a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    88f6:	e00b      	b.n	8910 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    88f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    88fa:	f080 0001 	eor.w	r0, r0, #1
    88fe:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    8902:	2000      	movs	r0, #0
    8904:	b00f      	add	sp, #60	; 0x3c
    8906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    890a:	f240 5136 	movw	r1, #1334	; 0x536
    890e:	e01b      	b.n	8948 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8910:	f1b9 0f00 	cmp.w	r9, #0
    8914:	d1ca      	bne.n	88ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    8916:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    891a:	2800      	cmp	r0, #0
    891c:	d0e3      	beq.n	88e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    891e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8922:	6920      	ldr	r0, [r4, #16]
    8924:	1a41      	subs	r1, r0, r1
    8926:	4628      	mov	r0, r5
    8928:	f005 ff83 	bl	e832 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    892c:	0400      	lsls	r0, r0, #16
    892e:	e000      	b.n	8932 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    8930:	e006      	b.n	8940 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8932:	0c00      	lsrs	r0, r0, #16
    8934:	d0d7      	beq.n	88e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8936:	9918      	ldr	r1, [sp, #96]	; 0x60
    8938:	b101      	cbz	r1, 893c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    893a:	8008      	strh	r0, [r1, #0]
    893c:	2001      	movs	r0, #1
    893e:	e7e1      	b.n	8904 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    8940:	2000      	movs	r0, #0
    8942:	e7b9      	b.n	88b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    8944:	f240 5194 	movw	r1, #1428	; 0x594
    8948:	2030      	movs	r0, #48	; 0x30
    894a:	f7fc f95d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894e:	0000      	.short	0x0000
    8950:	2000014c 	.word	0x2000014c
    8954:	b570      	push	{r4, r5, r6, lr}
    8956:	4604      	mov	r4, r0
    8958:	f004 fa55 	bl	ce06 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    895c:	2864      	cmp	r0, #100	; 0x64
    895e:	d901      	bls.n	8964 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    8960:	4605      	mov	r5, r0
    8962:	e000      	b.n	8966 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    8964:	2564      	movs	r5, #100	; 0x64
    8966:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    896a:	2128      	movs	r1, #40	; 0x28
    896c:	f006 ffb6 	bl	f8dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    8970:	4428      	add	r0, r5
    8972:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8976:	f500 7010 	add.w	r0, r0, #576	; 0x240
    897a:	180e      	adds	r6, r1, r0
    897c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8980:	2128      	movs	r1, #40	; 0x28
    8982:	f006 ffab 	bl	f8dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    8986:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    898a:	4620      	mov	r0, r4
    898c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    898e:	f006 fb63 	bl	f058 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8992:	4605      	mov	r5, r0
    8994:	4632      	mov	r2, r6
    8996:	4620      	mov	r0, r4
    8998:	6921      	ldr	r1, [r4, #16]
    899a:	f006 fb5d 	bl	f058 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    899e:	4907      	ldr	r1, [pc, #28]	; (89bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    89a0:	4285      	cmp	r5, r0
    89a2:	6088      	str	r0, [r1, #8]
    89a4:	d200      	bcs.n	89a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    89a6:	4628      	mov	r0, r5
    89a8:	6048      	str	r0, [r1, #4]
    89aa:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    89ae:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    89b2:	60c8      	str	r0, [r1, #12]
    89b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89b8:	f7fa bc94 	b.w	32e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    89bc:	2000014c 	.word	0x2000014c

000089c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    89c0:	4806      	ldr	r0, [pc, #24]	; (89dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    89c2:	4905      	ldr	r1, [pc, #20]	; (89d8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    89c4:	6501      	str	r1, [r0, #80]	; 0x50
    89c6:	4906      	ldr	r1, [pc, #24]	; (89e0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    89c8:	6541      	str	r1, [r0, #84]	; 0x54
    89ca:	4807      	ldr	r0, [pc, #28]	; (89e8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    89cc:	4905      	ldr	r1, [pc, #20]	; (89e4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    89ce:	6501      	str	r1, [r0, #80]	; 0x50
    89d0:	4906      	ldr	r1, [pc, #24]	; (89ec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    89d2:	6541      	str	r1, [r0, #84]	; 0x54
    89d4:	4770      	bx	lr
    89d6:	0000      	.short	0x0000
    89d8:	00009de1 	.word	0x00009de1
    89dc:	2000017c 	.word	0x2000017c
    89e0:	00009ec5 	.word	0x00009ec5
    89e4:	0000a581 	.word	0x0000a581
    89e8:	20000214 	.word	0x20000214
    89ec:	0000a5b1 	.word	0x0000a5b1

000089f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    89f0:	481e      	ldr	r0, [pc, #120]	; (8a6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    89f2:	491d      	ldr	r1, [pc, #116]	; (8a68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    89f4:	6081      	str	r1, [r0, #8]
    89f6:	491e      	ldr	r1, [pc, #120]	; (8a70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    89f8:	6041      	str	r1, [r0, #4]
    89fa:	491e      	ldr	r1, [pc, #120]	; (8a74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    89fc:	6001      	str	r1, [r0, #0]
    89fe:	491e      	ldr	r1, [pc, #120]	; (8a78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8a00:	6281      	str	r1, [r0, #40]	; 0x28
    8a02:	491e      	ldr	r1, [pc, #120]	; (8a7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8a04:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a06:	491e      	ldr	r1, [pc, #120]	; (8a80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8a08:	60c1      	str	r1, [r0, #12]
    8a0a:	491e      	ldr	r1, [pc, #120]	; (8a84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8a0c:	6181      	str	r1, [r0, #24]
    8a0e:	491e      	ldr	r1, [pc, #120]	; (8a88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8a10:	6301      	str	r1, [r0, #48]	; 0x30
    8a12:	491e      	ldr	r1, [pc, #120]	; (8a8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8a14:	6201      	str	r1, [r0, #32]
    8a16:	491e      	ldr	r1, [pc, #120]	; (8a90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8a18:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a1a:	491e      	ldr	r1, [pc, #120]	; (8a94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8a1c:	6481      	str	r1, [r0, #72]	; 0x48
    8a1e:	491e      	ldr	r1, [pc, #120]	; (8a98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8a20:	6441      	str	r1, [r0, #68]	; 0x44
    8a22:	491e      	ldr	r1, [pc, #120]	; (8a9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8a24:	6341      	str	r1, [r0, #52]	; 0x34
    8a26:	491e      	ldr	r1, [pc, #120]	; (8aa0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8a28:	61c1      	str	r1, [r0, #28]
    8a2a:	491e      	ldr	r1, [pc, #120]	; (8aa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8a2c:	6241      	str	r1, [r0, #36]	; 0x24
    8a2e:	481f      	ldr	r0, [pc, #124]	; (8aac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8a30:	491d      	ldr	r1, [pc, #116]	; (8aa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8a32:	6081      	str	r1, [r0, #8]
    8a34:	491e      	ldr	r1, [pc, #120]	; (8ab0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8a36:	61c1      	str	r1, [r0, #28]
    8a38:	491e      	ldr	r1, [pc, #120]	; (8ab4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8a3a:	6241      	str	r1, [r0, #36]	; 0x24
    8a3c:	491e      	ldr	r1, [pc, #120]	; (8ab8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8a3e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a40:	491e      	ldr	r1, [pc, #120]	; (8abc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8a42:	6101      	str	r1, [r0, #16]
    8a44:	491e      	ldr	r1, [pc, #120]	; (8ac0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8a46:	6141      	str	r1, [r0, #20]
    8a48:	491e      	ldr	r1, [pc, #120]	; (8ac4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8a4a:	6441      	str	r1, [r0, #68]	; 0x44
    8a4c:	491e      	ldr	r1, [pc, #120]	; (8ac8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8a4e:	6341      	str	r1, [r0, #52]	; 0x34
    8a50:	491e      	ldr	r1, [pc, #120]	; (8acc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8a52:	6181      	str	r1, [r0, #24]
    8a54:	491e      	ldr	r1, [pc, #120]	; (8ad0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    8a56:	6301      	str	r1, [r0, #48]	; 0x30
    8a58:	491e      	ldr	r1, [pc, #120]	; (8ad4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    8a5a:	6481      	str	r1, [r0, #72]	; 0x48
    8a5c:	491e      	ldr	r1, [pc, #120]	; (8ad8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    8a5e:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a60:	491e      	ldr	r1, [pc, #120]	; (8adc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    8a62:	6381      	str	r1, [r0, #56]	; 0x38
    8a64:	4770      	bx	lr
    8a66:	0000      	.short	0x0000
    8a68:	0000a2ad 	.word	0x0000a2ad
    8a6c:	2000017c 	.word	0x2000017c
    8a70:	00009b05 	.word	0x00009b05
    8a74:	00009b69 	.word	0x00009b69
    8a78:	00009f99 	.word	0x00009f99
    8a7c:	00009fdd 	.word	0x00009fdd
    8a80:	00009c1d 	.word	0x00009c1d
    8a84:	0000a285 	.word	0x0000a285
    8a88:	0000a3bd 	.word	0x0000a3bd
    8a8c:	00009cd5 	.word	0x00009cd5
    8a90:	00009f69 	.word	0x00009f69
    8a94:	00009f3d 	.word	0x00009f3d
    8a98:	0000a22d 	.word	0x0000a22d
    8a9c:	0000a25d 	.word	0x0000a25d
    8aa0:	0000a2e5 	.word	0x0000a2e5
    8aa4:	00009d29 	.word	0x00009d29
    8aa8:	0000a7d9 	.word	0x0000a7d9
    8aac:	20000214 	.word	0x20000214
    8ab0:	0000a801 	.word	0x0000a801
    8ab4:	0000a551 	.word	0x0000a551
    8ab8:	0000a629 	.word	0x0000a629
    8abc:	0000a525 	.word	0x0000a525
    8ac0:	0000a72d 	.word	0x0000a72d
    8ac4:	0000a6ad 	.word	0x0000a6ad
    8ac8:	0000a6d9 	.word	0x0000a6d9
    8acc:	0000a751 	.word	0x0000a751
    8ad0:	0000a85d 	.word	0x0000a85d
    8ad4:	0000a5e1 	.word	0x0000a5e1
    8ad8:	0000a611 	.word	0x0000a611
    8adc:	0000a6fd 	.word	0x0000a6fd

00008ae0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8ae0:	4806      	ldr	r0, [pc, #24]	; (8afc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8ae2:	4905      	ldr	r1, [pc, #20]	; (8af8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8ae4:	6581      	str	r1, [r0, #88]	; 0x58
    8ae6:	4906      	ldr	r1, [pc, #24]	; (8b00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8ae8:	6601      	str	r1, [r0, #96]	; 0x60
    8aea:	4807      	ldr	r0, [pc, #28]	; (8b08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8aec:	4905      	ldr	r1, [pc, #20]	; (8b04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8aee:	6581      	str	r1, [r0, #88]	; 0x58
    8af0:	4906      	ldr	r1, [pc, #24]	; (8b0c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8af2:	65c1      	str	r1, [r0, #92]	; 0x5c
    8af4:	4770      	bx	lr
    8af6:	0000      	.short	0x0000
    8af8:	00009ffd 	.word	0x00009ffd
    8afc:	2000017c 	.word	0x2000017c
    8b00:	0000a0dd 	.word	0x0000a0dd
    8b04:	0000a655 	.word	0x0000a655
    8b08:	20000214 	.word	0x20000214
    8b0c:	0000a685 	.word	0x0000a685

00008b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b12:	4c7c      	ldr	r4, [pc, #496]	; (8d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8b14:	2101      	movs	r1, #1
    8b16:	f1a4 0610 	sub.w	r6, r4, #16
    8b1a:	7021      	strb	r1, [r4, #0]
    8b1c:	2500      	movs	r5, #0
    8b1e:	6060      	str	r0, [r4, #4]
    8b20:	8075      	strh	r5, [r6, #2]
    8b22:	7075      	strb	r5, [r6, #1]
    8b24:	7035      	strb	r5, [r6, #0]
    8b26:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    8b2a:	8800      	ldrh	r0, [r0, #0]
    8b2c:	f7fc fcaa 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8b30:	b180      	cbz	r0, 8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    8b32:	6860      	ldr	r0, [r4, #4]
    8b34:	8800      	ldrh	r0, [r0, #0]
    8b36:	f7fc fef9 	bl	592c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8b3a:	6860      	ldr	r0, [r4, #4]
    8b3c:	8800      	ldrh	r0, [r0, #0]
    8b3e:	f7fc fe9d 	bl	587c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8b42:	6860      	ldr	r0, [r4, #4]
    8b44:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    8b48:	b1c9      	cbz	r1, 8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8b4a:	3078      	adds	r0, #120	; 0x78
    8b4c:	f007 fa61 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b50:	b118      	cbz	r0, 8b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    8b52:	e014      	b.n	8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8b54:	f640 3166 	movw	r1, #2918	; 0xb66
    8b58:	e06c      	b.n	8c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    8b5a:	6860      	ldr	r0, [r4, #4]
    8b5c:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8b60:	f88d 1000 	strb.w	r1, [sp]
    8b64:	9900      	ldr	r1, [sp, #0]
    8b66:	9100      	str	r1, [sp, #0]
    8b68:	f89d 1000 	ldrb.w	r1, [sp]
    8b6c:	b139      	cbz	r1, 8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8b6e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8b72:	2301      	movs	r3, #1
    8b74:	4619      	mov	r1, r3
    8b76:	3078      	adds	r0, #120	; 0x78
    8b78:	f005 fda1 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b7c:	b180      	cbz	r0, 8ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    8b7e:	6860      	ldr	r0, [r4, #4]
    8b80:	3078      	adds	r0, #120	; 0x78
    8b82:	f007 fa46 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b86:	b128      	cbz	r0, 8b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8b88:	6860      	ldr	r0, [r4, #4]
    8b8a:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8b8e:	bf00      	nop
    8b90:	f000 fbb2 	bl	92f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8b94:	6860      	ldr	r0, [r4, #4]
    8b96:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    8b9a:	b189      	cbz	r1, 8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    8b9c:	80b5      	strh	r5, [r6, #4]
    8b9e:	e01e      	b.n	8bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8ba0:	6860      	ldr	r0, [r4, #4]
    8ba2:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    8ba6:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8baa:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8bae:	2100      	movs	r1, #0
    8bb0:	2002      	movs	r0, #2
    8bb2:	f000 fe53 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8bb6:	6860      	ldr	r0, [r4, #4]
    8bb8:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    8bbc:	2002      	movs	r0, #2
    8bbe:	e7e7      	b.n	8b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    8bc0:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    8bc4:	f88d 1000 	strb.w	r1, [sp]
    8bc8:	9900      	ldr	r1, [sp, #0]
    8bca:	9100      	str	r1, [sp, #0]
    8bcc:	f89d 1000 	ldrb.w	r1, [sp]
    8bd0:	b919      	cbnz	r1, 8bda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8bd2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    8bd4:	8b02      	ldrh	r2, [r0, #24]
    8bd6:	4291      	cmp	r1, r2
    8bd8:	d800      	bhi.n	8bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8bda:	8b01      	ldrh	r1, [r0, #24]
    8bdc:	80b1      	strh	r1, [r6, #4]
    8bde:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    8be2:	1e49      	subs	r1, r1, #1
    8be4:	b28f      	uxth	r7, r1
    8be6:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    8bea:	4439      	add	r1, r7
    8bec:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    8bf0:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    8bf4:	4439      	add	r1, r7
    8bf6:	8001      	strh	r1, [r0, #0]
    8bf8:	f001 fe5e 	bl	a8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    8bfc:	b120      	cbz	r0, 8c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    8bfe:	6860      	ldr	r0, [r4, #4]
    8c00:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    8c04:	4439      	add	r1, r7
    8c06:	6001      	str	r1, [r0, #0]
    8c08:	6861      	ldr	r1, [r4, #4]
    8c0a:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    8c0e:	2801      	cmp	r0, #1
    8c10:	d802      	bhi.n	8c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8c12:	1c40      	adds	r0, r0, #1
    8c14:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    8c18:	b10f      	cbz	r7, 8c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8c1a:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    8c1e:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    8c22:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    8c26:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8c2a:	f005 fedc 	bl	e9e6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8c2e:	b120      	cbz	r0, 8c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    8c30:	f640 31ad 	movw	r1, #2989	; 0xbad
    8c34:	2031      	movs	r0, #49	; 0x31
    8c36:	f7fb ffe7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c3a:	6860      	ldr	r0, [r4, #4]
    8c3c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8c40:	290b      	cmp	r1, #11
    8c42:	d001      	beq.n	8c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8c44:	290c      	cmp	r1, #12
    8c46:	d119      	bne.n	8c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8c48:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    8c4c:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    8c50:	1ad2      	subs	r2, r2, r3
    8c52:	b212      	sxth	r2, r2
    8c54:	2a00      	cmp	r2, #0
    8c56:	db11      	blt.n	8c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8c58:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    8c5c:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    8c60:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    8c64:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    8c68:	2103      	movs	r1, #3
    8c6a:	f7fd fedd 	bl	6a28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8c6e:	6860      	ldr	r0, [r4, #4]
    8c70:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8c74:	21ff      	movs	r1, #255	; 0xff
    8c76:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    8c7a:	e026      	b.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8c7c:	2924      	cmp	r1, #36	; 0x24
    8c7e:	d111      	bne.n	8ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8c80:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8c84:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8c88:	1a89      	subs	r1, r1, r2
    8c8a:	b209      	sxth	r1, r1
    8c8c:	2900      	cmp	r1, #0
    8c8e:	db09      	blt.n	8ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8c90:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8c94:	f000 fe9c 	bl	99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8c98:	2800      	cmp	r0, #0
    8c9a:	6860      	ldr	r0, [r4, #4]
    8c9c:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    8ca0:	d029      	beq.n	8cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8ca2:	e012      	b.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8ca4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8ca8:	2924      	cmp	r1, #36	; 0x24
    8caa:	d001      	beq.n	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8cac:	2925      	cmp	r1, #37	; 0x25
    8cae:	d10c      	bne.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8cb0:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8cb4:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8cb8:	1a89      	subs	r1, r1, r2
    8cba:	b209      	sxth	r1, r1
    8cbc:	2900      	cmp	r1, #0
    8cbe:	db04      	blt.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8cc0:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8cc4:	f000 fe84 	bl	99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8cc8:	b1a8      	cbz	r0, 8cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8cca:	480f      	ldr	r0, [pc, #60]	; (8d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8ccc:	9000      	str	r0, [sp, #0]
    8cce:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    8cd2:	4b0e      	ldr	r3, [pc, #56]	; (8d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8cd4:	4a0e      	ldr	r2, [pc, #56]	; (8d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8cd6:	f7fc fec1 	bl	5a5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8cda:	6860      	ldr	r0, [r4, #4]
    8cdc:	2301      	movs	r3, #1
    8cde:	2105      	movs	r1, #5
    8ce0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8ce4:	3078      	adds	r0, #120	; 0x78
    8ce6:	f005 fcea 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cea:	2800      	cmp	r0, #0
    8cec:	d009      	beq.n	8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cf2:	f7fc bead 	b.w	5a50 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cfa:	2100      	movs	r1, #0
    8cfc:	4608      	mov	r0, r1
    8cfe:	f000 bbd9 	b.w	94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    8d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d04:	20000174 	.word	0x20000174
    8d08:	000094b5 	.word	0x000094b5
    8d0c:	00008fd5 	.word	0x00008fd5
    8d10:	0000991d 	.word	0x0000991d
    8d14:	4804      	ldr	r0, [pc, #16]	; (8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8d16:	2100      	movs	r1, #0
    8d18:	6840      	ldr	r0, [r0, #4]
    8d1a:	f820 1fc0 	strh.w	r1, [r0, #192]!
    8d1e:	7881      	ldrb	r1, [r0, #2]
    8d20:	1c49      	adds	r1, r1, #1
    8d22:	7081      	strb	r1, [r0, #2]
    8d24:	4770      	bx	lr
    8d26:	0000      	.short	0x0000
    8d28:	20000174 	.word	0x20000174
    8d2c:	4807      	ldr	r0, [pc, #28]	; (8d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8d2e:	b510      	push	{r4, lr}
    8d30:	6841      	ldr	r1, [r0, #4]
    8d32:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    8d36:	1e40      	subs	r0, r0, #1
    8d38:	b240      	sxtb	r0, r0
    8d3a:	7008      	strb	r0, [r1, #0]
    8d3c:	2800      	cmp	r0, #0
    8d3e:	da04      	bge.n	8d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    8d40:	f240 118d 	movw	r1, #397	; 0x18d
    8d44:	2031      	movs	r0, #49	; 0x31
    8d46:	f7fb ff5f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d4a:	bd10      	pop	{r4, pc}
    8d4c:	20000174 	.word	0x20000174
    8d50:	491d      	ldr	r1, [pc, #116]	; (8dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8d52:	b508      	push	{r3, lr}
    8d54:	6849      	ldr	r1, [r1, #4]
    8d56:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    8d5a:	b1b8      	cbz	r0, 8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    8d5c:	2a10      	cmp	r2, #16
    8d5e:	d006      	beq.n	8d6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8d60:	2a14      	cmp	r2, #20
    8d62:	d007      	beq.n	8d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8d64:	2a15      	cmp	r2, #21
    8d66:	d008      	beq.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    8d68:	2a1b      	cmp	r2, #27
    8d6a:	d127      	bne.n	8dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8d6c:	e008      	b.n	8d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    8d6e:	2101      	movs	r1, #1
    8d70:	200b      	movs	r0, #11
    8d72:	e007      	b.n	8d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8d74:	f001 fb88 	bl	a488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    8d78:	e006      	b.n	8d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8d7a:	f000 fd8d 	bl	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    8d7e:	e003      	b.n	8d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8d80:	2101      	movs	r1, #1
    8d82:	2006      	movs	r0, #6
    8d84:	f000 fd6a 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8d88:	2001      	movs	r0, #1
    8d8a:	bd08      	pop	{r3, pc}
    8d8c:	2a21      	cmp	r2, #33	; 0x21
    8d8e:	d004      	beq.n	8d9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    8d90:	2a28      	cmp	r2, #40	; 0x28
    8d92:	d113      	bne.n	8dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8d94:	2101      	movs	r1, #1
    8d96:	2011      	movs	r0, #17
    8d98:	e7f4      	b.n	8d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8d9a:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8d9e:	2802      	cmp	r0, #2
    8da0:	d00e      	beq.n	8dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8da2:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8da6:	2801      	cmp	r0, #1
    8da8:	d108      	bne.n	8dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8daa:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    8dae:	f88d 0000 	strb.w	r0, [sp]
    8db2:	9800      	ldr	r0, [sp, #0]
    8db4:	9000      	str	r0, [sp, #0]
    8db6:	f89d 0000 	ldrb.w	r0, [sp]
    8dba:	b108      	cbz	r0, 8dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8dbc:	2000      	movs	r0, #0
    8dbe:	bd08      	pop	{r3, pc}
    8dc0:	2101      	movs	r1, #1
    8dc2:	2017      	movs	r0, #23
    8dc4:	e7de      	b.n	8d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8dc6:	0000      	.short	0x0000
    8dc8:	20000174 	.word	0x20000174
    8dcc:	b538      	push	{r3, r4, r5, lr}
    8dce:	2800      	cmp	r0, #0
    8dd0:	d16d      	bne.n	8eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8dd2:	4c38      	ldr	r4, [pc, #224]	; (8eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    8dd4:	6860      	ldr	r0, [r4, #4]
    8dd6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8dda:	07ca      	lsls	r2, r1, #31
    8ddc:	d002      	beq.n	8de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    8dde:	2101      	movs	r1, #1
    8de0:	2009      	movs	r0, #9
    8de2:	e05d      	b.n	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8de4:	078a      	lsls	r2, r1, #30
    8de6:	d50a      	bpl.n	8dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8de8:	2101      	movs	r1, #1
    8dea:	200c      	movs	r0, #12
    8dec:	f000 fd36 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8df0:	6860      	ldr	r0, [r4, #4]
    8df2:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    8df6:	f041 0101 	orr.w	r1, r1, #1
    8dfa:	7001      	strb	r1, [r0, #0]
    8dfc:	e052      	b.n	8ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8dfe:	074a      	lsls	r2, r1, #29
    8e00:	d502      	bpl.n	8e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8e02:	2101      	movs	r1, #1
    8e04:	2013      	movs	r0, #19
    8e06:	e04b      	b.n	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8e08:	070a      	lsls	r2, r1, #28
    8e0a:	d506      	bpl.n	8e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8e0c:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    8e10:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8e14:	2101      	movs	r1, #1
    8e16:	2007      	movs	r0, #7
    8e18:	e042      	b.n	8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8e1a:	f011 0f30 	tst.w	r1, #48	; 0x30
    8e1e:	d046      	beq.n	8eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8e20:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8e24:	f88d 1000 	strb.w	r1, [sp]
    8e28:	9900      	ldr	r1, [sp, #0]
    8e2a:	9100      	str	r1, [sp, #0]
    8e2c:	f89d 1000 	ldrb.w	r1, [sp]
    8e30:	bbd1      	cbnz	r1, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    8e32:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8e36:	2500      	movs	r5, #0
    8e38:	f88d 1000 	strb.w	r1, [sp]
    8e3c:	9900      	ldr	r1, [sp, #0]
    8e3e:	9100      	str	r1, [sp, #0]
    8e40:	f89d 1000 	ldrb.w	r1, [sp]
    8e44:	b1c1      	cbz	r1, 8e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8e46:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8e4a:	2924      	cmp	r1, #36	; 0x24
    8e4c:	d02d      	beq.n	8eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8e4e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8e52:	2924      	cmp	r1, #36	; 0x24
    8e54:	d029      	beq.n	8eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8e56:	2300      	movs	r3, #0
    8e58:	f200 2276 	addw	r2, r0, #630	; 0x276
    8e5c:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    8e60:	f006 f8ec 	bl	f03c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8e64:	6860      	ldr	r0, [r4, #4]
    8e66:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    8e6a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8e6e:	f041 0110 	orr.w	r1, r1, #16
    8e72:	7001      	strb	r1, [r0, #0]
    8e74:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    8e78:	6860      	ldr	r0, [r4, #4]
    8e7a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8e7e:	06c9      	lsls	r1, r1, #27
    8e80:	d515      	bpl.n	8eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8e82:	f006 f8f6 	bl	f072 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8e86:	f000 f92b 	bl	90e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8e8a:	6861      	ldr	r1, [r4, #4]
    8e8c:	f101 0030 	add.w	r0, r1, #48	; 0x30
    8e90:	8bc2      	ldrh	r2, [r0, #30]
    8e92:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    8e96:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8e98:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    8e9c:	2101      	movs	r1, #1
    8e9e:	2015      	movs	r0, #21
    8ea0:	f000 fcdc 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8ea4:	2001      	movs	r0, #1
    8ea6:	bd38      	pop	{r3, r4, r5, pc}
    8ea8:	e001      	b.n	8eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8eaa:	2301      	movs	r3, #1
    8eac:	e7d4      	b.n	8e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8eae:	2000      	movs	r0, #0
    8eb0:	e7f9      	b.n	8ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    8eb2:	0000      	.short	0x0000
    8eb4:	20000174 	.word	0x20000174
    8eb8:	b570      	push	{r4, r5, r6, lr}
    8eba:	460d      	mov	r5, r1
    8ebc:	4606      	mov	r6, r0
    8ebe:	f005 fe83 	bl	ebc8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8ec2:	4604      	mov	r4, r0
    8ec4:	4630      	mov	r0, r6
    8ec6:	f005 fe8b 	bl	ebe0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8eca:	4629      	mov	r1, r5
    8ecc:	f000 f81e 	bl	8f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    8ed0:	b1b8      	cbz	r0, 8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8ed2:	4620      	mov	r0, r4
    8ed4:	f005 fc8d 	bl	e7f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8ed8:	0001      	movs	r1, r0
    8eda:	d00d      	beq.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8edc:	480a      	ldr	r0, [pc, #40]	; (8f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    8ede:	6840      	ldr	r0, [r0, #4]
    8ee0:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    8ee4:	428a      	cmp	r2, r1
    8ee6:	d007      	beq.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8ee8:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    8eec:	2901      	cmp	r1, #1
    8eee:	d005      	beq.n	8efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8ef0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8ef4:	4220      	tst	r0, r4
    8ef6:	d004      	beq.n	8f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8ef8:	2001      	movs	r0, #1
    8efa:	bd70      	pop	{r4, r5, r6, pc}
    8efc:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    8f00:	e7f8      	b.n	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    8f02:	2000      	movs	r0, #0
    8f04:	bd70      	pop	{r4, r5, r6, pc}
    8f06:	0000      	.short	0x0000
    8f08:	20000174 	.word	0x20000174
    8f0c:	b570      	push	{r4, r5, r6, lr}
    8f0e:	460d      	mov	r5, r1
    8f10:	4604      	mov	r4, r0
    8f12:	f005 fc6e 	bl	e7f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8f16:	b350      	cbz	r0, 8f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8f18:	4916      	ldr	r1, [pc, #88]	; (8f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    8f1a:	6849      	ldr	r1, [r1, #4]
    8f1c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    8f20:	4282      	cmp	r2, r0
    8f22:	d024      	beq.n	8f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8f24:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    8f28:	2b01      	cmp	r3, #1
    8f2a:	d005      	beq.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8f2c:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    8f30:	4223      	tst	r3, r4
    8f32:	d013      	beq.n	8f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8f34:	b11d      	cbz	r5, 8f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    8f36:	e01a      	b.n	8f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8f38:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    8f3c:	e7f8      	b.n	8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8f3e:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8f42:	4221      	tst	r1, r4
    8f44:	d113      	bne.n	8f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8f46:	b15a      	cbz	r2, 8f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    8f48:	2a04      	cmp	r2, #4
    8f4a:	d00e      	beq.n	8f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8f4c:	2804      	cmp	r0, #4
    8f4e:	d00c      	beq.n	8f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8f50:	2a08      	cmp	r2, #8
    8f52:	d00a      	beq.n	8f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8f54:	2808      	cmp	r0, #8
    8f56:	d008      	beq.n	8f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8f58:	4282      	cmp	r2, r0
    8f5a:	d908      	bls.n	8f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8f5c:	2000      	movs	r0, #0
    8f5e:	bd70      	pop	{r4, r5, r6, pc}
    8f60:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    8f64:	2006      	movs	r0, #6
    8f66:	f7fb fe4f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f6a:	4282      	cmp	r2, r0
    8f6c:	d3f6      	bcc.n	8f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8f6e:	2001      	movs	r0, #1
    8f70:	bd70      	pop	{r4, r5, r6, pc}
    8f72:	0000      	.short	0x0000
    8f74:	20000174 	.word	0x20000174
    8f78:	b510      	push	{r4, lr}
    8f7a:	4c10      	ldr	r4, [pc, #64]	; (8fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    8f7c:	2301      	movs	r3, #1
    8f7e:	2100      	movs	r1, #0
    8f80:	6860      	ldr	r0, [r4, #4]
    8f82:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8f86:	3078      	adds	r0, #120	; 0x78
    8f88:	f005 fb99 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f8c:	b140      	cbz	r0, 8fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    8f8e:	6860      	ldr	r0, [r4, #4]
    8f90:	2301      	movs	r3, #1
    8f92:	2104      	movs	r1, #4
    8f94:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8f98:	3078      	adds	r0, #120	; 0x78
    8f9a:	f005 fb90 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f9e:	b108      	cbz	r0, 8fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    8fa0:	2000      	movs	r0, #0
    8fa2:	bd10      	pop	{r4, pc}
    8fa4:	6860      	ldr	r0, [r4, #4]
    8fa6:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    8faa:	2800      	cmp	r0, #0
    8fac:	d0f9      	beq.n	8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8fae:	2100      	movs	r1, #0
    8fb0:	2012      	movs	r0, #18
    8fb2:	f000 fc53 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8fb6:	2001      	movs	r0, #1
    8fb8:	bd10      	pop	{r4, pc}
    8fba:	0000      	.short	0x0000
    8fbc:	20000174 	.word	0x20000174
    8fc0:	4903      	ldr	r1, [pc, #12]	; (8fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    8fc2:	2000      	movs	r0, #0
    8fc4:	6849      	ldr	r1, [r1, #4]
    8fc6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    8fca:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    8fce:	4770      	bx	lr
    8fd0:	20000174 	.word	0x20000174
    8fd4:	490d      	ldr	r1, [pc, #52]	; (900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    8fd6:	4602      	mov	r2, r0
    8fd8:	7848      	ldrb	r0, [r1, #1]
    8fda:	b9a0      	cbnz	r0, 9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8fdc:	f101 0010 	add.w	r0, r1, #16
    8fe0:	6840      	ldr	r0, [r0, #4]
    8fe2:	b142      	cbz	r2, 8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    8fe4:	7889      	ldrb	r1, [r1, #2]
    8fe6:	0709      	lsls	r1, r1, #28
    8fe8:	d503      	bpl.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    8fea:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    8fee:	2808      	cmp	r0, #8
    8ff0:	d009      	beq.n	9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8ff2:	2001      	movs	r0, #1
    8ff4:	4770      	bx	lr
    8ff6:	f100 0130 	add.w	r1, r0, #48	; 0x30
    8ffa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8ffc:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    8ffe:	428a      	cmp	r2, r1
    9000:	d801      	bhi.n	9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    9002:	f7ff b93d 	b.w	8280 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9006:	2000      	movs	r0, #0
    9008:	4770      	bx	lr
    900a:	0000      	.short	0x0000
    900c:	20000164 	.word	0x20000164
    9010:	b538      	push	{r3, r4, r5, lr}
    9012:	4c32      	ldr	r4, [pc, #200]	; (90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    9014:	4605      	mov	r5, r0
    9016:	6860      	ldr	r0, [r4, #4]
    9018:	3078      	adds	r0, #120	; 0x78
    901a:	f006 fffa 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    901e:	2800      	cmp	r0, #0
    9020:	d15b      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9022:	2d00      	cmp	r5, #0
    9024:	d159      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9026:	6860      	ldr	r0, [r4, #4]
    9028:	2301      	movs	r3, #1
    902a:	4619      	mov	r1, r3
    902c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9030:	3078      	adds	r0, #120	; 0x78
    9032:	f005 fb44 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9036:	2800      	cmp	r0, #0
    9038:	d14f      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    903a:	6860      	ldr	r0, [r4, #4]
    903c:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    9040:	f88d 1000 	strb.w	r1, [sp]
    9044:	9900      	ldr	r1, [sp, #0]
    9046:	9100      	str	r1, [sp, #0]
    9048:	f89d 2000 	ldrb.w	r2, [sp]
    904c:	2100      	movs	r1, #0
    904e:	b142      	cbz	r2, 9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    9050:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    9054:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    9058:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    905c:	2100      	movs	r1, #0
    905e:	2002      	movs	r0, #2
    9060:	e030      	b.n	90c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    9062:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9066:	2301      	movs	r3, #1
    9068:	2104      	movs	r1, #4
    906a:	3078      	adds	r0, #120	; 0x78
    906c:	f005 fb27 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9070:	4605      	mov	r5, r0
    9072:	f7ff feab 	bl	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9076:	2800      	cmp	r0, #0
    9078:	d12f      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    907a:	4628      	mov	r0, r5
    907c:	f7ff fe68 	bl	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9080:	2800      	cmp	r0, #0
    9082:	d12a      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9084:	f7ff ff78 	bl	8f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    9088:	2800      	cmp	r0, #0
    908a:	d126      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    908c:	6860      	ldr	r0, [r4, #4]
    908e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9092:	290a      	cmp	r1, #10
    9094:	d01a      	beq.n	90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    9096:	2d00      	cmp	r5, #0
    9098:	d11f      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    909a:	f000 fb2b 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    909e:	2800      	cmp	r0, #0
    90a0:	d11b      	bne.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    90a2:	6860      	ldr	r0, [r4, #4]
    90a4:	2301      	movs	r3, #1
    90a6:	2100      	movs	r1, #0
    90a8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    90ac:	3078      	adds	r0, #120	; 0x78
    90ae:	f005 fb06 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90b2:	2800      	cmp	r0, #0
    90b4:	d011      	beq.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    90b6:	6860      	ldr	r0, [r4, #4]
    90b8:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    90bc:	2800      	cmp	r0, #0
    90be:	d00c      	beq.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    90c0:	2100      	movs	r1, #0
    90c2:	20ff      	movs	r0, #255	; 0xff
    90c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    90c8:	f000 bbc8 	b.w	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    90cc:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    90d0:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    90d4:	2100      	movs	r1, #0
    90d6:	2007      	movs	r0, #7
    90d8:	e7f4      	b.n	90c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    90da:	bd38      	pop	{r3, r4, r5, pc}
    90dc:	20000174 	.word	0x20000174
    90e0:	480a      	ldr	r0, [pc, #40]	; (910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    90e2:	b510      	push	{r4, lr}
    90e4:	6843      	ldr	r3, [r0, #4]
    90e6:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    90ea:	2801      	cmp	r0, #1
    90ec:	d00a      	beq.n	9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    90ee:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    90f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    90f6:	8818      	ldrh	r0, [r3, #0]
    90f8:	f005 ff78 	bl	efec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    90fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9100:	f7fd bf5a 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9104:	2002      	movs	r0, #2
    9106:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    910a:	bd10      	pop	{r4, pc}
    910c:	20000174 	.word	0x20000174
    9110:	b570      	push	{r4, r5, r6, lr}
    9112:	4c24      	ldr	r4, [pc, #144]	; (91a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    9114:	0006      	movs	r6, r0
    9116:	f104 0510 	add.w	r5, r4, #16
    911a:	d12f      	bne.n	917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    911c:	f000 f8a2 	bl	9264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    9120:	f000 f844 	bl	91ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    9124:	0006      	movs	r6, r0
    9126:	d129      	bne.n	917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9128:	8860      	ldrh	r0, [r4, #2]
    912a:	0741      	lsls	r1, r0, #29
    912c:	d506      	bpl.n	913c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    912e:	6869      	ldr	r1, [r5, #4]
    9130:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    9134:	2907      	cmp	r1, #7
    9136:	d101      	bne.n	913c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9138:	2101      	movs	r1, #1
    913a:	7021      	strb	r1, [r4, #0]
    913c:	0780      	lsls	r0, r0, #30
    913e:	d512      	bpl.n	9166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9140:	68a0      	ldr	r0, [r4, #8]
    9142:	78c0      	ldrb	r0, [r0, #3]
    9144:	2826      	cmp	r0, #38	; 0x26
    9146:	d205      	bcs.n	9154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9148:	4917      	ldr	r1, [pc, #92]	; (91a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    914a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    914e:	b109      	cbz	r1, 9154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9150:	4788      	blx	r1
    9152:	e008      	b.n	9166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9154:	28ff      	cmp	r0, #255	; 0xff
    9156:	d004      	beq.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9158:	f240 71c9 	movw	r1, #1993	; 0x7c9
    915c:	2031      	movs	r0, #49	; 0x31
    915e:	f7fb fd53 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9162:	f001 f9d3 	bl	a50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    9166:	78a0      	ldrb	r0, [r4, #2]
    9168:	06c0      	lsls	r0, r0, #27
    916a:	d507      	bpl.n	917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    916c:	6868      	ldr	r0, [r5, #4]
    916e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9172:	290b      	cmp	r1, #11
    9174:	d102      	bne.n	917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9176:	210c      	movs	r1, #12
    9178:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    917c:	7860      	ldrb	r0, [r4, #1]
    917e:	0700      	lsls	r0, r0, #28
    9180:	d50d      	bpl.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9182:	6868      	ldr	r0, [r5, #4]
    9184:	2301      	movs	r3, #1
    9186:	2105      	movs	r1, #5
    9188:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    918c:	3078      	adds	r0, #120	; 0x78
    918e:	f005 fa96 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9192:	b108      	cbz	r0, 9198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    9194:	2608      	movs	r6, #8
    9196:	e002      	b.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9198:	2000      	movs	r0, #0
    919a:	f7fc fd27 	bl	5bec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    919e:	4630      	mov	r0, r6
    91a0:	bd70      	pop	{r4, r5, r6, pc}
    91a2:	0000      	.short	0x0000
    91a4:	20000164 	.word	0x20000164
    91a8:	20000214 	.word	0x20000214
    91ac:	b570      	push	{r4, r5, r6, lr}
    91ae:	4d2b      	ldr	r5, [pc, #172]	; (925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    91b0:	2000      	movs	r0, #0
    91b2:	78a9      	ldrb	r1, [r5, #2]
    91b4:	07c9      	lsls	r1, r1, #31
    91b6:	d017      	beq.n	91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    91b8:	68e8      	ldr	r0, [r5, #12]
    91ba:	f105 0410 	add.w	r4, r5, #16
    91be:	2301      	movs	r3, #1
    91c0:	78c6      	ldrb	r6, [r0, #3]
    91c2:	6860      	ldr	r0, [r4, #4]
    91c4:	2105      	movs	r1, #5
    91c6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    91ca:	3078      	adds	r0, #120	; 0x78
    91cc:	f005 fa77 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91d0:	b158      	cbz	r0, 91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    91d2:	1eb6      	subs	r6, r6, #2
    91d4:	2e0a      	cmp	r6, #10
    91d6:	d206      	bcs.n	91e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    91d8:	e8df f006 	tbb	[pc, r6]
    91dc:	05050707 	.word	0x05050707
    91e0:	05050707 	.word	0x05050707
    91e4:	0707      	.short	0x0707
    91e6:	2008      	movs	r0, #8
    91e8:	bd70      	pop	{r4, r5, r6, pc}
    91ea:	68e8      	ldr	r0, [r5, #12]
    91ec:	f7fd fd48 	bl	6c80 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    91f0:	b138      	cbz	r0, 9202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    91f2:	68e8      	ldr	r0, [r5, #12]
    91f4:	78c5      	ldrb	r5, [r0, #3]
    91f6:	b145      	cbz	r5, 920a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    91f8:	2d01      	cmp	r5, #1
    91fa:	d006      	beq.n	920a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    91fc:	2d16      	cmp	r5, #22
    91fe:	d118      	bne.n	9232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9200:	e003      	b.n	920a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9206:	f000 bdd1 	b.w	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    920a:	6860      	ldr	r0, [r4, #4]
    920c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9210:	f005 faa3 	bl	e75a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9214:	b168      	cbz	r0, 9232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9216:	6861      	ldr	r1, [r4, #4]
    9218:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    921c:	281f      	cmp	r0, #31
    921e:	d008      	beq.n	9232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9220:	2820      	cmp	r0, #32
    9222:	d003      	beq.n	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9224:	2d16      	cmp	r5, #22
    9226:	d00c      	beq.n	9242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    9228:	2002      	movs	r0, #2
    922a:	bd70      	pop	{r4, r5, r6, pc}
    922c:	2027      	movs	r0, #39	; 0x27
    922e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9232:	2d26      	cmp	r5, #38	; 0x26
    9234:	d207      	bcs.n	9246 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9236:	480a      	ldr	r0, [pc, #40]	; (9260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9238:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    923c:	b118      	cbz	r0, 9246 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    923e:	4780      	blx	r0
    9240:	e003      	b.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9242:	2020      	movs	r0, #32
    9244:	bd70      	pop	{r4, r5, r6, pc}
    9246:	f000 fdb1 	bl	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    924a:	6861      	ldr	r1, [r4, #4]
    924c:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    9250:	1c52      	adds	r2, r2, #1
    9252:	f143 0300 	adc.w	r3, r3, #0
    9256:	e9c1 2300 	strd	r2, r3, [r1]
    925a:	bd70      	pop	{r4, r5, r6, pc}
    925c:	20000164 	.word	0x20000164
    9260:	2000017c 	.word	0x2000017c
    9264:	b570      	push	{r4, r5, r6, lr}
    9266:	4e23      	ldr	r6, [pc, #140]	; (92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9268:	78b0      	ldrb	r0, [r6, #2]
    926a:	0700      	lsls	r0, r0, #28
    926c:	d540      	bpl.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    926e:	f106 0410 	add.w	r4, r6, #16
    9272:	6860      	ldr	r0, [r4, #4]
    9274:	3078      	adds	r0, #120	; 0x78
    9276:	f006 fecc 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    927a:	b148      	cbz	r0, 9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    927c:	6860      	ldr	r0, [r4, #4]
    927e:	21fe      	movs	r1, #254	; 0xfe
    9280:	2500      	movs	r5, #0
    9282:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9286:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    928a:	2919      	cmp	r1, #25
    928c:	d10c      	bne.n	92a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    928e:	e004      	b.n	929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9290:	f240 71d3 	movw	r1, #2003	; 0x7d3
    9294:	2031      	movs	r0, #49	; 0x31
    9296:	f7fb fcb7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    929a:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    929e:	f7ff fd45 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    92a2:	6860      	ldr	r0, [r4, #4]
    92a4:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    92a8:	6860      	ldr	r0, [r4, #4]
    92aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    92ae:	291f      	cmp	r1, #31
    92b0:	d002      	beq.n	92b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    92b2:	2929      	cmp	r1, #41	; 0x29
    92b4:	d113      	bne.n	92de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    92b6:	e00b      	b.n	92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    92b8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    92bc:	f005 fa4d 	bl	e75a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    92c0:	b108      	cbz	r0, 92c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    92c2:	2027      	movs	r0, #39	; 0x27
    92c4:	e000      	b.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    92c6:	2020      	movs	r0, #32
    92c8:	6861      	ldr	r1, [r4, #4]
    92ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    92ce:	e006      	b.n	92de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    92d0:	2101      	movs	r1, #1
    92d2:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    92d6:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    92da:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    92de:	6860      	ldr	r0, [r4, #4]
    92e0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    92e4:	2908      	cmp	r1, #8
    92e6:	d103      	bne.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    92e8:	2102      	movs	r1, #2
    92ea:	7031      	strb	r1, [r6, #0]
    92ec:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    92f0:	bd70      	pop	{r4, r5, r6, pc}
    92f2:	0000      	.short	0x0000
    92f4:	20000164 	.word	0x20000164
    92f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    92fa:	4606      	mov	r6, r0
    92fc:	4668      	mov	r0, sp
    92fe:	f7fc faff 	bl	5900 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9302:	b310      	cbz	r0, 934a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9304:	2222      	movs	r2, #34	; 0x22
    9306:	2100      	movs	r1, #0
    9308:	9800      	ldr	r0, [sp, #0]
    930a:	f003 ff59 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    930e:	2103      	movs	r1, #3
    9310:	9800      	ldr	r0, [sp, #0]
    9312:	f005 fcc9 	bl	eca8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	7801      	ldrb	r1, [r0, #0]
    931a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    931e:	7001      	strb	r1, [r0, #0]
    9320:	4631      	mov	r1, r6
    9322:	f7fd fcbd 	bl	6ca0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9326:	4c62      	ldr	r4, [pc, #392]	; (94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9328:	f644 152f 	movw	r5, #18735	; 0x492f
    932c:	2e0e      	cmp	r6, #14
    932e:	d079      	beq.n	9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9330:	dc0e      	bgt.n	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9332:	f1a6 0602 	sub.w	r6, r6, #2
    9336:	2e0c      	cmp	r6, #12
    9338:	d21c      	bcs.n	9374 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    933a:	e8df f006 	tbb	[pc, r6]
    933e:	1b1e      	.short	0x1b1e
    9340:	23aeae52 	.word	0x23aeae52
    9344:	ae1b5f1b 	.word	0xae1b5f1b
    9348:	363c      	.short	0x363c
    934a:	f640 210a 	movw	r1, #2570	; 0xa0a
    934e:	e0aa      	b.n	94a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9350:	2e15      	cmp	r6, #21
    9352:	d068      	beq.n	9426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9354:	dc08      	bgt.n	9368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    9356:	2e11      	cmp	r6, #17
    9358:	d01a      	beq.n	9390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    935a:	2e12      	cmp	r6, #18
    935c:	d017      	beq.n	938e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    935e:	2e13      	cmp	r6, #19
    9360:	d015      	beq.n	938e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9362:	2e14      	cmp	r6, #20
    9364:	d106      	bne.n	9374 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9366:	e05e      	b.n	9426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9368:	2e16      	cmp	r6, #22
    936a:	d030      	beq.n	93ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    936c:	2e17      	cmp	r6, #23
    936e:	d075      	beq.n	945c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9370:	2eff      	cmp	r6, #255	; 0xff
    9372:	d072      	beq.n	945a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    9374:	f640 217b 	movw	r1, #2683	; 0xa7b
    9378:	e095      	b.n	94a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    937a:	6861      	ldr	r1, [r4, #4]
    937c:	9800      	ldr	r0, [sp, #0]
    937e:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    9382:	e016      	b.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    9384:	6860      	ldr	r0, [r4, #4]
    9386:	9900      	ldr	r1, [sp, #0]
    9388:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    938c:	7108      	strb	r0, [r1, #4]
    938e:	e084      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9390:	6860      	ldr	r0, [r4, #4]
    9392:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    9396:	9800      	ldr	r0, [sp, #0]
    9398:	f005 fc62 	bl	ec60 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    939c:	6860      	ldr	r0, [r4, #4]
    939e:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	f005 fc5e 	bl	ec64 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    93a8:	e077      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93aa:	6861      	ldr	r1, [r4, #4]
    93ac:	9800      	ldr	r0, [sp, #0]
    93ae:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    93b2:	7101      	strb	r1, [r0, #4]
    93b4:	e071      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93b6:	9800      	ldr	r0, [sp, #0]
    93b8:	210c      	movs	r1, #12
    93ba:	7101      	strb	r1, [r0, #4]
    93bc:	2159      	movs	r1, #89	; 0x59
    93be:	7141      	strb	r1, [r0, #5]
    93c0:	2100      	movs	r1, #0
    93c2:	7181      	strb	r1, [r0, #6]
    93c4:	21d8      	movs	r1, #216	; 0xd8
    93c6:	71c1      	strb	r1, [r0, #7]
    93c8:	2111      	movs	r1, #17
    93ca:	7201      	strb	r1, [r0, #8]
    93cc:	e065      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93ce:	9800      	ldr	r0, [sp, #0]
    93d0:	f8d4 1004 	ldr.w	r1, [r4, #4]
    93d4:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    93d8:	7102      	strb	r2, [r0, #4]
    93da:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    93de:	7141      	strb	r1, [r0, #5]
    93e0:	e05b      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93e2:	6861      	ldr	r1, [r4, #4]
    93e4:	9800      	ldr	r0, [sp, #0]
    93e6:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    93ea:	f005 fc4e 	bl	ec8a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    93ee:	6861      	ldr	r1, [r4, #4]
    93f0:	9800      	ldr	r0, [sp, #0]
    93f2:	f501 7182 	add.w	r1, r1, #260	; 0x104
    93f6:	f005 fc45 	bl	ec84 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    93fa:	e04e      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    93fc:	f001 ff54 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9400:	4028      	ands	r0, r5
    9402:	f001 0106 	and.w	r1, r1, #6
    9406:	e9cd 0101 	strd	r0, r1, [sp, #4]
    940a:	6861      	ldr	r1, [r4, #4]
    940c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9410:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9414:	4008      	ands	r0, r1
    9416:	f88d 0004 	strb.w	r0, [sp, #4]
    941a:	a901      	add	r1, sp, #4
    941c:	9800      	ldr	r0, [sp, #0]
    941e:	f005 fc3e 	bl	ec9e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9422:	e03a      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9424:	e025      	b.n	9472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9426:	6860      	ldr	r0, [r4, #4]
    9428:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    942c:	9800      	ldr	r0, [sp, #0]
    942e:	f005 fc43 	bl	ecb8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9432:	6860      	ldr	r0, [r4, #4]
    9434:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9438:	9800      	ldr	r0, [sp, #0]
    943a:	f005 fc41 	bl	ecc0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    943e:	6860      	ldr	r0, [r4, #4]
    9440:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9444:	9800      	ldr	r0, [sp, #0]
    9446:	f005 fc3f 	bl	ecc8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    944a:	6860      	ldr	r0, [r4, #4]
    944c:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9450:	9800      	ldr	r0, [sp, #0]
    9452:	f005 fc3d 	bl	ecd0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9456:	e020      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9458:	e000      	b.n	945c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    945a:	e016      	b.n	948a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    945c:	6861      	ldr	r1, [r4, #4]
    945e:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9462:	2801      	cmp	r0, #1
    9464:	9800      	ldr	r0, [sp, #0]
    9466:	d0b5      	beq.n	93d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    9468:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    946c:	7102      	strb	r2, [r0, #4]
    946e:	7849      	ldrb	r1, [r1, #1]
    9470:	e7b5      	b.n	93de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    9472:	f001 ff19 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9476:	4028      	ands	r0, r5
    9478:	f001 0106 	and.w	r1, r1, #6
    947c:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9480:	a901      	add	r1, sp, #4
    9482:	9800      	ldr	r0, [sp, #0]
    9484:	f005 fc06 	bl	ec94 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9488:	e007      	b.n	949a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    948a:	6860      	ldr	r0, [r4, #4]
    948c:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    9490:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    9494:	9800      	ldr	r0, [sp, #0]
    9496:	f005 fbe7 	bl	ec68 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    949a:	f7fc fa0b 	bl	58b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    949e:	2800      	cmp	r0, #0
    94a0:	d104      	bne.n	94ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    94a2:	f640 217f 	movw	r1, #2687	; 0xa7f
    94a6:	2031      	movs	r0, #49	; 0x31
    94a8:	f7fb fbae 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    94ae:	0000      	.short	0x0000
    94b0:	20000174 	.word	0x20000174
    94b4:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94b8:	4e8d      	ldr	r6, [pc, #564]	; (96f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    94ba:	468a      	mov	sl, r1
    94bc:	6870      	ldr	r0, [r6, #4]
    94be:	8800      	ldrh	r0, [r0, #0]
    94c0:	f7fb ffe0 	bl	5484 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    94c4:	0007      	movs	r7, r0
    94c6:	d00c      	beq.n	94e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    94c8:	f1a6 0510 	sub.w	r5, r6, #16
    94cc:	f04f 0400 	mov.w	r4, #0
    94d0:	8868      	ldrh	r0, [r5, #2]
    94d2:	05c0      	lsls	r0, r0, #23
    94d4:	d50a      	bpl.n	94ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    94d6:	6870      	ldr	r0, [r6, #4]
    94d8:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    94dc:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    94e0:	e009      	b.n	94f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    94e2:	f640 515c 	movw	r1, #3420	; 0xd5c
    94e6:	2031      	movs	r0, #49	; 0x31
    94e8:	f7fb fb8e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94ec:	6871      	ldr	r1, [r6, #4]
    94ee:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    94f2:	1c40      	adds	r0, r0, #1
    94f4:	8008      	strh	r0, [r1, #0]
    94f6:	f001 f9df 	bl	a8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    94fa:	f04f 0901 	mov.w	r9, #1
    94fe:	b348      	cbz	r0, 9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9500:	8868      	ldrh	r0, [r5, #2]
    9502:	0500      	lsls	r0, r0, #20
    9504:	d506      	bpl.n	9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9506:	6870      	ldr	r0, [r6, #4]
    9508:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    950c:	b111      	cbz	r1, 9514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    950e:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9512:	e01f      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9514:	6871      	ldr	r1, [r6, #4]
    9516:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    951a:	1c40      	adds	r0, r0, #1
    951c:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9520:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9524:	4282      	cmp	r2, r0
    9526:	d301      	bcc.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9528:	1a13      	subs	r3, r2, r0
    952a:	e000      	b.n	952e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    952c:	2300      	movs	r3, #0
    952e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9532:	f10c 0c05 	add.w	ip, ip, #5
    9536:	4563      	cmp	r3, ip
    9538:	d801      	bhi.n	953e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    953a:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    953e:	4290      	cmp	r0, r2
    9540:	d308      	bcc.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9542:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    9546:	220c      	movs	r2, #12
    9548:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    954c:	f7fd fc62 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9550:	f7fd fd32 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9554:	8868      	ldrh	r0, [r5, #2]
    9556:	f04f 0b02 	mov.w	fp, #2
    955a:	f410 7f40 	tst.w	r0, #768	; 0x300
    955e:	d00e      	beq.n	957e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9560:	6870      	ldr	r0, [r6, #4]
    9562:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9566:	b111      	cbz	r1, 956e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    9568:	2903      	cmp	r1, #3
    956a:	d108      	bne.n	957e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    956c:	e002      	b.n	9574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    956e:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    9572:	e001      	b.n	9578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    9574:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9578:	2101      	movs	r1, #1
    957a:	f7fe fea7 	bl	82cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    957e:	6870      	ldr	r0, [r6, #4]
    9580:	46b0      	mov	r8, r6
    9582:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9586:	2901      	cmp	r1, #1
    9588:	d104      	bne.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    958a:	8869      	ldrh	r1, [r5, #2]
    958c:	0549      	lsls	r1, r1, #21
    958e:	d501      	bpl.n	9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9590:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9594:	9900      	ldr	r1, [sp, #0]
    9596:	2900      	cmp	r1, #0
    9598:	d179      	bne.n	968e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    959a:	78a9      	ldrb	r1, [r5, #2]
    959c:	0649      	lsls	r1, r1, #25
    959e:	d502      	bpl.n	95a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    95a0:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    95a4:	e004      	b.n	95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    95a6:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    95aa:	1c49      	adds	r1, r1, #1
    95ac:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    95b0:	4650      	mov	r0, sl
    95b2:	f7ff fdad 	bl	9110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    95b6:	ea40 000a 	orr.w	r0, r0, sl
    95ba:	4682      	mov	sl, r0
    95bc:	f7ff fd28 	bl	9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    95c0:	f8d8 6004 	ldr.w	r6, [r8, #4]
    95c4:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    95c8:	1c40      	adds	r0, r0, #1
    95ca:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    95ce:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    95d2:	b128      	cbz	r0, 95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    95d4:	f7fc fb76 	bl	5cc4 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    95d8:	b1b0      	cbz	r0, 9608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    95da:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    95de:	e013      	b.n	9608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    95e0:	f7fc fa10 	bl	5a04 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    95e4:	b108      	cbz	r0, 95ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    95e6:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    95ea:	f7fc fa05 	bl	59f8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    95ee:	b158      	cbz	r0, 9608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    95f0:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    95f4:	1c40      	adds	r0, r0, #1
    95f6:	b2c0      	uxtb	r0, r0
    95f8:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    95fc:	2802      	cmp	r0, #2
    95fe:	d903      	bls.n	9608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9600:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9604:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9608:	f8d8 0004 	ldr.w	r0, [r8, #4]
    960c:	4646      	mov	r6, r8
    960e:	2301      	movs	r3, #1
    9610:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9614:	2100      	movs	r1, #0
    9616:	3078      	adds	r0, #120	; 0x78
    9618:	f005 f851 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    961c:	b920      	cbnz	r0, 9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    961e:	6870      	ldr	r0, [r6, #4]
    9620:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9624:	280c      	cmp	r0, #12
    9626:	d160      	bne.n	96ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9628:	6870      	ldr	r0, [r6, #4]
    962a:	2301      	movs	r3, #1
    962c:	2100      	movs	r1, #0
    962e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9632:	3078      	adds	r0, #120	; 0x78
    9634:	f005 f843 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9638:	b350      	cbz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    963a:	6870      	ldr	r0, [r6, #4]
    963c:	2301      	movs	r3, #1
    963e:	2100      	movs	r1, #0
    9640:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9644:	3078      	adds	r0, #120	; 0x78
    9646:	f005 f83a 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    964a:	b308      	cbz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    964c:	6870      	ldr	r0, [r6, #4]
    964e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9652:	2902      	cmp	r1, #2
    9654:	d149      	bne.n	96ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9656:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    965a:	b9c8      	cbnz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    965c:	4638      	mov	r0, r7
    965e:	f004 fab8 	bl	dbd2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9662:	b1a8      	cbz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9664:	6870      	ldr	r0, [r6, #4]
    9666:	3078      	adds	r0, #120	; 0x78
    9668:	f006 fcd3 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    966c:	b980      	cbnz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    966e:	6871      	ldr	r1, [r6, #4]
    9670:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    9674:	2801      	cmp	r0, #1
    9676:	d938      	bls.n	96ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9678:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    967c:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    9680:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    9684:	1e83      	subs	r3, r0, #2
    9686:	429a      	cmp	r2, r3
    9688:	db03      	blt.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    968a:	2001      	movs	r0, #1
    968c:	e004      	b.n	9698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    968e:	e01d      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9690:	e02b      	b.n	96ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9692:	1a80      	subs	r0, r0, r2
    9694:	1e40      	subs	r0, r0, #1
    9696:	b280      	uxth	r0, r0
    9698:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    969c:	88ab      	ldrh	r3, [r5, #4]
    969e:	429a      	cmp	r2, r3
    96a0:	d301      	bcc.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    96a2:	2201      	movs	r2, #1
    96a4:	e002      	b.n	96ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    96a6:	1a9a      	subs	r2, r3, r2
    96a8:	1c52      	adds	r2, r2, #1
    96aa:	b292      	uxth	r2, r2
    96ac:	4290      	cmp	r0, r2
    96ae:	d900      	bls.n	96b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    96b0:	4610      	mov	r0, r2
    96b2:	2801      	cmp	r0, #1
    96b4:	d102      	bne.n	96bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    96b6:	bf00      	nop
    96b8:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    96bc:	6871      	ldr	r1, [r6, #4]
    96be:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    96c2:	4410      	add	r0, r2
    96c4:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    96c8:	f001 f9ca 	bl	aa60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    96cc:	78a8      	ldrb	r0, [r5, #2]
    96ce:	4652      	mov	r2, sl
    96d0:	f3c0 1180 	ubfx	r1, r0, #6, #1
    96d4:	9800      	ldr	r0, [sp, #0]
    96d6:	f001 f903 	bl	a8e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    96da:	f8d8 0004 	ldr.w	r0, [r8, #4]
    96de:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    96e2:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    96e6:	f7fc b8cf 	b.w	5888 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    96ea:	2001      	movs	r0, #1
    96ec:	6871      	ldr	r1, [r6, #4]
    96ee:	e7e3      	b.n	96b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    96f0:	20000174 	.word	0x20000174
    96f4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    96f6:	4c58      	ldr	r4, [pc, #352]	; (9858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    96f8:	2301      	movs	r3, #1
    96fa:	2100      	movs	r1, #0
    96fc:	6860      	ldr	r0, [r4, #4]
    96fe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9702:	3078      	adds	r0, #120	; 0x78
    9704:	f004 ffdb 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9708:	2800      	cmp	r0, #0
    970a:	d07c      	beq.n	9806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    970c:	6860      	ldr	r0, [r4, #4]
    970e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9712:	2500      	movs	r5, #0
    9714:	b139      	cbz	r1, 9726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    9716:	2100      	movs	r1, #0
    9718:	200e      	movs	r0, #14
    971a:	f000 f89f 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    971e:	6860      	ldr	r0, [r4, #4]
    9720:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9724:	e096      	b.n	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9726:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    972a:	b119      	cbz	r1, 9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    972c:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9730:	0789      	lsls	r1, r1, #30
    9732:	d016      	beq.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9734:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9738:	f88d 1004 	strb.w	r1, [sp, #4]
    973c:	9901      	ldr	r1, [sp, #4]
    973e:	9101      	str	r1, [sp, #4]
    9740:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9744:	b141      	cbz	r1, 9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    9746:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    974a:	f88d 1000 	strb.w	r1, [sp]
    974e:	9900      	ldr	r1, [sp, #0]
    9750:	9100      	str	r1, [sp, #0]
    9752:	f89d 1000 	ldrb.w	r1, [sp]
    9756:	b189      	cbz	r1, 977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    9758:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    975c:	2901      	cmp	r1, #1
    975e:	d030      	beq.n	97c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    9760:	e072      	b.n	9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9762:	2100      	movs	r1, #0
    9764:	200c      	movs	r0, #12
    9766:	f000 f879 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    976a:	6860      	ldr	r0, [r4, #4]
    976c:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9770:	f041 0101 	orr.w	r1, r1, #1
    9774:	7001      	strb	r1, [r0, #0]
    9776:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    977a:	e06b      	b.n	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    977c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9780:	2924      	cmp	r1, #36	; 0x24
    9782:	d01c      	beq.n	97be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9784:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9788:	2924      	cmp	r1, #36	; 0x24
    978a:	d018      	beq.n	97be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    978c:	f05f 0300 	movs.w	r3, #0
    9790:	f200 2276 	addw	r2, r0, #630	; 0x276
    9794:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    9798:	f005 fc50 	bl	f03c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    979c:	6860      	ldr	r0, [r4, #4]
    979e:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    97a2:	2100      	movs	r1, #0
    97a4:	2014      	movs	r0, #20
    97a6:	f000 f859 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    97aa:	6861      	ldr	r1, [r4, #4]
    97ac:	f101 0030 	add.w	r0, r1, #48	; 0x30
    97b0:	8bc2      	ldrh	r2, [r0, #30]
    97b2:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    97b6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    97b8:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    97bc:	e04a      	b.n	9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    97be:	2301      	movs	r3, #1
    97c0:	e7e6      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    97c2:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    97c6:	f88d 1000 	strb.w	r1, [sp]
    97ca:	9900      	ldr	r1, [sp, #0]
    97cc:	9100      	str	r1, [sp, #0]
    97ce:	f89d 1000 	ldrb.w	r1, [sp]
    97d2:	bb31      	cbnz	r1, 9822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    97d4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    97d8:	2301      	movs	r3, #1
    97da:	210b      	movs	r1, #11
    97dc:	3078      	adds	r0, #120	; 0x78
    97de:	f004 ff6e 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97e2:	b9f0      	cbnz	r0, 9822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    97e4:	6860      	ldr	r0, [r4, #4]
    97e6:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    97ea:	f006 fc1a 	bl	10022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    97ee:	4605      	mov	r5, r0
    97f0:	6860      	ldr	r0, [r4, #4]
    97f2:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    97f6:	f006 fc14 	bl	10022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    97fa:	4606      	mov	r6, r0
    97fc:	6860      	ldr	r0, [r4, #4]
    97fe:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9802:	4628      	mov	r0, r5
    9804:	e000      	b.n	9808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    9806:	e020      	b.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9808:	f006 fc16 	bl	10038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    980c:	b150      	cbz	r0, 9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    980e:	6860      	ldr	r0, [r4, #4]
    9810:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9814:	4630      	mov	r0, r6
    9816:	f006 fc0f 	bl	10038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    981a:	b118      	cbz	r0, 9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    981c:	2000      	movs	r0, #0
    981e:	f000 f929 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9822:	e011      	b.n	9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9824:	6860      	ldr	r0, [r4, #4]
    9826:	2301      	movs	r3, #1
    9828:	2103      	movs	r1, #3
    982a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    982e:	3078      	adds	r0, #120	; 0x78
    9830:	f004 ff45 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9834:	b940      	cbnz	r0, 9848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9836:	6860      	ldr	r0, [r4, #4]
    9838:	2301      	movs	r3, #1
    983a:	2102      	movs	r1, #2
    983c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9840:	3078      	adds	r0, #120	; 0x78
    9842:	f004 ff3c 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9846:	b108      	cbz	r0, 984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    9848:	2000      	movs	r0, #0
    984a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    984c:	2100      	movs	r1, #0
    984e:	2016      	movs	r0, #22
    9850:	f000 f804 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9854:	2001      	movs	r0, #1
    9856:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9858:	20000174 	.word	0x20000174
    985c:	b570      	push	{r4, r5, r6, lr}
    985e:	4c0d      	ldr	r4, [pc, #52]	; (9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    9860:	4606      	mov	r6, r0
    9862:	460d      	mov	r5, r1
    9864:	6860      	ldr	r0, [r4, #4]
    9866:	3078      	adds	r0, #120	; 0x78
    9868:	f006 fbd3 	bl	10012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    986c:	b120      	cbz	r0, 9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    986e:	f640 2184 	movw	r1, #2692	; 0xa84
    9872:	2031      	movs	r0, #49	; 0x31
    9874:	f7fb f9c8 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9878:	6862      	ldr	r2, [r4, #4]
    987a:	2000      	movs	r0, #0
    987c:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    9880:	b115      	cbz	r5, 9888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9882:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    9886:	bd70      	pop	{r4, r5, r6, pc}
    9888:	f822 0fba 	strh.w	r0, [r2, #186]!
    988c:	2001      	movs	r0, #1
    988e:	7110      	strb	r0, [r2, #4]
    9890:	bd70      	pop	{r4, r5, r6, pc}
    9892:	0000      	.short	0x0000
    9894:	20000174 	.word	0x20000174
    9898:	b538      	push	{r3, r4, r5, lr}
    989a:	4c1f      	ldr	r4, [pc, #124]	; (9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    989c:	2500      	movs	r5, #0
    989e:	6860      	ldr	r0, [r4, #4]
    98a0:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    98a4:	2901      	cmp	r1, #1
    98a6:	d00a      	beq.n	98be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    98a8:	2902      	cmp	r1, #2
    98aa:	d133      	bne.n	9914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    98ac:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    98b0:	b1d9      	cbz	r1, 98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    98b2:	2106      	movs	r1, #6
    98b4:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    98b8:	2101      	movs	r1, #1
    98ba:	2002      	movs	r0, #2
    98bc:	e025      	b.n	990a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    98be:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    98c2:	f88d 1000 	strb.w	r1, [sp]
    98c6:	9900      	ldr	r1, [sp, #0]
    98c8:	9100      	str	r1, [sp, #0]
    98ca:	f89d 1000 	ldrb.w	r1, [sp]
    98ce:	2900      	cmp	r1, #0
    98d0:	d120      	bne.n	9914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    98d2:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    98d6:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    98da:	2200      	movs	r2, #0
    98dc:	f200 2059 	addw	r0, r0, #601	; 0x259
    98e0:	f004 fea5 	bl	e62e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    98e4:	2101      	movs	r1, #1
    98e6:	2005      	movs	r0, #5
    98e8:	e00f      	b.n	990a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    98ea:	2203      	movs	r2, #3
    98ec:	2106      	movs	r1, #6
    98ee:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    98f2:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    98f6:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    98fa:	0880      	lsrs	r0, r0, #2
    98fc:	f010 0f01 	tst.w	r0, #1
    9900:	d001      	beq.n	9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    9902:	2011      	movs	r0, #17
    9904:	e000      	b.n	9908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9906:	200d      	movs	r0, #13
    9908:	2101      	movs	r1, #1
    990a:	f7ff ffa7 	bl	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    990e:	6860      	ldr	r0, [r4, #4]
    9910:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    9914:	bd38      	pop	{r3, r4, r5, pc}
    9916:	0000      	.short	0x0000
    9918:	20000174 	.word	0x20000174
    991c:	b570      	push	{r4, r5, r6, lr}
    991e:	4b2b      	ldr	r3, [pc, #172]	; (99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    9920:	4602      	mov	r2, r0
    9922:	8858      	ldrh	r0, [r3, #2]
    9924:	4310      	orrs	r0, r2
    9926:	8058      	strh	r0, [r3, #2]
    9928:	f103 0010 	add.w	r0, r3, #16
    992c:	2a40      	cmp	r2, #64	; 0x40
    992e:	6840      	ldr	r0, [r0, #4]
    9930:	d00d      	beq.n	994e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    9932:	0796      	lsls	r6, r2, #30
    9934:	f04f 0500 	mov.w	r5, #0
    9938:	f04f 0401 	mov.w	r4, #1
    993c:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    9940:	d50c      	bpl.n	995c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    9942:	b14e      	cbz	r6, 9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    9944:	f640 41c9 	movw	r1, #3273	; 0xcc9
    9948:	2031      	movs	r0, #49	; 0x31
    994a:	f7fb f95d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    994e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9952:	2104      	movs	r1, #4
    9954:	f7fe bcba 	b.w	82cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9958:	6099      	str	r1, [r3, #8]
    995a:	e01c      	b.n	9996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    995c:	b1c6      	cbz	r6, 9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    995e:	60d9      	str	r1, [r3, #12]
    9960:	78c9      	ldrb	r1, [r1, #3]
    9962:	2906      	cmp	r1, #6
    9964:	d002      	beq.n	996c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9966:	290b      	cmp	r1, #11
    9968:	d112      	bne.n	9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    996a:	e009      	b.n	9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    996c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9970:	2917      	cmp	r1, #23
    9972:	d10d      	bne.n	9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    9974:	2100      	movs	r1, #0
    9976:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    997a:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    997e:	e007      	b.n	9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    9980:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9984:	2911      	cmp	r1, #17
    9986:	d103      	bne.n	9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    9988:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    998c:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    9990:	0791      	lsls	r1, r2, #30
    9992:	d516      	bpl.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    9994:	6899      	ldr	r1, [r3, #8]
    9996:	78c9      	ldrb	r1, [r1, #3]
    9998:	2905      	cmp	r1, #5
    999a:	d002      	beq.n	99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    999c:	290b      	cmp	r1, #11
    999e:	d110      	bne.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    99a0:	e009      	b.n	99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    99a2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    99a6:	2915      	cmp	r1, #21
    99a8:	d10b      	bne.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    99aa:	2100      	movs	r1, #0
    99ac:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    99b0:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    99b4:	e005      	b.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    99b6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    99ba:	2910      	cmp	r1, #16
    99bc:	d101      	bne.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    99be:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    99c2:	0690      	lsls	r0, r2, #26
    99c4:	d501      	bpl.n	99ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    99c6:	2008      	movs	r0, #8
    99c8:	7058      	strb	r0, [r3, #1]
    99ca:	bd70      	pop	{r4, r5, r6, pc}
    99cc:	20000164 	.word	0x20000164
    99d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99d4:	4c26      	ldr	r4, [pc, #152]	; (9a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    99d6:	2501      	movs	r5, #1
    99d8:	6862      	ldr	r2, [r4, #4]
    99da:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    99de:	b108      	cbz	r0, 99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    99e0:	2701      	movs	r7, #1
    99e2:	e000      	b.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    99e4:	2700      	movs	r7, #0
    99e6:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    99ea:	b109      	cbz	r1, 99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    99ec:	2601      	movs	r6, #1
    99ee:	e000      	b.n	99f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    99f0:	2600      	movs	r6, #0
    99f2:	b90f      	cbnz	r7, 99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    99f4:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    99f8:	b90e      	cbnz	r6, 99fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    99fa:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    99fe:	f102 0366 	add.w	r3, r2, #102	; 0x66
    9a02:	7218      	strb	r0, [r3, #8]
    9a04:	7259      	strb	r1, [r3, #9]
    9a06:	20ff      	movs	r0, #255	; 0xff
    9a08:	7298      	strb	r0, [r3, #10]
    9a0a:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    9a0e:	2801      	cmp	r0, #1
    9a10:	d001      	beq.n	9a16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9a12:	b907      	cbnz	r7, 9a16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9a14:	b116      	cbz	r6, 9a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    9a16:	2000      	movs	r0, #0
    9a18:	f000 f82c 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9a1c:	6860      	ldr	r0, [r4, #4]
    9a1e:	3030      	adds	r0, #48	; 0x30
    9a20:	f005 fb7d 	bl	f11e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9a24:	4607      	mov	r7, r0
    9a26:	2105      	movs	r1, #5
    9a28:	6860      	ldr	r0, [r4, #4]
    9a2a:	f7fe fc4f 	bl	82cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9a2e:	6860      	ldr	r0, [r4, #4]
    9a30:	3030      	adds	r0, #48	; 0x30
    9a32:	f005 fb74 	bl	f11e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9a36:	4606      	mov	r6, r0
    9a38:	42b7      	cmp	r7, r6
    9a3a:	d20a      	bcs.n	9a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    9a3c:	f7f8 fc3c 	bl	22b8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9a40:	4601      	mov	r1, r0
    9a42:	1bf0      	subs	r0, r6, r7
    9a44:	2865      	cmp	r0, #101	; 0x65
    9a46:	d200      	bcs.n	9a4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    9a48:	2065      	movs	r0, #101	; 0x65
    9a4a:	f7f8 fb57 	bl	20fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9a4e:	b100      	cbz	r0, 9a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    9a50:	2500      	movs	r5, #0
    9a52:	6860      	ldr	r0, [r4, #4]
    9a54:	f005 fb0d 	bl	f072 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9a58:	b138      	cbz	r0, 9a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    9a5a:	6863      	ldr	r3, [r4, #4]
    9a5c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    9a60:	8818      	ldrh	r0, [r3, #0]
    9a62:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9a66:	f005 fac1 	bl	efec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9a6a:	4628      	mov	r0, r5
    9a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a70:	20000174 	.word	0x20000174
    9a74:	b510      	push	{r4, lr}
    9a76:	4c11      	ldr	r4, [pc, #68]	; (9abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    9a78:	6861      	ldr	r1, [r4, #4]
    9a7a:	880a      	ldrh	r2, [r1, #0]
    9a7c:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    9a80:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    9a84:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    9a88:	f006 facb 	bl	10022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9a8c:	6861      	ldr	r1, [r4, #4]
    9a8e:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    9a92:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    9a96:	f006 fac4 	bl	10022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9a9a:	6861      	ldr	r1, [r4, #4]
    9a9c:	2211      	movs	r2, #17
    9a9e:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    9aa2:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    9aa6:	f7fd f9b5 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9aaa:	6861      	ldr	r1, [r4, #4]
    9aac:	2000      	movs	r0, #0
    9aae:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    9ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ab6:	f7fd ba7f 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9aba:	0000      	.short	0x0000
    9abc:	20000174 	.word	0x20000174
    9ac0:	b570      	push	{r4, r5, r6, lr}
    9ac2:	4d0f      	ldr	r5, [pc, #60]	; (9b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    9ac4:	686c      	ldr	r4, [r5, #4]
    9ac6:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9aca:	2920      	cmp	r1, #32
    9acc:	d002      	beq.n	9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9ace:	2927      	cmp	r1, #39	; 0x27
    9ad0:	d003      	beq.n	9ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    9ad2:	e011      	b.n	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    9ad4:	f7ff ffce 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9ad8:	e008      	b.n	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9ada:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    9ade:	f104 0078 	add.w	r0, r4, #120	; 0x78
    9ae2:	2301      	movs	r3, #1
    9ae4:	210b      	movs	r1, #11
    9ae6:	f004 fdea 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aea:	b138      	cbz	r0, 9afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9aec:	6869      	ldr	r1, [r5, #4]
    9aee:	2000      	movs	r0, #0
    9af0:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9af4:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9af8:	2000      	movs	r0, #0
    9afa:	bd70      	pop	{r4, r5, r6, pc}
    9afc:	202a      	movs	r0, #42	; 0x2a
    9afe:	e7e9      	b.n	9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9b00:	20000174 	.word	0x20000174
    9b04:	b570      	push	{r4, r5, r6, lr}
    9b06:	4c17      	ldr	r4, [pc, #92]	; (9b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    9b08:	2301      	movs	r3, #1
    9b0a:	2100      	movs	r1, #0
    9b0c:	6860      	ldr	r0, [r4, #4]
    9b0e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b12:	3078      	adds	r0, #120	; 0x78
    9b14:	f004 fdd3 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b18:	b1b0      	cbz	r0, 9b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    9b1a:	f1a4 0510 	sub.w	r5, r4, #16
    9b1e:	68e8      	ldr	r0, [r5, #12]
    9b20:	f005 f826 	bl	eb70 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9b24:	6861      	ldr	r1, [r4, #4]
    9b26:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    9b2a:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9b2e:	f006 fa91 	bl	10054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9b32:	b158      	cbz	r0, 9b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    9b34:	6861      	ldr	r1, [r4, #4]
    9b36:	2028      	movs	r0, #40	; 0x28
    9b38:	2208      	movs	r2, #8
    9b3a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9b3e:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9b42:	f7fd f967 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b46:	e00b      	b.n	9b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    9b48:	2001      	movs	r0, #1
    9b4a:	bd70      	pop	{r4, r5, r6, pc}
    9b4c:	6861      	ldr	r1, [r4, #4]
    9b4e:	68e8      	ldr	r0, [r5, #12]
    9b50:	f201 2176 	addw	r1, r1, #630	; 0x276
    9b54:	f005 f807 	bl	eb66 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9b58:	6861      	ldr	r1, [r4, #4]
    9b5a:	200b      	movs	r0, #11
    9b5c:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9b60:	2000      	movs	r0, #0
    9b62:	bd70      	pop	{r4, r5, r6, pc}
    9b64:	20000174 	.word	0x20000174
    9b68:	b570      	push	{r4, r5, r6, lr}
    9b6a:	4d2b      	ldr	r5, [pc, #172]	; (9c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    9b6c:	2301      	movs	r3, #1
    9b6e:	2100      	movs	r1, #0
    9b70:	6868      	ldr	r0, [r5, #4]
    9b72:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b76:	3078      	adds	r0, #120	; 0x78
    9b78:	f004 fda1 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b7c:	b1d8      	cbz	r0, 9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    9b7e:	f1a5 0410 	sub.w	r4, r5, #16
    9b82:	2100      	movs	r1, #0
    9b84:	68e0      	ldr	r0, [r4, #12]
    9b86:	f004 ffc6 	bl	eb16 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9b8a:	b1b0      	cbz	r0, 9bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    9b8c:	68e0      	ldr	r0, [r4, #12]
    9b8e:	6869      	ldr	r1, [r5, #4]
    9b90:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9b94:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    9b98:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9b9c:	f006 fa5a 	bl	10054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9ba0:	b178      	cbz	r0, 9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    9ba2:	6869      	ldr	r1, [r5, #4]
    9ba4:	2028      	movs	r0, #40	; 0x28
    9ba6:	2208      	movs	r2, #8
    9ba8:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9bac:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9bb0:	f7fd f930 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9bb4:	e02e      	b.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    9bb6:	2001      	movs	r0, #1
    9bb8:	bd70      	pop	{r4, r5, r6, pc}
    9bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9bbe:	f000 b8f5 	b.w	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9bc2:	68e0      	ldr	r0, [r4, #12]
    9bc4:	f004 ffd7 	bl	eb76 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9bc8:	f004 fd5c 	bl	e684 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9bcc:	4606      	mov	r6, r0
    9bce:	6868      	ldr	r0, [r5, #4]
    9bd0:	4631      	mov	r1, r6
    9bd2:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    9bd6:	68e0      	ldr	r0, [r4, #12]
    9bd8:	7900      	ldrb	r0, [r0, #4]
    9bda:	f004 feec 	bl	e9b6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9bde:	6869      	ldr	r1, [r5, #4]
    9be0:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    9be4:	68e0      	ldr	r0, [r4, #12]
    9be6:	4631      	mov	r1, r6
    9be8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9bec:	f004 fedf 	bl	e9ae <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9bf0:	6869      	ldr	r1, [r5, #4]
    9bf2:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    9bf6:	68e0      	ldr	r0, [r4, #12]
    9bf8:	f004 ffc0 	bl	eb7c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9bfc:	6869      	ldr	r1, [r5, #4]
    9bfe:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    9c02:	68e0      	ldr	r0, [r4, #12]
    9c04:	f004 ffbd 	bl	eb82 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9c08:	6869      	ldr	r1, [r5, #4]
    9c0a:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    9c0e:	200d      	movs	r0, #13
    9c10:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9c14:	2000      	movs	r0, #0
    9c16:	bd70      	pop	{r4, r5, r6, pc}
    9c18:	20000174 	.word	0x20000174
    9c1c:	b538      	push	{r3, r4, r5, lr}
    9c1e:	4c2c      	ldr	r4, [pc, #176]	; (9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9c20:	2301      	movs	r3, #1
    9c22:	2100      	movs	r1, #0
    9c24:	6860      	ldr	r0, [r4, #4]
    9c26:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c2a:	3078      	adds	r0, #120	; 0x78
    9c2c:	f004 fd47 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c30:	b970      	cbnz	r0, 9c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9c32:	6860      	ldr	r0, [r4, #4]
    9c34:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c38:	2a12      	cmp	r2, #18
    9c3a:	d009      	beq.n	9c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9c3c:	2301      	movs	r3, #1
    9c3e:	2105      	movs	r1, #5
    9c40:	3078      	adds	r0, #120	; 0x78
    9c42:	f004 fd3c 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c46:	b108      	cbz	r0, 9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    9c48:	2008      	movs	r0, #8
    9c4a:	bd38      	pop	{r3, r4, r5, pc}
    9c4c:	2001      	movs	r0, #1
    9c4e:	bd38      	pop	{r3, r4, r5, pc}
    9c50:	6860      	ldr	r0, [r4, #4]
    9c52:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9c56:	b908      	cbnz	r0, 9c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    9c58:	f7ff f85c 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9c5c:	4d1c      	ldr	r5, [pc, #112]	; (9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9c5e:	6861      	ldr	r1, [r4, #4]
    9c60:	3d10      	subs	r5, #16
    9c62:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    9c66:	68e8      	ldr	r0, [r5, #12]
    9c68:	f004 ff9a 	bl	eba0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9c6c:	6861      	ldr	r1, [r4, #4]
    9c6e:	68e8      	ldr	r0, [r5, #12]
    9c70:	f501 7180 	add.w	r1, r1, #256	; 0x100
    9c74:	f004 ff8b 	bl	eb8e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9c78:	6861      	ldr	r1, [r4, #4]
    9c7a:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    9c7e:	f88d 0000 	strb.w	r0, [sp]
    9c82:	9800      	ldr	r0, [sp, #0]
    9c84:	9000      	str	r0, [sp, #0]
    9c86:	f89d 0000 	ldrb.w	r0, [sp]
    9c8a:	b120      	cbz	r0, 9c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    9c8c:	f240 21a2 	movw	r1, #674	; 0x2a2
    9c90:	2031      	movs	r0, #49	; 0x31
    9c92:	f7fa ffb9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c96:	8808      	ldrh	r0, [r1, #0]
    9c98:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    9c9c:	f501 7124 	add.w	r1, r1, #656	; 0x290
    9ca0:	68e8      	ldr	r0, [r5, #12]
    9ca2:	f004 ff78 	bl	eb96 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9ca6:	6861      	ldr	r1, [r4, #4]
    9ca8:	68e8      	ldr	r0, [r5, #12]
    9caa:	f501 7126 	add.w	r1, r1, #664	; 0x298
    9cae:	f004 ff6b 	bl	eb88 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9cb2:	6861      	ldr	r1, [r4, #4]
    9cb4:	2207      	movs	r2, #7
    9cb6:	f501 7021 	add.w	r0, r1, #644	; 0x284
    9cba:	f7fd f8ab 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cbe:	6861      	ldr	r1, [r4, #4]
    9cc0:	2014      	movs	r0, #20
    9cc2:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9cc6:	f7fd f977 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cca:	2000      	movs	r0, #0
    9ccc:	bd38      	pop	{r3, r4, r5, pc}
    9cce:	0000      	.short	0x0000
    9cd0:	20000174 	.word	0x20000174
    9cd4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9cd6:	4c13      	ldr	r4, [pc, #76]	; (9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9cd8:	6860      	ldr	r0, [r4, #4]
    9cda:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9cde:	07c0      	lsls	r0, r0, #31
    9ce0:	d001      	beq.n	9ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    9ce2:	2001      	movs	r0, #1
    9ce4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9ce6:	480f      	ldr	r0, [pc, #60]	; (9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9ce8:	4669      	mov	r1, sp
    9cea:	3810      	subs	r0, #16
    9cec:	68c0      	ldr	r0, [r0, #12]
    9cee:	f004 ff5d 	bl	ebac <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9cf2:	f001 fad9 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9cf6:	f644 122f 	movw	r2, #18735	; 0x492f
    9cfa:	4010      	ands	r0, r2
    9cfc:	e9dd 5200 	ldrd	r5, r2, [sp]
    9d00:	6863      	ldr	r3, [r4, #4]
    9d02:	4005      	ands	r5, r0
    9d04:	f001 0106 	and.w	r1, r1, #6
    9d08:	f843 5fd4 	str.w	r5, [r3, #212]!
    9d0c:	400a      	ands	r2, r1
    9d0e:	605a      	str	r2, [r3, #4]
    9d10:	f7ff f800 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9d14:	6860      	ldr	r0, [r4, #4]
    9d16:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9d1a:	f041 0101 	orr.w	r1, r1, #1
    9d1e:	7001      	strb	r1, [r0, #0]
    9d20:	2000      	movs	r0, #0
    9d22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d24:	20000174 	.word	0x20000174
    9d28:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9d2c:	4d1e      	ldr	r5, [pc, #120]	; (9da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    9d2e:	2301      	movs	r3, #1
    9d30:	2107      	movs	r1, #7
    9d32:	6868      	ldr	r0, [r5, #4]
    9d34:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d38:	3078      	adds	r0, #120	; 0x78
    9d3a:	f004 fcc0 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d3e:	b380      	cbz	r0, 9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    9d40:	f1a5 0010 	sub.w	r0, r5, #16
    9d44:	4669      	mov	r1, sp
    9d46:	68c0      	ldr	r0, [r0, #12]
    9d48:	f004 ff35 	bl	ebb6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9d4c:	686e      	ldr	r6, [r5, #4]
    9d4e:	f89d 7004 	ldrb.w	r7, [sp, #4]
    9d52:	36d4      	adds	r6, #212	; 0xd4
    9d54:	9c00      	ldr	r4, [sp, #0]
    9d56:	f001 faa7 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9d5a:	4004      	ands	r4, r0
    9d5c:	f644 102f 	movw	r0, #18735	; 0x492f
    9d60:	4004      	ands	r4, r0
    9d62:	400f      	ands	r7, r1
    9d64:	f007 0006 	and.w	r0, r7, #6
    9d68:	6034      	str	r4, [r6, #0]
    9d6a:	6070      	str	r0, [r6, #4]
    9d6c:	6869      	ldr	r1, [r5, #4]
    9d6e:	2000      	movs	r0, #0
    9d70:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9d74:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9d78:	880a      	ldrh	r2, [r1, #0]
    9d7a:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    9d7e:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    9d82:	9a00      	ldr	r2, [sp, #0]
    9d84:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    9d88:	9a01      	ldr	r2, [sp, #4]
    9d8a:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    9d8e:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    9d92:	2205      	movs	r2, #5
    9d94:	f7fd f83e 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9d98:	f7fd f90e 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d9c:	2000      	movs	r0, #0
    9d9e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9da2:	e7ff      	b.n	9da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    9da4:	2001      	movs	r0, #1
    9da6:	e7fa      	b.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    9da8:	20000174 	.word	0x20000174
    9dac:	480b      	ldr	r0, [pc, #44]	; (9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9dae:	b510      	push	{r4, lr}
    9db0:	6840      	ldr	r0, [r0, #4]
    9db2:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9db6:	070a      	lsls	r2, r1, #28
    9db8:	d501      	bpl.n	9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    9dba:	2001      	movs	r0, #1
    9dbc:	bd10      	pop	{r4, pc}
    9dbe:	f041 0108 	orr.w	r1, r1, #8
    9dc2:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    9dc6:	4905      	ldr	r1, [pc, #20]	; (9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9dc8:	3910      	subs	r1, #16
    9dca:	68c9      	ldr	r1, [r1, #12]
    9dcc:	78c9      	ldrb	r1, [r1, #3]
    9dce:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    9dd2:	f7fe ff9f 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9dd6:	2000      	movs	r0, #0
    9dd8:	bd10      	pop	{r4, pc}
    9dda:	0000      	.short	0x0000
    9ddc:	20000174 	.word	0x20000174
    9de0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9de4:	4d36      	ldr	r5, [pc, #216]	; (9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9de6:	6868      	ldr	r0, [r5, #4]
    9de8:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9dec:	f010 0f30 	tst.w	r0, #48	; 0x30
    9df0:	d002      	beq.n	9df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    9df2:	2001      	movs	r0, #1
    9df4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9df8:	4c31      	ldr	r4, [pc, #196]	; (9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9dfa:	3c10      	subs	r4, #16
    9dfc:	68e0      	ldr	r0, [r4, #12]
    9dfe:	f004 fef5 	bl	ebec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9e02:	b328      	cbz	r0, 9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    9e04:	68e0      	ldr	r0, [r4, #12]
    9e06:	f004 fee3 	bl	ebd0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9e0a:	4607      	mov	r7, r0
    9e0c:	68e0      	ldr	r0, [r4, #12]
    9e0e:	f004 fee3 	bl	ebd8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9e12:	4680      	mov	r8, r0
    9e14:	68e0      	ldr	r0, [r4, #12]
    9e16:	f004 fed9 	bl	ebcc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9e1a:	4606      	mov	r6, r0
    9e1c:	68e0      	ldr	r0, [r4, #12]
    9e1e:	f004 fed9 	bl	ebd4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9e22:	4601      	mov	r1, r0
    9e24:	9700      	str	r7, [sp, #0]
    9e26:	6868      	ldr	r0, [r5, #4]
    9e28:	4643      	mov	r3, r8
    9e2a:	4632      	mov	r2, r6
    9e2c:	3030      	adds	r0, #48	; 0x30
    9e2e:	f005 f9b0 	bl	f192 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9e32:	78a0      	ldrb	r0, [r4, #2]
    9e34:	0781      	lsls	r1, r0, #30
    9e36:	f04f 0001 	mov.w	r0, #1
    9e3a:	d503      	bpl.n	9e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    9e3c:	68a1      	ldr	r1, [r4, #8]
    9e3e:	78c9      	ldrb	r1, [r1, #3]
    9e40:	2914      	cmp	r1, #20
    9e42:	d009      	beq.n	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9e44:	6869      	ldr	r1, [r5, #4]
    9e46:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    9e4a:	291c      	cmp	r1, #28
    9e4c:	d004      	beq.n	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9e4e:	e006      	b.n	9e5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9e50:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9e54:	f7ff bfaa 	b.w	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9e58:	6869      	ldr	r1, [r5, #4]
    9e5a:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    9e5e:	686b      	ldr	r3, [r5, #4]
    9e60:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9e64:	2801      	cmp	r0, #1
    9e66:	d011      	beq.n	9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9e68:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    9e6c:	f88d 0004 	strb.w	r0, [sp, #4]
    9e70:	9801      	ldr	r0, [sp, #4]
    9e72:	9001      	str	r0, [sp, #4]
    9e74:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9e78:	b940      	cbnz	r0, 9e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9e7a:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    9e7e:	f88d 0000 	strb.w	r0, [sp]
    9e82:	9800      	ldr	r0, [sp, #0]
    9e84:	9000      	str	r0, [sp, #0]
    9e86:	f89d 0000 	ldrb.w	r0, [sp]
    9e8a:	b148      	cbz	r0, 9ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    9e8c:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    9e90:	f040 0010 	orr.w	r0, r0, #16
    9e94:	f883 0000 	strb.w	r0, [r3]
    9e98:	f7fe ff3c 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9e9c:	2000      	movs	r0, #0
    9e9e:	e7a9      	b.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    9ea0:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    9ea4:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    9ea8:	f040 0020 	orr.w	r0, r0, #32
    9eac:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    9eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9eb4:	8818      	ldrh	r0, [r3, #0]
    9eb6:	f005 f973 	bl	f1a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9eba:	f7fd f87d 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ebe:	e7eb      	b.n	9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    9ec0:	20000174 	.word	0x20000174
    9ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ec8:	4c1b      	ldr	r4, [pc, #108]	; (9f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    9eca:	2301      	movs	r3, #1
    9ecc:	210a      	movs	r1, #10
    9ece:	6860      	ldr	r0, [r4, #4]
    9ed0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ed4:	3078      	adds	r0, #120	; 0x78
    9ed6:	f004 fbf2 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eda:	b358      	cbz	r0, 9f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9edc:	f1a4 0510 	sub.w	r5, r4, #16
    9ee0:	68e8      	ldr	r0, [r5, #12]
    9ee2:	f004 fe83 	bl	ebec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9ee6:	b1d0      	cbz	r0, 9f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    9ee8:	68e8      	ldr	r0, [r5, #12]
    9eea:	f004 fe71 	bl	ebd0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9eee:	4680      	mov	r8, r0
    9ef0:	68e8      	ldr	r0, [r5, #12]
    9ef2:	f004 fe71 	bl	ebd8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9ef6:	4607      	mov	r7, r0
    9ef8:	68e8      	ldr	r0, [r5, #12]
    9efa:	f004 fe67 	bl	ebcc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9efe:	4606      	mov	r6, r0
    9f00:	68e8      	ldr	r0, [r5, #12]
    9f02:	f004 fe67 	bl	ebd4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9f06:	4601      	mov	r1, r0
    9f08:	f8cd 8000 	str.w	r8, [sp]
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	463b      	mov	r3, r7
    9f10:	4632      	mov	r2, r6
    9f12:	3030      	adds	r0, #48	; 0x30
    9f14:	f005 f93d 	bl	f192 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9f18:	6860      	ldr	r0, [r4, #4]
    9f1a:	f005 f8aa 	bl	f072 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9f1e:	6861      	ldr	r1, [r4, #4]
    9f20:	2000      	movs	r0, #0
    9f22:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9f26:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9f2a:	f7ff f8d9 	bl	90e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    9f2e:	2000      	movs	r0, #0
    9f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f34:	2001      	movs	r0, #1
    9f36:	e7fb      	b.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9f38:	20000174 	.word	0x20000174
    9f3c:	b510      	push	{r4, lr}
    9f3e:	4c09      	ldr	r4, [pc, #36]	; (9f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    9f40:	6860      	ldr	r0, [r4, #4]
    9f42:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9f46:	0740      	lsls	r0, r0, #29
    9f48:	d501      	bpl.n	9f4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    9f4a:	2001      	movs	r0, #1
    9f4c:	bd10      	pop	{r4, pc}
    9f4e:	f7fe fee1 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9f52:	6860      	ldr	r0, [r4, #4]
    9f54:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9f58:	f041 0104 	orr.w	r1, r1, #4
    9f5c:	7001      	strb	r1, [r0, #0]
    9f5e:	2000      	movs	r0, #0
    9f60:	bd10      	pop	{r4, pc}
    9f62:	0000      	.short	0x0000
    9f64:	20000174 	.word	0x20000174
    9f68:	b510      	push	{r4, lr}
    9f6a:	4c0a      	ldr	r4, [pc, #40]	; (9f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    9f6c:	2301      	movs	r3, #1
    9f6e:	2109      	movs	r1, #9
    9f70:	6860      	ldr	r0, [r4, #4]
    9f72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f76:	3078      	adds	r0, #120	; 0x78
    9f78:	f004 fba1 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d007      	beq.n	9f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    9f80:	6860      	ldr	r0, [r4, #4]
    9f82:	2100      	movs	r1, #0
    9f84:	f800 1fb2 	strb.w	r1, [r0, #178]!
    9f88:	7301      	strb	r1, [r0, #12]
    9f8a:	f800 1c2d 	strb.w	r1, [r0, #-45]
    9f8e:	4608      	mov	r0, r1
    9f90:	bd10      	pop	{r4, pc}
    9f92:	0000      	.short	0x0000
    9f94:	20000174 	.word	0x20000174
    9f98:	b510      	push	{r4, lr}
    9f9a:	4c0f      	ldr	r4, [pc, #60]	; (9fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    9f9c:	2301      	movs	r3, #1
    9f9e:	2100      	movs	r1, #0
    9fa0:	6860      	ldr	r0, [r4, #4]
    9fa2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fa6:	3078      	adds	r0, #120	; 0x78
    9fa8:	f004 fb89 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fac:	b138      	cbz	r0, 9fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9fae:	f7fe feb1 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9fb2:	6861      	ldr	r1, [r4, #4]
    9fb4:	2010      	movs	r0, #16
    9fb6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9fba:	2000      	movs	r0, #0
    9fbc:	bd10      	pop	{r4, pc}
    9fbe:	6860      	ldr	r0, [r4, #4]
    9fc0:	2301      	movs	r3, #1
    9fc2:	2105      	movs	r1, #5
    9fc4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fc8:	3078      	adds	r0, #120	; 0x78
    9fca:	f004 fb78 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fce:	b108      	cbz	r0, 9fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    9fd0:	2008      	movs	r0, #8
    9fd2:	bd10      	pop	{r4, pc}
    9fd4:	2001      	movs	r0, #1
    9fd6:	bd10      	pop	{r4, pc}
    9fd8:	20000174 	.word	0x20000174
    9fdc:	4806      	ldr	r0, [pc, #24]	; (9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    9fde:	6840      	ldr	r0, [r0, #4]
    9fe0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9fe4:	2911      	cmp	r1, #17
    9fe6:	d001      	beq.n	9fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    9fe8:	2002      	movs	r0, #2
    9fea:	4770      	bx	lr
    9fec:	2112      	movs	r1, #18
    9fee:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9ff2:	2000      	movs	r0, #0
    9ff4:	4770      	bx	lr
    9ff6:	0000      	.short	0x0000
    9ff8:	20000174 	.word	0x20000174
    9ffc:	b538      	push	{r3, r4, r5, lr}
    9ffe:	4c36      	ldr	r4, [pc, #216]	; (a0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a000:	2301      	movs	r3, #1
    a002:	210b      	movs	r1, #11
    a004:	6860      	ldr	r0, [r4, #4]
    a006:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a00a:	3078      	adds	r0, #120	; 0x78
    a00c:	f004 fb57 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a010:	bb80      	cbnz	r0, a074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    a012:	6860      	ldr	r0, [r4, #4]
    a014:	2301      	movs	r3, #1
    a016:	2100      	movs	r1, #0
    a018:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a01c:	3078      	adds	r0, #120	; 0x78
    a01e:	f004 fb4e 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a022:	b328      	cbz	r0, a070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    a024:	6860      	ldr	r0, [r4, #4]
    a026:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a02a:	2824      	cmp	r0, #36	; 0x24
    a02c:	d023      	beq.n	a076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a02e:	f1a4 0510 	sub.w	r5, r4, #16
    a032:	68e8      	ldr	r0, [r5, #12]
    a034:	f004 fdf6 	bl	ec24 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a038:	b1f8      	cbz	r0, a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    a03a:	6860      	ldr	r0, [r4, #4]
    a03c:	2102      	movs	r1, #2
    a03e:	30d4      	adds	r0, #212	; 0xd4
    a040:	f005 ff96 	bl	ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a044:	68e8      	ldr	r0, [r5, #12]
    a046:	7941      	ldrb	r1, [r0, #5]
    a048:	f001 0207 	and.w	r2, r1, #7
    a04c:	6861      	ldr	r1, [r4, #4]
    a04e:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    a052:	7900      	ldrb	r0, [r0, #4]
    a054:	f000 0007 	and.w	r0, r0, #7
    a058:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    a05c:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    a060:	f88d 3000 	strb.w	r3, [sp]
    a064:	9b00      	ldr	r3, [sp, #0]
    a066:	9300      	str	r3, [sp, #0]
    a068:	f89d 3000 	ldrb.w	r3, [sp]
    a06c:	bb5b      	cbnz	r3, a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a06e:	e008      	b.n	a082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a070:	2001      	movs	r0, #1
    a072:	bd38      	pop	{r3, r4, r5, pc}
    a074:	e7ff      	b.n	a076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a076:	2020      	movs	r0, #32
    a078:	e7fb      	b.n	a072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a07e:	f7ff be95 	b.w	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a082:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    a086:	2b01      	cmp	r3, #1
    a088:	d01d      	beq.n	a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a08a:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    a08e:	785d      	ldrb	r5, [r3, #1]
    a090:	4285      	cmp	r5, r0
    a092:	d106      	bne.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a094:	7818      	ldrb	r0, [r3, #0]
    a096:	4290      	cmp	r0, r2
    a098:	d103      	bne.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a09a:	2002      	movs	r0, #2
    a09c:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a0a0:	e011      	b.n	a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a0a2:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    a0a6:	880a      	ldrh	r2, [r1, #0]
    a0a8:	f820 2b02 	strh.w	r2, [r0], #2
    a0ac:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a0b0:	f800 2b01 	strb.w	r2, [r0], #1
    a0b4:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a0b8:	f800 290d 	strb.w	r2, [r0], #-13
    a0bc:	221b      	movs	r2, #27
    a0be:	f7fc fea9 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a0c2:	f7fc ff79 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0c6:	6861      	ldr	r1, [r4, #4]
    a0c8:	2021      	movs	r0, #33	; 0x21
    a0ca:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a0ce:	f7fe fe21 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a0d2:	2000      	movs	r0, #0
    a0d4:	e7cd      	b.n	a072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a0d6:	0000      	.short	0x0000
    a0d8:	20000174 	.word	0x20000174
    a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0e0:	4951      	ldr	r1, [pc, #324]	; (a228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a0e2:	6848      	ldr	r0, [r1, #4]
    a0e4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0e8:	2a20      	cmp	r2, #32
    a0ea:	d009      	beq.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    a0ec:	f05f 0600 	movs.w	r6, #0
    a0f0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a0f4:	2a22      	cmp	r2, #34	; 0x22
    a0f6:	d005      	beq.n	a104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    a0f8:	b3a6      	cbz	r6, a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a0fa:	f100 0485 	add.w	r4, r0, #133	; 0x85
    a0fe:	e003      	b.n	a108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    a100:	2601      	movs	r6, #1
    a102:	e7f5      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    a104:	f100 0486 	add.w	r4, r0, #134	; 0x86
    a108:	4688      	mov	r8, r1
    a10a:	2102      	movs	r1, #2
    a10c:	30d4      	adds	r0, #212	; 0xd4
    a10e:	f005 ff2f 	bl	ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a112:	4d45      	ldr	r5, [pc, #276]	; (a228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a114:	3d10      	subs	r5, #16
    a116:	68e8      	ldr	r0, [r5, #12]
    a118:	f004 fd8e 	bl	ec38 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a11c:	2700      	movs	r7, #0
    a11e:	b328      	cbz	r0, a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a120:	4631      	mov	r1, r6
    a122:	68e8      	ldr	r0, [r5, #12]
    a124:	f7fe fec8 	bl	8eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    a128:	b300      	cbz	r0, a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a12a:	4646      	mov	r6, r8
    a12c:	466a      	mov	r2, sp
    a12e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a132:	68e9      	ldr	r1, [r5, #12]
    a134:	f004 fbf5 	bl	e922 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a138:	b3a8      	cbz	r0, a1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    a13a:	68e8      	ldr	r0, [r5, #12]
    a13c:	f004 fd4e 	bl	ebdc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a140:	6871      	ldr	r1, [r6, #4]
    a142:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a146:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a14a:	f005 ff83 	bl	10054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a14e:	b358      	cbz	r0, a1a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    a150:	6871      	ldr	r1, [r6, #4]
    a152:	2028      	movs	r0, #40	; 0x28
    a154:	2208      	movs	r2, #8
    a156:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a15a:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a15e:	f7fc fe59 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a162:	e055      	b.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a164:	e7ff      	b.n	a166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a166:	2002      	movs	r0, #2
    a168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a16c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a170:	f04f 0900 	mov.w	r9, #0
    a174:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a178:	2901      	cmp	r1, #1
    a17a:	d016      	beq.n	a1aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    a17c:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a180:	b1fe      	cbz	r6, a1c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    a182:	68e8      	ldr	r0, [r5, #12]
    a184:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a188:	2201      	movs	r2, #1
    a18a:	78c0      	ldrb	r0, [r0, #3]
    a18c:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    a190:	4082      	lsls	r2, r0
    a192:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a196:	b160      	cbz	r0, a1b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    a198:	200a      	movs	r0, #10
    a19a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a19e:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a1a2:	b9a0      	cbnz	r0, a1ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    a1a4:	e008      	b.n	a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    a1a6:	e014      	b.n	a1d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a1a8:	e027      	b.n	a1fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    a1aa:	201e      	movs	r0, #30
    a1ac:	f7ff fc62 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1b0:	e7e6      	b.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    a1b2:	f240 31fd 	movw	r1, #1021	; 0x3fd
    a1b6:	e001      	b.n	a1bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    a1b8:	f240 4105 	movw	r1, #1029	; 0x405
    a1bc:	2031      	movs	r0, #49	; 0x31
    a1be:	f7fa fd23 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1c2:	7027      	strb	r7, [r4, #0]
    a1c4:	f7fe fdb2 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a1c8:	f7ff fdf0 	bl	9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a1cc:	4681      	mov	r9, r0
    a1ce:	4648      	mov	r0, r9
    a1d0:	e7ca      	b.n	a168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a1d2:	6870      	ldr	r0, [r6, #4]
    a1d4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a1d8:	2901      	cmp	r1, #1
    a1da:	d009      	beq.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a1dc:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a1e0:	6870      	ldr	r0, [r6, #4]
    a1e2:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a1e6:	42a1      	cmp	r1, r4
    a1e8:	d112      	bne.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a1ea:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a1ee:	e00f      	b.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a1f0:	2000      	movs	r0, #0
    a1f2:	f7ff fc3f 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1f6:	7027      	strb	r7, [r4, #0]
    a1f8:	e7f2      	b.n	a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a1fa:	6870      	ldr	r0, [r6, #4]
    a1fc:	f89d 1000 	ldrb.w	r1, [sp]
    a200:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a204:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a208:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a20c:	2024      	movs	r0, #36	; 0x24
    a20e:	7020      	strb	r0, [r4, #0]
    a210:	6870      	ldr	r0, [r6, #4]
    a212:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a216:	42a1      	cmp	r1, r4
    a218:	d102      	bne.n	a220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a21a:	f7fe fd87 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a21e:	e001      	b.n	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a220:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a224:	2000      	movs	r0, #0
    a226:	e79f      	b.n	a168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a228:	20000174 	.word	0x20000174
    a22c:	b570      	push	{r4, r5, r6, lr}
    a22e:	480a      	ldr	r0, [pc, #40]	; (a258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a230:	2102      	movs	r1, #2
    a232:	6840      	ldr	r0, [r0, #4]
    a234:	30d4      	adds	r0, #212	; 0xd4
    a236:	f005 fe9b 	bl	ff70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a23a:	4c07      	ldr	r4, [pc, #28]	; (a258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a23c:	3c10      	subs	r4, #16
    a23e:	68e0      	ldr	r0, [r4, #12]
    a240:	f004 fd0a 	bl	ec58 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a244:	4605      	mov	r5, r0
    a246:	68e0      	ldr	r0, [r4, #12]
    a248:	f004 fd08 	bl	ec5c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a24c:	4601      	mov	r1, r0
    a24e:	4628      	mov	r0, r5
    a250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a254:	f005 bf0a 	b.w	1006c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a258:	20000174 	.word	0x20000174
    a25c:	4808      	ldr	r0, [pc, #32]	; (a280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a25e:	68c0      	ldr	r0, [r0, #12]
    a260:	7901      	ldrb	r1, [r0, #4]
    a262:	4807      	ldr	r0, [pc, #28]	; (a280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a264:	3010      	adds	r0, #16
    a266:	6840      	ldr	r0, [r0, #4]
    a268:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a26c:	2820      	cmp	r0, #32
    a26e:	d005      	beq.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a270:	2827      	cmp	r0, #39	; 0x27
    a272:	d003      	beq.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a274:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    a278:	f005 bef8 	b.w	1006c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a27c:	2016      	movs	r0, #22
    a27e:	e7fb      	b.n	a278 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    a280:	20000164 	.word	0x20000164
    a284:	b510      	push	{r4, lr}
    a286:	4c08      	ldr	r4, [pc, #32]	; (a2a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a288:	6860      	ldr	r0, [r4, #4]
    a28a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a28e:	2817      	cmp	r0, #23
    a290:	d001      	beq.n	a296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    a292:	2002      	movs	r0, #2
    a294:	bd10      	pop	{r4, pc}
    a296:	f7fe fd49 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a29a:	6861      	ldr	r1, [r4, #4]
    a29c:	201b      	movs	r0, #27
    a29e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a2a2:	2000      	movs	r0, #0
    a2a4:	bd10      	pop	{r4, pc}
    a2a6:	0000      	.short	0x0000
    a2a8:	20000174 	.word	0x20000174
    a2ac:	b510      	push	{r4, lr}
    a2ae:	4c0c      	ldr	r4, [pc, #48]	; (a2e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a2b0:	2301      	movs	r3, #1
    a2b2:	4619      	mov	r1, r3
    a2b4:	6860      	ldr	r0, [r4, #4]
    a2b6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a2ba:	3078      	adds	r0, #120	; 0x78
    a2bc:	f004 f9ff 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2c0:	b108      	cbz	r0, a2c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    a2c2:	2000      	movs	r0, #0
    a2c4:	bd10      	pop	{r4, pc}
    a2c6:	4806      	ldr	r0, [pc, #24]	; (a2e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a2c8:	3810      	subs	r0, #16
    a2ca:	68c0      	ldr	r0, [r0, #12]
    a2cc:	f004 fc8a 	bl	ebe4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a2d0:	6861      	ldr	r1, [r4, #4]
    a2d2:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    a2d6:	2007      	movs	r0, #7
    a2d8:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a2dc:	e7f1      	b.n	a2c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    a2de:	0000      	.short	0x0000
    a2e0:	20000174 	.word	0x20000174
    a2e4:	b570      	push	{r4, r5, r6, lr}
    a2e6:	4834      	ldr	r0, [pc, #208]	; (a3b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a2e8:	4c33      	ldr	r4, [pc, #204]	; (a3b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a2ea:	2500      	movs	r5, #0
    a2ec:	68c0      	ldr	r0, [r0, #12]
    a2ee:	3410      	adds	r4, #16
    a2f0:	6862      	ldr	r2, [r4, #4]
    a2f2:	7901      	ldrb	r1, [r0, #4]
    a2f4:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a2f8:	390e      	subs	r1, #14
    a2fa:	290a      	cmp	r1, #10
    a2fc:	d259      	bcs.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a2fe:	e8df f001 	tbb	[pc, r1]
    a302:	5805      	.short	0x5805
    a304:	581a5858 	.word	0x581a5858
    a308:	442c5820 	.word	0x442c5820
    a30c:	2804      	cmp	r0, #4
    a30e:	d150      	bne.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a310:	f7fe fe56 	bl	8fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a314:	6860      	ldr	r0, [r4, #4]
    a316:	2205      	movs	r2, #5
    a318:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    a31c:	8801      	ldrh	r1, [r0, #0]
    a31e:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    a322:	211a      	movs	r1, #26
    a324:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a328:	4601      	mov	r1, r0
    a32a:	4618      	mov	r0, r3
    a32c:	f7fc fd72 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a330:	f7fc fe42 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a334:	e03d      	b.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a336:	280e      	cmp	r0, #14
    a338:	d13b      	bne.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a33a:	f7ff fe15 	bl	9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    a33e:	4605      	mov	r5, r0
    a340:	e037      	b.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a342:	281c      	cmp	r0, #28
    a344:	d135      	bne.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a346:	f7fe fe3b 	bl	8fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a34a:	6860      	ldr	r0, [r4, #4]
    a34c:	2105      	movs	r1, #5
    a34e:	30d4      	adds	r0, #212	; 0xd4
    a350:	f005 fe04 	bl	ff5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a354:	f7fe fec4 	bl	90e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a358:	e02b      	b.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a35a:	2820      	cmp	r0, #32
    a35c:	d001      	beq.n	a362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    a35e:	2827      	cmp	r0, #39	; 0x27
    a360:	d127      	bne.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a362:	f7fe fe2d 	bl	8fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a366:	6860      	ldr	r0, [r4, #4]
    a368:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a36c:	2921      	cmp	r1, #33	; 0x21
    a36e:	d020      	beq.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a370:	2108      	movs	r1, #8
    a372:	30d4      	adds	r0, #212	; 0xd4
    a374:	f005 fdf2 	bl	ff5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a378:	6860      	ldr	r0, [r4, #4]
    a37a:	210b      	movs	r1, #11
    a37c:	30d4      	adds	r0, #212	; 0xd4
    a37e:	f005 fded 	bl	ff5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a382:	201a      	movs	r0, #26
    a384:	f7ff fb76 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a388:	e013      	b.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a38a:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    a38e:	2822      	cmp	r0, #34	; 0x22
    a390:	d10f      	bne.n	a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a392:	2600      	movs	r6, #0
    a394:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    a398:	f7fe fcc8 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a39c:	6860      	ldr	r0, [r4, #4]
    a39e:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    a3a2:	2801      	cmp	r0, #1
    a3a4:	d102      	bne.n	a3ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    a3a6:	2000      	movs	r0, #0
    a3a8:	f7ff fb64 	bl	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a3ac:	6860      	ldr	r0, [r4, #4]
    a3ae:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    a3b2:	4628      	mov	r0, r5
    a3b4:	bd70      	pop	{r4, r5, r6, pc}
    a3b6:	0000      	.short	0x0000
    a3b8:	20000164 	.word	0x20000164
    a3bc:	b570      	push	{r4, r5, r6, lr}
    a3be:	4c31      	ldr	r4, [pc, #196]	; (a484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a3c0:	6860      	ldr	r0, [r4, #4]
    a3c2:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a3c6:	0789      	lsls	r1, r1, #30
    a3c8:	d507      	bpl.n	a3da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    a3ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3ce:	2301      	movs	r3, #1
    a3d0:	2108      	movs	r1, #8
    a3d2:	3078      	adds	r0, #120	; 0x78
    a3d4:	f004 f973 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3d8:	b1f8      	cbz	r0, a41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    a3da:	6860      	ldr	r0, [r4, #4]
    a3dc:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a3e0:	0780      	lsls	r0, r0, #30
    a3e2:	d414      	bmi.n	a40e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    a3e4:	4d27      	ldr	r5, [pc, #156]	; (a484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a3e6:	3d10      	subs	r5, #16
    a3e8:	68e8      	ldr	r0, [r5, #12]
    a3ea:	f004 fbfd 	bl	ebe8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a3ee:	6861      	ldr	r1, [r4, #4]
    a3f0:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    a3f4:	68e8      	ldr	r0, [r5, #12]
    a3f6:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a3fa:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    a3fe:	8840      	ldrh	r0, [r0, #2]
    a400:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    a404:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    a408:	f040 0002 	orr.w	r0, r0, #2
    a40c:	7008      	strb	r0, [r1, #0]
    a40e:	6860      	ldr	r0, [r4, #4]
    a410:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a414:	07c9      	lsls	r1, r1, #31
    a416:	d002      	beq.n	a41e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    a418:	e015      	b.n	a446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    a41a:	2001      	movs	r0, #1
    a41c:	bd70      	pop	{r4, r5, r6, pc}
    a41e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a422:	078a      	lsls	r2, r1, #30
    a424:	d504      	bpl.n	a430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a426:	f240 21e2 	movw	r1, #738	; 0x2e2
    a42a:	2031      	movs	r0, #49	; 0x31
    a42c:	f7fa fbec 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a430:	f041 0102 	orr.w	r1, r1, #2
    a434:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a438:	f7fe fc6c 	bl	8d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a43c:	6860      	ldr	r0, [r4, #4]
    a43e:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a442:	07c0      	lsls	r0, r0, #31
    a444:	d007      	beq.n	a456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    a446:	6861      	ldr	r1, [r4, #4]
    a448:	2201      	movs	r2, #1
    a44a:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    a44e:	f7fc fce1 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a452:	f7fc fdb1 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a456:	6860      	ldr	r0, [r4, #4]
    a458:	2100      	movs	r1, #0
    a45a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a45e:	2a06      	cmp	r2, #6
    a460:	d103      	bne.n	a46a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    a462:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a466:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a46a:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    a46e:	b132      	cbz	r2, a47e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a470:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a474:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a478:	b90a      	cbnz	r2, a47e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a47a:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a47e:	2000      	movs	r0, #0
    a480:	bd70      	pop	{r4, r5, r6, pc}
    a482:	0000      	.short	0x0000
    a484:	20000174 	.word	0x20000174
    a488:	b510      	push	{r4, lr}
    a48a:	4c1f      	ldr	r4, [pc, #124]	; (a508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    a48c:	6863      	ldr	r3, [r4, #4]
    a48e:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a492:	2808      	cmp	r0, #8
    a494:	d20d      	bcs.n	a4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    a496:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    a49a:	f1c0 0008 	rsb	r0, r0, #8
    a49e:	b2c1      	uxtb	r1, r0
    a4a0:	1898      	adds	r0, r3, r2
    a4a2:	f7fa fc4f 	bl	4d44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a4a6:	6861      	ldr	r1, [r4, #4]
    a4a8:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a4ac:	4410      	add	r0, r2
    a4ae:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a4b2:	6863      	ldr	r3, [r4, #4]
    a4b4:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a4b8:	3808      	subs	r0, #8
    a4ba:	2804      	cmp	r0, #4
    a4bc:	d20d      	bcs.n	a4da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    a4be:	f500 7282 	add.w	r2, r0, #260	; 0x104
    a4c2:	f1c0 0004 	rsb	r0, r0, #4
    a4c6:	b2c1      	uxtb	r1, r0
    a4c8:	1898      	adds	r0, r3, r2
    a4ca:	f7fa fc3b 	bl	4d44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a4ce:	6861      	ldr	r1, [r4, #4]
    a4d0:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a4d4:	4410      	add	r0, r2
    a4d6:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a4da:	6860      	ldr	r0, [r4, #4]
    a4dc:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    a4e0:	290c      	cmp	r1, #12
    a4e2:	d30f      	bcc.n	a504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a4e4:	d005      	beq.n	a4f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    a4e6:	f640 013b 	movw	r1, #2107	; 0x83b
    a4ea:	f04f 0031 	mov.w	r0, #49	; 0x31
    a4ee:	f7fa fb8b 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4f2:	2100      	movs	r1, #0
    a4f4:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    a4f8:	2101      	movs	r1, #1
    a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4fe:	2004      	movs	r0, #4
    a500:	f7ff b9ac 	b.w	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a504:	bd10      	pop	{r4, pc}
    a506:	0000      	.short	0x0000
    a508:	20000174 	.word	0x20000174
    a50c:	4804      	ldr	r0, [pc, #16]	; (a520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    a50e:	2129      	movs	r1, #41	; 0x29
    a510:	6840      	ldr	r0, [r0, #4]
    a512:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a516:	2100      	movs	r1, #0
    a518:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    a51c:	4770      	bx	lr
    a51e:	0000      	.short	0x0000
    a520:	20000174 	.word	0x20000174
    a524:	4809      	ldr	r0, [pc, #36]	; (a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    a526:	b510      	push	{r4, lr}
    a528:	6840      	ldr	r0, [r0, #4]
    a52a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a52e:	2914      	cmp	r1, #20
    a530:	d004      	beq.n	a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    a532:	f240 61fd 	movw	r1, #1789	; 0x6fd
    a536:	2031      	movs	r0, #49	; 0x31
    a538:	f7fa fb66 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a53c:	2101      	movs	r1, #1
    a53e:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a542:	2115      	movs	r1, #21
    a544:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a548:	bd10      	pop	{r4, pc}
    a54a:	0000      	.short	0x0000
    a54c:	20000174 	.word	0x20000174
    a550:	b510      	push	{r4, lr}
    a552:	4c0a      	ldr	r4, [pc, #40]	; (a57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a554:	6860      	ldr	r0, [r4, #4]
    a556:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a55a:	07c0      	lsls	r0, r0, #31
    a55c:	d008      	beq.n	a570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    a55e:	f7fe fbe5 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a562:	6860      	ldr	r0, [r4, #4]
    a564:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a568:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    a56c:	7001      	strb	r1, [r0, #0]
    a56e:	bd10      	pop	{r4, pc}
    a570:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    a574:	2031      	movs	r0, #49	; 0x31
    a576:	f7fa fb47 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a57a:	0000      	.short	0x0000
    a57c:	20000174 	.word	0x20000174
    a580:	b510      	push	{r4, lr}
    a582:	4c0a      	ldr	r4, [pc, #40]	; (a5ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    a584:	2301      	movs	r3, #1
    a586:	2100      	movs	r1, #0
    a588:	6860      	ldr	r0, [r4, #4]
    a58a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a58e:	3078      	adds	r0, #120	; 0x78
    a590:	f004 f895 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a594:	b120      	cbz	r0, a5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    a596:	6861      	ldr	r1, [r4, #4]
    a598:	201c      	movs	r0, #28
    a59a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a59e:	bd10      	pop	{r4, pc}
    a5a0:	f240 7184 	movw	r1, #1924	; 0x784
    a5a4:	2031      	movs	r0, #49	; 0x31
    a5a6:	f7fa fb2f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5aa:	0000      	.short	0x0000
    a5ac:	20000174 	.word	0x20000174
    a5b0:	480a      	ldr	r0, [pc, #40]	; (a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    a5b2:	b510      	push	{r4, lr}
    a5b4:	6840      	ldr	r0, [r0, #4]
    a5b6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a5ba:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a5be:	2a01      	cmp	r2, #1
    a5c0:	d004      	beq.n	a5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    a5c2:	f240 718b 	movw	r1, #1931	; 0x78b
    a5c6:	2031      	movs	r0, #49	; 0x31
    a5c8:	f7fa fb1e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5cc:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    a5d0:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d8:	f7fe bba8 	b.w	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a5dc:	20000174 	.word	0x20000174
    a5e0:	b510      	push	{r4, lr}
    a5e2:	4c0a      	ldr	r4, [pc, #40]	; (a60c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    a5e4:	2301      	movs	r3, #1
    a5e6:	2100      	movs	r1, #0
    a5e8:	6860      	ldr	r0, [r4, #4]
    a5ea:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a5ee:	3078      	adds	r0, #120	; 0x78
    a5f0:	f004 f865 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5f4:	b120      	cbz	r0, a600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    a5f6:	6861      	ldr	r1, [r4, #4]
    a5f8:	200e      	movs	r0, #14
    a5fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a5fe:	bd10      	pop	{r4, pc}
    a600:	f240 7177 	movw	r1, #1911	; 0x777
    a604:	2031      	movs	r0, #49	; 0x31
    a606:	f7fa faff 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a60a:	0000      	.short	0x0000
    a60c:	20000174 	.word	0x20000174
    a610:	4804      	ldr	r0, [pc, #16]	; (a624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    a612:	6840      	ldr	r0, [r0, #4]
    a614:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a618:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    a61c:	7001      	strb	r1, [r0, #0]
    a61e:	f7fe bb85 	b.w	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a622:	0000      	.short	0x0000
    a624:	20000174 	.word	0x20000174
    a628:	4809      	ldr	r0, [pc, #36]	; (a650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    a62a:	b510      	push	{r4, lr}
    a62c:	6840      	ldr	r0, [r0, #4]
    a62e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a632:	2910      	cmp	r1, #16
    a634:	d004      	beq.n	a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    a636:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a63a:	2031      	movs	r0, #49	; 0x31
    a63c:	f7fa fae4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a640:	2101      	movs	r1, #1
    a642:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a646:	2111      	movs	r1, #17
    a648:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a64c:	bd10      	pop	{r4, pc}
    a64e:	0000      	.short	0x0000
    a650:	20000174 	.word	0x20000174
    a654:	b510      	push	{r4, lr}
    a656:	4c0a      	ldr	r4, [pc, #40]	; (a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    a658:	2301      	movs	r3, #1
    a65a:	2100      	movs	r1, #0
    a65c:	6860      	ldr	r0, [r4, #4]
    a65e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a662:	3078      	adds	r0, #120	; 0x78
    a664:	f004 f82b 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a668:	b120      	cbz	r0, a674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    a66a:	6861      	ldr	r1, [r4, #4]
    a66c:	201f      	movs	r0, #31
    a66e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a672:	bd10      	pop	{r4, pc}
    a674:	f240 7197 	movw	r1, #1943	; 0x797
    a678:	2031      	movs	r0, #49	; 0x31
    a67a:	f7fa fac5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a67e:	0000      	.short	0x0000
    a680:	20000174 	.word	0x20000174
    a684:	4808      	ldr	r0, [pc, #32]	; (a6a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    a686:	b510      	push	{r4, lr}
    a688:	6840      	ldr	r0, [r0, #4]
    a68a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a68e:	2921      	cmp	r1, #33	; 0x21
    a690:	d005      	beq.n	a69e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a692:	b121      	cbz	r1, a69e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a694:	f240 719e 	movw	r1, #1950	; 0x79e
    a698:	2031      	movs	r0, #49	; 0x31
    a69a:	f7fa fab5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a69e:	2122      	movs	r1, #34	; 0x22
    a6a0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a6a4:	bd10      	pop	{r4, pc}
    a6a6:	0000      	.short	0x0000
    a6a8:	20000174 	.word	0x20000174
    a6ac:	4809      	ldr	r0, [pc, #36]	; (a6d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    a6ae:	b510      	push	{r4, lr}
    a6b0:	6840      	ldr	r0, [r0, #4]
    a6b2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a6b6:	2928      	cmp	r1, #40	; 0x28
    a6b8:	d006      	beq.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    a6ba:	2915      	cmp	r1, #21
    a6bc:	d006      	beq.n	a6cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a6be:	f240 711e 	movw	r1, #1822	; 0x71e
    a6c2:	2031      	movs	r0, #49	; 0x31
    a6c4:	f7fa faa0 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6c8:	2100      	movs	r1, #0
    a6ca:	e000      	b.n	a6ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a6cc:	2119      	movs	r1, #25
    a6ce:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a6d2:	bd10      	pop	{r4, pc}
    a6d4:	20000174 	.word	0x20000174
    a6d8:	4807      	ldr	r0, [pc, #28]	; (a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a6da:	b510      	push	{r4, lr}
    a6dc:	6840      	ldr	r0, [r0, #4]
    a6de:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a6e2:	2915      	cmp	r1, #21
    a6e4:	d004      	beq.n	a6f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    a6e6:	f240 710a 	movw	r1, #1802	; 0x70a
    a6ea:	2031      	movs	r0, #49	; 0x31
    a6ec:	f7fa fa8c 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6f0:	2119      	movs	r1, #25
    a6f2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a6f6:	bd10      	pop	{r4, pc}
    a6f8:	20000174 	.word	0x20000174
    a6fc:	b510      	push	{r4, lr}
    a6fe:	4c0a      	ldr	r4, [pc, #40]	; (a728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    a700:	2301      	movs	r3, #1
    a702:	2100      	movs	r1, #0
    a704:	6860      	ldr	r0, [r4, #4]
    a706:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a70a:	3078      	adds	r0, #120	; 0x78
    a70c:	f003 ffd7 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a710:	b120      	cbz	r0, a71c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    a712:	6861      	ldr	r1, [r4, #4]
    a714:	2004      	movs	r0, #4
    a716:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a71a:	bd10      	pop	{r4, pc}
    a71c:	f240 61ef 	movw	r1, #1775	; 0x6ef
    a720:	2031      	movs	r0, #49	; 0x31
    a722:	f7fa fa71 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a726:	0000      	.short	0x0000
    a728:	20000174 	.word	0x20000174
    a72c:	4807      	ldr	r0, [pc, #28]	; (a74c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    a72e:	b510      	push	{r4, lr}
    a730:	6840      	ldr	r0, [r0, #4]
    a732:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a736:	2915      	cmp	r1, #21
    a738:	d004      	beq.n	a744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    a73a:	f240 7104 	movw	r1, #1796	; 0x704
    a73e:	2031      	movs	r0, #49	; 0x31
    a740:	f7fa fa62 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a744:	2117      	movs	r1, #23
    a746:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a74a:	bd10      	pop	{r4, pc}
    a74c:	20000174 	.word	0x20000174
    a750:	b538      	push	{r3, r4, r5, lr}
    a752:	4d20      	ldr	r5, [pc, #128]	; (a7d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a754:	6869      	ldr	r1, [r5, #4]
    a756:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a75a:	281b      	cmp	r0, #27
    a75c:	d002      	beq.n	a764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    a75e:	f240 7137 	movw	r1, #1847	; 0x737
    a762:	e00e      	b.n	a782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    a764:	2400      	movs	r4, #0
    a766:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    a76a:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    a76e:	f88d 0000 	strb.w	r0, [sp]
    a772:	9800      	ldr	r0, [sp, #0]
    a774:	9000      	str	r0, [sp, #0]
    a776:	f89d 0000 	ldrb.w	r0, [sp]
    a77a:	2201      	movs	r2, #1
    a77c:	b120      	cbz	r0, a788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    a77e:	f240 713b 	movw	r1, #1851	; 0x73b
    a782:	2031      	movs	r0, #49	; 0x31
    a784:	f7fa fa40 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a788:	4812      	ldr	r0, [pc, #72]	; (a7d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a78a:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    a78e:	6840      	ldr	r0, [r0, #4]
    a790:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    a794:	b143      	cbz	r3, a7a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a796:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    a79a:	880a      	ldrh	r2, [r1, #0]
    a79c:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    a7a0:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a7a4:	220a      	movs	r2, #10
    a7a6:	e007      	b.n	a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    a7a8:	880b      	ldrh	r3, [r1, #0]
    a7aa:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    a7ae:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a7b2:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    a7b6:	2209      	movs	r2, #9
    a7b8:	f7fc fb2c 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a7bc:	6868      	ldr	r0, [r5, #4]
    a7be:	8800      	ldrh	r0, [r0, #0]
    a7c0:	f7fa fe4a 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a7c4:	f003 fb90 	bl	dee8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a7c8:	f7fc fbf6 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7cc:	6868      	ldr	r0, [r5, #4]
    a7ce:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    a7d2:	bd38      	pop	{r3, r4, r5, pc}
    a7d4:	20000174 	.word	0x20000174
    a7d8:	b510      	push	{r4, lr}
    a7da:	4c08      	ldr	r4, [pc, #32]	; (a7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    a7dc:	2301      	movs	r3, #1
    a7de:	4619      	mov	r1, r3
    a7e0:	6860      	ldr	r0, [r4, #4]
    a7e2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a7e6:	3078      	adds	r0, #120	; 0x78
    a7e8:	f003 ff69 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7ec:	2800      	cmp	r0, #0
    a7ee:	d103      	bne.n	a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    a7f0:	6861      	ldr	r1, [r4, #4]
    a7f2:	2008      	movs	r0, #8
    a7f4:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a7f8:	bd10      	pop	{r4, pc}
    a7fa:	0000      	.short	0x0000
    a7fc:	20000174 	.word	0x20000174
    a800:	4815      	ldr	r0, [pc, #84]	; (a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a802:	b510      	push	{r4, lr}
    a804:	6880      	ldr	r0, [r0, #8]
    a806:	7901      	ldrb	r1, [r0, #4]
    a808:	4813      	ldr	r0, [pc, #76]	; (a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a80a:	3010      	adds	r0, #16
    a80c:	6840      	ldr	r0, [r0, #4]
    a80e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a812:	2a0a      	cmp	r2, #10
    a814:	d109      	bne.n	a82a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a816:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    a81a:	428a      	cmp	r2, r1
    a81c:	d105      	bne.n	a82a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a81e:	2100      	movs	r1, #0
    a820:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a824:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a828:	bd10      	pop	{r4, pc}
    a82a:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a82e:	0713      	lsls	r3, r2, #28
    a830:	d507      	bpl.n	a842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    a832:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    a836:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a83e:	f7fe ba75 	b.w	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a842:	29ff      	cmp	r1, #255	; 0xff
    a844:	d004      	beq.n	a850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    a846:	f240 61e2 	movw	r1, #1762	; 0x6e2
    a84a:	2031      	movs	r0, #49	; 0x31
    a84c:	f7fa f9dc 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a854:	f7ff be5a 	b.w	a50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    a858:	20000164 	.word	0x20000164
    a85c:	b510      	push	{r4, lr}
    a85e:	4c15      	ldr	r4, [pc, #84]	; (a8b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    a860:	6860      	ldr	r0, [r4, #4]
    a862:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a866:	0789      	lsls	r1, r1, #30
    a868:	d411      	bmi.n	a88e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    a86a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a86e:	2301      	movs	r3, #1
    a870:	2100      	movs	r1, #0
    a872:	3078      	adds	r0, #120	; 0x78
    a874:	f003 ff23 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a878:	b120      	cbz	r0, a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    a87a:	6861      	ldr	r1, [r4, #4]
    a87c:	2006      	movs	r0, #6
    a87e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a882:	e009      	b.n	a898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    a884:	f240 7163 	movw	r1, #1891	; 0x763
    a888:	2031      	movs	r0, #49	; 0x31
    a88a:	f7fa f9bd 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a88e:	2100      	movs	r1, #0
    a890:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a894:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a898:	6860      	ldr	r0, [r4, #4]
    a89a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a89e:	0780      	lsls	r0, r0, #30
    a8a0:	d507      	bpl.n	a8b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    a8a2:	f7fe fa43 	bl	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a8a6:	6860      	ldr	r0, [r4, #4]
    a8a8:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a8ac:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    a8b0:	7001      	strb	r1, [r0, #0]
    a8b2:	bd10      	pop	{r4, pc}
    a8b4:	20000174 	.word	0x20000174
    a8b8:	4808      	ldr	r0, [pc, #32]	; (a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    a8ba:	b510      	push	{r4, lr}
    a8bc:	6840      	ldr	r0, [r0, #4]
    a8be:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a8c2:	b941      	cbnz	r1, a8d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    a8c4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a8c8:	2301      	movs	r3, #1
    a8ca:	2106      	movs	r1, #6
    a8cc:	3078      	adds	r0, #120	; 0x78
    a8ce:	f003 fef6 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d000      	beq.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    a8d6:	2001      	movs	r0, #1
    a8d8:	bd10      	pop	{r4, pc}
    a8da:	0000      	.short	0x0000
    a8dc:	20000174 	.word	0x20000174
    a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8e2:	4c5e      	ldr	r4, [pc, #376]	; (aa5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a8e4:	4607      	mov	r7, r0
    a8e6:	4615      	mov	r5, r2
    a8e8:	6860      	ldr	r0, [r4, #4]
    a8ea:	2200      	movs	r2, #0
    a8ec:	b111      	cbz	r1, a8f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a8ee:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    a8f2:	e006      	b.n	a902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    a8f4:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    a8f8:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    a8fc:	4411      	add	r1, r2
    a8fe:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    a902:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    a906:	f88d 1000 	strb.w	r1, [sp]
    a90a:	9900      	ldr	r1, [sp, #0]
    a90c:	9100      	str	r1, [sp, #0]
    a90e:	f89d 1000 	ldrb.w	r1, [sp]
    a912:	b939      	cbnz	r1, a924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    a914:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a918:	2301      	movs	r3, #1
    a91a:	4619      	mov	r1, r3
    a91c:	3078      	adds	r0, #120	; 0x78
    a91e:	f003 fece 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a922:	b130      	cbz	r0, a932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    a924:	6860      	ldr	r0, [r4, #4]
    a926:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    a92a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    a92e:	4411      	add	r1, r2
    a930:	8001      	strh	r1, [r0, #0]
    a932:	6861      	ldr	r1, [r4, #4]
    a934:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a938:	b130      	cbz	r0, a948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    a93a:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    a93e:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    a942:	441a      	add	r2, r3
    a944:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a948:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    a94c:	2a00      	cmp	r2, #0
    a94e:	dd06      	ble.n	a95e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    a950:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    a954:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    a958:	4433      	add	r3, r6
    a95a:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    a95e:	263d      	movs	r6, #61	; 0x3d
    a960:	b117      	cbz	r7, a968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    a962:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    a966:	e016      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    a968:	4b3c      	ldr	r3, [pc, #240]	; (aa5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a96a:	3b10      	subs	r3, #16
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	2b02      	cmp	r3, #2
    a970:	d00b      	beq.n	a98a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    a972:	2b01      	cmp	r3, #1
    a974:	d015      	beq.n	a9a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    a976:	b36d      	cbz	r5, a9d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    a978:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a97c:	2208      	movs	r2, #8
    a97e:	f7fc fa49 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a982:	06e8      	lsls	r0, r5, #27
    a984:	d510      	bpl.n	a9a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    a986:	201e      	movs	r0, #30
    a988:	e01b      	b.n	a9c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a98a:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    a98e:	2806      	cmp	r0, #6
    a990:	d048      	beq.n	aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a992:	2016      	movs	r0, #22
    a994:	e046      	b.n	aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a996:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a99a:	2208      	movs	r2, #8
    a99c:	f7fc fa3a 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a9a0:	e049      	b.n	aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a9a2:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    a9a6:	e03d      	b.n	aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a9a8:	0728      	lsls	r0, r5, #28
    a9aa:	d503      	bpl.n	a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    a9ac:	6860      	ldr	r0, [r4, #4]
    a9ae:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    a9b2:	e040      	b.n	aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a9b4:	06a8      	lsls	r0, r5, #26
    a9b6:	d501      	bpl.n	a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    a9b8:	2023      	movs	r0, #35	; 0x23
    a9ba:	e002      	b.n	a9c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a9bc:	07a8      	lsls	r0, r5, #30
    a9be:	d004      	beq.n	a9ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    a9c0:	202a      	movs	r0, #42	; 0x2a
    a9c2:	6861      	ldr	r1, [r4, #4]
    a9c4:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a9c8:	e035      	b.n	aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a9ca:	f640 4173 	movw	r1, #3187	; 0xc73
    a9ce:	2031      	movs	r0, #49	; 0x31
    a9d0:	f7fa f91a 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9d4:	b128      	cbz	r0, a9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    a9d6:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    a9da:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    a9de:	4298      	cmp	r0, r3
    a9e0:	d216      	bcs.n	aa10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a9e2:	2a00      	cmp	r2, #0
    a9e4:	dd05      	ble.n	a9f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    a9e6:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    a9ea:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    a9ee:	4290      	cmp	r0, r2
    a9f0:	d20e      	bcs.n	aa10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a9f2:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    a9f6:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    a9fa:	4282      	cmp	r2, r0
    a9fc:	d30a      	bcc.n	aa14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    a9fe:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    aa02:	f88d 2000 	strb.w	r2, [sp]
    aa06:	9a00      	ldr	r2, [sp, #0]
    aa08:	9200      	str	r2, [sp, #0]
    aa0a:	f89d 2000 	ldrb.w	r2, [sp]
    aa0e:	b10a      	cbz	r2, aa14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    aa10:	2022      	movs	r0, #34	; 0x22
    aa12:	e007      	b.n	aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    aa14:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    aa18:	b13a      	cbz	r2, aa2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    aa1a:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    aa1e:	4282      	cmp	r2, r0
    aa20:	d309      	bcc.n	aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    aa22:	2008      	movs	r0, #8
    aa24:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    aa28:	e7b5      	b.n	a996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    aa2a:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    aa2e:	2806      	cmp	r0, #6
    aa30:	d301      	bcc.n	aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    aa32:	203e      	movs	r0, #62	; 0x3e
    aa34:	e7f6      	b.n	aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    aa36:	6860      	ldr	r0, [r4, #4]
    aa38:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    aa3c:	f88d 1000 	strb.w	r1, [sp]
    aa40:	9900      	ldr	r1, [sp, #0]
    aa42:	9100      	str	r1, [sp, #0]
    aa44:	f89d 1000 	ldrb.w	r1, [sp]
    aa48:	b119      	cbz	r1, aa52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    aa4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    aa4e:	f005 bad1 	b.w	fff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    aa52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    aa56:	2100      	movs	r1, #0
    aa58:	f7fd bc38 	b.w	82cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aa5c:	20000174 	.word	0x20000174
    aa60:	b570      	push	{r4, r5, r6, lr}
    aa62:	4d2e      	ldr	r5, [pc, #184]	; (ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    aa64:	6868      	ldr	r0, [r5, #4]
    aa66:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aa6a:	b151      	cbz	r1, aa82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    aa6c:	2901      	cmp	r1, #1
    aa6e:	d008      	beq.n	aa82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    aa70:	2902      	cmp	r1, #2
    aa72:	d009      	beq.n	aa88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    aa74:	2903      	cmp	r1, #3
    aa76:	d007      	beq.n	aa88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    aa78:	f640 21f1 	movw	r1, #2801	; 0xaf1
    aa7c:	2031      	movs	r0, #49	; 0x31
    aa7e:	f7fa f8c3 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa82:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    aa86:	e037      	b.n	aaf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    aa88:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    aa8c:	2908      	cmp	r1, #8
    aa8e:	d036      	beq.n	aafe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    aa90:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    aa94:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    aa98:	2400      	movs	r4, #0
    aa9a:	1c93      	adds	r3, r2, #2
    aa9c:	4299      	cmp	r1, r3
    aa9e:	d306      	bcc.n	aaae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    aaa0:	1a89      	subs	r1, r1, r2
    aaa2:	1e89      	subs	r1, r1, #2
    aaa4:	040c      	lsls	r4, r1, #16
    aaa6:	0c24      	lsrs	r4, r4, #16
    aaa8:	d001      	beq.n	aaae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    aaaa:	1e64      	subs	r4, r4, #1
    aaac:	b2a4      	uxth	r4, r4
    aaae:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    aab2:	b139      	cbz	r1, aac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    aab4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aab8:	2301      	movs	r3, #1
    aaba:	2109      	movs	r1, #9
    aabc:	3078      	adds	r0, #120	; 0x78
    aabe:	f003 fdfe 	bl	e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aac2:	b340      	cbz	r0, ab16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    aac4:	f7ff fef8 	bl	a8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    aac8:	b178      	cbz	r0, aaea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    aaca:	686a      	ldr	r2, [r5, #4]
    aacc:	2000      	movs	r0, #0
    aace:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    aad2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    aad6:	1c93      	adds	r3, r2, #2
    aad8:	4299      	cmp	r1, r3
    aada:	d303      	bcc.n	aae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    aadc:	1a88      	subs	r0, r1, r2
    aade:	1e80      	subs	r0, r0, #2
    aae0:	d000      	beq.n	aae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    aae2:	1e40      	subs	r0, r0, #1
    aae4:	42a0      	cmp	r0, r4
    aae6:	d200      	bcs.n	aaea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    aae8:	b284      	uxth	r4, r0
    aaea:	b10c      	cbz	r4, aaf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    aaec:	1e64      	subs	r4, r4, #1
    aaee:	b2a4      	uxth	r4, r4
    aaf0:	6868      	ldr	r0, [r5, #4]
    aaf2:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    aaf6:	4421      	add	r1, r4
    aaf8:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    aafc:	bd70      	pop	{r4, r5, r6, pc}
    aafe:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    ab02:	2903      	cmp	r1, #3
    ab04:	d3bd      	bcc.n	aa82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    ab06:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    ab0a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    ab0c:	4411      	add	r1, r2
    ab0e:	1c49      	adds	r1, r1, #1
    ab10:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    ab14:	bd70      	pop	{r4, r5, r6, pc}
    ab16:	2400      	movs	r4, #0
    ab18:	e7ea      	b.n	aaf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    ab1a:	0000      	.short	0x0000
    ab1c:	20000174 	.word	0x20000174

0000ab20 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    ab20:	4903      	ldr	r1, [pc, #12]	; (ab30 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    ab22:	884a      	ldrh	r2, [r1, #2]
    ab24:	8002      	strh	r2, [r0, #0]
    ab26:	7809      	ldrb	r1, [r1, #0]
    ab28:	7081      	strb	r1, [r0, #2]
    ab2a:	2000      	movs	r0, #0
    ab2c:	4770      	bx	lr
    ab2e:	0000      	.short	0x0000
    ab30:	20001324 	.word	0x20001324

0000ab34 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    ab34:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ab36:	460c      	mov	r4, r1
    ab38:	4605      	mov	r5, r0
    ab3a:	8800      	ldrh	r0, [r0, #0]
    ab3c:	4669      	mov	r1, sp
    ab3e:	f003 fd94 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ab42:	2200      	movs	r2, #0
    ab44:	b128      	cbz	r0, ab52 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    ab46:	f8c4 2002 	str.w	r2, [r4, #2]
    ab4a:	71a2      	strb	r2, [r4, #6]
    ab4c:	8022      	strh	r2, [r4, #0]
    ab4e:	2002      	movs	r0, #2
    ab50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab52:	9901      	ldr	r1, [sp, #4]
    ab54:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    ab58:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    ab5c:	f8d1 0017 	ldr.w	r0, [r1, #23]
    ab60:	f8c4 0002 	str.w	r0, [r4, #2]
    ab64:	7ec8      	ldrb	r0, [r1, #27]
    ab66:	71a0      	strb	r0, [r4, #6]
    ab68:	8828      	ldrh	r0, [r5, #0]
    ab6a:	8020      	strh	r0, [r4, #0]
    ab6c:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    ab70:	f88d 0008 	strb.w	r0, [sp, #8]
    ab74:	9802      	ldr	r0, [sp, #8]
    ab76:	9002      	str	r0, [sp, #8]
    ab78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d1eb      	bne.n	ab58 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    ab80:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000ab84 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ab84:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ab86:	460d      	mov	r5, r1
    ab88:	4606      	mov	r6, r0
    ab8a:	8800      	ldrh	r0, [r0, #0]
    ab8c:	4669      	mov	r1, sp
    ab8e:	f003 fd6c 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ab92:	2800      	cmp	r0, #0
    ab94:	d11a      	bne.n	abcc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    ab96:	f8dd 4004 	ldr.w	r4, [sp, #4]
    ab9a:	2700      	movs	r7, #0
    ab9c:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    aba0:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    aba4:	f005 ff78 	bl	10a98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    aba8:	70a8      	strb	r0, [r5, #2]
    abaa:	7860      	ldrb	r0, [r4, #1]
    abac:	f005 ff74 	bl	10a98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    abb0:	70e8      	strb	r0, [r5, #3]
    abb2:	78a0      	ldrb	r0, [r4, #2]
    abb4:	f88d 0008 	strb.w	r0, [sp, #8]
    abb8:	9802      	ldr	r0, [sp, #8]
    abba:	9002      	str	r0, [sp, #8]
    abbc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    abc0:	3c6e      	subs	r4, #110	; 0x6e
    abc2:	2800      	cmp	r0, #0
    abc4:	d1ea      	bne.n	ab9c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    abc6:	8830      	ldrh	r0, [r6, #0]
    abc8:	8028      	strh	r0, [r5, #0]
    abca:	2000      	movs	r0, #0
    abcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000abd0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    abd0:	4903      	ldr	r1, [pc, #12]	; (abe0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    abd2:	888a      	ldrh	r2, [r1, #4]
    abd4:	8002      	strh	r2, [r0, #0]
    abd6:	88c9      	ldrh	r1, [r1, #6]
    abd8:	8041      	strh	r1, [r0, #2]
    abda:	2000      	movs	r0, #0
    abdc:	4770      	bx	lr
    abde:	0000      	.short	0x0000
    abe0:	200002b4 	.word	0x200002b4

0000abe4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    abe4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    abe6:	2400      	movs	r4, #0
    abe8:	a902      	add	r1, sp, #8
    abea:	f88d 4004 	strb.w	r4, [sp, #4]
    abee:	f88d 4008 	strb.w	r4, [sp, #8]
    abf2:	9100      	str	r1, [sp, #0]
    abf4:	7882      	ldrb	r2, [r0, #2]
    abf6:	7841      	ldrb	r1, [r0, #1]
    abf8:	7800      	ldrb	r0, [r0, #0]
    abfa:	ab01      	add	r3, sp, #4
    abfc:	f006 f8de 	bl	10dbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    ac00:	2800      	cmp	r0, #0
    ac02:	d112      	bne.n	ac2a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    ac04:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac08:	f006 f812 	bl	10c30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    ac0c:	b170      	cbz	r0, ac2c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    ac0e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ac12:	f006 f80d 	bl	10c30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    ac16:	b148      	cbz	r0, ac2c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    ac18:	4805      	ldr	r0, [pc, #20]	; (ac30 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    ac1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ac1e:	7381      	strb	r1, [r0, #14]
    ac20:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ac24:	73c1      	strb	r1, [r0, #15]
    ac26:	8204      	strh	r4, [r0, #16]
    ac28:	2000      	movs	r0, #0
    ac2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ac2c:	2011      	movs	r0, #17
    ac2e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ac30:	20001324 	.word	0x20001324

0000ac34 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ac34:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ac38:	460f      	mov	r7, r1
    ac3a:	4605      	mov	r5, r0
    ac3c:	7806      	ldrb	r6, [r0, #0]
    ac3e:	f005 ffaa 	bl	10b96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    ac42:	2800      	cmp	r0, #0
    ac44:	d10a      	bne.n	ac5c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ac46:	4628      	mov	r0, r5
    ac48:	f005 ff7f 	bl	10b4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    ac4c:	2800      	cmp	r0, #0
    ac4e:	d105      	bne.n	ac5c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ac50:	2001      	movs	r0, #1
    ac52:	f7fa f9cf 	bl	4ff4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ac56:	4286      	cmp	r6, r0
    ac58:	d302      	bcc.n	ac60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    ac5a:	2007      	movs	r0, #7
    ac5c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ac60:	2101      	movs	r1, #1
    ac62:	4630      	mov	r0, r6
    ac64:	f003 fa64 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ac68:	0004      	movs	r4, r0
    ac6a:	d004      	beq.n	ac76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    ac6c:	f004 fdb5 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ac70:	b170      	cbz	r0, ac90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    ac72:	200c      	movs	r0, #12
    ac74:	e7f2      	b.n	ac5c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ac76:	2200      	movs	r2, #0
    ac78:	2101      	movs	r1, #1
    ac7a:	4630      	mov	r0, r6
    ac7c:	f003 fa4e 	bl	e11c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ac80:	0004      	movs	r4, r0
    ac82:	d013      	beq.n	acac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    ac84:	4817      	ldr	r0, [pc, #92]	; (ace4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    ac86:	f990 1000 	ldrsb.w	r1, [r0]
    ac8a:	4620      	mov	r0, r4
    ac8c:	f004 fb41 	bl	f312 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ac90:	4620      	mov	r0, r4
    ac92:	f004 fbea 	bl	f46a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    ac96:	7038      	strb	r0, [r7, #0]
    ac98:	74e8      	strb	r0, [r5, #19]
    ac9a:	4629      	mov	r1, r5
    ac9c:	4620      	mov	r0, r4
    ac9e:	f7fc fb89 	bl	73b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    aca2:	4606      	mov	r6, r0
    aca4:	7e68      	ldrb	r0, [r5, #25]
    aca6:	b1d0      	cbz	r0, acde <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    aca8:	b12e      	cbz	r6, acb6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    acaa:	e018      	b.n	acde <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    acac:	f241 215a 	movw	r1, #4698	; 0x125a
    acb0:	2039      	movs	r0, #57	; 0x39
    acb2:	f7f9 ffa9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acb6:	2200      	movs	r2, #0
    acb8:	4668      	mov	r0, sp
    acba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    acbc:	f003 fafc 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    acc0:	2200      	movs	r2, #0
    acc2:	2101      	movs	r1, #1
    acc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    acc6:	f003 fb6d 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    acca:	2204      	movs	r2, #4
    accc:	4668      	mov	r0, sp
    acce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    acd0:	f003 faf2 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    acd4:	2200      	movs	r2, #0
    acd6:	4611      	mov	r1, r2
    acd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    acda:	f003 fb63 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    acde:	4630      	mov	r0, r6
    ace0:	e7bc      	b.n	ac5c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ace2:	0000      	.short	0x0000
    ace4:	200002ac 	.word	0x200002ac

0000ace8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ace8:	7801      	ldrb	r1, [r0, #0]
    acea:	b171      	cbz	r1, ad0a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    acec:	7841      	ldrb	r1, [r0, #1]
    acee:	b161      	cbz	r1, ad0a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    acf0:	8841      	ldrh	r1, [r0, #2]
    acf2:	291b      	cmp	r1, #27
    acf4:	d309      	bcc.n	ad0a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    acf6:	8881      	ldrh	r1, [r0, #4]
    acf8:	291b      	cmp	r1, #27
    acfa:	d306      	bcc.n	ad0a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    acfc:	4904      	ldr	r1, [pc, #16]	; (ad10 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    acfe:	6802      	ldr	r2, [r0, #0]
    ad00:	600a      	str	r2, [r1, #0]
    ad02:	8880      	ldrh	r0, [r0, #4]
    ad04:	8088      	strh	r0, [r1, #4]
    ad06:	2000      	movs	r0, #0
    ad08:	4770      	bx	lr
    ad0a:	2012      	movs	r0, #18
    ad0c:	4770      	bx	lr
    ad0e:	0000      	.short	0x0000
    ad10:	20001324 	.word	0x20001324

0000ad14 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ad14:	6800      	ldr	r0, [r0, #0]
    ad16:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ad1a:	4288      	cmp	r0, r1
    ad1c:	d303      	bcc.n	ad26 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ad1e:	4903      	ldr	r1, [pc, #12]	; (ad2c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ad20:	6088      	str	r0, [r1, #8]
    ad22:	2000      	movs	r0, #0
    ad24:	4770      	bx	lr
    ad26:	2012      	movs	r0, #18
    ad28:	4770      	bx	lr
    ad2a:	0000      	.short	0x0000
    ad2c:	20001324 	.word	0x20001324

0000ad30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ad30:	4a03      	ldr	r2, [pc, #12]	; (ad40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ad32:	e9d2 1200 	ldrd	r1, r2, [r2]
    ad36:	6001      	str	r1, [r0, #0]
    ad38:	6042      	str	r2, [r0, #4]
    ad3a:	2000      	movs	r0, #0
    ad3c:	4770      	bx	lr
    ad3e:	0000      	.short	0x0000
    ad40:	0000b19c 	.word	0x0000b19c

0000ad44 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    ad44:	b510      	push	{r4, lr}
    ad46:	2005      	movs	r0, #5
    ad48:	f000 faa2 	bl	b290 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ad4c:	f7fd fe38 	bl	89c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    ad50:	4902      	ldr	r1, [pc, #8]	; (ad5c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    ad52:	4801      	ldr	r0, [pc, #4]	; (ad58 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    ad54:	6048      	str	r0, [r1, #4]
    ad56:	bd10      	pop	{r4, pc}
    ad58:	0000ad61 	.word	0x0000ad61
    ad5c:	200002ac 	.word	0x200002ac
    ad60:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    ad64:	4613      	mov	r3, r2
    ad66:	4a33      	ldr	r2, [pc, #204]	; (ae34 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    ad68:	460f      	mov	r7, r1
    ad6a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    ad6e:	8814      	ldrh	r4, [r2, #0]
    ad70:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    ad74:	428c      	cmp	r4, r1
    ad76:	d200      	bcs.n	ad7a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    ad78:	4621      	mov	r1, r4
    ad7a:	4688      	mov	r8, r1
    ad7c:	8891      	ldrh	r1, [r2, #4]
    ad7e:	42b1      	cmp	r1, r6
    ad80:	d200      	bcs.n	ad84 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    ad82:	460e      	mov	r6, r1
    ad84:	8851      	ldrh	r1, [r2, #2]
    ad86:	f640 0448 	movw	r4, #2120	; 0x848
    ad8a:	42a1      	cmp	r1, r4
    ad8c:	d300      	bcc.n	ad90 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    ad8e:	4621      	mov	r1, r4
    ad90:	88d5      	ldrh	r5, [r2, #6]
    ad92:	42a5      	cmp	r5, r4
    ad94:	d300      	bcc.n	ad98 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    ad96:	4625      	mov	r5, r4
    ad98:	42a1      	cmp	r1, r4
    ad9a:	d200      	bcs.n	ad9e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    ad9c:	460c      	mov	r4, r1
    ad9e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ada2:	2e1b      	cmp	r6, #27
    ada4:	d001      	beq.n	adaa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    ada6:	4295      	cmp	r5, r2
    ada8:	d104      	bne.n	adb4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    adaa:	f1b8 0f1b 	cmp.w	r8, #27
    adae:	d03e      	beq.n	ae2e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    adb0:	4294      	cmp	r4, r2
    adb2:	d03c      	beq.n	ae2e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    adb4:	466a      	mov	r2, sp
    adb6:	4619      	mov	r1, r3
    adb8:	f005 ff5d 	bl	10c76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    adbc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    adc0:	4641      	mov	r1, r8
    adc2:	4540      	cmp	r0, r8
    adc4:	d900      	bls.n	adc8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    adc6:	4608      	mov	r0, r1
    adc8:	80f8      	strh	r0, [r7, #6]
    adca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    adce:	42a1      	cmp	r1, r4
    add0:	d800      	bhi.n	add4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    add2:	460c      	mov	r4, r1
    add4:	813c      	strh	r4, [r7, #8]
    add6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    adda:	42b1      	cmp	r1, r6
    addc:	d800      	bhi.n	ade0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    adde:	460e      	mov	r6, r1
    ade0:	807e      	strh	r6, [r7, #2]
    ade2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ade6:	42a9      	cmp	r1, r5
    ade8:	d800      	bhi.n	adec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    adea:	460d      	mov	r5, r1
    adec:	80bd      	strh	r5, [r7, #4]
    adee:	21ff      	movs	r1, #255	; 0xff
    adf0:	7039      	strb	r1, [r7, #0]
    adf2:	381b      	subs	r0, #27
    adf4:	28e0      	cmp	r0, #224	; 0xe0
    adf6:	d902      	bls.n	adfe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    adf8:	f640 41b8 	movw	r1, #3256	; 0xcb8
    adfc:	e014      	b.n	ae28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    adfe:	3e1b      	subs	r6, #27
    ae00:	2ee0      	cmp	r6, #224	; 0xe0
    ae02:	d902      	bls.n	ae0a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    ae04:	f640 41ba 	movw	r1, #3258	; 0xcba
    ae08:	e00e      	b.n	ae28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ae0a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ae0e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ae12:	4284      	cmp	r4, r0
    ae14:	d902      	bls.n	ae1c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    ae16:	f640 41bc 	movw	r1, #3260	; 0xcbc
    ae1a:	e005      	b.n	ae28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ae1c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    ae20:	4285      	cmp	r5, r0
    ae22:	d904      	bls.n	ae2e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    ae24:	f640 41be 	movw	r1, #3262	; 0xcbe
    ae28:	2039      	movs	r0, #57	; 0x39
    ae2a:	f7f9 feed 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae2e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    ae32:	0000      	.short	0x0000
    ae34:	200002b4 	.word	0x200002b4
    ae38:	b510      	push	{r4, lr}
    ae3a:	480e      	ldr	r0, [pc, #56]	; (ae74 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    ae3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae40:	4b0d      	ldr	r3, [pc, #52]	; (ae78 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    ae42:	8281      	strh	r1, [r0, #20]
    ae44:	2100      	movs	r1, #0
    ae46:	7581      	strb	r1, [r0, #22]
    ae48:	8301      	strh	r1, [r0, #24]
    ae4a:	221b      	movs	r2, #27
    ae4c:	801a      	strh	r2, [r3, #0]
    ae4e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ae52:	805c      	strh	r4, [r3, #2]
    ae54:	809a      	strh	r2, [r3, #4]
    ae56:	80dc      	strh	r4, [r3, #6]
    ae58:	7381      	strb	r1, [r0, #14]
    ae5a:	73c1      	strb	r1, [r0, #15]
    ae5c:	2303      	movs	r3, #3
    ae5e:	7003      	strb	r3, [r0, #0]
    ae60:	2302      	movs	r3, #2
    ae62:	7043      	strb	r3, [r0, #1]
    ae64:	8042      	strh	r2, [r0, #2]
    ae66:	8082      	strh	r2, [r0, #4]
    ae68:	f640 62a6 	movw	r2, #3750	; 0xea6
    ae6c:	6082      	str	r2, [r0, #8]
    ae6e:	7481      	strb	r1, [r0, #18]
    ae70:	7301      	strb	r1, [r0, #12]
    ae72:	bd10      	pop	{r4, pc}
    ae74:	20001324 	.word	0x20001324
    ae78:	200002b4 	.word	0x200002b4
    ae7c:	b510      	push	{r4, lr}
    ae7e:	2101      	movs	r1, #1
    ae80:	2000      	movs	r0, #0
    ae82:	f003 f955 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ae86:	0004      	movs	r4, r0
    ae88:	d10c      	bne.n	aea4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    ae8a:	2200      	movs	r2, #0
    ae8c:	2101      	movs	r1, #1
    ae8e:	4610      	mov	r0, r2
    ae90:	f003 f944 	bl	e11c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ae94:	0004      	movs	r4, r0
    ae96:	d007      	beq.n	aea8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    ae98:	4806      	ldr	r0, [pc, #24]	; (aeb4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    ae9a:	f990 1000 	ldrsb.w	r1, [r0]
    ae9e:	4620      	mov	r0, r4
    aea0:	f004 fa37 	bl	f312 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    aea4:	4620      	mov	r0, r4
    aea6:	bd10      	pop	{r4, pc}
    aea8:	f240 2135 	movw	r1, #565	; 0x235
    aeac:	2039      	movs	r0, #57	; 0x39
    aeae:	f7f9 feab 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeb2:	0000      	.short	0x0000
    aeb4:	200002ac 	.word	0x200002ac

0000aeb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aebc:	b088      	sub	sp, #32
    aebe:	460c      	mov	r4, r1
    aec0:	4606      	mov	r6, r0
    aec2:	f004 fad5 	bl	f470 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    aec6:	b198      	cbz	r0, aef0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    aec8:	4630      	mov	r0, r6
    aeca:	f004 fac4 	bl	f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    aece:	b130      	cbz	r0, aede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    aed0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    aed4:	2012      	movs	r0, #18
    aed6:	2900      	cmp	r1, #0
    aed8:	d00b      	beq.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aeda:	2980      	cmp	r1, #128	; 0x80
    aedc:	d809      	bhi.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aede:	4630      	mov	r0, r6
    aee0:	f004 faa8 	bl	f434 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    aee4:	b140      	cbz	r0, aef8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    aee6:	4630      	mov	r0, r6
    aee8:	f004 f9dd 	bl	f2a6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    aeec:	b130      	cbz	r0, aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    aeee:	e009      	b.n	af04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    aef0:	2042      	movs	r0, #66	; 0x42
    aef2:	b008      	add	sp, #32
    aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aef8:	200c      	movs	r0, #12
    aefa:	e7fa      	b.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aefc:	4630      	mov	r0, r6
    aefe:	f004 faa4 	bl	f44a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    af02:	b3c0      	cbz	r0, af76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    af04:	4630      	mov	r0, r6
    af06:	f004 fc68 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    af0a:	2800      	cmp	r0, #0
    af0c:	d1f4      	bne.n	aef8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af0e:	4630      	mov	r0, r6
    af10:	f004 f9e4 	bl	f2dc <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    af14:	2800      	cmp	r0, #0
    af16:	d1ef      	bne.n	aef8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af18:	4630      	mov	r0, r6
    af1a:	f7fc f9e9 	bl	72f0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    af1e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    af22:	f242 7110 	movw	r1, #10000	; 0x2710
    af26:	fb00 f801 	mul.w	r8, r0, r1
    af2a:	78e1      	ldrb	r1, [r4, #3]
    af2c:	4630      	mov	r0, r6
    af2e:	f004 fa78 	bl	f422 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    af32:	4630      	mov	r0, r6
    af34:	f004 fa8b 	bl	f44e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    af38:	b300      	cbz	r0, af7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    af3a:	2200      	movs	r2, #0
    af3c:	4611      	mov	r1, r2
    af3e:	a801      	add	r0, sp, #4
    af40:	f7fa f8cc 	bl	50dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    af44:	0004      	movs	r4, r0
    af46:	d06d      	beq.n	b024 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    af48:	2100      	movs	r1, #0
    af4a:	f7fb fd6d 	bl	6a28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    af4e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    af52:	8020      	strh	r0, [r4, #0]
    af54:	4621      	mov	r1, r4
    af56:	4630      	mov	r0, r6
    af58:	f004 fa9d 	bl	f496 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    af5c:	f000 f9a4 	bl	b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    af60:	0940      	lsrs	r0, r0, #5
    af62:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    af66:	07c0      	lsls	r0, r0, #31
    af68:	4d3a      	ldr	r5, [pc, #232]	; (b054 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    af6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    af6e:	d00f      	beq.n	af90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    af70:	8869      	ldrh	r1, [r5, #2]
    af72:	88aa      	ldrh	r2, [r5, #4]
    af74:	e00e      	b.n	af94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    af76:	e7ff      	b.n	af78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    af78:	2012      	movs	r0, #18
    af7a:	e7ba      	b.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af7c:	4642      	mov	r2, r8
    af7e:	2100      	movs	r1, #0
    af80:	4630      	mov	r0, r6
    af82:	f7fd f8b1 	bl	80e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    af86:	2800      	cmp	r0, #0
    af88:	d0b3      	beq.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af8a:	f241 417b 	movw	r1, #5243	; 0x147b
    af8e:	e053      	b.n	b038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    af90:	211b      	movs	r1, #27
    af92:	460a      	mov	r2, r1
    af94:	84c1      	strh	r1, [r0, #38]	; 0x26
    af96:	8502      	strh	r2, [r0, #40]	; 0x28
    af98:	68a8      	ldr	r0, [r5, #8]
    af9a:	6320      	str	r0, [r4, #48]	; 0x30
    af9c:	f641 574c 	movw	r7, #7500	; 0x1d4c
    afa0:	4630      	mov	r0, r6
    afa2:	f004 fa5c 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    afa6:	b910      	cbnz	r0, afae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    afa8:	4630      	mov	r0, r6
    afaa:	f004 fa72 	bl	f492 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    afae:	6127      	str	r7, [r4, #16]
    afb0:	8821      	ldrh	r1, [r4, #0]
    afb2:	f8ad 1008 	strh.w	r1, [sp, #8]
    afb6:	7ba9      	ldrb	r1, [r5, #14]
    afb8:	f88d 100a 	strb.w	r1, [sp, #10]
    afbc:	7be9      	ldrb	r1, [r5, #15]
    afbe:	f88d 100b 	strb.w	r1, [sp, #11]
    afc2:	8a29      	ldrh	r1, [r5, #16]
    afc4:	f8ad 100c 	strh.w	r1, [sp, #12]
    afc8:	a905      	add	r1, sp, #20
    afca:	9100      	str	r1, [sp, #0]
    afcc:	2001      	movs	r0, #1
    afce:	ab04      	add	r3, sp, #16
    afd0:	aa02      	add	r2, sp, #8
    afd2:	4621      	mov	r1, r4
    afd4:	f005 fe85 	bl	10ce2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    afd8:	b140      	cbz	r0, afec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    afda:	2100      	movs	r1, #0
    afdc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    afe0:	f7fa f8a6 	bl	5130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    afe4:	b1f0      	cbz	r0, b024 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    afe6:	f241 41cb 	movw	r1, #5323	; 0x14cb
    afea:	e025      	b.n	b038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    afec:	f89d 0010 	ldrb.w	r0, [sp, #16]
    aff0:	f88d 0018 	strb.w	r0, [sp, #24]
    aff4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    aff8:	f88d 0019 	strb.w	r0, [sp, #25]
    affc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b000:	f8ad 001a 	strh.w	r0, [sp, #26]
    b004:	a906      	add	r1, sp, #24
    b006:	4620      	mov	r0, r4
    b008:	f003 fbef 	bl	e7ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b00c:	7868      	ldrb	r0, [r5, #1]
    b00e:	9000      	str	r0, [sp, #0]
    b010:	782b      	ldrb	r3, [r5, #0]
    b012:	88aa      	ldrh	r2, [r5, #4]
    b014:	8869      	ldrh	r1, [r5, #2]
    b016:	8820      	ldrh	r0, [r4, #0]
    b018:	f7fa f956 	bl	52c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b01c:	b120      	cbz	r0, b028 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    b01e:	f241 41d6 	movw	r1, #5334	; 0x14d6
    b022:	e009      	b.n	b038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b024:	2009      	movs	r0, #9
    b026:	e764      	b.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b028:	4642      	mov	r2, r8
    b02a:	4621      	mov	r1, r4
    b02c:	4630      	mov	r0, r6
    b02e:	f7fd f85b 	bl	80e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b032:	b120      	cbz	r0, b03e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    b034:	f241 41d8 	movw	r1, #5336	; 0x14d8
    b038:	2039      	movs	r0, #57	; 0x39
    b03a:	f7f9 fde5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b03e:	4806      	ldr	r0, [pc, #24]	; (b058 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    b040:	6843      	ldr	r3, [r0, #4]
    b042:	b123      	cbz	r3, b04e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    b044:	2200      	movs	r2, #0
    b046:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    b04a:	4620      	mov	r0, r4
    b04c:	4798      	blx	r3
    b04e:	2000      	movs	r0, #0
    b050:	e74f      	b.n	aef2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b052:	0000      	.short	0x0000
    b054:	20001324 	.word	0x20001324
    b058:	200002ac 	.word	0x200002ac
    b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b060:	b088      	sub	sp, #32
    b062:	4604      	mov	r4, r0
    b064:	8800      	ldrh	r0, [r0, #0]
    b066:	a906      	add	r1, sp, #24
    b068:	f003 faff 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b06c:	2800      	cmp	r0, #0
    b06e:	d147      	bne.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b070:	9807      	ldr	r0, [sp, #28]
    b072:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    b076:	f88d 1008 	strb.w	r1, [sp, #8]
    b07a:	9902      	ldr	r1, [sp, #8]
    b07c:	9102      	str	r1, [sp, #8]
    b07e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b082:	3078      	adds	r0, #120	; 0x78
    b084:	b101      	cbz	r1, b088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    b086:	2101      	movs	r1, #1
    b088:	f88d 100c 	strb.w	r1, [sp, #12]
    b08c:	7bc1      	ldrb	r1, [r0, #15]
    b08e:	f04f 0800 	mov.w	r8, #0
    b092:	0689      	lsls	r1, r1, #26
    b094:	d502      	bpl.n	b09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    b096:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b09a:	b149      	cbz	r1, b0b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    b09c:	f05f 0100 	movs.w	r1, #0
    b0a0:	f88d 1004 	strb.w	r1, [sp, #4]
    b0a4:	2105      	movs	r1, #5
    b0a6:	305c      	adds	r0, #92	; 0x5c
    b0a8:	f004 ffe8 	bl	1007c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    b0ac:	b110      	cbz	r0, b0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    b0ae:	e004      	b.n	b0ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    b0b0:	2101      	movs	r1, #1
    b0b2:	e7f5      	b.n	b0a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    b0b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0b8:	b308      	cbz	r0, b0fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b0ba:	8921      	ldrh	r1, [r4, #8]
    b0bc:	88e0      	ldrh	r0, [r4, #6]
    b0be:	f005 fdcc 	bl	10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b0c2:	2800      	cmp	r0, #0
    b0c4:	d11c      	bne.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b0c6:	88a1      	ldrh	r1, [r4, #4]
    b0c8:	8860      	ldrh	r0, [r4, #2]
    b0ca:	f005 fdc6 	bl	10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d116      	bne.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b0d2:	8921      	ldrh	r1, [r4, #8]
    b0d4:	88e0      	ldrh	r0, [r4, #6]
    b0d6:	f005 fdb6 	bl	10c46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b0da:	2800      	cmp	r0, #0
    b0dc:	d110      	bne.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b0de:	88a1      	ldrh	r1, [r4, #4]
    b0e0:	8860      	ldrh	r0, [r4, #2]
    b0e2:	f005 fdb0 	bl	10c46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b0e6:	0006      	movs	r6, r0
    b0e8:	d10a      	bne.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b0ea:	9807      	ldr	r0, [sp, #28]
    b0ec:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    b0f0:	27ff      	movs	r7, #255	; 0xff
    b0f2:	706f      	strb	r7, [r5, #1]
    b0f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b0f8:	b129      	cbz	r1, b106 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    b0fa:	263a      	movs	r6, #58	; 0x3a
    b0fc:	e02e      	b.n	b15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    b0fe:	201a      	movs	r0, #26
    b100:	b008      	add	sp, #32
    b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b106:	4641      	mov	r1, r8
    b108:	aa03      	add	r2, sp, #12
    b10a:	f005 fdb4 	bl	10c76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b10e:	8861      	ldrh	r1, [r4, #2]
    b110:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b114:	4281      	cmp	r1, r0
    b116:	d200      	bcs.n	b11a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    b118:	4608      	mov	r0, r1
    b11a:	80e8      	strh	r0, [r5, #6]
    b11c:	88a1      	ldrh	r1, [r4, #4]
    b11e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b122:	4281      	cmp	r1, r0
    b124:	d200      	bcs.n	b128 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    b126:	4608      	mov	r0, r1
    b128:	8128      	strh	r0, [r5, #8]
    b12a:	88e2      	ldrh	r2, [r4, #6]
    b12c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b130:	428a      	cmp	r2, r1
    b132:	d200      	bcs.n	b136 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    b134:	4611      	mov	r1, r2
    b136:	8069      	strh	r1, [r5, #2]
    b138:	8922      	ldrh	r2, [r4, #8]
    b13a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b13e:	428a      	cmp	r2, r1
    b140:	d200      	bcs.n	b144 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    b142:	4611      	mov	r1, r2
    b144:	f640 0248 	movw	r2, #2120	; 0x848
    b148:	80a9      	strh	r1, [r5, #4]
    b14a:	4291      	cmp	r1, r2
    b14c:	d300      	bcc.n	b150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b14e:	4611      	mov	r1, r2
    b150:	80a9      	strh	r1, [r5, #4]
    b152:	4290      	cmp	r0, r2
    b154:	d200      	bcs.n	b158 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    b156:	4602      	mov	r2, r0
    b158:	812a      	strh	r2, [r5, #8]
    b15a:	702f      	strb	r7, [r5, #0]
    b15c:	f885 8001 	strb.w	r8, [r5, #1]
    b160:	4630      	mov	r0, r6
    b162:	e7cd      	b.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b164:	b510      	push	{r4, lr}
    b166:	4604      	mov	r4, r0
    b168:	88c1      	ldrh	r1, [r0, #6]
    b16a:	8880      	ldrh	r0, [r0, #4]
    b16c:	f005 fd75 	bl	10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b170:	2800      	cmp	r0, #0
    b172:	d10f      	bne.n	b194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b174:	8861      	ldrh	r1, [r4, #2]
    b176:	8820      	ldrh	r0, [r4, #0]
    b178:	f005 fd6f 	bl	10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b17c:	2800      	cmp	r0, #0
    b17e:	d109      	bne.n	b194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b180:	4805      	ldr	r0, [pc, #20]	; (b198 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    b182:	88a1      	ldrh	r1, [r4, #4]
    b184:	8081      	strh	r1, [r0, #4]
    b186:	8821      	ldrh	r1, [r4, #0]
    b188:	8001      	strh	r1, [r0, #0]
    b18a:	88e1      	ldrh	r1, [r4, #6]
    b18c:	80c1      	strh	r1, [r0, #6]
    b18e:	8861      	ldrh	r1, [r4, #2]
    b190:	8041      	strh	r1, [r0, #2]
    b192:	2000      	movs	r0, #0
    b194:	bd10      	pop	{r4, pc}
    b196:	0000      	.short	0x0000
    b198:	200002b4 	.word	0x200002b4
    b19c:	0c11d80c 	.word	0x0c11d80c
    b1a0:	11d80059 	.word	0x11d80059

0000b1a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b1a4:	b510      	push	{r4, lr}
    b1a6:	f7fb ff01 	bl	6fac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b1aa:	4805      	ldr	r0, [pc, #20]	; (b1c0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    b1ac:	6840      	ldr	r0, [r0, #4]
    b1ae:	f005 fe7d 	bl	10eac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b1b2:	f005 fbe8 	bl	10986 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1ba:	f7fc b867 	b.w	728c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b1be:	0000      	.short	0x0000
    b1c0:	200002bc 	.word	0x200002bc

0000b1c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b1c4:	b510      	push	{r4, lr}
    b1c6:	4c05      	ldr	r4, [pc, #20]	; (b1dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b1c8:	68a0      	ldr	r0, [r4, #8]
    b1ca:	f005 fe6f 	bl	10eac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b1ce:	68e0      	ldr	r0, [r4, #12]
    b1d0:	f005 fe6c 	bl	10eac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1d8:	f005 bc3a 	b.w	10a50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b1dc:	200002bc 	.word	0x200002bc

0000b1e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b1e0:	b510      	push	{r4, lr}
    b1e2:	4905      	ldr	r1, [pc, #20]	; (b1f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b1e4:	4805      	ldr	r0, [pc, #20]	; (b1fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b1e6:	f005 fe54 	bl	10e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b1ea:	4804      	ldr	r0, [pc, #16]	; (b1fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1f0:	4903      	ldr	r1, [pc, #12]	; (b200 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b1f2:	1d00      	adds	r0, r0, #4
    b1f4:	f005 be4d 	b.w	10e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b1f8:	200002cc 	.word	0x200002cc
    b1fc:	200002c0 	.word	0x200002c0
    b200:	200002d4 	.word	0x200002d4

0000b204 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b204:	b510      	push	{r4, lr}
    b206:	4908      	ldr	r1, [pc, #32]	; (b228 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b208:	4808      	ldr	r0, [pc, #32]	; (b22c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b20a:	f005 fe42 	bl	10e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b20e:	4807      	ldr	r0, [pc, #28]	; (b22c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b210:	4907      	ldr	r1, [pc, #28]	; (b230 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b212:	1d00      	adds	r0, r0, #4
    b214:	f005 fe3d 	bl	10e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b218:	4804      	ldr	r0, [pc, #16]	; (b22c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b21e:	4905      	ldr	r1, [pc, #20]	; (b234 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b220:	3008      	adds	r0, #8
    b222:	f005 be36 	b.w	10e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b226:	0000      	.short	0x0000
    b228:	200002e4 	.word	0x200002e4
    b22c:	200002c0 	.word	0x200002c0
    b230:	200002ec 	.word	0x200002ec
    b234:	200002dc 	.word	0x200002dc

0000b238 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b238:	4801      	ldr	r0, [pc, #4]	; (b240 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b23a:	7800      	ldrb	r0, [r0, #0]
    b23c:	4770      	bx	lr
    b23e:	0000      	.short	0x0000
    b240:	200002bc 	.word	0x200002bc
    b244:	b510      	push	{r4, lr}
    b246:	f7fc f975 	bl	7534 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b24a:	f7fc fff5 	bl	8238 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b24e:	4803      	ldr	r0, [pc, #12]	; (b25c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b250:	f7fc f956 	bl	7500 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b258:	f7fb beb4 	b.w	6fc4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b25c:	200017b7 	.word	0x200017b7
    b260:	4909      	ldr	r1, [pc, #36]	; (b288 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b262:	b510      	push	{r4, lr}
    b264:	2001      	movs	r0, #1
    b266:	7008      	strb	r0, [r1, #0]
    b268:	f7fc f994 	bl	7594 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b26c:	f7fd fbc0 	bl	89f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b270:	f003 f91e 	bl	e4b0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b274:	4805      	ldr	r0, [pc, #20]	; (b28c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b276:	f7fa fbd7 	bl	5a28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b27a:	2000      	movs	r0, #0
    b27c:	f7f9 fe9e 	bl	4fbc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b284:	f7fb bea6 	b.w	6fd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b288:	200002bc 	.word	0x200002bc
    b28c:	200017b7 	.word	0x200017b7

0000b290 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b290:	4a04      	ldr	r2, [pc, #16]	; (b2a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b292:	08c1      	lsrs	r1, r0, #3
    b294:	f000 0307 	and.w	r3, r0, #7
    b298:	2001      	movs	r0, #1
    b29a:	4098      	lsls	r0, r3
    b29c:	5c53      	ldrb	r3, [r2, r1]
    b29e:	4303      	orrs	r3, r0
    b2a0:	5453      	strb	r3, [r2, r1]
    b2a2:	4770      	bx	lr
    b2a4:	20000020 	.word	0x20000020

0000b2a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b2a8:	4901      	ldr	r1, [pc, #4]	; (b2b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b2aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    b2ae:	4770      	bx	lr
    b2b0:	20000020 	.word	0x20000020

0000b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b2b4:	4806      	ldr	r0, [pc, #24]	; (b2d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b2b6:	8801      	ldrh	r1, [r0, #0]
    b2b8:	7900      	ldrb	r0, [r0, #4]
    b2ba:	0602      	lsls	r2, r0, #24
    b2bc:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b2c0:	f000 0001 	and.w	r0, r0, #1
    b2c4:	1800      	adds	r0, r0, r0
    b2c6:	b2c0      	uxtb	r0, r0
    b2c8:	f040 0001 	orr.w	r0, r0, #1
    b2cc:	4770      	bx	lr
    b2ce:	0000      	.short	0x0000
    b2d0:	20000020 	.word	0x20000020

0000b2d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b2d4:	b510      	push	{r4, lr}
    b2d6:	f7f9 f8cf 	bl	4478 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b2da:	2200      	movs	r2, #0
    b2dc:	4b08      	ldr	r3, [pc, #32]	; (b300 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b2de:	4611      	mov	r1, r2
    b2e0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b2e4:	4284      	cmp	r4, r0
    b2e6:	d303      	bcc.n	b2f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b2e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b2ec:	7882      	ldrb	r2, [r0, #2]
    b2ee:	e003      	b.n	b2f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b2f0:	1c49      	adds	r1, r1, #1
    b2f2:	b2c9      	uxtb	r1, r1
    b2f4:	290c      	cmp	r1, #12
    b2f6:	d3f3      	bcc.n	b2e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b2f8:	4802      	ldr	r0, [pc, #8]	; (b304 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b2fa:	7002      	strb	r2, [r0, #0]
    b2fc:	bd10      	pop	{r4, pc}
    b2fe:	0000      	.short	0x0000
    b300:	00010efe 	.word	0x00010efe
    b304:	2000033c 	.word	0x2000033c

0000b308 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b308:	b570      	push	{r4, r5, r6, lr}
    b30a:	4605      	mov	r5, r0
    b30c:	4616      	mov	r6, r2
    b30e:	460c      	mov	r4, r1
    b310:	2002      	movs	r0, #2
    b312:	f000 f9b7 	bl	b684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b316:	4906      	ldr	r1, [pc, #24]	; (b330 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b318:	2001      	movs	r0, #1
    b31a:	1ef6      	subs	r6, r6, #3
    b31c:	7008      	strb	r0, [r1, #0]
    b31e:	4805      	ldr	r0, [pc, #20]	; (b334 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b320:	6006      	str	r6, [r0, #0]
    b322:	4804      	ldr	r0, [pc, #16]	; (b334 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b324:	3808      	subs	r0, #8
    b326:	6005      	str	r5, [r0, #0]
    b328:	1f00      	subs	r0, r0, #4
    b32a:	6004      	str	r4, [r0, #0]
    b32c:	bd70      	pop	{r4, r5, r6, pc}
    b32e:	0000      	.short	0x0000
    b330:	2000033d 	.word	0x2000033d
    b334:	4000f510 	.word	0x4000f510

0000b338 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b338:	b510      	push	{r4, lr}
    b33a:	4c0c      	ldr	r4, [pc, #48]	; (b36c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b33c:	7820      	ldrb	r0, [r4, #0]
    b33e:	b180      	cbz	r0, b362 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b340:	490b      	ldr	r1, [pc, #44]	; (b370 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b342:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b346:	6008      	str	r0, [r1, #0]
    b348:	f000 f86a 	bl	b420 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b34c:	2100      	movs	r1, #0
    b34e:	b120      	cbz	r0, b35a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b350:	2001      	movs	r0, #1
    b352:	7060      	strb	r0, [r4, #1]
    b354:	4807      	ldr	r0, [pc, #28]	; (b374 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b356:	6800      	ldr	r0, [r0, #0]
    b358:	e001      	b.n	b35e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b35a:	7061      	strb	r1, [r4, #1]
    b35c:	2010      	movs	r0, #16
    b35e:	70a0      	strb	r0, [r4, #2]
    b360:	7021      	strb	r1, [r4, #0]
    b362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b366:	2000      	movs	r0, #0
    b368:	f000 b98c 	b.w	b684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b36c:	2000033d 	.word	0x2000033d
    b370:	4001f508 	.word	0x4001f508
    b374:	4000f400 	.word	0x4000f400

0000b378 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b378:	b510      	push	{r4, lr}
    b37a:	2002      	movs	r0, #2
    b37c:	f000 f982 	bl	b684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b380:	4904      	ldr	r1, [pc, #16]	; (b394 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b382:	2001      	movs	r0, #1
    b384:	7008      	strb	r0, [r1, #0]
    b386:	f000 f859 	bl	b43c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b38a:	4903      	ldr	r1, [pc, #12]	; (b398 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b38c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b390:	6008      	str	r0, [r1, #0]
    b392:	bd10      	pop	{r4, pc}
    b394:	2000033d 	.word	0x2000033d
    b398:	4001f504 	.word	0x4001f504

0000b39c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b39c:	4803      	ldr	r0, [pc, #12]	; (b3ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b39e:	2100      	movs	r1, #0
    b3a0:	7001      	strb	r1, [r0, #0]
    b3a2:	7041      	strb	r1, [r0, #1]
    b3a4:	2110      	movs	r1, #16
    b3a6:	7081      	strb	r1, [r0, #2]
    b3a8:	4770      	bx	lr
    b3aa:	0000      	.short	0x0000
    b3ac:	2000033d 	.word	0x2000033d

0000b3b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b3b0:	4807      	ldr	r0, [pc, #28]	; (b3d0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b3b2:	b510      	push	{r4, lr}
    b3b4:	7801      	ldrb	r1, [r0, #0]
    b3b6:	b141      	cbz	r1, b3ca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b3b8:	f000 f832 	bl	b420 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b3bc:	b118      	cbz	r0, b3c6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b3be:	4805      	ldr	r0, [pc, #20]	; (b3d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b3c0:	6800      	ldr	r0, [r0, #0]
    b3c2:	b2c0      	uxtb	r0, r0
    b3c4:	bd10      	pop	{r4, pc}
    b3c6:	2010      	movs	r0, #16
    b3c8:	bd10      	pop	{r4, pc}
    b3ca:	7880      	ldrb	r0, [r0, #2]
    b3cc:	bd10      	pop	{r4, pc}
    b3ce:	0000      	.short	0x0000
    b3d0:	2000033d 	.word	0x2000033d
    b3d4:	4000f400 	.word	0x4000f400

0000b3d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b3d8:	4808      	ldr	r0, [pc, #32]	; (b3fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b3da:	b510      	push	{r4, lr}
    b3dc:	7801      	ldrb	r1, [r0, #0]
    b3de:	b159      	cbz	r1, b3f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b3e0:	4807      	ldr	r0, [pc, #28]	; (b400 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b3e2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b3e6:	b128      	cbz	r0, b3f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b3e8:	f000 f80c 	bl	b404 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b3ec:	2800      	cmp	r0, #0
    b3ee:	d000      	beq.n	b3f2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b3f0:	2001      	movs	r0, #1
    b3f2:	bd10      	pop	{r4, pc}
    b3f4:	2002      	movs	r0, #2
    b3f6:	bd10      	pop	{r4, pc}
    b3f8:	7840      	ldrb	r0, [r0, #1]
    b3fa:	bd10      	pop	{r4, pc}
    b3fc:	2000033d 	.word	0x2000033d
    b400:	4000f000 	.word	0x4000f000
    b404:	4805      	ldr	r0, [pc, #20]	; (b41c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b406:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b40a:	b111      	cbz	r1, b412 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b40c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b410:	b108      	cbz	r0, b416 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b412:	2000      	movs	r0, #0
    b414:	4770      	bx	lr
    b416:	2001      	movs	r0, #1
    b418:	4770      	bx	lr
    b41a:	0000      	.short	0x0000
    b41c:	4000f000 	.word	0x4000f000
    b420:	4805      	ldr	r0, [pc, #20]	; (b438 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b422:	b510      	push	{r4, lr}
    b424:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b428:	b120      	cbz	r0, b434 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b42a:	f7ff ffeb 	bl	b404 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b42e:	b108      	cbz	r0, b434 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b430:	2001      	movs	r0, #1
    b432:	bd10      	pop	{r4, pc}
    b434:	2000      	movs	r0, #0
    b436:	bd10      	pop	{r4, pc}
    b438:	4000f000 	.word	0x4000f000
    b43c:	4804      	ldr	r0, [pc, #16]	; (b450 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b43e:	2100      	movs	r1, #0
    b440:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b444:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b448:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b44c:	4770      	bx	lr
    b44e:	0000      	.short	0x0000
    b450:	4000f000 	.word	0x4000f000

0000b454 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b458:	4604      	mov	r4, r0
    b45a:	461e      	mov	r6, r3
    b45c:	4690      	mov	r8, r2
    b45e:	460f      	mov	r7, r1
    b460:	2001      	movs	r0, #1
    b462:	f000 f90f 	bl	b684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b466:	4d1e      	ldr	r5, [pc, #120]	; (b4e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b468:	481e      	ldr	r0, [pc, #120]	; (b4e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b46a:	f004 0103 	and.w	r1, r4, #3
    b46e:	712e      	strb	r6, [r5, #4]
    b470:	6800      	ldr	r0, [r0, #0]
    b472:	0432      	lsls	r2, r6, #16
    b474:	f361 0007 	bfi	r0, r1, #0, #8
    b478:	f366 200f 	bfi	r0, r6, #8, #8
    b47c:	0c00      	lsrs	r0, r0, #16
    b47e:	4e1a      	ldr	r6, [pc, #104]	; (b4e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b480:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b484:	4308      	orrs	r0, r1
    b486:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b48a:	4818      	ldr	r0, [pc, #96]	; (b4ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b48c:	6007      	str	r7, [r0, #0]
    b48e:	f001 fddd 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b492:	b938      	cbnz	r0, b4a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b494:	4815      	ldr	r0, [pc, #84]	; (b4ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b496:	3010      	adds	r0, #16
    b498:	6801      	ldr	r1, [r0, #0]
    b49a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b49e:	ea41 0108 	orr.w	r1, r1, r8
    b4a2:	6001      	str	r1, [r0, #0]
    b4a4:	f000 f8e4 	bl	b670 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b4a8:	b10c      	cbz	r4, b4ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b4aa:	2c04      	cmp	r4, #4
    b4ac:	d107      	bne.n	b4be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b4ae:	4811      	ldr	r0, [pc, #68]	; (b4f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b4b0:	490d      	ldr	r1, [pc, #52]	; (b4e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b4b2:	4a0f      	ldr	r2, [pc, #60]	; (b4f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b4b4:	1d09      	adds	r1, r1, #4
    b4b6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b4ba:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b4be:	2001      	movs	r0, #1
    b4c0:	7068      	strb	r0, [r5, #1]
    b4c2:	70ec      	strb	r4, [r5, #3]
    b4c4:	b11c      	cbz	r4, b4ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b4c6:	2c01      	cmp	r4, #1
    b4c8:	d001      	beq.n	b4ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b4ca:	2c02      	cmp	r4, #2
    b4cc:	d106      	bne.n	b4dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b4ce:	7028      	strb	r0, [r5, #0]
    b4d0:	2100      	movs	r1, #0
    b4d2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b4d6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b4da:	6030      	str	r0, [r6, #0]
    b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e0:	20000340 	.word	0x20000340
    b4e4:	0000b680 	.word	0x0000b680
    b4e8:	4000f000 	.word	0x4000f000
    b4ec:	4000f508 	.word	0x4000f508
    b4f0:	4000f100 	.word	0x4000f100
    b4f4:	4001f088 	.word	0x4001f088

0000b4f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b4f8:	b570      	push	{r4, r5, r6, lr}
    b4fa:	4a1c      	ldr	r2, [pc, #112]	; (b56c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b4fc:	7853      	ldrb	r3, [r2, #1]
    b4fe:	b1a3      	cbz	r3, b52a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b500:	4b1b      	ldr	r3, [pc, #108]	; (b570 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b502:	6019      	str	r1, [r3, #0]
    b504:	1d19      	adds	r1, r3, #4
    b506:	6008      	str	r0, [r1, #0]
    b508:	2501      	movs	r5, #1
    b50a:	7095      	strb	r5, [r2, #2]
    b50c:	4610      	mov	r0, r2
    b50e:	78d6      	ldrb	r6, [r2, #3]
    b510:	4b18      	ldr	r3, [pc, #96]	; (b574 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b512:	7800      	ldrb	r0, [r0, #0]
    b514:	4c18      	ldr	r4, [pc, #96]	; (b578 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b516:	2100      	movs	r1, #0
    b518:	b156      	cbz	r6, b530 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b51a:	2e04      	cmp	r6, #4
    b51c:	d01b      	beq.n	b556 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b51e:	b308      	cbz	r0, b564 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b520:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b524:	0668      	lsls	r0, r5, #25
    b526:	6018      	str	r0, [r3, #0]
    b528:	bd70      	pop	{r4, r5, r6, pc}
    b52a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b52e:	e01a      	b.n	b566 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b530:	b178      	cbz	r0, b552 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b532:	4620      	mov	r0, r4
    b534:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b538:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b53c:	601e      	str	r6, [r3, #0]
    b53e:	1271      	asrs	r1, r6, #9
    b540:	f005 fd12 	bl	10f68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b544:	2800      	cmp	r0, #0
    b546:	d0ef      	beq.n	b528 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b548:	6065      	str	r5, [r4, #4]
    b54a:	480a      	ldr	r0, [pc, #40]	; (b574 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b54c:	1d00      	adds	r0, r0, #4
    b54e:	6006      	str	r6, [r0, #0]
    b550:	bd70      	pop	{r4, r5, r6, pc}
    b552:	21b3      	movs	r1, #179	; 0xb3
    b554:	e007      	b.n	b566 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b556:	7015      	strb	r5, [r2, #0]
    b558:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b55c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b560:	6025      	str	r5, [r4, #0]
    b562:	bd70      	pop	{r4, r5, r6, pc}
    b564:	21c6      	movs	r1, #198	; 0xc6
    b566:	203c      	movs	r0, #60	; 0x3c
    b568:	f7f9 fb4e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b56c:	20000340 	.word	0x20000340
    b570:	4000f50c 	.word	0x4000f50c
    b574:	4001f504 	.word	0x4001f504
    b578:	4000f000 	.word	0x4000f000

0000b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b57c:	b570      	push	{r4, r5, r6, lr}
    b57e:	4d05      	ldr	r5, [pc, #20]	; (b594 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b580:	2400      	movs	r4, #0
    b582:	7828      	ldrb	r0, [r5, #0]
    b584:	b110      	cbz	r0, b58c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b586:	f000 f873 	bl	b670 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b58a:	702c      	strb	r4, [r5, #0]
    b58c:	706c      	strb	r4, [r5, #1]
    b58e:	70ac      	strb	r4, [r5, #2]
    b590:	bd70      	pop	{r4, r5, r6, pc}
    b592:	0000      	.short	0x0000
    b594:	20000340 	.word	0x20000340

0000b598 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b598:	4802      	ldr	r0, [pc, #8]	; (b5a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b59a:	2100      	movs	r1, #0
    b59c:	7001      	strb	r1, [r0, #0]
    b59e:	7041      	strb	r1, [r0, #1]
    b5a0:	7081      	strb	r1, [r0, #2]
    b5a2:	4770      	bx	lr
    b5a4:	20000340 	.word	0x20000340

0000b5a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b5a8:	480b      	ldr	r0, [pc, #44]	; (b5d8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b5aa:	b510      	push	{r4, lr}
    b5ac:	7800      	ldrb	r0, [r0, #0]
    b5ae:	b158      	cbz	r0, b5c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b5b0:	f44f 7182 	mov.w	r1, #260	; 0x104
    b5b4:	4809      	ldr	r0, [pc, #36]	; (b5dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b5b6:	f005 fcd7 	bl	10f68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b5ba:	b140      	cbz	r0, b5ce <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b5bc:	4808      	ldr	r0, [pc, #32]	; (b5e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b5be:	6800      	ldr	r0, [r0, #0]
    b5c0:	2800      	cmp	r0, #0
    b5c2:	d000      	beq.n	b5c6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b5c4:	2001      	movs	r0, #1
    b5c6:	bd10      	pop	{r4, pc}
    b5c8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    b5cc:	e001      	b.n	b5d2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b5ce:	f240 11eb 	movw	r1, #491	; 0x1eb
    b5d2:	203c      	movs	r0, #60	; 0x3c
    b5d4:	f7f9 fb18 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5d8:	20000340 	.word	0x20000340
    b5dc:	4000f000 	.word	0x4000f000
    b5e0:	4000f400 	.word	0x4000f400

0000b5e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b5e4:	4801      	ldr	r0, [pc, #4]	; (b5ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b5e6:	2101      	movs	r1, #1
    b5e8:	6081      	str	r1, [r0, #8]
    b5ea:	4770      	bx	lr
    b5ec:	4000f000 	.word	0x4000f000

0000b5f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5f4:	481b      	ldr	r0, [pc, #108]	; (b664 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b5f6:	7800      	ldrb	r0, [r0, #0]
    b5f8:	b1d8      	cbz	r0, b632 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b5fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; b668 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b5fe:	f44f 7682 	mov.w	r6, #260	; 0x104
    b602:	4631      	mov	r1, r6
    b604:	4640      	mov	r0, r8
    b606:	f005 fcaf 	bl	10f68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b60a:	2800      	cmp	r0, #0
    b60c:	d128      	bne.n	b660 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b60e:	2002      	movs	r0, #2
    b610:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b614:	4c15      	ldr	r4, [pc, #84]	; (b66c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b616:	6820      	ldr	r0, [r4, #0]
    b618:	43c0      	mvns	r0, r0
    b61a:	f340 1500 	sbfx	r5, r0, #4, #1
    b61e:	6820      	ldr	r0, [r4, #0]
    b620:	f040 0010 	orr.w	r0, r0, #16
    b624:	6020      	str	r0, [r4, #0]
    b626:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b62a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b62e:	1c6d      	adds	r5, r5, #1
    b630:	e008      	b.n	b644 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b632:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    b636:	203c      	movs	r0, #60	; 0x3c
    b638:	f7f9 fae6 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b63c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b640:	f7f9 f93c 	bl	48bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b644:	4631      	mov	r1, r6
    b646:	4640      	mov	r0, r8
    b648:	f005 fc8e 	bl	10f68 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b64c:	2800      	cmp	r0, #0
    b64e:	d0f5      	beq.n	b63c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b650:	b91d      	cbnz	r5, b65a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b652:	6820      	ldr	r0, [r4, #0]
    b654:	f020 0010 	bic.w	r0, r0, #16
    b658:	6020      	str	r0, [r4, #0]
    b65a:	2002      	movs	r0, #2
    b65c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    b660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b664:	20000340 	.word	0x20000340
    b668:	4000f000 	.word	0x4000f000
    b66c:	e000ed10 	.word	0xe000ed10
    b670:	4902      	ldr	r1, [pc, #8]	; (b67c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    b672:	4801      	ldr	r0, [pc, #4]	; (b678 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    b674:	6008      	str	r0, [r1, #0]
    b676:	4770      	bx	lr
    b678:	02020000 	.word	0x02020000
    b67c:	4001f508 	.word	0x4001f508
    b680:	00010000 	.word	0x00010000

0000b684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b684:	b510      	push	{r4, lr}
    b686:	4604      	mov	r4, r0
    b688:	f000 f820 	bl	b6cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    b68c:	2c00      	cmp	r4, #0
    b68e:	d00e      	beq.n	b6ae <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    b690:	4a0b      	ldr	r2, [pc, #44]	; (b6c0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b692:	480b      	ldr	r0, [pc, #44]	; (b6c0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b694:	490b      	ldr	r1, [pc, #44]	; (b6c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b696:	3214      	adds	r2, #20
    b698:	2c01      	cmp	r4, #1
    b69a:	d005      	beq.n	b6a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    b69c:	2c02      	cmp	r4, #2
    b69e:	d007      	beq.n	b6b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    b6a0:	2181      	movs	r1, #129	; 0x81
    b6a2:	203d      	movs	r0, #61	; 0x3d
    b6a4:	f7f9 fab0 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6a8:	2302      	movs	r3, #2
    b6aa:	6003      	str	r3, [r0, #0]
    b6ac:	6011      	str	r1, [r2, #0]
    b6ae:	bd10      	pop	{r4, pc}
    b6b0:	2303      	movs	r3, #3
    b6b2:	6003      	str	r3, [r0, #0]
    b6b4:	6011      	str	r1, [r2, #0]
    b6b6:	4904      	ldr	r1, [pc, #16]	; (b6c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b6b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b6bc:	6008      	str	r0, [r1, #0]
    b6be:	bd10      	pop	{r4, pc}
    b6c0:	4000f500 	.word	0x4000f500
    b6c4:	200018b9 	.word	0x200018b9
    b6c8:	4001f504 	.word	0x4001f504
    b6cc:	4805      	ldr	r0, [pc, #20]	; (b6e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b6ce:	b510      	push	{r4, lr}
    b6d0:	2100      	movs	r1, #0
    b6d2:	6001      	str	r1, [r0, #0]
    b6d4:	6001      	str	r1, [r0, #0]
    b6d6:	f7ff ff51 	bl	b57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b6da:	4903      	ldr	r1, [pc, #12]	; (b6e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b6dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b6e0:	6008      	str	r0, [r1, #0]
    b6e2:	bd10      	pop	{r4, pc}
    b6e4:	4000f500 	.word	0x4000f500
    b6e8:	4001f508 	.word	0x4001f508

0000b6ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b6ec:	4805      	ldr	r0, [pc, #20]	; (b704 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b6ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b6f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b6f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b6fa:	2100      	movs	r1, #0
    b6fc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b700:	4770      	bx	lr
    b702:	0000      	.short	0x0000
    b704:	40001000 	.word	0x40001000

0000b708 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b708:	4904      	ldr	r1, [pc, #16]	; (b71c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b70a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b70e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b712:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b716:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b71a:	4770      	bx	lr
    b71c:	40001000 	.word	0x40001000

0000b720 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b720:	4801      	ldr	r0, [pc, #4]	; (b728 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b722:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b726:	4770      	bx	lr
    b728:	20001368 	.word	0x20001368

0000b72c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    b72c:	4902      	ldr	r1, [pc, #8]	; (b738 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    b72e:	5c08      	ldrb	r0, [r1, r0]
    b730:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b734:	4770      	bx	lr
    b736:	0000      	.short	0x0000
    b738:	0000c45a 	.word	0x0000c45a

0000b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b73e:	4c24      	ldr	r4, [pc, #144]	; (b7d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b740:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b744:	f010 0f10 	tst.w	r0, #16
    b748:	d001      	beq.n	b74e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b74a:	2701      	movs	r7, #1
    b74c:	e000      	b.n	b750 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b74e:	2700      	movs	r7, #0
    b750:	2010      	movs	r0, #16
    b752:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b756:	2002      	movs	r0, #2
    b758:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b75c:	481d      	ldr	r0, [pc, #116]	; (b7d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b75e:	2500      	movs	r5, #0
    b760:	491d      	ldr	r1, [pc, #116]	; (b7d8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b762:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b766:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    b76a:	6008      	str	r0, [r1, #0]
    b76c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b770:	f44f 7688 	mov.w	r6, #272	; 0x110
    b774:	f010 0fff 	tst.w	r0, #255	; 0xff
    b778:	d019      	beq.n	b7ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    b77a:	20ff      	movs	r0, #255	; 0xff
    b77c:	f88d 0000 	strb.w	r0, [sp]
    b780:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b784:	2001      	movs	r0, #1
    b786:	6120      	str	r0, [r4, #16]
    b788:	e005      	b.n	b796 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b78a:	bf00      	nop
    b78c:	f89d 0000 	ldrb.w	r0, [sp]
    b790:	1e40      	subs	r0, r0, #1
    b792:	f88d 0000 	strb.w	r0, [sp]
    b796:	f89d 0000 	ldrb.w	r0, [sp]
    b79a:	b128      	cbz	r0, b7a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    b79c:	4631      	mov	r1, r6
    b79e:	4620      	mov	r0, r4
    b7a0:	f005 fc11 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b7a4:	2800      	cmp	r0, #0
    b7a6:	d0f1      	beq.n	b78c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    b7a8:	f89d 0000 	ldrb.w	r0, [sp]
    b7ac:	b158      	cbz	r0, b7c6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    b7ae:	f000 fc49 	bl	c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b7b2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b7b6:	f000 fdd1 	bl	c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b7ba:	2f00      	cmp	r7, #0
    b7bc:	d002      	beq.n	b7c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    b7be:	2010      	movs	r0, #16
    b7c0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7c6:	f640 0183 	movw	r1, #2179	; 0x883
    b7ca:	203e      	movs	r0, #62	; 0x3e
    b7cc:	f7f9 fa1c 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7d0:	40001000 	.word	0x40001000
    b7d4:	20001368 	.word	0x20001368
    b7d8:	4001f508 	.word	0x4001f508

0000b7dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7e0:	4d18      	ldr	r5, [pc, #96]	; (b844 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    b7e2:	4607      	mov	r7, r0
    b7e4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b7e8:	07c2      	lsls	r2, r0, #31
    b7ea:	d00f      	beq.n	b80c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    b7ec:	4c16      	ldr	r4, [pc, #88]	; (b848 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    b7ee:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    b7f2:	f042 0201 	orr.w	r2, r2, #1
    b7f6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    b7fa:	f040 0002 	orr.w	r0, r0, #2
    b7fe:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b802:	2601      	movs	r6, #1
    b804:	b13f      	cbz	r7, b816 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    b806:	2f01      	cmp	r7, #1
    b808:	d00b      	beq.n	b822 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    b80a:	e010      	b.n	b82e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b80c:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    b810:	203e      	movs	r0, #62	; 0x3e
    b812:	f7f9 f9f9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b816:	4608      	mov	r0, r1
    b818:	f000 fdfa 	bl	c410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b81c:	726e      	strb	r6, [r5, #9]
    b81e:	6026      	str	r6, [r4, #0]
    b820:	e005      	b.n	b82e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b822:	4608      	mov	r0, r1
    b824:	f000 fdda 	bl	c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b828:	2002      	movs	r0, #2
    b82a:	7268      	strb	r0, [r5, #9]
    b82c:	6066      	str	r6, [r4, #4]
    b82e:	4807      	ldr	r0, [pc, #28]	; (b84c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b830:	64c6      	str	r6, [r0, #76]	; 0x4c
    b832:	4806      	ldr	r0, [pc, #24]	; (b84c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b834:	300c      	adds	r0, #12
    b836:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b83a:	4638      	mov	r0, r7
    b83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b840:	f000 bd5e 	b.w	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b844:	20001368 	.word	0x20001368
    b848:	40001000 	.word	0x40001000
    b84c:	40008000 	.word	0x40008000

0000b850 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b854:	4c2c      	ldr	r4, [pc, #176]	; (b908 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    b856:	0006      	movs	r6, r0
    b858:	4d2c      	ldr	r5, [pc, #176]	; (b90c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    b85a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b85e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b910 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    b862:	f040 0002 	orr.w	r0, r0, #2
    b866:	4689      	mov	r9, r1
    b868:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b86c:	f04f 0700 	mov.w	r7, #0
    b870:	d002      	beq.n	b878 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    b872:	2e01      	cmp	r6, #1
    b874:	d020      	beq.n	b8b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    b876:	e036      	b.n	b8e6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b878:	4608      	mov	r0, r1
    b87a:	f000 fdc9 	bl	c410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b87e:	2001      	movs	r0, #1
    b880:	7260      	strb	r0, [r4, #9]
    b882:	79e0      	ldrb	r0, [r4, #7]
    b884:	2801      	cmp	r0, #1
    b886:	d105      	bne.n	b894 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b888:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b88c:	f040 0008 	orr.w	r0, r0, #8
    b890:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b894:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b896:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b89a:	62a0      	str	r0, [r4, #40]	; 0x28
    b89c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b8a0:	f8c8 0000 	str.w	r0, [r8]
    b8a4:	491b      	ldr	r1, [pc, #108]	; (b914 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    b8a6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    b8aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b8ae:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    b8b2:	fbb0 f7f1 	udiv	r7, r0, r1
    b8b6:	e016      	b.n	b8e6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b8b8:	4608      	mov	r0, r1
    b8ba:	f000 fd8f 	bl	c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b8be:	2002      	movs	r0, #2
    b8c0:	7260      	strb	r0, [r4, #9]
    b8c2:	79e0      	ldrb	r0, [r4, #7]
    b8c4:	2801      	cmp	r0, #1
    b8c6:	d105      	bne.n	b8d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b8c8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b8cc:	f040 0004 	orr.w	r0, r0, #4
    b8d0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b8d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b8d6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b8da:	62a0      	str	r0, [r4, #40]	; 0x28
    b8dc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b8e0:	f8c8 0000 	str.w	r0, [r8]
    b8e4:	2729      	movs	r7, #41	; 0x29
    b8e6:	f000 fc19 	bl	c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b8ea:	f001 fa83 	bl	cdf4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b8ee:	b120      	cbz	r0, b8fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    b8f0:	f7ff ff24 	bl	b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b8f4:	2000      	movs	r0, #0
    b8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8fa:	2100      	movs	r1, #0
    b8fc:	4630      	mov	r0, r6
    b8fe:	f000 fcff 	bl	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b902:	4638      	mov	r0, r7
    b904:	e7f7      	b.n	b8f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    b906:	0000      	.short	0x0000
    b908:	20001368 	.word	0x20001368
    b90c:	40001000 	.word	0x40001000
    b910:	4001f504 	.word	0x4001f504
    b914:	0000c454 	.word	0x0000c454

0000b918 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b918:	4a02      	ldr	r2, [pc, #8]	; (b924 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b91a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b91c:	6003      	str	r3, [r0, #0]
    b91e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b920:	6008      	str	r0, [r1, #0]
    b922:	4770      	bx	lr
    b924:	20001368 	.word	0x20001368

0000b928 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b928:	b510      	push	{r4, lr}
    b92a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b92c:	4901      	ldr	r1, [pc, #4]	; (b934 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b92e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b932:	bd10      	pop	{r4, pc}
    b934:	20001358 	.word	0x20001358

0000b938 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b938:	490f      	ldr	r1, [pc, #60]	; (b978 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b93a:	b510      	push	{r4, lr}
    b93c:	69ca      	ldr	r2, [r1, #28]
    b93e:	4282      	cmp	r2, r0
    b940:	d302      	bcc.n	b948 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b942:	f640 1117 	movw	r1, #2327	; 0x917
    b946:	e00b      	b.n	b960 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b948:	2201      	movs	r2, #1
    b94a:	730a      	strb	r2, [r1, #12]
    b94c:	6108      	str	r0, [r1, #16]
    b94e:	490b      	ldr	r1, [pc, #44]	; (b97c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b950:	644a      	str	r2, [r1, #68]	; 0x44
    b952:	1d0a      	adds	r2, r1, #4
    b954:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b958:	4283      	cmp	r3, r0
    b95a:	d304      	bcc.n	b966 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b95c:	f44f 6112 	mov.w	r1, #2336	; 0x920
    b960:	203e      	movs	r0, #62	; 0x3e
    b962:	f7f9 f951 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b966:	2300      	movs	r3, #0
    b968:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b96c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b974:	f000 bc98 	b.w	c2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b978:	20001368 	.word	0x20001368
    b97c:	40008000 	.word	0x40008000

0000b980 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b980:	b570      	push	{r4, r5, r6, lr}
    b982:	4c0f      	ldr	r4, [pc, #60]	; (b9c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b984:	4603      	mov	r3, r0
    b986:	2002      	movs	r0, #2
    b988:	7320      	strb	r0, [r4, #12]
    b98a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    b98e:	2096      	movs	r0, #150	; 0x96
    b990:	f894 1020 	ldrb.w	r1, [r4, #32]
    b994:	7d22      	ldrb	r2, [r4, #20]
    b996:	2d01      	cmp	r5, #1
    b998:	d00e      	beq.n	b9b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b99a:	f000 fd97 	bl	c4cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b99e:	6120      	str	r0, [r4, #16]
    b9a0:	4808      	ldr	r0, [pc, #32]	; (b9c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b9a2:	2100      	movs	r1, #0
    b9a4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b9a8:	6921      	ldr	r1, [r4, #16]
    b9aa:	69e0      	ldr	r0, [r4, #28]
    b9ac:	4408      	add	r0, r1
    b9ae:	4905      	ldr	r1, [pc, #20]	; (b9c4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b9b0:	1d09      	adds	r1, r1, #4
    b9b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b9b6:	bd70      	pop	{r4, r5, r6, pc}
    b9b8:	f000 fda6 	bl	c508 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b9bc:	e7ef      	b.n	b99e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    b9be:	0000      	.short	0x0000
    b9c0:	20001368 	.word	0x20001368
    b9c4:	40008000 	.word	0x40008000

0000b9c8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b9c8:	b510      	push	{r4, lr}
    b9ca:	f001 fb5b 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b9ce:	2800      	cmp	r0, #0
    b9d0:	d006      	beq.n	b9e0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b9d2:	4804      	ldr	r0, [pc, #16]	; (b9e4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b9d4:	6801      	ldr	r1, [r0, #0]
    b9d6:	f021 0101 	bic.w	r1, r1, #1
    b9da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b9de:	6001      	str	r1, [r0, #0]
    b9e0:	bd10      	pop	{r4, pc}
    b9e2:	0000      	.short	0x0000
    b9e4:	40001774 	.word	0x40001774

0000b9e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9ec:	2238      	movs	r2, #56	; 0x38
    b9ee:	2100      	movs	r1, #0
    b9f0:	4813      	ldr	r0, [pc, #76]	; (ba40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b9f2:	f001 fbe5 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b9f6:	f000 fcb1 	bl	c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b9fa:	f001 fafc 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b9fe:	4d11      	ldr	r5, [pc, #68]	; (ba44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ba00:	4e10      	ldr	r6, [pc, #64]	; (ba44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ba02:	2400      	movs	r4, #0
    ba04:	4f0f      	ldr	r7, [pc, #60]	; (ba44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ba06:	3508      	adds	r5, #8
    ba08:	3610      	adds	r6, #16
    ba0a:	b928      	cbnz	r0, ba18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ba0c:	f001 fb0a 	bl	d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ba10:	b910      	cbnz	r0, ba18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ba12:	f001 fb11 	bl	d038 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ba16:	b108      	cbz	r0, ba1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ba18:	2224      	movs	r2, #36	; 0x24
    ba1a:	e006      	b.n	ba2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ba1c:	f001 fb4c 	bl	d0b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ba20:	b910      	cbnz	r0, ba28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ba22:	f001 fb3f 	bl	d0a4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ba26:	b140      	cbz	r0, ba3a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ba28:	2240      	movs	r2, #64	; 0x40
    ba2a:	21ff      	movs	r1, #255	; 0xff
    ba2c:	4638      	mov	r0, r7
    ba2e:	f001 fbc7 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ba32:	602c      	str	r4, [r5, #0]
    ba34:	6034      	str	r4, [r6, #0]
    ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba3a:	2238      	movs	r2, #56	; 0x38
    ba3c:	e7f5      	b.n	ba2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ba3e:	0000      	.short	0x0000
    ba40:	20001368 	.word	0x20001368
    ba44:	40000e00 	.word	0x40000e00

0000ba48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ba48:	4801      	ldr	r0, [pc, #4]	; (ba50 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    ba4a:	69c0      	ldr	r0, [r0, #28]
    ba4c:	4770      	bx	lr
    ba4e:	0000      	.short	0x0000
    ba50:	20001368 	.word	0x20001368

0000ba54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ba54:	4801      	ldr	r0, [pc, #4]	; (ba5c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ba56:	6980      	ldr	r0, [r0, #24]
    ba58:	4770      	bx	lr
    ba5a:	0000      	.short	0x0000
    ba5c:	20001368 	.word	0x20001368

0000ba60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ba60:	b510      	push	{r4, lr}
    ba62:	f000 fc2f 	bl	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ba66:	f7ff fe69 	bl	b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ba6a:	f7f8 ff7d 	bl	4968 <mpsl_fem_disable>
    ba6e:	b130      	cbz	r0, ba7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ba70:	1c40      	adds	r0, r0, #1
    ba72:	d004      	beq.n	ba7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ba74:	f240 5146 	movw	r1, #1350	; 0x546
    ba78:	203e      	movs	r0, #62	; 0x3e
    ba7a:	f7f9 f8c5 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba7e:	480f      	ldr	r0, [pc, #60]	; (babc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ba80:	4a0f      	ldr	r2, [pc, #60]	; (bac0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    ba82:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ba84:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    ba88:	6011      	str	r1, [r2, #0]
    ba8a:	2400      	movs	r4, #0
    ba8c:	6284      	str	r4, [r0, #40]	; 0x28
    ba8e:	7304      	strb	r4, [r0, #12]
    ba90:	61c4      	str	r4, [r0, #28]
    ba92:	6184      	str	r4, [r0, #24]
    ba94:	f000 fc16 	bl	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ba98:	480a      	ldr	r0, [pc, #40]	; (bac4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ba9a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ba9e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    baa2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    baa6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    baaa:	2001      	movs	r0, #1
    baac:	f005 fa7a 	bl	10fa4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bab4:	2001      	movs	r0, #1
    bab6:	f005 ba68 	b.w	10f8a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    baba:	0000      	.short	0x0000
    babc:	20001368 	.word	0x20001368
    bac0:	4001f508 	.word	0x4001f508
    bac4:	40008000 	.word	0x40008000

0000bac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	2001      	movs	r0, #1
    bacc:	f005 fa6a 	bl	10fa4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bad0:	4c37      	ldr	r4, [pc, #220]	; (bbb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    bad2:	2000      	movs	r0, #0
    bad4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bad8:	2001      	movs	r0, #1
    bada:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bade:	f001 fac1 	bl	d064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bae2:	4d34      	ldr	r5, [pc, #208]	; (bbb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bae4:	b118      	cbz	r0, baee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    bae6:	6828      	ldr	r0, [r5, #0]
    bae8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    baec:	6028      	str	r0, [r5, #0]
    baee:	f001 faad 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    baf2:	b128      	cbz	r0, bb00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    baf4:	6828      	ldr	r0, [r5, #0]
    baf6:	4930      	ldr	r1, [pc, #192]	; (bbb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    baf8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bafc:	4308      	orrs	r0, r1
    bafe:	6028      	str	r0, [r5, #0]
    bb00:	f001 fac0 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bb04:	b138      	cbz	r0, bb16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    bb06:	482b      	ldr	r0, [pc, #172]	; (bbb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bb08:	1d00      	adds	r0, r0, #4
    bb0a:	6801      	ldr	r1, [r0, #0]
    bb0c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bb10:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bb14:	6001      	str	r1, [r0, #0]
    bb16:	4927      	ldr	r1, [pc, #156]	; (bbb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bb18:	4828      	ldr	r0, [pc, #160]	; (bbbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bb1a:	313c      	adds	r1, #60	; 0x3c
    bb1c:	6008      	str	r0, [r1, #0]
    bb1e:	f7f8 ff59 	bl	49d4 <mpsl_fem_device_config_254_apply_get>
    bb22:	b140      	cbz	r0, bb36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bb24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bb28:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bb2c:	1c41      	adds	r1, r0, #1
    bb2e:	d002      	beq.n	bb36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bb30:	4920      	ldr	r1, [pc, #128]	; (bbb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bb32:	3110      	adds	r1, #16
    bb34:	6008      	str	r0, [r1, #0]
    bb36:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bb3a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bb3c:	1c41      	adds	r1, r0, #1
    bb3e:	d004      	beq.n	bb4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    bb40:	491f      	ldr	r1, [pc, #124]	; (bbc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bb42:	680a      	ldr	r2, [r1, #0]
    bb44:	f360 4217 	bfi	r2, r0, #16, #8
    bb48:	600a      	str	r2, [r1, #0]
    bb4a:	f240 1103 	movw	r1, #259	; 0x103
    bb4e:	f240 605b 	movw	r0, #1627	; 0x65b
    bb52:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bb56:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bb5a:	2001      	movs	r0, #1
    bb5c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bb60:	f000 f842 	bl	bbe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bb64:	f240 2001 	movw	r0, #513	; 0x201
    bb68:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bb6c:	2002      	movs	r0, #2
    bb6e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bb72:	4914      	ldr	r1, [pc, #80]	; (bbc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bb74:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bb78:	6008      	str	r0, [r1, #0]
    bb7a:	4913      	ldr	r1, [pc, #76]	; (bbc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bb7c:	2000      	movs	r0, #0
    bb7e:	4d13      	ldr	r5, [pc, #76]	; (bbcc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bb80:	8608      	strh	r0, [r1, #48]	; 0x30
    bb82:	3110      	adds	r1, #16
    bb84:	61c8      	str	r0, [r1, #28]
    bb86:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bb8a:	7028      	strb	r0, [r5, #0]
    bb8c:	2001      	movs	r0, #1
    bb8e:	f005 f9fc 	bl	10f8a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bb92:	2010      	movs	r0, #16
    bb94:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bb98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb9c:	2002      	movs	r0, #2
    bb9e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bba2:	6868      	ldr	r0, [r5, #4]
    bba4:	2800      	cmp	r0, #0
    bba6:	d002      	beq.n	bbae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    bba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbac:	4700      	bx	r0
    bbae:	bd70      	pop	{r4, r5, r6, pc}
    bbb0:	40001000 	.word	0x40001000
    bbb4:	4000173c 	.word	0x4000173c
    bbb8:	80000096 	.word	0x80000096
    bbbc:	8900002c 	.word	0x8900002c
    bbc0:	4000158c 	.word	0x4000158c
    bbc4:	4001f504 	.word	0x4001f504
    bbc8:	20001358 	.word	0x20001358
    bbcc:	200002f4 	.word	0x200002f4

0000bbd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bbd0:	4901      	ldr	r1, [pc, #4]	; (bbd8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bbd2:	7548      	strb	r0, [r1, #21]
    bbd4:	4770      	bx	lr
    bbd6:	0000      	.short	0x0000
    bbd8:	20001368 	.word	0x20001368

0000bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    bbdc:	4901      	ldr	r1, [pc, #4]	; (bbe4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    bbde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bbe2:	4770      	bx	lr
    bbe4:	0000c4a8 	.word	0x0000c4a8

0000bbe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    bbe8:	4908      	ldr	r1, [pc, #32]	; (bc0c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    bbea:	b510      	push	{r4, lr}
    bbec:	7508      	strb	r0, [r1, #20]
    bbee:	4908      	ldr	r1, [pc, #32]	; (bc10 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    bbf0:	2801      	cmp	r0, #1
    bbf2:	d006      	beq.n	bc02 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    bbf4:	2802      	cmp	r0, #2
    bbf6:	d006      	beq.n	bc06 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    bbf8:	f640 5155 	movw	r1, #3413	; 0xd55
    bbfc:	203e      	movs	r0, #62	; 0x3e
    bbfe:	f7f9 f803 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc02:	2003      	movs	r0, #3
    bc04:	e000      	b.n	bc08 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    bc06:	2004      	movs	r0, #4
    bc08:	6008      	str	r0, [r1, #0]
    bc0a:	bd10      	pop	{r4, pc}
    bc0c:	20001368 	.word	0x20001368
    bc10:	40001510 	.word	0x40001510

0000bc14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bc14:	4905      	ldr	r1, [pc, #20]	; (bc2c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bc16:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bc1a:	4805      	ldr	r0, [pc, #20]	; (bc30 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bc1c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bc20:	f041 0101 	orr.w	r1, r1, #1
    bc24:	7001      	strb	r1, [r0, #0]
    bc26:	f000 ba3f 	b.w	c0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bc2a:	0000      	.short	0x0000
    bc2c:	40001000 	.word	0x40001000
    bc30:	20001368 	.word	0x20001368

0000bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    bc34:	4901      	ldr	r1, [pc, #4]	; (bc3c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    bc36:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bc3a:	4770      	bx	lr
    bc3c:	0000c4b4 	.word	0x0000c4b4

0000bc40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc44:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bce8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    bc48:	4d28      	ldr	r5, [pc, #160]	; (bcec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    bc4a:	460f      	mov	r7, r1
    bc4c:	0006      	movs	r6, r0
    bc4e:	4614      	mov	r4, r2
    bc50:	f04f 0801 	mov.w	r8, #1
    bc54:	d004      	beq.n	bc60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    bc56:	2e01      	cmp	r6, #1
    bc58:	d010      	beq.n	bc7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    bc5a:	f640 0114 	movw	r1, #2068	; 0x814
    bc5e:	e039      	b.n	bcd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    bc60:	4610      	mov	r0, r2
    bc62:	f000 fbd5 	bl	c410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bc66:	4822      	ldr	r0, [pc, #136]	; (bcf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    bc68:	f885 8009 	strb.w	r8, [r5, #9]
    bc6c:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    bc70:	4638      	mov	r0, r7
    bc72:	f000 fb7b 	bl	c36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    bc76:	4604      	mov	r4, r0
    bc78:	4648      	mov	r0, r9
    bc7a:	e00c      	b.n	bc96 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    bc7c:	4610      	mov	r0, r2
    bc7e:	f000 fbad 	bl	c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bc82:	2002      	movs	r0, #2
    bc84:	7268      	strb	r0, [r5, #9]
    bc86:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bc8a:	4638      	mov	r0, r7
    bc8c:	f000 fb6e 	bl	c36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    bc90:	4604      	mov	r4, r0
    bc92:	4815      	ldr	r0, [pc, #84]	; (bce8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    bc94:	1d00      	adds	r0, r0, #4
    bc96:	f000 fb27 	bl	c2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    bc9a:	4f16      	ldr	r7, [pc, #88]	; (bcf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bc9c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    bca0:	4916      	ldr	r1, [pc, #88]	; (bcfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    bca2:	4815      	ldr	r0, [pc, #84]	; (bcf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    bca4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    bca8:	2010      	movs	r0, #16
    bcaa:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    bcae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bcb0:	4913      	ldr	r1, [pc, #76]	; (bd00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    bcb2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bcb6:	62a8      	str	r0, [r5, #40]	; 0x28
    bcb8:	0138      	lsls	r0, r7, #4
    bcba:	6008      	str	r0, [r1, #0]
    bcbc:	f000 fa2e 	bl	c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    bcc0:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    bcc4:	480b      	ldr	r0, [pc, #44]	; (bcf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bcc6:	300c      	adds	r0, #12
    bcc8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bccc:	42a0      	cmp	r0, r4
    bcce:	d304      	bcc.n	bcda <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    bcd0:	f640 012a 	movw	r1, #2090	; 0x82a
    bcd4:	203e      	movs	r0, #62	; 0x3e
    bcd6:	f7f8 ff97 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcda:	4621      	mov	r1, r4
    bcdc:	4630      	mov	r0, r6
    bcde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bce2:	f000 bb0d 	b.w	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bce6:	0000      	.short	0x0000
    bce8:	40001000 	.word	0x40001000
    bcec:	20001368 	.word	0x20001368
    bcf0:	0000c454 	.word	0x0000c454
    bcf4:	40008000 	.word	0x40008000
    bcf8:	40008140 	.word	0x40008140
    bcfc:	4001f098 	.word	0x4001f098
    bd00:	4001f504 	.word	0x4001f504

0000bd04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bd04:	4b0d      	ldr	r3, [pc, #52]	; (bd3c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bd06:	b510      	push	{r4, lr}
    bd08:	71d8      	strb	r0, [r3, #7]
    bd0a:	729a      	strb	r2, [r3, #10]
    bd0c:	b151      	cbz	r1, bd24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bd0e:	2002      	movs	r0, #2
    bd10:	7218      	strb	r0, [r3, #8]
    bd12:	2801      	cmp	r0, #1
    bd14:	d008      	beq.n	bd28 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bd16:	2802      	cmp	r0, #2
    bd18:	d00f      	beq.n	bd3a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bd1a:	f640 213d 	movw	r1, #2621	; 0xa3d
    bd1e:	203e      	movs	r0, #62	; 0x3e
    bd20:	f7f8 ff72 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd24:	2001      	movs	r0, #1
    bd26:	e7f3      	b.n	bd10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bd28:	7a58      	ldrb	r0, [r3, #9]
    bd2a:	2802      	cmp	r0, #2
    bd2c:	d105      	bne.n	bd3a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bd2e:	f000 f97f 	bl	c030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    bd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd36:	f000 baad 	b.w	c294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    bd3a:	bd10      	pop	{r4, pc}
    bd3c:	20001368 	.word	0x20001368

0000bd40 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bd40:	4902      	ldr	r1, [pc, #8]	; (bd4c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bd42:	2000      	movs	r0, #0
    bd44:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bd48:	4770      	bx	lr
    bd4a:	0000      	.short	0x0000
    bd4c:	40008000 	.word	0x40008000

0000bd50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bd50:	4904      	ldr	r1, [pc, #16]	; (bd64 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    bd52:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    bd56:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    bd5a:	4249      	negs	r1, r1
    bd5c:	7001      	strb	r1, [r0, #0]
    bd5e:	2001      	movs	r0, #1
    bd60:	4770      	bx	lr
    bd62:	0000      	.short	0x0000
    bd64:	40001000 	.word	0x40001000

0000bd68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bd68:	4903      	ldr	r1, [pc, #12]	; (bd78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bd6a:	0e02      	lsrs	r2, r0, #24
    bd6c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bd70:	0200      	lsls	r0, r0, #8
    bd72:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bd76:	4770      	bx	lr
    bd78:	40001000 	.word	0x40001000

0000bd7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bd7c:	6800      	ldr	r0, [r0, #0]
    bd7e:	4903      	ldr	r1, [pc, #12]	; (bd8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bd80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bd84:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bd88:	4770      	bx	lr
    bd8a:	0000      	.short	0x0000
    bd8c:	40001000 	.word	0x40001000

0000bd90 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    bd90:	b510      	push	{r4, lr}
    bd92:	2200      	movs	r2, #0
    bd94:	2901      	cmp	r1, #1
    bd96:	d006      	beq.n	bda6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    bd98:	2902      	cmp	r1, #2
    bd9a:	d002      	beq.n	bda2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    bd9c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    bda0:	e014      	b.n	bdcc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    bda2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bda6:	490b      	ldr	r1, [pc, #44]	; (bdd4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    bda8:	430a      	orrs	r2, r1
    bdaa:	490b      	ldr	r1, [pc, #44]	; (bdd8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bdac:	600a      	str	r2, [r1, #0]
    bdae:	490b      	ldr	r1, [pc, #44]	; (bddc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    bdb0:	4308      	orrs	r0, r1
    bdb2:	4909      	ldr	r1, [pc, #36]	; (bdd8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bdb4:	1d09      	adds	r1, r1, #4
    bdb6:	6008      	str	r0, [r1, #0]
    bdb8:	4809      	ldr	r0, [pc, #36]	; (bde0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    bdba:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bdbe:	b2c0      	uxtb	r0, r0
    bdc0:	2803      	cmp	r0, #3
    bdc2:	d001      	beq.n	bdc8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    bdc4:	280b      	cmp	r0, #11
    bdc6:	d104      	bne.n	bdd2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    bdc8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    bdcc:	203e      	movs	r0, #62	; 0x3e
    bdce:	f7f8 ff1b 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdd2:	bd10      	pop	{r4, pc}
    bdd4:	00100108 	.word	0x00100108
    bdd8:	40001514 	.word	0x40001514
    bddc:	02030000 	.word	0x02030000
    bde0:	40001000 	.word	0x40001000

0000bde4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bde4:	4901      	ldr	r1, [pc, #4]	; (bdec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bde6:	7588      	strb	r0, [r1, #22]
    bde8:	4770      	bx	lr
    bdea:	0000      	.short	0x0000
    bdec:	20001368 	.word	0x20001368

0000bdf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdf4:	4852      	ldr	r0, [pc, #328]	; (bf40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bdf6:	f04f 0a01 	mov.w	sl, #1
    bdfa:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bdfe:	4850      	ldr	r0, [pc, #320]	; (bf40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    be00:	300c      	adds	r0, #12
    be02:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    be06:	f000 fff3 	bl	cdf0 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    be0a:	4c4e      	ldr	r4, [pc, #312]	; (bf44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    be0c:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    be10:	f000 f918 	bl	c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    be14:	494c      	ldr	r1, [pc, #304]	; (bf48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    be16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    be18:	6008      	str	r0, [r1, #0]
    be1a:	f8df 9130 	ldr.w	r9, [pc, #304]	; bf4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    be1e:	2000      	movs	r0, #0
    be20:	62a0      	str	r0, [r4, #40]	; 0x28
    be22:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    be26:	f240 131d 	movw	r3, #285	; 0x11d
    be2a:	439a      	bics	r2, r3
    be2c:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    be30:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    be34:	f000 f986 	bl	c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    be38:	4605      	mov	r5, r0
    be3a:	4841      	ldr	r0, [pc, #260]	; (bf40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    be3c:	3008      	adds	r0, #8
    be3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    be42:	4e3f      	ldr	r6, [pc, #252]	; (bf40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    be44:	61e0      	str	r0, [r4, #28]
    be46:	1d36      	adds	r6, r6, #4
    be48:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    be4c:	61a0      	str	r0, [r4, #24]
    be4e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    be52:	7d21      	ldrb	r1, [r4, #20]
    be54:	f884 1020 	strb.w	r1, [r4, #32]
    be58:	7a61      	ldrb	r1, [r4, #9]
    be5a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    be5e:	46a0      	mov	r8, r4
    be60:	2400      	movs	r4, #0
    be62:	4639      	mov	r1, r7
    be64:	4628      	mov	r0, r5
    be66:	f000 f9e1 	bl	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    be6a:	b910      	cbnz	r0, be72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    be6c:	f8c9 a010 	str.w	sl, [r9, #16]
    be70:	2401      	movs	r4, #1
    be72:	4f34      	ldr	r7, [pc, #208]	; (bf44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    be74:	07e8      	lsls	r0, r5, #31
    be76:	f1a7 0710 	sub.w	r7, r7, #16
    be7a:	d002      	beq.n	be82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    be7c:	6838      	ldr	r0, [r7, #0]
    be7e:	4780      	blx	r0
    be80:	e032      	b.n	bee8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    be82:	07a8      	lsls	r0, r5, #30
    be84:	d527      	bpl.n	bed6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    be86:	0768      	lsls	r0, r5, #29
    be88:	d41f      	bmi.n	beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be8a:	f001 f8fb 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    be8e:	b9e0      	cbnz	r0, beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be90:	f001 f8e8 	bl	d064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    be94:	b9c8      	cbnz	r0, beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    be96:	482e      	ldr	r0, [pc, #184]	; (bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    be98:	6800      	ldr	r0, [r0, #0]
    be9a:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    be9e:	f3c0 5142 	ubfx	r1, r0, #21, #3
    bea2:	f000 030f 	and.w	r3, r0, #15
    bea6:	f3c0 1203 	ubfx	r2, r0, #4, #4
    beaa:	f3c0 2003 	ubfx	r0, r0, #8, #4
    beae:	f1bc 0f00 	cmp.w	ip, #0
    beb2:	d00a      	beq.n	beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    beb4:	b10b      	cbz	r3, beba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    beb6:	b102      	cbz	r2, beba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    beb8:	b938      	cbnz	r0, beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    beba:	4825      	ldr	r0, [pc, #148]	; (bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bebc:	1d00      	adds	r0, r0, #4
    bebe:	6800      	ldr	r0, [r0, #0]
    bec0:	b118      	cbz	r0, beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bec2:	2903      	cmp	r1, #3
    bec4:	d201      	bcs.n	beca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bec6:	f045 0504 	orr.w	r5, r5, #4
    beca:	f345 0080 	sbfx	r0, r5, #2, #1
    bece:	4621      	mov	r1, r4
    bed0:	1c40      	adds	r0, r0, #1
    bed2:	687a      	ldr	r2, [r7, #4]
    bed4:	e007      	b.n	bee6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    bed6:	f015 0f28 	tst.w	r5, #40	; 0x28
    beda:	d005      	beq.n	bee8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    bedc:	f345 1140 	sbfx	r1, r5, #5, #1
    bee0:	68ba      	ldr	r2, [r7, #8]
    bee2:	4620      	mov	r0, r4
    bee4:	1c49      	adds	r1, r1, #1
    bee6:	4790      	blx	r2
    bee8:	06e8      	lsls	r0, r5, #27
    beea:	d501      	bpl.n	bef0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    beec:	68f8      	ldr	r0, [r7, #12]
    beee:	4780      	blx	r0
    bef0:	f898 1009 	ldrb.w	r1, [r8, #9]
    bef4:	4640      	mov	r0, r8
    bef6:	2902      	cmp	r1, #2
    bef8:	d120      	bne.n	bf3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    befa:	7b01      	ldrb	r1, [r0, #12]
    befc:	2900      	cmp	r1, #0
    befe:	d01d      	beq.n	bf3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    bf00:	2902      	cmp	r1, #2
    bf02:	d004      	beq.n	bf0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    bf04:	2901      	cmp	r1, #1
    bf06:	d009      	beq.n	bf1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    bf08:	f640 4134 	movw	r1, #3124	; 0xc34
    bf0c:	e00d      	b.n	bf2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    bf0e:	69c1      	ldr	r1, [r0, #28]
    bf10:	f8d8 0010 	ldr.w	r0, [r8, #16]
    bf14:	4408      	add	r0, r1
    bf16:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    bf1a:	e00b      	b.n	bf34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    bf1c:	6901      	ldr	r1, [r0, #16]
    bf1e:	f8d8 001c 	ldr.w	r0, [r8, #28]
    bf22:	4281      	cmp	r1, r0
    bf24:	d804      	bhi.n	bf30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    bf26:	f640 4135 	movw	r1, #3125	; 0xc35
    bf2a:	203e      	movs	r0, #62	; 0x3e
    bf2c:	f7f8 fe6c 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf30:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    bf34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf38:	f000 b9b6 	b.w	c2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf40:	40008000 	.word	0x40008000
    bf44:	20001368 	.word	0x20001368
    bf48:	4001f508 	.word	0x4001f508
    bf4c:	40001000 	.word	0x40001000
    bf50:	40001450 	.word	0x40001450

0000bf54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bf54:	b570      	push	{r4, r5, r6, lr}
    bf56:	4b16      	ldr	r3, [pc, #88]	; (bfb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    bf58:	888c      	ldrh	r4, [r1, #4]
    bf5a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bf5e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bf62:	780c      	ldrb	r4, [r1, #0]
    bf64:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bf68:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bf6c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bf70:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    bf74:	2401      	movs	r4, #1
    bf76:	4084      	lsls	r4, r0
    bf78:	b2c9      	uxtb	r1, r1
    bf7a:	b2e5      	uxtb	r5, r4
    bf7c:	4329      	orrs	r1, r5
    bf7e:	b132      	cbz	r2, bf8e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bf80:	2a01      	cmp	r2, #1
    bf82:	d00a      	beq.n	bf9a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    bf84:	f240 51ad 	movw	r1, #1453	; 0x5ad
    bf88:	203e      	movs	r0, #62	; 0x3e
    bf8a:	f7f8 fe3d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf8e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bf92:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bf96:	43a0      	bics	r0, r4
    bf98:	e004      	b.n	bfa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    bf9a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bf9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bfa2:	4328      	orrs	r0, r5
    bfa4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bfa8:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bfac:	bd70      	pop	{r4, r5, r6, pc}
    bfae:	0000      	.short	0x0000
    bfb0:	40001000 	.word	0x40001000

0000bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bfb4:	4901      	ldr	r1, [pc, #4]	; (bfbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bfb6:	2001      	movs	r0, #1
    bfb8:	7008      	strb	r0, [r1, #0]
    bfba:	4770      	bx	lr
    bfbc:	200002f4 	.word	0x200002f4
    bfc0:	480b      	ldr	r0, [pc, #44]	; (bff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    bfc2:	7d81      	ldrb	r1, [r0, #22]
    bfc4:	480b      	ldr	r0, [pc, #44]	; (bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bfc6:	5c40      	ldrb	r0, [r0, r1]
    bfc8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    bfcc:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bfd0:	d204      	bcs.n	bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    bfd2:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bfd6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bfda:	e001      	b.n	bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bfdc:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bfe0:	4a05      	ldr	r2, [pc, #20]	; (bff8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    bfe2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bfe6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bfea:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bfee:	4770      	bx	lr
    bff0:	20001368 	.word	0x20001368
    bff4:	0000c45a 	.word	0x0000c45a
    bff8:	40001000 	.word	0x40001000
    bffc:	b508      	push	{r3, lr}
    bffe:	490b      	ldr	r1, [pc, #44]	; (c02c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c000:	466b      	mov	r3, sp
    c002:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c006:	7d89      	ldrb	r1, [r1, #22]
    c008:	f000 faca 	bl	c5a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c00c:	f99d 0000 	ldrsb.w	r0, [sp]
    c010:	f000 fa9a 	bl	c548 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c014:	f10d 0001 	add.w	r0, sp, #1
    c018:	f7f8 fcca 	bl	49b0 <mpsl_fem_pa_gain_set>
    c01c:	2800      	cmp	r0, #0
    c01e:	d004      	beq.n	c02a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c020:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c024:	203e      	movs	r0, #62	; 0x3e
    c026:	f7f8 fdef 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c02a:	bd08      	pop	{r3, pc}
    c02c:	20001368 	.word	0x20001368
    c030:	4803      	ldr	r0, [pc, #12]	; (c040 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c032:	7a01      	ldrb	r1, [r0, #8]
    c034:	2901      	cmp	r1, #1
    c036:	d102      	bne.n	c03e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    c038:	7a80      	ldrb	r0, [r0, #10]
    c03a:	f7ff bfdf 	b.w	bffc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c03e:	4770      	bx	lr
    c040:	20001368 	.word	0x20001368
    c044:	480d      	ldr	r0, [pc, #52]	; (c07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    c046:	b510      	push	{r4, lr}
    c048:	7a40      	ldrb	r0, [r0, #9]
    c04a:	2801      	cmp	r0, #1
    c04c:	d00c      	beq.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c04e:	2802      	cmp	r0, #2
    c050:	d113      	bne.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c052:	f7f8 fc8f 	bl	4974 <mpsl_fem_lna_configuration_clear>
    c056:	2800      	cmp	r0, #0
    c058:	d00f      	beq.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c05a:	1c40      	adds	r0, r0, #1
    c05c:	d00d      	beq.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c05e:	f640 019a 	movw	r1, #2202	; 0x89a
    c062:	203e      	movs	r0, #62	; 0x3e
    c064:	f7f8 fdd0 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c068:	f7f8 fc96 	bl	4998 <mpsl_fem_pa_configuration_clear>
    c06c:	2800      	cmp	r0, #0
    c06e:	d004      	beq.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c070:	1c40      	adds	r0, r0, #1
    c072:	d002      	beq.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c074:	f640 0194 	movw	r1, #2196	; 0x894
    c078:	e7f3      	b.n	c062 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    c07a:	bd10      	pop	{r4, pc}
    c07c:	20001368 	.word	0x20001368
    c080:	4808      	ldr	r0, [pc, #32]	; (c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c082:	2100      	movs	r1, #0
    c084:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c088:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c08c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c090:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c094:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c098:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c09c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c0a0:	4770      	bx	lr
    c0a2:	0000      	.short	0x0000
    c0a4:	40001000 	.word	0x40001000
    c0a8:	4818      	ldr	r0, [pc, #96]	; (c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c0aa:	b510      	push	{r4, lr}
    c0ac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c0b0:	07c1      	lsls	r1, r0, #31
    c0b2:	d029      	beq.n	c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c0b4:	0781      	lsls	r1, r0, #30
    c0b6:	d514      	bpl.n	c0e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c0b8:	4815      	ldr	r0, [pc, #84]	; (c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c0ba:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c0be:	f041 0101 	orr.w	r1, r1, #1
    c0c2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0c6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c0ca:	b2c0      	uxtb	r0, r0
    c0cc:	280b      	cmp	r0, #11
    c0ce:	d005      	beq.n	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c0d0:	280a      	cmp	r0, #10
    c0d2:	d003      	beq.n	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c0d4:	2803      	cmp	r0, #3
    c0d6:	d001      	beq.n	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c0d8:	2802      	cmp	r0, #2
    c0da:	d115      	bne.n	c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c0dc:	f240 6117 	movw	r1, #1559	; 0x617
    c0e0:	e00f      	b.n	c102 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c0e2:	0740      	lsls	r0, r0, #29
    c0e4:	d510      	bpl.n	c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c0e6:	480a      	ldr	r0, [pc, #40]	; (c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c0e8:	490a      	ldr	r1, [pc, #40]	; (c114 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c0ea:	3008      	adds	r0, #8
    c0ec:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c0f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c0f4:	4808      	ldr	r0, [pc, #32]	; (c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c0f6:	f004 ff6b 	bl	10fd0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c0fa:	2800      	cmp	r0, #0
    c0fc:	d004      	beq.n	c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c0fe:	f240 611f 	movw	r1, #1567	; 0x61f
    c102:	203e      	movs	r0, #62	; 0x3e
    c104:	f7f8 fd80 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c108:	bd10      	pop	{r4, pc}
    c10a:	0000      	.short	0x0000
    c10c:	20001368 	.word	0x20001368
    c110:	40001000 	.word	0x40001000
    c114:	4001f098 	.word	0x4001f098
    c118:	40008000 	.word	0x40008000
    c11c:	4808      	ldr	r0, [pc, #32]	; (c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c11e:	4601      	mov	r1, r0
    c120:	79c2      	ldrb	r2, [r0, #7]
    c122:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c126:	b112      	cbz	r2, c12e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c128:	2a01      	cmp	r2, #1
    c12a:	d003      	beq.n	c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c12c:	e006      	b.n	c13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c12e:	f041 0102 	orr.w	r1, r1, #2
    c132:	e001      	b.n	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c134:	f041 0104 	orr.w	r1, r1, #4
    c138:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c13c:	f7ff bfb4 	b.w	c0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c140:	20001368 	.word	0x20001368
    c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c148:	4d34      	ldr	r5, [pc, #208]	; (c21c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c14a:	2400      	movs	r4, #0
    c14c:	7b28      	ldrb	r0, [r5, #12]
    c14e:	b138      	cbz	r0, c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c150:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c154:	4832      	ldr	r0, [pc, #200]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c156:	f004 ff3b 	bl	10fd0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c15a:	b108      	cbz	r0, c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c15c:	2601      	movs	r6, #1
    c15e:	e000      	b.n	c162 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c160:	2600      	movs	r6, #0
    c162:	7a68      	ldrb	r0, [r5, #9]
    c164:	4f2f      	ldr	r7, [pc, #188]	; (c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c166:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c16a:	2801      	cmp	r0, #1
    c16c:	d002      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c16e:	2802      	cmp	r0, #2
    c170:	d006      	beq.n	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c172:	e016      	b.n	c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c174:	4638      	mov	r0, r7
    c176:	f004 ff26 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c17a:	b190      	cbz	r0, c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c17c:	2408      	movs	r4, #8
    c17e:	e010      	b.n	c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c180:	4638      	mov	r0, r7
    c182:	f004 ff20 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c186:	b100      	cbz	r0, c18a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c188:	2402      	movs	r4, #2
    c18a:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c18e:	43c0      	mvns	r0, r0
    c190:	f340 0000 	sbfx	r0, r0, #0, #1
    c194:	1c40      	adds	r0, r0, #1
    c196:	d101      	bne.n	c19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c198:	f044 0404 	orr.w	r4, r4, #4
    c19c:	b10e      	cbz	r6, c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c19e:	f044 0401 	orr.w	r4, r4, #1
    c1a2:	f014 0f0b 	tst.w	r4, #11
    c1a6:	d107      	bne.n	c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c1a8:	f44f 7188 	mov.w	r1, #272	; 0x110
    c1ac:	4638      	mov	r0, r7
    c1ae:	f004 ff0a 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c1b2:	b108      	cbz	r0, c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c1b4:	f044 0410 	orr.w	r4, r4, #16
    c1b8:	481b      	ldr	r0, [pc, #108]	; (c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c1ba:	7800      	ldrb	r0, [r0, #0]
    c1bc:	b1f8      	cbz	r0, c1fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c1be:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c1c2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c1c6:	d007      	beq.n	c1d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c1c8:	f44f 718a 	mov.w	r1, #276	; 0x114
    c1cc:	4638      	mov	r0, r7
    c1ce:	f004 fefa 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c1d2:	b108      	cbz	r0, c1d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c1d4:	2001      	movs	r0, #1
    c1d6:	e000      	b.n	c1da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c1d8:	2000      	movs	r0, #0
    c1da:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c1de:	b13e      	cbz	r6, c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c1e0:	f44f 718c 	mov.w	r1, #280	; 0x118
    c1e4:	4638      	mov	r0, r7
    c1e6:	f004 feee 	bl	10fc6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c1ea:	b108      	cbz	r0, c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c1ec:	2001      	movs	r0, #1
    c1ee:	e000      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c1f0:	2000      	movs	r0, #0
    c1f2:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c1f6:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c1fa:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c1fe:	f7ff ff3f 	bl	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c202:	06e0      	lsls	r0, r4, #27
    c204:	d506      	bpl.n	c214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c206:	0720      	lsls	r0, r4, #28
    c208:	d404      	bmi.n	c214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c20a:	7a68      	ldrb	r0, [r5, #9]
    c20c:	2801      	cmp	r0, #1
    c20e:	d101      	bne.n	c214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c210:	f044 0420 	orr.w	r4, r4, #32
    c214:	4620      	mov	r0, r4
    c216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c21a:	0000      	.short	0x0000
    c21c:	20001368 	.word	0x20001368
    c220:	40008000 	.word	0x40008000
    c224:	40001000 	.word	0x40001000
    c228:	200002f4 	.word	0x200002f4
    c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c230:	4c17      	ldr	r4, [pc, #92]	; (c290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c232:	460d      	mov	r5, r1
    c234:	7a21      	ldrb	r1, [r4, #8]
    c236:	b129      	cbz	r1, c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c238:	f010 0f11 	tst.w	r0, #17
    c23c:	d007      	beq.n	c24e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c23e:	f7ff fa7d 	bl	b73c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c242:	e023      	b.n	c28c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c244:	f000 f88a 	bl	c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c248:	2000      	movs	r0, #0
    c24a:	7320      	strb	r0, [r4, #12]
    c24c:	e01e      	b.n	c28c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c24e:	2901      	cmp	r1, #1
    c250:	d001      	beq.n	c256 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c252:	2601      	movs	r6, #1
    c254:	e000      	b.n	c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c256:	2600      	movs	r6, #0
    c258:	79e0      	ldrb	r0, [r4, #7]
    c25a:	2801      	cmp	r0, #1
    c25c:	d00e      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c25e:	2700      	movs	r7, #0
    c260:	f000 f87c 	bl	c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c264:	2196      	movs	r1, #150	; 0x96
    c266:	4630      	mov	r0, r6
    c268:	f000 f88e 	bl	c388 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c26c:	4601      	mov	r1, r0
    c26e:	b14f      	cbz	r7, c284 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c270:	353b      	adds	r5, #59	; 0x3b
    c272:	428d      	cmp	r5, r1
    c274:	d904      	bls.n	c280 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c276:	2000      	movs	r0, #0
    c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c27c:	2701      	movs	r7, #1
    c27e:	e7ef      	b.n	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c280:	2001      	movs	r0, #1
    c282:	71e0      	strb	r0, [r4, #7]
    c284:	7aa2      	ldrb	r2, [r4, #10]
    c286:	4630      	mov	r0, r6
    c288:	f7ff fcda 	bl	bc40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c28c:	2001      	movs	r0, #1
    c28e:	e7f3      	b.n	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c290:	20001368 	.word	0x20001368
    c294:	4803      	ldr	r0, [pc, #12]	; (c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c296:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c29a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c29e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c2a2:	4770      	bx	lr
    c2a4:	40001000 	.word	0x40001000
    c2a8:	4804      	ldr	r0, [pc, #16]	; (c2bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c2aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c2ac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c2b0:	6281      	str	r1, [r0, #40]	; 0x28
    c2b2:	4903      	ldr	r1, [pc, #12]	; (c2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c2b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c2b8:	6008      	str	r0, [r1, #0]
    c2ba:	4770      	bx	lr
    c2bc:	20001368 	.word	0x20001368
    c2c0:	4001f504 	.word	0x4001f504
    c2c4:	4a07      	ldr	r2, [pc, #28]	; (c2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c2c6:	2000      	movs	r0, #0
    c2c8:	3208      	adds	r2, #8
    c2ca:	4906      	ldr	r1, [pc, #24]	; (c2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c2cc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c2d0:	1d0a      	adds	r2, r1, #4
    c2d2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c2d6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2da:	4902      	ldr	r1, [pc, #8]	; (c2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c2dc:	310c      	adds	r1, #12
    c2de:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2e2:	4770      	bx	lr
    c2e4:	40008000 	.word	0x40008000
    c2e8:	4903      	ldr	r1, [pc, #12]	; (c2f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    c2ea:	79c9      	ldrb	r1, [r1, #7]
    c2ec:	2900      	cmp	r1, #0
    c2ee:	d102      	bne.n	c2f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c2f0:	4902      	ldr	r1, [pc, #8]	; (c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    c2f2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c2f6:	4770      	bx	lr
    c2f8:	20001368 	.word	0x20001368
    c2fc:	4001f098 	.word	0x4001f098
    c300:	b510      	push	{r4, lr}
    c302:	4a14      	ldr	r2, [pc, #80]	; (c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c304:	b120      	cbz	r0, c310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c306:	2801      	cmp	r0, #1
    c308:	d011      	beq.n	c32e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    c30a:	f240 714c 	movw	r1, #1868	; 0x74c
    c30e:	e01c      	b.n	c34a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c310:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c314:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c318:	490f      	ldr	r1, [pc, #60]	; (c358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c31a:	480e      	ldr	r0, [pc, #56]	; (c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c31c:	f7f8 fb42 	bl	49a4 <mpsl_fem_pa_configuration_set>
    c320:	2800      	cmp	r0, #0
    c322:	d015      	beq.n	c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c324:	1c40      	adds	r0, r0, #1
    c326:	d013      	beq.n	c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c328:	f240 713b 	movw	r1, #1851	; 0x73b
    c32c:	e00d      	b.n	c34a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c32e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c332:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c336:	4908      	ldr	r1, [pc, #32]	; (c358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c338:	4806      	ldr	r0, [pc, #24]	; (c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c33a:	f7f8 fb21 	bl	4980 <mpsl_fem_lna_configuration_set>
    c33e:	2800      	cmp	r0, #0
    c340:	d006      	beq.n	c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c342:	1c40      	adds	r0, r0, #1
    c344:	d004      	beq.n	c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c346:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    c34a:	203e      	movs	r0, #62	; 0x3e
    c34c:	f7f8 fc5c 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c350:	bd10      	pop	{r4, pc}
    c352:	0000      	.short	0x0000
    c354:	200002fc 	.word	0x200002fc
    c358:	0000c484 	.word	0x0000c484
    c35c:	4802      	ldr	r0, [pc, #8]	; (c368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c35e:	2100      	movs	r1, #0
    c360:	71c1      	strb	r1, [r0, #7]
    c362:	7201      	strb	r1, [r0, #8]
    c364:	7241      	strb	r1, [r0, #9]
    c366:	4770      	bx	lr
    c368:	20001368 	.word	0x20001368
    c36c:	4a05      	ldr	r2, [pc, #20]	; (c384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    c36e:	79d2      	ldrb	r2, [r2, #7]
    c370:	2a01      	cmp	r2, #1
    c372:	d006      	beq.n	c382 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    c374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c378:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c37c:	fbb1 f1f2 	udiv	r1, r1, r2
    c380:	1a40      	subs	r0, r0, r1
    c382:	4770      	bx	lr
    c384:	20001368 	.word	0x20001368
    c388:	b570      	push	{r4, r5, r6, lr}
    c38a:	4c13      	ldr	r4, [pc, #76]	; (c3d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    c38c:	4603      	mov	r3, r0
    c38e:	460d      	mov	r5, r1
    c390:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c394:	2000      	movs	r0, #0
    c396:	b15a      	cbz	r2, c3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    c398:	4621      	mov	r1, r4
    c39a:	f891 1020 	ldrb.w	r1, [r1, #32]
    c39e:	b163      	cbz	r3, c3ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c3a0:	2b01      	cmp	r3, #1
    c3a2:	d111      	bne.n	c3c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    c3a4:	2a01      	cmp	r2, #1
    c3a6:	4628      	mov	r0, r5
    c3a8:	d012      	beq.n	c3d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    c3aa:	f004 fe16 	bl	10fda <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c3ae:	e009      	b.n	c3c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c3b0:	f640 0147 	movw	r1, #2119	; 0x847
    c3b4:	203e      	movs	r0, #62	; 0x3e
    c3b6:	f7f8 fc27 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3ba:	2a01      	cmp	r2, #1
    c3bc:	4628      	mov	r0, r5
    c3be:	d004      	beq.n	c3ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    c3c0:	f004 fe19 	bl	10ff6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c3c4:	69e1      	ldr	r1, [r4, #28]
    c3c6:	4408      	add	r0, r1
    c3c8:	bd70      	pop	{r4, r5, r6, pc}
    c3ca:	f000 f8d1 	bl	c570 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c3ce:	e7f9      	b.n	c3c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c3d0:	f000 f8c0 	bl	c554 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c3d4:	e7f6      	b.n	c3c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c3d6:	0000      	.short	0x0000
    c3d8:	20001368 	.word	0x20001368
    c3dc:	b510      	push	{r4, lr}
    c3de:	f7ff fc03 	bl	bbe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c3e2:	f7ff fded 	bl	bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c3e6:	f7ff fe23 	bl	c030 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c3ea:	f7ff ff53 	bl	c294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c3ee:	f000 fe49 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c3f2:	2800      	cmp	r0, #0
    c3f4:	d108      	bne.n	c408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c3f6:	f000 fe35 	bl	d064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c3fa:	2800      	cmp	r0, #0
    c3fc:	d104      	bne.n	c408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c3fe:	4803      	ldr	r0, [pc, #12]	; (c40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    c400:	6801      	ldr	r1, [r0, #0]
    c402:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c406:	6001      	str	r1, [r0, #0]
    c408:	bd10      	pop	{r4, pc}
    c40a:	0000      	.short	0x0000
    c40c:	40001568 	.word	0x40001568
    c410:	b510      	push	{r4, lr}
    c412:	4604      	mov	r4, r0
    c414:	f7ff fbe8 	bl	bbe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c418:	f7ff fdd2 	bl	bfc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c41c:	4620      	mov	r0, r4
    c41e:	f7ff fded 	bl	bffc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c422:	f000 fe2f 	bl	d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c426:	2800      	cmp	r0, #0
    c428:	d00d      	beq.n	c446 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    c42a:	4a09      	ldr	r2, [pc, #36]	; (c450 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    c42c:	6811      	ldr	r1, [r2, #0]
    c42e:	0650      	lsls	r0, r2, #25
    c430:	2c02      	cmp	r4, #2
    c432:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c436:	d007      	beq.n	c448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    c438:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c43c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c440:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c444:	6010      	str	r0, [r2, #0]
    c446:	bd10      	pop	{r4, pc}
    c448:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c44c:	e7f6      	b.n	c43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c44e:	0000      	.short	0x0000
    c450:	40001588 	.word	0x40001588
    c454:	a62c0000 	.word	0xa62c0000
    c458:	0604a1e0 	.word	0x0604a1e0
    c45c:	0e0c0a08 	.word	0x0e0c0a08
    c460:	16141210 	.word	0x16141210
    c464:	201e1c18 	.word	0x201e1c18
    c468:	28262422 	.word	0x28262422
    c46c:	302e2c2a 	.word	0x302e2c2a
    c470:	38363432 	.word	0x38363432
    c474:	403e3c3a 	.word	0x403e3c3a
    c478:	48464442 	.word	0x48464442
    c47c:	024e4c4a 	.word	0x024e4c4a
    c480:	0000501a 	.word	0x0000501a
    c484:	00000001 	.word	0x00000001
    c488:	40001110 	.word	0x40001110
	...
    c4a0:	00001e14 	.word	0x00001e14
    c4a4:	00001130 	.word	0x00001130
    c4a8:	00000000 	.word	0x00000000
    c4ac:	00000028 	.word	0x00000028
    c4b0:	00000018 	.word	0x00000018
    c4b4:	00000000 	.word	0x00000000
    c4b8:	00001e14 	.word	0x00001e14
    c4bc:	00001130 	.word	0x00001130
    c4c0:	00000000 	.word	0x00000000
    c4c4:	00001770 	.word	0x00001770
    c4c8:	00000fa0 	.word	0x00000fa0

0000c4cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c4cc:	b570      	push	{r4, r5, r6, lr}
    c4ce:	4605      	mov	r5, r0
    c4d0:	4614      	mov	r4, r2
    c4d2:	4608      	mov	r0, r1
    c4d4:	f7ff fbae 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c4d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c4dc:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c4e0:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c4e4:	4807      	ldr	r0, [pc, #28]	; (c504 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c4e6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c4ea:	4408      	add	r0, r1
    c4ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c4f0:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c4f4:	fbb0 f5f1 	udiv	r5, r0, r1
    c4f8:	4620      	mov	r0, r4
    c4fa:	f7ff fb6f 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c4fe:	4428      	add	r0, r5
    c500:	1d40      	adds	r0, r0, #5
    c502:	bd70      	pop	{r4, r5, r6, pc}
    c504:	0000c594 	.word	0x0000c594

0000c508 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c508:	b570      	push	{r4, r5, r6, lr}
    c50a:	4d0e      	ldr	r5, [pc, #56]	; (c544 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c50c:	461c      	mov	r4, r3
    c50e:	3d08      	subs	r5, #8
    c510:	4b0c      	ldr	r3, [pc, #48]	; (c544 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c512:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c516:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c51e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c522:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c526:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c52a:	4418      	add	r0, r3
    c52c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c530:	fbb0 f5f1 	udiv	r5, r0, r1
    c534:	4610      	mov	r0, r2
    c536:	f7ff fb51 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c53a:	4428      	add	r0, r5
    c53c:	4420      	add	r0, r4
    c53e:	1d40      	adds	r0, r0, #5
    c540:	bd70      	pop	{r4, r5, r6, pc}
    c542:	0000      	.short	0x0000
    c544:	0000c594 	.word	0x0000c594

0000c548 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c548:	4901      	ldr	r1, [pc, #4]	; (c550 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c54a:	b2c0      	uxtb	r0, r0
    c54c:	6008      	str	r0, [r1, #0]
    c54e:	4770      	bx	lr
    c550:	4000150c 	.word	0x4000150c

0000c554 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c554:	4a05      	ldr	r2, [pc, #20]	; (c56c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c556:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c55a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c55e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c562:	fbb1 f1f2 	udiv	r1, r1, r2
    c566:	4408      	add	r0, r1
    c568:	1e80      	subs	r0, r0, #2
    c56a:	4770      	bx	lr
    c56c:	0000c58c 	.word	0x0000c58c

0000c570 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c570:	4a05      	ldr	r2, [pc, #20]	; (c588 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c572:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c57a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c57e:	fbb1 f1f2 	udiv	r1, r1, r2
    c582:	4408      	add	r0, r1
    c584:	4770      	bx	lr
    c586:	0000      	.short	0x0000
    c588:	0000c58c 	.word	0x0000c58c
    c58c:	05dc0000 	.word	0x05dc0000
    c590:	000003e8 	.word	0x000003e8
    c594:	00000000 	.word	0x00000000
    c598:	00001e14 	.word	0x00001e14
    c59c:	00001130 	.word	0x00001130

0000c5a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    c5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5a4:	461e      	mov	r6, r3
    c5a6:	4617      	mov	r7, r2
    c5a8:	460c      	mov	r4, r1
    c5aa:	4605      	mov	r5, r0
    c5ac:	f7f4 fc6e 	bl	e8c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    c5b0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c658 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    c5b4:	4680      	mov	r8, r0
    c5b6:	f899 0000 	ldrb.w	r0, [r9]
    c5ba:	42a8      	cmp	r0, r5
    c5bc:	d110      	bne.n	c5e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c5be:	f899 1001 	ldrb.w	r1, [r9, #1]
    c5c2:	4648      	mov	r0, r9
    c5c4:	42a1      	cmp	r1, r4
    c5c6:	d10b      	bne.n	c5e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c5c8:	f990 1002 	ldrsb.w	r1, [r0, #2]
    c5cc:	42b9      	cmp	r1, r7
    c5ce:	d107      	bne.n	c5e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c5d0:	78c2      	ldrb	r2, [r0, #3]
    c5d2:	4542      	cmp	r2, r8
    c5d4:	d104      	bne.n	c5e0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c5d6:	8881      	ldrh	r1, [r0, #4]
    c5d8:	8031      	strh	r1, [r6, #0]
    c5da:	7980      	ldrb	r0, [r0, #6]
    c5dc:	70b0      	strb	r0, [r6, #2]
    c5de:	e036      	b.n	c64e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    c5e0:	463a      	mov	r2, r7
    c5e2:	4621      	mov	r1, r4
    c5e4:	2d01      	cmp	r5, #1
    c5e6:	d009      	beq.n	c5fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    c5e8:	2d02      	cmp	r5, #2
    c5ea:	d009      	beq.n	c600 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    c5ec:	2d04      	cmp	r5, #4
    c5ee:	d009      	beq.n	c604 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c5f0:	2d08      	cmp	r5, #8
    c5f2:	d009      	beq.n	c608 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    c5f4:	f240 4133 	movw	r1, #1075	; 0x433
    c5f8:	2006      	movs	r0, #6
    c5fa:	e00c      	b.n	c616 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    c5fc:	2000      	movs	r0, #0
    c5fe:	e004      	b.n	c60a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c600:	2001      	movs	r0, #1
    c602:	e002      	b.n	c60a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c604:	2003      	movs	r0, #3
    c606:	e000      	b.n	c60a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c608:	2002      	movs	r0, #2
    c60a:	466b      	mov	r3, sp
    c60c:	f7f4 fc84 	bl	f18 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    c610:	b118      	cbz	r0, c61a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    c612:	213d      	movs	r1, #61	; 0x3d
    c614:	2075      	movs	r0, #117	; 0x75
    c616:	f7f8 faf7 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c61a:	4620      	mov	r0, r4
    c61c:	f7ff f886 	bl	b72c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    c620:	4602      	mov	r2, r0
    c622:	4631      	mov	r1, r6
    c624:	f99d 0000 	ldrsb.w	r0, [sp]
    c628:	f7f8 f9ce 	bl	49c8 <mpsl_fem_tx_power_split>
    c62c:	4601      	mov	r1, r0
    c62e:	f889 1007 	strb.w	r1, [r9, #7]
    c632:	8831      	ldrh	r1, [r6, #0]
    c634:	f8a9 1004 	strh.w	r1, [r9, #4]
    c638:	78b1      	ldrb	r1, [r6, #2]
    c63a:	f889 1006 	strb.w	r1, [r9, #6]
    c63e:	f889 5000 	strb.w	r5, [r9]
    c642:	f889 4001 	strb.w	r4, [r9, #1]
    c646:	f889 7002 	strb.w	r7, [r9, #2]
    c64a:	f889 8003 	strb.w	r8, [r9, #3]
    c64e:	f999 0007 	ldrsb.w	r0, [r9, #7]
    c652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c656:	0000      	.short	0x0000
    c658:	20000345 	.word	0x20000345

0000c65c <__udivmoddi4>:
    c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c660:	4607      	mov	r7, r0
    c662:	468c      	mov	ip, r1
    c664:	4608      	mov	r0, r1
    c666:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c668:	4615      	mov	r5, r2
    c66a:	463c      	mov	r4, r7
    c66c:	4619      	mov	r1, r3
    c66e:	2b00      	cmp	r3, #0
    c670:	f040 80c6 	bne.w	c800 <__udivmoddi4+0x1a4>
    c674:	4282      	cmp	r2, r0
    c676:	fab2 f782 	clz	r7, r2
    c67a:	d946      	bls.n	c70a <__udivmoddi4+0xae>
    c67c:	b14f      	cbz	r7, c692 <__udivmoddi4+0x36>
    c67e:	f1c7 0e20 	rsb	lr, r7, #32
    c682:	fa24 fe0e 	lsr.w	lr, r4, lr
    c686:	fa00 f307 	lsl.w	r3, r0, r7
    c68a:	40bd      	lsls	r5, r7
    c68c:	ea4e 0c03 	orr.w	ip, lr, r3
    c690:	40bc      	lsls	r4, r7
    c692:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c696:	fa1f fe85 	uxth.w	lr, r5
    c69a:	fbbc f9f8 	udiv	r9, ip, r8
    c69e:	0c22      	lsrs	r2, r4, #16
    c6a0:	fb08 c319 	mls	r3, r8, r9, ip
    c6a4:	fb09 fa0e 	mul.w	sl, r9, lr
    c6a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c6ac:	459a      	cmp	sl, r3
    c6ae:	d928      	bls.n	c702 <__udivmoddi4+0xa6>
    c6b0:	18eb      	adds	r3, r5, r3
    c6b2:	f109 30ff 	add.w	r0, r9, #4294967295
    c6b6:	d204      	bcs.n	c6c2 <__udivmoddi4+0x66>
    c6b8:	459a      	cmp	sl, r3
    c6ba:	d902      	bls.n	c6c2 <__udivmoddi4+0x66>
    c6bc:	f1a9 0002 	sub.w	r0, r9, #2
    c6c0:	442b      	add	r3, r5
    c6c2:	eba3 030a 	sub.w	r3, r3, sl
    c6c6:	b2a4      	uxth	r4, r4
    c6c8:	fbb3 f2f8 	udiv	r2, r3, r8
    c6cc:	fb08 3312 	mls	r3, r8, r2, r3
    c6d0:	fb02 fe0e 	mul.w	lr, r2, lr
    c6d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c6d8:	45a6      	cmp	lr, r4
    c6da:	d914      	bls.n	c706 <__udivmoddi4+0xaa>
    c6dc:	192c      	adds	r4, r5, r4
    c6de:	f102 33ff 	add.w	r3, r2, #4294967295
    c6e2:	d203      	bcs.n	c6ec <__udivmoddi4+0x90>
    c6e4:	45a6      	cmp	lr, r4
    c6e6:	d901      	bls.n	c6ec <__udivmoddi4+0x90>
    c6e8:	1e93      	subs	r3, r2, #2
    c6ea:	442c      	add	r4, r5
    c6ec:	eba4 040e 	sub.w	r4, r4, lr
    c6f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c6f4:	b11e      	cbz	r6, c6fe <__udivmoddi4+0xa2>
    c6f6:	40fc      	lsrs	r4, r7
    c6f8:	2300      	movs	r3, #0
    c6fa:	6034      	str	r4, [r6, #0]
    c6fc:	6073      	str	r3, [r6, #4]
    c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c702:	4648      	mov	r0, r9
    c704:	e7dd      	b.n	c6c2 <__udivmoddi4+0x66>
    c706:	4613      	mov	r3, r2
    c708:	e7f0      	b.n	c6ec <__udivmoddi4+0x90>
    c70a:	b902      	cbnz	r2, c70e <__udivmoddi4+0xb2>
    c70c:	deff      	udf	#255	; 0xff
    c70e:	bb87      	cbnz	r7, c772 <__udivmoddi4+0x116>
    c710:	1a83      	subs	r3, r0, r2
    c712:	2101      	movs	r1, #1
    c714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c718:	b2aa      	uxth	r2, r5
    c71a:	fbb3 fcfe 	udiv	ip, r3, lr
    c71e:	0c20      	lsrs	r0, r4, #16
    c720:	fb0e 331c 	mls	r3, lr, ip, r3
    c724:	fb0c f802 	mul.w	r8, ip, r2
    c728:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c72c:	4598      	cmp	r8, r3
    c72e:	d963      	bls.n	c7f8 <__udivmoddi4+0x19c>
    c730:	18eb      	adds	r3, r5, r3
    c732:	f10c 30ff 	add.w	r0, ip, #4294967295
    c736:	d204      	bcs.n	c742 <__udivmoddi4+0xe6>
    c738:	4598      	cmp	r8, r3
    c73a:	d902      	bls.n	c742 <__udivmoddi4+0xe6>
    c73c:	f1ac 0002 	sub.w	r0, ip, #2
    c740:	442b      	add	r3, r5
    c742:	eba3 0308 	sub.w	r3, r3, r8
    c746:	b2a4      	uxth	r4, r4
    c748:	fbb3 fcfe 	udiv	ip, r3, lr
    c74c:	fb0e 331c 	mls	r3, lr, ip, r3
    c750:	fb0c f202 	mul.w	r2, ip, r2
    c754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c758:	42a2      	cmp	r2, r4
    c75a:	d94f      	bls.n	c7fc <__udivmoddi4+0x1a0>
    c75c:	192c      	adds	r4, r5, r4
    c75e:	f10c 33ff 	add.w	r3, ip, #4294967295
    c762:	d204      	bcs.n	c76e <__udivmoddi4+0x112>
    c764:	42a2      	cmp	r2, r4
    c766:	d902      	bls.n	c76e <__udivmoddi4+0x112>
    c768:	f1ac 0302 	sub.w	r3, ip, #2
    c76c:	442c      	add	r4, r5
    c76e:	1aa4      	subs	r4, r4, r2
    c770:	e7be      	b.n	c6f0 <__udivmoddi4+0x94>
    c772:	f1c7 0c20 	rsb	ip, r7, #32
    c776:	fa20 f80c 	lsr.w	r8, r0, ip
    c77a:	fa00 f307 	lsl.w	r3, r0, r7
    c77e:	fa24 fc0c 	lsr.w	ip, r4, ip
    c782:	40bd      	lsls	r5, r7
    c784:	ea4c 0203 	orr.w	r2, ip, r3
    c788:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c78c:	b2ab      	uxth	r3, r5
    c78e:	fbb8 fcfe 	udiv	ip, r8, lr
    c792:	0c11      	lsrs	r1, r2, #16
    c794:	fb0e 801c 	mls	r0, lr, ip, r8
    c798:	fb0c f903 	mul.w	r9, ip, r3
    c79c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c7a0:	4581      	cmp	r9, r0
    c7a2:	fa04 f407 	lsl.w	r4, r4, r7
    c7a6:	d923      	bls.n	c7f0 <__udivmoddi4+0x194>
    c7a8:	1828      	adds	r0, r5, r0
    c7aa:	f10c 31ff 	add.w	r1, ip, #4294967295
    c7ae:	d204      	bcs.n	c7ba <__udivmoddi4+0x15e>
    c7b0:	4581      	cmp	r9, r0
    c7b2:	d902      	bls.n	c7ba <__udivmoddi4+0x15e>
    c7b4:	f1ac 0102 	sub.w	r1, ip, #2
    c7b8:	4428      	add	r0, r5
    c7ba:	eba0 0009 	sub.w	r0, r0, r9
    c7be:	b292      	uxth	r2, r2
    c7c0:	fbb0 fcfe 	udiv	ip, r0, lr
    c7c4:	fb0e 001c 	mls	r0, lr, ip, r0
    c7c8:	fb0c f803 	mul.w	r8, ip, r3
    c7cc:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c7d0:	4598      	cmp	r8, r3
    c7d2:	d90f      	bls.n	c7f4 <__udivmoddi4+0x198>
    c7d4:	18eb      	adds	r3, r5, r3
    c7d6:	f10c 32ff 	add.w	r2, ip, #4294967295
    c7da:	d204      	bcs.n	c7e6 <__udivmoddi4+0x18a>
    c7dc:	4598      	cmp	r8, r3
    c7de:	d902      	bls.n	c7e6 <__udivmoddi4+0x18a>
    c7e0:	f1ac 0202 	sub.w	r2, ip, #2
    c7e4:	442b      	add	r3, r5
    c7e6:	eba3 0308 	sub.w	r3, r3, r8
    c7ea:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c7ee:	e791      	b.n	c714 <__udivmoddi4+0xb8>
    c7f0:	4661      	mov	r1, ip
    c7f2:	e7e2      	b.n	c7ba <__udivmoddi4+0x15e>
    c7f4:	4662      	mov	r2, ip
    c7f6:	e7f6      	b.n	c7e6 <__udivmoddi4+0x18a>
    c7f8:	4660      	mov	r0, ip
    c7fa:	e7a2      	b.n	c742 <__udivmoddi4+0xe6>
    c7fc:	4663      	mov	r3, ip
    c7fe:	e7b6      	b.n	c76e <__udivmoddi4+0x112>
    c800:	4283      	cmp	r3, r0
    c802:	d905      	bls.n	c810 <__udivmoddi4+0x1b4>
    c804:	b10e      	cbz	r6, c80a <__udivmoddi4+0x1ae>
    c806:	e9c6 7000 	strd	r7, r0, [r6]
    c80a:	2100      	movs	r1, #0
    c80c:	4608      	mov	r0, r1
    c80e:	e776      	b.n	c6fe <__udivmoddi4+0xa2>
    c810:	fab3 f183 	clz	r1, r3
    c814:	b981      	cbnz	r1, c838 <__udivmoddi4+0x1dc>
    c816:	4283      	cmp	r3, r0
    c818:	d301      	bcc.n	c81e <__udivmoddi4+0x1c2>
    c81a:	42ba      	cmp	r2, r7
    c81c:	d80a      	bhi.n	c834 <__udivmoddi4+0x1d8>
    c81e:	1abc      	subs	r4, r7, r2
    c820:	eb60 0303 	sbc.w	r3, r0, r3
    c824:	2001      	movs	r0, #1
    c826:	469c      	mov	ip, r3
    c828:	2e00      	cmp	r6, #0
    c82a:	d068      	beq.n	c8fe <__udivmoddi4+0x2a2>
    c82c:	e9c6 4c00 	strd	r4, ip, [r6]
    c830:	2100      	movs	r1, #0
    c832:	e764      	b.n	c6fe <__udivmoddi4+0xa2>
    c834:	4608      	mov	r0, r1
    c836:	e7f7      	b.n	c828 <__udivmoddi4+0x1cc>
    c838:	f1c1 0c20 	rsb	ip, r1, #32
    c83c:	408b      	lsls	r3, r1
    c83e:	fa22 f40c 	lsr.w	r4, r2, ip
    c842:	431c      	orrs	r4, r3
    c844:	fa02 f501 	lsl.w	r5, r2, r1
    c848:	fa00 f301 	lsl.w	r3, r0, r1
    c84c:	fa27 f20c 	lsr.w	r2, r7, ip
    c850:	fa20 fb0c 	lsr.w	fp, r0, ip
    c854:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c858:	4313      	orrs	r3, r2
    c85a:	fbbb f8f9 	udiv	r8, fp, r9
    c85e:	fa1f fe84 	uxth.w	lr, r4
    c862:	fb09 bb18 	mls	fp, r9, r8, fp
    c866:	0c1a      	lsrs	r2, r3, #16
    c868:	fb08 fa0e 	mul.w	sl, r8, lr
    c86c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c870:	4592      	cmp	sl, r2
    c872:	fa07 f701 	lsl.w	r7, r7, r1
    c876:	d93e      	bls.n	c8f6 <__udivmoddi4+0x29a>
    c878:	18a2      	adds	r2, r4, r2
    c87a:	f108 30ff 	add.w	r0, r8, #4294967295
    c87e:	d204      	bcs.n	c88a <__udivmoddi4+0x22e>
    c880:	4592      	cmp	sl, r2
    c882:	d902      	bls.n	c88a <__udivmoddi4+0x22e>
    c884:	f1a8 0002 	sub.w	r0, r8, #2
    c888:	4422      	add	r2, r4
    c88a:	eba2 020a 	sub.w	r2, r2, sl
    c88e:	b29b      	uxth	r3, r3
    c890:	fbb2 f8f9 	udiv	r8, r2, r9
    c894:	fb09 2218 	mls	r2, r9, r8, r2
    c898:	fb08 fe0e 	mul.w	lr, r8, lr
    c89c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c8a0:	4596      	cmp	lr, r2
    c8a2:	d92a      	bls.n	c8fa <__udivmoddi4+0x29e>
    c8a4:	18a2      	adds	r2, r4, r2
    c8a6:	f108 33ff 	add.w	r3, r8, #4294967295
    c8aa:	d204      	bcs.n	c8b6 <__udivmoddi4+0x25a>
    c8ac:	4596      	cmp	lr, r2
    c8ae:	d902      	bls.n	c8b6 <__udivmoddi4+0x25a>
    c8b0:	f1a8 0302 	sub.w	r3, r8, #2
    c8b4:	4422      	add	r2, r4
    c8b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c8ba:	fba0 9305 	umull	r9, r3, r0, r5
    c8be:	eba2 020e 	sub.w	r2, r2, lr
    c8c2:	429a      	cmp	r2, r3
    c8c4:	46ce      	mov	lr, r9
    c8c6:	4698      	mov	r8, r3
    c8c8:	d302      	bcc.n	c8d0 <__udivmoddi4+0x274>
    c8ca:	d106      	bne.n	c8da <__udivmoddi4+0x27e>
    c8cc:	454f      	cmp	r7, r9
    c8ce:	d204      	bcs.n	c8da <__udivmoddi4+0x27e>
    c8d0:	ebb9 0e05 	subs.w	lr, r9, r5
    c8d4:	eb63 0804 	sbc.w	r8, r3, r4
    c8d8:	3801      	subs	r0, #1
    c8da:	b186      	cbz	r6, c8fe <__udivmoddi4+0x2a2>
    c8dc:	ebb7 030e 	subs.w	r3, r7, lr
    c8e0:	eb62 0708 	sbc.w	r7, r2, r8
    c8e4:	fa07 fc0c 	lsl.w	ip, r7, ip
    c8e8:	40cb      	lsrs	r3, r1
    c8ea:	ea4c 0303 	orr.w	r3, ip, r3
    c8ee:	40cf      	lsrs	r7, r1
    c8f0:	e9c6 3700 	strd	r3, r7, [r6]
    c8f4:	e79c      	b.n	c830 <__udivmoddi4+0x1d4>
    c8f6:	4640      	mov	r0, r8
    c8f8:	e7c7      	b.n	c88a <__udivmoddi4+0x22e>
    c8fa:	4643      	mov	r3, r8
    c8fc:	e7db      	b.n	c8b6 <__udivmoddi4+0x25a>
    c8fe:	4631      	mov	r1, r6
    c900:	e6fd      	b.n	c6fe <__udivmoddi4+0xa2>

0000c902 <strcmp>:
    c902:	f810 2b01 	ldrb.w	r2, [r0], #1
    c906:	f811 3b01 	ldrb.w	r3, [r1], #1
    c90a:	2a01      	cmp	r2, #1
    c90c:	bf28      	it	cs
    c90e:	429a      	cmpcs	r2, r3
    c910:	d0f7      	beq.n	c902 <strcmp>
    c912:	1ad0      	subs	r0, r2, r3
    c914:	4770      	bx	lr

0000c916 <strlen>:
    c916:	4603      	mov	r3, r0
    c918:	f813 2b01 	ldrb.w	r2, [r3], #1
    c91c:	2a00      	cmp	r2, #0
    c91e:	d1fb      	bne.n	c918 <strlen+0x2>
    c920:	1a18      	subs	r0, r3, r0
    c922:	3801      	subs	r0, #1
    c924:	4770      	bx	lr
    c926:	2804      	cmp	r0, #4
    c928:	d202      	bcs.n	c930 <strlen+0x1a>
    c92a:	f04f 0028 	mov.w	r0, #40	; 0x28
    c92e:	4770      	bx	lr
    c930:	d102      	bne.n	c938 <strlen+0x22>
    c932:	f04f 0010 	mov.w	r0, #16
    c936:	4770      	bx	lr
    c938:	f04f 0000 	mov.w	r0, #0
    c93c:	4770      	bx	lr
    c93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c942:	000d      	movs	r5, r1
    c944:	4604      	mov	r4, r0
    c946:	f04f 0602 	mov.w	r6, #2
    c94a:	f04f 0701 	mov.w	r7, #1
    c94e:	d008      	beq.n	c962 <strlen+0x4c>
    c950:	7828      	ldrb	r0, [r5, #0]
    c952:	b1d0      	cbz	r0, c98a <strlen+0x74>
    c954:	2801      	cmp	r0, #1
    c956:	d007      	beq.n	c968 <strlen+0x52>
    c958:	2802      	cmp	r0, #2
    c95a:	d014      	beq.n	c986 <strlen+0x70>
    c95c:	2803      	cmp	r0, #3
    c95e:	d13e      	bne.n	c9de <strlen+0xc8>
    c960:	e016      	b.n	c990 <strlen+0x7a>
    c962:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    c966:	e00e      	b.n	c986 <strlen+0x70>
    c968:	6868      	ldr	r0, [r5, #4]
    c96a:	28c8      	cmp	r0, #200	; 0xc8
    c96c:	d303      	bcc.n	c976 <strlen+0x60>
    c96e:	2103      	movs	r1, #3
    c970:	f7f5 fbc4 	bl	20fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c974:	b108      	cbz	r0, c97a <strlen+0x64>
    c976:	2600      	movs	r6, #0
    c978:	e007      	b.n	c98a <strlen+0x74>
    c97a:	4620      	mov	r0, r4
    c97c:	6869      	ldr	r1, [r5, #4]
    c97e:	f000 f943 	bl	cc08 <strlen+0x2f2>
    c982:	2601      	movs	r6, #1
    c984:	e001      	b.n	c98a <strlen+0x74>
    c986:	f7f4 fb15 	bl	fb4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x14>
    c98a:	4630      	mov	r0, r6
    c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c990:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c994:	2800      	cmp	r0, #0
    c996:	d1f6      	bne.n	c986 <strlen+0x70>
    c998:	6868      	ldr	r0, [r5, #4]
    c99a:	f7f4 fadd 	bl	f58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    c99e:	b1f0      	cbz	r0, c9de <strlen+0xc8>
    c9a0:	6869      	ldr	r1, [r5, #4]
    c9a2:	7808      	ldrb	r0, [r1, #0]
    c9a4:	b130      	cbz	r0, c9b4 <strlen+0x9e>
    c9a6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c9aa:	2805      	cmp	r0, #5
    c9ac:	d008      	beq.n	c9c0 <strlen+0xaa>
    c9ae:	f44f 71be 	mov.w	r1, #380	; 0x17c
    c9b2:	e011      	b.n	c9d8 <strlen+0xc2>
    c9b4:	4620      	mov	r0, r4
    c9b6:	f000 f92f 	bl	cc18 <strlen+0x302>
    c9ba:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    c9be:	e7e2      	b.n	c986 <strlen+0x70>
    c9c0:	4620      	mov	r0, r4
    c9c2:	f000 f942 	bl	cc4a <strlen+0x334>
    c9c6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c9ca:	4621      	mov	r1, r4
    c9cc:	f000 f80a 	bl	c9e4 <strlen+0xce>
    c9d0:	2800      	cmp	r0, #0
    c9d2:	d1d8      	bne.n	c986 <strlen+0x70>
    c9d4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    c9d8:	206a      	movs	r0, #106	; 0x6a
    c9da:	f7f7 fe45 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c9de:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c9e2:	e7d0      	b.n	c986 <strlen+0x70>
    c9e4:	f7f5 bd6c 	b.w	24c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9ec:	460d      	mov	r5, r1
    c9ee:	0004      	movs	r4, r0
    c9f0:	d00c      	beq.n	ca0c <strlen+0xf6>
    c9f2:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    c9f6:	2700      	movs	r7, #0
    c9f8:	2002      	movs	r0, #2
    c9fa:	2d09      	cmp	r5, #9
    c9fc:	d270      	bcs.n	cae0 <strlen+0x1ca>
    c9fe:	e8df f005 	tbb	[pc, r5]
    ca02:	1108      	.short	0x1108
    ca04:	70653535 	.word	0x70653535
    ca08:	0093a588 	.word	0x0093a588
    ca0c:	f44f 71cb 	mov.w	r1, #406	; 0x196
    ca10:	e0f7      	b.n	cc02 <strlen+0x2ec>
    ca12:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca16:	2804      	cmp	r0, #4
    ca18:	d07a      	beq.n	cb10 <strlen+0x1fa>
    ca1a:	2803      	cmp	r0, #3
    ca1c:	d0fc      	beq.n	ca18 <strlen+0x102>
    ca1e:	f240 11a1 	movw	r1, #417	; 0x1a1
    ca22:	e0ee      	b.n	cc02 <strlen+0x2ec>
    ca24:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ca28:	2804      	cmp	r0, #4
    ca2a:	d004      	beq.n	ca36 <strlen+0x120>
    ca2c:	2803      	cmp	r0, #3
    ca2e:	d002      	beq.n	ca36 <strlen+0x120>
    ca30:	f240 11a5 	movw	r1, #421	; 0x1a5
    ca34:	e0e5      	b.n	cc02 <strlen+0x2ec>
    ca36:	2005      	movs	r0, #5
    ca38:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ca3c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    ca40:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    ca44:	bbb0      	cbnz	r0, cab4 <strlen+0x19e>
    ca46:	2100      	movs	r1, #0
    ca48:	4620      	mov	r0, r4
    ca4a:	f000 f8dd 	bl	cc08 <strlen+0x2f2>
    ca4e:	7820      	ldrb	r0, [r4, #0]
    ca50:	2801      	cmp	r0, #1
    ca52:	d006      	beq.n	ca62 <strlen+0x14c>
    ca54:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    ca58:	e9c4 0106 	strd	r0, r1, [r4, #24]
    ca5c:	2100      	movs	r1, #0
    ca5e:	6a22      	ldr	r2, [r4, #32]
    ca60:	e048      	b.n	caf4 <strlen+0x1de>
    ca62:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    ca66:	f7f5 fc37 	bl	22d8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    ca6a:	e7f5      	b.n	ca58 <strlen+0x142>
    ca6c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    ca70:	2904      	cmp	r1, #4
    ca72:	d004      	beq.n	ca7e <strlen+0x168>
    ca74:	2903      	cmp	r1, #3
    ca76:	d002      	beq.n	ca7e <strlen+0x168>
    ca78:	f240 11c3 	movw	r1, #451	; 0x1c3
    ca7c:	e0c1      	b.n	cc02 <strlen+0x2ec>
    ca7e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    ca82:	b122      	cbz	r2, ca8e <strlen+0x178>
    ca84:	4621      	mov	r1, r4
    ca86:	4630      	mov	r0, r6
    ca88:	f000 f8fe 	bl	cc88 <strlen+0x372>
    ca8c:	e0b1      	b.n	cbf2 <strlen+0x2dc>
    ca8e:	2904      	cmp	r1, #4
    ca90:	d000      	beq.n	ca94 <strlen+0x17e>
    ca92:	2001      	movs	r0, #1
    ca94:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ca98:	6a22      	ldr	r2, [r4, #32]
    ca9a:	2d02      	cmp	r5, #2
    ca9c:	d00b      	beq.n	cab6 <strlen+0x1a0>
    ca9e:	2106      	movs	r1, #6
    caa0:	4630      	mov	r0, r6
    caa2:	4790      	blx	r2
    caa4:	2800      	cmp	r0, #0
    caa6:	d06d      	beq.n	cb84 <strlen+0x26e>
    caa8:	7800      	ldrb	r0, [r0, #0]
    caaa:	2800      	cmp	r0, #0
    caac:	d06a      	beq.n	cb84 <strlen+0x26e>
    caae:	f240 11dd 	movw	r1, #477	; 0x1dd
    cab2:	e0a6      	b.n	cc02 <strlen+0x2ec>
    cab4:	e034      	b.n	cb20 <strlen+0x20a>
    cab6:	2105      	movs	r1, #5
    cab8:	4630      	mov	r0, r6
    caba:	4790      	blx	r2
    cabc:	2800      	cmp	r0, #0
    cabe:	d07c      	beq.n	cbba <strlen+0x2a4>
    cac0:	7800      	ldrb	r0, [r0, #0]
    cac2:	2800      	cmp	r0, #0
    cac4:	d079      	beq.n	cbba <strlen+0x2a4>
    cac6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    caca:	e09a      	b.n	cc02 <strlen+0x2ec>
    cacc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cad0:	2805      	cmp	r0, #5
    cad2:	d002      	beq.n	cada <strlen+0x1c4>
    cad4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    cad8:	e093      	b.n	cc02 <strlen+0x2ec>
    cada:	2102      	movs	r1, #2
    cadc:	6a22      	ldr	r2, [r4, #32]
    cade:	e009      	b.n	caf4 <strlen+0x1de>
    cae0:	e07e      	b.n	cbe0 <strlen+0x2ca>
    cae2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cae6:	2805      	cmp	r0, #5
    cae8:	d002      	beq.n	caf0 <strlen+0x1da>
    caea:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    caee:	e088      	b.n	cc02 <strlen+0x2ec>
    caf0:	6a22      	ldr	r2, [r4, #32]
    caf2:	2101      	movs	r1, #1
    caf4:	4630      	mov	r0, r6
    caf6:	4790      	blx	r2
    caf8:	4601      	mov	r1, r0
    cafa:	4620      	mov	r0, r4
    cafc:	f7ff ff1f 	bl	c93e <strlen+0x28>
    cb00:	2802      	cmp	r0, #2
    cb02:	d076      	beq.n	cbf2 <strlen+0x2dc>
    cb04:	b3e8      	cbz	r0, cb82 <strlen+0x26c>
    cb06:	2801      	cmp	r0, #1
    cb08:	d06d      	beq.n	cbe6 <strlen+0x2d0>
    cb0a:	f240 212a 	movw	r1, #554	; 0x22a
    cb0e:	e078      	b.n	cc02 <strlen+0x2ec>
    cb10:	e071      	b.n	cbf6 <strlen+0x2e0>
    cb12:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cb16:	2805      	cmp	r0, #5
    cb18:	d002      	beq.n	cb20 <strlen+0x20a>
    cb1a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    cb1e:	e070      	b.n	cc02 <strlen+0x2ec>
    cb20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb24:	f7f4 ba46 	b.w	fb4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x14>
    cb28:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cb2c:	2805      	cmp	r0, #5
    cb2e:	d002      	beq.n	cb36 <strlen+0x220>
    cb30:	f240 11f5 	movw	r1, #501	; 0x1f5
    cb34:	e065      	b.n	cc02 <strlen+0x2ec>
    cb36:	6a22      	ldr	r2, [r4, #32]
    cb38:	210a      	movs	r1, #10
    cb3a:	4630      	mov	r0, r6
    cb3c:	4790      	blx	r2
    cb3e:	4601      	mov	r1, r0
    cb40:	4620      	mov	r0, r4
    cb42:	f7ff fefc 	bl	c93e <strlen+0x28>
    cb46:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    cb4a:	e05a      	b.n	cc02 <strlen+0x2ec>
    cb4c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    cb50:	2905      	cmp	r1, #5
    cb52:	d007      	beq.n	cb64 <strlen+0x24e>
    cb54:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    cb58:	b10a      	cbz	r2, cb5e <strlen+0x248>
    cb5a:	2903      	cmp	r1, #3
    cb5c:	d002      	beq.n	cb64 <strlen+0x24e>
    cb5e:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    cb62:	e04e      	b.n	cc02 <strlen+0x2ec>
    cb64:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    cb68:	b129      	cbz	r1, cb76 <strlen+0x260>
    cb6a:	4621      	mov	r1, r4
    cb6c:	4630      	mov	r0, r6
    cb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb72:	f000 b889 	b.w	cc88 <strlen+0x372>
    cb76:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    cb7a:	b199      	cbz	r1, cba4 <strlen+0x28e>
    cb7c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    cb80:	e001      	b.n	cb86 <strlen+0x270>
    cb82:	e033      	b.n	cbec <strlen+0x2d6>
    cb84:	e035      	b.n	cbf2 <strlen+0x2dc>
    cb86:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cb8a:	6a22      	ldr	r2, [r4, #32]
    cb8c:	2108      	movs	r1, #8
    cb8e:	4630      	mov	r0, r6
    cb90:	4790      	blx	r2
    cb92:	2800      	cmp	r0, #0
    cb94:	d011      	beq.n	cbba <strlen+0x2a4>
    cb96:	7800      	ldrb	r0, [r0, #0]
    cb98:	2800      	cmp	r0, #0
    cb9a:	d00e      	beq.n	cbba <strlen+0x2a4>
    cb9c:	f44f 7102 	mov.w	r1, #520	; 0x208
    cba0:	e02f      	b.n	cc02 <strlen+0x2ec>
    cba2:	e00a      	b.n	cbba <strlen+0x2a4>
    cba4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    cba8:	b161      	cbz	r1, cbc4 <strlen+0x2ae>
    cbaa:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cbae:	4621      	mov	r1, r4
    cbb0:	f7ff ff18 	bl	c9e4 <strlen+0xce>
    cbb4:	b118      	cbz	r0, cbbe <strlen+0x2a8>
    cbb6:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    cbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbbe:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cbc2:	e01e      	b.n	cc02 <strlen+0x2ec>
    cbc4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cbc8:	6a22      	ldr	r2, [r4, #32]
    cbca:	2107      	movs	r1, #7
    cbcc:	4630      	mov	r0, r6
    cbce:	4790      	blx	r2
    cbd0:	2800      	cmp	r0, #0
    cbd2:	d0f2      	beq.n	cbba <strlen+0x2a4>
    cbd4:	7800      	ldrb	r0, [r0, #0]
    cbd6:	2800      	cmp	r0, #0
    cbd8:	d0ef      	beq.n	cbba <strlen+0x2a4>
    cbda:	f44f 7105 	mov.w	r1, #532	; 0x214
    cbde:	e010      	b.n	cc02 <strlen+0x2ec>
    cbe0:	f240 2119 	movw	r1, #537	; 0x219
    cbe4:	e00d      	b.n	cc02 <strlen+0x2ec>
    cbe6:	2104      	movs	r1, #4
    cbe8:	6a22      	ldr	r2, [r4, #32]
    cbea:	e783      	b.n	caf4 <strlen+0x1de>
    cbec:	2103      	movs	r1, #3
    cbee:	6a22      	ldr	r2, [r4, #32]
    cbf0:	e780      	b.n	caf4 <strlen+0x1de>
    cbf2:	2d00      	cmp	r5, #0
    cbf4:	d1e1      	bne.n	cbba <strlen+0x2a4>
    cbf6:	f000 f8fd 	bl	cdf4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d0dd      	beq.n	cbba <strlen+0x2a4>
    cbfe:	f240 2133 	movw	r1, #563	; 0x233
    cc02:	206a      	movs	r0, #106	; 0x6a
    cc04:	f7f7 fd30 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cc08:	4602      	mov	r2, r0
    cc0a:	7803      	ldrb	r3, [r0, #0]
    cc0c:	6840      	ldr	r0, [r0, #4]
    cc0e:	4408      	add	r0, r1
    cc10:	6050      	str	r0, [r2, #4]
    cc12:	3859      	subs	r0, #89	; 0x59
    cc14:	f7f6 bb66 	b.w	32e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    cc18:	2201      	movs	r2, #1
    cc1a:	7002      	strb	r2, [r0, #0]
    cc1c:	2200      	movs	r2, #0
    cc1e:	72c2      	strb	r2, [r0, #11]
    cc20:	790a      	ldrb	r2, [r1, #4]
    cc22:	b172      	cbz	r2, cc42 <strlen+0x32c>
    cc24:	2200      	movs	r2, #0
    cc26:	8102      	strh	r2, [r0, #8]
    cc28:	794a      	ldrb	r2, [r1, #5]
    cc2a:	b162      	cbz	r2, cc46 <strlen+0x330>
    cc2c:	2203      	movs	r2, #3
    cc2e:	7282      	strb	r2, [r0, #10]
    cc30:	688a      	ldr	r2, [r1, #8]
    cc32:	326a      	adds	r2, #106	; 0x6a
    cc34:	6042      	str	r2, [r0, #4]
    cc36:	68c9      	ldr	r1, [r1, #12]
    cc38:	6101      	str	r1, [r0, #16]
    cc3a:	2103      	movs	r1, #3
    cc3c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cc40:	4770      	bx	lr
    cc42:	222b      	movs	r2, #43	; 0x2b
    cc44:	e7ef      	b.n	cc26 <strlen+0x310>
    cc46:	2202      	movs	r2, #2
    cc48:	e7f1      	b.n	cc2e <strlen+0x318>
    cc4a:	b510      	push	{r4, lr}
    cc4c:	2200      	movs	r2, #0
    cc4e:	7002      	strb	r2, [r0, #0]
    cc50:	72c2      	strb	r2, [r0, #11]
    cc52:	790a      	ldrb	r2, [r1, #4]
    cc54:	b1a2      	cbz	r2, cc80 <strlen+0x36a>
    cc56:	2200      	movs	r2, #0
    cc58:	8102      	strh	r2, [r0, #8]
    cc5a:	794a      	ldrb	r2, [r1, #5]
    cc5c:	b192      	cbz	r2, cc84 <strlen+0x36e>
    cc5e:	2203      	movs	r2, #3
    cc60:	7282      	strb	r2, [r0, #10]
    cc62:	68ca      	ldr	r2, [r1, #12]
    cc64:	326a      	adds	r2, #106	; 0x6a
    cc66:	6042      	str	r2, [r0, #4]
    cc68:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    cc6c:	6889      	ldr	r1, [r1, #8]
    cc6e:	17cb      	asrs	r3, r1, #31
    cc70:	1861      	adds	r1, r4, r1
    cc72:	415a      	adcs	r2, r3
    cc74:	e9c0 1204 	strd	r1, r2, [r0, #16]
    cc78:	2104      	movs	r1, #4
    cc7a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cc7e:	bd10      	pop	{r4, pc}
    cc80:	222b      	movs	r2, #43	; 0x2b
    cc82:	e7e9      	b.n	cc58 <strlen+0x342>
    cc84:	2202      	movs	r2, #2
    cc86:	e7eb      	b.n	cc60 <strlen+0x34a>
    cc88:	b570      	push	{r4, r5, r6, lr}
    cc8a:	4605      	mov	r5, r0
    cc8c:	460c      	mov	r4, r1
    cc8e:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    cc92:	f7f6 f8f5 	bl	2e80 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    cc96:	b178      	cbz	r0, ccb8 <strlen+0x3a2>
    cc98:	4620      	mov	r0, r4
    cc9a:	f000 f810 	bl	ccbe <strlen+0x3a8>
    cc9e:	6a22      	ldr	r2, [r4, #32]
    cca0:	2109      	movs	r1, #9
    cca2:	4628      	mov	r0, r5
    cca4:	4790      	blx	r2
    cca6:	2800      	cmp	r0, #0
    cca8:	d008      	beq.n	ccbc <strlen+0x3a6>
    ccaa:	7800      	ldrb	r0, [r0, #0]
    ccac:	2800      	cmp	r0, #0
    ccae:	d005      	beq.n	ccbc <strlen+0x3a6>
    ccb0:	21dc      	movs	r1, #220	; 0xdc
    ccb2:	206a      	movs	r0, #106	; 0x6a
    ccb4:	f7f7 fcd8 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ccb8:	21d8      	movs	r1, #216	; 0xd8
    ccba:	e7fa      	b.n	ccb2 <strlen+0x39c>
    ccbc:	bd70      	pop	{r4, r5, r6, pc}
    ccbe:	2100      	movs	r1, #0
    ccc0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    ccc4:	f800 1f24 	strb.w	r1, [r0, #36]!
    ccc8:	7041      	strb	r1, [r0, #1]
    ccca:	4770      	bx	lr

0000cccc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    cccc:	b570      	push	{r4, r5, r6, lr}
    ccce:	f7f4 f9cd 	bl	106c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ccd2:	4605      	mov	r5, r0
    ccd4:	2400      	movs	r4, #0
    ccd6:	e006      	b.n	cce6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ccd8:	4620      	mov	r0, r4
    ccda:	f7f4 f9cd 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ccde:	f7ff ffee 	bl	ccbe <strlen+0x3a8>
    cce2:	1c64      	adds	r4, r4, #1
    cce4:	b2e4      	uxtb	r4, r4
    cce6:	42ac      	cmp	r4, r5
    cce8:	d3f6      	bcc.n	ccd8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ccea:	bd70      	pop	{r4, r5, r6, pc}

0000ccec <mpsl_timeslot_request>:
    ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf0:	460d      	mov	r5, r1
    ccf2:	f7f4 f9c1 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ccf6:	0004      	movs	r4, r0
    ccf8:	d008      	beq.n	cd0c <mpsl_timeslot_request+0x20>
    ccfa:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    ccfe:	f06f 0622 	mvn.w	r6, #34	; 0x22
    cd02:	2801      	cmp	r0, #1
    cd04:	d006      	beq.n	cd14 <mpsl_timeslot_request+0x28>
    cd06:	2802      	cmp	r0, #2
    cd08:	d111      	bne.n	cd2e <mpsl_timeslot_request+0x42>
    cd0a:	e003      	b.n	cd14 <mpsl_timeslot_request+0x28>
    cd0c:	f06f 0001 	mvn.w	r0, #1
    cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd14:	f06f 0715 	mvn.w	r7, #21
    cd18:	b15d      	cbz	r5, cd32 <mpsl_timeslot_request+0x46>
    cd1a:	4628      	mov	r0, r5
    cd1c:	f7f4 f91c 	bl	f58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    cd20:	b138      	cbz	r0, cd32 <mpsl_timeslot_request+0x46>
    cd22:	7828      	ldrb	r0, [r5, #0]
    cd24:	b138      	cbz	r0, cd36 <mpsl_timeslot_request+0x4a>
    cd26:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cd2a:	2802      	cmp	r0, #2
    cd2c:	d008      	beq.n	cd40 <mpsl_timeslot_request+0x54>
    cd2e:	4630      	mov	r0, r6
    cd30:	e7ee      	b.n	cd10 <mpsl_timeslot_request+0x24>
    cd32:	4638      	mov	r0, r7
    cd34:	e7ec      	b.n	cd10 <mpsl_timeslot_request+0x24>
    cd36:	4629      	mov	r1, r5
    cd38:	4620      	mov	r0, r4
    cd3a:	f7ff ff6d 	bl	cc18 <strlen+0x302>
    cd3e:	e003      	b.n	cd48 <mpsl_timeslot_request+0x5c>
    cd40:	4629      	mov	r1, r5
    cd42:	4620      	mov	r0, r4
    cd44:	f7ff ff81 	bl	cc4a <strlen+0x334>
    cd48:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cd4c:	4621      	mov	r1, r4
    cd4e:	f7ff fe49 	bl	c9e4 <strlen+0xce>
    cd52:	b108      	cbz	r0, cd58 <mpsl_timeslot_request+0x6c>
    cd54:	2000      	movs	r0, #0
    cd56:	e7db      	b.n	cd10 <mpsl_timeslot_request+0x24>
    cd58:	f240 21b1 	movw	r1, #689	; 0x2b1
    cd5c:	206a      	movs	r0, #106	; 0x6a
    cd5e:	f7f7 fc83 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000cd62 <mpsl_timeslot_session_close>:
    cd62:	b510      	push	{r4, lr}
    cd64:	4604      	mov	r4, r0
    cd66:	f7f4 f987 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cd6a:	0001      	movs	r1, r0
    cd6c:	d005      	beq.n	cd7a <mpsl_timeslot_session_close+0x18>
    cd6e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    cd72:	f06f 0222 	mvn.w	r2, #34	; 0x22
    cd76:	b978      	cbnz	r0, cd98 <mpsl_timeslot_session_close+0x36>
    cd78:	e002      	b.n	cd80 <mpsl_timeslot_session_close+0x1e>
    cd7a:	f06f 0001 	mvn.w	r0, #1
    cd7e:	bd10      	pop	{r4, pc}
    cd80:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    cd84:	b140      	cbz	r0, cd98 <mpsl_timeslot_session_close+0x36>
    cd86:	2802      	cmp	r0, #2
    cd88:	d008      	beq.n	cd9c <mpsl_timeslot_session_close+0x3a>
    cd8a:	2801      	cmp	r0, #1
    cd8c:	d006      	beq.n	cd9c <mpsl_timeslot_session_close+0x3a>
    cd8e:	2001      	movs	r0, #1
    cd90:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    cd94:	2000      	movs	r0, #0
    cd96:	bd10      	pop	{r4, pc}
    cd98:	4610      	mov	r0, r2
    cd9a:	bd10      	pop	{r4, pc}
    cd9c:	4620      	mov	r0, r4
    cd9e:	f7ff ff73 	bl	cc88 <strlen+0x372>
    cda2:	e7f7      	b.n	cd94 <mpsl_timeslot_session_close+0x32>

0000cda4 <mpsl_timeslot_session_count_set>:
    cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cda8:	460e      	mov	r6, r1
    cdaa:	4607      	mov	r7, r0
    cdac:	f7f4 f95e 	bl	106c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cdb0:	4605      	mov	r5, r0
    cdb2:	2400      	movs	r4, #0
    cdb4:	e00b      	b.n	cdce <mpsl_timeslot_session_count_set+0x2a>
    cdb6:	4620      	mov	r0, r4
    cdb8:	f7f4 f95e 	bl	1078 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cdbc:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    cdc0:	b118      	cbz	r0, cdca <mpsl_timeslot_session_count_set+0x26>
    cdc2:	f04f 30ff 	mov.w	r0, #4294967295
    cdc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cdca:	1c64      	adds	r4, r4, #1
    cdcc:	b2e4      	uxtb	r4, r4
    cdce:	42ac      	cmp	r4, r5
    cdd0:	d3f1      	bcc.n	cdb6 <mpsl_timeslot_session_count_set+0x12>
    cdd2:	2e08      	cmp	r6, #8
    cdd4:	d902      	bls.n	cddc <mpsl_timeslot_session_count_set+0x38>
    cdd6:	f06f 0015 	mvn.w	r0, #21
    cdda:	e7f4      	b.n	cdc6 <mpsl_timeslot_session_count_set+0x22>
    cddc:	b117      	cbz	r7, cde4 <mpsl_timeslot_session_count_set+0x40>
    cdde:	4631      	mov	r1, r6
    cde0:	4638      	mov	r0, r7
    cde2:	e001      	b.n	cde8 <mpsl_timeslot_session_count_set+0x44>
    cde4:	2100      	movs	r1, #0
    cde6:	4608      	mov	r0, r1
    cde8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cdec:	f7f4 b92a 	b.w	1044 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000cdf0 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    cdf0:	f7f6 bd1c 	b.w	382c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000cdf4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    cdf4:	b510      	push	{r4, lr}
    cdf6:	2000      	movs	r0, #0
    cdf8:	f7f7 f83e 	bl	3e78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    cdfc:	6800      	ldr	r0, [r0, #0]
    cdfe:	2800      	cmp	r0, #0
    ce00:	bf18      	it	ne
    ce02:	2001      	movne	r0, #1
    ce04:	bd10      	pop	{r4, pc}

0000ce06 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    ce06:	b510      	push	{r4, lr}
    ce08:	f7f7 f8b6 	bl	3f78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ce0c:	f7f6 fb88 	bl	3520 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ce10:	f000 f802 	bl	ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ce14:	b280      	uxth	r0, r0
    ce16:	bd10      	pop	{r4, pc}

0000ce18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    ce18:	0a41      	lsrs	r1, r0, #9
    ce1a:	f643 5209 	movw	r2, #15625	; 0x3d09
    ce1e:	4351      	muls	r1, r2
    ce20:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ce24:	fb10 f002 	smulbb	r0, r0, r2
    ce28:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ce2c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ce30:	4770      	bx	lr
    ce32:	2800      	cmp	r0, #0
    ce34:	db09      	blt.n	ce4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    ce36:	f000 021f 	and.w	r2, r0, #31
    ce3a:	2101      	movs	r1, #1
    ce3c:	4091      	lsls	r1, r2
    ce3e:	0940      	lsrs	r0, r0, #5
    ce40:	0080      	lsls	r0, r0, #2
    ce42:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce46:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce4a:	4770      	bx	lr
    ce4c:	2800      	cmp	r0, #0
    ce4e:	db0d      	blt.n	ce6c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    ce50:	f000 021f 	and.w	r2, r0, #31
    ce54:	2101      	movs	r1, #1
    ce56:	4091      	lsls	r1, r2
    ce58:	0940      	lsrs	r0, r0, #5
    ce5a:	0080      	lsls	r0, r0, #2
    ce5c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce60:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ce64:	f3bf 8f4f 	dsb	sy
    ce68:	f3bf 8f6f 	isb	sy
    ce6c:	4770      	bx	lr

0000ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ce6e:	b570      	push	{r4, r5, r6, lr}
    ce70:	4602      	mov	r2, r0
    ce72:	2000      	movs	r0, #0
    ce74:	2900      	cmp	r1, #0
    ce76:	d01d      	beq.n	ceb4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ce78:	fba2 0101 	umull	r0, r1, r2, r1
    ce7c:	0a40      	lsrs	r0, r0, #9
    ce7e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    ce82:	0a49      	lsrs	r1, r1, #9
    ce84:	1c40      	adds	r0, r0, #1
    ce86:	f141 0100 	adc.w	r1, r1, #0
    ce8a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    ce8e:	1883      	adds	r3, r0, r2
    ce90:	f141 0100 	adc.w	r1, r1, #0
    ce94:	1c5b      	adds	r3, r3, #1
    ce96:	f141 0400 	adc.w	r4, r1, #0
    ce9a:	2100      	movs	r1, #0
    ce9c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cea0:	41a1      	sbcs	r1, r4
    cea2:	d203      	bcs.n	ceac <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    cea4:	2172      	movs	r1, #114	; 0x72
    cea6:	206d      	movs	r0, #109	; 0x6d
    cea8:	f7f7 fbde 	bl	4668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ceac:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ceb0:	fbb0 f0f2 	udiv	r0, r0, r2
    ceb4:	bd70      	pop	{r4, r5, r6, pc}
    ceb6:	5840      	ldr	r0, [r0, r1]
    ceb8:	2800      	cmp	r0, #0
    ceba:	d000      	beq.n	cebe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cebc:	2001      	movs	r0, #1
    cebe:	4770      	bx	lr
    cec0:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    cec4:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    cec8:	f002 0201 	and.w	r2, r2, #1
    cecc:	03c0      	lsls	r0, r0, #15
    cece:	d503      	bpl.n	ced8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ced0:	428a      	cmp	r2, r1
    ced2:	d101      	bne.n	ced8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ced4:	2001      	movs	r0, #1
    ced6:	4770      	bx	lr
    ced8:	2000      	movs	r0, #0
    ceda:	4770      	bx	lr

0000cedc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    cedc:	b510      	push	{r4, lr}
    cede:	2101      	movs	r1, #1
    cee0:	0788      	lsls	r0, r1, #30
    cee2:	f7f7 fb6b 	bl	45bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cee6:	2800      	cmp	r0, #0
    cee8:	d000      	beq.n	ceec <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ceea:	2001      	movs	r0, #1
    ceec:	bd10      	pop	{r4, pc}

0000ceee <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ceee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cef2:	2101      	movs	r1, #1
    cef4:	6001      	str	r1, [r0, #0]
    cef6:	4770      	bx	lr

0000cef8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cef8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cefc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cf00:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cf04:	f002 0203 	and.w	r2, r2, #3
    cf08:	03c9      	lsls	r1, r1, #15
    cf0a:	d503      	bpl.n	cf14 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cf0c:	4282      	cmp	r2, r0
    cf0e:	d101      	bne.n	cf14 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cf10:	2001      	movs	r0, #1
    cf12:	4770      	bx	lr
    cf14:	2000      	movs	r0, #0
    cf16:	4770      	bx	lr

0000cf18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cf18:	b510      	push	{r4, lr}
    cf1a:	2100      	movs	r1, #0
    cf1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cf20:	f7f7 fb4c 	bl	45bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cf24:	2800      	cmp	r0, #0
    cf26:	d000      	beq.n	cf2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cf28:	2001      	movs	r0, #1
    cf2a:	bd10      	pop	{r4, pc}
    cf2c:	2800      	cmp	r0, #0
    cf2e:	db09      	blt.n	cf44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cf30:	f000 021f 	and.w	r2, r0, #31
    cf34:	2101      	movs	r1, #1
    cf36:	4091      	lsls	r1, r2
    cf38:	0940      	lsrs	r0, r0, #5
    cf3a:	0080      	lsls	r0, r0, #2
    cf3c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf40:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cf44:	4770      	bx	lr
    cf46:	2800      	cmp	r0, #0
    cf48:	db0d      	blt.n	cf66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cf4a:	f000 021f 	and.w	r2, r0, #31
    cf4e:	2101      	movs	r1, #1
    cf50:	4091      	lsls	r1, r2
    cf52:	0940      	lsrs	r0, r0, #5
    cf54:	0080      	lsls	r0, r0, #2
    cf56:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf5a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cf5e:	f3bf 8f4f 	dsb	sy
    cf62:	f3bf 8f6f 	isb	sy
    cf66:	4770      	bx	lr
    cf68:	00021000 	.word	0x00021000
    cf6c:	000000fa 	.word	0x000000fa
    cf70:	63a70f14 	.word	0x63a70f14
    cf74:	c477f9cf 	.word	0xc477f9cf
    cf78:	e931f9ef 	.word	0xe931f9ef
    cf7c:	03bcf561 	.word	0x03bcf561
    cf80:	2b06749a 	.word	0x2b06749a
    cf84:	2800      	cmp	r0, #0
    cf86:	db09      	blt.n	cf9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cf88:	f000 021f 	and.w	r2, r0, #31
    cf8c:	2101      	movs	r1, #1
    cf8e:	4091      	lsls	r1, r2
    cf90:	0940      	lsrs	r0, r0, #5
    cf92:	0080      	lsls	r0, r0, #2
    cf94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cf98:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cf9c:	4770      	bx	lr

0000cf9e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cf9e:	f3ef 8110 	mrs	r1, PRIMASK
    cfa2:	b672      	cpsid	i
    cfa4:	7802      	ldrb	r2, [r0, #0]
    cfa6:	2a01      	cmp	r2, #1
    cfa8:	d001      	beq.n	cfae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cfaa:	2201      	movs	r2, #1
    cfac:	e000      	b.n	cfb0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cfae:	2200      	movs	r2, #0
    cfb0:	2301      	movs	r3, #1
    cfb2:	7003      	strb	r3, [r0, #0]
    cfb4:	b901      	cbnz	r1, cfb8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cfb6:	b662      	cpsie	i
    cfb8:	b10a      	cbz	r2, cfbe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cfba:	2000      	movs	r0, #0
    cfbc:	4770      	bx	lr
    cfbe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfc2:	4770      	bx	lr

0000cfc4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cfc4:	2100      	movs	r1, #0
    cfc6:	7001      	strb	r1, [r0, #0]
    cfc8:	4608      	mov	r0, r1
    cfca:	4770      	bx	lr

0000cfcc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cfcc:	f3ef 8110 	mrs	r1, PRIMASK
    cfd0:	b672      	cpsid	i
    cfd2:	2200      	movs	r2, #0
    cfd4:	7002      	strb	r2, [r0, #0]
    cfd6:	b901      	cbnz	r1, cfda <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cfd8:	b662      	cpsie	i
    cfda:	2000      	movs	r0, #0
    cfdc:	4770      	bx	lr

0000cfde <mpsl_low_priority_process>:
    cfde:	f7f7 bc33 	b.w	4848 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cfe2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cfe2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cfe6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cfea:	280f      	cmp	r0, #15
    cfec:	d001      	beq.n	cff2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cfee:	2000      	movs	r0, #0
    cff0:	4770      	bx	lr
    cff2:	2001      	movs	r0, #1
    cff4:	4770      	bx	lr

0000cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cff6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cffa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cffe:	280a      	cmp	r0, #10
    d000:	d001      	beq.n	d006 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d002:	2000      	movs	r0, #0
    d004:	4770      	bx	lr
    d006:	2001      	movs	r0, #1
    d008:	4770      	bx	lr

0000d00a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d00a:	b500      	push	{lr}
    d00c:	f7ff fff3 	bl	cff6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d010:	b120      	cbz	r0, d01c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d012:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d016:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d01a:	b108      	cbz	r0, d020 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d01c:	2000      	movs	r0, #0
    d01e:	bd00      	pop	{pc}
    d020:	2001      	movs	r0, #1
    d022:	bd00      	pop	{pc}

0000d024 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d024:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d028:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d02c:	280e      	cmp	r0, #14
    d02e:	d001      	beq.n	d034 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d030:	2000      	movs	r0, #0
    d032:	4770      	bx	lr
    d034:	2001      	movs	r0, #1
    d036:	4770      	bx	lr

0000d038 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d038:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d03c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d040:	2810      	cmp	r0, #16
    d042:	d001      	beq.n	d048 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d044:	2000      	movs	r0, #0
    d046:	4770      	bx	lr
    d048:	2001      	movs	r0, #1
    d04a:	4770      	bx	lr

0000d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d04c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d050:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d054:	2806      	cmp	r0, #6
    d056:	d003      	beq.n	d060 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d058:	1c40      	adds	r0, r0, #1
    d05a:	d001      	beq.n	d060 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d05c:	2000      	movs	r0, #0
    d05e:	4770      	bx	lr
    d060:	2001      	movs	r0, #1
    d062:	4770      	bx	lr

0000d064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d064:	b500      	push	{lr}
    d066:	f7ff fff1 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d06a:	b148      	cbz	r0, d080 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d06c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d070:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d074:	2806      	cmp	r0, #6
    d076:	d303      	bcc.n	d080 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d078:	1c40      	adds	r0, r0, #1
    d07a:	d001      	beq.n	d080 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d07c:	2001      	movs	r0, #1
    d07e:	bd00      	pop	{pc}
    d080:	2000      	movs	r0, #0
    d082:	bd00      	pop	{pc}

0000d084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d084:	b500      	push	{lr}
    d086:	f7ff ffe1 	bl	d04c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d08a:	b138      	cbz	r0, d09c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d08c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d090:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d094:	2806      	cmp	r0, #6
    d096:	d303      	bcc.n	d0a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d098:	1c40      	adds	r0, r0, #1
    d09a:	d001      	beq.n	d0a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d09c:	2000      	movs	r0, #0
    d09e:	bd00      	pop	{pc}
    d0a0:	2001      	movs	r0, #1
    d0a2:	bd00      	pop	{pc}

0000d0a4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d0a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d0a8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d0ac:	280d      	cmp	r0, #13
    d0ae:	d001      	beq.n	d0b4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d0b0:	2000      	movs	r0, #0
    d0b2:	4770      	bx	lr
    d0b4:	2001      	movs	r0, #1
    d0b6:	4770      	bx	lr

0000d0b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d0b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d0bc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d0c0:	2808      	cmp	r0, #8
    d0c2:	d001      	beq.n	d0c8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d0c4:	2000      	movs	r0, #0
    d0c6:	4770      	bx	lr
    d0c8:	2001      	movs	r0, #1
    d0ca:	4770      	bx	lr

0000d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d0cc:	b4f0      	push	{r4, r5, r6, r7}
    d0ce:	ea80 0c01 	eor.w	ip, r0, r1
    d0d2:	4603      	mov	r3, r0
    d0d4:	f01c 0f03 	tst.w	ip, #3
    d0d8:	d13c      	bne.n	d154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d0da:	f013 0f03 	tst.w	r3, #3
    d0de:	d00b      	beq.n	d0f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d0e0:	2a00      	cmp	r2, #0
    d0e2:	bf04      	itt	eq
    d0e4:	bcf0      	popeq	{r4, r5, r6, r7}
    d0e6:	4770      	bxeq	lr
    d0e8:	f811 cb01 	ldrb.w	ip, [r1], #1
    d0ec:	f803 cb01 	strb.w	ip, [r3], #1
    d0f0:	1e52      	subs	r2, r2, #1
    d0f2:	f013 0f03 	tst.w	r3, #3
    d0f6:	d1f3      	bne.n	d0e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d0f8:	2a03      	cmp	r2, #3
    d0fa:	d94f      	bls.n	d19c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d0fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d100:	d24c      	bcs.n	d19c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d102:	f1c2 0c00 	rsb	ip, r2, #0
    d106:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d10a:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d10e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d112:	f1cc 0c00 	rsb	ip, ip, #0
    d116:	f1bc 0f00 	cmp.w	ip, #0
    d11a:	dd1b      	ble.n	d154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d11c:	1f0d      	subs	r5, r1, #4
    d11e:	1f1c      	subs	r4, r3, #4
    d120:	f01c 0f01 	tst.w	ip, #1
    d124:	d003      	beq.n	d12e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d126:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d12a:	f844 6f04 	str.w	r6, [r4, #4]!
    d12e:	ea5f 066c 	movs.w	r6, ip, asr #1
    d132:	d007      	beq.n	d144 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d134:	686f      	ldr	r7, [r5, #4]
    d136:	6067      	str	r7, [r4, #4]
    d138:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d13c:	f844 7f08 	str.w	r7, [r4, #8]!
    d140:	1e76      	subs	r6, r6, #1
    d142:	d1f7      	bne.n	d134 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d144:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d148:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d14c:	f1cc 0c00 	rsb	ip, ip, #0
    d150:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d154:	2a00      	cmp	r2, #0
    d156:	bf04      	itt	eq
    d158:	bcf0      	popeq	{r4, r5, r6, r7}
    d15a:	4770      	bxeq	lr
    d15c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d160:	d226      	bcs.n	d1b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d162:	2a00      	cmp	r2, #0
    d164:	bfdc      	itt	le
    d166:	bcf0      	pople	{r4, r5, r6, r7}
    d168:	4770      	bxle	lr
    d16a:	1e49      	subs	r1, r1, #1
    d16c:	1e5b      	subs	r3, r3, #1
    d16e:	f012 0f01 	tst.w	r2, #1
    d172:	d003      	beq.n	d17c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d174:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d178:	f803 cf01 	strb.w	ip, [r3, #1]!
    d17c:	1052      	asrs	r2, r2, #1
    d17e:	bf04      	itt	eq
    d180:	bcf0      	popeq	{r4, r5, r6, r7}
    d182:	4770      	bxeq	lr
    d184:	f891 c001 	ldrb.w	ip, [r1, #1]
    d188:	f883 c001 	strb.w	ip, [r3, #1]
    d18c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d190:	f803 cf02 	strb.w	ip, [r3, #2]!
    d194:	1e52      	subs	r2, r2, #1
    d196:	d1f5      	bne.n	d184 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d198:	bcf0      	pop	{r4, r5, r6, r7}
    d19a:	4770      	bx	lr
    d19c:	2a04      	cmp	r2, #4
    d19e:	d3d9      	bcc.n	d154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d1a0:	f851 cb04 	ldr.w	ip, [r1], #4
    d1a4:	1f12      	subs	r2, r2, #4
    d1a6:	f843 cb04 	str.w	ip, [r3], #4
    d1aa:	2a04      	cmp	r2, #4
    d1ac:	d2f8      	bcs.n	d1a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d1ae:	e7d1      	b.n	d154 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d1b0:	f811 cb01 	ldrb.w	ip, [r1], #1
    d1b4:	f803 cb01 	strb.w	ip, [r3], #1
    d1b8:	1e52      	subs	r2, r2, #1
    d1ba:	d1f9      	bne.n	d1b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d1bc:	bcf0      	pop	{r4, r5, r6, r7}
    d1be:	4770      	bx	lr

0000d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d1c0:	b470      	push	{r4, r5, r6}
    d1c2:	4603      	mov	r3, r0
    d1c4:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d1c8:	f010 0f03 	tst.w	r0, #3
    d1cc:	d009      	beq.n	d1e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d1ce:	2a00      	cmp	r2, #0
    d1d0:	bf04      	itt	eq
    d1d2:	bc70      	popeq	{r4, r5, r6}
    d1d4:	4770      	bxeq	lr
    d1d6:	f803 cb01 	strb.w	ip, [r3], #1
    d1da:	1e52      	subs	r2, r2, #1
    d1dc:	f013 0f03 	tst.w	r3, #3
    d1e0:	d1f5      	bne.n	d1ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d1e2:	b2c9      	uxtb	r1, r1
    d1e4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d1e8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d1ec:	2a03      	cmp	r2, #3
    d1ee:	d939      	bls.n	d264 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d1f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d1f4:	d236      	bcs.n	d264 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d1f6:	4251      	negs	r1, r2
    d1f8:	17cc      	asrs	r4, r1, #31
    d1fa:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d1fe:	1089      	asrs	r1, r1, #2
    d200:	424e      	negs	r6, r1
    d202:	2e00      	cmp	r6, #0
    d204:	dd11      	ble.n	d22a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d206:	1f19      	subs	r1, r3, #4
    d208:	f016 0f01 	tst.w	r6, #1
    d20c:	bf18      	it	ne
    d20e:	f841 5f04 	strne.w	r5, [r1, #4]!
    d212:	1074      	asrs	r4, r6, #1
    d214:	d004      	beq.n	d220 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d216:	604d      	str	r5, [r1, #4]
    d218:	f841 5f08 	str.w	r5, [r1, #8]!
    d21c:	1e64      	subs	r4, r4, #1
    d21e:	d1fa      	bne.n	d216 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d220:	4271      	negs	r1, r6
    d222:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d226:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d22a:	2a00      	cmp	r2, #0
    d22c:	bf04      	itt	eq
    d22e:	bc70      	popeq	{r4, r5, r6}
    d230:	4770      	bxeq	lr
    d232:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d236:	d21d      	bcs.n	d274 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d238:	2a00      	cmp	r2, #0
    d23a:	bfdc      	itt	le
    d23c:	bc70      	pople	{r4, r5, r6}
    d23e:	4770      	bxle	lr
    d240:	1e59      	subs	r1, r3, #1
    d242:	f012 0f01 	tst.w	r2, #1
    d246:	bf18      	it	ne
    d248:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d24c:	1052      	asrs	r2, r2, #1
    d24e:	bf04      	itt	eq
    d250:	bc70      	popeq	{r4, r5, r6}
    d252:	4770      	bxeq	lr
    d254:	f881 c001 	strb.w	ip, [r1, #1]
    d258:	f801 cf02 	strb.w	ip, [r1, #2]!
    d25c:	1e52      	subs	r2, r2, #1
    d25e:	d1f9      	bne.n	d254 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d260:	bc70      	pop	{r4, r5, r6}
    d262:	4770      	bx	lr
    d264:	2a04      	cmp	r2, #4
    d266:	d3e0      	bcc.n	d22a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d268:	1f12      	subs	r2, r2, #4
    d26a:	f843 5b04 	str.w	r5, [r3], #4
    d26e:	2a04      	cmp	r2, #4
    d270:	d2fa      	bcs.n	d268 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d272:	e7da      	b.n	d22a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d274:	f803 cb01 	strb.w	ip, [r3], #1
    d278:	1e52      	subs	r2, r2, #1
    d27a:	d1fb      	bne.n	d274 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d27c:	bc70      	pop	{r4, r5, r6}
    d27e:	4770      	bx	lr
    d280:	f04f 30ff 	mov.w	r0, #4294967295
    d284:	4770      	bx	lr
    d286:	2000      	movs	r0, #0
    d288:	4770      	bx	lr
    d28a:	2000      	movs	r0, #0
    d28c:	4770      	bx	lr
    d28e:	f04f 30ff 	mov.w	r0, #4294967295
    d292:	4770      	bx	lr
    d294:	4770      	bx	lr
    d296:	4770      	bx	lr
    d298:	2000      	movs	r0, #0
    d29a:	4770      	bx	lr
    d29c:	2100      	movs	r1, #0
    d29e:	7001      	strb	r1, [r0, #0]
    d2a0:	4770      	bx	lr
    d2a2:	f04f 30ff 	mov.w	r0, #4294967295
    d2a6:	4770      	bx	lr
    d2a8:	f04f 30ff 	mov.w	r0, #4294967295
    d2ac:	4770      	bx	lr
    d2ae:	2100      	movs	r1, #0
    d2b0:	7001      	strb	r1, [r0, #0]
    d2b2:	4770      	bx	lr
    d2b4:	f04f 30ff 	mov.w	r0, #4294967295
    d2b8:	4770      	bx	lr
    d2ba:	f04f 30ff 	mov.w	r0, #4294967295
    d2be:	4770      	bx	lr
    d2c0:	7800      	ldrb	r0, [r0, #0]
    d2c2:	2800      	cmp	r0, #0
    d2c4:	d001      	beq.n	d2ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    d2c6:	f06f 0015 	mvn.w	r0, #21
    d2ca:	4770      	bx	lr
    d2cc:	2000      	movs	r0, #0
    d2ce:	4770      	bx	lr
    d2d0:	2200      	movs	r2, #0
    d2d2:	f000 b800 	b.w	d2d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d2d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d2d6:	b570      	push	{r4, r5, r6, lr}
    d2d8:	4614      	mov	r4, r2
    d2da:	460d      	mov	r5, r1
    d2dc:	1b00      	subs	r0, r0, r4
    d2de:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d2e2:	4288      	cmp	r0, r1
    d2e4:	da01      	bge.n	d2ea <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    d2e6:	4608      	mov	r0, r1
    d2e8:	e002      	b.n	d2f0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d2ea:	287f      	cmp	r0, #127	; 0x7f
    d2ec:	dd00      	ble.n	d2f0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d2ee:	207f      	movs	r0, #127	; 0x7f
    d2f0:	b240      	sxtb	r0, r0
    d2f2:	f7f3 fdff 	bl	ef4 <mpsl_tx_power_radio_supported_power_adjust>
    d2f6:	7028      	strb	r0, [r5, #0]
    d2f8:	706c      	strb	r4, [r5, #1]
    d2fa:	2100      	movs	r1, #0
    d2fc:	4420      	add	r0, r4
    d2fe:	70a9      	strb	r1, [r5, #2]
    d300:	b240      	sxtb	r0, r0
    d302:	bd70      	pop	{r4, r5, r6, pc}
    d304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d308:	460c      	mov	r4, r1
    d30a:	4681      	mov	r9, r0
    d30c:	7849      	ldrb	r1, [r1, #1]
    d30e:	f100 0003 	add.w	r0, r0, #3
    d312:	f88d 1000 	strb.w	r1, [sp]
    d316:	f020 0003 	bic.w	r0, r0, #3
    d31a:	78a1      	ldrb	r1, [r4, #2]
    d31c:	0016      	movs	r6, r2
    d31e:	4605      	mov	r5, r0
    d320:	f88d 1001 	strb.w	r1, [sp, #1]
    d324:	d000      	beq.n	d328 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    d326:	2000      	movs	r0, #0
    d328:	4669      	mov	r1, sp
    d32a:	f7f7 fe71 	bl	5010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d32e:	4428      	add	r0, r5
    d330:	78a1      	ldrb	r1, [r4, #2]
    d332:	4605      	mov	r5, r0
    d334:	b131      	cbz	r1, d344 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    d336:	8a63      	ldrh	r3, [r4, #18]
    d338:	78e2      	ldrb	r2, [r4, #3]
    d33a:	b106      	cbz	r6, d33e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    d33c:	2000      	movs	r0, #0
    d33e:	f7f8 f8f9 	bl	5534 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d342:	4405      	add	r5, r0
    d344:	7820      	ldrb	r0, [r4, #0]
    d346:	7861      	ldrb	r1, [r4, #1]
    d348:	46b2      	mov	sl, r6
    d34a:	2600      	movs	r6, #0
    d34c:	4408      	add	r0, r1
    d34e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d352:	4637      	mov	r7, r6
    d354:	e008      	b.n	d368 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    d356:	7a23      	ldrb	r3, [r4, #8]
    d358:	79e2      	ldrb	r2, [r4, #7]
    d35a:	79a1      	ldrb	r1, [r4, #6]
    d35c:	7960      	ldrb	r0, [r4, #5]
    d35e:	f000 ff0d 	bl	e17c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d362:	1c7f      	adds	r7, r7, #1
    d364:	4406      	add	r6, r0
    d366:	b2ff      	uxtb	r7, r7
    d368:	4547      	cmp	r7, r8
    d36a:	d3f4      	bcc.n	d356 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    d36c:	1ced      	adds	r5, r5, #3
    d36e:	f025 0003 	bic.w	r0, r5, #3
    d372:	4604      	mov	r4, r0
    d374:	f1ba 0f00 	cmp.w	sl, #0
    d378:	d000      	beq.n	d37c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    d37a:	2000      	movs	r0, #0
    d37c:	4632      	mov	r2, r6
    d37e:	4641      	mov	r1, r8
    d380:	f7f8 f822 	bl	53c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d384:	4420      	add	r0, r4
    d386:	1dc0      	adds	r0, r0, #7
    d388:	f020 0007 	bic.w	r0, r0, #7
    d38c:	eba0 0009 	sub.w	r0, r0, r9
    d390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d394 <sdc_soc_ecb_block_encrypt>:
    d394:	b530      	push	{r4, r5, lr}
    d396:	460d      	mov	r5, r1
    d398:	b08d      	sub	sp, #52	; 0x34
    d39a:	4614      	mov	r4, r2
    d39c:	4601      	mov	r1, r0
    d39e:	2210      	movs	r2, #16
    d3a0:	4668      	mov	r0, sp
    d3a2:	f7ff fe93 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3a6:	2210      	movs	r2, #16
    d3a8:	4629      	mov	r1, r5
    d3aa:	a804      	add	r0, sp, #16
    d3ac:	f7ff fe8e 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3b0:	4668      	mov	r0, sp
    d3b2:	f001 f864 	bl	e47e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d3b6:	b118      	cbz	r0, d3c0 <sdc_soc_ecb_block_encrypt+0x2c>
    d3b8:	f06f 0015 	mvn.w	r0, #21
    d3bc:	b00d      	add	sp, #52	; 0x34
    d3be:	bd30      	pop	{r4, r5, pc}
    d3c0:	2210      	movs	r2, #16
    d3c2:	4620      	mov	r0, r4
    d3c4:	a908      	add	r1, sp, #32
    d3c6:	f7ff fe81 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3ca:	2000      	movs	r0, #0
    d3cc:	e7f6      	b.n	d3bc <sdc_soc_ecb_block_encrypt+0x28>

0000d3ce <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d3ce:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d3d0:	4604      	mov	r4, r0
    d3d2:	1d01      	adds	r1, r0, #4
    d3d4:	4668      	mov	r0, sp
    d3d6:	f7f9 fc97 	bl	6d08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d3da:	2800      	cmp	r0, #0
    d3dc:	d004      	beq.n	d3e8 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d3de:	4669      	mov	r1, sp
    d3e0:	4620      	mov	r0, r4
    d3e2:	f000 f848 	bl	d476 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d3e6:	2001      	movs	r0, #1
    d3e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d3ea <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d3ea:	b50e      	push	{r1, r2, r3, lr}
    d3ec:	4601      	mov	r1, r0
    d3ee:	4668      	mov	r0, sp
    d3f0:	f000 f827 	bl	d442 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d3f4:	4668      	mov	r0, sp
    d3f6:	f001 fd03 	bl	ee00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d3fa:	bd0e      	pop	{r1, r2, r3, pc}

0000d3fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d3fc:	b510      	push	{r4, lr}
    d3fe:	4604      	mov	r4, r0
    d400:	4620      	mov	r0, r4
    d402:	f7f7 fcf9 	bl	4df8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d406:	2800      	cmp	r0, #0
    d408:	d006      	beq.n	d418 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d40a:	78a1      	ldrb	r1, [r4, #2]
    d40c:	7820      	ldrb	r0, [r4, #0]
    d40e:	f000 f804 	bl	d41a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d412:	2800      	cmp	r0, #0
    d414:	d0f4      	beq.n	d400 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d416:	2001      	movs	r0, #1
    d418:	bd10      	pop	{r4, pc}
    d41a:	b570      	push	{r4, r5, r6, lr}
    d41c:	460c      	mov	r4, r1
    d41e:	4605      	mov	r5, r0
    d420:	f7f7 fd5c 	bl	4edc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d424:	2800      	cmp	r0, #0
    d426:	d002      	beq.n	d42e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d428:	2d3e      	cmp	r5, #62	; 0x3e
    d42a:	d001      	beq.n	d430 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d42c:	2001      	movs	r0, #1
    d42e:	bd70      	pop	{r4, r5, r6, pc}
    d430:	2c12      	cmp	r4, #18
    d432:	d004      	beq.n	d43e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d434:	4620      	mov	r0, r4
    d436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d43a:	f7f7 bd61 	b.w	4f00 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d43e:	2000      	movs	r0, #0
    d440:	bd70      	pop	{r4, r5, r6, pc}

0000d442 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d442:	880a      	ldrh	r2, [r1, #0]
    d444:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d448:	8002      	strh	r2, [r0, #0]
    d44a:	884a      	ldrh	r2, [r1, #2]
    d44c:	8042      	strh	r2, [r0, #2]
    d44e:	784a      	ldrb	r2, [r1, #1]
    d450:	0993      	lsrs	r3, r2, #6
    d452:	2200      	movs	r2, #0
    d454:	7142      	strb	r2, [r0, #5]
    d456:	784b      	ldrb	r3, [r1, #1]
    d458:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d45c:	b11b      	cbz	r3, d466 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d45e:	2b01      	cmp	r3, #1
    d460:	d005      	beq.n	d46e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d462:	2b02      	cmp	r3, #2
    d464:	d005      	beq.n	d472 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d466:	7102      	strb	r2, [r0, #4]
    d468:	1d09      	adds	r1, r1, #4
    d46a:	6081      	str	r1, [r0, #8]
    d46c:	4770      	bx	lr
    d46e:	2201      	movs	r2, #1
    d470:	e7f9      	b.n	d466 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d472:	2202      	movs	r2, #2
    d474:	e7f7      	b.n	d466 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d476 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d476:	b510      	push	{r4, lr}
    d478:	460c      	mov	r4, r1
    d47a:	7809      	ldrb	r1, [r1, #0]
    d47c:	7001      	strb	r1, [r0, #0]
    d47e:	7841      	ldrb	r1, [r0, #1]
    d480:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    d484:	7041      	strb	r1, [r0, #1]
    d486:	8822      	ldrh	r2, [r4, #0]
    d488:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d48c:	4311      	orrs	r1, r2
    d48e:	7041      	strb	r1, [r0, #1]
    d490:	78a2      	ldrb	r2, [r4, #2]
    d492:	7082      	strb	r2, [r0, #2]
    d494:	8862      	ldrh	r2, [r4, #2]
    d496:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    d49a:	0a12      	lsrs	r2, r2, #8
    d49c:	70c2      	strb	r2, [r0, #3]
    d49e:	7041      	strb	r1, [r0, #1]
    d4a0:	7922      	ldrb	r2, [r4, #4]
    d4a2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d4a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    d4aa:	7041      	strb	r1, [r0, #1]
    d4ac:	7962      	ldrb	r2, [r4, #5]
    d4ae:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d4b2:	7041      	strb	r1, [r0, #1]
    d4b4:	68a1      	ldr	r1, [r4, #8]
    d4b6:	1d02      	adds	r2, r0, #4
    d4b8:	4291      	cmp	r1, r2
    d4ba:	d006      	beq.n	d4ca <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    d4bc:	8862      	ldrh	r2, [r4, #2]
    d4be:	2afb      	cmp	r2, #251	; 0xfb
    d4c0:	d300      	bcc.n	d4c4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    d4c2:	22fb      	movs	r2, #251	; 0xfb
    d4c4:	1d00      	adds	r0, r0, #4
    d4c6:	f7ff fe01 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d4ca:	78a0      	ldrb	r0, [r4, #2]
    d4cc:	1d00      	adds	r0, r0, #4
    d4ce:	b2c0      	uxtb	r0, r0
    d4d0:	bd10      	pop	{r4, pc}

0000d4d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4d6:	4604      	mov	r4, r0
    d4d8:	f891 c000 	ldrb.w	ip, [r1]
    d4dc:	2000      	movs	r0, #0
    d4de:	2513      	movs	r5, #19
    d4e0:	260c      	movs	r6, #12
    d4e2:	2705      	movs	r7, #5
    d4e4:	223e      	movs	r2, #62	; 0x3e
    d4e6:	23ff      	movs	r3, #255	; 0xff
    d4e8:	f1bc 0f1b 	cmp.w	ip, #27
    d4ec:	d27d      	bcs.n	d5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    d4ee:	e8df f00c 	tbb	[pc, ip]
    d4f2:	0e7c      	.short	0x0e7c
    d4f4:	872d2725 	.word	0x872d2725
    d4f8:	d0bda391 	.word	0xd0bda391
    d4fc:	f2f4ddd2 	.word	0xf2f4ddd2
    d500:	537c7cf1 	.word	0x537c7cf1
    d504:	edeeefff 	.word	0xedeeefff
    d508:	e9eaebec 	.word	0xe9eaebec
    d50c:	00e8      	.short	0x00e8
    d50e:	7026      	strb	r6, [r4, #0]
    d510:	7908      	ldrb	r0, [r1, #4]
    d512:	70a0      	strb	r0, [r4, #2]
    d514:	7948      	ldrb	r0, [r1, #5]
    d516:	70e0      	strb	r0, [r4, #3]
    d518:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d51c:	0a00      	lsrs	r0, r0, #8
    d51e:	7120      	strb	r0, [r4, #4]
    d520:	79c8      	ldrb	r0, [r1, #7]
    d522:	7160      	strb	r0, [r4, #5]
    d524:	7a08      	ldrb	r0, [r1, #8]
    d526:	71a0      	strb	r0, [r4, #6]
    d528:	8908      	ldrh	r0, [r1, #8]
    d52a:	0a00      	lsrs	r0, r0, #8
    d52c:	71e0      	strb	r0, [r4, #7]
    d52e:	7a88      	ldrb	r0, [r1, #10]
    d530:	7220      	strb	r0, [r4, #8]
    d532:	8948      	ldrh	r0, [r1, #10]
    d534:	0a00      	lsrs	r0, r0, #8
    d536:	7260      	strb	r0, [r4, #9]
    d538:	2008      	movs	r0, #8
    d53a:	e174      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d53c:	2010      	movs	r0, #16
    d53e:	e000      	b.n	d542 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d540:	201a      	movs	r0, #26
    d542:	7020      	strb	r0, [r4, #0]
    d544:	7908      	ldrb	r0, [r1, #4]
    d546:	70a0      	strb	r0, [r4, #2]
    d548:	2001      	movs	r0, #1
    d54a:	e16c      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d54c:	7022      	strb	r2, [r4, #0]
    d54e:	2001      	movs	r0, #1
    d550:	70a0      	strb	r0, [r4, #2]
    d552:	7908      	ldrb	r0, [r1, #4]
    d554:	70e0      	strb	r0, [r4, #3]
    d556:	7988      	ldrb	r0, [r1, #6]
    d558:	7120      	strb	r0, [r4, #4]
    d55a:	88c8      	ldrh	r0, [r1, #6]
    d55c:	0a00      	lsrs	r0, r0, #8
    d55e:	7160      	strb	r0, [r4, #5]
    d560:	7a08      	ldrb	r0, [r1, #8]
    d562:	71a0      	strb	r0, [r4, #6]
    d564:	7a48      	ldrb	r0, [r1, #9]
    d566:	71e0      	strb	r0, [r4, #7]
    d568:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d56c:	60a0      	str	r0, [r4, #8]
    d56e:	89c8      	ldrh	r0, [r1, #14]
    d570:	81a0      	strh	r0, [r4, #12]
    d572:	7c08      	ldrb	r0, [r1, #16]
    d574:	73a0      	strb	r0, [r4, #14]
    d576:	8a08      	ldrh	r0, [r1, #16]
    d578:	0a00      	lsrs	r0, r0, #8
    d57a:	73e0      	strb	r0, [r4, #15]
    d57c:	7c88      	ldrb	r0, [r1, #18]
    d57e:	7420      	strb	r0, [r4, #16]
    d580:	8a48      	ldrh	r0, [r1, #18]
    d582:	0a00      	lsrs	r0, r0, #8
    d584:	7460      	strb	r0, [r4, #17]
    d586:	7d08      	ldrb	r0, [r1, #20]
    d588:	74a0      	strb	r0, [r4, #18]
    d58a:	8a88      	ldrh	r0, [r1, #20]
    d58c:	0a00      	lsrs	r0, r0, #8
    d58e:	74e0      	strb	r0, [r4, #19]
    d590:	7d88      	ldrb	r0, [r1, #22]
    d592:	7520      	strb	r0, [r4, #20]
    d594:	4628      	mov	r0, r5
    d596:	e146      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d598:	7022      	strb	r2, [r4, #0]
    d59a:	200a      	movs	r0, #10
    d59c:	70a0      	strb	r0, [r4, #2]
    d59e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d5a2:	70e0      	strb	r0, [r4, #3]
    d5a4:	7888      	ldrb	r0, [r1, #2]
    d5a6:	7120      	strb	r0, [r4, #4]
    d5a8:	8848      	ldrh	r0, [r1, #2]
    d5aa:	0a00      	lsrs	r0, r0, #8
    d5ac:	7160      	strb	r0, [r4, #5]
    d5ae:	7908      	ldrb	r0, [r1, #4]
    d5b0:	71a0      	strb	r0, [r4, #6]
    d5b2:	7948      	ldrb	r0, [r1, #5]
    d5b4:	71e0      	strb	r0, [r4, #7]
    d5b6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d5ba:	60a0      	str	r0, [r4, #8]
    d5bc:	8948      	ldrh	r0, [r1, #10]
    d5be:	81a0      	strh	r0, [r4, #12]
    d5c0:	68c8      	ldr	r0, [r1, #12]
    d5c2:	f8c4 000e 	str.w	r0, [r4, #14]
    d5c6:	8a08      	ldrh	r0, [r1, #16]
    d5c8:	8260      	strh	r0, [r4, #18]
    d5ca:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d5ce:	6160      	str	r0, [r4, #20]
    d5d0:	8ac8      	ldrh	r0, [r1, #22]
    d5d2:	8320      	strh	r0, [r4, #24]
    d5d4:	7e08      	ldrb	r0, [r1, #24]
    d5d6:	76a0      	strb	r0, [r4, #26]
    d5d8:	8b08      	ldrh	r0, [r1, #24]
    d5da:	0a00      	lsrs	r0, r0, #8
    d5dc:	76e0      	strb	r0, [r4, #27]
    d5de:	7e88      	ldrb	r0, [r1, #26]
    d5e0:	7720      	strb	r0, [r4, #28]
    d5e2:	8b48      	ldrh	r0, [r1, #26]
    d5e4:	0a00      	lsrs	r0, r0, #8
    d5e6:	7760      	strb	r0, [r4, #29]
    d5e8:	e000      	b.n	d5ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    d5ea:	e097      	b.n	d71c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    d5ec:	7f08      	ldrb	r0, [r1, #28]
    d5ee:	77a0      	strb	r0, [r4, #30]
    d5f0:	8b88      	ldrh	r0, [r1, #28]
    d5f2:	0a00      	lsrs	r0, r0, #8
    d5f4:	77e0      	strb	r0, [r4, #31]
    d5f6:	7f88      	ldrb	r0, [r1, #30]
    d5f8:	f884 0020 	strb.w	r0, [r4, #32]
    d5fc:	201f      	movs	r0, #31
    d5fe:	e112      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d600:	7022      	strb	r2, [r4, #0]
    d602:	2014      	movs	r0, #20
    d604:	70a0      	strb	r0, [r4, #2]
    d606:	7908      	ldrb	r0, [r1, #4]
    d608:	70e0      	strb	r0, [r4, #3]
    d60a:	8888      	ldrh	r0, [r1, #4]
    d60c:	0a00      	lsrs	r0, r0, #8
    d60e:	7120      	strb	r0, [r4, #4]
    d610:	7988      	ldrb	r0, [r1, #6]
    d612:	e0a6      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d614:	7022      	strb	r2, [r4, #0]
    d616:	2004      	movs	r0, #4
    d618:	70a0      	strb	r0, [r4, #2]
    d61a:	7908      	ldrb	r0, [r1, #4]
    d61c:	70e0      	strb	r0, [r4, #3]
    d61e:	7988      	ldrb	r0, [r1, #6]
    d620:	7120      	strb	r0, [r4, #4]
    d622:	88c8      	ldrh	r0, [r1, #6]
    d624:	0a00      	lsrs	r0, r0, #8
    d626:	7160      	strb	r0, [r4, #5]
    d628:	6888      	ldr	r0, [r1, #8]
    d62a:	f8c4 0006 	str.w	r0, [r4, #6]
    d62e:	68c8      	ldr	r0, [r1, #12]
    d630:	f8c4 000a 	str.w	r0, [r4, #10]
    d634:	200c      	movs	r0, #12
    d636:	e0f6      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d638:	7022      	strb	r2, [r4, #0]
    d63a:	2003      	movs	r0, #3
    d63c:	70a0      	strb	r0, [r4, #2]
    d63e:	7908      	ldrb	r0, [r1, #4]
    d640:	70e0      	strb	r0, [r4, #3]
    d642:	7988      	ldrb	r0, [r1, #6]
    d644:	7120      	strb	r0, [r4, #4]
    d646:	88c8      	ldrh	r0, [r1, #6]
    d648:	0a00      	lsrs	r0, r0, #8
    d64a:	7160      	strb	r0, [r4, #5]
    d64c:	7a08      	ldrb	r0, [r1, #8]
    d64e:	71a0      	strb	r0, [r4, #6]
    d650:	8908      	ldrh	r0, [r1, #8]
    d652:	0a00      	lsrs	r0, r0, #8
    d654:	71e0      	strb	r0, [r4, #7]
    d656:	7a88      	ldrb	r0, [r1, #10]
    d658:	7220      	strb	r0, [r4, #8]
    d65a:	8948      	ldrh	r0, [r1, #10]
    d65c:	0a00      	lsrs	r0, r0, #8
    d65e:	7260      	strb	r0, [r4, #9]
    d660:	7b08      	ldrb	r0, [r1, #12]
    d662:	72a0      	strb	r0, [r4, #10]
    d664:	8988      	ldrh	r0, [r1, #12]
    d666:	0a00      	lsrs	r0, r0, #8
    d668:	72e0      	strb	r0, [r4, #11]
    d66a:	e0b6      	b.n	d7da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d66c:	7022      	strb	r2, [r4, #0]
    d66e:	70a7      	strb	r7, [r4, #2]
    d670:	7908      	ldrb	r0, [r1, #4]
    d672:	70e0      	strb	r0, [r4, #3]
    d674:	8888      	ldrh	r0, [r1, #4]
    d676:	0a00      	lsrs	r0, r0, #8
    d678:	7120      	strb	r0, [r4, #4]
    d67a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d67e:	f8c4 0005 	str.w	r0, [r4, #5]
    d682:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d686:	f8c4 0009 	str.w	r0, [r4, #9]
    d68a:	89c8      	ldrh	r0, [r1, #14]
    d68c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d690:	e0c8      	b.n	d824 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    d692:	2011      	movs	r0, #17
    d694:	e045      	b.n	d722 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d696:	7027      	strb	r7, [r4, #0]
    d698:	7908      	ldrb	r0, [r1, #4]
    d69a:	70a0      	strb	r0, [r4, #2]
    d69c:	7948      	ldrb	r0, [r1, #5]
    d69e:	70e0      	strb	r0, [r4, #3]
    d6a0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d6a4:	0a00      	lsrs	r0, r0, #8
    d6a6:	7120      	strb	r0, [r4, #4]
    d6a8:	79c8      	ldrb	r0, [r1, #7]
    d6aa:	e05a      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d6ac:	2008      	movs	r0, #8
    d6ae:	7020      	strb	r0, [r4, #0]
    d6b0:	7908      	ldrb	r0, [r1, #4]
    d6b2:	70a0      	strb	r0, [r4, #2]
    d6b4:	7988      	ldrb	r0, [r1, #6]
    d6b6:	70e0      	strb	r0, [r4, #3]
    d6b8:	88c8      	ldrh	r0, [r1, #6]
    d6ba:	0a00      	lsrs	r0, r0, #8
    d6bc:	7120      	strb	r0, [r4, #4]
    d6be:	7a08      	ldrb	r0, [r1, #8]
    d6c0:	e04f      	b.n	d762 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d6c2:	e09a      	b.n	d7fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    d6c4:	e06e      	b.n	d7a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    d6c6:	e04f      	b.n	d768 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    d6c8:	e07a      	b.n	d7c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    d6ca:	e088      	b.n	d7de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    d6cc:	e041      	b.n	d752 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    d6ce:	e030      	b.n	d732 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    d6d0:	e011      	b.n	d6f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    d6d2:	e00d      	b.n	d6f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    d6d4:	e024      	b.n	d720 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    d6d6:	e01b      	b.n	d710 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    d6d8:	e7ff      	b.n	d6da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    d6da:	2030      	movs	r0, #48	; 0x30
    d6dc:	7020      	strb	r0, [r4, #0]
    d6de:	7908      	ldrb	r0, [r1, #4]
    d6e0:	70a0      	strb	r0, [r4, #2]
    d6e2:	7988      	ldrb	r0, [r1, #6]
    d6e4:	70e0      	strb	r0, [r4, #3]
    d6e6:	88c8      	ldrh	r0, [r1, #6]
    d6e8:	0a00      	lsrs	r0, r0, #8
    d6ea:	7120      	strb	r0, [r4, #4]
    d6ec:	2003      	movs	r0, #3
    d6ee:	e09a      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d6f0:	7022      	strb	r2, [r4, #0]
    d6f2:	2007      	movs	r0, #7
    d6f4:	e03a      	b.n	d76c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    d6f6:	7022      	strb	r2, [r4, #0]
    d6f8:	70a6      	strb	r6, [r4, #2]
    d6fa:	7908      	ldrb	r0, [r1, #4]
    d6fc:	70e0      	strb	r0, [r4, #3]
    d6fe:	7988      	ldrb	r0, [r1, #6]
    d700:	7120      	strb	r0, [r4, #4]
    d702:	88c8      	ldrh	r0, [r1, #6]
    d704:	0a00      	lsrs	r0, r0, #8
    d706:	7160      	strb	r0, [r4, #5]
    d708:	7a08      	ldrb	r0, [r1, #8]
    d70a:	71a0      	strb	r0, [r4, #6]
    d70c:	7a48      	ldrb	r0, [r1, #9]
    d70e:	e01d      	b.n	d74c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    d710:	4620      	mov	r0, r4
    d712:	1d09      	adds	r1, r1, #4
    d714:	f7f7 fbb4 	bl	4e80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d718:	2800      	cmp	r0, #0
    d71a:	d109      	bne.n	d730 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d720:	2057      	movs	r0, #87	; 0x57
    d722:	7020      	strb	r0, [r4, #0]
    d724:	7908      	ldrb	r0, [r1, #4]
    d726:	70a0      	strb	r0, [r4, #2]
    d728:	8888      	ldrh	r0, [r1, #4]
    d72a:	0a00      	lsrs	r0, r0, #8
    d72c:	70e0      	strb	r0, [r4, #3]
    d72e:	2002      	movs	r0, #2
    d730:	e079      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d732:	7022      	strb	r2, [r4, #0]
    d734:	2012      	movs	r0, #18
    d736:	70a0      	strb	r0, [r4, #2]
    d738:	7908      	ldrb	r0, [r1, #4]
    d73a:	70e0      	strb	r0, [r4, #3]
    d73c:	7948      	ldrb	r0, [r1, #5]
    d73e:	7120      	strb	r0, [r4, #4]
    d740:	7988      	ldrb	r0, [r1, #6]
    d742:	7160      	strb	r0, [r4, #5]
    d744:	88c8      	ldrh	r0, [r1, #6]
    d746:	0a00      	lsrs	r0, r0, #8
    d748:	71a0      	strb	r0, [r4, #6]
    d74a:	7a08      	ldrb	r0, [r1, #8]
    d74c:	71e0      	strb	r0, [r4, #7]
    d74e:	2006      	movs	r0, #6
    d750:	e069      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d752:	7023      	strb	r3, [r4, #0]
    d754:	20a1      	movs	r0, #161	; 0xa1
    d756:	70a0      	strb	r0, [r4, #2]
    d758:	7908      	ldrb	r0, [r1, #4]
    d75a:	70e0      	strb	r0, [r4, #3]
    d75c:	7948      	ldrb	r0, [r1, #5]
    d75e:	7120      	strb	r0, [r4, #4]
    d760:	2000      	movs	r0, #0
    d762:	7160      	strb	r0, [r4, #5]
    d764:	2004      	movs	r0, #4
    d766:	e05e      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d768:	7023      	strb	r3, [r4, #0]
    d76a:	20a2      	movs	r0, #162	; 0xa2
    d76c:	70a0      	strb	r0, [r4, #2]
    d76e:	7908      	ldrb	r0, [r1, #4]
    d770:	70e0      	strb	r0, [r4, #3]
    d772:	8888      	ldrh	r0, [r1, #4]
    d774:	0a00      	lsrs	r0, r0, #8
    d776:	7120      	strb	r0, [r4, #4]
    d778:	7988      	ldrb	r0, [r1, #6]
    d77a:	7160      	strb	r0, [r4, #5]
    d77c:	88c8      	ldrh	r0, [r1, #6]
    d77e:	0a00      	lsrs	r0, r0, #8
    d780:	71a0      	strb	r0, [r4, #6]
    d782:	7a08      	ldrb	r0, [r1, #8]
    d784:	71e0      	strb	r0, [r4, #7]
    d786:	8908      	ldrh	r0, [r1, #8]
    d788:	0a00      	lsrs	r0, r0, #8
    d78a:	7220      	strb	r0, [r4, #8]
    d78c:	7a88      	ldrb	r0, [r1, #10]
    d78e:	7260      	strb	r0, [r4, #9]
    d790:	8948      	ldrh	r0, [r1, #10]
    d792:	0a00      	lsrs	r0, r0, #8
    d794:	72a0      	strb	r0, [r4, #10]
    d796:	7b08      	ldrb	r0, [r1, #12]
    d798:	72e0      	strb	r0, [r4, #11]
    d79a:	8988      	ldrh	r0, [r1, #12]
    d79c:	0a00      	lsrs	r0, r0, #8
    d79e:	7320      	strb	r0, [r4, #12]
    d7a0:	200b      	movs	r0, #11
    d7a2:	e040      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d7a4:	7023      	strb	r3, [r4, #0]
    d7a6:	20a3      	movs	r0, #163	; 0xa3
    d7a8:	70a0      	strb	r0, [r4, #2]
    d7aa:	7908      	ldrb	r0, [r1, #4]
    d7ac:	70e0      	strb	r0, [r4, #3]
    d7ae:	8888      	ldrh	r0, [r1, #4]
    d7b0:	0a00      	lsrs	r0, r0, #8
    d7b2:	7120      	strb	r0, [r4, #4]
    d7b4:	7988      	ldrb	r0, [r1, #6]
    d7b6:	7160      	strb	r0, [r4, #5]
    d7b8:	79c8      	ldrb	r0, [r1, #7]
    d7ba:	71a0      	strb	r0, [r4, #6]
    d7bc:	2005      	movs	r0, #5
    d7be:	e032      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d7c0:	7022      	strb	r2, [r4, #0]
    d7c2:	70a5      	strb	r5, [r4, #2]
    d7c4:	7908      	ldrb	r0, [r1, #4]
    d7c6:	70e0      	strb	r0, [r4, #3]
    d7c8:	7948      	ldrb	r0, [r1, #5]
    d7ca:	7120      	strb	r0, [r4, #4]
    d7cc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d7d0:	f8c4 0005 	str.w	r0, [r4, #5]
    d7d4:	8948      	ldrh	r0, [r1, #10]
    d7d6:	f8a4 0009 	strh.w	r0, [r4, #9]
    d7da:	200a      	movs	r0, #10
    d7dc:	e023      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d7de:	7023      	strb	r3, [r4, #0]
    d7e0:	20a4      	movs	r0, #164	; 0xa4
    d7e2:	70a0      	strb	r0, [r4, #2]
    d7e4:	7908      	ldrb	r0, [r1, #4]
    d7e6:	70e0      	strb	r0, [r4, #3]
    d7e8:	8888      	ldrh	r0, [r1, #4]
    d7ea:	0a00      	lsrs	r0, r0, #8
    d7ec:	7120      	strb	r0, [r4, #4]
    d7ee:	7988      	ldrb	r0, [r1, #6]
    d7f0:	7160      	strb	r0, [r4, #5]
    d7f2:	79c8      	ldrb	r0, [r1, #7]
    d7f4:	71a0      	strb	r0, [r4, #6]
    d7f6:	2007      	movs	r0, #7
    d7f8:	e015      	b.n	d826 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d7fa:	7023      	strb	r3, [r4, #0]
    d7fc:	2080      	movs	r0, #128	; 0x80
    d7fe:	70a0      	strb	r0, [r4, #2]
    d800:	888a      	ldrh	r2, [r1, #4]
    d802:	f8a4 2003 	strh.w	r2, [r4, #3]
    d806:	88ca      	ldrh	r2, [r1, #6]
    d808:	f8a4 2005 	strh.w	r2, [r4, #5]
    d80c:	7a0a      	ldrb	r2, [r1, #8]
    d80e:	71e2      	strb	r2, [r4, #7]
    d810:	894a      	ldrh	r2, [r1, #10]
    d812:	8122      	strh	r2, [r4, #8]
    d814:	898a      	ldrh	r2, [r1, #12]
    d816:	8162      	strh	r2, [r4, #10]
    d818:	89ca      	ldrh	r2, [r1, #14]
    d81a:	81a2      	strh	r2, [r4, #12]
    d81c:	7c09      	ldrb	r1, [r1, #16]
    d81e:	f001 0101 	and.w	r1, r1, #1
    d822:	73a1      	strb	r1, [r4, #14]
    d824:	200d      	movs	r0, #13
    d826:	7060      	strb	r0, [r4, #1]
    d828:	1c80      	adds	r0, r0, #2
    d82a:	e777      	b.n	d71c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000d82c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d82c:	223e      	movs	r2, #62	; 0x3e
    d82e:	7002      	strb	r2, [r0, #0]
    d830:	2201      	movs	r2, #1
    d832:	7082      	strb	r2, [r0, #2]
    d834:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d838:	70c2      	strb	r2, [r0, #3]
    d83a:	788a      	ldrb	r2, [r1, #2]
    d83c:	7102      	strb	r2, [r0, #4]
    d83e:	884a      	ldrh	r2, [r1, #2]
    d840:	0a12      	lsrs	r2, r2, #8
    d842:	7142      	strb	r2, [r0, #5]
    d844:	790a      	ldrb	r2, [r1, #4]
    d846:	7182      	strb	r2, [r0, #6]
    d848:	794a      	ldrb	r2, [r1, #5]
    d84a:	71c2      	strb	r2, [r0, #7]
    d84c:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d850:	6082      	str	r2, [r0, #8]
    d852:	894a      	ldrh	r2, [r1, #10]
    d854:	8182      	strh	r2, [r0, #12]
    d856:	7e0a      	ldrb	r2, [r1, #24]
    d858:	7382      	strb	r2, [r0, #14]
    d85a:	8b0a      	ldrh	r2, [r1, #24]
    d85c:	0a12      	lsrs	r2, r2, #8
    d85e:	73c2      	strb	r2, [r0, #15]
    d860:	7e8a      	ldrb	r2, [r1, #26]
    d862:	7402      	strb	r2, [r0, #16]
    d864:	8b4a      	ldrh	r2, [r1, #26]
    d866:	0a12      	lsrs	r2, r2, #8
    d868:	7442      	strb	r2, [r0, #17]
    d86a:	7f0a      	ldrb	r2, [r1, #28]
    d86c:	7482      	strb	r2, [r0, #18]
    d86e:	8b8a      	ldrh	r2, [r1, #28]
    d870:	0a12      	lsrs	r2, r2, #8
    d872:	74c2      	strb	r2, [r0, #19]
    d874:	7f89      	ldrb	r1, [r1, #30]
    d876:	7501      	strb	r1, [r0, #20]
    d878:	2113      	movs	r1, #19
    d87a:	7041      	strb	r1, [r0, #1]
    d87c:	4608      	mov	r0, r1
    d87e:	4770      	bx	lr
    d880:	094a      	lsrs	r2, r1, #5
    d882:	f001 011f 	and.w	r1, r1, #31
    d886:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d88a:	40c8      	lsrs	r0, r1
    d88c:	f000 0001 	and.w	r0, r0, #1
    d890:	4770      	bx	lr

0000d892 <sdc_hci_data_get>:
    d892:	b510      	push	{r4, lr}
    d894:	b120      	cbz	r0, d8a0 <sdc_hci_data_get+0xe>
    d896:	f7ff fd9a 	bl	d3ce <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d89a:	b120      	cbz	r0, d8a6 <sdc_hci_data_get+0x14>
    d89c:	2000      	movs	r0, #0
    d89e:	bd10      	pop	{r4, pc}
    d8a0:	f06f 0015 	mvn.w	r0, #21
    d8a4:	bd10      	pop	{r4, pc}
    d8a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d8aa:	bd10      	pop	{r4, pc}

0000d8ac <sdc_hci_data_put>:
    d8ac:	b510      	push	{r4, lr}
    d8ae:	f06f 0415 	mvn.w	r4, #21
    d8b2:	b120      	cbz	r0, d8be <sdc_hci_data_put+0x12>
    d8b4:	f7ff fd99 	bl	d3ea <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d8b8:	b108      	cbz	r0, d8be <sdc_hci_data_put+0x12>
    d8ba:	2000      	movs	r0, #0
    d8bc:	bd10      	pop	{r4, pc}
    d8be:	4620      	mov	r0, r4
    d8c0:	bd10      	pop	{r4, pc}

0000d8c2 <sdc_hci_evt_get>:
    d8c2:	b510      	push	{r4, lr}
    d8c4:	b120      	cbz	r0, d8d0 <sdc_hci_evt_get+0xe>
    d8c6:	f7ff fd99 	bl	d3fc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d8ca:	b120      	cbz	r0, d8d6 <sdc_hci_evt_get+0x14>
    d8cc:	2000      	movs	r0, #0
    d8ce:	bd10      	pop	{r4, pc}
    d8d0:	f06f 0015 	mvn.w	r0, #21
    d8d4:	bd10      	pop	{r4, pc}
    d8d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d8da:	bd10      	pop	{r4, pc}

0000d8dc <sdc_hci_get>:
    d8dc:	b118      	cbz	r0, d8e6 <sdc_hci_get+0xa>
    d8de:	b111      	cbz	r1, d8e6 <sdc_hci_get+0xa>
    d8e0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d8e4:	4770      	bx	lr
    d8e6:	f06f 0015 	mvn.w	r0, #21
    d8ea:	4770      	bx	lr

0000d8ec <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d8ec:	f002 bfbf 	b.w	1086e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d8f0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d8f0:	f003 b80d 	b.w	1090e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d8f4 <sdc_hci_cmd_cb_set_event_mask>:
    d8f4:	b510      	push	{r4, lr}
    d8f6:	f7f7 fb13 	bl	4f20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d8fa:	2000      	movs	r0, #0
    d8fc:	bd10      	pop	{r4, pc}

0000d8fe <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d8fe:	b510      	push	{r4, lr}
    d900:	f7f7 fb1e 	bl	4f40 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d904:	2000      	movs	r0, #0
    d906:	bd10      	pop	{r4, pc}

0000d908 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d908:	f003 b81d 	b.w	10946 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d90c <sdc_hci_cmd_vs_conn_event_extend>:
    d90c:	b508      	push	{r3, lr}
    d90e:	7800      	ldrb	r0, [r0, #0]
    d910:	f88d 0000 	strb.w	r0, [sp]
    d914:	4668      	mov	r0, sp
    d916:	f002 fecb 	bl	106b0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d91a:	bd08      	pop	{r3, pc}

0000d91c <sdc_hci_cmd_vs_conn_update>:
    d91c:	2001      	movs	r0, #1
    d91e:	4770      	bx	lr

0000d920 <sdc_hci_cmd_vs_event_length_set>:
    d920:	f7fd b9f8 	b.w	ad14 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d924 <sdc_hci_cmd_vs_llpm_mode_set>:
    d924:	2001      	movs	r0, #1
    d926:	4770      	bx	lr

0000d928 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d928:	7881      	ldrb	r1, [r0, #2]
    d92a:	8800      	ldrh	r0, [r0, #0]
    d92c:	f002 be88 	b.w	10640 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d930 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d930:	7800      	ldrb	r0, [r0, #0]
    d932:	b100      	cbz	r0, d936 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d934:	2001      	movs	r0, #1
    d936:	f002 be7e 	b.w	10636 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d93a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d93a:	b570      	push	{r4, r5, r6, lr}
    d93c:	4605      	mov	r5, r0
    d93e:	2210      	movs	r2, #16
    d940:	2100      	movs	r1, #0
    d942:	f7ff fc3d 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d946:	2210      	movs	r2, #16
    d948:	2100      	movs	r1, #0
    d94a:	f105 0010 	add.w	r0, r5, #16
    d94e:	f7ff fc37 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d952:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d956:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d95a:	1c40      	adds	r0, r0, #1
    d95c:	d10b      	bne.n	d976 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d95e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d962:	1c40      	adds	r0, r0, #1
    d964:	d107      	bne.n	d976 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d966:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d96a:	1c40      	adds	r0, r0, #1
    d96c:	d103      	bne.n	d976 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d96e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d972:	1c40      	adds	r0, r0, #1
    d974:	d00b      	beq.n	d98e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d976:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d97a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d97e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d982:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d986:	612a      	str	r2, [r5, #16]
    d988:	6168      	str	r0, [r5, #20]
    d98a:	61a9      	str	r1, [r5, #24]
    d98c:	61eb      	str	r3, [r5, #28]
    d98e:	2000      	movs	r0, #0
    d990:	f7f8 f81c 	bl	59cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d994:	b918      	cbnz	r0, d99e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d996:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d99a:	07c0      	lsls	r0, r0, #31
    d99c:	d118      	bne.n	d9d0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d99e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d9a2:	1c40      	adds	r0, r0, #1
    d9a4:	d10b      	bne.n	d9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d9a6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d9aa:	1c40      	adds	r0, r0, #1
    d9ac:	d107      	bne.n	d9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d9ae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d9b2:	1c40      	adds	r0, r0, #1
    d9b4:	d103      	bne.n	d9be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d9b6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d9ba:	1c40      	adds	r0, r0, #1
    d9bc:	d008      	beq.n	d9d0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d9be:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d9c2:	6861      	ldr	r1, [r4, #4]
    d9c4:	68a2      	ldr	r2, [r4, #8]
    d9c6:	68e3      	ldr	r3, [r4, #12]
    d9c8:	6028      	str	r0, [r5, #0]
    d9ca:	6069      	str	r1, [r5, #4]
    d9cc:	60aa      	str	r2, [r5, #8]
    d9ce:	60eb      	str	r3, [r5, #12]
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd70      	pop	{r4, r5, r6, pc}

0000d9d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d9d4:	b538      	push	{r3, r4, r5, lr}
    d9d6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d9da:	4604      	mov	r4, r0
    d9dc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d9e0:	1c40      	adds	r0, r0, #1
    d9e2:	d105      	bne.n	d9f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d9e4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d9e8:	43c0      	mvns	r0, r0
    d9ea:	0400      	lsls	r0, r0, #16
    d9ec:	0c00      	lsrs	r0, r0, #16
    d9ee:	d03e      	beq.n	da6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d9f0:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d9f4:	07c0      	lsls	r0, r0, #31
    d9f6:	d03a      	beq.n	da6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d9f8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d9fc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    da00:	f8ad 1000 	strh.w	r1, [sp]
    da04:	f8c4 0001 	str.w	r0, [r4, #1]
    da08:	f8bd 0000 	ldrh.w	r0, [sp]
    da0c:	f8a4 0005 	strh.w	r0, [r4, #5]
    da10:	79a0      	ldrb	r0, [r4, #6]
    da12:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    da16:	71a0      	strb	r0, [r4, #6]
    da18:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    da1c:	1c40      	adds	r0, r0, #1
    da1e:	d00f      	beq.n	da40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    da20:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    da24:	1c40      	adds	r0, r0, #1
    da26:	d00b      	beq.n	da40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    da28:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    da2c:	1c40      	adds	r0, r0, #1
    da2e:	d007      	beq.n	da40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    da30:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    da34:	1c40      	adds	r0, r0, #1
    da36:	d003      	beq.n	da40 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    da38:	2000      	movs	r0, #0
    da3a:	f7f7 ffc7 	bl	59cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    da3e:	b140      	cbz	r0, da52 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    da40:	2210      	movs	r2, #16
    da42:	2100      	movs	r1, #0
    da44:	1de0      	adds	r0, r4, #7
    da46:	f7ff fbbb 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da4a:	2001      	movs	r0, #1
    da4c:	7020      	strb	r0, [r4, #0]
    da4e:	2000      	movs	r0, #0
    da50:	bd38      	pop	{r3, r4, r5, pc}
    da52:	f855 2f90 	ldr.w	r2, [r5, #144]!
    da56:	6869      	ldr	r1, [r5, #4]
    da58:	68a8      	ldr	r0, [r5, #8]
    da5a:	68eb      	ldr	r3, [r5, #12]
    da5c:	f8c4 2007 	str.w	r2, [r4, #7]
    da60:	f8c4 100b 	str.w	r1, [r4, #11]
    da64:	f8c4 000f 	str.w	r0, [r4, #15]
    da68:	f8c4 3013 	str.w	r3, [r4, #19]
    da6c:	e7ed      	b.n	da4a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    da6e:	2000      	movs	r0, #0
    da70:	e7ec      	b.n	da4c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000da72 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    da72:	f002 be0f 	b.w	10694 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000da76 <sdc_hci_cmd_ip_read_bd_addr>:
    da76:	f002 bf0b 	b.w	10890 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000da7a <sdc_hci_cmd_ip_read_local_version_information>:
    da7a:	f7fd b959 	b.w	ad30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000da7e <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    da7e:	f002 bb76 	b.w	1016e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000da82 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    da82:	f002 bb59 	b.w	10138 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000da86 <sdc_hci_cmd_le_clear_filter_accept_list>:
    da86:	f002 bb96 	b.w	101b6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000da8a <sdc_hci_cmd_le_clear_resolving_list>:
    da8a:	f002 bb87 	b.w	1019c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000da8e <sdc_hci_cmd_le_encrypt>:
    da8e:	f002 bb9c 	b.w	101ca <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000da92 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    da92:	8802      	ldrh	r2, [r0, #0]
    da94:	800a      	strh	r2, [r1, #0]
    da96:	f002 bba1 	b.w	101dc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000da9a <sdc_hci_cmd_le_long_term_key_request_reply>:
    da9a:	8802      	ldrh	r2, [r0, #0]
    da9c:	800a      	strh	r2, [r1, #0]
    da9e:	f002 bbb6 	b.w	1020e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000daa2 <sdc_hci_cmd_le_rand>:
    daa2:	f002 bbde 	b.w	10262 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000daa6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    daa6:	f002 bbe2 	b.w	1026e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000daaa <sdc_hci_cmd_le_read_buffer_size>:
    daaa:	f7fd b839 	b.w	ab20 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000daae <sdc_hci_cmd_le_read_channel_map>:
    daae:	f7fd b841 	b.w	ab34 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000dab2 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    dab2:	f002 bc17 	b.w	102e4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000dab6 <sdc_hci_cmd_le_read_max_data_length>:
    dab6:	f002 bbe3 	b.w	10280 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000daba <sdc_hci_cmd_le_read_phy>:
    daba:	f7fd b863 	b.w	ab84 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000dabe <sdc_hci_cmd_le_read_remote_features>:
    dabe:	f002 bbe8 	b.w	10292 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000dac2 <sdc_hci_cmd_le_read_resolving_list_size>:
    dac2:	f002 bc02 	b.w	102ca <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000dac6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    dac6:	f7fd b883 	b.w	abd0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000daca <sdc_hci_cmd_le_read_transmit_power>:
    daca:	f002 bc02 	b.w	102d2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000dace <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    dace:	f002 bc26 	b.w	1031e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000dad2 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    dad2:	f002 bc0b 	b.w	102ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000dad6 <sdc_hci_cmd_le_set_address_resolution_enable>:
    dad6:	f002 bc37 	b.w	10348 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000dada <sdc_hci_cmd_le_set_adv_data>:
    dada:	f002 bc43 	b.w	10364 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000dade <sdc_hci_cmd_le_set_adv_enable>:
    dade:	f002 bc56 	b.w	1038e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000dae2 <sdc_hci_cmd_le_set_adv_params>:
    dae2:	f002 bc87 	b.w	103f4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000dae6 <sdc_hci_cmd_le_set_data_length>:
    dae6:	f002 bd1a 	b.w	1051e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000daea <sdc_hci_cmd_le_set_default_phy>:
    daea:	f7fd b87b 	b.w	abe4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000daee <sdc_hci_cmd_le_set_event_mask>:
    daee:	b510      	push	{r4, lr}
    daf0:	f7f7 fa0e 	bl	4f10 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    daf4:	2000      	movs	r0, #0
    daf6:	bd10      	pop	{r4, pc}

0000daf8 <sdc_hci_cmd_le_set_phy>:
    daf8:	f002 bd31 	b.w	1055e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000dafc <sdc_hci_cmd_le_set_privacy_mode>:
    dafc:	f002 bd48 	b.w	10590 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000db00 <sdc_hci_cmd_le_set_random_address>:
    db00:	f002 bd5c 	b.w	105bc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000db04 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    db04:	f002 bd68 	b.w	105d8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000db08 <sdc_hci_cmd_le_set_scan_response_data>:
    db08:	f002 bd6f 	b.w	105ea <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000db0c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    db0c:	f002 bd82 	b.w	10614 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000db10 <sdc_hci_cmd_lc_disconnect>:
    db10:	f002 bac4 	b.w	1009c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000db14 <sdc_hci_cmd_lc_read_remote_version_information>:
    db14:	f002 bec8 	b.w	108a8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    db18:	b570      	push	{r4, r5, r6, lr}
    db1a:	880b      	ldrh	r3, [r1, #0]
    db1c:	7f04      	ldrb	r4, [r0, #28]
    db1e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    db22:	f3c3 060e 	ubfx	r6, r3, #0, #15
    db26:	8802      	ldrh	r2, [r0, #0]
    db28:	4435      	add	r5, r6
    db2a:	1da4      	adds	r4, r4, #6
    db2c:	882d      	ldrh	r5, [r5, #0]
    db2e:	4422      	add	r2, r4
    db30:	b292      	uxth	r2, r2
    db32:	4425      	add	r5, r4
    db34:	1e54      	subs	r4, r2, #1
    db36:	442c      	add	r4, r5
    db38:	fb94 f4f2 	sdiv	r4, r4, r2
    db3c:	fb02 6204 	mla	r2, r2, r4, r6
    db40:	8840      	ldrh	r0, [r0, #2]
    db42:	b292      	uxth	r2, r2
    db44:	4290      	cmp	r0, r2
    db46:	d903      	bls.n	db50 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    db48:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    db4c:	4310      	orrs	r0, r2
    db4e:	e002      	b.n	db56 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    db50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    db54:	4398      	bics	r0, r3
    db56:	8008      	strh	r0, [r1, #0]
    db58:	bd70      	pop	{r4, r5, r6, pc}
    db5a:	0442      	lsls	r2, r0, #17
    db5c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    db60:	d107      	bne.n	db72 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    db62:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    db66:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    db6a:	4288      	cmp	r0, r1
    db6c:	d001      	beq.n	db72 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    db6e:	2001      	movs	r0, #1
    db70:	4770      	bx	lr
    db72:	2000      	movs	r0, #0
    db74:	4770      	bx	lr

0000db76 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    db76:	b570      	push	{r4, r5, r6, lr}
    db78:	7f00      	ldrb	r0, [r0, #28]
    db7a:	461c      	mov	r4, r3
    db7c:	1d80      	adds	r0, r0, #6
    db7e:	4408      	add	r0, r1
    db80:	4613      	mov	r3, r2
    db82:	8809      	ldrh	r1, [r1, #0]
    db84:	9a04      	ldr	r2, [sp, #16]
    db86:	1cc9      	adds	r1, r1, #3
    db88:	b289      	uxth	r1, r1
    db8a:	1915      	adds	r5, r2, r4
    db8c:	1ec0      	subs	r0, r0, #3
    db8e:	428d      	cmp	r5, r1
    db90:	d805      	bhi.n	db9e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    db92:	1881      	adds	r1, r0, r2
    db94:	4622      	mov	r2, r4
    db96:	4618      	mov	r0, r3
    db98:	f7ff fa98 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db9c:	e000      	b.n	dba0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    db9e:	2400      	movs	r4, #0
    dba0:	4620      	mov	r0, r4
    dba2:	bd70      	pop	{r4, r5, r6, pc}

0000dba4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    dba4:	b570      	push	{r4, r5, r6, lr}
    dba6:	7f00      	ldrb	r0, [r0, #28]
    dba8:	461c      	mov	r4, r3
    dbaa:	1d80      	adds	r0, r0, #6
    dbac:	4408      	add	r0, r1
    dbae:	4613      	mov	r3, r2
    dbb0:	8809      	ldrh	r1, [r1, #0]
    dbb2:	9a04      	ldr	r2, [sp, #16]
    dbb4:	1cc9      	adds	r1, r1, #3
    dbb6:	b289      	uxth	r1, r1
    dbb8:	1915      	adds	r5, r2, r4
    dbba:	1ec0      	subs	r0, r0, #3
    dbbc:	428d      	cmp	r5, r1
    dbbe:	d805      	bhi.n	dbcc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    dbc0:	4410      	add	r0, r2
    dbc2:	4622      	mov	r2, r4
    dbc4:	4619      	mov	r1, r3
    dbc6:	f7ff fa81 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbca:	e000      	b.n	dbce <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    dbcc:	2400      	movs	r4, #0
    dbce:	4620      	mov	r0, r4
    dbd0:	bd70      	pop	{r4, r5, r6, pc}

0000dbd2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    dbd2:	8881      	ldrh	r1, [r0, #4]
    dbd4:	88c0      	ldrh	r0, [r0, #6]
    dbd6:	4288      	cmp	r0, r1
    dbd8:	d101      	bne.n	dbde <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    dbda:	2001      	movs	r0, #1
    dbdc:	4770      	bx	lr
    dbde:	2000      	movs	r0, #0
    dbe0:	4770      	bx	lr

0000dbe2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    dbe2:	8881      	ldrh	r1, [r0, #4]
    dbe4:	8900      	ldrh	r0, [r0, #8]
    dbe6:	4288      	cmp	r0, r1
    dbe8:	d101      	bne.n	dbee <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    dbea:	2001      	movs	r0, #1
    dbec:	4770      	bx	lr
    dbee:	2000      	movs	r0, #0
    dbf0:	4770      	bx	lr

0000dbf2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbf6:	460f      	mov	r7, r1
    dbf8:	4604      	mov	r4, r0
    dbfa:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dbfe:	8880      	ldrh	r0, [r0, #4]
    dc00:	2600      	movs	r6, #0
    dc02:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dc06:	1845      	adds	r5, r0, r1
    dc08:	603e      	str	r6, [r7, #0]
    dc0a:	8a20      	ldrh	r0, [r4, #16]
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d01a      	beq.n	dc46 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    dc10:	89a1      	ldrh	r1, [r4, #12]
    dc12:	4408      	add	r0, r1
    dc14:	b280      	uxth	r0, r0
    dc16:	81a0      	strh	r0, [r4, #12]
    dc18:	8829      	ldrh	r1, [r5, #0]
    dc1a:	4288      	cmp	r0, r1
    dc1c:	d905      	bls.n	dc2a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    dc1e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dc22:	f04f 0014 	mov.w	r0, #20
    dc26:	f7f6 ffef 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc2a:	d10a      	bne.n	dc42 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    dc2c:	69a0      	ldr	r0, [r4, #24]
    dc2e:	b108      	cbz	r0, dc34 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    dc30:	7f40      	ldrb	r0, [r0, #29]
    dc32:	70a8      	strb	r0, [r5, #2]
    dc34:	f104 0104 	add.w	r1, r4, #4
    dc38:	4620      	mov	r0, r4
    dc3a:	f7ff ff6d 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc3e:	81a6      	strh	r6, [r4, #12]
    dc40:	603d      	str	r5, [r7, #0]
    dc42:	8226      	strh	r6, [r4, #16]
    dc44:	2001      	movs	r0, #1
    dc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc4a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    dc4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc4c:	4604      	mov	r4, r0
    dc4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    dc52:	88c0      	ldrh	r0, [r0, #6]
    dc54:	460e      	mov	r6, r1
    dc56:	f3c0 070e 	ubfx	r7, r0, #0, #15
    dc5a:	8a60      	ldrh	r0, [r4, #18]
    dc5c:	19d9      	adds	r1, r3, r7
    dc5e:	b108      	cbz	r0, dc64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    dc60:	42b0      	cmp	r0, r6
    dc62:	d201      	bcs.n	dc68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    dc64:	2000      	movs	r0, #0
    dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc68:	89e0      	ldrh	r0, [r4, #14]
    dc6a:	2500      	movs	r5, #0
    dc6c:	b140      	cbz	r0, dc80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    dc6e:	f8b1 c000 	ldrh.w	ip, [r1]
    dc72:	4560      	cmp	r0, ip
    dc74:	d008      	beq.n	dc88 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    dc76:	f240 2151 	movw	r1, #593	; 0x251
    dc7a:	2014      	movs	r0, #20
    dc7c:	f7f6 ffc4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc80:	7f60      	ldrb	r0, [r4, #29]
    dc82:	7088      	strb	r0, [r1, #2]
    dc84:	800d      	strh	r5, [r1, #0]
    dc86:	e00e      	b.n	dca6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    dc88:	f894 c01c 	ldrb.w	ip, [r4, #28]
    dc8c:	4418      	add	r0, r3
    dc8e:	f10c 0c06 	add.w	ip, ip, #6
    dc92:	44bc      	add	ip, r7
    dc94:	4460      	add	r0, ip
    dc96:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    dc9a:	f820 cc03 	strh.w	ip, [r0, #-3]
    dc9e:	f894 c020 	ldrb.w	ip, [r4, #32]
    dca2:	f800 cc01 	strb.w	ip, [r0, #-1]
    dca6:	89e0      	ldrh	r0, [r4, #14]
    dca8:	4430      	add	r0, r6
    dcaa:	81e0      	strh	r0, [r4, #14]
    dcac:	8808      	ldrh	r0, [r1, #0]
    dcae:	4430      	add	r0, r6
    dcb0:	8008      	strh	r0, [r1, #0]
    dcb2:	b19a      	cbz	r2, dcdc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    dcb4:	1da1      	adds	r1, r4, #6
    dcb6:	4620      	mov	r0, r4
    dcb8:	f7ff ff2e 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dcbc:	81e5      	strh	r5, [r4, #14]
    dcbe:	7f60      	ldrb	r0, [r4, #29]
    dcc0:	1c40      	adds	r0, r0, #1
    dcc2:	7760      	strb	r0, [r4, #29]
    dcc4:	7da0      	ldrb	r0, [r4, #22]
    dcc6:	f88d 0000 	strb.w	r0, [sp]
    dcca:	9800      	ldr	r0, [sp, #0]
    dccc:	9000      	str	r0, [sp, #0]
    dcce:	f89d 0000 	ldrb.w	r0, [sp]
    dcd2:	b178      	cbz	r0, dcf4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dcd4:	88e0      	ldrh	r0, [r4, #6]
    dcd6:	82a0      	strh	r0, [r4, #20]
    dcd8:	75a5      	strb	r5, [r4, #22]
    dcda:	e00b      	b.n	dcf4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dcdc:	7f20      	ldrb	r0, [r4, #28]
    dcde:	89e1      	ldrh	r1, [r4, #14]
    dce0:	1d80      	adds	r0, r0, #6
    dce2:	4438      	add	r0, r7
    dce4:	4419      	add	r1, r3
    dce6:	4408      	add	r0, r1
    dce8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    dcec:	83e1      	strh	r1, [r4, #30]
    dcee:	7880      	ldrb	r0, [r0, #2]
    dcf0:	f884 0020 	strb.w	r0, [r4, #32]
    dcf4:	8265      	strh	r5, [r4, #18]
    dcf6:	2001      	movs	r0, #1
    dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dcfa <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    dcfa:	1cc0      	adds	r0, r0, #3
    dcfc:	4770      	bx	lr

0000dcfe <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    dcfe:	b510      	push	{r4, lr}
    dd00:	4604      	mov	r4, r0
    dd02:	88c0      	ldrh	r0, [r0, #6]
    dd04:	88a1      	ldrh	r1, [r4, #4]
    dd06:	4281      	cmp	r1, r0
    dd08:	d007      	beq.n	dd1a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dd0a:	89a0      	ldrh	r0, [r4, #12]
    dd0c:	b928      	cbnz	r0, dd1a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dd0e:	8a20      	ldrh	r0, [r4, #16]
    dd10:	b918      	cbnz	r0, dd1a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    dd12:	88a0      	ldrh	r0, [r4, #4]
    dd14:	8aa1      	ldrh	r1, [r4, #20]
    dd16:	4288      	cmp	r0, r1
    dd18:	d101      	bne.n	dd1e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    dd1a:	2000      	movs	r0, #0
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	1d21      	adds	r1, r4, #4
    dd20:	4620      	mov	r0, r4
    dd22:	f7ff fef9 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dd26:	2000      	movs	r0, #0
    dd28:	8220      	strh	r0, [r4, #16]
    dd2a:	2001      	movs	r0, #1
    dd2c:	bd10      	pop	{r4, pc}

0000dd2e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    dd2e:	b510      	push	{r4, lr}
    dd30:	4604      	mov	r4, r0
    dd32:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dd36:	88c0      	ldrh	r0, [r0, #6]
    dd38:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dd3c:	4402      	add	r2, r0
    dd3e:	8820      	ldrh	r0, [r4, #0]
    dd40:	2845      	cmp	r0, #69	; 0x45
    dd42:	d200      	bcs.n	dd46 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    dd44:	2045      	movs	r0, #69	; 0x45
    dd46:	4288      	cmp	r0, r1
    dd48:	d204      	bcs.n	dd54 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    dd4a:	f240 1119 	movw	r1, #281	; 0x119
    dd4e:	2014      	movs	r0, #20
    dd50:	f7f6 ff5a 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd54:	7de0      	ldrb	r0, [r4, #23]
    dd56:	2800      	cmp	r0, #0
    dd58:	d003      	beq.n	dd62 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    dd5a:	8810      	ldrh	r0, [r2, #0]
    dd5c:	4288      	cmp	r0, r1
    dd5e:	d201      	bcs.n	dd64 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    dd60:	2000      	movs	r0, #0
    dd62:	bd10      	pop	{r4, pc}
    dd64:	8011      	strh	r1, [r2, #0]
    dd66:	1da1      	adds	r1, r4, #6
    dd68:	4620      	mov	r0, r4
    dd6a:	f7ff fed5 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dd6e:	2000      	movs	r0, #0
    dd70:	75e0      	strb	r0, [r4, #23]
    dd72:	2001      	movs	r0, #1
    dd74:	bd10      	pop	{r4, pc}

0000dd76 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    dd76:	b530      	push	{r4, r5, lr}
    dd78:	88c4      	ldrh	r4, [r0, #6]
    dd7a:	8881      	ldrh	r1, [r0, #4]
    dd7c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dd80:	f3c1 030e 	ubfx	r3, r1, #0, #15
    dd84:	4413      	add	r3, r2
    dd86:	8882      	ldrh	r2, [r0, #4]
    dd88:	8a85      	ldrh	r5, [r0, #20]
    dd8a:	42aa      	cmp	r2, r5
    dd8c:	d012      	beq.n	ddb4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dd8e:	42a1      	cmp	r1, r4
    dd90:	d010      	beq.n	ddb4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dd92:	8981      	ldrh	r1, [r0, #12]
    dd94:	b971      	cbnz	r1, ddb4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dd96:	6982      	ldr	r2, [r0, #24]
    dd98:	b172      	cbz	r2, ddb8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dd9a:	4610      	mov	r0, r2
    dd9c:	f7ff ff21 	bl	dbe2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    dda0:	b950      	cbnz	r0, ddb8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dda2:	8910      	ldrh	r0, [r2, #8]
    dda4:	3224      	adds	r2, #36	; 0x24
    dda6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    ddaa:	4410      	add	r0, r2
    ddac:	7899      	ldrb	r1, [r3, #2]
    ddae:	7880      	ldrb	r0, [r0, #2]
    ddb0:	4288      	cmp	r0, r1
    ddb2:	d101      	bne.n	ddb8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ddb4:	2000      	movs	r0, #0
    ddb6:	bd30      	pop	{r4, r5, pc}
    ddb8:	4618      	mov	r0, r3
    ddba:	bd30      	pop	{r4, r5, pc}

0000ddbc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ddbc:	7f00      	ldrb	r0, [r0, #28]
    ddbe:	1d80      	adds	r0, r0, #6
    ddc0:	4408      	add	r0, r1
    ddc2:	1ec0      	subs	r0, r0, #3
    ddc4:	6010      	str	r0, [r2, #0]
    ddc6:	8808      	ldrh	r0, [r1, #0]
    ddc8:	4770      	bx	lr

0000ddca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ddca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddce:	460e      	mov	r6, r1
    ddd0:	88c1      	ldrh	r1, [r0, #6]
    ddd2:	8902      	ldrh	r2, [r0, #8]
    ddd4:	4604      	mov	r4, r0
    ddd6:	f100 0824 	add.w	r8, r0, #36	; 0x24
    ddda:	8800      	ldrh	r0, [r0, #0]
    dddc:	f3c1 050e 	ubfx	r5, r1, #0, #15
    dde0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    dde4:	2845      	cmp	r0, #69	; 0x45
    dde6:	d200      	bcs.n	ddea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    dde8:	2045      	movs	r0, #69	; 0x45
    ddea:	42b0      	cmp	r0, r6
    ddec:	d203      	bcs.n	ddf6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ddee:	21db      	movs	r1, #219	; 0xdb
    ddf0:	2014      	movs	r0, #20
    ddf2:	f7f6 ff09 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddf6:	4610      	mov	r0, r2
    ddf8:	f7ff feaf 	bl	db5a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ddfc:	b110      	cbz	r0, de04 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ddfe:	2000      	movs	r0, #0
    de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de04:	42af      	cmp	r7, r5
    de06:	d908      	bls.n	de1a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    de08:	7f21      	ldrb	r1, [r4, #28]
    de0a:	1b78      	subs	r0, r7, r5
    de0c:	1a40      	subs	r0, r0, r1
    de0e:	1f80      	subs	r0, r0, #6
    de10:	4286      	cmp	r6, r0
    de12:	dd02      	ble.n	de1a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    de14:	2000      	movs	r0, #0
    de16:	75e0      	strb	r0, [r4, #23]
    de18:	e7f1      	b.n	ddfe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    de1a:	eb08 0005 	add.w	r0, r8, r5
    de1e:	2101      	movs	r1, #1
    de20:	8006      	strh	r6, [r0, #0]
    de22:	75e1      	strb	r1, [r4, #23]
    de24:	e7ec      	b.n	de00 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000de26 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    de26:	b538      	push	{r3, r4, r5, lr}
    de28:	88c4      	ldrh	r4, [r0, #6]
    de2a:	8881      	ldrh	r1, [r0, #4]
    de2c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    de30:	f3c1 030e 	ubfx	r3, r1, #0, #15
    de34:	441a      	add	r2, r3
    de36:	42a1      	cmp	r1, r4
    de38:	d010      	beq.n	de5c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    de3a:	8983      	ldrh	r3, [r0, #12]
    de3c:	8a05      	ldrh	r5, [r0, #16]
    de3e:	8812      	ldrh	r2, [r2, #0]
    de40:	442b      	add	r3, r5
    de42:	4293      	cmp	r3, r2
    de44:	d308      	bcc.n	de58 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    de46:	f8ad 1000 	strh.w	r1, [sp]
    de4a:	4669      	mov	r1, sp
    de4c:	f7ff fe64 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    de50:	f8bd 0000 	ldrh.w	r0, [sp]
    de54:	42a0      	cmp	r0, r4
    de56:	d001      	beq.n	de5c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    de58:	2001      	movs	r0, #1
    de5a:	bd38      	pop	{r3, r4, r5, pc}
    de5c:	2000      	movs	r0, #0
    de5e:	bd38      	pop	{r3, r4, r5, pc}

0000de60 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    de60:	b570      	push	{r4, r5, r6, lr}
    de62:	88c6      	ldrh	r6, [r0, #6]
    de64:	8885      	ldrh	r5, [r0, #4]
    de66:	4603      	mov	r3, r0
    de68:	f100 0424 	add.w	r4, r0, #36	; 0x24
    de6c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    de70:	4420      	add	r0, r4
    de72:	42b5      	cmp	r5, r6
    de74:	d102      	bne.n	de7c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    de76:	2000      	movs	r0, #0
    de78:	8218      	strh	r0, [r3, #16]
    de7a:	bd70      	pop	{r4, r5, r6, pc}
    de7c:	8804      	ldrh	r4, [r0, #0]
    de7e:	899d      	ldrh	r5, [r3, #12]
    de80:	7f1e      	ldrb	r6, [r3, #28]
    de82:	1b64      	subs	r4, r4, r5
    de84:	4435      	add	r5, r6
    de86:	4428      	add	r0, r5
    de88:	880d      	ldrh	r5, [r1, #0]
    de8a:	b2a4      	uxth	r4, r4
    de8c:	1cc0      	adds	r0, r0, #3
    de8e:	42a5      	cmp	r5, r4
    de90:	d900      	bls.n	de94 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    de92:	800c      	strh	r4, [r1, #0]
    de94:	899c      	ldrh	r4, [r3, #12]
    de96:	b124      	cbz	r4, dea2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    de98:	2400      	movs	r4, #0
    de9a:	7014      	strb	r4, [r2, #0]
    de9c:	8809      	ldrh	r1, [r1, #0]
    de9e:	8219      	strh	r1, [r3, #16]
    dea0:	bd70      	pop	{r4, r5, r6, pc}
    dea2:	2401      	movs	r4, #1
    dea4:	e7f9      	b.n	de9a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dea6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    dea6:	b508      	push	{r3, lr}
    dea8:	8a81      	ldrh	r1, [r0, #20]
    deaa:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    deae:	3aff      	subs	r2, #255	; 0xff
    deb0:	d008      	beq.n	dec4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    deb2:	7d82      	ldrb	r2, [r0, #22]
    deb4:	f88d 2000 	strb.w	r2, [sp]
    deb8:	9a00      	ldr	r2, [sp, #0]
    deba:	9200      	str	r2, [sp, #0]
    debc:	f89d 2000 	ldrb.w	r2, [sp]
    dec0:	b952      	cbnz	r2, ded8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dec2:	e004      	b.n	dece <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    dec4:	f240 318e 	movw	r1, #910	; 0x38e
    dec8:	2014      	movs	r0, #20
    deca:	f7f6 fe9d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dece:	8880      	ldrh	r0, [r0, #4]
    ded0:	4281      	cmp	r1, r0
    ded2:	d101      	bne.n	ded8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    ded4:	2000      	movs	r0, #0
    ded6:	bd08      	pop	{r3, pc}
    ded8:	2001      	movs	r0, #1
    deda:	bd08      	pop	{r3, pc}

0000dedc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    dedc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dee0:	8281      	strh	r1, [r0, #20]
    dee2:	2100      	movs	r1, #0
    dee4:	7581      	strb	r1, [r0, #22]
    dee6:	4770      	bx	lr

0000dee8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    dee8:	b510      	push	{r4, lr}
    deea:	8a81      	ldrh	r1, [r0, #20]
    deec:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    def0:	3aff      	subs	r2, #255	; 0xff
    def2:	d004      	beq.n	defe <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    def4:	f240 316a 	movw	r1, #874	; 0x36a
    def8:	2014      	movs	r0, #20
    defa:	f7f6 fe85 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    defe:	88c1      	ldrh	r1, [r0, #6]
    df00:	8281      	strh	r1, [r0, #20]
    df02:	89c1      	ldrh	r1, [r0, #14]
    df04:	b109      	cbz	r1, df0a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    df06:	21ff      	movs	r1, #255	; 0xff
    df08:	e000      	b.n	df0c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    df0a:	2100      	movs	r1, #0
    df0c:	7581      	strb	r1, [r0, #22]
    df0e:	bd10      	pop	{r4, pc}

0000df10 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df14:	461d      	mov	r5, r3
    df16:	4616      	mov	r6, r2
    df18:	9f06      	ldr	r7, [sp, #24]
    df1a:	460b      	mov	r3, r1
    df1c:	4604      	mov	r4, r0
    df1e:	463a      	mov	r2, r7
    df20:	4629      	mov	r1, r5
    df22:	4630      	mov	r0, r6
    df24:	f000 f84f 	bl	dfc6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    df28:	4283      	cmp	r3, r0
    df2a:	d201      	bcs.n	df30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    df2c:	21a8      	movs	r1, #168	; 0xa8
    df2e:	e018      	b.n	df62 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    df30:	1ce0      	adds	r0, r4, #3
    df32:	f020 0103 	bic.w	r1, r0, #3
    df36:	4620      	mov	r0, r4
    df38:	42a1      	cmp	r1, r4
    df3a:	d001      	beq.n	df40 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    df3c:	21a9      	movs	r1, #169	; 0xa9
    df3e:	e010      	b.n	df62 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    df40:	2224      	movs	r2, #36	; 0x24
    df42:	2100      	movs	r1, #0
    df44:	f7ff f93c 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df48:	f64f 70ff 	movw	r0, #65535	; 0xffff
    df4c:	82a0      	strh	r0, [r4, #20]
    df4e:	19a8      	adds	r0, r5, r6
    df50:	1d80      	adds	r0, r0, #6
    df52:	4378      	muls	r0, r7
    df54:	b280      	uxth	r0, r0
    df56:	7725      	strb	r5, [r4, #28]
    df58:	8060      	strh	r0, [r4, #2]
    df5a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    df5e:	d903      	bls.n	df68 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    df60:	21af      	movs	r1, #175	; 0xaf
    df62:	2014      	movs	r0, #20
    df64:	f7f6 fe50 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df68:	8026      	strh	r6, [r4, #0]
    df6a:	2000      	movs	r0, #0
    df6c:	7760      	strb	r0, [r4, #29]
    df6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000df72 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    df72:	6181      	str	r1, [r0, #24]
    df74:	6188      	str	r0, [r1, #24]
    df76:	4770      	bx	lr

0000df78 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    df78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df7c:	460b      	mov	r3, r1
    df7e:	4604      	mov	r4, r0
    df80:	f100 0124 	add.w	r1, r0, #36	; 0x24
    df84:	8905      	ldrh	r5, [r0, #8]
    df86:	8946      	ldrh	r6, [r0, #10]
    df88:	8880      	ldrh	r0, [r0, #4]
    df8a:	f3c5 070e 	ubfx	r7, r5, #0, #15
    df8e:	4439      	add	r1, r7
    df90:	460f      	mov	r7, r1
    df92:	4285      	cmp	r5, r0
    df94:	d102      	bne.n	df9c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    df96:	2000      	movs	r0, #0
    df98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df9c:	b10a      	cbz	r2, dfa2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    df9e:	1cc8      	adds	r0, r1, #3
    dfa0:	6010      	str	r0, [r2, #0]
    dfa2:	b123      	cbz	r3, dfae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dfa4:	7f22      	ldrb	r2, [r4, #28]
    dfa6:	1cf9      	adds	r1, r7, #3
    dfa8:	4618      	mov	r0, r3
    dfaa:	f7ff f88f 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfae:	883f      	ldrh	r7, [r7, #0]
    dfb0:	f104 0108 	add.w	r1, r4, #8
    dfb4:	4620      	mov	r0, r4
    dfb6:	f7ff fdaf 	bl	db18 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dfba:	42b5      	cmp	r5, r6
    dfbc:	d101      	bne.n	dfc2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    dfbe:	8920      	ldrh	r0, [r4, #8]
    dfc0:	8160      	strh	r0, [r4, #10]
    dfc2:	4638      	mov	r0, r7
    dfc4:	e7e8      	b.n	df98 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000dfc6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    dfc6:	4401      	add	r1, r0
    dfc8:	1d89      	adds	r1, r1, #6
    dfca:	4351      	muls	r1, r2
    dfcc:	b28a      	uxth	r2, r1
    dfce:	2100      	movs	r1, #0
    dfd0:	2845      	cmp	r0, #69	; 0x45
    dfd2:	d202      	bcs.n	dfda <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    dfd4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    dfd8:	b281      	uxth	r1, r0
    dfda:	3224      	adds	r2, #36	; 0x24
    dfdc:	1850      	adds	r0, r2, r1
    dfde:	b280      	uxth	r0, r0
    dfe0:	4770      	bx	lr

0000dfe2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dfe6:	4688      	mov	r8, r1
    dfe8:	88c1      	ldrh	r1, [r0, #6]
    dfea:	4604      	mov	r4, r0
    dfec:	8900      	ldrh	r0, [r0, #8]
    dfee:	f3c1 060e 	ubfx	r6, r1, #0, #15
    dff2:	f104 0524 	add.w	r5, r4, #36	; 0x24
    dff6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    dffa:	eb05 0906 	add.w	r9, r5, r6
    dffe:	f7ff fdac 	bl	db5a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e002:	2200      	movs	r2, #0
    e004:	b998      	cbnz	r0, e02e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e006:	8820      	ldrh	r0, [r4, #0]
    e008:	2845      	cmp	r0, #69	; 0x45
    e00a:	d200      	bcs.n	e00e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e00c:	2045      	movs	r0, #69	; 0x45
    e00e:	42b7      	cmp	r7, r6
    e010:	d906      	bls.n	e020 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e012:	7f23      	ldrb	r3, [r4, #28]
    e014:	1bb9      	subs	r1, r7, r6
    e016:	1ac9      	subs	r1, r1, r3
    e018:	1f89      	subs	r1, r1, #6
    e01a:	4281      	cmp	r1, r0
    e01c:	da00      	bge.n	e020 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e01e:	4608      	mov	r0, r1
    e020:	89e1      	ldrh	r1, [r4, #14]
    e022:	b111      	cbz	r1, e02a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e024:	f8b9 3000 	ldrh.w	r3, [r9]
    e028:	1ac0      	subs	r0, r0, r3
    e02a:	4540      	cmp	r0, r8
    e02c:	da03      	bge.n	e036 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e02e:	8262      	strh	r2, [r4, #18]
    e030:	2000      	movs	r0, #0
    e032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e036:	7f20      	ldrb	r0, [r4, #28]
    e038:	4429      	add	r1, r5
    e03a:	1d80      	adds	r0, r0, #6
    e03c:	4430      	add	r0, r6
    e03e:	4408      	add	r0, r1
    e040:	f8a4 8012 	strh.w	r8, [r4, #18]
    e044:	1ec0      	subs	r0, r0, #3
    e046:	e7f4      	b.n	e032 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e048 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e048:	2100      	movs	r1, #0
    e04a:	81c1      	strh	r1, [r0, #14]
    e04c:	8241      	strh	r1, [r0, #18]
    e04e:	7581      	strb	r1, [r0, #22]
    e050:	4770      	bx	lr

0000e052 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e052:	b570      	push	{r4, r5, r6, lr}
    e054:	2300      	movs	r3, #0
    e056:	f1a1 0208 	sub.w	r2, r1, #8
    e05a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e05e:	42a2      	cmp	r2, r4
    e060:	d304      	bcc.n	e06c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e062:	f240 11cd 	movw	r1, #461	; 0x1cd
    e066:	2015      	movs	r0, #21
    e068:	f7f6 fdce 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e06c:	6802      	ldr	r2, [r0, #0]
    e06e:	b90a      	cbnz	r2, e074 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e070:	e01e      	b.n	e0b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e072:	4610      	mov	r0, r2
    e074:	6802      	ldr	r2, [r0, #0]
    e076:	8893      	ldrh	r3, [r2, #4]
    e078:	428b      	cmp	r3, r1
    e07a:	d002      	beq.n	e082 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e07c:	6813      	ldr	r3, [r2, #0]
    e07e:	2b00      	cmp	r3, #0
    e080:	d1f7      	bne.n	e072 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e082:	8894      	ldrh	r4, [r2, #4]
    e084:	4613      	mov	r3, r2
    e086:	428c      	cmp	r4, r1
    e088:	d101      	bne.n	e08e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e08a:	6811      	ldr	r1, [r2, #0]
    e08c:	e00d      	b.n	e0aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e08e:	f101 0508 	add.w	r5, r1, #8
    e092:	b2ae      	uxth	r6, r5
    e094:	2500      	movs	r5, #0
    e096:	42b4      	cmp	r4, r6
    e098:	d309      	bcc.n	e0ae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e09a:	1a64      	subs	r4, r4, r1
    e09c:	4411      	add	r1, r2
    e09e:	600d      	str	r5, [r1, #0]
    e0a0:	808c      	strh	r4, [r1, #4]
    e0a2:	6802      	ldr	r2, [r0, #0]
    e0a4:	6812      	ldr	r2, [r2, #0]
    e0a6:	6002      	str	r2, [r0, #0]
    e0a8:	600a      	str	r2, [r1, #0]
    e0aa:	6001      	str	r1, [r0, #0]
    e0ac:	e000      	b.n	e0b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e0ae:	2300      	movs	r3, #0
    e0b0:	4618      	mov	r0, r3
    e0b2:	bd70      	pop	{r4, r5, r6, pc}

0000e0b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e0b4:	b510      	push	{r4, lr}
    e0b6:	000c      	movs	r4, r1
    e0b8:	d004      	beq.n	e0c4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e0ba:	2c08      	cmp	r4, #8
    e0bc:	d207      	bcs.n	e0ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e0be:	f240 1195 	movw	r1, #405	; 0x195
    e0c2:	e00a      	b.n	e0da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e0c4:	b108      	cbz	r0, e0ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e0c6:	2100      	movs	r1, #0
    e0c8:	6001      	str	r1, [r0, #0]
    e0ca:	2000      	movs	r0, #0
    e0cc:	bd10      	pop	{r4, pc}
    e0ce:	b158      	cbz	r0, e0e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e0d0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e0d4:	d304      	bcc.n	e0e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e0d6:	f240 11a7 	movw	r1, #423	; 0x1a7
    e0da:	2015      	movs	r0, #21
    e0dc:	f7f6 fd94 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0e0:	b2a1      	uxth	r1, r4
    e0e2:	6800      	ldr	r0, [r0, #0]
    e0e4:	f000 f814 	bl	e110 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e0e8:	1d20      	adds	r0, r4, #4
    e0ea:	bd10      	pop	{r4, pc}

0000e0ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e0ec:	2100      	movs	r1, #0
    e0ee:	6802      	ldr	r2, [r0, #0]
    e0f0:	e003      	b.n	e0fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e0f2:	8893      	ldrh	r3, [r2, #4]
    e0f4:	6812      	ldr	r2, [r2, #0]
    e0f6:	4419      	add	r1, r3
    e0f8:	b289      	uxth	r1, r1
    e0fa:	2a00      	cmp	r2, #0
    e0fc:	d1f9      	bne.n	e0f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e0fe:	f000 b807 	b.w	e110 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e102 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e102:	2300      	movs	r3, #0
    e104:	600b      	str	r3, [r1, #0]
    e106:	808a      	strh	r2, [r1, #4]
    e108:	6802      	ldr	r2, [r0, #0]
    e10a:	600a      	str	r2, [r1, #0]
    e10c:	6001      	str	r1, [r0, #0]
    e10e:	4770      	bx	lr
    e110:	2300      	movs	r3, #0
    e112:	6043      	str	r3, [r0, #4]
    e114:	1d02      	adds	r2, r0, #4
    e116:	8101      	strh	r1, [r0, #8]
    e118:	6002      	str	r2, [r0, #0]
    e11a:	4770      	bx	lr

0000e11c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e11c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e120:	3bff      	subs	r3, #255	; 0xff
    e122:	d001      	beq.n	e128 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e124:	2902      	cmp	r1, #2
    e126:	d301      	bcc.n	e12c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e128:	2000      	movs	r0, #0
    e12a:	4770      	bx	lr
    e12c:	f7f7 b832 	b.w	5194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e130:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e134:	3aff      	subs	r2, #255	; 0xff
    e136:	d001      	beq.n	e13c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e138:	2902      	cmp	r1, #2
    e13a:	d301      	bcc.n	e140 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e13c:	2000      	movs	r0, #0
    e13e:	4770      	bx	lr
    e140:	f7f7 b862 	b.w	5208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e144:	b570      	push	{r4, r5, r6, lr}
    e146:	4605      	mov	r5, r0
    e148:	460c      	mov	r4, r1
    e14a:	4608      	mov	r0, r1
    e14c:	f000 f9a9 	bl	e4a2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e150:	b108      	cbz	r0, e156 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e152:	2010      	movs	r0, #16
    e154:	bd70      	pop	{r4, r5, r6, pc}
    e156:	2d02      	cmp	r5, #2
    e158:	d301      	bcc.n	e15e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e15a:	2007      	movs	r0, #7
    e15c:	bd70      	pop	{r4, r5, r6, pc}
    e15e:	7025      	strb	r5, [r4, #0]
    e160:	2000      	movs	r0, #0
    e162:	8060      	strh	r0, [r4, #2]
    e164:	bd70      	pop	{r4, r5, r6, pc}
    e166:	b510      	push	{r4, lr}
    e168:	4604      	mov	r4, r0
    e16a:	f7f7 f899 	bl	52a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e16e:	42a0      	cmp	r0, r4
    e170:	d901      	bls.n	e176 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e172:	2001      	movs	r0, #1
    e174:	bd10      	pop	{r4, pc}
    e176:	2000      	movs	r0, #0
    e178:	bd10      	pop	{r4, pc}
    e17a:	4770      	bx	lr

0000e17c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e17c:	b570      	push	{r4, r5, r6, lr}
    e17e:	460e      	mov	r6, r1
    e180:	461d      	mov	r5, r3
    e182:	4611      	mov	r1, r2
    e184:	f000 f813 	bl	e1ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e188:	4604      	mov	r4, r0
    e18a:	4629      	mov	r1, r5
    e18c:	4630      	mov	r0, r6
    e18e:	f000 f804 	bl	e19a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e192:	4420      	add	r0, r4
    e194:	1d00      	adds	r0, r0, #4
    e196:	b280      	uxth	r0, r0
    e198:	bd70      	pop	{r4, r5, r6, pc}
    e19a:	b510      	push	{r4, lr}
    e19c:	460a      	mov	r2, r1
    e19e:	2101      	movs	r1, #1
    e1a0:	f7ff ff11 	bl	dfc6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e1a4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e1a8:	1cc0      	adds	r0, r0, #3
    e1aa:	4008      	ands	r0, r1
    e1ac:	bd10      	pop	{r4, pc}
    e1ae:	b510      	push	{r4, lr}
    e1b0:	460a      	mov	r2, r1
    e1b2:	210a      	movs	r1, #10
    e1b4:	f7ff ff07 	bl	dfc6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e1b8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e1bc:	1cc0      	adds	r0, r0, #3
    e1be:	4008      	ands	r0, r1
    e1c0:	bd10      	pop	{r4, pc}
    e1c2:	b109      	cbz	r1, e1c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e1c4:	2100      	movs	r1, #0
    e1c6:	e000      	b.n	e1ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e1c8:	2102      	movs	r1, #2
    e1ca:	1843      	adds	r3, r0, r1
    e1cc:	7d1a      	ldrb	r2, [r3, #20]
    e1ce:	2a02      	cmp	r2, #2
    e1d0:	d008      	beq.n	e1e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e1d2:	7d5b      	ldrb	r3, [r3, #21]
    e1d4:	2b02      	cmp	r3, #2
    e1d6:	d009      	beq.n	e1ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e1d8:	2a03      	cmp	r2, #3
    e1da:	d003      	beq.n	e1e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e1dc:	2b03      	cmp	r3, #3
    e1de:	d005      	beq.n	e1ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e1e0:	2000      	movs	r0, #0
    e1e2:	4770      	bx	lr
    e1e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e1e8:	8b00      	ldrh	r0, [r0, #24]
    e1ea:	4770      	bx	lr
    e1ec:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e1f0:	8b40      	ldrh	r0, [r0, #26]
    e1f2:	4770      	bx	lr
    e1f4:	b109      	cbz	r1, e1fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e1f6:	2100      	movs	r1, #0
    e1f8:	e000      	b.n	e1fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e1fa:	2102      	movs	r1, #2
    e1fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e200:	8b01      	ldrh	r1, [r0, #24]
    e202:	b911      	cbnz	r1, e20a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e204:	8b40      	ldrh	r0, [r0, #26]
    e206:	2800      	cmp	r0, #0
    e208:	d000      	beq.n	e20c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e20a:	2001      	movs	r0, #1
    e20c:	4770      	bx	lr
    e20e:	b538      	push	{r3, r4, r5, lr}
    e210:	7883      	ldrb	r3, [r0, #2]
    e212:	f88d 3000 	strb.w	r3, [sp]
    e216:	9b00      	ldr	r3, [sp, #0]
    e218:	9300      	str	r3, [sp, #0]
    e21a:	f89d 3000 	ldrb.w	r3, [sp]
    e21e:	b95b      	cbnz	r3, e238 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e220:	2400      	movs	r4, #0
    e222:	b10a      	cbz	r2, e228 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e224:	2300      	movs	r3, #0
    e226:	e000      	b.n	e22a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e228:	2302      	movs	r3, #2
    e22a:	18c2      	adds	r2, r0, r3
    e22c:	7d15      	ldrb	r5, [r2, #20]
    e22e:	2d02      	cmp	r5, #2
    e230:	d004      	beq.n	e23c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e232:	7d52      	ldrb	r2, [r2, #21]
    e234:	2a02      	cmp	r2, #2
    e236:	d004      	beq.n	e242 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e238:	2000      	movs	r0, #0
    e23a:	bd38      	pop	{r3, r4, r5, pc}
    e23c:	461a      	mov	r2, r3
    e23e:	1c5b      	adds	r3, r3, #1
    e240:	e000      	b.n	e244 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e242:	1c5a      	adds	r2, r3, #1
    e244:	b179      	cbz	r1, e266 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e246:	18c5      	adds	r5, r0, r3
    e248:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e24c:	752c      	strb	r4, [r5, #20]
    e24e:	831c      	strh	r4, [r3, #24]
    e250:	2303      	movs	r3, #3
    e252:	1884      	adds	r4, r0, r2
    e254:	7523      	strb	r3, [r4, #20]
    e256:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e25a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e25e:	685b      	ldr	r3, [r3, #4]
    e260:	600b      	str	r3, [r1, #0]
    e262:	8b00      	ldrh	r0, [r0, #24]
    e264:	8088      	strh	r0, [r1, #4]
    e266:	2001      	movs	r0, #1
    e268:	bd38      	pop	{r3, r4, r5, pc}
    e26a:	b510      	push	{r4, lr}
    e26c:	b109      	cbz	r1, e272 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e26e:	2100      	movs	r1, #0
    e270:	e000      	b.n	e274 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e272:	2102      	movs	r1, #2
    e274:	1843      	adds	r3, r0, r1
    e276:	7d1c      	ldrb	r4, [r3, #20]
    e278:	4294      	cmp	r4, r2
    e27a:	d103      	bne.n	e284 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e27c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e280:	8b00      	ldrh	r0, [r0, #24]
    e282:	bd10      	pop	{r4, pc}
    e284:	7d5b      	ldrb	r3, [r3, #21]
    e286:	4293      	cmp	r3, r2
    e288:	d103      	bne.n	e292 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e28a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e28e:	8b40      	ldrh	r0, [r0, #26]
    e290:	bd10      	pop	{r4, pc}
    e292:	2000      	movs	r0, #0
    e294:	bd10      	pop	{r4, pc}
    e296:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e29a:	d201      	bcs.n	e2a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e29c:	0841      	lsrs	r1, r0, #1
    e29e:	e000      	b.n	e2a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e2a0:	21ff      	movs	r1, #255	; 0xff
    e2a2:	1a40      	subs	r0, r0, r1
    e2a4:	f240 6172 	movw	r1, #1650	; 0x672
    e2a8:	4288      	cmp	r0, r1
    e2aa:	db00      	blt.n	e2ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e2ac:	4608      	mov	r0, r1
    e2ae:	b280      	uxth	r0, r0
    e2b0:	4770      	bx	lr

0000e2b2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e2b2:	2101      	movs	r1, #1
    e2b4:	f7ff bf85 	b.w	e1c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2bc:	4606      	mov	r6, r0
    e2be:	f342 0780 	sbfx	r7, r2, #2, #1
    e2c2:	7848      	ldrb	r0, [r1, #1]
    e2c4:	460c      	mov	r4, r1
    e2c6:	f022 0504 	bic.w	r5, r2, #4
    e2ca:	1c7f      	adds	r7, r7, #1
    e2cc:	b100      	cbz	r0, e2d0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e2ce:	b90d      	cbnz	r5, e2d4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e2d0:	4328      	orrs	r0, r5
    e2d2:	d104      	bne.n	e2de <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e2d4:	b145      	cbz	r5, e2e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e2d6:	2100      	movs	r1, #0
    e2d8:	4620      	mov	r0, r4
    e2da:	f7f7 f8eb 	bl	54b4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e2de:	20ff      	movs	r0, #255	; 0xff
    e2e0:	70a0      	strb	r0, [r4, #2]
    e2e2:	b11f      	cbz	r7, e2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e2e4:	2000      	movs	r0, #0
    e2e6:	e002      	b.n	e2ee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e2e8:	2101      	movs	r1, #1
    e2ea:	e7f5      	b.n	e2d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e2ec:	2002      	movs	r0, #2
    e2ee:	1821      	adds	r1, r4, r0
    e2f0:	7d09      	ldrb	r1, [r1, #20]
    e2f2:	2903      	cmp	r1, #3
    e2f4:	d102      	bne.n	e2fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e2f6:	2d02      	cmp	r5, #2
    e2f8:	d000      	beq.n	e2fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e2fa:	1c40      	adds	r0, r0, #1
    e2fc:	1822      	adds	r2, r4, r0
    e2fe:	2101      	movs	r1, #1
    e300:	7511      	strb	r1, [r2, #20]
    e302:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e306:	2200      	movs	r2, #0
    e308:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e30c:	830a      	strh	r2, [r1, #24]
    e30e:	6840      	ldr	r0, [r0, #4]
    e310:	70a2      	strb	r2, [r4, #2]
    e312:	4631      	mov	r1, r6
    e314:	f362 010f 	bfi	r1, r2, #0, #16
    e318:	e9c6 0100 	strd	r0, r1, [r6]
    e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e320 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e324:	461e      	mov	r6, r3
    e326:	4613      	mov	r3, r2
    e328:	4604      	mov	r4, r0
    e32a:	b109      	cbz	r1, e330 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e32c:	2000      	movs	r0, #0
    e32e:	e000      	b.n	e332 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e330:	2002      	movs	r0, #2
    e332:	21ff      	movs	r1, #255	; 0xff
    e334:	70a1      	strb	r1, [r4, #2]
    e336:	1821      	adds	r1, r4, r0
    e338:	7d0a      	ldrb	r2, [r1, #20]
    e33a:	2a01      	cmp	r2, #1
    e33c:	d003      	beq.n	e346 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e33e:	7d49      	ldrb	r1, [r1, #21]
    e340:	2901      	cmp	r1, #1
    e342:	d10c      	bne.n	e35e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e344:	1c40      	adds	r0, r0, #1
    e346:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e34a:	2700      	movs	r7, #0
    e34c:	8b29      	ldrh	r1, [r5, #24]
    e34e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e352:	198a      	adds	r2, r1, r6
    e354:	4562      	cmp	r2, ip
    e356:	d905      	bls.n	e364 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e358:	4420      	add	r0, r4
    e35a:	832f      	strh	r7, [r5, #24]
    e35c:	7507      	strb	r7, [r0, #20]
    e35e:	2000      	movs	r0, #0
    e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e364:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e368:	4632      	mov	r2, r6
    e36a:	6840      	ldr	r0, [r0, #4]
    e36c:	4408      	add	r0, r1
    e36e:	4619      	mov	r1, r3
    e370:	f7fe feac 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e374:	8b28      	ldrh	r0, [r5, #24]
    e376:	4430      	add	r0, r6
    e378:	8328      	strh	r0, [r5, #24]
    e37a:	70a7      	strb	r7, [r4, #2]
    e37c:	2001      	movs	r0, #1
    e37e:	e7ef      	b.n	e360 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e380 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e380:	2202      	movs	r2, #2
    e382:	2100      	movs	r1, #0
    e384:	f7ff bf71 	b.w	e26a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e388 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e388:	b510      	push	{r4, lr}
    e38a:	2101      	movs	r1, #1
    e38c:	f7ff ff32 	bl	e1f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e390:	2800      	cmp	r0, #0
    e392:	d000      	beq.n	e396 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e394:	2001      	movs	r0, #1
    e396:	bd10      	pop	{r4, pc}

0000e398 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e398:	2201      	movs	r2, #1
    e39a:	f7ff bf38 	b.w	e20e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e39e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e39e:	2200      	movs	r2, #0
    e3a0:	f7ff bf35 	b.w	e20e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e3a4:	b570      	push	{r4, r5, r6, lr}
    e3a6:	b109      	cbz	r1, e3ac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e3a8:	2300      	movs	r3, #0
    e3aa:	e000      	b.n	e3ae <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e3ac:	2302      	movs	r3, #2
    e3ae:	21ff      	movs	r1, #255	; 0xff
    e3b0:	7081      	strb	r1, [r0, #2]
    e3b2:	18c1      	adds	r1, r0, r3
    e3b4:	2402      	movs	r4, #2
    e3b6:	7d0d      	ldrb	r5, [r1, #20]
    e3b8:	2d01      	cmp	r5, #1
    e3ba:	d007      	beq.n	e3cc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e3bc:	7d4d      	ldrb	r5, [r1, #21]
    e3be:	2d01      	cmp	r5, #1
    e3c0:	d009      	beq.n	e3d6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e3c2:	f44f 718b 	mov.w	r1, #278	; 0x116
    e3c6:	2009      	movs	r0, #9
    e3c8:	f7f6 fc1e 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e3d0:	831a      	strh	r2, [r3, #24]
    e3d2:	750c      	strb	r4, [r1, #20]
    e3d4:	e003      	b.n	e3de <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e3d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e3da:	835a      	strh	r2, [r3, #26]
    e3dc:	754c      	strb	r4, [r1, #21]
    e3de:	2100      	movs	r1, #0
    e3e0:	7081      	strb	r1, [r0, #2]
    e3e2:	bd70      	pop	{r4, r5, r6, pc}

0000e3e4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e3e4:	2101      	movs	r1, #1
    e3e6:	7001      	strb	r1, [r0, #0]
    e3e8:	4770      	bx	lr

0000e3ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e3ea:	2201      	movs	r2, #1
    e3ec:	4611      	mov	r1, r2
    e3ee:	f7ff bf3c 	b.w	e26a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e3f2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e3f2:	2201      	movs	r2, #1
    e3f4:	2100      	movs	r1, #0
    e3f6:	f7ff bf38 	b.w	e26a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e3fa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e3fa:	2100      	movs	r1, #0
    e3fc:	f7ff bee1 	b.w	e1c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e400:	2800      	cmp	r0, #0
    e402:	db09      	blt.n	e418 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e404:	f000 021f 	and.w	r2, r0, #31
    e408:	2101      	movs	r1, #1
    e40a:	4091      	lsls	r1, r2
    e40c:	0940      	lsrs	r0, r0, #5
    e40e:	0080      	lsls	r0, r0, #2
    e410:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e414:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e418:	4770      	bx	lr
    e41a:	2800      	cmp	r0, #0
    e41c:	db0d      	blt.n	e43a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e41e:	f000 021f 	and.w	r2, r0, #31
    e422:	2101      	movs	r1, #1
    e424:	4091      	lsls	r1, r2
    e426:	0940      	lsrs	r0, r0, #5
    e428:	0080      	lsls	r0, r0, #2
    e42a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e42e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e432:	f3bf 8f4f 	dsb	sy
    e436:	f3bf 8f6f 	isb	sy
    e43a:	4770      	bx	lr
    e43c:	b510      	push	{r4, lr}
    e43e:	200e      	movs	r0, #14
    e440:	f7ff ffeb 	bl	e41a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e444:	200e      	movs	r0, #14
    e446:	f7ff ffdb 	bl	e400 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e44a:	200f      	movs	r0, #15
    e44c:	f7ff ffe5 	bl	e41a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e454:	200f      	movs	r0, #15
    e456:	f7ff bfd3 	b.w	e400 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e45a:	2800      	cmp	r0, #0
    e45c:	db09      	blt.n	e472 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e45e:	f000 021f 	and.w	r2, r0, #31
    e462:	2101      	movs	r1, #1
    e464:	4091      	lsls	r1, r2
    e466:	0940      	lsrs	r0, r0, #5
    e468:	0080      	lsls	r0, r0, #2
    e46a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e46e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e472:	4770      	bx	lr
    e474:	5840      	ldr	r0, [r0, r1]
    e476:	2800      	cmp	r0, #0
    e478:	d000      	beq.n	e47c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e47a:	2001      	movs	r0, #1
    e47c:	4770      	bx	lr

0000e47e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e47e:	b510      	push	{r4, lr}
    e480:	4604      	mov	r4, r0
    e482:	4620      	mov	r0, r4
    e484:	f7f7 f916 	bl	56b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e488:	2811      	cmp	r0, #17
    e48a:	d0fa      	beq.n	e482 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e48c:	bd10      	pop	{r4, pc}

0000e48e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e48e:	b510      	push	{r4, lr}
    e490:	f7ff fff5 	bl	e47e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e494:	2800      	cmp	r0, #0
    e496:	d003      	beq.n	e4a0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e498:	21a0      	movs	r1, #160	; 0xa0
    e49a:	201d      	movs	r0, #29
    e49c:	f7f6 fbb4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4a0:	bd10      	pop	{r4, pc}

0000e4a2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e4a2:	b108      	cbz	r0, e4a8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e4a4:	2000      	movs	r0, #0
    e4a6:	4770      	bx	lr
    e4a8:	2001      	movs	r0, #1
    e4aa:	4770      	bx	lr

0000e4ac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e4ac:	f7f7 ba54 	b.w	5958 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e4b0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e4b0:	f7f7 ba42 	b.w	5938 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e4b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e4b4:	b510      	push	{r4, lr}
    e4b6:	4050      	eors	r0, r2
    e4b8:	780a      	ldrb	r2, [r1, #0]
    e4ba:	781c      	ldrb	r4, [r3, #0]
    e4bc:	4062      	eors	r2, r4
    e4be:	4410      	add	r0, r2
    e4c0:	784a      	ldrb	r2, [r1, #1]
    e4c2:	785c      	ldrb	r4, [r3, #1]
    e4c4:	4062      	eors	r2, r4
    e4c6:	4410      	add	r0, r2
    e4c8:	788a      	ldrb	r2, [r1, #2]
    e4ca:	789c      	ldrb	r4, [r3, #2]
    e4cc:	4062      	eors	r2, r4
    e4ce:	4410      	add	r0, r2
    e4d0:	78ca      	ldrb	r2, [r1, #3]
    e4d2:	78dc      	ldrb	r4, [r3, #3]
    e4d4:	4062      	eors	r2, r4
    e4d6:	4410      	add	r0, r2
    e4d8:	790a      	ldrb	r2, [r1, #4]
    e4da:	791c      	ldrb	r4, [r3, #4]
    e4dc:	7949      	ldrb	r1, [r1, #5]
    e4de:	4062      	eors	r2, r4
    e4e0:	4410      	add	r0, r2
    e4e2:	795a      	ldrb	r2, [r3, #5]
    e4e4:	4051      	eors	r1, r2
    e4e6:	42c1      	cmn	r1, r0
    e4e8:	d101      	bne.n	e4ee <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    e4ea:	2001      	movs	r0, #1
    e4ec:	bd10      	pop	{r4, pc}
    e4ee:	2000      	movs	r0, #0
    e4f0:	bd10      	pop	{r4, pc}

0000e4f2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e4f2:	b510      	push	{r4, lr}
    e4f4:	2900      	cmp	r1, #0
    e4f6:	4604      	mov	r4, r0
    e4f8:	f04f 0106 	mov.w	r1, #6
    e4fc:	d002      	beq.n	e504 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e4fe:	f7f6 fc21 	bl	4d44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e502:	e001      	b.n	e508 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e504:	f7f6 fc2c 	bl	4d60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e508:	7960      	ldrb	r0, [r4, #5]
    e50a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e50e:	7160      	strb	r0, [r4, #5]
    e510:	bd10      	pop	{r4, pc}

0000e512 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e512:	4770      	bx	lr

0000e514 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e514:	b530      	push	{r4, r5, lr}
    e516:	460c      	mov	r4, r1
    e518:	4605      	mov	r5, r0
    e51a:	b08d      	sub	sp, #52	; 0x34
    e51c:	f04f 0103 	mov.w	r1, #3
    e520:	f104 0003 	add.w	r0, r4, #3
    e524:	b112      	cbz	r2, e52c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e526:	f7f6 fc0d 	bl	4d44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e52a:	e001      	b.n	e530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e52c:	f7f6 fc18 	bl	4d60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e530:	7960      	ldrb	r0, [r4, #5]
    e532:	220d      	movs	r2, #13
    e534:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e538:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e53c:	7160      	strb	r0, [r4, #5]
    e53e:	2100      	movs	r1, #0
    e540:	a804      	add	r0, sp, #16
    e542:	f7fe fe3d 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e546:	78e0      	ldrb	r0, [r4, #3]
    e548:	f88d 001f 	strb.w	r0, [sp, #31]
    e54c:	7920      	ldrb	r0, [r4, #4]
    e54e:	f88d 001e 	strb.w	r0, [sp, #30]
    e552:	7960      	ldrb	r0, [r4, #5]
    e554:	f88d 001d 	strb.w	r0, [sp, #29]
    e558:	2210      	movs	r2, #16
    e55a:	4629      	mov	r1, r5
    e55c:	4668      	mov	r0, sp
    e55e:	f7fe fdb5 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e562:	4668      	mov	r0, sp
    e564:	f7ff ff93 	bl	e48e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e568:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e56c:	7020      	strb	r0, [r4, #0]
    e56e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e572:	7060      	strb	r0, [r4, #1]
    e574:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e578:	70a0      	strb	r0, [r4, #2]
    e57a:	b00d      	add	sp, #52	; 0x34
    e57c:	bd30      	pop	{r4, r5, pc}

0000e57e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e57e:	f7f7 bdc7 	b.w	6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    e582:	07c1      	lsls	r1, r0, #31
    e584:	d001      	beq.n	e58a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e586:	2001      	movs	r0, #1
    e588:	4770      	bx	lr
    e58a:	0780      	lsls	r0, r0, #30
    e58c:	d501      	bpl.n	e592 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e58e:	2002      	movs	r0, #2
    e590:	4770      	bx	lr
    e592:	2000      	movs	r0, #0
    e594:	4770      	bx	lr
    e596:	b510      	push	{r4, lr}
    e598:	2801      	cmp	r0, #1
    e59a:	d008      	beq.n	e5ae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e59c:	2802      	cmp	r0, #2
    e59e:	d004      	beq.n	e5aa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e5a0:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e5a4:	2006      	movs	r0, #6
    e5a6:	f7f6 fb2f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5aa:	2001      	movs	r0, #1
    e5ac:	bd10      	pop	{r4, pc}
    e5ae:	2000      	movs	r0, #0
    e5b0:	bd10      	pop	{r4, pc}
    e5b2:	2900      	cmp	r1, #0
    e5b4:	d004      	beq.n	e5c0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e5b6:	2801      	cmp	r0, #1
    e5b8:	d003      	beq.n	e5c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e5ba:	2901      	cmp	r1, #1
    e5bc:	d001      	beq.n	e5c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e5be:	2002      	movs	r0, #2
    e5c0:	4770      	bx	lr
    e5c2:	2001      	movs	r0, #1
    e5c4:	4770      	bx	lr
    e5c6:	f7ff bc4b 	b.w	de60 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e5ca <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e5ca:	2101      	movs	r1, #1
    e5cc:	f7f8 b930 	b.w	6830 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e5d0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e5d0:	b510      	push	{r4, lr}
    e5d2:	f002 fcb7 	bl	10f44 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e5d6:	b118      	cbz	r0, e5e0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5dc:	f7fc bee8 	b.w	b3b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e5e0:	20ff      	movs	r0, #255	; 0xff
    e5e2:	bd10      	pop	{r4, pc}

0000e5e4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e5e4:	b510      	push	{r4, lr}
    e5e6:	f7f8 f96b 	bl	68c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e5ea:	2810      	cmp	r0, #16
    e5ec:	d003      	beq.n	e5f6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e5ee:	f7f8 f937 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e5f2:	2810      	cmp	r0, #16
    e5f4:	d100      	bne.n	e5f8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e5f6:	2008      	movs	r0, #8
    e5f8:	bd10      	pop	{r4, pc}

0000e5fa <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e5fa:	b510      	push	{r4, lr}
    e5fc:	f7f8 f960 	bl	68c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e600:	2810      	cmp	r0, #16
    e602:	d007      	beq.n	e614 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e604:	f7f8 f92c 	bl	6860 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e608:	2810      	cmp	r0, #16
    e60a:	d003      	beq.n	e614 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e60c:	f7f8 f9b6 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    e610:	2001      	movs	r0, #1
    e612:	bd10      	pop	{r4, pc}
    e614:	2000      	movs	r0, #0
    e616:	bd10      	pop	{r4, pc}

0000e618 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e618:	b510      	push	{r4, lr}
    e61a:	f7f8 f951 	bl	68c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e61e:	2810      	cmp	r0, #16
    e620:	d003      	beq.n	e62a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e622:	f7f8 f9f3 	bl	6a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    e626:	2001      	movs	r0, #1
    e628:	bd10      	pop	{r4, pc}
    e62a:	2000      	movs	r0, #0
    e62c:	bd10      	pop	{r4, pc}

0000e62e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e62e:	b570      	push	{r4, r5, r6, lr}
    e630:	460e      	mov	r6, r1
    e632:	b08c      	sub	sp, #48	; 0x30
    e634:	4614      	mov	r4, r2
    e636:	4601      	mov	r1, r0
    e638:	461d      	mov	r5, r3
    e63a:	2210      	movs	r2, #16
    e63c:	4668      	mov	r0, sp
    e63e:	f000 f928 	bl	e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e642:	2210      	movs	r2, #16
    e644:	4631      	mov	r1, r6
    e646:	a804      	add	r0, sp, #16
    e648:	f000 f923 	bl	e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e64c:	4668      	mov	r0, sp
    e64e:	f7ff ff1e 	bl	e48e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e652:	a908      	add	r1, sp, #32
    e654:	f04f 0210 	mov.w	r2, #16
    e658:	4628      	mov	r0, r5
    e65a:	b11c      	cbz	r4, e664 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e65c:	f000 f919 	bl	e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e660:	b00c      	add	sp, #48	; 0x30
    e662:	bd70      	pop	{r4, r5, r6, pc}
    e664:	f7fe fd32 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e668:	e7fa      	b.n	e660 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e66a:	b510      	push	{r4, lr}
    e66c:	460c      	mov	r4, r1
    e66e:	2100      	movs	r1, #0
    e670:	f7ff fd5e 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e674:	6060      	str	r0, [r4, #4]
    e676:	b118      	cbz	r0, e680 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e678:	2001      	movs	r0, #1
    e67a:	7020      	strb	r0, [r4, #0]
    e67c:	2000      	movs	r0, #0
    e67e:	bd10      	pop	{r4, pc}
    e680:	2002      	movs	r0, #2
    e682:	bd10      	pop	{r4, pc}

0000e684 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e684:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e688:	4348      	muls	r0, r1
    e68a:	4770      	bx	lr

0000e68c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e68c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e690:	fbb0 f0f1 	udiv	r0, r0, r1
    e694:	b280      	uxth	r0, r0
    e696:	4770      	bx	lr

0000e698 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e698:	b570      	push	{r4, r5, r6, lr}
    e69a:	4604      	mov	r4, r0
    e69c:	4290      	cmp	r0, r2
    e69e:	d20b      	bcs.n	e6b8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e6a0:	1b10      	subs	r0, r2, r4
    e6a2:	2865      	cmp	r0, #101	; 0x65
    e6a4:	d200      	bcs.n	e6a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e6a6:	2065      	movs	r0, #101	; 0x65
    e6a8:	1825      	adds	r5, r4, r0
    e6aa:	428d      	cmp	r5, r1
    e6ac:	d803      	bhi.n	e6b6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e6ae:	2103      	movs	r1, #3
    e6b0:	f7f3 fd24 	bl	20fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e6b4:	b108      	cbz	r0, e6ba <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e6b6:	4620      	mov	r0, r4
    e6b8:	bd70      	pop	{r4, r5, r6, pc}
    e6ba:	4628      	mov	r0, r5
    e6bc:	bd70      	pop	{r4, r5, r6, pc}

0000e6be <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e6be:	b510      	push	{r4, lr}
    e6c0:	f1a2 030f 	sub.w	r3, r2, #15
    e6c4:	290c      	cmp	r1, #12
    e6c6:	d244      	bcs.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6c8:	e8df f001 	tbb	[pc, r1]
    e6cc:	120d0806 	.word	0x120d0806
    e6d0:	241c1815 	.word	0x241c1815
    e6d4:	312a4127 	.word	0x312a4127
    e6d8:	b3c2      	cbz	r2, e74c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e6da:	e03a      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6dc:	2a07      	cmp	r2, #7
    e6de:	d03a      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6e0:	2a08      	cmp	r2, #8
    e6e2:	d038      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6e4:	e035      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6e6:	2a0c      	cmp	r2, #12
    e6e8:	d035      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6ea:	2a0b      	cmp	r2, #11
    e6ec:	d033      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6ee:	e030      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6f0:	2a0d      	cmp	r2, #13
    e6f2:	d030      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6f4:	e02d      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6f6:	2b0c      	cmp	r3, #12
    e6f8:	d92d      	bls.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e6fa:	e02a      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e6fc:	3a10      	subs	r2, #16
    e6fe:	2a0b      	cmp	r2, #11
    e700:	d929      	bls.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e702:	e026      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e704:	2b03      	cmp	r3, #3
    e706:	d926      	bls.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e708:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    e70c:	b308      	cbz	r0, e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e70e:	2a1b      	cmp	r2, #27
    e710:	d921      	bls.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e712:	e01e      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e714:	2a04      	cmp	r2, #4
    e716:	d01e      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e718:	e01b      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e71a:	2a06      	cmp	r2, #6
    e71c:	d01b      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e71e:	e018      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e720:	2a1c      	cmp	r2, #28
    e722:	d018      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e724:	2a1d      	cmp	r2, #29
    e726:	d016      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e728:	2a1e      	cmp	r2, #30
    e72a:	d014      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e72c:	e011      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e72e:	2a1f      	cmp	r2, #31
    e730:	d011      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e732:	2a20      	cmp	r2, #32
    e734:	d00f      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e736:	2a21      	cmp	r2, #33	; 0x21
    e738:	d00d      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e73a:	2a22      	cmp	r2, #34	; 0x22
    e73c:	d00b      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e73e:	2a23      	cmp	r2, #35	; 0x23
    e740:	d009      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e742:	2a24      	cmp	r2, #36	; 0x24
    e744:	d007      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e746:	2a27      	cmp	r2, #39	; 0x27
    e748:	d005      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e74a:	e002      	b.n	e752 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e74c:	e003      	b.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e74e:	2a0e      	cmp	r2, #14
    e750:	d001      	beq.n	e756 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e752:	2000      	movs	r0, #0
    e754:	bd10      	pop	{r4, pc}
    e756:	2001      	movs	r0, #1
    e758:	bd10      	pop	{r4, pc}

0000e75a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e75a:	280c      	cmp	r0, #12
    e75c:	d013      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e75e:	280b      	cmp	r0, #11
    e760:	d011      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e762:	280d      	cmp	r0, #13
    e764:	d00f      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e766:	281f      	cmp	r0, #31
    e768:	d00d      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e76a:	2820      	cmp	r0, #32
    e76c:	d00b      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e76e:	2821      	cmp	r0, #33	; 0x21
    e770:	d009      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e772:	2822      	cmp	r0, #34	; 0x22
    e774:	d007      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e776:	2823      	cmp	r0, #35	; 0x23
    e778:	d005      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e77a:	2824      	cmp	r0, #36	; 0x24
    e77c:	d003      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e77e:	2827      	cmp	r0, #39	; 0x27
    e780:	d001      	beq.n	e786 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e782:	2000      	movs	r0, #0
    e784:	4770      	bx	lr
    e786:	2001      	movs	r0, #1
    e788:	4770      	bx	lr

0000e78a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e78a:	f011 0f0c 	tst.w	r1, #12
    e78e:	d018      	beq.n	e7c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e790:	074a      	lsls	r2, r1, #29
    e792:	f44f 7116 	mov.w	r1, #600	; 0x258
    e796:	2a00      	cmp	r2, #0
    e798:	da02      	bge.n	e7a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e79a:	f04f 0210 	mov.w	r2, #16
    e79e:	e001      	b.n	e7a4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e7a0:	f04f 0240 	mov.w	r2, #64	; 0x40
    e7a4:	da01      	bge.n	e7aa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e7a6:	f04f 0196 	mov.w	r1, #150	; 0x96
    e7aa:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e7ae:	eba0 0301 	sub.w	r3, r0, r1
    e7b2:	4288      	cmp	r0, r1
    e7b4:	d903      	bls.n	e7be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e7b6:	fb93 f0f2 	sdiv	r0, r3, r2
    e7ba:	b280      	uxth	r0, r0
    e7bc:	4770      	bx	lr
    e7be:	2000      	movs	r0, #0
    e7c0:	4770      	bx	lr
    e7c2:	2902      	cmp	r1, #2
    e7c4:	d008      	beq.n	e7d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e7c6:	2870      	cmp	r0, #112	; 0x70
    e7c8:	d9f9      	bls.n	e7be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e7ca:	3870      	subs	r0, #112	; 0x70
    e7cc:	17c1      	asrs	r1, r0, #31
    e7ce:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e7d2:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e7d6:	4770      	bx	lr
    e7d8:	283c      	cmp	r0, #60	; 0x3c
    e7da:	d9f0      	bls.n	e7be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e7dc:	383c      	subs	r0, #60	; 0x3c
    e7de:	17c1      	asrs	r1, r0, #31
    e7e0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e7e4:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e7e8:	4770      	bx	lr

0000e7ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e7ea:	6809      	ldr	r1, [r1, #0]
    e7ec:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e7f0:	4770      	bx	lr

0000e7f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e7f2:	07c1      	lsls	r1, r0, #31
    e7f4:	d001      	beq.n	e7fa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e7f6:	2001      	movs	r0, #1
    e7f8:	4770      	bx	lr
    e7fa:	0781      	lsls	r1, r0, #30
    e7fc:	d501      	bpl.n	e802 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e7fe:	2002      	movs	r0, #2
    e800:	4770      	bx	lr
    e802:	0740      	lsls	r0, r0, #29
    e804:	d501      	bpl.n	e80a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e806:	2008      	movs	r0, #8
    e808:	4770      	bx	lr
    e80a:	2000      	movs	r0, #0
    e80c:	4770      	bx	lr

0000e80e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e80e:	b510      	push	{r4, lr}
    e810:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e814:	2901      	cmp	r1, #1
    e816:	d006      	beq.n	e826 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e818:	2902      	cmp	r1, #2
    e81a:	d005      	beq.n	e828 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e81c:	f240 31ba 	movw	r1, #954	; 0x3ba
    e820:	2029      	movs	r0, #41	; 0x29
    e822:	f7f6 f9f1 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e826:	b108      	cbz	r0, e82c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e828:	4610      	mov	r0, r2
    e82a:	bd10      	pop	{r4, pc}
    e82c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e830:	bd10      	pop	{r4, pc}

0000e832 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e836:	4607      	mov	r7, r0
    e838:	460e      	mov	r6, r1
    e83a:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e83e:	f7f4 f833 	bl	28a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e842:	b198      	cbz	r0, e86c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e844:	b31e      	cbz	r6, e88e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e846:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e84a:	1b40      	subs	r0, r0, r5
    e84c:	2300      	movs	r3, #0
    e84e:	eb61 0104 	sbc.w	r1, r1, r4
    e852:	461a      	mov	r2, r3
    e854:	1a1b      	subs	r3, r3, r0
    e856:	418a      	sbcs	r2, r1
    e858:	da19      	bge.n	e88e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e85a:	1c42      	adds	r2, r0, #1
    e85c:	f171 0100 	sbcs.w	r1, r1, #0
    e860:	db07      	blt.n	e872 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e862:	f240 2136 	movw	r1, #566	; 0x236
    e866:	2029      	movs	r0, #41	; 0x29
    e868:	f7f6 f9ce 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e86c:	f44f 710b 	mov.w	r1, #556	; 0x22c
    e870:	e7f9      	b.n	e866 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e872:	4430      	add	r0, r6
    e874:	1e40      	subs	r0, r0, #1
    e876:	fbb0 f1f6 	udiv	r1, r0, r6
    e87a:	fb01 f006 	mul.w	r0, r1, r6
    e87e:	1828      	adds	r0, r5, r0
    e880:	f144 0400 	adc.w	r4, r4, #0
    e884:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e888:	4608      	mov	r0, r1
    e88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e88e:	2000      	movs	r0, #0
    e890:	e7fb      	b.n	e88a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e892 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e892:	b530      	push	{r4, r5, lr}
    e894:	4613      	mov	r3, r2
    e896:	e006      	b.n	e8a6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e898:	18cc      	adds	r4, r1, r3
    e89a:	1ad5      	subs	r5, r2, r3
    e89c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e8a0:	1e5b      	subs	r3, r3, #1
    e8a2:	5544      	strb	r4, [r0, r5]
    e8a4:	b2db      	uxtb	r3, r3
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d1f6      	bne.n	e898 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e8aa:	bd30      	pop	{r4, r5, pc}

0000e8ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e8ac:	b538      	push	{r3, r4, r5, lr}
    e8ae:	4605      	mov	r5, r0
    e8b0:	460c      	mov	r4, r1
    e8b2:	4668      	mov	r0, sp
    e8b4:	f7fd fa4c 	bl	bd50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e8b8:	b310      	cbz	r0, e900 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e8ba:	f99d 0000 	ldrsb.w	r0, [sp]
    e8be:	7260      	strb	r0, [r4, #9]
    e8c0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    e8c4:	72a1      	strb	r1, [r4, #10]
    e8c6:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e8ca:	2200      	movs	r2, #0
    e8cc:	1a41      	subs	r1, r0, r1
    e8ce:	d500      	bpl.n	e8d2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e8d0:	4249      	negs	r1, r1
    e8d2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e8d6:	428b      	cmp	r3, r1
    e8d8:	dc10      	bgt.n	e8fc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e8da:	2bff      	cmp	r3, #255	; 0xff
    e8dc:	d00e      	beq.n	e8fc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e8de:	7b21      	ldrb	r1, [r4, #12]
    e8e0:	1c49      	adds	r1, r1, #1
    e8e2:	b2c9      	uxtb	r1, r1
    e8e4:	7321      	strb	r1, [r4, #12]
    e8e6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e8ea:	4299      	cmp	r1, r3
    e8ec:	d802      	bhi.n	e8f4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e8ee:	7ae1      	ldrb	r1, [r4, #11]
    e8f0:	297f      	cmp	r1, #127	; 0x7f
    e8f2:	d103      	bne.n	e8fc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e8f4:	72e0      	strb	r0, [r4, #11]
    e8f6:	2000      	movs	r0, #0
    e8f8:	7320      	strb	r0, [r4, #12]
    e8fa:	2201      	movs	r2, #1
    e8fc:	4610      	mov	r0, r2
    e8fe:	bd38      	pop	{r3, r4, r5, pc}
    e900:	207f      	movs	r0, #127	; 0x7f
    e902:	7260      	strb	r0, [r4, #9]
    e904:	2000      	movs	r0, #0
    e906:	bd38      	pop	{r3, r4, r5, pc}

0000e908 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e908:	2300      	movs	r3, #0
    e90a:	6303      	str	r3, [r0, #48]	; 0x30
    e90c:	8702      	strh	r2, [r0, #56]	; 0x38
    e90e:	f240 2371 	movw	r3, #625	; 0x271
    e912:	435a      	muls	r2, r3
    e914:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e918:	1e52      	subs	r2, r2, #1
    e91a:	fbb2 f1f1 	udiv	r1, r2, r1
    e91e:	6341      	str	r1, [r0, #52]	; 0x34
    e920:	4770      	bx	lr

0000e922 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e922:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e926:	4607      	mov	r7, r0
    e928:	4690      	mov	r8, r2
    e92a:	468b      	mov	fp, r1
    e92c:	2601      	movs	r6, #1
    e92e:	4608      	mov	r0, r1
    e930:	f000 f94a 	bl	ebc8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e934:	4682      	mov	sl, r0
    e936:	4658      	mov	r0, fp
    e938:	f000 f952 	bl	ebe0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e93c:	4681      	mov	r9, r0
    e93e:	f7ff ff58 	bl	e7f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e942:	4604      	mov	r4, r0
    e944:	4650      	mov	r0, sl
    e946:	f7ff ff54 	bl	e7f2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e94a:	4605      	mov	r5, r0
    e94c:	ea54 0005 	orrs.w	r0, r4, r5
    e950:	d100      	bne.n	e954 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e952:	2600      	movs	r6, #0
    e954:	f7fc fcae 	bl	b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e958:	ea10 0f09 	tst.w	r0, r9
    e95c:	d100      	bne.n	e960 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e95e:	2400      	movs	r4, #0
    e960:	f7fc fca8 	bl	b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e964:	ea10 0f0a 	tst.w	r0, sl
    e968:	d100      	bne.n	e96c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e96a:	2500      	movs	r5, #0
    e96c:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e970:	42a0      	cmp	r0, r4
    e972:	d100      	bne.n	e976 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e974:	2400      	movs	r4, #0
    e976:	f888 4000 	strb.w	r4, [r8]
    e97a:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e97e:	42a8      	cmp	r0, r5
    e980:	d100      	bne.n	e984 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e982:	2500      	movs	r5, #0
    e984:	f888 5001 	strb.w	r5, [r8, #1]
    e988:	b974      	cbnz	r4, e9a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e98a:	b96d      	cbnz	r5, e9a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e98c:	4658      	mov	r0, fp
    e98e:	f000 f925 	bl	ebdc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e992:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e996:	1a40      	subs	r0, r0, r1
    e998:	b200      	sxth	r0, r0
    e99a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e99e:	4288      	cmp	r0, r1
    e9a0:	dc01      	bgt.n	e9a6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e9a2:	2800      	cmp	r0, #0
    e9a4:	dc00      	bgt.n	e9a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e9a6:	2600      	movs	r6, #0
    e9a8:	4630      	mov	r0, r6
    e9aa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e9ae <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e9ae:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e9b2:	4348      	muls	r0, r1
    e9b4:	4770      	bx	lr

0000e9b6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e9b6:	f240 2171 	movw	r1, #625	; 0x271
    e9ba:	fb10 f001 	smulbb	r0, r0, r1
    e9be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9c2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e9c6:	4770      	bx	lr

0000e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e9c8:	b510      	push	{r4, lr}
    e9ca:	2300      	movs	r3, #0
    e9cc:	461a      	mov	r2, r3
    e9ce:	e003      	b.n	e9d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e9d0:	5c84      	ldrb	r4, [r0, r2]
    e9d2:	4323      	orrs	r3, r4
    e9d4:	1c52      	adds	r2, r2, #1
    e9d6:	b2d2      	uxtb	r2, r2
    e9d8:	428a      	cmp	r2, r1
    e9da:	d3f9      	bcc.n	e9d0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e9dc:	b10b      	cbz	r3, e9e2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e9de:	2000      	movs	r0, #0
    e9e0:	bd10      	pop	{r4, pc}
    e9e2:	2001      	movs	r0, #1
    e9e4:	bd10      	pop	{r4, pc}

0000e9e6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e9e6:	b510      	push	{r4, lr}
    e9e8:	4604      	mov	r4, r0
    e9ea:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e9ee:	b108      	cbz	r0, e9f4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e9f0:	2825      	cmp	r0, #37	; 0x25
    e9f2:	d901      	bls.n	e9f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e9f4:	2012      	movs	r0, #18
    e9f6:	bd10      	pop	{r4, pc}
    e9f8:	b12a      	cbz	r2, ea06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e9fa:	7da0      	ldrb	r0, [r4, #22]
    e9fc:	b128      	cbz	r0, ea0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e9fe:	2801      	cmp	r0, #1
    ea00:	d009      	beq.n	ea16 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ea02:	201f      	movs	r0, #31
    ea04:	bd10      	pop	{r4, pc}
    ea06:	2000      	movs	r0, #0
    ea08:	bd10      	pop	{r4, pc}
    ea0a:	4620      	mov	r0, r4
    ea0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea10:	4611      	mov	r1, r2
    ea12:	f7f8 b8f1 	b.w	6bf8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ea16:	88a2      	ldrh	r2, [r4, #4]
    ea18:	6949      	ldr	r1, [r1, #20]
    ea1a:	f104 0016 	add.w	r0, r4, #22
    ea1e:	f7f8 f897 	bl	6b50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ea22:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    ea26:	e7ee      	b.n	ea06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ea28 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ea28:	b530      	push	{r4, r5, lr}
    ea2a:	1c42      	adds	r2, r0, #1
    ea2c:	428a      	cmp	r2, r1
    ea2e:	d004      	beq.n	ea3a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ea30:	680a      	ldr	r2, [r1, #0]
    ea32:	f8c0 2001 	str.w	r2, [r0, #1]
    ea36:	7909      	ldrb	r1, [r1, #4]
    ea38:	7141      	strb	r1, [r0, #5]
    ea3a:	7941      	ldrb	r1, [r0, #5]
    ea3c:	f001 011f 	and.w	r1, r1, #31
    ea40:	7141      	strb	r1, [r0, #5]
    ea42:	2100      	movs	r1, #0
    ea44:	72c1      	strb	r1, [r0, #11]
    ea46:	1843      	adds	r3, r0, r1
    ea48:	1c49      	adds	r1, r1, #1
    ea4a:	785c      	ldrb	r4, [r3, #1]
    ea4c:	b2c9      	uxtb	r1, r1
    ea4e:	f004 0201 	and.w	r2, r4, #1
    ea52:	0864      	lsrs	r4, r4, #1
    ea54:	f004 0501 	and.w	r5, r4, #1
    ea58:	4415      	add	r5, r2
    ea5a:	0862      	lsrs	r2, r4, #1
    ea5c:	f002 0401 	and.w	r4, r2, #1
    ea60:	442c      	add	r4, r5
    ea62:	0852      	lsrs	r2, r2, #1
    ea64:	f002 0501 	and.w	r5, r2, #1
    ea68:	442c      	add	r4, r5
    ea6a:	0852      	lsrs	r2, r2, #1
    ea6c:	f002 0501 	and.w	r5, r2, #1
    ea70:	442c      	add	r4, r5
    ea72:	0852      	lsrs	r2, r2, #1
    ea74:	f002 0501 	and.w	r5, r2, #1
    ea78:	442c      	add	r4, r5
    ea7a:	0852      	lsrs	r2, r2, #1
    ea7c:	f002 0501 	and.w	r5, r2, #1
    ea80:	442c      	add	r4, r5
    ea82:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    ea86:	719a      	strb	r2, [r3, #6]
    ea88:	7ac3      	ldrb	r3, [r0, #11]
    ea8a:	2905      	cmp	r1, #5
    ea8c:	441a      	add	r2, r3
    ea8e:	72c2      	strb	r2, [r0, #11]
    ea90:	d3d9      	bcc.n	ea46 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    ea92:	bd30      	pop	{r4, r5, pc}
    ea94:	b570      	push	{r4, r5, r6, lr}
    ea96:	f8d0 201f 	ldr.w	r2, [r0, #31]
    ea9a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    ea9e:	f012 0fff 	tst.w	r2, #255	; 0xff
    eaa2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    eaa6:	d108      	bne.n	eaba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eaa8:	f3c2 2407 	ubfx	r4, r2, #8, #8
    eaac:	b92c      	cbnz	r4, eaba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eaae:	f3c2 4407 	ubfx	r4, r2, #16, #8
    eab2:	b914      	cbnz	r4, eaba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eab4:	0e12      	lsrs	r2, r2, #24
    eab6:	d100      	bne.n	eaba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    eab8:	b35b      	cbz	r3, eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eaba:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    eabe:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    eac2:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    eac6:	7d83      	ldrb	r3, [r0, #22]
    eac8:	b141      	cbz	r1, eadc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    eaca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    eace:	d905      	bls.n	eadc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ead0:	f640 5107 	movw	r1, #3335	; 0xd07
    ead4:	428a      	cmp	r2, r1
    ead6:	d801      	bhi.n	eadc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    ead8:	2101      	movs	r1, #1
    eada:	e000      	b.n	eade <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    eadc:	2100      	movs	r1, #0
    eade:	7846      	ldrb	r6, [r0, #1]
    eae0:	2e22      	cmp	r6, #34	; 0x22
    eae2:	d116      	bne.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eae4:	b959      	cbnz	r1, eafe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    eae6:	1f91      	subs	r1, r2, #6
    eae8:	f640 467a 	movw	r6, #3194	; 0xc7a
    eaec:	42b1      	cmp	r1, r6
    eaee:	d810      	bhi.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eaf0:	b17b      	cbz	r3, eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eaf2:	2b08      	cmp	r3, #8
    eaf4:	d80d      	bhi.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eaf6:	4293      	cmp	r3, r2
    eaf8:	d20b      	bcs.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eafa:	4294      	cmp	r4, r2
    eafc:	d809      	bhi.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eafe:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    eb02:	d206      	bcs.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eb04:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    eb08:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    eb0c:	d801      	bhi.n	eb12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    eb0e:	2001      	movs	r0, #1
    eb10:	bd70      	pop	{r4, r5, r6, pc}
    eb12:	2000      	movs	r0, #0
    eb14:	bd70      	pop	{r4, r5, r6, pc}

0000eb16 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    eb16:	b570      	push	{r4, r5, r6, lr}
    eb18:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    eb1c:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    eb20:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    eb24:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    eb28:	88c0      	ldrh	r0, [r0, #6]
    eb2a:	b131      	cbz	r1, eb3a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    eb2c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    eb30:	d903      	bls.n	eb3a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    eb32:	f640 5107 	movw	r1, #3335	; 0xd07
    eb36:	428a      	cmp	r2, r1
    eb38:	d90b      	bls.n	eb52 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    eb3a:	1f91      	subs	r1, r2, #6
    eb3c:	f640 467a 	movw	r6, #3194	; 0xc7a
    eb40:	42b1      	cmp	r1, r6
    eb42:	d80e      	bhi.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb44:	b16b      	cbz	r3, eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb46:	2b08      	cmp	r3, #8
    eb48:	d80b      	bhi.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb4a:	4293      	cmp	r3, r2
    eb4c:	d209      	bcs.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb4e:	4294      	cmp	r4, r2
    eb50:	d807      	bhi.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb52:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    eb56:	d204      	bcs.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb58:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    eb5c:	d801      	bhi.n	eb62 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    eb5e:	2001      	movs	r0, #1
    eb60:	bd70      	pop	{r4, r5, r6, pc}
    eb62:	2000      	movs	r0, #0
    eb64:	bd70      	pop	{r4, r5, r6, pc}

0000eb66 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    eb66:	6842      	ldr	r2, [r0, #4]
    eb68:	600a      	str	r2, [r1, #0]
    eb6a:	7a00      	ldrb	r0, [r0, #8]
    eb6c:	7108      	strb	r0, [r1, #4]
    eb6e:	4770      	bx	lr

0000eb70 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    eb70:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    eb74:	4770      	bx	lr

0000eb76 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    eb76:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    eb7a:	4770      	bx	lr

0000eb7c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    eb7c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    eb80:	4770      	bx	lr

0000eb82 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    eb82:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    eb86:	4770      	bx	lr

0000eb88 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    eb88:	8980      	ldrh	r0, [r0, #12]
    eb8a:	8008      	strh	r0, [r1, #0]
    eb8c:	4770      	bx	lr

0000eb8e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    eb8e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    eb92:	6008      	str	r0, [r1, #0]
    eb94:	4770      	bx	lr

0000eb96 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    eb96:	6842      	ldr	r2, [r0, #4]
    eb98:	600a      	str	r2, [r1, #0]
    eb9a:	6880      	ldr	r0, [r0, #8]
    eb9c:	6048      	str	r0, [r1, #4]
    eb9e:	4770      	bx	lr

0000eba0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    eba0:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    eba4:	600a      	str	r2, [r1, #0]
    eba6:	6840      	ldr	r0, [r0, #4]
    eba8:	6048      	str	r0, [r1, #4]
    ebaa:	4770      	bx	lr

0000ebac <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    ebac:	6842      	ldr	r2, [r0, #4]
    ebae:	600a      	str	r2, [r1, #0]
    ebb0:	6880      	ldr	r0, [r0, #8]
    ebb2:	6048      	str	r0, [r1, #4]
    ebb4:	4770      	bx	lr

0000ebb6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    ebb6:	6842      	ldr	r2, [r0, #4]
    ebb8:	600a      	str	r2, [r1, #0]
    ebba:	6880      	ldr	r0, [r0, #8]
    ebbc:	6048      	str	r0, [r1, #4]
    ebbe:	4770      	bx	lr

0000ebc0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ebc0:	7800      	ldrb	r0, [r0, #0]
    ebc2:	f000 0003 	and.w	r0, r0, #3
    ebc6:	4770      	bx	lr

0000ebc8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    ebc8:	7900      	ldrb	r0, [r0, #4]
    ebca:	4770      	bx	lr

0000ebcc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ebcc:	8880      	ldrh	r0, [r0, #4]
    ebce:	4770      	bx	lr

0000ebd0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    ebd0:	88c0      	ldrh	r0, [r0, #6]
    ebd2:	4770      	bx	lr

0000ebd4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    ebd4:	8900      	ldrh	r0, [r0, #8]
    ebd6:	4770      	bx	lr

0000ebd8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    ebd8:	8940      	ldrh	r0, [r0, #10]
    ebda:	4770      	bx	lr

0000ebdc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    ebdc:	88c0      	ldrh	r0, [r0, #6]
    ebde:	4770      	bx	lr

0000ebe0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    ebe0:	7940      	ldrb	r0, [r0, #5]
    ebe2:	4770      	bx	lr

0000ebe4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ebe4:	7900      	ldrb	r0, [r0, #4]
    ebe6:	4770      	bx	lr

0000ebe8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ebe8:	7900      	ldrb	r0, [r0, #4]
    ebea:	4770      	bx	lr

0000ebec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    ebec:	8901      	ldrh	r1, [r0, #8]
    ebee:	291b      	cmp	r1, #27
    ebf0:	d30c      	bcc.n	ec0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ebf2:	8941      	ldrh	r1, [r0, #10]
    ebf4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ebf8:	4291      	cmp	r1, r2
    ebfa:	d307      	bcc.n	ec0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ebfc:	8881      	ldrh	r1, [r0, #4]
    ebfe:	291b      	cmp	r1, #27
    ec00:	d304      	bcc.n	ec0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ec02:	88c0      	ldrh	r0, [r0, #6]
    ec04:	4290      	cmp	r0, r2
    ec06:	d301      	bcc.n	ec0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ec08:	2001      	movs	r0, #1
    ec0a:	4770      	bx	lr
    ec0c:	2000      	movs	r0, #0
    ec0e:	4770      	bx	lr

0000ec10 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ec10:	b510      	push	{r4, lr}
    ec12:	29fb      	cmp	r1, #251	; 0xfb
    ec14:	d904      	bls.n	ec20 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ec16:	f240 51fe 	movw	r1, #1534	; 0x5fe
    ec1a:	202a      	movs	r0, #42	; 0x2a
    ec1c:	f7f5 fff4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec20:	7041      	strb	r1, [r0, #1]
    ec22:	bd10      	pop	{r4, pc}

0000ec24 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ec24:	7901      	ldrb	r1, [r0, #4]
    ec26:	0749      	lsls	r1, r1, #29
    ec28:	d004      	beq.n	ec34 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ec2a:	7940      	ldrb	r0, [r0, #5]
    ec2c:	0740      	lsls	r0, r0, #29
    ec2e:	d001      	beq.n	ec34 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ec30:	2001      	movs	r0, #1
    ec32:	4770      	bx	lr
    ec34:	2000      	movs	r0, #0
    ec36:	4770      	bx	lr

0000ec38 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    ec38:	7901      	ldrb	r1, [r0, #4]
    ec3a:	7940      	ldrb	r0, [r0, #5]
    ec3c:	f001 0107 	and.w	r1, r1, #7
    ec40:	1e4a      	subs	r2, r1, #1
    ec42:	f000 0007 	and.w	r0, r0, #7
    ec46:	4011      	ands	r1, r2
    ec48:	1e42      	subs	r2, r0, #1
    ec4a:	4010      	ands	r0, r2
    ec4c:	4301      	orrs	r1, r0
    ec4e:	d001      	beq.n	ec54 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr
    ec54:	2001      	movs	r0, #1
    ec56:	4770      	bx	lr

0000ec58 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ec58:	7900      	ldrb	r0, [r0, #4]
    ec5a:	4770      	bx	lr

0000ec5c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    ec5c:	7940      	ldrb	r0, [r0, #5]
    ec5e:	4770      	bx	lr

0000ec60 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    ec60:	7101      	strb	r1, [r0, #4]
    ec62:	4770      	bx	lr

0000ec64 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    ec64:	7141      	strb	r1, [r0, #5]
    ec66:	4770      	bx	lr

0000ec68 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    ec68:	b510      	push	{r4, lr}
    ec6a:	2a1b      	cmp	r2, #27
    ec6c:	d904      	bls.n	ec78 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    ec6e:	f240 4127 	movw	r1, #1063	; 0x427
    ec72:	202a      	movs	r0, #42	; 0x2a
    ec74:	f7f5 ffc8 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec78:	7042      	strb	r2, [r0, #1]
    ec7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec7e:	1cc0      	adds	r0, r0, #3
    ec80:	f7fe ba24 	b.w	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000ec84 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    ec84:	6809      	ldr	r1, [r1, #0]
    ec86:	60c1      	str	r1, [r0, #12]
    ec88:	4770      	bx	lr

0000ec8a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    ec8a:	680a      	ldr	r2, [r1, #0]
    ec8c:	6042      	str	r2, [r0, #4]
    ec8e:	6849      	ldr	r1, [r1, #4]
    ec90:	6081      	str	r1, [r0, #8]
    ec92:	4770      	bx	lr

0000ec94 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    ec94:	680a      	ldr	r2, [r1, #0]
    ec96:	6042      	str	r2, [r0, #4]
    ec98:	6849      	ldr	r1, [r1, #4]
    ec9a:	6081      	str	r1, [r0, #8]
    ec9c:	4770      	bx	lr

0000ec9e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    ec9e:	680a      	ldr	r2, [r1, #0]
    eca0:	6042      	str	r2, [r0, #4]
    eca2:	6849      	ldr	r1, [r1, #4]
    eca4:	6081      	str	r1, [r0, #8]
    eca6:	4770      	bx	lr

0000eca8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    eca8:	7802      	ldrb	r2, [r0, #0]
    ecaa:	f001 0103 	and.w	r1, r1, #3
    ecae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ecb2:	430a      	orrs	r2, r1
    ecb4:	7002      	strb	r2, [r0, #0]
    ecb6:	4770      	bx	lr

0000ecb8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    ecb8:	7101      	strb	r1, [r0, #4]
    ecba:	0a09      	lsrs	r1, r1, #8
    ecbc:	7141      	strb	r1, [r0, #5]
    ecbe:	4770      	bx	lr

0000ecc0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    ecc0:	7181      	strb	r1, [r0, #6]
    ecc2:	0a09      	lsrs	r1, r1, #8
    ecc4:	71c1      	strb	r1, [r0, #7]
    ecc6:	4770      	bx	lr

0000ecc8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    ecc8:	7201      	strb	r1, [r0, #8]
    ecca:	0a09      	lsrs	r1, r1, #8
    eccc:	7241      	strb	r1, [r0, #9]
    ecce:	4770      	bx	lr

0000ecd0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    ecd0:	7281      	strb	r1, [r0, #10]
    ecd2:	0a09      	lsrs	r1, r1, #8
    ecd4:	72c1      	strb	r1, [r0, #11]
    ecd6:	4770      	bx	lr

0000ecd8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    ecd8:	7802      	ldrb	r2, [r0, #0]
    ecda:	f002 020f 	and.w	r2, r2, #15
    ecde:	2a03      	cmp	r2, #3
    ece0:	d003      	beq.n	ecea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    ece2:	2a05      	cmp	r2, #5
    ece4:	d104      	bne.n	ecf0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    ece6:	f7ff bed5 	b.w	ea94 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    ecea:	7840      	ldrb	r0, [r0, #1]
    ecec:	280c      	cmp	r0, #12
    ecee:	d001      	beq.n	ecf4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    ecf0:	2000      	movs	r0, #0
    ecf2:	4770      	bx	lr
    ecf4:	2001      	movs	r0, #1
    ecf6:	4770      	bx	lr

0000ecf8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    ecf8:	b570      	push	{r4, r5, r6, lr}
    ecfa:	4614      	mov	r4, r2
    ecfc:	4605      	mov	r5, r0
    ecfe:	2a1f      	cmp	r2, #31
    ed00:	d903      	bls.n	ed0a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    ed02:	21b5      	movs	r1, #181	; 0xb5
    ed04:	202a      	movs	r0, #42	; 0x2a
    ed06:	f7f5 ff7f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed0a:	f105 0009 	add.w	r0, r5, #9
    ed0e:	f7fe f9dd 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed12:	1da4      	adds	r4, r4, #6
    ed14:	706c      	strb	r4, [r5, #1]
    ed16:	bd70      	pop	{r4, r5, r6, pc}

0000ed18 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ed18:	b510      	push	{r4, lr}
    ed1a:	7802      	ldrb	r2, [r0, #0]
    ed1c:	f001 030f 	and.w	r3, r1, #15
    ed20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ed24:	431a      	orrs	r2, r3
    ed26:	7002      	strb	r2, [r0, #0]
    ed28:	2907      	cmp	r1, #7
    ed2a:	d20c      	bcs.n	ed46 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    ed2c:	e8df f001 	tbb	[pc, r1]
    ed30:	06040604 	.word	0x06040604
    ed34:	00040804 	.word	0x00040804
    ed38:	2106      	movs	r1, #6
    ed3a:	e002      	b.n	ed42 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ed3c:	210c      	movs	r1, #12
    ed3e:	e000      	b.n	ed42 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ed40:	2122      	movs	r1, #34	; 0x22
    ed42:	7041      	strb	r1, [r0, #1]
    ed44:	bd10      	pop	{r4, pc}
    ed46:	216f      	movs	r1, #111	; 0x6f
    ed48:	202a      	movs	r0, #42	; 0x2a
    ed4a:	f7f5 ff5d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ed4e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    ed4e:	680a      	ldr	r2, [r1, #0]
    ed50:	f840 2f09 	str.w	r2, [r0, #9]!
    ed54:	8889      	ldrh	r1, [r1, #4]
    ed56:	8081      	strh	r1, [r0, #4]
    ed58:	4770      	bx	lr

0000ed5a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ed5a:	7802      	ldrb	r2, [r0, #0]
    ed5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ed60:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    ed64:	7002      	strb	r2, [r0, #0]
    ed66:	4770      	bx	lr

0000ed68 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    ed68:	680a      	ldr	r2, [r1, #0]
    ed6a:	f840 2f03 	str.w	r2, [r0, #3]!
    ed6e:	8889      	ldrh	r1, [r1, #4]
    ed70:	8081      	strh	r1, [r0, #4]
    ed72:	4770      	bx	lr

0000ed74 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    ed74:	7802      	ldrb	r2, [r0, #0]
    ed76:	2340      	movs	r3, #64	; 0x40
    ed78:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ed7c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ed80:	430a      	orrs	r2, r1
    ed82:	7002      	strb	r2, [r0, #0]
    ed84:	4770      	bx	lr

0000ed86 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    ed86:	b570      	push	{r4, r5, r6, lr}
    ed88:	4614      	mov	r4, r2
    ed8a:	4605      	mov	r5, r0
    ed8c:	2a1f      	cmp	r2, #31
    ed8e:	d903      	bls.n	ed98 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    ed90:	21d7      	movs	r1, #215	; 0xd7
    ed92:	202a      	movs	r0, #42	; 0x2a
    ed94:	f7f5 ff38 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed98:	f105 0009 	add.w	r0, r5, #9
    ed9c:	f7fe f996 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eda0:	1da4      	adds	r4, r4, #6
    eda2:	706c      	strb	r4, [r5, #1]
    eda4:	bd70      	pop	{r4, r5, r6, pc}

0000eda6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    eda6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    edaa:	4604      	mov	r4, r0
    edac:	2000      	movs	r0, #0
    edae:	f7f6 f921 	bl	4ff4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    edb2:	2600      	movs	r6, #0
    edb4:	4605      	mov	r5, r0
    edb6:	4637      	mov	r7, r6
    edb8:	e00e      	b.n	edd8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    edba:	8820      	ldrh	r0, [r4, #0]
    edbc:	1c40      	adds	r0, r0, #1
    edbe:	b280      	uxth	r0, r0
    edc0:	8020      	strh	r0, [r4, #0]
    edc2:	42a8      	cmp	r0, r5
    edc4:	d300      	bcc.n	edc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    edc6:	8027      	strh	r7, [r4, #0]
    edc8:	8820      	ldrh	r0, [r4, #0]
    edca:	4669      	mov	r1, sp
    edcc:	f7ff fc4d 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    edd0:	2800      	cmp	r0, #0
    edd2:	d007      	beq.n	ede4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    edd4:	1c76      	adds	r6, r6, #1
    edd6:	b2f6      	uxtb	r6, r6
    edd8:	42ae      	cmp	r6, r5
    edda:	d3ee      	bcc.n	edba <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    eddc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ede0:	8020      	strh	r0, [r4, #0]
    ede2:	2012      	movs	r0, #18
    ede4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000ede8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    ede8:	6841      	ldr	r1, [r0, #4]
    edea:	2200      	movs	r2, #0
    edec:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    edf0:	2b00      	cmp	r3, #0
    edf2:	d004      	beq.n	edfe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    edf4:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    edf8:	6840      	ldr	r0, [r0, #4]
    edfa:	f000 bd08 	b.w	f80e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    edfe:	4770      	bx	lr

0000ee00 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ee00:	b510      	push	{r4, lr}
    ee02:	7901      	ldrb	r1, [r0, #4]
    ee04:	b119      	cbz	r1, ee0e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ee06:	2901      	cmp	r1, #1
    ee08:	d006      	beq.n	ee18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ee0a:	2000      	movs	r0, #0
    ee0c:	bd10      	pop	{r4, pc}
    ee0e:	8842      	ldrh	r2, [r0, #2]
    ee10:	6883      	ldr	r3, [r0, #8]
    ee12:	8800      	ldrh	r0, [r0, #0]
    ee14:	2102      	movs	r1, #2
    ee16:	e003      	b.n	ee20 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ee18:	8842      	ldrh	r2, [r0, #2]
    ee1a:	6883      	ldr	r3, [r0, #8]
    ee1c:	8800      	ldrh	r0, [r0, #0]
    ee1e:	2101      	movs	r1, #1
    ee20:	f7f7 ff9c 	bl	6d5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    ee24:	b908      	cbnz	r0, ee2a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ee26:	f7f7 ffef 	bl	6e08 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ee2a:	2001      	movs	r0, #1
    ee2c:	bd10      	pop	{r4, pc}
    ee2e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ee32:	460e      	mov	r6, r1
    ee34:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ee38:	4617      	mov	r7, r2
    ee3a:	39ff      	subs	r1, #255	; 0xff
    ee3c:	d014      	beq.n	ee68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ee3e:	8030      	strh	r0, [r6, #0]
    ee40:	2100      	movs	r1, #0
    ee42:	7171      	strb	r1, [r6, #5]
    ee44:	f7f6 fb08 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ee48:	4604      	mov	r4, r0
    ee4a:	f7fe ff94 	bl	dd76 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ee4e:	0005      	movs	r5, r0
    ee50:	d00a      	beq.n	ee68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ee52:	4620      	mov	r0, r4
    ee54:	4629      	mov	r1, r5
    ee56:	aa01      	add	r2, sp, #4
    ee58:	f7fe ffb0 	bl	ddbc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ee5c:	8070      	strh	r0, [r6, #2]
    ee5e:	b130      	cbz	r0, ee6e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    ee60:	28fb      	cmp	r0, #251	; 0xfb
    ee62:	d906      	bls.n	ee72 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    ee64:	21ae      	movs	r1, #174	; 0xae
    ee66:	e026      	b.n	eeb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ee68:	2000      	movs	r0, #0
    ee6a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ee6e:	21ad      	movs	r1, #173	; 0xad
    ee70:	e021      	b.n	eeb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ee72:	9801      	ldr	r0, [sp, #4]
    ee74:	f7ff fea4 	bl	ebc0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    ee78:	2801      	cmp	r0, #1
    ee7a:	d003      	beq.n	ee84 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ee7c:	2802      	cmp	r0, #2
    ee7e:	d001      	beq.n	ee84 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ee80:	21bd      	movs	r1, #189	; 0xbd
    ee82:	e018      	b.n	eeb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ee84:	7130      	strb	r0, [r6, #4]
    ee86:	4629      	mov	r1, r5
    ee88:	8873      	ldrh	r3, [r6, #2]
    ee8a:	2503      	movs	r5, #3
    ee8c:	4620      	mov	r0, r4
    ee8e:	463a      	mov	r2, r7
    ee90:	9500      	str	r5, [sp, #0]
    ee92:	f7fe fe70 	bl	db76 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    ee96:	4620      	mov	r0, r4
    ee98:	60b7      	str	r7, [r6, #8]
    ee9a:	f7fe ff30 	bl	dcfe <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ee9e:	b138      	cbz	r0, eeb0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    eea0:	2100      	movs	r1, #0
    eea2:	4620      	mov	r0, r4
    eea4:	460a      	mov	r2, r1
    eea6:	f7ff f867 	bl	df78 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    eeaa:	b118      	cbz	r0, eeb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    eeac:	2001      	movs	r0, #1
    eeae:	e7dc      	b.n	ee6a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    eeb0:	21cd      	movs	r1, #205	; 0xcd
    eeb2:	e000      	b.n	eeb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    eeb4:	21d2      	movs	r1, #210	; 0xd2
    eeb6:	202b      	movs	r0, #43	; 0x2b
    eeb8:	f7f5 fea6 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eebc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    eebc:	f7f8 b9a2 	b.w	7204 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eec4:	460c      	mov	r4, r1
    eec6:	b180      	cbz	r0, eeea <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    eec8:	2700      	movs	r7, #0
    eeca:	4606      	mov	r6, r0
    eecc:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    eed0:	2a10      	cmp	r2, #16
    eed2:	d060      	beq.n	ef96 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    eed4:	dc0c      	bgt.n	eef0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    eed6:	f1a2 0205 	sub.w	r2, r2, #5
    eeda:	2a08      	cmp	r2, #8
    eedc:	d210      	bcs.n	ef00 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    eede:	e8df f002 	tbb	[pc, r2]
    eee2:	124e      	.short	0x124e
    eee4:	20330f0f 	.word	0x20330f0f
    eee8:	540f      	.short	0x540f
    eeea:	f44f 7112 	mov.w	r1, #584	; 0x248
    eeee:	e034      	b.n	ef5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    eef0:	2a11      	cmp	r2, #17
    eef2:	d072      	beq.n	efda <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    eef4:	2a18      	cmp	r2, #24
    eef6:	d068      	beq.n	efca <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    eef8:	2a1a      	cmp	r2, #26
    eefa:	d057      	beq.n	efac <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    eefc:	2a1b      	cmp	r2, #27
    eefe:	d060      	beq.n	efc2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    ef00:	f240 2175 	movw	r1, #629	; 0x275
    ef04:	e029      	b.n	ef5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ef06:	7067      	strb	r7, [r4, #1]
    ef08:	2007      	movs	r0, #7
    ef0a:	7020      	strb	r0, [r4, #0]
    ef0c:	8537      	strh	r7, [r6, #40]	; 0x28
    ef0e:	f855 0f80 	ldr.w	r0, [r5, #128]!
    ef12:	6060      	str	r0, [r4, #4]
    ef14:	6868      	ldr	r0, [r5, #4]
    ef16:	60a0      	str	r0, [r4, #8]
    ef18:	8928      	ldrh	r0, [r5, #8]
    ef1a:	81a0      	strh	r0, [r4, #12]
    ef1c:	7127      	strb	r7, [r4, #4]
    ef1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef22:	8830      	ldrh	r0, [r6, #0]
    ef24:	f7f6 fa98 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ef28:	4680      	mov	r8, r0
    ef2a:	f7fe ffbc 	bl	dea6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ef2e:	b110      	cbz	r0, ef36 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    ef30:	f240 11b9 	movw	r1, #441	; 0x1b9
    ef34:	e011      	b.n	ef5a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ef36:	7067      	strb	r7, [r4, #1]
    ef38:	200c      	movs	r0, #12
    ef3a:	7020      	strb	r0, [r4, #0]
    ef3c:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    ef40:	7120      	strb	r0, [r4, #4]
    ef42:	8830      	ldrh	r0, [r6, #0]
    ef44:	80e0      	strh	r0, [r4, #6]
    ef46:	e015      	b.n	ef74 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    ef48:	8830      	ldrh	r0, [r6, #0]
    ef4a:	f7f6 fa85 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ef4e:	4680      	mov	r8, r0
    ef50:	f7fe ffa9 	bl	dea6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ef54:	b120      	cbz	r0, ef60 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    ef56:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    ef5a:	2010      	movs	r0, #16
    ef5c:	f7f5 fe54 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef60:	7067      	strb	r7, [r4, #1]
    ef62:	200b      	movs	r0, #11
    ef64:	7020      	strb	r0, [r4, #0]
    ef66:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    ef6a:	7120      	strb	r0, [r4, #4]
    ef6c:	8830      	ldrh	r0, [r6, #0]
    ef6e:	80e0      	strh	r0, [r4, #6]
    ef70:	7928      	ldrb	r0, [r5, #4]
    ef72:	7220      	strb	r0, [r4, #8]
    ef74:	4640      	mov	r0, r8
    ef76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef7a:	f7fe bfaf 	b.w	dedc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    ef7e:	7067      	strb	r7, [r4, #1]
    ef80:	2006      	movs	r0, #6
    ef82:	7020      	strb	r0, [r4, #0]
    ef84:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    ef88:	e00a      	b.n	efa0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    ef8a:	7067      	strb	r7, [r4, #1]
    ef8c:	200e      	movs	r0, #14
    ef8e:	7020      	strb	r0, [r4, #0]
    ef90:	8830      	ldrh	r0, [r6, #0]
    ef92:	8088      	strh	r0, [r1, #4]
    ef94:	e7c3      	b.n	ef1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    ef96:	7067      	strb	r7, [r4, #1]
    ef98:	2012      	movs	r0, #18
    ef9a:	7020      	strb	r0, [r4, #0]
    ef9c:	f855 0f22 	ldr.w	r0, [r5, #34]!
    efa0:	6060      	str	r0, [r4, #4]
    efa2:	6868      	ldr	r0, [r5, #4]
    efa4:	60a0      	str	r0, [r4, #8]
    efa6:	68a8      	ldr	r0, [r5, #8]
    efa8:	60e0      	str	r0, [r4, #12]
    efaa:	e7b8      	b.n	ef1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    efac:	7067      	strb	r7, [r4, #1]
    efae:	2018      	movs	r0, #24
    efb0:	7020      	strb	r0, [r4, #0]
    efb2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    efb4:	6060      	str	r0, [r4, #4]
    efb6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    efb8:	60a0      	str	r0, [r4, #8]
    efba:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    efbe:	81a0      	strh	r0, [r4, #12]
    efc0:	e7ad      	b.n	ef1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    efc2:	2019      	movs	r0, #25
    efc4:	7020      	strb	r0, [r4, #0]
    efc6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    efc8:	e004      	b.n	efd4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    efca:	7067      	strb	r7, [r4, #1]
    efcc:	2016      	movs	r0, #22
    efce:	7020      	strb	r0, [r4, #0]
    efd0:	f8d5 000a 	ldr.w	r0, [r5, #10]
    efd4:	6048      	str	r0, [r1, #4]
    efd6:	e7a2      	b.n	ef1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    efd8:	e7ff      	b.n	efda <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    efda:	7067      	strb	r7, [r4, #1]
    efdc:	2013      	movs	r0, #19
    efde:	7020      	strb	r0, [r4, #0]
    efe0:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    efe4:	6060      	str	r0, [r4, #4]
    efe6:	88a8      	ldrh	r0, [r5, #4]
    efe8:	8120      	strh	r0, [r4, #8]
    efea:	e798      	b.n	ef1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000efec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    efec:	b4f0      	push	{r4, r5, r6, r7}
    efee:	8150      	strh	r0, [r2, #10]
    eff0:	890d      	ldrh	r5, [r1, #8]
    eff2:	4614      	mov	r4, r2
    eff4:	8195      	strh	r5, [r2, #12]
    eff6:	898a      	ldrh	r2, [r1, #12]
    eff8:	81e2      	strh	r2, [r4, #14]
    effa:	8948      	ldrh	r0, [r1, #10]
    effc:	8220      	strh	r0, [r4, #16]
    effe:	89ce      	ldrh	r6, [r1, #14]
    f000:	8266      	strh	r6, [r4, #18]
    f002:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f004:	42b7      	cmp	r7, r6
    f006:	d108      	bne.n	f01a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f008:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f00a:	4286      	cmp	r6, r0
    f00c:	d105      	bne.n	f01a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f00e:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f010:	4296      	cmp	r6, r2
    f012:	d102      	bne.n	f01a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f014:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f016:	42aa      	cmp	r2, r5
    f018:	d001      	beq.n	f01e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f01a:	2201      	movs	r2, #1
    f01c:	e000      	b.n	f020 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f01e:	2200      	movs	r2, #0
    f020:	7522      	strb	r2, [r4, #20]
    f022:	8548      	strh	r0, [r1, #42]	; 0x2a
    f024:	8a60      	ldrh	r0, [r4, #18]
    f026:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f028:	89a0      	ldrh	r0, [r4, #12]
    f02a:	8588      	strh	r0, [r1, #44]	; 0x2c
    f02c:	89e0      	ldrh	r0, [r4, #14]
    f02e:	8608      	strh	r0, [r1, #48]	; 0x30
    f030:	4620      	mov	r0, r4
    f032:	bcf0      	pop	{r4, r5, r6, r7}
    f034:	2210      	movs	r2, #16
    f036:	4619      	mov	r1, r3
    f038:	f7f7 beec 	b.w	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000f03c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f03c:	b510      	push	{r4, lr}
    f03e:	888c      	ldrh	r4, [r1, #4]
    f040:	890a      	ldrh	r2, [r1, #8]
    f042:	884b      	ldrh	r3, [r1, #2]
    f044:	88c9      	ldrh	r1, [r1, #6]
    f046:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f04a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f04e:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f052:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f056:	bd10      	pop	{r4, pc}

0000f058 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f058:	b570      	push	{r4, r5, r6, lr}
    f05a:	4615      	mov	r5, r2
    f05c:	460c      	mov	r4, r1
    f05e:	f000 f8ce 	bl	f1fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f062:	3096      	adds	r0, #150	; 0x96
    f064:	4428      	add	r0, r5
    f066:	42a0      	cmp	r0, r4
    f068:	d801      	bhi.n	f06e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f06a:	1a20      	subs	r0, r4, r0
    f06c:	bd70      	pop	{r4, r5, r6, pc}
    f06e:	2000      	movs	r0, #0
    f070:	bd70      	pop	{r4, r5, r6, pc}

0000f072 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f076:	4604      	mov	r4, r0
    f078:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f07a:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f07c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f080:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f084:	4285      	cmp	r5, r0
    f086:	d300      	bcc.n	f08a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f088:	4605      	mov	r5, r0
    f08a:	4620      	mov	r0, r4
    f08c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f090:	f000 f8a5 	bl	f1de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f094:	4601      	mov	r1, r0
    f096:	8765      	strh	r5, [r4, #58]	; 0x3a
    f098:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f09a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f09e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f0a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f0a6:	4680      	mov	r8, r0
    f0a8:	42aa      	cmp	r2, r5
    f0aa:	d200      	bcs.n	f0ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f0ac:	462a      	mov	r2, r5
    f0ae:	428b      	cmp	r3, r1
    f0b0:	d200      	bcs.n	f0b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f0b2:	460b      	mov	r3, r1
    f0b4:	8202      	strh	r2, [r0, #16]
    f0b6:	f8a8 3012 	strh.w	r3, [r8, #18]
    f0ba:	42bd      	cmp	r5, r7
    f0bc:	d101      	bne.n	f0c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f0be:	42b1      	cmp	r1, r6
    f0c0:	d001      	beq.n	f0c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f0c2:	2001      	movs	r0, #1
    f0c4:	e000      	b.n	f0c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f0c6:	2000      	movs	r0, #0
    f0c8:	4681      	mov	r9, r0
    f0ca:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f0ce:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f0d2:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f0d4:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f0d6:	4285      	cmp	r5, r0
    f0d8:	d300      	bcc.n	f0dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f0da:	4605      	mov	r5, r0
    f0dc:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f0e0:	4620      	mov	r0, r4
    f0e2:	f000 f884 	bl	f1ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f0e6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f0ea:	2902      	cmp	r1, #2
    f0ec:	d108      	bne.n	f100 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f0ee:	42af      	cmp	r7, r5
    f0f0:	d200      	bcs.n	f0f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f0f2:	463d      	mov	r5, r7
    f0f4:	4286      	cmp	r6, r0
    f0f6:	d200      	bcs.n	f0fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f0f8:	4630      	mov	r0, r6
    f0fa:	2100      	movs	r1, #0
    f0fc:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f100:	f8a8 5008 	strh.w	r5, [r8, #8]
    f104:	f8a8 000c 	strh.w	r0, [r8, #12]
    f108:	42bd      	cmp	r5, r7
    f10a:	d101      	bne.n	f110 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f10c:	42b0      	cmp	r0, r6
    f10e:	d001      	beq.n	f114 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f110:	2001      	movs	r0, #1
    f112:	e000      	b.n	f116 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f114:	2000      	movs	r0, #0
    f116:	ea40 0009 	orr.w	r0, r0, r9
    f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f11e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f11e:	6840      	ldr	r0, [r0, #4]
    f120:	4770      	bx	lr

0000f122 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f126:	4616      	mov	r6, r2
    f128:	460f      	mov	r7, r1
    f12a:	4604      	mov	r4, r0
    f12c:	f000 f867 	bl	f1fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f130:	4605      	mov	r5, r0
    f132:	463a      	mov	r2, r7
    f134:	6921      	ldr	r1, [r4, #16]
    f136:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f138:	f000 f84c 	bl	f1d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f13c:	19a9      	adds	r1, r5, r6
    f13e:	4281      	cmp	r1, r0
    f140:	d300      	bcc.n	f144 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f142:	4608      	mov	r0, r1
    f144:	6360      	str	r0, [r4, #52]	; 0x34
    f146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f14a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f14a:	221b      	movs	r2, #27
    f14c:	8402      	strh	r2, [r0, #32]
    f14e:	8382      	strh	r2, [r0, #28]
    f150:	82c2      	strh	r2, [r0, #22]
    f152:	8282      	strh	r2, [r0, #20]
    f154:	8142      	strh	r2, [r0, #10]
    f156:	8202      	strh	r2, [r0, #16]
    f158:	8102      	strh	r2, [r0, #8]
    f15a:	8542      	strh	r2, [r0, #42]	; 0x2a
    f15c:	8582      	strh	r2, [r0, #44]	; 0x2c
    f15e:	8482      	strh	r2, [r0, #36]	; 0x24
    f160:	2900      	cmp	r1, #0
    f162:	d10a      	bne.n	f17a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f164:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f168:	8441      	strh	r1, [r0, #34]	; 0x22
    f16a:	83c1      	strh	r1, [r0, #30]
    f16c:	8341      	strh	r1, [r0, #26]
    f16e:	8301      	strh	r1, [r0, #24]
    f170:	81c1      	strh	r1, [r0, #14]
    f172:	8241      	strh	r1, [r0, #18]
    f174:	8181      	strh	r1, [r0, #12]
    f176:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f178:	8601      	strh	r1, [r0, #48]	; 0x30
    f17a:	4770      	bx	lr

0000f17c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f17c:	6800      	ldr	r0, [r0, #0]
    f17e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f182:	4290      	cmp	r0, r2
    f184:	d903      	bls.n	f18e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f186:	1a40      	subs	r0, r0, r1
    f188:	389c      	subs	r0, #156	; 0x9c
    f18a:	0840      	lsrs	r0, r0, #1
    f18c:	4770      	bx	lr
    f18e:	2000      	movs	r0, #0
    f190:	4770      	bx	lr

0000f192 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f192:	b510      	push	{r4, lr}
    f194:	9c02      	ldr	r4, [sp, #8]
    f196:	8281      	strh	r1, [r0, #20]
    f198:	82c2      	strh	r2, [r0, #22]
    f19a:	8303      	strh	r3, [r0, #24]
    f19c:	8344      	strh	r4, [r0, #26]
    f19e:	bd10      	pop	{r4, pc}

0000f1a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f1a0:	b430      	push	{r4, r5}
    f1a2:	8150      	strh	r0, [r2, #10]
    f1a4:	8a88      	ldrh	r0, [r1, #20]
    f1a6:	8190      	strh	r0, [r2, #12]
    f1a8:	8ac8      	ldrh	r0, [r1, #22]
    f1aa:	81d0      	strh	r0, [r2, #14]
    f1ac:	8b08      	ldrh	r0, [r1, #24]
    f1ae:	8210      	strh	r0, [r2, #16]
    f1b0:	8b48      	ldrh	r0, [r1, #26]
    f1b2:	4614      	mov	r4, r2
    f1b4:	8250      	strh	r0, [r2, #18]
    f1b6:	4620      	mov	r0, r4
    f1b8:	bc30      	pop	{r4, r5}
    f1ba:	221a      	movs	r2, #26
    f1bc:	4619      	mov	r1, r3
    f1be:	f7f7 be29 	b.w	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f1c2:	2902      	cmp	r1, #2
    f1c4:	d003      	beq.n	f1ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f1c6:	00c0      	lsls	r0, r0, #3
    f1c8:	3070      	adds	r0, #112	; 0x70
    f1ca:	b280      	uxth	r0, r0
    f1cc:	4770      	bx	lr
    f1ce:	0080      	lsls	r0, r0, #2
    f1d0:	303c      	adds	r0, #60	; 0x3c
    f1d2:	e7fa      	b.n	f1ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f1d4:	4288      	cmp	r0, r1
    f1d6:	d300      	bcc.n	f1da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f1d8:	4608      	mov	r0, r1
    f1da:	1a80      	subs	r0, r0, r2
    f1dc:	4770      	bx	lr
    f1de:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f1e2:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f1e6:	4281      	cmp	r1, r0
    f1e8:	d200      	bcs.n	f1ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f1ea:	4608      	mov	r0, r1
    f1ec:	4770      	bx	lr
    f1ee:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f1f2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f1f6:	4281      	cmp	r1, r0
    f1f8:	d200      	bcs.n	f1fc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f1fa:	4608      	mov	r0, r1
    f1fc:	4770      	bx	lr
    f1fe:	2196      	movs	r1, #150	; 0x96
    f200:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f204:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f208:	f000 b800 	b.w	f20c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f210:	460d      	mov	r5, r1
    f212:	4606      	mov	r6, r0
    f214:	4698      	mov	r8, r3
    f216:	4617      	mov	r7, r2
    f218:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f21a:	4611      	mov	r1, r2
    f21c:	f7ff ffd1 	bl	f1c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f220:	4604      	mov	r4, r0
    f222:	4639      	mov	r1, r7
    f224:	4630      	mov	r0, r6
    f226:	f7ff ffe2 	bl	f1ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f22a:	42a0      	cmp	r0, r4
    f22c:	d200      	bcs.n	f230 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f22e:	4604      	mov	r4, r0
    f230:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f234:	4641      	mov	r1, r8
    f236:	f7ff ffc4 	bl	f1c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f23a:	4607      	mov	r7, r0
    f23c:	4641      	mov	r1, r8
    f23e:	4630      	mov	r0, r6
    f240:	f7ff ffcd 	bl	f1de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f244:	42b8      	cmp	r0, r7
    f246:	d300      	bcc.n	f24a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f248:	4638      	mov	r0, r7
    f24a:	4420      	add	r0, r4
    f24c:	4428      	add	r0, r5
    f24e:	1d80      	adds	r0, r0, #6
    f250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f254:	b510      	push	{r4, lr}
    f256:	4604      	mov	r4, r0
    f258:	2108      	movs	r1, #8
    f25a:	4620      	mov	r0, r4
    f25c:	f7f5 fd80 	bl	4d60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f260:	6820      	ldr	r0, [r4, #0]
    f262:	2800      	cmp	r0, #0
    f264:	d102      	bne.n	f26c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f266:	6860      	ldr	r0, [r4, #4]
    f268:	2800      	cmp	r0, #0
    f26a:	d0f5      	beq.n	f258 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f26c:	bd10      	pop	{r4, pc}
    f26e:	2801      	cmp	r0, #1
    f270:	d102      	bne.n	f278 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f272:	7948      	ldrb	r0, [r1, #5]
    f274:	0980      	lsrs	r0, r0, #6
    f276:	d001      	beq.n	f27c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f278:	2000      	movs	r0, #0
    f27a:	4770      	bx	lr
    f27c:	2001      	movs	r0, #1
    f27e:	4770      	bx	lr
    f280:	2801      	cmp	r0, #1
    f282:	d106      	bne.n	f292 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f284:	7948      	ldrb	r0, [r1, #5]
    f286:	2101      	movs	r1, #1
    f288:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f28c:	d101      	bne.n	f292 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f28e:	2001      	movs	r0, #1
    f290:	4770      	bx	lr
    f292:	2000      	movs	r0, #0
    f294:	4770      	bx	lr
    f296:	2802      	cmp	r0, #2
    f298:	d003      	beq.n	f2a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f29a:	2803      	cmp	r0, #3
    f29c:	d001      	beq.n	f2a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f29e:	2000      	movs	r0, #0
    f2a0:	4770      	bx	lr
    f2a2:	2001      	movs	r0, #1
    f2a4:	4770      	bx	lr

0000f2a6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f2a6:	b510      	push	{r4, lr}
    f2a8:	4604      	mov	r4, r0
    f2aa:	7c00      	ldrb	r0, [r0, #16]
    f2ac:	f7ff fff3 	bl	f296 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    f2b0:	b148      	cbz	r0, f2c6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f2b2:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f2b6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f2ba:	f7ff f993 	bl	e5e4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f2be:	2808      	cmp	r0, #8
    f2c0:	d001      	beq.n	f2c6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f2c2:	2001      	movs	r0, #1
    f2c4:	bd10      	pop	{r4, pc}
    f2c6:	7c20      	ldrb	r0, [r4, #16]
    f2c8:	b118      	cbz	r0, f2d2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f2ca:	2802      	cmp	r0, #2
    f2cc:	d001      	beq.n	f2d2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f2ce:	7de0      	ldrb	r0, [r4, #23]
    f2d0:	bd10      	pop	{r4, pc}
    f2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2d6:	2000      	movs	r0, #0
    f2d8:	f7f6 bb78 	b.w	59cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f2dc <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f2dc:	b508      	push	{r3, lr}
    f2de:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    f2e2:	f88d 1000 	strb.w	r1, [sp]
    f2e6:	9900      	ldr	r1, [sp, #0]
    f2e8:	9100      	str	r1, [sp, #0]
    f2ea:	f89d 1000 	ldrb.w	r1, [sp]
    f2ee:	b109      	cbz	r1, f2f4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f2f0:	2001      	movs	r0, #1
    f2f2:	bd08      	pop	{r3, pc}
    f2f4:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f2f8:	f88d 0000 	strb.w	r0, [sp]
    f2fc:	9800      	ldr	r0, [sp, #0]
    f2fe:	9000      	str	r0, [sp, #0]
    f300:	f89d 0000 	ldrb.w	r0, [sp]
    f304:	2000      	movs	r0, #0
    f306:	bd08      	pop	{r3, pc}

0000f308 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f308:	20ff      	movs	r0, #255	; 0xff
    f30a:	7008      	strb	r0, [r1, #0]
    f30c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f30e:	f7ff b869 	b.w	e3e4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f312 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f312:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f314:	460d      	mov	r5, r1
    f316:	4604      	mov	r4, r0
    f318:	f44f 7288 	mov.w	r2, #272	; 0x110
    f31c:	2100      	movs	r1, #0
    f31e:	f7fd ff4f 	bl	d1c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f322:	20ff      	movs	r0, #255	; 0xff
    f324:	7020      	strb	r0, [r4, #0]
    f326:	207f      	movs	r0, #127	; 0x7f
    f328:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f32c:	2013      	movs	r0, #19
    f32e:	8060      	strh	r0, [r4, #2]
    f330:	f7f6 f954 	bl	55dc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f334:	4601      	mov	r1, r0
    f336:	62e0      	str	r0, [r4, #44]	; 0x2c
    f338:	2200      	movs	r2, #0
    f33a:	4668      	mov	r0, sp
    f33c:	f7fe ffbc 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f340:	2200      	movs	r2, #0
    f342:	2101      	movs	r1, #1
    f344:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f346:	f7ff f82d 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f34a:	2204      	movs	r2, #4
    f34c:	4668      	mov	r0, sp
    f34e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f350:	f7fe ffb2 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f354:	2200      	movs	r2, #0
    f356:	4611      	mov	r1, r2
    f358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f35a:	f7ff f823 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f35e:	73a5      	strb	r5, [r4, #14]
    f360:	f104 0020 	add.w	r0, r4, #32
    f364:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f368:	f000 b994 	b.w	f694 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f36c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f36c:	7880      	ldrb	r0, [r0, #2]
    f36e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f372:	b108      	cbz	r0, f378 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f374:	2000      	movs	r0, #0
    f376:	4770      	bx	lr
    f378:	201f      	movs	r0, #31
    f37a:	4770      	bx	lr

0000f37c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f37c:	f7f8 bc80 	b.w	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000f380 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    f380:	b570      	push	{r4, r5, r6, lr}
    f382:	2300      	movs	r3, #0
    f384:	2a03      	cmp	r2, #3
    f386:	d015      	beq.n	f3b4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    f388:	2a0e      	cmp	r2, #14
    f38a:	d01a      	beq.n	f3c2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    f38c:	2a12      	cmp	r2, #18
    f38e:	d030      	beq.n	f3f2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    f390:	2a19      	cmp	r2, #25
    f392:	d004      	beq.n	f39e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    f394:	f240 21d2 	movw	r1, #722	; 0x2d2
    f398:	202d      	movs	r0, #45	; 0x2d
    f39a:	f7f5 fc35 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f39e:	704b      	strb	r3, [r1, #1]
    f3a0:	2217      	movs	r2, #23
    f3a2:	700a      	strb	r2, [r1, #0]
    f3a4:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    f3a8:	604a      	str	r2, [r1, #4]
    f3aa:	6842      	ldr	r2, [r0, #4]
    f3ac:	608a      	str	r2, [r1, #8]
    f3ae:	7a00      	ldrb	r0, [r0, #8]
    f3b0:	7308      	strb	r0, [r1, #12]
    f3b2:	bd70      	pop	{r4, r5, r6, pc}
    f3b4:	704b      	strb	r3, [r1, #1]
    f3b6:	2205      	movs	r2, #5
    f3b8:	700a      	strb	r2, [r1, #0]
    f3ba:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    f3be:	6048      	str	r0, [r1, #4]
    f3c0:	bd70      	pop	{r4, r5, r6, pc}
    f3c2:	4605      	mov	r5, r0
    f3c4:	704b      	strb	r3, [r1, #1]
    f3c6:	2011      	movs	r0, #17
    f3c8:	460c      	mov	r4, r1
    f3ca:	7008      	strb	r0, [r1, #0]
    f3cc:	2220      	movs	r2, #32
    f3ce:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    f3d2:	1d20      	adds	r0, r4, #4
    f3d4:	f7fd fe7a 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f3d8:	2001      	movs	r0, #1
    f3da:	7220      	strb	r0, [r4, #8]
    f3dc:	7920      	ldrb	r0, [r4, #4]
    f3de:	2800      	cmp	r0, #0
    f3e0:	d1ee      	bne.n	f3c0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    f3e2:	69e8      	ldr	r0, [r5, #28]
    f3e4:	8800      	ldrh	r0, [r0, #0]
    f3e6:	f7f6 f837 	bl	5458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f3ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3ee:	f7fe bd75 	b.w	dedc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f3f2:	704b      	strb	r3, [r1, #1]
    f3f4:	2214      	movs	r2, #20
    f3f6:	700a      	strb	r2, [r1, #0]
    f3f8:	f850 2f98 	ldr.w	r2, [r0, #152]!
    f3fc:	604a      	str	r2, [r1, #4]
    f3fe:	8880      	ldrh	r0, [r0, #4]
    f400:	8108      	strh	r0, [r1, #8]
    f402:	bd70      	pop	{r4, r5, r6, pc}

0000f404 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f404:	6880      	ldr	r0, [r0, #8]
    f406:	4770      	bx	lr

0000f408 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f408:	2001      	movs	r0, #1
    f40a:	4770      	bx	lr

0000f40c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f40c:	b510      	push	{r4, lr}
    f40e:	4604      	mov	r4, r0
    f410:	3020      	adds	r0, #32
    f412:	f000 f8ff 	bl	f614 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f416:	8861      	ldrh	r1, [r4, #2]
    f418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f41c:	2228      	movs	r2, #40	; 0x28
    f41e:	f7f8 be17 	b.w	8050 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f422 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f422:	2200      	movs	r2, #0
    f424:	8502      	strh	r2, [r0, #40]	; 0x28
    f426:	8843      	ldrh	r3, [r0, #2]
    f428:	2b1d      	cmp	r3, #29
    f42a:	d001      	beq.n	f430 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f42c:	7341      	strb	r1, [r0, #13]
    f42e:	4770      	bx	lr
    f430:	7342      	strb	r2, [r0, #13]
    f432:	4770      	bx	lr

0000f434 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f434:	b510      	push	{r4, lr}
    f436:	2400      	movs	r4, #0
    f438:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f43a:	f7fe ffa1 	bl	e380 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f43e:	b100      	cbz	r0, f442 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f440:	2001      	movs	r0, #1
    f442:	4384      	bics	r4, r0
    f444:	f084 0001 	eor.w	r0, r4, #1
    f448:	bd10      	pop	{r4, pc}

0000f44a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f44a:	2000      	movs	r0, #0
    f44c:	4770      	bx	lr

0000f44e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f44e:	7880      	ldrb	r0, [r0, #2]
    f450:	f000 0001 	and.w	r0, r0, #1
    f454:	4770      	bx	lr

0000f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f456:	7880      	ldrb	r0, [r0, #2]
    f458:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f45c:	4770      	bx	lr

0000f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f45e:	2001      	movs	r0, #1
    f460:	4770      	bx	lr

0000f462 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f462:	7880      	ldrb	r0, [r0, #2]
    f464:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f468:	4770      	bx	lr

0000f46a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f46a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f46e:	4770      	bx	lr

0000f470 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f470:	7800      	ldrb	r0, [r0, #0]
    f472:	28ff      	cmp	r0, #255	; 0xff
    f474:	d001      	beq.n	f47a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f476:	2001      	movs	r0, #1
    f478:	4770      	bx	lr
    f47a:	2000      	movs	r0, #0
    f47c:	4770      	bx	lr

0000f47e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f47e:	680a      	ldr	r2, [r1, #0]
    f480:	f840 2f11 	str.w	r2, [r0, #17]!
    f484:	8889      	ldrh	r1, [r1, #4]
    f486:	8081      	strh	r1, [r0, #4]
    f488:	2101      	movs	r1, #1
    f48a:	7181      	strb	r1, [r0, #6]
    f48c:	4770      	bx	lr

0000f48e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f48e:	7b00      	ldrb	r0, [r0, #12]
    f490:	4770      	bx	lr

0000f492 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f492:	2001      	movs	r0, #1
    f494:	4770      	bx	lr

0000f496 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f496:	61c1      	str	r1, [r0, #28]
    f498:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    f49c:	724a      	strb	r2, [r1, #9]
    f49e:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    f4a2:	f8c1 200a 	str.w	r2, [r1, #10]
    f4a6:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    f4aa:	81c8      	strh	r0, [r1, #14]
    f4ac:	4770      	bx	lr

0000f4ae <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f4ae:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f4b2:	4770      	bx	lr

0000f4b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f4b4:	b510      	push	{r4, lr}
    f4b6:	4604      	mov	r4, r0
    f4b8:	7880      	ldrb	r0, [r0, #2]
    f4ba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f4be:	b158      	cbz	r0, f4d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    f4c0:	233c      	movs	r3, #60	; 0x3c
    f4c2:	22ff      	movs	r2, #255	; 0xff
    f4c4:	4620      	mov	r0, r4
    f4c6:	69e1      	ldr	r1, [r4, #28]
    f4c8:	f7f8 fc06 	bl	7cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    f4cc:	220e      	movs	r2, #14
    f4ce:	4621      	mov	r1, r4
    f4d0:	f104 0064 	add.w	r0, r4, #100	; 0x64
    f4d4:	f7f7 fc9e 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f4d8:	78a0      	ldrb	r0, [r4, #2]
    f4da:	07c0      	lsls	r0, r0, #31
    f4dc:	f7f7 fd6c 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f4e0:	2001      	movs	r0, #1
    f4e2:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    f4e6:	bd10      	pop	{r4, pc}

0000f4e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f4e8:	7bc0      	ldrb	r0, [r0, #15]
    f4ea:	2800      	cmp	r0, #0
    f4ec:	d000      	beq.n	f4f0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f4ee:	2001      	movs	r0, #1
    f4f0:	4770      	bx	lr
    f4f2:	b510      	push	{r4, lr}
    f4f4:	f7ff f876 	bl	e5e4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f4f8:	4604      	mov	r4, r0
    f4fa:	f7f7 f90d 	bl	6718 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f4fe:	b138      	cbz	r0, f510 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f500:	4620      	mov	r0, r4
    f502:	f7f7 f841 	bl	6588 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f506:	b118      	cbz	r0, f510 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f508:	2110      	movs	r1, #16
    f50a:	f7ff fa5d 	bl	e9c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f50e:	b108      	cbz	r0, f514 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f510:	2000      	movs	r0, #0
    f512:	bd10      	pop	{r4, pc}
    f514:	2001      	movs	r0, #1
    f516:	bd10      	pop	{r4, pc}
    f518:	2101      	movs	r1, #1
    f51a:	f7f8 b843 	b.w	75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f51e:	2101      	movs	r1, #1
    f520:	f7f8 b840 	b.w	75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f528:	4604      	mov	r4, r0
    f52a:	460f      	mov	r7, r1
    f52c:	7e40      	ldrb	r0, [r0, #25]
    f52e:	f7f6 ffeb 	bl	6508 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f532:	4606      	mov	r6, r0
    f534:	7e20      	ldrb	r0, [r4, #24]
    f536:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f53a:	b120      	cbz	r0, f546 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f53c:	b11e      	cbz	r6, f546 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f53e:	7e60      	ldrb	r0, [r4, #25]
    f540:	f7f6 ffd6 	bl	64f0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f544:	b1a0      	cbz	r0, f570 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    f546:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f54a:	2800      	cmp	r0, #0
    f54c:	d024      	beq.n	f598 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f54e:	7ea0      	ldrb	r0, [r4, #26]
    f550:	2800      	cmp	r0, #0
    f552:	d021      	beq.n	f598 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f554:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f558:	4629      	mov	r1, r5
    f55a:	f7ff fe91 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    f55e:	b1a8      	cbz	r0, f58c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    f560:	f7f6 ffc2 	bl	64e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f564:	463a      	mov	r2, r7
    f566:	4629      	mov	r1, r5
    f568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f56c:	f7fe bfd2 	b.w	e514 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f570:	2001      	movs	r0, #1
    f572:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f576:	463a      	mov	r2, r7
    f578:	4629      	mov	r1, r5
    f57a:	4630      	mov	r0, r6
    f57c:	f7fe ffca 	bl	e514 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f580:	7e61      	ldrb	r1, [r4, #25]
    f582:	4628      	mov	r0, r5
    f584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f588:	f7f6 bfca 	b.w	6520 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f58c:	4639      	mov	r1, r7
    f58e:	4628      	mov	r0, r5
    f590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f594:	f7fe bfad 	b.w	e4f2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f59c:	b510      	push	{r4, lr}
    f59e:	4604      	mov	r4, r0
    f5a0:	4608      	mov	r0, r1
    f5a2:	f7fc fc1f 	bl	bde4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f5a6:	7921      	ldrb	r1, [r4, #4]
    f5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5ac:	2025      	movs	r0, #37	; 0x25
    f5ae:	f7fc bbef 	b.w	bd90 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f5b2:	b510      	push	{r4, lr}
    f5b4:	4604      	mov	r4, r0
    f5b6:	3026      	adds	r0, #38	; 0x26
    f5b8:	f7fc fbca 	bl	bd50 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f5bc:	2800      	cmp	r0, #0
    f5be:	d102      	bne.n	f5c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    f5c0:	207f      	movs	r0, #127	; 0x7f
    f5c2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f5c6:	bd10      	pop	{r4, pc}
    f5c8:	b570      	push	{r4, r5, r6, lr}
    f5ca:	4614      	mov	r4, r2
    f5cc:	461d      	mov	r5, r3
    f5ce:	4606      	mov	r6, r0
    f5d0:	f7f3 ff42 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f5d4:	1900      	adds	r0, r0, r4
    f5d6:	4169      	adcs	r1, r5
    f5d8:	e9c6 0100 	strd	r0, r1, [r6]
    f5dc:	bd70      	pop	{r4, r5, r6, pc}
    f5de:	7802      	ldrb	r2, [r0, #0]
    f5e0:	2320      	movs	r3, #32
    f5e2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    f5e6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f5ea:	430a      	orrs	r2, r1
    f5ec:	7002      	strb	r2, [r0, #0]
    f5ee:	4770      	bx	lr

0000f5f0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f5f0:	b570      	push	{r4, r5, r6, lr}
    f5f2:	7001      	strb	r1, [r0, #0]
    f5f4:	7042      	strb	r2, [r0, #1]
    f5f6:	4614      	mov	r4, r2
    f5f8:	460d      	mov	r5, r1
    f5fa:	7880      	ldrb	r0, [r0, #2]
    f5fc:	f000 f87f 	bl	f6fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f600:	fb10 f005 	smulbb	r0, r0, r5
    f604:	4360      	muls	r0, r4
    f606:	28ff      	cmp	r0, #255	; 0xff
    f608:	d303      	bcc.n	f612 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f60a:	215c      	movs	r1, #92	; 0x5c
    f60c:	202e      	movs	r0, #46	; 0x2e
    f60e:	f7f5 fafb 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f612:	bd70      	pop	{r4, r5, r6, pc}

0000f614 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f614:	b510      	push	{r4, lr}
    f616:	4604      	mov	r4, r0
    f618:	7880      	ldrb	r0, [r0, #2]
    f61a:	f000 f870 	bl	f6fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f61e:	7861      	ldrb	r1, [r4, #1]
    f620:	7822      	ldrb	r2, [r4, #0]
    f622:	fb11 f102 	smulbb	r1, r1, r2
    f626:	4348      	muls	r0, r1
    f628:	b2c0      	uxtb	r0, r0
    f62a:	bd10      	pop	{r4, pc}

0000f62c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f62c:	b510      	push	{r4, lr}
    f62e:	4604      	mov	r4, r0
    f630:	f000 f84d 	bl	f6ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f634:	7961      	ldrb	r1, [r4, #5]
    f636:	1c49      	adds	r1, r1, #1
    f638:	b2c9      	uxtb	r1, r1
    f63a:	7161      	strb	r1, [r4, #5]
    f63c:	7862      	ldrb	r2, [r4, #1]
    f63e:	4291      	cmp	r1, r2
    f640:	d10b      	bne.n	f65a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f642:	2200      	movs	r2, #0
    f644:	7162      	strb	r2, [r4, #5]
    f646:	78e1      	ldrb	r1, [r4, #3]
    f648:	4301      	orrs	r1, r0
    f64a:	70e1      	strb	r1, [r4, #3]
    f64c:	78a3      	ldrb	r3, [r4, #2]
    f64e:	4299      	cmp	r1, r3
    f650:	d103      	bne.n	f65a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f652:	70e2      	strb	r2, [r4, #3]
    f654:	7921      	ldrb	r1, [r4, #4]
    f656:	1c49      	adds	r1, r1, #1
    f658:	7121      	strb	r1, [r4, #4]
    f65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f65e:	f000 b825 	b.w	f6ac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f662 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f662:	7081      	strb	r1, [r0, #2]
    f664:	4770      	bx	lr

0000f666 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f666:	b570      	push	{r4, r5, r6, lr}
    f668:	4604      	mov	r4, r0
    f66a:	7880      	ldrb	r0, [r0, #2]
    f66c:	f000 f847 	bl	f6fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f670:	7861      	ldrb	r1, [r4, #1]
    f672:	fb11 f500 	smulbb	r5, r1, r0
    f676:	78e0      	ldrb	r0, [r4, #3]
    f678:	f000 f841 	bl	f6fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f67c:	7861      	ldrb	r1, [r4, #1]
    f67e:	7962      	ldrb	r2, [r4, #5]
    f680:	fb10 2001 	smlabb	r0, r0, r1, r2
    f684:	7821      	ldrb	r1, [r4, #0]
    f686:	7922      	ldrb	r2, [r4, #4]
    f688:	1a89      	subs	r1, r1, r2
    f68a:	fb11 f105 	smulbb	r1, r1, r5
    f68e:	1a08      	subs	r0, r1, r0
    f690:	b2c0      	uxtb	r0, r0
    f692:	bd70      	pop	{r4, r5, r6, pc}

0000f694 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f694:	2100      	movs	r1, #0
    f696:	6001      	str	r1, [r0, #0]
    f698:	8081      	strh	r1, [r0, #4]
    f69a:	2101      	movs	r1, #1
    f69c:	7041      	strb	r1, [r0, #1]
    f69e:	7001      	strb	r1, [r0, #0]
    f6a0:	4770      	bx	lr

0000f6a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f6a2:	2100      	movs	r1, #0
    f6a4:	70c1      	strb	r1, [r0, #3]
    f6a6:	7141      	strb	r1, [r0, #5]
    f6a8:	7101      	strb	r1, [r0, #4]
    f6aa:	4770      	bx	lr
    f6ac:	b510      	push	{r4, lr}
    f6ae:	2801      	cmp	r0, #1
    f6b0:	d007      	beq.n	f6c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f6b2:	2802      	cmp	r0, #2
    f6b4:	d007      	beq.n	f6c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f6b6:	2804      	cmp	r0, #4
    f6b8:	d007      	beq.n	f6ca <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f6ba:	2139      	movs	r1, #57	; 0x39
    f6bc:	202e      	movs	r0, #46	; 0x2e
    f6be:	f7f5 faa3 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c2:	2025      	movs	r0, #37	; 0x25
    f6c4:	bd10      	pop	{r4, pc}
    f6c6:	2026      	movs	r0, #38	; 0x26
    f6c8:	bd10      	pop	{r4, pc}
    f6ca:	2027      	movs	r0, #39	; 0x27
    f6cc:	bd10      	pop	{r4, pc}
    f6ce:	4601      	mov	r1, r0
    f6d0:	2000      	movs	r0, #0
    f6d2:	788a      	ldrb	r2, [r1, #2]
    f6d4:	07d3      	lsls	r3, r2, #31
    f6d6:	d002      	beq.n	f6de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f6d8:	78cb      	ldrb	r3, [r1, #3]
    f6da:	07db      	lsls	r3, r3, #31
    f6dc:	d006      	beq.n	f6ec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f6de:	0793      	lsls	r3, r2, #30
    f6e0:	d506      	bpl.n	f6f0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f6e2:	78cb      	ldrb	r3, [r1, #3]
    f6e4:	079b      	lsls	r3, r3, #30
    f6e6:	d403      	bmi.n	f6f0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f6e8:	2002      	movs	r0, #2
    f6ea:	4770      	bx	lr
    f6ec:	2001      	movs	r0, #1
    f6ee:	4770      	bx	lr
    f6f0:	0752      	lsls	r2, r2, #29
    f6f2:	d5fc      	bpl.n	f6ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f6f4:	78c9      	ldrb	r1, [r1, #3]
    f6f6:	0749      	lsls	r1, r1, #29
    f6f8:	d4f9      	bmi.n	f6ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f6fa:	2004      	movs	r0, #4
    f6fc:	4770      	bx	lr
    f6fe:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f702:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f706:	4411      	add	r1, r2
    f708:	f000 0001 	and.w	r0, r0, #1
    f70c:	4408      	add	r0, r1
    f70e:	4770      	bx	lr

0000f710 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f710:	f240 315a 	movw	r1, #858	; 0x35a
    f714:	4348      	muls	r0, r1
    f716:	4770      	bx	lr

0000f718 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f718:	f240 20ef 	movw	r0, #751	; 0x2ef
    f71c:	4770      	bx	lr
    f71e:	020e      	.short	0x020e
    f720:	0630041c 	.word	0x0630041c
    f724:	035a0c60 	.word	0x035a0c60
    f728:	05c506b4 	.word	0x05c506b4
    f72c:	12250bf5 	.word	0x12250bf5
    f730:	03b101a3 	.word	0x03b101a3
    f734:	02ef05bf 	.word	0x02ef05bf
    f738:	09a30649 	.word	0x09a30649

0000f73c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f73c:	b510      	push	{r4, lr}
    f73e:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    f742:	b109      	cbz	r1, f748 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f744:	2000      	movs	r0, #0
    f746:	bd10      	pop	{r4, pc}
    f748:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    f74c:	b131      	cbz	r1, f75c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f74e:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    f752:	428a      	cmp	r2, r1
    f754:	d902      	bls.n	f75c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f756:	f7ff fead 	bl	f4b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f75a:	e7f3      	b.n	f744 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f75c:	2001      	movs	r0, #1
    f75e:	bd10      	pop	{r4, pc}

0000f760 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f760:	b510      	push	{r4, lr}
    f762:	b131      	cbz	r1, f772 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f764:	2901      	cmp	r1, #1
    f766:	d008      	beq.n	f77a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f768:	f240 7195 	movw	r1, #1941	; 0x795
    f76c:	2030      	movs	r0, #48	; 0x30
    f76e:	f7f5 fa4b 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f776:	f000 b9ec 	b.w	fb52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
    f77a:	2100      	movs	r1, #0
    f77c:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    f780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f784:	f000 b948 	b.w	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

0000f788 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f788:	b510      	push	{r4, lr}
    f78a:	4604      	mov	r4, r0
    f78c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f790:	2800      	cmp	r0, #0
    f792:	d019      	beq.n	f7c8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f794:	2001      	movs	r0, #1
    f796:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    f79a:	4601      	mov	r1, r0
    f79c:	4620      	mov	r0, r4
    f79e:	f7ff fe86 	bl	f4ae <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f7a2:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    f7a6:	b170      	cbz	r0, f7c6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f7a8:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f7ac:	f7f3 fa22 	bl	2bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f7b0:	7820      	ldrb	r0, [r4, #0]
    f7b2:	f7f3 fb87 	bl	2ec4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f7b6:	f814 09c0 	ldrb.w	r0, [r4], #-192
    f7ba:	f7f3 fb61 	bl	2e80 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f7be:	b120      	cbz	r0, f7ca <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f7c0:	2000      	movs	r0, #0
    f7c2:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    f7c6:	2000      	movs	r0, #0
    f7c8:	bd10      	pop	{r4, pc}
    f7ca:	f240 2109 	movw	r1, #521	; 0x209
    f7ce:	2030      	movs	r0, #48	; 0x30
    f7d0:	f7f5 fa1a 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f7d4 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f7d4:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    f7d8:	4770      	bx	lr

0000f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f7da:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f7de:	4770      	bx	lr

0000f7e0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f7e0:	b50e      	push	{r1, r2, r3, lr}
    f7e2:	4669      	mov	r1, sp
    f7e4:	2001      	movs	r0, #1
    f7e6:	f7fe fcad 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f7ea:	b138      	cbz	r0, f7fc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f7ec:	f240 1137 	movw	r1, #311	; 0x137
    f7f0:	2030      	movs	r0, #48	; 0x30
    f7f2:	f7f5 fa09 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7f6:	9802      	ldr	r0, [sp, #8]
    f7f8:	f7ff ffc6 	bl	f788 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f7fc:	4668      	mov	r0, sp
    f7fe:	f7f5 fc47 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f802:	2800      	cmp	r0, #0
    f804:	d0f7      	beq.n	f7f6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f806:	f7f8 fdc7 	bl	8398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f80a:	2000      	movs	r0, #0
    f80c:	bd0e      	pop	{r1, r2, r3, pc}

0000f80e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f80e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f810:	4604      	mov	r4, r0
    f812:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    f816:	2800      	cmp	r0, #0
    f818:	d15f      	bne.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f81a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    f81e:	2803      	cmp	r0, #3
    f820:	d15b      	bne.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f822:	f7f3 fe19 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f826:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    f82a:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    f82e:	1ac0      	subs	r0, r0, r3
    f830:	eb61 0102 	sbc.w	r1, r1, r2
    f834:	2300      	movs	r3, #0
    f836:	461a      	mov	r2, r3
    f838:	1a1b      	subs	r3, r3, r0
    f83a:	418a      	sbcs	r2, r1
    f83c:	da4d      	bge.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f83e:	1c42      	adds	r2, r0, #1
    f840:	f171 0100 	sbcs.w	r1, r1, #0
    f844:	db02      	blt.n	f84c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f846:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    f84a:	e036      	b.n	f8ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f84c:	6921      	ldr	r1, [r4, #16]
    f84e:	b111      	cbz	r1, f856 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f850:	fbb0 f0f1 	udiv	r0, r0, r1
    f854:	e000      	b.n	f858 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f856:	2000      	movs	r0, #0
    f858:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f85c:	1c40      	adds	r0, r0, #1
    f85e:	4408      	add	r0, r1
    f860:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f864:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f868:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    f86c:	1a08      	subs	r0, r1, r0
    f86e:	b200      	sxth	r0, r0
    f870:	2800      	cmp	r0, #0
    f872:	dd32      	ble.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f874:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f878:	f7f3 f9bc 	bl	2bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f87c:	2800      	cmp	r0, #0
    f87e:	d02c      	beq.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f880:	20ff      	movs	r0, #255	; 0xff
    f882:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    f886:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    f88a:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    f88e:	ae01      	add	r6, sp, #4
    f890:	1a40      	subs	r0, r0, r1
    f892:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f896:	1e40      	subs	r0, r0, #1
    f898:	4408      	add	r0, r1
    f89a:	b285      	uxth	r5, r0
    f89c:	e017      	b.n	f8ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f89e:	9600      	str	r6, [sp, #0]
    f8a0:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f8a4:	2300      	movs	r3, #0
    f8a6:	2201      	movs	r2, #1
    f8a8:	4620      	mov	r0, r4
    f8aa:	f7f8 fe49 	bl	8540 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f8ae:	2800      	cmp	r0, #0
    f8b0:	d013      	beq.n	f8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f8b2:	2801      	cmp	r0, #1
    f8b4:	d004      	beq.n	f8c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f8b6:	f240 6101 	movw	r1, #1537	; 0x601
    f8ba:	2030      	movs	r0, #48	; 0x30
    f8bc:	f7f5 f9a4 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8c0:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f8c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f8c8:	4408      	add	r0, r1
    f8ca:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f8ce:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f8d2:	1a28      	subs	r0, r5, r0
    f8d4:	b200      	sxth	r0, r0
    f8d6:	2800      	cmp	r0, #0
    f8d8:	dae1      	bge.n	f89e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f8da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f8dc:	2000      	movs	r0, #0
    f8de:	4770      	bx	lr
    f8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8e4:	4604      	mov	r4, r0
    f8e6:	2501      	movs	r5, #1
    f8e8:	f000 f90c 	bl	fb04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f8ec:	2600      	movs	r6, #0
    f8ee:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    f8f2:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
    f8f6:	2701      	movs	r7, #1
    f8f8:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
    f8fc:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    f900:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
    f904:	b169      	cbz	r1, f922 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
    f906:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
    f90a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f90e:	1880      	adds	r0, r0, r2
    f910:	f141 0100 	adc.w	r1, r1, #0
    f914:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
    f918:	2100      	movs	r1, #0
    f91a:	4640      	mov	r0, r8
    f91c:	f7fe ff89 	bl	e832 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f920:	e00d      	b.n	f93e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
    f922:	4620      	mov	r0, r4
    f924:	f7ff fd6e 	bl	f404 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f928:	4601      	mov	r1, r0
    f92a:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
    f92e:	1852      	adds	r2, r2, r1
    f930:	4170      	adcs	r0, r6
    f932:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
    f936:	4640      	mov	r0, r8
    f938:	f7fe ff7b 	bl	e832 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f93c:	1c45      	adds	r5, r0, #1
    f93e:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f942:	1c41      	adds	r1, r0, #1
    f944:	290a      	cmp	r1, #10
    f946:	d202      	bcs.n	f94e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f948:	4428      	add	r0, r5
    f94a:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    f94e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f952:	b138      	cbz	r0, f964 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f954:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f958:	1c40      	adds	r0, r0, #1
    f95a:	280a      	cmp	r0, #10
    f95c:	d302      	bcc.n	f964 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f95e:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
    f962:	e002      	b.n	f96a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
    f964:	2002      	movs	r0, #2
    f966:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    f96a:	4620      	mov	r0, r4
    f96c:	f000 f823 	bl	f9b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f970:	b120      	cbz	r0, f97c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    f972:	4620      	mov	r0, r4
    f974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f978:	f000 b80e 	b.w	f998 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    f97c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    f980:	4641      	mov	r1, r8
    f982:	f000 f8bd 	bl	fb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    f986:	2800      	cmp	r0, #0
    f988:	d104      	bne.n	f994 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
    f98a:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
    f98e:	2030      	movs	r0, #48	; 0x30
    f990:	f7f5 f93a 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f998:	b510      	push	{r4, lr}
    f99a:	4604      	mov	r4, r0
    f99c:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f9a0:	f7f3 fa6e 	bl	2e80 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f9a4:	2000      	movs	r0, #0
    f9a6:	7620      	strb	r0, [r4, #24]
    f9a8:	bd10      	pop	{r4, pc}
    f9aa:	b510      	push	{r4, lr}
    f9ac:	f7ff fd2e 	bl	f40c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f9b0:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f9b4:	bd10      	pop	{r4, pc}
    f9b6:	b570      	push	{r4, r5, r6, lr}
    f9b8:	4605      	mov	r5, r0
    f9ba:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
    f9be:	b108      	cbz	r0, f9c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
    f9c0:	2001      	movs	r0, #1
    f9c2:	bd70      	pop	{r4, r5, r6, pc}
    f9c4:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
    f9c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f9cc:	4050      	eors	r0, r2
    f9ce:	ea70 0101 	orns	r1, r0, r1
    f9d2:	d011      	beq.n	f9f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f9d4:	2400      	movs	r4, #0
    f9d6:	4628      	mov	r0, r5
    f9d8:	f7ff ffe7 	bl	f9aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f9dc:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
    f9e0:	1840      	adds	r0, r0, r1
    f9e2:	4154      	adcs	r4, r2
    f9e4:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f9e8:	3df0      	subs	r5, #240	; 0xf0
    f9ea:	1a10      	subs	r0, r2, r0
    f9ec:	41a1      	sbcs	r1, r4
    f9ee:	d503      	bpl.n	f9f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f9f0:	4628      	mov	r0, r5
    f9f2:	f7ff fd5f 	bl	f4b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f9f6:	e7e3      	b.n	f9c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    f9f8:	2000      	movs	r0, #0
    f9fa:	bd70      	pop	{r4, r5, r6, pc}
    f9fc:	b510      	push	{r4, lr}
    f9fe:	4604      	mov	r4, r0
    fa00:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    fa04:	f000 f9f2 	bl	fdec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
    fa08:	4602      	mov	r2, r0
    fa0a:	4620      	mov	r0, r4
    fa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa10:	f240 111b 	movw	r1, #283	; 0x11b
    fa14:	f7ff bb85 	b.w	f122 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    fa18:	b510      	push	{r4, lr}
    fa1a:	f7fc f821 	bl	ba60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    fa1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa22:	f7f3 bb8f 	b.w	3144 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    fa26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa2a:	4604      	mov	r4, r0
    fa2c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    fa30:	2800      	cmp	r0, #0
    fa32:	d051      	beq.n	fad8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    fa34:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    fa38:	2803      	cmp	r0, #3
    fa3a:	d14d      	bne.n	fad8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    fa3c:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    fa40:	f001 fa5b 	bl	10efa <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    fa44:	4605      	mov	r5, r0
    fa46:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    fa4a:	f7f8 fc97 	bl	837c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fa4e:	4428      	add	r0, r5
    fa50:	b286      	uxth	r6, r0
    fa52:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    fa56:	f7f8 fc91 	bl	837c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fa5a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    fa5e:	fa1f f880 	uxth.w	r8, r0
    fa62:	4648      	mov	r0, r9
    fa64:	f7fc f8ba 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa68:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    fa6c:	1a0d      	subs	r5, r1, r0
    fa6e:	4648      	mov	r0, r9
    fa70:	f7fc f8e0 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa74:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    fa78:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fa7c:	fbb0 f0fa 	udiv	r0, r0, sl
    fa80:	1a2d      	subs	r5, r5, r0
    fa82:	4648      	mov	r0, r9
    fa84:	f7fc f8aa 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa88:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    fa8c:	1a0f      	subs	r7, r1, r0
    fa8e:	4648      	mov	r0, r9
    fa90:	f7fc f8d0 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa94:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    fa98:	4401      	add	r1, r0
    fa9a:	fbb1 f0fa 	udiv	r0, r1, sl
    fa9e:	1a39      	subs	r1, r7, r0
    faa0:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    faa4:	4370      	muls	r0, r6
    faa6:	fbb0 f2f8 	udiv	r2, r0, r8
    faaa:	2029      	movs	r0, #41	; 0x29
    faac:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    fab0:	3260      	adds	r2, #96	; 0x60
    fab2:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    fab6:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    faba:	42a9      	cmp	r1, r5
    fabc:	d801      	bhi.n	fac2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    fabe:	4285      	cmp	r5, r0
    fac0:	d901      	bls.n	fac6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
    fac2:	f7f4 fcdf 	bl	4484 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    fac6:	4631      	mov	r1, r6
    fac8:	6920      	ldr	r0, [r4, #16]
    faca:	f7fd f9d0 	bl	ce6e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    face:	2100      	movs	r1, #0
    fad0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    fad4:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
    fad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fadc:	b570      	push	{r4, r5, r6, lr}
    fade:	460c      	mov	r4, r1
    fae0:	4605      	mov	r5, r0
    fae2:	f7fc f8a7 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fae6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    faea:	4408      	add	r0, r1
    faec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    faf0:	fbb0 f6f1 	udiv	r6, r0, r1
    faf4:	4628      	mov	r0, r5
    faf6:	f7fc f871 	bl	bbdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fafa:	4430      	add	r0, r6
    fafc:	4420      	add	r0, r4
    fafe:	bd70      	pop	{r4, r5, r6, pc}
    fb00:	f7f2 bcde 	b.w	24c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    fb04:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fb06:	4604      	mov	r4, r0
    fb08:	f7ff fca9 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fb0c:	b1f8      	cbz	r0, fb4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    fb0e:	4620      	mov	r0, r4
    fb10:	f7ff fc9d 	bl	f44e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fb14:	b918      	cbnz	r0, fb1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    fb16:	4620      	mov	r0, r4
    fb18:	f7ff fca3 	bl	f462 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fb1c:	b140      	cbz	r0, fb30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
    fb1e:	2449      	movs	r4, #73	; 0x49
    fb20:	4668      	mov	r0, sp
    fb22:	f7f4 ff4b 	bl	49bc <mpsl_fem_pa_is_configured>
    fb26:	f89d 0000 	ldrb.w	r0, [sp]
    fb2a:	b118      	cbz	r0, fb34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
    fb2c:	2501      	movs	r5, #1
    fb2e:	e002      	b.n	fb36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    fb30:	2442      	movs	r4, #66	; 0x42
    fb32:	e7f5      	b.n	fb20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    fb34:	2500      	movs	r5, #0
    fb36:	a801      	add	r0, sp, #4
    fb38:	f7f4 ff28 	bl	498c <mpsl_fem_lna_is_configured>
    fb3c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb40:	b100      	cbz	r0, fb44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
    fb42:	2001      	movs	r0, #1
    fb44:	4305      	orrs	r5, r0
    fb46:	d000      	beq.n	fb4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
    fb48:	3409      	adds	r4, #9
    fb4a:	4620      	mov	r0, r4
    fb4c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fb4e:	206b      	movs	r0, #107	; 0x6b
    fb50:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fb52:	b570      	push	{r4, r5, r6, lr}
    fb54:	4604      	mov	r4, r0
    fb56:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    fb5a:	2500      	movs	r5, #0
    fb5c:	b138      	cbz	r0, fb6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
    fb5e:	f7f7 fba1 	bl	72a4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    fb62:	f242 7110 	movw	r1, #10000	; 0x2710
    fb66:	fbb0 f2f1 	udiv	r2, r0, r1
    fb6a:	fb01 0512 	mls	r5, r1, r2, r0
    fb6e:	4620      	mov	r0, r4
    fb70:	f7ff fc48 	bl	f404 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fb74:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
    fb78:	4428      	add	r0, r5
    fb7a:	34e0      	adds	r4, #224	; 0xe0
    fb7c:	2500      	movs	r5, #0
    fb7e:	1882      	adds	r2, r0, r2
    fb80:	eb45 0001 	adc.w	r0, r5, r1
    fb84:	e9c4 2004 	strd	r2, r0, [r4, #16]
    fb88:	f804 5b0b 	strb.w	r5, [r4], #11
    fb8c:	2001      	movs	r0, #1
    fb8e:	f804 0901 	strb.w	r0, [r4], #-1
    fb92:	2002      	movs	r0, #2
    fb94:	f804 09ea 	strb.w	r0, [r4], #-234
    fb98:	4620      	mov	r0, r4
    fb9a:	f7ff ffb3 	bl	fb04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    fb9e:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    fba2:	4620      	mov	r0, r4
    fba4:	f7ff ff07 	bl	f9b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    fba8:	b930      	cbnz	r0, fbb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
    fbaa:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    fbae:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    fbb2:	f7ff ffa5 	bl	fb00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    fbb6:	b128      	cbz	r0, fbc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
    fbb8:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    fbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fbc0:	f7ff bf2a 	b.w	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    fbc4:	f240 61ef 	movw	r1, #1775	; 0x6ef
    fbc8:	2030      	movs	r0, #48	; 0x30
    fbca:	f7f5 f81d 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbce:	b510      	push	{r4, lr}
    fbd0:	4604      	mov	r4, r0
    fbd2:	2000      	movs	r0, #0
    fbd4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    fbd8:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    fbdc:	f7f3 f950 	bl	2e80 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fbe0:	2020      	movs	r0, #32
    fbe2:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    fbe6:	bd10      	pop	{r4, pc}
    fbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fbec:	4604      	mov	r4, r0
    fbee:	2500      	movs	r5, #0
    fbf0:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    fbf4:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
    fbf8:	4689      	mov	r9, r1
    fbfa:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
    fbfe:	f04f 0801 	mov.w	r8, #1
    fc02:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
    fc06:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    fc0a:	4641      	mov	r1, r8
    fc0c:	34c0      	adds	r4, #192	; 0xc0
    fc0e:	f7f6 ff0b 	bl	6a28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fc12:	6860      	ldr	r0, [r4, #4]
    fc14:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    fc18:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
    fc1c:	6861      	ldr	r1, [r4, #4]
    fc1e:	7820      	ldrb	r0, [r4, #0]
    fc20:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
    fc24:	6861      	ldr	r1, [r4, #4]
    fc26:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
    fc2a:	6860      	ldr	r0, [r4, #4]
    fc2c:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
    fc30:	6864      	ldr	r4, [r4, #4]
    fc32:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
    fc36:	2300      	movs	r3, #0
    fc38:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
    fc3c:	461a      	mov	r2, r3
    fc3e:	4619      	mov	r1, r3
    fc40:	4620      	mov	r0, r4
    fc42:	9500      	str	r5, [sp, #0]
    fc44:	f7f8 fc7c 	bl	8540 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fc48:	b120      	cbz	r0, fc54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
    fc4a:	f240 211d 	movw	r1, #541	; 0x21d
    fc4e:	2030      	movs	r0, #48	; 0x30
    fc50:	f7f4 ffda 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc54:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    fc58:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
    fc5c:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
    fc60:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
    fc64:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
    fc68:	347c      	adds	r4, #124	; 0x7c
    fc6a:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
    fc6e:	8820      	ldrh	r0, [r4, #0]
    fc70:	1e40      	subs	r0, r0, #1
    fc72:	8020      	strh	r0, [r4, #0]
    fc74:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
    fc78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc7c:	f7ff becc 	b.w	fa18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    fc80:	b570      	push	{r4, r5, r6, lr}
    fc82:	b140      	cbz	r0, fc96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
    fc84:	2909      	cmp	r1, #9
    fc86:	d248      	bcs.n	fd1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    fc88:	e8df f001 	tbb	[pc, r1]
    fc8c:	3b3b1507 	.word	0x3b3b1507
    fc90:	3f294737 	.word	0x3f294737
    fc94:	0043      	.short	0x0043
    fc96:	21ca      	movs	r1, #202	; 0xca
    fc98:	e03c      	b.n	fd14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fc9a:	4604      	mov	r4, r0
    fc9c:	f7f7 fc52 	bl	7544 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    fca0:	b110      	cbz	r0, fca8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    fca2:	f240 2179 	movw	r1, #633	; 0x279
    fca6:	e035      	b.n	fd14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fca8:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    fcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fcb0:	38ff      	subs	r0, #255	; 0xff
    fcb2:	f7f3 bb17 	b.w	32e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    fcb6:	4605      	mov	r5, r0
    fcb8:	f7ff fbcd 	bl	f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fcbc:	b9a8      	cbnz	r0, fcea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    fcbe:	4628      	mov	r0, r5
    fcc0:	f7ff fe73 	bl	f9aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    fcc4:	4604      	mov	r4, r0
    fcc6:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
    fcca:	42a0      	cmp	r0, r4
    fccc:	d20b      	bcs.n	fce6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fcce:	1a20      	subs	r0, r4, r0
    fcd0:	2103      	movs	r1, #3
    fcd2:	f7f2 fa13 	bl	20fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    fcd6:	b130      	cbz	r0, fce6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fcd8:	4628      	mov	r0, r5
    fcda:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    fcde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fce2:	f7ff bb4b 	b.w	f37c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    fce6:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    fcea:	4628      	mov	r0, r5
    fcec:	f7f7 fc46 	bl	757c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    fcf0:	2800      	cmp	r0, #0
    fcf2:	d014      	beq.n	fd1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
    fcf4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    fcf8:	e00c      	b.n	fd14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fcfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fcfe:	f7fc b877 	b.w	bdf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fd02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd06:	f7ff bdeb 	b.w	f8e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    fd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd0e:	f7ff be43 	b.w	f998 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    fd12:	21ea      	movs	r1, #234	; 0xea
    fd14:	2030      	movs	r0, #48	; 0x30
    fd16:	f7f4 ff77 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd1a:	21ee      	movs	r1, #238	; 0xee
    fd1c:	e7fa      	b.n	fd14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fd1e:	bd70      	pop	{r4, r5, r6, pc}
    fd20:	b510      	push	{r4, lr}
    fd22:	0004      	movs	r4, r0
    fd24:	d008      	beq.n	fd38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
    fd26:	2909      	cmp	r1, #9
    fd28:	d25e      	bcs.n	fde8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
    fd2a:	e8df f001 	tbb	[pc, r1]
    fd2e:	3807      	.short	0x3807
    fd30:	5d3c4040 	.word	0x5d3c4040
    fd34:	00594c45 	.word	0x00594c45
    fd38:	2193      	movs	r1, #147	; 0x93
    fd3a:	e052      	b.n	fde2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fd3c:	2100      	movs	r1, #0
    fd3e:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
    fd42:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
    fd46:	4620      	mov	r0, r4
    fd48:	b189      	cbz	r1, fd6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
    fd4a:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    fd4e:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    fd52:	428a      	cmp	r2, r1
    fd54:	d106      	bne.n	fd64 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
    fd56:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
    fd5a:	1a51      	subs	r1, r2, r1
    fd5c:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fd60:	4611      	mov	r1, r2
    fd62:	e00d      	b.n	fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fd64:	1a51      	subs	r1, r2, r1
    fd66:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fd6a:	b291      	uxth	r1, r2
    fd6c:	e008      	b.n	fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fd6e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fd72:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    fd76:	1a89      	subs	r1, r1, r2
    fd78:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fd7c:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fd80:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    fd84:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
    fd88:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    fd8c:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
    fd90:	f7f8 febe 	bl	8b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    fd94:	4620      	mov	r0, r4
    fd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd9a:	f7f8 bddb 	b.w	8954 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    fd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fda2:	f000 b925 	b.w	fff0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    fda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdaa:	f7fc b821 	b.w	bdf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fdae:	4620      	mov	r0, r4
    fdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdb4:	f000 b827 	b.w	fe06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
    fdb8:	2001      	movs	r0, #1
    fdba:	f7f2 f98f 	bl	20dc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    fdbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdc2:	f7fe bbdc 	b.w	e57e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    fdc6:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    fdca:	2804      	cmp	r0, #4
    fdcc:	d001      	beq.n	fdd2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
    fdce:	21b5      	movs	r1, #181	; 0xb5
    fdd0:	e007      	b.n	fde2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fdd2:	4620      	mov	r0, r4
    fdd4:	f7ff fefb 	bl	fbce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    fdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fddc:	f7f7 b8ec 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fde0:	21be      	movs	r1, #190	; 0xbe
    fde2:	2030      	movs	r0, #48	; 0x30
    fde4:	f7f4 ff10 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fde8:	21c2      	movs	r1, #194	; 0xc2
    fdea:	e7fa      	b.n	fde2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fdec:	b510      	push	{r4, lr}
    fdee:	f7fb ff21 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdf2:	f64d 7141 	movw	r1, #57153	; 0xdf41
    fdf6:	4408      	add	r0, r1
    fdf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdfc:	fbb0 f0f1 	udiv	r0, r0, r1
    fe00:	f200 1079 	addw	r0, r0, #377	; 0x179
    fe04:	bd10      	pop	{r4, pc}
    fe06:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe08:	4604      	mov	r4, r0
    fe0a:	f7f3 fb25 	bl	3458 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fe0e:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    fe12:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    fe16:	1ac0      	subs	r0, r0, r3
    fe18:	eb61 0102 	sbc.w	r1, r1, r2
    fe1c:	2200      	movs	r2, #0
    fe1e:	4613      	mov	r3, r2
    fe20:	1a12      	subs	r2, r2, r0
    fe22:	418b      	sbcs	r3, r1
    fe24:	db02      	blt.n	fe2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
    fe26:	f240 6111 	movw	r1, #1553	; 0x611
    fe2a:	e052      	b.n	fed2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fe2c:	1c42      	adds	r2, r0, #1
    fe2e:	f171 0100 	sbcs.w	r1, r1, #0
    fe32:	db02      	blt.n	fe3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
    fe34:	f240 6112 	movw	r1, #1554	; 0x612
    fe38:	e04b      	b.n	fed2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fe3a:	6922      	ldr	r2, [r4, #16]
    fe3c:	2100      	movs	r1, #0
    fe3e:	b10a      	cbz	r2, fe44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    fe40:	fbb0 f1f2 	udiv	r1, r0, r2
    fe44:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fe48:	280d      	cmp	r0, #13
    fe4a:	d00c      	beq.n	fe66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
    fe4c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    fe50:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
    fe54:	1843      	adds	r3, r0, r1
    fe56:	1ad3      	subs	r3, r2, r3
    fe58:	b21b      	sxth	r3, r3
    fe5a:	2b00      	cmp	r3, #0
    fe5c:	db06      	blt.n	fe6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
    fe5e:	1c52      	adds	r2, r2, #1
    fe60:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
    fe64:	e006      	b.n	fe74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
    fe66:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fe6a:	e012      	b.n	fe92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
    fe6c:	1c49      	adds	r1, r1, #1
    fe6e:	4408      	add	r0, r1
    fe70:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fe74:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
    fe78:	f88d 0000 	strb.w	r0, [sp]
    fe7c:	9800      	ldr	r0, [sp, #0]
    fe7e:	9000      	str	r0, [sp, #0]
    fe80:	f89d 0000 	ldrb.w	r0, [sp]
    fe84:	b940      	cbnz	r0, fe98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fe86:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fe8a:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    fe8e:	4288      	cmp	r0, r1
    fe90:	d102      	bne.n	fe98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fe92:	1c40      	adds	r0, r0, #1
    fe94:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fe98:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    fe9c:	1c40      	adds	r0, r0, #1
    fe9e:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    fea2:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    fea6:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    feaa:	1a40      	subs	r0, r0, r1
    feac:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    feb0:	1e40      	subs	r0, r0, #1
    feb2:	4408      	add	r0, r1
    feb4:	b285      	uxth	r5, r0
    feb6:	e026      	b.n	ff06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    feb8:	a801      	add	r0, sp, #4
    feba:	2300      	movs	r3, #0
    febc:	9000      	str	r0, [sp, #0]
    febe:	461a      	mov	r2, r3
    fec0:	4620      	mov	r0, r4
    fec2:	f7f8 fb3d 	bl	8540 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fec6:	2800      	cmp	r0, #0
    fec8:	d03b      	beq.n	ff42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
    feca:	2801      	cmp	r0, #1
    fecc:	d004      	beq.n	fed8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    fece:	f240 6151 	movw	r1, #1617	; 0x651
    fed2:	2030      	movs	r0, #48	; 0x30
    fed4:	f7f4 fe98 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fed8:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fedc:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
    fee0:	1a42      	subs	r2, r0, r1
    fee2:	b212      	sxth	r2, r2
    fee4:	2a00      	cmp	r2, #0
    fee6:	da09      	bge.n	fefc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fee8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    feec:	4402      	add	r2, r0
    feee:	1aaa      	subs	r2, r5, r2
    fef0:	b212      	sxth	r2, r2
    fef2:	2a00      	cmp	r2, #0
    fef4:	da02      	bge.n	fefc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fef6:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
    fefa:	e004      	b.n	ff06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    fefc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ff00:	4408      	add	r0, r1
    ff02:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    ff06:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
    ff0a:	1a68      	subs	r0, r5, r1
    ff0c:	b200      	sxth	r0, r0
    ff0e:	2800      	cmp	r0, #0
    ff10:	dad2      	bge.n	feb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ff12:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    ff16:	b190      	cbz	r0, ff3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
    ff18:	2008      	movs	r0, #8
    ff1a:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
    ff1e:	2208      	movs	r2, #8
    ff20:	4621      	mov	r1, r4
    ff22:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    ff26:	f7f6 ff75 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ff2a:	4620      	mov	r0, r4
    ff2c:	f000 f862 	bl	fff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ff30:	4620      	mov	r0, r4
    ff32:	f7ff fe4c 	bl	fbce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    ff36:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ff3a:	f7f7 b83d 	b.w	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ff3e:	203e      	movs	r0, #62	; 0x3e
    ff40:	e7eb      	b.n	ff1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
    ff42:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ff44:	00fa01f4 	.word	0x00fa01f4
    ff48:	00640096 	.word	0x00640096
    ff4c:	0032004b 	.word	0x0032004b
    ff50:	0014001e 	.word	0x0014001e
    ff54:	0005000a 	.word	0x0005000a
    ff58:	00010002 	.word	0x00010002
    ff5c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ff60:	f001 0307 	and.w	r3, r1, #7
    ff64:	7802      	ldrb	r2, [r0, #0]
    ff66:	2101      	movs	r1, #1
    ff68:	4099      	lsls	r1, r3
    ff6a:	438a      	bics	r2, r1
    ff6c:	7002      	strb	r2, [r0, #0]
    ff6e:	4770      	bx	lr
    ff70:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ff74:	f001 0307 	and.w	r3, r1, #7
    ff78:	7802      	ldrb	r2, [r0, #0]
    ff7a:	2101      	movs	r1, #1
    ff7c:	4099      	lsls	r1, r3
    ff7e:	430a      	orrs	r2, r1
    ff80:	7002      	strb	r2, [r0, #0]
    ff82:	4770      	bx	lr

0000ff84 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    ff84:	b510      	push	{r4, lr}
    ff86:	4604      	mov	r4, r0
    ff88:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
    ff8c:	6921      	ldr	r1, [r4, #16]
    ff8e:	4288      	cmp	r0, r1
    ff90:	d109      	bne.n	ffa6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ff92:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
    ff96:	8b22      	ldrh	r2, [r4, #24]
    ff98:	4291      	cmp	r1, r2
    ff9a:	d104      	bne.n	ffa6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    ff9c:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
    ffa0:	8b62      	ldrh	r2, [r4, #26]
    ffa2:	4291      	cmp	r1, r2
    ffa4:	d016      	beq.n	ffd4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
    ffa6:	8821      	ldrh	r1, [r4, #0]
    ffa8:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
    ffac:	f7fe fb6e 	bl	e68c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ffb0:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
    ffb4:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    ffb8:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
    ffbc:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    ffc0:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
    ffc4:	2206      	movs	r2, #6
    ffc6:	4621      	mov	r1, r4
    ffc8:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
    ffcc:	f7f6 ff22 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ffd0:	f7f6 fff2 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ffd4:	2102      	movs	r1, #2
    ffd6:	4620      	mov	r0, r4
    ffd8:	f7f6 fd26 	bl	6a28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ffdc:	2000      	movs	r0, #0
    ffde:	f804 0f86 	strb.w	r0, [r4, #134]!
    ffe2:	2003      	movs	r0, #3
    ffe4:	7120      	strb	r0, [r4, #4]
    ffe6:	bd10      	pop	{r4, pc}

0000ffe8 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ffe8:	f7f5 b9c2 	b.w	5370 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ffec <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ffec:	2000      	movs	r0, #0
    ffee:	4770      	bx	lr

0000fff0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    fff0:	f7f5 be7e 	b.w	5cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000fff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    fff4:	2100      	movs	r1, #0
    fff6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    fffa:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    fffe:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   10002:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
   10006:	b109      	cbz	r1, 1000c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   10008:	2102      	movs	r1, #2
   1000a:	e000      	b.n	1000e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1000c:	2103      	movs	r1, #3
   1000e:	f7f8 b95d 	b.w	82cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   10012:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   10016:	28fe      	cmp	r0, #254	; 0xfe
   10018:	d001      	beq.n	1001e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   1001a:	2001      	movs	r0, #1
   1001c:	4770      	bx	lr
   1001e:	2000      	movs	r0, #0
   10020:	4770      	bx	lr
   10022:	b510      	push	{r4, lr}
   10024:	2801      	cmp	r0, #1
   10026:	d006      	beq.n	10036 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   10028:	2802      	cmp	r0, #2
   1002a:	d004      	beq.n	10036 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1002c:	f240 21a9 	movw	r1, #681	; 0x2a9
   10030:	2006      	movs	r0, #6
   10032:	f7f4 fde9 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10036:	bd10      	pop	{r4, pc}
   10038:	2801      	cmp	r0, #1
   1003a:	d002      	beq.n	10042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1003c:	2802      	cmp	r0, #2
   1003e:	d105      	bne.n	1004c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10040:	e002      	b.n	10048 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   10042:	2901      	cmp	r1, #1
   10044:	d004      	beq.n	10050 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10046:	e001      	b.n	1004c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10048:	2902      	cmp	r1, #2
   1004a:	d001      	beq.n	10050 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1004c:	2000      	movs	r0, #0
   1004e:	4770      	bx	lr
   10050:	2001      	movs	r0, #1
   10052:	4770      	bx	lr
   10054:	1a40      	subs	r0, r0, r1
   10056:	b200      	sxth	r0, r0
   10058:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1005c:	4288      	cmp	r0, r1
   1005e:	dc01      	bgt.n	10064 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   10060:	2800      	cmp	r0, #0
   10062:	dc01      	bgt.n	10068 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   10064:	2001      	movs	r0, #1
   10066:	4770      	bx	lr
   10068:	2000      	movs	r0, #0
   1006a:	4770      	bx	lr
   1006c:	4602      	mov	r2, r0
   1006e:	2000      	movs	r0, #0
   10070:	2a16      	cmp	r2, #22
   10072:	d102      	bne.n	1007a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   10074:	4608      	mov	r0, r1
   10076:	f7f9 bd23 	b.w	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   1007a:	4770      	bx	lr
   1007c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10080:	f001 0107 	and.w	r1, r1, #7
   10084:	7800      	ldrb	r0, [r0, #0]
   10086:	40c8      	lsrs	r0, r1
   10088:	f000 0001 	and.w	r0, r0, #1
   1008c:	4770      	bx	lr
   1008e:	b118      	cbz	r0, 10098 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10090:	2802      	cmp	r0, #2
   10092:	d001      	beq.n	10098 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10094:	2001      	movs	r0, #1
   10096:	4770      	bx	lr
   10098:	2000      	movs	r0, #0
   1009a:	4770      	bx	lr

0001009c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1009c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1009e:	7881      	ldrb	r1, [r0, #2]
   100a0:	4604      	mov	r4, r0
   100a2:	291a      	cmp	r1, #26
   100a4:	d025      	beq.n	100f2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   100a6:	dc0e      	bgt.n	100c6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   100a8:	2916      	cmp	r1, #22
   100aa:	d22c      	bcs.n	10106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   100ac:	e8df f001 	tbb	[pc, r1]
   100b0:	2b2b2b2b 	.word	0x2b2b2b2b
   100b4:	2b2b212b 	.word	0x2b2b212b
   100b8:	2b2b2b2b 	.word	0x2b2b2b2b
   100bc:	2b2b2b2b 	.word	0x2b2b2b2b
   100c0:	212b2b2b 	.word	0x212b2b2b
   100c4:	2121      	.short	0x2121
   100c6:	292a      	cmp	r1, #42	; 0x2a
   100c8:	d01d      	beq.n	10106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   100ca:	dc0b      	bgt.n	100e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   100cc:	f1a1 011e 	sub.w	r1, r1, #30
   100d0:	290c      	cmp	r1, #12
   100d2:	d218      	bcs.n	10106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   100d4:	e8df f001 	tbb	[pc, r1]
   100d8:	17171717 	.word	0x17171717
   100dc:	17171717 	.word	0x17171717
   100e0:	0d171717 	.word	0x0d171717
   100e4:	393a      	subs	r1, #58	; 0x3a
   100e6:	2904      	cmp	r1, #4
   100e8:	d20d      	bcs.n	10106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   100ea:	e8df f001 	tbb	[pc, r1]
   100ee:	020c      	.short	0x020c
   100f0:	020c      	.short	0x020c
   100f2:	8820      	ldrh	r0, [r4, #0]
   100f4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   100f8:	d205      	bcs.n	10106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   100fa:	4669      	mov	r1, sp
   100fc:	f7fe fab5 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10100:	b118      	cbz	r0, 1010a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   10102:	2002      	movs	r0, #2
   10104:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10106:	2012      	movs	r0, #18
   10108:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1010a:	9801      	ldr	r0, [sp, #4]
   1010c:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   10110:	f88d 1008 	strb.w	r1, [sp, #8]
   10114:	9902      	ldr	r1, [sp, #8]
   10116:	9102      	str	r1, [sp, #8]
   10118:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1011c:	f500 708c 	add.w	r0, r0, #280	; 0x118
   10120:	b109      	cbz	r1, 10126 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10122:	200c      	movs	r0, #12
   10124:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10126:	21ff      	movs	r1, #255	; 0xff
   10128:	7001      	strb	r1, [r0, #0]
   1012a:	78a1      	ldrb	r1, [r4, #2]
   1012c:	7041      	strb	r1, [r0, #1]
   1012e:	4668      	mov	r0, sp
   10130:	f7fe fe5a 	bl	ede8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10134:	2000      	movs	r0, #0
   10136:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010138 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   10138:	b510      	push	{r4, lr}
   1013a:	4604      	mov	r4, r0
   1013c:	7800      	ldrb	r0, [r0, #0]
   1013e:	b118      	cbz	r0, 10148 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10140:	2801      	cmp	r0, #1
   10142:	d001      	beq.n	10148 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10144:	2012      	movs	r0, #18
   10146:	bd10      	pop	{r4, pc}
   10148:	f000 fe04 	bl	10d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   1014c:	b120      	cbz	r0, 10158 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1014e:	f7f6 fa47 	bl	65e0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10152:	b108      	cbz	r0, 10158 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10154:	200c      	movs	r0, #12
   10156:	bd10      	pop	{r4, pc}
   10158:	7820      	ldrb	r0, [r4, #0]
   1015a:	f7ff ff98 	bl	1008e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1015e:	1de2      	adds	r2, r4, #7
   10160:	f104 0317 	add.w	r3, r4, #23
   10164:	1c61      	adds	r1, r4, #1
   10166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1016a:	f7f6 ba6b 	b.w	6644 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001016e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1016e:	b510      	push	{r4, lr}
   10170:	4604      	mov	r4, r0
   10172:	f000 fe5f 	bl	10e34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10176:	b108      	cbz	r0, 1017c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   10178:	200c      	movs	r0, #12
   1017a:	bd10      	pop	{r4, pc}
   1017c:	7820      	ldrb	r0, [r4, #0]
   1017e:	b118      	cbz	r0, 10188 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10180:	2801      	cmp	r0, #1
   10182:	d001      	beq.n	10188 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10184:	2012      	movs	r0, #18
   10186:	bd10      	pop	{r4, pc}
   10188:	f7ff ff81 	bl	1008e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1018c:	1c61      	adds	r1, r4, #1
   1018e:	f7f6 fad1 	bl	6734 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   10192:	b108      	cbz	r0, 10198 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10194:	2000      	movs	r0, #0
   10196:	bd10      	pop	{r4, pc}
   10198:	2007      	movs	r0, #7
   1019a:	bd10      	pop	{r4, pc}

0001019c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   1019c:	b510      	push	{r4, lr}
   1019e:	f000 fdd9 	bl	10d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   101a2:	b120      	cbz	r0, 101ae <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   101a4:	f7f6 fa1c 	bl	65e0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   101a8:	b108      	cbz	r0, 101ae <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   101aa:	200c      	movs	r0, #12
   101ac:	bd10      	pop	{r4, pc}
   101ae:	f7f6 fa8f 	bl	66d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   101b2:	2000      	movs	r0, #0
   101b4:	bd10      	pop	{r4, pc}

000101b6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   101b6:	b510      	push	{r4, lr}
   101b8:	f000 fe3c 	bl	10e34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   101bc:	b108      	cbz	r0, 101c2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   101be:	200c      	movs	r0, #12
   101c0:	bd10      	pop	{r4, pc}
   101c2:	f7f6 fadf 	bl	6784 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   101c6:	2000      	movs	r0, #0
   101c8:	bd10      	pop	{r4, pc}

000101ca <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   101ca:	b510      	push	{r4, lr}
   101cc:	460b      	mov	r3, r1
   101ce:	2201      	movs	r2, #1
   101d0:	f100 0110 	add.w	r1, r0, #16
   101d4:	f7fe fa2b 	bl	e62e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   101d8:	2000      	movs	r0, #0
   101da:	bd10      	pop	{r4, pc}

000101dc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   101dc:	b510      	push	{r4, lr}
   101de:	8800      	ldrh	r0, [r0, #0]
   101e0:	2100      	movs	r1, #0
   101e2:	f7fd ffa5 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   101e6:	b118      	cbz	r0, 101f0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   101e8:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   101ec:	b111      	cbz	r1, 101f4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   101ee:	e007      	b.n	10200 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   101f0:	2002      	movs	r0, #2
   101f2:	bd10      	pop	{r4, pc}
   101f4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   101f8:	2914      	cmp	r1, #20
   101fa:	d003      	beq.n	10204 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   101fc:	2915      	cmp	r1, #21
   101fe:	d001      	beq.n	10204 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10200:	200c      	movs	r0, #12
   10202:	bd10      	pop	{r4, pc}
   10204:	2102      	movs	r1, #2
   10206:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   1020a:	2000      	movs	r0, #0
   1020c:	bd10      	pop	{r4, pc}

0001020e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   1020e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10210:	4605      	mov	r5, r0
   10212:	8800      	ldrh	r0, [r0, #0]
   10214:	2100      	movs	r1, #0
   10216:	f7fd ff8b 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1021a:	0004      	movs	r4, r0
   1021c:	d003      	beq.n	10226 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   1021e:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   10222:	b110      	cbz	r0, 1022a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10224:	e011      	b.n	1024a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10226:	2002      	movs	r0, #2
   10228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1022a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1022e:	2814      	cmp	r0, #20
   10230:	d001      	beq.n	10236 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   10232:	2815      	cmp	r0, #21
   10234:	d109      	bne.n	1024a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10236:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   1023a:	f88d 0000 	strb.w	r0, [sp]
   1023e:	9800      	ldr	r0, [sp, #0]
   10240:	9000      	str	r0, [sp, #0]
   10242:	f89d 0000 	ldrb.w	r0, [sp]
   10246:	2601      	movs	r6, #1
   10248:	b108      	cbz	r0, 1024e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   1024a:	200c      	movs	r0, #12
   1024c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1024e:	2210      	movs	r2, #16
   10250:	1ca9      	adds	r1, r5, #2
   10252:	f204 2059 	addw	r0, r4, #601	; 0x259
   10256:	f7fc ff39 	bl	d0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1025a:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   1025e:	2000      	movs	r0, #0
   10260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010262 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10262:	b510      	push	{r4, lr}
   10264:	2108      	movs	r1, #8
   10266:	f7f4 fd7b 	bl	4d60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1026a:	2000      	movs	r0, #0
   1026c:	bd10      	pop	{r4, pc}

0001026e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1026e:	b510      	push	{r4, lr}
   10270:	4604      	mov	r4, r0
   10272:	f7fa fe03 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10276:	f7ff f8f8 	bl	f46a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1027a:	7020      	strb	r0, [r4, #0]
   1027c:	2000      	movs	r0, #0
   1027e:	bd10      	pop	{r4, pc}

00010280 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10280:	21fb      	movs	r1, #251	; 0xfb
   10282:	8001      	strh	r1, [r0, #0]
   10284:	f640 0248 	movw	r2, #2120	; 0x848
   10288:	8042      	strh	r2, [r0, #2]
   1028a:	8081      	strh	r1, [r0, #4]
   1028c:	80c2      	strh	r2, [r0, #6]
   1028e:	2000      	movs	r0, #0
   10290:	4770      	bx	lr

00010292 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10292:	b51c      	push	{r2, r3, r4, lr}
   10294:	8800      	ldrh	r0, [r0, #0]
   10296:	4669      	mov	r1, sp
   10298:	f7fe f9e7 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1029c:	2800      	cmp	r0, #0
   1029e:	d10d      	bne.n	102bc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   102a0:	f89d 0000 	ldrb.w	r0, [sp]
   102a4:	9c01      	ldr	r4, [sp, #4]
   102a6:	2801      	cmp	r0, #1
   102a8:	f504 748c 	add.w	r4, r4, #280	; 0x118
   102ac:	d103      	bne.n	102b6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   102ae:	9801      	ldr	r0, [sp, #4]
   102b0:	f000 fd3a 	bl	10d28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   102b4:	b118      	cbz	r0, 102be <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   102b6:	7ce0      	ldrb	r0, [r4, #19]
   102b8:	b118      	cbz	r0, 102c2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   102ba:	203a      	movs	r0, #58	; 0x3a
   102bc:	bd1c      	pop	{r2, r3, r4, pc}
   102be:	2002      	movs	r0, #2
   102c0:	bd1c      	pop	{r2, r3, r4, pc}
   102c2:	2001      	movs	r0, #1
   102c4:	74e0      	strb	r0, [r4, #19]
   102c6:	2000      	movs	r0, #0
   102c8:	bd1c      	pop	{r2, r3, r4, pc}

000102ca <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   102ca:	2108      	movs	r1, #8
   102cc:	7001      	strb	r1, [r0, #0]
   102ce:	2000      	movs	r0, #0
   102d0:	4770      	bx	lr

000102d2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   102d2:	b510      	push	{r4, lr}
   102d4:	4604      	mov	r4, r0
   102d6:	20d8      	movs	r0, #216	; 0xd8
   102d8:	7020      	strb	r0, [r4, #0]
   102da:	f000 fd22 	bl	10d22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   102de:	7060      	strb	r0, [r4, #1]
   102e0:	2000      	movs	r0, #0
   102e2:	bd10      	pop	{r4, pc}

000102e4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   102e4:	2108      	movs	r1, #8
   102e6:	7001      	strb	r1, [r0, #0]
   102e8:	2000      	movs	r0, #0
   102ea:	4770      	bx	lr

000102ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   102ec:	b510      	push	{r4, lr}
   102ee:	4604      	mov	r4, r0
   102f0:	7800      	ldrb	r0, [r0, #0]
   102f2:	b108      	cbz	r0, 102f8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   102f4:	2801      	cmp	r0, #1
   102f6:	d110      	bne.n	1031a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   102f8:	f000 fd2c 	bl	10d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   102fc:	b120      	cbz	r0, 10308 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   102fe:	f7f6 f96f 	bl	65e0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10302:	b108      	cbz	r0, 10308 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10304:	200c      	movs	r0, #12
   10306:	bd10      	pop	{r4, pc}
   10308:	7820      	ldrb	r0, [r4, #0]
   1030a:	f7ff fec0 	bl	1008e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1030e:	1c61      	adds	r1, r4, #1
   10310:	f7fe f973 	bl	e5fa <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   10314:	b108      	cbz	r0, 1031a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10316:	2000      	movs	r0, #0
   10318:	bd10      	pop	{r4, pc}
   1031a:	2012      	movs	r0, #18
   1031c:	bd10      	pop	{r4, pc}

0001031e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1031e:	b510      	push	{r4, lr}
   10320:	4604      	mov	r4, r0
   10322:	f000 fd87 	bl	10e34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10326:	b108      	cbz	r0, 1032c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10328:	200c      	movs	r0, #12
   1032a:	bd10      	pop	{r4, pc}
   1032c:	7820      	ldrb	r0, [r4, #0]
   1032e:	b108      	cbz	r0, 10334 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10330:	2801      	cmp	r0, #1
   10332:	d107      	bne.n	10344 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10334:	f7ff feab 	bl	1008e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10338:	1c61      	adds	r1, r4, #1
   1033a:	f7fe f96d 	bl	e618 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1033e:	b108      	cbz	r0, 10344 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10340:	2000      	movs	r0, #0
   10342:	bd10      	pop	{r4, pc}
   10344:	2012      	movs	r0, #18
   10346:	bd10      	pop	{r4, pc}

00010348 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10348:	b510      	push	{r4, lr}
   1034a:	4604      	mov	r4, r0
   1034c:	f000 fd02 	bl	10d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10350:	b108      	cbz	r0, 10356 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   10352:	200c      	movs	r0, #12
   10354:	bd10      	pop	{r4, pc}
   10356:	7820      	ldrb	r0, [r4, #0]
   10358:	b100      	cbz	r0, 1035c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   1035a:	2001      	movs	r0, #1
   1035c:	f7f6 f93a 	bl	65d4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10360:	2000      	movs	r0, #0
   10362:	bd10      	pop	{r4, pc}

00010364 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   10364:	b51c      	push	{r2, r3, r4, lr}
   10366:	4604      	mov	r4, r0
   10368:	f7fa fd88 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   1036c:	2000      	movs	r0, #0
   1036e:	f88d 0002 	strb.w	r0, [sp, #2]
   10372:	2103      	movs	r1, #3
   10374:	f88d 1001 	strb.w	r1, [sp, #1]
   10378:	f814 1b01 	ldrb.w	r1, [r4], #1
   1037c:	f88d 1003 	strb.w	r1, [sp, #3]
   10380:	f88d 0000 	strb.w	r0, [sp]
   10384:	4668      	mov	r0, sp
   10386:	9401      	str	r4, [sp, #4]
   10388:	f000 f99c 	bl	106c4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   1038c:	bd1c      	pop	{r2, r3, r4, pc}

0001038e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   1038e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10390:	4605      	mov	r5, r0
   10392:	f7fa fd73 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10396:	4606      	mov	r6, r0
   10398:	7828      	ldrb	r0, [r5, #0]
   1039a:	2400      	movs	r4, #0
   1039c:	b160      	cbz	r0, 103b8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   1039e:	f88d 4000 	strb.w	r4, [sp]
   103a2:	2001      	movs	r0, #1
   103a4:	f10d 0101 	add.w	r1, sp, #1
   103a8:	f7f5 fae4 	bl	5974 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   103ac:	b120      	cbz	r0, 103b8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   103ae:	4668      	mov	r0, sp
   103b0:	f000 f897 	bl	104e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   103b4:	2800      	cmp	r0, #0
   103b6:	d112      	bne.n	103de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   103b8:	f88d 400c 	strb.w	r4, [sp, #12]
   103bc:	4630      	mov	r0, r6
   103be:	f7ff f84a 	bl	f456 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   103c2:	b118      	cbz	r0, 103cc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   103c4:	2080      	movs	r0, #128	; 0x80
   103c6:	f8ad 000d 	strh.w	r0, [sp, #13]
   103ca:	e001      	b.n	103d0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   103cc:	f8ad 400d 	strh.w	r4, [sp, #13]
   103d0:	f88d 400f 	strb.w	r4, [sp, #15]
   103d4:	7828      	ldrb	r0, [r5, #0]
   103d6:	2801      	cmp	r0, #1
   103d8:	d003      	beq.n	103e2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   103da:	b138      	cbz	r0, 103ec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   103dc:	2012      	movs	r0, #18
   103de:	b004      	add	sp, #16
   103e0:	bd70      	pop	{r4, r5, r6, pc}
   103e2:	a903      	add	r1, sp, #12
   103e4:	4630      	mov	r0, r6
   103e6:	f7fa fd67 	bl	aeb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   103ea:	e7f8      	b.n	103de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   103ec:	4630      	mov	r0, r6
   103ee:	f000 fcb8 	bl	10d62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f8>
   103f2:	e7f4      	b.n	103de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

000103f4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   103f4:	b530      	push	{r4, r5, lr}
   103f6:	b08b      	sub	sp, #44	; 0x2c
   103f8:	4604      	mov	r4, r0
   103fa:	f7fa fd3f 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   103fe:	4602      	mov	r2, r0
   10400:	7920      	ldrb	r0, [r4, #4]
   10402:	2804      	cmp	r0, #4
   10404:	d803      	bhi.n	1040e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10406:	8860      	ldrh	r0, [r4, #2]
   10408:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1040c:	d902      	bls.n	10414 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   1040e:	2012      	movs	r0, #18
   10410:	b00b      	add	sp, #44	; 0x2c
   10412:	bd30      	pop	{r4, r5, pc}
   10414:	2500      	movs	r5, #0
   10416:	f88d 5004 	strb.w	r5, [sp, #4]
   1041a:	7921      	ldrb	r1, [r4, #4]
   1041c:	9500      	str	r5, [sp, #0]
   1041e:	f89d 0000 	ldrb.w	r0, [sp]
   10422:	2905      	cmp	r1, #5
   10424:	f040 0010 	orr.w	r0, r0, #16
   10428:	f88d 0000 	strb.w	r0, [sp]
   1042c:	d254      	bcs.n	104d8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   1042e:	e8df f001 	tbb	[pc, r1]
   10432:	0803      	.short	0x0803
   10434:	000b1105 	.word	0x000b1105
   10438:	f040 0001 	orr.w	r0, r0, #1
   1043c:	f040 0002 	orr.w	r0, r0, #2
   10440:	e006      	b.n	10450 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10442:	f040 0009 	orr.w	r0, r0, #9
   10446:	e001      	b.n	1044c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10448:	f040 0001 	orr.w	r0, r0, #1
   1044c:	f040 0004 	orr.w	r0, r0, #4
   10450:	f88d 0000 	strb.w	r0, [sp]
   10454:	f8bd 0000 	ldrh.w	r0, [sp]
   10458:	9000      	str	r0, [sp, #0]
   1045a:	f8bd 0000 	ldrh.w	r0, [sp]
   1045e:	f8ad 0005 	strh.w	r0, [sp, #5]
   10462:	8821      	ldrh	r1, [r4, #0]
   10464:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10468:	f361 201f 	bfi	r0, r1, #8, #24
   1046c:	f8cd 0006 	str.w	r0, [sp, #6]
   10470:	8861      	ldrh	r1, [r4, #2]
   10472:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10476:	f361 201f 	bfi	r0, r1, #8, #24
   1047a:	f8cd 0009 	str.w	r0, [sp, #9]
   1047e:	7b60      	ldrb	r0, [r4, #13]
   10480:	f88d 000d 	strb.w	r0, [sp, #13]
   10484:	7960      	ldrb	r0, [r4, #5]
   10486:	f88d 000e 	strb.w	r0, [sp, #14]
   1048a:	79a0      	ldrb	r0, [r4, #6]
   1048c:	f88d 000f 	strb.w	r0, [sp, #15]
   10490:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10494:	9004      	str	r0, [sp, #16]
   10496:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   1049a:	f8ad 0014 	strh.w	r0, [sp, #20]
   1049e:	7ba0      	ldrb	r0, [r4, #14]
   104a0:	f88d 0016 	strb.w	r0, [sp, #22]
   104a4:	207f      	movs	r0, #127	; 0x7f
   104a6:	f88d 0017 	strb.w	r0, [sp, #23]
   104aa:	2001      	movs	r0, #1
   104ac:	f88d 0018 	strb.w	r0, [sp, #24]
   104b0:	f88d 5019 	strb.w	r5, [sp, #25]
   104b4:	f88d 001a 	strb.w	r0, [sp, #26]
   104b8:	f88d 501b 	strb.w	r5, [sp, #27]
   104bc:	4610      	mov	r0, r2
   104be:	f7fe ffe6 	bl	f48e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   104c2:	f88d 001c 	strb.w	r0, [sp, #28]
   104c6:	f88d 501d 	strb.w	r5, [sp, #29]
   104ca:	f88d 501e 	strb.w	r5, [sp, #30]
   104ce:	a909      	add	r1, sp, #36	; 0x24
   104d0:	a801      	add	r0, sp, #4
   104d2:	f7fa fbaf 	bl	ac34 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   104d6:	e79b      	b.n	10410 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   104d8:	f241 01cf 	movw	r1, #4303	; 0x10cf
   104dc:	2039      	movs	r0, #57	; 0x39
   104de:	f7f4 fb93 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000104e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   104e2:	b570      	push	{r4, r5, r6, lr}
   104e4:	4604      	mov	r4, r0
   104e6:	7800      	ldrb	r0, [r0, #0]
   104e8:	2101      	movs	r1, #1
   104ea:	f7fd fe21 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   104ee:	0005      	movs	r5, r0
   104f0:	d007      	beq.n	10502 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   104f2:	f7ff f972 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104f6:	b160      	cbz	r0, 10512 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   104f8:	4628      	mov	r0, r5
   104fa:	f7fe ffb2 	bl	f462 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   104fe:	b110      	cbz	r0, 10506 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10500:	e005      	b.n	1050e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10502:	2042      	movs	r0, #66	; 0x42
   10504:	bd70      	pop	{r4, r5, r6, pc}
   10506:	4628      	mov	r0, r5
   10508:	f7fe ffa1 	bl	f44e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1050c:	b108      	cbz	r0, 10512 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1050e:	200c      	movs	r0, #12
   10510:	bd70      	pop	{r4, r5, r6, pc}
   10512:	1c61      	adds	r1, r4, #1
   10514:	4628      	mov	r0, r5
   10516:	f7fe ffb2 	bl	f47e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   1051a:	2000      	movs	r0, #0
   1051c:	bd70      	pop	{r4, r5, r6, pc}

0001051e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1051e:	b50e      	push	{r1, r2, r3, lr}
   10520:	8882      	ldrh	r2, [r0, #4]
   10522:	f244 2390 	movw	r3, #17040	; 0x4290
   10526:	429a      	cmp	r2, r3
   10528:	d901      	bls.n	1052e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   1052a:	2012      	movs	r0, #18
   1052c:	bd0e      	pop	{r1, r2, r3, pc}
   1052e:	f640 0348 	movw	r3, #2120	; 0x848
   10532:	429a      	cmp	r2, r3
   10534:	d300      	bcc.n	10538 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10536:	461a      	mov	r2, r3
   10538:	8803      	ldrh	r3, [r0, #0]
   1053a:	f8ad 3000 	strh.w	r3, [sp]
   1053e:	8843      	ldrh	r3, [r0, #2]
   10540:	f8ad 3002 	strh.w	r3, [sp, #2]
   10544:	f8ad 2004 	strh.w	r2, [sp, #4]
   10548:	8843      	ldrh	r3, [r0, #2]
   1054a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1054e:	f8ad 2008 	strh.w	r2, [sp, #8]
   10552:	8800      	ldrh	r0, [r0, #0]
   10554:	8008      	strh	r0, [r1, #0]
   10556:	4668      	mov	r0, sp
   10558:	f7fa fd80 	bl	b05c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   1055c:	bd0e      	pop	{r1, r2, r3, pc}

0001055e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1055e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10560:	4604      	mov	r4, r0
   10562:	f10d 0007 	add.w	r0, sp, #7
   10566:	9000      	str	r0, [sp, #0]
   10568:	7922      	ldrb	r2, [r4, #4]
   1056a:	78e1      	ldrb	r1, [r4, #3]
   1056c:	78a0      	ldrb	r0, [r4, #2]
   1056e:	f10d 0306 	add.w	r3, sp, #6
   10572:	f000 fc23 	bl	10dbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10576:	2800      	cmp	r0, #0
   10578:	d109      	bne.n	1058e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   1057a:	8820      	ldrh	r0, [r4, #0]
   1057c:	f8ad 0004 	strh.w	r0, [sp, #4]
   10580:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10584:	f8ad 0008 	strh.w	r0, [sp, #8]
   10588:	a801      	add	r0, sp, #4
   1058a:	f000 f956 	bl	1083a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1058e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010590 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   10590:	b510      	push	{r4, lr}
   10592:	4604      	mov	r4, r0
   10594:	f000 fbde 	bl	10d54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10598:	b120      	cbz	r0, 105a4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1059a:	f7f6 f821 	bl	65e0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1059e:	b108      	cbz	r0, 105a4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   105a0:	200c      	movs	r0, #12
   105a2:	bd10      	pop	{r4, pc}
   105a4:	7820      	ldrb	r0, [r4, #0]
   105a6:	f7ff fd72 	bl	1008e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   105aa:	79e2      	ldrb	r2, [r4, #7]
   105ac:	1c61      	adds	r1, r4, #1
   105ae:	f7f5 ffc5 	bl	653c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   105b2:	b108      	cbz	r0, 105b8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   105b4:	2000      	movs	r0, #0
   105b6:	bd10      	pop	{r4, pc}
   105b8:	2002      	movs	r0, #2
   105ba:	bd10      	pop	{r4, pc}

000105bc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   105bc:	b510      	push	{r4, lr}
   105be:	4604      	mov	r4, r0
   105c0:	2001      	movs	r0, #1
   105c2:	f000 fa8c 	bl	10ade <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   105c6:	b128      	cbz	r0, 105d4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   105c8:	4621      	mov	r1, r4
   105ca:	2001      	movs	r0, #1
   105cc:	f7f5 f9ea 	bl	59a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   105d0:	2000      	movs	r0, #0
   105d2:	bd10      	pop	{r4, pc}
   105d4:	200c      	movs	r0, #12
   105d6:	bd10      	pop	{r4, pc}

000105d8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   105d8:	b510      	push	{r4, lr}
   105da:	8800      	ldrh	r0, [r0, #0]
   105dc:	f7f6 f88e 	bl	66fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   105e0:	b108      	cbz	r0, 105e6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   105e2:	2000      	movs	r0, #0
   105e4:	bd10      	pop	{r4, pc}
   105e6:	2030      	movs	r0, #48	; 0x30
   105e8:	bd10      	pop	{r4, pc}

000105ea <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   105ea:	b51c      	push	{r2, r3, r4, lr}
   105ec:	4604      	mov	r4, r0
   105ee:	f7fa fc45 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   105f2:	2000      	movs	r0, #0
   105f4:	f88d 0000 	strb.w	r0, [sp]
   105f8:	f88d 0002 	strb.w	r0, [sp, #2]
   105fc:	2003      	movs	r0, #3
   105fe:	f88d 0001 	strb.w	r0, [sp, #1]
   10602:	f814 0b01 	ldrb.w	r0, [r4], #1
   10606:	f88d 0003 	strb.w	r0, [sp, #3]
   1060a:	4668      	mov	r0, sp
   1060c:	9401      	str	r4, [sp, #4]
   1060e:	f000 f8c2 	bl	10796 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10612:	bd1c      	pop	{r2, r3, r4, pc}

00010614 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10614:	b51c      	push	{r2, r3, r4, lr}
   10616:	8801      	ldrh	r1, [r0, #0]
   10618:	f8ad 1000 	strh.w	r1, [sp]
   1061c:	8841      	ldrh	r1, [r0, #2]
   1061e:	f8ad 1002 	strh.w	r1, [sp, #2]
   10622:	8801      	ldrh	r1, [r0, #0]
   10624:	f8ad 1004 	strh.w	r1, [sp, #4]
   10628:	8840      	ldrh	r0, [r0, #2]
   1062a:	f8ad 0006 	strh.w	r0, [sp, #6]
   1062e:	4668      	mov	r0, sp
   10630:	f7fa fd98 	bl	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10634:	bd1c      	pop	{r2, r3, r4, pc}

00010636 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10636:	b510      	push	{r4, lr}
   10638:	f7f5 f9d8 	bl	59ec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1063c:	2000      	movs	r0, #0
   1063e:	bd10      	pop	{r4, pc}

00010640 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10640:	b510      	push	{r4, lr}
   10642:	460c      	mov	r4, r1
   10644:	2100      	movs	r1, #0
   10646:	f7fd fd73 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1064a:	b118      	cbz	r0, 10654 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   1064c:	2c02      	cmp	r4, #2
   1064e:	d903      	bls.n	10658 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10650:	2012      	movs	r0, #18
   10652:	bd10      	pop	{r4, pc}
   10654:	2002      	movs	r0, #2
   10656:	bd10      	pop	{r4, pc}
   10658:	f014 0101 	ands.w	r1, r4, #1
   1065c:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   10660:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10664:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   10668:	d004      	beq.n	10674 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   1066a:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   1066e:	b109      	cbz	r1, 10674 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10670:	f7ff f8cd 	bl	f80e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10674:	2000      	movs	r0, #0
   10676:	bd10      	pop	{r4, pc}

00010678 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10678:	b51c      	push	{r2, r3, r4, lr}
   1067a:	460c      	mov	r4, r1
   1067c:	4669      	mov	r1, sp
   1067e:	f7fd fff4 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10682:	2800      	cmp	r0, #0
   10684:	d105      	bne.n	10692 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10686:	2100      	movs	r1, #0
   10688:	4622      	mov	r2, r4
   1068a:	9801      	ldr	r0, [sp, #4]
   1068c:	f000 faf3 	bl	10c76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   10690:	2000      	movs	r0, #0
   10692:	bd1c      	pop	{r2, r3, r4, pc}

00010694 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10694:	b510      	push	{r4, lr}
   10696:	4604      	mov	r4, r0
   10698:	2000      	movs	r0, #0
   1069a:	f000 fa20 	bl	10ade <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   1069e:	b128      	cbz	r0, 106ac <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   106a0:	4621      	mov	r1, r4
   106a2:	2000      	movs	r0, #0
   106a4:	f7f5 f97e 	bl	59a4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   106a8:	2000      	movs	r0, #0
   106aa:	bd10      	pop	{r4, pc}
   106ac:	200c      	movs	r0, #12
   106ae:	bd10      	pop	{r4, pc}

000106b0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   106b0:	b510      	push	{r4, lr}
   106b2:	7800      	ldrb	r0, [r0, #0]
   106b4:	b100      	cbz	r0, 106b8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   106b6:	2001      	movs	r0, #1
   106b8:	f7f7 fdc8 	bl	824c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   106bc:	2000      	movs	r0, #0
   106be:	bd10      	pop	{r4, pc}

000106c0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   106c0:	f7fa bccc 	b.w	b05c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

000106c4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   106c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   106c8:	4606      	mov	r6, r0
   106ca:	7845      	ldrb	r5, [r0, #1]
   106cc:	7800      	ldrb	r0, [r0, #0]
   106ce:	2101      	movs	r1, #1
   106d0:	f7fd fd2e 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   106d4:	0004      	movs	r4, r0
   106d6:	d01e      	beq.n	10716 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   106d8:	f7fe fe48 	bl	f36c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   106dc:	78f1      	ldrb	r1, [r6, #3]
   106de:	4281      	cmp	r1, r0
   106e0:	d800      	bhi.n	106e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   106e2:	4608      	mov	r0, r1
   106e4:	4607      	mov	r7, r0
   106e6:	2d04      	cmp	r5, #4
   106e8:	d018      	beq.n	1071c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   106ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   106ec:	f7fd fe7d 	bl	e3ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   106f0:	4438      	add	r0, r7
   106f2:	b281      	uxth	r1, r0
   106f4:	4620      	mov	r0, r4
   106f6:	2201      	movs	r2, #1
   106f8:	f000 fa03 	bl	10b02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   106fc:	2800      	cmp	r0, #0
   106fe:	d10b      	bne.n	10718 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10700:	2d03      	cmp	r5, #3
   10702:	d000      	beq.n	10706 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10704:	b1df      	cbz	r7, 1073e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10706:	4620      	mov	r0, r4
   10708:	f7fe fea9 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1070c:	7871      	ldrb	r1, [r6, #1]
   1070e:	2903      	cmp	r1, #3
   10710:	d010      	beq.n	10734 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10712:	b9a0      	cbnz	r0, 1073e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10714:	e004      	b.n	10720 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10716:	2042      	movs	r0, #66	; 0x42
   10718:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1071c:	b97f      	cbnz	r7, 1073e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1071e:	e7f2      	b.n	10706 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10720:	2904      	cmp	r1, #4
   10722:	d107      	bne.n	10734 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10724:	4620      	mov	r0, r4
   10726:	f7ff f858 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1072a:	b140      	cbz	r0, 1073e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1072c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1072e:	f7fd fe2b 	bl	e388 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10732:	b120      	cbz	r0, 1073e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10734:	2d01      	cmp	r5, #1
   10736:	d004      	beq.n	10742 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10738:	2d03      	cmp	r5, #3
   1073a:	d002      	beq.n	10742 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1073c:	e00e      	b.n	1075c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   1073e:	2012      	movs	r0, #18
   10740:	e7ea      	b.n	10718 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10742:	4620      	mov	r0, r4
   10744:	f7fe fe8b 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10748:	b108      	cbz	r0, 1074e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1074a:	2200      	movs	r2, #0
   1074c:	e002      	b.n	10754 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1074e:	2d01      	cmp	r5, #1
   10750:	d013      	beq.n	1077a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10752:	2201      	movs	r2, #1
   10754:	4668      	mov	r0, sp
   10756:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10758:	f7fd fdae 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1075c:	2d04      	cmp	r5, #4
   1075e:	d018      	beq.n	10792 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10760:	6872      	ldr	r2, [r6, #4]
   10762:	463b      	mov	r3, r7
   10764:	2101      	movs	r1, #1
   10766:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10768:	f7fd fdda 	bl	e320 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1076c:	b138      	cbz	r0, 1077e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   1076e:	7870      	ldrb	r0, [r6, #1]
   10770:	2802      	cmp	r0, #2
   10772:	d006      	beq.n	10782 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10774:	2803      	cmp	r0, #3
   10776:	d004      	beq.n	10782 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10778:	e00b      	b.n	10792 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1077a:	2202      	movs	r2, #2
   1077c:	e7ea      	b.n	10754 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1077e:	2007      	movs	r0, #7
   10780:	e7ca      	b.n	10718 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10782:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10784:	f7fd fe31 	bl	e3ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10788:	4602      	mov	r2, r0
   1078a:	2101      	movs	r1, #1
   1078c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1078e:	f7fd fe09 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10792:	2000      	movs	r0, #0
   10794:	e7c0      	b.n	10718 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010796 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10796:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1079a:	4607      	mov	r7, r0
   1079c:	7845      	ldrb	r5, [r0, #1]
   1079e:	78c6      	ldrb	r6, [r0, #3]
   107a0:	7800      	ldrb	r0, [r0, #0]
   107a2:	2101      	movs	r1, #1
   107a4:	f7fd fcc4 	bl	e130 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   107a8:	0004      	movs	r4, r0
   107aa:	d003      	beq.n	107b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   107ac:	f7fe fe59 	bl	f462 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   107b0:	b118      	cbz	r0, 107ba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   107b2:	e003      	b.n	107bc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   107b4:	2042      	movs	r0, #66	; 0x42
   107b6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   107ba:	2600      	movs	r6, #0
   107bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   107be:	f7fd fe18 	bl	e3f2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   107c2:	4430      	add	r0, r6
   107c4:	b281      	uxth	r1, r0
   107c6:	4688      	mov	r8, r1
   107c8:	4620      	mov	r0, r4
   107ca:	2201      	movs	r2, #1
   107cc:	f000 f999 	bl	10b02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   107d0:	2800      	cmp	r0, #0
   107d2:	d1f0      	bne.n	107b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   107d4:	2d04      	cmp	r5, #4
   107d6:	d008      	beq.n	107ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   107d8:	2d03      	cmp	r5, #3
   107da:	d00a      	beq.n	107f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   107dc:	b12e      	cbz	r6, 107ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   107de:	4620      	mov	r0, r4
   107e0:	f7fe fffb 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   107e4:	b118      	cbz	r0, 107ee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   107e6:	200c      	movs	r0, #12
   107e8:	e7e5      	b.n	107b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   107ea:	2012      	movs	r0, #18
   107ec:	e7e3      	b.n	107b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   107ee:	2d01      	cmp	r5, #1
   107f0:	d10c      	bne.n	1080c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   107f2:	4620      	mov	r0, r4
   107f4:	f7fe fe33 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   107f8:	b108      	cbz	r0, 107fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   107fa:	2204      	movs	r2, #4
   107fc:	e002      	b.n	10804 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   107fe:	2d01      	cmp	r5, #1
   10800:	d010      	beq.n	10824 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10802:	2205      	movs	r2, #5
   10804:	4668      	mov	r0, sp
   10806:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10808:	f7fd fd56 	bl	e2b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1080c:	687a      	ldr	r2, [r7, #4]
   1080e:	4633      	mov	r3, r6
   10810:	2100      	movs	r1, #0
   10812:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10814:	f7fd fd84 	bl	e320 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10818:	b130      	cbz	r0, 10828 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1081a:	2d02      	cmp	r5, #2
   1081c:	d006      	beq.n	1082c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1081e:	2d03      	cmp	r5, #3
   10820:	d004      	beq.n	1082c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10822:	e008      	b.n	10836 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10824:	2206      	movs	r2, #6
   10826:	e7ed      	b.n	10804 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10828:	2007      	movs	r0, #7
   1082a:	e7c4      	b.n	107b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1082c:	4642      	mov	r2, r8
   1082e:	2100      	movs	r1, #0
   10830:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10832:	f7fd fdb7 	bl	e3a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10836:	2000      	movs	r0, #0
   10838:	e7bd      	b.n	107b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001083a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1083a:	b510      	push	{r4, lr}
   1083c:	4604      	mov	r4, r0
   1083e:	8880      	ldrh	r0, [r0, #4]
   10840:	b128      	cbz	r0, 1084e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10842:	2801      	cmp	r0, #1
   10844:	d003      	beq.n	1084e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10846:	2802      	cmp	r0, #2
   10848:	d001      	beq.n	1084e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1084a:	2012      	movs	r0, #18
   1084c:	bd10      	pop	{r4, pc}
   1084e:	78e0      	ldrb	r0, [r4, #3]
   10850:	f000 f9ee 	bl	10c30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10854:	b148      	cbz	r0, 1086a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10856:	78a0      	ldrb	r0, [r4, #2]
   10858:	f000 f9ea 	bl	10c30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   1085c:	b128      	cbz	r0, 1086a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1085e:	4620      	mov	r0, r4
   10860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10864:	2101      	movs	r1, #1
   10866:	f000 b890 	b.w	1098a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1086a:	2011      	movs	r0, #17
   1086c:	bd10      	pop	{r4, pc}

0001086e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   1086e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10870:	460c      	mov	r4, r1
   10872:	4605      	mov	r5, r0
   10874:	8800      	ldrh	r0, [r0, #0]
   10876:	4669      	mov	r1, sp
   10878:	f7fd fef7 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1087c:	2800      	cmp	r0, #0
   1087e:	d106      	bne.n	1088e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10880:	9801      	ldr	r0, [sp, #4]
   10882:	8829      	ldrh	r1, [r5, #0]
   10884:	8021      	strh	r1, [r4, #0]
   10886:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   1088a:	8060      	strh	r0, [r4, #2]
   1088c:	2000      	movs	r0, #0
   1088e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010890 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10890:	b510      	push	{r4, lr}
   10892:	4604      	mov	r4, r0
   10894:	4601      	mov	r1, r0
   10896:	2000      	movs	r0, #0
   10898:	f7f5 f86c 	bl	5974 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1089c:	b910      	cbnz	r0, 108a4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1089e:	2000      	movs	r0, #0
   108a0:	6020      	str	r0, [r4, #0]
   108a2:	80a0      	strh	r0, [r4, #4]
   108a4:	2000      	movs	r0, #0
   108a6:	bd10      	pop	{r4, pc}

000108a8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   108a8:	b50e      	push	{r1, r2, r3, lr}
   108aa:	8800      	ldrh	r0, [r0, #0]
   108ac:	4669      	mov	r1, sp
   108ae:	f7fd fedc 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   108b2:	b960      	cbnz	r0, 108ce <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   108b4:	9801      	ldr	r0, [sp, #4]
   108b6:	f000 fa37 	bl	10d28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   108ba:	b140      	cbz	r0, 108ce <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   108bc:	9801      	ldr	r0, [sp, #4]
   108be:	4601      	mov	r1, r0
   108c0:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   108c4:	3078      	adds	r0, #120	; 0x78
   108c6:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   108ca:	b962      	cbnz	r2, 108e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   108cc:	e001      	b.n	108d2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   108ce:	2002      	movs	r0, #2
   108d0:	bd0e      	pop	{r1, r2, r3, pc}
   108d2:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   108d6:	f88d 2008 	strb.w	r2, [sp, #8]
   108da:	9a02      	ldr	r2, [sp, #8]
   108dc:	9202      	str	r2, [sp, #8]
   108de:	f89d 3008 	ldrb.w	r3, [sp, #8]
   108e2:	2201      	movs	r2, #1
   108e4:	b10b      	cbz	r3, 108ea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   108e6:	203a      	movs	r0, #58	; 0x3a
   108e8:	bd0e      	pop	{r1, r2, r3, pc}
   108ea:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   108ee:	079b      	lsls	r3, r3, #30
   108f0:	d008      	beq.n	10904 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   108f2:	2201      	movs	r2, #1
   108f4:	304e      	adds	r0, #78	; 0x4e
   108f6:	9901      	ldr	r1, [sp, #4]
   108f8:	f7f6 fa8c 	bl	6e14 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   108fc:	f7f6 fb5c 	bl	6fb8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10900:	2000      	movs	r0, #0
   10902:	bd0e      	pop	{r1, r2, r3, pc}
   10904:	700a      	strb	r2, [r1, #0]
   10906:	4668      	mov	r0, sp
   10908:	f7fe fa6e 	bl	ede8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1090c:	e7f8      	b.n	10900 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

0001090e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1090e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10910:	460c      	mov	r4, r1
   10912:	4605      	mov	r5, r0
   10914:	8800      	ldrh	r0, [r0, #0]
   10916:	4669      	mov	r1, sp
   10918:	f7fd fea7 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1091c:	b108      	cbz	r0, 10922 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1091e:	2002      	movs	r0, #2
   10920:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10922:	78a8      	ldrb	r0, [r5, #2]
   10924:	b130      	cbz	r0, 10934 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10926:	f000 f9fc 	bl	10d22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   1092a:	70a0      	strb	r0, [r4, #2]
   1092c:	8828      	ldrh	r0, [r5, #0]
   1092e:	8020      	strh	r0, [r4, #0]
   10930:	2000      	movs	r0, #0
   10932:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10934:	9801      	ldr	r0, [sp, #4]
   10936:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   1093a:	e7f6      	b.n	1092a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001093c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1093c:	b510      	push	{r4, lr}
   1093e:	f7fa fc41 	bl	b1c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10942:	2000      	movs	r0, #0
   10944:	bd10      	pop	{r4, pc}

00010946 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10946:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1094a:	4604      	mov	r4, r0
   1094c:	8840      	ldrh	r0, [r0, #2]
   1094e:	460d      	mov	r5, r1
   10950:	b1b8      	cbz	r0, 10982 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10952:	8820      	ldrh	r0, [r4, #0]
   10954:	4669      	mov	r1, sp
   10956:	f7fd fe88 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1095a:	2800      	cmp	r0, #0
   1095c:	d10f      	bne.n	1097e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1095e:	8820      	ldrh	r0, [r4, #0]
   10960:	8028      	strh	r0, [r5, #0]
   10962:	9e01      	ldr	r6, [sp, #4]
   10964:	f106 0510 	add.w	r5, r6, #16
   10968:	3678      	adds	r6, #120	; 0x78
   1096a:	682f      	ldr	r7, [r5, #0]
   1096c:	8862      	ldrh	r2, [r4, #2]
   1096e:	4639      	mov	r1, r7
   10970:	4630      	mov	r0, r6
   10972:	f7fd ffc9 	bl	e908 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10976:	6828      	ldr	r0, [r5, #0]
   10978:	42b8      	cmp	r0, r7
   1097a:	d1f6      	bne.n	1096a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1097c:	2000      	movs	r0, #0
   1097e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10982:	2012      	movs	r0, #18
   10984:	e7fb      	b.n	1097e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010986 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10986:	f000 b863 	b.w	10a50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001098a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1098a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1098e:	b086      	sub	sp, #24
   10990:	4689      	mov	r9, r1
   10992:	4607      	mov	r7, r0
   10994:	8800      	ldrh	r0, [r0, #0]
   10996:	a901      	add	r1, sp, #4
   10998:	f7fd fe67 	bl	e66a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1099c:	2800      	cmp	r0, #0
   1099e:	d136      	bne.n	10a0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   109a0:	9802      	ldr	r0, [sp, #8]
   109a2:	4601      	mov	r1, r0
   109a4:	4688      	mov	r8, r1
   109a6:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   109aa:	f500 748c 	add.w	r4, r0, #280	; 0x118
   109ae:	f88d 1000 	strb.w	r1, [sp]
   109b2:	9900      	ldr	r1, [sp, #0]
   109b4:	9100      	str	r1, [sp, #0]
   109b6:	f89d 1000 	ldrb.w	r1, [sp]
   109ba:	3078      	adds	r0, #120	; 0x78
   109bc:	b109      	cbz	r1, 109c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   109be:	2601      	movs	r6, #1
   109c0:	e000      	b.n	109c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   109c2:	2600      	movs	r6, #0
   109c4:	7b81      	ldrb	r1, [r0, #14]
   109c6:	2921      	cmp	r1, #33	; 0x21
   109c8:	d100      	bne.n	109cc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   109ca:	b13e      	cbz	r6, 109dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   109cc:	2500      	movs	r5, #0
   109ce:	305c      	adds	r0, #92	; 0x5c
   109d0:	2108      	movs	r1, #8
   109d2:	4682      	mov	sl, r0
   109d4:	f7ff fb52 	bl	1007c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   109d8:	b110      	cbz	r0, 109e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   109da:	e007      	b.n	109ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   109dc:	2501      	movs	r5, #1
   109de:	e7f6      	b.n	109ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   109e0:	210b      	movs	r1, #11
   109e2:	4650      	mov	r0, sl
   109e4:	f7ff fb4a 	bl	1007c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   109e8:	b900      	cbnz	r0, 109ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   109ea:	b17d      	cbz	r5, 10a0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   109ec:	a804      	add	r0, sp, #16
   109ee:	9000      	str	r0, [sp, #0]
   109f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   109f4:	ab03      	add	r3, sp, #12
   109f6:	463a      	mov	r2, r7
   109f8:	4641      	mov	r1, r8
   109fa:	f000 f972 	bl	10ce2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   109fe:	0005      	movs	r5, r0
   10a00:	d105      	bne.n	10a0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10a02:	340c      	adds	r4, #12
   10a04:	20ff      	movs	r0, #255	; 0xff
   10a06:	7060      	strb	r0, [r4, #1]
   10a08:	b936      	cbnz	r6, 10a18 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10a0a:	e003      	b.n	10a14 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10a0c:	201a      	movs	r0, #26
   10a0e:	b006      	add	sp, #24
   10a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a14:	7820      	ldrb	r0, [r4, #0]
   10a16:	b108      	cbz	r0, 10a1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10a18:	253a      	movs	r5, #58	; 0x3a
   10a1a:	e012      	b.n	10a42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10a1c:	f884 9000 	strb.w	r9, [r4]
   10a20:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10a24:	70a0      	strb	r0, [r4, #2]
   10a26:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10a2a:	70e1      	strb	r1, [r4, #3]
   10a2c:	f88d 0000 	strb.w	r0, [sp]
   10a30:	f88d 1001 	strb.w	r1, [sp, #1]
   10a34:	88b8      	ldrh	r0, [r7, #4]
   10a36:	f8ad 0002 	strh.w	r0, [sp, #2]
   10a3a:	4669      	mov	r1, sp
   10a3c:	4640      	mov	r0, r8
   10a3e:	f7fd fed4 	bl	e7ea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10a42:	2000      	movs	r0, #0
   10a44:	7060      	strb	r0, [r4, #1]
   10a46:	4628      	mov	r0, r5
   10a48:	e7e1      	b.n	10a0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010a4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10a4a:	2008      	movs	r0, #8
   10a4c:	f7fa bc20 	b.w	b290 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010a50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10a50:	b510      	push	{r4, lr}
   10a52:	f7fd fd5e 	bl	e512 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10a56:	f7f5 fda3 	bl	65a0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10a5a:	f7fa fc3b 	bl	b2d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10a5e:	f7fe fa2d 	bl	eebc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a66:	f7fa b9e7 	b.w	ae38 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

00010a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   10a6a:	f7f8 b839 	b.w	8ae0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10a6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10a72:	4288      	cmp	r0, r1
   10a74:	d303      	bcc.n	10a7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10a76:	f640 0148 	movw	r1, #2120	; 0x848
   10a7a:	4288      	cmp	r0, r1
   10a7c:	d300      	bcc.n	10a80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   10a7e:	4608      	mov	r0, r1
   10a80:	b280      	uxth	r0, r0
   10a82:	4770      	bx	lr
   10a84:	07c1      	lsls	r1, r0, #31
   10a86:	d001      	beq.n	10a8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10a88:	2001      	movs	r0, #1
   10a8a:	4770      	bx	lr
   10a8c:	0780      	lsls	r0, r0, #30
   10a8e:	d501      	bpl.n	10a94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   10a90:	2002      	movs	r0, #2
   10a92:	4770      	bx	lr
   10a94:	2000      	movs	r0, #0
   10a96:	4770      	bx	lr
   10a98:	b510      	push	{r4, lr}
   10a9a:	2801      	cmp	r0, #1
   10a9c:	d006      	beq.n	10aac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10a9e:	2802      	cmp	r0, #2
   10aa0:	d004      	beq.n	10aac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10aa2:	f240 21a9 	movw	r1, #681	; 0x2a9
   10aa6:	2006      	movs	r0, #6
   10aa8:	f7f4 f8ae 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10aac:	bd10      	pop	{r4, pc}
   10aae:	b50e      	push	{r1, r2, r3, lr}
   10ab0:	4669      	mov	r1, sp
   10ab2:	2001      	movs	r0, #1
   10ab4:	f7fd fb46 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10ab8:	b150      	cbz	r0, 10ad0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   10aba:	f44f 71a3 	mov.w	r1, #326	; 0x146
   10abe:	2039      	movs	r0, #57	; 0x39
   10ac0:	f7f4 f8a2 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ac4:	9802      	ldr	r0, [sp, #8]
   10ac6:	f7fe fe88 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10aca:	b108      	cbz	r0, 10ad0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   10acc:	2001      	movs	r0, #1
   10ace:	bd0e      	pop	{r1, r2, r3, pc}
   10ad0:	4668      	mov	r0, sp
   10ad2:	f7f4 fadd 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10ad6:	2800      	cmp	r0, #0
   10ad8:	d0f4      	beq.n	10ac4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   10ada:	2000      	movs	r0, #0
   10adc:	bd0e      	pop	{r1, r2, r3, pc}
   10ade:	b510      	push	{r4, lr}
   10ae0:	f7ff ffe5 	bl	10aae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10ae4:	b158      	cbz	r0, 10afe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   10ae6:	f7fa f9c9 	bl	ae7c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10aea:	4604      	mov	r4, r0
   10aec:	f7fe fcb9 	bl	f462 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10af0:	b918      	cbnz	r0, 10afa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   10af2:	4620      	mov	r0, r4
   10af4:	f7fe fcab 	bl	f44e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10af8:	b108      	cbz	r0, 10afe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   10afa:	2000      	movs	r0, #0
   10afc:	bd10      	pop	{r4, pc}
   10afe:	2001      	movs	r0, #1
   10b00:	bd10      	pop	{r4, pc}
   10b02:	b570      	push	{r4, r5, r6, lr}
   10b04:	460c      	mov	r4, r1
   10b06:	4605      	mov	r5, r0
   10b08:	b112      	cbz	r2, 10b10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   10b0a:	291f      	cmp	r1, #31
   10b0c:	d80c      	bhi.n	10b28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   10b0e:	e016      	b.n	10b3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   10b10:	f7f4 fd88 	bl	5624 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10b14:	42a0      	cmp	r0, r4
   10b16:	d201      	bcs.n	10b1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   10b18:	2007      	movs	r0, #7
   10b1a:	bd70      	pop	{r4, r5, r6, pc}
   10b1c:	4628      	mov	r0, r5
   10b1e:	f7fe fc9e 	bl	f45e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10b22:	b118      	cbz	r0, 10b2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10b24:	2c1f      	cmp	r4, #31
   10b26:	d901      	bls.n	10b2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10b28:	2012      	movs	r0, #18
   10b2a:	bd70      	pop	{r4, r5, r6, pc}
   10b2c:	4628      	mov	r0, r5
   10b2e:	f7fe fc9f 	bl	f470 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10b32:	b130      	cbz	r0, 10b42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   10b34:	4621      	mov	r1, r4
   10b36:	4628      	mov	r0, r5
   10b38:	f7fe fc66 	bl	f408 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10b3c:	b118      	cbz	r0, 10b46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   10b3e:	2000      	movs	r0, #0
   10b40:	bd70      	pop	{r4, r5, r6, pc}
   10b42:	2042      	movs	r0, #66	; 0x42
   10b44:	bd70      	pop	{r4, r5, r6, pc}
   10b46:	2045      	movs	r0, #69	; 0x45
   10b48:	bd70      	pop	{r4, r5, r6, pc}
   10b4a:	b510      	push	{r4, lr}
   10b4c:	4604      	mov	r4, r0
   10b4e:	7840      	ldrb	r0, [r0, #1]
   10b50:	06c1      	lsls	r1, r0, #27
   10b52:	d51c      	bpl.n	10b8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10b54:	07c0      	lsls	r0, r0, #31
   10b56:	d00b      	beq.n	10b70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10b58:	f7fa fb6e 	bl	b238 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10b5c:	b1b8      	cbz	r0, 10b8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10b5e:	7860      	ldrb	r0, [r4, #1]
   10b60:	06c1      	lsls	r1, r0, #27
   10b62:	d405      	bmi.n	10b70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10b64:	0700      	lsls	r0, r0, #28
   10b66:	d503      	bpl.n	10b70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10b68:	7d20      	ldrb	r0, [r4, #20]
   10b6a:	2802      	cmp	r0, #2
   10b6c:	d10f      	bne.n	10b8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10b6e:	e010      	b.n	10b92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10b70:	7d20      	ldrb	r0, [r4, #20]
   10b72:	2802      	cmp	r0, #2
   10b74:	d001      	beq.n	10b7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   10b76:	7ea0      	ldrb	r0, [r4, #26]
   10b78:	b948      	cbnz	r0, 10b8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10b7a:	7860      	ldrb	r0, [r4, #1]
   10b7c:	0700      	lsls	r0, r0, #28
   10b7e:	d408      	bmi.n	10b92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10b80:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10b88:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10b8c:	d201      	bcs.n	10b92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10b8e:	2011      	movs	r0, #17
   10b90:	bd10      	pop	{r4, pc}
   10b92:	2000      	movs	r0, #0
   10b94:	bd10      	pop	{r4, pc}
   10b96:	b538      	push	{r3, r4, r5, lr}
   10b98:	4604      	mov	r4, r0
   10b9a:	7800      	ldrb	r0, [r0, #0]
   10b9c:	28ef      	cmp	r0, #239	; 0xef
   10b9e:	d843      	bhi.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10ba0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10ba4:	f8ad 0000 	strh.w	r0, [sp]
   10ba8:	9800      	ldr	r0, [sp, #0]
   10baa:	f000 f91e 	bl	10dea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x380>
   10bae:	b3a0      	cbz	r0, 10c1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   10bb0:	7861      	ldrb	r1, [r4, #1]
   10bb2:	0708      	lsls	r0, r1, #28
   10bb4:	d40b      	bmi.n	10bce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10bb6:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10bba:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10bbe:	0a02      	lsrs	r2, r0, #8
   10bc0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10bc4:	d830      	bhi.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10bc6:	2220      	movs	r2, #32
   10bc8:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10bcc:	d82c      	bhi.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10bce:	7a60      	ldrb	r0, [r4, #9]
   10bd0:	b318      	cbz	r0, 10c1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   10bd2:	2807      	cmp	r0, #7
   10bd4:	d828      	bhi.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10bd6:	7aa0      	ldrb	r0, [r4, #10]
   10bd8:	b128      	cbz	r0, 10be6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10bda:	2801      	cmp	r0, #1
   10bdc:	d003      	beq.n	10be6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10bde:	2802      	cmp	r0, #2
   10be0:	d001      	beq.n	10be6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   10be2:	2803      	cmp	r0, #3
   10be4:	d120      	bne.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10be6:	074a      	lsls	r2, r1, #29
   10be8:	d403      	bmi.n	10bf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   10bea:	2802      	cmp	r0, #2
   10bec:	d001      	beq.n	10bf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   10bee:	2803      	cmp	r0, #3
   10bf0:	d105      	bne.n	10bfe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   10bf2:	7ae0      	ldrb	r0, [r4, #11]
   10bf4:	b108      	cbz	r0, 10bfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   10bf6:	2801      	cmp	r0, #1
   10bf8:	d116      	bne.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10bfa:	0748      	lsls	r0, r1, #29
   10bfc:	d407      	bmi.n	10c0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10bfe:	7ca0      	ldrb	r0, [r4, #18]
   10c00:	b128      	cbz	r0, 10c0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10c02:	2801      	cmp	r0, #1
   10c04:	d003      	beq.n	10c0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10c06:	2802      	cmp	r0, #2
   10c08:	d001      	beq.n	10c0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10c0a:	2803      	cmp	r0, #3
   10c0c:	d10c      	bne.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10c0e:	06c8      	lsls	r0, r1, #27
   10c10:	7d20      	ldrb	r0, [r4, #20]
   10c12:	d503      	bpl.n	10c1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   10c14:	2801      	cmp	r0, #1
   10c16:	d107      	bne.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10c18:	e002      	b.n	10c20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   10c1a:	e005      	b.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10c1c:	2802      	cmp	r0, #2
   10c1e:	d003      	beq.n	10c28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10c20:	7e20      	ldrb	r0, [r4, #24]
   10c22:	b118      	cbz	r0, 10c2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10c24:	2801      	cmp	r0, #1
   10c26:	d001      	beq.n	10c2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10c28:	2012      	movs	r0, #18
   10c2a:	bd38      	pop	{r3, r4, r5, pc}
   10c2c:	2000      	movs	r0, #0
   10c2e:	bd38      	pop	{r3, r4, r5, pc}
   10c30:	b510      	push	{r4, lr}
   10c32:	0004      	movs	r4, r0
   10c34:	d005      	beq.n	10c42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10c36:	f7fa fb3d 	bl	b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10c3a:	4384      	bics	r4, r0
   10c3c:	d001      	beq.n	10c42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10c3e:	2000      	movs	r0, #0
   10c40:	bd10      	pop	{r4, pc}
   10c42:	2001      	movs	r0, #1
   10c44:	bd10      	pop	{r4, pc}
   10c46:	28fb      	cmp	r0, #251	; 0xfb
   10c48:	d803      	bhi.n	10c52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   10c4a:	f640 0048 	movw	r0, #2120	; 0x848
   10c4e:	4281      	cmp	r1, r0
   10c50:	d901      	bls.n	10c56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   10c52:	2011      	movs	r0, #17
   10c54:	4770      	bx	lr
   10c56:	2000      	movs	r0, #0
   10c58:	4770      	bx	lr
   10c5a:	381b      	subs	r0, #27
   10c5c:	28e1      	cmp	r0, #225	; 0xe1
   10c5e:	d206      	bcs.n	10c6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10c60:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10c64:	d303      	bcc.n	10c6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10c66:	f244 2090 	movw	r0, #17040	; 0x4290
   10c6a:	4281      	cmp	r1, r0
   10c6c:	d901      	bls.n	10c72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   10c6e:	2012      	movs	r0, #18
   10c70:	4770      	bx	lr
   10c72:	2000      	movs	r0, #0
   10c74:	4770      	bx	lr
   10c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c7a:	4606      	mov	r6, r0
   10c7c:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   10c80:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   10c84:	4615      	mov	r5, r2
   10c86:	3030      	adds	r0, #48	; 0x30
   10c88:	f7f7 fae6 	bl	8258 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10c8c:	4680      	mov	r8, r0
   10c8e:	2102      	movs	r1, #2
   10c90:	f7fd fd7b 	bl	e78a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10c94:	4287      	cmp	r7, r0
   10c96:	d200      	bcs.n	10c9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   10c98:	4638      	mov	r0, r7
   10c9a:	4607      	mov	r7, r0
   10c9c:	2102      	movs	r1, #2
   10c9e:	4640      	mov	r0, r8
   10ca0:	f7fd fd73 	bl	e78a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10ca4:	4284      	cmp	r4, r0
   10ca6:	d200      	bcs.n	10caa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10ca8:	4620      	mov	r0, r4
   10caa:	8831      	ldrh	r1, [r6, #0]
   10cac:	8029      	strh	r1, [r5, #0]
   10cae:	2f1b      	cmp	r7, #27
   10cb0:	d913      	bls.n	10cda <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   10cb2:	2ffb      	cmp	r7, #251	; 0xfb
   10cb4:	d300      	bcc.n	10cb8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10cb6:	27fb      	movs	r7, #251	; 0xfb
   10cb8:	806f      	strh	r7, [r5, #2]
   10cba:	281b      	cmp	r0, #27
   10cbc:	d90f      	bls.n	10cde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   10cbe:	28fb      	cmp	r0, #251	; 0xfb
   10cc0:	d300      	bcc.n	10cc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10cc2:	20fb      	movs	r0, #251	; 0xfb
   10cc4:	80e8      	strh	r0, [r5, #6]
   10cc6:	4640      	mov	r0, r8
   10cc8:	f7ff fed1 	bl	10a6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10ccc:	80a8      	strh	r0, [r5, #4]
   10cce:	4640      	mov	r0, r8
   10cd0:	f7ff fecd 	bl	10a6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10cd4:	8128      	strh	r0, [r5, #8]
   10cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cda:	271b      	movs	r7, #27
   10cdc:	e7ec      	b.n	10cb8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10cde:	201b      	movs	r0, #27
   10ce0:	e7f0      	b.n	10cc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ce6:	7890      	ldrb	r0, [r2, #2]
   10ce8:	9e06      	ldr	r6, [sp, #24]
   10cea:	461d      	mov	r5, r3
   10cec:	4614      	mov	r4, r2
   10cee:	b908      	cbnz	r0, 10cf4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   10cf0:	f7fa fae0 	bl	b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10cf4:	78e4      	ldrb	r4, [r4, #3]
   10cf6:	4607      	mov	r7, r0
   10cf8:	b914      	cbnz	r4, 10d00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   10cfa:	f7fa fadb 	bl	b2b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10cfe:	4604      	mov	r4, r0
   10d00:	b16f      	cbz	r7, 10d1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10d02:	b164      	cbz	r4, 10d1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10d04:	4638      	mov	r0, r7
   10d06:	f7ff febd 	bl	10a84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10d0a:	4620      	mov	r0, r4
   10d0c:	f7ff feba 	bl	10a84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10d10:	b12f      	cbz	r7, 10d1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10d12:	b124      	cbz	r4, 10d1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10d14:	702f      	strb	r7, [r5, #0]
   10d16:	7034      	strb	r4, [r6, #0]
   10d18:	2000      	movs	r0, #0
   10d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d1e:	2009      	movs	r0, #9
   10d20:	e7fb      	b.n	10d1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   10d22:	207f      	movs	r0, #127	; 0x7f
   10d24:	f000 b843 	b.w	10dae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10d28:	b508      	push	{r3, lr}
   10d2a:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   10d2e:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   10d32:	f88d 0000 	strb.w	r0, [sp]
   10d36:	9800      	ldr	r0, [sp, #0]
   10d38:	9000      	str	r0, [sp, #0]
   10d3a:	f89d 0000 	ldrb.w	r0, [sp]
   10d3e:	b100      	cbz	r0, 10d42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   10d40:	2001      	movs	r0, #1
   10d42:	1e40      	subs	r0, r0, #1
   10d44:	4208      	tst	r0, r1
   10d46:	d003      	beq.n	10d50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10d48:	2904      	cmp	r1, #4
   10d4a:	d001      	beq.n	10d50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10d4c:	2001      	movs	r0, #1
   10d4e:	bd08      	pop	{r3, pc}
   10d50:	2000      	movs	r0, #0
   10d52:	bd08      	pop	{r3, pc}
   10d54:	b510      	push	{r4, lr}
   10d56:	f7ff feaa 	bl	10aae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10d5a:	2800      	cmp	r0, #0
   10d5c:	d000      	beq.n	10d60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f6>
   10d5e:	2001      	movs	r0, #1
   10d60:	bd10      	pop	{r4, pc}
   10d62:	b570      	push	{r4, r5, r6, lr}
   10d64:	4605      	mov	r5, r0
   10d66:	f7fe fb83 	bl	f470 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10d6a:	b170      	cbz	r0, 10d8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x320>
   10d6c:	4628      	mov	r0, r5
   10d6e:	f7fe fd34 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d72:	2800      	cmp	r0, #0
   10d74:	d008      	beq.n	10d88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31e>
   10d76:	4628      	mov	r0, r5
   10d78:	f7fe fd2c 	bl	f7d4 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10d7c:	4604      	mov	r4, r0
   10d7e:	4628      	mov	r0, r5
   10d80:	f7fe fd02 	bl	f788 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10d84:	b118      	cbz	r0, 10d8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
   10d86:	200c      	movs	r0, #12
   10d88:	bd70      	pop	{r4, r5, r6, pc}
   10d8a:	2042      	movs	r0, #66	; 0x42
   10d8c:	bd70      	pop	{r4, r5, r6, pc}
   10d8e:	b164      	cbz	r4, 10daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10d90:	8820      	ldrh	r0, [r4, #0]
   10d92:	f7fd fb8b 	bl	e4ac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10d96:	8820      	ldrh	r0, [r4, #0]
   10d98:	2100      	movs	r1, #0
   10d9a:	f7f4 f9c9 	bl	5130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10d9e:	b120      	cbz	r0, 10daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10da0:	f241 41fd 	movw	r1, #5373	; 0x14fd
   10da4:	2039      	movs	r0, #57	; 0x39
   10da6:	f7f3 ff2f 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10daa:	2000      	movs	r0, #0
   10dac:	bd70      	pop	{r4, r5, r6, pc}
   10dae:	b508      	push	{r3, lr}
   10db0:	f640 1288 	movw	r2, #2440	; 0x988
   10db4:	4669      	mov	r1, sp
   10db6:	f7f3 fe07 	bl	49c8 <mpsl_fem_tx_power_split>
   10dba:	bd08      	pop	{r3, pc}
   10dbc:	b530      	push	{r4, r5, lr}
   10dbe:	f340 0400 	sbfx	r4, r0, #0, #1
   10dc2:	f340 0040 	sbfx	r0, r0, #1, #1
   10dc6:	1c40      	adds	r0, r0, #1
   10dc8:	9d03      	ldr	r5, [sp, #12]
   10dca:	1c64      	adds	r4, r4, #1
   10dcc:	d000      	beq.n	10dd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   10dce:	b119      	cbz	r1, 10dd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10dd0:	b100      	cbz	r0, 10dd4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36a>
   10dd2:	b10a      	cbz	r2, 10dd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10dd4:	b91c      	cbnz	r4, 10dde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x374>
   10dd6:	e001      	b.n	10ddc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   10dd8:	2011      	movs	r0, #17
   10dda:	bd30      	pop	{r4, r5, pc}
   10ddc:	2100      	movs	r1, #0
   10dde:	7019      	strb	r1, [r3, #0]
   10de0:	b900      	cbnz	r0, 10de4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   10de2:	2200      	movs	r2, #0
   10de4:	702a      	strb	r2, [r5, #0]
   10de6:	2000      	movs	r0, #0
   10de8:	bd30      	pop	{r4, r5, pc}
   10dea:	b2c0      	uxtb	r0, r0
   10dec:	06c1      	lsls	r1, r0, #27
   10dee:	d40c      	bmi.n	10e0a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a0>
   10df0:	0681      	lsls	r1, r0, #26
   10df2:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10df6:	d503      	bpl.n	10e00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x396>
   10df8:	b9d1      	cbnz	r1, 10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10dfa:	0781      	lsls	r1, r0, #30
   10dfc:	d418      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10dfe:	e001      	b.n	10e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   10e00:	2900      	cmp	r1, #0
   10e02:	d1fa      	bne.n	10dfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x390>
   10e04:	0700      	lsls	r0, r0, #28
   10e06:	d413      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e08:	e010      	b.n	10e2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10e0a:	0641      	lsls	r1, r0, #25
   10e0c:	d410      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e0e:	0681      	lsls	r1, r0, #26
   10e10:	d40e      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e12:	07c1      	lsls	r1, r0, #31
   10e14:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10e18:	d004      	beq.n	10e24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10e1a:	2900      	cmp	r1, #0
   10e1c:	db02      	blt.n	10e24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10e1e:	0740      	lsls	r0, r0, #29
   10e20:	d404      	bmi.n	10e2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10e22:	e005      	b.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e24:	0701      	lsls	r1, r0, #28
   10e26:	d403      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e28:	0740      	lsls	r0, r0, #29
   10e2a:	d401      	bmi.n	10e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10e2c:	2001      	movs	r0, #1
   10e2e:	4770      	bx	lr
   10e30:	2000      	movs	r0, #0
   10e32:	4770      	bx	lr
   10e34:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10e36:	4669      	mov	r1, sp
   10e38:	2001      	movs	r0, #1
   10e3a:	f7fd f983 	bl	e144 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10e3e:	b178      	cbz	r0, 10e60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10e40:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10e44:	2039      	movs	r0, #57	; 0x39
   10e46:	f7f3 fedf 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e4a:	9c02      	ldr	r4, [sp, #8]
   10e4c:	4620      	mov	r0, r4
   10e4e:	f7fe fcc4 	bl	f7da <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10e52:	b128      	cbz	r0, 10e60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10e54:	4620      	mov	r0, r4
   10e56:	f7fe fb47 	bl	f4e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10e5a:	b108      	cbz	r0, 10e60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10e5c:	2001      	movs	r0, #1
   10e5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10e60:	4668      	mov	r0, sp
   10e62:	f7f4 f915 	bl	5090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10e66:	2800      	cmp	r0, #0
   10e68:	d0ef      	beq.n	10e4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e0>
   10e6a:	2000      	movs	r0, #0
   10e6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10e6e:	b510      	push	{r4, lr}
   10e70:	f7fe fcb6 	bl	f7e0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10e74:	b108      	cbz	r0, 10e7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   10e76:	21e7      	movs	r1, #231	; 0xe7
   10e78:	e003      	b.n	10e82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   10e7a:	f7f6 fb6b 	bl	7554 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10e7e:	b118      	cbz	r0, 10e88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41e>
   10e80:	21ec      	movs	r1, #236	; 0xec
   10e82:	2001      	movs	r0, #1
   10e84:	f7f3 fec0 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e8c:	2001      	movs	r0, #1
   10e8e:	f7f4 b895 	b.w	4fbc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10e92:	6802      	ldr	r2, [r0, #0]
   10e94:	b912      	cbnz	r2, 10e9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x432>
   10e96:	6001      	str	r1, [r0, #0]
   10e98:	4770      	bx	lr
   10e9a:	4602      	mov	r2, r0
   10e9c:	6850      	ldr	r0, [r2, #4]
   10e9e:	b108      	cbz	r0, 10ea4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   10ea0:	428a      	cmp	r2, r1
   10ea2:	d1fa      	bne.n	10e9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x430>
   10ea4:	428a      	cmp	r2, r1
   10ea6:	d0f7      	beq.n	10e98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42e>
   10ea8:	6051      	str	r1, [r2, #4]
   10eaa:	4770      	bx	lr
   10eac:	b510      	push	{r4, lr}
   10eae:	4604      	mov	r4, r0
   10eb0:	e002      	b.n	10eb8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44e>
   10eb2:	6820      	ldr	r0, [r4, #0]
   10eb4:	4780      	blx	r0
   10eb6:	6864      	ldr	r4, [r4, #4]
   10eb8:	2c00      	cmp	r4, #0
   10eba:	d1fa      	bne.n	10eb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x448>
   10ebc:	bd10      	pop	{r4, pc}
   10ebe:	b510      	push	{r4, lr}
   10ec0:	2000      	movs	r0, #0
   10ec2:	f7f4 f87b 	bl	4fbc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10ec6:	f7f4 fab3 	bl	5430 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10eca:	f7f4 fd35 	bl	5938 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10ece:	f7f4 ff01 	bl	5cd4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10ed2:	2800      	cmp	r0, #0
   10ed4:	d003      	beq.n	10ede <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x474>
   10ed6:	21c6      	movs	r1, #198	; 0xc6
   10ed8:	2001      	movs	r0, #1
   10eda:	f7f3 fe95 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ede:	bd10      	pop	{r4, pc}
   10ee0:	b510      	push	{r4, lr}
   10ee2:	f7ff ffc4 	bl	10e6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
   10ee6:	f7ff f881 	bl	ffec <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10eea:	2800      	cmp	r0, #0
   10eec:	d004      	beq.n	10ef8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x48e>
   10eee:	f240 1103 	movw	r1, #259	; 0x103
   10ef2:	2001      	movs	r0, #1
   10ef4:	f7f3 fe88 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ef8:	bd10      	pop	{r4, pc}

00010efa <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10efa:	f7f3 babd 	b.w	4478 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10efe:	0001      	.short	0x0001
   10f00:	0002000b 	.word	0x0002000b
   10f04:	0005000a 	.word	0x0005000a
   10f08:	000a0009 	.word	0x000a0009
   10f0c:	00140008 	.word	0x00140008
   10f10:	001e0007 	.word	0x001e0007
   10f14:	00320006 	.word	0x00320006
   10f18:	004b0005 	.word	0x004b0005
   10f1c:	00640004 	.word	0x00640004
   10f20:	00960003 	.word	0x00960003
   10f24:	00fa0002 	.word	0x00fa0002
   10f28:	01f40001 	.word	0x01f40001
	...

00010f2e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10f2e:	b510      	push	{r4, lr}
   10f30:	f7fa fd5a 	bl	b9e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10f34:	f000 f81d 	bl	10f72 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10f38:	f7fa fa30 	bl	b39c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10f40:	f7fa bb2a 	b.w	b598 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010f44 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10f44:	b510      	push	{r4, lr}
   10f46:	24c8      	movs	r4, #200	; 0xc8
   10f48:	1e64      	subs	r4, r4, #1
   10f4a:	b2e4      	uxtb	r4, r4
   10f4c:	f7fa fa44 	bl	b3d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10f50:	2802      	cmp	r0, #2
   10f52:	d003      	beq.n	10f5c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10f54:	2801      	cmp	r0, #1
   10f56:	d000      	beq.n	10f5a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10f58:	2000      	movs	r0, #0
   10f5a:	bd10      	pop	{r4, pc}
   10f5c:	2c00      	cmp	r4, #0
   10f5e:	d1f3      	bne.n	10f48 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10f60:	219e      	movs	r1, #158	; 0x9e
   10f62:	203b      	movs	r0, #59	; 0x3b
   10f64:	f7f3 fe50 	bl	4c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f68:	5840      	ldr	r0, [r0, r1]
   10f6a:	2800      	cmp	r0, #0
   10f6c:	d000      	beq.n	10f70 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10f6e:	2001      	movs	r0, #1
   10f70:	4770      	bx	lr

00010f72 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10f72:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10f76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10f7a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10f7e:	f3bf 8f4f 	dsb	sy
   10f82:	f3bf 8f6f 	isb	sy
   10f86:	f7fa bba1 	b.w	b6cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10f8a:	2800      	cmp	r0, #0
   10f8c:	db09      	blt.n	10fa2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10f8e:	f000 021f 	and.w	r2, r0, #31
   10f92:	2101      	movs	r1, #1
   10f94:	4091      	lsls	r1, r2
   10f96:	0940      	lsrs	r0, r0, #5
   10f98:	0080      	lsls	r0, r0, #2
   10f9a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10f9e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10fa2:	4770      	bx	lr
   10fa4:	2800      	cmp	r0, #0
   10fa6:	db0d      	blt.n	10fc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10fa8:	f000 021f 	and.w	r2, r0, #31
   10fac:	2101      	movs	r1, #1
   10fae:	4091      	lsls	r1, r2
   10fb0:	0940      	lsrs	r0, r0, #5
   10fb2:	0080      	lsls	r0, r0, #2
   10fb4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10fb8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10fbc:	f3bf 8f4f 	dsb	sy
   10fc0:	f3bf 8f6f 	isb	sy
   10fc4:	4770      	bx	lr
   10fc6:	5840      	ldr	r0, [r0, r1]
   10fc8:	2800      	cmp	r0, #0
   10fca:	d000      	beq.n	10fce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10fcc:	2001      	movs	r0, #1
   10fce:	4770      	bx	lr
   10fd0:	5840      	ldr	r0, [r0, r1]
   10fd2:	2800      	cmp	r0, #0
   10fd4:	d000      	beq.n	10fd8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10fd6:	2001      	movs	r0, #1
   10fd8:	4770      	bx	lr

00010fda <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10fda:	b510      	push	{r4, lr}
   10fdc:	4604      	mov	r4, r0
   10fde:	4608      	mov	r0, r1
   10fe0:	f7fa fe28 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10fe8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10fec:	fbb0 f0f1 	udiv	r0, r0, r1
   10ff0:	1a20      	subs	r0, r4, r0
   10ff2:	1e80      	subs	r0, r0, #2
   10ff4:	bd10      	pop	{r4, pc}

00010ff6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10ff6:	b510      	push	{r4, lr}
   10ff8:	4604      	mov	r4, r0
   10ffa:	4608      	mov	r0, r1
   10ffc:	f7fa fe1a 	bl	bc34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11004:	fbb0 f0f1 	udiv	r0, r0, r1
   11008:	1a20      	subs	r0, r4, r0
   1100a:	bd10      	pop	{r4, pc}
   1100c:	d8d8d8d8 	.word	0xd8d8d8d8
   11010:	d8d8d8d8 	.word	0xd8d8d8d8
   11014:	d8d8d8d8 	.word	0xd8d8d8d8
   11018:	d8d8d8d8 	.word	0xd8d8d8d8
   1101c:	d8d8d8d8 	.word	0xd8d8d8d8
   11020:	ecececec 	.word	0xecececec
   11024:	f0f0f0f0 	.word	0xf0f0f0f0
   11028:	f4f4f4f4 	.word	0xf4f4f4f4
   1102c:	f8f8f8f8 	.word	0xf8f8f8f8
   11030:	fcfcfcfc 	.word	0xfcfcfcfc
   11034:	03020000 	.word	0x03020000
   11038:	07060504 	.word	0x07060504
   1103c:	d8d8d808 	.word	0xd8d8d808
   11040:	d8d8d8d8 	.word	0xd8d8d8d8
   11044:	d8d8d8d8 	.word	0xd8d8d8d8
   11048:	d8d8d8d8 	.word	0xd8d8d8d8
   1104c:	d8d8d8d8 	.word	0xd8d8d8d8
   11050:	ecececd8 	.word	0xecececd8
   11054:	f0f0f0ec 	.word	0xf0f0f0ec
   11058:	f4f4f4f0 	.word	0xf4f4f4f0
   1105c:	f8f8f8f4 	.word	0xf8f8f8f4
   11060:	fcfcfcf8 	.word	0xfcfcfcf8
   11064:	000000fc 	.word	0x000000fc
   11068:	0403      	.short	0x0403
   1106a:	080c      	.short	0x080c
   1106c:	010d1702 	.word	0x010d1702
   11070:	09090201 	.word	0x09090201
   11074:	02060101 	.word	0x02060101
   11078:	03181809 	.word	0x03181809
   1107c:	09090101 	.word	0x09090101
   11080:	03050303 	.word	0x03050303
   11084:	02220102 	.word	0x02220102
   11088:	10092402 	.word	0x10092402
   1108c:	05050404 	.word	0x05050404

00011090 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11094:	4d4b      	ldr	r5, [pc, #300]	; (111c4 <bt_init+0x134>)
{
   11096:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11098:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   1109c:	6899      	ldr	r1, [r3, #8]
   1109e:	f011 0101 	ands.w	r1, r1, #1
{
   110a2:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   110a4:	d122      	bne.n	110ec <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   110a6:	f107 0208 	add.w	r2, r7, #8
   110aa:	f640 4003 	movw	r0, #3075	; 0xc03
   110ae:	f005 faaf 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   110b2:	4604      	mov	r4, r0
   110b4:	2800      	cmp	r0, #0
   110b6:	d17f      	bne.n	111b8 <bt_init+0x128>
	uint8_t status = buf->data[0];
   110b8:	68bb      	ldr	r3, [r7, #8]
   110ba:	689b      	ldr	r3, [r3, #8]
	if (status) {
   110bc:	781b      	ldrb	r3, [r3, #0]
   110be:	b993      	cbnz	r3, 110e6 <bt_init+0x56>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   110c0:	f3bf 8f5b 	dmb	ish
   110c4:	462b      	mov	r3, r5
   110c6:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   110ca:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   110ce:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   110d2:	f3bf 8f5b 	dmb	ish
   110d6:	e853 1f00 	ldrex	r1, [r3]
   110da:	e843 2000 	strex	r0, r2, [r3]
   110de:	2800      	cmp	r0, #0
   110e0:	d1f9      	bne.n	110d6 <bt_init+0x46>
   110e2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   110e6:	68b8      	ldr	r0, [r7, #8]
   110e8:	f00c fd3e 	bl	1db68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   110ec:	f107 0208 	add.w	r2, r7, #8
   110f0:	2100      	movs	r1, #0
   110f2:	f241 0003 	movw	r0, #4099	; 0x1003
   110f6:	f005 fa8b 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   110fa:	4604      	mov	r4, r0
   110fc:	2800      	cmp	r0, #0
   110fe:	d15b      	bne.n	111b8 <bt_init+0x128>
	read_local_features_complete(rsp);
   11100:	68bb      	ldr	r3, [r7, #8]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   11102:	4e31      	ldr	r6, [pc, #196]	; (111c8 <bt_init+0x138>)
   11104:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11106:	f8d2 0001 	ldr.w	r0, [r2, #1]
   1110a:	f8d2 1005 	ldr.w	r1, [r2, #5]
   1110e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   11110:	4618      	mov	r0, r3
   11112:	f00c fd29 	bl	1db68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11116:	4621      	mov	r1, r4
   11118:	f107 0208 	add.w	r2, r7, #8
   1111c:	f241 0001 	movw	r0, #4097	; 0x1001
   11120:	f005 fa76 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   11124:	4604      	mov	r4, r0
   11126:	2800      	cmp	r0, #0
   11128:	d146      	bne.n	111b8 <bt_init+0x128>
	read_local_ver_complete(rsp);
   1112a:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1112c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1112e:	785a      	ldrb	r2, [r3, #1]
   11130:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   11134:	78d9      	ldrb	r1, [r3, #3]
   11136:	789a      	ldrb	r2, [r3, #2]
   11138:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1113c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   11140:	791a      	ldrb	r2, [r3, #4]
   11142:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11146:	7a19      	ldrb	r1, [r3, #8]
   11148:	79da      	ldrb	r2, [r3, #7]
   1114a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1114e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   11152:	795a      	ldrb	r2, [r3, #5]
   11154:	799b      	ldrb	r3, [r3, #6]
   11156:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1115a:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1115e:	f00c fd03 	bl	1db68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   11162:	4621      	mov	r1, r4
   11164:	f107 0208 	add.w	r2, r7, #8
   11168:	f241 0002 	movw	r0, #4098	; 0x1002
   1116c:	f005 fa50 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   11170:	4604      	mov	r4, r0
   11172:	bb08      	cbnz	r0, 111b8 <bt_init+0x128>
	read_supported_commands_complete(rsp);
   11174:	f8d7 c008 	ldr.w	ip, [r7, #8]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   11178:	f8dc 2008 	ldr.w	r2, [ip, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   1117c:	1c53      	adds	r3, r2, #1
   1117e:	3241      	adds	r2, #65	; 0x41
   11180:	6818      	ldr	r0, [r3, #0]
   11182:	6859      	ldr	r1, [r3, #4]
   11184:	4634      	mov	r4, r6
   11186:	c403      	stmia	r4!, {r0, r1}
   11188:	3308      	adds	r3, #8
   1118a:	4293      	cmp	r3, r2
   1118c:	4626      	mov	r6, r4
   1118e:	d1f7      	bne.n	11180 <bt_init+0xf0>
	net_buf_unref(rsp);
   11190:	4660      	mov	r0, ip
   11192:	f00c fce9 	bl	1db68 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11196:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1119a:	065a      	lsls	r2, r3, #25
   1119c:	d41a      	bmi.n	111d4 <bt_init+0x144>
		BT_ERR("Non-LE capable controller detected!");
   1119e:	4b0b      	ldr	r3, [pc, #44]	; (111cc <bt_init+0x13c>)
   111a0:	61fb      	str	r3, [r7, #28]
   111a2:	480b      	ldr	r0, [pc, #44]	; (111d0 <bt_init+0x140>)
   111a4:	2302      	movs	r3, #2
   111a6:	f107 0218 	add.w	r2, r7, #24
   111aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   111ae:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
   111b2:	61bb      	str	r3, [r7, #24]
   111b4:	f017 fbe9 	bl	2898a <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   111b8:	4620      	mov	r0, r4
   111ba:	3720      	adds	r7, #32
   111bc:	46bd      	mov	sp, r7
   111be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111c2:	bf00      	nop
   111c4:	20000350 	.word	0x20000350
   111c8:	200003c0 	.word	0x200003c0
   111cc:	0002e7ee 	.word	0x0002e7ee
   111d0:	0002c7b4 	.word	0x0002c7b4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   111d4:	f107 0208 	add.w	r2, r7, #8
   111d8:	2100      	movs	r1, #0
   111da:	f242 0003 	movw	r0, #8195	; 0x2003
   111de:	f005 fa17 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   111e2:	4604      	mov	r4, r0
   111e4:	2800      	cmp	r0, #0
   111e6:	d1e7      	bne.n	111b8 <bt_init+0x128>
	read_le_features_complete(rsp);
   111e8:	68bb      	ldr	r3, [r7, #8]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   111ea:	4ebd      	ldr	r6, [pc, #756]	; (114e0 <bt_init+0x450>)
   111ec:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   111ee:	f8d2 0001 	ldr.w	r0, [r2, #1]
   111f2:	f8d2 1005 	ldr.w	r1, [r2, #5]
   111f6:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   111f8:	4618      	mov	r0, r3
   111fa:	f00c fcb5 	bl	1db68 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   111fe:	4621      	mov	r1, r4
   11200:	f107 0208 	add.w	r2, r7, #8
   11204:	f242 0002 	movw	r0, #8194	; 0x2002
   11208:	f005 fa02 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   1120c:	4604      	mov	r4, r0
   1120e:	2800      	cmp	r0, #0
   11210:	d1d2      	bne.n	111b8 <bt_init+0x128>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   11212:	68bb      	ldr	r3, [r7, #8]
   11214:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11216:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1121a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1121e:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   11220:	b129      	cbz	r1, 1122e <bt_init+0x19e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   11222:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11224:	4611      	mov	r1, r2
   11226:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1122a:	f01a fab2 	bl	2b792 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1122e:	68b8      	ldr	r0, [r7, #8]
   11230:	f00c fc9a 	bl	1db68 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11234:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11238:	f016 0620 	ands.w	r6, r6, #32
   1123c:	f000 811a 	beq.w	11474 <bt_init+0x3e4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11240:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   11244:	071b      	lsls	r3, r3, #28
   11246:	d513      	bpl.n	11270 <bt_init+0x1e0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11248:	f107 0208 	add.w	r2, r7, #8
   1124c:	2100      	movs	r1, #0
   1124e:	f242 001c 	movw	r0, #8220	; 0x201c
   11252:	f005 f9dd 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   11256:	4604      	mov	r4, r0
   11258:	2800      	cmp	r0, #0
   1125a:	d1ad      	bne.n	111b8 <bt_init+0x128>
		le_read_supp_states_complete(rsp);
   1125c:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1125e:	6883      	ldr	r3, [r0, #8]
   11260:	f8d3 2001 	ldr.w	r2, [r3, #1]
   11264:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11268:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1126c:	f00c fc7c 	bl	1db68 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   11270:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11274:	069e      	lsls	r6, r3, #26
   11276:	d521      	bpl.n	112bc <bt_init+0x22c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11278:	1d39      	adds	r1, r7, #4
   1127a:	1cb8      	adds	r0, r7, #2
   1127c:	f005 fa44 	bl	16708 <hci_le_read_max_data_len>
		if (err) {
   11280:	4604      	mov	r4, r0
   11282:	2800      	cmp	r0, #0
   11284:	d198      	bne.n	111b8 <bt_init+0x128>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11286:	2104      	movs	r1, #4
   11288:	f242 0024 	movw	r0, #8228	; 0x2024
   1128c:	f005 f986 	bl	1659c <bt_hci_cmd_create>
		if (!buf) {
   11290:	4606      	mov	r6, r0
   11292:	2800      	cmp	r0, #0
   11294:	f000 80f5 	beq.w	11482 <bt_init+0x3f2>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11298:	2104      	movs	r1, #4
   1129a:	3008      	adds	r0, #8
   1129c:	f019 fc22 	bl	2aae4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   112a0:	887b      	ldrh	r3, [r7, #2]
   112a2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   112a4:	88bb      	ldrh	r3, [r7, #4]
   112a6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   112a8:	4622      	mov	r2, r4
   112aa:	4631      	mov	r1, r6
   112ac:	f242 0024 	movw	r0, #8228	; 0x2024
   112b0:	f005 f9ae 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   112b4:	4604      	mov	r4, r0
   112b6:	2800      	cmp	r0, #0
   112b8:	f47f af7e 	bne.w	111b8 <bt_init+0x128>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   112bc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   112c0:	065c      	lsls	r4, r3, #25
   112c2:	d52b      	bpl.n	1131c <bt_init+0x28c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   112c4:	2102      	movs	r1, #2
   112c6:	f242 002e 	movw	r0, #8238	; 0x202e
   112ca:	f005 f967 	bl	1659c <bt_hci_cmd_create>
		if (!buf) {
   112ce:	4604      	mov	r4, r0
   112d0:	2800      	cmp	r0, #0
   112d2:	f000 80d6 	beq.w	11482 <bt_init+0x3f2>
   112d6:	2102      	movs	r1, #2
   112d8:	3008      	adds	r0, #8
   112da:	f019 fc03 	bl	2aae4 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   112de:	f8b5 31a0 	ldrh.w	r3, [r5, #416]	; 0x1a0
   112e2:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   112e4:	4621      	mov	r1, r4
   112e6:	2200      	movs	r2, #0
   112e8:	f242 002e 	movw	r0, #8238	; 0x202e
   112ec:	f005 f990 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   112f0:	4604      	mov	r4, r0
   112f2:	2800      	cmp	r0, #0
   112f4:	f47f af60 	bne.w	111b8 <bt_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   112f8:	4601      	mov	r1, r0
   112fa:	f107 0208 	add.w	r2, r7, #8
   112fe:	f242 002a 	movw	r0, #8234	; 0x202a
   11302:	f005 f985 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   11306:	4604      	mov	r4, r0
   11308:	2800      	cmp	r0, #0
   1130a:	f47f af55 	bne.w	111b8 <bt_init+0x128>
		le_read_resolving_list_size_complete(rsp);
   1130e:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   11310:	6883      	ldr	r3, [r0, #8]
   11312:	785b      	ldrb	r3, [r3, #1]
   11314:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11318:	f00c fc26 	bl	1db68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1131c:	2108      	movs	r1, #8
   1131e:	f242 0001 	movw	r0, #8193	; 0x2001
   11322:	f005 f93b 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   11326:	4604      	mov	r4, r0
   11328:	2800      	cmp	r0, #0
   1132a:	f000 80aa 	beq.w	11482 <bt_init+0x3f2>
   1132e:	2108      	movs	r1, #8
   11330:	4408      	add	r0, r1
   11332:	f019 fbd7 	bl	2aae4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11336:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   1133a:	f011 0f40 	tst.w	r1, #64	; 0x40
   1133e:	4602      	mov	r2, r0
   11340:	f240 2302 	movw	r3, #514	; 0x202
   11344:	bf08      	it	eq
   11346:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11348:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1134a:	bf4c      	ite	mi
   1134c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   11350:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11354:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11356:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1135a:	bf48      	it	mi
   1135c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11360:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11364:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11368:	bf18      	it	ne
   1136a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1136e:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11372:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   11374:	bf48      	it	mi
   11376:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1137a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   1137c:	bf08      	it	eq
   1137e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   11382:	2100      	movs	r1, #0
   11384:	f017 fb10 	bl	289a8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11388:	4621      	mov	r1, r4
   1138a:	2200      	movs	r2, #0
   1138c:	f242 0001 	movw	r0, #8193	; 0x2001
   11390:	f005 f93e 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   11394:	4604      	mov	r4, r0
   11396:	2800      	cmp	r0, #0
   11398:	f47f af0e 	bne.w	111b8 <bt_init+0x128>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1139c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   113a0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   113a4:	0698      	lsls	r0, r3, #26
   113a6:	f100 8081 	bmi.w	114ac <bt_init+0x41c>
	if (bt_dev.le.acl_mtu) {
   113aa:	b9e1      	cbnz	r1, 113e6 <bt_init+0x356>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   113ac:	f107 0208 	add.w	r2, r7, #8
   113b0:	f241 0005 	movw	r0, #4101	; 0x1005
   113b4:	f005 f92c 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   113b8:	4604      	mov	r4, r0
   113ba:	2800      	cmp	r0, #0
   113bc:	f47f aefc 	bne.w	111b8 <bt_init+0x128>
	if (bt_dev.le.acl_mtu) {
   113c0:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   113c4:	b963      	cbnz	r3, 113e0 <bt_init+0x350>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   113c6:	68bb      	ldr	r3, [r7, #8]
   113c8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   113ca:	785a      	ldrb	r2, [r3, #1]
   113cc:	7899      	ldrb	r1, [r3, #2]
   113ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   113d2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   113d6:	889a      	ldrh	r2, [r3, #4]
   113d8:	4842      	ldr	r0, [pc, #264]	; (114e4 <bt_init+0x454>)
   113da:	4611      	mov	r1, r2
   113dc:	f01a f9d9 	bl	2b792 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   113e0:	68b8      	ldr	r0, [r7, #8]
   113e2:	f00c fbc1 	bl	1db68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   113e6:	2108      	movs	r1, #8
   113e8:	f640 4001 	movw	r0, #3073	; 0xc01
   113ec:	f005 f8d6 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   113f0:	4604      	mov	r4, r0
   113f2:	2800      	cmp	r0, #0
   113f4:	d045      	beq.n	11482 <bt_init+0x3f2>
   113f6:	2108      	movs	r1, #8
   113f8:	4408      	add	r0, r1
   113fa:	f019 fb73 	bl	2aae4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   113fe:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11402:	07d9      	lsls	r1, r3, #31
   11404:	4602      	mov	r2, r0
   11406:	d561      	bpl.n	114cc <bt_init+0x43c>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11408:	a133      	add	r1, pc, #204	; (adr r1, 114d8 <bt_init+0x448>)
   1140a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1140e:	f017 facb 	bl	289a8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   11412:	4621      	mov	r1, r4
   11414:	2200      	movs	r2, #0
   11416:	f640 4001 	movw	r0, #3073	; 0xc01
   1141a:	f005 f8f9 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   1141e:	4604      	mov	r4, r0
   11420:	2800      	cmp	r0, #0
   11422:	f47f aec9 	bne.w	111b8 <bt_init+0x128>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11426:	4601      	mov	r1, r0
   11428:	1d3a      	adds	r2, r7, #4
   1142a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1142e:	f005 f8ef 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   11432:	2800      	cmp	r0, #0
   11434:	d060      	beq.n	114f8 <bt_init+0x468>
		BT_WARN("Vendor HCI extensions not available");
   11436:	4b2c      	ldr	r3, [pc, #176]	; (114e8 <bt_init+0x458>)
   11438:	61fb      	str	r3, [r7, #28]
   1143a:	2302      	movs	r3, #2
   1143c:	61bb      	str	r3, [r7, #24]
			BT_WARN("Failed to read supported vendor features");
   1143e:	482b      	ldr	r0, [pc, #172]	; (114ec <bt_init+0x45c>)
   11440:	f107 0218 	add.w	r2, r7, #24
   11444:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11448:	f017 fa9f 	bl	2898a <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   1144c:	f006 fbe4 	bl	17c18 <bt_id_init>
	if (err) {
   11450:	4604      	mov	r4, r0
   11452:	2800      	cmp	r0, #0
   11454:	f47f aeb0 	bne.w	111b8 <bt_init+0x128>
		err = bt_conn_init();
   11458:	f007 fab0 	bl	189bc <bt_conn_init>
		if (err) {
   1145c:	4604      	mov	r4, r0
   1145e:	2800      	cmp	r0, #0
   11460:	f47f aeaa 	bne.w	111b8 <bt_init+0x128>
		if (!bt_dev.id_count) {
   11464:	79eb      	ldrb	r3, [r5, #7]
   11466:	2b00      	cmp	r3, #0
   11468:	f040 80d7 	bne.w	1161a <bt_init+0x58a>
   1146c:	f004 fc94 	bl	15d98 <bt_init.part.0>
   11470:	4604      	mov	r4, r0
   11472:	e6a1      	b.n	111b8 <bt_init+0x128>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11474:	2102      	movs	r1, #2
   11476:	f640 406d 	movw	r0, #3181	; 0xc6d
   1147a:	f005 f88f 	bl	1659c <bt_hci_cmd_create>
		if (!buf) {
   1147e:	4604      	mov	r4, r0
   11480:	b910      	cbnz	r0, 11488 <bt_init+0x3f8>
		return -ENOBUFS;
   11482:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11486:	e697      	b.n	111b8 <bt_init+0x128>
   11488:	2102      	movs	r1, #2
   1148a:	3008      	adds	r0, #8
   1148c:	f019 fb2a 	bl	2aae4 <net_buf_simple_add>
		cp_le->le = 0x01;
   11490:	2301      	movs	r3, #1
   11492:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11494:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11496:	4621      	mov	r1, r4
   11498:	4632      	mov	r2, r6
   1149a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1149e:	f005 f8b7 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   114a2:	4604      	mov	r4, r0
   114a4:	2800      	cmp	r0, #0
   114a6:	f43f aecb 	beq.w	11240 <bt_init+0x1b0>
   114aa:	e685      	b.n	111b8 <bt_init+0x128>
	else if (!bt_dev.le.acl_mtu) {
   114ac:	2900      	cmp	r1, #0
   114ae:	d19a      	bne.n	113e6 <bt_init+0x356>
		BT_ERR("ACL BR/EDR buffers not initialized");
   114b0:	4b0f      	ldr	r3, [pc, #60]	; (114f0 <bt_init+0x460>)
   114b2:	61fb      	str	r3, [r7, #28]
   114b4:	480d      	ldr	r0, [pc, #52]	; (114ec <bt_init+0x45c>)
   114b6:	2302      	movs	r3, #2
   114b8:	f107 0218 	add.w	r2, r7, #24
   114bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   114c0:	61bb      	str	r3, [r7, #24]
		return -EIO;
   114c2:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
   114c6:	f017 fa60 	bl	2898a <z_log_msg_static_create.constprop.0>
	if (err) {
   114ca:	e675      	b.n	111b8 <bt_init+0x128>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   114cc:	4809      	ldr	r0, [pc, #36]	; (114f4 <bt_init+0x464>)
   114ce:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   114d2:	e79c      	b.n	1140e <bt_init+0x37e>
   114d4:	f3af 8000 	nop.w
   114d8:	02008890 	.word	0x02008890
   114dc:	20008000 	.word	0x20008000
   114e0:	20000420 	.word	0x20000420
   114e4:	20000450 	.word	0x20000450
   114e8:	0002e835 	.word	0x0002e835
   114ec:	0002c7b4 	.word	0x0002c7b4
   114f0:	0002e812 	.word	0x0002e812
   114f4:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   114f8:	687b      	ldr	r3, [r7, #4]
   114fa:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   114fc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11500:	2b03      	cmp	r3, #3
		return plat_str[platform];
   11502:	bf96      	itet	ls
   11504:	4a48      	ldrls	r2, [pc, #288]	; (11628 <bt_init+0x598>)
	return "unknown";
   11506:	4949      	ldrhi	r1, [pc, #292]	; (1162c <bt_init+0x59c>)
		return plat_str[platform];
   11508:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   1150c:	466e      	mov	r6, sp
   1150e:	b08a      	sub	sp, #40	; 0x28
   11510:	466a      	mov	r2, sp
   11512:	4847      	ldr	r0, [pc, #284]	; (11630 <bt_init+0x5a0>)
   11514:	61d3      	str	r3, [r2, #28]
   11516:	2302      	movs	r3, #2
   11518:	f882 3020 	strb.w	r3, [r2, #32]
   1151c:	4b45      	ldr	r3, [pc, #276]	; (11634 <bt_init+0x5a4>)
   1151e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11522:	f842 3f10 	str.w	r3, [r2, #16]!
   11526:	4844      	ldr	r0, [pc, #272]	; (11638 <bt_init+0x5a8>)
   11528:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   1152c:	f017 fa2d 	bl	2898a <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11530:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   11534:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11538:	2a02      	cmp	r2, #2
   1153a:	46b5      	mov	sp, r6
   1153c:	d14c      	bne.n	115d8 <bt_init+0x548>
	if (variant < ARRAY_SIZE(nordic_str)) {
   1153e:	2b03      	cmp	r3, #3
   11540:	d84a      	bhi.n	115d8 <bt_init+0x548>
		return nordic_str[variant];
   11542:	4a3e      	ldr	r2, [pc, #248]	; (1163c <bt_init+0x5ac>)
   11544:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   11548:	466e      	mov	r6, sp
   1154a:	b08a      	sub	sp, #40	; 0x28
   1154c:	466a      	mov	r2, sp
   1154e:	483c      	ldr	r0, [pc, #240]	; (11640 <bt_init+0x5b0>)
   11550:	61d3      	str	r3, [r2, #28]
   11552:	2302      	movs	r3, #2
   11554:	f882 3020 	strb.w	r3, [r2, #32]
   11558:	4b36      	ldr	r3, [pc, #216]	; (11634 <bt_init+0x5a4>)
   1155a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1155e:	f842 3f10 	str.w	r3, [r2, #16]!
   11562:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   11566:	4834      	ldr	r0, [pc, #208]	; (11638 <bt_init+0x5a8>)
   11568:	f017 fa0f 	bl	2898a <z_log_msg_static_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   1156c:	7963      	ldrb	r3, [r4, #5]
   1156e:	f894 c006 	ldrb.w	ip, [r4, #6]
   11572:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   11576:	2b03      	cmp	r3, #3
   11578:	46b5      	mov	sp, r6
		return var_str[variant];
   1157a:	bf98      	it	ls
   1157c:	4a31      	ldrls	r2, [pc, #196]	; (11644 <bt_init+0x5b4>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   1157e:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   11582:	bf94      	ite	ls
   11584:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   11588:	4928      	ldrhi	r1, [pc, #160]	; (1162c <bt_init+0x59c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   1158a:	466c      	mov	r4, sp
   1158c:	b08c      	sub	sp, #48	; 0x30
   1158e:	466a      	mov	r2, sp
   11590:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 11648 <bt_init+0x5b8>
   11594:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   11598:	f04f 0802 	mov.w	r8, #2
   1159c:	4b2b      	ldr	r3, [pc, #172]	; (1164c <bt_init+0x5bc>)
   1159e:	f882 802c 	strb.w	r8, [r2, #44]	; 0x2c
   115a2:	e9c2 e105 	strd	lr, r1, [r2, #20]
   115a6:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   115aa:	f44f 516b 	mov.w	r1, #15040	; 0x3ac0
   115ae:	f842 3f10 	str.w	r3, [r2, #16]!
   115b2:	4821      	ldr	r0, [pc, #132]	; (11638 <bt_init+0x5a8>)
   115b4:	f017 f9e9 	bl	2898a <z_log_msg_static_create.constprop.0>
   115b8:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   115ba:	6878      	ldr	r0, [r7, #4]
   115bc:	f00c fad4 	bl	1db68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   115c0:	1d3a      	adds	r2, r7, #4
   115c2:	2100      	movs	r1, #0
   115c4:	f64f 4002 	movw	r0, #64514	; 0xfc02
   115c8:	f005 f822 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   115cc:	4604      	mov	r4, r0
   115ce:	b128      	cbz	r0, 115dc <bt_init+0x54c>
		BT_WARN("Failed to read supported vendor commands");
   115d0:	4b1f      	ldr	r3, [pc, #124]	; (11650 <bt_init+0x5c0>)
			BT_WARN("Failed to read supported vendor features");
   115d2:	e9c7 8306 	strd	r8, r3, [r7, #24]
   115d6:	e732      	b.n	1143e <bt_init+0x3ae>
		return "unknown";
   115d8:	4914      	ldr	r1, [pc, #80]	; (1162c <bt_init+0x59c>)
   115da:	e7b5      	b.n	11548 <bt_init+0x4b8>
	rp.cmds = (void *)rsp->data;
   115dc:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   115de:	4e1d      	ldr	r6, [pc, #116]	; (11654 <bt_init+0x5c4>)
   115e0:	6883      	ldr	r3, [r0, #8]
   115e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   115e6:	f8a6 30b9 	strh.w	r3, [r6, #185]	; 0xb9
	net_buf_unref(rsp);
   115ea:	f00c fabd 	bl	1db68 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   115ee:	f896 30b9 	ldrb.w	r3, [r6, #185]	; 0xb9
   115f2:	075b      	lsls	r3, r3, #29
   115f4:	f57f af2a 	bpl.w	1144c <bt_init+0x3bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   115f8:	1d3a      	adds	r2, r7, #4
   115fa:	4621      	mov	r1, r4
   115fc:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11600:	f005 f806 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   11604:	b108      	cbz	r0, 1160a <bt_init+0x57a>
			BT_WARN("Failed to read supported vendor features");
   11606:	4b14      	ldr	r3, [pc, #80]	; (11658 <bt_init+0x5c8>)
   11608:	e7e3      	b.n	115d2 <bt_init+0x542>
		rp.feat = (void *)rsp->data;
   1160a:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1160c:	6883      	ldr	r3, [r0, #8]
   1160e:	785b      	ldrb	r3, [r3, #1]
   11610:	f886 30b8 	strb.w	r3, [r6, #184]	; 0xb8
		net_buf_unref(rsp);
   11614:	f00c faa8 	bl	1db68 <net_buf_unref>
   11618:	e718      	b.n	1144c <bt_init+0x3bc>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1161a:	2108      	movs	r1, #8
   1161c:	480f      	ldr	r0, [pc, #60]	; (1165c <bt_init+0x5cc>)
   1161e:	f017 f994 	bl	2894a <atomic_or>
	bt_finalize_init();
   11622:	f005 fd31 	bl	17088 <bt_finalize_init>
	return 0;
   11626:	e5c7      	b.n	111b8 <bt_init+0x128>
   11628:	0002cfb4 	.word	0x0002cfb4
   1162c:	0002e2f9 	.word	0x0002e2f9
   11630:	0002e859 	.word	0x0002e859
   11634:	01000004 	.word	0x01000004
   11638:	0002c7b4 	.word	0x0002c7b4
   1163c:	0002cf74 	.word	0x0002cf74
   11640:	0002e872 	.word	0x0002e872
   11644:	0002cfec 	.word	0x0002cfec
   11648:	0002e88a 	.word	0x0002e88a
   1164c:	01000007 	.word	0x01000007
   11650:	0002e8b7 	.word	0x0002e8b7
   11654:	20000350 	.word	0x20000350
   11658:	0002e8e0 	.word	0x0002e8e0
   1165c:	2000041c 	.word	0x2000041c

00011660 <AD5940AMPStructInit>:
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
  return 0;
}//end

void AD5940AMPStructInit(void)
{
   11660:	b507      	push	{r0, r1, r2, lr}
  AppAMPCfg_Type *pAMPCfg;
  AppAMPGetCfg(&pAMPCfg);
   11662:	a801      	add	r0, sp, #4
   11664:	f000 fd4e 	bl	12104 <AppAMPGetCfg>
  pAMPCfg->WuptClkFreq = LFOSCFreq;
   11668:	4a0f      	ldr	r2, [pc, #60]	; (116a8 <AD5940AMPStructInit+0x48>)
   1166a:	9b01      	ldr	r3, [sp, #4]
   1166c:	6812      	ldr	r2, [r2, #0]
   1166e:	61da      	str	r2, [r3, #28]
  
  // Configure general parameters
  pAMPCfg->SeqStartAddr = 0;
  pAMPCfg->MaxSeqLen = 1000;                // @todo add checker in function
   11670:	2100      	movs	r1, #0
   11672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11676:	e9c3 1201 	strd	r1, r2, [r3, #4]
  pAMPCfg->RcalVal = 10000.0;
   1167a:	4a0c      	ldr	r2, [pc, #48]	; (116ac <AD5940AMPStructInit+0x4c>)
   1167c:	631a      	str	r2, [r3, #48]	; 0x30
  pAMPCfg->NumOfData = -1;                  // Never stop until you stop it manually by AppAMPCtrl() function
   1167e:	f04f 32ff 	mov.w	r2, #4294967295
   11682:	62da      	str	r2, [r3, #44]	; 0x2c

  // Configure measurement parameters
  pAMPCfg->AmpODR = 1;                      // Time between samples in seconds
   11684:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   11688:	629a      	str	r2, [r3, #40]	; 0x28
  pAMPCfg->FifoThresh = 1;                  // Number of measurements before alerting host MCU
   1168a:	2201      	movs	r2, #1
   1168c:	625a      	str	r2, [r3, #36]	; 0x24
  pAMPCfg->SensorBias = 200;                // Sensor bias voltage between reference and sense electrodes
  pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;
  pAMPCfg->LpTiaRl = LPTIARLOAD_10R;
   1168e:	651a      	str	r2, [r3, #80]	; 0x50
  pAMPCfg->Vzero = 1100;                    // Vzero voltage. Voltage on Sense electrode. Unit is mV
   11690:	4a07      	ldr	r2, [pc, #28]	; (116b0 <AD5940AMPStructInit+0x50>)
  pAMPCfg->SensorBias = 200;                // Sensor bias voltage between reference and sense electrodes
   11692:	4908      	ldr	r1, [pc, #32]	; (116b4 <AD5940AMPStructInit+0x54>)
  pAMPCfg->Vzero = 1100;                    // Vzero voltage. Voltage on Sense electrode. Unit is mV
   11694:	65da      	str	r2, [r3, #92]	; 0x5c
  pAMPCfg->ADCRefVolt = 1.82;               // voltage on Vref_1V8 pin
   11696:	4a08      	ldr	r2, [pc, #32]	; (116b8 <AD5940AMPStructInit+0x58>)
  pAMPCfg->SensorBias = 200;                // Sensor bias voltage between reference and sense electrodes
   11698:	6619      	str	r1, [r3, #96]	; 0x60
  pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;
   1169a:	2102      	movs	r1, #2
   1169c:	6499      	str	r1, [r3, #72]	; 0x48
  pAMPCfg->ADCRefVolt = 1.82;               // voltage on Vref_1V8 pin
   1169e:	635a      	str	r2, [r3, #52]	; 0x34
}//end function
   116a0:	b003      	add	sp, #12
   116a2:	f85d fb04 	ldr.w	pc, [sp], #4
   116a6:	bf00      	nop
   116a8:	200027b0 	.word	0x200027b0
   116ac:	461c4000 	.word	0x461c4000
   116b0:	44898000 	.word	0x44898000
   116b4:	43480000 	.word	0x43480000
   116b8:	3fe8f5c3 	.word	0x3fe8f5c3

000116bc <AMPShowResult>:
// 1000 msec = 1 sec (used to control the LED blinking frequency)
#define SLEEP_TIME_MS   1000

///////////////////////////////////////////////////////// display the result in UART
int32_t AMPShowResult(float *pData, uint32_t DataCount)
{
   116bc:	b538      	push	{r3, r4, r5, lr}
    float x = pData[0];
   116be:	6805      	ldr	r5, [r0, #0]

    // float bias_current = 39.5;
    // x = x - bias_current;

    // process the measured differential voltage
    int x_int = (int) x;		// integer part
   116c0:	4628      	mov	r0, r5
   116c2:	f7ef f841 	bl	748 <__aeabi_f2iz>
   116c6:	4604      	mov	r4, r0
    int x_frac = (int) ((x - x_int) * 10000);
   116c8:	f7ee fe24 	bl	314 <__aeabi_i2f>
   116cc:	4601      	mov	r1, r0
   116ce:	4628      	mov	r0, r5
   116d0:	f7ee fd6a 	bl	1a8 <__aeabi_fsub>
   116d4:	4905      	ldr	r1, [pc, #20]	; (116ec <AMPShowResult+0x30>)
   116d6:	f7ee fe71 	bl	3bc <__aeabi_fmul>
   116da:	f7ef f835 	bl	748 <__aeabi_f2iz>
	// print to serial terminal
	// printf ("Int = %d, Decimal = %d \n\r", diff_volt_int, diff_volt_dec_int);
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   116de:	4621      	mov	r1, r4
    int x_frac = (int) ((x - x_int) * 10000);
   116e0:	4602      	mov	r2, r0
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   116e2:	4803      	ldr	r0, [pc, #12]	; (116f0 <AMPShowResult+0x34>)
   116e4:	f012 f8d6 	bl	23894 <iprintf>

    return 0;
}//end
   116e8:	2000      	movs	r0, #0
   116ea:	bd38      	pop	{r3, r4, r5, pc}
   116ec:	461c4000 	.word	0x461c4000
   116f0:	0002d764 	.word	0x0002d764

000116f4 <main>:

////////////////////////////////////////////////// MAIN //////////////////////////////////////
void main(void)
{
   116f4:	b570      	push	{r4, r5, r6, lr}
   116f6:	b096      	sub	sp, #88	; 0x58
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   116f8:	4d5d      	ldr	r5, [pc, #372]	; (11870 <main+0x17c>)
   116fa:	4628      	mov	r0, r5
   116fc:	f019 fea1 	bl	2b442 <z_device_is_ready>
    // define return variable
	int ret;

    // check if led device is ready
	if (!device_is_ready(led.port)) { return; }
   11700:	2800      	cmp	r0, #0
   11702:	f000 80b3 	beq.w	1186c <main+0x178>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   11706:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   11708:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1170a:	6813      	ldr	r3, [r2, #0]
   1170c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11710:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   11712:	210d      	movs	r1, #13
   11714:	6833      	ldr	r3, [r6, #0]
   11716:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1171a:	4628      	mov	r0, r5
   1171c:	4798      	blx	r3

    // set the led to active-high output
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) { return; }
   1171e:	2800      	cmp	r0, #0
   11720:	f2c0 80a4 	blt.w	1186c <main+0x178>
   11724:	2405      	movs	r4, #5
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
   11726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1172a:	6973      	ldr	r3, [r6, #20]
   1172c:	4628      	mov	r0, r5
   1172e:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   11730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11734:	2100      	movs	r1, #0
   11736:	f010 fed9 	bl	224ec <z_impl_k_sleep>

    // toggle the led 5 times before starting the program
	int led_counter = 0;
    while (led_counter < 5)
   1173a:	3c01      	subs	r4, #1
   1173c:	d1f3      	bne.n	11726 <main+0x32>
		k_msleep(SLEEP_TIME_MS);
		led_counter = led_counter + 1;
	}//end while

      // setup the MCU resources for connecting with AD5940
    AD5940_MCUResourceInit(0);
   1173e:	4620      	mov	r0, r4
   11740:	f000 fc3c 	bl	11fbc <AD5940_MCUResourceInit>
    AD5940_Delay10us(50000);        // delay 500 m
   11744:	f24c 3050 	movw	r0, #50000	; 0xc350
   11748:	f015 fed2 	bl	274f0 <AD5940_Delay10us>

    printf("MCU initialized \n\r");
   1174c:	4849      	ldr	r0, [pc, #292]	; (11874 <main+0x180>)
  clk_cfg.SysClkDiv = SYSCLKDIV_1;
   1174e:	2501      	movs	r5, #1
    printf("MCU initialized \n\r");
   11750:	f012 f8a0 	bl	23894 <iprintf>
  AD5940_HWReset();
   11754:	f015 fea4 	bl	274a0 <AD5940_HWReset>
  AD5940_Initialize();
   11758:	f000 faf2 	bl	11d40 <AD5940_Initialize>
  clk_cfg.HFOSCEn = bTRUE;
   1175c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  AD5940_CLKCfg(&clk_cfg);
   11760:	a807      	add	r0, sp, #28
  clk_cfg.ADCCLkSrc = ADCCLKSRC_HFOSC;
   11762:	e9cd 4407 	strd	r4, r4, [sp, #28]
  clk_cfg.ADCClkDiv = ADCCLKDIV_1;
   11766:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  clk_cfg.HFOSCEn = bTRUE;
   1176a:	930b      	str	r3, [sp, #44]	; 0x2c
  AD5940_CLKCfg(&clk_cfg);
   1176c:	f015 fda2 	bl	272b4 <AD5940_CLKCfg>
  fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   11770:	2302      	movs	r3, #2
  fifo_cfg.FIFOSize = FIFOSIZE_4KB;       // 4kB for FIFO, The rest 2kB for sequencer
   11772:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  fifo_cfg.FIFOSrc = FIFOSRC_DFT;
   11776:	930f      	str	r3, [sp, #60]	; 0x3c
  AD5940_FIFOCfg(&fifo_cfg);              // Disable to reset FIFO
   11778:	a80c      	add	r0, sp, #48	; 0x30
  fifo_cfg.FIFOThresh = 4;
   1177a:	2304      	movs	r3, #4
   1177c:	9310      	str	r3, [sp, #64]	; 0x40
  fifo_cfg.FIFOEn = bFALSE;
   1177e:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  AD5940_FIFOCfg(&fifo_cfg);              // Disable to reset FIFO
   11782:	f015 fb4b 	bl	26e1c <AD5940_FIFOCfg>
  AD5940_FIFOCfg(&fifo_cfg);
   11786:	a80c      	add	r0, sp, #48	; 0x30
  fifo_cfg.FIFOEn = bTRUE;
   11788:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
  AD5940_FIFOCfg(&fifo_cfg);
   1178c:	f015 fb46 	bl	26e1c <AD5940_FIFOCfg>
  seq_cfg.SeqEnable = bFALSE;
   11790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  AD5940_SEQCfg(&seq_cfg);
   11794:	a801      	add	r0, sp, #4
  seq_cfg.SeqWrTimer = 0;
   11796:	e9cd 3402 	strd	r3, r4, [sp, #8]
  seq_cfg.SeqMemSize = SEQMEMSIZE_2KB;
   1179a:	9501      	str	r5, [sp, #4]
  AD5940_SEQCfg(&seq_cfg);
   1179c:	f015 fb7c 	bl	26e98 <AD5940_SEQCfg>
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);           /* Enable all interrupt in Interrupt Controller 1, so we can check INTC flags */
   117a0:	462a      	mov	r2, r5
   117a2:	4628      	mov	r0, r5
   117a4:	f04f 31ff 	mov.w	r1, #4294967295
   117a8:	f015 fe03 	bl	273b2 <AD5940_INTCCfg>
  AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH, bTRUE);   /* Interrupt Controller 0 will control GP0 to generate interrupt to MCU */
   117ac:	462a      	mov	r2, r5
   117ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   117b2:	4620      	mov	r0, r4
   117b4:	f015 fdfd 	bl	273b2 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   117b8:	f04f 30ff 	mov.w	r0, #4294967295
   117bc:	f015 fe11 	bl	273e2 <AD5940_INTCClrFlag>
  gpio_cfg.FuncSet = GP6_SYNC|GP5_SYNC|GP4_SYNC|GP2_SYNC|GP1_SLEEP|GP0_INT;
   117c0:	f642 232c 	movw	r3, #10796	; 0x2a2c
   117c4:	9311      	str	r3, [sp, #68]	; 0x44
  AD5940_AGPIOCfg(&gpio_cfg);
   117c6:	a811      	add	r0, sp, #68	; 0x44
  gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin2;
   117c8:	2377      	movs	r3, #119	; 0x77
   117ca:	9312      	str	r3, [sp, #72]	; 0x48
  gpio_cfg.PullEnSet = 0;
   117cc:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  gpio_cfg.InputEnSet = 0;
   117d0:	9413      	str	r4, [sp, #76]	; 0x4c
  AD5940_AGPIOCfg(&gpio_cfg);
   117d2:	f015 fe2c 	bl	2742e <AD5940_AGPIOCfg>
  AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);          // Allow AFE to enter sleep mode
   117d6:	4828      	ldr	r0, [pc, #160]	; (11878 <main+0x184>)
    {
        // printf("Waiting for interrupt \n\r");
      
        if(AD5940_GetMCUIntFlag())
        {
            printf("Interrupt detected \n\r");
   117d8:	4d28      	ldr	r5, [pc, #160]	; (1187c <main+0x188>)
  AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);          // Allow AFE to enter sleep mode
   117da:	f015 fe3c 	bl	27456 <AD5940_SleepKeyCtrlS>
  LfoscMeasure.CalDuration = 1000.0;            // 1000 ms used for calibration
   117de:	4b28      	ldr	r3, [pc, #160]	; (11880 <main+0x18c>)
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   117e0:	4928      	ldr	r1, [pc, #160]	; (11884 <main+0x190>)
  LfoscMeasure.CalDuration = 1000.0;            // 1000 ms used for calibration
   117e2:	9305      	str	r3, [sp, #20]
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   117e4:	a804      	add	r0, sp, #16
  LfoscMeasure.SystemClkFreq = 16000000.0f;     // 16 MHz in this firmware
   117e6:	4b28      	ldr	r3, [pc, #160]	; (11888 <main+0x194>)
   117e8:	9306      	str	r3, [sp, #24]
  LfoscMeasure.CalSeqAddr = 0;
   117ea:	9404      	str	r4, [sp, #16]
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   117ec:	f000 fadc 	bl	11da8 <AD5940_LFOSCMeasure>
    AD5940_Delay10us(50000);    // delay 500 m
   117f0:	f24c 3050 	movw	r0, #50000	; 0xc350
   117f4:	f015 fe7c 	bl	274f0 <AD5940_Delay10us>
    printf("Platform configured \n\r");
   117f8:	4824      	ldr	r0, [pc, #144]	; (1188c <main+0x198>)
   117fa:	f012 f84b 	bl	23894 <iprintf>
    AD5940AMPStructInit();      // Configure your parameters in this function
   117fe:	f7ff ff2f 	bl	11660 <AD5940AMPStructInit>
    AD5940_Delay10us(50000);    // delay 500 m
   11802:	f24c 3050 	movw	r0, #50000	; 0xc350
   11806:	f015 fe73 	bl	274f0 <AD5940_Delay10us>
    printf("Parameters configured \n\r");
   1180a:	4821      	ldr	r0, [pc, #132]	; (11890 <main+0x19c>)
   1180c:	f012 f842 	bl	23894 <iprintf>
    AppAMPInit(AppBuff, APPBUFF_SIZE);
   11810:	2164      	movs	r1, #100	; 0x64
   11812:	4820      	ldr	r0, [pc, #128]	; (11894 <main+0x1a0>)
   11814:	f000 fcd8 	bl	121c8 <AppAMPInit>
    AD5940_Delay10us(50000);    // delay 500 m
   11818:	f24c 3050 	movw	r0, #50000	; 0xc350
   1181c:	f015 fe68 	bl	274f0 <AD5940_Delay10us>
    AppAMPCtrl(AMPCTRL_START, 0);
   11820:	4621      	mov	r1, r4
   11822:	4620      	mov	r0, r4
   11824:	f000 fc78 	bl	12118 <AppAMPCtrl>
    AD5940_Delay10us(50000);    // delay 500 m
   11828:	f24c 3050 	movw	r0, #50000	; 0xc350
   1182c:	f015 fe60 	bl	274f0 <AD5940_Delay10us>
    printf("Application started  \n\r");
   11830:	4819      	ldr	r0, [pc, #100]	; (11898 <main+0x1a4>)

            AD5940_ClrMCUIntFlag(); /* Clear this flag */

            /// display data
            uint32_t temp = APPBUFF_SIZE;
            AppAMPISR(AppBuff, &temp);
   11832:	4c18      	ldr	r4, [pc, #96]	; (11894 <main+0x1a0>)
    printf("Application started  \n\r");
   11834:	f012 f82e 	bl	23894 <iprintf>
        if(AD5940_GetMCUIntFlag())
   11838:	f000 fbb2 	bl	11fa0 <AD5940_GetMCUIntFlag>
   1183c:	b190      	cbz	r0, 11864 <main+0x170>
            printf("Interrupt detected \n\r");
   1183e:	4628      	mov	r0, r5
   11840:	f012 f828 	bl	23894 <iprintf>
            AD5940_ClrMCUIntFlag(); /* Clear this flag */
   11844:	f000 fbb2 	bl	11fac <AD5940_ClrMCUIntFlag>
            uint32_t temp = APPBUFF_SIZE;
   11848:	2364      	movs	r3, #100	; 0x64
            AppAMPISR(AppBuff, &temp);
   1184a:	a911      	add	r1, sp, #68	; 0x44
   1184c:	4620      	mov	r0, r4
            uint32_t temp = APPBUFF_SIZE;
   1184e:	9311      	str	r3, [sp, #68]	; 0x44
            AppAMPISR(AppBuff, &temp);
   11850:	f000 fea0 	bl	12594 <AppAMPISR>
            AMPShowResult((float*)AppBuff, temp);
   11854:	9911      	ldr	r1, [sp, #68]	; 0x44
   11856:	4620      	mov	r0, r4
   11858:	f7ff ff30 	bl	116bc <AMPShowResult>
        else
        {
            AD5940_Delay10us(10);  // delay 1 sec
        }

        AD5940_Delay10us(10);  // delay 1 sec
   1185c:	200a      	movs	r0, #10
   1185e:	f015 fe47 	bl	274f0 <AD5940_Delay10us>
        if(AD5940_GetMCUIntFlag())
   11862:	e7e9      	b.n	11838 <main+0x144>
            AD5940_Delay10us(10);  // delay 1 sec
   11864:	200a      	movs	r0, #10
   11866:	f015 fe43 	bl	274f0 <AD5940_Delay10us>
   1186a:	e7f7      	b.n	1185c <main+0x168>

    }//end while

    */

}//end main
   1186c:	b016      	add	sp, #88	; 0x58
   1186e:	bd70      	pop	{r4, r5, r6, pc}
   11870:	0002c45c 	.word	0x0002c45c
   11874:	0002d77a 	.word	0x0002d77a
   11878:	000a47e5 	.word	0x000a47e5
   1187c:	0002d7d5 	.word	0x0002d7d5
   11880:	447a0000 	.word	0x447a0000
   11884:	200027b0 	.word	0x200027b0
   11888:	4b742400 	.word	0x4b742400
   1188c:	0002d78d 	.word	0x0002d78d
   11890:	0002d7a4 	.word	0x0002d7a4
   11894:	20002620 	.word	0x20002620
   11898:	0002d7bd 	.word	0x0002d7bd

0001189c <AD5940_SEQGenSearchReg>:
static AD5940Err AD5940_SEQGenSearchReg(uint32_t RegAddr, uint32_t *pIndex)
{
  uint32_t i;

  RegAddr = (RegAddr>>2)&0xff;
  for(i=0;i<SeqGenDB.RegCount;i++)
   1189c:	4b0a      	ldr	r3, [pc, #40]	; (118c8 <AD5940_SEQGenSearchReg+0x2c>)
{
   1189e:	b530      	push	{r4, r5, lr}
  RegAddr = (RegAddr>>2)&0xff;
   118a0:	f3c0 0087 	ubfx	r0, r0, #2, #8
  {
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   118a4:	e9d3 4204 	ldrd	r4, r2, [r3, #16]
  for(i=0;i<SeqGenDB.RegCount;i++)
   118a8:	2300      	movs	r3, #0
   118aa:	429a      	cmp	r2, r3
   118ac:	d102      	bne.n	118b4 <AD5940_SEQGenSearchReg+0x18>
    {
      *pIndex = i;
      return AD5940ERR_OK;
    }
  }
  return AD5940ERR_SEQREG;
   118ae:	f06f 0006 	mvn.w	r0, #6
   118b2:	e005      	b.n	118c0 <AD5940_SEQGenSearchReg+0x24>
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   118b4:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
   118b8:	4285      	cmp	r5, r0
   118ba:	d102      	bne.n	118c2 <AD5940_SEQGenSearchReg+0x26>
      *pIndex = i;
   118bc:	600b      	str	r3, [r1, #0]
      return AD5940ERR_OK;
   118be:	2000      	movs	r0, #0
}
   118c0:	bd30      	pop	{r4, r5, pc}
  for(i=0;i<SeqGenDB.RegCount;i++)
   118c2:	3301      	adds	r3, #1
   118c4:	e7f1      	b.n	118aa <AD5940_SEQGenSearchReg+0xe>
   118c6:	bf00      	nop
   118c8:	200027b4 	.word	0x200027b4

000118cc <AD5940_SEQRegInfoInsert>:
 * @return Return None.
*/
static void AD5940_SEQRegInfoInsert(uint16_t RegAddr, uint32_t RegData)
{
  uint32_t temp;
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   118cc:	4b0d      	ldr	r3, [pc, #52]	; (11904 <AD5940_SEQRegInfoInsert+0x38>)
{
   118ce:	b530      	push	{r4, r5, lr}
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   118d0:	695a      	ldr	r2, [r3, #20]
   118d2:	68dc      	ldr	r4, [r3, #12]
  
  if(temp < SeqGenDB.BufferSize)
   118d4:	685d      	ldr	r5, [r3, #4]
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   118d6:	4414      	add	r4, r2
  if(temp < SeqGenDB.BufferSize)
   118d8:	42a5      	cmp	r5, r4
   118da:	d90e      	bls.n	118fa <AD5940_SEQRegInfoInsert+0x2e>
  {
    SeqGenDB.pRegInfo --; /* Move back */
   118dc:	691c      	ldr	r4, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   118de:	0880      	lsrs	r0, r0, #2
    SeqGenDB.pRegInfo --; /* Move back */
   118e0:	1f25      	subs	r5, r4, #4
   118e2:	611d      	str	r5, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   118e4:	f804 0c04 	strb.w	r0, [r4, #-4]
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   118e8:	f854 0c04 	ldr.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   118ec:	3201      	adds	r2, #1
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   118ee:	f361 201f 	bfi	r0, r1, #8, #24
   118f2:	f844 0c04 	str.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   118f6:	615a      	str	r2, [r3, #20]
  }
  else  /* There is no more buffer  */
  {
    SeqGenDB.LastError = AD5940ERR_BUFF;
  }
}
   118f8:	bd30      	pop	{r4, r5, pc}
    SeqGenDB.LastError = AD5940ERR_BUFF;
   118fa:	f06f 0203 	mvn.w	r2, #3
   118fe:	619a      	str	r2, [r3, #24]
}
   11900:	e7fa      	b.n	118f8 <AD5940_SEQRegInfoInsert+0x2c>
   11902:	bf00      	nop
   11904:	200027b4 	.word	0x200027b4

00011908 <AD5940_SEQGenInsert>:
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   11908:	4b09      	ldr	r3, [pc, #36]	; (11930 <AD5940_SEQGenInsert+0x28>)
   1190a:	68d9      	ldr	r1, [r3, #12]
   1190c:	695a      	ldr	r2, [r3, #20]
{
   1190e:	b510      	push	{r4, lr}
  if(temp < SeqGenDB.BufferSize)
   11910:	685c      	ldr	r4, [r3, #4]
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   11912:	440a      	add	r2, r1
  if(temp < SeqGenDB.BufferSize)
   11914:	4294      	cmp	r4, r2
    SeqGenDB.pSeqBuff[SeqGenDB.SeqLen] = CmdWord;
   11916:	bf83      	ittte	hi
   11918:	689a      	ldrhi	r2, [r3, #8]
   1191a:	f842 0021 	strhi.w	r0, [r2, r1, lsl #2]
    SeqGenDB.SeqLen ++;
   1191e:	68da      	ldrhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   11920:	f06f 0203 	mvnls.w	r2, #3
    SeqGenDB.SeqLen ++;
   11924:	bf86      	itte	hi
   11926:	3201      	addhi	r2, #1
   11928:	60da      	strhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   1192a:	619a      	strls	r2, [r3, #24]
}
   1192c:	bd10      	pop	{r4, pc}
   1192e:	bf00      	nop
   11930:	200027b4 	.word	0x200027b4

00011934 <AD5940_SEQGenInit>:
 * @param BufferSize: The buffer length.
 * @return Return None.
*/
void AD5940_SEQGenInit(uint32_t *pBuffer, uint32_t BufferSize)
{
  if(BufferSize < 2) return;
   11934:	2901      	cmp	r1, #1
   11936:	d90d      	bls.n	11954 <AD5940_SEQGenInit+0x20>
  SeqGenDB.BufferSize = BufferSize;
   11938:	4b07      	ldr	r3, [pc, #28]	; (11958 <AD5940_SEQGenInit+0x24>)
  SeqGenDB.pSeqBuff = pBuffer;
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
  SeqGenDB.SeqLen = 0;
   1193a:	2200      	movs	r2, #0
  SeqGenDB.pSeqBuff = pBuffer;
   1193c:	e9c3 1001 	strd	r1, r0, [r3, #4]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   11940:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11944:	3901      	subs	r1, #1

  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   11946:	e9c3 2205 	strd	r2, r2, [r3, #20]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   1194a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1194e:	6118      	str	r0, [r3, #16]
  SeqGenDB.SeqLen = 0;
   11950:	60da      	str	r2, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   11952:	701a      	strb	r2, [r3, #0]
}
   11954:	4770      	bx	lr
   11956:	bf00      	nop
   11958:	200027b4 	.word	0x200027b4

0001195c <AD5940_SEQGenFetchSeq>:
*/
AD5940Err AD5940_SEQGenFetchSeq(const uint32_t **ppSeqCmd, uint32_t *pSeqLen)
{
  AD5940Err lasterror;

  if(ppSeqCmd)
   1195c:	4b04      	ldr	r3, [pc, #16]	; (11970 <AD5940_SEQGenFetchSeq+0x14>)
   1195e:	b108      	cbz	r0, 11964 <AD5940_SEQGenFetchSeq+0x8>
    *ppSeqCmd = SeqGenDB.pSeqBuff;  
   11960:	689a      	ldr	r2, [r3, #8]
   11962:	6002      	str	r2, [r0, #0]
  if(pSeqLen)
   11964:	b109      	cbz	r1, 1196a <AD5940_SEQGenFetchSeq+0xe>
    *pSeqLen = SeqGenDB.SeqLen;
   11966:	68da      	ldr	r2, [r3, #12]
   11968:	600a      	str	r2, [r1, #0]

  //SeqGenDB.SeqLen = 0;  /* Start a new sequence */
  lasterror = SeqGenDB.LastError;
  //SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
  return lasterror;
}
   1196a:	6998      	ldr	r0, [r3, #24]
   1196c:	4770      	bx	lr
   1196e:	bf00      	nop
   11970:	200027b4 	.word	0x200027b4

00011974 <AD5940_SEQGenCtrl>:
 * @param bFlag: Enable or disable sequencer generator.
 * @return Return None.
*/
void AD5940_SEQGenCtrl(BoolFlag bFlag)
{
  if(bFlag == bFALSE) /* Disable sequence generator */
   11974:	4b04      	ldr	r3, [pc, #16]	; (11988 <AD5940_SEQGenCtrl+0x14>)
   11976:	b908      	cbnz	r0, 1197c <AD5940_SEQGenCtrl+0x8>
  {
    SeqGenDB.EngineStart = bFALSE;
   11978:	7018      	strb	r0, [r3, #0]
   1197a:	4770      	bx	lr
  }
  else
  {
    SeqGenDB.SeqLen = 0;
   1197c:	2200      	movs	r2, #0
   1197e:	60da      	str	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
   11980:	619a      	str	r2, [r3, #24]
    SeqGenDB.EngineStart = bTRUE;
   11982:	2201      	movs	r2, #1
   11984:	701a      	strb	r2, [r3, #0]
  }
}
   11986:	4770      	bx	lr
   11988:	200027b4 	.word	0x200027b4

0001198c <AD5940_Notch50HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, only need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 50Hz filter is available.
*/
BoolFlag AD5940_Notch50HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   1198c:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   1198e:	68c4      	ldr	r4, [r0, #12]
   11990:	2c01      	cmp	r4, #1
{
   11992:	b086      	sub	sp, #24
   11994:	4605      	mov	r5, r0
   11996:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11998:	d120      	bne.n	119dc <AD5940_Notch50HzAvailable+0x50>
   1199a:	6803      	ldr	r3, [r0, #0]
   1199c:	2b02      	cmp	r3, #2
   1199e:	d133      	bne.n	11a08 <AD5940_Notch50HzAvailable+0x7c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   119a0:	4b23      	ldr	r3, [pc, #140]	; (11a30 <AD5940_Notch50HzAvailable+0xa4>)
   119a2:	6818      	ldr	r0, [r3, #0]
   119a4:	791b      	ldrb	r3, [r3, #4]
   119a6:	f88d 300c 	strb.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   119aa:	4b22      	ldr	r3, [pc, #136]	; (11a34 <AD5940_Notch50HzAvailable+0xa8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   119ac:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   119ae:	6818      	ldr	r0, [r3, #0]
   119b0:	791b      	ldrb	r3, [r3, #4]
   119b2:	f88d 3014 	strb.w	r3, [sp, #20]
   119b6:	9004      	str	r0, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   119b8:	f10d 0307 	add.w	r3, sp, #7
   119bc:	2205      	movs	r2, #5
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
    const uint8_t dl_50Hz[] = {18,15,12};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   119be:	7928      	ldrb	r0, [r5, #4]
   119c0:	a902      	add	r1, sp, #8
   119c2:	f014 ffb5 	bl	26930 <_is_value_in_table>
   119c6:	b378      	cbz	r0, 11a28 <AD5940_Notch50HzAvailable+0x9c>
    {
      *dl = dl_50Hz[index];
   119c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   119cc:	aa06      	add	r2, sp, #24
   119ce:	4413      	add	r3, r2
      return bTRUE;
   119d0:	2001      	movs	r0, #1
      *dl = dl_50Hz[index];
   119d2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   119d6:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   119d8:	b006      	add	sp, #24
   119da:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   119dc:	bb24      	cbnz	r4, 11a28 <AD5940_Notch50HzAvailable+0x9c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   119de:	6803      	ldr	r3, [r0, #0]
   119e0:	2b02      	cmp	r3, #2
   119e2:	d1dd      	bne.n	119a0 <AD5940_Notch50HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   119e4:	4b14      	ldr	r3, [pc, #80]	; (11a38 <AD5940_Notch50HzAvailable+0xac>)
   119e6:	881a      	ldrh	r2, [r3, #0]
   119e8:	789b      	ldrb	r3, [r3, #2]
   119ea:	f88d 300a 	strb.w	r3, [sp, #10]
    const uint8_t dl_50Hz[] = {18,15,12};
   119ee:	4b13      	ldr	r3, [pc, #76]	; (11a3c <AD5940_Notch50HzAvailable+0xb0>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   119f0:	f8ad 2008 	strh.w	r2, [sp, #8]
    const uint8_t dl_50Hz[] = {18,15,12};
   119f4:	881a      	ldrh	r2, [r3, #0]
   119f6:	789b      	ldrb	r3, [r3, #2]
   119f8:	f8ad 2010 	strh.w	r2, [sp, #16]
   119fc:	f88d 3012 	strb.w	r3, [sp, #18]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11a00:	2203      	movs	r2, #3
   11a02:	f10d 0307 	add.w	r3, sp, #7
   11a06:	e7da      	b.n	119be <AD5940_Notch50HzAvailable+0x32>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   11a08:	4b0d      	ldr	r3, [pc, #52]	; (11a40 <AD5940_Notch50HzAvailable+0xb4>)
   11a0a:	6818      	ldr	r0, [r3, #0]
   11a0c:	889b      	ldrh	r3, [r3, #4]
   11a0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   11a12:	4b0c      	ldr	r3, [pc, #48]	; (11a44 <AD5940_Notch50HzAvailable+0xb8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   11a14:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   11a16:	6818      	ldr	r0, [r3, #0]
   11a18:	889b      	ldrh	r3, [r3, #4]
   11a1a:	f8ad 3014 	strh.w	r3, [sp, #20]
   11a1e:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11a20:	f10d 0307 	add.w	r3, sp, #7
   11a24:	2206      	movs	r2, #6
   11a26:	e7ca      	b.n	119be <AD5940_Notch50HzAvailable+0x32>
  *dl = 0;
   11a28:	2000      	movs	r0, #0
   11a2a:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   11a2c:	e7d4      	b.n	119d8 <AD5940_Notch50HzAvailable+0x4c>
   11a2e:	bf00      	nop
   11a30:	0002d7eb 	.word	0x0002d7eb
   11a34:	0002d7f1 	.word	0x0002d7f1
   11a38:	0002d7f7 	.word	0x0002d7f7
   11a3c:	0002d7fb 	.word	0x0002d7fb
   11a40:	0002d7ff 	.word	0x0002d7ff
   11a44:	0002d806 	.word	0x0002d806

00011a48 <AD5940_Notch60HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 60Hz filter is available.
*/
BoolFlag AD5940_Notch60HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   11a48:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11a4a:	68c4      	ldr	r4, [r0, #12]
   11a4c:	2c01      	cmp	r4, #1
{
   11a4e:	b086      	sub	sp, #24
   11a50:	4605      	mov	r5, r0
   11a52:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11a54:	d11c      	bne.n	11a90 <AD5940_Notch60HzAvailable+0x48>
   11a56:	6803      	ldr	r3, [r0, #0]
   11a58:	2b02      	cmp	r3, #2
   11a5a:	d128      	bne.n	11aae <AD5940_Notch60HzAvailable+0x66>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_667, ADCSINC2OSR_1333};
   11a5c:	f640 3307 	movw	r3, #2823	; 0xb07
   11a60:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {10,5};
   11a64:	f240 530a 	movw	r3, #1290	; 0x50a
   11a68:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11a6c:	2202      	movs	r2, #2
   11a6e:	f10d 0307 	add.w	r3, sp, #7
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
    const uint8_t dl_60Hz[] = {15,10};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11a72:	7928      	ldrb	r0, [r5, #4]
   11a74:	a902      	add	r1, sp, #8
   11a76:	f014 ff5b 	bl	26930 <_is_value_in_table>
   11a7a:	b340      	cbz	r0, 11ace <AD5940_Notch60HzAvailable+0x86>
    {
      *dl = dl_60Hz[index];
   11a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11a80:	aa06      	add	r2, sp, #24
   11a82:	4413      	add	r3, r2
      return bTRUE;
   11a84:	2001      	movs	r0, #1
      *dl = dl_60Hz[index];
   11a86:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   11a8a:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   11a8c:	b006      	add	sp, #24
   11a8e:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   11a90:	b9ec      	cbnz	r4, 11ace <AD5940_Notch60HzAvailable+0x86>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   11a92:	6802      	ldr	r2, [r0, #0]
   11a94:	2a02      	cmp	r2, #2
   11a96:	d1e1      	bne.n	11a5c <AD5940_Notch60HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
   11a98:	f640 3309 	movw	r3, #2825	; 0xb09
   11a9c:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10};
   11aa0:	f640 230f 	movw	r3, #2575	; 0xa0f
   11aa4:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11aa8:	f10d 0307 	add.w	r3, sp, #7
   11aac:	e7e1      	b.n	11a72 <AD5940_Notch60HzAvailable+0x2a>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   11aae:	4b09      	ldr	r3, [pc, #36]	; (11ad4 <AD5940_Notch60HzAvailable+0x8c>)
   11ab0:	6818      	ldr	r0, [r3, #0]
   11ab2:	889b      	ldrh	r3, [r3, #4]
   11ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   11ab8:	4b07      	ldr	r3, [pc, #28]	; (11ad8 <AD5940_Notch60HzAvailable+0x90>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   11aba:	9002      	str	r0, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   11abc:	6818      	ldr	r0, [r3, #0]
   11abe:	889b      	ldrh	r3, [r3, #4]
   11ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
   11ac4:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   11ac6:	f10d 0307 	add.w	r3, sp, #7
   11aca:	2206      	movs	r2, #6
   11acc:	e7d1      	b.n	11a72 <AD5940_Notch60HzAvailable+0x2a>
  *dl = 0;
   11ace:	2000      	movs	r0, #0
   11ad0:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   11ad2:	e7db      	b.n	11a8c <AD5940_Notch60HzAvailable+0x44>
   11ad4:	0002d80d 	.word	0x0002d80d
   11ad8:	0002d814 	.word	0x0002d814

00011adc <AD5940_ClksCalculate>:
 * @param pFilterInfo: Pointer to configuration structure. 
 * @param pClocks: pointer used to store results.         
 * @return return none.
*/
void AD5940_ClksCalculate(ClksCalInfo_Type *pFilterInfo, uint32_t *pClocks)
{
   11adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t temp = 0;
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   11ade:	4d5e      	ldr	r5, [pc, #376]	; (11c58 <AD5940_ClksCalculate+0x17c>)
{
   11ae0:	4684      	mov	ip, r0
   11ae2:	460f      	mov	r7, r1
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   11ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   11ae6:	b099      	sub	sp, #100	; 0x64
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   11ae8:	ae0b      	add	r6, sp, #44	; 0x2c
   11aea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11aee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11af2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11af4:	f855 3b04 	ldr.w	r3, [r5], #4
   11af8:	6033      	str	r3, [r6, #0]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   11afa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  uint32_t temp = 0;
   11afe:	2400      	movs	r4, #0
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   11b00:	ae02      	add	r6, sp, #8
  uint32_t temp = 0;
   11b02:	9401      	str	r4, [sp, #4]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   11b04:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

  *pClocks = 0;
   11b08:	603c      	str	r4, [r7, #0]
  if(pFilterInfo == NULL) return;
   11b0a:	4664      	mov	r4, ip
   11b0c:	b314      	cbz	r4, 11b54 <AD5940_ClksCalculate+0x78>
  if(pClocks == NULL) return;
  if(pFilterInfo->ADCSinc2Osr > ADCSINC2OSR_1333) return;
   11b0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
   11b12:	2a0b      	cmp	r2, #11
   11b14:	d81e      	bhi.n	11b54 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCSinc3Osr > 2)  return; /* 0: OSR5, 1:OSR4, 2:OSR2 */
   11b16:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11b1a:	2b02      	cmp	r3, #2
   11b1c:	d81a      	bhi.n	11b54 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCAvgNum > ADCAVGNUM_16) return; /* Average number index:0,1,2,3 */
   11b1e:	f8dc 1010 	ldr.w	r1, [ip, #16]
   11b22:	2903      	cmp	r1, #3
   11b24:	d816      	bhi.n	11b54 <AD5940_ClksCalculate+0x78>
  switch(pFilterInfo->DataType)
   11b26:	f8dc 0000 	ldr.w	r0, [ip]
   11b2a:	2804      	cmp	r0, #4
   11b2c:	d810      	bhi.n	11b50 <AD5940_ClksCalculate+0x74>
   11b2e:	e8df f000 	tbb	[pc, r0]
   11b32:	1303      	.short	0x1303
   11b34:	6b29      	.short	0x6b29
   11b36:	41          	.byte	0x41
   11b37:	00          	.byte	0x00
  {
    case DATATYPE_ADCRAW:
      temp = (uint32_t)(20*pFilterInfo->DataCount*pFilterInfo->RatioSys2AdcClk);
   11b38:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11b3c:	2014      	movs	r0, #20
   11b3e:	4358      	muls	r0, r3
   11b40:	f7ee fbe4 	bl	30c <__aeabi_ui2f>
   11b44:	69e1      	ldr	r1, [r4, #28]
   11b46:	f7ee fc39 	bl	3bc <__aeabi_fmul>
      break;
    case DATATYPE_SINC3:
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   11b4a:	f7ee fe23 	bl	794 <__aeabi_f2uiz>
   11b4e:	9001      	str	r0, [sp, #4]
      temp += 25; /* add margin */
      break;
    default:
    break;
  }
  *pClocks = temp;
   11b50:	9b01      	ldr	r3, [sp, #4]
   11b52:	603b      	str	r3, [r7, #0]
}
   11b54:	b019      	add	sp, #100	; 0x64
   11b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   11b58:	f8dc 0004 	ldr.w	r0, [ip, #4]
   11b5c:	2214      	movs	r2, #20
   11b5e:	4350      	muls	r0, r2
   11b60:	aa18      	add	r2, sp, #96	; 0x60
   11b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11b66:	3028      	adds	r0, #40	; 0x28
   11b68:	f853 3c58 	ldr.w	r3, [r3, #-88]
   11b6c:	4358      	muls	r0, r3
   11b6e:	3014      	adds	r0, #20
   11b70:	f7ee fbcc 	bl	30c <__aeabi_ui2f>
   11b74:	69e1      	ldr	r1, [r4, #28]
   11b76:	f7ee fc21 	bl	3bc <__aeabi_fmul>
   11b7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11b7e:	f7ee fb15 	bl	1ac <__addsf3>
   11b82:	e7e2      	b.n	11b4a <AD5940_ClksCalculate+0x6e>
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   11b84:	ab18      	add	r3, sp, #96	; 0x60
   11b86:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   11b8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   11b8e:	f852 3c34 	ldr.w	r3, [r2, #-52]
   11b92:	fb01 3303 	mla	r3, r1, r3, r3
   11b96:	3301      	adds	r3, #1
      pFilterInfo->DataType = DATATYPE_SINC3;
   11b98:	2201      	movs	r2, #1
      pFilterInfo->DataCount = temp;
   11b9a:	e9cc 2300 	strd	r2, r3, [ip]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   11b9e:	a901      	add	r1, sp, #4
   11ba0:	4660      	mov	r0, ip
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   11ba2:	9301      	str	r3, [sp, #4]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   11ba4:	f7ff ff9a 	bl	11adc <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_SINC2;
   11ba8:	2302      	movs	r3, #2
   11baa:	6023      	str	r3, [r4, #0]
      temp += 15;   /* Need extra 15 clocks for FIFO etc. Just to be safe. */
   11bac:	9b01      	ldr	r3, [sp, #4]
   11bae:	330f      	adds	r3, #15
      temp += 25; /* add margin */
   11bb0:	9301      	str	r3, [sp, #4]
      break;
   11bb2:	e7cd      	b.n	11b50 <AD5940_ClksCalculate+0x74>
      filter.ADCRate = pFilterInfo->ADCRate;
   11bb4:	f89c 1018 	ldrb.w	r1, [ip, #24]
   11bb8:	9109      	str	r1, [sp, #36]	; 0x24
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   11bba:	a806      	add	r0, sp, #24
   11bbc:	f10d 0102 	add.w	r1, sp, #2
      filter.ADCSinc2Osr = pFilterInfo->ADCSinc2Osr;
   11bc0:	e9cd 3206 	strd	r3, r2, [sp, #24]
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   11bc4:	f7ff fee2 	bl	1198c <AD5940_Notch50HzAvailable>
   11bc8:	4605      	mov	r5, r0
   11bca:	b118      	cbz	r0, 11bd4 <AD5940_ClksCalculate+0xf8>
        dl += dl_50 - 1;
   11bcc:	f89d 5002 	ldrb.w	r5, [sp, #2]
   11bd0:	3d01      	subs	r5, #1
   11bd2:	b2ed      	uxtb	r5, r5
      if(AD5940_Notch60HzAvailable(&filter, &dl_60)){
   11bd4:	f10d 0103 	add.w	r1, sp, #3
   11bd8:	a806      	add	r0, sp, #24
   11bda:	f7ff ff35 	bl	11a48 <AD5940_Notch60HzAvailable>
   11bde:	b120      	cbz	r0, 11bea <AD5940_ClksCalculate+0x10e>
        dl += dl_60 - 1;
   11be0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   11be4:	3801      	subs	r0, #1
   11be6:	4405      	add	r5, r0
   11be8:	b2ed      	uxtb	r5, r5
      pFilterInfo->DataType = DATATYPE_SINC2;
   11bea:	2302      	movs	r3, #2
   11bec:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount += dl; //DL is the extra data input needed for filter to output first data.
   11bee:	6863      	ldr	r3, [r4, #4]
   11bf0:	442b      	add	r3, r5
   11bf2:	6063      	str	r3, [r4, #4]
      AD5940_ClksCalculate(pFilterInfo,&temp);
   11bf4:	4620      	mov	r0, r4
   11bf6:	a901      	add	r1, sp, #4
   11bf8:	f7ff ff70 	bl	11adc <AD5940_ClksCalculate>
      pFilterInfo->DataCount -= dl;
   11bfc:	6860      	ldr	r0, [r4, #4]
      pFilterInfo->DataType = DATATYPE_NOTCH;
   11bfe:	2304      	movs	r3, #4
      pFilterInfo->DataCount -= dl;
   11c00:	1b40      	subs	r0, r0, r5
      pFilterInfo->DataType = DATATYPE_NOTCH;
   11c02:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount -= dl;
   11c04:	6060      	str	r0, [r4, #4]
      break;
   11c06:	e7a3      	b.n	11b50 <AD5940_ClksCalculate+0x74>
      switch(pFilterInfo->DftSrc)
   11c08:	f8dc 3014 	ldr.w	r3, [ip, #20]
   11c0c:	2b03      	cmp	r3, #3
   11c0e:	d809      	bhi.n	11c24 <AD5940_ClksCalculate+0x148>
   11c10:	e8df f003 	tbb	[pc, r3]
   11c14:	16020d0f 	.word	0x16020d0f
          pFilterInfo->DataType = DATATYPE_ADCRAW;
   11c18:	2300      	movs	r3, #0
   11c1a:	6023      	str	r3, [r4, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
   11c1c:	a901      	add	r1, sp, #4
   11c1e:	4620      	mov	r0, r4
   11c20:	f7ff ff5c 	bl	11adc <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_DFT;
   11c24:	2303      	movs	r3, #3
   11c26:	6023      	str	r3, [r4, #0]
      temp += 25; /* add margin */
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	3319      	adds	r3, #25
   11c2c:	e7c0      	b.n	11bb0 <AD5940_ClksCalculate+0xd4>
          pFilterInfo->DataType = DATATYPE_SINC3;
   11c2e:	2301      	movs	r3, #1
   11c30:	e7f3      	b.n	11c1a <AD5940_ClksCalculate+0x13e>
          if(pFilterInfo->BpNotch)
   11c32:	f89c 3019 	ldrb.w	r3, [ip, #25]
            pFilterInfo->DataType = DATATYPE_NOTCH;
   11c36:	2b00      	cmp	r3, #0
   11c38:	bf14      	ite	ne
   11c3a:	2302      	movne	r3, #2
   11c3c:	2304      	moveq	r3, #4
   11c3e:	e7ec      	b.n	11c1a <AD5940_ClksCalculate+0x13e>
          pFilterInfo->DataType = DATATYPE_SINC3;
   11c40:	2301      	movs	r3, #1
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   11c42:	4419      	add	r1, r3
          pFilterInfo->DataType = DATATYPE_SINC3;
   11c44:	f8cc 3000 	str.w	r3, [ip]
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   11c48:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11c4c:	fa03 f101 	lsl.w	r1, r3, r1
   11c50:	f8cc 1004 	str.w	r1, [ip, #4]
   11c54:	e7e2      	b.n	11c1c <AD5940_ClksCalculate+0x140>
   11c56:	bf00      	nop
   11c58:	0002c930 	.word	0x0002c930

00011c5c <AD5940_WriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
void AD5940_WriteReg(uint16_t RegAddr, uint32_t RegData)
{
   11c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   11c5e:	4f26      	ldr	r7, [pc, #152]	; (11cf8 <AD5940_WriteReg+0x9c>)
   11c60:	783b      	ldrb	r3, [r7, #0]
   11c62:	2b01      	cmp	r3, #1
{
   11c64:	4604      	mov	r4, r0
   11c66:	460e      	mov	r6, r1
  if(SeqGenDB.EngineStart == bTRUE)
   11c68:	d124      	bne.n	11cb4 <AD5940_WriteReg+0x58>
  if(RegAddr > 0x21ff)
   11c6a:	f5b0 5f08 	cmp.w	r0, #8704	; 0x2200
   11c6e:	d304      	bcc.n	11c7a <AD5940_WriteReg+0x1e>
    SeqGenDB.LastError = AD5940ERR_ADDROR;  /* address out of range  */
   11c70:	f06f 0304 	mvn.w	r3, #4
   11c74:	61bb      	str	r3, [r7, #24]
#ifdef CHIPSEL_M355
    AD5940_D2DWriteReg(RegAddr, RegData);
#else
    AD5940_SPIWriteReg(RegAddr, RegData);
#endif
}
   11c76:	b003      	add	sp, #12
   11c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   11c7a:	a901      	add	r1, sp, #4
   11c7c:	f7ff fe0e 	bl	1189c <AD5940_SEQGenSearchReg>
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11c80:	05a5      	lsls	r5, r4, #22
   11c82:	f005 45fe 	and.w	r5, r5, #2130706432	; 0x7f000000
   11c86:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
   11c8a:	431d      	orrs	r5, r3
   11c8c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   11c90:	b958      	cbnz	r0, 11caa <AD5940_WriteReg+0x4e>
    SeqGenDB.pRegInfo[RegIndex].RegValue = RegData;
   11c92:	9a01      	ldr	r2, [sp, #4]
   11c94:	693b      	ldr	r3, [r7, #16]
   11c96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11c9a:	f366 211f 	bfi	r1, r6, #8, #24
   11c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11ca2:	4628      	mov	r0, r5
   11ca4:	f7ff fe30 	bl	11908 <AD5940_SEQGenInsert>
   11ca8:	e7e5      	b.n	11c76 <AD5940_WriteReg+0x1a>
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   11caa:	4631      	mov	r1, r6
   11cac:	4620      	mov	r0, r4
   11cae:	f7ff fe0d 	bl	118cc <AD5940_SEQRegInfoInsert>
   11cb2:	e7f6      	b.n	11ca2 <AD5940_WriteReg+0x46>
  AD5940_CsClr();
   11cb4:	f015 fc23 	bl	274fe <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   11cb8:	2020      	movs	r0, #32
   11cba:	f014 fe6f 	bl	2699c <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   11cbe:	4620      	mov	r0, r4
   11cc0:	f014 fe43 	bl	2694a <AD5940_ReadWrite16B>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   11cc4:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_CsSet();
   11cc8:	f015 fc1d 	bl	27506 <AD5940_CsSet>
  AD5940_CsClr();
   11ccc:	f015 fc17 	bl	274fe <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_WRITEREG);
   11cd0:	202d      	movs	r0, #45	; 0x2d
   11cd2:	f014 fe63 	bl	2699c <AD5940_ReadWrite8B.isra.0>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   11cd6:	b2a4      	uxth	r4, r4
   11cd8:	f242 0314 	movw	r3, #8212	; 0x2014
   11cdc:	429c      	cmp	r4, r3
   11cde:	d807      	bhi.n	11cf0 <AD5940_WriteReg+0x94>
    AD5940_ReadWrite32B(RegData);
   11ce0:	4630      	mov	r0, r6
   11ce2:	f014 fe44 	bl	2696e <AD5940_ReadWrite32B>
}
   11ce6:	b003      	add	sp, #12
   11ce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AD5940_CsSet();
   11cec:	f015 bc0b 	b.w	27506 <AD5940_CsSet>
    AD5940_ReadWrite16B(RegData);
   11cf0:	b2b0      	uxth	r0, r6
   11cf2:	f014 fe2a 	bl	2694a <AD5940_ReadWrite16B>
   11cf6:	e7f6      	b.n	11ce6 <AD5940_WriteReg+0x8a>
   11cf8:	200027b4 	.word	0x200027b4

00011cfc <AD5940_ReadReg>:
 *        Otherwise, read register value by SPI.
 * @param RegAddr: The register address.
 * @return Return register value.
**/
uint32_t AD5940_ReadReg(uint16_t RegAddr)
{
   11cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   11cfe:	4d0f      	ldr	r5, [pc, #60]	; (11d3c <AD5940_ReadReg+0x40>)
   11d00:	782b      	ldrb	r3, [r5, #0]
   11d02:	2b01      	cmp	r3, #1
{
   11d04:	4604      	mov	r4, r0
  if(SeqGenDB.EngineStart == bTRUE)
   11d06:	d114      	bne.n	11d32 <AD5940_ReadReg+0x36>
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) != AD5940ERR_OK)
   11d08:	a901      	add	r1, sp, #4
   11d0a:	f7ff fdc7 	bl	1189c <AD5940_SEQGenSearchReg>
   11d0e:	b148      	cbz	r0, 11d24 <AD5940_ReadReg+0x28>
  *pRegData = AD5940_SPIReadReg(RegAddr);
   11d10:	4620      	mov	r0, r4
   11d12:	f014 fe4e 	bl	269b2 <AD5940_SPIReadReg>
   11d16:	4601      	mov	r1, r0
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   11d18:	4620      	mov	r0, r4
   11d1a:	f7ff fdd7 	bl	118cc <AD5940_SEQRegInfoInsert>
#ifdef CHIPSEL_M355
    return AD5940_D2DReadReg(RegAddr);
#else
    return AD5940_SPIReadReg(RegAddr);
#endif
}
   11d1e:	4608      	mov	r0, r1
   11d20:	b003      	add	sp, #12
   11d22:	bd30      	pop	{r4, r5, pc}
    RegData = SeqGenDB.pRegInfo[RegIndex].RegValue;
   11d24:	692b      	ldr	r3, [r5, #16]
   11d26:	9a01      	ldr	r2, [sp, #4]
   11d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11d2c:	f3c1 2117 	ubfx	r1, r1, #8, #24
    return AD5940_SEQReadReg(RegAddr);
   11d30:	e7f5      	b.n	11d1e <AD5940_ReadReg+0x22>
}
   11d32:	b003      	add	sp, #12
   11d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return AD5940_SPIReadReg(RegAddr);
   11d38:	f014 be3b 	b.w	269b2 <AD5940_SPIReadReg>
   11d3c:	200027b4 	.word	0x200027b4

00011d40 <AD5940_Initialize>:
 * @brief Initialize AD5940. This function must be called whenever there is reset(Software Reset or Hardware reset or Power up) happened.
 *        This function is used to put AD5940 to correct state.
 * @return return None
**/
void AD5940_Initialize(void)
{
   11d40:	b530      	push	{r4, r5, lr}
   11d42:	b09d      	sub	sp, #116	; 0x74
  /* Write following registers with its data sequentially whenever there is a reset happened. */
  const struct
  {
    uint16_t reg_addr;
    uint32_t reg_data;
  }RegTable[]=
   11d44:	4915      	ldr	r1, [pc, #84]	; (11d9c <AD5940_Initialize+0x5c>)
   11d46:	2270      	movs	r2, #112	; 0x70
   11d48:	4668      	mov	r0, sp
   11d4a:	f01a f940 	bl	2bfce <memcpy>
    {0x2250, 0x103F},
    {0x22B0, 0x203C},
    {0x2230, 0xDE87A5A0},
  };
  //initialize global variables
  SeqGenDB.SeqLen = 0;
   11d4e:	4b14      	ldr	r3, [pc, #80]	; (11da0 <AD5940_Initialize+0x60>)
   11d50:	2400      	movs	r4, #0
  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   11d52:	e9c3 4405 	strd	r4, r4, [r3, #20]
  SeqGenDB.SeqLen = 0;
   11d56:	60dc      	str	r4, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   11d58:	701c      	strb	r4, [r3, #0]
#ifndef CHIPSEL_M355
  AD5940_CsSet(); /* Pull high CS in case it's low */
   11d5a:	f015 fbd4 	bl	27506 <AD5940_CsSet>
#endif
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11d5e:	466d      	mov	r5, sp
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   11d60:	6869      	ldr	r1, [r5, #4]
   11d62:	8828      	ldrh	r0, [r5, #0]
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11d64:	3401      	adds	r4, #1
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   11d66:	f7ff ff79 	bl	11c5c <AD5940_WriteReg>
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11d6a:	2c0e      	cmp	r4, #14
   11d6c:	f105 0508 	add.w	r5, r5, #8
   11d70:	d1f6      	bne.n	11d60 <AD5940_Initialize+0x20>
  i = AD5940_ReadReg(REG_AFECON_CHIPID);  
   11d72:	f240 4004 	movw	r0, #1028	; 0x404
   11d76:	f7ff ffc1 	bl	11cfc <AD5940_ReadReg>
  if(i == 0x5501)
   11d7a:	f5a0 43aa 	sub.w	r3, r0, #21760	; 0x5500
   11d7e:	3b01      	subs	r3, #1
   11d80:	2b01      	cmp	r3, #1
   11d82:	d804      	bhi.n	11d8e <AD5940_Initialize+0x4e>
    bIsS2silicon = bTRUE;
   11d84:	4b07      	ldr	r3, [pc, #28]	; (11da4 <AD5940_Initialize+0x64>)
   11d86:	2201      	movs	r2, #1
  else if(i == 0x5502)  /* S3 chip-id is 0x5502. The is no difference with S2. */
    bIsS2silicon = bTRUE;
  else if(i == 0x5500)
    bIsS2silicon = bFALSE;
   11d88:	701a      	strb	r2, [r3, #0]
  ADI_Print("This AD594x!\n");
#endif
  ADI_Print("Note: Current Silicon is %s\n", bIsS2silicon?"S2":"S1");
  ADI_Print("AD5940LIB Version:v%d.%d.%d\n", AD5940LIB_VER_MAJOR, AD5940LIB_VER_MINOR, AD5940LIB_VER_PATCH);
#endif
}
   11d8a:	b01d      	add	sp, #116	; 0x74
   11d8c:	bd30      	pop	{r4, r5, pc}
  else if(i == 0x5500)
   11d8e:	f5b0 4faa 	cmp.w	r0, #21760	; 0x5500
   11d92:	d1fa      	bne.n	11d8a <AD5940_Initialize+0x4a>
    bIsS2silicon = bFALSE;
   11d94:	4b03      	ldr	r3, [pc, #12]	; (11da4 <AD5940_Initialize+0x64>)
   11d96:	2200      	movs	r2, #0
   11d98:	e7f6      	b.n	11d88 <AD5940_Initialize+0x48>
   11d9a:	bf00      	nop
   11d9c:	0002c9dc 	.word	0x0002c9dc
   11da0:	200027b4 	.word	0x200027b4
   11da4:	20003da4 	.word	0x20003da4

00011da8 <AD5940_LFOSCMeasure>:
 * @param pCfg: pointer to structure.
 * @param pFreq:  Pointer to a variable that used to store frequency in Hz. 
 * @return AD5940ERR_OK if succeed.
**/
AD5940Err AD5940_LFOSCMeasure(LFOSCMeasure_Type *pCfg, float *pFreq) /* Measure current LFOSC frequency. */
{
   11da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11dac:	460f      	mov	r7, r1
   11dae:	b09f      	sub	sp, #124	; 0x7c
  {
    SEQ_TOUT(0x3fffffff),   /* Re-Set time-out timer, so we can measure the time needed for MCU to read out Timer Count register. */
    SEQ_STOP(),             /* Interrupt flag AFEINTSRC_ENDSEQ will be set here */
  };

  if(pCfg == NULL) return AD5940ERR_NULLP;
   11db0:	4604      	mov	r4, r0
   11db2:	2800      	cmp	r0, #0
   11db4:	f000 80bc 	beq.w	11f30 <AD5940_LFOSCMeasure+0x188>
  if(pFreq == NULL) return AD5940ERR_NULLP;
   11db8:	2900      	cmp	r1, #0
   11dba:	f000 80b9 	beq.w	11f30 <AD5940_LFOSCMeasure+0x188>
  if(pCfg->CalDuration < 1.0f)
   11dbe:	6840      	ldr	r0, [r0, #4]
   11dc0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11dc4:	f7ee fc98 	bl	6f8 <__aeabi_fcmplt>
   11dc8:	4606      	mov	r6, r0
   11dca:	2800      	cmp	r0, #0
   11dcc:	f040 80b3 	bne.w	11f36 <AD5940_LFOSCMeasure+0x18e>
    return AD5940ERR_PARA;
  AD5940_SEQGetCfg(&seq_cfg_backup);
   11dd0:	a804      	add	r0, sp, #16
   11dd2:	f015 f899 	bl	26f08 <AD5940_SEQGetCfg>
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   11dd6:	f243 000c 	movw	r0, #12300	; 0x300c
   11dda:	f7ff ff8f 	bl	11cfc <AD5940_ReadReg>
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   11dde:	2201      	movs	r2, #1
   11de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   11de4:	4681      	mov	r9, r0
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   11de6:	4610      	mov	r0, r2
   11de8:	f015 fae3 	bl	273b2 <AD5940_INTCCfg>
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11dec:	f04f 30ff 	mov.w	r0, #4294967295

  seq_cfg.SeqMemSize = SEQMEMSIZE_2KB;  /* 2kB SRAM is used for sequencer */
   11df0:	2501      	movs	r5, #1
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   11df2:	f015 faf6 	bl	273e2 <AD5940_INTCClrFlag>
  seq_cfg.SeqBreakEn = bFALSE;
  seq_cfg.SeqIgnoreEn = bFALSE;
  seq_cfg.SeqCntCRCClr = bFALSE;
  seq_cfg.SeqEnable = bTRUE;
  seq_cfg.SeqWrTimer = 0;
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   11df6:	a801      	add	r0, sp, #4
  seq_cfg.SeqWrTimer = 0;
   11df8:	9603      	str	r6, [sp, #12]
  seq_cfg.SeqEnable = bTRUE;
   11dfa:	e9cd 5501 	strd	r5, r5, [sp, #4]
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   11dfe:	f015 f84b 	bl	26e98 <AD5940_SEQCfg>
  
  seqinfo.pSeqCmd = SeqA;
   11e02:	4b4e      	ldr	r3, [pc, #312]	; (11f3c <AD5940_LFOSCMeasure+0x194>)
   11e04:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_0;
  seqinfo.SeqLen = SEQ_LEN(SeqA);
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   11e06:	a807      	add	r0, sp, #28
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   11e08:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_0;
   11e0a:	9607      	str	r6, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   11e0c:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqA);
   11e0e:	9509      	str	r5, [sp, #36]	; 0x24
  seqinfo.WriteSRAM = bTRUE;
   11e10:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   11e14:	f015 f8c3 	bl	26f9e <AD5940_SEQInfoCfg>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11e18:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   11e1a:	9507      	str	r5, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11e1c:	442b      	add	r3, r5
  seqinfo.SeqLen = SEQ_LEN(SeqB);
   11e1e:	e9cd 3508 	strd	r3, r5, [sp, #32]
  seqinfo.pSeqCmd = SeqB;
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   11e22:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqB;
   11e24:	4b46      	ldr	r3, [pc, #280]	; (11f40 <AD5940_LFOSCMeasure+0x198>)
   11e26:	930b      	str	r3, [sp, #44]	; 0x2c
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   11e28:	f015 f8b9 	bl	26f9e <AD5940_SEQInfoCfg>
	
  wupt_cfg.WuptEn = bFALSE;
  wupt_cfg.WuptOrder[0] = SEQID_0;
  wupt_cfg.WuptOrder[1] = SEQID_1;
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   11e2c:	2304      	movs	r3, #4
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11e2e:	6860      	ldr	r0, [r4, #4]
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   11e30:	9319      	str	r3, [sp, #100]	; 0x64
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11e32:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
  wupt_cfg.WuptOrder[1] = SEQID_1;
   11e36:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
  wupt_cfg.WuptEn = bFALSE;
   11e3a:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
   11e3e:	950c      	str	r5, [sp, #48]	; 0x30
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11e40:	f7ee fabc 	bl	3bc <__aeabi_fmul>
   11e44:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11e48:	f7ee f9b0 	bl	1ac <__addsf3>
   11e4c:	f7ee fca2 	bl	794 <__aeabi_f2uiz>
   11e50:	1f43      	subs	r3, r0, #5
   11e52:	9315      	str	r3, [sp, #84]	; 0x54
  wupt_cfg.SeqxWakeupTime[1] = 4-1;
   11e54:	2303      	movs	r3, #3
   11e56:	931a      	str	r3, [sp, #104]	; 0x68
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   11e58:	4606      	mov	r6, r0
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   11e5a:	f04f 33ff 	mov.w	r3, #4294967295
  WuptPeriod = (wupt_cfg.SeqxSleepTime[0]+1) + (wupt_cfg.SeqxWakeupTime[1]+1);
  AD5940_WUPTCfg(&wupt_cfg);
   11e5e:	a80c      	add	r0, sp, #48	; 0x30
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   11e60:	9316      	str	r3, [sp, #88]	; 0x58
  AD5940_WUPTCfg(&wupt_cfg);
   11e62:	f015 f8d6 	bl	27012 <AD5940_WUPTCfg>
  
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11e66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11e6a:	f015 faba 	bl	273e2 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   11e6e:	4628      	mov	r0, r5
   11e70:	f015 f96e 	bl	27150 <AD5940_WUPTCtrl>
  
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   11e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11e78:	2001      	movs	r0, #1
   11e7a:	f015 fab7 	bl	273ec <AD5940_INTCTestFlag>
   11e7e:	2800      	cmp	r0, #0
   11e80:	d0f8      	beq.n	11e74 <AD5940_LFOSCMeasure+0xcc>
  TimerCount = AD5940_SEQTimeOutRd();
   11e82:	f015 f8c2 	bl	2700a <AD5940_SEQTimeOutRd>
   11e86:	4680      	mov	r8, r0
  
  AD5940_WUPTCtrl(bFALSE);
   11e88:	2000      	movs	r0, #0
   11e8a:	f015 f961 	bl	27150 <AD5940_WUPTCtrl>
	AD5940_WUPTTime(SEQID_0, 4, 4);	/* Set it to minimum value because we don't care about sequence0 now. We only want to measure how much time MCU will need to read register */
   11e8e:	2204      	movs	r2, #4
   11e90:	4611      	mov	r1, r2
   11e92:	2000      	movs	r0, #0
   11e94:	f015 f96f 	bl	27176 <AD5940_WUPTTime>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11e98:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   11e9a:	2501      	movs	r5, #1
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   11e9c:	442b      	add	r3, r5
   11e9e:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqBB);
   11ea0:	2302      	movs	r3, #2
   11ea2:	9309      	str	r3, [sp, #36]	; 0x24
  seqinfo.pSeqCmd = SeqBB;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   11ea4:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqBB;
   11ea6:	4b27      	ldr	r3, [pc, #156]	; (11f44 <AD5940_LFOSCMeasure+0x19c>)
   11ea8:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_1;
   11eaa:	9507      	str	r5, [sp, #28]
  seqinfo.WriteSRAM = bTRUE;
   11eac:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   11eb0:	f015 f875 	bl	26f9e <AD5940_SEQInfoCfg>
  AD5940_SEQCtrlS(bTRUE); /* Enable Sequencer again */
   11eb4:	4628      	mov	r0, r5
   11eb6:	f015 f842 	bl	26f3e <AD5940_SEQCtrlS>

  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11eba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11ebe:	f015 fa90 	bl	273e2 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   11ec2:	4628      	mov	r0, r5
   11ec4:	f015 f944 	bl	27150 <AD5940_WUPTCtrl>
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   11ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11ecc:	2001      	movs	r0, #1
   11ece:	f015 fa8d 	bl	273ec <AD5940_INTCTestFlag>
   11ed2:	2800      	cmp	r0, #0
   11ed4:	d0f8      	beq.n	11ec8 <AD5940_LFOSCMeasure+0x120>
  TimerCount2 = AD5940_SEQTimeOutRd();
   11ed6:	f015 f898 	bl	2700a <AD5940_SEQTimeOutRd>
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   11eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  TimerCount2 = AD5940_SEQTimeOutRd();
   11ede:	4605      	mov	r5, r0
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   11ee0:	2000      	movs	r0, #0
   11ee2:	f015 fa83 	bl	273ec <AD5940_INTCTestFlag>

  AD5940_WUPTCtrl(bFALSE);
   11ee6:	2000      	movs	r0, #0
   11ee8:	f015 f932 	bl	27150 <AD5940_WUPTCtrl>
  AD5940_SEQCfg(&seq_cfg_backup);          /* restore sequencer configuration */
   11eec:	a804      	add	r0, sp, #16
   11eee:	f014 ffd3 	bl	26e98 <AD5940_SEQCfg>
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, (INTCCfg&AFEINTSRC_ENDSEQ)?bTRUE:bFALSE); /* Restore interrupt configuration */
   11ef2:	f3c9 32c0 	ubfx	r2, r9, #15, #1
   11ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11efa:	2001      	movs	r0, #1
   11efc:	f015 fa59 	bl	273b2 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   11f00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11f04:	f015 fa6d 	bl	273e2 <AD5940_INTCClrFlag>
  //printf("Time duration:%d ", (TimerCount2 - TimerCount));
	*pFreq = pCfg->SystemClkFreq*WuptPeriod/(TimerCount2 - TimerCount);
   11f08:	4630      	mov	r0, r6
   11f0a:	f7ee f9ff 	bl	30c <__aeabi_ui2f>
   11f0e:	68a1      	ldr	r1, [r4, #8]
   11f10:	f7ee fa54 	bl	3bc <__aeabi_fmul>
   11f14:	4604      	mov	r4, r0
   11f16:	eba5 0008 	sub.w	r0, r5, r8
   11f1a:	f7ee f9f7 	bl	30c <__aeabi_ui2f>
   11f1e:	4601      	mov	r1, r0
   11f20:	4620      	mov	r0, r4
   11f22:	f7ee faff 	bl	524 <__aeabi_fdiv>
   11f26:	6038      	str	r0, [r7, #0]
  return AD5940ERR_OK;
   11f28:	2000      	movs	r0, #0
}
   11f2a:	b01f      	add	sp, #124	; 0x7c
   11f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(pCfg == NULL) return AD5940ERR_NULLP;
   11f30:	f06f 0002 	mvn.w	r0, #2
   11f34:	e7f9      	b.n	11f2a <AD5940_LFOSCMeasure+0x182>
    return AD5940ERR_PARA;
   11f36:	f06f 0001 	mvn.w	r0, #1
   11f3a:	e7f6      	b.n	11f2a <AD5940_LFOSCMeasure+0x182>
   11f3c:	0002cbc8 	.word	0x0002cbc8
   11f40:	0002cbcc 	.word	0x0002cbcc
   11f44:	0002cbd0 	.word	0x0002cbd0

00011f48 <button_pressed>:
// interrupt indicator flag (interrupt occurred if ucInterrupted == 1)
volatile static uint8_t ucInterrupted = 0;

// executed when button pressed (interrupt occurred)
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
   11f48:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   11f4a:	4808      	ldr	r0, [pc, #32]	; (11f6c <button_pressed+0x24>)
   11f4c:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   11f4e:	6883      	ldr	r3, [r0, #8]
   11f50:	a901      	add	r1, sp, #4
   11f52:	685b      	ldr	r3, [r3, #4]
   11f54:	4798      	blx	r3
	if (ret == 0) {
   11f56:	b920      	cbnz	r0, 11f62 <button_pressed+0x1a>
		*value ^= data->invert;
   11f58:	6823      	ldr	r3, [r4, #0]
   11f5a:	9801      	ldr	r0, [sp, #4]
   11f5c:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11f5e:	f3c0 5000 	ubfx	r0, r0, #20, #1
    ucInterrupted = gpio_pin_get_dt(&button);
   11f62:	4b03      	ldr	r3, [pc, #12]	; (11f70 <button_pressed+0x28>)
   11f64:	b2c0      	uxtb	r0, r0
   11f66:	7018      	strb	r0, [r3, #0]
}
   11f68:	b002      	add	sp, #8
   11f6a:	bd10      	pop	{r4, pc}
   11f6c:	0002c45c 	.word	0x0002c45c
   11f70:	20003da5 	.word	0x20003da5

00011f74 <gpio_pin_set.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11f74:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11f76:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11f78:	fa03 f100 	lsl.w	r1, r3, r0
	const struct gpio_driver_data *const data =
   11f7c:	4b07      	ldr	r3, [pc, #28]	; (11f9c <gpio_pin_set.constprop.0.isra.0+0x28>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11f7e:	6918      	ldr	r0, [r3, #16]
   11f80:	6800      	ldr	r0, [r0, #0]
   11f82:	4201      	tst	r1, r0
		value = (value != 0) ? 0 : 1;
   11f84:	bf18      	it	ne
   11f86:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   11f8a:	b11a      	cbz	r2, 11f94 <gpio_pin_set.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
   11f8c:	689b      	ldr	r3, [r3, #8]
   11f8e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11f90:	4802      	ldr	r0, [pc, #8]	; (11f9c <gpio_pin_set.constprop.0.isra.0+0x28>)
   11f92:	4718      	bx	r3
   11f94:	689b      	ldr	r3, [r3, #8]
   11f96:	691b      	ldr	r3, [r3, #16]
   11f98:	e7fa      	b.n	11f90 <gpio_pin_set.constprop.0.isra.0+0x1c>
   11f9a:	bf00      	nop
   11f9c:	0002c45c 	.word	0x0002c45c

00011fa0 <AD5940_GetMCUIntFlag>:
}//end

/////////////////////////////////////////// return interrupt indicator flag
uint32_t AD5940_GetMCUIntFlag(void)
{
    return ucInterrupted;
   11fa0:	4b01      	ldr	r3, [pc, #4]	; (11fa8 <AD5940_GetMCUIntFlag+0x8>)
   11fa2:	7818      	ldrb	r0, [r3, #0]
}//end
   11fa4:	4770      	bx	lr
   11fa6:	bf00      	nop
   11fa8:	20003da5 	.word	0x20003da5

00011fac <AD5940_ClrMCUIntFlag>:

/////////////////////////////////////////// clear interrupt indicator flag
uint32_t AD5940_ClrMCUIntFlag(void)
{
    ucInterrupted = 0;
   11fac:	4b02      	ldr	r3, [pc, #8]	; (11fb8 <AD5940_ClrMCUIntFlag+0xc>)
   11fae:	2200      	movs	r2, #0
   11fb0:	701a      	strb	r2, [r3, #0]
    return 1;
}//end
   11fb2:	2001      	movs	r0, #1
   11fb4:	4770      	bx	lr
   11fb6:	bf00      	nop
   11fb8:	20003da5 	.word	0x20003da5

00011fbc <AD5940_MCUResourceInit>:
    // .frequency = 1000000,
};

/////////////////////////////////////////// setup function: MCU peripherals (GPIO pins, SPI, interrupt)
uint32_t AD5940_MCUResourceInit(void *pCfg)
{
   11fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // set the AD5941 CS pin and the RESET pin to outputs

    // SIO_31 connected to CS pin
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11fbe:	482a      	ldr	r0, [pc, #168]	; (12068 <AD5940_MCUResourceInit+0xac>)
   11fc0:	4d2a      	ldr	r5, [pc, #168]	; (1206c <AD5940_MCUResourceInit+0xb0>)
   11fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11fc6:	211f      	movs	r1, #31
   11fc8:	f015 fa78 	bl	274bc <gpio_pin_configure>
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11fcc:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11fce:	6028      	str	r0, [r5, #0]
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11fd0:	da02      	bge.n	11fd8 <AD5940_MCUResourceInit+0x1c>
   11fd2:	4827      	ldr	r0, [pc, #156]	; (12070 <AD5940_MCUResourceInit+0xb4>)
   11fd4:	f011 fc5e 	bl	23894 <iprintf>

    // SIO_30 connected to RESET pin
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   11fd8:	4823      	ldr	r0, [pc, #140]	; (12068 <AD5940_MCUResourceInit+0xac>)
   11fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11fde:	211e      	movs	r1, #30
   11fe0:	f015 fa6c 	bl	274bc <gpio_pin_configure>
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11fe4:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   11fe6:	6028      	str	r0, [r5, #0]
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11fe8:	da02      	bge.n	11ff0 <AD5940_MCUResourceInit+0x34>
   11fea:	4822      	ldr	r0, [pc, #136]	; (12074 <AD5940_MCUResourceInit+0xb8>)
   11fec:	f011 fc52 	bl	23894 <iprintf>
   11ff0:	4821      	ldr	r0, [pc, #132]	; (12078 <AD5940_MCUResourceInit+0xbc>)
   11ff2:	f019 fa26 	bl	2b442 <z_device_is_ready>

    if(!device_is_ready(spi_dev))
   11ff6:	b910      	cbnz	r0, 11ffe <AD5940_MCUResourceInit+0x42>
    {
		printf("SPI master device is not ready!\n");
   11ff8:	4820      	ldr	r0, [pc, #128]	; (1207c <AD5940_MCUResourceInit+0xc0>)
   11ffa:	f011 fc4b 	bl	23894 <iprintf>
	return gpio_pin_configure(spec->port,
   11ffe:	4c1a      	ldr	r4, [pc, #104]	; (12068 <AD5940_MCUResourceInit+0xac>)
   12000:	4a1f      	ldr	r2, [pc, #124]	; (12080 <AD5940_MCUResourceInit+0xc4>)
   12002:	2114      	movs	r1, #20
   12004:	4620      	mov	r0, r4
   12006:	f015 fa59 	bl	274bc <gpio_pin_configure>
   1200a:	4601      	mov	r1, r0
     *  pre-scalar setting (0x20 = 32, F(BitClock) = F(BRCLK) / 32)
     */

    // enable external interrupt on pin
    // configure the input button as input
    ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
   1200c:	6028      	str	r0, [r5, #0]
    if (ret != 0)
   1200e:	b120      	cbz	r0, 1201a <AD5940_MCUResourceInit+0x5e>
    {
        printk("Error %d: failed to configure %s pin %d\n", ret, button.port->name, button.pin);
   12010:	6822      	ldr	r2, [r4, #0]
   12012:	481c      	ldr	r0, [pc, #112]	; (12084 <AD5940_MCUResourceInit+0xc8>)
   12014:	2314      	movs	r3, #20
   12016:	f015 fb71 	bl	276fc <printk>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1201a:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
   1201c:	68a6      	ldr	r6, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1201e:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12020:	69b7      	ldr	r7, [r6, #24]
   12022:	4811      	ldr	r0, [pc, #68]	; (12068 <AD5940_MCUResourceInit+0xac>)
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   12024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12028:	f04f 0114 	mov.w	r1, #20
   1202c:	bf0c      	ite	eq
   1202e:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   12032:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   12036:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1203a:	47b8      	blx	r7
   1203c:	4601      	mov	r1, r0
    }

    // configure the interrupt for button
    ret = gpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_TO_ACTIVE);
   1203e:	6028      	str	r0, [r5, #0]
    if (ret != 0)
   12040:	b120      	cbz	r0, 1204c <AD5940_MCUResourceInit+0x90>
    {
        printk("Error %d: failed to configure interrupt on %s pin %d\n", ret, button.port->name, button.pin);
   12042:	6822      	ldr	r2, [r4, #0]
   12044:	4810      	ldr	r0, [pc, #64]	; (12088 <AD5940_MCUResourceInit+0xcc>)
   12046:	2314      	movs	r3, #20
   12048:	f015 fb58 	bl	276fc <printk>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1204c:	490f      	ldr	r1, [pc, #60]	; (1208c <AD5940_MCUResourceInit+0xd0>)
   1204e:	4b10      	ldr	r3, [pc, #64]	; (12090 <AD5940_MCUResourceInit+0xd4>)
   12050:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   12052:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12056:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   12058:	69f3      	ldr	r3, [r6, #28]
   1205a:	b113      	cbz	r3, 12062 <AD5940_MCUResourceInit+0xa6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1205c:	4802      	ldr	r0, [pc, #8]	; (12068 <AD5940_MCUResourceInit+0xac>)
   1205e:	2201      	movs	r2, #1
   12060:	4798      	blx	r3

    gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
    gpio_add_callback(button.port, &button_cb_data);

    return 0;
}//end
   12062:	2000      	movs	r0, #0
   12064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12066:	bf00      	nop
   12068:	0002c45c 	.word	0x0002c45c
   1206c:	200027dc 	.word	0x200027dc
   12070:	0002d81b 	.word	0x0002d81b
   12074:	0002d82a 	.word	0x0002d82a
   12078:	0002c504 	.word	0x0002c504
   1207c:	0002d839 	.word	0x0002d839
   12080:	00010010 	.word	0x00010010
   12084:	0002d85a 	.word	0x0002d85a
   12088:	0002d883 	.word	0x0002d883
   1208c:	200027d0 	.word	0x200027d0
   12090:	00011f49 	.word	0x00011f49

00012094 <AD5940_ReadWriteNBytes>:

//////////////////////////////////////// Read and Write function
void AD5940_ReadWriteNBytes(unsigned char *pSendBuffer, unsigned char *pRecvBuff, unsigned long length)
{
   12094:	b510      	push	{r4, lr}
   12096:	b088      	sub	sp, #32
	const struct spi_buf tx_buf =
    {
		.buf = pSendBuffer,
		.len = length
	};
	const struct spi_buf_set tx =
   12098:	2301      	movs	r3, #1
	const struct spi_buf tx_buf =
   1209a:	e9cd 0200 	strd	r0, r2, [sp]
    {
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf =
   1209e:	9205      	str	r2, [sp, #20]
    {
		.buf = pRecvBuff,
		.len = length,
	};
	const struct spi_buf_set rx =
   120a0:	aa04      	add	r2, sp, #16
	struct spi_buf rx_buf =
   120a2:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx =
   120a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct spi_buf_set tx =
   120aa:	f8cd d008 	str.w	sp, [sp, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   120ae:	4806      	ldr	r0, [pc, #24]	; (120c8 <AD5940_ReadWriteNBytes+0x34>)
   120b0:	4906      	ldr	r1, [pc, #24]	; (120cc <AD5940_ReadWriteNBytes+0x38>)
   120b2:	6883      	ldr	r3, [r0, #8]
   120b4:	aa02      	add	r2, sp, #8
   120b6:	681c      	ldr	r4, [r3, #0]
   120b8:	ab06      	add	r3, sp, #24
   120ba:	47a0      	blx	r4
		.count = 1
	};

	// Start transaction
	int error = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
	if(error != 0)
   120bc:	b110      	cbz	r0, 120c4 <AD5940_ReadWriteNBytes+0x30>
    {
		printf("SPI transceive error \n");
   120be:	4804      	ldr	r0, [pc, #16]	; (120d0 <AD5940_ReadWriteNBytes+0x3c>)
   120c0:	f011 fbe8 	bl	23894 <iprintf>
	}

 }//end
   120c4:	b008      	add	sp, #32
   120c6:	bd10      	pop	{r4, pc}
   120c8:	0002c504 	.word	0x0002c504
   120cc:	0002cbd8 	.word	0x0002cbd8
   120d0:	0002d8b9 	.word	0x0002d8b9

000120d4 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
   120d4:	b538      	push	{r3, r4, r5, lr}
   120d6:	460c      	mov	r4, r1
   120d8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   120dc:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
   120de:	461c      	mov	r4, r3
   120e0:	18c3      	adds	r3, r0, r3
   120e2:	2b0a      	cmp	r3, #10
{
   120e4:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
   120e6:	dc08      	bgt.n	120fa <write_ct+0x26>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   120e8:	4622      	mov	r2, r4
   120ea:	4428      	add	r0, r5
   120ec:	f019 ff6f 	bl	2bfce <memcpy>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
	ct_update = 1U;
   120f0:	4b03      	ldr	r3, [pc, #12]	; (12100 <write_ct+0x2c>)
   120f2:	2201      	movs	r2, #1
   120f4:	701a      	strb	r2, [r3, #0]

	return len;
}
   120f6:	4620      	mov	r0, r4
   120f8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   120fa:	f06f 0406 	mvn.w	r4, #6
   120fe:	e7fa      	b.n	120f6 <write_ct+0x22>
   12100:	20003db0 	.word	0x20003db0

00012104 <AppAMPGetCfg>:
   This function is provided for upper controllers that want to change
   application parameters specially for user defined parameters.
*/
AD5940Err AppAMPGetCfg(void *pCfg)
{
  if(pCfg){
   12104:	b118      	cbz	r0, 1210e <AppAMPGetCfg+0xa>
    *(AppAMPCfg_Type**)pCfg = &AppAMPCfg;
   12106:	4b03      	ldr	r3, [pc, #12]	; (12114 <AppAMPGetCfg+0x10>)
   12108:	6003      	str	r3, [r0, #0]
    return AD5940ERR_OK;
   1210a:	2000      	movs	r0, #0
   1210c:	4770      	bx	lr
  }
  return AD5940ERR_PARA;
   1210e:	f06f 0001 	mvn.w	r0, #1
}
   12112:	4770      	bx	lr
   12114:	20000558 	.word	0x20000558

00012118 <AppAMPCtrl>:

AD5940Err AppAMPCtrl(int32_t AmpCtrl, void *pPara)
{
   12118:	b570      	push	{r4, r5, r6, lr}
   1211a:	4604      	mov	r4, r0
   1211c:	b096      	sub	sp, #88	; 0x58
  switch (AmpCtrl)
   1211e:	2804      	cmp	r0, #4
   12120:	d831      	bhi.n	12186 <AppAMPCtrl+0x6e>
   12122:	e8df f000 	tbb	[pc, r0]
   12126:	2603      	.short	0x2603
   12128:	3032      	.short	0x3032
   1212a:	37          	.byte	0x37
   1212b:	00          	.byte	0x00
    {
      WUPTCfg_Type wupt_cfg;

      AD5940_ReadReg(REG_AFE_ADCDAT); // Any SPI Operation can wakeup AFE

      if(AppAMPCfg.AMPInited == bFALSE)
   1212c:	4d25      	ldr	r5, [pc, #148]	; (121c4 <AppAMPCtrl+0xac>)
      AD5940_ReadReg(REG_AFE_ADCDAT); // Any SPI Operation can wakeup AFE
   1212e:	f242 0074 	movw	r0, #8308	; 0x2074
   12132:	f7ff fde3 	bl	11cfc <AD5940_ReadReg>
      if(AppAMPCfg.AMPInited == bFALSE)
   12136:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   1213a:	b923      	cbnz	r3, 12146 <AppAMPCtrl+0x2e>
        return AD5940ERR_APPERROR;
   1213c:	f06f 0463 	mvn.w	r4, #99	; 0x63
    break;
    default:
    break;
  }
  return AD5940ERR_OK;
}
   12140:	4620      	mov	r0, r4
   12142:	b016      	add	sp, #88	; 0x58
   12144:	bd70      	pop	{r4, r5, r6, pc}
      wupt_cfg.WuptEn = bTRUE;
   12146:	2301      	movs	r3, #1
      wupt_cfg.SeqxWakeupTime[SEQID_0] = (uint32_t)(AppAMPCfg.WuptClkFreq*AppAMPCfg.AmpODR)-4-1;
   12148:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1214a:	69e8      	ldr	r0, [r5, #28]
      wupt_cfg.WuptEn = bTRUE;
   1214c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
      wupt_cfg.WuptEndSeq = WUPTENDSEQ_A;
   12150:	2600      	movs	r6, #0
      wupt_cfg.SeqxSleepTime[SEQID_0] = 4-1;
   12152:	2303      	movs	r3, #3
   12154:	930d      	str	r3, [sp, #52]	; 0x34
      wupt_cfg.WuptOrder[0] = SEQID_0;
   12156:	e9cd 6604 	strd	r6, r6, [sp, #16]
      wupt_cfg.SeqxWakeupTime[SEQID_0] = (uint32_t)(AppAMPCfg.WuptClkFreq*AppAMPCfg.AmpODR)-4-1;
   1215a:	f7ee f92f 	bl	3bc <__aeabi_fmul>
   1215e:	f7ee fb19 	bl	794 <__aeabi_f2uiz>
   12162:	3805      	subs	r0, #5
   12164:	9011      	str	r0, [sp, #68]	; 0x44
      AD5940_WUPTCfg(&wupt_cfg);
   12166:	a804      	add	r0, sp, #16
   12168:	f014 ff53 	bl	27012 <AD5940_WUPTCfg>
      AppAMPCfg.FifoDataCount = 0;  /* restart */
   1216c:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
      break;
   12170:	e7e6      	b.n	12140 <AppAMPCtrl+0x28>
      AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */
   12172:	f242 0074 	movw	r0, #8308	; 0x2074
   12176:	f7ff fdc1 	bl	11cfc <AD5940_ReadReg>
      AD5940_WUPTCtrl(bFALSE);
   1217a:	2000      	movs	r0, #0
   1217c:	f014 ffe8 	bl	27150 <AD5940_WUPTCtrl>
      AD5940_WUPTCtrl(bFALSE);
   12180:	2000      	movs	r0, #0
   12182:	f014 ffe5 	bl	27150 <AD5940_WUPTCtrl>
  switch (AmpCtrl)
   12186:	2400      	movs	r4, #0
   12188:	e7da      	b.n	12140 <AppAMPCtrl+0x28>
      AppAMPCfg.StopRequired = bTRUE;
   1218a:	4b0e      	ldr	r3, [pc, #56]	; (121c4 <AppAMPCtrl+0xac>)
   1218c:	2201      	movs	r2, #1
   1218e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      break;
   12192:	e7f8      	b.n	12186 <AppAMPCtrl+0x6e>
      AppAMPCtrl(AMPCTRL_STOPNOW, 0);  /* Stop the measurement if it's running. */
   12194:	2100      	movs	r1, #0
   12196:	2001      	movs	r0, #1
   12198:	f7ff ffbe 	bl	12118 <AppAMPCtrl>
      memset(&aferef_cfg, 0, sizeof(aferef_cfg));
   1219c:	220d      	movs	r2, #13
   1219e:	2100      	movs	r1, #0
   121a0:	4668      	mov	r0, sp
   121a2:	f019 ff35 	bl	2c010 <memset>
      AD5940_REFCfgS(&aferef_cfg);
   121a6:	4668      	mov	r0, sp
   121a8:	f014 fca6 	bl	26af8 <AD5940_REFCfgS>
      memset(&lp_loop, 0, sizeof(lp_loop));
   121ac:	223c      	movs	r2, #60	; 0x3c
   121ae:	2100      	movs	r1, #0
   121b0:	a804      	add	r0, sp, #16
   121b2:	f019 ff2d 	bl	2c010 <memset>
      AD5940_LPLoopCfgS(&lp_loop);
   121b6:	a804      	add	r0, sp, #16
   121b8:	f014 fd8b 	bl	26cd2 <AD5940_LPLoopCfgS>
      AD5940_EnterSleepS();  /* Enter Hibernate */
   121bc:	f015 f950 	bl	27460 <AD5940_EnterSleepS>
    break;
   121c0:	e7e1      	b.n	12186 <AppAMPCtrl+0x6e>
   121c2:	bf00      	nop
   121c4:	20000558 	.word	0x20000558

000121c8 <AppAMPInit>:
    return AD5940ERR_OK;
}

// This function provide application initialization
AD5940Err AppAMPInit(uint32_t *pBuffer, uint32_t BufferSize)
{
   121c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121cc:	4605      	mov	r5, r0
   121ce:	b0b2      	sub	sp, #200	; 0xc8
    AD5940Err error = AD5940ERR_OK;
    SEQCfg_Type seq_cfg;
    FIFOCfg_Type fifo_cfg;

    if(AD5940_WakeUp(10) > 10)      // Wake up AFE by read register, read 10 times at most
   121d0:	200a      	movs	r0, #10
{
   121d2:	460e      	mov	r6, r1
    if(AD5940_WakeUp(10) > 10)      // Wake up AFE by read register, read 10 times at most
   121d4:	f015 f951 	bl	2747a <AD5940_WakeUp>
   121d8:	280a      	cmp	r0, #10
   121da:	f200 815e 	bhi.w	1249a <AppAMPInit+0x2d2>
    seq_cfg.SeqWrTimer = 0;
    AD5940_SEQCfg(&seq_cfg);

    // float Rtia_value = 200;
    float Rtia_value = 1000;
    AppAMPCfg.RtiaCalValue.Magnitude = Rtia_value;
   121de:	4cb2      	ldr	r4, [pc, #712]	; (124a8 <AppAMPInit+0x2e0>)
    seq_cfg.SeqEnable = bFALSE;
   121e0:	2701      	movs	r7, #1
   121e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    seq_cfg.SeqWrTimer = 0;
   121e6:	f04f 0800 	mov.w	r8, #0
    AD5940_SEQCfg(&seq_cfg);
   121ea:	a803      	add	r0, sp, #12
    seq_cfg.SeqEnable = bFALSE;
   121ec:	e9cd 7303 	strd	r7, r3, [sp, #12]
    seq_cfg.SeqWrTimer = 0;
   121f0:	f8cd 8014 	str.w	r8, [sp, #20]
    AD5940_SEQCfg(&seq_cfg);
   121f4:	f014 fe50 	bl	26e98 <AD5940_SEQCfg>
    AppAMPCfg.RtiaCalValue.Magnitude = Rtia_value;
   121f8:	4bac      	ldr	r3, [pc, #688]	; (124ac <AppAMPInit+0x2e4>)
   121fa:	6563      	str	r3, [r4, #84]	; 0x54
    else
        AppAMPCfg.RtiaCalValue.Magnitude = AppAMPCfg.ExtRtiaVal;
    */

    // Reconfigure FIFO
    AD5940_FIFOCtrlS(DFTSRC_SINC3, bFALSE);                 // Disable FIFO firstly
   121fc:	4641      	mov	r1, r8
   121fe:	4638      	mov	r0, r7
   12200:	f014 fe38 	bl	26e74 <AD5940_FIFOCtrlS>
    fifo_cfg.FIFOEn = bTRUE;
    fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   12204:	2302      	movs	r3, #2
    fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       // 4kB for FIFO, The reset 2kB for sequencer
   12206:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    fifo_cfg.FIFOSrc = AppAMPCfg.DataFifoSrc;
   1220a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1220c:	9311      	str	r3, [sp, #68]	; 0x44
    fifo_cfg.FIFOThresh = AppAMPCfg.FifoThresh;
    AD5940_FIFOCfg(&fifo_cfg);
   1220e:	a80e      	add	r0, sp, #56	; 0x38
    fifo_cfg.FIFOThresh = AppAMPCfg.FifoThresh;
   12210:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12212:	9312      	str	r3, [sp, #72]	; 0x48
    fifo_cfg.FIFOEn = bTRUE;
   12214:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
    AD5940_FIFOCfg(&fifo_cfg);
   12218:	f014 fe00 	bl	26e1c <AD5940_FIFOCfg>
    AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   1221c:	f04f 30ff 	mov.w	r0, #4294967295
   12220:	f015 f8df 	bl	273e2 <AD5940_INTCClrFlag>

    // Start sequence generator

    // Initialize sequencer generator

    if((AppAMPCfg.AMPInited == bFALSE)|| (AppAMPCfg.bParaChanged == bTRUE))
   12224:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   12228:	b11b      	cbz	r3, 12232 <AppAMPInit+0x6a>
   1222a:	7823      	ldrb	r3, [r4, #0]
   1222c:	42bb      	cmp	r3, r7
   1222e:	f040 8108 	bne.w	12442 <AppAMPInit+0x27a>
    {
        if(pBuffer == 0)  return AD5940ERR_PARA;
   12232:	2d00      	cmp	r5, #0
   12234:	f000 8134 	beq.w	124a0 <AppAMPInit+0x2d8>
        if(BufferSize == 0) return AD5940ERR_PARA;
   12238:	2e00      	cmp	r6, #0
   1223a:	f000 8131 	beq.w	124a0 <AppAMPInit+0x2d8>
        AD5940_SEQGenInit(pBuffer, BufferSize);
   1223e:	4631      	mov	r1, r6
   12240:	4628      	mov	r0, r5
   12242:	f7ff fb77 	bl	11934 <AD5940_SEQGenInit>
  AD5940_SEQGenCtrl(bTRUE);
   12246:	2001      	movs	r0, #1
   12248:	f7ff fb94 	bl	11974 <AD5940_SEQGenCtrl>
  aferef_cfg.Disc1V1Cap = bFALSE;
   1224c:	2500      	movs	r5, #0
  aferef_cfg.HpBandgapEn = bTRUE;
   1224e:	2301      	movs	r3, #1
  AD5940_REFCfgS(&aferef_cfg);
   12250:	a806      	add	r0, sp, #24
  aferef_cfg.HpBandgapEn = bTRUE;
   12252:	f88d 3018 	strb.w	r3, [sp, #24]
  aferef_cfg.Hp1V1BuffEn = bTRUE;
   12256:	f88d 301a 	strb.w	r3, [sp, #26]
  aferef_cfg.Hp1V8BuffEn = bTRUE;
   1225a:	f88d 3019 	strb.w	r3, [sp, #25]
  aferef_cfg.Disc1V1Cap = bFALSE;
   1225e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  aferef_cfg.Disc1V8Cap = bFALSE;
   12262:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
  aferef_cfg.Hp1V8ThemBuff = bFALSE;
   12266:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  aferef_cfg.Hp1V8Ilimit = bFALSE;
   1226a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  aferef_cfg.Lp1V1BuffEn = bTRUE;
   1226e:	f88d 301c 	strb.w	r3, [sp, #28]
  aferef_cfg.Lp1V8BuffEn = bTRUE;
   12272:	f88d 301b 	strb.w	r3, [sp, #27]
  aferef_cfg.LpBandgapEn = bTRUE;
   12276:	f88d 301d 	strb.w	r3, [sp, #29]
  aferef_cfg.LpRefBufEn = bTRUE;
   1227a:	f88d 301e 	strb.w	r3, [sp, #30]
  aferef_cfg.LpRefBoostEn = bFALSE;
   1227e:	f88d 501f 	strb.w	r5, [sp, #31]
  AD5940_REFCfgS(&aferef_cfg);
   12282:	f014 fc39 	bl	26af8 <AD5940_REFCfgS>
  lp_loop.LpDacCfg.LpDacSW = LPDACSW_VBIAS2LPPA|LPDACSW_VBIAS2PIN|LPDACSW_VZERO2LPTIA|LPDACSW_VZERO2PIN;
   12286:	231e      	movs	r3, #30
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;
   12288:	e9cd 3517 	strd	r3, r5, [sp, #92]	; 0x5c
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   1228c:	4988      	ldr	r1, [pc, #544]	; (124b0 <AppAMPInit+0x2e8>)
   1228e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  lp_loop.LpDacCfg.DataRst = bFALSE;
   12290:	f44f 7380 	mov.w	r3, #256	; 0x100
   12294:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_MMR;
   12298:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_12BIT;
   1229c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   122a0:	f7ed ff82 	bl	1a8 <__aeabi_fsub>
   122a4:	4983      	ldr	r1, [pc, #524]	; (124b4 <AppAMPInit+0x2ec>)
   122a6:	f7ee f93d 	bl	524 <__aeabi_fdiv>
   122aa:	f7ee fa73 	bl	794 <__aeabi_f2uiz>
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   122ae:	4982      	ldr	r1, [pc, #520]	; (124b8 <AppAMPInit+0x2f0>)
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   122b0:	b287      	uxth	r7, r0
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   122b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
  lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   122b4:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
    lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   122b8:	f7ee f934 	bl	524 <__aeabi_fdiv>
   122bc:	f7ee fa44 	bl	748 <__aeabi_f2iz>
   122c0:	eb00 1387 	add.w	r3, r0, r7, lsl #6
   122c4:	b29b      	uxth	r3, r3
    if(lp_loop.LpDacCfg.DacData12Bit>lp_loop.LpDacCfg.DacData6Bit*64)
   122c6:	ebb3 1f87 	cmp.w	r3, r7, lsl #6
        lp_loop.LpDacCfg.DacData12Bit--;
   122ca:	bfc8      	it	gt
   122cc:	f103 33ff 	addgt.w	r3, r3, #4294967295
   122d0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
  lp_loop.LpAmpCfg.LpPaPwrEn = bTRUE;
   122d4:	f240 1301 	movw	r3, #257	; 0x101
   122d8:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
  lp_loop.LpAmpCfg.LpTiaRf = AppAMPCfg.LpTiaRf;
   122dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   122de:	931c      	str	r3, [sp, #112]	; 0x70
  lp_loop.LpAmpCfg.LpTiaRload = AppAMPCfg.LpTiaRl;
   122e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   122e2:	931d      	str	r3, [sp, #116]	; 0x74
  if(AppAMPCfg.ExtRtia == bTRUE)
   122e4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    lp_loop.LpAmpCfg.LpAmpSel = LPAMP0;
   122e8:	951b      	str	r5, [sp, #108]	; 0x6c
  if(AppAMPCfg.ExtRtia == bTRUE)
   122ea:	2b01      	cmp	r3, #1
    lp_loop.LpAmpCfg.LpTiaRtia = AppAMPCfg.LptiaRtiaSel;
   122ec:	bf1b      	ittet	ne
   122ee:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
   122f0:	931e      	strne	r3, [sp, #120]	; 0x78
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(9)|LPTIASW(2)|LPTIASW(4)|LPTIASW(5)|LPTIASW(12)|LPTIASW(13);
   122f2:	f243 2334 	movweq	r3, #12852	; 0x3234
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)|LPTIASW(12)|LPTIASW(13);
   122f6:	f243 0334 	movwne	r3, #12340	; 0x3034
  AD5940_LPLoopCfgS(&lp_loop);
   122fa:	a813      	add	r0, sp, #76	; 0x4c
    lp_loop.LpAmpCfg.LpTiaRtia = LPTIARTIA_OPEN;
   122fc:	bf08      	it	eq
   122fe:	951e      	streq	r5, [sp, #120]	; 0x78
  lp_loop.LpAmpCfg.LpAmpPwrMod = LPAMPPWR_NORM;
   12300:	951f      	str	r5, [sp, #124]	; 0x7c
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)|LPTIASW(12)|LPTIASW(13);
   12302:	9320      	str	r3, [sp, #128]	; 0x80
  AD5940_LPLoopCfgS(&lp_loop);
   12304:	f014 fce5 	bl	26cd2 <AD5940_LPLoopCfgS>
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_AIN4;
   12308:	2210      	movs	r2, #16
   1230a:	2314      	movs	r3, #20
   1230c:	e9cd 3222 	strd	r3, r2, [sp, #136]	; 0x88
  dsp_cfg.ADCBaseCfg.ADCPga = AppAMPCfg.ADCPgaGain;
   12310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12312:	9324      	str	r3, [sp, #144]	; 0x90
  dsp_cfg.ADCFilterCfg.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   12314:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   12318:	9326      	str	r3, [sp, #152]	; 0x98
  dsp_cfg.ADCFilterCfg.ADCSinc3Osr = AppAMPCfg.ADCSinc3Osr;
   1231a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1231e:	9325      	str	r3, [sp, #148]	; 0x94
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   12320:	2600      	movs	r6, #0
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;    /* Tell filter block clock rate of ADC*/
   12322:	2303      	movs	r3, #3
   12324:	2701      	movs	r7, #1
  AD5940_DSPCfgS(&dsp_cfg);
   12326:	a822      	add	r0, sp, #136	; 0x88
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;    /* Tell filter block clock rate of ADC*/
   12328:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   1232c:	e9cd 662a 	strd	r6, r6, [sp, #168]	; 0xa8
  memset(&dsp_cfg.DftCfg, 0, sizeof(dsp_cfg.DftCfg));
   12330:	e9cd 662c 	strd	r6, r6, [sp, #176]	; 0xb0
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   12334:	e9cd 662f 	strd	r6, r6, [sp, #188]	; 0xbc
  memset(&dsp_cfg.DftCfg, 0, sizeof(dsp_cfg.DftCfg));
   12338:	962e      	str	r6, [sp, #184]	; 0xb8
  dsp_cfg.ADCFilterCfg.BpNotch = bFALSE;
   1233a:	f8ad 60a4 	strh.w	r6, [sp, #164]	; 0xa4
  dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
   1233e:	f88d 70a6 	strb.w	r7, [sp, #166]	; 0xa6
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   12342:	9631      	str	r6, [sp, #196]	; 0xc4
  AD5940_DSPCfgS(&dsp_cfg);
   12344:	f014 fd54 	bl	26df0 <AD5940_DSPCfgS>
  AD5940_SWMatrixCfgS(&sw_cfg);
   12348:	a80a      	add	r0, sp, #40	; 0x28
  sw_cfg.Pswitch = 0;
   1234a:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  sw_cfg.Tswitch = 0;
   1234e:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  AD5940_SWMatrixCfgS(&sw_cfg);
   12352:	f014 fc26 	bl	26ba2 <AD5940_SWMatrixCfgS>
  AD5940_AFECtrlS(AFECTRL_HPREFPWR|AFECTRL_SINC2NOTCH, bTRUE);
   12356:	4859      	ldr	r0, [pc, #356]	; (124bc <AppAMPInit+0x2f4>)
   12358:	4639      	mov	r1, r7
   1235a:	f014 fb9b 	bl	26a94 <AD5940_AFECtrlS>
  AD5940_AFECtrlS(AFECTRL_SINC2NOTCH, bFALSE);
   1235e:	4631      	mov	r1, r6
   12360:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12364:	f014 fb96 	bl	26a94 <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0/*AGPIO_Pin6|AGPIO_Pin5|AGPIO_Pin1*/);        //GP6->endSeq, GP5 -> AD8233=OFF, GP1->RLD=OFF .
   12368:	4630      	mov	r0, r6
   1236a:	f014 fe49 	bl	27000 <AD5940_SEQGpioCtrlS>
  AD5940_SEQGenInsert(SEQ_STOP()); /* Add one extra command to disable sequencer for initialization sequence because we only want it to run one time. */
   1236e:	f04f 4001 	mov.w	r0, #2164260864	; 0x81000000
   12372:	f7ff fac9 	bl	11908 <AD5940_SEQGenInsert>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   12376:	a902      	add	r1, sp, #8
   12378:	a801      	add	r0, sp, #4
   1237a:	f7ff faef 	bl	1195c <AD5940_SEQGenFetchSeq>
   1237e:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   12380:	4630      	mov	r0, r6
   12382:	f7ff faf7 	bl	11974 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   12386:	2d00      	cmp	r5, #0
   12388:	f040 8083 	bne.w	12492 <AppAMPInit+0x2ca>
    AppAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   1238c:	9a02      	ldr	r2, [sp, #8]
    AppAMPCfg.InitSeqInfo.SeqRamAddr = AppAMPCfg.SeqStartAddr;
   1238e:	6860      	ldr	r0, [r4, #4]
    AppAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   12390:	9901      	ldr	r1, [sp, #4]
    AppAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   12392:	67a2      	str	r2, [r4, #120]	; 0x78
    AppAMPCfg.InitSeqInfo.SeqRamAddr = AppAMPCfg.SeqStartAddr;
   12394:	6760      	str	r0, [r4, #116]	; 0x74
    AppAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   12396:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    AppAMPCfg.InitSeqInfo.SeqId = SEQID_1;
   1239a:	6727      	str	r7, [r4, #112]	; 0x70
    AD5940_SEQCmdWrite(AppAMPCfg.InitSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   1239c:	f014 fdeb 	bl	26f76 <AD5940_SEQCmdWrite>
  clks_cal.DataType = DATATYPE_SINC2;
   123a0:	2302      	movs	r3, #2
  clks_cal.DataCount = 1;
   123a2:	e9cd 3722 	strd	r3, r7, [sp, #136]	; 0x88
  clks_cal.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   123a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   123aa:	6a21      	ldr	r1, [r4, #32]
   123ac:	69a0      	ldr	r0, [r4, #24]
  clks_cal.ADCSinc2Osr = AppAMPCfg.ADCSinc2Osr;
   123ae:	9325      	str	r3, [sp, #148]	; 0x94
  clks_cal.ADCSinc3Osr = AppAMPCfg.ADCSinc3Osr;
   123b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   123b4:	9324      	str	r3, [sp, #144]	; 0x90
  clks_cal.ADCAvgNum = 0;
   123b6:	9526      	str	r5, [sp, #152]	; 0x98
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   123b8:	f7ee f8b4 	bl	524 <__aeabi_fdiv>
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   123bc:	a913      	add	r1, sp, #76	; 0x4c
  clks_cal.RatioSys2AdcClk = AppAMPCfg.SysClkFreq/AppAMPCfg.AdcClkFreq;
   123be:	9029      	str	r0, [sp, #164]	; 0xa4
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   123c0:	a822      	add	r0, sp, #136	; 0x88
   123c2:	f7ff fb8b 	bl	11adc <AD5940_ClksCalculate>
    WaitClks += 15;
   123c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  AD5940_SEQGenCtrl(bTRUE);
   123c8:	4638      	mov	r0, r7
    WaitClks += 15;
   123ca:	330f      	adds	r3, #15
   123cc:	9313      	str	r3, [sp, #76]	; 0x4c
  AD5940_SEQGenCtrl(bTRUE);
   123ce:	f7ff fad1 	bl	11974 <AD5940_SEQGenCtrl>
  AD5940_SEQGpioCtrlS(AGPIO_Pin2);
   123d2:	2004      	movs	r0, #4
   123d4:	f014 fe14 	bl	27000 <AD5940_SEQGpioCtrlS>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_SINC2NOTCH, bTRUE);
   123d8:	4639      	mov	r1, r7
   123da:	4839      	ldr	r0, [pc, #228]	; (124c0 <AppAMPInit+0x2f8>)
   123dc:	f014 fb5a 	bl	26a94 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*250));    /* wait 250us */
   123e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   123e4:	f7ff fa90 	bl	11908 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV, bTRUE);   /* Start ADC convert*/
   123e8:	4639      	mov	r1, r7
   123ea:	f44f 7080 	mov.w	r0, #256	; 0x100
   123ee:	f014 fb51 	bl	26a94 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));  /* wait for first data ready */
   123f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   123f4:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   123f8:	f7ff fa86 	bl	11908 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bFALSE);  /* Stop ADC */
   123fc:	4629      	mov	r1, r5
   123fe:	4831      	ldr	r0, [pc, #196]	; (124c4 <AppAMPInit+0x2fc>)
   12400:	f014 fb48 	bl	26a94 <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0);
   12404:	4628      	mov	r0, r5
   12406:	f014 fdfb 	bl	27000 <AD5940_SEQGpioCtrlS>
  AD5940_EnterSleepS();/* Goto hibernate */
   1240a:	f015 f829 	bl	27460 <AD5940_EnterSleepS>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   1240e:	a90a      	add	r1, sp, #40	; 0x28
   12410:	a806      	add	r0, sp, #24
   12412:	f7ff faa3 	bl	1195c <AD5940_SEQGenFetchSeq>
   12416:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   12418:	4630      	mov	r0, r6
   1241a:	f7ff faab 	bl	11974 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   1241e:	2d00      	cmp	r5, #0
   12420:	d137      	bne.n	12492 <AppAMPInit+0x2ca>
    AppAMPCfg.MeasureSeqInfo.SeqRamAddr = AppAMPCfg.InitSeqInfo.SeqRamAddr + AppAMPCfg.InitSeqInfo.SeqLen ;
   12422:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
    AppAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   12426:	9906      	ldr	r1, [sp, #24]
    AppAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   12428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    AppAMPCfg.MeasureSeqInfo.SeqId = SEQID_0;
   1242a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    AppAMPCfg.MeasureSeqInfo.SeqRamAddr = AppAMPCfg.InitSeqInfo.SeqRamAddr + AppAMPCfg.InitSeqInfo.SeqLen ;
   1242e:	4418      	add	r0, r3
   12430:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    AppAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   12434:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
    AppAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   12438:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    AD5940_SEQCmdWrite(AppAMPCfg.MeasureSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   1243c:	f014 fd9b 	bl	26f76 <AD5940_SEQCmdWrite>

        // Generate measurement sequence
        error = AppAMPSeqMeasureGen();
        if(error != AD5940ERR_OK) return error;

        AppAMPCfg.bParaChanged = bFALSE; // Clear this flag as we already implemented the new configuration
   12440:	7025      	strb	r5, [r4, #0]
      }

    // Initialization sequencer

    AppAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   12442:	2300      	movs	r3, #0
    AD5940_SEQInfoCfg(&AppAMPCfg.InitSeqInfo);
   12444:	4820      	ldr	r0, [pc, #128]	; (124c8 <AppAMPInit+0x300>)
    AppAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   12446:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    AD5940_SEQInfoCfg(&AppAMPCfg.InitSeqInfo);
   1244a:	f014 fda8 	bl	26f9e <AD5940_SEQInfoCfg>
    seq_cfg.SeqEnable = bTRUE;
   1244e:	2301      	movs	r3, #1
    AD5940_SEQCfg(&seq_cfg);  // Enable sequencer
   12450:	a803      	add	r0, sp, #12
    seq_cfg.SeqEnable = bTRUE;
   12452:	f88d 3010 	strb.w	r3, [sp, #16]
    AD5940_SEQCfg(&seq_cfg);  // Enable sequencer
   12456:	f014 fd1f 	bl	26e98 <AD5940_SEQCfg>
    AD5940_SEQMmrTrig(AppAMPCfg.InitSeqInfo.SeqId);
   1245a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1245c:	f014 fd82 	bl	26f64 <AD5940_SEQMmrTrig>

    while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   12460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12464:	2001      	movs	r0, #1
   12466:	f014 ffc1 	bl	273ec <AD5940_INTCTestFlag>
   1246a:	2800      	cmp	r0, #0
   1246c:	d0f8      	beq.n	12460 <AppAMPInit+0x298>

    // Measurement sequence
    AppAMPCfg.MeasureSeqInfo.WriteSRAM = bFALSE;
    AD5940_SEQInfoCfg(&AppAMPCfg.MeasureSeqInfo);
   1246e:	4817      	ldr	r0, [pc, #92]	; (124cc <AppAMPInit+0x304>)
    AppAMPCfg.MeasureSeqInfo.WriteSRAM = bFALSE;
   12470:	2500      	movs	r5, #0
   12472:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    AD5940_SEQInfoCfg(&AppAMPCfg.MeasureSeqInfo);
   12476:	f014 fd92 	bl	26f9e <AD5940_SEQInfoCfg>

    //  seq_cfg.SeqEnable = bTRUE;
    //  AD5940_SEQCfg(&seq_cfg);    // Enable sequencer, and wait for trigger
    AD5940_SEQCtrlS(bTRUE);         // Enable sequencer, and wait for trigger. It's disabled in initialization sequence
   1247a:	2001      	movs	r0, #1
   1247c:	f014 fd5f 	bl	26f3e <AD5940_SEQCtrlS>
    AD5940_ClrMCUIntFlag();         // Clear interrupt flag generated before
   12480:	f7ff fd94 	bl	11fac <AD5940_ClrMCUIntFlag>

    AD5940_AFEPwrBW(AppAMPCfg.PwrMod, AFEBW_250KHZ);
   12484:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   12486:	2103      	movs	r1, #3
   12488:	f014 fb30 	bl	26aec <AD5940_AFEPwrBW>
    AppAMPCfg.AMPInited = bTRUE;    // AMP application has been initialized
   1248c:	2301      	movs	r3, #1
   1248e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

  return AD5940ERR_OK;
} //end
   12492:	4628      	mov	r0, r5
   12494:	b032      	add	sp, #200	; 0xc8
   12496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AD5940ERR_WAKEUP;    // Wake up Failed
   1249a:	f06f 0508 	mvn.w	r5, #8
   1249e:	e7f8      	b.n	12492 <AppAMPInit+0x2ca>
        if(pBuffer == 0)  return AD5940ERR_PARA;
   124a0:	f06f 0501 	mvn.w	r5, #1
   124a4:	e7f5      	b.n	12492 <AppAMPInit+0x2ca>
   124a6:	bf00      	nop
   124a8:	20000558 	.word	0x20000558
   124ac:	447a0000 	.word	0x447a0000
   124b0:	43480000 	.word	0x43480000
   124b4:	42098899 	.word	0x42098899
   124b8:	3f098899 	.word	0x3f098899
   124bc:	00010020 	.word	0x00010020
   124c0:	00010080 	.word	0x00010080
   124c4:	00010180 	.word	0x00010180
   124c8:	200005c8 	.word	0x200005c8
   124cc:	200005dc 	.word	0x200005dc

000124d0 <AppAMPCalcVoltage>:
  return 0;
}

/* Calculate voltage */
float AppAMPCalcVoltage(uint32_t ADCcode)
{
   124d0:	b538      	push	{r3, r4, r5, lr}
  float kFactor = 1.835/1.82;
  float fVolt = 0.0;
  int32_t tmp = 0;
  tmp = ADCcode - 32768;
  switch(AppAMPCfg.ADCPgaGain)
   124d2:	4c24      	ldr	r4, [pc, #144]	; (12564 <AppAMPCalcVoltage+0x94>)
   124d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  tmp = ADCcode - 32768;
   124d6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  switch(AppAMPCfg.ADCPgaGain)
   124da:	2b04      	cmp	r3, #4
   124dc:	d840      	bhi.n	12560 <AppAMPCalcVoltage+0x90>
   124de:	e8df f003 	tbb	[pc, r3]
   124e2:	1003      	.short	0x1003
   124e4:	2c1d      	.short	0x2c1d
   124e6:	36          	.byte	0x36
   124e7:	00          	.byte	0x00
  {
    case ADCPGA_1:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/1)*kFactor;
   124e8:	f7ed ff14 	bl	314 <__aeabi_i2f>
   124ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   124f0:	f7ed ff64 	bl	3bc <__aeabi_fmul>
   124f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
      break;
    case ADCPGA_4:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
      break;
    case ADCPGA_9:
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   124f6:	f7ed ff61 	bl	3bc <__aeabi_fmul>
   124fa:	491b      	ldr	r1, [pc, #108]	; (12568 <AppAMPCalcVoltage+0x98>)
   124fc:	f7ed ff5e 	bl	3bc <__aeabi_fmul>
      break;
  }
  return fVolt;
}
   12500:	bd38      	pop	{r3, r4, r5, pc}
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/1.5f)*kFactor;
   12502:	f7ed ff07 	bl	314 <__aeabi_i2f>
   12506:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   1250a:	f7ed ff57 	bl	3bc <__aeabi_fmul>
   1250e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   12512:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   12514:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12516:	f7ee f805 	bl	524 <__aeabi_fdiv>
   1251a:	e00b      	b.n	12534 <AppAMPCalcVoltage+0x64>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/2)*kFactor;
   1251c:	f7ed fefa 	bl	314 <__aeabi_i2f>
   12520:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   12524:	f7ed ff4a 	bl	3bc <__aeabi_fmul>
   12528:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1252c:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
   1252e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12530:	f7ed ff44 	bl	3bc <__aeabi_fmul>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   12534:	4601      	mov	r1, r0
   12536:	4628      	mov	r0, r5
   12538:	e7dd      	b.n	124f6 <AppAMPCalcVoltage+0x26>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/4)*kFactor;
   1253a:	f7ed feeb 	bl	314 <__aeabi_i2f>
   1253e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   12542:	f7ed ff3b 	bl	3bc <__aeabi_fmul>
   12546:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   1254a:	4605      	mov	r5, r0
   1254c:	e7ef      	b.n	1252e <AppAMPCalcVoltage+0x5e>
      fVolt = ((float)(tmp)/32768)*(AppAMPCfg.ADCRefVolt/9)*kFactor;
   1254e:	f7ed fee1 	bl	314 <__aeabi_i2f>
   12552:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   12556:	f7ed ff31 	bl	3bc <__aeabi_fmul>
   1255a:	4904      	ldr	r1, [pc, #16]	; (1256c <AppAMPCalcVoltage+0x9c>)
   1255c:	4605      	mov	r5, r0
   1255e:	e7d9      	b.n	12514 <AppAMPCalcVoltage+0x44>
  switch(AppAMPCfg.ADCPgaGain)
   12560:	2000      	movs	r0, #0
  return fVolt;
   12562:	e7cd      	b.n	12500 <AppAMPCalcVoltage+0x30>
   12564:	20000558 	.word	0x20000558
   12568:	3f810e11 	.word	0x3f810e11
   1256c:	41100000 	.word	0x41100000

00012570 <AppAMPCalcCurrent>:
/* Calculate current in uA */
float AppAMPCalcCurrent(uint32_t ADCcode)
{
   12570:	b508      	push	{r3, lr}
  float fCurrent, fVoltage = 0.0;
  fVoltage = AppAMPCalcVoltage(ADCcode);
   12572:	f7ff ffad 	bl	124d0 <AppAMPCalcVoltage>
  fCurrent = fVoltage/AppAMPCfg.RtiaCalValue.Magnitude;
   12576:	4b05      	ldr	r3, [pc, #20]	; (1258c <AppAMPCalcCurrent+0x1c>)
   12578:	6d59      	ldr	r1, [r3, #84]	; 0x54
   1257a:	f7ed ffd3 	bl	524 <__aeabi_fdiv>
  return -fCurrent*1000000;
   1257e:	4904      	ldr	r1, [pc, #16]	; (12590 <AppAMPCalcCurrent+0x20>)
   12580:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   12584:	f7ed ff1a 	bl	3bc <__aeabi_fmul>
}
   12588:	bd08      	pop	{r3, pc}
   1258a:	bf00      	nop
   1258c:	20000558 	.word	0x20000558
   12590:	49742400 	.word	0x49742400

00012594 <AppAMPISR>:
{
   12594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12596:	4604      	mov	r4, r0
  if(AD5940_WakeUp(10) > 10)  /* Wake up AFE by read register, read 10 times at most */
   12598:	200a      	movs	r0, #10
{
   1259a:	460e      	mov	r6, r1
  if(AD5940_WakeUp(10) > 10)  /* Wake up AFE by read register, read 10 times at most */
   1259c:	f014 ff6d 	bl	2747a <AD5940_WakeUp>
   125a0:	280a      	cmp	r0, #10
   125a2:	d83c      	bhi.n	1261e <AppAMPISR+0x8a>
  AD5940_SleepKeyCtrlS(SLPKEY_LOCK);
   125a4:	2000      	movs	r0, #0
  *pCount = 0;
   125a6:	2500      	movs	r5, #0
  AD5940_SleepKeyCtrlS(SLPKEY_LOCK);
   125a8:	f014 ff55 	bl	27456 <AD5940_SleepKeyCtrlS>
  *pCount = 0;
   125ac:	6035      	str	r5, [r6, #0]
  if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH) == bTRUE)
   125ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   125b2:	4628      	mov	r0, r5
   125b4:	f014 ff1a 	bl	273ec <AD5940_INTCTestFlag>
   125b8:	2801      	cmp	r0, #1
   125ba:	d133      	bne.n	12624 <AppAMPISR+0x90>
      FifoCnt = AD5940_FIFOGetCnt();
   125bc:	f014 fc65 	bl	26e8a <AD5940_FIFOGetCnt>
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   125c0:	4601      	mov	r1, r0
      FifoCnt = AD5940_FIFOGetCnt();
   125c2:	4605      	mov	r5, r0
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   125c4:	4620      	mov	r0, r4
   125c6:	f014 fa1b 	bl	26a00 <AD5940_FIFORd>
      AD5940_INTCClrFlag(AFEINTSRC_DATAFIFOTHRESH);
   125ca:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   125ce:	f014 ff08 	bl	273e2 <AD5940_INTCClrFlag>
  if(AppAMPCfg.NumOfData > 0)
   125d2:	4b15      	ldr	r3, [pc, #84]	; (12628 <AppAMPISR+0x94>)
   125d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   125d6:	2900      	cmp	r1, #0
   125d8:	dd14      	ble.n	12604 <AppAMPISR+0x70>
    AppAMPCfg.FifoDataCount += *pDataCount/4;
   125da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   125de:	eb02 0295 	add.w	r2, r2, r5, lsr #2
    if(AppAMPCfg.FifoDataCount >= AppAMPCfg.NumOfData)
   125e2:	428a      	cmp	r2, r1
    AppAMPCfg.FifoDataCount += *pDataCount/4;
   125e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if(AppAMPCfg.FifoDataCount >= AppAMPCfg.NumOfData)
   125e8:	d30c      	bcc.n	12604 <AppAMPISR+0x70>
      AD5940_WUPTCtrl(bFALSE);
   125ea:	2000      	movs	r0, #0
   125ec:	f014 fdb0 	bl	27150 <AD5940_WUPTCtrl>
      AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);
   125f0:	480e      	ldr	r0, [pc, #56]	; (1262c <AppAMPISR+0x98>)
   125f2:	f014 ff30 	bl	27456 <AD5940_SleepKeyCtrlS>
  for(i=0;i<datacount;i++)
   125f6:	eb04 0785 	add.w	r7, r4, r5, lsl #2
   125fa:	42a7      	cmp	r7, r4
   125fc:	d107      	bne.n	1260e <AppAMPISR+0x7a>
      *pCount = FifoCnt;
   125fe:	6035      	str	r5, [r6, #0]
      return 0;
   12600:	2000      	movs	r0, #0
}
   12602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(AppAMPCfg.StopRequired == bTRUE)
   12604:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   12608:	2b01      	cmp	r3, #1
   1260a:	d1f1      	bne.n	125f0 <AppAMPISR+0x5c>
   1260c:	e7ed      	b.n	125ea <AppAMPISR+0x56>
    pData[i] &= 0xffff;
   1260e:	8820      	ldrh	r0, [r4, #0]
   12610:	f844 0b04 	str.w	r0, [r4], #4
    pOut[i] = AppAMPCalcCurrent(pData[i]);
   12614:	f7ff ffac 	bl	12570 <AppAMPCalcCurrent>
   12618:	f844 0c04 	str.w	r0, [r4, #-4]
  for(i=0;i<datacount;i++)
   1261c:	e7ed      	b.n	125fa <AppAMPISR+0x66>
      return AD5940ERR_WAKEUP;  /* Wakeup Failed */
   1261e:	f06f 0008 	mvn.w	r0, #8
   12622:	e7ee      	b.n	12602 <AppAMPISR+0x6e>
  return 0;
   12624:	4628      	mov	r0, r5
   12626:	e7ec      	b.n	12602 <AppAMPISR+0x6e>
   12628:	20000558 	.word	0x20000558
   1262c:	000a47e5 	.word	0x000a47e5

00012630 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12634:	b08d      	sub	sp, #52	; 0x34
   12636:	461f      	mov	r7, r3
   12638:	9203      	str	r2, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1263a:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1263e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12642:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12644:	1c53      	adds	r3, r2, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   12646:	0782      	lsls	r2, r0, #30
   12648:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1264c:	9305      	str	r3, [sp, #20]
{
   1264e:	4605      	mov	r5, r0
   12650:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
   12652:	f040 8222 	bne.w	12a9a <cbvprintf_package+0x46a>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   12656:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12658:	2800      	cmp	r0, #0
   1265a:	f040 8221 	bne.w	12aa0 <cbvprintf_package+0x470>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1265e:	f001 0607 	and.w	r6, r1, #7
   12662:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12664:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12668:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
   1266c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
   12670:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12672:	f8cd a010 	str.w	sl, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   12676:	4652      	mov	r2, sl
	bool parsing = false;
   12678:	46d1      	mov	r9, sl
	size = sizeof(char *);
   1267a:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   1267c:	b105      	cbz	r5, 12680 <cbvprintf_package+0x50>
				*(const char **)buf = s;
   1267e:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12680:	9805      	ldr	r0, [sp, #20]
   12682:	2800      	cmp	r0, #0
   12684:	dc07      	bgt.n	12696 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12686:	48c6      	ldr	r0, [pc, #792]	; (129a0 <cbvprintf_package+0x370>)
   12688:	4287      	cmp	r7, r0
   1268a:	f0c0 8143 	bcc.w	12914 <cbvprintf_package+0x2e4>
   1268e:	48c5      	ldr	r0, [pc, #788]	; (129a4 <cbvprintf_package+0x374>)
   12690:	4287      	cmp	r7, r0
   12692:	f080 813f 	bcs.w	12914 <cbvprintf_package+0x2e4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   12696:	9803      	ldr	r0, [sp, #12]
   12698:	f010 0e02 	ands.w	lr, r0, #2
   1269c:	f000 8153 	beq.w	12946 <cbvprintf_package+0x316>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   126a0:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   126a4:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   126a6:	f1be 0f00 	cmp.w	lr, #0
   126aa:	f000 8139 	beq.w	12920 <cbvprintf_package+0x2f0>
   126ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   126b2:	f0c0 8135 	bcc.w	12920 <cbvprintf_package+0x2f0>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
   126b6:	f06f 0015 	mvn.w	r0, #21
   126ba:	e0fd      	b.n	128b8 <cbvprintf_package+0x288>
			switch (*fmt) {
   126bc:	282b      	cmp	r0, #43	; 0x2b
   126be:	d833      	bhi.n	12728 <cbvprintf_package+0xf8>
   126c0:	281f      	cmp	r0, #31
   126c2:	d811      	bhi.n	126e8 <cbvprintf_package+0xb8>
				parsing = false;
   126c4:	f04f 0900 	mov.w	r9, #0
			if (*++fmt == '\0') {
   126c8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   126cc:	2800      	cmp	r0, #0
   126ce:	f000 817e 	beq.w	129ce <cbvprintf_package+0x39e>
			if (!parsing) {
   126d2:	f1b9 0f00 	cmp.w	r9, #0
   126d6:	d1f1      	bne.n	126bc <cbvprintf_package+0x8c>
				if (*fmt == '%') {
   126d8:	2825      	cmp	r0, #37	; 0x25
   126da:	d1f5      	bne.n	126c8 <cbvprintf_package+0x98>
					parsing = true;
   126dc:	f04f 0901 	mov.w	r9, #1
				align = VA_STACK_ALIGN(ptrdiff_t);
   126e0:	f04f 0804 	mov.w	r8, #4
				buf += size;
   126e4:	4641      	mov	r1, r8
   126e6:	e7ef      	b.n	126c8 <cbvprintf_package+0x98>
			switch (*fmt) {
   126e8:	3820      	subs	r0, #32
   126ea:	280b      	cmp	r0, #11
   126ec:	d8ea      	bhi.n	126c4 <cbvprintf_package+0x94>
   126ee:	f20f 0c08 	addw	ip, pc, #8
   126f2:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   126f6:	bf00      	nop
   126f8:	000126c9 	.word	0x000126c9
   126fc:	000126c5 	.word	0x000126c5
   12700:	000126c5 	.word	0x000126c5
   12704:	000126c9 	.word	0x000126c9
   12708:	000126c5 	.word	0x000126c5
   1270c:	000126c5 	.word	0x000126c5
   12710:	000126c5 	.word	0x000126c5
   12714:	000126c5 	.word	0x000126c5
   12718:	000126c5 	.word	0x000126c5
   1271c:	000126c5 	.word	0x000126c5
   12720:	000128db 	.word	0x000128db
   12724:	000126c9 	.word	0x000126c9
   12728:	382d      	subs	r0, #45	; 0x2d
   1272a:	fa5f fc80 	uxtb.w	ip, r0
   1272e:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
   12732:	d8c7      	bhi.n	126c4 <cbvprintf_package+0x94>
   12734:	284d      	cmp	r0, #77	; 0x4d
   12736:	d8c5      	bhi.n	126c4 <cbvprintf_package+0x94>
   12738:	f20f 0c04 	addw	ip, pc, #4
   1273c:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   12740:	000126c9 	.word	0x000126c9
   12744:	000126c9 	.word	0x000126c9
   12748:	000126c5 	.word	0x000126c5
   1274c:	000126c9 	.word	0x000126c9
   12750:	000126c9 	.word	0x000126c9
   12754:	000126c9 	.word	0x000126c9
   12758:	000126c9 	.word	0x000126c9
   1275c:	000126c9 	.word	0x000126c9
   12760:	000126c9 	.word	0x000126c9
   12764:	000126c9 	.word	0x000126c9
   12768:	000126c9 	.word	0x000126c9
   1276c:	000126c9 	.word	0x000126c9
   12770:	000126c9 	.word	0x000126c9
   12774:	000126c5 	.word	0x000126c5
   12778:	000126c5 	.word	0x000126c5
   1277c:	000126c5 	.word	0x000126c5
   12780:	000126c5 	.word	0x000126c5
   12784:	000126c5 	.word	0x000126c5
   12788:	000126c5 	.word	0x000126c5
   1278c:	000126c5 	.word	0x000126c5
   12790:	00012895 	.word	0x00012895
   12794:	000126c5 	.word	0x000126c5
   12798:	000126c5 	.word	0x000126c5
   1279c:	000126c5 	.word	0x000126c5
   127a0:	00012895 	.word	0x00012895
   127a4:	00012895 	.word	0x00012895
   127a8:	00012895 	.word	0x00012895
   127ac:	000126c5 	.word	0x000126c5
   127b0:	000126c5 	.word	0x000126c5
   127b4:	000126c5 	.word	0x000126c5
   127b8:	000126c5 	.word	0x000126c5
   127bc:	000126c9 	.word	0x000126c9
   127c0:	000126c5 	.word	0x000126c5
   127c4:	000126c5 	.word	0x000126c5
   127c8:	000126c5 	.word	0x000126c5
   127cc:	000126c5 	.word	0x000126c5
   127d0:	000126c5 	.word	0x000126c5
   127d4:	000126c5 	.word	0x000126c5
   127d8:	000126c5 	.word	0x000126c5
   127dc:	000126c5 	.word	0x000126c5
   127e0:	000126c5 	.word	0x000126c5
   127e4:	000126c5 	.word	0x000126c5
   127e8:	000126c5 	.word	0x000126c5
   127ec:	00012879 	.word	0x00012879
   127f0:	000126c5 	.word	0x000126c5
   127f4:	000126c5 	.word	0x000126c5
   127f8:	000126c5 	.word	0x000126c5
   127fc:	000126c5 	.word	0x000126c5
   12800:	000126c5 	.word	0x000126c5
   12804:	000126c5 	.word	0x000126c5
   12808:	000126c5 	.word	0x000126c5
   1280c:	000126c5 	.word	0x000126c5
   12810:	00012895 	.word	0x00012895
   12814:	000126c5 	.word	0x000126c5
   12818:	00012879 	.word	0x00012879
   1281c:	00012879 	.word	0x00012879
   12820:	00012895 	.word	0x00012895
   12824:	00012895 	.word	0x00012895
   12828:	00012895 	.word	0x00012895
   1282c:	000126c9 	.word	0x000126c9
   12830:	00012879 	.word	0x00012879
   12834:	000128c9 	.word	0x000128c9
   12838:	000126c5 	.word	0x000126c5
   1283c:	000126c9 	.word	0x000126c9
   12840:	000126c5 	.word	0x000126c5
   12844:	000128cf 	.word	0x000128cf
   12848:	00012879 	.word	0x00012879
   1284c:	000128cf 	.word	0x000128cf
   12850:	000126c5 	.word	0x000126c5
   12854:	000126c5 	.word	0x000126c5
   12858:	000128d7 	.word	0x000128d7
   1285c:	000126e1 	.word	0x000126e1
   12860:	00012879 	.word	0x00012879
   12864:	000126c5 	.word	0x000126c5
   12868:	000126c5 	.word	0x000126c5
   1286c:	00012879 	.word	0x00012879
   12870:	000126c5 	.word	0x000126c5
   12874:	000126e1 	.word	0x000126e1
				if (fmt[-1] == 'l') {
   12878:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   1287c:	286c      	cmp	r0, #108	; 0x6c
   1287e:	d143      	bne.n	12908 <cbvprintf_package+0x2d8>
					if (fmt[-2] == 'l') {
   12880:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   12884:	2000      	movs	r0, #0
   12886:	296c      	cmp	r1, #108	; 0x6c
				parsing = false;
   12888:	4681      	mov	r9, r0
					if (fmt[-2] == 'l') {
   1288a:	d040      	beq.n	1290e <cbvprintf_package+0x2de>
				align = VA_STACK_ALIGN(void *);
   1288c:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long long);
   12890:	4641      	mov	r1, r8
   12892:	e023      	b.n	128dc <cbvprintf_package+0x2ac>
					v.ld = va_arg(ap, long double);
   12894:	9801      	ldr	r0, [sp, #4]
   12896:	f100 0b07 	add.w	fp, r0, #7
   1289a:	f02b 0007 	bic.w	r0, fp, #7
   1289e:	e8f0 8902 	ldrd	r8, r9, [r0], #8
				buf = (void *) ROUND_UP(buf, align);
   128a2:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   128a4:	9001      	str	r0, [sp, #4]
				buf = (void *) ROUND_UP(buf, align);
   128a6:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   128aa:	b155      	cbz	r5, 128c2 <cbvprintf_package+0x292>
					if (BUF_OFFSET + size > len) {
   128ac:	eb0e 0004 	add.w	r0, lr, r4
   128b0:	42b0      	cmp	r0, r6
   128b2:	d904      	bls.n	128be <cbvprintf_package+0x28e>
						return -ENOSPC;
   128b4:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   128b8:	b00d      	add	sp, #52	; 0x34
   128ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						*(long double *)buf = v.ld;
   128be:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
   128c2:	3408      	adds	r4, #8
				parsing = false;
   128c4:	f04f 0900 	mov.w	r9, #0
				buf += size;
   128c8:	f04f 0808 	mov.w	r8, #8
   128cc:	e70a      	b.n	126e4 <cbvprintf_package+0xb4>
			switch (*fmt) {
   128ce:	2000      	movs	r0, #0
				parsing = false;
   128d0:	f04f 0900 	mov.w	r9, #0
   128d4:	e7da      	b.n	1288c <cbvprintf_package+0x25c>
				is_str_arg = true;
   128d6:	4648      	mov	r0, r9
   128d8:	e7fa      	b.n	128d0 <cbvprintf_package+0x2a0>
			switch (*fmt) {
   128da:	2000      	movs	r0, #0
		buf = (void *) ROUND_UP(buf, align);
   128dc:	3c01      	subs	r4, #1
   128de:	4444      	add	r4, r8
   128e0:	f1c8 0c00 	rsb	ip, r8, #0
   128e4:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   128e8:	b125      	cbz	r5, 128f4 <cbvprintf_package+0x2c4>
   128ea:	eba1 0c05 	sub.w	ip, r1, r5
   128ee:	44a4      	add	ip, r4
   128f0:	4566      	cmp	r6, ip
   128f2:	d3df      	bcc.n	128b4 <cbvprintf_package+0x284>
		if (is_str_arg) {
   128f4:	2800      	cmp	r0, #0
   128f6:	d045      	beq.n	12984 <cbvprintf_package+0x354>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   128f8:	9805      	ldr	r0, [sp, #20]
			s = va_arg(ap, char *);
   128fa:	f8dd b004 	ldr.w	fp, [sp, #4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   128fe:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
   12900:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12904:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   12906:	e6b9      	b.n	1267c <cbvprintf_package+0x4c>
   12908:	2000      	movs	r0, #0
				parsing = false;
   1290a:	4681      	mov	r9, r0
   1290c:	e7e6      	b.n	128dc <cbvprintf_package+0x2ac>
						align = VA_STACK_ALIGN(long long);
   1290e:	f04f 0808 	mov.w	r8, #8
   12912:	e7bd      	b.n	12890 <cbvprintf_package+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   12914:	9803      	ldr	r0, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12916:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   1291a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
   1291e:	e6c1      	b.n	126a4 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12920:	2a0f      	cmp	r2, #15
   12922:	f63f aec8 	bhi.w	126b6 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
   12926:	b1d5      	cbz	r5, 1295e <cbvprintf_package+0x32e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12928:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   1292c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
   12930:	4496      	add	lr, r2
   12932:	f1bc 0f00 	cmp.w	ip, #0
   12936:	d00c      	beq.n	12952 <cbvprintf_package+0x322>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   12938:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1293c:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
   12940:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
   12944:	3201      	adds	r2, #1
			buf += sizeof(char *);
   12946:	3404      	adds	r4, #4
			is_str_arg = false;
   12948:	f8cd b004 	str.w	fp, [sp, #4]
					if (BUF_OFFSET + size > len) {
   1294c:	f1c5 0e08 	rsb	lr, r5, #8
   12950:	e6ba      	b.n	126c8 <cbvprintf_package+0x98>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12952:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
   12956:	9804      	ldr	r0, [sp, #16]
   12958:	3001      	adds	r0, #1
   1295a:	9004      	str	r0, [sp, #16]
   1295c:	e7f2      	b.n	12944 <cbvprintf_package+0x314>
				} else if (is_ro || rws_pos_en) {
   1295e:	f1bc 0f00 	cmp.w	ip, #0
   12962:	d101      	bne.n	12968 <cbvprintf_package+0x338>
   12964:	9802      	ldr	r0, [sp, #8]
   12966:	b108      	cbz	r0, 1296c <cbvprintf_package+0x33c>
					len += 1;
   12968:	3601      	adds	r6, #1
   1296a:	e7eb      	b.n	12944 <cbvprintf_package+0x314>
					len += strlen(s) + 1 + 1;
   1296c:	4638      	mov	r0, r7
   1296e:	e9cd 1206 	strd	r1, r2, [sp, #24]
   12972:	9301      	str	r3, [sp, #4]
   12974:	f7f9 ffcf 	bl	c916 <strlen>
   12978:	3602      	adds	r6, #2
   1297a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1297e:	9b01      	ldr	r3, [sp, #4]
   12980:	4406      	add	r6, r0
   12982:	e7df      	b.n	12944 <cbvprintf_package+0x314>
		} else if (size == sizeof(int)) {
   12984:	2904      	cmp	r1, #4
   12986:	d10f      	bne.n	129a8 <cbvprintf_package+0x378>
			int v = va_arg(ap, int);
   12988:	9801      	ldr	r0, [sp, #4]
   1298a:	3004      	adds	r0, #4
			if (buf0 != NULL) {
   1298c:	b12d      	cbz	r5, 1299a <cbvprintf_package+0x36a>
			int v = va_arg(ap, int);
   1298e:	f8dd c004 	ldr.w	ip, [sp, #4]
   12992:	f8dc c000 	ldr.w	ip, [ip]
   12996:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
   1299a:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
   1299c:	9001      	str	r0, [sp, #4]
   1299e:	e693      	b.n	126c8 <cbvprintf_package+0x98>
   129a0:	0002c35c 	.word	0x0002c35c
   129a4:	000300e4 	.word	0x000300e4
		} else if (size == sizeof(long long)) {
   129a8:	2908      	cmp	r1, #8
   129aa:	f47f ae84 	bne.w	126b6 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
   129ae:	9801      	ldr	r0, [sp, #4]
   129b0:	f100 0b07 	add.w	fp, r0, #7
   129b4:	f02b 0007 	bic.w	r0, fp, #7
   129b8:	f100 0c08 	add.w	ip, r0, #8
   129bc:	f8cd c004 	str.w	ip, [sp, #4]
			if (buf0 != NULL) {
   129c0:	b11d      	cbz	r5, 129ca <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
   129c2:	e9d0 bc00 	ldrd	fp, ip, [r0]
   129c6:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
   129ca:	3408      	adds	r4, #8
   129cc:	e67c      	b.n	126c8 <cbvprintf_package+0x98>
	if (BUF_OFFSET / sizeof(int) > 255) {
   129ce:	1b61      	subs	r1, r4, r5
   129d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   129d4:	f4bf ae6f 	bcs.w	126b6 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
   129d8:	b91d      	cbnz	r5, 129e2 <cbvprintf_package+0x3b2>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   129da:	f1a6 0408 	sub.w	r4, r6, #8
   129de:	1860      	adds	r0, r4, r1
   129e0:	e76a      	b.n	128b8 <cbvprintf_package+0x288>
	if (rws_pos_en) {
   129e2:	9b02      	ldr	r3, [sp, #8]
	*(char **)buf0 = NULL;
   129e4:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   129e6:	0889      	lsrs	r1, r1, #2
   129e8:	7029      	strb	r1, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   129ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (rws_pos_en) {
   129ee:	b1a3      	cbz	r3, 12a1a <cbvprintf_package+0x3ea>
		pkg_hdr->desc.str_cnt = 0;
   129f0:	7068      	strb	r0, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   129f2:	70e9      	strb	r1, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   129f4:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
   129f8:	f1ba 0f00 	cmp.w	sl, #0
   129fc:	d006      	beq.n	12a0c <cbvprintf_package+0x3dc>
   129fe:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   12a00:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
   12a04:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
   12a08:	4562      	cmp	r2, ip
   12a0a:	d10a      	bne.n	12a22 <cbvprintf_package+0x3f2>
   12a0c:	f10d 0820 	add.w	r8, sp, #32
   12a10:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
   12a14:	f1c5 0b01 	rsb	fp, r5, #1
   12a18:	e039      	b.n	12a8e <cbvprintf_package+0x45e>
		pkg_hdr->desc.rw_str_cnt = 0;
   12a1a:	9b02      	ldr	r3, [sp, #8]
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12a1c:	7069      	strb	r1, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12a1e:	70eb      	strb	r3, [r5, #3]
   12a20:	e7e8      	b.n	129f4 <cbvprintf_package+0x3c4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12a22:	f810 1b01 	ldrb.w	r1, [r0], #1
   12a26:	060b      	lsls	r3, r1, #24
   12a28:	d508      	bpl.n	12a3c <cbvprintf_package+0x40c>
			if (BUF_OFFSET + 1 > len) {
   12a2a:	eb04 080e 	add.w	r8, r4, lr
   12a2e:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12a30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12a34:	f4ff af3e 	bcc.w	128b4 <cbvprintf_package+0x284>
			*buf++ = pos;
   12a38:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
   12a3c:	f10c 0c01 	add.w	ip, ip, #1
   12a40:	e7e2      	b.n	12a08 <cbvprintf_package+0x3d8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   12a42:	f1ba 0f00 	cmp.w	sl, #0
   12a46:	d003      	beq.n	12a50 <cbvprintf_package+0x420>
   12a48:	f998 2000 	ldrsb.w	r2, [r8]
   12a4c:	2a00      	cmp	r2, #0
   12a4e:	db1c      	blt.n	12a8a <cbvprintf_package+0x45a>
		if (rws_pos_en) {
   12a50:	9b02      	ldr	r3, [sp, #8]
   12a52:	bb03      	cbnz	r3, 12a96 <cbvprintf_package+0x466>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12a54:	f898 2000 	ldrb.w	r2, [r8]
   12a58:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12a5c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   12a60:	4638      	mov	r0, r7
   12a62:	f7f9 ff58 	bl	c916 <strlen>
   12a66:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
   12a68:	eb04 010b 	add.w	r1, r4, fp
   12a6c:	4411      	add	r1, r2
   12a6e:	428e      	cmp	r6, r1
   12a70:	f4ff af20 	bcc.w	128b4 <cbvprintf_package+0x284>
		*buf++ = str_ptr_pos[i];
   12a74:	f898 1000 	ldrb.w	r1, [r8]
   12a78:	f804 1b01 	strb.w	r1, [r4], #1
   12a7c:	4639      	mov	r1, r7
   12a7e:	4620      	mov	r0, r4
   12a80:	9201      	str	r2, [sp, #4]
   12a82:	f019 faa4 	bl	2bfce <memcpy>
		buf += size;
   12a86:	9a01      	ldr	r2, [sp, #4]
   12a88:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   12a8a:	f108 0801 	add.w	r8, r8, #1
   12a8e:	45c1      	cmp	r9, r8
   12a90:	d1d7      	bne.n	12a42 <cbvprintf_package+0x412>
	return BUF_OFFSET;
   12a92:	1b60      	subs	r0, r4, r5
   12a94:	e710      	b.n	128b8 <cbvprintf_package+0x288>
			size = 0;
   12a96:	2200      	movs	r2, #0
   12a98:	e7e6      	b.n	12a68 <cbvprintf_package+0x438>
		return -EFAULT;
   12a9a:	f06f 000d 	mvn.w	r0, #13
   12a9e:	e70b      	b.n	128b8 <cbvprintf_package+0x288>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12aa0:	2907      	cmp	r1, #7
   12aa2:	f63f ade1 	bhi.w	12668 <cbvprintf_package+0x38>
   12aa6:	e705      	b.n	128b4 <cbvprintf_package+0x284>

00012aa8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aac:	b091      	sub	sp, #68	; 0x44
   12aae:	4605      	mov	r5, r0
   12ab0:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   12ab4:	9200      	str	r2, [sp, #0]
   12ab6:	4699      	mov	r9, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12ab8:	9101      	str	r1, [sp, #4]
   12aba:	b951      	cbnz	r1, 12ad2 <cbprintf_package_convert+0x2a>
	buf += ros_nbr;
   12abc:	7802      	ldrb	r2, [r0, #0]
	s_nbr     = buf[1];
   12abe:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   12ac0:	7880      	ldrb	r0, [r0, #2]
   12ac2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   12ac6:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
   12ac8:	460f      	mov	r7, r1
   12aca:	42be      	cmp	r6, r7
   12acc:	d81a      	bhi.n	12b04 <cbprintf_package_convert+0x5c>
	return (size_t)(uintptr_t)(buf - start);
   12ace:	1b43      	subs	r3, r0, r5
   12ad0:	9301      	str	r3, [sp, #4]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12ad2:	f895 a002 	ldrb.w	sl, [r5, #2]
	ro_cpy = ros_nbr &&
   12ad6:	f1ba 0f00 	cmp.w	sl, #0
   12ada:	d01b      	beq.n	12b14 <cbprintf_package_convert+0x6c>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   12adc:	f00b 0201 	and.w	r2, fp, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12ae0:	78eb      	ldrb	r3, [r5, #3]
   12ae2:	9302      	str	r3, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
   12ae4:	b113      	cbz	r3, 12aec <cbprintf_package_convert+0x44>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12ae6:	f01b 0f02 	tst.w	fp, #2
   12aea:	d115      	bne.n	12b18 <cbprintf_package_convert+0x70>
   12aec:	b9a2      	cbnz	r2, 12b18 <cbprintf_package_convert+0x70>
		if (cb) {
   12aee:	9b00      	ldr	r3, [sp, #0]
   12af0:	b11b      	cbz	r3, 12afa <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   12af2:	9901      	ldr	r1, [sp, #4]
   12af4:	464a      	mov	r2, r9
   12af6:	4628      	mov	r0, r5
   12af8:	4798      	blx	r3
		}

		return in_len;
   12afa:	9e01      	ldr	r6, [sp, #4]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12afc:	4630      	mov	r0, r6
   12afe:	b011      	add	sp, #68	; 0x44
   12b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   12b04:	1c44      	adds	r4, r0, #1
		buf += strlen((const char *)buf) + 1;
   12b06:	4620      	mov	r0, r4
   12b08:	f7f9 ff05 	bl	c916 <strlen>
   12b0c:	3001      	adds	r0, #1
   12b0e:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   12b10:	3701      	adds	r7, #1
   12b12:	e7da      	b.n	12aca <cbprintf_package_convert+0x22>
	ro_cpy = ros_nbr &&
   12b14:	4652      	mov	r2, sl
   12b16:	e7e3      	b.n	12ae0 <cbprintf_package_convert+0x38>
	args_size = in_desc->len * sizeof(int);
   12b18:	782b      	ldrb	r3, [r5, #0]
   12b1a:	9304      	str	r3, [sp, #16]
   12b1c:	461c      	mov	r4, r3
   12b1e:	009b      	lsls	r3, r3, #2
   12b20:	9303      	str	r3, [sp, #12]
	if (cb == NULL) {
   12b22:	9b00      	ldr	r3, [sp, #0]
	uint8_t *str_pos = &buf[args_size];
   12b24:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	if (cb == NULL) {
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d15b      	bne.n	12be4 <cbprintf_package_convert+0x13c>
		out_len = (int)in_len;
   12b2c:	9e01      	ldr	r6, [sp, #4]
		if (ro_cpy) {
   12b2e:	b38a      	cbz	r2, 12b94 <cbprintf_package_convert+0xec>
   12b30:	44a2      	add	sl, r4
	size_t strl_cnt = 0;
   12b32:	461f      	mov	r7, r3
			for (int i = 0; i < ros_nbr; i++) {
   12b34:	4554      	cmp	r4, sl
   12b36:	d11b      	bne.n	12b70 <cbprintf_package_convert+0xc8>
		bool drop_ro_str_pos = !(flags &
   12b38:	f8dd a008 	ldr.w	sl, [sp, #8]
   12b3c:	f8df c224 	ldr.w	ip, [pc, #548]	; 12d64 <cbprintf_package_convert+0x2bc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   12b40:	4989      	ldr	r1, [pc, #548]	; (12d68 <cbprintf_package_convert+0x2c0>)
		bool drop_ro_str_pos = !(flags &
   12b42:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
   12b46:	44a2      	add	sl, r4
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   12b48:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
   12b4c:	4554      	cmp	r4, sl
   12b4e:	d0d5      	beq.n	12afc <cbprintf_package_convert+0x54>
			const char *str = *(const char **)&buf32[*str_pos];
   12b50:	f814 0b01 	ldrb.w	r0, [r4], #1
   12b54:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   12b58:	4560      	cmp	r0, ip
   12b5a:	d326      	bcc.n	12baa <cbprintf_package_convert+0x102>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   12b5c:	4288      	cmp	r0, r1
   12b5e:	d224      	bcs.n	12baa <cbprintf_package_convert+0x102>
   12b60:	f01b 0f01 	tst.w	fp, #1
   12b64:	d13b      	bne.n	12bde <cbprintf_package_convert+0x136>
			if (is_ro && drop_ro_str_pos) {
   12b66:	f1b8 0f00 	cmp.w	r8, #0
   12b6a:	d1ef      	bne.n	12b4c <cbprintf_package_convert+0xa4>
				out_len--;
   12b6c:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
   12b6e:	e7ed      	b.n	12b4c <cbprintf_package_convert+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
   12b70:	f814 3b01 	ldrb.w	r3, [r4], #1
		return 1 + strlen(str);
   12b74:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   12b78:	f7f9 fecd 	bl	c916 <strlen>
				if (strl && strl_cnt < strl_len) {
   12b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
		return 1 + strlen(str);
   12b7e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   12b80:	b133      	cbz	r3, 12b90 <cbprintf_package_convert+0xe8>
   12b82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   12b84:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   12b86:	bf3e      	ittt	cc
   12b88:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
   12b8a:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   12b8e:	3701      	addcc	r7, #1
				out_len += len;
   12b90:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
   12b92:	e7cf      	b.n	12b34 <cbprintf_package_convert+0x8c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12b94:	f1ba 0f00 	cmp.w	sl, #0
   12b98:	d005      	beq.n	12ba6 <cbprintf_package_convert+0xfe>
   12b9a:	f01b 0704 	ands.w	r7, fp, #4
   12b9e:	d0cb      	beq.n	12b38 <cbprintf_package_convert+0x90>
				str_pos += ros_nbr;
   12ba0:	4454      	add	r4, sl
	size_t strl_cnt = 0;
   12ba2:	4617      	mov	r7, r2
   12ba4:	e7c8      	b.n	12b38 <cbprintf_package_convert+0x90>
   12ba6:	4657      	mov	r7, sl
   12ba8:	e7c6      	b.n	12b38 <cbprintf_package_convert+0x90>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   12baa:	2a00      	cmp	r2, #0
   12bac:	d0ce      	beq.n	12b4c <cbprintf_package_convert+0xa4>
   12bae:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
   12bb2:	9200      	str	r2, [sp, #0]
   12bb4:	f7f9 feaf 	bl	c916 <strlen>
				if (strl && strl_cnt < strl_len) {
   12bb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12bba:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 12d64 <cbprintf_package_convert+0x2bc>
   12bbe:	9a00      	ldr	r2, [sp, #0]
   12bc0:	4969      	ldr	r1, [pc, #420]	; (12d68 <cbprintf_package_convert+0x2c0>)
		return 1 + strlen(str);
   12bc2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   12bc4:	b133      	cbz	r3, 12bd4 <cbprintf_package_convert+0x12c>
   12bc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   12bc8:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   12bca:	bf3e      	ittt	cc
   12bcc:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
   12bce:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   12bd2:	3701      	addcc	r7, #1
				out_len += len;
   12bd4:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
   12bd6:	f1b9 0f00 	cmp.w	r9, #0
   12bda:	d0b7      	beq.n	12b4c <cbprintf_package_convert+0xa4>
   12bdc:	e7c3      	b.n	12b66 <cbprintf_package_convert+0xbe>
   12bde:	f04f 0901 	mov.w	r9, #1
   12be2:	e7e6      	b.n	12bb2 <cbprintf_package_convert+0x10a>
	if (ro_cpy) {
   12be4:	2a00      	cmp	r2, #0
   12be6:	f040 80b0 	bne.w	12d4a <cbprintf_package_convert+0x2a2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12bea:	f1ba 0f00 	cmp.w	sl, #0
   12bee:	d059      	beq.n	12ca4 <cbprintf_package_convert+0x1fc>
   12bf0:	f01b 0f04 	tst.w	fp, #4
   12bf4:	f040 80b2 	bne.w	12d5c <cbprintf_package_convert+0x2b4>
		keep_cnt = 0;
   12bf8:	4690      	mov	r8, r2
		scpy_cnt = 0;
   12bfa:	4617      	mov	r7, r2
	str_pos += ros_nbr;
   12bfc:	9b02      	ldr	r3, [sp, #8]
   12bfe:	4454      	add	r4, sl
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12c00:	f00b 0202 	and.w	r2, fp, #2
   12c04:	eb04 0c03 	add.w	ip, r4, r3
   12c08:	4621      	mov	r1, r4
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   12c0a:	f00b 0301 	and.w	r3, fp, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12c0e:	9205      	str	r2, [sp, #20]
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12c10:	f00b 0604 	and.w	r6, fp, #4
	for (int i = 0; i < rws_nbr; i++) {
   12c14:	4561      	cmp	r1, ip
   12c16:	d148      	bne.n	12caa <cbprintf_package_convert+0x202>
   12c18:	9a02      	ldr	r2, [sp, #8]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12c1a:	786e      	ldrb	r6, [r5, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   12c1c:	f01b 0f02 	tst.w	fp, #2
   12c20:	4414      	add	r4, r2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12c22:	eb06 0207 	add.w	r2, r6, r7
   12c26:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   12c28:	bf0c      	ite	eq
   12c2a:	4640      	moveq	r0, r8
   12c2c:	2000      	movne	r0, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d15f      	bne.n	12cf2 <cbprintf_package_convert+0x24a>
   12c32:	f01b 0f04 	tst.w	fp, #4
   12c36:	bf14      	ite	ne
   12c38:	4641      	movne	r1, r8
   12c3a:	2100      	moveq	r1, #0
	*in_desc = out_desc;
   12c3c:	706a      	strb	r2, [r5, #1]
   12c3e:	70a9      	strb	r1, [r5, #2]
   12c40:	70e8      	strb	r0, [r5, #3]
	rv = cb(in_packaged, args_size, ctx);
   12c42:	9903      	ldr	r1, [sp, #12]
   12c44:	9b00      	ldr	r3, [sp, #0]
   12c46:	464a      	mov	r2, r9
   12c48:	4628      	mov	r0, r5
   12c4a:	4798      	blx	r3
	if (rv < 0) {
   12c4c:	f1b0 0b00 	subs.w	fp, r0, #0
   12c50:	db77      	blt.n	12d42 <cbprintf_package_convert+0x29a>
	*in_desc = in_desc_backup;
   12c52:	9b04      	ldr	r3, [sp, #16]
   12c54:	702b      	strb	r3, [r5, #0]
   12c56:	9b02      	ldr	r3, [sp, #8]
   12c58:	706e      	strb	r6, [r5, #1]
   12c5a:	70eb      	strb	r3, [r5, #3]
   12c5c:	f885 a002 	strb.w	sl, [r5, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12c60:	9b00      	ldr	r3, [sp, #0]
   12c62:	464a      	mov	r2, r9
   12c64:	4641      	mov	r1, r8
   12c66:	a80c      	add	r0, sp, #48	; 0x30
   12c68:	4798      	blx	r3
	if (rv < 0) {
   12c6a:	1e06      	subs	r6, r0, #0
   12c6c:	f6ff af46 	blt.w	12afc <cbprintf_package_convert+0x54>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   12c70:	9b02      	ldr	r3, [sp, #8]
   12c72:	9903      	ldr	r1, [sp, #12]
   12c74:	449a      	add	sl, r3
	rv = cb(str_pos, strs_len, ctx);
   12c76:	9b01      	ldr	r3, [sp, #4]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   12c78:	4451      	add	r1, sl
	rv = cb(str_pos, strs_len, ctx);
   12c7a:	1a59      	subs	r1, r3, r1
   12c7c:	464a      	mov	r2, r9
   12c7e:	9b00      	ldr	r3, [sp, #0]
   12c80:	4620      	mov	r0, r4
   12c82:	4798      	blx	r3
	if (rv < 0) {
   12c84:	2800      	cmp	r0, #0
   12c86:	db5e      	blt.n	12d46 <cbprintf_package_convert+0x29e>
	out_len += rv;
   12c88:	445e      	add	r6, fp
	out_len += rv;
   12c8a:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12c8c:	f04f 0800 	mov.w	r8, #0
		uint8_t loc = cpy_str_pos[i];
   12c90:	f10d 0b20 	add.w	fp, sp, #32
	for (int i = 0; i < scpy_cnt; i++) {
   12c94:	4547      	cmp	r7, r8
   12c96:	dc2e      	bgt.n	12cf6 <cbprintf_package_convert+0x24e>
	(void)cb(NULL, 0, ctx);
   12c98:	2100      	movs	r1, #0
   12c9a:	9b00      	ldr	r3, [sp, #0]
   12c9c:	464a      	mov	r2, r9
   12c9e:	4608      	mov	r0, r1
   12ca0:	4798      	blx	r3
	return out_len;
   12ca2:	e72b      	b.n	12afc <cbprintf_package_convert+0x54>
		keep_cnt = 0;
   12ca4:	46d0      	mov	r8, sl
		scpy_cnt = 0;
   12ca6:	4657      	mov	r7, sl
   12ca8:	e7a8      	b.n	12bfc <cbprintf_package_convert+0x154>
		const char *str = *(const char **)&buf32[*str_pos];
   12caa:	f811 2b01 	ldrb.w	r2, [r1], #1
   12cae:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 12d64 <cbprintf_package_convert+0x2bc>
   12cb2:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   12cb6:	4570      	cmp	r0, lr
   12cb8:	d303      	bcc.n	12cc2 <cbprintf_package_convert+0x21a>
   12cba:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 12d68 <cbprintf_package_convert+0x2c0>
   12cbe:	4570      	cmp	r0, lr
   12cc0:	d30b      	bcc.n	12cda <cbprintf_package_convert+0x232>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12cc2:	9805      	ldr	r0, [sp, #20]
   12cc4:	b950      	cbnz	r0, 12cdc <cbprintf_package_convert+0x234>
				keep_str_pos[keep_cnt++] = *str_pos;
   12cc6:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   12cca:	f108 0001 	add.w	r0, r8, #1
   12cce:	44f0      	add	r8, lr
   12cd0:	f808 2c10 	strb.w	r2, [r8, #-16]
   12cd4:	fa5f f880 	uxtb.w	r8, r0
	for (int i = 0; i < rws_nbr; i++) {
   12cd8:	e79c      	b.n	12c14 <cbprintf_package_convert+0x16c>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
   12cda:	b13b      	cbz	r3, 12cec <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
   12cdc:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   12ce0:	1c78      	adds	r0, r7, #1
   12ce2:	4477      	add	r7, lr
   12ce4:	f807 2c20 	strb.w	r2, [r7, #-32]
   12ce8:	b2c7      	uxtb	r7, r0
   12cea:	e793      	b.n	12c14 <cbprintf_package_convert+0x16c>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12cec:	2e00      	cmp	r6, #0
   12cee:	d091      	beq.n	12c14 <cbprintf_package_convert+0x16c>
   12cf0:	e7e9      	b.n	12cc6 <cbprintf_package_convert+0x21e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   12cf2:	2100      	movs	r1, #0
   12cf4:	e7a2      	b.n	12c3c <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
   12cf6:	f818 300b 	ldrb.w	r3, [r8, fp]
   12cfa:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
   12cfe:	f855 a023 	ldr.w	sl, [r5, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12d04:	b1db      	cbz	r3, 12d3e <cbprintf_package_convert+0x296>
   12d06:	f833 4018 	ldrh.w	r4, [r3, r8, lsl #1]
		rv = cb(&loc, 1, ctx);
   12d0a:	9b00      	ldr	r3, [sp, #0]
   12d0c:	464a      	mov	r2, r9
   12d0e:	2101      	movs	r1, #1
   12d10:	f10d 001f 	add.w	r0, sp, #31
   12d14:	4798      	blx	r3
		if (rv < 0) {
   12d16:	2800      	cmp	r0, #0
   12d18:	db15      	blt.n	12d46 <cbprintf_package_convert+0x29e>
		out_len += rv;
   12d1a:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   12d1c:	b924      	cbnz	r4, 12d28 <cbprintf_package_convert+0x280>
   12d1e:	4650      	mov	r0, sl
   12d20:	f7f9 fdf9 	bl	c916 <strlen>
   12d24:	1c44      	adds	r4, r0, #1
   12d26:	b2a4      	uxth	r4, r4
	return cb(str, strl, ctx);
   12d28:	9b00      	ldr	r3, [sp, #0]
   12d2a:	464a      	mov	r2, r9
   12d2c:	4621      	mov	r1, r4
   12d2e:	4650      	mov	r0, sl
   12d30:	4798      	blx	r3
		if (rv < 0) {
   12d32:	2800      	cmp	r0, #0
   12d34:	db07      	blt.n	12d46 <cbprintf_package_convert+0x29e>
		out_len += rv;
   12d36:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12d38:	f108 0801 	add.w	r8, r8, #1
   12d3c:	e7aa      	b.n	12c94 <cbprintf_package_convert+0x1ec>
		uint16_t str_len = strl ? strl[i] : 0;
   12d3e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   12d40:	e7e3      	b.n	12d0a <cbprintf_package_convert+0x262>
   12d42:	465e      	mov	r6, fp
   12d44:	e6da      	b.n	12afc <cbprintf_package_convert+0x54>
   12d46:	4606      	mov	r6, r0
   12d48:	e6d8      	b.n	12afc <cbprintf_package_convert+0x54>
	ros_nbr = in_desc->ro_str_cnt;
   12d4a:	4657      	mov	r7, sl
		dst = cpy_str_pos;
   12d4c:	a808      	add	r0, sp, #32
		keep_cnt = 0;
   12d4e:	f04f 0800 	mov.w	r8, #0
   12d52:	4652      	mov	r2, sl
   12d54:	4621      	mov	r1, r4
   12d56:	f019 f93a 	bl	2bfce <memcpy>
   12d5a:	e74f      	b.n	12bfc <cbprintf_package_convert+0x154>
   12d5c:	46d0      	mov	r8, sl
		dst = keep_str_pos;
   12d5e:	a80c      	add	r0, sp, #48	; 0x30
		scpy_cnt = 0;
   12d60:	4617      	mov	r7, r2
   12d62:	e7f6      	b.n	12d52 <cbprintf_package_convert+0x2aa>
   12d64:	0002c35c 	.word	0x0002c35c
   12d68:	000300e4 	.word	0x000300e4

00012d6c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12d6c:	4b01      	ldr	r3, [pc, #4]	; (12d74 <__printk_hook_install+0x8>)
   12d6e:	6018      	str	r0, [r3, #0]
}
   12d70:	4770      	bx	lr
   12d72:	bf00      	nop
   12d74:	200005f8 	.word	0x200005f8

00012d78 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12d78:	b530      	push	{r4, r5, lr}
   12d7a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12d7c:	2500      	movs	r5, #0
   12d7e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12d82:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12d84:	9500      	str	r5, [sp, #0]
   12d86:	a903      	add	r1, sp, #12
   12d88:	4805      	ldr	r0, [pc, #20]	; (12da0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12d8a:	9505      	str	r5, [sp, #20]
   12d8c:	f000 f94a 	bl	13024 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12d90:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12d94:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12d96:	bfb8      	it	lt
   12d98:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12d9a:	b007      	add	sp, #28
   12d9c:	bd30      	pop	{r4, r5, pc}
   12d9e:	bf00      	nop
   12da0:	000276d3 	.word	0x000276d3

00012da4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12da8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12dac:	f019 0808 	ands.w	r8, r9, #8
{
   12db0:	4604      	mov	r4, r0
   12db2:	4693      	mov	fp, r2
	if (processing) {
   12db4:	d00d      	beq.n	12dd2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12db6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12db8:	bf0c      	ite	eq
   12dba:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12dbe:	f049 0920 	orrne.w	r9, r9, #32
   12dc2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12dc6:	f38b 8811 	msr	BASEPRI, fp
   12dca:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12dd2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12dd6:	2902      	cmp	r1, #2
   12dd8:	d107      	bne.n	12dea <process_event+0x46>
			evt = process_recheck(mgr);
   12dda:	4620      	mov	r0, r4
   12ddc:	f014 fca8 	bl	27730 <process_recheck>
		if (evt == EVT_NOP) {
   12de0:	2800      	cmp	r0, #0
   12de2:	d0f0      	beq.n	12dc6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12de4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12de6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   12de8:	d14e      	bne.n	12e88 <process_event+0xe4>
			res = mgr->last_res;
   12dea:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12dec:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12dee:	2f00      	cmp	r7, #0
   12df0:	da15      	bge.n	12e1e <process_event+0x7a>
		*clients = mgr->clients;
   12df2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12df4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12df8:	e9c4 8800 	strd	r8, r8, [r4]
   12dfc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e00:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   12e02:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12e04:	8b21      	ldrh	r1, [r4, #24]
   12e06:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12e0a:	45ca      	cmp	sl, r9
   12e0c:	d002      	beq.n	12e14 <process_event+0x70>
		if (do_monitors
   12e0e:	68a3      	ldr	r3, [r4, #8]
   12e10:	2b00      	cmp	r3, #0
   12e12:	d15a      	bne.n	12eca <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   12e14:	b90d      	cbnz	r5, 12e1a <process_event+0x76>
		    || (transit != NULL)) {
   12e16:	2e00      	cmp	r6, #0
   12e18:	d071      	beq.n	12efe <process_event+0x15a>
   12e1a:	2300      	movs	r3, #0
   12e1c:	e056      	b.n	12ecc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12e1e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12e22:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12e24:	2a01      	cmp	r2, #1
   12e26:	d81e      	bhi.n	12e66 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e28:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12e2c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12e2e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e30:	b289      	uxth	r1, r1
   12e32:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12e36:	d10a      	bne.n	12e4e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12e38:	b13d      	cbz	r5, 12e4a <process_event+0xa6>
   12e3a:	8b63      	ldrh	r3, [r4, #26]
   12e3c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12e3e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   12e40:	3301      	adds	r3, #1
   12e42:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12e44:	2a00      	cmp	r2, #0
   12e46:	d1fa      	bne.n	12e3e <process_event+0x9a>
   12e48:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e4a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e4e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12e50:	4620      	mov	r0, r4
   12e52:	f014 fc6d 	bl	27730 <process_recheck>
   12e56:	4606      	mov	r6, r0
   12e58:	2800      	cmp	r0, #0
   12e5a:	d0d3      	beq.n	12e04 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12e5c:	8b23      	ldrh	r3, [r4, #24]
   12e5e:	f043 0320 	orr.w	r3, r3, #32
   12e62:	8323      	strh	r3, [r4, #24]
   12e64:	e7cd      	b.n	12e02 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12e66:	2b04      	cmp	r3, #4
   12e68:	d10c      	bne.n	12e84 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e6a:	f021 0107 	bic.w	r1, r1, #7
   12e6e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e70:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12e72:	4620      	mov	r0, r4
   12e74:	f014 fc5c 	bl	27730 <process_recheck>
   12e78:	4605      	mov	r5, r0
   12e7a:	2800      	cmp	r0, #0
   12e7c:	d0c1      	beq.n	12e02 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12e7e:	f041 0120 	orr.w	r1, r1, #32
   12e82:	8321      	strh	r1, [r4, #24]
   12e84:	2500      	movs	r5, #0
   12e86:	e7bc      	b.n	12e02 <process_event+0x5e>
		} else if (evt == EVT_START) {
   12e88:	2803      	cmp	r0, #3
   12e8a:	d109      	bne.n	12ea0 <process_event+0xfc>
			transit = mgr->transitions->start;
   12e8c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e8e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12e92:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e94:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e98:	8323      	strh	r3, [r4, #24]
}
   12e9a:	2500      	movs	r5, #0
		res = 0;
   12e9c:	462f      	mov	r7, r5
   12e9e:	e7b1      	b.n	12e04 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12ea0:	2804      	cmp	r0, #4
   12ea2:	d106      	bne.n	12eb2 <process_event+0x10e>
			transit = mgr->transitions->stop;
   12ea4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ea6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12eaa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12eac:	f043 0304 	orr.w	r3, r3, #4
   12eb0:	e7f2      	b.n	12e98 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   12eb2:	2805      	cmp	r0, #5
   12eb4:	d106      	bne.n	12ec4 <process_event+0x120>
			transit = mgr->transitions->reset;
   12eb6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12eb8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12ebc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ebe:	f043 0305 	orr.w	r3, r3, #5
   12ec2:	e7e9      	b.n	12e98 <process_event+0xf4>
   12ec4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12ec6:	462e      	mov	r6, r5
   12ec8:	e7e8      	b.n	12e9c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   12eca:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12ecc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12ed0:	8321      	strh	r1, [r4, #24]
   12ed2:	f38b 8811 	msr	BASEPRI, fp
   12ed6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12eda:	b9fb      	cbnz	r3, 12f1c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   12edc:	bb85      	cbnz	r5, 12f40 <process_event+0x19c>
			if (transit != NULL) {
   12ede:	b116      	cbz	r6, 12ee6 <process_event+0x142>
				transit(mgr, transition_complete);
   12ee0:	491f      	ldr	r1, [pc, #124]	; (12f60 <process_event+0x1bc>)
   12ee2:	4620      	mov	r0, r4
   12ee4:	47b0      	blx	r6
	__asm__ volatile(
   12ee6:	f04f 0340 	mov.w	r3, #64	; 0x40
   12eea:	f3ef 8b11 	mrs	fp, BASEPRI
   12eee:	f383 8812 	msr	BASEPRI_MAX, r3
   12ef2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12ef6:	8b23      	ldrh	r3, [r4, #24]
   12ef8:	f023 0308 	bic.w	r3, r3, #8
   12efc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12efe:	8b23      	ldrh	r3, [r4, #24]
   12f00:	06da      	lsls	r2, r3, #27
   12f02:	d525      	bpl.n	12f50 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12f04:	f023 0310 	bic.w	r3, r3, #16
   12f08:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12f0a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12f0c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12f10:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12f14:	2900      	cmp	r1, #0
   12f16:	f47f af5e 	bne.w	12dd6 <process_event+0x32>
out:
   12f1a:	e754      	b.n	12dc6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12f1c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12f1e:	2900      	cmp	r1, #0
   12f20:	d0dc      	beq.n	12edc <process_event+0x138>
	return node->next;
   12f22:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   12f26:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12f2a:	463b      	mov	r3, r7
   12f2c:	4652      	mov	r2, sl
   12f2e:	4620      	mov	r0, r4
   12f30:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12f32:	f1b9 0f00 	cmp.w	r9, #0
   12f36:	d0d1      	beq.n	12edc <process_event+0x138>
   12f38:	4649      	mov	r1, r9
   12f3a:	f8d9 9000 	ldr.w	r9, [r9]
   12f3e:	e7f2      	b.n	12f26 <process_event+0x182>
   12f40:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12f42:	463b      	mov	r3, r7
   12f44:	4652      	mov	r2, sl
   12f46:	4620      	mov	r0, r4
   12f48:	682d      	ldr	r5, [r5, #0]
   12f4a:	f014 fc0d 	bl	27768 <notify_one>
   12f4e:	e7c5      	b.n	12edc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12f50:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12f54:	bf1e      	ittt	ne
   12f56:	f023 0320 	bicne.w	r3, r3, #32
   12f5a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12f5c:	2102      	movne	r1, #2
   12f5e:	e7d5      	b.n	12f0c <process_event+0x168>
   12f60:	00027795 	.word	0x00027795

00012f64 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   12f66:	4e08      	ldr	r6, [pc, #32]	; (12f88 <extract_decimal+0x24>)
   12f68:	6802      	ldr	r2, [r0, #0]
{
   12f6a:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   12f6c:	270a      	movs	r7, #10
	size_t val = 0;
   12f6e:	2000      	movs	r0, #0
   12f70:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   12f72:	3201      	adds	r2, #1
   12f74:	780c      	ldrb	r4, [r1, #0]
   12f76:	5da5      	ldrb	r5, [r4, r6]
   12f78:	076d      	lsls	r5, r5, #29
   12f7a:	d401      	bmi.n	12f80 <extract_decimal+0x1c>
	}
	*str = sp;
   12f7c:	6019      	str	r1, [r3, #0]
	return val;
}
   12f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   12f80:	fb07 4000 	mla	r0, r7, r0, r4
   12f84:	3830      	subs	r0, #48	; 0x30
   12f86:	e7f3      	b.n	12f70 <extract_decimal+0xc>
   12f88:	0002ffae 	.word	0x0002ffae

00012f8c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f90:	4615      	mov	r5, r2
   12f92:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   12f94:	78d3      	ldrb	r3, [r2, #3]
   12f96:	4a22      	ldr	r2, [pc, #136]	; (13020 <encode_uint+0x94>)
   12f98:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   12f9c:	2b6f      	cmp	r3, #111	; 0x6f
{
   12f9e:	4680      	mov	r8, r0
   12fa0:	460f      	mov	r7, r1
   12fa2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   12fa6:	d029      	beq.n	12ffc <encode_uint+0x70>
   12fa8:	d824      	bhi.n	12ff4 <encode_uint+0x68>
		return 16;
   12faa:	2b58      	cmp	r3, #88	; 0x58
   12fac:	bf14      	ite	ne
   12fae:	260a      	movne	r6, #10
   12fb0:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   12fb2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   12fb6:	4632      	mov	r2, r6
   12fb8:	2300      	movs	r3, #0
   12fba:	4640      	mov	r0, r8
   12fbc:	4639      	mov	r1, r7
   12fbe:	f7ed fc09 	bl	7d4 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   12fc2:	2a09      	cmp	r2, #9
   12fc4:	b2d4      	uxtb	r4, r2
   12fc6:	d81e      	bhi.n	13006 <encode_uint+0x7a>
   12fc8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   12fca:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12fcc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   12fce:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12fd2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   12fd6:	d301      	bcc.n	12fdc <encode_uint+0x50>
   12fd8:	45d1      	cmp	r9, sl
   12fda:	d811      	bhi.n	13000 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12fdc:	782b      	ldrb	r3, [r5, #0]
   12fde:	069b      	lsls	r3, r3, #26
   12fe0:	d505      	bpl.n	12fee <encode_uint+0x62>
		if (radix == 8) {
   12fe2:	2e08      	cmp	r6, #8
   12fe4:	d115      	bne.n	13012 <encode_uint+0x86>
			conv->altform_0 = true;
   12fe6:	78ab      	ldrb	r3, [r5, #2]
   12fe8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   12fec:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   12fee:	4648      	mov	r0, r9
   12ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12ff4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   12ff8:	2b70      	cmp	r3, #112	; 0x70
   12ffa:	e7d7      	b.n	12fac <encode_uint+0x20>
	switch (specifier) {
   12ffc:	2608      	movs	r6, #8
   12ffe:	e7d8      	b.n	12fb2 <encode_uint+0x26>
		value /= radix;
   13000:	4680      	mov	r8, r0
   13002:	460f      	mov	r7, r1
   13004:	e7d7      	b.n	12fb6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13006:	f1bb 0f01 	cmp.w	fp, #1
   1300a:	bf0c      	ite	eq
   1300c:	3437      	addeq	r4, #55	; 0x37
   1300e:	3457      	addne	r4, #87	; 0x57
   13010:	e7db      	b.n	12fca <encode_uint+0x3e>
		} else if (radix == 16) {
   13012:	2e10      	cmp	r6, #16
   13014:	d1eb      	bne.n	12fee <encode_uint+0x62>
			conv->altform_0c = true;
   13016:	78ab      	ldrb	r3, [r5, #2]
   13018:	f043 0310 	orr.w	r3, r3, #16
   1301c:	e7e6      	b.n	12fec <encode_uint+0x60>
   1301e:	bf00      	nop
   13020:	0002ffae 	.word	0x0002ffae

00013024 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   13024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13028:	4682      	mov	sl, r0
   1302a:	b093      	sub	sp, #76	; 0x4c
   1302c:	468b      	mov	fp, r1
   1302e:	4691      	mov	r9, r2
   13030:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13032:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13034:	f899 0000 	ldrb.w	r0, [r9]
   13038:	b908      	cbnz	r0, 1303e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1303a:	4628      	mov	r0, r5
   1303c:	e341      	b.n	136c2 <z_cbvprintf_impl+0x69e>
			OUTC(*fp++);
   1303e:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
   13042:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   13044:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   13046:	d006      	beq.n	13056 <z_cbvprintf_impl+0x32>
			OUTC('%');
   13048:	4659      	mov	r1, fp
   1304a:	47d0      	blx	sl
   1304c:	2800      	cmp	r0, #0
   1304e:	f2c0 8338 	blt.w	136c2 <z_cbvprintf_impl+0x69e>
   13052:	3501      	adds	r5, #1
			break;
   13054:	e1f5      	b.n	13442 <z_cbvprintf_impl+0x41e>
		} state = {
   13056:	2218      	movs	r2, #24
   13058:	2100      	movs	r1, #0
   1305a:	a80c      	add	r0, sp, #48	; 0x30
   1305c:	f018 ffd8 	bl	2c010 <memset>
	if (*sp == '%') {
   13060:	f899 3001 	ldrb.w	r3, [r9, #1]
   13064:	2b25      	cmp	r3, #37	; 0x25
   13066:	d05a      	beq.n	1311e <z_cbvprintf_impl+0xfa>
   13068:	f109 0201 	add.w	r2, r9, #1
   1306c:	4616      	mov	r6, r2
		switch (*sp) {
   1306e:	f812 3b01 	ldrb.w	r3, [r2], #1
   13072:	2b2b      	cmp	r3, #43	; 0x2b
   13074:	f000 808b 	beq.w	1318e <z_cbvprintf_impl+0x16a>
   13078:	d879      	bhi.n	1316e <z_cbvprintf_impl+0x14a>
   1307a:	2b20      	cmp	r3, #32
   1307c:	f000 808c 	beq.w	13198 <z_cbvprintf_impl+0x174>
   13080:	2b23      	cmp	r3, #35	; 0x23
   13082:	f000 808e 	beq.w	131a2 <z_cbvprintf_impl+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
   13086:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1308a:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1308e:	2a44      	cmp	r2, #68	; 0x44
   13090:	d103      	bne.n	1309a <z_cbvprintf_impl+0x76>
		conv->flag_zero = false;
   13092:	f36f 1386 	bfc	r3, #6, #1
   13096:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1309a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1309e:	9605      	str	r6, [sp, #20]
   130a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   130a4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   130a8:	7833      	ldrb	r3, [r6, #0]
   130aa:	2b2a      	cmp	r3, #42	; 0x2a
   130ac:	d17e      	bne.n	131ac <z_cbvprintf_impl+0x188>
		conv->width_star = true;
   130ae:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   130b2:	f043 0301 	orr.w	r3, r3, #1
   130b6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   130ba:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   130bc:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   130be:	781a      	ldrb	r2, [r3, #0]
   130c0:	2a2e      	cmp	r2, #46	; 0x2e
   130c2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   130c6:	bf0c      	ite	eq
   130c8:	2101      	moveq	r1, #1
   130ca:	2100      	movne	r1, #0
   130cc:	f361 0241 	bfi	r2, r1, #1, #1
   130d0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   130d4:	d10b      	bne.n	130ee <z_cbvprintf_impl+0xca>
	++sp;
   130d6:	1c5a      	adds	r2, r3, #1
   130d8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   130da:	785a      	ldrb	r2, [r3, #1]
   130dc:	2a2a      	cmp	r2, #42	; 0x2a
   130de:	d17b      	bne.n	131d8 <z_cbvprintf_impl+0x1b4>
		conv->prec_star = true;
   130e0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   130e4:	f042 0204 	orr.w	r2, r2, #4
   130e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   130ec:	3302      	adds	r3, #2
	switch (*sp) {
   130ee:	4619      	mov	r1, r3
   130f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   130f4:	286c      	cmp	r0, #108	; 0x6c
   130f6:	f000 80b6 	beq.w	13266 <z_cbvprintf_impl+0x242>
   130fa:	d87d      	bhi.n	131f8 <z_cbvprintf_impl+0x1d4>
   130fc:	2868      	cmp	r0, #104	; 0x68
   130fe:	f000 8084 	beq.w	1320a <z_cbvprintf_impl+0x1e6>
   13102:	286a      	cmp	r0, #106	; 0x6a
   13104:	f000 80b9 	beq.w	1327a <z_cbvprintf_impl+0x256>
   13108:	284c      	cmp	r0, #76	; 0x4c
   1310a:	f000 80bd 	beq.w	13288 <z_cbvprintf_impl+0x264>
		conv->length_mod = LENGTH_NONE;
   1310e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   13112:	f36f 02c6 	bfc	r2, #3, #4
   13116:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1311a:	4619      	mov	r1, r3
   1311c:	e080      	b.n	13220 <z_cbvprintf_impl+0x1fc>
		conv->specifier = *sp++;
   1311e:	f109 0202 	add.w	r2, r9, #2
   13122:	9202      	str	r2, [sp, #8]
   13124:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   13128:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1312c:	07d9      	lsls	r1, r3, #31
   1312e:	f140 814a 	bpl.w	133c6 <z_cbvprintf_impl+0x3a2>
			width = va_arg(ap, int);
   13132:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   13136:	f1b8 0f00 	cmp.w	r8, #0
   1313a:	da07      	bge.n	1314c <z_cbvprintf_impl+0x128>
				conv->flag_dash = true;
   1313c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   13140:	f042 0204 	orr.w	r2, r2, #4
   13144:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   13148:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1314c:	075a      	lsls	r2, r3, #29
   1314e:	f140 8143 	bpl.w	133d8 <z_cbvprintf_impl+0x3b4>
			int arg = va_arg(ap, int);
   13152:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   13156:	2f00      	cmp	r7, #0
   13158:	f280 8142 	bge.w	133e0 <z_cbvprintf_impl+0x3bc>
				conv->prec_present = false;
   1315c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   13160:	f36f 0341 	bfc	r3, #1, #1
   13164:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   13168:	f04f 37ff 	mov.w	r7, #4294967295
   1316c:	e138      	b.n	133e0 <z_cbvprintf_impl+0x3bc>
		switch (*sp) {
   1316e:	2b2d      	cmp	r3, #45	; 0x2d
   13170:	d006      	beq.n	13180 <z_cbvprintf_impl+0x15c>
   13172:	2b30      	cmp	r3, #48	; 0x30
   13174:	d187      	bne.n	13086 <z_cbvprintf_impl+0x62>
			conv->flag_zero = true;
   13176:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1317e:	e003      	b.n	13188 <z_cbvprintf_impl+0x164>
			conv->flag_dash = true;
   13180:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13184:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   13188:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1318c:	e76e      	b.n	1306c <z_cbvprintf_impl+0x48>
			conv->flag_plus = true;
   1318e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13192:	f043 0308 	orr.w	r3, r3, #8
   13196:	e7f7      	b.n	13188 <z_cbvprintf_impl+0x164>
			conv->flag_space = true;
   13198:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1319c:	f043 0310 	orr.w	r3, r3, #16
   131a0:	e7f2      	b.n	13188 <z_cbvprintf_impl+0x164>
			conv->flag_hash = true;
   131a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   131a6:	f043 0320 	orr.w	r3, r3, #32
   131aa:	e7ed      	b.n	13188 <z_cbvprintf_impl+0x164>
	size_t width = extract_decimal(&sp);
   131ac:	a805      	add	r0, sp, #20
   131ae:	f7ff fed9 	bl	12f64 <extract_decimal>
	if (sp != wp) {
   131b2:	9b05      	ldr	r3, [sp, #20]
   131b4:	42b3      	cmp	r3, r6
   131b6:	d081      	beq.n	130bc <z_cbvprintf_impl+0x98>
		conv->unsupported |= ((conv->width_value < 0)
   131b8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   131bc:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   131be:	f3c1 0240 	ubfx	r2, r1, #1, #1
   131c2:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   131c6:	0052      	lsls	r2, r2, #1
   131c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   131cc:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   131d0:	430a      	orrs	r2, r1
   131d2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   131d6:	e771      	b.n	130bc <z_cbvprintf_impl+0x98>
	size_t prec = extract_decimal(&sp);
   131d8:	a805      	add	r0, sp, #20
   131da:	f7ff fec3 	bl	12f64 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   131de:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   131e2:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   131e4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   131e8:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   131ec:	f360 0341 	bfi	r3, r0, #1, #1
   131f0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   131f4:	9b05      	ldr	r3, [sp, #20]
   131f6:	e77a      	b.n	130ee <z_cbvprintf_impl+0xca>
	switch (*sp) {
   131f8:	2874      	cmp	r0, #116	; 0x74
   131fa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   131fe:	d040      	beq.n	13282 <z_cbvprintf_impl+0x25e>
   13200:	287a      	cmp	r0, #122	; 0x7a
   13202:	d184      	bne.n	1310e <z_cbvprintf_impl+0xea>
		conv->length_mod = LENGTH_Z;
   13204:	4613      	mov	r3, r2
   13206:	2206      	movs	r2, #6
   13208:	e028      	b.n	1325c <z_cbvprintf_impl+0x238>
		if (*++sp == 'h') {
   1320a:	785a      	ldrb	r2, [r3, #1]
   1320c:	2a68      	cmp	r2, #104	; 0x68
   1320e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   13212:	d121      	bne.n	13258 <z_cbvprintf_impl+0x234>
			conv->length_mod = LENGTH_HH;
   13214:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   13216:	f361 02c6 	bfi	r2, r1, #3, #4
   1321a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1321e:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   13220:	460b      	mov	r3, r1
   13222:	f813 2b01 	ldrb.w	r2, [r3], #1
   13226:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   13228:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1322a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   1322e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   13232:	f200 80c0 	bhi.w	133b6 <z_cbvprintf_impl+0x392>
   13236:	2a57      	cmp	r2, #87	; 0x57
   13238:	d833      	bhi.n	132a2 <z_cbvprintf_impl+0x27e>
   1323a:	2a41      	cmp	r2, #65	; 0x41
   1323c:	d003      	beq.n	13246 <z_cbvprintf_impl+0x222>
   1323e:	3a45      	subs	r2, #69	; 0x45
   13240:	2a02      	cmp	r2, #2
   13242:	f200 80b8 	bhi.w	133b6 <z_cbvprintf_impl+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   13246:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1324a:	2204      	movs	r2, #4
   1324c:	f362 0302 	bfi	r3, r2, #0, #3
   13250:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   13254:	2301      	movs	r3, #1
			break;
   13256:	e085      	b.n	13364 <z_cbvprintf_impl+0x340>
			conv->length_mod = LENGTH_H;
   13258:	4613      	mov	r3, r2
   1325a:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1325c:	f362 03c6 	bfi	r3, r2, #3, #4
   13260:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   13264:	e7dc      	b.n	13220 <z_cbvprintf_impl+0x1fc>
		if (*++sp == 'l') {
   13266:	785a      	ldrb	r2, [r3, #1]
   13268:	2a6c      	cmp	r2, #108	; 0x6c
   1326a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1326e:	d101      	bne.n	13274 <z_cbvprintf_impl+0x250>
			conv->length_mod = LENGTH_LL;
   13270:	2104      	movs	r1, #4
   13272:	e7d0      	b.n	13216 <z_cbvprintf_impl+0x1f2>
			conv->length_mod = LENGTH_L;
   13274:	4613      	mov	r3, r2
   13276:	2203      	movs	r2, #3
   13278:	e7f0      	b.n	1325c <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_J;
   1327a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1327e:	2205      	movs	r2, #5
   13280:	e7ec      	b.n	1325c <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_T;
   13282:	4613      	mov	r3, r2
   13284:	2207      	movs	r2, #7
   13286:	e7e9      	b.n	1325c <z_cbvprintf_impl+0x238>
		conv->unsupported = true;
   13288:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1328c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   13290:	f023 0302 	bic.w	r3, r3, #2
   13294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   13298:	f043 0302 	orr.w	r3, r3, #2
   1329c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   132a0:	e7be      	b.n	13220 <z_cbvprintf_impl+0x1fc>
	switch (conv->specifier) {
   132a2:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   132a6:	2920      	cmp	r1, #32
   132a8:	f200 8085 	bhi.w	133b6 <z_cbvprintf_impl+0x392>
   132ac:	a001      	add	r0, pc, #4	; (adr r0, 132b4 <z_cbvprintf_impl+0x290>)
   132ae:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   132b2:	bf00      	nop
   132b4:	00013379 	.word	0x00013379
   132b8:	000133b7 	.word	0x000133b7
   132bc:	000133b7 	.word	0x000133b7
   132c0:	000133b7 	.word	0x000133b7
   132c4:	000133b7 	.word	0x000133b7
   132c8:	000133b7 	.word	0x000133b7
   132cc:	000133b7 	.word	0x000133b7
   132d0:	000133b7 	.word	0x000133b7
   132d4:	000133b7 	.word	0x000133b7
   132d8:	00013247 	.word	0x00013247
   132dc:	000133b7 	.word	0x000133b7
   132e0:	00013379 	.word	0x00013379
   132e4:	00013339 	.word	0x00013339
   132e8:	00013247 	.word	0x00013247
   132ec:	00013247 	.word	0x00013247
   132f0:	00013247 	.word	0x00013247
   132f4:	000133b7 	.word	0x000133b7
   132f8:	00013339 	.word	0x00013339
   132fc:	000133b7 	.word	0x000133b7
   13300:	000133b7 	.word	0x000133b7
   13304:	000133b7 	.word	0x000133b7
   13308:	000133b7 	.word	0x000133b7
   1330c:	00013381 	.word	0x00013381
   13310:	00013379 	.word	0x00013379
   13314:	0001339d 	.word	0x0001339d
   13318:	000133b7 	.word	0x000133b7
   1331c:	000133b7 	.word	0x000133b7
   13320:	0001339d 	.word	0x0001339d
   13324:	000133b7 	.word	0x000133b7
   13328:	00013379 	.word	0x00013379
   1332c:	000133b7 	.word	0x000133b7
   13330:	000133b7 	.word	0x000133b7
   13334:	00013379 	.word	0x00013379
		conv->specifier_cat = SPECIFIER_SINT;
   13338:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1333c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1333e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   13342:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13346:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   13348:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   1334c:	bf02      	ittt	eq
   1334e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   13352:	f041 0101 	orreq.w	r1, r1, #1
   13356:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1335a:	2a63      	cmp	r2, #99	; 0x63
   1335c:	d131      	bne.n	133c2 <z_cbvprintf_impl+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1335e:	3b00      	subs	r3, #0
   13360:	bf18      	it	ne
   13362:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   13364:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   13368:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1336c:	430b      	orrs	r3, r1
   1336e:	f363 0241 	bfi	r2, r3, #1, #1
   13372:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   13376:	e6d7      	b.n	13128 <z_cbvprintf_impl+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
   13378:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1337c:	2002      	movs	r0, #2
   1337e:	e7de      	b.n	1333e <z_cbvprintf_impl+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
   13380:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   13384:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13388:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1338c:	2103      	movs	r1, #3
   1338e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13392:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   13394:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   13398:	4143      	adcs	r3, r0
   1339a:	e7e3      	b.n	13364 <z_cbvprintf_impl+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
   1339c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   133a0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   133a2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   133a6:	f361 0202 	bfi	r2, r1, #0, #3
   133aa:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   133ae:	bf14      	ite	ne
   133b0:	2301      	movne	r3, #1
   133b2:	2300      	moveq	r3, #0
   133b4:	e7d6      	b.n	13364 <z_cbvprintf_impl+0x340>
		conv->invalid = true;
   133b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   133ba:	f043 0301 	orr.w	r3, r3, #1
   133be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   133c2:	2300      	movs	r3, #0
   133c4:	e7ce      	b.n	13364 <z_cbvprintf_impl+0x340>
		} else if (conv->width_present) {
   133c6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   133ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
   133cc:	bfb4      	ite	lt
   133ce:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   133d2:	f04f 38ff 	movge.w	r8, #4294967295
   133d6:	e6b9      	b.n	1314c <z_cbvprintf_impl+0x128>
		} else if (conv->prec_present) {
   133d8:	079f      	lsls	r7, r3, #30
   133da:	f57f aec5 	bpl.w	13168 <z_cbvprintf_impl+0x144>
			precision = conv->prec_value;
   133de:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   133e0:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   133e4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   133e6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   133ea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   133ee:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   133f2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   133f4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   133f8:	d136      	bne.n	13468 <z_cbvprintf_impl+0x444>
			switch (length_mod) {
   133fa:	1ecb      	subs	r3, r1, #3
   133fc:	2b04      	cmp	r3, #4
   133fe:	d823      	bhi.n	13448 <z_cbvprintf_impl+0x424>
   13400:	e8df f003 	tbb	[pc, r3]
   13404:	22090903 	.word	0x22090903
   13408:	22          	.byte	0x22
   13409:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1340a:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1340e:	17da      	asrs	r2, r3, #31
   13410:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   13414:	e006      	b.n	13424 <z_cbvprintf_impl+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
   13416:	3407      	adds	r4, #7
   13418:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1341c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   13420:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   13424:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13428:	f013 0603 	ands.w	r6, r3, #3
   1342c:	d05a      	beq.n	134e4 <z_cbvprintf_impl+0x4c0>
			OUTS(sp, fp);
   1342e:	9b02      	ldr	r3, [sp, #8]
   13430:	464a      	mov	r2, r9
   13432:	4659      	mov	r1, fp
   13434:	4650      	mov	r0, sl
   13436:	f014 fbf6 	bl	27c26 <outs>
   1343a:	2800      	cmp	r0, #0
   1343c:	f2c0 8141 	blt.w	136c2 <z_cbvprintf_impl+0x69e>
   13440:	4405      	add	r5, r0
			OUTS(bps, bpe);
   13442:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13446:	e5f5      	b.n	13034 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13448:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1344c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1344e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   13452:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   13456:	d102      	bne.n	1345e <z_cbvprintf_impl+0x43a>
				value->sint = (signed char)value->sint;
   13458:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   1345c:	e7d7      	b.n	1340e <z_cbvprintf_impl+0x3ea>
			} else if (length_mod == LENGTH_H) {
   1345e:	2902      	cmp	r1, #2
   13460:	d1e0      	bne.n	13424 <z_cbvprintf_impl+0x400>
				value->sint = (short)value->sint;
   13462:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   13466:	e7d2      	b.n	1340e <z_cbvprintf_impl+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13468:	2b02      	cmp	r3, #2
   1346a:	d129      	bne.n	134c0 <z_cbvprintf_impl+0x49c>
			switch (length_mod) {
   1346c:	1ecb      	subs	r3, r1, #3
   1346e:	2b04      	cmp	r3, #4
   13470:	d813      	bhi.n	1349a <z_cbvprintf_impl+0x476>
   13472:	e8df f003 	tbb	[pc, r3]
   13476:	0a03      	.short	0x0a03
   13478:	120a      	.short	0x120a
   1347a:	12          	.byte	0x12
   1347b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1347c:	6822      	ldr	r2, [r4, #0]
   1347e:	920c      	str	r2, [sp, #48]	; 0x30
   13480:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   13482:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   13484:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   13486:	4604      	mov	r4, r0
   13488:	e7cc      	b.n	13424 <z_cbvprintf_impl+0x400>
					(uint_value_type)va_arg(ap,
   1348a:	1de0      	adds	r0, r4, #7
   1348c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   13490:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   13494:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   13498:	e7f5      	b.n	13486 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   1349a:	f854 3b04 	ldr.w	r3, [r4], #4
   1349e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   134a0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   134a2:	f04f 0300 	mov.w	r3, #0
   134a6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   134a8:	d105      	bne.n	134b6 <z_cbvprintf_impl+0x492>
				value->uint = (unsigned char)value->uint;
   134aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   134ae:	930c      	str	r3, [sp, #48]	; 0x30
   134b0:	2300      	movs	r3, #0
   134b2:	930d      	str	r3, [sp, #52]	; 0x34
   134b4:	e7b6      	b.n	13424 <z_cbvprintf_impl+0x400>
			} else if (length_mod == LENGTH_H) {
   134b6:	2902      	cmp	r1, #2
   134b8:	d1b4      	bne.n	13424 <z_cbvprintf_impl+0x400>
				value->uint = (unsigned short)value->uint;
   134ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   134be:	e7f6      	b.n	134ae <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   134c0:	2b04      	cmp	r3, #4
   134c2:	d109      	bne.n	134d8 <z_cbvprintf_impl+0x4b4>
					(sint_value_type)va_arg(ap, long long);
   134c4:	1de3      	adds	r3, r4, #7
   134c6:	f023 0307 	bic.w	r3, r3, #7
   134ca:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   134ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   134d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   134d6:	e7a5      	b.n	13424 <z_cbvprintf_impl+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
   134d8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   134da:	bf04      	itt	eq
   134dc:	f854 3b04 	ldreq.w	r3, [r4], #4
   134e0:	930c      	streq	r3, [sp, #48]	; 0x30
   134e2:	e79f      	b.n	13424 <z_cbvprintf_impl+0x400>
		switch (conv->specifier) {
   134e4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   134e8:	2878      	cmp	r0, #120	; 0x78
   134ea:	d8aa      	bhi.n	13442 <z_cbvprintf_impl+0x41e>
   134ec:	2862      	cmp	r0, #98	; 0x62
   134ee:	d820      	bhi.n	13532 <z_cbvprintf_impl+0x50e>
   134f0:	2825      	cmp	r0, #37	; 0x25
   134f2:	f43f ada9 	beq.w	13048 <z_cbvprintf_impl+0x24>
   134f6:	2858      	cmp	r0, #88	; 0x58
   134f8:	d1a3      	bne.n	13442 <z_cbvprintf_impl+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
   134fa:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   134fe:	9300      	str	r3, [sp, #0]
   13500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   13504:	ab06      	add	r3, sp, #24
   13506:	aa0e      	add	r2, sp, #56	; 0x38
   13508:	f7ff fd40 	bl	12f8c <encode_uint>
   1350c:	4681      	mov	r9, r0
			if (precision >= 0) {
   1350e:	2f00      	cmp	r7, #0
   13510:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   13514:	db0b      	blt.n	1352e <z_cbvprintf_impl+0x50a>
				conv->flag_zero = false;
   13516:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1351a:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   1351e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   13522:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   13524:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   13528:	d901      	bls.n	1352e <z_cbvprintf_impl+0x50a>
					conv->pad0_value = precision - (int)len;
   1352a:	1afb      	subs	r3, r7, r3
   1352c:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1352e:	4607      	mov	r7, r0
   13530:	e03d      	b.n	135ae <z_cbvprintf_impl+0x58a>
		switch (conv->specifier) {
   13532:	3863      	subs	r0, #99	; 0x63
   13534:	2815      	cmp	r0, #21
   13536:	d884      	bhi.n	13442 <z_cbvprintf_impl+0x41e>
   13538:	a201      	add	r2, pc, #4	; (adr r2, 13540 <z_cbvprintf_impl+0x51c>)
   1353a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1353e:	bf00      	nop
   13540:	000135bf 	.word	0x000135bf
   13544:	00013621 	.word	0x00013621
   13548:	00013443 	.word	0x00013443
   1354c:	00013443 	.word	0x00013443
   13550:	00013443 	.word	0x00013443
   13554:	00013443 	.word	0x00013443
   13558:	00013621 	.word	0x00013621
   1355c:	00013443 	.word	0x00013443
   13560:	00013443 	.word	0x00013443
   13564:	00013443 	.word	0x00013443
   13568:	00013443 	.word	0x00013443
   1356c:	0001367b 	.word	0x0001367b
   13570:	00013649 	.word	0x00013649
   13574:	0001364d 	.word	0x0001364d
   13578:	00013443 	.word	0x00013443
   1357c:	00013443 	.word	0x00013443
   13580:	00013599 	.word	0x00013599
   13584:	00013443 	.word	0x00013443
   13588:	00013649 	.word	0x00013649
   1358c:	00013443 	.word	0x00013443
   13590:	00013443 	.word	0x00013443
   13594:	00013649 	.word	0x00013649
			if (precision >= 0) {
   13598:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   1359a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   1359e:	db0a      	blt.n	135b6 <z_cbvprintf_impl+0x592>
				len = strnlen(bps, precision);
   135a0:	4639      	mov	r1, r7
   135a2:	4648      	mov	r0, r9
   135a4:	f018 fdff 	bl	2c1a6 <strnlen>
			bpe = bps + len;
   135a8:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   135ac:	2600      	movs	r6, #0
		if (bps == NULL) {
   135ae:	f1b9 0f00 	cmp.w	r9, #0
   135b2:	d10c      	bne.n	135ce <z_cbvprintf_impl+0x5aa>
   135b4:	e745      	b.n	13442 <z_cbvprintf_impl+0x41e>
				len = strlen(bps);
   135b6:	4648      	mov	r0, r9
   135b8:	f7f9 f9ad 	bl	c916 <strlen>
   135bc:	e7f4      	b.n	135a8 <z_cbvprintf_impl+0x584>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   135be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   135c0:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   135c4:	2600      	movs	r6, #0
			bpe = buf + 1;
   135c6:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   135ca:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   135ce:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   135d2:	b106      	cbz	r6, 135d6 <z_cbvprintf_impl+0x5b2>
			nj_len += 1U;
   135d4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   135d6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   135da:	06d0      	lsls	r0, r2, #27
   135dc:	d566      	bpl.n	136ac <z_cbvprintf_impl+0x688>
			nj_len += 2U;
   135de:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   135e0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   135e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   135e4:	bf48      	it	mi
   135e6:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   135e8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   135ea:	bf48      	it	mi
   135ec:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   135ee:	f1b8 0f00 	cmp.w	r8, #0
   135f2:	dd73      	ble.n	136dc <z_cbvprintf_impl+0x6b8>
			if (!conv->flag_dash) {
   135f4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   135f8:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   135fc:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13600:	9303      	str	r3, [sp, #12]
   13602:	0753      	lsls	r3, r2, #29
   13604:	d46a      	bmi.n	136dc <z_cbvprintf_impl+0x6b8>
				if (conv->flag_zero) {
   13606:	0650      	lsls	r0, r2, #25
   13608:	d55e      	bpl.n	136c8 <z_cbvprintf_impl+0x6a4>
					if (sign != 0) {
   1360a:	b13e      	cbz	r6, 1361c <z_cbvprintf_impl+0x5f8>
						OUTC(sign);
   1360c:	4659      	mov	r1, fp
   1360e:	4630      	mov	r0, r6
   13610:	47d0      	blx	sl
   13612:	2800      	cmp	r0, #0
   13614:	db55      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
						sign = 0;
   13616:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   13618:	3501      	adds	r5, #1
						sign = 0;
   1361a:	461e      	mov	r6, r3
					pad = '0';
   1361c:	2330      	movs	r3, #48	; 0x30
   1361e:	e054      	b.n	136ca <z_cbvprintf_impl+0x6a6>
			if (conv->flag_plus) {
   13620:	071e      	lsls	r6, r3, #28
   13622:	d40f      	bmi.n	13644 <z_cbvprintf_impl+0x620>
				sign = ' ';
   13624:	f013 0610 	ands.w	r6, r3, #16
   13628:	bf18      	it	ne
   1362a:	2620      	movne	r6, #32
			sint = value->sint;
   1362c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   13630:	2b00      	cmp	r3, #0
   13632:	f6bf af62 	bge.w	134fa <z_cbvprintf_impl+0x4d6>
				value->uint = (uint_value_type)-sint;
   13636:	4252      	negs	r2, r2
   13638:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1363c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   13640:	262d      	movs	r6, #45	; 0x2d
   13642:	e75a      	b.n	134fa <z_cbvprintf_impl+0x4d6>
				sign = '+';
   13644:	262b      	movs	r6, #43	; 0x2b
   13646:	e7f1      	b.n	1362c <z_cbvprintf_impl+0x608>
		switch (conv->specifier) {
   13648:	2600      	movs	r6, #0
   1364a:	e756      	b.n	134fa <z_cbvprintf_impl+0x4d6>
			if (value->ptr != NULL) {
   1364c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1364e:	b340      	cbz	r0, 136a2 <z_cbvprintf_impl+0x67e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13650:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   13654:	9300      	str	r3, [sp, #0]
   13656:	aa0e      	add	r2, sp, #56	; 0x38
   13658:	ab06      	add	r3, sp, #24
   1365a:	2100      	movs	r1, #0
   1365c:	f7ff fc96 	bl	12f8c <encode_uint>
				conv->altform_0c = true;
   13660:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   13664:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13668:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1366c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13670:	4681      	mov	r9, r0
				conv->altform_0c = true;
   13672:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   13676:	2600      	movs	r6, #0
				goto prec_int_pad0;
   13678:	e749      	b.n	1350e <z_cbvprintf_impl+0x4ea>
				store_count(conv, value->ptr, count);
   1367a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1367c:	2907      	cmp	r1, #7
   1367e:	f63f aee0 	bhi.w	13442 <z_cbvprintf_impl+0x41e>
   13682:	e8df f001 	tbb	[pc, r1]
   13686:	040c      	.short	0x040c
   13688:	08080c06 	.word	0x08080c06
   1368c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1368e:	701d      	strb	r5, [r3, #0]
		break;
   13690:	e6d7      	b.n	13442 <z_cbvprintf_impl+0x41e>
		*(short *)dp = (short)count;
   13692:	801d      	strh	r5, [r3, #0]
		break;
   13694:	e6d5      	b.n	13442 <z_cbvprintf_impl+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
   13696:	17ea      	asrs	r2, r5, #31
   13698:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   1369c:	e6d1      	b.n	13442 <z_cbvprintf_impl+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1369e:	601d      	str	r5, [r3, #0]
		break;
   136a0:	e6cf      	b.n	13442 <z_cbvprintf_impl+0x41e>
			bpe = bps + 5;
   136a2:	4f2e      	ldr	r7, [pc, #184]	; (1375c <z_cbvprintf_impl+0x738>)
   136a4:	4606      	mov	r6, r0
			bps = "(nil)";
   136a6:	f1a7 0905 	sub.w	r9, r7, #5
   136aa:	e790      	b.n	135ce <z_cbvprintf_impl+0x5aa>
		} else if (conv->altform_0) {
   136ac:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   136ae:	bf48      	it	mi
   136b0:	3301      	addmi	r3, #1
   136b2:	e795      	b.n	135e0 <z_cbvprintf_impl+0x5bc>
					OUTC(pad);
   136b4:	4618      	mov	r0, r3
   136b6:	4659      	mov	r1, fp
   136b8:	9303      	str	r3, [sp, #12]
   136ba:	47d0      	blx	sl
   136bc:	2800      	cmp	r0, #0
   136be:	9b03      	ldr	r3, [sp, #12]
   136c0:	da04      	bge.n	136cc <z_cbvprintf_impl+0x6a8>
#undef OUTS
#undef OUTC
}
   136c2:	b013      	add	sp, #76	; 0x4c
   136c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   136c8:	2320      	movs	r3, #32
   136ca:	4445      	add	r5, r8
   136cc:	4642      	mov	r2, r8
				while (width-- > 0) {
   136ce:	2a00      	cmp	r2, #0
   136d0:	eba5 0108 	sub.w	r1, r5, r8
   136d4:	f108 38ff 	add.w	r8, r8, #4294967295
   136d8:	dcec      	bgt.n	136b4 <z_cbvprintf_impl+0x690>
   136da:	460d      	mov	r5, r1
		if (sign != 0) {
   136dc:	b12e      	cbz	r6, 136ea <z_cbvprintf_impl+0x6c6>
			OUTC(sign);
   136de:	4659      	mov	r1, fp
   136e0:	4630      	mov	r0, r6
   136e2:	47d0      	blx	sl
   136e4:	2800      	cmp	r0, #0
   136e6:	dbec      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   136e8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   136ea:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   136ee:	06d9      	lsls	r1, r3, #27
   136f0:	d401      	bmi.n	136f6 <z_cbvprintf_impl+0x6d2>
   136f2:	071a      	lsls	r2, r3, #28
   136f4:	d505      	bpl.n	13702 <z_cbvprintf_impl+0x6de>
				OUTC('0');
   136f6:	4659      	mov	r1, fp
   136f8:	2030      	movs	r0, #48	; 0x30
   136fa:	47d0      	blx	sl
   136fc:	2800      	cmp	r0, #0
   136fe:	dbe0      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   13700:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   13702:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   13706:	06db      	lsls	r3, r3, #27
   13708:	d506      	bpl.n	13718 <z_cbvprintf_impl+0x6f4>
				OUTC(conv->specifier);
   1370a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1370e:	4659      	mov	r1, fp
   13710:	47d0      	blx	sl
   13712:	2800      	cmp	r0, #0
   13714:	dbd5      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   13716:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13718:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1371a:	442e      	add	r6, r5
   1371c:	1b73      	subs	r3, r6, r5
   1371e:	2b00      	cmp	r3, #0
   13720:	dc15      	bgt.n	1374e <z_cbvprintf_impl+0x72a>
			OUTS(bps, bpe);
   13722:	463b      	mov	r3, r7
   13724:	464a      	mov	r2, r9
   13726:	4659      	mov	r1, fp
   13728:	4650      	mov	r0, sl
   1372a:	f014 fa7c 	bl	27c26 <outs>
   1372e:	2800      	cmp	r0, #0
   13730:	dbc7      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   13732:	4405      	add	r5, r0
		while (width > 0) {
   13734:	44a8      	add	r8, r5
   13736:	eba8 0305 	sub.w	r3, r8, r5
   1373a:	2b00      	cmp	r3, #0
   1373c:	f77f ae81 	ble.w	13442 <z_cbvprintf_impl+0x41e>
			OUTC(' ');
   13740:	4659      	mov	r1, fp
   13742:	2020      	movs	r0, #32
   13744:	47d0      	blx	sl
   13746:	2800      	cmp	r0, #0
   13748:	dbbb      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   1374a:	3501      	adds	r5, #1
			--width;
   1374c:	e7f3      	b.n	13736 <z_cbvprintf_impl+0x712>
				OUTC('0');
   1374e:	4659      	mov	r1, fp
   13750:	2030      	movs	r0, #48	; 0x30
   13752:	47d0      	blx	sl
   13754:	2800      	cmp	r0, #0
   13756:	dbb4      	blt.n	136c2 <z_cbvprintf_impl+0x69e>
   13758:	3501      	adds	r5, #1
   1375a:	e7df      	b.n	1371c <z_cbvprintf_impl+0x6f8>
   1375c:	0002d8d5 	.word	0x0002d8d5

00013760 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13760:	b508      	push	{r3, lr}
   13762:	f04f 0240 	mov.w	r2, #64	; 0x40
   13766:	f3ef 8311 	mrs	r3, BASEPRI
   1376a:	f382 8812 	msr	BASEPRI_MAX, r2
   1376e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   13772:	f001 ff97 	bl	156a4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13776:	4803      	ldr	r0, [pc, #12]	; (13784 <sys_reboot+0x24>)
   13778:	f013 ffc0 	bl	276fc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1377c:	f001 f95e 	bl	14a3c <arch_cpu_idle>
   13780:	e7fc      	b.n	1377c <sys_reboot+0x1c>
   13782:	bf00      	nop
   13784:	0002d8d6 	.word	0x0002d8d6

00013788 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13788:	f00c bf02 	b.w	20590 <SystemInit>

0001378c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   1378c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13790:	f8df 8058 	ldr.w	r8, [pc, #88]	; 137ec <activate_foreach_backend+0x60>
{
   13794:	4604      	mov	r4, r0
	while (mask_cpy) {
   13796:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13798:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   1379c:	b914      	cbnz	r4, 137a4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1379e:	4638      	mov	r0, r7
   137a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   137a4:	fa94 f5a4 	rbit	r5, r4
   137a8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   137ac:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   137b0:	012e      	lsls	r6, r5, #4
   137b2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   137b6:	ea6f 0a03 	mvn.w	sl, r3
   137ba:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   137be:	7b2b      	ldrb	r3, [r5, #12]
   137c0:	2b00      	cmp	r3, #0
   137c2:	d0eb      	beq.n	1379c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   137c4:	f858 3006 	ldr.w	r3, [r8, r6]
   137c8:	691b      	ldr	r3, [r3, #16]
   137ca:	b94b      	cbnz	r3, 137e0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   137cc:	4446      	add	r6, r8
			log_backend_enable(backend,
   137ce:	2204      	movs	r2, #4
   137d0:	6873      	ldr	r3, [r6, #4]
   137d2:	4628      	mov	r0, r5
   137d4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   137d6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   137da:	f000 fa43 	bl	13c64 <log_backend_enable>
   137de:	e7dd      	b.n	1379c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   137e0:	4628      	mov	r0, r5
   137e2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   137e4:	2800      	cmp	r0, #0
   137e6:	d1d9      	bne.n	1379c <activate_foreach_backend+0x10>
   137e8:	e7f0      	b.n	137cc <activate_foreach_backend+0x40>
   137ea:	bf00      	nop
   137ec:	0002c894 	.word	0x0002c894

000137f0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   137f0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   137f2:	4910      	ldr	r1, [pc, #64]	; (13834 <enable_logger+0x44>)
   137f4:	4810      	ldr	r0, [pc, #64]	; (13838 <enable_logger+0x48>)
{
   137f6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   137f8:	2200      	movs	r2, #0
   137fa:	f018 fa62 	bl	2bcc2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   137fe:	4d0f      	ldr	r5, [pc, #60]	; (1383c <enable_logger+0x4c>)
   13800:	490f      	ldr	r1, [pc, #60]	; (13840 <enable_logger+0x50>)
   13802:	2200      	movs	r2, #0
   13804:	2300      	movs	r3, #0
   13806:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1380a:	2400      	movs	r4, #0
   1380c:	230e      	movs	r3, #14
   1380e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   13812:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13816:	4b0b      	ldr	r3, [pc, #44]	; (13844 <enable_logger+0x54>)
   13818:	9400      	str	r4, [sp, #0]
   1381a:	f44f 7240 	mov.w	r2, #768	; 0x300
   1381e:	4628      	mov	r0, r5
   13820:	f00d ffd0 	bl	217c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13824:	4908      	ldr	r1, [pc, #32]	; (13848 <enable_logger+0x58>)
   13826:	4628      	mov	r0, r5
   13828:	f017 fec9 	bl	2b5be <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1382c:	4620      	mov	r0, r4
   1382e:	b009      	add	sp, #36	; 0x24
   13830:	bd30      	pop	{r4, r5, pc}
   13832:	bf00      	nop
   13834:	0001384d 	.word	0x0001384d
   13838:	20001dc8 	.word	0x20001dc8
   1383c:	20001e00 	.word	0x20001e00
   13840:	20004ac8 	.word	0x20004ac8
   13844:	00013afd 	.word	0x00013afd
   13848:	0002d8ff 	.word	0x0002d8ff

0001384c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1384c:	4801      	ldr	r0, [pc, #4]	; (13854 <log_process_thread_timer_expiry_fn+0x8>)
   1384e:	f00e b945 	b.w	21adc <z_impl_k_sem_give>
   13852:	bf00      	nop
   13854:	20000b74 	.word	0x20000b74

00013858 <z_log_init>:
{
   13858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1385c:	4b25      	ldr	r3, [pc, #148]	; (138f4 <z_log_init+0x9c>)
   1385e:	f3bf 8f5b 	dmb	ish
   13862:	4681      	mov	r9, r0
   13864:	4688      	mov	r8, r1
   13866:	e853 4f00 	ldrex	r4, [r3]
   1386a:	1c62      	adds	r2, r4, #1
   1386c:	e843 2100 	strex	r1, r2, [r3]
   13870:	2900      	cmp	r1, #0
   13872:	d1f8      	bne.n	13866 <z_log_init+0xe>
   13874:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13878:	b11c      	cbz	r4, 13882 <z_log_init+0x2a>
		return 0;
   1387a:	2400      	movs	r4, #0
}
   1387c:	4620      	mov	r0, r4
   1387e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   13882:	4d1d      	ldr	r5, [pc, #116]	; (138f8 <z_log_init+0xa0>)
   13884:	4e1d      	ldr	r6, [pc, #116]	; (138fc <z_log_init+0xa4>)
   13886:	1b76      	subs	r6, r6, r5
   13888:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1388a:	4627      	mov	r7, r4
				mask |= BIT(i);
   1388c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
   13890:	42b7      	cmp	r7, r6
   13892:	db11      	blt.n	138b8 <z_log_init+0x60>
	if (blocking) {
   13894:	f1b9 0f00 	cmp.w	r9, #0
   13898:	d0f0      	beq.n	1387c <z_log_init+0x24>
		while (mask) {
   1389a:	2c00      	cmp	r4, #0
   1389c:	d0ed      	beq.n	1387a <z_log_init+0x22>
			mask = activate_foreach_backend(mask);
   1389e:	4620      	mov	r0, r4
   138a0:	f7ff ff74 	bl	1378c <activate_foreach_backend>
   138a4:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   138a6:	f1b8 0f00 	cmp.w	r8, #0
   138aa:	d0f6      	beq.n	1389a <z_log_init+0x42>
	return z_impl_k_sleep(timeout);
   138ac:	2100      	movs	r1, #0
   138ae:	f44f 70a4 	mov.w	r0, #328	; 0x148
   138b2:	f00e fe1b 	bl	224ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   138b6:	e7f0      	b.n	1389a <z_log_init+0x42>
		if (backend->autostart) {
   138b8:	7b2b      	ldrb	r3, [r5, #12]
   138ba:	b17b      	cbz	r3, 138dc <z_log_init+0x84>
	if (backend->api->init) {
   138bc:	f8d5 b000 	ldr.w	fp, [r5]
   138c0:	f8db 300c 	ldr.w	r3, [fp, #12]
   138c4:	b10b      	cbz	r3, 138ca <z_log_init+0x72>
		backend->api->init(backend);
   138c6:	4628      	mov	r0, r5
   138c8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   138ca:	f8db 3010 	ldr.w	r3, [fp, #16]
   138ce:	b943      	cbnz	r3, 138e2 <z_log_init+0x8a>
				log_backend_enable(backend,
   138d0:	686b      	ldr	r3, [r5, #4]
   138d2:	2204      	movs	r2, #4
   138d4:	6819      	ldr	r1, [r3, #0]
   138d6:	4628      	mov	r0, r5
   138d8:	f000 f9c4 	bl	13c64 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   138dc:	3701      	adds	r7, #1
   138de:	3510      	adds	r5, #16
   138e0:	e7d6      	b.n	13890 <z_log_init+0x38>
		return backend->api->is_ready(backend);
   138e2:	4628      	mov	r0, r5
   138e4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   138e6:	2800      	cmp	r0, #0
   138e8:	d0f2      	beq.n	138d0 <z_log_init+0x78>
				mask |= BIT(i);
   138ea:	fa0a f307 	lsl.w	r3, sl, r7
   138ee:	431c      	orrs	r4, r3
   138f0:	e7f4      	b.n	138dc <z_log_init+0x84>
   138f2:	bf00      	nop
   138f4:	200027e8 	.word	0x200027e8
   138f8:	0002c894 	.word	0x0002c894
   138fc:	0002c8b4 	.word	0x0002c8b4

00013900 <log_format_func_t_get>:
}
   13900:	4b01      	ldr	r3, [pc, #4]	; (13908 <log_format_func_t_get+0x8>)
   13902:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13906:	4770      	bx	lr
   13908:	0002cc34 	.word	0x0002cc34

0001390c <z_log_notify_backend_enabled>:
{
   1390c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1390e:	4c04      	ldr	r4, [pc, #16]	; (13920 <z_log_notify_backend_enabled+0x14>)
   13910:	7823      	ldrb	r3, [r4, #0]
   13912:	b913      	cbnz	r3, 1391a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   13914:	4803      	ldr	r0, [pc, #12]	; (13924 <z_log_notify_backend_enabled+0x18>)
   13916:	f00e f8e1 	bl	21adc <z_impl_k_sem_give>
	backend_attached = true;
   1391a:	2301      	movs	r3, #1
   1391c:	7023      	strb	r3, [r4, #0]
}
   1391e:	bd10      	pop	{r4, pc}
   13920:	20003db1 	.word	0x20003db1
   13924:	20000b74 	.word	0x20000b74

00013928 <z_log_dropped>:
   13928:	4b0c      	ldr	r3, [pc, #48]	; (1395c <z_log_dropped+0x34>)
   1392a:	f3bf 8f5b 	dmb	ish
   1392e:	e853 2f00 	ldrex	r2, [r3]
   13932:	3201      	adds	r2, #1
   13934:	e843 2100 	strex	r1, r2, [r3]
   13938:	2900      	cmp	r1, #0
   1393a:	d1f8      	bne.n	1392e <z_log_dropped+0x6>
   1393c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13940:	b158      	cbz	r0, 1395a <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13942:	f3bf 8f5b 	dmb	ish
   13946:	4b06      	ldr	r3, [pc, #24]	; (13960 <z_log_dropped+0x38>)
   13948:	e853 2f00 	ldrex	r2, [r3]
   1394c:	3a01      	subs	r2, #1
   1394e:	e843 2100 	strex	r1, r2, [r3]
   13952:	2900      	cmp	r1, #0
   13954:	d1f8      	bne.n	13948 <z_log_dropped+0x20>
   13956:	f3bf 8f5b 	dmb	ish
}
   1395a:	4770      	bx	lr
   1395c:	200027e4 	.word	0x200027e4
   13960:	200027e0 	.word	0x200027e0

00013964 <z_log_dropped_read_and_clear>:
}
   13964:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13966:	4b06      	ldr	r3, [pc, #24]	; (13980 <z_log_dropped_read_and_clear+0x1c>)
   13968:	f3bf 8f5b 	dmb	ish
   1396c:	4602      	mov	r2, r0
   1396e:	e853 0f00 	ldrex	r0, [r3]
   13972:	e843 2100 	strex	r1, r2, [r3]
   13976:	2900      	cmp	r1, #0
   13978:	d1f9      	bne.n	1396e <z_log_dropped_read_and_clear+0xa>
   1397a:	f3bf 8f5b 	dmb	ish
   1397e:	4770      	bx	lr
   13980:	200027e4 	.word	0x200027e4

00013984 <dropped_notify>:
{
   13984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13986:	f7ff ffed 	bl	13964 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
   1398a:	4c0a      	ldr	r4, [pc, #40]	; (139b4 <dropped_notify+0x30>)
   1398c:	4d0a      	ldr	r5, [pc, #40]	; (139b8 <dropped_notify+0x34>)
   1398e:	1b2d      	subs	r5, r5, r4
   13990:	4607      	mov	r7, r0
   13992:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13994:	2600      	movs	r6, #0
   13996:	42ae      	cmp	r6, r5
   13998:	db00      	blt.n	1399c <dropped_notify+0x18>
}
   1399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1399c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1399e:	795b      	ldrb	r3, [r3, #5]
   139a0:	b12b      	cbz	r3, 139ae <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   139a2:	6823      	ldr	r3, [r4, #0]
   139a4:	685b      	ldr	r3, [r3, #4]
   139a6:	b113      	cbz	r3, 139ae <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   139a8:	4639      	mov	r1, r7
   139aa:	4620      	mov	r0, r4
   139ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   139ae:	3601      	adds	r6, #1
   139b0:	3410      	adds	r4, #16
   139b2:	e7f0      	b.n	13996 <dropped_notify+0x12>
   139b4:	0002c894 	.word	0x0002c894
   139b8:	0002c8b4 	.word	0x0002c8b4

000139bc <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   139bc:	4901      	ldr	r1, [pc, #4]	; (139c4 <z_log_msg_init+0x8>)
   139be:	4802      	ldr	r0, [pc, #8]	; (139c8 <z_log_msg_init+0xc>)
   139c0:	f014 ba09 	b.w	27dd6 <mpsc_pbuf_init>
   139c4:	0002cc40 	.word	0x0002cc40
   139c8:	200027ec 	.word	0x200027ec

000139cc <log_core_init>:
	panic_mode = false;
   139cc:	4a08      	ldr	r2, [pc, #32]	; (139f0 <log_core_init+0x24>)
{
   139ce:	b508      	push	{r3, lr}
	panic_mode = false;
   139d0:	2300      	movs	r3, #0
   139d2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   139d4:	4a07      	ldr	r2, [pc, #28]	; (139f4 <log_core_init+0x28>)
   139d6:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   139d8:	4b07      	ldr	r3, [pc, #28]	; (139f8 <log_core_init+0x2c>)
   139da:	4a08      	ldr	r2, [pc, #32]	; (139fc <log_core_init+0x30>)
   139dc:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
   139de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   139e2:	f000 fbc5 	bl	14170 <log_output_timestamp_freq_set>
}
   139e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   139ea:	f7ff bfe7 	b.w	139bc <z_log_msg_init>
   139ee:	bf00      	nop
   139f0:	20003db2 	.word	0x20003db2
   139f4:	200027e4 	.word	0x200027e4
   139f8:	200005fc 	.word	0x200005fc
   139fc:	00028089 	.word	0x00028089

00013a00 <z_log_msg_alloc>:
{
   13a00:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
   13a02:	2200      	movs	r2, #0
   13a04:	4801      	ldr	r0, [pc, #4]	; (13a0c <z_log_msg_alloc+0xc>)
   13a06:	2300      	movs	r3, #0
   13a08:	f014 ba06 	b.w	27e18 <mpsc_pbuf_alloc>
   13a0c:	200027ec 	.word	0x200027ec

00013a10 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13a10:	4801      	ldr	r0, [pc, #4]	; (13a18 <z_log_msg_claim+0x8>)
   13a12:	f014 ba9a 	b.w	27f4a <mpsc_pbuf_claim>
   13a16:	bf00      	nop
   13a18:	200027ec 	.word	0x200027ec

00013a1c <z_log_msg_free>:
{
   13a1c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
   13a1e:	4801      	ldr	r0, [pc, #4]	; (13a24 <z_log_msg_free+0x8>)
   13a20:	f014 badf 	b.w	27fe2 <mpsc_pbuf_free>
   13a24:	200027ec 	.word	0x200027ec

00013a28 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
   13a28:	4801      	ldr	r0, [pc, #4]	; (13a30 <z_log_msg_pending+0x8>)
   13a2a:	f014 bb0e 	b.w	2804a <mpsc_pbuf_is_pending>
   13a2e:	bf00      	nop
   13a30:	200027ec 	.word	0x200027ec

00013a34 <z_impl_log_process>:
{
   13a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
   13a36:	4b19      	ldr	r3, [pc, #100]	; (13a9c <z_impl_log_process+0x68>)
   13a38:	7818      	ldrb	r0, [r3, #0]
   13a3a:	b370      	cbz	r0, 13a9a <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
   13a3c:	f7ff ffe8 	bl	13a10 <z_log_msg_claim>
	if (msg) {
   13a40:	4605      	mov	r5, r0
   13a42:	b1a8      	cbz	r0, 13a70 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13a44:	f3bf 8f5b 	dmb	ish
   13a48:	4b15      	ldr	r3, [pc, #84]	; (13aa0 <z_impl_log_process+0x6c>)
   13a4a:	e853 2f00 	ldrex	r2, [r3]
   13a4e:	3a01      	subs	r2, #1
   13a50:	e843 2100 	strex	r1, r2, [r3]
   13a54:	2900      	cmp	r1, #0
   13a56:	d1f8      	bne.n	13a4a <z_impl_log_process+0x16>
   13a58:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
   13a5c:	4c11      	ldr	r4, [pc, #68]	; (13aa4 <z_impl_log_process+0x70>)
   13a5e:	4e12      	ldr	r6, [pc, #72]	; (13aa8 <z_impl_log_process+0x74>)
   13a60:	1b36      	subs	r6, r6, r4
   13a62:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13a64:	2700      	movs	r7, #0
   13a66:	42b7      	cmp	r7, r6
   13a68:	db0c      	blt.n	13a84 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   13a6a:	4628      	mov	r0, r5
   13a6c:	f7ff ffd6 	bl	13a1c <z_log_msg_free>
	return dropped_cnt > 0;
   13a70:	4b0e      	ldr	r3, [pc, #56]	; (13aac <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
   13a72:	681b      	ldr	r3, [r3, #0]
   13a74:	2b00      	cmp	r3, #0
   13a76:	dd01      	ble.n	13a7c <z_impl_log_process+0x48>
		dropped_notify();
   13a78:	f7ff ff84 	bl	13984 <dropped_notify>
}
   13a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
   13a80:	f7ff bfd2 	b.w	13a28 <z_log_msg_pending>
	return backend->cb->active;
   13a84:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13a86:	795b      	ldrb	r3, [r3, #5]
   13a88:	b123      	cbz	r3, 13a94 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   13a8a:	6823      	ldr	r3, [r4, #0]
   13a8c:	4629      	mov	r1, r5
   13a8e:	681b      	ldr	r3, [r3, #0]
   13a90:	4620      	mov	r0, r4
   13a92:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13a94:	3701      	adds	r7, #1
   13a96:	3410      	adds	r4, #16
   13a98:	e7e5      	b.n	13a66 <z_impl_log_process+0x32>
}
   13a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a9c:	20003db1 	.word	0x20003db1
   13aa0:	200027e0 	.word	0x200027e0
   13aa4:	0002c894 	.word	0x0002c894
   13aa8:	0002c8b4 	.word	0x0002c8b4
   13aac:	200027e4 	.word	0x200027e4

00013ab0 <z_impl_log_panic>:
{
   13ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   13ab2:	4f0f      	ldr	r7, [pc, #60]	; (13af0 <z_impl_log_panic+0x40>)
   13ab4:	783d      	ldrb	r5, [r7, #0]
   13ab6:	b97d      	cbnz	r5, 13ad8 <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
   13ab8:	4c0e      	ldr	r4, [pc, #56]	; (13af4 <z_impl_log_panic+0x44>)
   13aba:	4e0f      	ldr	r6, [pc, #60]	; (13af8 <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
   13abc:	4629      	mov	r1, r5
   13abe:	2001      	movs	r0, #1
   13ac0:	f7ff feca 	bl	13858 <z_log_init>
   13ac4:	1b36      	subs	r6, r6, r4
   13ac6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13ac8:	42b5      	cmp	r5, r6
   13aca:	db06      	blt.n	13ada <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13acc:	f7ff ffb2 	bl	13a34 <z_impl_log_process>
		while (log_process() == true) {
   13ad0:	2800      	cmp	r0, #0
   13ad2:	d1fb      	bne.n	13acc <z_impl_log_panic+0x1c>
	panic_mode = true;
   13ad4:	2301      	movs	r3, #1
   13ad6:	703b      	strb	r3, [r7, #0]
}
   13ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   13ada:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13adc:	795b      	ldrb	r3, [r3, #5]
   13ade:	b11b      	cbz	r3, 13ae8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   13ae0:	6823      	ldr	r3, [r4, #0]
   13ae2:	4620      	mov	r0, r4
   13ae4:	689b      	ldr	r3, [r3, #8]
   13ae6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13ae8:	3501      	adds	r5, #1
   13aea:	3410      	adds	r4, #16
   13aec:	e7ec      	b.n	13ac8 <z_impl_log_panic+0x18>
   13aee:	bf00      	nop
   13af0:	20003db2 	.word	0x20003db2
   13af4:	0002c894 	.word	0x0002c894
   13af8:	0002c8b4 	.word	0x0002c8b4

00013afc <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   13afc:	2100      	movs	r1, #0
{
   13afe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13b02:	4608      	mov	r0, r1
   13b04:	f7ff fea8 	bl	13858 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13b08:	4604      	mov	r4, r0
   13b0a:	b380      	cbz	r0, 13b6e <log_process_thread_func+0x72>
   13b0c:	f240 6867 	movw	r8, #1639	; 0x667
   13b10:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13b14:	f00e fd1e 	bl	22554 <z_impl_z_current_get>
	proc_tid = process_tid;
   13b18:	4b1d      	ldr	r3, [pc, #116]	; (13b90 <log_process_thread_func+0x94>)
   13b1a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13b1c:	b130      	cbz	r0, 13b2c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13b1e:	4b1d      	ldr	r3, [pc, #116]	; (13b94 <log_process_thread_func+0x98>)
	    process_tid &&
   13b20:	681b      	ldr	r3, [r3, #0]
   13b22:	2b09      	cmp	r3, #9
   13b24:	dd02      	ble.n	13b2c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   13b26:	481c      	ldr	r0, [pc, #112]	; (13b98 <log_process_thread_func+0x9c>)
   13b28:	f00d ffd8 	bl	21adc <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
   13b2c:	4e1b      	ldr	r6, [pc, #108]	; (13b9c <log_process_thread_func+0xa0>)
   13b2e:	4b1c      	ldr	r3, [pc, #112]	; (13ba0 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
   13b30:	f8df b064 	ldr.w	fp, [pc, #100]	; 13b98 <log_process_thread_func+0x9c>
   13b34:	1af6      	subs	r6, r6, r3
   13b36:	1136      	asrs	r6, r6, #4
   13b38:	2700      	movs	r7, #0
		if (activate_mask) {
   13b3a:	b144      	cbz	r4, 13b4e <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
   13b3c:	4620      	mov	r0, r4
   13b3e:	f7ff fe25 	bl	1378c <activate_foreach_backend>
			if (!activate_mask) {
   13b42:	4604      	mov	r4, r0
   13b44:	b918      	cbnz	r0, 13b4e <log_process_thread_func+0x52>
				timeout = K_FOREVER;
   13b46:	f04f 38ff 	mov.w	r8, #4294967295
   13b4a:	f04f 39ff 	mov.w	r9, #4294967295
   13b4e:	f7ff ff71 	bl	13a34 <z_impl_log_process>
		if (log_process() == false) {
   13b52:	4605      	mov	r5, r0
   13b54:	b948      	cbnz	r0, 13b6a <log_process_thread_func+0x6e>
			if (processed_any) {
   13b56:	b11f      	cbz	r7, 13b60 <log_process_thread_func+0x64>
   13b58:	4f11      	ldr	r7, [pc, #68]	; (13ba0 <log_process_thread_func+0xa4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
   13b5a:	4682      	mov	sl, r0
   13b5c:	45b2      	cmp	sl, r6
   13b5e:	db0b      	blt.n	13b78 <log_process_thread_func+0x7c>
   13b60:	4642      	mov	r2, r8
   13b62:	464b      	mov	r3, r9
   13b64:	4658      	mov	r0, fp
   13b66:	f00d ffdf 	bl	21b28 <z_impl_k_sem_take>
   13b6a:	462f      	mov	r7, r5
   13b6c:	e7e5      	b.n	13b3a <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13b6e:	f04f 38ff 	mov.w	r8, #4294967295
   13b72:	f04f 39ff 	mov.w	r9, #4294967295
   13b76:	e7cd      	b.n	13b14 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13b78:	683b      	ldr	r3, [r7, #0]
   13b7a:	699b      	ldr	r3, [r3, #24]
   13b7c:	b11b      	cbz	r3, 13b86 <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
   13b7e:	2200      	movs	r2, #0
   13b80:	4611      	mov	r1, r2
   13b82:	4638      	mov	r0, r7
   13b84:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13b86:	f10a 0a01 	add.w	sl, sl, #1
   13b8a:	3710      	adds	r7, #16
   13b8c:	e7e6      	b.n	13b5c <log_process_thread_func+0x60>
   13b8e:	bf00      	nop
   13b90:	2000282c 	.word	0x2000282c
   13b94:	200027e0 	.word	0x200027e0
   13b98:	20000b74 	.word	0x20000b74
   13b9c:	0002c8b4 	.word	0x0002c8b4
   13ba0:	0002c894 	.word	0x0002c894

00013ba4 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
   13ba4:	4b21      	ldr	r3, [pc, #132]	; (13c2c <z_log_msg_commit+0x88>)
{
   13ba6:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13ba8:	681b      	ldr	r3, [r3, #0]
{
   13baa:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13bac:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   13bae:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13bb0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   13bb2:	481f      	ldr	r0, [pc, #124]	; (13c30 <z_log_msg_commit+0x8c>)
   13bb4:	f014 f9a9 	bl	27f0a <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13bb8:	f3bf 8f5b 	dmb	ish
   13bbc:	4b1d      	ldr	r3, [pc, #116]	; (13c34 <z_log_msg_commit+0x90>)
   13bbe:	e853 2f00 	ldrex	r2, [r3]
   13bc2:	1c51      	adds	r1, r2, #1
   13bc4:	e843 1000 	strex	r0, r1, [r3]
   13bc8:	2800      	cmp	r0, #0
   13bca:	d1f8      	bne.n	13bbe <z_log_msg_commit+0x1a>
   13bcc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   13bd0:	4b19      	ldr	r3, [pc, #100]	; (13c38 <z_log_msg_commit+0x94>)
   13bd2:	781b      	ldrb	r3, [r3, #0]
   13bd4:	b17b      	cbz	r3, 13bf6 <z_log_msg_commit+0x52>
   13bd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bda:	f3ef 8411 	mrs	r4, BASEPRI
   13bde:	f383 8812 	msr	BASEPRI_MAX, r3
   13be2:	f3bf 8f6f 	isb	sy
   13be6:	f7ff ff25 	bl	13a34 <z_impl_log_process>
	__asm__ volatile(
   13bea:	f384 8811 	msr	BASEPRI, r4
   13bee:	f3bf 8f6f 	isb	sy
}
   13bf2:	b002      	add	sp, #8
   13bf4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13bf6:	4b11      	ldr	r3, [pc, #68]	; (13c3c <z_log_msg_commit+0x98>)
   13bf8:	681b      	ldr	r3, [r3, #0]
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	d0f9      	beq.n	13bf2 <z_log_msg_commit+0x4e>
		if (cnt == 0) {
   13bfe:	b952      	cbnz	r2, 13c16 <z_log_msg_commit+0x72>
	z_impl_k_timer_start(timer, duration, period);
   13c00:	2200      	movs	r2, #0
   13c02:	2300      	movs	r3, #0
   13c04:	e9cd 2300 	strd	r2, r3, [sp]
   13c08:	480d      	ldr	r0, [pc, #52]	; (13c40 <z_log_msg_commit+0x9c>)
   13c0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13c0e:	2300      	movs	r3, #0
   13c10:	f00e fed6 	bl	229c0 <z_impl_k_timer_start>
   13c14:	e7ed      	b.n	13bf2 <z_log_msg_commit+0x4e>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13c16:	2a0a      	cmp	r2, #10
   13c18:	d1eb      	bne.n	13bf2 <z_log_msg_commit+0x4e>
	z_impl_k_timer_stop(timer);
   13c1a:	4809      	ldr	r0, [pc, #36]	; (13c40 <z_log_msg_commit+0x9c>)
   13c1c:	f018 f85d 	bl	2bcda <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13c20:	4808      	ldr	r0, [pc, #32]	; (13c44 <z_log_msg_commit+0xa0>)
}
   13c22:	b002      	add	sp, #8
   13c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13c28:	f00d bf58 	b.w	21adc <z_impl_k_sem_give>
   13c2c:	200005fc 	.word	0x200005fc
   13c30:	200027ec 	.word	0x200027ec
   13c34:	200027e0 	.word	0x200027e0
   13c38:	20003db2 	.word	0x20003db2
   13c3c:	2000282c 	.word	0x2000282c
   13c40:	20001dc8 	.word	0x20001dc8
   13c44:	20000b74 	.word	0x20000b74

00013c48 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13c48:	4a04      	ldr	r2, [pc, #16]	; (13c5c <log_source_name_get+0x14>)
   13c4a:	4b05      	ldr	r3, [pc, #20]	; (13c60 <log_source_name_get+0x18>)
   13c4c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13c4e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   13c52:	bf34      	ite	cc
   13c54:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13c58:	2000      	movcs	r0, #0
}
   13c5a:	4770      	bx	lr
   13c5c:	0002c76c 	.word	0x0002c76c
   13c60:	0002c894 	.word	0x0002c894

00013c64 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13c64:	4a05      	ldr	r2, [pc, #20]	; (13c7c <log_backend_enable+0x18>)
	backend->cb->id = id;
   13c66:	6843      	ldr	r3, [r0, #4]
   13c68:	1a80      	subs	r0, r0, r2
   13c6a:	1100      	asrs	r0, r0, #4
   13c6c:	3001      	adds	r0, #1
	backend->cb->active = true;
   13c6e:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
   13c70:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
   13c72:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13c74:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   13c76:	f7ff be49 	b.w	1390c <z_log_notify_backend_enabled>
   13c7a:	bf00      	nop
   13c7c:	0002c894 	.word	0x0002c894

00013c80 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   13c84:	f3c1 45cb 	ubfx	r5, r1, #19, #12
   13c88:	f3c1 2649 	ubfx	r6, r1, #9, #10
   13c8c:	b08d      	sub	sp, #52	; 0x34
   13c8e:	4681      	mov	r9, r0
   13c90:	460c      	mov	r4, r1
   13c92:	4690      	mov	r8, r2
   13c94:	469a      	mov	sl, r3
   13c96:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   13c98:	2e00      	cmp	r6, #0
   13c9a:	d03b      	beq.n	13d14 <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
   13c9c:	2302      	movs	r3, #2
   13c9e:	a809      	add	r0, sp, #36	; 0x24
   13ca0:	f04f 0b04 	mov.w	fp, #4
   13ca4:	af07      	add	r7, sp, #28
	struct z_cbprintf_buf_desc buf_desc = {
   13ca6:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   13ca8:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   13caa:	9300      	str	r3, [sp, #0]
   13cac:	f8cd b008 	str.w	fp, [sp, #8]
   13cb0:	4603      	mov	r3, r0
   13cb2:	9701      	str	r7, [sp, #4]
   13cb4:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   13cb6:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   13cba:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   13cbc:	9605      	str	r6, [sp, #20]
   13cbe:	f7fe fef3 	bl	12aa8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   13cc2:	f3c0 0309 	ubfx	r3, r0, #0, #10
   13cc6:	1958      	adds	r0, r3, r5
   13cc8:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13ccc:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   13cce:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13cd0:	f363 2452 	bfi	r4, r3, #9, #10
   13cd4:	9304      	str	r3, [sp, #16]
   13cd6:	f7ff fe93 	bl	13a00 <z_log_msg_alloc>
		if (msg) {
   13cda:	4605      	mov	r5, r0
   13cdc:	b178      	cbz	r0, 13cfe <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
   13cde:	9b04      	ldr	r3, [sp, #16]
   13ce0:	930a      	str	r3, [sp, #40]	; 0x28
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   13ce2:	3010      	adds	r0, #16
   13ce4:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   13ce6:	2302      	movs	r3, #2
	struct z_cbprintf_buf_desc buf_desc = {
   13ce8:	9009      	str	r0, [sp, #36]	; 0x24
   13cea:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   13cec:	9300      	str	r3, [sp, #0]
   13cee:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   13cf2:	4a0c      	ldr	r2, [pc, #48]	; (13d24 <z_impl_z_log_msg_static_create+0xa4>)
   13cf4:	9905      	ldr	r1, [sp, #20]
   13cf6:	ab09      	add	r3, sp, #36	; 0x24
   13cf8:	4640      	mov	r0, r8
   13cfa:	f7fe fed5 	bl	12aa8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   13cfe:	f366 2452 	bfi	r4, r6, #9, #10
   13d02:	4653      	mov	r3, sl
   13d04:	4622      	mov	r2, r4
   13d06:	4649      	mov	r1, r9
   13d08:	4628      	mov	r0, r5
}
   13d0a:	b00d      	add	sp, #52	; 0x34
   13d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   13d10:	f014 b9e6 	b.w	280e0 <z_log_msg_finalize>
   13d14:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13d18:	0880      	lsrs	r0, r0, #2
   13d1a:	f7ff fe71 	bl	13a00 <z_log_msg_alloc>
   13d1e:	4605      	mov	r5, r0
   13d20:	e7ed      	b.n	13cfe <z_impl_z_log_msg_static_create+0x7e>
   13d22:	bf00      	nop
   13d24:	000280b3 	.word	0x000280b3

00013d28 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d2c:	b087      	sub	sp, #28
   13d2e:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
   13d32:	469a      	mov	sl, r3
   13d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13d36:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   13d3a:	9303      	str	r3, [sp, #12]
   13d3c:	4604      	mov	r4, r0
   13d3e:	4689      	mov	r9, r1
   13d40:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
   13d42:	b3cf      	cbz	r7, 13db8 <z_impl_z_log_msg_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13d44:	f8cd b000 	str.w	fp, [sp]
   13d48:	463b      	mov	r3, r7
   13d4a:	462a      	mov	r2, r5
   13d4c:	2110      	movs	r1, #16
   13d4e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13d50:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13d54:	f7fe fc6c 	bl	12630 <cbvprintf_package>
   13d58:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13d5a:	9a03      	ldr	r2, [sp, #12]
   13d5c:	f008 0307 	and.w	r3, r8, #7
   13d60:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13d64:	f102 0017 	add.w	r0, r2, #23
	struct log_msg_desc desc =
   13d68:	4c14      	ldr	r4, [pc, #80]	; (13dbc <z_impl_z_log_msg_runtime_vcreate+0x94>)
   13d6a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   13d6e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13d72:	4430      	add	r0, r6
	struct log_msg_desc desc =
   13d74:	4b12      	ldr	r3, [pc, #72]	; (13dc0 <z_impl_z_log_msg_runtime_vcreate+0x98>)
   13d76:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13d7a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   13d7e:	ea48 0804 	orr.w	r8, r8, r4
   13d82:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   13d86:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13d88:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg_alloc(msg_wlen);
   13d8c:	f7ff fe38 	bl	13a00 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   13d90:	4604      	mov	r4, r0
   13d92:	b140      	cbz	r0, 13da6 <z_impl_z_log_msg_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   13d94:	b13f      	cbz	r7, 13da6 <z_impl_z_log_msg_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13d96:	f8cd b000 	str.w	fp, [sp]
   13d9a:	463b      	mov	r3, r7
   13d9c:	462a      	mov	r2, r5
   13d9e:	4631      	mov	r1, r6
   13da0:	3010      	adds	r0, #16
   13da2:	f7fe fc45 	bl	12630 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13da6:	4653      	mov	r3, sl
   13da8:	4642      	mov	r2, r8
   13daa:	4649      	mov	r1, r9
   13dac:	4620      	mov	r0, r4
	}
}
   13dae:	b007      	add	sp, #28
   13db0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   13db4:	f014 b994 	b.w	280e0 <z_log_msg_finalize>
		plen = 0;
   13db8:	463e      	mov	r6, r7
   13dba:	e7ce      	b.n	13d5a <z_impl_z_log_msg_runtime_vcreate+0x32>
   13dbc:	0007fe00 	.word	0x0007fe00
   13dc0:	7ff80000 	.word	0x7ff80000

00013dc4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13dc4:	b40e      	push	{r1, r2, r3}
   13dc6:	b503      	push	{r0, r1, lr}
   13dc8:	ab03      	add	r3, sp, #12
   13dca:	4601      	mov	r1, r0
   13dcc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13dd0:	4804      	ldr	r0, [pc, #16]	; (13de4 <print_formatted+0x20>)
	va_start(args, fmt);
   13dd2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13dd4:	f014 f9ac 	bl	28130 <cbvprintf>
	va_end(args);

	return length;
}
   13dd8:	b002      	add	sp, #8
   13dda:	f85d eb04 	ldr.w	lr, [sp], #4
   13dde:	b003      	add	sp, #12
   13de0:	4770      	bx	lr
   13de2:	bf00      	nop
   13de4:	00028159 	.word	0x00028159

00013de8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   13de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dec:	b089      	sub	sp, #36	; 0x24
   13dee:	469a      	mov	sl, r3
   13df0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13df4:	9304      	str	r3, [sp, #16]
   13df6:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
   13dfa:	9306      	str	r3, [sp, #24]
   13dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13dfe:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
   13e00:	9b04      	ldr	r3, [sp, #16]
{
   13e02:	9e16      	ldr	r6, [sp, #88]	; 0x58
   13e04:	4604      	mov	r4, r0
   13e06:	460f      	mov	r7, r1
   13e08:	4693      	mov	fp, r2
	if (!raw_string) {
   13e0a:	2b00      	cmp	r3, #0
   13e0c:	f000 8114 	beq.w	14038 <log_output_process+0x250>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13e10:	f006 0308 	and.w	r3, r6, #8
   13e14:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
   13e16:	f014 f94a 	bl	280ae <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13e1a:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
   13e1e:	4602      	mov	r2, r0
   13e20:	2800      	cmp	r0, #0
   13e22:	f000 80b2 	beq.w	13f8a <log_output_process+0x1a2>
		length += print_formatted(output, "%s ", tag);
   13e26:	498a      	ldr	r1, [pc, #552]	; (14050 <log_output_process+0x268>)
   13e28:	4620      	mov	r0, r4
   13e2a:	f7ff ffcb 	bl	13dc4 <print_formatted>
   13e2e:	4681      	mov	r9, r0
	if (stamp) {
   13e30:	b14d      	cbz	r5, 13e46 <log_output_process+0x5e>
	if (!format) {
   13e32:	f016 0f44 	tst.w	r6, #68	; 0x44
   13e36:	f040 80aa 	bne.w	13f8e <log_output_process+0x1a6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13e3a:	4986      	ldr	r1, [pc, #536]	; (14054 <log_output_process+0x26c>)
   13e3c:	463a      	mov	r2, r7
   13e3e:	4620      	mov	r0, r4
   13e40:	f7ff ffc0 	bl	13dc4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13e44:	4481      	add	r9, r0
	if (color) {
   13e46:	f006 0301 	and.w	r3, r6, #1
   13e4a:	b15b      	cbz	r3, 13e64 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   13e4c:	4b82      	ldr	r3, [pc, #520]	; (14058 <log_output_process+0x270>)
   13e4e:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13e50:	4982      	ldr	r1, [pc, #520]	; (1405c <log_output_process+0x274>)
		const char *log_color = start && (colors[level] != NULL) ?
   13e52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   13e56:	4b82      	ldr	r3, [pc, #520]	; (14060 <log_output_process+0x278>)
   13e58:	4620      	mov	r0, r4
   13e5a:	2a00      	cmp	r2, #0
   13e5c:	bf08      	it	eq
   13e5e:	461a      	moveq	r2, r3
   13e60:	f7ff ffb0 	bl	13dc4 <print_formatted>
	if (level_on) {
   13e64:	f006 0308 	and.w	r3, r6, #8
   13e68:	2b00      	cmp	r3, #0
   13e6a:	f000 80bc 	beq.w	13fe6 <log_output_process+0x1fe>
		total += print_formatted(output, "<%s> ", severity[level]);
   13e6e:	4b7d      	ldr	r3, [pc, #500]	; (14064 <log_output_process+0x27c>)
   13e70:	9a04      	ldr	r2, [sp, #16]
   13e72:	497d      	ldr	r1, [pc, #500]	; (14068 <log_output_process+0x280>)
   13e74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13e78:	4620      	mov	r0, r4
   13e7a:	f7ff ffa3 	bl	13dc4 <print_formatted>
   13e7e:	4605      	mov	r5, r0
	if (domain) {
   13e80:	f1bb 0f00 	cmp.w	fp, #0
   13e84:	d005      	beq.n	13e92 <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
   13e86:	4979      	ldr	r1, [pc, #484]	; (1406c <log_output_process+0x284>)
   13e88:	465a      	mov	r2, fp
   13e8a:	4620      	mov	r0, r4
   13e8c:	f7ff ff9a 	bl	13dc4 <print_formatted>
   13e90:	4405      	add	r5, r0
	if (source) {
   13e92:	f1ba 0f00 	cmp.w	sl, #0
   13e96:	d005      	beq.n	13ea4 <log_output_process+0xbc>
		total += print_formatted(output,
   13e98:	4975      	ldr	r1, [pc, #468]	; (14070 <log_output_process+0x288>)
   13e9a:	4652      	mov	r2, sl
   13e9c:	4620      	mov	r0, r4
   13e9e:	f7ff ff91 	bl	13dc4 <print_formatted>
   13ea2:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   13ea4:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
   13ea6:	f1b8 0f00 	cmp.w	r8, #0
   13eaa:	f000 80cd 	beq.w	14048 <log_output_process+0x260>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   13eae:	4871      	ldr	r0, [pc, #452]	; (14074 <log_output_process+0x28c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13eb0:	4971      	ldr	r1, [pc, #452]	; (14078 <log_output_process+0x290>)
   13eb2:	4643      	mov	r3, r8
   13eb4:	4622      	mov	r2, r4
   13eb6:	f013 fb3f 	bl	27538 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   13eba:	9b05      	ldr	r3, [sp, #20]
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	d04c      	beq.n	13f5a <log_output_process+0x172>
		print_formatted(output, " ");
   13ec0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 1407c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13ec4:	9f05      	ldr	r7, [sp, #20]
   13ec6:	2f10      	cmp	r7, #16
   13ec8:	bf28      	it	cs
   13eca:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13ecc:	06f3      	lsls	r3, r6, #27
   13ece:	d406      	bmi.n	13ede <log_output_process+0xf6>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13ed0:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
   13ed2:	bf4c      	ite	mi
   13ed4:	496a      	ldrmi	r1, [pc, #424]	; (14080 <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
   13ed6:	496b      	ldrpl	r1, [pc, #428]	; (14084 <log_output_process+0x29c>)
   13ed8:	4620      	mov	r0, r4
   13eda:	f7ff ff73 	bl	13dc4 <print_formatted>
		prefix_offset = 0;
   13ede:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
   13ee2:	4555      	cmp	r5, sl
   13ee4:	f300 8085 	bgt.w	13ff2 <log_output_process+0x20a>
			print_formatted(output, "   ");
   13ee8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 14088 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   13eec:	f8df b19c 	ldr.w	fp, [pc, #412]	; 1408c <log_output_process+0x2a4>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13ef0:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   13ef4:	45b9      	cmp	r9, r7
   13ef6:	f080 808c 	bcs.w	14012 <log_output_process+0x22a>
			print_formatted(output, "%02x ", data[i]);
   13efa:	9b06      	ldr	r3, [sp, #24]
   13efc:	4659      	mov	r1, fp
   13efe:	f813 2009 	ldrb.w	r2, [r3, r9]
   13f02:	4620      	mov	r0, r4
   13f04:	f7ff ff5e 	bl	13dc4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f08:	f109 0901 	add.w	r9, r9, #1
   13f0c:	f1b9 0f10 	cmp.w	r9, #16
   13f10:	d176      	bne.n	14000 <log_output_process+0x218>
	print_formatted(output, "|");
   13f12:	495f      	ldr	r1, [pc, #380]	; (14090 <log_output_process+0x2a8>)
			print_formatted(output, "%c",
   13f14:	f8df a17c 	ldr.w	sl, [pc, #380]	; 14094 <log_output_process+0x2ac>
	print_formatted(output, "|");
   13f18:	4620      	mov	r0, r4
   13f1a:	f7ff ff53 	bl	13dc4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f1e:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   13f22:	455f      	cmp	r7, fp
   13f24:	f240 8083 	bls.w	1402e <log_output_process+0x246>
			char c = (char)data[i];
   13f28:	9b06      	ldr	r3, [sp, #24]
   13f2a:	f813 200b 	ldrb.w	r2, [r3, fp]
			print_formatted(output, "%c",
   13f2e:	4b5a      	ldr	r3, [pc, #360]	; (14098 <log_output_process+0x2b0>)
   13f30:	5cd3      	ldrb	r3, [r2, r3]
   13f32:	f013 0f97 	tst.w	r3, #151	; 0x97
   13f36:	bf08      	it	eq
   13f38:	222e      	moveq	r2, #46	; 0x2e
   13f3a:	4651      	mov	r1, sl
   13f3c:	4620      	mov	r0, r4
   13f3e:	f7ff ff41 	bl	13dc4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f42:	f10b 0b01 	add.w	fp, fp, #1
   13f46:	f1bb 0f10 	cmp.w	fp, #16
   13f4a:	d167      	bne.n	1401c <log_output_process+0x234>
		data += length;
   13f4c:	9b06      	ldr	r3, [sp, #24]
   13f4e:	443b      	add	r3, r7
   13f50:	9306      	str	r3, [sp, #24]
	} while (len);
   13f52:	9b05      	ldr	r3, [sp, #20]
   13f54:	1bdb      	subs	r3, r3, r7
   13f56:	9305      	str	r3, [sp, #20]
   13f58:	d1b4      	bne.n	13ec4 <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13f5a:	9b04      	ldr	r3, [sp, #16]
   13f5c:	b17b      	cbz	r3, 13f7e <log_output_process+0x196>
	if (color) {
   13f5e:	07f1      	lsls	r1, r6, #31
   13f60:	d504      	bpl.n	13f6c <log_output_process+0x184>
		print_formatted(output, "%s", log_color);
   13f62:	4a3f      	ldr	r2, [pc, #252]	; (14060 <log_output_process+0x278>)
   13f64:	493d      	ldr	r1, [pc, #244]	; (1405c <log_output_process+0x274>)
   13f66:	4620      	mov	r0, r4
   13f68:	f7ff ff2c 	bl	13dc4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13f6c:	06f2      	lsls	r2, r6, #27
   13f6e:	d406      	bmi.n	13f7e <log_output_process+0x196>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13f70:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\n");
   13f72:	bf4c      	ite	mi
   13f74:	4942      	ldrmi	r1, [pc, #264]	; (14080 <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
   13f76:	4943      	ldrpl	r1, [pc, #268]	; (14084 <log_output_process+0x29c>)
   13f78:	4620      	mov	r0, r4
   13f7a:	f7ff ff23 	bl	13dc4 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13f7e:	4620      	mov	r0, r4
}
   13f80:	b009      	add	sp, #36	; 0x24
   13f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13f86:	f014 b8da 	b.w	2813e <log_output_flush>
	uint32_t length = 0U;
   13f8a:	4681      	mov	r9, r0
   13f8c:	e750      	b.n	13e30 <log_output_process+0x48>
	} else if (freq != 0U) {
   13f8e:	4b43      	ldr	r3, [pc, #268]	; (1409c <log_output_process+0x2b4>)
   13f90:	6818      	ldr	r0, [r3, #0]
   13f92:	2800      	cmp	r0, #0
   13f94:	f43f af56 	beq.w	13e44 <log_output_process+0x5c>
		timestamp /= timestamp_div;
   13f98:	4b41      	ldr	r3, [pc, #260]	; (140a0 <log_output_process+0x2b8>)
		ms = (remainder * 1000U) / freq;
   13f9a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13f9e:	6819      	ldr	r1, [r3, #0]
   13fa0:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   13fa4:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   13fa8:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   13fac:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
   13fb0:	fb0e f707 	mul.w	r7, lr, r7
   13fb4:	fbb1 f2f5 	udiv	r2, r1, r5
   13fb8:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
   13fbc:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13fbe:	fbb7 fcf0 	udiv	ip, r7, r0
		mins = seconds / 60U;
   13fc2:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13fc6:	fb00 771c 	mls	r7, r0, ip, r7
				length = print_formatted(output,
   13fca:	fb01 5113 	mls	r1, r1, r3, r5
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13fce:	fb0e f707 	mul.w	r7, lr, r7
				length = print_formatted(output,
   13fd2:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13fd4:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
   13fd8:	4932      	ldr	r1, [pc, #200]	; (140a4 <log_output_process+0x2bc>)
   13fda:	e9cd c701 	strd	ip, r7, [sp, #4]
   13fde:	4620      	mov	r0, r4
   13fe0:	f7ff fef0 	bl	13dc4 <print_formatted>
   13fe4:	e72e      	b.n	13e44 <log_output_process+0x5c>
	int total = 0;
   13fe6:	f006 0508 	and.w	r5, r6, #8
   13fea:	e749      	b.n	13e80 <log_output_process+0x98>
		prefix_offset = 0;
   13fec:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   13fee:	482e      	ldr	r0, [pc, #184]	; (140a8 <log_output_process+0x2c0>)
   13ff0:	e75e      	b.n	13eb0 <log_output_process+0xc8>
		print_formatted(output, " ");
   13ff2:	4641      	mov	r1, r8
   13ff4:	4620      	mov	r0, r4
   13ff6:	f7ff fee5 	bl	13dc4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13ffa:	f10a 0a01 	add.w	sl, sl, #1
   13ffe:	e770      	b.n	13ee2 <log_output_process+0xfa>
		if (i > 0 && !(i % 8)) {
   14000:	f019 0f07 	tst.w	r9, #7
   14004:	f47f af76 	bne.w	13ef4 <log_output_process+0x10c>
			print_formatted(output, " ");
   14008:	4641      	mov	r1, r8
   1400a:	4620      	mov	r0, r4
   1400c:	f7ff feda 	bl	13dc4 <print_formatted>
   14010:	e770      	b.n	13ef4 <log_output_process+0x10c>
			print_formatted(output, "   ");
   14012:	4651      	mov	r1, sl
   14014:	4620      	mov	r0, r4
   14016:	f7ff fed5 	bl	13dc4 <print_formatted>
   1401a:	e775      	b.n	13f08 <log_output_process+0x120>
		if (i > 0 && !(i % 8)) {
   1401c:	f01b 0f07 	tst.w	fp, #7
   14020:	f47f af7f 	bne.w	13f22 <log_output_process+0x13a>
			print_formatted(output, " ");
   14024:	4641      	mov	r1, r8
   14026:	4620      	mov	r0, r4
   14028:	f7ff fecc 	bl	13dc4 <print_formatted>
   1402c:	e779      	b.n	13f22 <log_output_process+0x13a>
			print_formatted(output, " ");
   1402e:	4641      	mov	r1, r8
   14030:	4620      	mov	r0, r4
   14032:	f7ff fec7 	bl	13dc4 <print_formatted>
   14036:	e784      	b.n	13f42 <log_output_process+0x15a>
	if (package) {
   14038:	f1b8 0f00 	cmp.w	r8, #0
   1403c:	d1d6      	bne.n	13fec <log_output_process+0x204>
	if (data_len) {
   1403e:	9b05      	ldr	r3, [sp, #20]
   14040:	2b00      	cmp	r3, #0
   14042:	d09c      	beq.n	13f7e <log_output_process+0x196>
		prefix_offset = 0;
   14044:	9d04      	ldr	r5, [sp, #16]
   14046:	e73b      	b.n	13ec0 <log_output_process+0xd8>
	if (data_len) {
   14048:	9b05      	ldr	r3, [sp, #20]
   1404a:	2b00      	cmp	r3, #0
   1404c:	d087      	beq.n	13f5e <log_output_process+0x176>
   1404e:	e737      	b.n	13ec0 <log_output_process+0xd8>
   14050:	0002d910 	.word	0x0002d910
   14054:	0002d914 	.word	0x0002d914
   14058:	0002cc54 	.word	0x0002cc54
   1405c:	0002e786 	.word	0x0002e786
   14060:	0002d90b 	.word	0x0002d90b
   14064:	0002cc68 	.word	0x0002cc68
   14068:	0002d939 	.word	0x0002d939
   1406c:	0002d93f 	.word	0x0002d93f
   14070:	0002d943 	.word	0x0002d943
   14074:	00028159 	.word	0x00028159
   14078:	00028131 	.word	0x00028131
   1407c:	0002d953 	.word	0x0002d953
   14080:	0002d804 	.word	0x0002d804
   14084:	0002d948 	.word	0x0002d948
   14088:	0002d951 	.word	0x0002d951
   1408c:	0002d94b 	.word	0x0002d94b
   14090:	0002d955 	.word	0x0002d955
   14094:	0002d957 	.word	0x0002d957
   14098:	0002ffae 	.word	0x0002ffae
   1409c:	20002830 	.word	0x20002830
   140a0:	20002834 	.word	0x20002834
   140a4:	0002d91d 	.word	0x0002d91d
   140a8:	0002818f 	.word	0x0002818f

000140ac <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   140ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   140b0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
   140b2:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   140b4:	688e      	ldr	r6, [r1, #8]
   140b6:	b086      	sub	sp, #24
   140b8:	4605      	mov	r5, r0
   140ba:	460c      	mov	r4, r1
   140bc:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   140be:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
   140c2:	b15b      	cbz	r3, 140dc <log_output_msg_process+0x30>
   140c4:	4913      	ldr	r1, [pc, #76]	; (14114 <log_output_msg_process+0x68>)
   140c6:	1a5b      	subs	r3, r3, r1
   140c8:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   140cc:	2900      	cmp	r1, #0
   140ce:	db1f      	blt.n	14110 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   140d0:	7820      	ldrb	r0, [r4, #0]
   140d2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   140d6:	f7ff fdb7 	bl	13c48 <log_source_name_get>
   140da:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   140dc:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   140de:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   140e0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   140e4:	9700      	str	r7, [sp, #0]
   140e6:	f3c2 2249 	ubfx	r2, r2, #9, #10
   140ea:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   140ec:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   140f0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   140f4:	bf08      	it	eq
   140f6:	2100      	moveq	r1, #0
   140f8:	e9cd 0803 	strd	r0, r8, [sp, #12]
   140fc:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14100:	2200      	movs	r2, #0
   14102:	4631      	mov	r1, r6
   14104:	4628      	mov	r0, r5
   14106:	f7ff fe6f 	bl	13de8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1410a:	b006      	add	sp, #24
   1410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14110:	2300      	movs	r3, #0
   14112:	e7e3      	b.n	140dc <log_output_msg_process+0x30>
   14114:	0002c76c 	.word	0x0002c76c

00014118 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   14118:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1411a:	f242 730f 	movw	r3, #9999	; 0x270f
   1411e:	428b      	cmp	r3, r1
   14120:	bf28      	it	cs
   14122:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   14124:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14126:	4a0f      	ldr	r2, [pc, #60]	; (14164 <log_output_dropped_process+0x4c>)
{
   14128:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1412a:	2105      	movs	r1, #5
   1412c:	4668      	mov	r0, sp
   1412e:	f013 faf2 	bl	27716 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14132:	6863      	ldr	r3, [r4, #4]
   14134:	490c      	ldr	r1, [pc, #48]	; (14168 <log_output_dropped_process+0x50>)
   14136:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14138:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1413a:	220b      	movs	r2, #11
   1413c:	4628      	mov	r0, r5
   1413e:	f013 ffea 	bl	28116 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   14142:	6863      	ldr	r3, [r4, #4]
   14144:	4632      	mov	r2, r6
   14146:	4669      	mov	r1, sp
   14148:	4628      	mov	r0, r5
   1414a:	685b      	ldr	r3, [r3, #4]
   1414c:	f013 ffe3 	bl	28116 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14150:	6863      	ldr	r3, [r4, #4]
   14152:	4906      	ldr	r1, [pc, #24]	; (1416c <log_output_dropped_process+0x54>)
   14154:	685b      	ldr	r3, [r3, #4]
   14156:	221b      	movs	r2, #27
   14158:	4628      	mov	r0, r5
   1415a:	f013 ffdc 	bl	28116 <buffer_write>
		     output->control_block->ctx);
}
   1415e:	b002      	add	sp, #8
   14160:	bd70      	pop	{r4, r5, r6, pc}
   14162:	bf00      	nop
   14164:	0002fe23 	.word	0x0002fe23
   14168:	0002d996 	.word	0x0002d996
   1416c:	0002d97a 	.word	0x0002d97a

00014170 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   14170:	4a08      	ldr	r2, [pc, #32]	; (14194 <log_output_timestamp_freq_set+0x24>)
{
   14172:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   14174:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14176:	4c08      	ldr	r4, [pc, #32]	; (14198 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   14178:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1417a:	2100      	movs	r1, #0
   1417c:	42a0      	cmp	r0, r4
   1417e:	d804      	bhi.n	1418a <log_output_timestamp_freq_set+0x1a>
   14180:	b101      	cbz	r1, 14184 <log_output_timestamp_freq_set+0x14>
   14182:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   14184:	4b05      	ldr	r3, [pc, #20]	; (1419c <log_output_timestamp_freq_set+0x2c>)
   14186:	6018      	str	r0, [r3, #0]
}
   14188:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1418a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1418c:	005b      	lsls	r3, r3, #1
   1418e:	2101      	movs	r1, #1
   14190:	e7f4      	b.n	1417c <log_output_timestamp_freq_set+0xc>
   14192:	bf00      	nop
   14194:	20002834 	.word	0x20002834
   14198:	000f4240 	.word	0x000f4240
   1419c:	20002830 	.word	0x20002830

000141a0 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   141a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   141a2:	4f07      	ldr	r7, [pc, #28]	; (141c0 <char_out+0x20>)
{
   141a4:	460d      	mov	r5, r1
   141a6:	4604      	mov	r4, r0
   141a8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   141aa:	42b4      	cmp	r4, r6
   141ac:	d101      	bne.n	141b2 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   141ae:	4628      	mov	r0, r5
   141b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   141b2:	6838      	ldr	r0, [r7, #0]
   141b4:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   141b8:	6883      	ldr	r3, [r0, #8]
   141ba:	685b      	ldr	r3, [r3, #4]
   141bc:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   141be:	e7f4      	b.n	141aa <char_out+0xa>
   141c0:	20002850 	.word	0x20002850

000141c4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   141c4:	4b01      	ldr	r3, [pc, #4]	; (141cc <format_set+0x8>)
	return 0;
}
   141c6:	2000      	movs	r0, #0
	log_format_current = log_type;
   141c8:	6019      	str	r1, [r3, #0]
}
   141ca:	4770      	bx	lr
   141cc:	20002840 	.word	0x20002840

000141d0 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   141d0:	4b01      	ldr	r3, [pc, #4]	; (141d8 <log_backend_uart_init+0x8>)
   141d2:	4a02      	ldr	r2, [pc, #8]	; (141dc <log_backend_uart_init+0xc>)
   141d4:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   141d6:	4770      	bx	lr
   141d8:	20002850 	.word	0x20002850
   141dc:	0002c4d4 	.word	0x0002c4d4

000141e0 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   141e0:	4b02      	ldr	r3, [pc, #8]	; (141ec <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   141e2:	4803      	ldr	r0, [pc, #12]	; (141f0 <panic+0x10>)
   141e4:	2201      	movs	r2, #1
   141e6:	701a      	strb	r2, [r3, #0]
   141e8:	f013 bfa9 	b.w	2813e <log_output_flush>
   141ec:	20003db3 	.word	0x20003db3
   141f0:	0002cc98 	.word	0x0002cc98

000141f4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   141f4:	4801      	ldr	r0, [pc, #4]	; (141fc <dropped+0x8>)
   141f6:	f7ff bf8f 	b.w	14118 <log_output_dropped_process>
   141fa:	bf00      	nop
   141fc:	0002cc98 	.word	0x0002cc98

00014200 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14200:	4b06      	ldr	r3, [pc, #24]	; (1421c <process+0x1c>)
{
   14202:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14204:	6818      	ldr	r0, [r3, #0]
{
   14206:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14208:	f7ff fb7a 	bl	13900 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1420c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1420e:	4603      	mov	r3, r0
}
   14210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   14214:	4802      	ldr	r0, [pc, #8]	; (14220 <process+0x20>)
   14216:	220f      	movs	r2, #15
   14218:	4718      	bx	r3
   1421a:	bf00      	nop
   1421c:	20002840 	.word	0x20002840
   14220:	0002cc98 	.word	0x0002cc98

00014224 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14224:	4b01      	ldr	r3, [pc, #4]	; (1422c <log_backend_rtt_init+0x8>)
   14226:	2201      	movs	r2, #1
   14228:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1422a:	4770      	bx	lr
   1422c:	20003dc5 	.word	0x20003dc5

00014230 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14230:	4b01      	ldr	r3, [pc, #4]	; (14238 <format_set+0x8>)
	return 0;
}
   14232:	2000      	movs	r0, #0
	log_format_current = log_type;
   14234:	6019      	str	r1, [r3, #0]
}
   14236:	4770      	bx	lr
   14238:	2000285c 	.word	0x2000285c

0001423c <panic>:
	panic_mode = true;
   1423c:	4b02      	ldr	r3, [pc, #8]	; (14248 <panic+0xc>)
	log_output_flush(output);
   1423e:	4803      	ldr	r0, [pc, #12]	; (1424c <panic+0x10>)
   14240:	2201      	movs	r2, #1
   14242:	701a      	strb	r2, [r3, #0]
   14244:	f013 bf7b 	b.w	2813e <log_output_flush>
   14248:	20003dc6 	.word	0x20003dc6
   1424c:	0002ccc4 	.word	0x0002ccc4

00014250 <dropped>:
	log_output_dropped_process(output, cnt);
   14250:	4801      	ldr	r0, [pc, #4]	; (14258 <dropped+0x8>)
   14252:	f7ff bf61 	b.w	14118 <log_output_dropped_process>
   14256:	bf00      	nop
   14258:	0002ccc4 	.word	0x0002ccc4

0001425c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1425c:	4b06      	ldr	r3, [pc, #24]	; (14278 <process+0x1c>)
{
   1425e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14260:	6818      	ldr	r0, [r3, #0]
{
   14262:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14264:	f7ff fb4c 	bl	13900 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14268:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1426a:	4603      	mov	r3, r0
}
   1426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   14270:	4802      	ldr	r0, [pc, #8]	; (1427c <process+0x20>)
   14272:	220f      	movs	r2, #15
   14274:	4718      	bx	r3
   14276:	bf00      	nop
   14278:	2000285c 	.word	0x2000285c
   1427c:	0002ccc4 	.word	0x0002ccc4

00014280 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14280:	4b05      	ldr	r3, [pc, #20]	; (14298 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	b11b      	cbz	r3, 1428e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   14286:	f241 3088 	movw	r0, #5000	; 0x1388
   1428a:	f017 bceb 	b.w	2bc64 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1428e:	20a4      	movs	r0, #164	; 0xa4
   14290:	2100      	movs	r1, #0
   14292:	f00e b92b 	b.w	224ec <z_impl_k_sleep>
   14296:	bf00      	nop
   14298:	20003dc6 	.word	0x20003dc6

0001429c <data_out_block_mode>:
{
   1429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   142a0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 14320 <data_out_block_mode+0x84>
   142a4:	4d1f      	ldr	r5, [pc, #124]	; (14324 <data_out_block_mode+0x88>)
{
   142a6:	4680      	mov	r8, r0
   142a8:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   142aa:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   142ac:	f899 6000 	ldrb.w	r6, [r9]
   142b0:	b996      	cbnz	r6, 142d8 <data_out_block_mode+0x3c>
			RTT_LOCK();
   142b2:	f00d f87f 	bl	213b4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   142b6:	4630      	mov	r0, r6
   142b8:	463a      	mov	r2, r7
   142ba:	4641      	mov	r1, r8
   142bc:	f00c fff4 	bl	212a8 <SEGGER_RTT_WriteSkipNoLock>
   142c0:	4606      	mov	r6, r0
			RTT_UNLOCK();
   142c2:	f00d f881 	bl	213c8 <zephyr_rtt_mutex_unlock>
		if (ret) {
   142c6:	b1fe      	cbz	r6, 14308 <data_out_block_mode+0x6c>
	host_present = true;
   142c8:	2301      	movs	r3, #1
   142ca:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   142cc:	f899 3000 	ldrb.w	r3, [r9]
   142d0:	b96b      	cbnz	r3, 142ee <data_out_block_mode+0x52>
}
   142d2:	4638      	mov	r0, r7
   142d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   142d8:	463a      	mov	r2, r7
   142da:	4641      	mov	r1, r8
   142dc:	2000      	movs	r0, #0
   142de:	f00c ffe3 	bl	212a8 <SEGGER_RTT_WriteSkipNoLock>
   142e2:	4606      	mov	r6, r0
   142e4:	e7ef      	b.n	142c6 <data_out_block_mode+0x2a>
	if (retry_cnt == 0) {
   142e6:	b95c      	cbnz	r4, 14300 <data_out_block_mode+0x64>
		host_present = false;
   142e8:	702c      	strb	r4, [r5, #0]
   142ea:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   142ee:	2000      	movs	r0, #0
   142f0:	f00d f856 	bl	213a0 <SEGGER_RTT_HasDataUp>
   142f4:	2800      	cmp	r0, #0
   142f6:	d0ec      	beq.n	142d2 <data_out_block_mode+0x36>
   142f8:	782b      	ldrb	r3, [r5, #0]
   142fa:	2b00      	cmp	r3, #0
   142fc:	d1f3      	bne.n	142e6 <data_out_block_mode+0x4a>
   142fe:	e7e8      	b.n	142d2 <data_out_block_mode+0x36>
			on_failed_write(retry_cnt--);
   14300:	3c01      	subs	r4, #1
   14302:	f7ff ffbd 	bl	14280 <on_failed_write.part.0>
   14306:	e7f2      	b.n	142ee <data_out_block_mode+0x52>
		} else if (host_present) {
   14308:	782b      	ldrb	r3, [r5, #0]
   1430a:	b113      	cbz	r3, 14312 <data_out_block_mode+0x76>
	if (retry_cnt == 0) {
   1430c:	3c01      	subs	r4, #1
   1430e:	d104      	bne.n	1431a <data_out_block_mode+0x7e>
		host_present = false;
   14310:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   14312:	782b      	ldrb	r3, [r5, #0]
   14314:	2b00      	cmp	r3, #0
   14316:	d1c9      	bne.n	142ac <data_out_block_mode+0x10>
   14318:	e7db      	b.n	142d2 <data_out_block_mode+0x36>
   1431a:	f7ff ffb1 	bl	14280 <on_failed_write.part.0>
   1431e:	e7f8      	b.n	14312 <data_out_block_mode+0x76>
   14320:	20003dc6 	.word	0x20003dc6
   14324:	20003dc5 	.word	0x20003dc5

00014328 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   14328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   1432a:	2407      	movs	r4, #7
   1432c:	9402      	str	r4, [sp, #8]
   1432e:	4c04      	ldr	r4, [pc, #16]	; (14340 <read_pnp_id+0x18>)
   14330:	9401      	str	r4, [sp, #4]
   14332:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   14336:	9400      	str	r4, [sp, #0]
   14338:	f015 fd82 	bl	29e40 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   1433c:	b004      	add	sp, #16
   1433e:	bd10      	pop	{r4, pc}
   14340:	20000a24 	.word	0x20000a24

00014344 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   14344:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   14346:	4c08      	ldr	r4, [pc, #32]	; (14368 <read_blvl+0x24>)
{
   14348:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   1434a:	7824      	ldrb	r4, [r4, #0]
   1434c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   14350:	2401      	movs	r4, #1
   14352:	9402      	str	r4, [sp, #8]
   14354:	f10d 0417 	add.w	r4, sp, #23
   14358:	9401      	str	r4, [sp, #4]
   1435a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1435e:	9400      	str	r4, [sp, #0]
   14360:	f015 fd6e 	bl	29e40 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   14364:	b006      	add	sp, #24
   14366:	bd10      	pop	{r4, pc}
   14368:	20000a2b 	.word	0x20000a2b

0001436c <blvl_ccc_cfg_changed>:
{
   1436c:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   1436e:	4a0c      	ldr	r2, [pc, #48]	; (143a0 <blvl_ccc_cfg_changed+0x34>)
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <blvl_ccc_cfg_changed+0x38>)
{
   14372:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   14374:	b088      	sub	sp, #32
   14376:	2901      	cmp	r1, #1
   14378:	bf18      	it	ne
   1437a:	4613      	movne	r3, r2
   1437c:	466a      	mov	r2, sp
   1437e:	490a      	ldr	r1, [pc, #40]	; (143a8 <blvl_ccc_cfg_changed+0x3c>)
   14380:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14384:	2302      	movs	r3, #2
   14386:	7713      	strb	r3, [r2, #28]
   14388:	4b08      	ldr	r3, [pc, #32]	; (143ac <blvl_ccc_cfg_changed+0x40>)
   1438a:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1438e:	4808      	ldr	r0, [pc, #32]	; (143b0 <blvl_ccc_cfg_changed+0x44>)
   14390:	2300      	movs	r3, #0
   14392:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   14396:	f7ff fc73 	bl	13c80 <z_impl_z_log_msg_static_create>
}
   1439a:	46bd      	mov	sp, r7
   1439c:	bd80      	pop	{r7, pc}
   1439e:	bf00      	nop
   143a0:	0002d9f6 	.word	0x0002d9f6
   143a4:	0002d9ee 	.word	0x0002d9ee
   143a8:	0002d9ff 	.word	0x0002d9ff
   143ac:	01000003 	.word	0x01000003
   143b0:	0002c76c 	.word	0x0002c76c

000143b4 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   143b4:	4b02      	ldr	r3, [pc, #8]	; (143c0 <hrs_init+0xc>)
   143b6:	2201      	movs	r2, #1
   143b8:	701a      	strb	r2, [r3, #0]

	return 0;
}
   143ba:	2000      	movs	r0, #0
   143bc:	4770      	bx	lr
   143be:	bf00      	nop
   143c0:	20003dc7 	.word	0x20003dc7

000143c4 <read_blsc>:
{
   143c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   143c6:	2401      	movs	r4, #1
   143c8:	9402      	str	r4, [sp, #8]
   143ca:	4c04      	ldr	r4, [pc, #16]	; (143dc <read_blsc+0x18>)
   143cc:	9401      	str	r4, [sp, #4]
   143ce:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   143d2:	9400      	str	r4, [sp, #0]
   143d4:	f015 fd34 	bl	29e40 <bt_gatt_attr_read>
}
   143d8:	b004      	add	sp, #16
   143da:	bd10      	pop	{r4, pc}
   143dc:	20003dc7 	.word	0x20003dc7

000143e0 <hrmc_ccc_cfg_changed>:
{
   143e0:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   143e2:	4a0c      	ldr	r2, [pc, #48]	; (14414 <hrmc_ccc_cfg_changed+0x34>)
   143e4:	4b0c      	ldr	r3, [pc, #48]	; (14418 <hrmc_ccc_cfg_changed+0x38>)
{
   143e6:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   143e8:	b088      	sub	sp, #32
   143ea:	2901      	cmp	r1, #1
   143ec:	bf18      	it	ne
   143ee:	4613      	movne	r3, r2
   143f0:	466a      	mov	r2, sp
   143f2:	490a      	ldr	r1, [pc, #40]	; (1441c <hrmc_ccc_cfg_changed+0x3c>)
   143f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   143f8:	2302      	movs	r3, #2
   143fa:	7713      	strb	r3, [r2, #28]
   143fc:	4b08      	ldr	r3, [pc, #32]	; (14420 <hrmc_ccc_cfg_changed+0x40>)
   143fe:	f842 3f10 	str.w	r3, [r2, #16]!
   14402:	4808      	ldr	r0, [pc, #32]	; (14424 <hrmc_ccc_cfg_changed+0x44>)
   14404:	2300      	movs	r3, #0
   14406:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   1440a:	f7ff fc39 	bl	13c80 <z_impl_z_log_msg_static_create>
}
   1440e:	46bd      	mov	sp, r7
   14410:	bd80      	pop	{r7, pc}
   14412:	bf00      	nop
   14414:	0002d9f6 	.word	0x0002d9f6
   14418:	0002d9ee 	.word	0x0002d9ee
   1441c:	0002da18 	.word	0x0002da18
   14420:	01000003 	.word	0x01000003
   14424:	0002c814 	.word	0x0002c814

00014428 <set_alert_level>:

static struct alerting_device devices[CONFIG_BT_MAX_CONN];
static enum bt_ias_alert_lvl curr_lvl;

static void set_alert_level(void)
{
   14428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum bt_ias_alert_lvl alert_level;

	alert_level = devices[0].alert_level;
   1442a:	4b12      	ldr	r3, [pc, #72]	; (14474 <set_alert_level+0x4c>)
		if (alert_level < devices[i].alert_level) {
			alert_level = devices[i].alert_level;
		}
	}

	if (curr_lvl == alert_level) {
   1442c:	4f12      	ldr	r7, [pc, #72]	; (14478 <set_alert_level+0x50>)
	alert_level = devices[0].alert_level;
   1442e:	781c      	ldrb	r4, [r3, #0]
	if (curr_lvl == alert_level) {
   14430:	783b      	ldrb	r3, [r7, #0]
   14432:	42a3      	cmp	r3, r4
   14434:	d00b      	beq.n	1444e <set_alert_level+0x26>
		return;
	}

	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   14436:	2c02      	cmp	r4, #2
   14438:	4e10      	ldr	r6, [pc, #64]	; (1447c <set_alert_level+0x54>)
   1443a:	d109      	bne.n	14450 <set_alert_level+0x28>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1443c:	4d10      	ldr	r5, [pc, #64]	; (14480 <set_alert_level+0x58>)
   1443e:	e003      	b.n	14448 <set_alert_level+0x20>
			if (cb->high_alert) {
   14440:	68ab      	ldr	r3, [r5, #8]
   14442:	b103      	cbz	r3, 14446 <set_alert_level+0x1e>
				cb->high_alert();
   14444:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14446:	350c      	adds	r5, #12
   14448:	42b5      	cmp	r5, r6
   1444a:	d3f9      	bcc.n	14440 <set_alert_level+0x18>
				cb->no_alert();
			}
		}
		LOG_DBG("No alert");
	}
	curr_lvl = alert_level;
   1444c:	703c      	strb	r4, [r7, #0]
}
   1444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   14450:	2c01      	cmp	r4, #1
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14452:	4d0b      	ldr	r5, [pc, #44]	; (14480 <set_alert_level+0x58>)
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   14454:	d00a      	beq.n	1446c <set_alert_level+0x44>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14456:	42b5      	cmp	r5, r6
   14458:	d2f8      	bcs.n	1444c <set_alert_level+0x24>
			if (cb->no_alert) {
   1445a:	682b      	ldr	r3, [r5, #0]
   1445c:	b103      	cbz	r3, 14460 <set_alert_level+0x38>
				cb->no_alert();
   1445e:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14460:	350c      	adds	r5, #12
   14462:	e7f8      	b.n	14456 <set_alert_level+0x2e>
			if (cb->mild_alert) {
   14464:	686b      	ldr	r3, [r5, #4]
   14466:	b103      	cbz	r3, 1446a <set_alert_level+0x42>
				cb->mild_alert();
   14468:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1446a:	350c      	adds	r5, #12
   1446c:	42b5      	cmp	r5, r6
   1446e:	d3f9      	bcc.n	14464 <set_alert_level+0x3c>
   14470:	e7ec      	b.n	1444c <set_alert_level+0x24>
   14472:	bf00      	nop
   14474:	20003dc9 	.word	0x20003dc9
   14478:	20003dc8 	.word	0x20003dc8
   1447c:	0002c76c 	.word	0x0002c76c
   14480:	0002c76c 	.word	0x0002c76c

00014484 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   14484:	b508      	push	{r3, lr}
	devices[bt_conn_index(conn)].alert_level = BT_IAS_ALERT_LVL_NO_ALERT;
   14486:	f004 f871 	bl	1856c <bt_conn_index>
   1448a:	4b03      	ldr	r3, [pc, #12]	; (14498 <disconnected+0x14>)
   1448c:	2200      	movs	r2, #0
   1448e:	541a      	strb	r2, [r3, r0]
	set_alert_level();
}
   14490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_alert_level();
   14494:	f7ff bfc8 	b.w	14428 <set_alert_level>
   14498:	20003dc9 	.word	0x20003dc9

0001449c <bt_ias_write_alert_lvl>:
	return 0;
}

static ssize_t bt_ias_write_alert_lvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
				      const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   1449c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1449e:	461c      	mov	r4, r3
   144a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   144a4:	4606      	mov	r6, r0
   144a6:	4611      	mov	r1, r2
	struct net_buf_simple data;
	enum bt_ias_alert_lvl alert_val;

	if (offset > 0) {
   144a8:	b9ab      	cbnz	r3, 144d6 <bt_ias_write_alert_lvl+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (len != BT_IAS_ALERT_LVL_LEN) {
   144aa:	2c01      	cmp	r4, #1
   144ac:	d116      	bne.n	144dc <bt_ias_write_alert_lvl+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	net_buf_simple_init_with_data(&data, (void *)buf, len);
   144ae:	4622      	mov	r2, r4
   144b0:	a801      	add	r0, sp, #4
   144b2:	f016 fa91 	bl	2a9d8 <net_buf_simple_init_with_data>
	alert_val = net_buf_simple_pull_u8(&data);
   144b6:	a801      	add	r0, sp, #4
   144b8:	f016 fb43 	bl	2ab42 <net_buf_simple_pull_u8>
   144bc:	4605      	mov	r5, r0
	devices[bt_conn_index(conn)].alert_level = alert_val;
   144be:	4630      	mov	r0, r6
   144c0:	f004 f854 	bl	1856c <bt_conn_index>
   144c4:	4b08      	ldr	r3, [pc, #32]	; (144e8 <bt_ias_write_alert_lvl+0x4c>)

	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   144c6:	2d02      	cmp	r5, #2
	devices[bt_conn_index(conn)].alert_level = alert_val;
   144c8:	541d      	strb	r5, [r3, r0]
	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   144ca:	d80a      	bhi.n	144e2 <bt_ias_write_alert_lvl+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}
	set_alert_level();
   144cc:	f7ff ffac 	bl	14428 <set_alert_level>

	return len;
   144d0:	4620      	mov	r0, r4
}
   144d2:	b004      	add	sp, #16
   144d4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   144d6:	f06f 0006 	mvn.w	r0, #6
   144da:	e7fa      	b.n	144d2 <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   144dc:	f06f 000c 	mvn.w	r0, #12
   144e0:	e7f7      	b.n	144d2 <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   144e2:	f06f 0012 	mvn.w	r0, #18
   144e6:	e7f4      	b.n	144d2 <bt_ias_write_alert_lvl+0x36>
   144e8:	20003dc9 	.word	0x20003dc9

000144ec <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   144ec:	4b10      	ldr	r3, [pc, #64]	; (14530 <settings_save_one+0x44>)
{
   144ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   144f2:	681c      	ldr	r4, [r3, #0]
{
   144f4:	4605      	mov	r5, r0
   144f6:	460e      	mov	r6, r1
   144f8:	4617      	mov	r7, r2
	if (!cs) {
   144fa:	b1ac      	cbz	r4, 14528 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   144fc:	f04f 32ff 	mov.w	r2, #4294967295
   14500:	f04f 33ff 	mov.w	r3, #4294967295
   14504:	480b      	ldr	r0, [pc, #44]	; (14534 <settings_save_one+0x48>)
   14506:	f00d fa01 	bl	2190c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1450a:	6863      	ldr	r3, [r4, #4]
   1450c:	4632      	mov	r2, r6
   1450e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   14512:	4629      	mov	r1, r5
   14514:	463b      	mov	r3, r7
   14516:	4620      	mov	r0, r4
   14518:	47c0      	blx	r8
   1451a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1451c:	4805      	ldr	r0, [pc, #20]	; (14534 <settings_save_one+0x48>)
   1451e:	f00d fa6d 	bl	219fc <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   14522:	4620      	mov	r0, r4
   14524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14528:	f06f 0401 	mvn.w	r4, #1
   1452c:	e7f9      	b.n	14522 <settings_save_one+0x36>
   1452e:	bf00      	nop
   14530:	20002874 	.word	0x20002874
   14534:	20000b4c 	.word	0x20000b4c

00014538 <settings_load_subtree_direct>:
{
   14538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1453a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1453e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   14540:	f04f 33ff 	mov.w	r3, #4294967295
   14544:	480a      	ldr	r0, [pc, #40]	; (14570 <settings_load_subtree_direct+0x38>)
   14546:	f04f 32ff 	mov.w	r2, #4294967295
   1454a:	f00d f9df 	bl	2190c <z_impl_k_mutex_lock>
	return list->head;
   1454e:	4b09      	ldr	r3, [pc, #36]	; (14574 <settings_load_subtree_direct+0x3c>)
   14550:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14552:	b134      	cbz	r4, 14562 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   14554:	6863      	ldr	r3, [r4, #4]
   14556:	4620      	mov	r0, r4
   14558:	681b      	ldr	r3, [r3, #0]
   1455a:	a901      	add	r1, sp, #4
   1455c:	4798      	blx	r3
	return node->next;
   1455e:	6824      	ldr	r4, [r4, #0]
   14560:	e7f7      	b.n	14552 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   14562:	4803      	ldr	r0, [pc, #12]	; (14570 <settings_load_subtree_direct+0x38>)
   14564:	f00d fa4a 	bl	219fc <z_impl_k_mutex_unlock>
}
   14568:	2000      	movs	r0, #0
   1456a:	b004      	add	sp, #16
   1456c:	bd10      	pop	{r4, pc}
   1456e:	bf00      	nop
   14570:	20000b4c 	.word	0x20000b4c
   14574:	2000286c 	.word	0x2000286c

00014578 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1457c:	4605      	mov	r5, r0
	__asm__ volatile(
   1457e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14582:	f3ef 8611 	mrs	r6, BASEPRI
   14586:	f383 8812 	msr	BASEPRI_MAX, r3
   1458a:	f3bf 8f6f 	isb	sy
	return list->head;
   1458e:	4b0e      	ldr	r3, [pc, #56]	; (145c8 <pm_state_notify+0x50>)
   14590:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14592:	b19c      	cbz	r4, 145bc <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14594:	4f0d      	ldr	r7, [pc, #52]	; (145cc <pm_state_notify+0x54>)
   14596:	f8df 8038 	ldr.w	r8, [pc, #56]	; 145d0 <pm_state_notify+0x58>
   1459a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   1459e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   145a2:	2d00      	cmp	r5, #0
   145a4:	bf08      	it	eq
   145a6:	4613      	moveq	r3, r2
		if (callback) {
   145a8:	b12b      	cbz	r3, 145b6 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   145aa:	f898 2014 	ldrb.w	r2, [r8, #20]
   145ae:	fb09 f202 	mul.w	r2, r9, r2
   145b2:	5cb8      	ldrb	r0, [r7, r2]
   145b4:	4798      	blx	r3
	return node->next;
   145b6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   145b8:	2c00      	cmp	r4, #0
   145ba:	d1f0      	bne.n	1459e <pm_state_notify+0x26>
	__asm__ volatile(
   145bc:	f386 8811 	msr	BASEPRI, r6
   145c0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   145c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145c8:	20002878 	.word	0x20002878
   145cc:	2000288c 	.word	0x2000288c
   145d0:	20003274 	.word	0x20003274

000145d4 <pm_system_resume>:

void pm_system_resume(void)
{
   145d4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   145d6:	4b1a      	ldr	r3, [pc, #104]	; (14640 <pm_system_resume+0x6c>)
   145d8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145da:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   145de:	f004 031f 	and.w	r3, r4, #31
   145e2:	2201      	movs	r2, #1
   145e4:	409a      	lsls	r2, r3
   145e6:	4b17      	ldr	r3, [pc, #92]	; (14644 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   145e8:	0961      	lsrs	r1, r4, #5
   145ea:	43d0      	mvns	r0, r2
   145ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   145f0:	e853 1f00 	ldrex	r1, [r3]
   145f4:	ea01 0500 	and.w	r5, r1, r0
   145f8:	e843 5c00 	strex	ip, r5, [r3]
   145fc:	f1bc 0f00 	cmp.w	ip, #0
   14600:	d1f6      	bne.n	145f0 <pm_system_resume+0x1c>
   14602:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14606:	4211      	tst	r1, r2
   14608:	d013      	beq.n	14632 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   1460a:	4b0f      	ldr	r3, [pc, #60]	; (14648 <pm_system_resume+0x74>)
   1460c:	4d0f      	ldr	r5, [pc, #60]	; (1464c <pm_system_resume+0x78>)
   1460e:	b18b      	cbz	r3, 14634 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14610:	230c      	movs	r3, #12
   14612:	4363      	muls	r3, r4
   14614:	18ea      	adds	r2, r5, r3
   14616:	5ce8      	ldrb	r0, [r5, r3]
   14618:	7851      	ldrb	r1, [r2, #1]
   1461a:	f014 f89a 	bl	28752 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1461e:	2000      	movs	r0, #0
   14620:	f7ff ffaa 	bl	14578 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14624:	230c      	movs	r3, #12
   14626:	435c      	muls	r4, r3
   14628:	192a      	adds	r2, r5, r4
   1462a:	2300      	movs	r3, #0
   1462c:	512b      	str	r3, [r5, r4]
   1462e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   14632:	bd38      	pop	{r3, r4, r5, pc}
   14634:	f383 8811 	msr	BASEPRI, r3
   14638:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1463c:	e7ef      	b.n	1461e <pm_system_resume+0x4a>
   1463e:	bf00      	nop
   14640:	20003274 	.word	0x20003274
   14644:	20002898 	.word	0x20002898
   14648:	00028753 	.word	0x00028753
   1464c:	2000288c 	.word	0x2000288c

00014650 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   14650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   14654:	4b33      	ldr	r3, [pc, #204]	; (14724 <pm_system_suspend+0xd4>)
{
   14656:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   14658:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1465a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1465e:	f3ef 8811 	mrs	r8, BASEPRI
   14662:	f383 8812 	msr	BASEPRI_MAX, r3
   14666:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1466a:	240c      	movs	r4, #12
   1466c:	4b2e      	ldr	r3, [pc, #184]	; (14728 <pm_system_suspend+0xd8>)
   1466e:	4e2f      	ldr	r6, [pc, #188]	; (1472c <pm_system_suspend+0xdc>)
   14670:	436c      	muls	r4, r5
   14672:	191a      	adds	r2, r3, r4
   14674:	5d19      	ldrb	r1, [r3, r4]
   14676:	2900      	cmp	r1, #0
   14678:	d049      	beq.n	1470e <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1467a:	ca07      	ldmia	r2, {r0, r1, r2}
   1467c:	eb06 0c04 	add.w	ip, r6, r4
   14680:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14684:	2200      	movs	r2, #0
   14686:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   14688:	f388 8811 	msr	BASEPRI, r8
   1468c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14690:	230c      	movs	r3, #12
   14692:	436b      	muls	r3, r5
   14694:	18f2      	adds	r2, r6, r3
   14696:	5cf0      	ldrb	r0, [r6, r3]
   14698:	b3b8      	cbz	r0, 1470a <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1469a:	1c7b      	adds	r3, r7, #1
   1469c:	d00f      	beq.n	146be <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1469e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   146a2:	4823      	ldr	r0, [pc, #140]	; (14730 <pm_system_suspend+0xe0>)
   146a4:	4a23      	ldr	r2, [pc, #140]	; (14734 <pm_system_suspend+0xe4>)
   146a6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   146aa:	2100      	movs	r1, #0
   146ac:	2300      	movs	r3, #0
   146ae:	fbec 0104 	umlal	r0, r1, ip, r4
   146b2:	f7ec f88f 	bl	7d4 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   146b6:	2101      	movs	r1, #1
   146b8:	1a38      	subs	r0, r7, r0
   146ba:	f017 fab3 	bl	2bc24 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   146be:	f00d fc95 	bl	21fec <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   146c2:	2001      	movs	r0, #1
   146c4:	f7ff ff58 	bl	14578 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   146c8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   146cc:	f005 021f 	and.w	r2, r5, #31
   146d0:	2101      	movs	r1, #1
   146d2:	4091      	lsls	r1, r2
   146d4:	4a18      	ldr	r2, [pc, #96]	; (14738 <pm_system_suspend+0xe8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   146d6:	096b      	lsrs	r3, r5, #5
   146d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   146dc:	e853 2f00 	ldrex	r2, [r3]
   146e0:	430a      	orrs	r2, r1
   146e2:	e843 2000 	strex	r0, r2, [r3]
   146e6:	2800      	cmp	r0, #0
   146e8:	d1f8      	bne.n	146dc <pm_system_suspend+0x8c>
   146ea:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   146ee:	4b13      	ldr	r3, [pc, #76]	; (1473c <pm_system_suspend+0xec>)
   146f0:	b133      	cbz	r3, 14700 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   146f2:	200c      	movs	r0, #12
   146f4:	4368      	muls	r0, r5
   146f6:	1833      	adds	r3, r6, r0
   146f8:	5c30      	ldrb	r0, [r6, r0]
   146fa:	7859      	ldrb	r1, [r3, #1]
   146fc:	f014 f81d 	bl	2873a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14700:	f7ff ff68 	bl	145d4 <pm_system_resume>
	k_sched_unlock();
   14704:	f00d fe42 	bl	2238c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   14708:	2001      	movs	r0, #1
}
   1470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1470e:	4601      	mov	r1, r0
   14710:	4628      	mov	r0, r5
   14712:	f000 f815 	bl	14740 <pm_policy_next_state>
		if (info != NULL) {
   14716:	2800      	cmp	r0, #0
   14718:	d0b6      	beq.n	14688 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1471a:	c807      	ldmia	r0, {r0, r1, r2}
   1471c:	4434      	add	r4, r6
   1471e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   14722:	e7b1      	b.n	14688 <pm_system_suspend+0x38>
   14724:	20003274 	.word	0x20003274
   14728:	20002880 	.word	0x20002880
   1472c:	2000288c 	.word	0x2000288c
   14730:	000f423f 	.word	0x000f423f
   14734:	000f4240 	.word	0x000f4240
   14738:	20002898 	.word	0x20002898
   1473c:	0002873b 	.word	0x0002873b

00014740 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14744:	b085      	sub	sp, #20
   14746:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14748:	a903      	add	r1, sp, #12
   1474a:	f000 f841 	bl	147d0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   1474e:	9b03      	ldr	r3, [sp, #12]
   14750:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14752:	4b1c      	ldr	r3, [pc, #112]	; (147c4 <pm_policy_next_state+0x84>)
   14754:	f8df 8070 	ldr.w	r8, [pc, #112]	; 147c8 <pm_policy_next_state+0x88>
   14758:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1475c:	1e44      	subs	r4, r0, #1
   1475e:	b224      	sxth	r4, r4
   14760:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14764:	f04f 0b00 	mov.w	fp, #0
   14768:	1c63      	adds	r3, r4, #1
   1476a:	d104      	bne.n	14776 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1476c:	2500      	movs	r5, #0
}
   1476e:	4628      	mov	r0, r5
   14770:	b005      	add	sp, #20
   14772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   14776:	9b01      	ldr	r3, [sp, #4]
   14778:	4a14      	ldr	r2, [pc, #80]	; (147cc <pm_policy_next_state+0x8c>)
   1477a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1477e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   14782:	46c4      	mov	ip, r8
   14784:	6868      	ldr	r0, [r5, #4]
   14786:	4659      	mov	r1, fp
   14788:	fbe0 c107 	umlal	ip, r1, r0, r7
   1478c:	2300      	movs	r3, #0
   1478e:	4660      	mov	r0, ip
   14790:	f7ec f820 	bl	7d4 <__aeabi_uldivmod>
   14794:	4681      	mov	r9, r0
   14796:	68a8      	ldr	r0, [r5, #8]
   14798:	4a0c      	ldr	r2, [pc, #48]	; (147cc <pm_policy_next_state+0x8c>)
   1479a:	46c4      	mov	ip, r8
   1479c:	4659      	mov	r1, fp
   1479e:	fbe0 c107 	umlal	ip, r1, r0, r7
   147a2:	2300      	movs	r3, #0
   147a4:	4660      	mov	r0, ip
   147a6:	f7ec f815 	bl	7d4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   147aa:	f1ba 3fff 	cmp.w	sl, #4294967295
   147ae:	d001      	beq.n	147b4 <pm_policy_next_state+0x74>
   147b0:	4582      	cmp	sl, r0
   147b2:	d904      	bls.n	147be <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   147b4:	1c72      	adds	r2, r6, #1
   147b6:	d0da      	beq.n	1476e <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   147b8:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   147ba:	42b0      	cmp	r0, r6
   147bc:	d9d7      	bls.n	1476e <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   147be:	3c01      	subs	r4, #1
   147c0:	b224      	sxth	r4, r4
   147c2:	e7d1      	b.n	14768 <pm_policy_next_state+0x28>
   147c4:	20000670 	.word	0x20000670
   147c8:	000f423f 	.word	0x000f423f
   147cc:	000f4240 	.word	0x000f4240

000147d0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   147d0:	b908      	cbnz	r0, 147d6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   147d2:	4b02      	ldr	r3, [pc, #8]	; (147dc <pm_state_cpu_get_all+0xc>)
   147d4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   147d6:	2000      	movs	r0, #0
   147d8:	4770      	bx	lr
   147da:	bf00      	nop
   147dc:	0002ce8c 	.word	0x0002ce8c

000147e0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   147e0:	4904      	ldr	r1, [pc, #16]	; (147f4 <sub_bytes+0x14>)
   147e2:	1e43      	subs	r3, r0, #1
   147e4:	300f      	adds	r0, #15
   147e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   147ea:	5c8a      	ldrb	r2, [r1, r2]
   147ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   147ee:	4283      	cmp	r3, r0
   147f0:	d1f9      	bne.n	147e6 <sub_bytes+0x6>
	}
}
   147f2:	4770      	bx	lr
   147f4:	0002da3f 	.word	0x0002da3f

000147f8 <tc_aes128_set_encrypt_key>:
{
   147f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   147fa:	4e26      	ldr	r6, [pc, #152]	; (14894 <tc_aes128_set_encrypt_key+0x9c>)
{
   147fc:	4607      	mov	r7, r0
   147fe:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14800:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14802:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14804:	ad01      	add	r5, sp, #4
   14806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1480c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14810:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14814:	4638      	mov	r0, r7
   14816:	2f00      	cmp	r7, #0
   14818:	d038      	beq.n	1488c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1481a:	2c00      	cmp	r4, #0
   1481c:	d038      	beq.n	14890 <tc_aes128_set_encrypt_key+0x98>
   1481e:	1f38      	subs	r0, r7, #4
   14820:	4621      	mov	r1, r4
   14822:	4602      	mov	r2, r0
   14824:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14826:	784b      	ldrb	r3, [r1, #1]
   14828:	780d      	ldrb	r5, [r1, #0]
   1482a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1482c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14830:	78cd      	ldrb	r5, [r1, #3]
   14832:	432b      	orrs	r3, r5
   14834:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14836:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14838:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1483c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1483e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14842:	d1f0      	bne.n	14826 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14844:	4c14      	ldr	r4, [pc, #80]	; (14898 <tc_aes128_set_encrypt_key+0xa0>)
   14846:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14848:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1484a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1484c:	d116      	bne.n	1487c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1484e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14852:	5ca5      	ldrb	r5, [r4, r2]
   14854:	0e1a      	lsrs	r2, r3, #24
   14856:	5ca2      	ldrb	r2, [r4, r2]
   14858:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1485c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14860:	b2db      	uxtb	r3, r3
   14862:	5d65      	ldrb	r5, [r4, r5]
   14864:	5ce3      	ldrb	r3, [r4, r3]
   14866:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1486a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1486e:	ad0c      	add	r5, sp, #48	; 0x30
   14870:	f021 0303 	bic.w	r3, r1, #3
   14874:	442b      	add	r3, r5
   14876:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1487a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1487c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14880:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14882:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14884:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14886:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14888:	d1de      	bne.n	14848 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1488a:	2001      	movs	r0, #1
}
   1488c:	b00d      	add	sp, #52	; 0x34
   1488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14890:	4620      	mov	r0, r4
   14892:	e7fb      	b.n	1488c <tc_aes128_set_encrypt_key+0x94>
   14894:	0002cb00 	.word	0x0002cb00
   14898:	0002da3f 	.word	0x0002da3f

0001489c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   1489c:	4801      	ldr	r0, [pc, #4]	; (148a4 <nrf_cc3xx_platform_abort_init+0x8>)
   1489e:	f00f bbdd 	b.w	2405c <nrf_cc3xx_platform_set_abort>
   148a2:	bf00      	nop
   148a4:	0002ce8c 	.word	0x0002ce8c

000148a8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   148a8:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   148aa:	4604      	mov	r4, r0
   148ac:	b918      	cbnz	r0, 148b6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   148ae:	4b0d      	ldr	r3, [pc, #52]	; (148e4 <mutex_free_platform+0x3c>)
   148b0:	480d      	ldr	r0, [pc, #52]	; (148e8 <mutex_free_platform+0x40>)
   148b2:	685b      	ldr	r3, [r3, #4]
   148b4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   148b6:	6861      	ldr	r1, [r4, #4]
   148b8:	2908      	cmp	r1, #8
   148ba:	d00d      	beq.n	148d8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   148bc:	f031 0304 	bics.w	r3, r1, #4
   148c0:	d00a      	beq.n	148d8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   148c2:	f011 0102 	ands.w	r1, r1, #2
   148c6:	d008      	beq.n	148da <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   148c8:	4808      	ldr	r0, [pc, #32]	; (148ec <mutex_free_platform+0x44>)
   148ca:	4621      	mov	r1, r4
   148cc:	f016 fe48 	bl	2b560 <k_mem_slab_free>
        mutex->mutex = NULL;
   148d0:	2300      	movs	r3, #0
   148d2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   148d4:	2300      	movs	r3, #0
   148d6:	6063      	str	r3, [r4, #4]
}
   148d8:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   148da:	6820      	ldr	r0, [r4, #0]
   148dc:	2214      	movs	r2, #20
   148de:	f017 fb97 	bl	2c010 <memset>
   148e2:	e7f7      	b.n	148d4 <mutex_free_platform+0x2c>
   148e4:	200008b8 	.word	0x200008b8
   148e8:	0002db3f 	.word	0x0002db3f
   148ec:	2000289c 	.word	0x2000289c

000148f0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   148f0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   148f2:	b308      	cbz	r0, 14938 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   148f4:	6843      	ldr	r3, [r0, #4]
   148f6:	2b04      	cmp	r3, #4
   148f8:	d110      	bne.n	1491c <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   148fa:	2201      	movs	r2, #1
   148fc:	6803      	ldr	r3, [r0, #0]
   148fe:	f3bf 8f5b 	dmb	ish
   14902:	e853 1f00 	ldrex	r1, [r3]
   14906:	2900      	cmp	r1, #0
   14908:	d103      	bne.n	14912 <mutex_lock_platform+0x22>
   1490a:	e843 2000 	strex	r0, r2, [r3]
   1490e:	2800      	cmp	r0, #0
   14910:	d1f7      	bne.n	14902 <mutex_lock_platform+0x12>
   14912:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14916:	d10b      	bne.n	14930 <mutex_lock_platform+0x40>
   14918:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   1491a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1491c:	b153      	cbz	r3, 14934 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1491e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14920:	f04f 32ff 	mov.w	r2, #4294967295
   14924:	f04f 33ff 	mov.w	r3, #4294967295
   14928:	f00c fff0 	bl	2190c <z_impl_k_mutex_lock>
        if (ret == 0) {
   1492c:	2800      	cmp	r0, #0
   1492e:	d0f3      	beq.n	14918 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14930:	4803      	ldr	r0, [pc, #12]	; (14940 <mutex_lock_platform+0x50>)
   14932:	e7f2      	b.n	1491a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14934:	4803      	ldr	r0, [pc, #12]	; (14944 <mutex_lock_platform+0x54>)
   14936:	e7f0      	b.n	1491a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14938:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1493c:	e7ed      	b.n	1491a <mutex_lock_platform+0x2a>
   1493e:	bf00      	nop
   14940:	ffff8fe9 	.word	0xffff8fe9
   14944:	ffff8fea 	.word	0xffff8fea

00014948 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14948:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1494a:	b1d0      	cbz	r0, 14982 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   1494c:	6843      	ldr	r3, [r0, #4]
   1494e:	2b04      	cmp	r3, #4
   14950:	d111      	bne.n	14976 <mutex_unlock_platform+0x2e>
   14952:	2200      	movs	r2, #0
   14954:	6803      	ldr	r3, [r0, #0]
   14956:	f3bf 8f5b 	dmb	ish
   1495a:	e853 1f00 	ldrex	r1, [r3]
   1495e:	2901      	cmp	r1, #1
   14960:	d103      	bne.n	1496a <mutex_unlock_platform+0x22>
   14962:	e843 2000 	strex	r0, r2, [r3]
   14966:	2800      	cmp	r0, #0
   14968:	d1f7      	bne.n	1495a <mutex_unlock_platform+0x12>
   1496a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1496e:	4807      	ldr	r0, [pc, #28]	; (1498c <mutex_unlock_platform+0x44>)
   14970:	bf08      	it	eq
   14972:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   14974:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14976:	b13b      	cbz	r3, 14988 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14978:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1497a:	f00d f83f 	bl	219fc <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1497e:	2000      	movs	r0, #0
   14980:	e7f8      	b.n	14974 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14982:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14986:	e7f5      	b.n	14974 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14988:	4801      	ldr	r0, [pc, #4]	; (14990 <mutex_unlock_platform+0x48>)
   1498a:	e7f3      	b.n	14974 <mutex_unlock_platform+0x2c>
   1498c:	ffff8fe9 	.word	0xffff8fe9
   14990:	ffff8fea 	.word	0xffff8fea

00014994 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14994:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14996:	4604      	mov	r4, r0
   14998:	b918      	cbnz	r0, 149a2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1499a:	4b16      	ldr	r3, [pc, #88]	; (149f4 <mutex_init_platform+0x60>)
   1499c:	4816      	ldr	r0, [pc, #88]	; (149f8 <mutex_init_platform+0x64>)
   1499e:	685b      	ldr	r3, [r3, #4]
   149a0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   149a2:	6863      	ldr	r3, [r4, #4]
   149a4:	2b04      	cmp	r3, #4
   149a6:	d023      	beq.n	149f0 <mutex_init_platform+0x5c>
   149a8:	2b08      	cmp	r3, #8
   149aa:	d021      	beq.n	149f0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   149ac:	b9cb      	cbnz	r3, 149e2 <mutex_init_platform+0x4e>
   149ae:	6823      	ldr	r3, [r4, #0]
   149b0:	b9bb      	cbnz	r3, 149e2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   149b2:	4812      	ldr	r0, [pc, #72]	; (149fc <mutex_init_platform+0x68>)
   149b4:	f04f 32ff 	mov.w	r2, #4294967295
   149b8:	f04f 33ff 	mov.w	r3, #4294967295
   149bc:	4621      	mov	r1, r4
   149be:	f00c fea3 	bl	21708 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   149c2:	b908      	cbnz	r0, 149c8 <mutex_init_platform+0x34>
   149c4:	6823      	ldr	r3, [r4, #0]
   149c6:	b91b      	cbnz	r3, 149d0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   149c8:	4b0a      	ldr	r3, [pc, #40]	; (149f4 <mutex_init_platform+0x60>)
   149ca:	480d      	ldr	r0, [pc, #52]	; (14a00 <mutex_init_platform+0x6c>)
   149cc:	685b      	ldr	r3, [r3, #4]
   149ce:	4798      	blx	r3
   149d0:	6820      	ldr	r0, [r4, #0]
   149d2:	2214      	movs	r2, #20
   149d4:	2100      	movs	r1, #0
   149d6:	f017 fb1b 	bl	2c010 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   149da:	6863      	ldr	r3, [r4, #4]
   149dc:	f043 0302 	orr.w	r3, r3, #2
   149e0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   149e2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   149e4:	f016 fe01 	bl	2b5ea <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   149e8:	6863      	ldr	r3, [r4, #4]
   149ea:	f043 0301 	orr.w	r3, r3, #1
   149ee:	6063      	str	r3, [r4, #4]
}
   149f0:	bd10      	pop	{r4, pc}
   149f2:	bf00      	nop
   149f4:	200008b8 	.word	0x200008b8
   149f8:	0002db3f 	.word	0x0002db3f
   149fc:	2000289c 	.word	0x2000289c
   14a00:	0002db65 	.word	0x0002db65

00014a04 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14a04:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14a06:	4906      	ldr	r1, [pc, #24]	; (14a20 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14a08:	4806      	ldr	r0, [pc, #24]	; (14a24 <nrf_cc3xx_platform_mutex_init+0x20>)
   14a0a:	2340      	movs	r3, #64	; 0x40
   14a0c:	2214      	movs	r2, #20
   14a0e:	f016 fd8c 	bl	2b52a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14a16:	4904      	ldr	r1, [pc, #16]	; (14a28 <nrf_cc3xx_platform_mutex_init+0x24>)
   14a18:	4804      	ldr	r0, [pc, #16]	; (14a2c <nrf_cc3xx_platform_mutex_init+0x28>)
   14a1a:	f00f bbd3 	b.w	241c4 <nrf_cc3xx_platform_set_mutexes>
   14a1e:	bf00      	nop
   14a20:	200028b8 	.word	0x200028b8
   14a24:	2000289c 	.word	0x2000289c
   14a28:	0002cea4 	.word	0x0002cea4
   14a2c:	0002ce94 	.word	0x0002ce94

00014a30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14a30:	4901      	ldr	r1, [pc, #4]	; (14a38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14a32:	2210      	movs	r2, #16
	str	r2, [r1]
   14a34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14a36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14a38:	e000ed10 	.word	0xe000ed10

00014a3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14a3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14a3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14a40:	f380 8811 	msr	BASEPRI, r0
	isb
   14a44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14a48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14a4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14a4e:	b662      	cpsie	i
	isb
   14a50:	f3bf 8f6f 	isb	sy

	bx	lr
   14a54:	4770      	bx	lr
   14a56:	bf00      	nop

00014a58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14a58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14a5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14a5c:	f381 8811 	msr	BASEPRI, r1

	wfe
   14a60:	bf20      	wfe

	msr	BASEPRI, r0
   14a62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14a66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14a68:	4770      	bx	lr
   14a6a:	bf00      	nop

00014a6c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a70:	4681      	mov	r9, r0
   14a72:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14a74:	460c      	mov	r4, r1
   14a76:	2900      	cmp	r1, #0
   14a78:	d04c      	beq.n	14b14 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14a7a:	466e      	mov	r6, sp
   14a7c:	b08a      	sub	sp, #40	; 0x28
   14a7e:	e9d1 1200 	ldrd	r1, r2, [r1]
   14a82:	68a3      	ldr	r3, [r4, #8]
   14a84:	466d      	mov	r5, sp
   14a86:	4827      	ldr	r0, [pc, #156]	; (14b24 <z_arm_fatal_error+0xb8>)
   14a88:	46a8      	mov	r8, r5
   14a8a:	f04f 0a05 	mov.w	sl, #5
   14a8e:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14a92:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14a96:	f848 af10 	str.w	sl, [r8, #16]!
   14a9a:	4823      	ldr	r0, [pc, #140]	; (14b28 <z_arm_fatal_error+0xbc>)
   14a9c:	4642      	mov	r2, r8
   14a9e:	2300      	movs	r3, #0
   14aa0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14aa4:	f7ff f8ec 	bl	13c80 <z_impl_z_log_msg_static_create>
   14aa8:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14aaa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14aae:	6963      	ldr	r3, [r4, #20]
   14ab0:	46ad      	mov	sp, r5
   14ab2:	481e      	ldr	r0, [pc, #120]	; (14b2c <z_arm_fatal_error+0xc0>)
   14ab4:	f8c5 a010 	str.w	sl, [r5, #16]
   14ab8:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14abc:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14ac0:	4819      	ldr	r0, [pc, #100]	; (14b28 <z_arm_fatal_error+0xbc>)
   14ac2:	2300      	movs	r3, #0
   14ac4:	4642      	mov	r2, r8
   14ac6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14aca:	f7ff f8d9 	bl	13c80 <z_impl_z_log_msg_static_create>
   14ace:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14ad0:	b088      	sub	sp, #32
   14ad2:	69e3      	ldr	r3, [r4, #28]
   14ad4:	466d      	mov	r5, sp
   14ad6:	4a16      	ldr	r2, [pc, #88]	; (14b30 <z_arm_fatal_error+0xc4>)
   14ad8:	46a8      	mov	r8, r5
   14ada:	f04f 0a03 	mov.w	sl, #3
   14ade:	e9c5 2305 	strd	r2, r3, [r5, #20]
   14ae2:	f848 af10 	str.w	sl, [r8, #16]!
   14ae6:	4810      	ldr	r0, [pc, #64]	; (14b28 <z_arm_fatal_error+0xbc>)
   14ae8:	2300      	movs	r3, #0
   14aea:	4642      	mov	r2, r8
   14aec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14af0:	f7ff f8c6 	bl	13c80 <z_impl_z_log_msg_static_create>
   14af4:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14af6:	69a3      	ldr	r3, [r4, #24]
   14af8:	46ad      	mov	sp, r5
   14afa:	4a0e      	ldr	r2, [pc, #56]	; (14b34 <z_arm_fatal_error+0xc8>)
   14afc:	f8c5 a010 	str.w	sl, [r5, #16]
   14b00:	e9c5 2305 	strd	r2, r3, [r5, #20]
   14b04:	4808      	ldr	r0, [pc, #32]	; (14b28 <z_arm_fatal_error+0xbc>)
   14b06:	2300      	movs	r3, #0
   14b08:	4642      	mov	r2, r8
   14b0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b0e:	f7ff f8b7 	bl	13c80 <z_impl_z_log_msg_static_create>
   14b12:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14b14:	4621      	mov	r1, r4
   14b16:	4648      	mov	r0, r9
   14b18:	f00c fc7c 	bl	21414 <z_fatal_error>
}
   14b1c:	46bd      	mov	sp, r7
   14b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b22:	bf00      	nop
   14b24:	0002db92 	.word	0x0002db92
   14b28:	0002c84c 	.word	0x0002c84c
   14b2c:	0002dbc1 	.word	0x0002dbc1
   14b30:	0002dbf0 	.word	0x0002dbf0
   14b34:	0002dbff 	.word	0x0002dbff

00014b38 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14b38:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	db08      	blt.n	14b50 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b3e:	2201      	movs	r2, #1
   14b40:	f000 001f 	and.w	r0, r0, #31
   14b44:	fa02 f000 	lsl.w	r0, r2, r0
   14b48:	095b      	lsrs	r3, r3, #5
   14b4a:	4a02      	ldr	r2, [pc, #8]	; (14b54 <arch_irq_enable+0x1c>)
   14b4c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14b50:	4770      	bx	lr
   14b52:	bf00      	nop
   14b54:	e000e100 	.word	0xe000e100

00014b58 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14b58:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	db0d      	blt.n	14b7a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b5e:	2201      	movs	r2, #1
   14b60:	095b      	lsrs	r3, r3, #5
   14b62:	f000 001f 	and.w	r0, r0, #31
   14b66:	fa02 f000 	lsl.w	r0, r2, r0
   14b6a:	3320      	adds	r3, #32
   14b6c:	4a03      	ldr	r2, [pc, #12]	; (14b7c <arch_irq_disable+0x24>)
   14b6e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b76:	f3bf 8f6f 	isb	sy
}
   14b7a:	4770      	bx	lr
   14b7c:	e000e100 	.word	0xe000e100

00014b80 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14b80:	4b05      	ldr	r3, [pc, #20]	; (14b98 <arch_irq_is_enabled+0x18>)
   14b82:	0942      	lsrs	r2, r0, #5
   14b84:	f000 001f 	and.w	r0, r0, #31
   14b88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14b8c:	2301      	movs	r3, #1
   14b8e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14b92:	4010      	ands	r0, r2
   14b94:	4770      	bx	lr
   14b96:	bf00      	nop
   14b98:	e000e100 	.word	0xe000e100

00014b9c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14b9c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14b9e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   14ba0:	bf54      	ite	pl
   14ba2:	1c8b      	addpl	r3, r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14ba4:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14ba6:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ba8:	bfac      	ite	ge
   14baa:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bae:	4a07      	ldrlt	r2, [pc, #28]	; (14bcc <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bb0:	ea4f 1343 	mov.w	r3, r3, lsl #5
   14bb4:	bfac      	ite	ge
   14bb6:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bbe:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bc0:	bfb4      	ite	lt
   14bc2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bc4:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   14bc8:	4770      	bx	lr
   14bca:	bf00      	nop
   14bcc:	e000ed14 	.word	0xe000ed14

00014bd0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14bd0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14bd2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14bd4:	4b04      	ldr	r3, [pc, #16]	; (14be8 <_arch_isr_direct_pm+0x18>)
   14bd6:	699a      	ldr	r2, [r3, #24]
   14bd8:	b11a      	cbz	r2, 14be2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14bda:	2200      	movs	r2, #0
   14bdc:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14bde:	f016 fcf5 	bl	2b5cc <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14be2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14be4:	bd08      	pop	{r3, pc}
   14be6:	bf00      	nop
   14be8:	20003274 	.word	0x20003274

00014bec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14bec:	bf30      	wfi
    b z_SysNmiOnReset
   14bee:	f7ff bffd 	b.w	14bec <z_SysNmiOnReset>
   14bf2:	bf00      	nop

00014bf4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14bf4:	4a0b      	ldr	r2, [pc, #44]	; (14c24 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14bf6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14bf8:	4b0b      	ldr	r3, [pc, #44]	; (14c28 <z_arm_prep_c+0x34>)
   14bfa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14bfe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14c04:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14c08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14c0c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14c14:	f00c fc96 	bl	21544 <z_bss_zero>
	z_data_copy();
   14c18:	f00d fd14 	bl	22644 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14c1c:	f000 fb86 	bl	1532c <z_arm_interrupt_init>
	z_cstart();
   14c20:	f00c fcd0 	bl	215c4 <z_cstart>
   14c24:	00000000 	.word	0x00000000
   14c28:	e000ed00 	.word	0xe000ed00

00014c2c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14c2c:	4a09      	ldr	r2, [pc, #36]	; (14c54 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14c2e:	490a      	ldr	r1, [pc, #40]	; (14c58 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14c30:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14c32:	6809      	ldr	r1, [r1, #0]
   14c34:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14c36:	4909      	ldr	r1, [pc, #36]	; (14c5c <arch_swap+0x30>)
	_current->arch.basepri = key;
   14c38:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14c3a:	684b      	ldr	r3, [r1, #4]
   14c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14c40:	604b      	str	r3, [r1, #4]
   14c42:	2300      	movs	r3, #0
   14c44:	f383 8811 	msr	BASEPRI, r3
   14c48:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14c4c:	6893      	ldr	r3, [r2, #8]
}
   14c4e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14c50:	4770      	bx	lr
   14c52:	bf00      	nop
   14c54:	20003274 	.word	0x20003274
   14c58:	0002d460 	.word	0x0002d460
   14c5c:	e000ed00 	.word	0xe000ed00

00014c60 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14c60:	490f      	ldr	r1, [pc, #60]	; (14ca0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14c62:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14c64:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14c68:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14c6a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14c6e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14c72:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14c74:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14c78:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14c7c:	4f09      	ldr	r7, [pc, #36]	; (14ca4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14c7e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14c82:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14c84:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14c86:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14c88:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14c8a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14c8c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14c8e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14c92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14c96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14c9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14c9e:	4770      	bx	lr
    ldr r1, =_kernel
   14ca0:	20003274 	.word	0x20003274
    ldr v4, =_SCS_ICSR
   14ca4:	e000ed04 	.word	0xe000ed04

00014ca8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14ca8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14cac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14cae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14cb2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14cb6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14cb8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14cbc:	2902      	cmp	r1, #2
    beq _oops
   14cbe:	d0ff      	beq.n	14cc0 <_oops>

00014cc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14cc0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14cc2:	f013 fcf8 	bl	286b6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14cc6:	bd01      	pop	{r0, pc}

00014cc8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14cc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14ccc:	9b00      	ldr	r3, [sp, #0]
   14cce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14cd2:	490a      	ldr	r1, [pc, #40]	; (14cfc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14cd4:	9b01      	ldr	r3, [sp, #4]
   14cd6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14cda:	9b02      	ldr	r3, [sp, #8]
   14cdc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14ce0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14ce8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14cec:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14cf0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14cf2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14cf4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14cf6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14cf8:	4770      	bx	lr
   14cfa:	bf00      	nop
   14cfc:	00027887 	.word	0x00027887

00014d00 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14d00:	4b07      	ldr	r3, [pc, #28]	; (14d20 <arch_switch_to_main_thread+0x20>)
   14d02:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14d04:	4610      	mov	r0, r2
   14d06:	f381 8809 	msr	PSP, r1
   14d0a:	2100      	movs	r1, #0
   14d0c:	b663      	cpsie	if
   14d0e:	f381 8811 	msr	BASEPRI, r1
   14d12:	f3bf 8f6f 	isb	sy
   14d16:	2200      	movs	r2, #0
   14d18:	2300      	movs	r3, #0
   14d1a:	f012 fdb4 	bl	27886 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14d1e:	bf00      	nop
   14d20:	20003274 	.word	0x20003274

00014d24 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14d24:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14d26:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14d28:	4a0b      	ldr	r2, [pc, #44]	; (14d58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14d2a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14d2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14d2e:	bf1e      	ittt	ne
	movne	r1, #0
   14d30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14d32:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14d34:	f016 fc4a 	blne	2b5cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14d38:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14d3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14d3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14d42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14d46:	4905      	ldr	r1, [pc, #20]	; (14d5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14d48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14d4a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14d4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14d4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14d52:	4903      	ldr	r1, [pc, #12]	; (14d60 <_isr_wrapper+0x3c>)
	bx r1
   14d54:	4708      	bx	r1
   14d56:	0000      	.short	0x0000
	ldr r2, =_kernel
   14d58:	20003274 	.word	0x20003274
	ldr r1, =_sw_isr_table
   14d5c:	0002c534 	.word	0x0002c534
	ldr r1, =z_arm_int_exit
   14d60:	00014d65 	.word	0x00014d65

00014d64 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14d64:	4b04      	ldr	r3, [pc, #16]	; (14d78 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14d66:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14d68:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14d6a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14d6c:	d003      	beq.n	14d76 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14d6e:	4903      	ldr	r1, [pc, #12]	; (14d7c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14d74:	600a      	str	r2, [r1, #0]

00014d76 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14d76:	4770      	bx	lr
	ldr r3, =_kernel
   14d78:	20003274 	.word	0x20003274
	ldr r1, =_SCS_ICSR
   14d7c:	e000ed04 	.word	0xe000ed04

00014d80 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d84:	b086      	sub	sp, #24
   14d86:	4606      	mov	r6, r0
   14d88:	af00      	add	r7, sp, #0
   14d8a:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   14d8c:	4b41      	ldr	r3, [pc, #260]	; (14e94 <mem_manage_fault.constprop.0+0x114>)
   14d8e:	4842      	ldr	r0, [pc, #264]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14d90:	617b      	str	r3, [r7, #20]
   14d92:	2402      	movs	r4, #2
   14d94:	f107 0210 	add.w	r2, r7, #16
   14d98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d9c:	613c      	str	r4, [r7, #16]
   14d9e:	f013 fc99 	bl	286d4 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14da2:	4b3e      	ldr	r3, [pc, #248]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14da6:	06db      	lsls	r3, r3, #27
   14da8:	d509      	bpl.n	14dbe <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14daa:	4b3d      	ldr	r3, [pc, #244]	; (14ea0 <mem_manage_fault.constprop.0+0x120>)
   14dac:	483a      	ldr	r0, [pc, #232]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14dae:	f107 0210 	add.w	r2, r7, #16
   14db2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14db6:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14dba:	f013 fc8b 	bl	286d4 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14dbe:	4b37      	ldr	r3, [pc, #220]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14dc2:	0718      	lsls	r0, r3, #28
   14dc4:	d50a      	bpl.n	14ddc <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14dc6:	4b37      	ldr	r3, [pc, #220]	; (14ea4 <mem_manage_fault.constprop.0+0x124>)
   14dc8:	617b      	str	r3, [r7, #20]
   14dca:	4833      	ldr	r0, [pc, #204]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14dcc:	2302      	movs	r3, #2
   14dce:	f107 0210 	add.w	r2, r7, #16
   14dd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14dd6:	613b      	str	r3, [r7, #16]
   14dd8:	f013 fc7c 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14ddc:	4c2f      	ldr	r4, [pc, #188]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14de0:	0799      	lsls	r1, r3, #30
   14de2:	d522      	bpl.n	14e2a <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   14de4:	46e8      	mov	r8, sp
   14de6:	4b30      	ldr	r3, [pc, #192]	; (14ea8 <mem_manage_fault.constprop.0+0x128>)
   14de8:	617b      	str	r3, [r7, #20]
   14dea:	f107 0210 	add.w	r2, r7, #16
   14dee:	2302      	movs	r3, #2
   14df0:	4829      	ldr	r0, [pc, #164]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14df2:	613b      	str	r3, [r7, #16]
   14df4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14df8:	f013 fc6c 	bl	286d4 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   14dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14dfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14e00:	0612      	lsls	r2, r2, #24
   14e02:	d512      	bpl.n	14e2a <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14e04:	b088      	sub	sp, #32
   14e06:	466a      	mov	r2, sp
   14e08:	4928      	ldr	r1, [pc, #160]	; (14eac <mem_manage_fault.constprop.0+0x12c>)
   14e0a:	4823      	ldr	r0, [pc, #140]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14e0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e10:	2303      	movs	r3, #3
   14e12:	f842 3f10 	str.w	r3, [r2, #16]!
   14e16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e1a:	f013 fc5b 	bl	286d4 <z_log_msg_static_create.constprop.0>
   14e1e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14e20:	b11e      	cbz	r6, 14e2a <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14e28:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14e2a:	4b1c      	ldr	r3, [pc, #112]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e2e:	07dc      	lsls	r4, r3, #31
   14e30:	d50a      	bpl.n	14e48 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   14e32:	4b1f      	ldr	r3, [pc, #124]	; (14eb0 <mem_manage_fault.constprop.0+0x130>)
   14e34:	617b      	str	r3, [r7, #20]
   14e36:	4818      	ldr	r0, [pc, #96]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14e38:	2302      	movs	r3, #2
   14e3a:	f107 0210 	add.w	r2, r7, #16
   14e3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e42:	613b      	str	r3, [r7, #16]
   14e44:	f013 fc46 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14e48:	4b14      	ldr	r3, [pc, #80]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e4c:	0698      	lsls	r0, r3, #26
   14e4e:	d50a      	bpl.n	14e66 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   14e50:	4b18      	ldr	r3, [pc, #96]	; (14eb4 <mem_manage_fault.constprop.0+0x134>)
   14e52:	617b      	str	r3, [r7, #20]
   14e54:	4810      	ldr	r0, [pc, #64]	; (14e98 <mem_manage_fault.constprop.0+0x118>)
   14e56:	2302      	movs	r3, #2
   14e58:	f107 0210 	add.w	r2, r7, #16
   14e5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e60:	613b      	str	r3, [r7, #16]
   14e62:	f013 fc37 	bl	286d4 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14e66:	4b0d      	ldr	r3, [pc, #52]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14e6a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14e6c:	bf58      	it	pl
   14e6e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14e72:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14e74:	bf42      	ittt	mi
   14e76:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14e78:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   14e7c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14e7e:	4a07      	ldr	r2, [pc, #28]	; (14e9c <mem_manage_fault.constprop.0+0x11c>)
   14e80:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14e82:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14e84:	f043 03ff 	orr.w	r3, r3, #255	; 0xff

	return reason;
}
   14e88:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14e8a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14e8c:	7028      	strb	r0, [r5, #0]
}
   14e8e:	46bd      	mov	sp, r7
   14e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e94:	0002dc2d 	.word	0x0002dc2d
   14e98:	0002c84c 	.word	0x0002c84c
   14e9c:	e000ed00 	.word	0xe000ed00
   14ea0:	0002dc43 	.word	0x0002dc43
   14ea4:	0002dc76 	.word	0x0002dc76
   14ea8:	0002dc89 	.word	0x0002dc89
   14eac:	0002dca1 	.word	0x0002dca1
   14eb0:	0002dcb7 	.word	0x0002dcb7
   14eb4:	0002dcd6 	.word	0x0002dcd6

00014eb8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ebc:	b086      	sub	sp, #24
   14ebe:	4606      	mov	r6, r0
   14ec0:	af00      	add	r7, sp, #0
   14ec2:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14ec4:	4b3e      	ldr	r3, [pc, #248]	; (14fc0 <bus_fault.constprop.0+0x108>)
   14ec6:	483f      	ldr	r0, [pc, #252]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14ec8:	617b      	str	r3, [r7, #20]
   14eca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ece:	2402      	movs	r4, #2
   14ed0:	f107 0210 	add.w	r2, r7, #16
   14ed4:	613c      	str	r4, [r7, #16]
   14ed6:	f013 fbfd 	bl	286d4 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14eda:	4b3b      	ldr	r3, [pc, #236]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ede:	04d9      	lsls	r1, r3, #19
   14ee0:	d509      	bpl.n	14ef6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   14ee2:	4b3a      	ldr	r3, [pc, #232]	; (14fcc <bus_fault.constprop.0+0x114>)
   14ee4:	4837      	ldr	r0, [pc, #220]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14ee6:	f107 0210 	add.w	r2, r7, #16
   14eea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14eee:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14ef2:	f013 fbef 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14ef6:	4b34      	ldr	r3, [pc, #208]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14efa:	051a      	lsls	r2, r3, #20
   14efc:	d50a      	bpl.n	14f14 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14efe:	4b34      	ldr	r3, [pc, #208]	; (14fd0 <bus_fault.constprop.0+0x118>)
   14f00:	617b      	str	r3, [r7, #20]
   14f02:	4830      	ldr	r0, [pc, #192]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14f04:	2302      	movs	r3, #2
   14f06:	f107 0210 	add.w	r2, r7, #16
   14f0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f0e:	613b      	str	r3, [r7, #16]
   14f10:	f013 fbe0 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14f14:	4c2c      	ldr	r4, [pc, #176]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f18:	059b      	lsls	r3, r3, #22
   14f1a:	d522      	bpl.n	14f62 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   14f1c:	46e8      	mov	r8, sp
   14f1e:	4b2d      	ldr	r3, [pc, #180]	; (14fd4 <bus_fault.constprop.0+0x11c>)
   14f20:	4828      	ldr	r0, [pc, #160]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14f22:	617b      	str	r3, [r7, #20]
   14f24:	f107 0210 	add.w	r2, r7, #16
   14f28:	2302      	movs	r3, #2
   14f2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f2e:	613b      	str	r3, [r7, #16]
   14f30:	f013 fbd0 	bl	286d4 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14f36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14f38:	0410      	lsls	r0, r2, #16
   14f3a:	d512      	bpl.n	14f62 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14f3c:	b088      	sub	sp, #32
   14f3e:	466a      	mov	r2, sp
   14f40:	4925      	ldr	r1, [pc, #148]	; (14fd8 <bus_fault.constprop.0+0x120>)
   14f42:	4820      	ldr	r0, [pc, #128]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14f44:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14f48:	2303      	movs	r3, #3
   14f4a:	f842 3f10 	str.w	r3, [r2, #16]!
   14f4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f52:	f013 fbbf 	bl	286d4 <z_log_msg_static_create.constprop.0>
   14f56:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14f58:	b11e      	cbz	r6, 14f62 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14f60:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14f62:	4b19      	ldr	r3, [pc, #100]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f66:	0559      	lsls	r1, r3, #21
   14f68:	d50a      	bpl.n	14f80 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   14f6a:	4b1c      	ldr	r3, [pc, #112]	; (14fdc <bus_fault.constprop.0+0x124>)
   14f6c:	617b      	str	r3, [r7, #20]
   14f6e:	4815      	ldr	r0, [pc, #84]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14f70:	2302      	movs	r3, #2
   14f72:	f107 0210 	add.w	r2, r7, #16
   14f76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f7a:	613b      	str	r3, [r7, #16]
   14f7c:	f013 fbaa 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14f80:	4b11      	ldr	r3, [pc, #68]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14f84:	05d2      	lsls	r2, r2, #23
   14f86:	d515      	bpl.n	14fb4 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   14f88:	4b15      	ldr	r3, [pc, #84]	; (14fe0 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14f8a:	617b      	str	r3, [r7, #20]
   14f8c:	480d      	ldr	r0, [pc, #52]	; (14fc4 <bus_fault.constprop.0+0x10c>)
   14f8e:	2302      	movs	r3, #2
   14f90:	f107 0210 	add.w	r2, r7, #16
   14f94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f98:	613b      	str	r3, [r7, #16]
   14f9a:	f013 fb9b 	bl	286d4 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14f9e:	4a0a      	ldr	r2, [pc, #40]	; (14fc8 <bus_fault.constprop.0+0x110>)
   14fa0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14fa2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14fa4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   14fa8:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14faa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14fac:	7028      	strb	r0, [r5, #0]
}
   14fae:	46bd      	mov	sp, r7
   14fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fb6:	049b      	lsls	r3, r3, #18
   14fb8:	d5f1      	bpl.n	14f9e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14fba:	4b0a      	ldr	r3, [pc, #40]	; (14fe4 <bus_fault.constprop.0+0x12c>)
   14fbc:	e7e5      	b.n	14f8a <bus_fault.constprop.0+0xd2>
   14fbe:	bf00      	nop
   14fc0:	0002dd05 	.word	0x0002dd05
   14fc4:	0002c84c 	.word	0x0002c84c
   14fc8:	e000ed00 	.word	0xe000ed00
   14fcc:	0002dd1b 	.word	0x0002dd1b
   14fd0:	0002dc76 	.word	0x0002dc76
   14fd4:	0002dd2c 	.word	0x0002dd2c
   14fd8:	0002dd45 	.word	0x0002dd45
   14fdc:	0002dd5a 	.word	0x0002dd5a
   14fe0:	0002dd75 	.word	0x0002dd75
   14fe4:	0002dcd6 	.word	0x0002dcd6

00014fe8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14fe8:	b510      	push	{r4, lr}
   14fea:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14fec:	4b33      	ldr	r3, [pc, #204]	; (150bc <usage_fault.constprop.0+0xd4>)
   14fee:	4834      	ldr	r0, [pc, #208]	; (150c0 <usage_fault.constprop.0+0xd8>)
   14ff0:	9305      	str	r3, [sp, #20]
   14ff2:	2402      	movs	r4, #2
   14ff4:	aa04      	add	r2, sp, #16
   14ff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ffa:	9404      	str	r4, [sp, #16]
   14ffc:	f013 fb6a 	bl	286d4 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15000:	4b30      	ldr	r3, [pc, #192]	; (150c4 <usage_fault.constprop.0+0xdc>)
   15002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15004:	019b      	lsls	r3, r3, #6
   15006:	d508      	bpl.n	1501a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   15008:	4b2f      	ldr	r3, [pc, #188]	; (150c8 <usage_fault.constprop.0+0xe0>)
   1500a:	482d      	ldr	r0, [pc, #180]	; (150c0 <usage_fault.constprop.0+0xd8>)
   1500c:	aa04      	add	r2, sp, #16
   1500e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15012:	e9cd 4304 	strd	r4, r3, [sp, #16]
   15016:	f013 fb5d 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1501a:	4b2a      	ldr	r3, [pc, #168]	; (150c4 <usage_fault.constprop.0+0xdc>)
   1501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1501e:	01dc      	lsls	r4, r3, #7
   15020:	d509      	bpl.n	15036 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   15022:	4b2a      	ldr	r3, [pc, #168]	; (150cc <usage_fault.constprop.0+0xe4>)
   15024:	9305      	str	r3, [sp, #20]
   15026:	4826      	ldr	r0, [pc, #152]	; (150c0 <usage_fault.constprop.0+0xd8>)
   15028:	2302      	movs	r3, #2
   1502a:	aa04      	add	r2, sp, #16
   1502c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15030:	9304      	str	r3, [sp, #16]
   15032:	f013 fb4f 	bl	286d4 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15036:	4b23      	ldr	r3, [pc, #140]	; (150c4 <usage_fault.constprop.0+0xdc>)
   15038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1503a:	0318      	lsls	r0, r3, #12
   1503c:	d509      	bpl.n	15052 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1503e:	4b24      	ldr	r3, [pc, #144]	; (150d0 <usage_fault.constprop.0+0xe8>)
   15040:	9305      	str	r3, [sp, #20]
   15042:	481f      	ldr	r0, [pc, #124]	; (150c0 <usage_fault.constprop.0+0xd8>)
   15044:	2302      	movs	r3, #2
   15046:	aa04      	add	r2, sp, #16
   15048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1504c:	9304      	str	r3, [sp, #16]
   1504e:	f013 fb41 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15052:	4b1c      	ldr	r3, [pc, #112]	; (150c4 <usage_fault.constprop.0+0xdc>)
   15054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15056:	0359      	lsls	r1, r3, #13
   15058:	d509      	bpl.n	1506e <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1505a:	4b1e      	ldr	r3, [pc, #120]	; (150d4 <usage_fault.constprop.0+0xec>)
   1505c:	9305      	str	r3, [sp, #20]
   1505e:	4818      	ldr	r0, [pc, #96]	; (150c0 <usage_fault.constprop.0+0xd8>)
   15060:	2302      	movs	r3, #2
   15062:	aa04      	add	r2, sp, #16
   15064:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15068:	9304      	str	r3, [sp, #16]
   1506a:	f013 fb33 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1506e:	4b15      	ldr	r3, [pc, #84]	; (150c4 <usage_fault.constprop.0+0xdc>)
   15070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15072:	039a      	lsls	r2, r3, #14
   15074:	d509      	bpl.n	1508a <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15076:	4b18      	ldr	r3, [pc, #96]	; (150d8 <usage_fault.constprop.0+0xf0>)
   15078:	9305      	str	r3, [sp, #20]
   1507a:	4811      	ldr	r0, [pc, #68]	; (150c0 <usage_fault.constprop.0+0xd8>)
   1507c:	2302      	movs	r3, #2
   1507e:	aa04      	add	r2, sp, #16
   15080:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15084:	9304      	str	r3, [sp, #16]
   15086:	f013 fb25 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1508a:	4b0e      	ldr	r3, [pc, #56]	; (150c4 <usage_fault.constprop.0+0xdc>)
   1508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1508e:	03db      	lsls	r3, r3, #15
   15090:	d509      	bpl.n	150a6 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15092:	4b12      	ldr	r3, [pc, #72]	; (150dc <usage_fault.constprop.0+0xf4>)
   15094:	9305      	str	r3, [sp, #20]
   15096:	480a      	ldr	r0, [pc, #40]	; (150c0 <usage_fault.constprop.0+0xd8>)
   15098:	2302      	movs	r3, #2
   1509a:	aa04      	add	r2, sp, #16
   1509c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150a0:	9304      	str	r3, [sp, #16]
   150a2:	f013 fb17 	bl	286d4 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   150a6:	4a07      	ldr	r2, [pc, #28]	; (150c4 <usage_fault.constprop.0+0xdc>)
   150a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   150aa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   150ae:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   150b2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   150b4:	6293      	str	r3, [r2, #40]	; 0x28
}
   150b6:	b006      	add	sp, #24
   150b8:	bd10      	pop	{r4, pc}
   150ba:	bf00      	nop
   150bc:	0002dd8d 	.word	0x0002dd8d
   150c0:	0002c84c 	.word	0x0002c84c
   150c4:	e000ed00 	.word	0xe000ed00
   150c8:	0002dda5 	.word	0x0002dda5
   150cc:	0002ddb8 	.word	0x0002ddb8
   150d0:	0002ddd2 	.word	0x0002ddd2
   150d4:	0002ddf0 	.word	0x0002ddf0
   150d8:	0002de15 	.word	0x0002de15
   150dc:	0002de2f 	.word	0x0002de2f

000150e0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   150e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   150e4:	4b7b      	ldr	r3, [pc, #492]	; (152d4 <z_arm_fault+0x1f4>)
{
   150e6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   150e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   150ec:	af00      	add	r7, sp, #0
   150ee:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   150f0:	f3c8 0408 	ubfx	r4, r8, #0, #9
   150f4:	2600      	movs	r6, #0
   150f6:	f386 8811 	msr	BASEPRI, r6
   150fa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   150fe:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15102:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15106:	d10e      	bne.n	15126 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15108:	f002 030c 	and.w	r3, r2, #12
   1510c:	2b08      	cmp	r3, #8
   1510e:	d10c      	bne.n	1512a <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15110:	4b71      	ldr	r3, [pc, #452]	; (152d8 <z_arm_fault+0x1f8>)
   15112:	61fb      	str	r3, [r7, #28]
   15114:	4871      	ldr	r0, [pc, #452]	; (152dc <z_arm_fault+0x1fc>)
   15116:	2302      	movs	r3, #2
   15118:	f107 0218 	add.w	r2, r7, #24
   1511c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15120:	61bb      	str	r3, [r7, #24]
   15122:	f013 fad7 	bl	286d4 <z_log_msg_static_create.constprop.0>
		return NULL;
   15126:	4635      	mov	r5, r6
   15128:	e003      	b.n	15132 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1512a:	0712      	lsls	r2, r2, #28
   1512c:	d401      	bmi.n	15132 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   1512e:	4605      	mov	r5, r0
			*nested_exc = true;
   15130:	2601      	movs	r6, #1
	*recoverable = false;
   15132:	2300      	movs	r3, #0
   15134:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   15136:	1ee3      	subs	r3, r4, #3
   15138:	2b09      	cmp	r3, #9
   1513a:	f200 80aa 	bhi.w	15292 <z_arm_fault+0x1b2>
   1513e:	e8df f003 	tbb	[pc, r3]
   15142:	9d05      	.short	0x9d05
   15144:	a8a89aa0 	.word	0xa8a89aa0
   15148:	a3a8a8a8 	.word	0xa3a8a8a8
	PR_FAULT_INFO("***** HARD FAULT *****");
   1514c:	46e9      	mov	r9, sp
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1514e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 152d4 <z_arm_fault+0x1f4>
	PR_FAULT_INFO("***** HARD FAULT *****");
   15152:	4b63      	ldr	r3, [pc, #396]	; (152e0 <z_arm_fault+0x200>)
   15154:	4861      	ldr	r0, [pc, #388]	; (152dc <z_arm_fault+0x1fc>)
   15156:	61fb      	str	r3, [r7, #28]
   15158:	f04f 0a02 	mov.w	sl, #2
   1515c:	f107 0218 	add.w	r2, r7, #24
   15160:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15164:	f8c7 a018 	str.w	sl, [r7, #24]
   15168:	f013 fab4 	bl	286d4 <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1516c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   15170:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15174:	ea14 040a 	ands.w	r4, r4, sl
	*recoverable = false;
   15178:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1517c:	d00b      	beq.n	15196 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
   1517e:	4b59      	ldr	r3, [pc, #356]	; (152e4 <z_arm_fault+0x204>)
   15180:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   15184:	4855      	ldr	r0, [pc, #340]	; (152dc <z_arm_fault+0x1fc>)
   15186:	f107 0218 	add.w	r2, r7, #24
   1518a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1518e:	f013 faa1 	bl	286d4 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15192:	2400      	movs	r4, #0
}
   15194:	e00d      	b.n	151b2 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15196:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   1519a:	2b00      	cmp	r3, #0
   1519c:	da2b      	bge.n	151f6 <z_arm_fault+0x116>
		PR_EXC("  Debug event");
   1519e:	4b52      	ldr	r3, [pc, #328]	; (152e8 <z_arm_fault+0x208>)
   151a0:	484e      	ldr	r0, [pc, #312]	; (152dc <z_arm_fault+0x1fc>)
   151a2:	f107 0218 	add.w	r2, r7, #24
   151a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151aa:	e9c7 a306 	strd	sl, r3, [r7, #24]
   151ae:	f013 fa91 	bl	286d4 <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   151b2:	79fb      	ldrb	r3, [r7, #7]
   151b4:	b9db      	cbnz	r3, 151ee <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   151b6:	f107 0208 	add.w	r2, r7, #8
   151ba:	f105 0c20 	add.w	ip, r5, #32
   151be:	6828      	ldr	r0, [r5, #0]
   151c0:	6869      	ldr	r1, [r5, #4]
   151c2:	4613      	mov	r3, r2
   151c4:	c303      	stmia	r3!, {r0, r1}
   151c6:	3508      	adds	r5, #8
   151c8:	4565      	cmp	r5, ip
   151ca:	461a      	mov	r2, r3
   151cc:	d1f7      	bne.n	151be <z_arm_fault+0xde>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151d0:	2e00      	cmp	r6, #0
   151d2:	d079      	beq.n	152c8 <z_arm_fault+0x1e8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   151d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   151d8:	b922      	cbnz	r2, 151e4 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   151da:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   151de:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   151e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   151e4:	f107 0108 	add.w	r1, r7, #8
   151e8:	4620      	mov	r0, r4
   151ea:	f7ff fc3f 	bl	14a6c <z_arm_fatal_error>
}
   151ee:	372c      	adds	r7, #44	; 0x2c
   151f0:	46bd      	mov	sp, r7
   151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   151f6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   151fa:	005b      	lsls	r3, r3, #1
   151fc:	d5d9      	bpl.n	151b2 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
   151fe:	4b3b      	ldr	r3, [pc, #236]	; (152ec <z_arm_fault+0x20c>)
   15200:	4836      	ldr	r0, [pc, #216]	; (152dc <z_arm_fault+0x1fc>)
   15202:	f107 0218 	add.w	r2, r7, #24
   15206:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1520a:	e9c7 a306 	strd	sl, r3, [r7, #24]
   1520e:	f013 fa61 	bl	286d4 <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   15212:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15214:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   15218:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1521c:	429a      	cmp	r2, r3
   1521e:	d009      	beq.n	15234 <z_arm_fault+0x154>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15220:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   15224:	b2db      	uxtb	r3, r3
   15226:	b1b3      	cbz	r3, 15256 <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
   15228:	1df9      	adds	r1, r7, #7
   1522a:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1522c:	f7ff fda8 	bl	14d80 <mem_manage_fault.constprop.0>
   15230:	4604      	mov	r4, r0
		break;
   15232:	e7be      	b.n	151b2 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15234:	b088      	sub	sp, #32
   15236:	682b      	ldr	r3, [r5, #0]
   15238:	466a      	mov	r2, sp
   1523a:	492d      	ldr	r1, [pc, #180]	; (152f0 <z_arm_fault+0x210>)
   1523c:	4827      	ldr	r0, [pc, #156]	; (152dc <z_arm_fault+0x1fc>)
   1523e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15242:	2303      	movs	r3, #3
   15244:	f842 3f10 	str.w	r3, [r2, #16]!
   15248:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1524c:	f013 fa42 	bl	286d4 <z_log_msg_static_create.constprop.0>
   15250:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   15252:	682c      	ldr	r4, [r5, #0]
   15254:	e7ad      	b.n	151b2 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15256:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1525a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1525e:	d004      	beq.n	1526a <z_arm_fault+0x18a>
			reason = bus_fault(esf, 1, recoverable);
   15260:	1df9      	adds	r1, r7, #7
   15262:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15264:	f7ff fe28 	bl	14eb8 <bus_fault.constprop.0>
   15268:	e7e2      	b.n	15230 <z_arm_fault+0x150>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1526a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1526e:	0c1b      	lsrs	r3, r3, #16
   15270:	041b      	lsls	r3, r3, #16
   15272:	2b00      	cmp	r3, #0
   15274:	d09d      	beq.n	151b2 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
   15276:	f7ff feb7 	bl	14fe8 <usage_fault.constprop.0>
   1527a:	e7d9      	b.n	15230 <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
   1527c:	1df9      	adds	r1, r7, #7
   1527e:	2000      	movs	r0, #0
   15280:	e7d4      	b.n	1522c <z_arm_fault+0x14c>
		reason = bus_fault(esf, 0, recoverable);
   15282:	1df9      	adds	r1, r7, #7
   15284:	2000      	movs	r0, #0
   15286:	e7ed      	b.n	15264 <z_arm_fault+0x184>
	PR_FAULT_INFO(
   15288:	4b1a      	ldr	r3, [pc, #104]	; (152f4 <z_arm_fault+0x214>)
   1528a:	61fb      	str	r3, [r7, #28]
   1528c:	2302      	movs	r3, #2
   1528e:	61bb      	str	r3, [r7, #24]
   15290:	e778      	b.n	15184 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
   15292:	4a19      	ldr	r2, [pc, #100]	; (152f8 <z_arm_fault+0x218>)
   15294:	4b19      	ldr	r3, [pc, #100]	; (152fc <z_arm_fault+0x21c>)
   15296:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1529a:	46e8      	mov	r8, sp
   1529c:	b08a      	sub	sp, #40	; 0x28
   1529e:	bf18      	it	ne
   152a0:	4613      	movne	r3, r2
   152a2:	466a      	mov	r2, sp
   152a4:	4916      	ldr	r1, [pc, #88]	; (15300 <z_arm_fault+0x220>)
   152a6:	480d      	ldr	r0, [pc, #52]	; (152dc <z_arm_fault+0x1fc>)
   152a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   152ac:	2302      	movs	r3, #2
   152ae:	f882 3020 	strb.w	r3, [r2, #32]
   152b2:	3c10      	subs	r4, #16
   152b4:	4b13      	ldr	r3, [pc, #76]	; (15304 <z_arm_fault+0x224>)
   152b6:	61d4      	str	r4, [r2, #28]
   152b8:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   152bc:	f842 3f10 	str.w	r3, [r2, #16]!
   152c0:	f013 fa08 	bl	286d4 <z_log_msg_static_create.constprop.0>
   152c4:	46c5      	mov	sp, r8
   152c6:	e764      	b.n	15192 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   152c8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   152cc:	f023 0301 	bic.w	r3, r3, #1
   152d0:	e787      	b.n	151e2 <z_arm_fault+0x102>
   152d2:	bf00      	nop
   152d4:	e000ed00 	.word	0xe000ed00
   152d8:	0002de88 	.word	0x0002de88
   152dc:	0002c84c 	.word	0x0002c84c
   152e0:	0002deb3 	.word	0x0002deb3
   152e4:	0002deca 	.word	0x0002deca
   152e8:	0002deeb 	.word	0x0002deeb
   152ec:	0002def9 	.word	0x0002def9
   152f0:	0002df18 	.word	0x0002df18
   152f4:	0002df34 	.word	0x0002df34
   152f8:	0002de6f 	.word	0x0002de6f
   152fc:	0002de5a 	.word	0x0002de5a
   15300:	0002df58 	.word	0x0002df58
   15304:	01000004 	.word	0x01000004

00015308 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15308:	4a02      	ldr	r2, [pc, #8]	; (15314 <z_arm_fault_init+0xc>)
   1530a:	6953      	ldr	r3, [r2, #20]
   1530c:	f043 0310 	orr.w	r3, r3, #16
   15310:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15312:	4770      	bx	lr
   15314:	e000ed00 	.word	0xe000ed00

00015318 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15318:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1531c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15320:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15322:	4672      	mov	r2, lr
	bl z_arm_fault
   15324:	f7ff fedc 	bl	150e0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15328:	bd01      	pop	{r0, pc}
   1532a:	bf00      	nop

0001532c <z_arm_interrupt_init>:
   1532c:	4804      	ldr	r0, [pc, #16]	; (15340 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1532e:	2300      	movs	r3, #0
   15330:	2140      	movs	r1, #64	; 0x40
   15332:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15334:	3301      	adds	r3, #1
   15336:	2b30      	cmp	r3, #48	; 0x30
   15338:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1533c:	d1f9      	bne.n	15332 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1533e:	4770      	bx	lr
   15340:	e000e100 	.word	0xe000e100

00015344 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15344:	2000      	movs	r0, #0
    msr CONTROL, r0
   15346:	f380 8814 	msr	CONTROL, r0
    isb
   1534a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1534e:	f7fe fa1b 	bl	13788 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15352:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15354:	490d      	ldr	r1, [pc, #52]	; (1538c <__start+0x48>)
    str r0, [r1]
   15356:	6008      	str	r0, [r1, #0]
    dsb
   15358:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1535c:	480c      	ldr	r0, [pc, #48]	; (15390 <__start+0x4c>)
    msr msp, r0
   1535e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15362:	f000 f82b 	bl	153bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15366:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15368:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1536c:	4809      	ldr	r0, [pc, #36]	; (15394 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1536e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   15372:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15374:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15378:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1537c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1537e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15380:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15384:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15388:	f7ff fc34 	bl	14bf4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1538c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15390:	20006350 	.word	0x20006350
    ldr r0, =z_interrupt_stacks
   15394:	20006490 	.word	0x20006490

00015398 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15398:	4907      	ldr	r1, [pc, #28]	; (153b8 <z_arm_clear_arm_mpu_config+0x20>)
   1539a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1539e:	2300      	movs	r3, #0
	int num_regions =
   153a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   153a4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   153a6:	4293      	cmp	r3, r2
   153a8:	d100      	bne.n	153ac <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   153aa:	4770      	bx	lr
  MPU->RNR = rnr;
   153ac:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   153b0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   153b4:	3301      	adds	r3, #1
   153b6:	e7f6      	b.n	153a6 <z_arm_clear_arm_mpu_config+0xe>
   153b8:	e000ed00 	.word	0xe000ed00

000153bc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   153bc:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   153be:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   153c0:	2300      	movs	r3, #0
   153c2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   153c6:	f7ff ffe7 	bl	15398 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   153ca:	4b14      	ldr	r3, [pc, #80]	; (1541c <z_arm_init_arch_hw_at_boot+0x60>)
   153cc:	f04f 32ff 	mov.w	r2, #4294967295
   153d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   153d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   153d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   153dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   153e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   153e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   153e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   153ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   153f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   153f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   153f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   153fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15400:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   15404:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   15408:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1540c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15410:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15412:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15416:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1541a:	bd08      	pop	{r3, pc}
   1541c:	e000e100 	.word	0xe000e100

00015420 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15420:	4b08      	ldr	r3, [pc, #32]	; (15444 <z_impl_k_thread_abort+0x24>)
   15422:	689b      	ldr	r3, [r3, #8]
   15424:	4283      	cmp	r3, r0
   15426:	d10b      	bne.n	15440 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15428:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1542c:	b143      	cbz	r3, 15440 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1542e:	4b06      	ldr	r3, [pc, #24]	; (15448 <z_impl_k_thread_abort+0x28>)
   15430:	685a      	ldr	r2, [r3, #4]
   15432:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15436:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1543a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1543e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15440:	f00d b88e 	b.w	22560 <z_thread_abort>
   15444:	20003274 	.word	0x20003274
   15448:	e000ed00 	.word	0xe000ed00

0001544c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1544c:	4b02      	ldr	r3, [pc, #8]	; (15458 <z_arm_configure_static_mpu_regions+0xc>)
   1544e:	4a03      	ldr	r2, [pc, #12]	; (1545c <z_arm_configure_static_mpu_regions+0x10>)
   15450:	4803      	ldr	r0, [pc, #12]	; (15460 <z_arm_configure_static_mpu_regions+0x14>)
   15452:	2101      	movs	r1, #1
   15454:	f000 b880 	b.w	15558 <arm_core_mpu_configure_static_mpu_regions>
   15458:	20040000 	.word	0x20040000
   1545c:	20000000 	.word	0x20000000
   15460:	0002ceb8 	.word	0x0002ceb8

00015464 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15466:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 1551c <mpu_configure_regions+0xb8>
   1546a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1546c:	2500      	movs	r5, #0
   1546e:	428d      	cmp	r5, r1
   15470:	da1a      	bge.n	154a8 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
   15472:	6844      	ldr	r4, [r0, #4]
   15474:	2c00      	cmp	r4, #0
   15476:	d04d      	beq.n	15514 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15478:	b1fb      	cbz	r3, 154ba <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1547a:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1547e:	ea14 0f0e 	tst.w	r4, lr
   15482:	d014      	beq.n	154ae <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15484:	466c      	mov	r4, sp
   15486:	b088      	sub	sp, #32
   15488:	466a      	mov	r2, sp
   1548a:	4b25      	ldr	r3, [pc, #148]	; (15520 <mpu_configure_regions+0xbc>)
   1548c:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15490:	2303      	movs	r3, #3
   15492:	f842 3f10 	str.w	r3, [r2, #16]!
   15496:	4823      	ldr	r0, [pc, #140]	; (15524 <mpu_configure_regions+0xc0>)
   15498:	2300      	movs	r3, #0
   1549a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1549e:	f7fe fbef 	bl	13c80 <z_impl_z_log_msg_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   154a2:	f06f 0215 	mvn.w	r2, #21
   154a6:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   154a8:	4610      	mov	r0, r2
   154aa:	46bd      	mov	sp, r7
   154ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   154ae:	2c1f      	cmp	r4, #31
   154b0:	d9e8      	bls.n	15484 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
   154b2:	6806      	ldr	r6, [r0, #0]
		&&
   154b4:	ea1e 0f06 	tst.w	lr, r6
   154b8:	d1e4      	bne.n	15484 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   154ba:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   154bc:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   154be:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   154c2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   154c4:	d914      	bls.n	154f0 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
   154c6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   154ca:	d813      	bhi.n	154f4 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   154cc:	3c01      	subs	r4, #1
   154ce:	fab4 f484 	clz	r4, r4
   154d2:	f1c4 041f 	rsb	r4, r4, #31
   154d6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   154d8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   154da:	ea4e 0404 	orr.w	r4, lr, r4
   154de:	d90b      	bls.n	154f8 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   154e0:	466c      	mov	r4, sp
   154e2:	b088      	sub	sp, #32
   154e4:	466b      	mov	r3, sp
   154e6:	4910      	ldr	r1, [pc, #64]	; (15528 <mpu_configure_regions+0xc4>)
   154e8:	e9c3 1205 	strd	r1, r2, [r3, #20]
   154ec:	461a      	mov	r2, r3
   154ee:	e7cf      	b.n	15490 <mpu_configure_regions+0x2c>
		return REGION_32B;
   154f0:	2408      	movs	r4, #8
   154f2:	e7f1      	b.n	154d8 <mpu_configure_regions+0x74>
		return REGION_4G;
   154f4:	243e      	movs	r4, #62	; 0x3e
   154f6:	e7ef      	b.n	154d8 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   154f8:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   154fc:	4316      	orrs	r6, r2
   154fe:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15502:	f044 0401 	orr.w	r4, r4, #1
   15506:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1550a:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
   1550e:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15510:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15514:	3501      	adds	r5, #1
   15516:	300c      	adds	r0, #12
   15518:	e7a9      	b.n	1546e <mpu_configure_regions+0xa>
   1551a:	bf00      	nop
   1551c:	e000ed00 	.word	0xe000ed00
   15520:	0002df6f 	.word	0x0002df6f
   15524:	0002c83c 	.word	0x0002c83c
   15528:	0002df92 	.word	0x0002df92

0001552c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1552c:	4b04      	ldr	r3, [pc, #16]	; (15540 <arm_core_mpu_enable+0x14>)
   1552e:	2205      	movs	r2, #5
   15530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15538:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1553c:	4770      	bx	lr
   1553e:	bf00      	nop
   15540:	e000ed00 	.word	0xe000ed00

00015544 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15544:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15548:	4b02      	ldr	r3, [pc, #8]	; (15554 <arm_core_mpu_disable+0x10>)
   1554a:	2200      	movs	r2, #0
   1554c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15550:	4770      	bx	lr
   15552:	bf00      	nop
   15554:	e000ed00 	.word	0xe000ed00

00015558 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15558:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1555a:	4c03      	ldr	r4, [pc, #12]	; (15568 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1555c:	2301      	movs	r3, #1
   1555e:	7822      	ldrb	r2, [r4, #0]
   15560:	f7ff ff80 	bl	15464 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15564:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15566:	bd10      	pop	{r4, pc}
   15568:	20003dca 	.word	0x20003dca

0001556c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1556c:	4914      	ldr	r1, [pc, #80]	; (155c0 <z_arm_mpu_init+0x54>)
   1556e:	6808      	ldr	r0, [r1, #0]
   15570:	2808      	cmp	r0, #8
{
   15572:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15574:	d821      	bhi.n	155ba <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15576:	f7ff ffe5 	bl	15544 <arm_core_mpu_disable>
   1557a:	4c12      	ldr	r4, [pc, #72]	; (155c4 <z_arm_mpu_init+0x58>)
   1557c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1557e:	2200      	movs	r2, #0
   15580:	4290      	cmp	r0, r2
   15582:	f101 010c 	add.w	r1, r1, #12
   15586:	d105      	bne.n	15594 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15588:	4b0f      	ldr	r3, [pc, #60]	; (155c8 <z_arm_mpu_init+0x5c>)
   1558a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1558c:	f7ff ffce 	bl	1552c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15590:	2000      	movs	r0, #0
}
   15592:	bd10      	pop	{r4, pc}
   15594:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15598:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1559c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   155a0:	4313      	orrs	r3, r2
   155a2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   155a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   155aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   155ae:	f043 0301 	orr.w	r3, r3, #1
   155b2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   155b6:	3201      	adds	r2, #1
   155b8:	e7e2      	b.n	15580 <z_arm_mpu_init+0x14>
		return -1;
   155ba:	f04f 30ff 	mov.w	r0, #4294967295
   155be:	e7e8      	b.n	15592 <z_arm_mpu_init+0x26>
   155c0:	0002cec4 	.word	0x0002cec4
   155c4:	e000ed00 	.word	0xe000ed00
   155c8:	20003dca 	.word	0x20003dca

000155cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   155cc:	4b01      	ldr	r3, [pc, #4]	; (155d4 <__stdout_hook_install+0x8>)
   155ce:	6018      	str	r0, [r3, #0]
}
   155d0:	4770      	bx	lr
   155d2:	bf00      	nop
   155d4:	20000698 	.word	0x20000698

000155d8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   155d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
   155da:	4f08      	ldr	r7, [pc, #32]	; (155fc <z_impl_zephyr_read_stdin+0x24>)
{
   155dc:	4606      	mov	r6, r0
   155de:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
   155e0:	2400      	movs	r4, #0
   155e2:	42ac      	cmp	r4, r5
   155e4:	da08      	bge.n	155f8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   155e6:	683b      	ldr	r3, [r7, #0]
   155e8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   155ea:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   155ec:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   155ee:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   155f2:	d001      	beq.n	155f8 <z_impl_zephyr_read_stdin+0x20>
   155f4:	280d      	cmp	r0, #13
   155f6:	d1f4      	bne.n	155e2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   155f8:	4620      	mov	r0, r4
   155fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155fc:	20000694 	.word	0x20000694

00015600 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15602:	4f0a      	ldr	r7, [pc, #40]	; (1562c <z_impl_zephyr_write_stdout+0x2c>)
   15604:	460d      	mov	r5, r1
   15606:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15608:	f1c0 0401 	rsb	r4, r0, #1
   1560c:	19a3      	adds	r3, r4, r6
   1560e:	429d      	cmp	r5, r3
   15610:	dc01      	bgt.n	15616 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   15612:	4628      	mov	r0, r5
   15614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   15616:	7873      	ldrb	r3, [r6, #1]
   15618:	2b0a      	cmp	r3, #10
   1561a:	d102      	bne.n	15622 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1561c:	683b      	ldr	r3, [r7, #0]
   1561e:	200d      	movs	r0, #13
   15620:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   15622:	683b      	ldr	r3, [r7, #0]
   15624:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15628:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1562a:	e7ef      	b.n	1560c <z_impl_zephyr_write_stdout+0xc>
   1562c:	20000698 	.word	0x20000698

00015630 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   15630:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   15632:	4c07      	ldr	r4, [pc, #28]	; (15650 <_sbrk+0x20>)
   15634:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   15636:	18c2      	adds	r2, r0, r3
   15638:	4806      	ldr	r0, [pc, #24]	; (15654 <_sbrk+0x24>)
   1563a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1563e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   15642:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   15644:	bf3a      	itte	cc
   15646:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   15648:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1564a:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   1564e:	bd10      	pop	{r4, pc}
   15650:	20002db8 	.word	0x20002db8
   15654:	20007f67 	.word	0x20007f67

00015658 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   15658:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1565a:	211d      	movs	r1, #29
   1565c:	4804      	ldr	r0, [pc, #16]	; (15670 <__chk_fail+0x18>)
   1565e:	f7ff ffcf 	bl	15600 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   15662:	4040      	eors	r0, r0
   15664:	f380 8811 	msr	BASEPRI, r0
   15668:	f04f 0003 	mov.w	r0, #3
   1566c:	df02      	svc	2
	CODE_UNREACHABLE;
   1566e:	bf00      	nop
   15670:	0002dfb8 	.word	0x0002dfb8

00015674 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15674:	f04f 0340 	mov.w	r3, #64	; 0x40
   15678:	f3ef 8211 	mrs	r2, BASEPRI
   1567c:	f383 8812 	msr	BASEPRI_MAX, r3
   15680:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15684:	4906      	ldr	r1, [pc, #24]	; (156a0 <nordicsemi_nrf52_init+0x2c>)
   15686:	2301      	movs	r3, #1
   15688:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1568c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15690:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15694:	f382 8811 	msr	BASEPRI, r2
   15698:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1569c:	2000      	movs	r0, #0
   1569e:	4770      	bx	lr
   156a0:	4001e000 	.word	0x4001e000

000156a4 <sys_arch_reboot>:
    *p_gpregret = val;
   156a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156a8:	b2c0      	uxtb	r0, r0
   156aa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   156ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   156b2:	4905      	ldr	r1, [pc, #20]	; (156c8 <sys_arch_reboot+0x24>)
   156b4:	4b05      	ldr	r3, [pc, #20]	; (156cc <sys_arch_reboot+0x28>)
   156b6:	68ca      	ldr	r2, [r1, #12]
   156b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   156bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   156be:	60cb      	str	r3, [r1, #12]
   156c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   156c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   156c6:	e7fd      	b.n	156c4 <sys_arch_reboot+0x20>
   156c8:	e000ed00 	.word	0xe000ed00
   156cc:	05fa0004 	.word	0x05fa0004

000156d0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   156d0:	b120      	cbz	r0, 156dc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   156d2:	4b03      	ldr	r3, [pc, #12]	; (156e0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   156d4:	0180      	lsls	r0, r0, #6
   156d6:	f043 0301 	orr.w	r3, r3, #1
   156da:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   156dc:	4770      	bx	lr
   156de:	bf00      	nop
   156e0:	0002cbc0 	.word	0x0002cbc0

000156e4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   156e4:	4b0e      	ldr	r3, [pc, #56]	; (15720 <bt_hex_real+0x3c>)
   156e6:	2940      	cmp	r1, #64	; 0x40
{
   156e8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   156ea:	bf28      	it	cs
   156ec:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   156ee:	4c0d      	ldr	r4, [pc, #52]	; (15724 <bt_hex_real+0x40>)
   156f0:	1846      	adds	r6, r0, r1
   156f2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   156f4:	42b0      	cmp	r0, r6
   156f6:	f103 0302 	add.w	r3, r3, #2
   156fa:	d104      	bne.n	15706 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   156fc:	2300      	movs	r3, #0
   156fe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15702:	4807      	ldr	r0, [pc, #28]	; (15720 <bt_hex_real+0x3c>)
   15704:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   15706:	7802      	ldrb	r2, [r0, #0]
   15708:	0912      	lsrs	r2, r2, #4
   1570a:	5ca2      	ldrb	r2, [r4, r2]
   1570c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15710:	f810 2b01 	ldrb.w	r2, [r0], #1
   15714:	f002 020f 	and.w	r2, r2, #15
   15718:	5ca2      	ldrb	r2, [r4, r2]
   1571a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1571e:	e7e9      	b.n	156f4 <bt_hex_real+0x10>
   15720:	20003de9 	.word	0x20003de9
   15724:	0002e02e 	.word	0x0002e02e

00015728 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15728:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1572a:	7803      	ldrb	r3, [r0, #0]
   1572c:	b08b      	sub	sp, #44	; 0x2c
   1572e:	4604      	mov	r4, r0
   15730:	ad07      	add	r5, sp, #28
   15732:	2b03      	cmp	r3, #3
   15734:	d821      	bhi.n	1577a <bt_addr_le_str_real+0x52>
   15736:	e8df f003 	tbb	[pc, r3]
   1573a:	1a02      	.short	0x1a02
   1573c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1573e:	4912      	ldr	r1, [pc, #72]	; (15788 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   15740:	4628      	mov	r0, r5
   15742:	f016 fd01 	bl	2c148 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15746:	7863      	ldrb	r3, [r4, #1]
   15748:	9304      	str	r3, [sp, #16]
   1574a:	78a3      	ldrb	r3, [r4, #2]
   1574c:	9303      	str	r3, [sp, #12]
   1574e:	78e3      	ldrb	r3, [r4, #3]
   15750:	9302      	str	r3, [sp, #8]
   15752:	7923      	ldrb	r3, [r4, #4]
   15754:	9301      	str	r3, [sp, #4]
   15756:	7963      	ldrb	r3, [r4, #5]
   15758:	9300      	str	r3, [sp, #0]
   1575a:	4a0c      	ldr	r2, [pc, #48]	; (1578c <bt_addr_le_str_real+0x64>)
   1575c:	79a3      	ldrb	r3, [r4, #6]
   1575e:	9505      	str	r5, [sp, #20]
   15760:	211e      	movs	r1, #30
   15762:	480b      	ldr	r0, [pc, #44]	; (15790 <bt_addr_le_str_real+0x68>)
   15764:	f011 ffd7 	bl	27716 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15768:	4809      	ldr	r0, [pc, #36]	; (15790 <bt_addr_le_str_real+0x68>)
   1576a:	b00b      	add	sp, #44	; 0x2c
   1576c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1576e:	4909      	ldr	r1, [pc, #36]	; (15794 <bt_addr_le_str_real+0x6c>)
   15770:	e7e6      	b.n	15740 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   15772:	4909      	ldr	r1, [pc, #36]	; (15798 <bt_addr_le_str_real+0x70>)
   15774:	e7e4      	b.n	15740 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   15776:	4909      	ldr	r1, [pc, #36]	; (1579c <bt_addr_le_str_real+0x74>)
   15778:	e7e2      	b.n	15740 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1577a:	4a09      	ldr	r2, [pc, #36]	; (157a0 <bt_addr_le_str_real+0x78>)
   1577c:	210a      	movs	r1, #10
   1577e:	4628      	mov	r0, r5
   15780:	f011 ffc9 	bl	27716 <snprintk>
		break;
   15784:	e7df      	b.n	15746 <bt_addr_le_str_real+0x1e>
   15786:	bf00      	nop
   15788:	0002dfe9 	.word	0x0002dfe9
   1578c:	0002e00b 	.word	0x0002e00b
   15790:	20003dcb 	.word	0x20003dcb
   15794:	0002dff0 	.word	0x0002dff0
   15798:	0002dff7 	.word	0x0002dff7
   1579c:	0002e001 	.word	0x0002e001
   157a0:	0002f783 	.word	0x0002f783

000157a4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   157a4:	b5b0      	push	{r4, r5, r7, lr}
   157a6:	b086      	sub	sp, #24
	int err;
	BT_INFO("Saving ID");
   157a8:	466d      	mov	r5, sp
{
   157aa:	af00      	add	r7, sp, #0
	BT_INFO("Saving ID");
   157ac:	4b1d      	ldr	r3, [pc, #116]	; (15824 <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   157ae:	4c1e      	ldr	r4, [pc, #120]	; (15828 <save_id+0x84>)
	BT_INFO("Saving ID");
   157b0:	481e      	ldr	r0, [pc, #120]	; (1582c <save_id+0x88>)
   157b2:	617b      	str	r3, [r7, #20]
   157b4:	f107 0210 	add.w	r2, r7, #16
   157b8:	2302      	movs	r3, #2
   157ba:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   157be:	613b      	str	r3, [r7, #16]
   157c0:	f013 f815 	bl	287ee <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   157c4:	79e2      	ldrb	r2, [r4, #7]
   157c6:	481a      	ldr	r0, [pc, #104]	; (15830 <save_id+0x8c>)
   157c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   157cc:	4621      	mov	r1, r4
   157ce:	f7fe fe8d 	bl	144ec <settings_save_one>
	if (err) {
   157d2:	b168      	cbz	r0, 157f0 <save_id+0x4c>
		BT_ERR("Failed to save ID (err %d)", err);
   157d4:	b088      	sub	sp, #32
   157d6:	466a      	mov	r2, sp
   157d8:	4b16      	ldr	r3, [pc, #88]	; (15834 <save_id+0x90>)
   157da:	e9c2 3005 	strd	r3, r0, [r2, #20]
   157de:	2303      	movs	r3, #3
   157e0:	f842 3f10 	str.w	r3, [r2, #16]!
   157e4:	4811      	ldr	r0, [pc, #68]	; (1582c <save_id+0x88>)
   157e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157ea:	f013 f800 	bl	287ee <z_log_msg_static_create.constprop.0>
   157ee:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   157f0:	79e2      	ldrb	r2, [r4, #7]
   157f2:	4911      	ldr	r1, [pc, #68]	; (15838 <save_id+0x94>)
   157f4:	4811      	ldr	r0, [pc, #68]	; (1583c <save_id+0x98>)
   157f6:	0112      	lsls	r2, r2, #4
   157f8:	f7fe fe78 	bl	144ec <settings_save_one>
	if (err) {
   157fc:	b170      	cbz	r0, 1581c <save_id+0x78>
		BT_ERR("Failed to save IRK (err %d)", err);
   157fe:	466c      	mov	r4, sp
   15800:	b088      	sub	sp, #32
   15802:	466a      	mov	r2, sp
   15804:	4b0e      	ldr	r3, [pc, #56]	; (15840 <save_id+0x9c>)
   15806:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1580a:	2303      	movs	r3, #3
   1580c:	f842 3f10 	str.w	r3, [r2, #16]!
   15810:	4806      	ldr	r0, [pc, #24]	; (1582c <save_id+0x88>)
   15812:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15816:	f012 ffea 	bl	287ee <z_log_msg_static_create.constprop.0>
   1581a:	46a5      	mov	sp, r4
	}
#endif
}
   1581c:	3718      	adds	r7, #24
   1581e:	46bd      	mov	sp, r7
   15820:	bdb0      	pop	{r4, r5, r7, pc}
   15822:	bf00      	nop
   15824:	0002e046 	.word	0x0002e046
   15828:	20000350 	.word	0x20000350
   1582c:	0002c7dc 	.word	0x0002c7dc
   15830:	0002e050 	.word	0x0002e050
   15834:	0002e056 	.word	0x0002e056
   15838:	200004b0 	.word	0x200004b0
   1583c:	0002e071 	.word	0x0002e071
   15840:	0002e078 	.word	0x0002e078

00015844 <set.part.0>:
static int set(const char *name, size_t len_rd, settings_read_cb read_cb,
   15844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15848:	b089      	sub	sp, #36	; 0x24
   1584a:	4605      	mov	r5, r0
   1584c:	af00      	add	r7, sp, #0
   1584e:	460e      	mov	r6, r1
   15850:	4690      	mov	r8, r2
	if (!name) {
   15852:	b968      	cbnz	r0, 15870 <set.part.0+0x2c>
		BT_ERR("Insufficient number of arguments");
   15854:	4b49      	ldr	r3, [pc, #292]	; (1597c <set.part.0+0x138>)
   15856:	61fb      	str	r3, [r7, #28]
   15858:	4849      	ldr	r0, [pc, #292]	; (15980 <set.part.0+0x13c>)
   1585a:	2302      	movs	r3, #2
   1585c:	f107 0218 	add.w	r2, r7, #24
   15860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15864:	61bb      	str	r3, [r7, #24]
   15866:	f012 ffc2 	bl	287ee <z_log_msg_static_create.constprop.0>
	return -ENOENT;
   1586a:	f06f 0401 	mvn.w	r4, #1
   1586e:	e020      	b.n	158b2 <set.part.0+0x6e>
	len = settings_name_next(name, &next);
   15870:	1d39      	adds	r1, r7, #4
   15872:	f012 fcdc 	bl	2822e <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15876:	4943      	ldr	r1, [pc, #268]	; (15984 <set.part.0+0x140>)
   15878:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   1587a:	4681      	mov	r9, r0
	if (!strncmp(name, "id", len)) {
   1587c:	4628      	mov	r0, r5
   1587e:	f016 fc6b 	bl	2c158 <strncmp>
   15882:	4604      	mov	r4, r0
   15884:	2800      	cmp	r0, #0
   15886:	d137      	bne.n	158f8 <set.part.0+0xb4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15888:	f3bf 8f5b 	dmb	ish
   1588c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 15988 <set.part.0+0x144>
   15890:	f8d9 3000 	ldr.w	r3, [r9]
   15894:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15898:	071b      	lsls	r3, r3, #28
   1589a:	d50f      	bpl.n	158bc <set.part.0+0x78>
			BT_WARN("Ignoring identities stored in flash");
   1589c:	4b3b      	ldr	r3, [pc, #236]	; (1598c <set.part.0+0x148>)
   1589e:	61fb      	str	r3, [r7, #28]
   158a0:	4837      	ldr	r0, [pc, #220]	; (15980 <set.part.0+0x13c>)
   158a2:	2302      	movs	r3, #2
   158a4:	f107 0218 	add.w	r2, r7, #24
   158a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   158ac:	61bb      	str	r3, [r7, #24]
   158ae:	f012 ff9e 	bl	287ee <z_log_msg_static_create.constprop.0>
}
   158b2:	4620      	mov	r0, r4
   158b4:	3724      	adds	r7, #36	; 0x24
   158b6:	46bd      	mov	sp, r7
   158b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   158bc:	f1a9 05cc 	sub.w	r5, r9, #204	; 0xcc
   158c0:	2207      	movs	r2, #7
   158c2:	4629      	mov	r1, r5
   158c4:	4640      	mov	r0, r8
   158c6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   158c8:	2806      	cmp	r0, #6
   158ca:	d810      	bhi.n	158ee <set.part.0+0xaa>
				BT_ERR("Invalid length ID address in storage");
   158cc:	4b30      	ldr	r3, [pc, #192]	; (15990 <set.part.0+0x14c>)
   158ce:	61fb      	str	r3, [r7, #28]
   158d0:	482b      	ldr	r0, [pc, #172]	; (15980 <set.part.0+0x13c>)
   158d2:	2302      	movs	r3, #2
   158d4:	f107 0218 	add.w	r2, r7, #24
   158d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158dc:	61bb      	str	r3, [r7, #24]
   158de:	f012 ff86 	bl	287ee <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   158e2:	f849 4ccc 	str.w	r4, [r9, #-204]
			bt_dev.id_count = 0U;
   158e6:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
   158e8:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
   158ec:	e7e1      	b.n	158b2 <set.part.0+0x6e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   158ee:	2307      	movs	r3, #7
   158f0:	fbb0 f0f3 	udiv	r0, r0, r3
   158f4:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   158f6:	e7dc      	b.n	158b2 <set.part.0+0x6e>
	if (!strncmp(name, "name", len)) {
   158f8:	4926      	ldr	r1, [pc, #152]	; (15994 <set.part.0+0x150>)
   158fa:	464a      	mov	r2, r9
   158fc:	4628      	mov	r0, r5
   158fe:	f016 fc2b 	bl	2c158 <strncmp>
   15902:	4604      	mov	r4, r0
   15904:	b9d0      	cbnz	r0, 1593c <set.part.0+0xf8>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   15906:	4924      	ldr	r1, [pc, #144]	; (15998 <set.part.0+0x154>)
   15908:	2241      	movs	r2, #65	; 0x41
   1590a:	4640      	mov	r0, r8
   1590c:	47b0      	blx	r6
		if (len < 0) {
   1590e:	2800      	cmp	r0, #0
   15910:	da0f      	bge.n	15932 <set.part.0+0xee>
			BT_ERR("Failed to read device name from storage"
   15912:	466d      	mov	r5, sp
   15914:	b088      	sub	sp, #32
   15916:	466a      	mov	r2, sp
   15918:	4b20      	ldr	r3, [pc, #128]	; (1599c <set.part.0+0x158>)
   1591a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1591e:	2303      	movs	r3, #3
   15920:	f842 3f10 	str.w	r3, [r2, #16]!
   15924:	4816      	ldr	r0, [pc, #88]	; (15980 <set.part.0+0x13c>)
   15926:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1592a:	f012 ff60 	bl	287ee <z_log_msg_static_create.constprop.0>
   1592e:	46ad      	mov	sp, r5
   15930:	e7bf      	b.n	158b2 <set.part.0+0x6e>
			bt_dev.name[len] = '\0';
   15932:	4b1b      	ldr	r3, [pc, #108]	; (159a0 <set.part.0+0x15c>)
   15934:	4418      	add	r0, r3
   15936:	f880 41a2 	strb.w	r4, [r0, #418]	; 0x1a2
			BT_DBG("Name set to %s", bt_dev.name);
   1593a:	e7ba      	b.n	158b2 <set.part.0+0x6e>
	if (!strncmp(name, "irk", len)) {
   1593c:	4919      	ldr	r1, [pc, #100]	; (159a4 <set.part.0+0x160>)
   1593e:	464a      	mov	r2, r9
   15940:	4628      	mov	r0, r5
   15942:	f016 fc09 	bl	2c158 <strncmp>
   15946:	4604      	mov	r4, r0
   15948:	2800      	cmp	r0, #0
   1594a:	d18e      	bne.n	1586a <set.part.0+0x26>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   1594c:	4916      	ldr	r1, [pc, #88]	; (159a8 <set.part.0+0x164>)
   1594e:	2210      	movs	r2, #16
   15950:	4640      	mov	r0, r8
   15952:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   15954:	280f      	cmp	r0, #15
   15956:	d8ac      	bhi.n	158b2 <set.part.0+0x6e>
				BT_ERR("Invalid length IRK in storage");
   15958:	4b14      	ldr	r3, [pc, #80]	; (159ac <set.part.0+0x168>)
   1595a:	61fb      	str	r3, [r7, #28]
   1595c:	f107 0218 	add.w	r2, r7, #24
   15960:	2302      	movs	r3, #2
   15962:	4807      	ldr	r0, [pc, #28]	; (15980 <set.part.0+0x13c>)
   15964:	61bb      	str	r3, [r7, #24]
   15966:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1596a:	f012 ff40 	bl	287ee <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   1596e:	2210      	movs	r2, #16
   15970:	4621      	mov	r1, r4
   15972:	480d      	ldr	r0, [pc, #52]	; (159a8 <set.part.0+0x164>)
   15974:	f016 fb4c 	bl	2c010 <memset>
   15978:	e79b      	b.n	158b2 <set.part.0+0x6e>
   1597a:	bf00      	nop
   1597c:	0002e094 	.word	0x0002e094
   15980:	0002c7dc 	.word	0x0002c7dc
   15984:	0002dffe 	.word	0x0002dffe
   15988:	2000041c 	.word	0x2000041c
   1598c:	0002e0b5 	.word	0x0002e0b5
   15990:	0002e0d9 	.word	0x0002e0d9
   15994:	0002e921 	.word	0x0002e921
   15998:	200004f2 	.word	0x200004f2
   1599c:	0002e0fe 	.word	0x0002e0fe
   159a0:	20000350 	.word	0x20000350
   159a4:	0002e074 	.word	0x0002e074
   159a8:	200004b0 	.word	0x200004b0
   159ac:	0002e130 	.word	0x0002e130

000159b0 <set>:
{
   159b0:	b410      	push	{r4}
   159b2:	4611      	mov	r1, r2
   159b4:	461a      	mov	r2, r3
   159b6:	4b07      	ldr	r3, [pc, #28]	; (159d4 <set+0x24>)
   159b8:	f3bf 8f5b 	dmb	ish
   159bc:	681c      	ldr	r4, [r3, #0]
   159be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   159c2:	f014 0401 	ands.w	r4, r4, #1
   159c6:	d002      	beq.n	159ce <set+0x1e>
}
   159c8:	bc10      	pop	{r4}
   159ca:	f7ff bf3b 	b.w	15844 <set.part.0>
   159ce:	4620      	mov	r0, r4
   159d0:	bc10      	pop	{r4}
   159d2:	4770      	bx	lr
   159d4:	2000041c 	.word	0x2000041c

000159d8 <bt_settings_encode_key>:
{
   159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159dc:	b088      	sub	sp, #32
		snprintk(path, path_size,
   159de:	799c      	ldrb	r4, [r3, #6]
{
   159e0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   159e4:	795d      	ldrb	r5, [r3, #5]
   159e6:	791e      	ldrb	r6, [r3, #4]
   159e8:	78df      	ldrb	r7, [r3, #3]
   159ea:	f893 c002 	ldrb.w	ip, [r3, #2]
   159ee:	f893 e001 	ldrb.w	lr, [r3, #1]
   159f2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   159f4:	f1b8 0f00 	cmp.w	r8, #0
   159f8:	d00e      	beq.n	15a18 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   159fa:	e9cd 3806 	strd	r3, r8, [sp, #24]
   159fe:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15a02:	4613      	mov	r3, r2
   15a04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15a08:	e9cd 4500 	strd	r4, r5, [sp]
   15a0c:	4a08      	ldr	r2, [pc, #32]	; (15a30 <bt_settings_encode_key+0x58>)
   15a0e:	f011 fe82 	bl	27716 <snprintk>
}
   15a12:	b008      	add	sp, #32
   15a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15a18:	e9cd e305 	strd	lr, r3, [sp, #20]
   15a1c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15a20:	4613      	mov	r3, r2
   15a22:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15a26:	4a03      	ldr	r2, [pc, #12]	; (15a34 <bt_settings_encode_key+0x5c>)
   15a28:	9400      	str	r4, [sp, #0]
   15a2a:	f011 fe74 	bl	27716 <snprintk>
}
   15a2e:	e7f0      	b.n	15a12 <bt_settings_encode_key+0x3a>
   15a30:	0002e14e 	.word	0x0002e14e
   15a34:	0002e172 	.word	0x0002e172

00015a38 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15a38:	4801      	ldr	r0, [pc, #4]	; (15a40 <bt_settings_save_id+0x8>)
   15a3a:	f00c b9dd 	b.w	21df8 <k_work_submit>
   15a3e:	bf00      	nop
   15a40:	2000069c 	.word	0x2000069c

00015a44 <commit.part.0>:
}

static int commit(void)
   15a44:	b530      	push	{r4, r5, lr}
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   15a46:	4d1f      	ldr	r5, [pc, #124]	; (15ac4 <commit.part.0+0x80>)
   15a48:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
static int commit(void)
   15a4c:	b087      	sub	sp, #28
	if (bt_dev.name[0] == '\0') {
   15a4e:	b913      	cbnz	r3, 15a56 <commit.part.0+0x12>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   15a50:	481d      	ldr	r0, [pc, #116]	; (15ac8 <commit.part.0+0x84>)
   15a52:	f001 fbcb 	bl	171ec <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   15a56:	79eb      	ldrb	r3, [r5, #7]
   15a58:	b9bb      	cbnz	r3, 15a8a <commit.part.0+0x46>
		err = bt_setup_public_id_addr();
   15a5a:	f001 ffef 	bl	17a3c <bt_setup_public_id_addr>
		if (err) {
   15a5e:	4604      	mov	r4, r0
   15a60:	b160      	cbz	r0, 15a7c <commit.part.0+0x38>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   15a62:	4b1a      	ldr	r3, [pc, #104]	; (15acc <commit.part.0+0x88>)
   15a64:	9305      	str	r3, [sp, #20]
   15a66:	481a      	ldr	r0, [pc, #104]	; (15ad0 <commit.part.0+0x8c>)
   15a68:	2302      	movs	r3, #2
   15a6a:	aa04      	add	r2, sp, #16
   15a6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a70:	9304      	str	r3, [sp, #16]
   15a72:	f012 febc 	bl	287ee <z_log_msg_static_create.constprop.0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15a76:	4620      	mov	r0, r4
   15a78:	b007      	add	sp, #28
   15a7a:	bd30      	pop	{r4, r5, pc}
	if (!bt_dev.id_count) {
   15a7c:	79eb      	ldrb	r3, [r5, #7]
   15a7e:	b923      	cbnz	r3, 15a8a <commit.part.0+0x46>
		err = bt_setup_random_id_addr();
   15a80:	f002 f880 	bl	17b84 <bt_setup_random_id_addr>
		if (err) {
   15a84:	4604      	mov	r4, r0
   15a86:	2800      	cmp	r0, #0
   15a88:	d1eb      	bne.n	15a62 <commit.part.0+0x1e>
   15a8a:	f3bf 8f5b 	dmb	ish
   15a8e:	4d11      	ldr	r5, [pc, #68]	; (15ad4 <commit.part.0+0x90>)
   15a90:	682b      	ldr	r3, [r5, #0]
   15a92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15a96:	075b      	lsls	r3, r3, #29
   15a98:	d401      	bmi.n	15a9e <commit.part.0+0x5a>
		bt_finalize_init();
   15a9a:	f001 faf5 	bl	17088 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a9e:	f3bf 8f5b 	dmb	ish
   15aa2:	e855 4f00 	ldrex	r4, [r5]
   15aa6:	f424 3380 	bic.w	r3, r4, #65536	; 0x10000
   15aaa:	e845 3200 	strex	r2, r3, [r5]
   15aae:	2a00      	cmp	r2, #0
   15ab0:	d1f7      	bne.n	15aa2 <commit.part.0+0x5e>
   15ab2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15ab6:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
   15aba:	d0dc      	beq.n	15a76 <commit.part.0+0x32>
		bt_settings_save_id();
   15abc:	f7ff ffbc 	bl	15a38 <bt_settings_save_id>
	return 0;
   15ac0:	2400      	movs	r4, #0
   15ac2:	e7d8      	b.n	15a76 <commit.part.0+0x32>
   15ac4:	20000350 	.word	0x20000350
   15ac8:	0002e193 	.word	0x0002e193
   15acc:	0002e1b6 	.word	0x0002e1b6
   15ad0:	0002c7dc 	.word	0x0002c7dc
   15ad4:	2000041c 	.word	0x2000041c

00015ad8 <commit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ad8:	4b05      	ldr	r3, [pc, #20]	; (15af0 <commit+0x18>)
   15ada:	f3bf 8f5b 	dmb	ish
   15ade:	6818      	ldr	r0, [r3, #0]
   15ae0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15ae4:	f010 0001 	ands.w	r0, r0, #1
   15ae8:	d001      	beq.n	15aee <commit+0x16>
   15aea:	f7ff bfab 	b.w	15a44 <commit.part.0>
}
   15aee:	4770      	bx	lr
   15af0:	2000041c 	.word	0x2000041c

00015af4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15af4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15af6:	4d0a      	ldr	r5, [pc, #40]	; (15b20 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15af8:	4b0a      	ldr	r3, [pc, #40]	; (15b24 <long_wq_init+0x30>)
{
   15afa:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15afc:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15afe:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15b00:	9302      	str	r3, [sp, #8]
   15b02:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15b04:	f015 ff03 	bl	2b90e <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15b08:	ab02      	add	r3, sp, #8
   15b0a:	9300      	str	r3, [sp, #0]
   15b0c:	4628      	mov	r0, r5
   15b0e:	4906      	ldr	r1, [pc, #24]	; (15b28 <long_wq_init+0x34>)
   15b10:	230a      	movs	r3, #10
   15b12:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15b16:	f00c f975 	bl	21e04 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15b1a:	4620      	mov	r0, r4
   15b1c:	b005      	add	sp, #20
   15b1e:	bd30      	pop	{r4, r5, pc}
   15b20:	20001e80 	.word	0x20001e80
   15b24:	0002e1e9 	.word	0x0002e1e9
   15b28:	20004dc8 	.word	0x20004dc8

00015b2c <bt_long_wq_schedule>:
{
   15b2c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15b2e:	4801      	ldr	r0, [pc, #4]	; (15b34 <bt_long_wq_schedule+0x8>)
   15b30:	f00c b9a0 	b.w	21e74 <k_work_schedule_for_queue>
   15b34:	20001e80 	.word	0x20001e80

00015b38 <bt_long_wq_reschedule>:
{
   15b38:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   15b3a:	4801      	ldr	r0, [pc, #4]	; (15b40 <bt_long_wq_reschedule+0x8>)
   15b3c:	f00c b9ca 	b.w	21ed4 <k_work_reschedule_for_queue>
   15b40:	20001e80 	.word	0x20001e80

00015b44 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   15b44:	7803      	ldrb	r3, [r0, #0]
   15b46:	2b01      	cmp	r3, #1
{
   15b48:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   15b4a:	d013      	beq.n	15b74 <uuid_to_uuid128+0x30>
   15b4c:	2b02      	cmp	r3, #2
   15b4e:	d027      	beq.n	15ba0 <uuid_to_uuid128+0x5c>
   15b50:	b97b      	cbnz	r3, 15b72 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15b52:	4b19      	ldr	r3, [pc, #100]	; (15bb8 <uuid_to_uuid128+0x74>)
   15b54:	460a      	mov	r2, r1
   15b56:	f103 0410 	add.w	r4, r3, #16
   15b5a:	f853 5b04 	ldr.w	r5, [r3], #4
   15b5e:	f842 5b04 	str.w	r5, [r2], #4
   15b62:	42a3      	cmp	r3, r4
   15b64:	d1f9      	bne.n	15b5a <uuid_to_uuid128+0x16>
   15b66:	781b      	ldrb	r3, [r3, #0]
   15b68:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15b6a:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   15b6c:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15b6e:	0a1b      	lsrs	r3, r3, #8
   15b70:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15b72:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   15b74:	4b10      	ldr	r3, [pc, #64]	; (15bb8 <uuid_to_uuid128+0x74>)
   15b76:	460a      	mov	r2, r1
   15b78:	f103 0410 	add.w	r4, r3, #16
   15b7c:	f853 5b04 	ldr.w	r5, [r3], #4
   15b80:	f842 5b04 	str.w	r5, [r2], #4
   15b84:	42a3      	cmp	r3, r4
   15b86:	d1f9      	bne.n	15b7c <uuid_to_uuid128+0x38>
   15b88:	781b      	ldrb	r3, [r3, #0]
   15b8a:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15b8c:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   15b8e:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15b90:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15b94:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15b96:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   15b98:	0a1b      	lsrs	r3, r3, #8
   15b9a:	738a      	strb	r2, [r1, #14]
   15b9c:	740b      	strb	r3, [r1, #16]
}
   15b9e:	e7e8      	b.n	15b72 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15ba0:	f100 0310 	add.w	r3, r0, #16
   15ba4:	f850 2b04 	ldr.w	r2, [r0], #4
   15ba8:	f841 2b04 	str.w	r2, [r1], #4
   15bac:	4298      	cmp	r0, r3
   15bae:	d1f9      	bne.n	15ba4 <uuid_to_uuid128+0x60>
   15bb0:	7803      	ldrb	r3, [r0, #0]
   15bb2:	700b      	strb	r3, [r1, #0]
   15bb4:	e7dd      	b.n	15b72 <uuid_to_uuid128+0x2e>
   15bb6:	bf00      	nop
   15bb8:	0002e1f2 	.word	0x0002e1f2

00015bbc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15bbc:	b538      	push	{r3, r4, r5, lr}
   15bbe:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15bc0:	4805      	ldr	r0, [pc, #20]	; (15bd8 <bt_buf_get_rx+0x1c>)
   15bc2:	f014 feea 	bl	2a99a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15bc6:	4604      	mov	r4, r0
   15bc8:	b120      	cbz	r0, 15bd4 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15bca:	2100      	movs	r1, #0
   15bcc:	3008      	adds	r0, #8
   15bce:	f014 ff09 	bl	2a9e4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15bd2:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15bd4:	4620      	mov	r0, r4
   15bd6:	bd38      	pop	{r3, r4, r5, pc}
   15bd8:	20000c84 	.word	0x20000c84

00015bdc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15bdc:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15bde:	490b      	ldr	r1, [pc, #44]	; (15c0c <bt_buf_get_cmd_complete+0x30>)
{
   15be0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15be2:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   15be6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   15be8:	b920      	cbnz	r0, 15bf4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15bee:	2001      	movs	r0, #1
   15bf0:	f7ff bfe4 	b.w	15bbc <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15bf4:	f014 ff50 	bl	2aa98 <net_buf_ref>
   15bf8:	2301      	movs	r3, #1
		buf->len = 0U;
   15bfa:	2100      	movs	r1, #0
   15bfc:	7503      	strb	r3, [r0, #20]
   15bfe:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15c00:	4604      	mov	r4, r0
   15c02:	3008      	adds	r0, #8
   15c04:	f014 feee 	bl	2a9e4 <net_buf_simple_reserve>
}
   15c08:	4620      	mov	r0, r4
   15c0a:	bd10      	pop	{r4, pc}
   15c0c:	20000350 	.word	0x20000350

00015c10 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15c10:	b570      	push	{r4, r5, r6, lr}
   15c12:	4604      	mov	r4, r0
	switch (evt) {
   15c14:	2c0f      	cmp	r4, #15
{
   15c16:	460d      	mov	r5, r1
   15c18:	4610      	mov	r0, r2
   15c1a:	4619      	mov	r1, r3
	switch (evt) {
   15c1c:	d805      	bhi.n	15c2a <bt_buf_get_evt+0x1a>
   15c1e:	2c0d      	cmp	r4, #13
   15c20:	d912      	bls.n	15c48 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15c26:	f7ff bfd9 	b.w	15bdc <bt_buf_get_cmd_complete>
	switch (evt) {
   15c2a:	2c13      	cmp	r4, #19
   15c2c:	d10c      	bne.n	15c48 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15c2e:	480b      	ldr	r0, [pc, #44]	; (15c5c <bt_buf_get_evt+0x4c>)
   15c30:	f014 feb3 	bl	2a99a <net_buf_alloc_fixed>
			if (buf) {
   15c34:	4604      	mov	r4, r0
   15c36:	b128      	cbz	r0, 15c44 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15c38:	2100      	movs	r1, #0
   15c3a:	3008      	adds	r0, #8
   15c3c:	f014 fed2 	bl	2a9e4 <net_buf_simple_reserve>
   15c40:	2301      	movs	r3, #1
   15c42:	7523      	strb	r3, [r4, #20]
}
   15c44:	4620      	mov	r0, r4
   15c46:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15c48:	4602      	mov	r2, r0
   15c4a:	460b      	mov	r3, r1
		if (discardable) {
   15c4c:	b10d      	cbz	r5, 15c52 <bt_buf_get_evt+0x42>
   15c4e:	4804      	ldr	r0, [pc, #16]	; (15c60 <bt_buf_get_evt+0x50>)
   15c50:	e7ee      	b.n	15c30 <bt_buf_get_evt+0x20>
}
   15c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15c56:	2001      	movs	r0, #1
   15c58:	f7ff bfb0 	b.w	15bbc <bt_buf_get_rx>
   15c5c:	20000cb0 	.word	0x20000cb0
   15c60:	20000c00 	.word	0x20000c00

00015c64 <ver_str>:
{
   15c64:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15c66:	4d0b      	ldr	r5, [pc, #44]	; (15c94 <ver_str+0x30>)
{
   15c68:	4606      	mov	r6, r0
	const char * const str[] = {
   15c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15c6c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15c6e:	ac01      	add	r4, sp, #4
   15c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   15c7a:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15c7c:	682b      	ldr	r3, [r5, #0]
   15c7e:	6023      	str	r3, [r4, #0]
		return str[ver];
   15c80:	bf9b      	ittet	ls
   15c82:	ab0e      	addls	r3, sp, #56	; 0x38
   15c84:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15c88:	4803      	ldrhi	r0, [pc, #12]	; (15c98 <ver_str+0x34>)
		return str[ver];
   15c8a:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   15c8e:	b00e      	add	sp, #56	; 0x38
   15c90:	bd70      	pop	{r4, r5, r6, pc}
   15c92:	bf00      	nop
   15c94:	0002cb2c 	.word	0x0002cb2c
   15c98:	0002e2f9 	.word	0x0002e2f9

00015c9c <unpair>:
{
   15c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c9e:	4606      	mov	r6, r0
   15ca0:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   15ca2:	f002 fd83 	bl	187ac <bt_conn_lookup_addr_le>
	if (conn) {
   15ca6:	4604      	mov	r4, r0
   15ca8:	b9f8      	cbnz	r0, 15cea <unpair+0x4e>
			keys = bt_keys_find_addr(id, addr);
   15caa:	4639      	mov	r1, r7
   15cac:	4630      	mov	r0, r6
   15cae:	f007 fd15 	bl	1d6dc <bt_keys_find_addr>
		if (keys) {
   15cb2:	4605      	mov	r5, r0
   15cb4:	b110      	cbz	r0, 15cbc <unpair+0x20>
			bt_keys_clear(keys);
   15cb6:	4628      	mov	r0, r5
   15cb8:	f007 fd20 	bl	1d6fc <bt_keys_clear>
	bt_gatt_clear(id, addr);
   15cbc:	4639      	mov	r1, r7
   15cbe:	4630      	mov	r0, r6
   15cc0:	f005 fc98 	bl	1b5f4 <bt_gatt_clear>
	return list->head;
   15cc4:	4b14      	ldr	r3, [pc, #80]	; (15d18 <unpair+0x7c>)
   15cc6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15cc8:	b323      	cbz	r3, 15d14 <unpair+0x78>
	return node->next;
   15cca:	f853 490c 	ldr.w	r4, [r3], #-12
   15cce:	b104      	cbz	r4, 15cd2 <unpair+0x36>
   15cd0:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15cd2:	689b      	ldr	r3, [r3, #8]
   15cd4:	b113      	cbz	r3, 15cdc <unpair+0x40>
			listener->bond_deleted(id, addr);
   15cd6:	4639      	mov	r1, r7
   15cd8:	4630      	mov	r0, r6
   15cda:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15cdc:	b1d4      	cbz	r4, 15d14 <unpair+0x78>
   15cde:	68e2      	ldr	r2, [r4, #12]
   15ce0:	b102      	cbz	r2, 15ce4 <unpair+0x48>
   15ce2:	3a0c      	subs	r2, #12
	struct bt_keys *keys = NULL;
   15ce4:	4623      	mov	r3, r4
   15ce6:	4614      	mov	r4, r2
   15ce8:	e7f3      	b.n	15cd2 <unpair+0x36>
		if (conn->type == BT_CONN_TYPE_LE) {
   15cea:	7883      	ldrb	r3, [r0, #2]
   15cec:	2b01      	cmp	r3, #1
   15cee:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   15cf2:	bf04      	itt	eq
   15cf4:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   15cf8:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15cfc:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   15d00:	bf18      	it	ne
   15d02:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15d04:	f013 f87e 	bl	28e04 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15d08:	4620      	mov	r0, r4
   15d0a:	f013 f836 	bl	28d7a <bt_conn_unref>
		if (!keys) {
   15d0e:	2d00      	cmp	r5, #0
   15d10:	d1d1      	bne.n	15cb6 <unpair+0x1a>
   15d12:	e7ca      	b.n	15caa <unpair+0xe>
}
   15d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d16:	bf00      	nop
   15d18:	20002de8 	.word	0x20002de8

00015d1c <hci_disconn_complete_prio>:
{
   15d1c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15d1e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   15d20:	781a      	ldrb	r2, [r3, #0]
   15d22:	b972      	cbnz	r2, 15d42 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d24:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15d28:	4620      	mov	r0, r4
   15d2a:	f002 fb29 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   15d2e:	4605      	mov	r5, r0
   15d30:	b940      	cbnz	r0, 15d44 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15d32:	4b08      	ldr	r3, [pc, #32]	; (15d54 <hci_disconn_complete_prio+0x38>)
   15d34:	881a      	ldrh	r2, [r3, #0]
   15d36:	b922      	cbnz	r2, 15d42 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15d38:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15d3c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15d40:	8018      	strh	r0, [r3, #0]
}
   15d42:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15d44:	2101      	movs	r1, #1
   15d46:	f002 fb23 	bl	18390 <bt_conn_set_state>
	bt_conn_unref(conn);
   15d4a:	4628      	mov	r0, r5
}
   15d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15d50:	f013 b813 	b.w	28d7a <bt_conn_unref>
   15d54:	20003d88 	.word	0x20003d88

00015d58 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15d58:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15d5a:	4c0d      	ldr	r4, [pc, #52]	; (15d90 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15d5c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15d5e:	2205      	movs	r2, #5
   15d60:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15d64:	f002 fd6e 	bl	18844 <bt_conn_lookup_state_le>
		if (!conn) {
   15d68:	b978      	cbnz	r0, 15d8a <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   15d6a:	4b0a      	ldr	r3, [pc, #40]	; (15d94 <find_pending_connect.part.0+0x3c>)
   15d6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   15d6e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   15d70:	9000      	str	r0, [sp, #0]
   15d72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   15d76:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15d7a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   15d7e:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15d82:	2204      	movs	r2, #4
   15d84:	4669      	mov	r1, sp
   15d86:	f002 fd5d 	bl	18844 <bt_conn_lookup_state_le>
}
   15d8a:	b002      	add	sp, #8
   15d8c:	bd10      	pop	{r4, pc}
   15d8e:	bf00      	nop
   15d90:	20000350 	.word	0x20000350
   15d94:	0002cb2c 	.word	0x0002cb2c

00015d98 <bt_init.part.0>:
static int bt_init(void)
   15d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_INFO("No ID address. App must call settings_load()");
   15d9a:	4b07      	ldr	r3, [pc, #28]	; (15db8 <bt_init.part.0+0x20>)
   15d9c:	9305      	str	r3, [sp, #20]
   15d9e:	4807      	ldr	r0, [pc, #28]	; (15dbc <bt_init.part.0+0x24>)
   15da0:	2302      	movs	r3, #2
   15da2:	aa04      	add	r2, sp, #16
   15da4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   15da8:	9304      	str	r3, [sp, #16]
   15daa:	f012 fdee 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   15dae:	2000      	movs	r0, #0
   15db0:	b007      	add	sp, #28
   15db2:	f85d fb04 	ldr.w	pc, [sp], #4
   15db6:	bf00      	nop
   15db8:	0002e301 	.word	0x0002e301
   15dbc:	0002c7b4 	.word	0x0002c7b4

00015dc0 <hci_data_buf_overflow>:
{
   15dc0:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15dc2:	6883      	ldr	r3, [r0, #8]
{
   15dc4:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15dc6:	b088      	sub	sp, #32
   15dc8:	781b      	ldrb	r3, [r3, #0]
   15dca:	466a      	mov	r2, sp
   15dcc:	4906      	ldr	r1, [pc, #24]	; (15de8 <hci_data_buf_overflow+0x28>)
   15dce:	4807      	ldr	r0, [pc, #28]	; (15dec <hci_data_buf_overflow+0x2c>)
   15dd0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15dd4:	2303      	movs	r3, #3
   15dd6:	f842 3f10 	str.w	r3, [r2, #16]!
   15dda:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15dde:	f012 fdd4 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   15de2:	46bd      	mov	sp, r7
   15de4:	bd80      	pop	{r7, pc}
   15de6:	bf00      	nop
   15de8:	0002e32e 	.word	0x0002e32e
   15dec:	0002c7b4 	.word	0x0002c7b4

00015df0 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   15df2:	4b06      	ldr	r3, [pc, #24]	; (15e0c <le_conn_param_neg_reply.part.0+0x1c>)
   15df4:	9305      	str	r3, [sp, #20]
   15df6:	4806      	ldr	r0, [pc, #24]	; (15e10 <le_conn_param_neg_reply.part.0+0x20>)
   15df8:	2302      	movs	r3, #2
   15dfa:	aa04      	add	r2, sp, #16
   15dfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15e00:	9304      	str	r3, [sp, #16]
   15e02:	f012 fdc2 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   15e06:	b007      	add	sp, #28
   15e08:	f85d fb04 	ldr.w	pc, [sp], #4
   15e0c:	0002e356 	.word	0x0002e356
   15e10:	0002c7b4 	.word	0x0002c7b4

00015e14 <le_conn_update_complete>:
{
   15e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e16:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15e18:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15e1a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   15e1e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15e20:	4630      	mov	r0, r6
   15e22:	f002 faad 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   15e26:	4604      	mov	r4, r0
   15e28:	b988      	cbnz	r0, 15e4e <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15e2a:	466c      	mov	r4, sp
   15e2c:	b088      	sub	sp, #32
   15e2e:	466a      	mov	r2, sp
   15e30:	4b22      	ldr	r3, [pc, #136]	; (15ebc <le_conn_update_complete+0xa8>)
   15e32:	4823      	ldr	r0, [pc, #140]	; (15ec0 <le_conn_update_complete+0xac>)
   15e34:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15e38:	2303      	movs	r3, #3
   15e3a:	f842 3f10 	str.w	r3, [r2, #16]!
   15e3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15e42:	f012 fda2 	bl	2898a <z_log_msg_static_create.constprop.0>
   15e46:	46a5      	mov	sp, r4
}
   15e48:	370c      	adds	r7, #12
   15e4a:	46bd      	mov	sp, r7
   15e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
   15e4e:	782b      	ldrb	r3, [r5, #0]
   15e50:	b9bb      	cbnz	r3, 15e82 <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   15e52:	792a      	ldrb	r2, [r5, #4]
   15e54:	78eb      	ldrb	r3, [r5, #3]
   15e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e5a:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   15e5e:	79aa      	ldrb	r2, [r5, #6]
   15e60:	796b      	ldrb	r3, [r5, #5]
   15e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e66:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15e6a:	79eb      	ldrb	r3, [r5, #7]
   15e6c:	7a2a      	ldrb	r2, [r5, #8]
   15e6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e72:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   15e76:	f002 fb9b 	bl	185b0 <notify_le_param_updated>
	bt_conn_unref(conn);
   15e7a:	4620      	mov	r0, r4
   15e7c:	f012 ff7d 	bl	28d7a <bt_conn_unref>
   15e80:	e7e2      	b.n	15e48 <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15e82:	2b1a      	cmp	r3, #26
   15e84:	d1f9      	bne.n	15e7a <le_conn_update_complete+0x66>
   15e86:	78c3      	ldrb	r3, [r0, #3]
   15e88:	2b01      	cmp	r3, #1
   15e8a:	d1f6      	bne.n	15e7a <le_conn_update_complete+0x66>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
   15e90:	3004      	adds	r0, #4
   15e92:	f012 fd5a 	bl	2894a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15e96:	0583      	lsls	r3, r0, #22
   15e98:	d4ef      	bmi.n	15e7a <le_conn_update_complete+0x66>
		param.interval_min = conn->le.interval_min;
   15e9a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   15e9e:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   15ea0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   15ea4:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   15ea6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   15eaa:	80bb      	strh	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15eac:	4639      	mov	r1, r7
		param.timeout = conn->le.pending_timeout;
   15eae:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   15eb2:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   15eb4:	4620      	mov	r0, r4
   15eb6:	f002 fedf 	bl	18c78 <bt_l2cap_update_conn_param>
   15eba:	e7de      	b.n	15e7a <le_conn_update_complete+0x66>
   15ebc:	0002e370 	.word	0x0002e370
   15ec0:	0002c7b4 	.word	0x0002c7b4

00015ec4 <rx_queue_put>:
{
   15ec4:	b598      	push	{r3, r4, r7, lr}
   15ec6:	4601      	mov	r1, r0
   15ec8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15eca:	480d      	ldr	r0, [pc, #52]	; (15f00 <rx_queue_put+0x3c>)
   15ecc:	f014 fd8e 	bl	2a9ec <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15ed0:	490c      	ldr	r1, [pc, #48]	; (15f04 <rx_queue_put+0x40>)
   15ed2:	480d      	ldr	r0, [pc, #52]	; (15f08 <rx_queue_put+0x44>)
   15ed4:	f015 fd0a 	bl	2b8ec <k_work_submit_to_queue>
	if (err < 0) {
   15ed8:	2800      	cmp	r0, #0
   15eda:	da0e      	bge.n	15efa <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
   15edc:	466c      	mov	r4, sp
   15ede:	b088      	sub	sp, #32
   15ee0:	466a      	mov	r2, sp
   15ee2:	4b0a      	ldr	r3, [pc, #40]	; (15f0c <rx_queue_put+0x48>)
   15ee4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15ee8:	2303      	movs	r3, #3
   15eea:	f842 3f10 	str.w	r3, [r2, #16]!
   15eee:	4808      	ldr	r0, [pc, #32]	; (15f10 <rx_queue_put+0x4c>)
   15ef0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15ef4:	f012 fd49 	bl	2898a <z_log_msg_static_create.constprop.0>
   15ef8:	46a5      	mov	sp, r4
}
   15efa:	46bd      	mov	sp, r7
   15efc:	bd98      	pop	{r3, r4, r7, pc}
   15efe:	bf00      	nop
   15f00:	2000048c 	.word	0x2000048c
   15f04:	200006ac 	.word	0x200006ac
   15f08:	20001f20 	.word	0x20001f20
   15f0c:	0002e394 	.word	0x0002e394
   15f10:	0002c7b4 	.word	0x0002c7b4

00015f14 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15f14:	b5b0      	push	{r4, r5, r7, lr}
   15f16:	460b      	mov	r3, r1
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15f18:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15f1a:	af00      	add	r7, sp, #0
   15f1c:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15f1e:	4629      	mov	r1, r5
   15f20:	6898      	ldr	r0, [r3, #8]
   15f22:	f7ff fbdf 	bl	156e4 <bt_hex_real>
   15f26:	b08a      	sub	sp, #40	; 0x28
   15f28:	466a      	mov	r2, sp
   15f2a:	4b09      	ldr	r3, [pc, #36]	; (15f50 <handle_event.part.0+0x3c>)
   15f2c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15f30:	2304      	movs	r3, #4
   15f32:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   15f36:	4b07      	ldr	r3, [pc, #28]	; (15f54 <handle_event.part.0+0x40>)
   15f38:	e9c2 5007 	strd	r5, r0, [r2, #28]
   15f3c:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
   15f40:	f842 3f10 	str.w	r3, [r2, #16]!
   15f44:	4804      	ldr	r0, [pc, #16]	; (15f58 <handle_event.part.0+0x44>)
   15f46:	f012 fd20 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   15f4a:	46bd      	mov	sp, r7
   15f4c:	bdb0      	pop	{r4, r5, r7, pc}
   15f4e:	bf00      	nop
   15f50:	0002e3b1 	.word	0x0002e3b1
   15f54:	01000005 	.word	0x01000005
   15f58:	0002c7b4 	.word	0x0002c7b4

00015f5c <hci_hardware_error>:
{
   15f5c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15f5e:	2101      	movs	r1, #1
   15f60:	af00      	add	r7, sp, #0
   15f62:	3008      	adds	r0, #8
   15f64:	f014 fde5 	bl	2ab32 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15f68:	b088      	sub	sp, #32
   15f6a:	7803      	ldrb	r3, [r0, #0]
   15f6c:	466a      	mov	r2, sp
   15f6e:	4906      	ldr	r1, [pc, #24]	; (15f88 <hci_hardware_error+0x2c>)
   15f70:	4806      	ldr	r0, [pc, #24]	; (15f8c <hci_hardware_error+0x30>)
   15f72:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15f76:	2303      	movs	r3, #3
   15f78:	f842 3f10 	str.w	r3, [r2, #16]!
   15f7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f80:	f012 fd03 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   15f84:	46bd      	mov	sp, r7
   15f86:	bd80      	pop	{r7, pc}
   15f88:	0002e3d3 	.word	0x0002e3d3
   15f8c:	0002c7b4 	.word	0x0002c7b4

00015f90 <le_data_len_change>:
{
   15f90:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15f92:	6883      	ldr	r3, [r0, #8]
   15f94:	881c      	ldrh	r4, [r3, #0]
{
   15f96:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15f98:	4620      	mov	r0, r4
   15f9a:	f002 f9f1 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   15f9e:	b980      	cbnz	r0, 15fc2 <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15fa0:	466d      	mov	r5, sp
   15fa2:	b088      	sub	sp, #32
   15fa4:	466a      	mov	r2, sp
   15fa6:	4b08      	ldr	r3, [pc, #32]	; (15fc8 <le_data_len_change+0x38>)
   15fa8:	4808      	ldr	r0, [pc, #32]	; (15fcc <le_data_len_change+0x3c>)
   15faa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15fae:	2303      	movs	r3, #3
   15fb0:	f842 3f10 	str.w	r3, [r2, #16]!
   15fb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15fb8:	f012 fce7 	bl	2898a <z_log_msg_static_create.constprop.0>
   15fbc:	46ad      	mov	sp, r5
}
   15fbe:	46bd      	mov	sp, r7
   15fc0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   15fc2:	f012 feda 	bl	28d7a <bt_conn_unref>
   15fc6:	e7fa      	b.n	15fbe <le_data_len_change+0x2e>
   15fc8:	0002e370 	.word	0x0002e370
   15fcc:	0002c7b4 	.word	0x0002c7b4

00015fd0 <le_phy_update_complete>:
{
   15fd0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15fd2:	6883      	ldr	r3, [r0, #8]
   15fd4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   15fd8:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15fda:	4620      	mov	r0, r4
   15fdc:	f002 f9d0 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   15fe0:	b980      	cbnz	r0, 16004 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15fe2:	466d      	mov	r5, sp
   15fe4:	b088      	sub	sp, #32
   15fe6:	466a      	mov	r2, sp
   15fe8:	4b08      	ldr	r3, [pc, #32]	; (1600c <le_phy_update_complete+0x3c>)
   15fea:	4809      	ldr	r0, [pc, #36]	; (16010 <le_phy_update_complete+0x40>)
   15fec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15ff0:	2303      	movs	r3, #3
   15ff2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ff6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15ffa:	f012 fcc6 	bl	2898a <z_log_msg_static_create.constprop.0>
   15ffe:	46ad      	mov	sp, r5
}
   16000:	46bd      	mov	sp, r7
   16002:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16004:	f012 feb9 	bl	28d7a <bt_conn_unref>
   16008:	e7fa      	b.n	16000 <le_phy_update_complete+0x30>
   1600a:	bf00      	nop
   1600c:	0002e370 	.word	0x0002e370
   16010:	0002c7b4 	.word	0x0002c7b4

00016014 <hci_disconn_complete>:
{
   16014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16018:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   1601a:	782e      	ldrb	r6, [r5, #0]
{
   1601c:	af00      	add	r7, sp, #0
	if (evt->status) {
   1601e:	b9ae      	cbnz	r6, 1604c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16020:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16024:	4640      	mov	r0, r8
   16026:	f002 f9ab 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   1602a:	4604      	mov	r4, r0
   1602c:	b988      	cbnz	r0, 16052 <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1602e:	466c      	mov	r4, sp
   16030:	b088      	sub	sp, #32
   16032:	466a      	mov	r2, sp
   16034:	4b0b      	ldr	r3, [pc, #44]	; (16064 <hci_disconn_complete+0x50>)
   16036:	480c      	ldr	r0, [pc, #48]	; (16068 <hci_disconn_complete+0x54>)
   16038:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1603c:	2303      	movs	r3, #3
   1603e:	f842 3f10 	str.w	r3, [r2, #16]!
   16042:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16046:	f012 fca0 	bl	2898a <z_log_msg_static_create.constprop.0>
   1604a:	46a5      	mov	sp, r4
}
   1604c:	46bd      	mov	sp, r7
   1604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   16052:	78eb      	ldrb	r3, [r5, #3]
   16054:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16056:	4631      	mov	r1, r6
   16058:	f002 f99a 	bl	18390 <bt_conn_set_state>
		bt_conn_unref(conn);
   1605c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1605e:	f012 fe8c 	bl	28d7a <bt_conn_unref>
   16062:	e7f3      	b.n	1604c <hci_disconn_complete+0x38>
   16064:	0002e3f5 	.word	0x0002e3f5
   16068:	0002c7b4 	.word	0x0002c7b4

0001606c <handle_event>:
{
   1606c:	b598      	push	{r3, r4, r7, lr}
   1606e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16072:	af00      	add	r7, sp, #0
		if (handler->event != event) {
   16074:	7814      	ldrb	r4, [r2, #0]
   16076:	4284      	cmp	r4, r0
   16078:	d005      	beq.n	16086 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1607a:	3208      	adds	r2, #8
   1607c:	429a      	cmp	r2, r3
   1607e:	d1f9      	bne.n	16074 <handle_event+0x8>
	if (err == -EOPNOTSUPP) {
   16080:	f7ff ff48 	bl	15f14 <handle_event.part.0>
}
   16084:	e013      	b.n	160ae <handle_event+0x42>
		if (buf->len < handler->min_len) {
   16086:	898b      	ldrh	r3, [r1, #12]
   16088:	7854      	ldrb	r4, [r2, #1]
   1608a:	429c      	cmp	r4, r3
   1608c:	d911      	bls.n	160b2 <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1608e:	466c      	mov	r4, sp
   16090:	b088      	sub	sp, #32
   16092:	466a      	mov	r2, sp
   16094:	4909      	ldr	r1, [pc, #36]	; (160bc <handle_event+0x50>)
   16096:	61d0      	str	r0, [r2, #28]
   16098:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1609c:	2304      	movs	r3, #4
   1609e:	f842 3f10 	str.w	r3, [r2, #16]!
   160a2:	4807      	ldr	r0, [pc, #28]	; (160c0 <handle_event+0x54>)
   160a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   160a8:	f012 fc6f 	bl	2898a <z_log_msg_static_create.constprop.0>
   160ac:	46a5      	mov	sp, r4
}
   160ae:	46bd      	mov	sp, r7
   160b0:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
   160b2:	6853      	ldr	r3, [r2, #4]
   160b4:	4608      	mov	r0, r1
   160b6:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   160b8:	e7f9      	b.n	160ae <handle_event+0x42>
   160ba:	bf00      	nop
   160bc:	0002e41b 	.word	0x0002e41b
   160c0:	0002c7b4 	.word	0x0002c7b4

000160c4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   160c6:	4855      	ldr	r0, [pc, #340]	; (1621c <rx_work_handler+0x158>)
{
   160c8:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   160ca:	f014 fcad 	bl	2aa28 <net_buf_slist_get>
	if (!buf) {
   160ce:	4604      	mov	r4, r0
   160d0:	2800      	cmp	r0, #0
   160d2:	d06a      	beq.n	161aa <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   160d4:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   160d6:	2b01      	cmp	r3, #1
   160d8:	d069      	beq.n	161ae <rx_work_handler+0xea>
   160da:	2b03      	cmp	r3, #3
   160dc:	f040 8099 	bne.w	16212 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   160e0:	8983      	ldrh	r3, [r0, #12]
   160e2:	2b03      	cmp	r3, #3
   160e4:	d80c      	bhi.n	16100 <rx_work_handler+0x3c>
   160e6:	4a4e      	ldr	r2, [pc, #312]	; (16220 <rx_work_handler+0x15c>)
   160e8:	494e      	ldr	r1, [pc, #312]	; (16224 <rx_work_handler+0x160>)
   160ea:	484f      	ldr	r0, [pc, #316]	; (16228 <rx_work_handler+0x164>)
   160ec:	f240 13eb 	movw	r3, #491	; 0x1eb
   160f0:	f011 fdaf 	bl	27c52 <assert_print>
   160f4:	4040      	eors	r0, r0
   160f6:	f380 8811 	msr	BASEPRI, r0
   160fa:	f04f 0003 	mov.w	r0, #3
   160fe:	df02      	svc	2
   16100:	2104      	movs	r1, #4
   16102:	f104 0008 	add.w	r0, r4, #8
   16106:	f014 fd14 	bl	2ab32 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1610a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   1610c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1610e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16110:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   16112:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   16116:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   16118:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1611a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1611c:	d010      	beq.n	16140 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1611e:	466d      	mov	r5, sp
   16120:	b088      	sub	sp, #32
   16122:	466a      	mov	r2, sp
   16124:	4841      	ldr	r0, [pc, #260]	; (1622c <rx_work_handler+0x168>)
   16126:	61d3      	str	r3, [r2, #28]
   16128:	2304      	movs	r3, #4
   1612a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1612e:	f842 3f10 	str.w	r3, [r2, #16]!
   16132:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16136:	483e      	ldr	r0, [pc, #248]	; (16230 <rx_work_handler+0x16c>)
   16138:	f012 fc27 	bl	2898a <z_log_msg_static_create.constprop.0>
   1613c:	46ad      	mov	sp, r5
   1613e:	e064      	b.n	1620a <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16140:	f002 f91e 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16144:	4605      	mov	r5, r0
   16146:	b960      	cbnz	r0, 16162 <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16148:	466d      	mov	r5, sp
   1614a:	b088      	sub	sp, #32
   1614c:	8ae3      	ldrh	r3, [r4, #22]
   1614e:	466a      	mov	r2, sp
   16150:	4938      	ldr	r1, [pc, #224]	; (16234 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   16152:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16156:	2303      	movs	r3, #3
   16158:	f842 3f10 	str.w	r3, [r2, #16]!
   1615c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16160:	e7e9      	b.n	16136 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   16162:	f002 fa03 	bl	1856c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   16166:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   16168:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1616a:	4621      	mov	r1, r4
   1616c:	4628      	mov	r0, r5
   1616e:	f002 f803 	bl	18178 <bt_conn_recv>
	bt_conn_unref(conn);
   16172:	4628      	mov	r0, r5
   16174:	f012 fe01 	bl	28d7a <bt_conn_unref>
	return list->head;
   16178:	4b2f      	ldr	r3, [pc, #188]	; (16238 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1617a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1617e:	b1a3      	cbz	r3, 161aa <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16180:	492e      	ldr	r1, [pc, #184]	; (1623c <rx_work_handler+0x178>)
   16182:	482f      	ldr	r0, [pc, #188]	; (16240 <rx_work_handler+0x17c>)
   16184:	f015 fbb2 	bl	2b8ec <k_work_submit_to_queue>
#endif
		if (err < 0) {
   16188:	2800      	cmp	r0, #0
   1618a:	da0e      	bge.n	161aa <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
   1618c:	466c      	mov	r4, sp
   1618e:	b088      	sub	sp, #32
   16190:	466a      	mov	r2, sp
   16192:	4b2c      	ldr	r3, [pc, #176]	; (16244 <rx_work_handler+0x180>)
   16194:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16198:	2303      	movs	r3, #3
   1619a:	f842 3f10 	str.w	r3, [r2, #16]!
   1619e:	4824      	ldr	r0, [pc, #144]	; (16230 <rx_work_handler+0x16c>)
   161a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161a4:	f012 fbf1 	bl	2898a <z_log_msg_static_create.constprop.0>
   161a8:	46a5      	mov	sp, r4
		}
	}
}
   161aa:	46bd      	mov	sp, r7
   161ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   161ae:	8983      	ldrh	r3, [r0, #12]
   161b0:	2b01      	cmp	r3, #1
   161b2:	d80c      	bhi.n	161ce <rx_work_handler+0x10a>
   161b4:	4a1a      	ldr	r2, [pc, #104]	; (16220 <rx_work_handler+0x15c>)
   161b6:	491b      	ldr	r1, [pc, #108]	; (16224 <rx_work_handler+0x160>)
   161b8:	481b      	ldr	r0, [pc, #108]	; (16228 <rx_work_handler+0x164>)
   161ba:	f640 1359 	movw	r3, #2393	; 0x959
   161be:	f011 fd48 	bl	27c52 <assert_print>
   161c2:	4040      	eors	r0, r0
   161c4:	f380 8811 	msr	BASEPRI, r0
   161c8:	f04f 0003 	mov.w	r0, #3
   161cc:	df02      	svc	2
   161ce:	2102      	movs	r1, #2
   161d0:	f104 0008 	add.w	r0, r4, #8
   161d4:	f014 fcad 	bl	2ab32 <net_buf_simple_pull_mem>
   161d8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   161da:	7800      	ldrb	r0, [r0, #0]
   161dc:	f012 fb8a 	bl	288f4 <bt_hci_evt_get_flags>
   161e0:	0783      	lsls	r3, r0, #30
   161e2:	d40c      	bmi.n	161fe <rx_work_handler+0x13a>
   161e4:	4a0e      	ldr	r2, [pc, #56]	; (16220 <rx_work_handler+0x15c>)
   161e6:	4918      	ldr	r1, [pc, #96]	; (16248 <rx_work_handler+0x184>)
   161e8:	480f      	ldr	r0, [pc, #60]	; (16228 <rx_work_handler+0x164>)
   161ea:	f640 135d 	movw	r3, #2397	; 0x95d
   161ee:	f011 fd30 	bl	27c52 <assert_print>
   161f2:	4040      	eors	r0, r0
   161f4:	f380 8811 	msr	BASEPRI, r0
   161f8:	f04f 0003 	mov.w	r0, #3
   161fc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   161fe:	4a13      	ldr	r2, [pc, #76]	; (1624c <rx_work_handler+0x188>)
   16200:	7828      	ldrb	r0, [r5, #0]
   16202:	2306      	movs	r3, #6
   16204:	4621      	mov	r1, r4
   16206:	f7ff ff31 	bl	1606c <handle_event>
		net_buf_unref(buf);
   1620a:	4620      	mov	r0, r4
   1620c:	f007 fcac 	bl	1db68 <net_buf_unref>
		break;
   16210:	e7b2      	b.n	16178 <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16212:	466d      	mov	r5, sp
   16214:	b088      	sub	sp, #32
   16216:	466a      	mov	r2, sp
   16218:	490d      	ldr	r1, [pc, #52]	; (16250 <rx_work_handler+0x18c>)
   1621a:	e79a      	b.n	16152 <rx_work_handler+0x8e>
   1621c:	2000048c 	.word	0x2000048c
   16220:	0002e43d 	.word	0x0002e43d
   16224:	0002e471 	.word	0x0002e471
   16228:	0002e48a 	.word	0x0002e48a
   1622c:	0002e4a7 	.word	0x0002e4a7
   16230:	0002c7b4 	.word	0x0002c7b4
   16234:	0002e4cb 	.word	0x0002e4cb
   16238:	20000350 	.word	0x20000350
   1623c:	200006ac 	.word	0x200006ac
   16240:	20001f20 	.word	0x20001f20
   16244:	0002e394 	.word	0x0002e394
   16248:	0002e4ed 	.word	0x0002e4ed
   1624c:	0002cf84 	.word	0x0002cf84
   16250:	0002e51b 	.word	0x0002e51b

00016254 <hci_le_meta_event>:
{
   16254:	b510      	push	{r4, lr}
   16256:	2101      	movs	r1, #1
   16258:	4604      	mov	r4, r0
   1625a:	3008      	adds	r0, #8
   1625c:	f014 fc69 	bl	2ab32 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16260:	4621      	mov	r1, r4
   16262:	4a03      	ldr	r2, [pc, #12]	; (16270 <hci_le_meta_event+0x1c>)
   16264:	7800      	ldrb	r0, [r0, #0]
}
   16266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1626a:	230a      	movs	r3, #10
   1626c:	f7ff befe 	b.w	1606c <handle_event>
   16270:	0002cf14 	.word	0x0002cf14

00016274 <le_remote_feat_complete>:
{
   16274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16276:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16278:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1627c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1627e:	4630      	mov	r0, r6
   16280:	f002 f87e 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16284:	4604      	mov	r4, r0
   16286:	b980      	cbnz	r0, 162aa <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16288:	466c      	mov	r4, sp
   1628a:	b088      	sub	sp, #32
   1628c:	466a      	mov	r2, sp
   1628e:	4b10      	ldr	r3, [pc, #64]	; (162d0 <le_remote_feat_complete+0x5c>)
   16290:	4810      	ldr	r0, [pc, #64]	; (162d4 <le_remote_feat_complete+0x60>)
   16292:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16296:	2303      	movs	r3, #3
   16298:	f842 3f10 	str.w	r3, [r2, #16]!
   1629c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162a0:	f012 fb73 	bl	2898a <z_log_msg_static_create.constprop.0>
   162a4:	46a5      	mov	sp, r4
}
   162a6:	46bd      	mov	sp, r7
   162a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   162aa:	782b      	ldrb	r3, [r5, #0]
   162ac:	b93b      	cbnz	r3, 162be <le_remote_feat_complete+0x4a>
   162ae:	f8d5 3003 	ldr.w	r3, [r5, #3]
   162b2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   162b6:	f8d5 3007 	ldr.w	r3, [r5, #7]
   162ba:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   162be:	f44f 6100 	mov.w	r1, #2048	; 0x800
   162c2:	1d20      	adds	r0, r4, #4
   162c4:	f012 fb41 	bl	2894a <atomic_or>
	bt_conn_unref(conn);
   162c8:	4620      	mov	r0, r4
   162ca:	f012 fd56 	bl	28d7a <bt_conn_unref>
   162ce:	e7ea      	b.n	162a6 <le_remote_feat_complete+0x32>
   162d0:	0002e370 	.word	0x0002e370
   162d4:	0002c7b4 	.word	0x0002c7b4

000162d8 <hci_cmd_done>:
{
   162d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   162dc:	4606      	mov	r6, r0
   162de:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   162e0:	7990      	ldrb	r0, [r2, #6]
   162e2:	4d43      	ldr	r5, [pc, #268]	; (163f0 <hci_cmd_done+0x118>)
{
   162e4:	4688      	mov	r8, r1
   162e6:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   162e8:	f007 fb7a 	bl	1d9e0 <net_buf_pool_get>
   162ec:	4285      	cmp	r5, r0
   162ee:	d018      	beq.n	16322 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   162f0:	79a4      	ldrb	r4, [r4, #6]
   162f2:	4620      	mov	r0, r4
   162f4:	f007 fb74 	bl	1d9e0 <net_buf_pool_get>
   162f8:	46e8      	mov	r8, sp
   162fa:	b08a      	sub	sp, #40	; 0x28
   162fc:	466a      	mov	r2, sp
   162fe:	4b3d      	ldr	r3, [pc, #244]	; (163f4 <hci_cmd_done+0x11c>)
   16300:	6255      	str	r5, [r2, #36]	; 0x24
   16302:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16306:	2306      	movs	r3, #6
   16308:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1630c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   16310:	f842 3f10 	str.w	r3, [r2, #16]!
   16314:	4838      	ldr	r0, [pc, #224]	; (163f8 <hci_cmd_done+0x120>)
   16316:	f012 fb38 	bl	2898a <z_log_msg_static_create.constprop.0>
   1631a:	46c5      	mov	sp, r8
}
   1631c:	46bd      	mov	sp, r7
   1631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16322:	4620      	mov	r0, r4
   16324:	f007 fb64 	bl	1d9f0 <net_buf_id>
   16328:	4d34      	ldr	r5, [pc, #208]	; (163fc <hci_cmd_done+0x124>)
   1632a:	f04f 090c 	mov.w	r9, #12
   1632e:	fb09 5000 	mla	r0, r9, r0, r5
   16332:	8843      	ldrh	r3, [r0, #2]
   16334:	42b3      	cmp	r3, r6
   16336:	d016      	beq.n	16366 <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   16338:	4620      	mov	r0, r4
   1633a:	f007 fb59 	bl	1d9f0 <net_buf_id>
   1633e:	fb09 5500 	mla	r5, r9, r0, r5
   16342:	466c      	mov	r4, sp
   16344:	b088      	sub	sp, #32
   16346:	886b      	ldrh	r3, [r5, #2]
   16348:	466a      	mov	r2, sp
   1634a:	492d      	ldr	r1, [pc, #180]	; (16400 <hci_cmd_done+0x128>)
   1634c:	61d3      	str	r3, [r2, #28]
   1634e:	2304      	movs	r3, #4
   16350:	e9c2 1605 	strd	r1, r6, [r2, #20]
   16354:	4828      	ldr	r0, [pc, #160]	; (163f8 <hci_cmd_done+0x120>)
   16356:	f842 3f10 	str.w	r3, [r2, #16]!
   1635a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1635e:	f012 fb14 	bl	2898a <z_log_msg_static_create.constprop.0>
   16362:	46a5      	mov	sp, r4
		return;
   16364:	e7da      	b.n	1631c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   16366:	4e27      	ldr	r6, [pc, #156]	; (16404 <hci_cmd_done+0x12c>)
   16368:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1636c:	b120      	cbz	r0, 16378 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   1636e:	f007 fbfb 	bl	1db68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16372:	2300      	movs	r3, #0
   16374:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   16378:	4620      	mov	r0, r4
   1637a:	f007 fb39 	bl	1d9f0 <net_buf_id>
   1637e:	260c      	movs	r6, #12
   16380:	fb06 5000 	mla	r0, r6, r0, r5
   16384:	6843      	ldr	r3, [r0, #4]
   16386:	b1ab      	cbz	r3, 163b4 <hci_cmd_done+0xdc>
   16388:	f1b8 0f00 	cmp.w	r8, #0
   1638c:	d112      	bne.n	163b4 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1638e:	4620      	mov	r0, r4
   16390:	f007 fb2e 	bl	1d9f0 <net_buf_id>
   16394:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16398:	2101      	movs	r1, #1
   1639a:	6842      	ldr	r2, [r0, #4]
   1639c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   163a0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   163a2:	f003 061f 	and.w	r6, r3, #31
   163a6:	40b1      	lsls	r1, r6
	if (val) {
   163a8:	095b      	lsrs	r3, r3, #5
   163aa:	b1da      	cbz	r2, 163e4 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   163ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   163b0:	f012 facb 	bl	2894a <atomic_or>
	if (cmd(buf)->sync) {
   163b4:	4620      	mov	r0, r4
   163b6:	f007 fb1b 	bl	1d9f0 <net_buf_id>
   163ba:	260c      	movs	r6, #12
   163bc:	fb06 5000 	mla	r0, r6, r0, r5
   163c0:	6883      	ldr	r3, [r0, #8]
   163c2:	2b00      	cmp	r3, #0
   163c4:	d0aa      	beq.n	1631c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   163c6:	4620      	mov	r0, r4
   163c8:	f007 fb12 	bl	1d9f0 <net_buf_id>
   163cc:	4370      	muls	r0, r6
   163ce:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   163d2:	4620      	mov	r0, r4
   163d4:	f007 fb0c 	bl	1d9f0 <net_buf_id>
   163d8:	fb06 5500 	mla	r5, r6, r0, r5
   163dc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   163de:	f00b fb7d 	bl	21adc <z_impl_k_sem_give>
}
   163e2:	e79b      	b.n	1631c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   163e4:	43c9      	mvns	r1, r1
   163e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   163ea:	f012 fad1 	bl	28990 <atomic_and.isra.0>
   163ee:	e7e1      	b.n	163b4 <hci_cmd_done+0xdc>
   163f0:	20000c58 	.word	0x20000c58
   163f4:	0002e52f 	.word	0x0002e52f
   163f8:	0002c7b4 	.word	0x0002c7b4
   163fc:	20002dbc 	.word	0x20002dbc
   16400:	0002e564 	.word	0x0002e564
   16404:	20000350 	.word	0x20000350

00016408 <hci_cmd_status>:
{
   16408:	b538      	push	{r3, r4, r5, lr}
   1640a:	2104      	movs	r1, #4
   1640c:	4604      	mov	r4, r0
   1640e:	3008      	adds	r0, #8
   16410:	f014 fb8f 	bl	2ab32 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16414:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16416:	7801      	ldrb	r1, [r0, #0]
   16418:	8840      	ldrh	r0, [r0, #2]
   1641a:	4622      	mov	r2, r4
   1641c:	f7ff ff5c 	bl	162d8 <hci_cmd_done>
	if (ncmd) {
   16420:	b125      	cbz	r5, 1642c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   16422:	4803      	ldr	r0, [pc, #12]	; (16430 <hci_cmd_status+0x28>)
}
   16424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16428:	f00b bb58 	b.w	21adc <z_impl_k_sem_give>
   1642c:	bd38      	pop	{r3, r4, r5, pc}
   1642e:	bf00      	nop
   16430:	20000470 	.word	0x20000470

00016434 <hci_cmd_complete>:
{
   16434:	b538      	push	{r3, r4, r5, lr}
   16436:	2103      	movs	r1, #3
   16438:	4604      	mov	r4, r0
   1643a:	3008      	adds	r0, #8
   1643c:	f014 fb79 	bl	2ab32 <net_buf_simple_pull_mem>
	status = buf->data[0];
   16440:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   16442:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16444:	7819      	ldrb	r1, [r3, #0]
   16446:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1644a:	4622      	mov	r2, r4
   1644c:	f7ff ff44 	bl	162d8 <hci_cmd_done>
	if (ncmd) {
   16450:	b125      	cbz	r5, 1645c <hci_cmd_complete+0x28>
   16452:	4803      	ldr	r0, [pc, #12]	; (16460 <hci_cmd_complete+0x2c>)
}
   16454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16458:	f00b bb40 	b.w	21adc <z_impl_k_sem_give>
   1645c:	bd38      	pop	{r3, r4, r5, pc}
   1645e:	bf00      	nop
   16460:	20000470 	.word	0x20000470

00016464 <hci_num_completed_packets>:
{
   16464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16468:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   1646a:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1646c:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   16470:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 1656c <hci_num_completed_packets+0x108>
{
   16474:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   16476:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   16478:	f898 3000 	ldrb.w	r3, [r8]
   1647c:	429d      	cmp	r5, r3
   1647e:	db03      	blt.n	16488 <hci_num_completed_packets+0x24>
}
   16480:	371c      	adds	r7, #28
   16482:	46bd      	mov	sp, r7
   16484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16488:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   1648c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16490:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16494:	4658      	mov	r0, fp
   16496:	f001 ff73 	bl	18380 <bt_conn_lookup_handle>
		if (!conn) {
   1649a:	4604      	mov	r4, r0
   1649c:	b1d8      	cbz	r0, 164d6 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   1649e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   164a2:	2e00      	cmp	r6, #0
   164a4:	d040      	beq.n	16528 <hci_num_completed_packets+0xc4>
	__asm__ volatile(
   164a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   164aa:	f3ef 8211 	mrs	r2, BASEPRI
   164ae:	f383 8812 	msr	BASEPRI_MAX, r3
   164b2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   164b6:	69e3      	ldr	r3, [r4, #28]
   164b8:	b1f3      	cbz	r3, 164f8 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   164ba:	3b01      	subs	r3, #1
   164bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   164be:	f382 8811 	msr	BASEPRI, r2
   164c2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   164c6:	4620      	mov	r0, r4
   164c8:	f001 fe1e 	bl	18108 <bt_conn_get_pkts>
   164cc:	3e01      	subs	r6, #1
   164ce:	f00b fb05 	bl	21adc <z_impl_k_sem_give>
   164d2:	b2b6      	uxth	r6, r6
   164d4:	e7e5      	b.n	164a2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   164d6:	466c      	mov	r4, sp
   164d8:	b088      	sub	sp, #32
   164da:	466a      	mov	r2, sp
   164dc:	4b24      	ldr	r3, [pc, #144]	; (16570 <hci_num_completed_packets+0x10c>)
   164de:	4825      	ldr	r0, [pc, #148]	; (16574 <hci_num_completed_packets+0x110>)
   164e0:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   164e4:	2303      	movs	r3, #3
   164e6:	f842 3f10 	str.w	r3, [r2, #16]!
   164ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   164ee:	f012 fa4c 	bl	2898a <z_log_msg_static_create.constprop.0>
   164f2:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   164f4:	3501      	adds	r5, #1
   164f6:	e7bf      	b.n	16478 <hci_num_completed_packets+0x14>
   164f8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   164fa:	b12b      	cbz	r3, 16508 <hci_num_completed_packets+0xa4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   164fc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   164fe:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16500:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16502:	428b      	cmp	r3, r1
	list->tail = node;
   16504:	bf08      	it	eq
   16506:	61a0      	streq	r0, [r4, #24]
   16508:	f382 8811 	msr	BASEPRI, r2
   1650c:	f3bf 8f6f 	isb	sy
			if (!node) {
   16510:	b973      	cbnz	r3, 16530 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
   16512:	2302      	movs	r3, #2
   16514:	4817      	ldr	r0, [pc, #92]	; (16574 <hci_num_completed_packets+0x110>)
   16516:	f8c7 a014 	str.w	sl, [r7, #20]
   1651a:	f107 0210 	add.w	r2, r7, #16
   1651e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16522:	613b      	str	r3, [r7, #16]
   16524:	f012 fa31 	bl	2898a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   16528:	4620      	mov	r0, r4
   1652a:	f012 fc26 	bl	28d7a <bt_conn_unref>
   1652e:	e7e1      	b.n	164f4 <hci_num_completed_packets+0x90>
	__asm__ volatile(
   16530:	f04f 0240 	mov.w	r2, #64	; 0x40
   16534:	f3ef 8111 	mrs	r1, BASEPRI
   16538:	f382 8812 	msr	BASEPRI_MAX, r2
   1653c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16540:	68da      	ldr	r2, [r3, #12]
   16542:	61e2      	str	r2, [r4, #28]
	return list->tail;
   16544:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   16546:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1654a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   1654e:	b94a      	cbnz	r2, 16564 <hci_num_completed_packets+0x100>
	list->head = node;
   16550:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16554:	f381 8811 	msr	BASEPRI, r1
   16558:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1655c:	4658      	mov	r0, fp
   1655e:	f00b fc4b 	bl	21df8 <k_work_submit>
   16562:	e7b0      	b.n	164c6 <hci_num_completed_packets+0x62>
	parent->next = child;
   16564:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16566:	6263      	str	r3, [r4, #36]	; 0x24
}
   16568:	e7f4      	b.n	16554 <hci_num_completed_packets+0xf0>
   1656a:	bf00      	nop
   1656c:	0002e5b3 	.word	0x0002e5b3
   16570:	0002e597 	.word	0x0002e597
   16574:	0002c7b4 	.word	0x0002c7b4

00016578 <bt_hci_cmd_state_set_init>:
{
   16578:	b510      	push	{r4, lr}
	state->bit = bit;
   1657a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1657e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16582:	720b      	strb	r3, [r1, #8]
{
   16584:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   16586:	f007 fa33 	bl	1d9f0 <net_buf_id>
   1658a:	4b03      	ldr	r3, [pc, #12]	; (16598 <bt_hci_cmd_state_set_init+0x20>)
   1658c:	220c      	movs	r2, #12
   1658e:	fb02 3300 	mla	r3, r2, r0, r3
   16592:	605c      	str	r4, [r3, #4]
}
   16594:	bd10      	pop	{r4, pc}
   16596:	bf00      	nop
   16598:	20002dbc 	.word	0x20002dbc

0001659c <bt_hci_cmd_create>:
{
   1659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   165a0:	f04f 32ff 	mov.w	r2, #4294967295
   165a4:	f04f 33ff 	mov.w	r3, #4294967295
   165a8:	4606      	mov	r6, r0
   165aa:	4817      	ldr	r0, [pc, #92]	; (16608 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   165ac:	4d17      	ldr	r5, [pc, #92]	; (1660c <bt_hci_cmd_create+0x70>)
{
   165ae:	460f      	mov	r7, r1
   165b0:	f014 f9f3 	bl	2a99a <net_buf_alloc_fixed>
   165b4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   165b6:	f100 0a08 	add.w	sl, r0, #8
   165ba:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   165bc:	f04f 0800 	mov.w	r8, #0
   165c0:	4650      	mov	r0, sl
   165c2:	f014 fa0f 	bl	2a9e4 <net_buf_simple_reserve>
   165c6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   165ca:	4620      	mov	r0, r4
   165cc:	f007 fa10 	bl	1d9f0 <net_buf_id>
   165d0:	f04f 090c 	mov.w	r9, #12
   165d4:	fb09 5000 	mla	r0, r9, r0, r5
   165d8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   165da:	4620      	mov	r0, r4
   165dc:	f007 fa08 	bl	1d9f0 <net_buf_id>
   165e0:	fb09 5000 	mla	r0, r9, r0, r5
   165e4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   165e8:	4620      	mov	r0, r4
   165ea:	f007 fa01 	bl	1d9f0 <net_buf_id>
   165ee:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   165f2:	2103      	movs	r1, #3
   165f4:	f8c5 8004 	str.w	r8, [r5, #4]
   165f8:	4650      	mov	r0, sl
   165fa:	f014 fa73 	bl	2aae4 <net_buf_simple_add>
	hdr->param_len = param_len;
   165fe:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16600:	8006      	strh	r6, [r0, #0]
}
   16602:	4620      	mov	r0, r4
   16604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16608:	20000c58 	.word	0x20000c58
   1660c:	20002dbc 	.word	0x20002dbc

00016610 <bt_hci_cmd_send_sync>:
{
   16610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16614:	b087      	sub	sp, #28
   16616:	4680      	mov	r8, r0
   16618:	af00      	add	r7, sp, #0
   1661a:	4615      	mov	r5, r2
	if (!buf) {
   1661c:	460c      	mov	r4, r1
   1661e:	b921      	cbnz	r1, 1662a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16620:	f7ff ffbc 	bl	1659c <bt_hci_cmd_create>
		if (!buf) {
   16624:	4604      	mov	r4, r0
   16626:	2800      	cmp	r0, #0
   16628:	d05b      	beq.n	166e2 <bt_hci_cmd_send_sync+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1662a:	2201      	movs	r2, #1
   1662c:	2100      	movs	r1, #0
   1662e:	4638      	mov	r0, r7
   16630:	f015 f8af 	bl	2b792 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16634:	4620      	mov	r0, r4
   16636:	f007 f9db 	bl	1d9f0 <net_buf_id>
   1663a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 166e8 <bt_hci_cmd_send_sync+0xd8>
   1663e:	230c      	movs	r3, #12
   16640:	fb03 9000 	mla	r0, r3, r0, r9
   16644:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16646:	4620      	mov	r0, r4
   16648:	f014 fa26 	bl	2aa98 <net_buf_ref>
   1664c:	4601      	mov	r1, r0
   1664e:	4827      	ldr	r0, [pc, #156]	; (166ec <bt_hci_cmd_send_sync+0xdc>)
   16650:	f014 fa15 	bl	2aa7e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16654:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16658:	2300      	movs	r3, #0
   1665a:	4638      	mov	r0, r7
   1665c:	f00b fa64 	bl	21b28 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16660:	4606      	mov	r6, r0
   16662:	b180      	cbz	r0, 16686 <bt_hci_cmd_send_sync+0x76>
   16664:	4a22      	ldr	r2, [pc, #136]	; (166f0 <bt_hci_cmd_send_sync+0xe0>)
   16666:	4923      	ldr	r1, [pc, #140]	; (166f4 <bt_hci_cmd_send_sync+0xe4>)
   16668:	4823      	ldr	r0, [pc, #140]	; (166f8 <bt_hci_cmd_send_sync+0xe8>)
   1666a:	f240 1347 	movw	r3, #327	; 0x147
   1666e:	f011 faf0 	bl	27c52 <assert_print>
   16672:	4822      	ldr	r0, [pc, #136]	; (166fc <bt_hci_cmd_send_sync+0xec>)
   16674:	4631      	mov	r1, r6
   16676:	f011 faec 	bl	27c52 <assert_print>
   1667a:	4040      	eors	r0, r0
   1667c:	f380 8811 	msr	BASEPRI, r0
   16680:	f04f 0003 	mov.w	r0, #3
   16684:	df02      	svc	2
	status = cmd(buf)->status;
   16686:	4620      	mov	r0, r4
   16688:	f007 f9b2 	bl	1d9f0 <net_buf_id>
   1668c:	230c      	movs	r3, #12
   1668e:	4358      	muls	r0, r3
   16690:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   16694:	b1e6      	cbz	r6, 166d0 <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16696:	466d      	mov	r5, sp
   16698:	b088      	sub	sp, #32
   1669a:	466a      	mov	r2, sp
   1669c:	4b18      	ldr	r3, [pc, #96]	; (16700 <bt_hci_cmd_send_sync+0xf0>)
   1669e:	61d6      	str	r6, [r2, #28]
   166a0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   166a4:	2304      	movs	r3, #4
   166a6:	f842 3f10 	str.w	r3, [r2, #16]!
   166aa:	4816      	ldr	r0, [pc, #88]	; (16704 <bt_hci_cmd_send_sync+0xf4>)
   166ac:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   166b0:	f012 f96b 	bl	2898a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   166b4:	4620      	mov	r0, r4
   166b6:	46ad      	mov	sp, r5
   166b8:	f007 fa56 	bl	1db68 <net_buf_unref>
			return -EIO;
   166bc:	2e09      	cmp	r6, #9
   166be:	bf0c      	ite	eq
   166c0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   166c4:	f06f 0004 	mvnne.w	r0, #4
}
   166c8:	371c      	adds	r7, #28
   166ca:	46bd      	mov	sp, r7
   166cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   166d0:	b115      	cbz	r5, 166d8 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   166d2:	602c      	str	r4, [r5, #0]
	return 0;
   166d4:	4630      	mov	r0, r6
   166d6:	e7f7      	b.n	166c8 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   166d8:	4620      	mov	r0, r4
   166da:	f007 fa45 	bl	1db68 <net_buf_unref>
	return 0;
   166de:	4628      	mov	r0, r5
   166e0:	e7f2      	b.n	166c8 <bt_hci_cmd_send_sync+0xb8>
			return -ENOBUFS;
   166e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   166e6:	e7ef      	b.n	166c8 <bt_hci_cmd_send_sync+0xb8>
   166e8:	20002dbc 	.word	0x20002dbc
   166ec:	20000494 	.word	0x20000494
   166f0:	0002e43d 	.word	0x0002e43d
   166f4:	0002e5ca 	.word	0x0002e5ca
   166f8:	0002e48a 	.word	0x0002e48a
   166fc:	0002e5d3 	.word	0x0002e5d3
   16700:	0002e5f3 	.word	0x0002e5f3
   16704:	0002c7b4 	.word	0x0002c7b4

00016708 <hci_le_read_max_data_len>:
{
   16708:	b570      	push	{r4, r5, r6, lr}
   1670a:	b088      	sub	sp, #32
   1670c:	4606      	mov	r6, r0
   1670e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16710:	aa01      	add	r2, sp, #4
   16712:	2100      	movs	r1, #0
   16714:	f242 002f 	movw	r0, #8239	; 0x202f
   16718:	f7ff ff7a 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   1671c:	4604      	mov	r4, r0
   1671e:	b160      	cbz	r0, 1673a <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
   16720:	4b0b      	ldr	r3, [pc, #44]	; (16750 <hci_le_read_max_data_len+0x48>)
   16722:	9307      	str	r3, [sp, #28]
   16724:	480b      	ldr	r0, [pc, #44]	; (16754 <hci_le_read_max_data_len+0x4c>)
   16726:	2302      	movs	r3, #2
   16728:	aa06      	add	r2, sp, #24
   1672a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1672e:	9306      	str	r3, [sp, #24]
   16730:	f012 f92b 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   16734:	4620      	mov	r0, r4
   16736:	b008      	add	sp, #32
   16738:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1673a:	9801      	ldr	r0, [sp, #4]
   1673c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1673e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16742:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16744:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16748:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1674a:	f007 fa0d 	bl	1db68 <net_buf_unref>
	return 0;
   1674e:	e7f1      	b.n	16734 <hci_le_read_max_data_len+0x2c>
   16750:	0002e60f 	.word	0x0002e60f
   16754:	0002c7b4 	.word	0x0002c7b4

00016758 <bt_hci_le_rand>:
{
   16758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1675a:	4b14      	ldr	r3, [pc, #80]	; (167ac <bt_hci_le_rand+0x54>)
   1675c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   16760:	2b00      	cmp	r3, #0
{
   16762:	4605      	mov	r5, r0
   16764:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16766:	da1d      	bge.n	167a4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16768:	b914      	cbnz	r4, 16770 <bt_hci_le_rand+0x18>
	return 0;
   1676a:	4620      	mov	r0, r4
}
   1676c:	b003      	add	sp, #12
   1676e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16770:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16772:	aa01      	add	r2, sp, #4
   16774:	f04f 0100 	mov.w	r1, #0
   16778:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   1677c:	4626      	mov	r6, r4
   1677e:	bf28      	it	cs
   16780:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16782:	f7ff ff45 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   16786:	2800      	cmp	r0, #0
   16788:	d1f0      	bne.n	1676c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1678a:	9f01      	ldr	r7, [sp, #4]
   1678c:	68b9      	ldr	r1, [r7, #8]
   1678e:	4632      	mov	r2, r6
   16790:	3101      	adds	r1, #1
   16792:	4628      	mov	r0, r5
   16794:	f015 fc1b 	bl	2bfce <memcpy>
		net_buf_unref(rsp);
   16798:	4638      	mov	r0, r7
   1679a:	f007 f9e5 	bl	1db68 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1679e:	4435      	add	r5, r6
		len -= count;
   167a0:	1ba4      	subs	r4, r4, r6
   167a2:	e7e1      	b.n	16768 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   167a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   167a8:	e7e0      	b.n	1676c <bt_hci_le_rand+0x14>
   167aa:	bf00      	nop
   167ac:	20000350 	.word	0x20000350

000167b0 <bt_hci_le_enh_conn_complete>:
{
   167b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167b4:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   167b6:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   167ba:	4abe      	ldr	r2, [pc, #760]	; (16ab4 <bt_hci_le_enh_conn_complete+0x304>)
	handle |= ~BT_ACL_HANDLE_MASK;
   167bc:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   167c0:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   167c2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   167c6:	b29b      	uxth	r3, r3
   167c8:	4299      	cmp	r1, r3
{
   167ca:	4605      	mov	r5, r0
   167cc:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   167d0:	bf08      	it	eq
   167d2:	8016      	strheq	r6, [r2, #0]
{
   167d4:	af02      	add	r7, sp, #8
			return true;
   167d6:	bf08      	it	eq
   167d8:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   167da:	f001 f833 	bl	17844 <bt_id_pending_keys_update>
	if (evt->status) {
   167de:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   167e0:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   167e4:	b3a4      	cbz	r4, 16850 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167e6:	2c3c      	cmp	r4, #60	; 0x3c
   167e8:	d122      	bne.n	16830 <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   167ea:	f001 fa6b 	bl	17cc4 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   167ee:	f06f 0140 	mvn.w	r1, #64	; 0x40
   167f2:	3010      	adds	r0, #16
   167f4:	f012 f8cc 	bl	28990 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   167f8:	2000      	movs	r0, #0
   167fa:	f7ff faad 	bl	15d58 <find_pending_connect.part.0>
		if (!conn) {
   167fe:	4605      	mov	r5, r0
   16800:	b970      	cbnz	r0, 16820 <bt_hci_le_enh_conn_complete+0x70>
			BT_ERR("No pending peripheral connection");
   16802:	4bad      	ldr	r3, [pc, #692]	; (16ab8 <bt_hci_le_enh_conn_complete+0x308>)
   16804:	62fb      	str	r3, [r7, #44]	; 0x2c
   16806:	48ad      	ldr	r0, [pc, #692]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   16808:	2302      	movs	r3, #2
   1680a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1680e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16812:	62bb      	str	r3, [r7, #40]	; 0x28
   16814:	f012 f8b9 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   16818:	3734      	adds	r7, #52	; 0x34
   1681a:	46bd      	mov	sp, r7
   1681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16820:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16822:	2100      	movs	r1, #0
   16824:	f001 fdb4 	bl	18390 <bt_conn_set_state>
		bt_conn_unref(conn);
   16828:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   1682a:	f012 faa6 	bl	28d7a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1682e:	e7f3      	b.n	16818 <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   16830:	466d      	mov	r5, sp
   16832:	b088      	sub	sp, #32
   16834:	aa02      	add	r2, sp, #8
   16836:	4ba2      	ldr	r3, [pc, #648]	; (16ac0 <bt_hci_le_enh_conn_complete+0x310>)
   16838:	48a0      	ldr	r0, [pc, #640]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   1683a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1683e:	2303      	movs	r3, #3
   16840:	f842 3f10 	str.w	r3, [r2, #16]!
   16844:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16848:	f012 f89f 	bl	2898a <z_log_msg_static_create.constprop.0>
   1684c:	46ad      	mov	sp, r5
		return;
   1684e:	e7e3      	b.n	16818 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16850:	792b      	ldrb	r3, [r5, #4]
   16852:	3b02      	subs	r3, #2
   16854:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16856:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1685a:	d83f      	bhi.n	168dc <bt_hci_le_enh_conn_complete+0x12c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1685c:	4651      	mov	r1, sl
   1685e:	f107 0018 	add.w	r0, r7, #24
   16862:	f012 f88b 	bl	2897c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16866:	7e3b      	ldrb	r3, [r7, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   16868:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1686c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1686e:	f107 0011 	add.w	r0, r7, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16872:	763b      	strb	r3, [r7, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   16874:	f012 f87d 	bl	28972 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   16878:	2301      	movs	r3, #1
   1687a:	743b      	strb	r3, [r7, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1687c:	78eb      	ldrb	r3, [r5, #3]
   1687e:	2b01      	cmp	r3, #1
   16880:	d113      	bne.n	168aa <bt_hci_le_enh_conn_complete+0xfa>
   16882:	f107 0018 	add.w	r0, r7, #24
   16886:	f7ff fa67 	bl	15d58 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1688a:	78eb      	ldrb	r3, [r5, #3]
   1688c:	2b01      	cmp	r3, #1
   1688e:	4604      	mov	r4, r0
   16890:	d10a      	bne.n	168a8 <bt_hci_le_enh_conn_complete+0xf8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16892:	f001 fa17 	bl	17cc4 <bt_le_adv_lookup_legacy>
   16896:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1689a:	4683      	mov	fp, r0
   1689c:	3010      	adds	r0, #16
   1689e:	f012 f877 	bl	28990 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   168a2:	4658      	mov	r0, fp
   168a4:	f012 fa2d 	bl	28d02 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   168a8:	bb6c      	cbnz	r4, 16906 <bt_hci_le_enh_conn_complete+0x156>
		BT_ERR("No pending conn for peer %s",
   168aa:	4650      	mov	r0, sl
   168ac:	f7fe ff3c 	bl	15728 <bt_addr_le_str_real>
   168b0:	466c      	mov	r4, sp
   168b2:	b088      	sub	sp, #32
   168b4:	aa02      	add	r2, sp, #8
   168b6:	4b83      	ldr	r3, [pc, #524]	; (16ac4 <bt_hci_le_enh_conn_complete+0x314>)
   168b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   168bc:	2302      	movs	r3, #2
   168be:	7713      	strb	r3, [r2, #28]
   168c0:	4b81      	ldr	r3, [pc, #516]	; (16ac8 <bt_hci_le_enh_conn_complete+0x318>)
   168c2:	f842 3f10 	str.w	r3, [r2, #16]!
   168c6:	487d      	ldr	r0, [pc, #500]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   168c8:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   168cc:	f012 f85d 	bl	2898a <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   168d0:	211f      	movs	r1, #31
   168d2:	46a5      	mov	sp, r4
   168d4:	4640      	mov	r0, r8
   168d6:	f012 f877 	bl	289c8 <bt_hci_disconnect>
		return;
   168da:	e79d      	b.n	16818 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   168dc:	78eb      	ldrb	r3, [r5, #3]
   168de:	2b01      	cmp	r3, #1
   168e0:	bf04      	itt	eq
   168e2:	4b7a      	ldreq	r3, [pc, #488]	; (16acc <bt_hci_le_enh_conn_complete+0x31c>)
   168e4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   168e8:	4651      	mov	r1, sl
   168ea:	4620      	mov	r0, r4
   168ec:	f012 f9b2 	bl	28c54 <bt_lookup_id_addr>
   168f0:	4601      	mov	r1, r0
   168f2:	f107 0018 	add.w	r0, r7, #24
   168f6:	f012 f841 	bl	2897c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   168fa:	4651      	mov	r1, sl
   168fc:	f107 0010 	add.w	r0, r7, #16
   16900:	f012 f83c 	bl	2897c <bt_addr_le_copy>
   16904:	e7ba      	b.n	1687c <bt_hci_le_enh_conn_complete+0xcc>
	conn->handle = handle;
   16906:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16908:	f107 0118 	add.w	r1, r7, #24
	conn->handle = handle;
   1690c:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16910:	f012 f834 	bl	2897c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16914:	7e2a      	ldrb	r2, [r5, #24]
   16916:	7deb      	ldrb	r3, [r5, #23]
   16918:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1691c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16920:	7eaa      	ldrb	r2, [r5, #26]
   16922:	7e6b      	ldrb	r3, [r5, #25]
   16924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16928:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1692c:	7eeb      	ldrb	r3, [r5, #27]
   1692e:	7f2a      	ldrb	r2, [r5, #28]
   16930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16934:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   16938:	f895 9003 	ldrb.w	r9, [r5, #3]
   1693c:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   16940:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16942:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   16946:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16948:	d12e      	bne.n	169a8 <bt_hci_le_enh_conn_complete+0x1f8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1694a:	f107 0110 	add.w	r1, r7, #16
   1694e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   16952:	f012 f813 	bl	2897c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16956:	f001 f9b5 	bl	17cc4 <bt_le_adv_lookup_legacy>
   1695a:	f3bf 8f5b 	dmb	ish
   1695e:	6902      	ldr	r2, [r0, #16]
   16960:	f8df 8168 	ldr.w	r8, [pc, #360]	; 16acc <bt_hci_le_enh_conn_complete+0x31c>
   16964:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16968:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   1696c:	f3c2 3300 	ubfx	r3, r2, #12, #1
   16970:	f040 80b4 	bne.w	16adc <bt_hci_le_enh_conn_complete+0x32c>
				if (bt_addr_cmp(&evt->local_rpa,
   16974:	350b      	adds	r5, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   16976:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
	return memcmp(a, b, sizeof(*a));
   1697a:	2206      	movs	r2, #6
   1697c:	f107 0108 	add.w	r1, r7, #8
   16980:	4628      	mov	r0, r5
						BT_ADDR_ANY) != 0) {
   16982:	60bb      	str	r3, [r7, #8]
   16984:	81bb      	strh	r3, [r7, #12]
   16986:	f015 fb12 	bl	2bfae <memcmp>
   1698a:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
   1698c:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   16990:	2b00      	cmp	r3, #0
   16992:	f000 808c 	beq.w	16aae <bt_hci_le_enh_conn_complete+0x2fe>
					bt_addr_copy(&conn->le.resp_addr.a,
   16996:	4629      	mov	r1, r5
					bt_addr_copy(&conn->le.resp_addr.a,
   16998:	f011 ffeb 	bl	28972 <bt_addr_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1699c:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   169a0:	065d      	lsls	r5, r3, #25
   169a2:	d501      	bpl.n	169a8 <bt_hci_le_enh_conn_complete+0x1f8>
			bt_le_adv_resume();
   169a4:	f001 f992 	bl	17ccc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   169a8:	2107      	movs	r1, #7
   169aa:	4620      	mov	r0, r4
   169ac:	f001 fcf0 	bl	18390 <bt_conn_set_state>
	if (is_disconnected) {
   169b0:	b11e      	cbz	r6, 169ba <bt_hci_le_enh_conn_complete+0x20a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   169b2:	2101      	movs	r1, #1
   169b4:	4620      	mov	r0, r4
   169b6:	f001 fceb 	bl	18390 <bt_conn_set_state>
	bt_conn_connected(conn);
   169ba:	4620      	mov	r0, r4
   169bc:	f012 fa19 	bl	28df2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   169c0:	7b63      	ldrb	r3, [r4, #13]
   169c2:	2b07      	cmp	r3, #7
   169c4:	d171      	bne.n	16aaa <bt_hci_le_enh_conn_complete+0x2fa>
   169c6:	f3bf 8f5b 	dmb	ish
   169ca:	6863      	ldr	r3, [r4, #4]
   169cc:	4d3f      	ldr	r5, [pc, #252]	; (16acc <bt_hci_le_enh_conn_complete+0x31c>)
   169ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   169d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   169d6:	d129      	bne.n	16a2c <bt_hci_le_enh_conn_complete+0x27c>
   169d8:	78e3      	ldrb	r3, [r4, #3]
   169da:	b11b      	cbz	r3, 169e4 <bt_hci_le_enh_conn_complete+0x234>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   169dc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   169e0:	0718      	lsls	r0, r3, #28
   169e2:	d523      	bpl.n	16a2c <bt_hci_le_enh_conn_complete+0x27c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   169e4:	2102      	movs	r1, #2
   169e6:	f242 0016 	movw	r0, #8214	; 0x2016
   169ea:	f7ff fdd7 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   169ee:	4606      	mov	r6, r0
   169f0:	2800      	cmp	r0, #0
   169f2:	d07c      	beq.n	16aee <bt_hci_le_enh_conn_complete+0x33e>
   169f4:	2102      	movs	r1, #2
   169f6:	3008      	adds	r0, #8
   169f8:	f014 f874 	bl	2aae4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   169fc:	8823      	ldrh	r3, [r4, #0]
   169fe:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16a00:	2200      	movs	r2, #0
   16a02:	4631      	mov	r1, r6
   16a04:	f242 0016 	movw	r0, #8214	; 0x2016
   16a08:	f7ff fe02 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   16a0c:	b170      	cbz	r0, 16a2c <bt_hci_le_enh_conn_complete+0x27c>
			BT_ERR("Failed read remote features (%d)", err);
   16a0e:	466e      	mov	r6, sp
   16a10:	b088      	sub	sp, #32
   16a12:	aa02      	add	r2, sp, #8
   16a14:	4b2e      	ldr	r3, [pc, #184]	; (16ad0 <bt_hci_le_enh_conn_complete+0x320>)
   16a16:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16a1a:	2303      	movs	r3, #3
   16a1c:	f842 3f10 	str.w	r3, [r2, #16]!
   16a20:	4826      	ldr	r0, [pc, #152]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   16a22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a26:	f011 ffb0 	bl	2898a <z_log_msg_static_create.constprop.0>
   16a2a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16a2c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   16a30:	07d9      	lsls	r1, r3, #31
   16a32:	d516      	bpl.n	16a62 <bt_hci_le_enh_conn_complete+0x2b2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16a34:	2100      	movs	r1, #0
   16a36:	2302      	movs	r3, #2
   16a38:	9100      	str	r1, [sp, #0]
   16a3a:	461a      	mov	r2, r3
   16a3c:	4620      	mov	r0, r4
   16a3e:	f011 fffc 	bl	28a3a <bt_le_set_phy>
		if (err) {
   16a42:	b170      	cbz	r0, 16a62 <bt_hci_le_enh_conn_complete+0x2b2>
			BT_ERR("Failed LE Set PHY (%d)", err);
   16a44:	466e      	mov	r6, sp
   16a46:	b088      	sub	sp, #32
   16a48:	aa02      	add	r2, sp, #8
   16a4a:	4b22      	ldr	r3, [pc, #136]	; (16ad4 <bt_hci_le_enh_conn_complete+0x324>)
   16a4c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16a50:	2303      	movs	r3, #3
   16a52:	f842 3f10 	str.w	r3, [r2, #16]!
   16a56:	4819      	ldr	r0, [pc, #100]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   16a58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a5c:	f011 ff95 	bl	2898a <z_log_msg_static_create.constprop.0>
   16a60:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16a62:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16a66:	069a      	lsls	r2, r3, #26
   16a68:	d51f      	bpl.n	16aaa <bt_hci_le_enh_conn_complete+0x2fa>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16a6a:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   16a6e:	689b      	ldr	r3, [r3, #8]
   16a70:	079b      	lsls	r3, r3, #30
   16a72:	d51a      	bpl.n	16aaa <bt_hci_le_enh_conn_complete+0x2fa>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16a74:	f107 0108 	add.w	r1, r7, #8
   16a78:	1db8      	adds	r0, r7, #6
   16a7a:	f7ff fe45 	bl	16708 <hci_le_read_max_data_len>
			if (!err) {
   16a7e:	b9a0      	cbnz	r0, 16aaa <bt_hci_le_enh_conn_complete+0x2fa>
				err = bt_le_set_data_len(conn,
   16a80:	893a      	ldrh	r2, [r7, #8]
   16a82:	88f9      	ldrh	r1, [r7, #6]
   16a84:	4620      	mov	r0, r4
   16a86:	f011 ffba 	bl	289fe <bt_le_set_data_len>
				if (err) {
   16a8a:	b170      	cbz	r0, 16aaa <bt_hci_le_enh_conn_complete+0x2fa>
					BT_ERR("Failed to set data len (%d)", err);
   16a8c:	466d      	mov	r5, sp
   16a8e:	b088      	sub	sp, #32
   16a90:	aa02      	add	r2, sp, #8
   16a92:	4b11      	ldr	r3, [pc, #68]	; (16ad8 <bt_hci_le_enh_conn_complete+0x328>)
   16a94:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16a98:	2303      	movs	r3, #3
   16a9a:	f842 3f10 	str.w	r3, [r2, #16]!
   16a9e:	4807      	ldr	r0, [pc, #28]	; (16abc <bt_hci_le_enh_conn_complete+0x30c>)
   16aa0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16aa4:	f011 ff71 	bl	2898a <z_log_msg_static_create.constprop.0>
   16aa8:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16aaa:	4620      	mov	r0, r4
   16aac:	e6bd      	b.n	1682a <bt_hci_le_enh_conn_complete+0x7a>
					bt_addr_copy(&conn->le.resp_addr.a,
   16aae:	f108 0161 	add.w	r1, r8, #97	; 0x61
   16ab2:	e771      	b.n	16998 <bt_hci_le_enh_conn_complete+0x1e8>
   16ab4:	20003d88 	.word	0x20003d88
   16ab8:	0002e62f 	.word	0x0002e62f
   16abc:	0002c7b4 	.word	0x0002c7b4
   16ac0:	0002e650 	.word	0x0002e650
   16ac4:	0002e669 	.word	0x0002e669
   16ac8:	01000003 	.word	0x01000003
   16acc:	20000350 	.word	0x20000350
   16ad0:	0002e685 	.word	0x0002e685
   16ad4:	0002e6a6 	.word	0x0002e6a6
   16ad8:	0002e6bd 	.word	0x0002e6bd
						&bt_dev.id_addr[conn->id]);
   16adc:	7a21      	ldrb	r1, [r4, #8]
   16ade:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16ae2:	4441      	add	r1, r8
   16ae4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16ae8:	f011 ff48 	bl	2897c <bt_addr_le_copy>
   16aec:	e756      	b.n	1699c <bt_hci_le_enh_conn_complete+0x1ec>
		return -ENOBUFS;
   16aee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16af2:	e78c      	b.n	16a0e <bt_hci_le_enh_conn_complete+0x25e>

00016af4 <le_legacy_conn_complete>:
{
   16af4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16af6:	6881      	ldr	r1, [r0, #8]
{
   16af8:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   16afa:	780b      	ldrb	r3, [r1, #0]
   16afc:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   16b00:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16b04:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   16b08:	78cb      	ldrb	r3, [r1, #3]
   16b0a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   16b0e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16b12:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   16b16:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16b1a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   16b1e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16b22:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   16b26:	7c4b      	ldrb	r3, [r1, #17]
   16b28:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   16b2c:	a803      	add	r0, sp, #12
   16b2e:	3104      	adds	r1, #4
   16b30:	f011 ff24 	bl	2897c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
   16b34:	f10d 0013 	add.w	r0, sp, #19
   16b38:	4908      	ldr	r1, [pc, #32]	; (16b5c <le_legacy_conn_complete+0x68>)
   16b3a:	f011 ff1a 	bl	28972 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   16b3e:	2300      	movs	r3, #0
   16b40:	4669      	mov	r1, sp
   16b42:	f10d 0019 	add.w	r0, sp, #25
   16b46:	9300      	str	r3, [sp, #0]
   16b48:	f8ad 3004 	strh.w	r3, [sp, #4]
   16b4c:	f011 ff11 	bl	28972 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   16b50:	a802      	add	r0, sp, #8
   16b52:	f7ff fe2d 	bl	167b0 <bt_hci_le_enh_conn_complete>
}
   16b56:	b00b      	add	sp, #44	; 0x2c
   16b58:	f85d fb04 	ldr.w	pc, [sp], #4
   16b5c:	200003b1 	.word	0x200003b1

00016b60 <bt_unpair>:
{
   16b60:	b530      	push	{r4, r5, lr}
   16b62:	b085      	sub	sp, #20
   16b64:	460d      	mov	r5, r1
   16b66:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   16b6a:	b9d0      	cbnz	r0, 16ba2 <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16b6c:	b949      	cbnz	r1, 16b82 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   16b6e:	490e      	ldr	r1, [pc, #56]	; (16ba8 <bt_unpair+0x48>)
   16b70:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b74:	f10d 0207 	add.w	r2, sp, #7
   16b78:	f006 fd36 	bl	1d5e8 <bt_foreach_bond>
		return 0;
   16b7c:	2000      	movs	r0, #0
}
   16b7e:	b005      	add	sp, #20
   16b80:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16b82:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   16b84:	2207      	movs	r2, #7
   16b86:	f8cd 000b 	str.w	r0, [sp, #11]
   16b8a:	a902      	add	r1, sp, #8
   16b8c:	4628      	mov	r0, r5
   16b8e:	f015 fa0e 	bl	2bfae <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16b92:	2800      	cmp	r0, #0
   16b94:	d0eb      	beq.n	16b6e <bt_unpair+0xe>
	unpair(id, addr);
   16b96:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b9a:	4629      	mov	r1, r5
   16b9c:	f7ff f87e 	bl	15c9c <unpair>
	return 0;
   16ba0:	e7ec      	b.n	16b7c <bt_unpair+0x1c>
		return -EINVAL;
   16ba2:	f06f 0015 	mvn.w	r0, #21
   16ba6:	e7ea      	b.n	16b7e <bt_unpair+0x1e>
   16ba8:	00028969 	.word	0x00028969

00016bac <bt_security_err_get>:
	switch (hci_err) {
   16bac:	2829      	cmp	r0, #41	; 0x29
   16bae:	bf9a      	itte	ls
   16bb0:	4b01      	ldrls	r3, [pc, #4]	; (16bb8 <bt_security_err_get+0xc>)
   16bb2:	5c18      	ldrbls	r0, [r3, r0]
{
   16bb4:	2009      	movhi	r0, #9
}
   16bb6:	4770      	bx	lr
   16bb8:	0002e926 	.word	0x0002e926

00016bbc <hci_encrypt_key_refresh_complete>:
{
   16bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bbe:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16bc0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16bc2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16bc6:	781d      	ldrb	r5, [r3, #0]
{
   16bc8:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16bca:	4630      	mov	r0, r6
   16bcc:	f001 fbd8 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16bd0:	4604      	mov	r4, r0
   16bd2:	b988      	cbnz	r0, 16bf8 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16bd4:	466c      	mov	r4, sp
   16bd6:	b088      	sub	sp, #32
   16bd8:	466a      	mov	r2, sp
   16bda:	4b20      	ldr	r3, [pc, #128]	; (16c5c <hci_encrypt_key_refresh_complete+0xa0>)
   16bdc:	4820      	ldr	r0, [pc, #128]	; (16c60 <hci_encrypt_key_refresh_complete+0xa4>)
   16bde:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16be2:	2303      	movs	r3, #3
   16be4:	f842 3f10 	str.w	r3, [r2, #16]!
   16be8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16bec:	f011 fecd 	bl	2898a <z_log_msg_static_create.constprop.0>
   16bf0:	46a5      	mov	sp, r4
}
   16bf2:	371c      	adds	r7, #28
   16bf4:	46bd      	mov	sp, r7
   16bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   16bf8:	b15d      	cbz	r5, 16c12 <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
   16bfa:	4628      	mov	r0, r5
   16bfc:	f7ff ffd6 	bl	16bac <bt_security_err_get>
   16c00:	4629      	mov	r1, r5
   16c02:	4602      	mov	r2, r0
   16c04:	4620      	mov	r0, r4
   16c06:	f001 fd7f 	bl	18708 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16c0a:	4620      	mov	r0, r4
   16c0c:	f012 f8b5 	bl	28d7a <bt_conn_unref>
   16c10:	e7ef      	b.n	16bf2 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   16c12:	7883      	ldrb	r3, [r0, #2]
   16c14:	2b01      	cmp	r3, #1
   16c16:	d107      	bne.n	16c28 <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
   16c18:	f006 fbfc 	bl	1d414 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16c1c:	4620      	mov	r0, r4
   16c1e:	f011 fe7b 	bl	28918 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16c22:	2800      	cmp	r0, #0
   16c24:	bf08      	it	eq
   16c26:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16c28:	4628      	mov	r0, r5
   16c2a:	f7ff ffbf 	bl	16bac <bt_security_err_get>
   16c2e:	4629      	mov	r1, r5
   16c30:	4602      	mov	r2, r0
   16c32:	4620      	mov	r0, r4
   16c34:	f001 fd68 	bl	18708 <bt_conn_security_changed>
	if (status) {
   16c38:	2d00      	cmp	r5, #0
   16c3a:	d0e6      	beq.n	16c0a <hci_encrypt_key_refresh_complete+0x4e>
		BT_ERR("Failed to set required security level");
   16c3c:	4b09      	ldr	r3, [pc, #36]	; (16c64 <hci_encrypt_key_refresh_complete+0xa8>)
   16c3e:	617b      	str	r3, [r7, #20]
   16c40:	4807      	ldr	r0, [pc, #28]	; (16c60 <hci_encrypt_key_refresh_complete+0xa4>)
   16c42:	2302      	movs	r3, #2
   16c44:	f107 0210 	add.w	r2, r7, #16
   16c48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c4c:	613b      	str	r3, [r7, #16]
   16c4e:	f011 fe9c 	bl	2898a <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16c52:	4629      	mov	r1, r5
   16c54:	4620      	mov	r0, r4
   16c56:	f012 f8d5 	bl	28e04 <bt_conn_disconnect>
   16c5a:	e7d6      	b.n	16c0a <hci_encrypt_key_refresh_complete+0x4e>
   16c5c:	0002e3f5 	.word	0x0002e3f5
   16c60:	0002c7b4 	.word	0x0002c7b4
   16c64:	0002e6d9 	.word	0x0002e6d9

00016c68 <hci_encrypt_change>:
{
   16c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c6c:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16c6e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16c70:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   16c74:	7835      	ldrb	r5, [r6, #0]
{
   16c76:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16c78:	4640      	mov	r0, r8
   16c7a:	f001 fb81 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16c7e:	4604      	mov	r4, r0
   16c80:	b990      	cbnz	r0, 16ca8 <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16c82:	466c      	mov	r4, sp
   16c84:	b088      	sub	sp, #32
   16c86:	466a      	mov	r2, sp
   16c88:	4b22      	ldr	r3, [pc, #136]	; (16d14 <hci_encrypt_change+0xac>)
   16c8a:	4823      	ldr	r0, [pc, #140]	; (16d18 <hci_encrypt_change+0xb0>)
   16c8c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16c90:	2303      	movs	r3, #3
   16c92:	f842 3f10 	str.w	r3, [r2, #16]!
   16c96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c9a:	f011 fe76 	bl	2898a <z_log_msg_static_create.constprop.0>
   16c9e:	46a5      	mov	sp, r4
}
   16ca0:	3718      	adds	r7, #24
   16ca2:	46bd      	mov	sp, r7
   16ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   16ca8:	b15d      	cbz	r5, 16cc2 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   16caa:	4628      	mov	r0, r5
   16cac:	f7ff ff7e 	bl	16bac <bt_security_err_get>
   16cb0:	4629      	mov	r1, r5
   16cb2:	4602      	mov	r2, r0
   16cb4:	4620      	mov	r0, r4
   16cb6:	f001 fd27 	bl	18708 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16cba:	4620      	mov	r0, r4
   16cbc:	f012 f85d 	bl	28d7a <bt_conn_unref>
   16cc0:	e7ee      	b.n	16ca0 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   16cc2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   16cc4:	78f3      	ldrb	r3, [r6, #3]
   16cc6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   16cc8:	2a01      	cmp	r2, #1
   16cca:	d108      	bne.n	16cde <hci_encrypt_change+0x76>
		if (conn->encrypt) {
   16ccc:	b10b      	cbz	r3, 16cd2 <hci_encrypt_change+0x6a>
			bt_smp_update_keys(conn);
   16cce:	f006 fba1 	bl	1d414 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16cd2:	4620      	mov	r0, r4
   16cd4:	f011 fe20 	bl	28918 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16cd8:	2800      	cmp	r0, #0
   16cda:	bf08      	it	eq
   16cdc:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16cde:	4628      	mov	r0, r5
   16ce0:	f7ff ff64 	bl	16bac <bt_security_err_get>
   16ce4:	4629      	mov	r1, r5
   16ce6:	4602      	mov	r2, r0
   16ce8:	4620      	mov	r0, r4
   16cea:	f001 fd0d 	bl	18708 <bt_conn_security_changed>
	if (status) {
   16cee:	2d00      	cmp	r5, #0
   16cf0:	d0e3      	beq.n	16cba <hci_encrypt_change+0x52>
		BT_ERR("Failed to set required security level");
   16cf2:	4b0a      	ldr	r3, [pc, #40]	; (16d1c <hci_encrypt_change+0xb4>)
   16cf4:	617b      	str	r3, [r7, #20]
   16cf6:	4808      	ldr	r0, [pc, #32]	; (16d18 <hci_encrypt_change+0xb0>)
   16cf8:	2302      	movs	r3, #2
   16cfa:	f107 0210 	add.w	r2, r7, #16
   16cfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16d02:	613b      	str	r3, [r7, #16]
   16d04:	f011 fe41 	bl	2898a <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16d08:	4629      	mov	r1, r5
   16d0a:	4620      	mov	r0, r4
   16d0c:	f012 f87a 	bl	28e04 <bt_conn_disconnect>
   16d10:	e7d3      	b.n	16cba <hci_encrypt_change+0x52>
   16d12:	bf00      	nop
   16d14:	0002e3f5 	.word	0x0002e3f5
   16d18:	0002c7b4 	.word	0x0002c7b4
   16d1c:	0002e6d9 	.word	0x0002e6d9

00016d20 <bt_send>:
	return bt_dev.drv->send(buf);
   16d20:	4b02      	ldr	r3, [pc, #8]	; (16d2c <bt_send+0xc>)
   16d22:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   16d26:	695b      	ldr	r3, [r3, #20]
   16d28:	4718      	bx	r3
   16d2a:	bf00      	nop
   16d2c:	20000350 	.word	0x20000350

00016d30 <bt_hci_cmd_send>:
{
   16d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d32:	4605      	mov	r5, r0
   16d34:	af00      	add	r7, sp, #0
	if (!buf) {
   16d36:	460c      	mov	r4, r1
   16d38:	b919      	cbnz	r1, 16d42 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   16d3a:	f7ff fc2f 	bl	1659c <bt_hci_cmd_create>
		if (!buf) {
   16d3e:	4604      	mov	r4, r0
   16d40:	b318      	cbz	r0, 16d8a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16d42:	f640 4335 	movw	r3, #3125	; 0xc35
   16d46:	429d      	cmp	r5, r3
   16d48:	d119      	bne.n	16d7e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   16d4a:	4620      	mov	r0, r4
   16d4c:	f7ff ffe8 	bl	16d20 <bt_send>
		if (err) {
   16d50:	4605      	mov	r5, r0
   16d52:	b188      	cbz	r0, 16d78 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
   16d54:	466e      	mov	r6, sp
   16d56:	b088      	sub	sp, #32
   16d58:	466a      	mov	r2, sp
   16d5a:	4b0d      	ldr	r3, [pc, #52]	; (16d90 <bt_hci_cmd_send+0x60>)
   16d5c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d60:	2303      	movs	r3, #3
   16d62:	480c      	ldr	r0, [pc, #48]	; (16d94 <bt_hci_cmd_send+0x64>)
   16d64:	f842 3f10 	str.w	r3, [r2, #16]!
   16d68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d6c:	f011 fe0d 	bl	2898a <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   16d70:	4620      	mov	r0, r4
   16d72:	46b5      	mov	sp, r6
   16d74:	f006 fef8 	bl	1db68 <net_buf_unref>
}
   16d78:	4628      	mov	r0, r5
   16d7a:	46bd      	mov	sp, r7
   16d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16d7e:	4806      	ldr	r0, [pc, #24]	; (16d98 <bt_hci_cmd_send+0x68>)
   16d80:	4621      	mov	r1, r4
   16d82:	f013 fe7c 	bl	2aa7e <net_buf_put>
	return 0;
   16d86:	2500      	movs	r5, #0
   16d88:	e7f6      	b.n	16d78 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   16d8a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16d8e:	e7f3      	b.n	16d78 <bt_hci_cmd_send+0x48>
   16d90:	0002e6ff 	.word	0x0002e6ff
   16d94:	0002c7b4 	.word	0x0002c7b4
   16d98:	20000494 	.word	0x20000494

00016d9c <le_ltk_request>:
{
   16d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16da0:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16da2:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16da4:	8826      	ldrh	r6, [r4, #0]
   16da6:	fa1f f886 	uxth.w	r8, r6
{
   16daa:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   16dac:	4640      	mov	r0, r8
   16dae:	f001 fae7 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16db2:	4605      	mov	r5, r0
   16db4:	b990      	cbnz	r0, 16ddc <le_ltk_request+0x40>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16db6:	466c      	mov	r4, sp
   16db8:	b088      	sub	sp, #32
   16dba:	aa02      	add	r2, sp, #8
   16dbc:	4b2c      	ldr	r3, [pc, #176]	; (16e70 <le_ltk_request+0xd4>)
   16dbe:	482d      	ldr	r0, [pc, #180]	; (16e74 <le_ltk_request+0xd8>)
   16dc0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16dc4:	2303      	movs	r3, #3
   16dc6:	f842 3f10 	str.w	r3, [r2, #16]!
   16dca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16dce:	f011 fddc 	bl	2898a <z_log_msg_static_create.constprop.0>
   16dd2:	46a5      	mov	sp, r4
}
   16dd4:	3728      	adds	r7, #40	; 0x28
   16dd6:	46bd      	mov	sp, r7
   16dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16ddc:	f8d4 2002 	ldr.w	r2, [r4, #2]
   16de0:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16de4:	9701      	str	r7, [sp, #4]
   16de6:	8961      	ldrh	r1, [r4, #10]
   16de8:	9100      	str	r1, [sp, #0]
   16dea:	f013 fc22 	bl	2a632 <bt_smp_request_ltk>
   16dee:	b370      	cbz	r0, 16e4e <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   16df0:	2112      	movs	r1, #18
   16df2:	f242 001a 	movw	r0, #8218	; 0x201a
   16df6:	f7ff fbd1 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   16dfa:	4604      	mov	r4, r0
   16dfc:	b970      	cbnz	r0, 16e1c <le_ltk_request+0x80>
		BT_ERR("Out of command buffers");
   16dfe:	4b1e      	ldr	r3, [pc, #120]	; (16e78 <le_ltk_request+0xdc>)
   16e00:	627b      	str	r3, [r7, #36]	; 0x24
   16e02:	481c      	ldr	r0, [pc, #112]	; (16e74 <le_ltk_request+0xd8>)
   16e04:	2302      	movs	r3, #2
   16e06:	f107 0220 	add.w	r2, r7, #32
   16e0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e0e:	623b      	str	r3, [r7, #32]
   16e10:	f011 fdbb 	bl	2898a <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   16e14:	4628      	mov	r0, r5
   16e16:	f011 ffb0 	bl	28d7a <bt_conn_unref>
   16e1a:	e7db      	b.n	16dd4 <le_ltk_request+0x38>
   16e1c:	2112      	movs	r1, #18
   16e1e:	3008      	adds	r0, #8
   16e20:	f013 fe60 	bl	2aae4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   16e24:	4603      	mov	r3, r0
   16e26:	463a      	mov	r2, r7
   16e28:	f823 6b02 	strh.w	r6, [r3], #2
   16e2c:	f107 0c10 	add.w	ip, r7, #16
   16e30:	4616      	mov	r6, r2
   16e32:	ce03      	ldmia	r6!, {r0, r1}
   16e34:	4566      	cmp	r6, ip
   16e36:	6018      	str	r0, [r3, #0]
   16e38:	6059      	str	r1, [r3, #4]
   16e3a:	4632      	mov	r2, r6
   16e3c:	f103 0308 	add.w	r3, r3, #8
   16e40:	d1f6      	bne.n	16e30 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16e42:	4621      	mov	r1, r4
   16e44:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e48:	f7ff ff72 	bl	16d30 <bt_hci_cmd_send>
   16e4c:	e7e2      	b.n	16e14 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16e4e:	2102      	movs	r1, #2
   16e50:	f242 001b 	movw	r0, #8219	; 0x201b
   16e54:	f7ff fba2 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   16e58:	4604      	mov	r4, r0
   16e5a:	2800      	cmp	r0, #0
   16e5c:	d0cf      	beq.n	16dfe <le_ltk_request+0x62>
   16e5e:	2102      	movs	r1, #2
   16e60:	3008      	adds	r0, #8
   16e62:	f013 fe3f 	bl	2aae4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e66:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16e68:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e6a:	f242 001b 	movw	r0, #8219	; 0x201b
   16e6e:	e7eb      	b.n	16e48 <le_ltk_request+0xac>
   16e70:	0002e370 	.word	0x0002e370
   16e74:	0002c7b4 	.word	0x0002c7b4
   16e78:	0002e721 	.word	0x0002e721

00016e7c <le_conn_param_req>:
{
   16e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e80:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16e82:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16e84:	78d9      	ldrb	r1, [r3, #3]
   16e86:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16e88:	f8b3 8000 	ldrh.w	r8, [r3]
{
   16e8c:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16e8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16e92:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16e94:	7959      	ldrb	r1, [r3, #5]
   16e96:	791a      	ldrb	r2, [r3, #4]
   16e98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16e9c:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16e9e:	799a      	ldrb	r2, [r3, #6]
   16ea0:	79d9      	ldrb	r1, [r3, #7]
   16ea2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ea6:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16ea8:	7a1a      	ldrb	r2, [r3, #8]
   16eaa:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16eac:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16eb0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16eb4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16eb6:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16eb8:	f001 fa62 	bl	18380 <bt_conn_lookup_handle>
	if (!conn) {
   16ebc:	4606      	mov	r6, r0
   16ebe:	b9b0      	cbnz	r0, 16eee <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16ec0:	466d      	mov	r5, sp
   16ec2:	b088      	sub	sp, #32
   16ec4:	466a      	mov	r2, sp
   16ec6:	4b20      	ldr	r3, [pc, #128]	; (16f48 <le_conn_param_req+0xcc>)
   16ec8:	4820      	ldr	r0, [pc, #128]	; (16f4c <le_conn_param_req+0xd0>)
   16eca:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16ece:	2303      	movs	r3, #3
   16ed0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ed4:	f842 3f10 	str.w	r3, [r2, #16]!
   16ed8:	f011 fd57 	bl	2898a <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16edc:	2102      	movs	r1, #2
   16ede:	46ad      	mov	sp, r5
   16ee0:	4620      	mov	r0, r4
   16ee2:	f011 fdf5 	bl	28ad0 <le_conn_param_neg_reply>
}
   16ee6:	3708      	adds	r7, #8
   16ee8:	46bd      	mov	sp, r7
   16eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   16eee:	4639      	mov	r1, r7
   16ef0:	f001 fba2 	bl	18638 <le_param_req>
   16ef4:	b938      	cbnz	r0, 16f06 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16ef6:	211e      	movs	r1, #30
   16ef8:	4620      	mov	r0, r4
   16efa:	f011 fde9 	bl	28ad0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16efe:	4630      	mov	r0, r6
   16f00:	f011 ff3b 	bl	28d7a <bt_conn_unref>
   16f04:	e7ef      	b.n	16ee6 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16f06:	210e      	movs	r1, #14
   16f08:	f242 0020 	movw	r0, #8224	; 0x2020
   16f0c:	f7ff fb46 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   16f10:	4605      	mov	r5, r0
   16f12:	2800      	cmp	r0, #0
   16f14:	d0f3      	beq.n	16efe <le_conn_param_req+0x82>
   16f16:	210e      	movs	r1, #14
   16f18:	3008      	adds	r0, #8
   16f1a:	f013 fde3 	bl	2aae4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   16f1e:	220e      	movs	r2, #14
   16f20:	4604      	mov	r4, r0
   16f22:	2100      	movs	r1, #0
   16f24:	f015 f874 	bl	2c010 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16f28:	883b      	ldrh	r3, [r7, #0]
   16f2a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16f2c:	887b      	ldrh	r3, [r7, #2]
   16f2e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16f30:	88bb      	ldrh	r3, [r7, #4]
   16f32:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16f34:	88fb      	ldrh	r3, [r7, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16f36:	f8a4 8000 	strh.w	r8, [r4]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16f3a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16f3c:	4629      	mov	r1, r5
   16f3e:	f242 0020 	movw	r0, #8224	; 0x2020
   16f42:	f7ff fef5 	bl	16d30 <bt_hci_cmd_send>
   16f46:	e7da      	b.n	16efe <le_conn_param_req+0x82>
   16f48:	0002e370 	.word	0x0002e370
   16f4c:	0002c7b4 	.word	0x0002c7b4

00016f50 <hci_event_prio>:
{
   16f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f54:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16f56:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16f5a:	4630      	mov	r0, r6
   16f5c:	f013 fe01 	bl	2ab62 <net_buf_simple_headroom>
	state->len = buf->len;
   16f60:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16f64:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16f68:	4605      	mov	r5, r0
   16f6a:	d80c      	bhi.n	16f86 <hci_event_prio+0x36>
   16f6c:	4a1c      	ldr	r2, [pc, #112]	; (16fe0 <hci_event_prio+0x90>)
   16f6e:	491d      	ldr	r1, [pc, #116]	; (16fe4 <hci_event_prio+0x94>)
   16f70:	481d      	ldr	r0, [pc, #116]	; (16fe8 <hci_event_prio+0x98>)
   16f72:	f640 536f 	movw	r3, #3439	; 0xd6f
   16f76:	f010 fe6c 	bl	27c52 <assert_print>
   16f7a:	4040      	eors	r0, r0
   16f7c:	f380 8811 	msr	BASEPRI, r0
   16f80:	f04f 0003 	mov.w	r0, #3
   16f84:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16f86:	4630      	mov	r0, r6
   16f88:	2102      	movs	r1, #2
   16f8a:	f013 fdd2 	bl	2ab32 <net_buf_simple_pull_mem>
   16f8e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16f90:	7800      	ldrb	r0, [r0, #0]
   16f92:	f011 fcaf 	bl	288f4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16f96:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16f98:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16f9a:	d40c      	bmi.n	16fb6 <hci_event_prio+0x66>
   16f9c:	4a10      	ldr	r2, [pc, #64]	; (16fe0 <hci_event_prio+0x90>)
   16f9e:	4913      	ldr	r1, [pc, #76]	; (16fec <hci_event_prio+0x9c>)
   16fa0:	4811      	ldr	r0, [pc, #68]	; (16fe8 <hci_event_prio+0x98>)
   16fa2:	f640 5373 	movw	r3, #3443	; 0xd73
   16fa6:	f010 fe54 	bl	27c52 <assert_print>
   16faa:	4040      	eors	r0, r0
   16fac:	f380 8811 	msr	BASEPRI, r0
   16fb0:	f04f 0003 	mov.w	r0, #3
   16fb4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16fb6:	2305      	movs	r3, #5
   16fb8:	4a0d      	ldr	r2, [pc, #52]	; (16ff0 <hci_event_prio+0xa0>)
   16fba:	7838      	ldrb	r0, [r7, #0]
   16fbc:	4621      	mov	r1, r4
   16fbe:	f7ff f855 	bl	1606c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16fc2:	07b3      	lsls	r3, r6, #30
   16fc4:	d507      	bpl.n	16fd6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16fc6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16fc8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16fcc:	fa10 f585 	uxtah	r5, r0, r5
   16fd0:	60a5      	str	r5, [r4, #8]
}
   16fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16fd6:	4620      	mov	r0, r4
}
   16fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16fdc:	f006 bdc4 	b.w	1db68 <net_buf_unref>
   16fe0:	0002e43d 	.word	0x0002e43d
   16fe4:	0002e471 	.word	0x0002e471
   16fe8:	0002e48a 	.word	0x0002e48a
   16fec:	0002e738 	.word	0x0002e738
   16ff0:	0002cfc4 	.word	0x0002cfc4

00016ff4 <bt_recv>:
{
   16ff4:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16ff6:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16ff8:	2b01      	cmp	r3, #1
{
   16ffa:	af00      	add	r7, sp, #0
   16ffc:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16ffe:	d006      	beq.n	1700e <bt_recv+0x1a>
   17000:	2b03      	cmp	r3, #3
   17002:	d113      	bne.n	1702c <bt_recv+0x38>
			rx_queue_put(buf);
   17004:	f7fe ff5e 	bl	15ec4 <rx_queue_put>
		return 0;
   17008:	2000      	movs	r0, #0
}
   1700a:	46bd      	mov	sp, r7
   1700c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1700e:	6883      	ldr	r3, [r0, #8]
   17010:	7818      	ldrb	r0, [r3, #0]
   17012:	f011 fc6f 	bl	288f4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17016:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17018:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1701a:	d502      	bpl.n	17022 <bt_recv+0x2e>
			hci_event_prio(buf);
   1701c:	4628      	mov	r0, r5
   1701e:	f7ff ff97 	bl	16f50 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17022:	f014 0002 	ands.w	r0, r4, #2
   17026:	d0f0      	beq.n	1700a <bt_recv+0x16>
			rx_queue_put(buf);
   17028:	4628      	mov	r0, r5
   1702a:	e7eb      	b.n	17004 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1702c:	466c      	mov	r4, sp
   1702e:	b088      	sub	sp, #32
   17030:	466a      	mov	r2, sp
   17032:	4909      	ldr	r1, [pc, #36]	; (17058 <bt_recv+0x64>)
   17034:	4809      	ldr	r0, [pc, #36]	; (1705c <bt_recv+0x68>)
	switch (bt_buf_get_type(buf)) {
   17036:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1703a:	2303      	movs	r3, #3
   1703c:	f842 3f10 	str.w	r3, [r2, #16]!
   17040:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17044:	f011 fca1 	bl	2898a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17048:	4628      	mov	r0, r5
   1704a:	46a5      	mov	sp, r4
   1704c:	f006 fd8c 	bl	1db68 <net_buf_unref>
		return -EINVAL;
   17050:	f06f 0015 	mvn.w	r0, #21
   17054:	e7d9      	b.n	1700a <bt_recv+0x16>
   17056:	bf00      	nop
   17058:	0002e751 	.word	0x0002e751
   1705c:	0002c7b4 	.word	0x0002c7b4

00017060 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17060:	4a08      	ldr	r2, [pc, #32]	; (17084 <bt_hci_driver_register+0x24>)
{
   17062:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17064:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   17068:	b930      	cbnz	r0, 17078 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1706a:	68d9      	ldr	r1, [r3, #12]
   1706c:	b139      	cbz	r1, 1707e <bt_hci_driver_register+0x1e>
   1706e:	6959      	ldr	r1, [r3, #20]
   17070:	b129      	cbz	r1, 1707e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   17072:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   17076:	4770      	bx	lr
		return -EALREADY;
   17078:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1707c:	4770      	bx	lr
		return -EINVAL;
   1707e:	f06f 0015 	mvn.w	r0, #21
}
   17082:	4770      	bx	lr
   17084:	20000350 	.word	0x20000350

00017088 <bt_finalize_init>:
{
   17088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1708c:	4c3f      	ldr	r4, [pc, #252]	; (1718c <bt_finalize_init+0x104>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1708e:	4d40      	ldr	r5, [pc, #256]	; (17190 <bt_finalize_init+0x108>)
{
   17090:	af00      	add	r7, sp, #0
   17092:	2104      	movs	r1, #4
   17094:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   17098:	f011 fc57 	bl	2894a <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1709c:	79e2      	ldrb	r2, [r4, #7]
   1709e:	4b3d      	ldr	r3, [pc, #244]	; (17194 <bt_finalize_init+0x10c>)
   170a0:	4620      	mov	r0, r4
   170a2:	2a01      	cmp	r2, #1
   170a4:	bf98      	it	ls
   170a6:	461d      	movls	r5, r3
   170a8:	466e      	mov	r6, sp
   170aa:	f7fe fb3d 	bl	15728 <bt_addr_le_str_real>
   170ae:	b08a      	sub	sp, #40	; 0x28
   170b0:	466a      	mov	r2, sp
   170b2:	4b39      	ldr	r3, [pc, #228]	; (17198 <bt_finalize_init+0x110>)
   170b4:	61d0      	str	r0, [r2, #28]
   170b6:	e9c2 3505 	strd	r3, r5, [r2, #20]
   170ba:	f240 3302 	movw	r3, #770	; 0x302
   170be:	8413      	strh	r3, [r2, #32]
   170c0:	4b36      	ldr	r3, [pc, #216]	; (1719c <bt_finalize_init+0x114>)
   170c2:	f842 3f10 	str.w	r3, [r2, #16]!
   170c6:	4836      	ldr	r0, [pc, #216]	; (171a0 <bt_finalize_init+0x118>)
		BT_INFO("Identity[%d]: %s",
   170c8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 171a4 <bt_finalize_init+0x11c>
   170cc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 171a8 <bt_finalize_init+0x120>
   170d0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 171a0 <bt_finalize_init+0x118>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   170d4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   170d8:	f011 fc57 	bl	2898a <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   170dc:	2501      	movs	r5, #1
   170de:	46b5      	mov	sp, r6
   170e0:	4626      	mov	r6, r4
   170e2:	79e3      	ldrb	r3, [r4, #7]
   170e4:	429d      	cmp	r5, r3
   170e6:	f106 0607 	add.w	r6, r6, #7
   170ea:	db39      	blt.n	17160 <bt_finalize_init+0xd8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   170ec:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   170f0:	4628      	mov	r0, r5
   170f2:	f7fe fdb7 	bl	15c64 <ver_str>
   170f6:	466e      	mov	r6, sp
   170f8:	b08c      	sub	sp, #48	; 0x30
   170fa:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
   170fe:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   17102:	466a      	mov	r2, sp
   17104:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 171ac <bt_finalize_init+0x124>
   17108:	6253      	str	r3, [r2, #36]	; 0x24
   1710a:	e9c2 5107 	strd	r5, r1, [r2, #28]
   1710e:	4b28      	ldr	r3, [pc, #160]	; (171b0 <bt_finalize_init+0x128>)
   17110:	2502      	movs	r5, #2
   17112:	e9c2 c005 	strd	ip, r0, [r2, #20]
   17116:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
   1711a:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
   1711e:	f842 3f10 	str.w	r3, [r2, #16]!
   17122:	481f      	ldr	r0, [pc, #124]	; (171a0 <bt_finalize_init+0x118>)
   17124:	f011 fc31 	bl	2898a <z_log_msg_static_create.constprop.0>
   17128:	46b5      	mov	sp, r6
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   1712a:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   1712e:	4630      	mov	r0, r6
   17130:	f7fe fd98 	bl	15c64 <ver_str>
   17134:	b08a      	sub	sp, #40	; 0x28
   17136:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   1713a:	466a      	mov	r2, sp
   1713c:	491d      	ldr	r1, [pc, #116]	; (171b4 <bt_finalize_init+0x12c>)
   1713e:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
   17142:	e9c2 6307 	strd	r6, r3, [r2, #28]
   17146:	4b1c      	ldr	r3, [pc, #112]	; (171b8 <bt_finalize_init+0x130>)
   17148:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1714c:	f842 3f10 	str.w	r3, [r2, #16]!
   17150:	4813      	ldr	r0, [pc, #76]	; (171a0 <bt_finalize_init+0x118>)
   17152:	f44f 512b 	mov.w	r1, #10944	; 0x2ac0
   17156:	f011 fc18 	bl	2898a <z_log_msg_static_create.constprop.0>
}
   1715a:	46bd      	mov	sp, r7
   1715c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
   17160:	4630      	mov	r0, r6
   17162:	f7fe fae1 	bl	15728 <bt_addr_le_str_real>
   17166:	46eb      	mov	fp, sp
   17168:	b08a      	sub	sp, #40	; 0x28
   1716a:	466a      	mov	r2, sp
   1716c:	2303      	movs	r3, #3
   1716e:	e9c2 8505 	strd	r8, r5, [r2, #20]
   17172:	61d0      	str	r0, [r2, #28]
   17174:	f882 3020 	strb.w	r3, [r2, #32]
   17178:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   1717c:	f842 9f10 	str.w	r9, [r2, #16]!
   17180:	4650      	mov	r0, sl
   17182:	f011 fc02 	bl	2898a <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   17186:	3501      	adds	r5, #1
   17188:	46dd      	mov	sp, fp
   1718a:	e7aa      	b.n	170e2 <bt_finalize_init+0x5a>
   1718c:	20000350 	.word	0x20000350
   17190:	0002e765 	.word	0x0002e765
   17194:	0002d81a 	.word	0x0002d81a
   17198:	0002e769 	.word	0x0002e769
   1719c:	02000004 	.word	0x02000004
   171a0:	0002c7b4 	.word	0x0002c7b4
   171a4:	0002e778 	.word	0x0002e778
   171a8:	01000004 	.word	0x01000004
   171ac:	0002e789 	.word	0x0002e789
   171b0:	01000006 	.word	0x01000006
   171b4:	0002e7c7 	.word	0x0002e7c7
   171b8:	01000005 	.word	0x01000005

000171bc <init_work>:
{
   171bc:	b510      	push	{r4, lr}
	err = bt_init();
   171be:	f7f9 ff67 	bl	11090 <bt_init>
	if (ready_cb) {
   171c2:	4b03      	ldr	r3, [pc, #12]	; (171d0 <init_work+0x14>)
   171c4:	681b      	ldr	r3, [r3, #0]
   171c6:	b113      	cbz	r3, 171ce <init_work+0x12>
}
   171c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   171cc:	4718      	bx	r3
}
   171ce:	bd10      	pop	{r4, pc}
   171d0:	20002dd4 	.word	0x20002dd4

000171d4 <bt_is_ready>:
   171d4:	4b04      	ldr	r3, [pc, #16]	; (171e8 <bt_is_ready+0x14>)
   171d6:	f3bf 8f5b 	dmb	ish
   171da:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   171de:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   171e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   171e6:	4770      	bx	lr
   171e8:	20000350 	.word	0x20000350

000171ec <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   171ec:	b570      	push	{r4, r5, r6, lr}
   171ee:	b086      	sub	sp, #24
   171f0:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   171f2:	f7f5 fb90 	bl	c916 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   171f6:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   171f8:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   171fa:	d827      	bhi.n	1724c <bt_set_name+0x60>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   171fc:	4e15      	ldr	r6, [pc, #84]	; (17254 <bt_set_name+0x68>)
   171fe:	4621      	mov	r1, r4
   17200:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   17204:	f7f5 fb7d 	bl	c902 <strcmp>
   17208:	b910      	cbnz	r0, 17210 <bt_set_name+0x24>
		return 0;
   1720a:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   1720c:	b006      	add	sp, #24
   1720e:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   17210:	4621      	mov	r1, r4
   17212:	2346      	movs	r3, #70	; 0x46
   17214:	462a      	mov	r2, r5
   17216:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   1721a:	f014 ffb1 	bl	2c180 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   1721e:	1973      	adds	r3, r6, r5
   17220:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   17222:	480d      	ldr	r0, [pc, #52]	; (17258 <bt_set_name+0x6c>)
	bt_dev.name[len] = '\0';
   17224:	f883 41a2 	strb.w	r4, [r3, #418]	; 0x1a2
		err = settings_save_one("bt/name", bt_dev.name, len);
   17228:	462a      	mov	r2, r5
   1722a:	f506 71d1 	add.w	r1, r6, #418	; 0x1a2
   1722e:	f7fd f95d 	bl	144ec <settings_save_one>
		if (err) {
   17232:	2800      	cmp	r0, #0
   17234:	d0e9      	beq.n	1720a <bt_set_name+0x1e>
			BT_WARN("Unable to store name");
   17236:	4b09      	ldr	r3, [pc, #36]	; (1725c <bt_set_name+0x70>)
   17238:	9305      	str	r3, [sp, #20]
   1723a:	4809      	ldr	r0, [pc, #36]	; (17260 <bt_set_name+0x74>)
   1723c:	2302      	movs	r3, #2
   1723e:	aa04      	add	r2, sp, #16
   17240:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17244:	9304      	str	r3, [sp, #16]
   17246:	f011 fba0 	bl	2898a <z_log_msg_static_create.constprop.0>
   1724a:	e7de      	b.n	1720a <bt_set_name+0x1e>
		return -ENOMEM;
   1724c:	f06f 000b 	mvn.w	r0, #11
   17250:	e7dc      	b.n	1720c <bt_set_name+0x20>
   17252:	bf00      	nop
   17254:	20000350 	.word	0x20000350
   17258:	0002e909 	.word	0x0002e909
   1725c:	0002e911 	.word	0x0002e911
   17260:	0002c7b4 	.word	0x0002c7b4

00017264 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17264:	4800      	ldr	r0, [pc, #0]	; (17268 <bt_get_name+0x4>)
   17266:	4770      	bx	lr
   17268:	200004f2 	.word	0x200004f2

0001726c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1726e:	4f0b      	ldr	r7, [pc, #44]	; (1729c <id_find+0x30>)
{
   17270:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17272:	2500      	movs	r5, #0
   17274:	79fb      	ldrb	r3, [r7, #7]
   17276:	b2ec      	uxtb	r4, r5
   17278:	42a3      	cmp	r3, r4
   1727a:	d802      	bhi.n	17282 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1727c:	f06f 0401 	mvn.w	r4, #1
   17280:	e009      	b.n	17296 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   17282:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   17286:	2207      	movs	r2, #7
   17288:	4439      	add	r1, r7
   1728a:	4630      	mov	r0, r6
   1728c:	f014 fe8f 	bl	2bfae <memcmp>
   17290:	3501      	adds	r5, #1
   17292:	2800      	cmp	r0, #0
   17294:	d1ee      	bne.n	17274 <id_find+0x8>
}
   17296:	4620      	mov	r0, r4
   17298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1729a:	bf00      	nop
   1729c:	20000350 	.word	0x20000350

000172a0 <hci_id_add>:
{
   172a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172a2:	460f      	mov	r7, r1
   172a4:	4615      	mov	r5, r2
	if (id >= CONFIG_BT_ID_MAX) {
   172a6:	bb70      	cbnz	r0, 17306 <hci_id_add+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   172a8:	2127      	movs	r1, #39	; 0x27
   172aa:	f242 0027 	movw	r0, #8231	; 0x2027
   172ae:	f7ff f975 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   172b2:	4606      	mov	r6, r0
   172b4:	b350      	cbz	r0, 1730c <hci_id_add+0x6c>
	return net_buf_simple_add(&buf->b, len);
   172b6:	2127      	movs	r1, #39	; 0x27
   172b8:	3008      	adds	r0, #8
   172ba:	f013 fc13 	bl	2aae4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   172be:	4639      	mov	r1, r7
   172c0:	f011 fc65 	bl	28b8e <bt_addr_le_copy>
   172c4:	4604      	mov	r4, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   172c6:	462a      	mov	r2, r5
   172c8:	1dc3      	adds	r3, r0, #7
   172ca:	f105 0110 	add.w	r1, r5, #16
   172ce:	f852 0b04 	ldr.w	r0, [r2], #4
   172d2:	f843 0b04 	str.w	r0, [r3], #4
   172d6:	428a      	cmp	r2, r1
   172d8:	d1f9      	bne.n	172ce <hci_id_add+0x2e>
   172da:	4d0e      	ldr	r5, [pc, #56]	; (17314 <hci_id_add+0x74>)
   172dc:	f104 0317 	add.w	r3, r4, #23
   172e0:	f105 0410 	add.w	r4, r5, #16
   172e4:	462a      	mov	r2, r5
   172e6:	ca03      	ldmia	r2!, {r0, r1}
   172e8:	42a2      	cmp	r2, r4
   172ea:	6018      	str	r0, [r3, #0]
   172ec:	6059      	str	r1, [r3, #4]
   172ee:	4615      	mov	r5, r2
   172f0:	f103 0308 	add.w	r3, r3, #8
   172f4:	d1f6      	bne.n	172e4 <hci_id_add+0x44>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   172f6:	4631      	mov	r1, r6
   172f8:	2200      	movs	r2, #0
}
   172fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   172fe:	f242 0027 	movw	r0, #8231	; 0x2027
   17302:	f7ff b985 	b.w	16610 <bt_hci_cmd_send_sync>
		return -EINVAL;
   17306:	f06f 0015 	mvn.w	r0, #21
}
   1730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1730c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17310:	e7fb      	b.n	1730a <hci_id_add+0x6a>
   17312:	bf00      	nop
   17314:	200004b0 	.word	0x200004b0

00017318 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   17318:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1731a:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   1731c:	b087      	sub	sp, #28
   1731e:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17320:	2206      	movs	r2, #6
   17322:	4608      	mov	r0, r1
   17324:	f001 fa8e 	bl	18844 <bt_conn_lookup_state_le>
	if (conn) {
   17328:	4606      	mov	r6, r0
   1732a:	b170      	cbz	r0, 1734a <bt_id_add.part.0+0x32>
   1732c:	4848      	ldr	r0, [pc, #288]	; (17450 <bt_id_add.part.0+0x138>)
   1732e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17332:	f011 fc59 	bl	28be8 <atomic_or.isra.0>
	keys->state |= flag;
   17336:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   17338:	4630      	mov	r0, r6
	keys->state |= flag;
   1733a:	f043 0301 	orr.w	r3, r3, #1
   1733e:	7223      	strb	r3, [r4, #8]
}
   17340:	b007      	add	sp, #28
   17342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   17346:	f011 bd18 	b.w	28d7a <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   1734a:	4d42      	ldr	r5, [pc, #264]	; (17454 <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1734c:	4601      	mov	r1, r0
   1734e:	4842      	ldr	r0, [pc, #264]	; (17458 <bt_id_add.part.0+0x140>)
   17350:	f000 fcb2 	bl	17cb8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17354:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17358:	b173      	cbz	r3, 17378 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1735a:	4630      	mov	r0, r6
   1735c:	f011 fc2c 	bl	28bb8 <addr_res_enable>
		if (err) {
   17360:	b150      	cbz	r0, 17378 <bt_id_add.part.0+0x60>
			BT_WARN("Failed to disable address resolution");
   17362:	4b3e      	ldr	r3, [pc, #248]	; (1745c <bt_id_add.part.0+0x144>)
		BT_WARN("Set privacy mode command is not supported");
   17364:	9305      	str	r3, [sp, #20]
   17366:	2302      	movs	r3, #2
   17368:	9304      	str	r3, [sp, #16]
   1736a:	aa04      	add	r2, sp, #16
   1736c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17370:	483b      	ldr	r0, [pc, #236]	; (17460 <bt_id_add.part.0+0x148>)
   17372:	f011 fc1e 	bl	28bb2 <z_log_msg_static_create.constprop.0>
	if (err) {
   17376:	e026      	b.n	173c6 <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17378:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   1737c:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   17380:	429a      	cmp	r2, r3
   17382:	d12a      	bne.n	173da <bt_id_add.part.0+0xc2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   17384:	4b37      	ldr	r3, [pc, #220]	; (17464 <bt_id_add.part.0+0x14c>)
   17386:	4836      	ldr	r0, [pc, #216]	; (17460 <bt_id_add.part.0+0x148>)
   17388:	9305      	str	r3, [sp, #20]
   1738a:	aa04      	add	r2, sp, #16
   1738c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17390:	2602      	movs	r6, #2
   17392:	9604      	str	r6, [sp, #16]
   17394:	f011 fc0d 	bl	28bb2 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   17398:	2200      	movs	r2, #0
   1739a:	4611      	mov	r1, r2
   1739c:	f242 0029 	movw	r0, #8233	; 0x2029
   173a0:	f7ff f936 	bl	16610 <bt_hci_cmd_send_sync>
		if (err) {
   173a4:	b130      	cbz	r0, 173b4 <bt_id_add.part.0+0x9c>
			BT_ERR("Failed to clear resolution list");
   173a6:	4b30      	ldr	r3, [pc, #192]	; (17468 <bt_id_add.part.0+0x150>)
   173a8:	e9cd 6304 	strd	r6, r3, [sp, #16]
		BT_ERR("Failed to set privacy mode");
   173ac:	aa04      	add	r2, sp, #16
   173ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   173b2:	e7dd      	b.n	17370 <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   173b4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   173b8:	3301      	adds	r3, #1
   173ba:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   173be:	7a23      	ldrb	r3, [r4, #8]
   173c0:	f043 0304 	orr.w	r3, r3, #4
   173c4:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   173c6:	2001      	movs	r0, #1
   173c8:	f011 fbf6 	bl	28bb8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   173cc:	4827      	ldr	r0, [pc, #156]	; (1746c <bt_id_add.part.0+0x154>)
   173ce:	2100      	movs	r1, #0
}
   173d0:	b007      	add	sp, #28
   173d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   173d6:	f000 bc6f 	b.w	17cb8 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   173da:	4622      	mov	r2, r4
   173dc:	1c67      	adds	r7, r4, #1
   173de:	f812 0b2a 	ldrb.w	r0, [r2], #42
   173e2:	4639      	mov	r1, r7
   173e4:	f7ff ff5c 	bl	172a0 <hci_id_add>
	if (err) {
   173e8:	4606      	mov	r6, r0
   173ea:	b120      	cbz	r0, 173f6 <bt_id_add.part.0+0xde>
		BT_ERR("Failed to add IRK to controller");
   173ec:	4b20      	ldr	r3, [pc, #128]	; (17470 <bt_id_add.part.0+0x158>)
		BT_ERR("Failed to set privacy mode");
   173ee:	9305      	str	r3, [sp, #20]
   173f0:	2302      	movs	r3, #2
   173f2:	9304      	str	r3, [sp, #16]
   173f4:	e7da      	b.n	173ac <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   173f6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   173fa:	3301      	adds	r3, #1
   173fc:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   17400:	7a23      	ldrb	r3, [r4, #8]
   17402:	f043 0304 	orr.w	r3, r3, #4
   17406:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17408:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1740c:	075b      	lsls	r3, r3, #29
   1740e:	d401      	bmi.n	17414 <bt_id_add.part.0+0xfc>
		BT_WARN("Set privacy mode command is not supported");
   17410:	4b18      	ldr	r3, [pc, #96]	; (17474 <bt_id_add.part.0+0x15c>)
   17412:	e7a7      	b.n	17364 <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   17414:	4639      	mov	r1, r7
   17416:	4668      	mov	r0, sp
   17418:	f011 fbb9 	bl	28b8e <bt_addr_le_copy>
	cp.mode = mode;
   1741c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1741e:	2108      	movs	r1, #8
   17420:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17424:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17428:	f7ff f8b8 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   1742c:	4604      	mov	r4, r0
   1742e:	b908      	cbnz	r0, 17434 <bt_id_add.part.0+0x11c>
		BT_ERR("Failed to set privacy mode");
   17430:	4b11      	ldr	r3, [pc, #68]	; (17478 <bt_id_add.part.0+0x160>)
   17432:	e7dc      	b.n	173ee <bt_id_add.part.0+0xd6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17434:	2208      	movs	r2, #8
   17436:	4669      	mov	r1, sp
   17438:	4410      	add	r0, r2
   1743a:	f013 fb59 	bl	2aaf0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1743e:	4632      	mov	r2, r6
   17440:	4621      	mov	r1, r4
   17442:	f242 004e 	movw	r0, #8270	; 0x204e
   17446:	f7ff f8e3 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   1744a:	2800      	cmp	r0, #0
   1744c:	d0bb      	beq.n	173c6 <bt_id_add.part.0+0xae>
   1744e:	e7ef      	b.n	17430 <bt_id_add.part.0+0x118>
   17450:	2000041c 	.word	0x2000041c
   17454:	20000350 	.word	0x20000350
   17458:	00028c01 	.word	0x00028c01
   1745c:	0002e950 	.word	0x0002e950
   17460:	0002c7bc 	.word	0x0002c7bc
   17464:	0002e975 	.word	0x0002e975
   17468:	0002e9a6 	.word	0x0002e9a6
   1746c:	00028b5b 	.word	0x00028b5b
   17470:	0002e9c6 	.word	0x0002e9c6
   17474:	0002e9e6 	.word	0x0002e9e6
   17478:	0002ea10 	.word	0x0002ea10

0001747c <set_random_address>:
{
   1747c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1747e:	2206      	movs	r2, #6
   17480:	4912      	ldr	r1, [pc, #72]	; (174cc <set_random_address+0x50>)
   17482:	4605      	mov	r5, r0
   17484:	f014 fd93 	bl	2bfae <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17488:	4602      	mov	r2, r0
   1748a:	b1d0      	cbz	r0, 174c2 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1748c:	2106      	movs	r1, #6
   1748e:	f242 0005 	movw	r0, #8197	; 0x2005
   17492:	f7ff f883 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   17496:	4604      	mov	r4, r0
   17498:	b1a8      	cbz	r0, 174c6 <set_random_address+0x4a>
   1749a:	2206      	movs	r2, #6
   1749c:	4629      	mov	r1, r5
   1749e:	3008      	adds	r0, #8
   174a0:	f013 fb26 	bl	2aaf0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   174a4:	2200      	movs	r2, #0
   174a6:	4621      	mov	r1, r4
   174a8:	f242 0005 	movw	r0, #8197	; 0x2005
   174ac:	f7ff f8b0 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   174b0:	4602      	mov	r2, r0
   174b2:	b930      	cbnz	r0, 174c2 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   174b4:	4805      	ldr	r0, [pc, #20]	; (174cc <set_random_address+0x50>)
   174b6:	4629      	mov	r1, r5
   174b8:	f011 fb64 	bl	28b84 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   174bc:	2301      	movs	r3, #1
   174be:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   174c2:	4610      	mov	r0, r2
   174c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   174c6:	f06f 0268 	mvn.w	r2, #104	; 0x68
   174ca:	e7fa      	b.n	174c2 <set_random_address+0x46>
   174cc:	200003b1 	.word	0x200003b1

000174d0 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   174d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   174d4:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   174d6:	b087      	sub	sp, #28
   174d8:	4604      	mov	r4, r0
   174da:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   174dc:	2206      	movs	r2, #6
   174de:	4608      	mov	r0, r1
   174e0:	f001 f9b0 	bl	18844 <bt_conn_lookup_state_le>
	if (conn) {
   174e4:	4605      	mov	r5, r0
   174e6:	b178      	cbz	r0, 17508 <bt_id_del.part.0+0x38>
   174e8:	483a      	ldr	r0, [pc, #232]	; (175d4 <bt_id_del.part.0+0x104>)
   174ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   174ee:	f011 fb7b 	bl	28be8 <atomic_or.isra.0>
	keys->state |= flag;
   174f2:	7a23      	ldrb	r3, [r4, #8]
   174f4:	f043 0302 	orr.w	r3, r3, #2
   174f8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   174fa:	4628      	mov	r0, r5
   174fc:	f011 fc3d 	bl	28d7a <bt_conn_unref>
}
   17500:	371c      	adds	r7, #28
   17502:	46bd      	mov	sp, r7
   17504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17508:	4601      	mov	r1, r0
   1750a:	4833      	ldr	r0, [pc, #204]	; (175d8 <bt_id_del.part.0+0x108>)
   1750c:	f000 fbd4 	bl	17cb8 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17510:	4628      	mov	r0, r5
   17512:	f011 fb51 	bl	28bb8 <addr_res_enable>
	if (err) {
   17516:	4d31      	ldr	r5, [pc, #196]	; (175dc <bt_id_del.part.0+0x10c>)
   17518:	4606      	mov	r6, r0
   1751a:	b1d0      	cbz	r0, 17552 <bt_id_del.part.0+0x82>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1751c:	466c      	mov	r4, sp
   1751e:	b088      	sub	sp, #32
   17520:	466b      	mov	r3, sp
   17522:	4a2f      	ldr	r2, [pc, #188]	; (175e0 <bt_id_del.part.0+0x110>)
   17524:	e9c3 2005 	strd	r2, r0, [r3, #20]
   17528:	461a      	mov	r2, r3
   1752a:	2303      	movs	r3, #3
   1752c:	f842 3f10 	str.w	r3, [r2, #16]!
   17530:	482c      	ldr	r0, [pc, #176]	; (175e4 <bt_id_del.part.0+0x114>)
   17532:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17536:	f011 fb3c 	bl	28bb2 <z_log_msg_static_create.constprop.0>
   1753a:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   1753c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17540:	b113      	cbz	r3, 17548 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17542:	2001      	movs	r0, #1
   17544:	f011 fb38 	bl	28bb8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17548:	4827      	ldr	r0, [pc, #156]	; (175e8 <bt_id_del.part.0+0x118>)
   1754a:	2100      	movs	r1, #0
   1754c:	f000 fbb4 	bl	17cb8 <bt_le_ext_adv_foreach>
   17550:	e7d6      	b.n	17500 <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17552:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17556:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   1755a:	429a      	cmp	r2, r3
   1755c:	d20c      	bcs.n	17578 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   1755e:	3b01      	subs	r3, #1
   17560:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   17564:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17566:	4921      	ldr	r1, [pc, #132]	; (175ec <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17568:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1756c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1756e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17570:	2002      	movs	r0, #2
   17572:	f006 f84b 	bl	1d60c <bt_keys_foreach>
		goto done;
   17576:	e7e1      	b.n	1753c <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17578:	2107      	movs	r1, #7
   1757a:	f242 0028 	movw	r0, #8232	; 0x2028
   1757e:	f7ff f80d 	bl	1659c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   17582:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   17586:	4680      	mov	r8, r0
   17588:	b958      	cbnz	r0, 175a2 <bt_id_del.part.0+0xd2>
		BT_ERR("Failed to remove IRK from controller");
   1758a:	4b19      	ldr	r3, [pc, #100]	; (175f0 <bt_id_del.part.0+0x120>)
   1758c:	617b      	str	r3, [r7, #20]
   1758e:	4815      	ldr	r0, [pc, #84]	; (175e4 <bt_id_del.part.0+0x114>)
   17590:	2302      	movs	r3, #2
   17592:	f107 0210 	add.w	r2, r7, #16
   17596:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1759a:	613b      	str	r3, [r7, #16]
   1759c:	f011 fb09 	bl	28bb2 <z_log_msg_static_create.constprop.0>
		goto done;
   175a0:	e7cc      	b.n	1753c <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   175a2:	2107      	movs	r1, #7
   175a4:	3008      	adds	r0, #8
   175a6:	f013 fa9d 	bl	2aae4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   175aa:	4649      	mov	r1, r9
   175ac:	f011 faef 	bl	28b8e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   175b0:	4632      	mov	r2, r6
   175b2:	4641      	mov	r1, r8
   175b4:	f242 0028 	movw	r0, #8232	; 0x2028
   175b8:	f7ff f82a 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   175bc:	2800      	cmp	r0, #0
   175be:	d1e4      	bne.n	1758a <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   175c0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   175c4:	3b01      	subs	r3, #1
   175c6:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   175ca:	7a23      	ldrb	r3, [r4, #8]
   175cc:	f023 0304 	bic.w	r3, r3, #4
   175d0:	7223      	strb	r3, [r4, #8]
   175d2:	e7b3      	b.n	1753c <bt_id_del.part.0+0x6c>
   175d4:	2000041c 	.word	0x2000041c
   175d8:	00028c01 	.word	0x00028c01
   175dc:	20000350 	.word	0x20000350
   175e0:	0002ea2b 	.word	0x0002ea2b
   175e4:	0002c7bc 	.word	0x0002c7bc
   175e8:	00028b5b 	.word	0x00028b5b
   175ec:	00028b9d 	.word	0x00028b9d
   175f0:	0002ea58 	.word	0x0002ea58

000175f4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   175f4:	b570      	push	{r4, r5, r6, lr}
   175f6:	4605      	mov	r5, r0
   175f8:	b086      	sub	sp, #24
   175fa:	4614      	mov	r4, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   175fc:	460e      	mov	r6, r1
   175fe:	b3a9      	cbz	r1, 1766c <id_create+0x78>
   17600:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   17602:	2207      	movs	r2, #7
   17604:	4669      	mov	r1, sp
   17606:	4630      	mov	r0, r6
   17608:	9300      	str	r3, [sp, #0]
   1760a:	f8cd 3003 	str.w	r3, [sp, #3]
   1760e:	f014 fcce 	bl	2bfae <memcmp>
   17612:	b358      	cbz	r0, 1766c <id_create+0x78>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17614:	482a      	ldr	r0, [pc, #168]	; (176c0 <id_create+0xcc>)
   17616:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1761a:	4631      	mov	r1, r6
   1761c:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1761e:	f011 fab6 	bl	28b8e <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   17622:	4827      	ldr	r0, [pc, #156]	; (176c0 <id_create+0xcc>)
		uint8_t zero_irk[16] = { 0 };
   17624:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
   17626:	3516      	adds	r5, #22
		uint8_t zero_irk[16] = { 0 };
   17628:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1762c:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   17630:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   17634:	b384      	cbz	r4, 17698 <id_create+0xa4>
   17636:	2210      	movs	r2, #16
   17638:	a902      	add	r1, sp, #8
   1763a:	4620      	mov	r0, r4
   1763c:	f014 fcb7 	bl	2bfae <memcmp>
   17640:	b350      	cbz	r0, 17698 <id_create+0xa4>
   17642:	4628      	mov	r0, r5
   17644:	f104 0310 	add.w	r3, r4, #16
   17648:	f854 2b04 	ldr.w	r2, [r4], #4
   1764c:	f840 2b04 	str.w	r2, [r0], #4
   17650:	429c      	cmp	r4, r3
   17652:	d1f9      	bne.n	17648 <id_create+0x54>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17654:	481b      	ldr	r0, [pc, #108]	; (176c4 <id_create+0xd0>)
   17656:	f011 fa62 	bl	28b1e <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1765a:	0742      	lsls	r2, r0, #29
   1765c:	f3c0 0380 	ubfx	r3, r0, #2, #1
   17660:	d52c      	bpl.n	176bc <id_create+0xc8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   17662:	f7fe f9e9 	bl	15a38 <bt_settings_save_id>
	}

	return 0;
   17666:	2000      	movs	r0, #0
}
   17668:	b006      	add	sp, #24
   1766a:	bd70      	pop	{r4, r5, r6, pc}
			err = bt_addr_le_create_static(&new_addr);
   1766c:	a802      	add	r0, sp, #8
   1766e:	f011 f933 	bl	288d8 <bt_addr_le_create_static>
			if (err) {
   17672:	2800      	cmp	r0, #0
   17674:	d1f8      	bne.n	17668 <id_create+0x74>
		} while (id_find(&new_addr) >= 0);
   17676:	a802      	add	r0, sp, #8
   17678:	f7ff fdf8 	bl	1726c <id_find>
   1767c:	2800      	cmp	r0, #0
   1767e:	daf5      	bge.n	1766c <id_create+0x78>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17680:	4b0f      	ldr	r3, [pc, #60]	; (176c0 <id_create+0xcc>)
   17682:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   17686:	4418      	add	r0, r3
   17688:	a902      	add	r1, sp, #8
   1768a:	f011 fa80 	bl	28b8e <bt_addr_le_copy>
		if (addr) {
   1768e:	2e00      	cmp	r6, #0
   17690:	d0c7      	beq.n	17622 <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17692:	4601      	mov	r1, r0
   17694:	4630      	mov	r0, r6
   17696:	e7c2      	b.n	1761e <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   17698:	2110      	movs	r1, #16
   1769a:	4628      	mov	r0, r5
   1769c:	f008 fc20 	bl	1fee0 <bt_rand>
			if (err) {
   176a0:	2800      	cmp	r0, #0
   176a2:	d1e1      	bne.n	17668 <id_create+0x74>
			if (irk) {
   176a4:	2c00      	cmp	r4, #0
   176a6:	d0d5      	beq.n	17654 <id_create+0x60>
   176a8:	4628      	mov	r0, r5
   176aa:	f105 0310 	add.w	r3, r5, #16
   176ae:	f850 2b04 	ldr.w	r2, [r0], #4
   176b2:	f844 2b04 	str.w	r2, [r4], #4
   176b6:	4298      	cmp	r0, r3
   176b8:	d1f9      	bne.n	176ae <id_create+0xba>
   176ba:	e7cb      	b.n	17654 <id_create+0x60>
	return 0;
   176bc:	4618      	mov	r0, r3
   176be:	e7d3      	b.n	17668 <id_create+0x74>
   176c0:	20000350 	.word	0x20000350
   176c4:	2000041c 	.word	0x2000041c

000176c8 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   176c8:	4b08      	ldr	r3, [pc, #32]	; (176ec <le_rpa_invalidate+0x24>)
   176ca:	f3bf 8f5b 	dmb	ish
   176ce:	e853 2f00 	ldrex	r2, [r3]
   176d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   176d6:	e843 2100 	strex	r1, r2, [r3]
   176da:	2900      	cmp	r1, #0
   176dc:	d1f7      	bne.n	176ce <le_rpa_invalidate+0x6>
   176de:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   176e2:	4803      	ldr	r0, [pc, #12]	; (176f0 <le_rpa_invalidate+0x28>)
   176e4:	2100      	movs	r1, #0
   176e6:	f000 bae7 	b.w	17cb8 <bt_le_ext_adv_foreach>
   176ea:	bf00      	nop
   176ec:	2000041c 	.word	0x2000041c
   176f0:	00028c2b 	.word	0x00028c2b

000176f4 <bt_id_set_private_addr>:
{
   176f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   176f6:	4603      	mov	r3, r0
   176f8:	481a      	ldr	r0, [pc, #104]	; (17764 <bt_id_set_private_addr+0x70>)
   176fa:	f011 fa10 	bl	28b1e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   176fe:	0482      	lsls	r2, r0, #18
   17700:	d42d      	bmi.n	1775e <bt_id_set_private_addr+0x6a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   17702:	4d19      	ldr	r5, [pc, #100]	; (17768 <bt_id_set_private_addr+0x74>)
   17704:	f103 0016 	add.w	r0, r3, #22
   17708:	4669      	mov	r1, sp
   1770a:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   1770e:	f011 f857 	bl	287c0 <bt_rpa_create>
	if (!err) {
   17712:	4604      	mov	r4, r0
   17714:	b950      	cbnz	r0, 1772c <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   17716:	4668      	mov	r0, sp
   17718:	f7ff feb0 	bl	1747c <set_random_address>
		if (!err) {
   1771c:	4604      	mov	r4, r0
   1771e:	b928      	cbnz	r0, 1772c <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   17724:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17728:	f011 fa5e 	bl	28be8 <atomic_or.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   1772c:	f8b5 51a0 	ldrh.w	r5, [r5, #416]	; 0x1a0
   17730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17734:	435d      	muls	r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   17736:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1773a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1773e:	2100      	movs	r1, #0
   17740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17744:	2300      	movs	r3, #0
   17746:	fbe5 0106 	umlal	r0, r1, r5, r6
   1774a:	f7e9 f843 	bl	7d4 <__aeabi_uldivmod>
   1774e:	4602      	mov	r2, r0
   17750:	460b      	mov	r3, r1
   17752:	4806      	ldr	r0, [pc, #24]	; (1776c <bt_id_set_private_addr+0x78>)
   17754:	f00a fbb8 	bl	21ec8 <k_work_schedule>
}
   17758:	4620      	mov	r0, r4
   1775a:	b002      	add	sp, #8
   1775c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1775e:	2400      	movs	r4, #0
   17760:	e7fa      	b.n	17758 <bt_id_set_private_addr+0x64>
   17762:	bf00      	nop
   17764:	2000041c 	.word	0x2000041c
   17768:	20000350 	.word	0x20000350
   1776c:	200004c0 	.word	0x200004c0

00017770 <le_update_private_addr>:
{
   17770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17772:	af00      	add	r7, sp, #0
		le_rpa_invalidate();
   17774:	f7ff ffa8 	bl	176c8 <le_rpa_invalidate>
		adv = bt_le_adv_lookup_legacy();
   17778:	f000 faa4 	bl	17cc4 <bt_le_adv_lookup_legacy>
		if (adv &&
   1777c:	4604      	mov	r4, r0
   1777e:	b9b0      	cbnz	r0, 177ae <le_update_private_addr+0x3e>
	uint8_t id = BT_ID_DEFAULT;
   17780:	2600      	movs	r6, #0
	bool adv_enabled = false;
   17782:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   17784:	4630      	mov	r0, r6
   17786:	f7ff ffb5 	bl	176f4 <bt_id_set_private_addr>
	if (err) {
   1778a:	b328      	cbz	r0, 177d8 <le_update_private_addr+0x68>
		BT_WARN("Failed to update RPA address (%d)", err);
   1778c:	466c      	mov	r4, sp
   1778e:	b088      	sub	sp, #32
   17790:	466a      	mov	r2, sp
   17792:	4b16      	ldr	r3, [pc, #88]	; (177ec <le_update_private_addr+0x7c>)
   17794:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17798:	2303      	movs	r3, #3
   1779a:	f842 3f10 	str.w	r3, [r2, #16]!
   1779e:	4814      	ldr	r0, [pc, #80]	; (177f0 <le_update_private_addr+0x80>)
   177a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   177a4:	f011 fa05 	bl	28bb2 <z_log_msg_static_create.constprop.0>
   177a8:	46a5      	mov	sp, r4
}
   177aa:	46bd      	mov	sp, r7
   177ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   177ae:	f100 0210 	add.w	r2, r0, #16
   177b2:	2106      	movs	r1, #6
   177b4:	4610      	mov	r0, r2
   177b6:	f011 f9b8 	bl	28b2a <atomic_test_bit>
		if (adv &&
   177ba:	4605      	mov	r5, r0
   177bc:	2800      	cmp	r0, #0
   177be:	d0df      	beq.n	17780 <le_update_private_addr+0x10>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   177c0:	210c      	movs	r1, #12
   177c2:	4610      	mov	r0, r2
   177c4:	f011 f9b1 	bl	28b2a <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   177c8:	4601      	mov	r1, r0
   177ca:	2800      	cmp	r0, #0
   177cc:	d1d8      	bne.n	17780 <le_update_private_addr+0x10>
			bt_le_adv_set_enable_legacy(adv, false);
   177ce:	4620      	mov	r0, r4
			id = adv->id;
   177d0:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   177d2:	f011 fa6f 	bl	28cb4 <bt_le_adv_set_enable_legacy>
   177d6:	e7d5      	b.n	17784 <le_update_private_addr+0x14>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   177d8:	2c00      	cmp	r4, #0
   177da:	d0e6      	beq.n	177aa <le_update_private_addr+0x3a>
	    adv && adv_enabled) {
   177dc:	2d00      	cmp	r5, #0
   177de:	d0e4      	beq.n	177aa <le_update_private_addr+0x3a>
		bt_le_adv_set_enable_legacy(adv, true);
   177e0:	2101      	movs	r1, #1
   177e2:	4620      	mov	r0, r4
   177e4:	f011 fa66 	bl	28cb4 <bt_le_adv_set_enable_legacy>
   177e8:	e7df      	b.n	177aa <le_update_private_addr+0x3a>
   177ea:	bf00      	nop
   177ec:	0002ea7d 	.word	0x0002ea7d
   177f0:	0002c7bc 	.word	0x0002c7bc

000177f4 <rpa_timeout>:
{
   177f4:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   177f6:	2300      	movs	r3, #0
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   177f8:	4810      	ldr	r0, [pc, #64]	; (1783c <rpa_timeout+0x48>)
	bool adv_enabled = false;
   177fa:	f88d 3007 	strb.w	r3, [sp, #7]
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   177fe:	f10d 0107 	add.w	r1, sp, #7
   17802:	f000 fa59 	bl	17cb8 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   17806:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1780a:	b99b      	cbnz	r3, 17834 <rpa_timeout+0x40>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1780c:	480c      	ldr	r0, [pc, #48]	; (17840 <rpa_timeout+0x4c>)
   1780e:	f011 f986 	bl	28b1e <atomic_get>
   17812:	04c1      	lsls	r1, r0, #19
   17814:	d40e      	bmi.n	17834 <rpa_timeout+0x40>
   17816:	480a      	ldr	r0, [pc, #40]	; (17840 <rpa_timeout+0x4c>)
   17818:	f011 f981 	bl	28b1e <atomic_get>
   1781c:	0642      	lsls	r2, r0, #25
   1781e:	d404      	bmi.n	1782a <rpa_timeout+0x36>
		le_rpa_invalidate();
   17820:	f7ff ff52 	bl	176c8 <le_rpa_invalidate>
}
   17824:	b003      	add	sp, #12
   17826:	f85d fb04 	ldr.w	pc, [sp], #4
   1782a:	4805      	ldr	r0, [pc, #20]	; (17840 <rpa_timeout+0x4c>)
   1782c:	f011 f977 	bl	28b1e <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17830:	05c3      	lsls	r3, r0, #23
   17832:	d5f5      	bpl.n	17820 <rpa_timeout+0x2c>
	le_update_private_addr();
   17834:	f7ff ff9c 	bl	17770 <le_update_private_addr>
   17838:	e7f4      	b.n	17824 <rpa_timeout+0x30>
   1783a:	bf00      	nop
   1783c:	00028b39 	.word	0x00028b39
   17840:	2000041c 	.word	0x2000041c

00017844 <bt_id_pending_keys_update>:
   17844:	4b0a      	ldr	r3, [pc, #40]	; (17870 <bt_id_pending_keys_update+0x2c>)
   17846:	f3bf 8f5b 	dmb	ish
   1784a:	e853 2f00 	ldrex	r2, [r3]
   1784e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   17852:	e843 1000 	strex	r0, r1, [r3]
   17856:	2800      	cmp	r0, #0
   17858:	d1f7      	bne.n	1784a <bt_id_pending_keys_update+0x6>
   1785a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1785e:	0413      	lsls	r3, r2, #16
   17860:	d504      	bpl.n	1786c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   17862:	4904      	ldr	r1, [pc, #16]	; (17874 <bt_id_pending_keys_update+0x30>)
   17864:	2200      	movs	r2, #0
   17866:	2002      	movs	r0, #2
   17868:	f005 bed0 	b.w	1d60c <bt_keys_foreach>
}
   1786c:	4770      	bx	lr
   1786e:	bf00      	nop
   17870:	2000041c 	.word	0x2000041c
   17874:	00028c6b 	.word	0x00028c6b

00017878 <bt_id_add>:
{
   17878:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1787a:	490a      	ldr	r1, [pc, #40]	; (178a4 <bt_id_add+0x2c>)
   1787c:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   17880:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
   17884:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17886:	b10c      	cbz	r4, 1788c <bt_id_add+0x14>
   17888:	4294      	cmp	r4, r2
   1788a:	d208      	bcs.n	1789e <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   1788c:	3201      	adds	r2, #1
   1788e:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   17892:	7a1a      	ldrb	r2, [r3, #8]
}
   17894:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
   17896:	f042 0204 	orr.w	r2, r2, #4
   1789a:	721a      	strb	r2, [r3, #8]
}
   1789c:	4770      	bx	lr
   1789e:	bc10      	pop	{r4}
   178a0:	f7ff bd3a 	b.w	17318 <bt_id_add.part.0>
   178a4:	20000350 	.word	0x20000350

000178a8 <bt_id_del>:
{
   178a8:	b410      	push	{r4}
	if (!bt_dev.le.rl_size ||
   178aa:	4c0b      	ldr	r4, [pc, #44]	; (178d8 <bt_id_del+0x30>)
   178ac:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   178b0:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
{
   178b4:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size ||
   178b6:	b111      	cbz	r1, 178be <bt_id_del+0x16>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   178b8:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   178ba:	428a      	cmp	r2, r1
   178bc:	dd08      	ble.n	178d0 <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
   178be:	3a01      	subs	r2, #1
   178c0:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   178c4:	7a1a      	ldrb	r2, [r3, #8]
}
   178c6:	bc10      	pop	{r4}
		keys->state &= ~BT_KEYS_ID_ADDED;
   178c8:	f022 0204 	bic.w	r2, r2, #4
   178cc:	721a      	strb	r2, [r3, #8]
}
   178ce:	4770      	bx	lr
   178d0:	bc10      	pop	{r4}
   178d2:	f7ff bdfd 	b.w	174d0 <bt_id_del.part.0>
   178d6:	bf00      	nop
   178d8:	20000350 	.word	0x20000350

000178dc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   178dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   178de:	460e      	mov	r6, r1
   178e0:	b089      	sub	sp, #36	; 0x24
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   178e2:	4605      	mov	r5, r0
   178e4:	b930      	cbnz	r0, 178f4 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   178e6:	4f2d      	ldr	r7, [pc, #180]	; (1799c <bt_id_create+0xc0>)
   178e8:	79fb      	ldrb	r3, [r7, #7]
   178ea:	2b01      	cmp	r3, #1
   178ec:	d12a      	bne.n	17944 <bt_id_create+0x68>
		return -ENOMEM;
   178ee:	f06f 000b 	mvn.w	r0, #11
   178f2:	e025      	b.n	17940 <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   178f4:	2300      	movs	r3, #0
   178f6:	2207      	movs	r2, #7
   178f8:	4669      	mov	r1, sp
   178fa:	9300      	str	r3, [sp, #0]
   178fc:	f8cd 3003 	str.w	r3, [sp, #3]
   17900:	f014 fb55 	bl	2bfae <memcmp>
   17904:	2800      	cmp	r0, #0
   17906:	d0ee      	beq.n	178e6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17908:	782b      	ldrb	r3, [r5, #0]
   1790a:	2b01      	cmp	r3, #1
   1790c:	d104      	bne.n	17918 <bt_id_create+0x3c>
   1790e:	79ab      	ldrb	r3, [r5, #6]
   17910:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17914:	2bc0      	cmp	r3, #192	; 0xc0
   17916:	d00c      	beq.n	17932 <bt_id_create+0x56>
			BT_ERR("Only static random identity address supported");
   17918:	4b21      	ldr	r3, [pc, #132]	; (179a0 <bt_id_create+0xc4>)
   1791a:	9307      	str	r3, [sp, #28]
   1791c:	4821      	ldr	r0, [pc, #132]	; (179a4 <bt_id_create+0xc8>)
   1791e:	2302      	movs	r3, #2
   17920:	aa06      	add	r2, sp, #24
   17922:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17926:	9306      	str	r3, [sp, #24]
   17928:	f011 f943 	bl	28bb2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1792c:	f06f 0015 	mvn.w	r0, #21
   17930:	e006      	b.n	17940 <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   17932:	4628      	mov	r0, r5
   17934:	f7ff fc9a 	bl	1726c <id_find>
   17938:	2800      	cmp	r0, #0
   1793a:	dbd4      	blt.n	178e6 <bt_id_create+0xa>
			return -EALREADY;
   1793c:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   17940:	b009      	add	sp, #36	; 0x24
   17942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17944:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   17948:	f011 f8e9 	bl	28b1e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1794c:	f010 0001 	ands.w	r0, r0, #1
   17950:	d118      	bne.n	17984 <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   17952:	e9cd 0002 	strd	r0, r0, [sp, #8]
   17956:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1795a:	2d00      	cmp	r5, #0
   1795c:	d0e6      	beq.n	1792c <bt_id_create+0x50>
   1795e:	9000      	str	r0, [sp, #0]
   17960:	2207      	movs	r2, #7
   17962:	f8cd 0003 	str.w	r0, [sp, #3]
   17966:	4669      	mov	r1, sp
   17968:	4628      	mov	r0, r5
   1796a:	f014 fb20 	bl	2bfae <memcmp>
   1796e:	2800      	cmp	r0, #0
   17970:	d0dc      	beq.n	1792c <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17972:	2e00      	cmp	r6, #0
   17974:	d0da      	beq.n	1792c <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   17976:	2210      	movs	r2, #16
   17978:	a902      	add	r1, sp, #8
   1797a:	4630      	mov	r0, r6
   1797c:	f014 fb17 	bl	2bfae <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17980:	2800      	cmp	r0, #0
   17982:	d0d3      	beq.n	1792c <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   17984:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   17986:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   17988:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   1798a:	4629      	mov	r1, r5
   1798c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1798e:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   17990:	f7ff fe30 	bl	175f4 <id_create>
	new_id = bt_dev.id_count++;
   17994:	2800      	cmp	r0, #0
   17996:	bf08      	it	eq
   17998:	4620      	moveq	r0, r4
   1799a:	e7d1      	b.n	17940 <bt_id_create+0x64>
   1799c:	20000350 	.word	0x20000350
   179a0:	0002ea9f 	.word	0x0002ea9f
   179a4:	0002c7bc 	.word	0x0002c7bc

000179a8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   179a8:	b570      	push	{r4, r5, r6, lr}
   179aa:	b08a      	sub	sp, #40	; 0x28
   179ac:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   179ae:	aa01      	add	r2, sp, #4
   179b0:	2100      	movs	r1, #0
   179b2:	f241 0009 	movw	r0, #4105	; 0x1009
   179b6:	f7fe fe2b 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   179ba:	4604      	mov	r4, r0
   179bc:	b160      	cbz	r0, 179d8 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
   179be:	4b1d      	ldr	r3, [pc, #116]	; (17a34 <bt_id_read_public_addr+0x8c>)
   179c0:	9309      	str	r3, [sp, #36]	; 0x24
   179c2:	481d      	ldr	r0, [pc, #116]	; (17a38 <bt_id_read_public_addr+0x90>)
   179c4:	2302      	movs	r3, #2
   179c6:	aa08      	add	r2, sp, #32
   179c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   179cc:	9308      	str	r3, [sp, #32]
   179ce:	f011 f8f0 	bl	28bb2 <z_log_msg_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   179d2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   179d4:	b00a      	add	sp, #40	; 0x28
   179d6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   179d8:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   179da:	9002      	str	r0, [sp, #8]
   179dc:	689d      	ldr	r5, [r3, #8]
   179de:	f8ad 000c 	strh.w	r0, [sp, #12]
   179e2:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   179e4:	2206      	movs	r2, #6
   179e6:	a902      	add	r1, sp, #8
   179e8:	4628      	mov	r0, r5
   179ea:	f014 fae0 	bl	2bfae <memcmp>
   179ee:	b918      	cbnz	r0, 179f8 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   179f0:	9801      	ldr	r0, [sp, #4]
   179f2:	f006 f8b9 	bl	1db68 <net_buf_unref>
   179f6:	e7ec      	b.n	179d2 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   179f8:	23ff      	movs	r3, #255	; 0xff
   179fa:	2206      	movs	r2, #6
   179fc:	a904      	add	r1, sp, #16
   179fe:	4628      	mov	r0, r5
   17a00:	f88d 3010 	strb.w	r3, [sp, #16]
   17a04:	f88d 3011 	strb.w	r3, [sp, #17]
   17a08:	f88d 3012 	strb.w	r3, [sp, #18]
   17a0c:	f88d 3013 	strb.w	r3, [sp, #19]
   17a10:	f88d 3014 	strb.w	r3, [sp, #20]
   17a14:	f88d 3015 	strb.w	r3, [sp, #21]
   17a18:	f014 fac9 	bl	2bfae <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17a1c:	2800      	cmp	r0, #0
   17a1e:	d0e7      	beq.n	179f0 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   17a20:	4629      	mov	r1, r5
   17a22:	1c70      	adds	r0, r6, #1
   17a24:	f011 f8ae 	bl	28b84 <bt_addr_copy>
	net_buf_unref(rsp);
   17a28:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17a2a:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   17a2c:	f006 f89c 	bl	1db68 <net_buf_unref>
	return 1U;
   17a30:	2001      	movs	r0, #1
   17a32:	e7cf      	b.n	179d4 <bt_id_read_public_addr+0x2c>
   17a34:	0002eacd 	.word	0x0002eacd
   17a38:	0002c7bc 	.word	0x0002c7bc

00017a3c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   17a3c:	b570      	push	{r4, r5, r6, lr}
   17a3e:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17a40:	a802      	add	r0, sp, #8
   17a42:	f7ff ffb1 	bl	179a8 <bt_id_read_public_addr>
   17a46:	4c21      	ldr	r4, [pc, #132]	; (17acc <bt_setup_public_id_addr+0x90>)
   17a48:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   17a4a:	b348      	cbz	r0, 17aa0 <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   17a4c:	2210      	movs	r2, #16
   17a4e:	2100      	movs	r1, #0
   17a50:	eb0d 0002 	add.w	r0, sp, r2
   17a54:	f014 fadc 	bl	2c010 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   17a58:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   17a5c:	079b      	lsls	r3, r3, #30
   17a5e:	d510      	bpl.n	17a82 <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   17a60:	aa01      	add	r2, sp, #4
   17a62:	2100      	movs	r1, #0
   17a64:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   17a68:	f7fe fdd2 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   17a6c:	b1d0      	cbz	r0, 17aa4 <bt_setup_public_id_addr+0x68>
		BT_WARN("Failed to read identity root");
   17a6e:	4b18      	ldr	r3, [pc, #96]	; (17ad0 <bt_setup_public_id_addr+0x94>)
   17a70:	930d      	str	r3, [sp, #52]	; 0x34
   17a72:	4818      	ldr	r0, [pc, #96]	; (17ad4 <bt_setup_public_id_addr+0x98>)
   17a74:	2302      	movs	r3, #2
   17a76:	aa0c      	add	r2, sp, #48	; 0x30
   17a78:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17a7c:	930c      	str	r3, [sp, #48]	; 0x30
   17a7e:	f011 f898 	bl	28bb2 <z_log_msg_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   17a82:	a908      	add	r1, sp, #32
   17a84:	a804      	add	r0, sp, #16
   17a86:	f012 fe73 	bl	2a770 <bt_smp_irk_get>
   17a8a:	b1e0      	cbz	r0, 17ac6 <bt_setup_public_id_addr+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17a8c:	4812      	ldr	r0, [pc, #72]	; (17ad8 <bt_setup_public_id_addr+0x9c>)
   17a8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17a92:	f011 f8a9 	bl	28be8 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   17a96:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   17a98:	a902      	add	r1, sp, #8
   17a9a:	2000      	movs	r0, #0
   17a9c:	f7ff fdaa 	bl	175f4 <id_create>
}
   17aa0:	b00e      	add	sp, #56	; 0x38
   17aa2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17aa4:	9e01      	ldr	r6, [sp, #4]
   17aa6:	68b2      	ldr	r2, [r6, #8]
	memcpy(ir, rp->ir, 16);
   17aa8:	ad04      	add	r5, sp, #16
   17aaa:	1c53      	adds	r3, r2, #1
   17aac:	3211      	adds	r2, #17
   17aae:	6818      	ldr	r0, [r3, #0]
   17ab0:	6859      	ldr	r1, [r3, #4]
   17ab2:	462c      	mov	r4, r5
   17ab4:	c403      	stmia	r4!, {r0, r1}
   17ab6:	3308      	adds	r3, #8
   17ab8:	4293      	cmp	r3, r2
   17aba:	4625      	mov	r5, r4
   17abc:	d1f7      	bne.n	17aae <bt_setup_public_id_addr+0x72>
	net_buf_unref(rsp);
   17abe:	4630      	mov	r0, r6
   17ac0:	f006 f852 	bl	1db68 <net_buf_unref>
   17ac4:	e7dd      	b.n	17a82 <bt_setup_public_id_addr+0x46>
		irk = ir_irk;
   17ac6:	aa08      	add	r2, sp, #32
   17ac8:	e7e6      	b.n	17a98 <bt_setup_public_id_addr+0x5c>
   17aca:	bf00      	nop
   17acc:	20000350 	.word	0x20000350
   17ad0:	0002eaeb 	.word	0x0002eaeb
   17ad4:	0002c7bc 	.word	0x0002c7bc
   17ad8:	2000041c 	.word	0x2000041c

00017adc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17ade:	4b24      	ldr	r3, [pc, #144]	; (17b70 <bt_read_static_addr+0x94>)
   17ae0:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   17ae4:	f014 0401 	ands.w	r4, r4, #1
{
   17ae8:	b089      	sub	sp, #36	; 0x24
   17aea:	4605      	mov	r5, r0
   17aec:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17aee:	d10a      	bne.n	17b06 <bt_read_static_addr+0x2a>
		BT_WARN("Read Static Addresses command not available");
   17af0:	4b20      	ldr	r3, [pc, #128]	; (17b74 <bt_read_static_addr+0x98>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   17af2:	9307      	str	r3, [sp, #28]
   17af4:	4820      	ldr	r0, [pc, #128]	; (17b78 <bt_read_static_addr+0x9c>)
   17af6:	2302      	movs	r3, #2
   17af8:	aa06      	add	r2, sp, #24
   17afa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17afe:	9306      	str	r3, [sp, #24]
   17b00:	f011 f857 	bl	28bb2 <z_log_msg_static_create.constprop.0>
   17b04:	e012      	b.n	17b2c <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17b06:	aa01      	add	r2, sp, #4
   17b08:	2100      	movs	r1, #0
   17b0a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17b0e:	f7fe fd7f 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   17b12:	4603      	mov	r3, r0
   17b14:	b168      	cbz	r0, 17b32 <bt_read_static_addr+0x56>
		BT_WARN("Failed to read static addresses");
   17b16:	4b19      	ldr	r3, [pc, #100]	; (17b7c <bt_read_static_addr+0xa0>)
   17b18:	9307      	str	r3, [sp, #28]
   17b1a:	4817      	ldr	r0, [pc, #92]	; (17b78 <bt_read_static_addr+0x9c>)
   17b1c:	2302      	movs	r3, #2
   17b1e:	aa06      	add	r2, sp, #24
   17b20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   17b24:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
   17b26:	9306      	str	r3, [sp, #24]
   17b28:	f011 f843 	bl	28bb2 <z_log_msg_static_create.constprop.0>
	}

	return cnt;
}
   17b2c:	4620      	mov	r0, r4
   17b2e:	b009      	add	sp, #36	; 0x24
   17b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   17b32:	9801      	ldr	r0, [sp, #4]
   17b34:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   17b36:	7854      	ldrb	r4, [r2, #1]
   17b38:	f04f 0c16 	mov.w	ip, #22
   17b3c:	42b4      	cmp	r4, r6
   17b3e:	bf28      	it	cs
   17b40:	4634      	movcs	r4, r6
   17b42:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   17b46:	429c      	cmp	r4, r3
   17b48:	dc05      	bgt.n	17b56 <bt_read_static_addr+0x7a>
	net_buf_unref(rsp);
   17b4a:	f006 f80d 	bl	1db68 <net_buf_unref>
	if (!cnt) {
   17b4e:	2c00      	cmp	r4, #0
   17b50:	d1ec      	bne.n	17b2c <bt_read_static_addr+0x50>
		BT_WARN("No static addresses stored in controller");
   17b52:	4b0b      	ldr	r3, [pc, #44]	; (17b80 <bt_read_static_addr+0xa4>)
   17b54:	e7cd      	b.n	17af2 <bt_read_static_addr+0x16>
   17b56:	1c96      	adds	r6, r2, #2
   17b58:	fb0c 5103 	mla	r1, ip, r3, r5
   17b5c:	f856 eb04 	ldr.w	lr, [r6], #4
   17b60:	f841 eb04 	str.w	lr, [r1], #4
   17b64:	42be      	cmp	r6, r7
   17b66:	d1f9      	bne.n	17b5c <bt_read_static_addr+0x80>
   17b68:	883e      	ldrh	r6, [r7, #0]
   17b6a:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   17b6c:	3301      	adds	r3, #1
   17b6e:	e7ea      	b.n	17b46 <bt_read_static_addr+0x6a>
   17b70:	20000350 	.word	0x20000350
   17b74:	0002eb08 	.word	0x0002eb08
   17b78:	0002c7bc 	.word	0x0002c7bc
   17b7c:	0002eb34 	.word	0x0002eb34
   17b80:	0002eb54 	.word	0x0002eb54

00017b84 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17b88:	4d21      	ldr	r5, [pc, #132]	; (17c10 <bt_setup_random_id_addr+0x8c>)
   17b8a:	79ec      	ldrb	r4, [r5, #7]
{
   17b8c:	b08d      	sub	sp, #52	; 0x34
	if (!bt_dev.id_count) {
   17b8e:	bb94      	cbnz	r4, 17bf6 <bt_setup_random_id_addr+0x72>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   17b90:	2101      	movs	r1, #1
   17b92:	a806      	add	r0, sp, #24
   17b94:	f7ff ffa2 	bl	17adc <bt_read_static_addr>
   17b98:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   17b9a:	b360      	cbz	r0, 17bf6 <bt_setup_random_id_addr+0x72>
   17b9c:	2716      	movs	r7, #22
   17b9e:	f105 08cc 	add.w	r8, r5, #204	; 0xcc
   17ba2:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   17ba4:	fb07 f906 	mul.w	r9, r7, r6
   17ba8:	f109 0006 	add.w	r0, r9, #6
   17bac:	ab06      	add	r3, sp, #24
   17bae:	a902      	add	r1, sp, #8
   17bb0:	4418      	add	r0, r3
   17bb2:	f012 fddd 	bl	2a770 <bt_smp_irk_get>
   17bb6:	b1e0      	cbz	r0, 17bf2 <bt_setup_random_id_addr+0x6e>
   17bb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17bbc:	4640      	mov	r0, r8
   17bbe:	f011 f813 	bl	28be8 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   17bc2:	2200      	movs	r2, #0
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   17bc4:	ab06      	add	r3, sp, #24
   17bc6:	eb03 0109 	add.w	r1, r3, r9
   17bca:	f10d 0001 	add.w	r0, sp, #1
   17bce:	f010 ffd9 	bl	28b84 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   17bd2:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   17bd4:	4669      	mov	r1, sp
   17bd6:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   17bd8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17bdc:	f7ff fd0a 	bl	175f4 <id_create>
				if (err) {
   17be0:	b920      	cbnz	r0, 17bec <bt_setup_random_id_addr+0x68>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17be2:	79ea      	ldrb	r2, [r5, #7]
   17be4:	3401      	adds	r4, #1
   17be6:	b2e3      	uxtb	r3, r4
   17be8:	429a      	cmp	r2, r3
   17bea:	d8da      	bhi.n	17ba2 <bt_setup_random_id_addr+0x1e>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   17bec:	b00d      	add	sp, #52	; 0x34
   17bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					irk = ir_irk;
   17bf2:	aa02      	add	r2, sp, #8
   17bf4:	e7e6      	b.n	17bc4 <bt_setup_random_id_addr+0x40>
   17bf6:	4807      	ldr	r0, [pc, #28]	; (17c14 <bt_setup_random_id_addr+0x90>)
   17bf8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17bfc:	f010 fff4 	bl	28be8 <atomic_or.isra.0>
	return bt_id_create(NULL, NULL);
   17c00:	2100      	movs	r1, #0
   17c02:	4608      	mov	r0, r1
}
   17c04:	b00d      	add	sp, #52	; 0x34
   17c06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_id_create(NULL, NULL);
   17c0a:	f7ff be67 	b.w	178dc <bt_id_create>
   17c0e:	bf00      	nop
   17c10:	20000350 	.word	0x20000350
   17c14:	2000041c 	.word	0x2000041c

00017c18 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   17c18:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   17c1a:	4903      	ldr	r1, [pc, #12]	; (17c28 <bt_id_init+0x10>)
   17c1c:	4803      	ldr	r0, [pc, #12]	; (17c2c <bt_id_init+0x14>)
   17c1e:	f013 fe7c 	bl	2b91a <k_work_init_delayable>
#endif

	return 0;
}
   17c22:	2000      	movs	r0, #0
   17c24:	bd08      	pop	{r3, pc}
   17c26:	bf00      	nop
   17c28:	000177f5 	.word	0x000177f5
   17c2c:	200004c0 	.word	0x200004c0

00017c30 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17c30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17c32:	4606      	mov	r6, r0
   17c34:	4b1e      	ldr	r3, [pc, #120]	; (17cb0 <le_adv_start_add_conn+0x80>)
   17c36:	f816 2b09 	ldrb.w	r2, [r6], #9
   17c3a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   17c3e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17c40:	2300      	movs	r3, #0
{
   17c42:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
   17c44:	2207      	movs	r2, #7
   17c46:	460f      	mov	r7, r1
   17c48:	4630      	mov	r0, r6
   17c4a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17c4c:	9300      	str	r3, [sp, #0]
   17c4e:	f8cd 3003 	str.w	r3, [sp, #3]
   17c52:	f014 f9ac 	bl	2bfae <memcmp>
   17c56:	782a      	ldrb	r2, [r5, #0]
   17c58:	4604      	mov	r4, r0
   17c5a:	b9a8      	cbnz	r0, 17c88 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17c5c:	4b15      	ldr	r3, [pc, #84]	; (17cb4 <le_adv_start_add_conn+0x84>)
   17c5e:	6818      	ldr	r0, [r3, #0]
   17c60:	8899      	ldrh	r1, [r3, #4]
   17c62:	9002      	str	r0, [sp, #8]
   17c64:	799b      	ldrb	r3, [r3, #6]
   17c66:	f8ad 100c 	strh.w	r1, [sp, #12]
   17c6a:	4610      	mov	r0, r2
   17c6c:	a902      	add	r1, sp, #8
   17c6e:	f88d 300e 	strb.w	r3, [sp, #14]
   17c72:	f000 fd7d 	bl	18770 <bt_conn_add_le>
		if (!conn) {
   17c76:	4605      	mov	r5, r0
   17c78:	b1b8      	cbz	r0, 17caa <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   17c7a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17c7c:	f000 fb88 	bl	18390 <bt_conn_set_state>
	*out_conn = conn;
   17c80:	603d      	str	r5, [r7, #0]
	return 0;
}
   17c82:	4620      	mov	r0, r4
   17c84:	b005      	add	sp, #20
   17c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17c88:	4631      	mov	r1, r6
   17c8a:	4610      	mov	r0, r2
   17c8c:	f000 fdac 	bl	187e8 <bt_conn_exists_le>
   17c90:	4604      	mov	r4, r0
   17c92:	b938      	cbnz	r0, 17ca4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   17c94:	7828      	ldrb	r0, [r5, #0]
   17c96:	4631      	mov	r1, r6
   17c98:	f000 fd6a 	bl	18770 <bt_conn_add_le>
	if (!conn) {
   17c9c:	4605      	mov	r5, r0
   17c9e:	b120      	cbz	r0, 17caa <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17ca0:	2105      	movs	r1, #5
   17ca2:	e7eb      	b.n	17c7c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   17ca4:	f06f 0415 	mvn.w	r4, #21
   17ca8:	e7eb      	b.n	17c82 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   17caa:	f06f 040b 	mvn.w	r4, #11
   17cae:	e7e8      	b.n	17c82 <le_adv_start_add_conn+0x52>
   17cb0:	20000350 	.word	0x20000350
   17cb4:	0002cb7c 	.word	0x0002cb7c

00017cb8 <bt_le_ext_adv_foreach>:
{
   17cb8:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   17cba:	4801      	ldr	r0, [pc, #4]	; (17cc0 <bt_le_ext_adv_foreach+0x8>)
   17cbc:	4718      	bx	r3
   17cbe:	bf00      	nop
   17cc0:	20000368 	.word	0x20000368

00017cc4 <bt_le_adv_lookup_legacy>:
}
   17cc4:	4800      	ldr	r0, [pc, #0]	; (17cc8 <bt_le_adv_lookup_legacy+0x4>)
   17cc6:	4770      	bx	lr
   17cc8:	20000368 	.word	0x20000368

00017ccc <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   17ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17cce:	4822      	ldr	r0, [pc, #136]	; (17d58 <bt_le_adv_resume+0x8c>)
   17cd0:	4c21      	ldr	r4, [pc, #132]	; (17d58 <bt_le_adv_resume+0x8c>)
   17cd2:	f010 ffda 	bl	28c8a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17cd6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   17cda:	d03a      	beq.n	17d52 <bt_le_adv_resume+0x86>
   17cdc:	4620      	mov	r0, r4
   17cde:	f010 ffd4 	bl	28c8a <atomic_get>
   17ce2:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17ce4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   17ce8:	d433      	bmi.n	17d52 <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17cea:	4620      	mov	r0, r4
   17cec:	f010 ffcd 	bl	28c8a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17cf0:	0582      	lsls	r2, r0, #22
   17cf2:	d52e      	bpl.n	17d52 <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17cf4:	a901      	add	r1, sp, #4
   17cf6:	f1a4 0010 	sub.w	r0, r4, #16
   17cfa:	f7ff ff99 	bl	17c30 <le_adv_start_add_conn>
	if (err) {
   17cfe:	bb40      	cbnz	r0, 17d52 <bt_le_adv_resume+0x86>
   17d00:	4620      	mov	r0, r4
   17d02:	f010 ffc2 	bl	28c8a <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17d06:	04c3      	lsls	r3, r0, #19
   17d08:	d403      	bmi.n	17d12 <bt_le_adv_resume+0x46>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
   17d0a:	f1a4 0010 	sub.w	r0, r4, #16
   17d0e:	f010 ffa9 	bl	28c64 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17d12:	4812      	ldr	r0, [pc, #72]	; (17d5c <bt_le_adv_resume+0x90>)
   17d14:	2101      	movs	r1, #1
   17d16:	f010 ffcd 	bl	28cb4 <bt_le_adv_set_enable_legacy>
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   17d1a:	b150      	cbz	r0, 17d32 <bt_le_adv_resume+0x66>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d1c:	9801      	ldr	r0, [sp, #4]
   17d1e:	2100      	movs	r1, #0
   17d20:	f000 fb36 	bl	18390 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17d24:	480c      	ldr	r0, [pc, #48]	; (17d58 <bt_le_adv_resume+0x8c>)
   17d26:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17d2a:	f010 ffb4 	bl	28c96 <atomic_and>
	return (old & mask) != 0;
   17d2e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17d32:	9801      	ldr	r0, [sp, #4]
   17d34:	f011 f821 	bl	28d7a <bt_conn_unref>
	if (persist_paused) {
   17d38:	b15d      	cbz	r5, 17d52 <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d3a:	f3bf 8f5b 	dmb	ish
   17d3e:	e854 3f00 	ldrex	r3, [r4]
   17d42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17d46:	e844 3200 	strex	r2, r3, [r4]
   17d4a:	2a00      	cmp	r2, #0
   17d4c:	d1f7      	bne.n	17d3e <bt_le_adv_resume+0x72>
   17d4e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   17d52:	b003      	add	sp, #12
   17d54:	bd30      	pop	{r4, r5, pc}
   17d56:	bf00      	nop
   17d58:	20000378 	.word	0x20000378
   17d5c:	20000368 	.word	0x20000368

00017d60 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17d60:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   17d62:	4904      	ldr	r1, [pc, #16]	; (17d74 <bt_pub_key_is_debug+0x14>)
   17d64:	2240      	movs	r2, #64	; 0x40
   17d66:	f014 f922 	bl	2bfae <memcmp>
}
   17d6a:	fab0 f080 	clz	r0, r0
   17d6e:	0940      	lsrs	r0, r0, #5
   17d70:	bd08      	pop	{r3, pc}
   17d72:	bf00      	nop
   17d74:	0002ec18 	.word	0x0002ec18

00017d78 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17d78:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17d7a:	4b43      	ldr	r3, [pc, #268]	; (17e88 <bt_pub_key_gen+0x110>)
   17d7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17d80:	f003 0306 	and.w	r3, r3, #6
   17d84:	2b06      	cmp	r3, #6
{
   17d86:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17d88:	d00f      	beq.n	17daa <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   17d8a:	4b40      	ldr	r3, [pc, #256]	; (17e8c <bt_pub_key_gen+0x114>)
   17d8c:	9305      	str	r3, [sp, #20]
   17d8e:	2302      	movs	r3, #2
   17d90:	9304      	str	r3, [sp, #16]
   17d92:	483f      	ldr	r0, [pc, #252]	; (17e90 <bt_pub_key_gen+0x118>)
   17d94:	2300      	movs	r3, #0
   17d96:	aa04      	add	r2, sp, #16
   17d98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   17d9c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   17da0:	f7fb ff6e 	bl	13c80 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17da4:	4628      	mov	r0, r5
   17da6:	b007      	add	sp, #28
   17da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   17daa:	2800      	cmp	r0, #0
   17dac:	d069      	beq.n	17e82 <bt_pub_key_gen+0x10a>
	return list->head;
   17dae:	4e39      	ldr	r6, [pc, #228]	; (17e94 <bt_pub_key_gen+0x11c>)
   17db0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17db2:	b1a2      	cbz	r2, 17dde <bt_pub_key_gen+0x66>
   17db4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   17db6:	4298      	cmp	r0, r3
   17db8:	d10d      	bne.n	17dd6 <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
   17dba:	4b37      	ldr	r3, [pc, #220]	; (17e98 <bt_pub_key_gen+0x120>)
   17dbc:	9305      	str	r3, [sp, #20]
   17dbe:	2302      	movs	r3, #2
   17dc0:	9304      	str	r3, [sp, #16]
   17dc2:	4833      	ldr	r0, [pc, #204]	; (17e90 <bt_pub_key_gen+0x118>)
   17dc4:	2300      	movs	r3, #0
   17dc6:	aa04      	add	r2, sp, #16
   17dc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17dcc:	f7fb ff58 	bl	13c80 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   17dd0:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17dd4:	e7e6      	b.n	17da4 <bt_pub_key_gen+0x2c>
	return node->next;
   17dd6:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17dd8:	b10b      	cbz	r3, 17dde <bt_pub_key_gen+0x66>
   17dda:	3b04      	subs	r3, #4
   17ddc:	e7eb      	b.n	17db6 <bt_pub_key_gen+0x3e>
	parent->next = child;
   17dde:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17de0:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17de2:	1d03      	adds	r3, r0, #4
	list->head = node;
   17de4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17de6:	b902      	cbnz	r2, 17dea <bt_pub_key_gen+0x72>
	list->tail = node;
   17de8:	6073      	str	r3, [r6, #4]
   17dea:	4c2c      	ldr	r4, [pc, #176]	; (17e9c <bt_pub_key_gen+0x124>)
   17dec:	f3bf 8f5b 	dmb	ish
   17df0:	e854 7f00 	ldrex	r7, [r4]
   17df4:	f047 0320 	orr.w	r3, r7, #32
   17df8:	e844 3200 	strex	r2, r3, [r4]
   17dfc:	2a00      	cmp	r2, #0
   17dfe:	d1f7      	bne.n	17df0 <bt_pub_key_gen+0x78>
   17e00:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17e04:	f017 0720 	ands.w	r7, r7, #32
   17e08:	d001      	beq.n	17e0e <bt_pub_key_gen+0x96>
		return 0;
   17e0a:	2500      	movs	r5, #0
   17e0c:	e7ca      	b.n	17da4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17e0e:	f3bf 8f5b 	dmb	ish
   17e12:	e854 3f00 	ldrex	r3, [r4]
   17e16:	f023 0310 	bic.w	r3, r3, #16
   17e1a:	e844 3200 	strex	r2, r3, [r4]
   17e1e:	2a00      	cmp	r2, #0
   17e20:	d1f7      	bne.n	17e12 <bt_pub_key_gen+0x9a>
   17e22:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17e26:	463a      	mov	r2, r7
   17e28:	4639      	mov	r1, r7
   17e2a:	f242 0025 	movw	r0, #8229	; 0x2025
   17e2e:	f7fe fbef 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   17e32:	4605      	mov	r5, r0
   17e34:	2800      	cmp	r0, #0
   17e36:	d0e8      	beq.n	17e0a <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
   17e38:	4b19      	ldr	r3, [pc, #100]	; (17ea0 <bt_pub_key_gen+0x128>)
   17e3a:	9305      	str	r3, [sp, #20]
   17e3c:	2302      	movs	r3, #2
   17e3e:	9304      	str	r3, [sp, #16]
   17e40:	4813      	ldr	r0, [pc, #76]	; (17e90 <bt_pub_key_gen+0x118>)
   17e42:	463b      	mov	r3, r7
   17e44:	aa04      	add	r2, sp, #16
   17e46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17e4a:	f7fb ff19 	bl	13c80 <z_impl_z_log_msg_static_create>
   17e4e:	f3bf 8f5b 	dmb	ish
   17e52:	e854 3f00 	ldrex	r3, [r4]
   17e56:	f023 0320 	bic.w	r3, r3, #32
   17e5a:	e844 3200 	strex	r2, r3, [r4]
   17e5e:	2a00      	cmp	r2, #0
   17e60:	d1f7      	bne.n	17e52 <bt_pub_key_gen+0xda>
   17e62:	f3bf 8f5b 	dmb	ish
	return list->head;
   17e66:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17e68:	b13c      	cbz	r4, 17e7a <bt_pub_key_gen+0x102>
			if (cb->func) {
   17e6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17e6e:	3c04      	subs	r4, #4
			if (cb->func) {
   17e70:	b10b      	cbz	r3, 17e76 <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   17e72:	2000      	movs	r0, #0
   17e74:	4798      	blx	r3
	return node->next;
   17e76:	6864      	ldr	r4, [r4, #4]
   17e78:	e7f6      	b.n	17e68 <bt_pub_key_gen+0xf0>
	list->head = NULL;
   17e7a:	2300      	movs	r3, #0
	list->tail = NULL;
   17e7c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   17e80:	e790      	b.n	17da4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   17e82:	f06f 0515 	mvn.w	r5, #21
   17e86:	e78d      	b.n	17da4 <bt_pub_key_gen+0x2c>
   17e88:	20000350 	.word	0x20000350
   17e8c:	0002eb8a 	.word	0x0002eb8a
   17e90:	0002c79c 	.word	0x0002c79c
   17e94:	20002ddc 	.word	0x20002ddc
   17e98:	0002eba9 	.word	0x0002eba9
   17e9c:	2000041c 	.word	0x2000041c
   17ea0:	0002ebc5 	.word	0x0002ebc5

00017ea4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17ea4:	4b05      	ldr	r3, [pc, #20]	; (17ebc <bt_pub_key_get+0x18>)
   17ea6:	f3bf 8f5b 	dmb	ish
   17eaa:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17eac:	4804      	ldr	r0, [pc, #16]	; (17ec0 <bt_pub_key_get+0x1c>)
   17eae:	f3bf 8f5b 	dmb	ish
		return pub_key;
   17eb2:	f013 0f10 	tst.w	r3, #16
}
   17eb6:	bf08      	it	eq
   17eb8:	2000      	moveq	r0, #0
   17eba:	4770      	bx	lr
   17ebc:	2000041c 	.word	0x2000041c
   17ec0:	20003e6a 	.word	0x20003e6a

00017ec4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   17ec6:	4e2a      	ldr	r6, [pc, #168]	; (17f70 <bt_dh_key_gen+0xac>)
   17ec8:	6833      	ldr	r3, [r6, #0]
   17eca:	428b      	cmp	r3, r1
{
   17ecc:	af00      	add	r7, sp, #0
   17ece:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   17ed0:	d047      	beq.n	17f62 <bt_dh_key_gen+0x9e>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17ed2:	b123      	cbz	r3, 17ede <bt_dh_key_gen+0x1a>
		return -EBUSY;
   17ed4:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17ed8:	4620      	mov	r0, r4
   17eda:	46bd      	mov	sp, r7
   17edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ede:	4b25      	ldr	r3, [pc, #148]	; (17f74 <bt_dh_key_gen+0xb0>)
   17ee0:	f3bf 8f5b 	dmb	ish
   17ee4:	681a      	ldr	r2, [r3, #0]
   17ee6:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17eea:	0692      	lsls	r2, r2, #26
   17eec:	d4f2      	bmi.n	17ed4 <bt_dh_key_gen+0x10>
   17eee:	f3bf 8f5b 	dmb	ish
   17ef2:	681b      	ldr	r3, [r3, #0]
   17ef4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17ef8:	06db      	lsls	r3, r3, #27
   17efa:	d535      	bpl.n	17f68 <bt_dh_key_gen+0xa4>
	dh_key_cb = cb;
   17efc:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   17efe:	f242 0026 	movw	r0, #8230	; 0x2026
   17f02:	2140      	movs	r1, #64	; 0x40
   17f04:	f7fe fb4a 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   17f08:	4605      	mov	r5, r0
   17f0a:	b338      	cbz	r0, 17f5c <bt_dh_key_gen+0x98>
   17f0c:	2140      	movs	r1, #64	; 0x40
   17f0e:	3008      	adds	r0, #8
   17f10:	f012 fde8 	bl	2aae4 <net_buf_simple_add>
   17f14:	4623      	mov	r3, r4
   17f16:	f104 0240 	add.w	r2, r4, #64	; 0x40
   17f1a:	f853 1b04 	ldr.w	r1, [r3], #4
   17f1e:	f840 1b04 	str.w	r1, [r0], #4
   17f22:	4293      	cmp	r3, r2
   17f24:	d1f9      	bne.n	17f1a <bt_dh_key_gen+0x56>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17f26:	2200      	movs	r2, #0
   17f28:	4629      	mov	r1, r5
   17f2a:	f242 0026 	movw	r0, #8230	; 0x2026
   17f2e:	f7fe fb6f 	bl	16610 <bt_hci_cmd_send_sync>
	if (err) {
   17f32:	4604      	mov	r4, r0
   17f34:	2800      	cmp	r0, #0
   17f36:	d0cf      	beq.n	17ed8 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   17f38:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17f3a:	466d      	mov	r5, sp
   17f3c:	b088      	sub	sp, #32
		dh_key_cb = NULL;
   17f3e:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17f40:	466a      	mov	r2, sp
   17f42:	490d      	ldr	r1, [pc, #52]	; (17f78 <bt_dh_key_gen+0xb4>)
   17f44:	e9c2 1405 	strd	r1, r4, [r2, #20]
   17f48:	2103      	movs	r1, #3
   17f4a:	f842 1f10 	str.w	r1, [r2, #16]!
   17f4e:	480b      	ldr	r0, [pc, #44]	; (17f7c <bt_dh_key_gen+0xb8>)
   17f50:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17f54:	f7fb fe94 	bl	13c80 <z_impl_z_log_msg_static_create>
   17f58:	46ad      	mov	sp, r5
		return err;
   17f5a:	e7bd      	b.n	17ed8 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   17f5c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17f60:	e7ea      	b.n	17f38 <bt_dh_key_gen+0x74>
		return -EALREADY;
   17f62:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17f66:	e7b7      	b.n	17ed8 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   17f68:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   17f6c:	e7b4      	b.n	17ed8 <bt_dh_key_gen+0x14>
   17f6e:	bf00      	nop
   17f70:	20002dd8 	.word	0x20002dd8
   17f74:	2000041c 	.word	0x2000041c
   17f78:	0002ebef 	.word	0x0002ebef
   17f7c:	0002c79c 	.word	0x0002c79c

00017f80 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f82:	4b1d      	ldr	r3, [pc, #116]	; (17ff8 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17f84:	6885      	ldr	r5, [r0, #8]
   17f86:	f3bf 8f5b 	dmb	ish
   17f8a:	e853 2f00 	ldrex	r2, [r3]
   17f8e:	f022 0220 	bic.w	r2, r2, #32
   17f92:	e843 2100 	strex	r1, r2, [r3]
   17f96:	2900      	cmp	r1, #0
   17f98:	d1f7      	bne.n	17f8a <bt_hci_evt_le_pkey_complete+0xa>
   17f9a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   17f9e:	782a      	ldrb	r2, [r5, #0]
   17fa0:	b9aa      	cbnz	r2, 17fce <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   17fa2:	4916      	ldr	r1, [pc, #88]	; (17ffc <bt_hci_evt_le_pkey_complete+0x7c>)
   17fa4:	1c6a      	adds	r2, r5, #1
   17fa6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   17faa:	f852 4b04 	ldr.w	r4, [r2], #4
   17fae:	f841 4b04 	str.w	r4, [r1], #4
   17fb2:	4282      	cmp	r2, r0
   17fb4:	d1f9      	bne.n	17faa <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17fb6:	f3bf 8f5b 	dmb	ish
   17fba:	e853 2f00 	ldrex	r2, [r3]
   17fbe:	f042 0210 	orr.w	r2, r2, #16
   17fc2:	e843 2100 	strex	r1, r2, [r3]
   17fc6:	2900      	cmp	r1, #0
   17fc8:	d1f7      	bne.n	17fba <bt_hci_evt_le_pkey_complete+0x3a>
   17fca:	f3bf 8f5b 	dmb	ish
	return list->head;
   17fce:	4e0c      	ldr	r6, [pc, #48]	; (18000 <bt_hci_evt_le_pkey_complete+0x80>)
   17fd0:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fd2:	b16c      	cbz	r4, 17ff0 <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17fd4:	4f09      	ldr	r7, [pc, #36]	; (17ffc <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fd6:	3c04      	subs	r4, #4
		if (cb->func) {
   17fd8:	6823      	ldr	r3, [r4, #0]
   17fda:	b12b      	cbz	r3, 17fe8 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
   17fdc:	782a      	ldrb	r2, [r5, #0]
   17fde:	2a00      	cmp	r2, #0
   17fe0:	bf0c      	ite	eq
   17fe2:	4638      	moveq	r0, r7
   17fe4:	2000      	movne	r0, #0
   17fe6:	4798      	blx	r3
	return node->next;
   17fe8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fea:	b10c      	cbz	r4, 17ff0 <bt_hci_evt_le_pkey_complete+0x70>
   17fec:	3c04      	subs	r4, #4
   17fee:	e7f3      	b.n	17fd8 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
   17ff0:	2300      	movs	r3, #0
	list->tail = NULL;
   17ff2:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ff8:	2000041c 	.word	0x2000041c
   17ffc:	20003e6a 	.word	0x20003e6a
   18000:	20002ddc 	.word	0x20002ddc

00018004 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   18004:	4905      	ldr	r1, [pc, #20]	; (1801c <bt_hci_evt_le_dhkey_complete+0x18>)
   18006:	680b      	ldr	r3, [r1, #0]
   18008:	b133      	cbz	r3, 18018 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1800a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1800c:	2000      	movs	r0, #0
   1800e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   18010:	7811      	ldrb	r1, [r2, #0]
   18012:	b901      	cbnz	r1, 18016 <bt_hci_evt_le_dhkey_complete+0x12>
   18014:	1c50      	adds	r0, r2, #1
   18016:	4718      	bx	r3
	}
}
   18018:	4770      	bx	lr
   1801a:	bf00      	nop
   1801c:	20002dd8 	.word	0x20002dd8

00018020 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18020:	4b0b      	ldr	r3, [pc, #44]	; (18050 <notify_connected+0x30>)
{
   18022:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   18024:	681d      	ldr	r5, [r3, #0]
{
   18026:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18028:	b925      	cbnz	r5, 18034 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1802a:	4d0a      	ldr	r5, [pc, #40]	; (18054 <notify_connected+0x34>)
   1802c:	4e0a      	ldr	r6, [pc, #40]	; (18058 <notify_connected+0x38>)
   1802e:	42b5      	cmp	r5, r6
   18030:	d307      	bcc.n	18042 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   18032:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   18034:	682b      	ldr	r3, [r5, #0]
   18036:	b113      	cbz	r3, 1803e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   18038:	7b21      	ldrb	r1, [r4, #12]
   1803a:	4620      	mov	r0, r4
   1803c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1803e:	69ad      	ldr	r5, [r5, #24]
   18040:	e7f2      	b.n	18028 <notify_connected+0x8>
		if (cb->connected) {
   18042:	682b      	ldr	r3, [r5, #0]
   18044:	b113      	cbz	r3, 1804c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   18046:	7b21      	ldrb	r1, [r4, #12]
   18048:	4620      	mov	r0, r4
   1804a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1804c:	351c      	adds	r5, #28
   1804e:	e7ee      	b.n	1802e <notify_connected+0xe>
   18050:	20002df0 	.word	0x20002df0
   18054:	0002c718 	.word	0x0002c718
   18058:	0002c734 	.word	0x0002c734

0001805c <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   1805c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
   1805e:	4b07      	ldr	r3, [pc, #28]	; (1807c <bt_conn_create_pdu_timeout.part.0+0x20>)
   18060:	9305      	str	r3, [sp, #20]
   18062:	4807      	ldr	r0, [pc, #28]	; (18080 <bt_conn_create_pdu_timeout.part.0+0x24>)
   18064:	2302      	movs	r3, #2
   18066:	aa04      	add	r2, sp, #16
   18068:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1806c:	9304      	str	r3, [sp, #16]
   1806e:	f010 fe5a 	bl	28d26 <z_log_msg_static_create.constprop.0>
}
   18072:	2000      	movs	r0, #0
   18074:	b007      	add	sp, #28
   18076:	f85d fb04 	ldr.w	pc, [sp], #4
   1807a:	bf00      	nop
   1807c:	0002ec58 	.word	0x0002ec58
   18080:	0002c78c 	.word	0x0002c78c

00018084 <tx_notify>:
{
   18084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18088:	f8df 804c 	ldr.w	r8, [pc, #76]	; 180d8 <tx_notify+0x54>
{
   1808c:	4604      	mov	r4, r0
	tx->cb = NULL;
   1808e:	2700      	movs	r7, #0
	__asm__ volatile(
   18090:	f04f 0340 	mov.w	r3, #64	; 0x40
   18094:	f3ef 8211 	mrs	r2, BASEPRI
   18098:	f383 8812 	msr	BASEPRI_MAX, r3
   1809c:	f3bf 8f6f 	isb	sy
	return list->head;
   180a0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   180a2:	b129      	cbz	r1, 180b0 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   180a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   180a6:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   180a8:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   180aa:	4281      	cmp	r1, r0
	list->tail = node;
   180ac:	bf08      	it	eq
   180ae:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   180b0:	f382 8811 	msr	BASEPRI, r2
   180b4:	f3bf 8f6f 	isb	sy
		if (!tx) {
   180b8:	b161      	cbz	r1, 180d4 <tx_notify+0x50>
		user_data = tx->user_data;
   180ba:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   180be:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   180c0:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   180c4:	4640      	mov	r0, r8
   180c6:	f013 fb13 	bl	2b6f0 <k_queue_append>
		cb(conn, user_data, 0);
   180ca:	2200      	movs	r2, #0
   180cc:	4631      	mov	r1, r6
   180ce:	4620      	mov	r0, r4
   180d0:	47a8      	blx	r5
	while (1) {
   180d2:	e7dd      	b.n	18090 <tx_notify+0xc>
}
   180d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180d8:	20000bbc 	.word	0x20000bbc

000180dc <conn_tx_destroy>:
{
   180dc:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   180de:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   180e2:	2200      	movs	r2, #0
	tx->user_data = NULL;
   180e4:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   180e8:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   180ea:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   180ec:	4805      	ldr	r0, [pc, #20]	; (18104 <conn_tx_destroy+0x28>)
   180ee:	f013 faff 	bl	2b6f0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   180f2:	4631      	mov	r1, r6
   180f4:	4620      	mov	r0, r4
   180f6:	462b      	mov	r3, r5
   180f8:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   180fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   18100:	4718      	bx	r3
   18102:	bf00      	nop
   18104:	20000bbc 	.word	0x20000bbc

00018108 <bt_conn_get_pkts>:
}
   18108:	4800      	ldr	r0, [pc, #0]	; (1810c <bt_conn_get_pkts+0x4>)
   1810a:	4770      	bx	lr
   1810c:	20000450 	.word	0x20000450

00018110 <bt_conn_new>:
{
   18110:	b538      	push	{r3, r4, r5, lr}
   18112:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   18114:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18116:	2501      	movs	r5, #1
   18118:	428b      	cmp	r3, r1
   1811a:	d102      	bne.n	18122 <bt_conn_new+0x12>
		return NULL;
   1811c:	2400      	movs	r4, #0
}
   1811e:	4620      	mov	r0, r4
   18120:	bd38      	pop	{r3, r4, r5, pc}
   18122:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   18126:	f3bf 8f5b 	dmb	ish
   1812a:	e852 0f00 	ldrex	r0, [r2]
   1812e:	2800      	cmp	r0, #0
   18130:	d104      	bne.n	1813c <bt_conn_new+0x2c>
   18132:	e842 5c00 	strex	ip, r5, [r2]
   18136:	f1bc 0f00 	cmp.w	ip, #0
   1813a:	d1f6      	bne.n	1812a <bt_conn_new+0x1a>
   1813c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18140:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   18144:	d002      	beq.n	1814c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   18146:	3301      	adds	r3, #1
   18148:	4604      	mov	r4, r0
   1814a:	e7e5      	b.n	18118 <bt_conn_new+0x8>
	if (!conn) {
   1814c:	2c00      	cmp	r4, #0
   1814e:	d0e6      	beq.n	1811e <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   18150:	22b8      	movs	r2, #184	; 0xb8
   18152:	2100      	movs	r1, #0
   18154:	4620      	mov	r0, r4
   18156:	f013 ff5b 	bl	2c010 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1815a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1815e:	4904      	ldr	r1, [pc, #16]	; (18170 <bt_conn_new+0x60>)
   18160:	f013 fbdb 	bl	2b91a <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18164:	4903      	ldr	r1, [pc, #12]	; (18174 <bt_conn_new+0x64>)
   18166:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1816a:	f013 fb92 	bl	2b892 <k_work_init>
	return conn;
   1816e:	e7d6      	b.n	1811e <bt_conn_new+0xe>
   18170:	000188f5 	.word	0x000188f5
   18174:	00028d2d 	.word	0x00028d2d

00018178 <bt_conn_recv>:
{
   18178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1817c:	b086      	sub	sp, #24
   1817e:	4616      	mov	r6, r2
   18180:	af00      	add	r7, sp, #0
   18182:	4604      	mov	r4, r0
   18184:	460d      	mov	r5, r1
	tx_notify(conn);
   18186:	f7ff ff7d 	bl	18084 <tx_notify>
	switch (flags) {
   1818a:	2e01      	cmp	r6, #1
   1818c:	d030      	beq.n	181f0 <bt_conn_recv+0x78>
   1818e:	2e02      	cmp	r6, #2
   18190:	d16a      	bne.n	18268 <bt_conn_recv+0xf0>
		if (conn->rx) {
   18192:	6923      	ldr	r3, [r4, #16]
   18194:	b163      	cbz	r3, 181b0 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   18196:	4b40      	ldr	r3, [pc, #256]	; (18298 <bt_conn_recv+0x120>)
   18198:	4840      	ldr	r0, [pc, #256]	; (1829c <bt_conn_recv+0x124>)
   1819a:	f107 0210 	add.w	r2, r7, #16
   1819e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   181a2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   181a6:	f010 fdbe 	bl	28d26 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   181aa:	4620      	mov	r0, r4
   181ac:	f010 fdc1 	bl	28d32 <bt_conn_reset_rx_state>
		conn->rx = buf;
   181b0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   181b2:	6921      	ldr	r1, [r4, #16]
   181b4:	8988      	ldrh	r0, [r1, #12]
   181b6:	2801      	cmp	r0, #1
   181b8:	d930      	bls.n	1821c <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   181ba:	688b      	ldr	r3, [r1, #8]
   181bc:	881b      	ldrh	r3, [r3, #0]
   181be:	3304      	adds	r3, #4
   181c0:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   181c2:	4298      	cmp	r0, r3
   181c4:	d32a      	bcc.n	1821c <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   181c6:	d95f      	bls.n	18288 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   181c8:	466d      	mov	r5, sp
   181ca:	b088      	sub	sp, #32
   181cc:	466a      	mov	r2, sp
   181ce:	4934      	ldr	r1, [pc, #208]	; (182a0 <bt_conn_recv+0x128>)
   181d0:	61d3      	str	r3, [r2, #28]
   181d2:	2304      	movs	r3, #4
   181d4:	e9c2 1005 	strd	r1, r0, [r2, #20]
   181d8:	f842 3f10 	str.w	r3, [r2, #16]!
   181dc:	482f      	ldr	r0, [pc, #188]	; (1829c <bt_conn_recv+0x124>)
   181de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   181e2:	f010 fda0 	bl	28d26 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   181e6:	4620      	mov	r0, r4
   181e8:	46ad      	mov	sp, r5
   181ea:	f010 fda2 	bl	28d32 <bt_conn_reset_rx_state>
		return;
   181ee:	e015      	b.n	1821c <bt_conn_recv+0xa4>
		if (!conn->rx) {
   181f0:	6920      	ldr	r0, [r4, #16]
   181f2:	b970      	cbnz	r0, 18212 <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   181f4:	4b2b      	ldr	r3, [pc, #172]	; (182a4 <bt_conn_recv+0x12c>)
   181f6:	617b      	str	r3, [r7, #20]
   181f8:	4828      	ldr	r0, [pc, #160]	; (1829c <bt_conn_recv+0x124>)
   181fa:	2302      	movs	r3, #2
   181fc:	f107 0210 	add.w	r2, r7, #16
   18200:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18204:	613b      	str	r3, [r7, #16]
   18206:	f010 fd8e 	bl	28d26 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1820a:	4620      	mov	r0, r4
   1820c:	f010 fd91 	bl	28d32 <bt_conn_reset_rx_state>
   18210:	e001      	b.n	18216 <bt_conn_recv+0x9e>
		if (!buf->len) {
   18212:	89ae      	ldrh	r6, [r5, #12]
   18214:	b936      	cbnz	r6, 18224 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   18216:	4628      	mov	r0, r5
   18218:	f005 fca6 	bl	1db68 <net_buf_unref>
}
   1821c:	3718      	adds	r7, #24
   1821e:	46bd      	mov	sp, r7
   18220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18224:	3008      	adds	r0, #8
   18226:	f012 fca0 	bl	2ab6a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1822a:	4286      	cmp	r6, r0
   1822c:	d912      	bls.n	18254 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   1822e:	4b1e      	ldr	r3, [pc, #120]	; (182a8 <bt_conn_recv+0x130>)
   18230:	481a      	ldr	r0, [pc, #104]	; (1829c <bt_conn_recv+0x124>)
   18232:	617b      	str	r3, [r7, #20]
   18234:	f107 0210 	add.w	r2, r7, #16
   18238:	2302      	movs	r3, #2
   1823a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1823e:	613b      	str	r3, [r7, #16]
   18240:	f010 fd71 	bl	28d26 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   18244:	2200      	movs	r2, #0
   18246:	6921      	ldr	r1, [r4, #16]
   18248:	4620      	mov	r0, r4
   1824a:	f000 fcd7 	bl	18bfc <bt_l2cap_recv>
			conn->rx = NULL;
   1824e:	2300      	movs	r3, #0
   18250:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   18252:	e7e0      	b.n	18216 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18254:	6920      	ldr	r0, [r4, #16]
   18256:	89aa      	ldrh	r2, [r5, #12]
   18258:	68a9      	ldr	r1, [r5, #8]
   1825a:	3008      	adds	r0, #8
   1825c:	f012 fc48 	bl	2aaf0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18260:	4628      	mov	r0, r5
   18262:	f005 fc81 	bl	1db68 <net_buf_unref>
		break;
   18266:	e7a4      	b.n	181b2 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   18268:	46e8      	mov	r8, sp
   1826a:	b088      	sub	sp, #32
   1826c:	466a      	mov	r2, sp
   1826e:	4b0f      	ldr	r3, [pc, #60]	; (182ac <bt_conn_recv+0x134>)
   18270:	480a      	ldr	r0, [pc, #40]	; (1829c <bt_conn_recv+0x124>)
	switch (flags) {
   18272:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   18276:	2303      	movs	r3, #3
   18278:	f842 3f10 	str.w	r3, [r2, #16]!
   1827c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18280:	f010 fd51 	bl	28d26 <z_log_msg_static_create.constprop.0>
   18284:	46c5      	mov	sp, r8
   18286:	e7c0      	b.n	1820a <bt_conn_recv+0x92>
	conn->rx = NULL;
   18288:	2300      	movs	r3, #0
   1828a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1828c:	2201      	movs	r2, #1
   1828e:	4620      	mov	r0, r4
   18290:	f000 fcb4 	bl	18bfc <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   18294:	e7c2      	b.n	1821c <bt_conn_recv+0xa4>
   18296:	bf00      	nop
   18298:	0002ec81 	.word	0x0002ec81
   1829c:	0002c78c 	.word	0x0002c78c
   182a0:	0002ed01 	.word	0x0002ed01
   182a4:	0002ec9e 	.word	0x0002ec9e
   182a8:	0002ecbc 	.word	0x0002ecbc
   182ac:	0002ece3 	.word	0x0002ece3

000182b0 <bt_conn_send_cb>:
{
   182b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182b4:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   182b6:	7b43      	ldrb	r3, [r0, #13]
   182b8:	2b07      	cmp	r3, #7
{
   182ba:	b086      	sub	sp, #24
   182bc:	4605      	mov	r5, r0
   182be:	460e      	mov	r6, r1
   182c0:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   182c2:	d00c      	beq.n	182de <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   182c4:	4b28      	ldr	r3, [pc, #160]	; (18368 <bt_conn_send_cb+0xb8>)
   182c6:	9305      	str	r3, [sp, #20]
   182c8:	4828      	ldr	r0, [pc, #160]	; (1836c <bt_conn_send_cb+0xbc>)
   182ca:	2302      	movs	r3, #2
   182cc:	aa04      	add	r2, sp, #16
   182ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   182d2:	9304      	str	r3, [sp, #16]
   182d4:	f010 fd27 	bl	28d26 <z_log_msg_static_create.constprop.0>
			return -ENOTCONN;
   182d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   182dc:	e01d      	b.n	1831a <bt_conn_send_cb+0x6a>
	if (cb) {
   182de:	2a00      	cmp	r2, #0
   182e0:	d040      	beq.n	18364 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   182e2:	f00a f937 	bl	22554 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   182e6:	4b22      	ldr	r3, [pc, #136]	; (18370 <bt_conn_send_cb+0xc0>)
   182e8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   182ea:	4822      	ldr	r0, [pc, #136]	; (18374 <bt_conn_send_cb+0xc4>)
   182ec:	bf07      	ittee	eq
   182ee:	2200      	moveq	r2, #0
   182f0:	2300      	moveq	r3, #0
   182f2:	f04f 32ff 	movne.w	r2, #4294967295
   182f6:	f04f 33ff 	movne.w	r3, #4294967295
   182fa:	f009 fbbb 	bl	21a74 <z_impl_k_queue_get>
   182fe:	4604      	mov	r4, r0
		if (!tx) {
   18300:	b970      	cbnz	r0, 18320 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   18302:	4b1d      	ldr	r3, [pc, #116]	; (18378 <bt_conn_send_cb+0xc8>)
   18304:	4819      	ldr	r0, [pc, #100]	; (1836c <bt_conn_send_cb+0xbc>)
   18306:	9305      	str	r3, [sp, #20]
   18308:	aa04      	add	r2, sp, #16
   1830a:	2302      	movs	r3, #2
   1830c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18310:	9304      	str	r3, [sp, #16]
   18312:	f010 fd08 	bl	28d26 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   18316:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1831a:	b006      	add	sp, #24
   1831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18320:	7b6b      	ldrb	r3, [r5, #13]
   18322:	2b07      	cmp	r3, #7
   18324:	d012      	beq.n	1834c <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   18326:	4b15      	ldr	r3, [pc, #84]	; (1837c <bt_conn_send_cb+0xcc>)
   18328:	9305      	str	r3, [sp, #20]
   1832a:	4810      	ldr	r0, [pc, #64]	; (1836c <bt_conn_send_cb+0xbc>)
   1832c:	2302      	movs	r3, #2
   1832e:	aa04      	add	r2, sp, #16
   18330:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18334:	9304      	str	r3, [sp, #16]
   18336:	f010 fcf6 	bl	28d26 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   1833a:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1833c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   18340:	480c      	ldr	r0, [pc, #48]	; (18374 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   18342:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18344:	4621      	mov	r1, r4
   18346:	f013 f9d3 	bl	2b6f0 <k_queue_append>
   1834a:	e7c5      	b.n	182d8 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   1834c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1834e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18352:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18354:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   18356:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1835a:	4631      	mov	r1, r6
   1835c:	f012 fb8f 	bl	2aa7e <net_buf_put>
	return 0;
   18360:	2000      	movs	r0, #0
   18362:	e7da      	b.n	1831a <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
   18364:	614a      	str	r2, [r1, #20]
   18366:	e7f6      	b.n	18356 <bt_conn_send_cb+0xa6>
   18368:	0002ed1c 	.word	0x0002ed1c
   1836c:	0002c78c 	.word	0x0002c78c
   18370:	20002578 	.word	0x20002578
   18374:	20000bbc 	.word	0x20000bbc
   18378:	0002ed2b 	.word	0x0002ed2b
   1837c:	0002ed49 	.word	0x0002ed49

00018380 <bt_conn_lookup_handle>:
{
   18380:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18382:	2101      	movs	r1, #1
   18384:	4801      	ldr	r0, [pc, #4]	; (1838c <bt_conn_lookup_handle+0xc>)
   18386:	f010 bd12 	b.w	28dae <conn_lookup_handle>
   1838a:	bf00      	nop
   1838c:	20001fc0 	.word	0x20001fc0

00018390 <bt_conn_set_state>:
{
   18390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   18392:	7b46      	ldrb	r6, [r0, #13]
   18394:	428e      	cmp	r6, r1
{
   18396:	af00      	add	r7, sp, #0
   18398:	4604      	mov	r4, r0
   1839a:	460d      	mov	r5, r1
	if (conn->state == state) {
   1839c:	d117      	bne.n	183ce <bt_conn_set_state+0x3e>
	switch (state) {
   1839e:	2e08      	cmp	r6, #8
   183a0:	bf96      	itet	ls
   183a2:	4b69      	ldrls	r3, [pc, #420]	; (18548 <bt_conn_set_state+0x1b8>)
	if (conn->state == state) {
   183a4:	4b69      	ldrhi	r3, [pc, #420]	; (1854c <bt_conn_set_state+0x1bc>)
   183a6:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   183aa:	466c      	mov	r4, sp
   183ac:	b088      	sub	sp, #32
   183ae:	466a      	mov	r2, sp
   183b0:	4967      	ldr	r1, [pc, #412]	; (18550 <bt_conn_set_state+0x1c0>)
   183b2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   183b6:	2302      	movs	r3, #2
   183b8:	7713      	strb	r3, [r2, #28]
   183ba:	4b66      	ldr	r3, [pc, #408]	; (18554 <bt_conn_set_state+0x1c4>)
   183bc:	f842 3f10 	str.w	r3, [r2, #16]!
   183c0:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
		BT_WARN("no valid (%u) state was set", state);
   183c4:	4864      	ldr	r0, [pc, #400]	; (18558 <bt_conn_set_state+0x1c8>)
   183c6:	f010 fcae 	bl	28d26 <z_log_msg_static_create.constprop.0>
   183ca:	46a5      	mov	sp, r4
   183cc:	e040      	b.n	18450 <bt_conn_set_state+0xc0>
	conn->state = state;
   183ce:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   183d0:	b926      	cbnz	r6, 183dc <bt_conn_set_state+0x4c>
		if (conn->type != BT_CONN_TYPE_ISO) {
   183d2:	7883      	ldrb	r3, [r0, #2]
   183d4:	2b08      	cmp	r3, #8
   183d6:	d001      	beq.n	183dc <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   183d8:	f010 fcb4 	bl	28d44 <bt_conn_ref>
	switch (conn->state) {
   183dc:	7b63      	ldrb	r3, [r4, #13]
   183de:	2b08      	cmp	r3, #8
   183e0:	f200 80ad 	bhi.w	1853e <bt_conn_set_state+0x1ae>
   183e4:	e8df f003 	tbb	[pc, r3]
   183e8:	34340536 	.word	0x34340536
   183ec:	1c343434 	.word	0x1c343434
   183f0:	34          	.byte	0x34
   183f1:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   183f2:	4d5a      	ldr	r5, [pc, #360]	; (1855c <bt_conn_set_state+0x1cc>)
		tx->pending_no_cb = 0U;
   183f4:	2600      	movs	r6, #0
	__asm__ volatile(
   183f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   183fa:	f3ef 8211 	mrs	r2, BASEPRI
   183fe:	f383 8812 	msr	BASEPRI_MAX, r3
   18402:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18406:	69e3      	ldr	r3, [r4, #28]
   18408:	2b00      	cmp	r3, #0
   1840a:	d077      	beq.n	184fc <bt_conn_set_state+0x16c>
			conn->pending_no_cb--;
   1840c:	3b01      	subs	r3, #1
   1840e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18410:	f382 8811 	msr	BASEPRI, r2
   18414:	f3bf 8f6f 	isb	sy
   18418:	4628      	mov	r0, r5
   1841a:	f009 fb5f 	bl	21adc <z_impl_k_sem_give>
}
   1841e:	e7ea      	b.n	183f6 <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18420:	78a3      	ldrb	r3, [r4, #2]
   18422:	2b04      	cmp	r3, #4
   18424:	d014      	beq.n	18450 <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   18426:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1842a:	f013 f955 	bl	2b6d8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1842e:	484c      	ldr	r0, [pc, #304]	; (18560 <bt_conn_set_state+0x1d0>)
   18430:	2100      	movs	r1, #0
   18432:	f00a fb73 	bl	22b1c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   18436:	2300      	movs	r3, #0
	list->tail = NULL;
   18438:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1843c:	78e3      	ldrb	r3, [r4, #3]
   1843e:	2b01      	cmp	r3, #1
   18440:	d106      	bne.n	18450 <bt_conn_set_state+0xc0>
			k_work_schedule(&conn->deferred_work,
   18442:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18446:	2300      	movs	r3, #0
   18448:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1844c:	f009 fd3c 	bl	21ec8 <k_work_schedule>
}
   18450:	46bd      	mov	sp, r7
   18452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   18454:	78a3      	ldrb	r3, [r4, #2]
   18456:	2b04      	cmp	r3, #4
   18458:	d103      	bne.n	18462 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   1845a:	4620      	mov	r0, r4
   1845c:	f010 fc8d 	bl	28d7a <bt_conn_unref>
			break;
   18460:	e7f6      	b.n	18450 <bt_conn_set_state+0xc0>
		switch (old_state) {
   18462:	2e08      	cmp	r6, #8
   18464:	d8f4      	bhi.n	18450 <bt_conn_set_state+0xc0>
   18466:	a301      	add	r3, pc, #4	; (adr r3, 1846c <bt_conn_set_state+0xdc>)
   18468:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1846c:	000184e5 	.word	0x000184e5
   18470:	00018491 	.word	0x00018491
   18474:	000184d7 	.word	0x000184d7
   18478:	0001845b 	.word	0x0001845b
   1847c:	0001845b 	.word	0x0001845b
   18480:	000184d7 	.word	0x000184d7
   18484:	000184d7 	.word	0x000184d7
   18488:	000184e5 	.word	0x000184e5
   1848c:	000184e5 	.word	0x000184e5
			tx_notify(conn);
   18490:	4620      	mov	r0, r4
   18492:	f7ff fdf7 	bl	18084 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18496:	78a3      	ldrb	r3, [r4, #2]
   18498:	2b01      	cmp	r3, #1
   1849a:	d10a      	bne.n	184b2 <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1849c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   184a0:	4628      	mov	r0, r5
   184a2:	f013 fa46 	bl	2b932 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   184a6:	f010 0f0c 	tst.w	r0, #12
   184aa:	d002      	beq.n	184b2 <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   184ac:	4628      	mov	r0, r5
   184ae:	f013 fa42 	bl	2b936 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184b2:	f3bf 8f5b 	dmb	ish
   184b6:	3404      	adds	r4, #4
   184b8:	e854 3f00 	ldrex	r3, [r4]
   184bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   184c0:	e844 3200 	strex	r2, r3, [r4]
   184c4:	2a00      	cmp	r2, #0
   184c6:	d1f7      	bne.n	184b8 <bt_conn_set_state+0x128>
   184c8:	f3bf 8f5b 	dmb	ish
   184cc:	2100      	movs	r1, #0
   184ce:	4824      	ldr	r0, [pc, #144]	; (18560 <bt_conn_set_state+0x1d0>)
   184d0:	f00a fb24 	bl	22b1c <z_impl_k_poll_signal_raise>
   184d4:	e7bc      	b.n	18450 <bt_conn_set_state+0xc0>
			if (conn->err) {
   184d6:	7b23      	ldrb	r3, [r4, #12]
   184d8:	2b00      	cmp	r3, #0
   184da:	d0be      	beq.n	1845a <bt_conn_set_state+0xca>
				notify_connected(conn);
   184dc:	4620      	mov	r0, r4
   184de:	f7ff fd9f 	bl	18020 <notify_connected>
   184e2:	e7ba      	b.n	1845a <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   184e4:	466c      	mov	r4, sp
   184e6:	b088      	sub	sp, #32
   184e8:	466a      	mov	r2, sp
   184ea:	4b1e      	ldr	r3, [pc, #120]	; (18564 <bt_conn_set_state+0x1d4>)
		BT_WARN("no valid (%u) state was set", state);
   184ec:	e9c2 3505 	strd	r3, r5, [r2, #20]
   184f0:	2303      	movs	r3, #3
   184f2:	f842 3f10 	str.w	r3, [r2, #16]!
   184f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   184fa:	e763      	b.n	183c4 <bt_conn_set_state+0x34>
	return list->head;
   184fc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   184fe:	b129      	cbz	r1, 1850c <bt_conn_set_state+0x17c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18500:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   18502:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   18504:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18506:	4281      	cmp	r1, r0
	list->tail = node;
   18508:	bf08      	it	eq
   1850a:	61a3      	streq	r3, [r4, #24]
   1850c:	f382 8811 	msr	BASEPRI, r2
   18510:	f3bf 8f6f 	isb	sy
		if (!node) {
   18514:	2900      	cmp	r1, #0
   18516:	d09b      	beq.n	18450 <bt_conn_set_state+0xc0>
	__asm__ volatile(
   18518:	f04f 0240 	mov.w	r2, #64	; 0x40
   1851c:	f3ef 8311 	mrs	r3, BASEPRI
   18520:	f382 8812 	msr	BASEPRI_MAX, r2
   18524:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   18528:	68ca      	ldr	r2, [r1, #12]
   1852a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1852c:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1852e:	f383 8811 	msr	BASEPRI, r3
   18532:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   18536:	4620      	mov	r0, r4
   18538:	f7ff fdd0 	bl	180dc <conn_tx_destroy>
   1853c:	e76c      	b.n	18418 <bt_conn_set_state+0x88>
		BT_WARN("no valid (%u) state was set", state);
   1853e:	466c      	mov	r4, sp
   18540:	b088      	sub	sp, #32
   18542:	466a      	mov	r2, sp
   18544:	4b08      	ldr	r3, [pc, #32]	; (18568 <bt_conn_set_state+0x1d8>)
   18546:	e7d1      	b.n	184ec <bt_conn_set_state+0x15c>
   18548:	0002cffc 	.word	0x0002cffc
   1854c:	0002ed6f 	.word	0x0002ed6f
   18550:	0002ed79 	.word	0x0002ed79
   18554:	01000003 	.word	0x01000003
   18558:	0002c78c 	.word	0x0002c78c
   1855c:	20000450 	.word	0x20000450
   18560:	200006bc 	.word	0x200006bc
   18564:	0002ed8a 	.word	0x0002ed8a
   18568:	0002eda1 	.word	0x0002eda1

0001856c <bt_conn_index>:
		index = conn - acl_conns;
   1856c:	4b03      	ldr	r3, [pc, #12]	; (1857c <bt_conn_index+0x10>)
   1856e:	1ac0      	subs	r0, r0, r3
   18570:	4b03      	ldr	r3, [pc, #12]	; (18580 <bt_conn_index+0x14>)
   18572:	1180      	asrs	r0, r0, #6
   18574:	4358      	muls	r0, r3
}
   18576:	b2c0      	uxtb	r0, r0
   18578:	4770      	bx	lr
   1857a:	bf00      	nop
   1857c:	20001fc0 	.word	0x20001fc0
   18580:	aaaaaaab 	.word	0xaaaaaaab

00018584 <bt_conn_create_pdu_timeout>:
{
   18584:	b538      	push	{r3, r4, r5, lr}
   18586:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   18588:	4908      	ldr	r1, [pc, #32]	; (185ac <bt_conn_create_pdu_timeout+0x28>)
   1858a:	2800      	cmp	r0, #0
   1858c:	bf08      	it	eq
   1858e:	4608      	moveq	r0, r1
   18590:	f012 fa03 	bl	2a99a <net_buf_alloc_fixed>
	if (!buf) {
   18594:	4604      	mov	r4, r0
   18596:	b918      	cbnz	r0, 185a0 <bt_conn_create_pdu_timeout+0x1c>
}
   18598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1859c:	f7ff bd5e 	b.w	1805c <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   185a0:	1d29      	adds	r1, r5, #4
   185a2:	3008      	adds	r0, #8
   185a4:	f012 fa1e 	bl	2a9e4 <net_buf_simple_reserve>
   185a8:	4620      	mov	r0, r4
   185aa:	bd38      	pop	{r3, r4, r5, pc}
   185ac:	20000bd4 	.word	0x20000bd4

000185b0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   185b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185b2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185b4:	f3bf 8f5b 	dmb	ish
   185b8:	6863      	ldr	r3, [r4, #4]
   185ba:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   185be:	05db      	lsls	r3, r3, #23
   185c0:	f100 0004 	add.w	r0, r0, #4
   185c4:	d511      	bpl.n	185ea <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   185c6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   185ca:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   185ce:	429a      	cmp	r2, r3
   185d0:	d80b      	bhi.n	185ea <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   185d2:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   185d6:	429a      	cmp	r2, r3
   185d8:	d307      	bcc.n	185ea <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   185da:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   185de:	429a      	cmp	r2, r3
   185e0:	d103      	bne.n	185ea <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   185e2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   185e6:	f010 fb8f 	bl	28d08 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   185ea:	4b10      	ldr	r3, [pc, #64]	; (1862c <notify_le_param_updated+0x7c>)
   185ec:	681d      	ldr	r5, [r3, #0]
   185ee:	b925      	cbnz	r5, 185fa <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   185f0:	4d0f      	ldr	r5, [pc, #60]	; (18630 <notify_le_param_updated+0x80>)
   185f2:	4f10      	ldr	r7, [pc, #64]	; (18634 <notify_le_param_updated+0x84>)
   185f4:	42bd      	cmp	r5, r7
   185f6:	d30c      	bcc.n	18612 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   185f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   185fa:	68ee      	ldr	r6, [r5, #12]
   185fc:	b13e      	cbz	r6, 1860e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   185fe:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   18602:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   18606:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1860a:	4620      	mov	r0, r4
   1860c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1860e:	69ad      	ldr	r5, [r5, #24]
   18610:	e7ed      	b.n	185ee <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   18612:	68ee      	ldr	r6, [r5, #12]
   18614:	b13e      	cbz	r6, 18626 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   18616:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1861a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1861e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   18622:	4620      	mov	r0, r4
   18624:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18626:	351c      	adds	r5, #28
   18628:	e7e4      	b.n	185f4 <notify_le_param_updated+0x44>
   1862a:	bf00      	nop
   1862c:	20002df0 	.word	0x20002df0
   18630:	0002c718 	.word	0x0002c718
   18634:	0002c734 	.word	0x0002c734

00018638 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   18638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1863c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1863e:	4608      	mov	r0, r1
{
   18640:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18642:	f010 fa24 	bl	28a8e <bt_le_conn_params_valid>
   18646:	4605      	mov	r5, r0
   18648:	b918      	cbnz	r0, 18652 <le_param_req+0x1a>
		return false;
   1864a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1864c:	4628      	mov	r0, r5
   1864e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18652:	4b13      	ldr	r3, [pc, #76]	; (186a0 <le_param_req+0x68>)
   18654:	681e      	ldr	r6, [r3, #0]
   18656:	b946      	cbnz	r6, 1866a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18658:	4e12      	ldr	r6, [pc, #72]	; (186a4 <le_param_req+0x6c>)
   1865a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 186a8 <le_param_req+0x70>
   1865e:	4546      	cmp	r6, r8
   18660:	d2f4      	bcs.n	1864c <le_param_req+0x14>
		if (!cb->le_param_req) {
   18662:	68b3      	ldr	r3, [r6, #8]
   18664:	b983      	cbnz	r3, 18688 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18666:	361c      	adds	r6, #28
   18668:	e7f9      	b.n	1865e <le_param_req+0x26>
		if (!cb->le_param_req) {
   1866a:	68b3      	ldr	r3, [r6, #8]
   1866c:	b90b      	cbnz	r3, 18672 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1866e:	69b6      	ldr	r6, [r6, #24]
   18670:	e7f1      	b.n	18656 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   18672:	4621      	mov	r1, r4
   18674:	4638      	mov	r0, r7
   18676:	4798      	blx	r3
   18678:	2800      	cmp	r0, #0
   1867a:	d0e6      	beq.n	1864a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1867c:	4620      	mov	r0, r4
   1867e:	f010 fa06 	bl	28a8e <bt_le_conn_params_valid>
   18682:	2800      	cmp	r0, #0
   18684:	d1f3      	bne.n	1866e <le_param_req+0x36>
   18686:	e7e0      	b.n	1864a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   18688:	4621      	mov	r1, r4
   1868a:	4638      	mov	r0, r7
   1868c:	4798      	blx	r3
   1868e:	2800      	cmp	r0, #0
   18690:	d0db      	beq.n	1864a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18692:	4620      	mov	r0, r4
   18694:	f010 f9fb 	bl	28a8e <bt_le_conn_params_valid>
   18698:	2800      	cmp	r0, #0
   1869a:	d1e4      	bne.n	18666 <le_param_req+0x2e>
   1869c:	e7d5      	b.n	1864a <le_param_req+0x12>
   1869e:	bf00      	nop
   186a0:	20002df0 	.word	0x20002df0
   186a4:	0002c718 	.word	0x0002c718
   186a8:	0002c734 	.word	0x0002c734

000186ac <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   186ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   186b0:	78c3      	ldrb	r3, [r0, #3]
{
   186b2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   186b4:	b973      	cbnz	r3, 186d4 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   186b6:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   186ba:	4b10      	ldr	r3, [pc, #64]	; (186fc <bt_conn_identity_resolved+0x50>)
   186bc:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   186be:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   186c2:	b955      	cbnz	r5, 186da <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   186c4:	4d0e      	ldr	r5, [pc, #56]	; (18700 <bt_conn_identity_resolved+0x54>)
   186c6:	4f0f      	ldr	r7, [pc, #60]	; (18704 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   186c8:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   186cc:	42bd      	cmp	r5, r7
   186ce:	d30c      	bcc.n	186ea <bt_conn_identity_resolved+0x3e>
		}
	}
}
   186d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   186d4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   186d8:	e7ef      	b.n	186ba <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   186da:	692b      	ldr	r3, [r5, #16]
   186dc:	b11b      	cbz	r3, 186e6 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   186de:	463a      	mov	r2, r7
   186e0:	4631      	mov	r1, r6
   186e2:	4620      	mov	r0, r4
   186e4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   186e6:	69ad      	ldr	r5, [r5, #24]
   186e8:	e7eb      	b.n	186c2 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   186ea:	692b      	ldr	r3, [r5, #16]
   186ec:	b11b      	cbz	r3, 186f6 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   186ee:	4642      	mov	r2, r8
   186f0:	4631      	mov	r1, r6
   186f2:	4620      	mov	r0, r4
   186f4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   186f6:	351c      	adds	r5, #28
   186f8:	e7e8      	b.n	186cc <bt_conn_identity_resolved+0x20>
   186fa:	bf00      	nop
   186fc:	20002df0 	.word	0x20002df0
   18700:	0002c718 	.word	0x0002c718
   18704:	0002c734 	.word	0x0002c734

00018708 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1870a:	7a43      	ldrb	r3, [r0, #9]
   1870c:	7283      	strb	r3, [r0, #10]
{
   1870e:	4604      	mov	r4, r0
   18710:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18712:	f010 fc5b 	bl	28fcc <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18716:	4b13      	ldr	r3, [pc, #76]	; (18764 <bt_conn_security_changed+0x5c>)
   18718:	681e      	ldr	r6, [r3, #0]
   1871a:	b98e      	cbnz	r6, 18740 <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1871c:	4e12      	ldr	r6, [pc, #72]	; (18768 <bt_conn_security_changed+0x60>)
   1871e:	4f13      	ldr	r7, [pc, #76]	; (1876c <bt_conn_security_changed+0x64>)
   18720:	42be      	cmp	r6, r7
   18722:	d315      	bcc.n	18750 <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   18724:	b9e5      	cbnz	r5, 18760 <bt_conn_security_changed+0x58>
   18726:	7a63      	ldrb	r3, [r4, #9]
   18728:	2b01      	cmp	r3, #1
   1872a:	d919      	bls.n	18760 <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   1872c:	78a3      	ldrb	r3, [r4, #2]
   1872e:	2b01      	cmp	r3, #1
   18730:	d116      	bne.n	18760 <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   18732:	7a20      	ldrb	r0, [r4, #8]
   18734:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   18738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   1873c:	f005 b93c 	b.w	1d9b8 <bt_keys_update_usage>
		if (cb->security_changed) {
   18740:	6973      	ldr	r3, [r6, #20]
   18742:	b11b      	cbz	r3, 1874c <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   18744:	7a61      	ldrb	r1, [r4, #9]
   18746:	462a      	mov	r2, r5
   18748:	4620      	mov	r0, r4
   1874a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1874c:	69b6      	ldr	r6, [r6, #24]
   1874e:	e7e4      	b.n	1871a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   18750:	6973      	ldr	r3, [r6, #20]
   18752:	b11b      	cbz	r3, 1875c <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   18754:	7a61      	ldrb	r1, [r4, #9]
   18756:	462a      	mov	r2, r5
   18758:	4620      	mov	r0, r4
   1875a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1875c:	361c      	adds	r6, #28
   1875e:	e7df      	b.n	18720 <bt_conn_security_changed+0x18>
}
   18760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18762:	bf00      	nop
   18764:	20002df0 	.word	0x20002df0
   18768:	0002c718 	.word	0x0002c718
   1876c:	0002c734 	.word	0x0002c734

00018770 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18770:	b538      	push	{r3, r4, r5, lr}
   18772:	4605      	mov	r5, r0
   18774:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18776:	480b      	ldr	r0, [pc, #44]	; (187a4 <bt_conn_add_le+0x34>)
   18778:	2101      	movs	r1, #1
   1877a:	f7ff fcc9 	bl	18110 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1877e:	b180      	cbz	r0, 187a2 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   18780:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18782:	6823      	ldr	r3, [r4, #0]
   18784:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   18788:	88a3      	ldrh	r3, [r4, #4]
   1878a:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   1878e:	79a3      	ldrb	r3, [r4, #6]
   18790:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   18794:	2301      	movs	r3, #1
   18796:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18798:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1879a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1879c:	4b02      	ldr	r3, [pc, #8]	; (187a8 <bt_conn_add_le+0x38>)
   1879e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   187a2:	bd38      	pop	{r3, r4, r5, pc}
   187a4:	20001fc0 	.word	0x20001fc0
   187a8:	00280018 	.word	0x00280018

000187ac <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   187ac:	b570      	push	{r4, r5, r6, lr}
   187ae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   187b0:	480c      	ldr	r0, [pc, #48]	; (187e4 <bt_conn_lookup_addr_le+0x38>)
{
   187b2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   187b4:	f010 fac6 	bl	28d44 <bt_conn_ref>

		if (!conn) {
   187b8:	4604      	mov	r4, r0
   187ba:	b128      	cbz	r0, 187c8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   187bc:	7883      	ldrb	r3, [r0, #2]
   187be:	2b01      	cmp	r3, #1
   187c0:	d004      	beq.n	187cc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   187c2:	f010 fada 	bl	28d7a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   187c6:	2400      	movs	r4, #0
}
   187c8:	4620      	mov	r0, r4
   187ca:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   187cc:	4629      	mov	r1, r5
   187ce:	4632      	mov	r2, r6
   187d0:	f010 fb6e 	bl	28eb0 <bt_conn_is_peer_addr_le>
   187d4:	4605      	mov	r5, r0
   187d6:	2800      	cmp	r0, #0
   187d8:	d1f6      	bne.n	187c8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   187da:	4620      	mov	r0, r4
   187dc:	f010 facd 	bl	28d7a <bt_conn_unref>
	return NULL;
   187e0:	462c      	mov	r4, r5
			continue;
   187e2:	e7f1      	b.n	187c8 <bt_conn_lookup_addr_le+0x1c>
   187e4:	20001fc0 	.word	0x20001fc0

000187e8 <bt_conn_exists_le>:
{
   187e8:	b5b0      	push	{r4, r5, r7, lr}
   187ea:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   187ec:	f7ff ffde 	bl	187ac <bt_conn_lookup_addr_le>
	if (conn) {
   187f0:	4604      	mov	r4, r0
   187f2:	b1d8      	cbz	r0, 1882c <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
   187f4:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   187f6:	2b08      	cmp	r3, #8
   187f8:	bf96      	itet	ls
   187fa:	4a0d      	ldrls	r2, [pc, #52]	; (18830 <bt_conn_exists_le+0x48>)
		BT_WARN("Found valid connection in %s state",
   187fc:	4b0d      	ldrhi	r3, [pc, #52]	; (18834 <bt_conn_exists_le+0x4c>)
   187fe:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18802:	466d      	mov	r5, sp
   18804:	b088      	sub	sp, #32
   18806:	466a      	mov	r2, sp
   18808:	490b      	ldr	r1, [pc, #44]	; (18838 <bt_conn_exists_le+0x50>)
   1880a:	480c      	ldr	r0, [pc, #48]	; (1883c <bt_conn_exists_le+0x54>)
   1880c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18810:	2302      	movs	r3, #2
   18812:	7713      	strb	r3, [r2, #28]
   18814:	4b0a      	ldr	r3, [pc, #40]	; (18840 <bt_conn_exists_le+0x58>)
   18816:	f842 3f10 	str.w	r3, [r2, #16]!
   1881a:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1881e:	f010 fa82 	bl	28d26 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   18822:	4620      	mov	r0, r4
   18824:	46ad      	mov	sp, r5
   18826:	f010 faa8 	bl	28d7a <bt_conn_unref>
		return true;
   1882a:	2001      	movs	r0, #1
}
   1882c:	46bd      	mov	sp, r7
   1882e:	bdb0      	pop	{r4, r5, r7, pc}
   18830:	0002cffc 	.word	0x0002cffc
   18834:	0002ed6f 	.word	0x0002ed6f
   18838:	0002edbd 	.word	0x0002edbd
   1883c:	0002c78c 	.word	0x0002c78c
   18840:	01000003 	.word	0x01000003

00018844 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18846:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18848:	480e      	ldr	r0, [pc, #56]	; (18884 <bt_conn_lookup_state_le+0x40>)
{
   1884a:	460e      	mov	r6, r1
   1884c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1884e:	f010 fa79 	bl	28d44 <bt_conn_ref>

		if (!conn) {
   18852:	4604      	mov	r4, r0
   18854:	b1a0      	cbz	r0, 18880 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18856:	7883      	ldrb	r3, [r0, #2]
   18858:	2b01      	cmp	r3, #1
   1885a:	d003      	beq.n	18864 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1885c:	f010 fa8d 	bl	28d7a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18860:	2400      	movs	r4, #0
			continue;
   18862:	e00d      	b.n	18880 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18864:	b136      	cbz	r6, 18874 <bt_conn_lookup_state_le+0x30>
   18866:	4632      	mov	r2, r6
   18868:	4629      	mov	r1, r5
   1886a:	f010 fb21 	bl	28eb0 <bt_conn_is_peer_addr_le>
   1886e:	b908      	cbnz	r0, 18874 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18870:	4620      	mov	r0, r4
   18872:	e7f3      	b.n	1885c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18874:	7b63      	ldrb	r3, [r4, #13]
   18876:	42bb      	cmp	r3, r7
   18878:	d1fa      	bne.n	18870 <bt_conn_lookup_state_le+0x2c>
   1887a:	7a23      	ldrb	r3, [r4, #8]
   1887c:	42ab      	cmp	r3, r5
   1887e:	d1f7      	bne.n	18870 <bt_conn_lookup_state_le+0x2c>
}
   18880:	4620      	mov	r0, r4
   18882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18884:	20001fc0 	.word	0x20001fc0

00018888 <send_conn_le_param_update>:
{
   18888:	b538      	push	{r3, r4, r5, lr}
   1888a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1888c:	4608      	mov	r0, r1
{
   1888e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18890:	f010 f8fd 	bl	28a8e <bt_le_conn_params_valid>
   18894:	b348      	cbz	r0, 188ea <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18896:	4b16      	ldr	r3, [pc, #88]	; (188f0 <send_conn_le_param_update+0x68>)
   18898:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1889c:	0799      	lsls	r1, r3, #30
   1889e:	d407      	bmi.n	188b0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   188a0:	78e3      	ldrb	r3, [r4, #3]
   188a2:	b183      	cbz	r3, 188c6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   188a4:	4629      	mov	r1, r5
   188a6:	4620      	mov	r0, r4
}
   188a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   188ac:	f000 b9e4 	b.w	18c78 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   188b0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   188b4:	079a      	lsls	r2, r3, #30
   188b6:	d5f3      	bpl.n	188a0 <send_conn_le_param_update+0x18>
   188b8:	f3bf 8f5b 	dmb	ish
   188bc:	6863      	ldr	r3, [r4, #4]
   188be:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   188c2:	059b      	lsls	r3, r3, #22
   188c4:	d4ec      	bmi.n	188a0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   188c6:	4629      	mov	r1, r5
   188c8:	4620      	mov	r0, r4
   188ca:	f010 fb11 	bl	28ef0 <bt_conn_le_conn_update>
		if (rc == 0) {
   188ce:	b958      	cbnz	r0, 188e8 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   188d0:	882b      	ldrh	r3, [r5, #0]
   188d2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   188d6:	886b      	ldrh	r3, [r5, #2]
   188d8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   188dc:	88ab      	ldrh	r3, [r5, #4]
   188de:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   188e2:	88eb      	ldrh	r3, [r5, #6]
   188e4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   188e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   188ea:	f06f 0015 	mvn.w	r0, #21
   188ee:	e7fb      	b.n	188e8 <send_conn_le_param_update+0x60>
   188f0:	20000350 	.word	0x20000350

000188f4 <deferred_work>:
{
   188f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   188f6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   188fa:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   188fc:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   18900:	b9fb      	cbnz	r3, 18942 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   18902:	4628      	mov	r0, r5
   18904:	f010 fb51 	bl	28faa <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18908:	4b28      	ldr	r3, [pc, #160]	; (189ac <deferred_work+0xb8>)
   1890a:	681e      	ldr	r6, [r3, #0]
   1890c:	b94e      	cbnz	r6, 18922 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1890e:	4e28      	ldr	r6, [pc, #160]	; (189b0 <deferred_work+0xbc>)
   18910:	4f28      	ldr	r7, [pc, #160]	; (189b4 <deferred_work+0xc0>)
   18912:	42be      	cmp	r6, r7
   18914:	d30d      	bcc.n	18932 <deferred_work+0x3e>
		bt_conn_unref(conn);
   18916:	4628      	mov	r0, r5
}
   18918:	b003      	add	sp, #12
   1891a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1891e:	f010 ba2c 	b.w	28d7a <bt_conn_unref>
		if (cb->disconnected) {
   18922:	6873      	ldr	r3, [r6, #4]
   18924:	b11b      	cbz	r3, 1892e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   18926:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1892a:	4628      	mov	r0, r5
   1892c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1892e:	69b6      	ldr	r6, [r6, #24]
   18930:	e7ec      	b.n	1890c <deferred_work+0x18>
		if (cb->disconnected) {
   18932:	6873      	ldr	r3, [r6, #4]
   18934:	b11b      	cbz	r3, 1893e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   18936:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1893a:	4628      	mov	r0, r5
   1893c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1893e:	361c      	adds	r6, #28
   18940:	e7e7      	b.n	18912 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   18942:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   18946:	2b01      	cmp	r3, #1
   18948:	d128      	bne.n	1899c <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   1894a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1894e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18952:	4630      	mov	r0, r6
   18954:	f010 f9d8 	bl	28d08 <atomic_and>
   18958:	05c3      	lsls	r3, r0, #23
   1895a:	d521      	bpl.n	189a0 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1895c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   18960:	f8ad 3000 	strh.w	r3, [sp]
   18964:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   18968:	f8ad 3002 	strh.w	r3, [sp, #2]
   1896c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   18970:	f8ad 3004 	strh.w	r3, [sp, #4]
   18974:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   18978:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1897c:	4669      	mov	r1, sp
   1897e:	4628      	mov	r0, r5
   18980:	f7ff ff82 	bl	18888 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18984:	f3bf 8f5b 	dmb	ish
   18988:	e856 3f00 	ldrex	r3, [r6]
   1898c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18990:	e846 3200 	strex	r2, r3, [r6]
   18994:	2a00      	cmp	r2, #0
   18996:	d1f7      	bne.n	18988 <deferred_work+0x94>
   18998:	f3bf 8f5b 	dmb	ish
}
   1899c:	b003      	add	sp, #12
   1899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   189a0:	4a05      	ldr	r2, [pc, #20]	; (189b8 <deferred_work+0xc4>)
   189a2:	6810      	ldr	r0, [r2, #0]
   189a4:	6851      	ldr	r1, [r2, #4]
   189a6:	466b      	mov	r3, sp
   189a8:	c303      	stmia	r3!, {r0, r1}
   189aa:	e7e7      	b.n	1897c <deferred_work+0x88>
   189ac:	20002df0 	.word	0x20002df0
   189b0:	0002c718 	.word	0x0002c718
   189b4:	0002c734 	.word	0x0002c734
   189b8:	0002cb74 	.word	0x0002cb74

000189bc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   189bc:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   189be:	490b      	ldr	r1, [pc, #44]	; (189ec <bt_conn_init+0x30>)
   189c0:	480b      	ldr	r0, [pc, #44]	; (189f0 <bt_conn_init+0x34>)
   189c2:	f012 fe95 	bl	2b6f0 <k_queue_append>
   189c6:	490b      	ldr	r1, [pc, #44]	; (189f4 <bt_conn_init+0x38>)
   189c8:	4809      	ldr	r0, [pc, #36]	; (189f0 <bt_conn_init+0x34>)
   189ca:	f012 fe91 	bl	2b6f0 <k_queue_append>
   189ce:	490a      	ldr	r1, [pc, #40]	; (189f8 <bt_conn_init+0x3c>)
   189d0:	4807      	ldr	r0, [pc, #28]	; (189f0 <bt_conn_init+0x34>)
   189d2:	f012 fe8d 	bl	2b6f0 <k_queue_append>
	}

	bt_att_init();
   189d6:	f001 fa1f 	bl	19e18 <bt_att_init>

	err = bt_smp_init();
   189da:	f004 fda9 	bl	1d530 <bt_smp_init>
	if (err) {
   189de:	4604      	mov	r4, r0
   189e0:	b908      	cbnz	r0, 189e6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   189e2:	f010 fb38 	bl	29056 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   189e6:	4620      	mov	r0, r4
   189e8:	bd10      	pop	{r4, pc}
   189ea:	bf00      	nop
   189ec:	20002df4 	.word	0x20002df4
   189f0:	20000bbc 	.word	0x20000bbc
   189f4:	20002e04 	.word	0x20002e04
   189f8:	20002e14 	.word	0x20002e14

000189fc <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   189fc:	b580      	push	{r7, lr}
   189fe:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18a00:	b088      	sub	sp, #32
   18a02:	466a      	mov	r2, sp
   18a04:	4b06      	ldr	r3, [pc, #24]	; (18a20 <l2cap_create_le_sig_pdu.part.0+0x24>)
   18a06:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18a0a:	2303      	movs	r3, #3
   18a0c:	f842 3f10 	str.w	r3, [r2, #16]!
   18a10:	4804      	ldr	r0, [pc, #16]	; (18a24 <l2cap_create_le_sig_pdu.part.0+0x28>)
   18a12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a16:	f010 fa94 	bl	28f42 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   18a1a:	2000      	movs	r0, #0
   18a1c:	46bd      	mov	sp, r7
   18a1e:	bd80      	pop	{r7, pc}
   18a20:	0002ee59 	.word	0x0002ee59
   18a24:	0002c7cc 	.word	0x0002c7cc

00018a28 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18a28:	b580      	push	{r7, lr}
   18a2a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   18a2c:	b088      	sub	sp, #32
   18a2e:	466a      	mov	r2, sp
   18a30:	4b07      	ldr	r3, [pc, #28]	; (18a50 <l2cap_accept.part.0+0x28>)
   18a32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18a36:	2303      	movs	r3, #3
   18a38:	f842 3f10 	str.w	r3, [r2, #16]!
   18a3c:	4805      	ldr	r0, [pc, #20]	; (18a54 <l2cap_accept.part.0+0x2c>)
   18a3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a42:	f010 fa7e 	bl	28f42 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18a46:	f06f 000b 	mvn.w	r0, #11
   18a4a:	46bd      	mov	sp, r7
   18a4c:	bd80      	pop	{r7, pc}
   18a4e:	bf00      	nop
   18a50:	0002ee81 	.word	0x0002ee81
   18a54:	0002c7cc 	.word	0x0002c7cc

00018a58 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   18a58:	4b04      	ldr	r3, [pc, #16]	; (18a6c <l2cap_accept+0x14>)
   18a5a:	681a      	ldr	r2, [r3, #0]
   18a5c:	b10a      	cbz	r2, 18a62 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   18a5e:	f7ff bfe3 	b.w	18a28 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   18a62:	4803      	ldr	r0, [pc, #12]	; (18a70 <l2cap_accept+0x18>)
   18a64:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   18a66:	600b      	str	r3, [r1, #0]
}
   18a68:	4610      	mov	r0, r2
   18a6a:	4770      	bx	lr
   18a6c:	20002e24 	.word	0x20002e24
   18a70:	0002d040 	.word	0x0002d040

00018a74 <bt_l2cap_connected>:
{
   18a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18a76:	4d24      	ldr	r5, [pc, #144]	; (18b08 <bt_l2cap_connected+0x94>)
   18a78:	4f24      	ldr	r7, [pc, #144]	; (18b0c <bt_l2cap_connected+0x98>)
{
   18a7a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18a7c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18a7e:	42bd      	cmp	r5, r7
   18a80:	d301      	bcc.n	18a86 <bt_l2cap_connected+0x12>
}
   18a82:	b003      	add	sp, #12
   18a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   18a86:	686b      	ldr	r3, [r5, #4]
   18a88:	a901      	add	r1, sp, #4
   18a8a:	4620      	mov	r0, r4
   18a8c:	4798      	blx	r3
   18a8e:	2800      	cmp	r0, #0
   18a90:	db34      	blt.n	18afc <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   18a92:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   18a94:	882a      	ldrh	r2, [r5, #0]
   18a96:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   18a98:	849a      	strh	r2, [r3, #36]	; 0x24
   18a9a:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18a9e:	68a8      	ldr	r0, [r5, #8]
   18aa0:	f3bf 8f5b 	dmb	ish
   18aa4:	e852 1f00 	ldrex	r1, [r2]
   18aa8:	e842 6c00 	strex	ip, r6, [r2]
   18aac:	f1bc 0f00 	cmp.w	ip, #0
   18ab0:	d1f8      	bne.n	18aa4 <bt_l2cap_connected+0x30>
   18ab2:	f3bf 8f5b 	dmb	ish
	return list->tail;
   18ab6:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   18ab8:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   18aba:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   18abe:	b9f9      	cbnz	r1, 18b00 <bt_l2cap_connected+0x8c>
	list->head = node;
   18ac0:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   18ac4:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   18ac6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18ac8:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   18aca:	6843      	ldr	r3, [r0, #4]
   18acc:	681b      	ldr	r3, [r3, #0]
   18ace:	b103      	cbz	r3, 18ad2 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   18ad0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18ad2:	9b01      	ldr	r3, [sp, #4]
   18ad4:	f3bf 8f5b 	dmb	ish
   18ad8:	3310      	adds	r3, #16
   18ada:	e853 2f00 	ldrex	r2, [r3]
   18ade:	f042 0201 	orr.w	r2, r2, #1
   18ae2:	e843 2100 	strex	r1, r2, [r3]
   18ae6:	2900      	cmp	r1, #0
   18ae8:	d1f7      	bne.n	18ada <bt_l2cap_connected+0x66>
   18aea:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18aee:	9801      	ldr	r0, [sp, #4]
   18af0:	6843      	ldr	r3, [r0, #4]
   18af2:	699b      	ldr	r3, [r3, #24]
   18af4:	b113      	cbz	r3, 18afc <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   18af6:	f100 0110 	add.w	r1, r0, #16
   18afa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18afc:	350c      	adds	r5, #12
   18afe:	e7be      	b.n	18a7e <bt_l2cap_connected+0xa>
	parent->next = child;
   18b00:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18b02:	6562      	str	r2, [r4, #84]	; 0x54
}
   18b04:	e7de      	b.n	18ac4 <bt_l2cap_connected+0x50>
   18b06:	bf00      	nop
   18b08:	0002c6f4 	.word	0x0002c6f4
   18b0c:	0002c718 	.word	0x0002c718

00018b10 <l2cap_recv>:
{
   18b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b12:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   18b14:	898b      	ldrh	r3, [r1, #12]
   18b16:	2b03      	cmp	r3, #3
{
   18b18:	af02      	add	r7, sp, #8
   18b1a:	4606      	mov	r6, r0
   18b1c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18b1e:	d80b      	bhi.n	18b38 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   18b20:	4b30      	ldr	r3, [pc, #192]	; (18be4 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   18b22:	617b      	str	r3, [r7, #20]
   18b24:	4830      	ldr	r0, [pc, #192]	; (18be8 <l2cap_recv+0xd8>)
   18b26:	2302      	movs	r3, #2
   18b28:	f107 0210 	add.w	r2, r7, #16
   18b2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b30:	613b      	str	r3, [r7, #16]
   18b32:	f010 fa06 	bl	28f42 <z_log_msg_static_create.constprop.0>
		return 0;
   18b36:	e019      	b.n	18b6c <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18b38:	2104      	movs	r1, #4
   18b3a:	f105 0008 	add.w	r0, r5, #8
   18b3e:	f011 fff8 	bl	2ab32 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18b42:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18b44:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   18b46:	4299      	cmp	r1, r3
   18b48:	4604      	mov	r4, r0
   18b4a:	d013      	beq.n	18b74 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18b4c:	466c      	mov	r4, sp
   18b4e:	b088      	sub	sp, #32
   18b50:	aa02      	add	r2, sp, #8
   18b52:	4826      	ldr	r0, [pc, #152]	; (18bec <l2cap_recv+0xdc>)
   18b54:	61d1      	str	r1, [r2, #28]
   18b56:	e9c2 0305 	strd	r0, r3, [r2, #20]
   18b5a:	2304      	movs	r3, #4
   18b5c:	f842 3f10 	str.w	r3, [r2, #16]!
   18b60:	4821      	ldr	r0, [pc, #132]	; (18be8 <l2cap_recv+0xd8>)
   18b62:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18b66:	f010 f9ec 	bl	28f42 <z_log_msg_static_create.constprop.0>
   18b6a:	46a5      	mov	sp, r4
}
   18b6c:	2000      	movs	r0, #0
   18b6e:	371c      	adds	r7, #28
   18b70:	46bd      	mov	sp, r7
   18b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   18b74:	7843      	ldrb	r3, [r0, #1]
   18b76:	b90b      	cbnz	r3, 18b7c <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   18b78:	4b1d      	ldr	r3, [pc, #116]	; (18bf0 <l2cap_recv+0xe0>)
   18b7a:	e7d2      	b.n	18b22 <l2cap_recv+0x12>
	switch (hdr->code) {
   18b7c:	7803      	ldrb	r3, [r0, #0]
   18b7e:	2b01      	cmp	r3, #1
   18b80:	d0f4      	beq.n	18b6c <l2cap_recv+0x5c>
   18b82:	2b13      	cmp	r3, #19
   18b84:	d103      	bne.n	18b8e <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   18b86:	2901      	cmp	r1, #1
   18b88:	d8f0      	bhi.n	18b6c <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   18b8a:	4b1a      	ldr	r3, [pc, #104]	; (18bf4 <l2cap_recv+0xe4>)
   18b8c:	e7c9      	b.n	18b22 <l2cap_recv+0x12>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18b8e:	466d      	mov	r5, sp
   18b90:	b088      	sub	sp, #32
   18b92:	aa02      	add	r2, sp, #8
   18b94:	4918      	ldr	r1, [pc, #96]	; (18bf8 <l2cap_recv+0xe8>)
   18b96:	4814      	ldr	r0, [pc, #80]	; (18be8 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   18b98:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18b9c:	2303      	movs	r3, #3
   18b9e:	f842 3f10 	str.w	r3, [r2, #16]!
   18ba2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18ba6:	f010 f9cc 	bl	28f42 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18baa:	2202      	movs	r2, #2
   18bac:	7861      	ldrb	r1, [r4, #1]
   18bae:	46ad      	mov	sp, r5
   18bb0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   18bb2:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18bb4:	f010 f9c8 	bl	28f48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18bb8:	4604      	mov	r4, r0
   18bba:	2800      	cmp	r0, #0
   18bbc:	d0d6      	beq.n	18b6c <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   18bbe:	2102      	movs	r1, #2
   18bc0:	3008      	adds	r0, #8
   18bc2:	f011 ff8f 	bl	2aae4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18bc6:	2300      	movs	r3, #0
   18bc8:	7003      	strb	r3, [r0, #0]
   18bca:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18bcc:	4622      	mov	r2, r4
   18bce:	9300      	str	r3, [sp, #0]
   18bd0:	2105      	movs	r1, #5
   18bd2:	4628      	mov	r0, r5
   18bd4:	f010 fa12 	bl	28ffc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18bd8:	2800      	cmp	r0, #0
   18bda:	d0c7      	beq.n	18b6c <l2cap_recv+0x5c>
		net_buf_unref(buf);
   18bdc:	4620      	mov	r0, r4
   18bde:	f004 ffc3 	bl	1db68 <net_buf_unref>
   18be2:	e7c3      	b.n	18b6c <l2cap_recv+0x5c>
   18be4:	0002eea8 	.word	0x0002eea8
   18be8:	0002c7cc 	.word	0x0002c7cc
   18bec:	0002eec6 	.word	0x0002eec6
   18bf0:	0002eee7 	.word	0x0002eee7
   18bf4:	0002ef08 	.word	0x0002ef08
   18bf8:	0002ef24 	.word	0x0002ef24

00018bfc <bt_l2cap_recv>:
{
   18bfc:	b5b0      	push	{r4, r5, r7, lr}
   18bfe:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18c00:	898b      	ldrh	r3, [r1, #12]
   18c02:	2b03      	cmp	r3, #3
{
   18c04:	af00      	add	r7, sp, #0
   18c06:	4605      	mov	r5, r0
   18c08:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18c0a:	d810      	bhi.n	18c2e <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   18c0c:	4b17      	ldr	r3, [pc, #92]	; (18c6c <bt_l2cap_recv+0x70>)
   18c0e:	617b      	str	r3, [r7, #20]
   18c10:	4817      	ldr	r0, [pc, #92]	; (18c70 <bt_l2cap_recv+0x74>)
   18c12:	2302      	movs	r3, #2
   18c14:	f107 0210 	add.w	r2, r7, #16
   18c18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18c1c:	613b      	str	r3, [r7, #16]
   18c1e:	f010 f990 	bl	28f42 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   18c22:	4620      	mov	r0, r4
   18c24:	f004 ffa0 	bl	1db68 <net_buf_unref>
}
   18c28:	3718      	adds	r7, #24
   18c2a:	46bd      	mov	sp, r7
   18c2c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18c2e:	2104      	movs	r1, #4
   18c30:	f104 0008 	add.w	r0, r4, #8
   18c34:	f011 ff7d 	bl	2ab32 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18c38:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18c3a:	4628      	mov	r0, r5
   18c3c:	f010 fa01 	bl	29042 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18c40:	b978      	cbnz	r0, 18c62 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18c42:	466d      	mov	r5, sp
   18c44:	b088      	sub	sp, #32
   18c46:	466a      	mov	r2, sp
   18c48:	4b0a      	ldr	r3, [pc, #40]	; (18c74 <bt_l2cap_recv+0x78>)
   18c4a:	4809      	ldr	r0, [pc, #36]	; (18c70 <bt_l2cap_recv+0x74>)
   18c4c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18c50:	2303      	movs	r3, #3
   18c52:	f842 3f10 	str.w	r3, [r2, #16]!
   18c56:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18c5a:	f010 f972 	bl	28f42 <z_log_msg_static_create.constprop.0>
   18c5e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18c60:	e7df      	b.n	18c22 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   18c62:	6843      	ldr	r3, [r0, #4]
   18c64:	4621      	mov	r1, r4
   18c66:	691b      	ldr	r3, [r3, #16]
   18c68:	4798      	blx	r3
   18c6a:	e7da      	b.n	18c22 <bt_l2cap_recv+0x26>
   18c6c:	0002ef42 	.word	0x0002ef42
   18c70:	0002c7cc 	.word	0x0002c7cc
   18c74:	0002ef5f 	.word	0x0002ef5f

00018c78 <bt_l2cap_update_conn_param>:
{
   18c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18c7a:	460d      	mov	r5, r1
	ident++;
   18c7c:	4916      	ldr	r1, [pc, #88]	; (18cd8 <bt_l2cap_update_conn_param+0x60>)
   18c7e:	780b      	ldrb	r3, [r1, #0]
   18c80:	3301      	adds	r3, #1
	if (!ident) {
   18c82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   18c86:	bf08      	it	eq
   18c88:	2301      	moveq	r3, #1
   18c8a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18c8c:	7809      	ldrb	r1, [r1, #0]
{
   18c8e:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18c90:	2208      	movs	r2, #8
   18c92:	2012      	movs	r0, #18
   18c94:	f010 f958 	bl	28f48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18c98:	4604      	mov	r4, r0
   18c9a:	b1d0      	cbz	r0, 18cd2 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18c9c:	2108      	movs	r1, #8
   18c9e:	4408      	add	r0, r1
   18ca0:	f011 ff20 	bl	2aae4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18ca4:	882b      	ldrh	r3, [r5, #0]
   18ca6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18ca8:	886b      	ldrh	r3, [r5, #2]
   18caa:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18cac:	88ab      	ldrh	r3, [r5, #4]
   18cae:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18cb0:	88eb      	ldrh	r3, [r5, #6]
   18cb2:	80c3      	strh	r3, [r0, #6]
   18cb4:	2300      	movs	r3, #0
   18cb6:	9300      	str	r3, [sp, #0]
   18cb8:	4622      	mov	r2, r4
   18cba:	2105      	movs	r1, #5
   18cbc:	4630      	mov	r0, r6
   18cbe:	f010 f99d 	bl	28ffc <bt_l2cap_send_cb>
	if (err) {
   18cc2:	4605      	mov	r5, r0
   18cc4:	b110      	cbz	r0, 18ccc <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18cc6:	4620      	mov	r0, r4
   18cc8:	f004 ff4e 	bl	1db68 <net_buf_unref>
}
   18ccc:	4628      	mov	r0, r5
   18cce:	b002      	add	sp, #8
   18cd0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18cd2:	f06f 050b 	mvn.w	r5, #11
   18cd6:	e7f9      	b.n	18ccc <bt_l2cap_update_conn_param+0x54>
   18cd8:	20003eaa 	.word	0x20003eaa

00018cdc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18cdc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18cde:	3804      	subs	r0, #4
   18ce0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18ce2:	a901      	add	r1, sp, #4
   18ce4:	4802      	ldr	r0, [pc, #8]	; (18cf0 <bt_att_released+0x14>)
   18ce6:	f012 fc3b 	bl	2b560 <k_mem_slab_free>
}
   18cea:	b003      	add	sp, #12
   18cec:	f85d fb04 	ldr.w	pc, [sp], #4
   18cf0:	20000a74 	.word	0x20000a74

00018cf4 <tx_meta_data_free>:
{
   18cf4:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   18cf6:	2100      	movs	r1, #0
   18cf8:	4604      	mov	r4, r0
   18cfa:	2214      	movs	r2, #20
   18cfc:	f013 f988 	bl	2c010 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18d00:	4621      	mov	r1, r4
   18d02:	4802      	ldr	r0, [pc, #8]	; (18d0c <tx_meta_data_free+0x18>)
}
   18d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   18d08:	f012 bcf2 	b.w	2b6f0 <k_queue_append>
   18d0c:	20000ba4 	.word	0x20000ba4

00018d10 <find_type_cb>:
{
   18d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d14:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   18d16:	f8d2 a000 	ldr.w	sl, [r2]
{
   18d1a:	af02      	add	r7, sp, #8
   18d1c:	4606      	mov	r6, r0
   18d1e:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d20:	2500      	movs	r5, #0
   18d22:	f642 0301 	movw	r3, #10241	; 0x2801
   18d26:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18d28:	f8da 9004 	ldr.w	r9, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d2c:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18d30:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   18d34:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d36:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18d38:	f00f fd80 	bl	2883c <bt_uuid_cmp>
   18d3c:	2800      	cmp	r0, #0
   18d3e:	d071      	beq.n	18e24 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18d40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18d44:	6830      	ldr	r0, [r6, #0]
   18d46:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18d4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18d4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18d50:	f00f fd74 	bl	2883c <bt_uuid_cmp>
   18d54:	b140      	cbz	r0, 18d68 <find_type_cb+0x58>
		if (data->group &&
   18d56:	68a3      	ldr	r3, [r4, #8]
   18d58:	b123      	cbz	r3, 18d64 <find_type_cb+0x54>
   18d5a:	885a      	ldrh	r2, [r3, #2]
   18d5c:	4542      	cmp	r2, r8
   18d5e:	d201      	bcs.n	18d64 <find_type_cb+0x54>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18d60:	f8a3 8002 	strh.w	r8, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18d64:	2001      	movs	r0, #1
   18d66:	e009      	b.n	18d7c <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18d68:	6861      	ldr	r1, [r4, #4]
   18d6a:	4608      	mov	r0, r1
   18d6c:	f010 f97e 	bl	2906c <net_buf_frags_len>
   18d70:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   18d74:	1a1b      	subs	r3, r3, r0
   18d76:	2b03      	cmp	r3, #3
   18d78:	d804      	bhi.n	18d84 <find_type_cb+0x74>
		return BT_GATT_ITER_STOP;
   18d7a:	2000      	movs	r0, #0
}
   18d7c:	3744      	adds	r7, #68	; 0x44
   18d7e:	46bd      	mov	sp, r7
   18d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18d84:	4608      	mov	r0, r1
   18d86:	f011 fe8b 	bl	2aaa0 <net_buf_frag_last>
   18d8a:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18d8c:	6860      	ldr	r0, [r4, #4]
   18d8e:	f010 f96d 	bl	2906c <net_buf_frags_len>
   18d92:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18d96:	f105 0308 	add.w	r3, r5, #8
   18d9a:	ebab 0b00 	sub.w	fp, fp, r0
   18d9e:	4618      	mov	r0, r3
   18da0:	607b      	str	r3, [r7, #4]
   18da2:	f011 fee2 	bl	2ab6a <net_buf_simple_tailroom>
   18da6:	4558      	cmp	r0, fp
   18da8:	687b      	ldr	r3, [r7, #4]
   18daa:	d93e      	bls.n	18e2a <find_type_cb+0x11a>
   18dac:	6860      	ldr	r0, [r4, #4]
   18dae:	f010 f95d 	bl	2906c <net_buf_frags_len>
   18db2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   18db6:	1a18      	subs	r0, r3, r0
	if (!len) {
   18db8:	b970      	cbnz	r0, 18dd8 <find_type_cb+0xc8>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18dba:	6863      	ldr	r3, [r4, #4]
   18dbc:	7998      	ldrb	r0, [r3, #6]
   18dbe:	f004 fe0f 	bl	1d9e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18dc2:	2200      	movs	r2, #0
   18dc4:	2300      	movs	r3, #0
   18dc6:	f011 fde8 	bl	2a99a <net_buf_alloc_fixed>
		if (!frag) {
   18dca:	4605      	mov	r5, r0
   18dcc:	2800      	cmp	r0, #0
   18dce:	d0d4      	beq.n	18d7a <find_type_cb+0x6a>
		net_buf_frag_add(data->buf, frag);
   18dd0:	4601      	mov	r1, r0
   18dd2:	6860      	ldr	r0, [r4, #4]
   18dd4:	f011 fe75 	bl	2aac2 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18dd8:	2300      	movs	r3, #0
   18dda:	9300      	str	r3, [sp, #0]
   18ddc:	f8d6 a004 	ldr.w	sl, [r6, #4]
   18de0:	4631      	mov	r1, r6
   18de2:	2310      	movs	r3, #16
   18de4:	f107 0208 	add.w	r2, r7, #8
   18de8:	4648      	mov	r0, r9
   18dea:	47d0      	blx	sl
	if (read < 0) {
   18dec:	1e06      	subs	r6, r0, #0
   18dee:	db19      	blt.n	18e24 <find_type_cb+0x114>
	if (read != data->value_len) {
   18df0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18df2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18df4:	4296      	cmp	r6, r2
   18df6:	d040      	beq.n	18e7a <find_type_cb+0x16a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18df8:	4601      	mov	r1, r0
   18dfa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18dfe:	f00f fd4b 	bl	28898 <bt_uuid_create>
   18e02:	b9b0      	cbnz	r0, 18e32 <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18e04:	466d      	mov	r5, sp
   18e06:	b088      	sub	sp, #32
   18e08:	7c23      	ldrb	r3, [r4, #16]
   18e0a:	aa02      	add	r2, sp, #8
   18e0c:	491e      	ldr	r1, [pc, #120]	; (18e88 <find_type_cb+0x178>)
   18e0e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   18e12:	2303      	movs	r3, #3
   18e14:	f842 3f10 	str.w	r3, [r2, #16]!
   18e18:	481c      	ldr	r0, [pc, #112]	; (18e8c <find_type_cb+0x17c>)
   18e1a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18e1e:	f010 fa58 	bl	292d2 <z_log_msg_static_create.constprop.0>
   18e22:	46ad      	mov	sp, r5
	data->group = NULL;
   18e24:	2300      	movs	r3, #0
   18e26:	60a3      	str	r3, [r4, #8]
   18e28:	e79c      	b.n	18d64 <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   18e2a:	4618      	mov	r0, r3
   18e2c:	f011 fe9d 	bl	2ab6a <net_buf_simple_tailroom>
   18e30:	e7c2      	b.n	18db8 <find_type_cb+0xa8>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18e32:	b2f2      	uxtb	r2, r6
   18e34:	f107 0108 	add.w	r1, r7, #8
   18e38:	f107 0018 	add.w	r0, r7, #24
   18e3c:	f00f fd2c 	bl	28898 <bt_uuid_create>
   18e40:	b930      	cbnz	r0, 18e50 <find_type_cb+0x140>
			BT_WARN("Unable to create UUID: size %d", read);
   18e42:	466d      	mov	r5, sp
   18e44:	b088      	sub	sp, #32
   18e46:	aa02      	add	r2, sp, #8
   18e48:	4b11      	ldr	r3, [pc, #68]	; (18e90 <find_type_cb+0x180>)
   18e4a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18e4e:	e7e0      	b.n	18e12 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18e50:	f107 0118 	add.w	r1, r7, #24
   18e54:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18e58:	f00f fcf0 	bl	2883c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18e5c:	2800      	cmp	r0, #0
   18e5e:	d1e1      	bne.n	18e24 <find_type_cb+0x114>
	data->err = 0x00;
   18e60:	2300      	movs	r3, #0
   18e62:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18e64:	2104      	movs	r1, #4
   18e66:	f105 0008 	add.w	r0, r5, #8
   18e6a:	f011 fe3b 	bl	2aae4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18e6e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18e70:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18e74:	f8a0 8002 	strh.w	r8, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18e78:	e774      	b.n	18d64 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   18e7a:	4632      	mov	r2, r6
   18e7c:	f107 0108 	add.w	r1, r7, #8
   18e80:	f013 f895 	bl	2bfae <memcmp>
   18e84:	e7ea      	b.n	18e5c <find_type_cb+0x14c>
   18e86:	bf00      	nop
   18e88:	0002ef9b 	.word	0x0002ef9b
   18e8c:	0002c77c 	.word	0x0002c77c
   18e90:	0002efba 	.word	0x0002efba

00018e94 <att_get>:
{
   18e94:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18e96:	7b43      	ldrb	r3, [r0, #13]
   18e98:	2b07      	cmp	r3, #7
{
   18e9a:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   18e9c:	d00d      	beq.n	18eba <att_get+0x26>
		BT_WARN("Not connected");
   18e9e:	4b10      	ldr	r3, [pc, #64]	; (18ee0 <att_get+0x4c>)
   18ea0:	9305      	str	r3, [sp, #20]
   18ea2:	4810      	ldr	r0, [pc, #64]	; (18ee4 <att_get+0x50>)
   18ea4:	2302      	movs	r3, #2
   18ea6:	aa04      	add	r2, sp, #16
   18ea8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
   18eac:	2400      	movs	r4, #0
		BT_WARN("Not connected");
   18eae:	9304      	str	r3, [sp, #16]
   18eb0:	f010 fa0f 	bl	292d2 <z_log_msg_static_create.constprop.0>
}
   18eb4:	4620      	mov	r0, r4
   18eb6:	b006      	add	sp, #24
   18eb8:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18eba:	2104      	movs	r1, #4
   18ebc:	f010 f8c1 	bl	29042 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18ec0:	4604      	mov	r4, r0
   18ec2:	b950      	cbnz	r0, 18eda <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
   18ec4:	4b08      	ldr	r3, [pc, #32]	; (18ee8 <att_get+0x54>)
   18ec6:	9305      	str	r3, [sp, #20]
   18ec8:	4806      	ldr	r0, [pc, #24]	; (18ee4 <att_get+0x50>)
   18eca:	2302      	movs	r3, #2
   18ecc:	aa04      	add	r2, sp, #16
   18ece:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18ed2:	9304      	str	r3, [sp, #16]
   18ed4:	f010 f9fd 	bl	292d2 <z_log_msg_static_create.constprop.0>
		return NULL;
   18ed8:	e7ec      	b.n	18eb4 <att_get+0x20>
	return att_chan->att;
   18eda:	f850 4c04 	ldr.w	r4, [r0, #-4]
   18ede:	e7e9      	b.n	18eb4 <att_get+0x20>
   18ee0:	0002efd9 	.word	0x0002efd9
   18ee4:	0002c77c 	.word	0x0002c77c
   18ee8:	0002efe7 	.word	0x0002efe7

00018eec <bt_att_connected>:
{
   18eec:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18eee:	1f02      	subs	r2, r0, #4
{
   18ef0:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   18ef2:	308c      	adds	r0, #140	; 0x8c
   18ef4:	f3bf 8f5b 	dmb	ish
   18ef8:	e850 3f00 	ldrex	r3, [r0]
   18efc:	f043 0304 	orr.w	r3, r3, #4
   18f00:	e840 3100 	strex	r1, r3, [r0]
   18f04:	2900      	cmp	r1, #0
   18f06:	d1f7      	bne.n	18ef8 <bt_att_connected+0xc>
   18f08:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18f0c:	2103      	movs	r1, #3
   18f0e:	f010 f90a 	bl	29126 <atomic_test_bit>
   18f12:	b910      	cbnz	r0, 18f1a <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18f14:	2317      	movs	r3, #23
   18f16:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18f18:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   18f1a:	4610      	mov	r0, r2
   18f1c:	f010 f917 	bl	2914e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18f20:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   18f24:	4903      	ldr	r1, [pc, #12]	; (18f34 <bt_att_connected+0x48>)
   18f26:	f012 fcf8 	bl	2b91a <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18f2a:	6820      	ldr	r0, [r4, #0]
}
   18f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18f30:	f002 ba9c 	b.w	1b46c <bt_gatt_connected>
   18f34:	0001a025 	.word	0x0001a025

00018f38 <chan_send>:
{
   18f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   18f3c:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18f3e:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   18f42:	b089      	sub	sp, #36	; 0x24
   18f44:	4606      	mov	r6, r0
   18f46:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18f48:	3090      	adds	r0, #144	; 0x90
   18f4a:	2102      	movs	r1, #2
   18f4c:	f010 f8eb 	bl	29126 <atomic_test_bit>
   18f50:	2800      	cmp	r0, #0
   18f52:	d043      	beq.n	18fdc <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18f54:	781b      	ldrb	r3, [r3, #0]
   18f56:	2bd2      	cmp	r3, #210	; 0xd2
   18f58:	d11a      	bne.n	18f90 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   18f5a:	6833      	ldr	r3, [r6, #0]
   18f5c:	4621      	mov	r1, r4
   18f5e:	6818      	ldr	r0, [r3, #0]
   18f60:	f003 fc82 	bl	1c868 <bt_smp_sign>
		if (err) {
   18f64:	4605      	mov	r5, r0
   18f66:	b198      	cbz	r0, 18f90 <chan_send+0x58>
			BT_ERR("Error signing data");
   18f68:	4b1e      	ldr	r3, [pc, #120]	; (18fe4 <chan_send+0xac>)
   18f6a:	481f      	ldr	r0, [pc, #124]	; (18fe8 <chan_send+0xb0>)
   18f6c:	9307      	str	r3, [sp, #28]
   18f6e:	aa06      	add	r2, sp, #24
   18f70:	2302      	movs	r3, #2
   18f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18f76:	9306      	str	r3, [sp, #24]
   18f78:	f010 f9ab 	bl	292d2 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18f7c:	6960      	ldr	r0, [r4, #20]
   18f7e:	f7ff feb9 	bl	18cf4 <tx_meta_data_free>
			net_buf_unref(buf);
   18f82:	4620      	mov	r0, r4
   18f84:	f004 fdf0 	bl	1db68 <net_buf_unref>
}
   18f88:	4628      	mov	r0, r5
   18f8a:	b009      	add	sp, #36	; 0x24
   18f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18f90:	f104 0008 	add.w	r0, r4, #8
   18f94:	f011 fde5 	bl	2ab62 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18f98:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   18f9a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   18f9e:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18fa0:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   18fa2:	f8c9 6000 	str.w	r6, [r9]
	state->offset = net_buf_simple_headroom(buf);
   18fa6:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18fa8:	7818      	ldrb	r0, [r3, #0]
   18faa:	f010 f877 	bl	2909c <att_op_get_type>
	switch (op_type) {
   18fae:	2805      	cmp	r0, #5
   18fb0:	bf96      	itet	ls
   18fb2:	4b0e      	ldrls	r3, [pc, #56]	; (18fec <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18fb4:	4b0e      	ldrhi	r3, [pc, #56]	; (18ff0 <chan_send+0xb8>)
   18fb6:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18fba:	f8cd 9000 	str.w	r9, [sp]
   18fbe:	4628      	mov	r0, r5
   18fc0:	4622      	mov	r2, r4
   18fc2:	2104      	movs	r1, #4
   18fc4:	f010 f81a 	bl	28ffc <bt_l2cap_send_cb>
	if (err) {
   18fc8:	4605      	mov	r5, r0
   18fca:	2800      	cmp	r0, #0
   18fcc:	d0dc      	beq.n	18f88 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   18fce:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18fd0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18fd4:	fa10 f787 	uxtah	r7, r0, r7
   18fd8:	60a7      	str	r7, [r4, #8]
}
   18fda:	e7d5      	b.n	18f88 <chan_send+0x50>
		return -EINVAL;
   18fdc:	f06f 0515 	mvn.w	r5, #21
   18fe0:	e7d2      	b.n	18f88 <chan_send+0x50>
   18fe2:	bf00      	nop
   18fe4:	0002f002 	.word	0x0002f002
   18fe8:	0002c77c 	.word	0x0002c77c
   18fec:	0002d064 	.word	0x0002d064
   18ff0:	000296d3 	.word	0x000296d3

00018ff4 <read_group_cb>:
{
   18ff4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18ff8:	4605      	mov	r5, r0
   18ffa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18ffc:	f04f 0800 	mov.w	r8, #0
   19000:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19004:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   19006:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19008:	f88d 8008 	strb.w	r8, [sp, #8]
   1900c:	a902      	add	r1, sp, #8
{
   1900e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19010:	f8ad 300a 	strh.w	r3, [sp, #10]
   19014:	f00f fc12 	bl	2883c <bt_uuid_cmp>
   19018:	b1a0      	cbz	r0, 19044 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1901a:	f642 0301 	movw	r3, #10241	; 0x2801
   1901e:	6828      	ldr	r0, [r5, #0]
   19020:	f88d 800c 	strb.w	r8, [sp, #12]
   19024:	a903      	add	r1, sp, #12
   19026:	f8ad 300e 	strh.w	r3, [sp, #14]
   1902a:	f00f fc07 	bl	2883c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1902e:	b148      	cbz	r0, 19044 <read_group_cb+0x50>
		if (data->group &&
   19030:	6923      	ldr	r3, [r4, #16]
   19032:	b11b      	cbz	r3, 1903c <read_group_cb+0x48>
   19034:	885a      	ldrh	r2, [r3, #2]
   19036:	42b2      	cmp	r2, r6
   19038:	d200      	bcs.n	1903c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1903a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1903c:	2001      	movs	r0, #1
}
   1903e:	b004      	add	sp, #16
   19040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19044:	6861      	ldr	r1, [r4, #4]
   19046:	6828      	ldr	r0, [r5, #0]
   19048:	f00f fbf8 	bl	2883c <bt_uuid_cmp>
   1904c:	b110      	cbz	r0, 19054 <read_group_cb+0x60>
		data->group = NULL;
   1904e:	2300      	movs	r3, #0
   19050:	6123      	str	r3, [r4, #16]
   19052:	e7f3      	b.n	1903c <read_group_cb+0x48>
	if (data->rsp->len &&
   19054:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19056:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   19058:	781a      	ldrb	r2, [r3, #0]
   1905a:	b132      	cbz	r2, 1906a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1905c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1905e:	8981      	ldrh	r1, [r0, #12]
   19060:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19062:	4293      	cmp	r3, r2
   19064:	da01      	bge.n	1906a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   19066:	2000      	movs	r0, #0
   19068:	e7e9      	b.n	1903e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1906a:	2104      	movs	r1, #4
   1906c:	3008      	adds	r0, #8
   1906e:	f011 fd39 	bl	2aae4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19072:	4b09      	ldr	r3, [pc, #36]	; (19098 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19074:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19076:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19078:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1907a:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1907c:	4629      	mov	r1, r5
   1907e:	9300      	str	r3, [sp, #0]
   19080:	9401      	str	r4, [sp, #4]
   19082:	2300      	movs	r3, #0
   19084:	4638      	mov	r0, r7
   19086:	f010 f995 	bl	293b4 <att_chan_read>
	if (read < 0) {
   1908a:	2800      	cmp	r0, #0
   1908c:	dbeb      	blt.n	19066 <read_group_cb+0x72>
	if (!data->group) {
   1908e:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19090:	3800      	subs	r0, #0
   19092:	bf18      	it	ne
   19094:	2001      	movne	r0, #1
   19096:	e7d2      	b.n	1903e <read_group_cb+0x4a>
   19098:	000291af 	.word	0x000291af

0001909c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190a0:	b082      	sub	sp, #8
   190a2:	af00      	add	r7, sp, #0
   190a4:	4680      	mov	r8, r0
   190a6:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   190a8:	483a      	ldr	r0, [pc, #232]	; (19194 <bt_att_accept+0xf8>)
   190aa:	2200      	movs	r2, #0
   190ac:	2300      	movs	r3, #0
   190ae:	4639      	mov	r1, r7
   190b0:	f008 fb2a 	bl	21708 <k_mem_slab_alloc>
   190b4:	4605      	mov	r5, r0
   190b6:	b188      	cbz	r0, 190dc <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
   190b8:	466c      	mov	r4, sp
   190ba:	b088      	sub	sp, #32
   190bc:	466a      	mov	r2, sp
   190be:	4b36      	ldr	r3, [pc, #216]	; (19198 <bt_att_accept+0xfc>)
   190c0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   190c4:	2303      	movs	r3, #3
   190c6:	f842 3f10 	str.w	r3, [r2, #16]!
   190ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_WARN("No available ATT channel for conn %p", att->conn);
   190ce:	4833      	ldr	r0, [pc, #204]	; (1919c <bt_att_accept+0x100>)
   190d0:	f010 f8ff 	bl	292d2 <z_log_msg_static_create.constprop.0>
   190d4:	46a5      	mov	sp, r4
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   190d6:	f06f 050b 	mvn.w	r5, #11
   190da:	e055      	b.n	19188 <bt_att_accept+0xec>
	return z_impl_z_current_get();
   190dc:	f009 fa3a 	bl	22554 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   190e0:	4b2f      	ldr	r3, [pc, #188]	; (191a0 <bt_att_accept+0x104>)
   190e2:	4629      	mov	r1, r5
   190e4:	6018      	str	r0, [r3, #0]
   190e6:	2234      	movs	r2, #52	; 0x34
   190e8:	6838      	ldr	r0, [r7, #0]
   190ea:	f012 ff91 	bl	2c010 <memset>
	att->conn = conn;
   190ee:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   190f0:	482c      	ldr	r0, [pc, #176]	; (191a4 <bt_att_accept+0x108>)
	list->tail = NULL;
   190f2:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   190f4:	e9c4 8500 	strd	r8, r5, [r4]
	list->tail = NULL;
   190f8:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   190fc:	2200      	movs	r2, #0
   190fe:	2300      	movs	r3, #0
   19100:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19102:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19104:	f008 fb00 	bl	21708 <k_mem_slab_alloc>
   19108:	4605      	mov	r5, r0
   1910a:	b160      	cbz	r0, 19126 <bt_att_accept+0x8a>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1910c:	6823      	ldr	r3, [r4, #0]
   1910e:	466c      	mov	r4, sp
   19110:	b088      	sub	sp, #32
   19112:	466a      	mov	r2, sp
   19114:	4924      	ldr	r1, [pc, #144]	; (191a8 <bt_att_accept+0x10c>)
   19116:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1911a:	2303      	movs	r3, #3
   1911c:	f842 3f10 	str.w	r3, [r2, #16]!
   19120:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19124:	e7d3      	b.n	190ce <bt_att_accept+0x32>
   19126:	4601      	mov	r1, r0
   19128:	22e8      	movs	r2, #232	; 0xe8
   1912a:	6878      	ldr	r0, [r7, #4]
   1912c:	f012 ff70 	bl	2c010 <memset>
	chan->chan.chan.ops = &ops;
   19130:	6878      	ldr	r0, [r7, #4]
   19132:	4b1e      	ldr	r3, [pc, #120]	; (191ac <bt_att_accept+0x110>)
   19134:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   19136:	3098      	adds	r0, #152	; 0x98
   19138:	f012 face 	bl	2b6d8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1913c:	687b      	ldr	r3, [r7, #4]
   1913e:	f3bf 8f5b 	dmb	ish
   19142:	3390      	adds	r3, #144	; 0x90
   19144:	e853 2f00 	ldrex	r2, [r3]
   19148:	e843 5100 	strex	r1, r5, [r3]
   1914c:	2900      	cmp	r1, #0
   1914e:	d1f9      	bne.n	19144 <bt_att_accept+0xa8>
   19150:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19154:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   19158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	chan->att = att;
   1915a:	f8c8 4000 	str.w	r4, [r8]
	if (sys_slist_is_empty(&att->chans)) {
   1915e:	b92b      	cbnz	r3, 1916c <bt_att_accept+0xd0>
   19160:	f104 000c 	add.w	r0, r4, #12
   19164:	f012 fab8 	bl	2b6d8 <z_impl_k_queue_init>
   19168:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	parent->next = child;
   1916c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1916e:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   19172:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   19174:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   19178:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   1917a:	b902      	cbnz	r2, 1917e <bt_att_accept+0xe2>
	list->tail = node;
   1917c:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   1917e:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   19180:	2b00      	cmp	r3, #0
   19182:	d0a8      	beq.n	190d6 <bt_att_accept+0x3a>
	}

	*ch = &chan->chan.chan;
   19184:	3304      	adds	r3, #4
   19186:	6033      	str	r3, [r6, #0]

	return 0;
}
   19188:	4628      	mov	r0, r5
   1918a:	3708      	adds	r7, #8
   1918c:	46bd      	mov	sp, r7
   1918e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19192:	bf00      	nop
   19194:	20000a58 	.word	0x20000a58
   19198:	0002f015 	.word	0x0002f015
   1919c:	0002c77c 	.word	0x0002c77c
   191a0:	20002eb0 	.word	0x20002eb0
   191a4:	20000a74 	.word	0x20000a74
   191a8:	0002f03a 	.word	0x0002f03a
   191ac:	200006cc 	.word	0x200006cc

000191b0 <read_type_cb>:
{
   191b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   191b4:	f8d2 8000 	ldr.w	r8, [r2]
{
   191b8:	4606      	mov	r6, r0
   191ba:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   191bc:	6800      	ldr	r0, [r0, #0]
   191be:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   191c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   191c4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   191c6:	f00f fb39 	bl	2883c <bt_uuid_cmp>
   191ca:	4607      	mov	r7, r0
   191cc:	2800      	cmp	r0, #0
   191ce:	d13e      	bne.n	1924e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   191d0:	4628      	mov	r0, r5
   191d2:	2295      	movs	r2, #149	; 0x95
   191d4:	4631      	mov	r1, r6
   191d6:	f010 fe9c 	bl	29f12 <bt_gatt_check_perm>
   191da:	4605      	mov	r5, r0
   191dc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   191de:	b148      	cbz	r0, 191f4 <read_type_cb+0x44>
		if (data->rsp->len) {
   191e0:	68e3      	ldr	r3, [r4, #12]
   191e2:	781b      	ldrb	r3, [r3, #0]
   191e4:	b923      	cbnz	r3, 191f0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   191e6:	2500      	movs	r5, #0
}
   191e8:	4628      	mov	r0, r5
   191ea:	b003      	add	sp, #12
   191ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   191f0:	7527      	strb	r7, [r4, #20]
   191f2:	e7f8      	b.n	191e6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   191f4:	68a0      	ldr	r0, [r4, #8]
   191f6:	f011 fc53 	bl	2aaa0 <net_buf_frag_last>
   191fa:	2102      	movs	r1, #2
   191fc:	3008      	adds	r0, #8
   191fe:	f011 fc71 	bl	2aae4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19202:	4b14      	ldr	r3, [pc, #80]	; (19254 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19204:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19206:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   19208:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1920c:	4631      	mov	r1, r6
   1920e:	9300      	str	r3, [sp, #0]
   19210:	9401      	str	r4, [sp, #4]
   19212:	462b      	mov	r3, r5
   19214:	4640      	mov	r0, r8
   19216:	f010 f8cd 	bl	293b4 <att_chan_read>
	if (read < 0) {
   1921a:	2800      	cmp	r0, #0
   1921c:	da07      	bge.n	1922e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1921e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19222:	bf26      	itte	cs
   19224:	4240      	negcs	r0, r0
   19226:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   19228:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1922a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1922c:	e7dc      	b.n	191e8 <read_type_cb+0x38>
	if (!data->item) {
   1922e:	6923      	ldr	r3, [r4, #16]
   19230:	2b00      	cmp	r3, #0
   19232:	d0d8      	beq.n	191e6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19234:	68a0      	ldr	r0, [r4, #8]
   19236:	f00f ff19 	bl	2906c <net_buf_frags_len>
   1923a:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1923e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19240:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19242:	7818      	ldrb	r0, [r3, #0]
   19244:	4285      	cmp	r5, r0
   19246:	bf94      	ite	ls
   19248:	2500      	movls	r5, #0
   1924a:	2501      	movhi	r5, #1
   1924c:	e7cc      	b.n	191e8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1924e:	2501      	movs	r5, #1
   19250:	e7ca      	b.n	191e8 <read_type_cb+0x38>
   19252:	bf00      	nop
   19254:	0002907d 	.word	0x0002907d

00019258 <prep_write_cb>:
{
   19258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1925c:	4614      	mov	r4, r2
   1925e:	4606      	mov	r6, r0
   19260:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   19262:	f44f 7295 	mov.w	r2, #298	; 0x12a
   19266:	4601      	mov	r1, r0
   19268:	6820      	ldr	r0, [r4, #0]
   1926a:	f010 fe52 	bl	29f12 <bt_gatt_check_perm>
   1926e:	4605      	mov	r5, r0
   19270:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   19272:	2800      	cmp	r0, #0
   19274:	d12e      	bne.n	192d4 <prep_write_cb+0x7c>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   19276:	8a73      	ldrh	r3, [r6, #18]
   19278:	065b      	lsls	r3, r3, #25
   1927a:	d516      	bpl.n	192aa <prep_write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
   1927c:	2301      	movs	r3, #1
   1927e:	9301      	str	r3, [sp, #4]
   19280:	89e3      	ldrh	r3, [r4, #14]
   19282:	9300      	str	r3, [sp, #0]
   19284:	f8d6 8008 	ldr.w	r8, [r6, #8]
   19288:	89a3      	ldrh	r3, [r4, #12]
   1928a:	68a2      	ldr	r2, [r4, #8]
   1928c:	6820      	ldr	r0, [r4, #0]
   1928e:	4631      	mov	r1, r6
   19290:	47c0      	blx	r8
	if (write != 0) {
   19292:	b150      	cbz	r0, 192aa <prep_write_cb+0x52>
	if (err < 0 && err >= -0xff) {
   19294:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19298:	bf26      	itte	cs
   1929a:	4243      	negcs	r3, r0
   1929c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1929e:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   192a0:	7423      	strb	r3, [r4, #16]
}
   192a2:	4628      	mov	r0, r5
   192a4:	b002      	add	sp, #8
   192a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   192aa:	480b      	ldr	r0, [pc, #44]	; (192d8 <prep_write_cb+0x80>)
   192ac:	2200      	movs	r2, #0
   192ae:	2300      	movs	r3, #0
   192b0:	f011 fb73 	bl	2a99a <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   192b4:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   192b6:	b908      	cbnz	r0, 192bc <prep_write_cb+0x64>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   192b8:	2309      	movs	r3, #9
   192ba:	e7f1      	b.n	192a0 <prep_write_cb+0x48>
	attr_data->offset = data->offset;
   192bc:	89e3      	ldrh	r3, [r4, #14]
   192be:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   192c0:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   192c2:	89a2      	ldrh	r2, [r4, #12]
   192c4:	68a1      	ldr	r1, [r4, #8]
   192c6:	3008      	adds	r0, #8
   192c8:	f011 fc12 	bl	2aaf0 <net_buf_simple_add_mem>
	data->err = 0U;
   192cc:	2300      	movs	r3, #0
   192ce:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   192d0:	2501      	movs	r5, #1
   192d2:	e7e6      	b.n	192a2 <prep_write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   192d4:	2500      	movs	r5, #0
   192d6:	e7e4      	b.n	192a2 <prep_write_cb+0x4a>
   192d8:	20000cdc 	.word	0x20000cdc

000192dc <bt_att_chan_create_pdu>:
{
   192dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192e0:	b087      	sub	sp, #28
   192e2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   192e4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   192e6:	1c53      	adds	r3, r2, #1
   192e8:	428b      	cmp	r3, r1
{
   192ea:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   192ec:	d915      	bls.n	1931a <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   192ee:	466c      	mov	r4, sp
   192f0:	b088      	sub	sp, #32
   192f2:	466a      	mov	r2, sp
   192f4:	482b      	ldr	r0, [pc, #172]	; (193a4 <bt_att_chan_create_pdu+0xc8>)
   192f6:	61d3      	str	r3, [r2, #28]
   192f8:	2304      	movs	r3, #4
   192fa:	e9c2 0105 	strd	r0, r1, [r2, #20]
   192fe:	f842 3f10 	str.w	r3, [r2, #16]!
   19302:	4829      	ldr	r0, [pc, #164]	; (193a8 <bt_att_chan_create_pdu+0xcc>)
   19304:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19308:	f00f ffe3 	bl	292d2 <z_log_msg_static_create.constprop.0>
   1930c:	46a5      	mov	sp, r4
		return NULL;
   1930e:	2400      	movs	r4, #0
}
   19310:	4620      	mov	r0, r4
   19312:	371c      	adds	r7, #28
   19314:	46bd      	mov	sp, r7
   19316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1931a:	4628      	mov	r0, r5
   1931c:	f00f febe 	bl	2909c <att_op_get_type>
   19320:	2802      	cmp	r0, #2
   19322:	d001      	beq.n	19328 <bt_att_chan_create_pdu+0x4c>
   19324:	2804      	cmp	r0, #4
   19326:	d11b      	bne.n	19360 <bt_att_chan_create_pdu+0x84>
   19328:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1932c:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   19330:	2100      	movs	r1, #0
   19332:	4642      	mov	r2, r8
   19334:	464b      	mov	r3, r9
   19336:	4608      	mov	r0, r1
   19338:	f00f fe5d 	bl	28ff6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1933c:	4604      	mov	r4, r0
   1933e:	b9a0      	cbnz	r0, 1936a <bt_att_chan_create_pdu+0x8e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   19340:	466e      	mov	r6, sp
   19342:	b088      	sub	sp, #32
   19344:	466a      	mov	r2, sp
   19346:	4b19      	ldr	r3, [pc, #100]	; (193ac <bt_att_chan_create_pdu+0xd0>)
   19348:	4817      	ldr	r0, [pc, #92]	; (193a8 <bt_att_chan_create_pdu+0xcc>)
   1934a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1934e:	2303      	movs	r3, #3
   19350:	f842 3f10 	str.w	r3, [r2, #16]!
   19354:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19358:	f00f ffbb 	bl	292d2 <z_log_msg_static_create.constprop.0>
   1935c:	46b5      	mov	sp, r6
		return NULL;
   1935e:	e7d7      	b.n	19310 <bt_att_chan_create_pdu+0x34>
		timeout = K_FOREVER;
   19360:	f04f 38ff 	mov.w	r8, #4294967295
   19364:	f04f 39ff 	mov.w	r9, #4294967295
   19368:	e7e2      	b.n	19330 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1936a:	4811      	ldr	r0, [pc, #68]	; (193b0 <bt_att_chan_create_pdu+0xd4>)
   1936c:	4642      	mov	r2, r8
   1936e:	464b      	mov	r3, r9
   19370:	f008 fb80 	bl	21a74 <z_impl_k_queue_get>
	if (!data) {
   19374:	b970      	cbnz	r0, 19394 <bt_att_chan_create_pdu+0xb8>
		BT_WARN("Unable to allocate ATT TX meta");
   19376:	4b0f      	ldr	r3, [pc, #60]	; (193b4 <bt_att_chan_create_pdu+0xd8>)
   19378:	617b      	str	r3, [r7, #20]
   1937a:	480b      	ldr	r0, [pc, #44]	; (193a8 <bt_att_chan_create_pdu+0xcc>)
   1937c:	2302      	movs	r3, #2
   1937e:	f107 0210 	add.w	r2, r7, #16
   19382:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19386:	613b      	str	r3, [r7, #16]
   19388:	f00f ffa3 	bl	292d2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1938c:	4620      	mov	r0, r4
   1938e:	f004 fbeb 	bl	1db68 <net_buf_unref>
		return NULL;
   19392:	e7bc      	b.n	1930e <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   19394:	6160      	str	r0, [r4, #20]
	return net_buf_simple_add(&buf->b, len);
   19396:	2101      	movs	r1, #1
   19398:	f104 0008 	add.w	r0, r4, #8
   1939c:	f011 fba2 	bl	2aae4 <net_buf_simple_add>
	hdr->code = op;
   193a0:	7005      	strb	r5, [r0, #0]
	return buf;
   193a2:	e7b5      	b.n	19310 <bt_att_chan_create_pdu+0x34>
   193a4:	0002f05f 	.word	0x0002f05f
   193a8:	0002c77c 	.word	0x0002c77c
   193ac:	0002ee59 	.word	0x0002ee59
   193b0:	20000ba4 	.word	0x20000ba4
   193b4:	0002f084 	.word	0x0002f084

000193b8 <bt_att_recv>:
{
   193b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193bc:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   193be:	898b      	ldrh	r3, [r1, #12]
{
   193c0:	af00      	add	r7, sp, #0
   193c2:	4682      	mov	sl, r0
   193c4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   193c6:	b97b      	cbnz	r3, 193e8 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   193c8:	4b46      	ldr	r3, [pc, #280]	; (194e4 <bt_att_recv+0x12c>)
   193ca:	617b      	str	r3, [r7, #20]
   193cc:	2302      	movs	r3, #2
   193ce:	613b      	str	r3, [r7, #16]
   193d0:	f107 0210 	add.w	r2, r7, #16
   193d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   193d8:	4843      	ldr	r0, [pc, #268]	; (194e8 <bt_att_recv+0x130>)
   193da:	f00f ff7a 	bl	292d2 <z_log_msg_static_create.constprop.0>
}
   193de:	2000      	movs	r0, #0
   193e0:	3718      	adds	r7, #24
   193e2:	46bd      	mov	sp, r7
   193e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   193e8:	2101      	movs	r1, #1
   193ea:	f104 0008 	add.w	r0, r4, #8
   193ee:	f011 fba0 	bl	2ab32 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   193f2:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   193f6:	4605      	mov	r5, r0
   193f8:	2b00      	cmp	r3, #0
   193fa:	d0f0      	beq.n	193de <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   193fc:	7801      	ldrb	r1, [r0, #0]
   193fe:	4e3b      	ldr	r6, [pc, #236]	; (194ec <bt_att_recv+0x134>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19400:	f1aa 0804 	sub.w	r8, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19404:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19406:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1940a:	428a      	cmp	r2, r1
   1940c:	d116      	bne.n	1943c <bt_att_recv+0x84>
		if (handler->type == ATT_REQUEST &&
   1940e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   19412:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   19416:	789b      	ldrb	r3, [r3, #2]
   19418:	2b01      	cmp	r3, #1
   1941a:	d131      	bne.n	19480 <bt_att_recv+0xc8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1941c:	2100      	movs	r1, #0
   1941e:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   19422:	f00f ffb2 	bl	2938a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   19426:	2800      	cmp	r0, #0
   19428:	d034      	beq.n	19494 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected request");
   1942a:	4b31      	ldr	r3, [pc, #196]	; (194f0 <bt_att_recv+0x138>)
			BT_WARN("Ignoring unexpected indication");
   1942c:	617b      	str	r3, [r7, #20]
   1942e:	2302      	movs	r3, #2
   19430:	613b      	str	r3, [r7, #16]
   19432:	f107 0210 	add.w	r2, r7, #16
   19436:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1943a:	e7cd      	b.n	193d8 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1943c:	3301      	adds	r3, #1
   1943e:	2b0f      	cmp	r3, #15
   19440:	d1e1      	bne.n	19406 <bt_att_recv+0x4e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   19442:	466c      	mov	r4, sp
   19444:	b088      	sub	sp, #32
   19446:	466a      	mov	r2, sp
   19448:	4b2a      	ldr	r3, [pc, #168]	; (194f4 <bt_att_recv+0x13c>)
   1944a:	4827      	ldr	r0, [pc, #156]	; (194e8 <bt_att_recv+0x130>)
   1944c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19450:	2303      	movs	r3, #3
   19452:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19456:	f842 3f10 	str.w	r3, [r2, #16]!
   1945a:	f00f ff3a 	bl	292d2 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1945e:	7829      	ldrb	r1, [r5, #0]
   19460:	46a5      	mov	sp, r4
   19462:	4608      	mov	r0, r1
   19464:	f00f fe1a 	bl	2909c <att_op_get_type>
   19468:	2800      	cmp	r0, #0
   1946a:	d0b8      	beq.n	193de <bt_att_recv+0x26>
   1946c:	2805      	cmp	r0, #5
   1946e:	d0b6      	beq.n	193de <bt_att_recv+0x26>
	if (!req) {
   19470:	2900      	cmp	r1, #0
   19472:	d0b4      	beq.n	193de <bt_att_recv+0x26>
   19474:	2306      	movs	r3, #6
   19476:	2200      	movs	r2, #0
   19478:	4640      	mov	r0, r8
   1947a:	f010 f994 	bl	297a6 <send_err_rsp.part.0>
   1947e:	e7ae      	b.n	193de <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   19480:	2b05      	cmp	r3, #5
   19482:	d107      	bne.n	19494 <bt_att_recv+0xdc>
			   atomic_test_and_set_bit(att_chan->flags,
   19484:	2101      	movs	r1, #1
   19486:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1948a:	f00f ff7e 	bl	2938a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1948e:	b108      	cbz	r0, 19494 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected indication");
   19490:	4b19      	ldr	r3, [pc, #100]	; (194f8 <bt_att_recv+0x140>)
   19492:	e7cb      	b.n	1942c <bt_att_recv+0x74>
	if (buf->len < handler->expect_len) {
   19494:	eb06 0309 	add.w	r3, r6, r9
   19498:	89a1      	ldrh	r1, [r4, #12]
   1949a:	785a      	ldrb	r2, [r3, #1]
   1949c:	428a      	cmp	r2, r1
   1949e:	d91b      	bls.n	194d8 <bt_att_recv+0x120>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   194a0:	46ea      	mov	sl, sp
   194a2:	b088      	sub	sp, #32
   194a4:	782b      	ldrb	r3, [r5, #0]
   194a6:	466a      	mov	r2, sp
   194a8:	4814      	ldr	r0, [pc, #80]	; (194fc <bt_att_recv+0x144>)
   194aa:	61d3      	str	r3, [r2, #28]
   194ac:	2404      	movs	r4, #4
   194ae:	e9c2 0105 	strd	r0, r1, [r2, #20]
   194b2:	f842 4f10 	str.w	r4, [r2, #16]!
   194b6:	480c      	ldr	r0, [pc, #48]	; (194e8 <bt_att_recv+0x130>)
   194b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   194bc:	f00f ff09 	bl	292d2 <z_log_msg_static_create.constprop.0>
		err = BT_ATT_ERR_INVALID_PDU;
   194c0:	4623      	mov	r3, r4
   194c2:	46d5      	mov	sp, sl
	if (handler->type == ATT_REQUEST && err) {
   194c4:	444e      	add	r6, r9
   194c6:	78b2      	ldrb	r2, [r6, #2]
   194c8:	2a01      	cmp	r2, #1
   194ca:	d188      	bne.n	193de <bt_att_recv+0x26>
   194cc:	2b00      	cmp	r3, #0
   194ce:	d086      	beq.n	193de <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   194d0:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   194d2:	2900      	cmp	r1, #0
   194d4:	d083      	beq.n	193de <bt_att_recv+0x26>
   194d6:	e7ce      	b.n	19476 <bt_att_recv+0xbe>
		err = handler->func(att_chan, buf);
   194d8:	685b      	ldr	r3, [r3, #4]
   194da:	4621      	mov	r1, r4
   194dc:	4640      	mov	r0, r8
   194de:	4798      	blx	r3
   194e0:	4603      	mov	r3, r0
   194e2:	e7ef      	b.n	194c4 <bt_att_recv+0x10c>
   194e4:	0002f0a3 	.word	0x0002f0a3
   194e8:	0002c77c 	.word	0x0002c77c
   194ec:	0002d07c 	.word	0x0002d07c
   194f0:	0002f0be 	.word	0x0002f0be
   194f4:	0002f118 	.word	0x0002f118
   194f8:	0002f0da 	.word	0x0002f0da
   194fc:	0002f0f9 	.word	0x0002f0f9

00019500 <att_write_rsp>:
{
   19500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19504:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19506:	6803      	ldr	r3, [r0, #0]
   19508:	460e      	mov	r6, r1
   1950a:	3900      	subs	r1, #0
{
   1950c:	b086      	sub	sp, #24
   1950e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19510:	bf18      	it	ne
   19512:	2101      	movne	r1, #1
   19514:	6818      	ldr	r0, [r3, #0]
{
   19516:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19518:	f010 fdb2 	bl	2a080 <bt_gatt_change_aware>
   1951c:	b958      	cbnz	r0, 19536 <att_write_rsp+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1951e:	2105      	movs	r1, #5
   19520:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19524:	f00f ff31 	bl	2938a <atomic_test_and_set_bit>
   19528:	2800      	cmp	r0, #0
   1952a:	d052      	beq.n	195d2 <att_write_rsp+0xd2>
			return 0;
   1952c:	2500      	movs	r5, #0
}
   1952e:	4628      	mov	r0, r5
   19530:	b006      	add	sp, #24
   19532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19536:	2f00      	cmp	r7, #0
   19538:	d04d      	beq.n	195d6 <att_write_rsp+0xd6>
	(void)memset(&data, 0, sizeof(data));
   1953a:	2218      	movs	r2, #24
   1953c:	2100      	movs	r1, #0
   1953e:	4668      	mov	r0, sp
   19540:	f012 fd66 	bl	2c010 <memset>
	if (rsp) {
   19544:	f1b8 0f00 	cmp.w	r8, #0
   19548:	d132      	bne.n	195b0 <att_write_rsp+0xb0>
	data.conn = chan->att->conn;
   1954a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1954c:	4a23      	ldr	r2, [pc, #140]	; (195dc <att_write_rsp+0xdc>)
	data.conn = chan->att->conn;
   1954e:	681b      	ldr	r3, [r3, #0]
   19550:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19552:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   19556:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1955c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1955e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   19562:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19566:	2301      	movs	r3, #1
   19568:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1956c:	4639      	mov	r1, r7
   1956e:	466b      	mov	r3, sp
   19570:	4638      	mov	r0, r7
	data.req = req;
   19572:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19576:	f00f fddf 	bl	29138 <bt_gatt_foreach_attr>
	if (data.err) {
   1957a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1957e:	b30d      	cbz	r5, 195c4 <att_write_rsp+0xc4>
		if (rsp) {
   19580:	f1b8 0f00 	cmp.w	r8, #0
   19584:	d00f      	beq.n	195a6 <att_write_rsp+0xa6>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19586:	9b01      	ldr	r3, [sp, #4]
   19588:	6958      	ldr	r0, [r3, #20]
   1958a:	f7ff fbb3 	bl	18cf4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1958e:	9801      	ldr	r0, [sp, #4]
   19590:	f004 faea 	bl	1db68 <net_buf_unref>
	if (!req) {
   19594:	2e00      	cmp	r6, #0
   19596:	d0c9      	beq.n	1952c <att_write_rsp+0x2c>
   19598:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1959c:	463a      	mov	r2, r7
   1959e:	4631      	mov	r1, r6
   195a0:	4620      	mov	r0, r4
   195a2:	f010 f900 	bl	297a6 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   195a6:	2e18      	cmp	r6, #24
   195a8:	d1c0      	bne.n	1952c <att_write_rsp+0x2c>
   195aa:	f89d 5014 	ldrb.w	r5, [sp, #20]
   195ae:	e7be      	b.n	1952e <att_write_rsp+0x2e>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   195b0:	2200      	movs	r2, #0
   195b2:	4641      	mov	r1, r8
   195b4:	4620      	mov	r0, r4
   195b6:	f7ff fe91 	bl	192dc <bt_att_chan_create_pdu>
   195ba:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   195bc:	2800      	cmp	r0, #0
   195be:	d1c4      	bne.n	1954a <att_write_rsp+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   195c0:	250e      	movs	r5, #14
   195c2:	e7b4      	b.n	1952e <att_write_rsp+0x2e>
	if (data.buf) {
   195c4:	9901      	ldr	r1, [sp, #4]
   195c6:	2900      	cmp	r1, #0
   195c8:	d0b0      	beq.n	1952c <att_write_rsp+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   195ca:	4620      	mov	r0, r4
   195cc:	f00f feb7 	bl	2933e <bt_att_chan_send_rsp>
   195d0:	e7ad      	b.n	1952e <att_write_rsp+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   195d2:	2512      	movs	r5, #18
   195d4:	e7ab      	b.n	1952e <att_write_rsp+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   195d6:	2501      	movs	r5, #1
   195d8:	e7a9      	b.n	1952e <att_write_rsp+0x2e>
   195da:	bf00      	nop
   195dc:	000291cf 	.word	0x000291cf

000195e0 <att_signed_write_cmd>:
{
   195e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   195e4:	6847      	ldr	r7, [r0, #4]
{
   195e6:	b08b      	sub	sp, #44	; 0x2c
   195e8:	4606      	mov	r6, r0
   195ea:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   195ec:	3090      	adds	r0, #144	; 0x90
   195ee:	2103      	movs	r1, #3
   195f0:	f00f fd99 	bl	29126 <atomic_test_bit>
   195f4:	b9c0      	cbnz	r0, 19628 <att_signed_write_cmd+0x48>
	handle = sys_le16_to_cpu(req->handle);
   195f6:	46a9      	mov	r9, r5
	return net_buf_simple_push(&buf->b, len);
   195f8:	2101      	movs	r1, #1
   195fa:	f859 3f08 	ldr.w	r3, [r9, #8]!
   195fe:	4648      	mov	r0, r9
   19600:	f8b3 8000 	ldrh.w	r8, [r3]
   19604:	f011 fa85 	bl	2ab12 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   19608:	4638      	mov	r0, r7
   1960a:	4629      	mov	r1, r5
   1960c:	f003 f8a6 	bl	1c75c <bt_smp_sign_verify>
	if (err) {
   19610:	4607      	mov	r7, r0
   19612:	b158      	cbz	r0, 1962c <att_signed_write_cmd+0x4c>
		BT_ERR("Error verifying data");
   19614:	4b11      	ldr	r3, [pc, #68]	; (1965c <att_signed_write_cmd+0x7c>)
   19616:	9309      	str	r3, [sp, #36]	; 0x24
   19618:	4811      	ldr	r0, [pc, #68]	; (19660 <att_signed_write_cmd+0x80>)
   1961a:	2302      	movs	r3, #2
   1961c:	aa08      	add	r2, sp, #32
   1961e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19622:	9308      	str	r3, [sp, #32]
   19624:	f00f fe55 	bl	292d2 <z_log_msg_static_create.constprop.0>
		return 0;
   19628:	2000      	movs	r0, #0
   1962a:	e014      	b.n	19656 <att_signed_write_cmd+0x76>
	return net_buf_simple_pull(&buf->b, len);
   1962c:	2101      	movs	r1, #1
   1962e:	4648      	mov	r0, r9
   19630:	f011 fa77 	bl	2ab22 <net_buf_simple_pull>
   19634:	2102      	movs	r1, #2
   19636:	4648      	mov	r0, r9
   19638:	f011 fa73 	bl	2ab22 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1963c:	89ab      	ldrh	r3, [r5, #12]
   1963e:	3b0c      	subs	r3, #12
   19640:	b29b      	uxth	r3, r3
   19642:	9302      	str	r3, [sp, #8]
   19644:	68ab      	ldr	r3, [r5, #8]
   19646:	463a      	mov	r2, r7
   19648:	e9cd 7300 	strd	r7, r3, [sp]
   1964c:	4639      	mov	r1, r7
   1964e:	4643      	mov	r3, r8
   19650:	4630      	mov	r0, r6
   19652:	f7ff ff55 	bl	19500 <att_write_rsp>
}
   19656:	b00b      	add	sp, #44	; 0x2c
   19658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1965c:	0002f132 	.word	0x0002f132
   19660:	0002c77c 	.word	0x0002c77c

00019664 <bt_att_create_pdu>:
{
   19664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19666:	af00      	add	r7, sp, #0
   19668:	460e      	mov	r6, r1
   1966a:	4615      	mov	r5, r2
	att = att_get(conn);
   1966c:	f7ff fc12 	bl	18e94 <att_get>
	if (!att) {
   19670:	b1f8      	cbz	r0, 196b2 <bt_att_create_pdu+0x4e>
	return list->head;
   19672:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   19674:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19676:	b138      	cbz	r0, 19688 <bt_att_create_pdu+0x24>
	return node->next;
   19678:	f850 39e0 	ldr.w	r3, [r0], #-224
   1967c:	b103      	cbz	r3, 19680 <bt_att_create_pdu+0x1c>
   1967e:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19680:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   19682:	4291      	cmp	r1, r2
   19684:	d911      	bls.n	196aa <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19686:	b9b3      	cbnz	r3, 196b6 <bt_att_create_pdu+0x52>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   19688:	466c      	mov	r4, sp
   1968a:	b088      	sub	sp, #32
   1968c:	466a      	mov	r2, sp
   1968e:	4b0d      	ldr	r3, [pc, #52]	; (196c4 <bt_att_create_pdu+0x60>)
   19690:	480d      	ldr	r0, [pc, #52]	; (196c8 <bt_att_create_pdu+0x64>)
   19692:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19696:	2303      	movs	r3, #3
   19698:	f842 3f10 	str.w	r3, [r2, #16]!
   1969c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   196a0:	f00f fe17 	bl	292d2 <z_log_msg_static_create.constprop.0>
	return NULL;
   196a4:	2000      	movs	r0, #0
   196a6:	46a5      	mov	sp, r4
   196a8:	e003      	b.n	196b2 <bt_att_create_pdu+0x4e>
		return bt_att_chan_create_pdu(chan, op, len);
   196aa:	462a      	mov	r2, r5
   196ac:	4631      	mov	r1, r6
   196ae:	f7ff fe15 	bl	192dc <bt_att_chan_create_pdu>
}
   196b2:	46bd      	mov	sp, r7
   196b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196b6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   196ba:	b104      	cbz	r4, 196be <bt_att_create_pdu+0x5a>
   196bc:	3ce0      	subs	r4, #224	; 0xe0
{
   196be:	4618      	mov	r0, r3
   196c0:	4623      	mov	r3, r4
   196c2:	e7dd      	b.n	19680 <bt_att_create_pdu+0x1c>
   196c4:	0002f147 	.word	0x0002f147
   196c8:	0002c77c 	.word	0x0002c77c

000196cc <att_exec_write_req>:
{
   196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   196d0:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   196d2:	4f4b      	ldr	r7, [pc, #300]	; (19800 <att_exec_write_req+0x134>)
   196d4:	781b      	ldrb	r3, [r3, #0]
{
   196d6:	b089      	sub	sp, #36	; 0x24
   196d8:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   196da:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   196dc:	6843      	ldr	r3, [r0, #4]
   196de:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   196e0:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   196e2:	6828      	ldr	r0, [r5, #0]
   196e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   196e6:	b98b      	cbnz	r3, 1970c <att_exec_write_req+0x40>
	if (err) {
   196e8:	2c00      	cmp	r4, #0
   196ea:	f040 8085 	bne.w	197f8 <att_exec_write_req+0x12c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   196ee:	2119      	movs	r1, #25
   196f0:	9806      	ldr	r0, [sp, #24]
   196f2:	4622      	mov	r2, r4
   196f4:	f7ff ffb6 	bl	19664 <bt_att_create_pdu>
	if (!buf) {
   196f8:	4601      	mov	r1, r0
   196fa:	2800      	cmp	r0, #0
   196fc:	d06f      	beq.n	197de <att_exec_write_req+0x112>
	bt_att_chan_send_rsp(chan, buf);
   196fe:	4628      	mov	r0, r5
   19700:	f00f fe1d 	bl	2933e <bt_att_chan_send_rsp>
}
   19704:	4620      	mov	r0, r4
   19706:	b009      	add	sp, #36	; 0x24
   19708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1970c:	3024      	adds	r0, #36	; 0x24
   1970e:	f011 f98b 	bl	2aa28 <net_buf_slist_get>
   19712:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   19716:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1971a:	8982      	ldrh	r2, [r0, #12]
   1971c:	6881      	ldr	r1, [r0, #8]
   1971e:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   19720:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   19722:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   19724:	4836      	ldr	r0, [pc, #216]	; (19800 <att_exec_write_req+0x134>)
   19726:	603b      	str	r3, [r7, #0]
   19728:	f011 f9e2 	bl	2aaf0 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   1972c:	f8d5 8000 	ldr.w	r8, [r5]
	return list->head;
   19730:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   19734:	2c00      	cmp	r4, #0
   19736:	d054      	beq.n	197e2 <att_exec_write_req+0x116>
		err = exec_write_reassemble(handle, data->offset,
   19738:	8af3      	ldrh	r3, [r6, #22]
	return node->next;
   1973a:	f8d4 9000 	ldr.w	r9, [r4]
   1973e:	9307      	str	r3, [sp, #28]
   19740:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   19744:	8aa2      	ldrh	r2, [r4, #20]
   19746:	4552      	cmp	r2, sl
   19748:	d12f      	bne.n	197aa <att_exec_write_req+0xde>
			if (tmp_data->offset == 0) {
   1974a:	8ae2      	ldrh	r2, [r4, #22]
   1974c:	2a00      	cmp	r2, #0
   1974e:	d048      	beq.n	197e2 <att_exec_write_req+0x116>
			if (tmp_data->offset != buf->len + offset) {
   19750:	88b9      	ldrh	r1, [r7, #4]
   19752:	9b07      	ldr	r3, [sp, #28]
   19754:	1858      	adds	r0, r3, r1
   19756:	4282      	cmp	r2, r0
   19758:	d148      	bne.n	197ec <att_exec_write_req+0x120>
			if (buf->len + entry->len > buf->size) {
   1975a:	89a2      	ldrh	r2, [r4, #12]
   1975c:	88f8      	ldrh	r0, [r7, #6]
   1975e:	4411      	add	r1, r2
   19760:	4281      	cmp	r1, r0
   19762:	dc4b      	bgt.n	197fc <att_exec_write_req+0x130>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   19764:	68a1      	ldr	r1, [r4, #8]
   19766:	4638      	mov	r0, r7
   19768:	f011 f9c2 	bl	2aaf0 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1976c:	6822      	ldr	r2, [r4, #0]
   1976e:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   19772:	f1bb 0f00 	cmp.w	fp, #0
   19776:	d111      	bne.n	1979c <att_exec_write_req+0xd0>
   19778:	428c      	cmp	r4, r1
	list->head = node;
   1977a:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   1977e:	d101      	bne.n	19784 <att_exec_write_req+0xb8>
	list->tail = node;
   19780:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   19784:	2300      	movs	r3, #0
   19786:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   19788:	4620      	mov	r0, r4
   1978a:	f004 f9ed 	bl	1db68 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1978e:	f1b9 0f00 	cmp.w	r9, #0
   19792:	d026      	beq.n	197e2 <att_exec_write_req+0x116>
	return node->next;
   19794:	464c      	mov	r4, r9
   19796:	f8d9 9000 	ldr.w	r9, [r9]
   1979a:	e7d3      	b.n	19744 <att_exec_write_req+0x78>
Z_GENLIST_REMOVE(slist, snode)
   1979c:	428c      	cmp	r4, r1
	parent->next = child;
   1979e:	f8cb 2000 	str.w	r2, [fp]
	list->tail = node;
   197a2:	bf08      	it	eq
   197a4:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   197a8:	e7ec      	b.n	19784 <att_exec_write_req+0xb8>
			prev = &entry->node;
   197aa:	46a3      	mov	fp, r4
   197ac:	e7ef      	b.n	1978e <att_exec_write_req+0xc2>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   197ae:	88bb      	ldrh	r3, [r7, #4]
   197b0:	9302      	str	r3, [sp, #8]
   197b2:	683b      	ldr	r3, [r7, #0]
   197b4:	9301      	str	r3, [sp, #4]
   197b6:	8af3      	ldrh	r3, [r6, #22]
   197b8:	9300      	str	r3, [sp, #0]
   197ba:	2200      	movs	r2, #0
   197bc:	4653      	mov	r3, sl
   197be:	2118      	movs	r1, #24
   197c0:	4628      	mov	r0, r5
   197c2:	f7ff fe9d 	bl	19500 <att_write_rsp>
			if (err) {
   197c6:	4604      	mov	r4, r0
   197c8:	b128      	cbz	r0, 197d6 <att_exec_write_req+0x10a>
	if (!req) {
   197ca:	4603      	mov	r3, r0
   197cc:	8ab2      	ldrh	r2, [r6, #20]
   197ce:	2118      	movs	r1, #24
   197d0:	4628      	mov	r0, r5
   197d2:	f00f ffe8 	bl	297a6 <send_err_rsp.part.0>
		net_buf_unref(buf);
   197d6:	4630      	mov	r0, r6
   197d8:	f004 f9c6 	bl	1db68 <net_buf_unref>
   197dc:	e781      	b.n	196e2 <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   197de:	240e      	movs	r4, #14
   197e0:	e790      	b.n	19704 <att_exec_write_req+0x38>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   197e2:	9b05      	ldr	r3, [sp, #20]
   197e4:	2b01      	cmp	r3, #1
   197e6:	d0e2      	beq.n	197ae <att_exec_write_req+0xe2>
		err = exec_write_reassemble(handle, data->offset,
   197e8:	2400      	movs	r4, #0
   197ea:	e7f4      	b.n	197d6 <att_exec_write_req+0x10a>
				return BT_ATT_ERR_INVALID_OFFSET;
   197ec:	2307      	movs	r3, #7
	if (!req) {
   197ee:	4652      	mov	r2, sl
   197f0:	2118      	movs	r1, #24
   197f2:	4628      	mov	r0, r5
   197f4:	f00f ffd7 	bl	297a6 <send_err_rsp.part.0>
			return 0;
   197f8:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   197fa:	e783      	b.n	19704 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   197fc:	230d      	movs	r3, #13
   197fe:	e7f6      	b.n	197ee <att_exec_write_req+0x122>
   19800:	200006f0 	.word	0x200006f0

00019804 <att_prepare_write_req>:
{
   19804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19808:	460c      	mov	r4, r1
   1980a:	b087      	sub	sp, #28
   1980c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1980e:	2104      	movs	r1, #4
   19810:	f104 0008 	add.w	r0, r4, #8
   19814:	f011 f98d 	bl	2ab32 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   19818:	f8d5 b004 	ldr.w	fp, [r5, #4]
	handle = sys_le16_to_cpu(req->handle);
   1981c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   19820:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   19824:	f8d4 8008 	ldr.w	r8, [r4, #8]
   19828:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   1982a:	2101      	movs	r1, #1
   1982c:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   1982e:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   19832:	f010 fc25 	bl	2a080 <bt_gatt_change_aware>
   19836:	b960      	cbnz	r0, 19852 <att_prepare_write_req+0x4e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19838:	2105      	movs	r1, #5
   1983a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1983e:	f00f fda4 	bl	2938a <atomic_test_and_set_bit>
			return 0;
   19842:	2800      	cmp	r0, #0
   19844:	bf0c      	ite	eq
   19846:	2412      	moveq	r4, #18
   19848:	2400      	movne	r4, #0
}
   1984a:	4620      	mov	r0, r4
   1984c:	b007      	add	sp, #28
   1984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   19852:	2e00      	cmp	r6, #0
   19854:	d045      	beq.n	198e2 <att_prepare_write_req+0xde>
	(void)memset(&data, 0, sizeof(data));
   19856:	2210      	movs	r2, #16
   19858:	2100      	movs	r1, #0
   1985a:	a802      	add	r0, sp, #8
   1985c:	f012 fbd8 	bl	2c010 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19860:	2301      	movs	r3, #1
   19862:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   19866:	4a21      	ldr	r2, [pc, #132]	; (198ec <att_prepare_write_req+0xe8>)
	data.conn = conn;
   19868:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   1986c:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1986e:	ab01      	add	r3, sp, #4
   19870:	4631      	mov	r1, r6
   19872:	4630      	mov	r0, r6
	data.offset = offset;
   19874:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   19878:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   1987c:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   19880:	f00f fc5a 	bl	29138 <bt_gatt_foreach_attr>
	if (data.err) {
   19884:	f89d 4014 	ldrb.w	r4, [sp, #20]
   19888:	b13c      	cbz	r4, 1989a <att_prepare_write_req+0x96>
	if (!req) {
   1988a:	4623      	mov	r3, r4
   1988c:	4632      	mov	r2, r6
   1988e:	2116      	movs	r1, #22
   19890:	4628      	mov	r0, r5
   19892:	f00f ff88 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   19896:	2400      	movs	r4, #0
   19898:	e7d7      	b.n	1984a <att_prepare_write_req+0x46>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   1989a:	6828      	ldr	r0, [r5, #0]
   1989c:	9902      	ldr	r1, [sp, #8]
   1989e:	3024      	adds	r0, #36	; 0x24
   198a0:	f011 f8a4 	bl	2a9ec <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   198a4:	4622      	mov	r2, r4
   198a6:	2117      	movs	r1, #23
   198a8:	4658      	mov	r0, fp
   198aa:	f7ff fedb 	bl	19664 <bt_att_create_pdu>
   198ae:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   198b0:	b1c8      	cbz	r0, 198e6 <att_prepare_write_req+0xe2>
	return net_buf_simple_add(&buf->b, len);
   198b2:	2104      	movs	r1, #4
   198b4:	3008      	adds	r0, #8
   198b6:	f011 f915 	bl	2aae4 <net_buf_simple_add>
   198ba:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   198bc:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   198c0:	f8a0 9002 	strh.w	r9, [r0, #2]
   198c4:	9802      	ldr	r0, [sp, #8]
   198c6:	4639      	mov	r1, r7
   198c8:	3008      	adds	r0, #8
   198ca:	f011 f90b 	bl	2aae4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   198ce:	4641      	mov	r1, r8
   198d0:	463a      	mov	r2, r7
   198d2:	1d30      	adds	r0, r6, #4
   198d4:	f012 fb7b 	bl	2bfce <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   198d8:	9902      	ldr	r1, [sp, #8]
   198da:	4628      	mov	r0, r5
   198dc:	f00f fd2f 	bl	2933e <bt_att_chan_send_rsp>
	return 0;
   198e0:	e7b3      	b.n	1984a <att_prepare_write_req+0x46>
		return BT_ATT_ERR_INVALID_HANDLE;
   198e2:	2401      	movs	r4, #1
   198e4:	e7b1      	b.n	1984a <att_prepare_write_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   198e6:	240e      	movs	r4, #14
   198e8:	e7af      	b.n	1984a <att_prepare_write_req+0x46>
   198ea:	bf00      	nop
   198ec:	00019259 	.word	0x00019259

000198f0 <att_read_group_req>:
{
   198f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   198f4:	898c      	ldrh	r4, [r1, #12]
   198f6:	3c04      	subs	r4, #4
   198f8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   198fa:	2c02      	cmp	r4, #2
{
   198fc:	4605      	mov	r5, r0
   198fe:	b08c      	sub	sp, #48	; 0x30
   19900:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19902:	d001      	beq.n	19908 <att_read_group_req+0x18>
   19904:	2c10      	cmp	r4, #16
   19906:	d172      	bne.n	199ee <att_read_group_req+0xfe>
	return net_buf_simple_pull_mem(&buf->b, len);
   19908:	2104      	movs	r1, #4
   1990a:	3008      	adds	r0, #8
   1990c:	f011 f911 	bl	2ab32 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19910:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19914:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19916:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19918:	1d01      	adds	r1, r0, #4
   1991a:	4622      	mov	r2, r4
   1991c:	4640      	mov	r0, r8
   1991e:	f00e ffbb 	bl	28898 <bt_uuid_create>
   19922:	2800      	cmp	r0, #0
   19924:	d065      	beq.n	199f2 <att_read_group_req+0x102>
	if (!start || !end) {
   19926:	2e00      	cmp	r6, #0
   19928:	d03e      	beq.n	199a8 <att_read_group_req+0xb8>
   1992a:	2400      	movs	r4, #0
   1992c:	2f00      	cmp	r7, #0
   1992e:	d03a      	beq.n	199a6 <att_read_group_req+0xb6>
	if (start > end) {
   19930:	42b7      	cmp	r7, r6
   19932:	d339      	bcc.n	199a8 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19934:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19938:	a901      	add	r1, sp, #4
   1993a:	4640      	mov	r0, r8
   1993c:	f88d 4004 	strb.w	r4, [sp, #4]
   19940:	f8ad 3006 	strh.w	r3, [sp, #6]
   19944:	f00e ff7a 	bl	2883c <bt_uuid_cmp>
   19948:	2800      	cmp	r0, #0
   1994a:	d138      	bne.n	199be <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   1994c:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1994e:	2214      	movs	r2, #20
   19950:	2100      	movs	r1, #0
   19952:	a807      	add	r0, sp, #28
   19954:	f012 fb5c 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19958:	2201      	movs	r2, #1
   1995a:	2111      	movs	r1, #17
   1995c:	4620      	mov	r0, r4
   1995e:	f7ff fe81 	bl	19664 <bt_att_create_pdu>
   19962:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19964:	2800      	cmp	r0, #0
   19966:	d044      	beq.n	199f2 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   19968:	2101      	movs	r1, #1
   1996a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1996c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   19970:	f011 f8b8 	bl	2aae4 <net_buf_simple_add>
	data.rsp->len = 0U;
   19974:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19978:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1997a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1997c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19980:	4a1d      	ldr	r2, [pc, #116]	; (199f8 <att_read_group_req+0x108>)
	data.group = NULL;
   19982:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19986:	4639      	mov	r1, r7
   19988:	4630      	mov	r0, r6
   1998a:	f00f fbd5 	bl	29138 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1998e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19990:	781c      	ldrb	r4, [r3, #0]
   19992:	bb3c      	cbnz	r4, 199e4 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19994:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19996:	6958      	ldr	r0, [r3, #20]
   19998:	f7ff f9ac 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1999c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1999e:	f004 f8e3 	bl	1db68 <net_buf_unref>
	if (!req) {
   199a2:	230a      	movs	r3, #10
   199a4:	e018      	b.n	199d8 <att_read_group_req+0xe8>
			*err = 0U;
   199a6:	463e      	mov	r6, r7
	if (!req) {
   199a8:	2301      	movs	r3, #1
   199aa:	4632      	mov	r2, r6
   199ac:	2110      	movs	r1, #16
   199ae:	4628      	mov	r0, r5
   199b0:	f00f fef9 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   199b4:	2400      	movs	r4, #0
}
   199b6:	4620      	mov	r0, r4
   199b8:	b00c      	add	sp, #48	; 0x30
   199ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   199be:	f642 0301 	movw	r3, #10241	; 0x2801
   199c2:	a907      	add	r1, sp, #28
   199c4:	4640      	mov	r0, r8
   199c6:	f88d 401c 	strb.w	r4, [sp, #28]
   199ca:	f8ad 301e 	strh.w	r3, [sp, #30]
   199ce:	f00e ff35 	bl	2883c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   199d2:	2800      	cmp	r0, #0
   199d4:	d0ba      	beq.n	1994c <att_read_group_req+0x5c>
	if (!req) {
   199d6:	2310      	movs	r3, #16
   199d8:	4632      	mov	r2, r6
   199da:	2110      	movs	r1, #16
   199dc:	4628      	mov	r0, r5
   199de:	f00f fee2 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   199e2:	e7e8      	b.n	199b6 <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   199e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   199e6:	4628      	mov	r0, r5
   199e8:	f00f fca9 	bl	2933e <bt_att_chan_send_rsp>
	return 0;
   199ec:	e7e2      	b.n	199b4 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   199ee:	2404      	movs	r4, #4
   199f0:	e7e1      	b.n	199b6 <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   199f2:	240e      	movs	r4, #14
   199f4:	e7df      	b.n	199b6 <att_read_group_req+0xc6>
   199f6:	bf00      	nop
   199f8:	00018ff5 	.word	0x00018ff5

000199fc <att_read_mult_vl_req>:
{
   199fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19a00:	6846      	ldr	r6, [r0, #4]
{
   19a02:	b085      	sub	sp, #20
   19a04:	4604      	mov	r4, r0
   19a06:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19a08:	4630      	mov	r0, r6
   19a0a:	2101      	movs	r1, #1
   19a0c:	f010 fb38 	bl	2a080 <bt_gatt_change_aware>
   19a10:	b958      	cbnz	r0, 19a2a <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19a12:	2105      	movs	r1, #5
   19a14:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19a18:	f00f fcb7 	bl	2938a <atomic_test_and_set_bit>
			return 0;
   19a1c:	2800      	cmp	r0, #0
   19a1e:	bf0c      	ite	eq
   19a20:	2012      	moveq	r0, #18
   19a22:	2000      	movne	r0, #0
}
   19a24:	b005      	add	sp, #20
   19a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19a2a:	2210      	movs	r2, #16
   19a2c:	2100      	movs	r1, #0
   19a2e:	4668      	mov	r0, sp
   19a30:	f012 faee 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19a34:	2200      	movs	r2, #0
   19a36:	2121      	movs	r1, #33	; 0x21
   19a38:	4630      	mov	r0, r6
   19a3a:	f7ff fe13 	bl	19664 <bt_att_create_pdu>
   19a3e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19a40:	b368      	cbz	r0, 19a9e <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a42:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19aa4 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   19a46:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19a48:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a4c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19a50:	89ab      	ldrh	r3, [r5, #12]
   19a52:	2b01      	cmp	r3, #1
   19a54:	d804      	bhi.n	19a60 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19a56:	9902      	ldr	r1, [sp, #8]
   19a58:	4620      	mov	r0, r4
   19a5a:	f00f fc70 	bl	2933e <bt_att_chan_send_rsp>
   19a5e:	e01c      	b.n	19a9a <att_read_mult_vl_req+0x9e>
   19a60:	4638      	mov	r0, r7
   19a62:	f011 f876 	bl	2ab52 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a66:	466b      	mov	r3, sp
   19a68:	464a      	mov	r2, r9
   19a6a:	4601      	mov	r1, r0
   19a6c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a6e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a72:	f00f fb61 	bl	29138 <bt_gatt_foreach_attr>
		if (data.err) {
   19a76:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a7a:	2b00      	cmp	r3, #0
   19a7c:	d0e8      	beq.n	19a50 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19a7e:	9b02      	ldr	r3, [sp, #8]
   19a80:	6958      	ldr	r0, [r3, #20]
   19a82:	f7ff f937 	bl	18cf4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19a86:	9802      	ldr	r0, [sp, #8]
   19a88:	f004 f86e 	bl	1db68 <net_buf_unref>
	if (!req) {
   19a8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a90:	4632      	mov	r2, r6
   19a92:	2120      	movs	r1, #32
   19a94:	4620      	mov	r0, r4
   19a96:	f00f fe86 	bl	297a6 <send_err_rsp.part.0>
	return 0;
   19a9a:	2000      	movs	r0, #0
   19a9c:	e7c2      	b.n	19a24 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   19a9e:	200e      	movs	r0, #14
   19aa0:	e7c0      	b.n	19a24 <att_read_mult_vl_req+0x28>
   19aa2:	bf00      	nop
   19aa4:	0002951f 	.word	0x0002951f

00019aa8 <att_read_mult_req>:
{
   19aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19aac:	6846      	ldr	r6, [r0, #4]
{
   19aae:	b085      	sub	sp, #20
   19ab0:	4604      	mov	r4, r0
   19ab2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19ab4:	4630      	mov	r0, r6
   19ab6:	2101      	movs	r1, #1
   19ab8:	f010 fae2 	bl	2a080 <bt_gatt_change_aware>
   19abc:	b958      	cbnz	r0, 19ad6 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19abe:	2105      	movs	r1, #5
   19ac0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19ac4:	f00f fc61 	bl	2938a <atomic_test_and_set_bit>
			return 0;
   19ac8:	2800      	cmp	r0, #0
   19aca:	bf0c      	ite	eq
   19acc:	2012      	moveq	r0, #18
   19ace:	2000      	movne	r0, #0
}
   19ad0:	b005      	add	sp, #20
   19ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19ad6:	2210      	movs	r2, #16
   19ad8:	2100      	movs	r1, #0
   19ada:	4668      	mov	r0, sp
   19adc:	f012 fa98 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19ae0:	2200      	movs	r2, #0
   19ae2:	210f      	movs	r1, #15
   19ae4:	4630      	mov	r0, r6
   19ae6:	f7ff fdbd 	bl	19664 <bt_att_create_pdu>
   19aea:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19aec:	b368      	cbz	r0, 19b4a <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19aee:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19b50 <att_read_mult_req+0xa8>
	data.chan = chan;
   19af2:	9400      	str	r4, [sp, #0]
   19af4:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19af8:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19afc:	89ab      	ldrh	r3, [r5, #12]
   19afe:	2b01      	cmp	r3, #1
   19b00:	d804      	bhi.n	19b0c <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19b02:	9902      	ldr	r1, [sp, #8]
   19b04:	4620      	mov	r0, r4
   19b06:	f00f fc1a 	bl	2933e <bt_att_chan_send_rsp>
   19b0a:	e01c      	b.n	19b46 <att_read_mult_req+0x9e>
   19b0c:	4638      	mov	r0, r7
   19b0e:	f011 f820 	bl	2ab52 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19b12:	466b      	mov	r3, sp
   19b14:	464a      	mov	r2, r9
   19b16:	4601      	mov	r1, r0
   19b18:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19b1a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19b1e:	f00f fb0b 	bl	29138 <bt_gatt_foreach_attr>
		if (data.err) {
   19b22:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b26:	2b00      	cmp	r3, #0
   19b28:	d0e8      	beq.n	19afc <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19b2a:	9b02      	ldr	r3, [sp, #8]
   19b2c:	6958      	ldr	r0, [r3, #20]
   19b2e:	f7ff f8e1 	bl	18cf4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19b32:	9802      	ldr	r0, [sp, #8]
   19b34:	f004 f818 	bl	1db68 <net_buf_unref>
	if (!req) {
   19b38:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b3c:	4632      	mov	r2, r6
   19b3e:	210e      	movs	r1, #14
   19b40:	4620      	mov	r0, r4
   19b42:	f00f fe30 	bl	297a6 <send_err_rsp.part.0>
	return 0;
   19b46:	2000      	movs	r0, #0
   19b48:	e7c2      	b.n	19ad0 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   19b4a:	200e      	movs	r0, #14
   19b4c:	e7c0      	b.n	19ad0 <att_read_mult_req+0x28>
   19b4e:	bf00      	nop
   19b50:	000294cb 	.word	0x000294cb

00019b54 <att_read_rsp>:
{
   19b54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19b58:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   19b5c:	4604      	mov	r4, r0
   19b5e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19b60:	4640      	mov	r0, r8
   19b62:	2101      	movs	r1, #1
{
   19b64:	4615      	mov	r5, r2
   19b66:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19b68:	f010 fa8a 	bl	2a080 <bt_gatt_change_aware>
   19b6c:	b960      	cbnz	r0, 19b88 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19b6e:	2105      	movs	r1, #5
   19b70:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19b74:	f00f fc09 	bl	2938a <atomic_test_and_set_bit>
			return 0;
   19b78:	2800      	cmp	r0, #0
   19b7a:	bf0c      	ite	eq
   19b7c:	2512      	moveq	r5, #18
   19b7e:	2500      	movne	r5, #0
}
   19b80:	4628      	mov	r0, r5
   19b82:	b004      	add	sp, #16
   19b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19b88:	b38e      	cbz	r6, 19bee <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   19b8a:	2210      	movs	r2, #16
   19b8c:	2100      	movs	r1, #0
   19b8e:	4668      	mov	r0, sp
   19b90:	f012 fa3e 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19b94:	2200      	movs	r2, #0
   19b96:	4629      	mov	r1, r5
   19b98:	4640      	mov	r0, r8
   19b9a:	f7ff fd63 	bl	19664 <bt_att_create_pdu>
   19b9e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19ba0:	b338      	cbz	r0, 19bf2 <att_read_rsp+0x9e>
	data.offset = offset;
   19ba2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19ba6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19baa:	2301      	movs	r3, #1
   19bac:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19bb0:	4a11      	ldr	r2, [pc, #68]	; (19bf8 <att_read_rsp+0xa4>)
	data.chan = chan;
   19bb2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19bb4:	466b      	mov	r3, sp
   19bb6:	4631      	mov	r1, r6
   19bb8:	4630      	mov	r0, r6
   19bba:	f00f fabd 	bl	29138 <bt_gatt_foreach_attr>
	if (data.err) {
   19bbe:	f89d 500c 	ldrb.w	r5, [sp, #12]
   19bc2:	b17d      	cbz	r5, 19be4 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19bc4:	9b02      	ldr	r3, [sp, #8]
   19bc6:	6958      	ldr	r0, [r3, #20]
   19bc8:	f7ff f894 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19bcc:	9802      	ldr	r0, [sp, #8]
   19bce:	f003 ffcb 	bl	1db68 <net_buf_unref>
	if (!req) {
   19bd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19bd6:	4632      	mov	r2, r6
   19bd8:	4639      	mov	r1, r7
   19bda:	4620      	mov	r0, r4
   19bdc:	f00f fde3 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   19be0:	2500      	movs	r5, #0
   19be2:	e7cd      	b.n	19b80 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   19be4:	9902      	ldr	r1, [sp, #8]
   19be6:	4620      	mov	r0, r4
   19be8:	f00f fba9 	bl	2933e <bt_att_chan_send_rsp>
	return 0;
   19bec:	e7c8      	b.n	19b80 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19bee:	2501      	movs	r5, #1
   19bf0:	e7c6      	b.n	19b80 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   19bf2:	250e      	movs	r5, #14
   19bf4:	e7c4      	b.n	19b80 <att_read_rsp+0x2c>
   19bf6:	bf00      	nop
   19bf8:	000294cb 	.word	0x000294cb

00019bfc <att_read_type_req>:
{
   19bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19c00:	898c      	ldrh	r4, [r1, #12]
   19c02:	3c04      	subs	r4, #4
   19c04:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19c06:	2c02      	cmp	r4, #2
{
   19c08:	4605      	mov	r5, r0
   19c0a:	b08c      	sub	sp, #48	; 0x30
   19c0c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19c0e:	d001      	beq.n	19c14 <att_read_type_req+0x18>
   19c10:	2c10      	cmp	r4, #16
   19c12:	d153      	bne.n	19cbc <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   19c14:	2104      	movs	r1, #4
   19c16:	3008      	adds	r0, #8
   19c18:	f010 ff8b 	bl	2ab32 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19c1c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19c20:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19c22:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19c24:	1d01      	adds	r1, r0, #4
   19c26:	4622      	mov	r2, r4
   19c28:	4640      	mov	r0, r8
   19c2a:	f00e fe35 	bl	28898 <bt_uuid_create>
   19c2e:	b188      	cbz	r0, 19c54 <att_read_type_req+0x58>
	if (!start || !end) {
   19c30:	b19e      	cbz	r6, 19c5a <att_read_type_req+0x5e>
   19c32:	b18f      	cbz	r7, 19c58 <att_read_type_req+0x5c>
	if (start > end) {
   19c34:	42b7      	cmp	r7, r6
   19c36:	d310      	bcc.n	19c5a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19c38:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19c3a:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19c3c:	2100      	movs	r1, #0
   19c3e:	eb0d 0002 	add.w	r0, sp, r2
   19c42:	f012 f9e5 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19c46:	2201      	movs	r2, #1
   19c48:	2109      	movs	r1, #9
   19c4a:	4620      	mov	r0, r4
   19c4c:	f7ff fd0a 	bl	19664 <bt_att_create_pdu>
   19c50:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19c52:	b968      	cbnz	r0, 19c70 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19c54:	240e      	movs	r4, #14
   19c56:	e007      	b.n	19c68 <att_read_type_req+0x6c>
			*err = 0U;
   19c58:	463e      	mov	r6, r7
	if (!req) {
   19c5a:	2301      	movs	r3, #1
   19c5c:	4632      	mov	r2, r6
   19c5e:	2108      	movs	r1, #8
   19c60:	4628      	mov	r0, r5
   19c62:	f00f fda0 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   19c66:	2400      	movs	r4, #0
}
   19c68:	4620      	mov	r0, r4
   19c6a:	b00c      	add	sp, #48	; 0x30
   19c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19c70:	2101      	movs	r1, #1
   19c72:	3008      	adds	r0, #8
	data.uuid = uuid;
   19c74:	e9cd 5806 	strd	r5, r8, [sp, #24]
   19c78:	f010 ff34 	bl	2aae4 <net_buf_simple_add>
	data.rsp->len = 0U;
   19c7c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19c80:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19c82:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19c84:	4a0e      	ldr	r2, [pc, #56]	; (19cc0 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   19c86:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19c8a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19c8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19c90:	4630      	mov	r0, r6
   19c92:	ab06      	add	r3, sp, #24
   19c94:	f00f fa50 	bl	29138 <bt_gatt_foreach_attr>
	if (data.err) {
   19c98:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19c9c:	b14c      	cbz	r4, 19cb2 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19c9e:	9b08      	ldr	r3, [sp, #32]
   19ca0:	6958      	ldr	r0, [r3, #20]
   19ca2:	f7ff f827 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19ca6:	9808      	ldr	r0, [sp, #32]
   19ca8:	f003 ff5e 	bl	1db68 <net_buf_unref>
	if (!req) {
   19cac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19cb0:	e7d4      	b.n	19c5c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   19cb2:	9908      	ldr	r1, [sp, #32]
   19cb4:	4628      	mov	r0, r5
   19cb6:	f00f fb42 	bl	2933e <bt_att_chan_send_rsp>
	return 0;
   19cba:	e7d5      	b.n	19c68 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19cbc:	2404      	movs	r4, #4
   19cbe:	e7d3      	b.n	19c68 <att_read_type_req+0x6c>
   19cc0:	000191b1 	.word	0x000191b1

00019cc4 <att_find_type_req>:
{
   19cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19cc8:	4688      	mov	r8, r1
   19cca:	b086      	sub	sp, #24
   19ccc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19cce:	2106      	movs	r1, #6
   19cd0:	f108 0008 	add.w	r0, r8, #8
   19cd4:	f010 ff2d 	bl	2ab32 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19cd8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   19cda:	b317      	cbz	r7, 19d22 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19cdc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19ce0:	f1b9 0f00 	cmp.w	r9, #0
   19ce4:	d01c      	beq.n	19d20 <att_find_type_req+0x5c>
	if (start > end) {
   19ce6:	454f      	cmp	r7, r9
   19ce8:	d81b      	bhi.n	19d22 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   19cea:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19cec:	f8ad 3002 	strh.w	r3, [sp, #2]
   19cf0:	2400      	movs	r4, #0
   19cf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19cf6:	a901      	add	r1, sp, #4
   19cf8:	4668      	mov	r0, sp
	value = buf->data;
   19cfa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19cfe:	f88d 4000 	strb.w	r4, [sp]
   19d02:	f88d 4004 	strb.w	r4, [sp, #4]
   19d06:	f8ad 3006 	strh.w	r3, [sp, #6]
   19d0a:	f00e fd97 	bl	2883c <bt_uuid_cmp>
   19d0e:	4606      	mov	r6, r0
   19d10:	b190      	cbz	r0, 19d38 <att_find_type_req+0x74>
	if (!req) {
   19d12:	230a      	movs	r3, #10
   19d14:	463a      	mov	r2, r7
   19d16:	2106      	movs	r1, #6
   19d18:	4628      	mov	r0, r5
   19d1a:	f00f fd44 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   19d1e:	e007      	b.n	19d30 <att_find_type_req+0x6c>
			*err = 0U;
   19d20:	464f      	mov	r7, r9
	if (!req) {
   19d22:	2301      	movs	r3, #1
   19d24:	463a      	mov	r2, r7
   19d26:	2106      	movs	r1, #6
   19d28:	4628      	mov	r0, r5
   19d2a:	f00f fd3c 	bl	297a6 <send_err_rsp.part.0>
		return 0;
   19d2e:	2400      	movs	r4, #0
}
   19d30:	4620      	mov	r0, r4
   19d32:	b006      	add	sp, #24
   19d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19d38:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19d3c:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19d40:	4601      	mov	r1, r0
   19d42:	2214      	movs	r2, #20
   19d44:	a801      	add	r0, sp, #4
   19d46:	f012 f963 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19d4a:	4632      	mov	r2, r6
   19d4c:	2107      	movs	r1, #7
   19d4e:	4640      	mov	r0, r8
   19d50:	f7ff fc88 	bl	19664 <bt_att_create_pdu>
   19d54:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19d56:	b1f8      	cbz	r0, 19d98 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d58:	230a      	movs	r3, #10
   19d5a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d5e:	4a0f      	ldr	r2, [pc, #60]	; (19d9c <att_find_type_req+0xd8>)
	data.value_len = value_len;
   19d60:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d64:	ab01      	add	r3, sp, #4
   19d66:	4649      	mov	r1, r9
   19d68:	4638      	mov	r0, r7
	data.value = value;
   19d6a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19d6e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d70:	f00f f9e2 	bl	29138 <bt_gatt_foreach_attr>
	if (data.err) {
   19d74:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19d78:	b14c      	cbz	r4, 19d8e <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19d7a:	9b02      	ldr	r3, [sp, #8]
   19d7c:	6958      	ldr	r0, [r3, #20]
   19d7e:	f7fe ffb9 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19d82:	9802      	ldr	r0, [sp, #8]
   19d84:	f003 fef0 	bl	1db68 <net_buf_unref>
	if (!req) {
   19d88:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19d8c:	e7ca      	b.n	19d24 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   19d8e:	9902      	ldr	r1, [sp, #8]
   19d90:	4628      	mov	r0, r5
   19d92:	f00f fad4 	bl	2933e <bt_att_chan_send_rsp>
	return 0;
   19d96:	e7cb      	b.n	19d30 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19d98:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19d9a:	e7c9      	b.n	19d30 <att_find_type_req+0x6c>
   19d9c:	00018d11 	.word	0x00018d11

00019da0 <att_find_info_req>:
{
   19da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   19da2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   19da4:	881e      	ldrh	r6, [r3, #0]
{
   19da6:	b085      	sub	sp, #20
   19da8:	4605      	mov	r5, r0
	if (!start || !end) {
   19daa:	b19e      	cbz	r6, 19dd4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19dac:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19dae:	b184      	cbz	r4, 19dd2 <att_find_info_req+0x32>
	if (start > end) {
   19db0:	42a6      	cmp	r6, r4
   19db2:	d80f      	bhi.n	19dd4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   19db4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   19db6:	2210      	movs	r2, #16
   19db8:	2100      	movs	r1, #0
   19dba:	4668      	mov	r0, sp
   19dbc:	f012 f928 	bl	2c010 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19dc0:	2200      	movs	r2, #0
   19dc2:	2105      	movs	r1, #5
   19dc4:	4638      	mov	r0, r7
   19dc6:	f7ff fc4d 	bl	19664 <bt_att_create_pdu>
   19dca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19dcc:	b958      	cbnz	r0, 19de6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19dce:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19dd0:	e007      	b.n	19de2 <att_find_info_req+0x42>
			*err = 0U;
   19dd2:	4626      	mov	r6, r4
	if (!req) {
   19dd4:	2301      	movs	r3, #1
   19dd6:	4632      	mov	r2, r6
   19dd8:	2104      	movs	r1, #4
   19dda:	4628      	mov	r0, r5
   19ddc:	f00f fce3 	bl	297a6 <send_err_rsp.part.0>
	return 0;
   19de0:	2000      	movs	r0, #0
}
   19de2:	b005      	add	sp, #20
   19de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19de6:	4621      	mov	r1, r4
   19de8:	4a0a      	ldr	r2, [pc, #40]	; (19e14 <att_find_info_req+0x74>)
	data.chan = chan;
   19dea:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19dec:	466b      	mov	r3, sp
   19dee:	4630      	mov	r0, r6
   19df0:	f00f f9a2 	bl	29138 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19df4:	9c02      	ldr	r4, [sp, #8]
   19df6:	b944      	cbnz	r4, 19e0a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19df8:	9b01      	ldr	r3, [sp, #4]
   19dfa:	6958      	ldr	r0, [r3, #20]
   19dfc:	f7fe ff7a 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19e00:	9801      	ldr	r0, [sp, #4]
   19e02:	f003 feb1 	bl	1db68 <net_buf_unref>
	if (!req) {
   19e06:	230a      	movs	r3, #10
   19e08:	e7e5      	b.n	19dd6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   19e0a:	9901      	ldr	r1, [sp, #4]
   19e0c:	4628      	mov	r0, r5
   19e0e:	f00f fa96 	bl	2933e <bt_att_chan_send_rsp>
   19e12:	e7e5      	b.n	19de0 <att_find_info_req+0x40>
   19e14:	00029235 	.word	0x00029235

00019e18 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   19e18:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   19e1a:	4d0a      	ldr	r5, [pc, #40]	; (19e44 <bt_att_init+0x2c>)
   19e1c:	4c0a      	ldr	r4, [pc, #40]	; (19e48 <bt_att_init+0x30>)
   19e1e:	4629      	mov	r1, r5
   19e20:	4620      	mov	r0, r4
   19e22:	f011 fc65 	bl	2b6f0 <k_queue_append>
   19e26:	f105 0114 	add.w	r1, r5, #20
   19e2a:	4620      	mov	r0, r4
   19e2c:	f011 fc60 	bl	2b6f0 <k_queue_append>
   19e30:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19e34:	4620      	mov	r0, r4
   19e36:	f011 fc5b 	bl	2b6f0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   19e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   19e3e:	f000 bddf 	b.w	1aa00 <bt_gatt_init>
   19e42:	bf00      	nop
   19e44:	20002ed0 	.word	0x20002ed0
   19e48:	20000ba4 	.word	0x20000ba4

00019e4c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   19e4e:	2300      	movs	r3, #0
{
   19e50:	4605      	mov	r5, r0
   19e52:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19e54:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   19e56:	f008 fb7d 	bl	22554 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   19e5a:	4b0b      	ldr	r3, [pc, #44]	; (19e88 <bt_att_req_alloc+0x3c>)
   19e5c:	681b      	ldr	r3, [r3, #0]
   19e5e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   19e60:	bf04      	itt	eq
   19e62:	2500      	moveq	r5, #0
   19e64:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19e66:	a901      	add	r1, sp, #4
   19e68:	4808      	ldr	r0, [pc, #32]	; (19e8c <bt_att_req_alloc+0x40>)
   19e6a:	462a      	mov	r2, r5
   19e6c:	4623      	mov	r3, r4
   19e6e:	f007 fc4b 	bl	21708 <k_mem_slab_alloc>
   19e72:	4601      	mov	r1, r0
   19e74:	b930      	cbnz	r0, 19e84 <bt_att_req_alloc+0x38>
__ssp_bos_icheck3(memset, void *, int)
   19e76:	9801      	ldr	r0, [sp, #4]
   19e78:	221c      	movs	r2, #28
   19e7a:	f012 f8c9 	bl	2c010 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   19e7e:	9801      	ldr	r0, [sp, #4]
}
   19e80:	b003      	add	sp, #12
   19e82:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19e84:	2000      	movs	r0, #0
   19e86:	e7fb      	b.n	19e80 <bt_att_req_alloc+0x34>
   19e88:	20002eb0 	.word	0x20002eb0
   19e8c:	20000a90 	.word	0x20000a90

00019e90 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19e90:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   19e92:	6883      	ldr	r3, [r0, #8]
{
   19e94:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   19e96:	b14b      	cbz	r3, 19eac <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   19e98:	6958      	ldr	r0, [r3, #20]
   19e9a:	f7fe ff2b 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   19e9e:	9b01      	ldr	r3, [sp, #4]
   19ea0:	6898      	ldr	r0, [r3, #8]
   19ea2:	f003 fe61 	bl	1db68 <net_buf_unref>
		req->buf = NULL;
   19ea6:	9b01      	ldr	r3, [sp, #4]
   19ea8:	2200      	movs	r2, #0
   19eaa:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19eac:	4803      	ldr	r0, [pc, #12]	; (19ebc <bt_att_req_free+0x2c>)
   19eae:	a901      	add	r1, sp, #4
   19eb0:	f011 fb56 	bl	2b560 <k_mem_slab_free>
}
   19eb4:	b003      	add	sp, #12
   19eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   19eba:	bf00      	nop
   19ebc:	20000a90 	.word	0x20000a90

00019ec0 <att_handle_rsp>:
{
   19ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ec4:	4604      	mov	r4, r0
   19ec6:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
   19ec8:	30b0      	adds	r0, #176	; 0xb0
{
   19eca:	4689      	mov	r9, r1
   19ecc:	4692      	mov	sl, r2
   19ece:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19ed0:	f011 fd31 	bl	2b936 <k_work_cancel_delayable>
	if (!chan->req) {
   19ed4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   19ed8:	b9d5      	cbnz	r5, 19f10 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
   19eda:	4b17      	ldr	r3, [pc, #92]	; (19f38 <att_handle_rsp+0x78>)
   19edc:	9307      	str	r3, [sp, #28]
   19ede:	4817      	ldr	r0, [pc, #92]	; (19f3c <att_handle_rsp+0x7c>)
   19ee0:	2302      	movs	r3, #2
   19ee2:	aa06      	add	r2, sp, #24
   19ee4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   19ee8:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
   19eea:	9306      	str	r3, [sp, #24]
   19eec:	f00f f9f1 	bl	292d2 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   19ef0:	6820      	ldr	r0, [r4, #0]
   19ef2:	f00f fb82 	bl	295fa <att_req_send_process>
	if (func) {
   19ef6:	b13e      	cbz	r6, 19f08 <att_handle_rsp+0x48>
		func(chan->att->conn, err, pdu, len, params);
   19ef8:	6820      	ldr	r0, [r4, #0]
   19efa:	f8cd b000 	str.w	fp, [sp]
   19efe:	6800      	ldr	r0, [r0, #0]
   19f00:	4653      	mov	r3, sl
   19f02:	464a      	mov	r2, r9
   19f04:	4641      	mov	r1, r8
   19f06:	47b0      	blx	r6
}
   19f08:	2000      	movs	r0, #0
   19f0a:	b009      	add	sp, #36	; 0x24
   19f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19f10:	4b0b      	ldr	r3, [pc, #44]	; (19f40 <att_handle_rsp+0x80>)
   19f12:	429d      	cmp	r5, r3
   19f14:	f04f 0700 	mov.w	r7, #0
   19f18:	d103      	bne.n	19f22 <att_handle_rsp+0x62>
		chan->req = NULL;
   19f1a:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   19f1e:	463e      	mov	r6, r7
		goto process;
   19f20:	e7e6      	b.n	19ef0 <att_handle_rsp+0x30>
	func = chan->req->func;
   19f22:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19f24:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   19f26:	4628      	mov	r0, r5
	params = chan->req->user_data;
   19f28:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19f2c:	f7ff ffb0 	bl	19e90 <bt_att_req_free>
	chan->req = NULL;
   19f30:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
   19f34:	e7dc      	b.n	19ef0 <att_handle_rsp+0x30>
   19f36:	bf00      	nop
   19f38:	0002f162 	.word	0x0002f162
   19f3c:	0002c77c 	.word	0x0002c77c
   19f40:	20002eb4 	.word	0x20002eb4

00019f44 <bt_att_disconnected>:
{
   19f44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19f48:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19f4c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19f4e:	2e00      	cmp	r6, #0
   19f50:	d063      	beq.n	1a01a <bt_att_disconnected+0xd6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19f52:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   19f56:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   19f5a:	f00f f9fe 	bl	2935a <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19f5e:	1f27      	subs	r7, r4, #4
   19f60:	f104 0894 	add.w	r8, r4, #148	; 0x94
   19f64:	2200      	movs	r2, #0
   19f66:	2300      	movs	r3, #0
   19f68:	4640      	mov	r0, r8
   19f6a:	f010 fd1b 	bl	2a9a4 <net_buf_get>
   19f6e:	4605      	mov	r5, r0
   19f70:	bb58      	cbnz	r0, 19fca <bt_att_disconnected+0x86>
	if (chan->req) {
   19f72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   19f76:	b12b      	cbz	r3, 19f84 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19f78:	4602      	mov	r2, r0
   19f7a:	4601      	mov	r1, r0
   19f7c:	230e      	movs	r3, #14
   19f7e:	4638      	mov	r0, r7
   19f80:	f7ff ff9e 	bl	19ec0 <att_handle_rsp>
	chan->att = NULL;
   19f84:	2300      	movs	r3, #0
   19f86:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   19f8a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   19f8c:	2b00      	cmp	r3, #0
   19f8e:	d144      	bne.n	1a01a <bt_att_disconnected+0xd6>
	att_reset(att);
   19f90:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   19f92:	9803      	ldr	r0, [sp, #12]
   19f94:	3024      	adds	r0, #36	; 0x24
   19f96:	f010 fd47 	bl	2aa28 <net_buf_slist_get>
   19f9a:	4605      	mov	r5, r0
   19f9c:	b9e0      	cbnz	r0, 19fd8 <bt_att_disconnected+0x94>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19f9e:	9803      	ldr	r0, [sp, #12]
   19fa0:	2200      	movs	r2, #0
   19fa2:	2300      	movs	r3, #0
   19fa4:	300c      	adds	r0, #12
   19fa6:	f010 fcfd 	bl	2a9a4 <net_buf_get>
   19faa:	4605      	mov	r5, r0
   19fac:	b9d8      	cbnz	r0, 19fe6 <bt_att_disconnected+0xa2>
	while (!sys_slist_is_empty(&att->reqs)) {
   19fae:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19fb0:	6845      	ldr	r5, [r0, #4]
   19fb2:	b9fd      	cbnz	r5, 19ff4 <bt_att_disconnected+0xb0>
	att->conn = NULL;
   19fb4:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   19fb6:	a903      	add	r1, sp, #12
   19fb8:	4819      	ldr	r0, [pc, #100]	; (1a020 <bt_att_disconnected+0xdc>)
   19fba:	f011 fad1 	bl	2b560 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   19fbe:	6820      	ldr	r0, [r4, #0]
}
   19fc0:	b004      	add	sp, #16
   19fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   19fc6:	f001 bb63 	b.w	1b690 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19fca:	6968      	ldr	r0, [r5, #20]
   19fcc:	f7fe fe92 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(buf);
   19fd0:	4628      	mov	r0, r5
   19fd2:	f003 fdc9 	bl	1db68 <net_buf_unref>
   19fd6:	e7c5      	b.n	19f64 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19fd8:	6968      	ldr	r0, [r5, #20]
   19fda:	f7fe fe8b 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(buf);
   19fde:	4628      	mov	r0, r5
   19fe0:	f003 fdc2 	bl	1db68 <net_buf_unref>
   19fe4:	e7d5      	b.n	19f92 <bt_att_disconnected+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19fe6:	6968      	ldr	r0, [r5, #20]
   19fe8:	f7fe fe84 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(buf);
   19fec:	4628      	mov	r0, r5
   19fee:	f003 fdbb 	bl	1db68 <net_buf_unref>
   19ff2:	e7d4      	b.n	19f9e <bt_att_disconnected+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ff4:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   19ff6:	686e      	ldr	r6, [r5, #4]
	return node->next;
   19ff8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19ffa:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ffc:	4295      	cmp	r5, r2
	list->tail = node;
   19ffe:	bf08      	it	eq
   1a000:	6083      	streq	r3, [r0, #8]
   1a002:	b136      	cbz	r6, 1a012 <bt_att_disconnected+0xce>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a004:	69ab      	ldr	r3, [r5, #24]
   1a006:	9300      	str	r3, [sp, #0]
   1a008:	2300      	movs	r3, #0
   1a00a:	6800      	ldr	r0, [r0, #0]
   1a00c:	461a      	mov	r2, r3
   1a00e:	210e      	movs	r1, #14
   1a010:	47b0      	blx	r6
		bt_att_req_free(req);
   1a012:	4628      	mov	r0, r5
   1a014:	f7ff ff3c 	bl	19e90 <bt_att_req_free>
   1a018:	e7c9      	b.n	19fae <bt_att_disconnected+0x6a>
}
   1a01a:	b004      	add	sp, #16
   1a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a020:	20000a58 	.word	0x20000a58

0001a024 <att_timeout>:
{
   1a024:	b510      	push	{r4, lr}
   1a026:	4604      	mov	r4, r0
   1a028:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   1a02a:	4b08      	ldr	r3, [pc, #32]	; (1a04c <att_timeout+0x28>)
   1a02c:	9305      	str	r3, [sp, #20]
   1a02e:	4808      	ldr	r0, [pc, #32]	; (1a050 <att_timeout+0x2c>)
   1a030:	2302      	movs	r3, #2
   1a032:	aa04      	add	r2, sp, #16
   1a034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a038:	9304      	str	r3, [sp, #16]
   1a03a:	f00f f94a 	bl	292d2 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1a03e:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1a042:	b006      	add	sp, #24
   1a044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a048:	f7ff bf7c 	b.w	19f44 <bt_att_disconnected>
   1a04c:	0002f179 	.word	0x0002f179
   1a050:	0002c77c 	.word	0x0002c77c

0001a054 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1a054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a056:	4d0f      	ldr	r5, [pc, #60]	; (1a094 <find_cf_cfg+0x40>)
   1a058:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a05a:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a05c:	462e      	mov	r6, r5

		if (!conn) {
   1a05e:	1c68      	adds	r0, r5, #1
   1a060:	b964      	cbnz	r4, 1a07c <find_cf_cfg+0x28>
   1a062:	2207      	movs	r2, #7
   1a064:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a066:	9400      	str	r4, [sp, #0]
   1a068:	f8cd 4003 	str.w	r4, [sp, #3]
   1a06c:	f011 ff9f 	bl	2bfae <memcmp>
   1a070:	b958      	cbnz	r0, 1a08a <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
   1a072:	4630      	mov	r0, r6
   1a074:	b003      	add	sp, #12
   1a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a078:	2701      	movs	r7, #1
   1a07a:	e7ef      	b.n	1a05c <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a07c:	4602      	mov	r2, r0
   1a07e:	7829      	ldrb	r1, [r5, #0]
   1a080:	4620      	mov	r0, r4
   1a082:	f00e ff15 	bl	28eb0 <bt_conn_is_peer_addr_le>
   1a086:	2800      	cmp	r0, #0
   1a088:	d1f3      	bne.n	1a072 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a08a:	3510      	adds	r5, #16
   1a08c:	2f00      	cmp	r7, #0
   1a08e:	d0f3      	beq.n	1a078 <find_cf_cfg+0x24>
	return NULL;
   1a090:	2600      	movs	r6, #0
   1a092:	e7ee      	b.n	1a072 <find_cf_cfg+0x1e>
   1a094:	20002f14 	.word	0x20002f14

0001a098 <ccc_set_direct.part.0>:
	return ccc_set(name, len_rd, read_cb, cb_arg);
}

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set_cb, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1a098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

		BT_DBG("key: %s", (const char *)param);

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
			BT_ERR("Invalid key");
   1a09a:	4b07      	ldr	r3, [pc, #28]	; (1a0b8 <ccc_set_direct.part.0+0x20>)
   1a09c:	9305      	str	r3, [sp, #20]
   1a09e:	4807      	ldr	r0, [pc, #28]	; (1a0bc <ccc_set_direct.part.0+0x24>)
   1a0a0:	2302      	movs	r3, #2
   1a0a2:	aa04      	add	r2, sp, #16
   1a0a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a0a8:	9304      	str	r3, [sp, #16]
   1a0aa:	f00f fe40 	bl	29d2e <z_log_msg_static_create.constprop.0>
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
   1a0ae:	f06f 0015 	mvn.w	r0, #21
   1a0b2:	b007      	add	sp, #28
   1a0b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1a0b8:	0002f18c 	.word	0x0002f18c
   1a0bc:	0002c7ac 	.word	0x0002c7ac

0001a0c0 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   1a0c0:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a0c2:	2108      	movs	r1, #8
   1a0c4:	af00      	add	r7, sp, #0
   1a0c6:	480f      	ldr	r0, [pc, #60]	; (1a104 <db_hash_commit+0x44>)
   1a0c8:	f00f fd6e 	bl	29ba8 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1a0cc:	480e      	ldr	r0, [pc, #56]	; (1a108 <db_hash_commit+0x48>)
   1a0ce:	2200      	movs	r2, #0
   1a0d0:	2300      	movs	r3, #0
   1a0d2:	f7fb fd31 	bl	15b38 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1a0d6:	1e04      	subs	r4, r0, #0
   1a0d8:	da11      	bge.n	1a0fe <db_hash_commit+0x3e>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   1a0da:	466d      	mov	r5, sp
   1a0dc:	b088      	sub	sp, #32
   1a0de:	466a      	mov	r2, sp
   1a0e0:	4b0a      	ldr	r3, [pc, #40]	; (1a10c <db_hash_commit+0x4c>)
   1a0e2:	480b      	ldr	r0, [pc, #44]	; (1a110 <db_hash_commit+0x50>)
   1a0e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a0e8:	2303      	movs	r3, #3
   1a0ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1a0ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a0f2:	f00f fe1c 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a0f6:	46ad      	mov	sp, r5
	}

	return err;
}
   1a0f8:	4620      	mov	r0, r4
   1a0fa:	46bd      	mov	sp, r7
   1a0fc:	bdb0      	pop	{r4, r5, r7, pc}
	if (err) {
   1a0fe:	2400      	movs	r4, #0
	return err;
   1a100:	e7fa      	b.n	1a0f8 <db_hash_commit+0x38>
   1a102:	bf00      	nop
   1a104:	20002180 	.word	0x20002180
   1a108:	200020a0 	.word	0x200020a0
   1a10c:	0002f198 	.word	0x0002f198
   1a110:	0002c7ac 	.word	0x0002c7ac

0001a114 <sc_store>:
{
   1a114:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1a116:	4605      	mov	r5, r0
{
   1a118:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1a11a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a11e:	af02      	add	r7, sp, #8
   1a120:	4604      	mov	r4, r0
	if (cfg->id) {
   1a122:	b31a      	cbz	r2, 1a16c <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a124:	2104      	movs	r1, #4
   1a126:	4638      	mov	r0, r7
   1a128:	f00d fa33 	bl	27592 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a12c:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a12e:	4a10      	ldr	r2, [pc, #64]	; (1a170 <sc_store+0x5c>)
   1a130:	2124      	movs	r1, #36	; 0x24
   1a132:	1d38      	adds	r0, r7, #4
   1a134:	462b      	mov	r3, r5
   1a136:	f7fb fc4f 	bl	159d8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a13a:	2204      	movs	r2, #4
   1a13c:	f104 0108 	add.w	r1, r4, #8
   1a140:	18b8      	adds	r0, r7, r2
   1a142:	f7fa f9d3 	bl	144ec <settings_save_one>
	if (err) {
   1a146:	b170      	cbz	r0, 1a166 <sc_store+0x52>
		BT_ERR("failed to store SC (err %d)", err);
   1a148:	466c      	mov	r4, sp
   1a14a:	b088      	sub	sp, #32
   1a14c:	aa02      	add	r2, sp, #8
   1a14e:	4b09      	ldr	r3, [pc, #36]	; (1a174 <sc_store+0x60>)
   1a150:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a154:	2303      	movs	r3, #3
   1a156:	f842 3f10 	str.w	r3, [r2, #16]!
   1a15a:	4807      	ldr	r0, [pc, #28]	; (1a178 <sc_store+0x64>)
   1a15c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a160:	f00f fde5 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a164:	46a5      	mov	sp, r4
}
   1a166:	3728      	adds	r7, #40	; 0x28
   1a168:	46bd      	mov	sp, r7
   1a16a:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a16c:	9200      	str	r2, [sp, #0]
   1a16e:	e7de      	b.n	1a12e <sc_store+0x1a>
   1a170:	0002f4c1 	.word	0x0002f4c1
   1a174:	0002f1cc 	.word	0x0002f1cc
   1a178:	0002c7ac 	.word	0x0002c7ac

0001a17c <cf_write>:
{
   1a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a180:	b086      	sub	sp, #24
   1a182:	4698      	mov	r8, r3
   1a184:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1a188:	2b01      	cmp	r3, #1
{
   1a18a:	4606      	mov	r6, r0
   1a18c:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1a18e:	d83e      	bhi.n	1a20e <cf_write+0x92>
	if (offset + len > sizeof(cfg->data)) {
   1a190:	4443      	add	r3, r8
   1a192:	2b01      	cmp	r3, #1
   1a194:	4645      	mov	r5, r8
   1a196:	dc3d      	bgt.n	1a214 <cf_write+0x98>
	cfg = find_cf_cfg(conn);
   1a198:	f7ff ff5c 	bl	1a054 <find_cf_cfg>
	if (!cfg) {
   1a19c:	4604      	mov	r4, r0
   1a19e:	b918      	cbnz	r0, 1a1a8 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   1a1a0:	f7ff ff58 	bl	1a054 <find_cf_cfg>
	if (!cfg) {
   1a1a4:	4604      	mov	r4, r0
   1a1a6:	b180      	cbz	r0, 1a1ca <cf_write+0x4e>
{
   1a1a8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a1aa:	f1b8 0f00 	cmp.w	r8, #0
   1a1ae:	d11c      	bne.n	1a1ea <cf_write+0x6e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a1b0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a1b4:	1c60      	adds	r0, r4, #1
   1a1b6:	f00f fd15 	bl	29be4 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a1ba:	4620      	mov	r0, r4
   1a1bc:	7a33      	ldrb	r3, [r6, #8]
   1a1be:	f800 3b0c 	strb.w	r3, [r0], #12
   1a1c2:	2101      	movs	r1, #1
   1a1c4:	f00f fcf0 	bl	29ba8 <atomic_or>
}
   1a1c8:	e00b      	b.n	1a1e2 <cf_write+0x66>
		BT_WARN("No space to store Client Supported Features");
   1a1ca:	4b15      	ldr	r3, [pc, #84]	; (1a220 <cf_write+0xa4>)
   1a1cc:	9305      	str	r3, [sp, #20]
   1a1ce:	4815      	ldr	r0, [pc, #84]	; (1a224 <cf_write+0xa8>)
   1a1d0:	2302      	movs	r3, #2
   1a1d2:	aa04      	add	r2, sp, #16
   1a1d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a1d8:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   1a1dc:	9304      	str	r3, [sp, #16]
   1a1de:	f00f fda6 	bl	29d2e <z_log_msg_static_create.constprop.0>
}
   1a1e2:	4628      	mov	r0, r5
   1a1e4:	b006      	add	sp, #24
   1a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a1ea:	7a20      	ldrb	r0, [r4, #8]
   1a1ec:	fa20 f301 	lsr.w	r3, r0, r1
   1a1f0:	07da      	lsls	r2, r3, #31
   1a1f2:	d503      	bpl.n	1a1fc <cf_write+0x80>
		    !(value[i / 8] & BIT(i % 8))) {
   1a1f4:	783b      	ldrb	r3, [r7, #0]
   1a1f6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a1f8:	07db      	lsls	r3, r3, #31
   1a1fa:	d50e      	bpl.n	1a21a <cf_write+0x9e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a1fc:	3101      	adds	r1, #1
   1a1fe:	2903      	cmp	r1, #3
   1a200:	d1d3      	bne.n	1a1aa <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a202:	783b      	ldrb	r3, [r7, #0]
   1a204:	f003 0307 	and.w	r3, r3, #7
   1a208:	4318      	orrs	r0, r3
   1a20a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1a20c:	e7d0      	b.n	1a1b0 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a20e:	f06f 0506 	mvn.w	r5, #6
   1a212:	e7e6      	b.n	1a1e2 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a214:	f06f 050c 	mvn.w	r5, #12
   1a218:	e7e3      	b.n	1a1e2 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a21a:	f06f 0512 	mvn.w	r5, #18
   1a21e:	e7e0      	b.n	1a1e2 <cf_write+0x66>
   1a220:	0002f1e8 	.word	0x0002f1e8
   1a224:	0002c7ac 	.word	0x0002c7ac

0001a228 <db_hash_store>:
{
   1a228:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a22a:	490c      	ldr	r1, [pc, #48]	; (1a25c <db_hash_store+0x34>)
   1a22c:	480c      	ldr	r0, [pc, #48]	; (1a260 <db_hash_store+0x38>)
{
   1a22e:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a230:	2210      	movs	r2, #16
   1a232:	f7fa f95b 	bl	144ec <settings_save_one>
	if (err) {
   1a236:	b170      	cbz	r0, 1a256 <db_hash_store+0x2e>
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1a238:	466c      	mov	r4, sp
   1a23a:	b088      	sub	sp, #32
   1a23c:	466a      	mov	r2, sp
   1a23e:	4b09      	ldr	r3, [pc, #36]	; (1a264 <db_hash_store+0x3c>)
   1a240:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a244:	2303      	movs	r3, #3
   1a246:	f842 3f10 	str.w	r3, [r2, #16]!
   1a24a:	4807      	ldr	r0, [pc, #28]	; (1a268 <db_hash_store+0x40>)
   1a24c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a250:	f00f fd6d 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a254:	46a5      	mov	sp, r4
}
   1a256:	46bd      	mov	sp, r7
   1a258:	bd98      	pop	{r3, r4, r7, pc}
   1a25a:	bf00      	nop
   1a25c:	20002080 	.word	0x20002080
   1a260:	0002f214 	.word	0x0002f214
   1a264:	0002f21c 	.word	0x0002f21c
   1a268:	0002c7ac 	.word	0x0002c7ac

0001a26c <db_hash_set>:
{
   1a26c:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a26e:	490e      	ldr	r1, [pc, #56]	; (1a2a8 <db_hash_set+0x3c>)
{
   1a270:	4614      	mov	r4, r2
   1a272:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a274:	2210      	movs	r2, #16
   1a276:	4618      	mov	r0, r3
   1a278:	47a0      	blx	r4
	if (len < 0) {
   1a27a:	1e04      	subs	r4, r0, #0
   1a27c:	da11      	bge.n	1a2a2 <db_hash_set+0x36>
		BT_ERR("Failed to decode value (err %zd)", len);
   1a27e:	466d      	mov	r5, sp
   1a280:	b088      	sub	sp, #32
   1a282:	466a      	mov	r2, sp
   1a284:	4b09      	ldr	r3, [pc, #36]	; (1a2ac <db_hash_set+0x40>)
   1a286:	480a      	ldr	r0, [pc, #40]	; (1a2b0 <db_hash_set+0x44>)
   1a288:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a28c:	2303      	movs	r3, #3
   1a28e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a292:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a296:	f00f fd4a 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a29a:	46ad      	mov	sp, r5
}
   1a29c:	4620      	mov	r0, r4
   1a29e:	46bd      	mov	sp, r7
   1a2a0:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1a2a2:	2400      	movs	r4, #0
   1a2a4:	e7fa      	b.n	1a29c <db_hash_set+0x30>
   1a2a6:	bf00      	nop
   1a2a8:	20002090 	.word	0x20002090
   1a2ac:	0002f242 	.word	0x0002f242
   1a2b0:	0002c7ac 	.word	0x0002c7ac

0001a2b4 <sc_commit>:
{
   1a2b4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a2b6:	4809      	ldr	r0, [pc, #36]	; (1a2dc <sc_commit+0x28>)
   1a2b8:	f06f 0102 	mvn.w	r1, #2
   1a2bc:	f00f fc83 	bl	29bc6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a2c0:	4806      	ldr	r0, [pc, #24]	; (1a2dc <sc_commit+0x28>)
   1a2c2:	f00f fc6b 	bl	29b9c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a2c6:	07c3      	lsls	r3, r0, #31
   1a2c8:	d505      	bpl.n	1a2d6 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a2ca:	4805      	ldr	r0, [pc, #20]	; (1a2e0 <sc_commit+0x2c>)
   1a2cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a2d0:	2300      	movs	r3, #0
   1a2d2:	f007 fe2d 	bl	21f30 <k_work_reschedule>
}
   1a2d6:	2000      	movs	r0, #0
   1a2d8:	bd08      	pop	{r3, pc}
   1a2da:	bf00      	nop
   1a2dc:	20002180 	.word	0x20002180
   1a2e0:	20002150 	.word	0x20002150

0001a2e4 <find_cf_cfg_by_addr>:
{
   1a2e4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a2e6:	4c0e      	ldr	r4, [pc, #56]	; (1a320 <find_cf_cfg_by_addr+0x3c>)
   1a2e8:	7823      	ldrb	r3, [r4, #0]
   1a2ea:	4283      	cmp	r3, r0
{
   1a2ec:	4606      	mov	r6, r0
   1a2ee:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a2f0:	d00a      	beq.n	1a308 <find_cf_cfg_by_addr+0x24>
   1a2f2:	7c23      	ldrb	r3, [r4, #16]
   1a2f4:	42b3      	cmp	r3, r6
   1a2f6:	d111      	bne.n	1a31c <find_cf_cfg_by_addr+0x38>
   1a2f8:	490a      	ldr	r1, [pc, #40]	; (1a324 <find_cf_cfg_by_addr+0x40>)
   1a2fa:	2207      	movs	r2, #7
   1a2fc:	4628      	mov	r0, r5
   1a2fe:	f011 fe56 	bl	2bfae <memcmp>
   1a302:	b958      	cbnz	r0, 1a31c <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a304:	2001      	movs	r0, #1
   1a306:	e006      	b.n	1a316 <find_cf_cfg_by_addr+0x32>
   1a308:	2207      	movs	r2, #7
   1a30a:	1c61      	adds	r1, r4, #1
   1a30c:	4628      	mov	r0, r5
   1a30e:	f011 fe4e 	bl	2bfae <memcmp>
			if (id == cf_cfg[i].id &&
   1a312:	2800      	cmp	r0, #0
   1a314:	d1ed      	bne.n	1a2f2 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1a316:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1a31a:	e000      	b.n	1a31e <find_cf_cfg_by_addr+0x3a>
	return NULL;
   1a31c:	2000      	movs	r0, #0
}
   1a31e:	bd70      	pop	{r4, r5, r6, pc}
   1a320:	20002f14 	.word	0x20002f14
   1a324:	20002f25 	.word	0x20002f25

0001a328 <cf_set>:
{
   1a328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a32c:	b08b      	sub	sp, #44	; 0x2c
   1a32e:	4689      	mov	r9, r1
   1a330:	af00      	add	r7, sp, #0
   1a332:	4616      	mov	r6, r2
   1a334:	4698      	mov	r8, r3
	if (!name) {
   1a336:	4605      	mov	r5, r0
   1a338:	b988      	cbnz	r0, 1a35e <cf_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1a33a:	4b40      	ldr	r3, [pc, #256]	; (1a43c <cf_set+0x114>)
   1a33c:	627b      	str	r3, [r7, #36]	; 0x24
   1a33e:	4840      	ldr	r0, [pc, #256]	; (1a440 <cf_set+0x118>)
   1a340:	2302      	movs	r3, #2
   1a342:	f107 0220 	add.w	r2, r7, #32
   1a346:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a34a:	623b      	str	r3, [r7, #32]
   1a34c:	f00f fcef 	bl	29d2e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1a350:	f06f 0415 	mvn.w	r4, #21
}
   1a354:	4620      	mov	r0, r4
   1a356:	372c      	adds	r7, #44	; 0x2c
   1a358:	46bd      	mov	sp, r7
   1a35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a35e:	f107 0108 	add.w	r1, r7, #8
   1a362:	f00e fa47 	bl	287f4 <bt_settings_decode_key>
	if (err) {
   1a366:	4604      	mov	r4, r0
   1a368:	b188      	cbz	r0, 1a38e <cf_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1a36a:	466c      	mov	r4, sp
   1a36c:	b088      	sub	sp, #32
   1a36e:	466a      	mov	r2, sp
   1a370:	4b34      	ldr	r3, [pc, #208]	; (1a444 <cf_set+0x11c>)
   1a372:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a376:	2302      	movs	r3, #2
   1a378:	7713      	strb	r3, [r2, #28]
   1a37a:	4b33      	ldr	r3, [pc, #204]	; (1a448 <cf_set+0x120>)
   1a37c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a380:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1a384:	482e      	ldr	r0, [pc, #184]	; (1a440 <cf_set+0x118>)
   1a386:	f00f fcd2 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a38a:	46a5      	mov	sp, r4
   1a38c:	e7e0      	b.n	1a350 <cf_set+0x28>
	settings_name_next(name, &next);
   1a38e:	1d39      	adds	r1, r7, #4
   1a390:	4628      	mov	r0, r5
   1a392:	f00d ff4c 	bl	2822e <settings_name_next>
	if (!next) {
   1a396:	6878      	ldr	r0, [r7, #4]
   1a398:	b180      	cbz	r0, 1a3bc <cf_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a39a:	220a      	movs	r2, #10
   1a39c:	4621      	mov	r1, r4
   1a39e:	f009 fb13 	bl	239c8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a3a2:	b158      	cbz	r0, 1a3bc <cf_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   1a3a4:	466c      	mov	r4, sp
   1a3a6:	b088      	sub	sp, #32
   1a3a8:	466a      	mov	r2, sp
   1a3aa:	4b28      	ldr	r3, [pc, #160]	; (1a44c <cf_set+0x124>)
   1a3ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a3b0:	2303      	movs	r3, #3
   1a3b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3ba:	e7e3      	b.n	1a384 <cf_set+0x5c>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1a3bc:	f107 0108 	add.w	r1, r7, #8
   1a3c0:	2000      	movs	r0, #0
   1a3c2:	f7ff ff8f 	bl	1a2e4 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a3c6:	4605      	mov	r5, r0
   1a3c8:	b9c0      	cbnz	r0, 1a3fc <cf_set+0xd4>
		cfg = find_cf_cfg(NULL);
   1a3ca:	f7ff fe43 	bl	1a054 <find_cf_cfg>
		if (!cfg) {
   1a3ce:	4605      	mov	r5, r0
   1a3d0:	b968      	cbnz	r0, 1a3ee <cf_set+0xc6>
			BT_ERR("Unable to restore CF: no cfg left");
   1a3d2:	4b1f      	ldr	r3, [pc, #124]	; (1a450 <cf_set+0x128>)
   1a3d4:	627b      	str	r3, [r7, #36]	; 0x24
   1a3d6:	481a      	ldr	r0, [pc, #104]	; (1a440 <cf_set+0x118>)
   1a3d8:	2302      	movs	r3, #2
   1a3da:	f107 0220 	add.w	r2, r7, #32
   1a3de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a3e2:	623b      	str	r3, [r7, #32]
			return -ENOMEM;
   1a3e4:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore CF: no cfg left");
   1a3e8:	f00f fca1 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1a3ec:	e7b2      	b.n	1a354 <cf_set+0x2c>
		cfg->id = id;
   1a3ee:	2300      	movs	r3, #0
   1a3f0:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a3f4:	f107 0108 	add.w	r1, r7, #8
   1a3f8:	f00f fbf4 	bl	29be4 <bt_addr_le_copy>
	if (len_rd) {
   1a3fc:	f1b9 0f00 	cmp.w	r9, #0
   1a400:	d017      	beq.n	1a432 <cf_set+0x10a>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a402:	f105 0108 	add.w	r1, r5, #8
   1a406:	2201      	movs	r2, #1
   1a408:	4640      	mov	r0, r8
   1a40a:	47b0      	blx	r6
		if (len < 0) {
   1a40c:	1e05      	subs	r5, r0, #0
   1a40e:	daa1      	bge.n	1a354 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a410:	466c      	mov	r4, sp
   1a412:	b088      	sub	sp, #32
   1a414:	466a      	mov	r2, sp
   1a416:	4b0f      	ldr	r3, [pc, #60]	; (1a454 <cf_set+0x12c>)
   1a418:	4809      	ldr	r0, [pc, #36]	; (1a440 <cf_set+0x118>)
   1a41a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a41e:	2303      	movs	r3, #3
   1a420:	f842 3f10 	str.w	r3, [r2, #16]!
   1a424:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a428:	f00f fc81 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a42c:	46a5      	mov	sp, r4
			return len;
   1a42e:	462c      	mov	r4, r5
   1a430:	e790      	b.n	1a354 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1a432:	4628      	mov	r0, r5
   1a434:	f00f fc7e 	bl	29d34 <clear_cf_cfg>
   1a438:	e78c      	b.n	1a354 <cf_set+0x2c>
   1a43a:	bf00      	nop
   1a43c:	0002e094 	.word	0x0002e094
   1a440:	0002c7ac 	.word	0x0002c7ac
   1a444:	0002f263 	.word	0x0002f263
   1a448:	01000003 	.word	0x01000003
   1a44c:	0002f27f 	.word	0x0002f27f
   1a450:	0002f29a 	.word	0x0002f29a
   1a454:	0002f242 	.word	0x0002f242

0001a458 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a458:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a45a:	6881      	ldr	r1, [r0, #8]
{
   1a45c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a45e:	4a07      	ldr	r2, [pc, #28]	; (1a47c <remove_peer_from_attr+0x24>)
   1a460:	4291      	cmp	r1, r2
   1a462:	d109      	bne.n	1a478 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a464:	791a      	ldrb	r2, [r3, #4]
   1a466:	6819      	ldr	r1, [r3, #0]
   1a468:	68c0      	ldr	r0, [r0, #12]
   1a46a:	f00f fc7c 	bl	29d66 <ccc_find_cfg>
	if (cfg) {
   1a46e:	b118      	cbz	r0, 1a478 <remove_peer_from_attr+0x20>
   1a470:	2300      	movs	r3, #0
   1a472:	6003      	str	r3, [r0, #0]
   1a474:	6043      	str	r3, [r0, #4]
   1a476:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a478:	2001      	movs	r0, #1
   1a47a:	bd08      	pop	{r3, pc}
   1a47c:	0001a541 	.word	0x0001a541

0001a480 <ccc_load>:
{
   1a480:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a482:	4b20      	ldr	r3, [pc, #128]	; (1a504 <ccc_load+0x84>)
{
   1a484:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a486:	6882      	ldr	r2, [r0, #8]
   1a488:	429a      	cmp	r2, r3
   1a48a:	d002      	beq.n	1a492 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1a48c:	2001      	movs	r0, #1
}
   1a48e:	b003      	add	sp, #12
   1a490:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
   1a492:	68a3      	ldr	r3, [r4, #8]
   1a494:	68c5      	ldr	r5, [r0, #12]
   1a496:	b94b      	cbnz	r3, 1a4ac <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a498:	7922      	ldrb	r2, [r4, #4]
   1a49a:	6821      	ldr	r1, [r4, #0]
   1a49c:	4628      	mov	r0, r5
   1a49e:	f00f fc62 	bl	29d66 <ccc_find_cfg>
	if (!cfg) {
   1a4a2:	2800      	cmp	r0, #0
   1a4a4:	d0f2      	beq.n	1a48c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1a4a6:	f00f fba4 	bl	29bf2 <clear_ccc_cfg>
   1a4aa:	e7ef      	b.n	1a48c <ccc_load+0xc>
	} else if (!load->count) {
   1a4ac:	68e0      	ldr	r0, [r4, #12]
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d0ed      	beq.n	1a48e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1a4b2:	881b      	ldrh	r3, [r3, #0]
   1a4b4:	4299      	cmp	r1, r3
   1a4b6:	d00a      	beq.n	1a4ce <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1a4b8:	d9e8      	bls.n	1a48c <ccc_load+0xc>
	load->count--;
   1a4ba:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a4bc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a4be:	3801      	subs	r0, #1
	load->entry++;
   1a4c0:	3304      	adds	r3, #4
	load->count--;
   1a4c2:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a4c4:	3800      	subs	r0, #0
	load->entry++;
   1a4c6:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a4c8:	bf18      	it	ne
   1a4ca:	2001      	movne	r0, #1
   1a4cc:	e7df      	b.n	1a48e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a4ce:	7922      	ldrb	r2, [r4, #4]
   1a4d0:	6821      	ldr	r1, [r4, #0]
   1a4d2:	4628      	mov	r0, r5
   1a4d4:	f00f fc47 	bl	29d66 <ccc_find_cfg>
	if (!cfg) {
   1a4d8:	4602      	mov	r2, r0
   1a4da:	b978      	cbnz	r0, 1a4fc <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a4dc:	9000      	str	r0, [sp, #0]
   1a4de:	4669      	mov	r1, sp
   1a4e0:	f8cd 0003 	str.w	r0, [sp, #3]
   1a4e4:	4628      	mov	r0, r5
   1a4e6:	f00f fc3e 	bl	29d66 <ccc_find_cfg>
		if (!cfg) {
   1a4ea:	4602      	mov	r2, r0
   1a4ec:	2800      	cmp	r0, #0
   1a4ee:	d0e4      	beq.n	1a4ba <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a4f0:	6821      	ldr	r1, [r4, #0]
   1a4f2:	3001      	adds	r0, #1
   1a4f4:	f00f fb76 	bl	29be4 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a4f8:	7923      	ldrb	r3, [r4, #4]
   1a4fa:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   1a4fc:	68a3      	ldr	r3, [r4, #8]
   1a4fe:	885b      	ldrh	r3, [r3, #2]
   1a500:	8113      	strh	r3, [r2, #8]
   1a502:	e7da      	b.n	1a4ba <ccc_load+0x3a>
   1a504:	0001a541 	.word	0x0001a541

0001a508 <ccc_save>:
{
   1a508:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a50a:	4b0c      	ldr	r3, [pc, #48]	; (1a53c <ccc_save+0x34>)
{
   1a50c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a50e:	6882      	ldr	r2, [r0, #8]
   1a510:	429a      	cmp	r2, r3
{
   1a512:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a514:	d10f      	bne.n	1a536 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a516:	7922      	ldrb	r2, [r4, #4]
   1a518:	6821      	ldr	r1, [r4, #0]
   1a51a:	68c0      	ldr	r0, [r0, #12]
   1a51c:	f00f fc23 	bl	29d66 <ccc_find_cfg>
	if (!cfg) {
   1a520:	b148      	cbz	r0, 1a536 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1a522:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1a526:	8901      	ldrh	r1, [r0, #8]
   1a528:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1a52c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1a52e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1a530:	8151      	strh	r1, [r2, #10]
	save->count++;
   1a532:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1a536:	2001      	movs	r0, #1
   1a538:	bd38      	pop	{r3, r4, r5, pc}
   1a53a:	bf00      	nop
   1a53c:	0001a541 	.word	0x0001a541

0001a540 <bt_gatt_attr_write_ccc>:
{
   1a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a544:	b086      	sub	sp, #24
   1a546:	4698      	mov	r8, r3
   1a548:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a54c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1a550:	4606      	mov	r6, r0
   1a552:	4689      	mov	r9, r1
	if (offset) {
   1a554:	2b00      	cmp	r3, #0
   1a556:	d16b      	bne.n	1a630 <bt_gatt_attr_write_ccc+0xf0>
	if (!len || len > sizeof(uint16_t)) {
   1a558:	f108 33ff 	add.w	r3, r8, #4294967295
   1a55c:	2b01      	cmp	r3, #1
   1a55e:	d86a      	bhi.n	1a636 <bt_gatt_attr_write_ccc+0xf6>
		value = *(uint8_t *)buf;
   1a560:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1a562:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1a566:	4651      	mov	r1, sl
   1a568:	bf14      	ite	ne
   1a56a:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   1a56c:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   1a56e:	f00f fc09 	bl	29d84 <find_ccc_cfg>
	if (!cfg) {
   1a572:	4605      	mov	r5, r0
   1a574:	b9e8      	cbnz	r0, 1a5b2 <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   1a576:	b91f      	cbnz	r7, 1a580 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1a578:	4640      	mov	r0, r8
}
   1a57a:	b006      	add	sp, #24
   1a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a580:	4651      	mov	r1, sl
   1a582:	f00f fbff 	bl	29d84 <find_ccc_cfg>
		if (!cfg) {
   1a586:	4605      	mov	r5, r0
   1a588:	b960      	cbnz	r0, 1a5a4 <bt_gatt_attr_write_ccc+0x64>
			BT_WARN("No space to store CCC cfg");
   1a58a:	4b2c      	ldr	r3, [pc, #176]	; (1a63c <bt_gatt_attr_write_ccc+0xfc>)
   1a58c:	482c      	ldr	r0, [pc, #176]	; (1a640 <bt_gatt_attr_write_ccc+0x100>)
   1a58e:	9305      	str	r3, [sp, #20]
   1a590:	aa04      	add	r2, sp, #16
   1a592:	2302      	movs	r3, #2
   1a594:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a598:	9304      	str	r3, [sp, #16]
   1a59a:	f00f fbc8 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a59e:	f06f 0010 	mvn.w	r0, #16
   1a5a2:	e7ea      	b.n	1a57a <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a5a4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a5a8:	3001      	adds	r0, #1
   1a5aa:	f00f fb1b 	bl	29be4 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a5ae:	7a33      	ldrb	r3, [r6, #8]
   1a5b0:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1a5b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a5b6:	bb7b      	cbnz	r3, 1a618 <bt_gatt_attr_write_ccc+0xd8>
	if (cfg->value != ccc->value) {
   1a5b8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   1a5bc:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   1a5be:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   1a5c0:	42bb      	cmp	r3, r7
   1a5c2:	d003      	beq.n	1a5cc <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1a5c4:	4651      	mov	r1, sl
   1a5c6:	4648      	mov	r0, r9
   1a5c8:	f00f fa4d 	bl	29a66 <gatt_ccc_changed>
	if (value_changed) {
   1a5cc:	42bc      	cmp	r4, r7
   1a5ce:	d01d      	beq.n	1a60c <bt_gatt_attr_write_ccc+0xcc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1a5d0:	4630      	mov	r0, r6
   1a5d2:	f7fd ffcb 	bl	1856c <bt_conn_index>
   1a5d6:	4c1b      	ldr	r4, [pc, #108]	; (1a644 <bt_gatt_attr_write_ccc+0x104>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a5d8:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1a5dc:	429e      	cmp	r6, r3
   1a5de:	d015      	beq.n	1a60c <bt_gatt_attr_write_ccc+0xcc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a5e0:	7a30      	ldrb	r0, [r6, #8]
   1a5e2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a5e6:	f00e fa91 	bl	28b0c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a5ea:	b178      	cbz	r0, 1a60c <bt_gatt_attr_write_ccc+0xcc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a5ec:	4630      	mov	r0, r6
   1a5ee:	f7fd ffbd 	bl	1856c <bt_conn_index>
   1a5f2:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1a5f4:	4630      	mov	r0, r6
   1a5f6:	f00e fba5 	bl	28d44 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a5fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a5fe:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a602:	2300      	movs	r3, #0
   1a604:	f104 0008 	add.w	r0, r4, #8
   1a608:	f007 fc92 	bl	21f30 <k_work_reschedule>
	if (!value) {
   1a60c:	2f00      	cmp	r7, #0
   1a60e:	d1b3      	bne.n	1a578 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1a610:	4628      	mov	r0, r5
   1a612:	f00f faee 	bl	29bf2 <clear_ccc_cfg>
   1a616:	e7af      	b.n	1a578 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a618:	463a      	mov	r2, r7
   1a61a:	4649      	mov	r1, r9
   1a61c:	4630      	mov	r0, r6
   1a61e:	4798      	blx	r3
		if (write < 0) {
   1a620:	2800      	cmp	r0, #0
   1a622:	dbaa      	blt.n	1a57a <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1a624:	1e44      	subs	r4, r0, #1
   1a626:	2c01      	cmp	r4, #1
   1a628:	d9c6      	bls.n	1a5b8 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a62a:	f06f 000d 	mvn.w	r0, #13
   1a62e:	e7a4      	b.n	1a57a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a630:	f06f 0006 	mvn.w	r0, #6
   1a634:	e7a1      	b.n	1a57a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a636:	f06f 000c 	mvn.w	r0, #12
   1a63a:	e79e      	b.n	1a57a <bt_gatt_attr_write_ccc+0x3a>
   1a63c:	0002f2bc 	.word	0x0002f2bc
   1a640:	0002c7ac 	.word	0x0002c7ac
   1a644:	200020f8 	.word	0x200020f8

0001a648 <find_sc_cfg>:
{
   1a648:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a64a:	4c0e      	ldr	r4, [pc, #56]	; (1a684 <find_sc_cfg+0x3c>)
   1a64c:	7823      	ldrb	r3, [r4, #0]
   1a64e:	4283      	cmp	r3, r0
{
   1a650:	4605      	mov	r5, r0
   1a652:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a654:	d00a      	beq.n	1a66c <find_sc_cfg+0x24>
   1a656:	7b23      	ldrb	r3, [r4, #12]
   1a658:	42ab      	cmp	r3, r5
   1a65a:	d111      	bne.n	1a680 <find_sc_cfg+0x38>
   1a65c:	480a      	ldr	r0, [pc, #40]	; (1a688 <find_sc_cfg+0x40>)
   1a65e:	2207      	movs	r2, #7
   1a660:	4631      	mov	r1, r6
   1a662:	f011 fca4 	bl	2bfae <memcmp>
   1a666:	b958      	cbnz	r0, 1a680 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a668:	2001      	movs	r0, #1
   1a66a:	e005      	b.n	1a678 <find_sc_cfg+0x30>
   1a66c:	2207      	movs	r2, #7
   1a66e:	1c60      	adds	r0, r4, #1
   1a670:	f011 fc9d 	bl	2bfae <memcmp>
		if (id == sc_cfg[i].id &&
   1a674:	2800      	cmp	r0, #0
   1a676:	d1ee      	bne.n	1a656 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1a678:	230c      	movs	r3, #12
   1a67a:	fb03 4000 	mla	r0, r3, r0, r4
   1a67e:	e000      	b.n	1a682 <find_sc_cfg+0x3a>
	return NULL;
   1a680:	2000      	movs	r0, #0
}
   1a682:	bd70      	pop	{r4, r5, r6, pc}
   1a684:	20003d8c 	.word	0x20003d8c
   1a688:	20003d99 	.word	0x20003d99

0001a68c <sc_save>:
{
   1a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a690:	b088      	sub	sp, #32
   1a692:	4680      	mov	r8, r0
   1a694:	460f      	mov	r7, r1
   1a696:	4616      	mov	r6, r2
   1a698:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a69a:	f7ff ffd5 	bl	1a648 <find_sc_cfg>
	if (!cfg) {
   1a69e:	4604      	mov	r4, r0
   1a6a0:	b9c8      	cbnz	r0, 1a6d6 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a6a2:	4669      	mov	r1, sp
   1a6a4:	9000      	str	r0, [sp, #0]
   1a6a6:	f8cd 0003 	str.w	r0, [sp, #3]
   1a6aa:	f7ff ffcd 	bl	1a648 <find_sc_cfg>
		if (!cfg) {
   1a6ae:	4604      	mov	r4, r0
   1a6b0:	b960      	cbnz	r0, 1a6cc <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   1a6b2:	4b17      	ldr	r3, [pc, #92]	; (1a710 <sc_save+0x84>)
   1a6b4:	9307      	str	r3, [sp, #28]
   1a6b6:	4817      	ldr	r0, [pc, #92]	; (1a714 <sc_save+0x88>)
   1a6b8:	2302      	movs	r3, #2
   1a6ba:	aa06      	add	r2, sp, #24
   1a6bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a6c0:	9306      	str	r3, [sp, #24]
   1a6c2:	f00f fb34 	bl	29d2e <z_log_msg_static_create.constprop.0>
}
   1a6c6:	b008      	add	sp, #32
   1a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a6cc:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a6d0:	4639      	mov	r1, r7
   1a6d2:	f00f fa87 	bl	29be4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a6d6:	8922      	ldrh	r2, [r4, #8]
   1a6d8:	8963      	ldrh	r3, [r4, #10]
   1a6da:	b97a      	cbnz	r2, 1a6fc <sc_save+0x70>
   1a6dc:	b983      	cbnz	r3, 1a700 <sc_save+0x74>
		cfg->data.start = start;
   1a6de:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a6e0:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a6e2:	4621      	mov	r1, r4
   1a6e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a6e8:	f00e fa10 	bl	28b0c <bt_addr_le_is_bonded>
   1a6ec:	2800      	cmp	r0, #0
   1a6ee:	d0ea      	beq.n	1a6c6 <sc_save+0x3a>
		sc_store(cfg);
   1a6f0:	4620      	mov	r0, r4
}
   1a6f2:	b008      	add	sp, #32
   1a6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1a6f8:	f7ff bd0c 	b.w	1a114 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1a6fc:	4296      	cmp	r6, r2
   1a6fe:	d302      	bcc.n	1a706 <sc_save+0x7a>
   1a700:	429d      	cmp	r5, r3
   1a702:	d8ed      	bhi.n	1a6e0 <sc_save+0x54>
   1a704:	e7df      	b.n	1a6c6 <sc_save+0x3a>
	if (*end < new_end) {
   1a706:	429d      	cmp	r5, r3
		*start = new_start;
   1a708:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a70a:	d9ea      	bls.n	1a6e2 <sc_save+0x56>
   1a70c:	e7e8      	b.n	1a6e0 <sc_save+0x54>
   1a70e:	bf00      	nop
   1a710:	0002f2d6 	.word	0x0002f2d6
   1a714:	0002c7ac 	.word	0x0002c7ac

0001a718 <bt_gatt_clear_sc>:
{
   1a718:	b5b0      	push	{r4, r5, r7, lr}
   1a71a:	b08c      	sub	sp, #48	; 0x30
   1a71c:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a71e:	f7ff ff93 	bl	1a648 <find_sc_cfg>
	if (!cfg) {
   1a722:	4604      	mov	r4, r0
   1a724:	b320      	cbz	r0, 1a770 <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   1a726:	4605      	mov	r5, r0
   1a728:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a72c:	b322      	cbz	r2, 1a778 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a72e:	2104      	movs	r1, #4
   1a730:	4638      	mov	r0, r7
   1a732:	f00c ff2e 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a736:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a738:	1d38      	adds	r0, r7, #4
   1a73a:	4a10      	ldr	r2, [pc, #64]	; (1a77c <bt_gatt_clear_sc+0x64>)
   1a73c:	462b      	mov	r3, r5
   1a73e:	2124      	movs	r1, #36	; 0x24
   1a740:	f7fb f94a 	bl	159d8 <bt_settings_encode_key>
		err = settings_delete(key);
   1a744:	1d38      	adds	r0, r7, #4
   1a746:	f00d fd4b 	bl	281e0 <settings_delete>
		if (err) {
   1a74a:	b170      	cbz	r0, 1a76a <bt_gatt_clear_sc+0x52>
			BT_ERR("failed to delete SC (err %d)", err);
   1a74c:	466d      	mov	r5, sp
   1a74e:	b088      	sub	sp, #32
   1a750:	aa02      	add	r2, sp, #8
   1a752:	4b0b      	ldr	r3, [pc, #44]	; (1a780 <bt_gatt_clear_sc+0x68>)
   1a754:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a758:	2303      	movs	r3, #3
   1a75a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a75e:	4809      	ldr	r0, [pc, #36]	; (1a784 <bt_gatt_clear_sc+0x6c>)
   1a760:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a764:	f00f fae3 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a768:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   1a76a:	4620      	mov	r0, r4
   1a76c:	f00f fa4f 	bl	29c0e <clear_sc_cfg>
}
   1a770:	2000      	movs	r0, #0
   1a772:	3728      	adds	r7, #40	; 0x28
   1a774:	46bd      	mov	sp, r7
   1a776:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a778:	9200      	str	r2, [sp, #0]
   1a77a:	e7dd      	b.n	1a738 <bt_gatt_clear_sc+0x20>
   1a77c:	0002f4c1 	.word	0x0002f4c1
   1a780:	0002f2f5 	.word	0x0002f2f5
   1a784:	0002c7ac 	.word	0x0002c7ac

0001a788 <sc_clear>:
{
   1a788:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a78a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1a78e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a790:	4629      	mov	r1, r5
   1a792:	7a00      	ldrb	r0, [r0, #8]
{
   1a794:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a796:	f00e f9b9 	bl	28b0c <bt_addr_le_is_bonded>
   1a79a:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a79c:	4629      	mov	r1, r5
   1a79e:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a7a0:	b19b      	cbz	r3, 1a7ca <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a7a2:	f7ff ffb9 	bl	1a718 <bt_gatt_clear_sc>
		if (err) {
   1a7a6:	b170      	cbz	r0, 1a7c6 <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
   1a7a8:	466c      	mov	r4, sp
   1a7aa:	b088      	sub	sp, #32
   1a7ac:	466a      	mov	r2, sp
   1a7ae:	4b0a      	ldr	r3, [pc, #40]	; (1a7d8 <sc_clear+0x50>)
   1a7b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a7b4:	2303      	movs	r3, #3
   1a7b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7ba:	4808      	ldr	r0, [pc, #32]	; (1a7dc <sc_clear+0x54>)
   1a7bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a7c0:	f00f fab5 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a7c4:	46a5      	mov	sp, r4
}
   1a7c6:	46bd      	mov	sp, r7
   1a7c8:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a7ca:	f7ff ff3d 	bl	1a648 <find_sc_cfg>
		if (cfg) {
   1a7ce:	2800      	cmp	r0, #0
   1a7d0:	d0f9      	beq.n	1a7c6 <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   1a7d2:	f00f fa1c 	bl	29c0e <clear_sc_cfg>
}
   1a7d6:	e7f6      	b.n	1a7c6 <sc_clear+0x3e>
   1a7d8:	0002f312 	.word	0x0002f312
   1a7dc:	0002c7ac 	.word	0x0002c7ac

0001a7e0 <disconnected_cb>:
{
   1a7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a7e4:	4b1f      	ldr	r3, [pc, #124]	; (1a864 <disconnected_cb+0x84>)
{
   1a7e6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a7e8:	6882      	ldr	r2, [r0, #8]
   1a7ea:	429a      	cmp	r2, r3
{
   1a7ec:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a7ee:	d102      	bne.n	1a7f6 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1a7f0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1a7f2:	8963      	ldrh	r3, [r4, #10]
   1a7f4:	b9c3      	cbnz	r3, 1a828 <disconnected_cb+0x48>
}
   1a7f6:	2001      	movs	r0, #1
   1a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a7fc:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1a800:	7a28      	ldrb	r0, [r5, #8]
   1a802:	4641      	mov	r1, r8
   1a804:	f00e f982 	bl	28b0c <bt_addr_le_is_bonded>
   1a808:	b948      	cbnz	r0, 1a81e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1a80a:	4b17      	ldr	r3, [pc, #92]	; (1a868 <disconnected_cb+0x88>)
   1a80c:	429c      	cmp	r4, r3
   1a80e:	d102      	bne.n	1a816 <disconnected_cb+0x36>
					sc_clear(conn);
   1a810:	4628      	mov	r0, r5
   1a812:	f7ff ffb9 	bl	1a788 <sc_clear>
				clear_ccc_cfg(cfg);
   1a816:	4620      	mov	r0, r4
   1a818:	f00f f9eb 	bl	29bf2 <clear_ccc_cfg>
	if (!value_used) {
   1a81c:	e019      	b.n	1a852 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a81e:	4641      	mov	r1, r8
   1a820:	4638      	mov	r0, r7
   1a822:	f00f f9df 	bl	29be4 <bt_addr_le_copy>
	if (!value_used) {
   1a826:	e014      	b.n	1a852 <disconnected_cb+0x72>
		if (!cfg->value) {
   1a828:	8923      	ldrh	r3, [r4, #8]
   1a82a:	b193      	cbz	r3, 1a852 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a82c:	4627      	mov	r7, r4
   1a82e:	4628      	mov	r0, r5
   1a830:	f817 1b01 	ldrb.w	r1, [r7], #1
   1a834:	463a      	mov	r2, r7
   1a836:	f00e fb3b 	bl	28eb0 <bt_conn_is_peer_addr_le>
   1a83a:	2800      	cmp	r0, #0
   1a83c:	d1de      	bne.n	1a7fc <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a83e:	7820      	ldrb	r0, [r4, #0]
   1a840:	4639      	mov	r1, r7
   1a842:	f7fd ffb3 	bl	187ac <bt_conn_lookup_addr_le>
			if (tmp) {
   1a846:	b120      	cbz	r0, 1a852 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a848:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1a84a:	f00e fa96 	bl	28d7a <bt_conn_unref>
	if (!value_used) {
   1a84e:	2d07      	cmp	r5, #7
   1a850:	d0d1      	beq.n	1a7f6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1a852:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a854:	2100      	movs	r1, #0
   1a856:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d0cc      	beq.n	1a7f6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a85c:	4630      	mov	r0, r6
   1a85e:	4798      	blx	r3
   1a860:	e7c9      	b.n	1a7f6 <disconnected_cb+0x16>
   1a862:	bf00      	nop
   1a864:	0001a541 	.word	0x0001a541
   1a868:	2000072c 	.word	0x2000072c

0001a86c <sc_set>:
{
   1a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a870:	b08d      	sub	sp, #52	; 0x34
   1a872:	460e      	mov	r6, r1
   1a874:	af00      	add	r7, sp, #0
   1a876:	4690      	mov	r8, r2
   1a878:	4699      	mov	r9, r3
	if (!name) {
   1a87a:	4604      	mov	r4, r0
   1a87c:	b988      	cbnz	r0, 1a8a2 <sc_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1a87e:	4b45      	ldr	r3, [pc, #276]	; (1a994 <sc_set+0x128>)
   1a880:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a882:	4845      	ldr	r0, [pc, #276]	; (1a998 <sc_set+0x12c>)
   1a884:	2302      	movs	r3, #2
   1a886:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a88a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a88e:	62bb      	str	r3, [r7, #40]	; 0x28
   1a890:	f00f fa4d 	bl	29d2e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1a894:	f06f 0515 	mvn.w	r5, #21
}
   1a898:	4628      	mov	r0, r5
   1a89a:	3734      	adds	r7, #52	; 0x34
   1a89c:	46bd      	mov	sp, r7
   1a89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a8a2:	f107 0108 	add.w	r1, r7, #8
   1a8a6:	f00d ffa5 	bl	287f4 <bt_settings_decode_key>
	if (err) {
   1a8aa:	4605      	mov	r5, r0
   1a8ac:	b188      	cbz	r0, 1a8d2 <sc_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1a8ae:	466d      	mov	r5, sp
   1a8b0:	b088      	sub	sp, #32
   1a8b2:	466a      	mov	r2, sp
   1a8b4:	4b39      	ldr	r3, [pc, #228]	; (1a99c <sc_set+0x130>)
   1a8b6:	4838      	ldr	r0, [pc, #224]	; (1a998 <sc_set+0x12c>)
   1a8b8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a8bc:	2302      	movs	r3, #2
   1a8be:	7713      	strb	r3, [r2, #28]
   1a8c0:	4b37      	ldr	r3, [pc, #220]	; (1a9a0 <sc_set+0x134>)
   1a8c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8c6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1a8ca:	f00f fa30 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a8ce:	46ad      	mov	sp, r5
   1a8d0:	e7e0      	b.n	1a894 <sc_set+0x28>
	settings_name_next(name, &next);
   1a8d2:	1d39      	adds	r1, r7, #4
   1a8d4:	4620      	mov	r0, r4
   1a8d6:	f00d fcaa 	bl	2822e <settings_name_next>
	if (!next) {
   1a8da:	6878      	ldr	r0, [r7, #4]
   1a8dc:	b1a0      	cbz	r0, 1a908 <sc_set+0x9c>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a8de:	220a      	movs	r2, #10
   1a8e0:	4629      	mov	r1, r5
   1a8e2:	f009 f871 	bl	239c8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a8e6:	b178      	cbz	r0, 1a908 <sc_set+0x9c>
			BT_ERR("Invalid local identity %lu", next_id);
   1a8e8:	466c      	mov	r4, sp
   1a8ea:	b088      	sub	sp, #32
   1a8ec:	466a      	mov	r2, sp
   1a8ee:	4b2d      	ldr	r3, [pc, #180]	; (1a9a4 <sc_set+0x138>)
   1a8f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a8f4:	2303      	movs	r3, #3
   1a8f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8fa:	4827      	ldr	r0, [pc, #156]	; (1a998 <sc_set+0x12c>)
   1a8fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a900:	f00f fa15 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a904:	46a5      	mov	sp, r4
			return -EINVAL;
   1a906:	e7c5      	b.n	1a894 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   1a908:	f107 0108 	add.w	r1, r7, #8
   1a90c:	2000      	movs	r0, #0
   1a90e:	f7ff fe9b 	bl	1a648 <find_sc_cfg>
	if (!cfg && len_rd) {
   1a912:	4604      	mov	r4, r0
   1a914:	2800      	cmp	r0, #0
   1a916:	d137      	bne.n	1a988 <sc_set+0x11c>
   1a918:	2e00      	cmp	r6, #0
   1a91a:	d0bd      	beq.n	1a898 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a91c:	f107 0110 	add.w	r1, r7, #16
   1a920:	6138      	str	r0, [r7, #16]
   1a922:	4606      	mov	r6, r0
   1a924:	f8c7 0013 	str.w	r0, [r7, #19]
   1a928:	f7ff fe8e 	bl	1a648 <find_sc_cfg>
		if (!cfg) {
   1a92c:	4604      	mov	r4, r0
   1a92e:	b968      	cbnz	r0, 1a94c <sc_set+0xe0>
			BT_ERR("Unable to restore SC: no cfg left");
   1a930:	4b1d      	ldr	r3, [pc, #116]	; (1a9a8 <sc_set+0x13c>)
   1a932:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a934:	4818      	ldr	r0, [pc, #96]	; (1a998 <sc_set+0x12c>)
   1a936:	2302      	movs	r3, #2
   1a938:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1a93c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a940:	62bb      	str	r3, [r7, #40]	; 0x28
			return -ENOMEM;
   1a942:	f06f 050b 	mvn.w	r5, #11
			BT_ERR("Unable to restore SC: no cfg left");
   1a946:	f00f f9f2 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1a94a:	e7a5      	b.n	1a898 <sc_set+0x2c>
		cfg->id = id;
   1a94c:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a950:	f107 0108 	add.w	r1, r7, #8
   1a954:	f00f f946 	bl	29be4 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a958:	f104 0108 	add.w	r1, r4, #8
   1a95c:	2204      	movs	r2, #4
   1a95e:	4648      	mov	r0, r9
   1a960:	47c0      	blx	r8
		if (len < 0) {
   1a962:	1e04      	subs	r4, r0, #0
   1a964:	da98      	bge.n	1a898 <sc_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a966:	466d      	mov	r5, sp
   1a968:	b088      	sub	sp, #32
   1a96a:	466a      	mov	r2, sp
   1a96c:	4b0f      	ldr	r3, [pc, #60]	; (1a9ac <sc_set+0x140>)
   1a96e:	480a      	ldr	r0, [pc, #40]	; (1a998 <sc_set+0x12c>)
   1a970:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a974:	2303      	movs	r3, #3
   1a976:	f842 3f10 	str.w	r3, [r2, #16]!
   1a97a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a97e:	f00f f9d6 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1a982:	46ad      	mov	sp, r5
			return len;
   1a984:	4625      	mov	r5, r4
   1a986:	e787      	b.n	1a898 <sc_set+0x2c>
	if (len_rd) {
   1a988:	2e00      	cmp	r6, #0
   1a98a:	d1e5      	bne.n	1a958 <sc_set+0xec>
   1a98c:	6026      	str	r6, [r4, #0]
   1a98e:	6066      	str	r6, [r4, #4]
   1a990:	60a6      	str	r6, [r4, #8]
   1a992:	e781      	b.n	1a898 <sc_set+0x2c>
   1a994:	0002e094 	.word	0x0002e094
   1a998:	0002c7ac 	.word	0x0002c7ac
   1a99c:	0002f263 	.word	0x0002f263
   1a9a0:	01000003 	.word	0x01000003
   1a9a4:	0002f27f 	.word	0x0002f27f
   1a9a8:	0002f328 	.word	0x0002f328
   1a9ac:	0002f242 	.word	0x0002f242

0001a9b0 <sc_indicate_rsp>:
{
   1a9b0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a9b2:	f06f 0102 	mvn.w	r1, #2
   1a9b6:	4604      	mov	r4, r0
   1a9b8:	480f      	ldr	r0, [pc, #60]	; (1a9f8 <sc_indicate_rsp+0x48>)
   1a9ba:	f00f f904 	bl	29bc6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a9be:	480e      	ldr	r0, [pc, #56]	; (1a9f8 <sc_indicate_rsp+0x48>)
   1a9c0:	f00f f8ec 	bl	29b9c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a9c4:	07c2      	lsls	r2, r0, #31
   1a9c6:	d504      	bpl.n	1a9d2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a9c8:	480c      	ldr	r0, [pc, #48]	; (1a9fc <sc_indicate_rsp+0x4c>)
   1a9ca:	2200      	movs	r2, #0
   1a9cc:	2300      	movs	r3, #0
   1a9ce:	f007 faaf 	bl	21f30 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1a9d2:	4620      	mov	r0, r4
   1a9d4:	f00f f816 	bl	29a04 <bt_att_fixed_chan_only>
   1a9d8:	b160      	cbz	r0, 1a9f4 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1a9da:	4620      	mov	r0, r4
   1a9dc:	f7ff fb3a 	bl	1a054 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a9e0:	b140      	cbz	r0, 1a9f4 <sc_indicate_rsp+0x44>
   1a9e2:	7a03      	ldrb	r3, [r0, #8]
   1a9e4:	07db      	lsls	r3, r3, #31
   1a9e6:	d505      	bpl.n	1a9f4 <sc_indicate_rsp+0x44>
}
   1a9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a9ec:	2101      	movs	r1, #1
   1a9ee:	300c      	adds	r0, #12
   1a9f0:	f00f b8da 	b.w	29ba8 <atomic_or>
   1a9f4:	bd10      	pop	{r4, pc}
   1a9f6:	bf00      	nop
   1a9f8:	20002180 	.word	0x20002180
   1a9fc:	20002150 	.word	0x20002150

0001aa00 <bt_gatt_init>:
{
   1aa00:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1aa02:	4b24      	ldr	r3, [pc, #144]	; (1aa94 <bt_gatt_init+0x94>)
   1aa04:	f3bf 8f5b 	dmb	ish
   1aa08:	2201      	movs	r2, #1
   1aa0a:	e853 1f00 	ldrex	r1, [r3]
   1aa0e:	2900      	cmp	r1, #0
   1aa10:	d103      	bne.n	1aa1a <bt_gatt_init+0x1a>
   1aa12:	e843 2000 	strex	r0, r2, [r3]
   1aa16:	2800      	cmp	r0, #0
   1aa18:	d1f7      	bne.n	1aa0a <bt_gatt_init+0xa>
   1aa1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1aa1e:	d138      	bne.n	1aa92 <bt_gatt_init+0x92>
   1aa20:	f3bf 8f5b 	dmb	ish
   1aa24:	4b1c      	ldr	r3, [pc, #112]	; (1aa98 <bt_gatt_init+0x98>)
   1aa26:	e853 1f00 	ldrex	r1, [r3]
   1aa2a:	2900      	cmp	r1, #0
   1aa2c:	d103      	bne.n	1aa36 <bt_gatt_init+0x36>
   1aa2e:	e843 2000 	strex	r0, r2, [r3]
   1aa32:	2800      	cmp	r0, #0
   1aa34:	d1f7      	bne.n	1aa26 <bt_gatt_init+0x26>
   1aa36:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1aa3a:	d108      	bne.n	1aa4e <bt_gatt_init+0x4e>
   1aa3c:	4917      	ldr	r1, [pc, #92]	; (1aa9c <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1aa3e:	4a18      	ldr	r2, [pc, #96]	; (1aaa0 <bt_gatt_init+0xa0>)
   1aa40:	880b      	ldrh	r3, [r1, #0]
   1aa42:	4c18      	ldr	r4, [pc, #96]	; (1aaa4 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1aa44:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1aa46:	42a2      	cmp	r2, r4
   1aa48:	d31d      	bcc.n	1aa86 <bt_gatt_init+0x86>
   1aa4a:	b100      	cbz	r0, 1aa4e <bt_gatt_init+0x4e>
   1aa4c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1aa4e:	4b16      	ldr	r3, [pc, #88]	; (1aaa8 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1aa50:	4916      	ldr	r1, [pc, #88]	; (1aaac <bt_gatt_init+0xac>)
   1aa52:	4817      	ldr	r0, [pc, #92]	; (1aab0 <bt_gatt_init+0xb0>)
   1aa54:	2200      	movs	r2, #0
	list->tail = NULL;
   1aa56:	e9c3 2200 	strd	r2, r2, [r3]
   1aa5a:	f010 ff5e 	bl	2b91a <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1aa5e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1aa62:	2300      	movs	r3, #0
   1aa64:	4812      	ldr	r0, [pc, #72]	; (1aab0 <bt_gatt_init+0xb0>)
   1aa66:	f7fb f861 	bl	15b2c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1aa6a:	4912      	ldr	r1, [pc, #72]	; (1aab4 <bt_gatt_init+0xb4>)
   1aa6c:	4812      	ldr	r0, [pc, #72]	; (1aab8 <bt_gatt_init+0xb8>)
   1aa6e:	f010 ff54 	bl	2b91a <k_work_init_delayable>
   1aa72:	2102      	movs	r1, #2
   1aa74:	4811      	ldr	r0, [pc, #68]	; (1aabc <bt_gatt_init+0xbc>)
   1aa76:	f00f f897 	bl	29ba8 <atomic_or>
}
   1aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1aa7e:	4910      	ldr	r1, [pc, #64]	; (1aac0 <bt_gatt_init+0xc0>)
   1aa80:	4810      	ldr	r0, [pc, #64]	; (1aac4 <bt_gatt_init+0xc4>)
   1aa82:	f010 bf4a 	b.w	2b91a <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1aa86:	6850      	ldr	r0, [r2, #4]
   1aa88:	4403      	add	r3, r0
   1aa8a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1aa8c:	3208      	adds	r2, #8
   1aa8e:	2001      	movs	r0, #1
   1aa90:	e7d9      	b.n	1aa46 <bt_gatt_init+0x46>
}
   1aa92:	bd10      	pop	{r4, pc}
   1aa94:	20002f34 	.word	0x20002f34
   1aa98:	20002f50 	.word	0x20002f50
   1aa9c:	20003d8a 	.word	0x20003d8a
   1aaa0:	0002c734 	.word	0x0002c734
   1aaa4:	0002c76c 	.word	0x0002c76c
   1aaa8:	20002f0c 	.word	0x20002f0c
   1aaac:	0001acd9 	.word	0x0001acd9
   1aab0:	200020a0 	.word	0x200020a0
   1aab4:	0001b0e1 	.word	0x0001b0e1
   1aab8:	20002150 	.word	0x20002150
   1aabc:	20002180 	.word	0x20002180
   1aac0:	0002a0ef 	.word	0x0002a0ef
   1aac4:	20002100 	.word	0x20002100

0001aac8 <bt_gatt_attr_get_handle>:
{
   1aac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1aacc:	4603      	mov	r3, r0
   1aace:	b148      	cbz	r0, 1aae4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1aad0:	8a00      	ldrh	r0, [r0, #16]
   1aad2:	b938      	cbnz	r0, 1aae4 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1aad4:	4912      	ldr	r1, [pc, #72]	; (1ab20 <bt_gatt_attr_get_handle+0x58>)
   1aad6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1ab24 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1aada:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1aadc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1aae0:	4571      	cmp	r1, lr
   1aae2:	d301      	bcc.n	1aae8 <bt_gatt_attr_get_handle+0x20>
}
   1aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1aae8:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1aaec:	42bb      	cmp	r3, r7
   1aaee:	d304      	bcc.n	1aafa <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1aaf0:	fb0c 7206 	mla	r2, ip, r6, r7
   1aaf4:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1aaf6:	4293      	cmp	r3, r2
   1aaf8:	d90e      	bls.n	1ab18 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1aafa:	19a2      	adds	r2, r4, r6
   1aafc:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1aafe:	3108      	adds	r1, #8
   1ab00:	4614      	mov	r4, r2
   1ab02:	e7ed      	b.n	1aae0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1ab04:	fb0c 7805 	mla	r8, ip, r5, r7
   1ab08:	4543      	cmp	r3, r8
   1ab0a:	d007      	beq.n	1ab1c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ab0c:	3501      	adds	r5, #1
   1ab0e:	1962      	adds	r2, r4, r5
   1ab10:	42b5      	cmp	r5, r6
   1ab12:	b292      	uxth	r2, r2
   1ab14:	d1f6      	bne.n	1ab04 <bt_gatt_attr_get_handle+0x3c>
   1ab16:	e7f2      	b.n	1aafe <bt_gatt_attr_get_handle+0x36>
   1ab18:	2500      	movs	r5, #0
   1ab1a:	e7f8      	b.n	1ab0e <bt_gatt_attr_get_handle+0x46>
   1ab1c:	4610      	mov	r0, r2
   1ab1e:	e7e1      	b.n	1aae4 <bt_gatt_attr_get_handle+0x1c>
   1ab20:	0002c734 	.word	0x0002c734
   1ab24:	0002c76c 	.word	0x0002c76c

0001ab28 <bt_gatt_foreach_attr_type>:
{
   1ab28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab2c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1ab30:	9100      	str	r1, [sp, #0]
   1ab32:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1ab34:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab38:	2d00      	cmp	r5, #0
   1ab3a:	bf08      	it	eq
   1ab3c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1ab3e:	4b24      	ldr	r3, [pc, #144]	; (1abd0 <bt_gatt_foreach_attr_type+0xa8>)
   1ab40:	881b      	ldrh	r3, [r3, #0]
   1ab42:	4283      	cmp	r3, r0
{
   1ab44:	4607      	mov	r7, r0
   1ab46:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1ab48:	d23c      	bcs.n	1abc4 <bt_gatt_foreach_attr_type+0x9c>
}
   1ab4a:	b003      	add	sp, #12
   1ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1ab50:	6873      	ldr	r3, [r6, #4]
   1ab52:	4423      	add	r3, r4
   1ab54:	42bb      	cmp	r3, r7
   1ab56:	d232      	bcs.n	1abbe <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1ab58:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ab5a:	3608      	adds	r6, #8
   1ab5c:	4b1d      	ldr	r3, [pc, #116]	; (1abd4 <bt_gatt_foreach_attr_type+0xac>)
   1ab5e:	429e      	cmp	r6, r3
   1ab60:	d3f6      	bcc.n	1ab50 <bt_gatt_foreach_attr_type+0x28>
   1ab62:	e7f2      	b.n	1ab4a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ab64:	5889      	ldr	r1, [r1, r2]
   1ab66:	9301      	str	r3, [sp, #4]
   1ab68:	4640      	mov	r0, r8
   1ab6a:	f00d fe67 	bl	2883c <bt_uuid_cmp>
   1ab6e:	9b01      	ldr	r3, [sp, #4]
   1ab70:	b190      	cbz	r0, 1ab98 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ab72:	3401      	adds	r4, #1
   1ab74:	f10a 0a01 	add.w	sl, sl, #1
   1ab78:	b2a4      	uxth	r4, r4
   1ab7a:	6873      	ldr	r3, [r6, #4]
   1ab7c:	4553      	cmp	r3, sl
   1ab7e:	d9ec      	bls.n	1ab5a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1ab80:	9b00      	ldr	r3, [sp, #0]
   1ab82:	429c      	cmp	r4, r3
   1ab84:	d8e1      	bhi.n	1ab4a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1ab86:	42bc      	cmp	r4, r7
   1ab88:	d3f3      	bcc.n	1ab72 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ab8a:	6831      	ldr	r1, [r6, #0]
   1ab8c:	fb0b f20a 	mul.w	r2, fp, sl
   1ab90:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ab92:	f1b8 0f00 	cmp.w	r8, #0
   1ab96:	d1e5      	bne.n	1ab64 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1ab98:	f1b9 0f00 	cmp.w	r9, #0
   1ab9c:	d10b      	bne.n	1abb6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1ab9e:	3d01      	subs	r5, #1
   1aba0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1aba2:	4618      	mov	r0, r3
   1aba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1aba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aba8:	4621      	mov	r1, r4
   1abaa:	4798      	blx	r3
	if (!*num_matches) {
   1abac:	2d00      	cmp	r5, #0
   1abae:	d0cc      	beq.n	1ab4a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1abb0:	2800      	cmp	r0, #0
   1abb2:	d1de      	bne.n	1ab72 <bt_gatt_foreach_attr_type+0x4a>
   1abb4:	e7c9      	b.n	1ab4a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1abb6:	68da      	ldr	r2, [r3, #12]
   1abb8:	4591      	cmp	r9, r2
   1abba:	d1da      	bne.n	1ab72 <bt_gatt_foreach_attr_type+0x4a>
   1abbc:	e7ef      	b.n	1ab9e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1abbe:	f04f 0a00 	mov.w	sl, #0
   1abc2:	e7da      	b.n	1ab7a <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1abc4:	4e04      	ldr	r6, [pc, #16]	; (1abd8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1abc6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1abc8:	f04f 0b14 	mov.w	fp, #20
   1abcc:	e7c6      	b.n	1ab5c <bt_gatt_foreach_attr_type+0x34>
   1abce:	bf00      	nop
   1abd0:	20003d8a 	.word	0x20003d8a
   1abd4:	0002c76c 	.word	0x0002c76c
   1abd8:	0002c734 	.word	0x0002c734

0001abdc <db_hash_gen>:
{
   1abdc:	b530      	push	{r4, r5, lr}
   1abde:	b0cf      	sub	sp, #316	; 0x13c
	uint8_t key[16] = {};
   1abe0:	2300      	movs	r3, #0
{
   1abe2:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1abe4:	aa22      	add	r2, sp, #136	; 0x88
   1abe6:	4669      	mov	r1, sp
   1abe8:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1abea:	e9cd 3300 	strd	r3, r3, [sp]
   1abee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1abf2:	f00d fc91 	bl	28518 <tc_cmac_setup>
   1abf6:	b958      	cbnz	r0, 1ac10 <db_hash_gen+0x34>
		BT_ERR("Unable to setup AES CMAC");
   1abf8:	4b16      	ldr	r3, [pc, #88]	; (1ac54 <db_hash_gen+0x78>)
		BT_ERR("Unable to calculate hash");
   1abfa:	9309      	str	r3, [sp, #36]	; 0x24
   1abfc:	4816      	ldr	r0, [pc, #88]	; (1ac58 <db_hash_gen+0x7c>)
   1abfe:	2302      	movs	r3, #2
   1ac00:	aa08      	add	r2, sp, #32
   1ac02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ac06:	9308      	str	r3, [sp, #32]
   1ac08:	f00f f891 	bl	29d2e <z_log_msg_static_create.constprop.0>
}
   1ac0c:	b04f      	add	sp, #316	; 0x13c
   1ac0e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1ac10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ac14:	2001      	movs	r0, #1
   1ac16:	4a11      	ldr	r2, [pc, #68]	; (1ac5c <db_hash_gen+0x80>)
   1ac18:	ab0a      	add	r3, sp, #40	; 0x28
   1ac1a:	f00f f96f 	bl	29efc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ac1e:	4810      	ldr	r0, [pc, #64]	; (1ac60 <db_hash_gen+0x84>)
   1ac20:	a90a      	add	r1, sp, #40	; 0x28
   1ac22:	f00d fd0f 	bl	28644 <tc_cmac_final>
   1ac26:	b908      	cbnz	r0, 1ac2c <db_hash_gen+0x50>
		BT_ERR("Unable to calculate hash");
   1ac28:	4b0e      	ldr	r3, [pc, #56]	; (1ac64 <db_hash_gen+0x88>)
   1ac2a:	e7e6      	b.n	1abfa <db_hash_gen+0x1e>
   1ac2c:	4b0c      	ldr	r3, [pc, #48]	; (1ac60 <db_hash_gen+0x84>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ac2e:	2208      	movs	r2, #8
   1ac30:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ac34:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ac36:	780d      	ldrb	r5, [r1, #0]
   1ac38:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1ac3c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ac3e:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1ac42:	d1f7      	bne.n	1ac34 <db_hash_gen+0x58>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1ac44:	b10c      	cbz	r4, 1ac4a <db_hash_gen+0x6e>
		db_hash_store();
   1ac46:	f7ff faef 	bl	1a228 <db_hash_store>
   1ac4a:	2104      	movs	r1, #4
   1ac4c:	4806      	ldr	r0, [pc, #24]	; (1ac68 <db_hash_gen+0x8c>)
   1ac4e:	f00e ffab 	bl	29ba8 <atomic_or>
   1ac52:	e7db      	b.n	1ac0c <db_hash_gen+0x30>
   1ac54:	0002f34a 	.word	0x0002f34a
   1ac58:	0002c7ac 	.word	0x0002c7ac
   1ac5c:	00029af3 	.word	0x00029af3
   1ac60:	20002080 	.word	0x20002080
   1ac64:	0002f363 	.word	0x0002f363
   1ac68:	20002180 	.word	0x20002180

0001ac6c <db_hash_read>:
{
   1ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ac70:	4916      	ldr	r1, [pc, #88]	; (1accc <db_hash_read+0x60>)
{
   1ac72:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1ac76:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ac78:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1ac7c:	4615      	mov	r5, r2
   1ac7e:	461e      	mov	r6, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ac80:	f010 fe6d 	bl	2b95e <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ac84:	4812      	ldr	r0, [pc, #72]	; (1acd0 <db_hash_read+0x64>)
   1ac86:	f00e ff89 	bl	29b9c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1ac8a:	0741      	lsls	r1, r0, #29
   1ac8c:	d402      	bmi.n	1ac94 <db_hash_read+0x28>
		db_hash_gen(true);
   1ac8e:	2001      	movs	r0, #1
   1ac90:	f7ff ffa4 	bl	1abdc <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1ac94:	4620      	mov	r0, r4
   1ac96:	f7ff f9dd 	bl	1a054 <find_cf_cfg>
	if (cfg &&
   1ac9a:	b168      	cbz	r0, 1acb8 <db_hash_read+0x4c>
   1ac9c:	7a03      	ldrb	r3, [r0, #8]
   1ac9e:	07da      	lsls	r2, r3, #31
   1aca0:	d50a      	bpl.n	1acb8 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1aca2:	f100 040c 	add.w	r4, r0, #12
   1aca6:	4620      	mov	r0, r4
   1aca8:	f00e ff78 	bl	29b9c <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1acac:	07c3      	lsls	r3, r0, #31
   1acae:	d403      	bmi.n	1acb8 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1acb0:	2102      	movs	r1, #2
   1acb2:	4620      	mov	r0, r4
   1acb4:	f00e ff78 	bl	29ba8 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1acb8:	2310      	movs	r3, #16
   1acba:	9306      	str	r3, [sp, #24]
   1acbc:	463a      	mov	r2, r7
   1acbe:	4631      	mov	r1, r6
   1acc0:	4628      	mov	r0, r5
   1acc2:	4b04      	ldr	r3, [pc, #16]	; (1acd4 <db_hash_read+0x68>)
}
   1acc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1acc8:	f00e bfa6 	b.w	29c18 <bt_gatt_attr_read.constprop.0>
   1accc:	200020d0 	.word	0x200020d0
   1acd0:	20002180 	.word	0x20002180
   1acd4:	20002080 	.word	0x20002080

0001acd8 <db_hash_process>:
{
   1acd8:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1acda:	4827      	ldr	r0, [pc, #156]	; (1ad78 <db_hash_process+0xa0>)
   1acdc:	f06f 0108 	mvn.w	r1, #8
   1ace0:	f00e ff71 	bl	29bc6 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1ace4:	0700      	lsls	r0, r0, #28
   1ace6:	d542      	bpl.n	1ad6e <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ace8:	4823      	ldr	r0, [pc, #140]	; (1ad78 <db_hash_process+0xa0>)
   1acea:	f00e ff57 	bl	29b9c <atomic_get>
   1acee:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1acf0:	0759      	lsls	r1, r3, #29
   1acf2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1acf6:	d401      	bmi.n	1acfc <db_hash_process+0x24>
			db_hash_gen(false);
   1acf8:	f7ff ff70 	bl	1abdc <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1acfc:	491f      	ldr	r1, [pc, #124]	; (1ad7c <db_hash_process+0xa4>)
   1acfe:	2210      	movs	r2, #16
   1ad00:	1888      	adds	r0, r1, r2
   1ad02:	f011 f954 	bl	2bfae <memcmp>
   1ad06:	b948      	cbnz	r0, 1ad1c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1ad08:	481d      	ldr	r0, [pc, #116]	; (1ad80 <db_hash_process+0xa8>)
   1ad0a:	f010 fe14 	bl	2b936 <k_work_cancel_delayable>
}
   1ad0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ad12:	4819      	ldr	r0, [pc, #100]	; (1ad78 <db_hash_process+0xa0>)
   1ad14:	f06f 0101 	mvn.w	r1, #1
   1ad18:	f00e bf55 	b.w	29bc6 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ad1c:	4c19      	ldr	r4, [pc, #100]	; (1ad84 <db_hash_process+0xac>)
   1ad1e:	2101      	movs	r1, #1
   1ad20:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ad24:	f00e ff40 	bl	29ba8 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1ad28:	07c2      	lsls	r2, r0, #31
   1ad2a:	d410      	bmi.n	1ad4e <db_hash_process+0x76>
		gatt_sc.start = start;
   1ad2c:	4b16      	ldr	r3, [pc, #88]	; (1ad88 <db_hash_process+0xb0>)
   1ad2e:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ad30:	4811      	ldr	r0, [pc, #68]	; (1ad78 <db_hash_process+0xa0>)
   1ad32:	f00e ff33 	bl	29b9c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1ad36:	0783      	lsls	r3, r0, #30
   1ad38:	d405      	bmi.n	1ad46 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1ad3a:	4811      	ldr	r0, [pc, #68]	; (1ad80 <db_hash_process+0xa8>)
   1ad3c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ad40:	2300      	movs	r3, #0
   1ad42:	f007 f8f5 	bl	21f30 <k_work_reschedule>
}
   1ad46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1ad4a:	f7ff ba6d 	b.w	1a228 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1ad4e:	8b23      	ldrh	r3, [r4, #24]
   1ad50:	8b62      	ldrh	r2, [r4, #26]
   1ad52:	2b01      	cmp	r3, #1
   1ad54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad58:	d805      	bhi.n	1ad66 <db_hash_process+0x8e>
   1ad5a:	429a      	cmp	r2, r3
   1ad5c:	d0f3      	beq.n	1ad46 <db_hash_process+0x6e>
		*end = new_end;
   1ad5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad62:	8363      	strh	r3, [r4, #26]
   1ad64:	e7e4      	b.n	1ad30 <db_hash_process+0x58>
	if (*end < new_end) {
   1ad66:	429a      	cmp	r2, r3
		*start = new_start;
   1ad68:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1ad6a:	d0e1      	beq.n	1ad30 <db_hash_process+0x58>
   1ad6c:	e7f7      	b.n	1ad5e <db_hash_process+0x86>
}
   1ad6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1ad72:	2001      	movs	r0, #1
   1ad74:	f7ff bf32 	b.w	1abdc <db_hash_gen>
   1ad78:	20002180 	.word	0x20002180
   1ad7c:	20002080 	.word	0x20002080
   1ad80:	20002150 	.word	0x20002150
   1ad84:	20002130 	.word	0x20002130
   1ad88:	ffff0001 	.word	0xffff0001

0001ad8c <ccc_set_direct>:
{
   1ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad90:	b0b8      	sub	sp, #224	; 0xe0
   1ad92:	af00      	add	r7, sp, #0
   1ad94:	4689      	mov	r9, r1
   1ad96:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ad98:	4942      	ldr	r1, [pc, #264]	; (1aea4 <ccc_set_direct+0x118>)
   1ad9a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1ad9e:	463a      	mov	r2, r7
{
   1ada0:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ada2:	f00d fa21 	bl	281e8 <settings_name_steq>
   1ada6:	b938      	cbnz	r0, 1adb8 <ccc_set_direct+0x2c>
   1ada8:	f7ff f976 	bl	1a098 <ccc_set_direct.part.0>
   1adac:	4605      	mov	r5, r0
}
   1adae:	4628      	mov	r0, r5
   1adb0:	37e0      	adds	r7, #224	; 0xe0
   1adb2:	46bd      	mov	sp, r7
   1adb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1adb8:	683c      	ldr	r4, [r7, #0]
		settings_name_next(name, &next);
   1adba:	1d39      	adds	r1, r7, #4
   1adbc:	4620      	mov	r0, r4
   1adbe:	f00d fa36 	bl	2822e <settings_name_next>
		if (!name) {
   1adc2:	b974      	cbnz	r4, 1ade2 <ccc_set_direct+0x56>
			BT_ERR("Insufficient number of arguments");
   1adc4:	4b38      	ldr	r3, [pc, #224]	; (1aea8 <ccc_set_direct+0x11c>)
   1adc6:	637b      	str	r3, [r7, #52]	; 0x34
   1adc8:	4838      	ldr	r0, [pc, #224]	; (1aeac <ccc_set_direct+0x120>)
   1adca:	2302      	movs	r3, #2
   1adcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1add0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1add4:	633b      	str	r3, [r7, #48]	; 0x30
   1add6:	f00e ffaa 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1adda:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1adde:	4625      	mov	r5, r4
   1ade0:	e7e5      	b.n	1adae <ccc_set_direct+0x22>
		} else if (!next) {
   1ade2:	6878      	ldr	r0, [r7, #4]
   1ade4:	b9d8      	cbnz	r0, 1ae1e <ccc_set_direct+0x92>
		err = bt_settings_decode_key(name, &addr);
   1ade6:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1adea:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1adec:	4651      	mov	r1, sl
   1adee:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1adf0:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1adf2:	f00d fcff 	bl	287f4 <bt_settings_decode_key>
		if (err) {
   1adf6:	4605      	mov	r5, r0
   1adf8:	b338      	cbz	r0, 1ae4a <ccc_set_direct+0xbe>
			BT_ERR("Unable to decode address %s", name);
   1adfa:	466d      	mov	r5, sp
   1adfc:	b088      	sub	sp, #32
   1adfe:	466a      	mov	r2, sp
   1ae00:	4b2b      	ldr	r3, [pc, #172]	; (1aeb0 <ccc_set_direct+0x124>)
   1ae02:	482a      	ldr	r0, [pc, #168]	; (1aeac <ccc_set_direct+0x120>)
   1ae04:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ae08:	2302      	movs	r3, #2
   1ae0a:	7713      	strb	r3, [r2, #28]
   1ae0c:	4b29      	ldr	r3, [pc, #164]	; (1aeb4 <ccc_set_direct+0x128>)
   1ae0e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae12:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ae16:	f00e ff8a 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1ae1a:	46ad      	mov	sp, r5
   1ae1c:	e7dd      	b.n	1adda <ccc_set_direct+0x4e>
			unsigned long next_id = strtoul(next, NULL, 10);
   1ae1e:	220a      	movs	r2, #10
   1ae20:	2100      	movs	r1, #0
   1ae22:	f008 fdd1 	bl	239c8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1ae26:	2800      	cmp	r0, #0
   1ae28:	d0dd      	beq.n	1ade6 <ccc_set_direct+0x5a>
				BT_ERR("Invalid local identity %lu", next_id);
   1ae2a:	466c      	mov	r4, sp
   1ae2c:	b088      	sub	sp, #32
   1ae2e:	466a      	mov	r2, sp
   1ae30:	4b21      	ldr	r3, [pc, #132]	; (1aeb8 <ccc_set_direct+0x12c>)
   1ae32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ae36:	2303      	movs	r3, #3
   1ae38:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae3c:	481b      	ldr	r0, [pc, #108]	; (1aeac <ccc_set_direct+0x120>)
   1ae3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae42:	f00e ff74 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1ae46:	46a5      	mov	sp, r4
				return -EINVAL;
   1ae48:	e7c7      	b.n	1adda <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1ae4a:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1ae4e:	f1b9 0f00 	cmp.w	r9, #0
   1ae52:	d024      	beq.n	1ae9e <ccc_set_direct+0x112>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1ae54:	f107 0920 	add.w	r9, r7, #32
   1ae58:	22c0      	movs	r2, #192	; 0xc0
   1ae5a:	4649      	mov	r1, r9
   1ae5c:	4640      	mov	r0, r8
   1ae5e:	47b0      	blx	r6
			if (len < 0) {
   1ae60:	1e04      	subs	r4, r0, #0
   1ae62:	da0f      	bge.n	1ae84 <ccc_set_direct+0xf8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1ae64:	466d      	mov	r5, sp
   1ae66:	b088      	sub	sp, #32
   1ae68:	466a      	mov	r2, sp
   1ae6a:	4b14      	ldr	r3, [pc, #80]	; (1aebc <ccc_set_direct+0x130>)
   1ae6c:	480f      	ldr	r0, [pc, #60]	; (1aeac <ccc_set_direct+0x120>)
   1ae6e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ae72:	2303      	movs	r3, #3
   1ae74:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae7c:	f00e ff57 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1ae80:	46ad      	mov	sp, r5
				return len;
   1ae82:	e7ac      	b.n	1adde <ccc_set_direct+0x52>
			load.count = len / sizeof(*ccc_store);
   1ae84:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1ae86:	f8c7 9018 	str.w	r9, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   1ae8a:	61fc      	str	r4, [r7, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1ae8c:	4a0c      	ldr	r2, [pc, #48]	; (1aec0 <ccc_set_direct+0x134>)
   1ae8e:	f107 0310 	add.w	r3, r7, #16
   1ae92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ae96:	2001      	movs	r0, #1
   1ae98:	f00f f830 	bl	29efc <bt_gatt_foreach_attr>
	return 0;
   1ae9c:	e787      	b.n	1adae <ccc_set_direct+0x22>
			load.count = 0;
   1ae9e:	e9c7 0006 	strd	r0, r0, [r7, #24]
   1aea2:	e7f3      	b.n	1ae8c <ccc_set_direct+0x100>
   1aea4:	0002f37c 	.word	0x0002f37c
   1aea8:	0002e094 	.word	0x0002e094
   1aeac:	0002c7ac 	.word	0x0002c7ac
   1aeb0:	0002f263 	.word	0x0002f263
   1aeb4:	01000003 	.word	0x01000003
   1aeb8:	0002f27f 	.word	0x0002f27f
   1aebc:	0002f242 	.word	0x0002f242
   1aec0:	0001a481 	.word	0x0001a481

0001aec4 <bt_gatt_attr_next>:
{
   1aec4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1aec6:	2300      	movs	r3, #0
   1aec8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1aeca:	f7ff fdfd 	bl	1aac8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1aece:	1c41      	adds	r1, r0, #1
   1aed0:	b289      	uxth	r1, r1
   1aed2:	4608      	mov	r0, r1
   1aed4:	4a03      	ldr	r2, [pc, #12]	; (1aee4 <bt_gatt_attr_next+0x20>)
   1aed6:	ab01      	add	r3, sp, #4
   1aed8:	f00f f810 	bl	29efc <bt_gatt_foreach_attr>
}
   1aedc:	9801      	ldr	r0, [sp, #4]
   1aede:	b003      	add	sp, #12
   1aee0:	f85d fb04 	ldr.w	pc, [sp], #4
   1aee4:	00029a61 	.word	0x00029a61

0001aee8 <gatt_indicate>:
{
   1aee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aeec:	4615      	mov	r5, r2
   1aeee:	b086      	sub	sp, #24
   1aef0:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aef2:	2294      	movs	r2, #148	; 0x94
   1aef4:	6869      	ldr	r1, [r5, #4]
{
   1aef6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aef8:	f00f f80b 	bl	29f12 <bt_gatt_check_perm>
   1aefc:	4680      	mov	r8, r0
   1aefe:	b178      	cbz	r0, 1af20 <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   1af00:	4b36      	ldr	r3, [pc, #216]	; (1afdc <gatt_indicate+0xf4>)
   1af02:	9305      	str	r3, [sp, #20]
   1af04:	4836      	ldr	r0, [pc, #216]	; (1afe0 <gatt_indicate+0xf8>)
   1af06:	2302      	movs	r3, #2
   1af08:	aa04      	add	r2, sp, #16
   1af0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1af0e:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   1af12:	9304      	str	r3, [sp, #16]
   1af14:	f00e ff0b 	bl	29d2e <z_log_msg_static_create.constprop.0>
}
   1af18:	4628      	mov	r0, r5
   1af1a:	b006      	add	sp, #24
   1af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1af20:	6869      	ldr	r1, [r5, #4]
   1af22:	2202      	movs	r2, #2
   1af24:	4630      	mov	r0, r6
   1af26:	f00f f827 	bl	29f78 <bt_gatt_is_subscribed>
   1af2a:	b960      	cbnz	r0, 1af46 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   1af2c:	4b2d      	ldr	r3, [pc, #180]	; (1afe4 <gatt_indicate+0xfc>)
   1af2e:	9305      	str	r3, [sp, #20]
   1af30:	482b      	ldr	r0, [pc, #172]	; (1afe0 <gatt_indicate+0xf8>)
   1af32:	2302      	movs	r3, #2
   1af34:	aa04      	add	r2, sp, #16
   1af36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1af3a:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1af3c:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   1af40:	f00e fef5 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1af44:	e7e8      	b.n	1af18 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1af46:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1af4a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1af4c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1af4e:	f7fe ff7d 	bl	19e4c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1af52:	3702      	adds	r7, #2
	if (!req) {
   1af54:	4604      	mov	r4, r0
   1af56:	b910      	cbnz	r0, 1af5e <gatt_indicate+0x76>
		return -ENOMEM;
   1af58:	f06f 050b 	mvn.w	r5, #11
   1af5c:	e7dc      	b.n	1af18 <gatt_indicate+0x30>
	req->func = func;
   1af5e:	4b22      	ldr	r3, [pc, #136]	; (1afe8 <gatt_indicate+0x100>)
	req->len = len;
   1af60:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1af62:	211d      	movs	r1, #29
   1af64:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1af66:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1af6a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1af6c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1af6e:	463a      	mov	r2, r7
   1af70:	4630      	mov	r0, r6
   1af72:	f7fe fb77 	bl	19664 <bt_att_create_pdu>
	if (!buf) {
   1af76:	4607      	mov	r7, r0
   1af78:	b968      	cbnz	r0, 1af96 <gatt_indicate+0xae>
		BT_WARN("No buffer available to send indication");
   1af7a:	4b1c      	ldr	r3, [pc, #112]	; (1afec <gatt_indicate+0x104>)
   1af7c:	9305      	str	r3, [sp, #20]
   1af7e:	4818      	ldr	r0, [pc, #96]	; (1afe0 <gatt_indicate+0xf8>)
   1af80:	2302      	movs	r3, #2
   1af82:	aa04      	add	r2, sp, #16
   1af84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1af88:	9304      	str	r3, [sp, #16]
   1af8a:	f00e fed0 	bl	29d2e <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1af8e:	4620      	mov	r0, r4
   1af90:	f7fe ff7e 	bl	19e90 <bt_att_req_free>
   1af94:	e7e0      	b.n	1af58 <gatt_indicate+0x70>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1af96:	2301      	movs	r3, #1
   1af98:	4642      	mov	r2, r8
   1af9a:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1af9c:	f107 0a08 	add.w	sl, r7, #8
   1afa0:	f00e fd57 	bl	29a52 <bt_att_set_tx_meta_data>
   1afa4:	2102      	movs	r1, #2
   1afa6:	4650      	mov	r0, sl
   1afa8:	f00f fd9c 	bl	2aae4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1afac:	4680      	mov	r8, r0
   1afae:	8aa9      	ldrh	r1, [r5, #20]
   1afb0:	f828 9b02 	strh.w	r9, [r8], #2
   1afb4:	4650      	mov	r0, sl
   1afb6:	f00f fd95 	bl	2aae4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1afba:	8aaa      	ldrh	r2, [r5, #20]
   1afbc:	6929      	ldr	r1, [r5, #16]
   1afbe:	4640      	mov	r0, r8
   1afc0:	f011 f805 	bl	2bfce <memcpy>
	req->buf = buf;
   1afc4:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1afc6:	4621      	mov	r1, r4
   1afc8:	4630      	mov	r0, r6
   1afca:	f00e fd06 	bl	299da <bt_att_req_send>
	if (err) {
   1afce:	4605      	mov	r5, r0
   1afd0:	2800      	cmp	r0, #0
   1afd2:	d0a1      	beq.n	1af18 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1afd4:	4620      	mov	r0, r4
   1afd6:	f7fe ff5b 	bl	19e90 <bt_att_req_free>
   1afda:	e79d      	b.n	1af18 <gatt_indicate+0x30>
   1afdc:	0002f383 	.word	0x0002f383
   1afe0:	0002c7ac 	.word	0x0002c7ac
   1afe4:	0002f399 	.word	0x0002f399
   1afe8:	00029a7b 	.word	0x00029a7b
   1afec:	0002f3c4 	.word	0x0002f3c4

0001aff0 <bt_gatt_indicate>:
{
   1aff0:	b530      	push	{r4, r5, lr}
   1aff2:	4604      	mov	r4, r0
   1aff4:	b08b      	sub	sp, #44	; 0x2c
   1aff6:	4837      	ldr	r0, [pc, #220]	; (1b0d4 <bt_gatt_indicate+0xe4>)
   1aff8:	f00e fdd0 	bl	29b9c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1affc:	0742      	lsls	r2, r0, #29
{
   1affe:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b000:	d561      	bpl.n	1b0c6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b002:	b114      	cbz	r4, 1b00a <bt_gatt_indicate+0x1a>
   1b004:	7b63      	ldrb	r3, [r4, #13]
   1b006:	2b07      	cmp	r3, #7
   1b008:	d160      	bne.n	1b0cc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1b00a:	6868      	ldr	r0, [r5, #4]
   1b00c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b00e:	f7ff fd5b 	bl	1aac8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b012:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b014:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b018:	b33a      	cbz	r2, 1b06a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b01a:	a905      	add	r1, sp, #20
   1b01c:	9102      	str	r1, [sp, #8]
   1b01e:	492e      	ldr	r1, [pc, #184]	; (1b0d8 <bt_gatt_indicate+0xe8>)
   1b020:	9101      	str	r1, [sp, #4]
   1b022:	2101      	movs	r1, #1
	found->attr = NULL;
   1b024:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b026:	9100      	str	r1, [sp, #0]
   1b028:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b02c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b02e:	f7ff fd7b 	bl	1ab28 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b032:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b034:	b91b      	cbnz	r3, 1b03e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1b036:	f06f 0001 	mvn.w	r0, #1
}
   1b03a:	b00b      	add	sp, #44	; 0x2c
   1b03c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b03e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b040:	9b05      	ldr	r3, [sp, #20]
   1b042:	6818      	ldr	r0, [r3, #0]
   1b044:	2300      	movs	r3, #0
   1b046:	f88d 3010 	strb.w	r3, [sp, #16]
   1b04a:	a904      	add	r1, sp, #16
   1b04c:	f642 0303 	movw	r3, #10243	; 0x2803
   1b050:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b054:	f00d fbf2 	bl	2883c <bt_uuid_cmp>
   1b058:	b970      	cbnz	r0, 1b078 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b05a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b05c:	68c3      	ldr	r3, [r0, #12]
   1b05e:	799b      	ldrb	r3, [r3, #6]
   1b060:	069b      	lsls	r3, r3, #26
   1b062:	d405      	bmi.n	1b070 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1b064:	f06f 0015 	mvn.w	r0, #21
   1b068:	e7e7      	b.n	1b03a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1b06a:	2800      	cmp	r0, #0
   1b06c:	d1e8      	bne.n	1b040 <bt_gatt_indicate+0x50>
   1b06e:	e7e2      	b.n	1b036 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b070:	f00e fefd 	bl	29e6e <bt_gatt_attr_value_handle>
   1b074:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b078:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b07c:	b13c      	cbz	r4, 1b08e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1b07e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b080:	4601      	mov	r1, r0
		params->_ref = 1;
   1b082:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1b084:	462a      	mov	r2, r5
   1b086:	4620      	mov	r0, r4
   1b088:	f7ff ff2e 	bl	1aee8 <gatt_indicate>
   1b08c:	e7d5      	b.n	1b03a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1b08e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b092:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b094:	2302      	movs	r3, #2
   1b096:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b09a:	f642 1302 	movw	r3, #10498	; 0x2902
   1b09e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b0a2:	ab05      	add	r3, sp, #20
   1b0a4:	9302      	str	r3, [sp, #8]
   1b0a6:	4b0d      	ldr	r3, [pc, #52]	; (1b0dc <bt_gatt_indicate+0xec>)
   1b0a8:	9301      	str	r3, [sp, #4]
   1b0aa:	2301      	movs	r3, #1
   1b0ac:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1b0ae:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b0b0:	4623      	mov	r3, r4
   1b0b2:	aa04      	add	r2, sp, #16
   1b0b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b0b8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b0ba:	f88d 4010 	strb.w	r4, [sp, #16]
   1b0be:	f7ff fd33 	bl	1ab28 <bt_gatt_foreach_attr_type>
	return data.err;
   1b0c2:	9807      	ldr	r0, [sp, #28]
   1b0c4:	e7b9      	b.n	1b03a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1b0c6:	f06f 000a 	mvn.w	r0, #10
   1b0ca:	e7b6      	b.n	1b03a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1b0cc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b0d0:	e7b3      	b.n	1b03a <bt_gatt_indicate+0x4a>
   1b0d2:	bf00      	nop
   1b0d4:	2000041c 	.word	0x2000041c
   1b0d8:	00029aa1 	.word	0x00029aa1
   1b0dc:	0001b455 	.word	0x0001b455

0001b0e0 <sc_process>:
{
   1b0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b0e2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1b0e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1b0ea:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1b0ee:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1b0f0:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   1b0f4:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1b0f8:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b0fc:	f06f 0101 	mvn.w	r1, #1
   1b100:	4628      	mov	r0, r5
   1b102:	f00e fd60 	bl	29bc6 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b106:	4b0d      	ldr	r3, [pc, #52]	; (1b13c <sc_process+0x5c>)
   1b108:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b10c:	4b0c      	ldr	r3, [pc, #48]	; (1b140 <sc_process+0x60>)
   1b10e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b112:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1b114:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1b116:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b11a:	2304      	movs	r3, #4
	sc->start = 0U;
   1b11c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1b120:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b124:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b128:	4631      	mov	r1, r6
   1b12a:	f7ff ff61 	bl	1aff0 <bt_gatt_indicate>
   1b12e:	b918      	cbnz	r0, 1b138 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b130:	2102      	movs	r1, #2
   1b132:	4628      	mov	r0, r5
   1b134:	f00e fd38 	bl	29ba8 <atomic_or>
}
   1b138:	b002      	add	sp, #8
   1b13a:	bd70      	pop	{r4, r5, r6, pc}
   1b13c:	0002d12c 	.word	0x0002d12c
   1b140:	0001a9b1 	.word	0x0001a9b1

0001b144 <update_ccc>:
{
   1b144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b148:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1b14a:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b14c:	4b3c      	ldr	r3, [pc, #240]	; (1b240 <update_ccc+0xfc>)
{
   1b14e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b150:	6882      	ldr	r2, [r0, #8]
   1b152:	429a      	cmp	r2, r3
{
   1b154:	af00      	add	r7, sp, #0
   1b156:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b158:	d122      	bne.n	1b1a0 <update_ccc+0x5c>
	ccc = attr->user_data;
   1b15a:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (!cfg->value ||
   1b15e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b162:	b1eb      	cbz	r3, 1b1a0 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b164:	4642      	mov	r2, r8
   1b166:	4620      	mov	r0, r4
   1b168:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b16c:	f00d fea0 	bl	28eb0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b170:	b1b0      	cbz	r0, 1b1a0 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b172:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b176:	4629      	mov	r1, r5
   1b178:	4620      	mov	r0, r4
   1b17a:	f00e feca 	bl	29f12 <bt_gatt_check_perm>
		if (err) {
   1b17e:	b328      	cbz	r0, 1b1cc <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b180:	2803      	cmp	r0, #3
   1b182:	d112      	bne.n	1b1aa <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
   1b184:	466c      	mov	r4, sp
   1b186:	b088      	sub	sp, #32
   1b188:	466a      	mov	r2, sp
   1b18a:	4b2e      	ldr	r3, [pc, #184]	; (1b244 <update_ccc+0x100>)
   1b18c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b190:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b194:	f842 0f10 	str.w	r0, [r2, #16]!
   1b198:	482b      	ldr	r0, [pc, #172]	; (1b248 <update_ccc+0x104>)
   1b19a:	f00e fdc8 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b19e:	46a5      	mov	sp, r4
}
   1b1a0:	2001      	movs	r0, #1
   1b1a2:	3724      	adds	r7, #36	; 0x24
   1b1a4:	46bd      	mov	sp, r7
   1b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sec = BT_SECURITY_L3;
   1b1aa:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b1ac:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1b1ae:	bf14      	ite	ne
   1b1b0:	f04f 0902 	movne.w	r9, #2
   1b1b4:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
   1b1b8:	f00d fe78 	bl	28eac <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b1bc:	4581      	cmp	r9, r0
   1b1be:	d905      	bls.n	1b1cc <update_ccc+0x88>
				if (data->sec < sec) {
   1b1c0:	7933      	ldrb	r3, [r6, #4]
   1b1c2:	454b      	cmp	r3, r9
   1b1c4:	d2ec      	bcs.n	1b1a0 <update_ccc+0x5c>
					data->sec = sec;
   1b1c6:	f886 9004 	strb.w	r9, [r6, #4]
   1b1ca:	e7e9      	b.n	1b1a0 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1b1cc:	4641      	mov	r1, r8
   1b1ce:	4628      	mov	r0, r5
   1b1d0:	f00e fc49 	bl	29a66 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b1d4:	4b1d      	ldr	r3, [pc, #116]	; (1b24c <update_ccc+0x108>)
   1b1d6:	4598      	cmp	r8, r3
   1b1d8:	d1e2      	bne.n	1b1a0 <update_ccc+0x5c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b1da:	7a20      	ldrb	r0, [r4, #8]
   1b1dc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1b1e0:	f7ff fa32 	bl	1a648 <find_sc_cfg>
	if (!cfg) {
   1b1e4:	2800      	cmp	r0, #0
   1b1e6:	d0db      	beq.n	1b1a0 <update_ccc+0x5c>
	if (!(cfg->data.start || cfg->data.end)) {
   1b1e8:	8902      	ldrh	r2, [r0, #8]
   1b1ea:	8943      	ldrh	r3, [r0, #10]
   1b1ec:	ea52 0103 	orrs.w	r1, r2, r3
   1b1f0:	d0d6      	beq.n	1b1a0 <update_ccc+0x5c>
	index = bt_conn_index(conn);
   1b1f2:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b1f4:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b1f6:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1b1f8:	f7fd f9b8 	bl	1856c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b1fc:	4914      	ldr	r1, [pc, #80]	; (1b250 <update_ccc+0x10c>)
   1b1fe:	4a15      	ldr	r2, [pc, #84]	; (1b254 <update_ccc+0x110>)
   1b200:	2318      	movs	r3, #24
   1b202:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b206:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b208:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b20a:	4a13      	ldr	r2, [pc, #76]	; (1b258 <update_ccc+0x114>)
   1b20c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b20e:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b210:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1b214:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b216:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b218:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1b21c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b21e:	4620      	mov	r0, r4
   1b220:	f7ff fee6 	bl	1aff0 <bt_gatt_indicate>
   1b224:	2800      	cmp	r0, #0
   1b226:	d0bb      	beq.n	1b1a0 <update_ccc+0x5c>
		BT_ERR("SC restore indication failed");
   1b228:	4b0c      	ldr	r3, [pc, #48]	; (1b25c <update_ccc+0x118>)
   1b22a:	61fb      	str	r3, [r7, #28]
   1b22c:	4806      	ldr	r0, [pc, #24]	; (1b248 <update_ccc+0x104>)
   1b22e:	2302      	movs	r3, #2
   1b230:	f107 0218 	add.w	r2, r7, #24
   1b234:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b238:	61bb      	str	r3, [r7, #24]
   1b23a:	f00e fd78 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b23e:	e7af      	b.n	1b1a0 <update_ccc+0x5c>
   1b240:	0001a541 	.word	0x0001a541
   1b244:	0002f3eb 	.word	0x0002f3eb
   1b248:	0002c7ac 	.word	0x0002c7ac
   1b24c:	2000072c 	.word	0x2000072c
   1b250:	20002f38 	.word	0x20002f38
   1b254:	0002d12c 	.word	0x0002d12c
   1b258:	00029e05 	.word	0x00029e05
   1b25c:	0002f3ff 	.word	0x0002f3ff

0001b260 <gatt_notify>:
{
   1b260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b264:	4614      	mov	r4, r2
   1b266:	b087      	sub	sp, #28
   1b268:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b26a:	2294      	movs	r2, #148	; 0x94
   1b26c:	6861      	ldr	r1, [r4, #4]
{
   1b26e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b270:	f00e fe4f 	bl	29f12 <bt_gatt_check_perm>
   1b274:	b170      	cbz	r0, 1b294 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   1b276:	4b2b      	ldr	r3, [pc, #172]	; (1b324 <gatt_notify+0xc4>)
   1b278:	482b      	ldr	r0, [pc, #172]	; (1b328 <gatt_notify+0xc8>)
   1b27a:	9305      	str	r3, [sp, #20]
   1b27c:	aa04      	add	r2, sp, #16
   1b27e:	2302      	movs	r3, #2
   1b280:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b284:	9304      	str	r3, [sp, #16]
   1b286:	f00e fd52 	bl	29d2e <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1b28a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b28e:	b007      	add	sp, #28
   1b290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1b294:	6861      	ldr	r1, [r4, #4]
   1b296:	2201      	movs	r2, #1
   1b298:	4630      	mov	r0, r6
   1b29a:	f00e fe6d 	bl	29f78 <bt_gatt_is_subscribed>
   1b29e:	b960      	cbnz	r0, 1b2ba <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1b2a0:	4b22      	ldr	r3, [pc, #136]	; (1b32c <gatt_notify+0xcc>)
   1b2a2:	4821      	ldr	r0, [pc, #132]	; (1b328 <gatt_notify+0xc8>)
   1b2a4:	9305      	str	r3, [sp, #20]
   1b2a6:	aa04      	add	r2, sp, #16
   1b2a8:	2302      	movs	r3, #2
   1b2aa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b2ae:	9304      	str	r3, [sp, #16]
   1b2b0:	f00e fd3d 	bl	29d2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b2b4:	f06f 0015 	mvn.w	r0, #21
   1b2b8:	e7e9      	b.n	1b28e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1b2ba:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b2bc:	211b      	movs	r1, #27
   1b2be:	3202      	adds	r2, #2
   1b2c0:	4630      	mov	r0, r6
   1b2c2:	f7fe f9cf 	bl	19664 <bt_att_create_pdu>
	if (!buf) {
   1b2c6:	4605      	mov	r5, r0
   1b2c8:	b960      	cbnz	r0, 1b2e4 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   1b2ca:	4b19      	ldr	r3, [pc, #100]	; (1b330 <gatt_notify+0xd0>)
   1b2cc:	4816      	ldr	r0, [pc, #88]	; (1b328 <gatt_notify+0xc8>)
   1b2ce:	9305      	str	r3, [sp, #20]
   1b2d0:	aa04      	add	r2, sp, #16
   1b2d2:	2302      	movs	r3, #2
   1b2d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b2d8:	9304      	str	r3, [sp, #16]
   1b2da:	f00e fd28 	bl	29d2e <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1b2de:	f06f 000b 	mvn.w	r0, #11
   1b2e2:	e7d4      	b.n	1b28e <gatt_notify+0x2e>
   1b2e4:	f100 0908 	add.w	r9, r0, #8
   1b2e8:	2102      	movs	r1, #2
   1b2ea:	4648      	mov	r0, r9
   1b2ec:	f00f fbfa 	bl	2aae4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b2f0:	4607      	mov	r7, r0
   1b2f2:	89a1      	ldrh	r1, [r4, #12]
   1b2f4:	f827 8b02 	strh.w	r8, [r7], #2
   1b2f8:	4648      	mov	r0, r9
   1b2fa:	f00f fbf3 	bl	2aae4 <net_buf_simple_add>
   1b2fe:	89a2      	ldrh	r2, [r4, #12]
   1b300:	68a1      	ldr	r1, [r4, #8]
   1b302:	4638      	mov	r0, r7
   1b304:	f010 fe63 	bl	2bfce <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1b308:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1b30c:	4628      	mov	r0, r5
   1b30e:	2301      	movs	r3, #1
   1b310:	f00e fb9f 	bl	29a52 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1b314:	4629      	mov	r1, r5
   1b316:	4630      	mov	r0, r6
}
   1b318:	b007      	add	sp, #28
   1b31a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1b31e:	f00e bb19 	b.w	29954 <bt_att_send>
   1b322:	bf00      	nop
   1b324:	0002f383 	.word	0x0002f383
   1b328:	0002c7ac 	.word	0x0002c7ac
   1b32c:	0002f399 	.word	0x0002f399
   1b330:	0002f41c 	.word	0x0002f41c

0001b334 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1b334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b338:	4b42      	ldr	r3, [pc, #264]	; (1b444 <notify_cb.part.0+0x110>)
	ccc = attr->user_data;
   1b33a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b33e:	4598      	cmp	r8, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1b340:	b087      	sub	sp, #28
   1b342:	4607      	mov	r7, r0
   1b344:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b346:	d11e      	bne.n	1b386 <notify_cb.part.0+0x52>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b348:	2600      	movs	r6, #0
   1b34a:	4d3f      	ldr	r5, [pc, #252]	; (1b448 <notify_cb.part.0+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b34c:	46b1      	mov	r9, r6
   1b34e:	2207      	movs	r2, #7
   1b350:	4669      	mov	r1, sp
   1b352:	4628      	mov	r0, r5
   1b354:	f8cd 9000 	str.w	r9, [sp]
   1b358:	f8cd 9003 	str.w	r9, [sp, #3]
   1b35c:	f010 fe27 	bl	2bfae <memcmp>
   1b360:	b178      	cbz	r0, 1b382 <notify_cb.part.0+0x4e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b362:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1b366:	2207      	movs	r2, #7
   1b368:	4629      	mov	r1, r5
   1b36a:	f7fd fa6b 	bl	18844 <bt_conn_lookup_state_le>
			if (!conn) {
   1b36e:	b9e8      	cbnz	r0, 1b3ac <notify_cb.part.0+0x78>
				sc = (struct sc_data *)data->ind_params->data;
   1b370:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1b372:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1b376:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b378:	4629      	mov	r1, r5
   1b37a:	8853      	ldrh	r3, [r2, #2]
   1b37c:	8812      	ldrh	r2, [r2, #0]
   1b37e:	f7ff f985 	bl	1a68c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b382:	350c      	adds	r5, #12
   1b384:	b186      	cbz	r6, 1b3a8 <notify_cb.part.0+0x74>
		if (cfg->value != data->type) {
   1b386:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1b38a:	89a3      	ldrh	r3, [r4, #12]
   1b38c:	429a      	cmp	r2, r3
   1b38e:	d106      	bne.n	1b39e <notify_cb.part.0+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b390:	4641      	mov	r1, r8
   1b392:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b396:	f7fd fa09 	bl	187ac <bt_conn_lookup_addr_le>
		if (!conn) {
   1b39a:	4606      	mov	r6, r0
   1b39c:	b948      	cbnz	r0, 1b3b2 <notify_cb.part.0+0x7e>
	return BT_GATT_ITER_CONTINUE;
   1b39e:	2701      	movs	r7, #1
}
   1b3a0:	4638      	mov	r0, r7
   1b3a2:	b007      	add	sp, #28
   1b3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b3a8:	2601      	movs	r6, #1
   1b3aa:	e7d0      	b.n	1b34e <notify_cb.part.0+0x1a>
			bt_conn_unref(conn);
   1b3ac:	f00d fce5 	bl	28d7a <bt_conn_unref>
   1b3b0:	e7e7      	b.n	1b382 <notify_cb.part.0+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
   1b3b2:	7b43      	ldrb	r3, [r0, #13]
   1b3b4:	2b07      	cmp	r3, #7
   1b3b6:	d002      	beq.n	1b3be <notify_cb.part.0+0x8a>
			bt_conn_unref(conn);
   1b3b8:	f00d fcdf 	bl	28d7a <bt_conn_unref>
			continue;
   1b3bc:	e7ef      	b.n	1b39e <notify_cb.part.0+0x6a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b3be:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b3c2:	b123      	cbz	r3, 1b3ce <notify_cb.part.0+0x9a>
   1b3c4:	4639      	mov	r1, r7
   1b3c6:	4798      	blx	r3
   1b3c8:	b908      	cbnz	r0, 1b3ce <notify_cb.part.0+0x9a>
			bt_conn_unref(conn);
   1b3ca:	4630      	mov	r0, r6
   1b3cc:	e7f4      	b.n	1b3b8 <notify_cb.part.0+0x84>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b3ce:	4639      	mov	r1, r7
   1b3d0:	2294      	movs	r2, #148	; 0x94
   1b3d2:	4630      	mov	r0, r6
   1b3d4:	f00e fd9d 	bl	29f12 <bt_gatt_check_perm>
   1b3d8:	4607      	mov	r7, r0
   1b3da:	b150      	cbz	r0, 1b3f2 <notify_cb.part.0+0xbe>
			BT_WARN("Link is not encrypted");
   1b3dc:	4b1b      	ldr	r3, [pc, #108]	; (1b44c <notify_cb.part.0+0x118>)
   1b3de:	9305      	str	r3, [sp, #20]
   1b3e0:	481b      	ldr	r0, [pc, #108]	; (1b450 <notify_cb.part.0+0x11c>)
   1b3e2:	2302      	movs	r3, #2
   1b3e4:	aa04      	add	r2, sp, #16
   1b3e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b3ea:	9304      	str	r3, [sp, #16]
   1b3ec:	f00e fc9f 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b3f0:	e7eb      	b.n	1b3ca <notify_cb.part.0+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1b3f2:	89a3      	ldrh	r3, [r4, #12]
   1b3f4:	2b02      	cmp	r3, #2
   1b3f6:	d116      	bne.n	1b426 <notify_cb.part.0+0xf2>
   1b3f8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b3fc:	079a      	lsls	r2, r3, #30
   1b3fe:	d51f      	bpl.n	1b440 <notify_cb.part.0+0x10c>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1b400:	6922      	ldr	r2, [r4, #16]
   1b402:	88a1      	ldrh	r1, [r4, #4]
   1b404:	4630      	mov	r0, r6
   1b406:	f7ff fd6f 	bl	1aee8 <gatt_indicate>
			if (err == 0) {
   1b40a:	4605      	mov	r5, r0
   1b40c:	b918      	cbnz	r0, 1b416 <notify_cb.part.0+0xe2>
				data->ind_params->_ref++;
   1b40e:	6922      	ldr	r2, [r4, #16]
   1b410:	7d93      	ldrb	r3, [r2, #22]
   1b412:	3301      	adds	r3, #1
   1b414:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1b416:	4630      	mov	r0, r6
   1b418:	f00d fcaf 	bl	28d7a <bt_conn_unref>
		if (err < 0) {
   1b41c:	2d00      	cmp	r5, #0
   1b41e:	dbbf      	blt.n	1b3a0 <notify_cb.part.0+0x6c>
		data->err = 0;
   1b420:	2300      	movs	r3, #0
   1b422:	60a3      	str	r3, [r4, #8]
   1b424:	e7bb      	b.n	1b39e <notify_cb.part.0+0x6a>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1b426:	2b01      	cmp	r3, #1
   1b428:	d10a      	bne.n	1b440 <notify_cb.part.0+0x10c>
   1b42a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b42e:	07db      	lsls	r3, r3, #31
   1b430:	d506      	bpl.n	1b440 <notify_cb.part.0+0x10c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b432:	6922      	ldr	r2, [r4, #16]
   1b434:	88a1      	ldrh	r1, [r4, #4]
   1b436:	4630      	mov	r0, r6
   1b438:	f7ff ff12 	bl	1b260 <gatt_notify>
   1b43c:	4605      	mov	r5, r0
   1b43e:	e7ea      	b.n	1b416 <notify_cb.part.0+0xe2>
			err = 0;
   1b440:	463d      	mov	r5, r7
   1b442:	e7e8      	b.n	1b416 <notify_cb.part.0+0xe2>
   1b444:	2000072c 	.word	0x2000072c
   1b448:	20003d8d 	.word	0x20003d8d
   1b44c:	0002f383 	.word	0x0002f383
   1b450:	0002c7ac 	.word	0x0002c7ac

0001b454 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b454:	4b04      	ldr	r3, [pc, #16]	; (1b468 <notify_cb+0x14>)
{
   1b456:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b458:	6882      	ldr	r2, [r0, #8]
   1b45a:	429a      	cmp	r2, r3
   1b45c:	d101      	bne.n	1b462 <notify_cb+0xe>
   1b45e:	f7ff bf69 	b.w	1b334 <notify_cb.part.0>
}
   1b462:	2001      	movs	r0, #1
   1b464:	4770      	bx	lr
   1b466:	bf00      	nop
   1b468:	0001a541 	.word	0x0001a541

0001b46c <bt_gatt_connected>:
{
   1b46c:	b5b0      	push	{r4, r5, r7, lr}
   1b46e:	b08e      	sub	sp, #56	; 0x38
   1b470:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b472:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1b476:	4604      	mov	r4, r0
	data.conn = conn;
   1b478:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1b47a:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b47c:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b47e:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b480:	4629      	mov	r1, r5
   1b482:	f00d fb43 	bl	28b0c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b486:	b198      	cbz	r0, 1b4b0 <bt_gatt_connected+0x44>
		if (conn->id) {
   1b488:	7a22      	ldrb	r2, [r4, #8]
   1b48a:	b3a2      	cbz	r2, 1b4f6 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b48c:	2104      	movs	r1, #4
   1b48e:	4638      	mov	r0, r7
   1b490:	f00c f87f 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b494:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b496:	4a19      	ldr	r2, [pc, #100]	; (1b4fc <bt_gatt_connected+0x90>)
   1b498:	2124      	movs	r1, #36	; 0x24
   1b49a:	f107 000c 	add.w	r0, r7, #12
   1b49e:	462b      	mov	r3, r5
   1b4a0:	f7fa fa9a 	bl	159d8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b4a4:	f107 020c 	add.w	r2, r7, #12
   1b4a8:	4915      	ldr	r1, [pc, #84]	; (1b500 <bt_gatt_connected+0x94>)
   1b4aa:	4610      	mov	r0, r2
   1b4ac:	f7f9 f844 	bl	14538 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b4b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b4b4:	4a13      	ldr	r2, [pc, #76]	; (1b504 <bt_gatt_connected+0x98>)
   1b4b6:	1d3b      	adds	r3, r7, #4
   1b4b8:	2001      	movs	r0, #1
   1b4ba:	f00e fd1f 	bl	29efc <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b4be:	4620      	mov	r0, r4
   1b4c0:	f00d fcf4 	bl	28eac <bt_conn_get_security>
   1b4c4:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b4c6:	4288      	cmp	r0, r1
   1b4c8:	d212      	bcs.n	1b4f0 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1b4ca:	4620      	mov	r0, r4
   1b4cc:	f00d fcbe 	bl	28e4c <bt_conn_set_security>
		if (err) {
   1b4d0:	b170      	cbz	r0, 1b4f0 <bt_gatt_connected+0x84>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1b4d2:	466c      	mov	r4, sp
   1b4d4:	b088      	sub	sp, #32
   1b4d6:	aa02      	add	r2, sp, #8
   1b4d8:	4b0b      	ldr	r3, [pc, #44]	; (1b508 <bt_gatt_connected+0x9c>)
   1b4da:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b4de:	2303      	movs	r3, #3
   1b4e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4e4:	4809      	ldr	r0, [pc, #36]	; (1b50c <bt_gatt_connected+0xa0>)
   1b4e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b4ea:	f00e fc20 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b4ee:	46a5      	mov	sp, r4
}
   1b4f0:	3730      	adds	r7, #48	; 0x30
   1b4f2:	46bd      	mov	sp, r7
   1b4f4:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b4f6:	9200      	str	r2, [sp, #0]
   1b4f8:	e7cd      	b.n	1b496 <bt_gatt_connected+0x2a>
   1b4fa:	bf00      	nop
   1b4fc:	0002f37f 	.word	0x0002f37f
   1b500:	0001ad8d 	.word	0x0001ad8d
   1b504:	0001b145 	.word	0x0001b145
   1b508:	0002f445 	.word	0x0002f445
   1b50c:	0002c7ac 	.word	0x0002c7ac

0001b510 <bt_gatt_att_max_mtu_changed>:
{
   1b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1b512:	4b08      	ldr	r3, [pc, #32]	; (1b534 <bt_gatt_att_max_mtu_changed+0x24>)
   1b514:	681c      	ldr	r4, [r3, #0]
   1b516:	4605      	mov	r5, r0
   1b518:	460e      	mov	r6, r1
   1b51a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b51c:	b14c      	cbz	r4, 1b532 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1b51e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b522:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1b524:	b11b      	cbz	r3, 1b52e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1b526:	463a      	mov	r2, r7
   1b528:	4631      	mov	r1, r6
   1b52a:	4628      	mov	r0, r5
   1b52c:	4798      	blx	r3
	return node->next;
   1b52e:	6864      	ldr	r4, [r4, #4]
   1b530:	e7f4      	b.n	1b51c <bt_gatt_att_max_mtu_changed+0xc>
}
   1b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b534:	20002f0c 	.word	0x20002f0c

0001b538 <bt_gatt_encrypt_change>:
{
   1b538:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b53a:	4a06      	ldr	r2, [pc, #24]	; (1b554 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1b53c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b53e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b540:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b542:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b546:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b54a:	f00e fcd7 	bl	29efc <bt_gatt_foreach_attr>
}
   1b54e:	b003      	add	sp, #12
   1b550:	f85d fb04 	ldr.w	pc, [sp], #4
   1b554:	0001b145 	.word	0x0001b145

0001b558 <bt_gatt_store_ccc>:
{
   1b558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b55a:	b0c1      	sub	sp, #260	; 0x104
   1b55c:	af02      	add	r7, sp, #8
	save.count = 0;
   1b55e:	2300      	movs	r3, #0
{
   1b560:	4604      	mov	r4, r0
   1b562:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b564:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1b566:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1b56a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b56e:	4a1d      	ldr	r2, [pc, #116]	; (1b5e4 <bt_gatt_store_ccc+0x8c>)
   1b570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b578:	2001      	movs	r0, #1
   1b57a:	f00e fcbf 	bl	29efc <bt_gatt_foreach_attr>
	if (id) {
   1b57e:	b364      	cbz	r4, 1b5da <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b580:	1d3e      	adds	r6, r7, #4
   1b582:	4622      	mov	r2, r4
   1b584:	2104      	movs	r1, #4
   1b586:	4630      	mov	r0, r6
   1b588:	f00c f803 	bl	27592 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b58c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b58e:	4a16      	ldr	r2, [pc, #88]	; (1b5e8 <bt_gatt_store_ccc+0x90>)
   1b590:	462b      	mov	r3, r5
   1b592:	2124      	movs	r1, #36	; 0x24
   1b594:	f107 0008 	add.w	r0, r7, #8
   1b598:	f7fa fa1e 	bl	159d8 <bt_settings_encode_key>
	if (save.count) {
   1b59c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1b5a0:	b1ea      	cbz	r2, 1b5de <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1b5a2:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b5a4:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1b5a8:	f107 0008 	add.w	r0, r7, #8
   1b5ac:	f7f8 ff9e 	bl	144ec <settings_save_one>
	if (err) {
   1b5b0:	4604      	mov	r4, r0
   1b5b2:	b170      	cbz	r0, 1b5d2 <bt_gatt_store_ccc+0x7a>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b5b4:	466d      	mov	r5, sp
   1b5b6:	b088      	sub	sp, #32
   1b5b8:	aa02      	add	r2, sp, #8
   1b5ba:	4b0c      	ldr	r3, [pc, #48]	; (1b5ec <bt_gatt_store_ccc+0x94>)
   1b5bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b5c0:	2303      	movs	r3, #3
   1b5c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b5c6:	480a      	ldr	r0, [pc, #40]	; (1b5f0 <bt_gatt_store_ccc+0x98>)
   1b5c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b5cc:	f00e fbaf 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b5d0:	46ad      	mov	sp, r5
}
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	37fc      	adds	r7, #252	; 0xfc
   1b5d6:	46bd      	mov	sp, r7
   1b5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b5da:	9400      	str	r4, [sp, #0]
   1b5dc:	e7d7      	b.n	1b58e <bt_gatt_store_ccc+0x36>
		str = NULL;
   1b5de:	4611      	mov	r1, r2
   1b5e0:	e7e2      	b.n	1b5a8 <bt_gatt_store_ccc+0x50>
   1b5e2:	bf00      	nop
   1b5e4:	0001a509 	.word	0x0001a509
   1b5e8:	0002f37f 	.word	0x0002f37f
   1b5ec:	0002f471 	.word	0x0002f471
   1b5f0:	0002c7ac 	.word	0x0002c7ac

0001b5f4 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5f6:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1b5f8:	ae03      	add	r6, sp, #12
{
   1b5fa:	4604      	mov	r4, r0
   1b5fc:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1b5fe:	9103      	str	r1, [sp, #12]
   1b600:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1b604:	4a1f      	ldr	r2, [pc, #124]	; (1b684 <bt_gatt_clear+0x90>)
   1b606:	4633      	mov	r3, r6
   1b608:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b60c:	2001      	movs	r0, #1
   1b60e:	f00e fc75 	bl	29efc <bt_gatt_foreach_attr>
		if (id) {
   1b612:	b394      	cbz	r4, 1b67a <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b614:	af02      	add	r7, sp, #8
   1b616:	4622      	mov	r2, r4
   1b618:	2104      	movs	r1, #4
   1b61a:	4638      	mov	r0, r7
   1b61c:	f00b ffb9 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b620:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b622:	4a19      	ldr	r2, [pc, #100]	; (1b688 <bt_gatt_clear+0x94>)
   1b624:	462b      	mov	r3, r5
   1b626:	2124      	movs	r1, #36	; 0x24
   1b628:	a805      	add	r0, sp, #20
   1b62a:	f7fa f9d5 	bl	159d8 <bt_settings_encode_key>
		return settings_delete(key);
   1b62e:	a805      	add	r0, sp, #20
   1b630:	f00c fdd6 	bl	281e0 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1b634:	2800      	cmp	r0, #0
   1b636:	db1e      	blt.n	1b676 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1b638:	4629      	mov	r1, r5
   1b63a:	4620      	mov	r0, r4
   1b63c:	f7ff f86c 	bl	1a718 <bt_gatt_clear_sc>
		if (err < 0) {
   1b640:	2800      	cmp	r0, #0
   1b642:	db18      	blt.n	1b676 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1b644:	4629      	mov	r1, r5
   1b646:	4620      	mov	r0, r4
   1b648:	f7fe fe4c 	bl	1a2e4 <find_cf_cfg_by_addr>
	if (cfg) {
   1b64c:	b108      	cbz	r0, 1b652 <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1b64e:	f00e fb71 	bl	29d34 <clear_cf_cfg>
		if (id) {
   1b652:	b1a4      	cbz	r4, 1b67e <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b654:	4622      	mov	r2, r4
   1b656:	2104      	movs	r1, #4
   1b658:	4630      	mov	r0, r6
   1b65a:	f00b ff9a 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b65e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b660:	4a0a      	ldr	r2, [pc, #40]	; (1b68c <bt_gatt_clear+0x98>)
   1b662:	462b      	mov	r3, r5
   1b664:	2124      	movs	r1, #36	; 0x24
   1b666:	a805      	add	r0, sp, #20
   1b668:	f7fa f9b6 	bl	159d8 <bt_settings_encode_key>
		return settings_delete(key);
   1b66c:	a805      	add	r0, sp, #20
   1b66e:	f00c fdb7 	bl	281e0 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1b672:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1b676:	b00f      	add	sp, #60	; 0x3c
   1b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b67a:	9400      	str	r4, [sp, #0]
   1b67c:	e7d1      	b.n	1b622 <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b67e:	9400      	str	r4, [sp, #0]
   1b680:	e7ee      	b.n	1b660 <bt_gatt_clear+0x6c>
   1b682:	bf00      	nop
   1b684:	0001a459 	.word	0x0001a459
   1b688:	0002f37f 	.word	0x0002f37f
   1b68c:	0002f4bb 	.word	0x0002f4bb

0001b690 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b694:	b08c      	sub	sp, #48	; 0x30
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b696:	4603      	mov	r3, r0
   1b698:	4a41      	ldr	r2, [pc, #260]	; (1b7a0 <bt_gatt_disconnected+0x110>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b69a:	4e42      	ldr	r6, [pc, #264]	; (1b7a4 <bt_gatt_disconnected+0x114>)
{
   1b69c:	4604      	mov	r4, r0
   1b69e:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b6a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b6a4:	2001      	movs	r0, #1
   1b6a6:	f00e fc29 	bl	29efc <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1b6aa:	4620      	mov	r0, r4
   1b6ac:	f7fc ff5e 	bl	1856c <bt_conn_index>
   1b6b0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b6b2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1b6b6:	b120      	cbz	r0, 1b6c2 <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1b6b8:	f00d fb5f 	bl	28d7a <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1b6bc:	2300      	movs	r3, #0
   1b6be:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b6c2:	4839      	ldr	r0, [pc, #228]	; (1b7a8 <bt_gatt_disconnected+0x118>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b6c4:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b6c8:	f010 f935 	bl	2b936 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b6cc:	7a20      	ldrb	r0, [r4, #8]
   1b6ce:	4629      	mov	r1, r5
   1b6d0:	f00d fa1c 	bl	28b0c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b6d4:	2800      	cmp	r0, #0
   1b6d6:	d039      	beq.n	1b74c <bt_gatt_disconnected+0xbc>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b6d8:	4629      	mov	r1, r5
   1b6da:	7a20      	ldrb	r0, [r4, #8]
   1b6dc:	f7ff ff3c 	bl	1b558 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1b6e0:	4620      	mov	r0, r4
   1b6e2:	f7fe fcb7 	bl	1a054 <find_cf_cfg>
	if (!cfg) {
   1b6e6:	4606      	mov	r6, r0
   1b6e8:	2800      	cmp	r0, #0
   1b6ea:	d04f      	beq.n	1b78c <bt_gatt_disconnected+0xfc>
		if (conn->id) {
   1b6ec:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1b6ee:	3608      	adds	r6, #8
		if (conn->id) {
   1b6f0:	2a00      	cmp	r2, #0
   1b6f2:	d04d      	beq.n	1b790 <bt_gatt_disconnected+0x100>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b6f4:	2104      	movs	r1, #4
   1b6f6:	4638      	mov	r0, r7
   1b6f8:	f00b ff4b 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b6fc:	462b      	mov	r3, r5
   1b6fe:	4a2b      	ldr	r2, [pc, #172]	; (1b7ac <bt_gatt_disconnected+0x11c>)
   1b700:	9700      	str	r7, [sp, #0]
   1b702:	2124      	movs	r1, #36	; 0x24
   1b704:	1d38      	adds	r0, r7, #4
   1b706:	f7fa f967 	bl	159d8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1b70a:	7a23      	ldrb	r3, [r4, #8]
   1b70c:	f04f 0801 	mov.w	r8, #1
   1b710:	b93b      	cbnz	r3, 1b722 <bt_gatt_disconnected+0x92>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1b712:	2300      	movs	r3, #0
   1b714:	9300      	str	r3, [sp, #0]
   1b716:	4a25      	ldr	r2, [pc, #148]	; (1b7ac <bt_gatt_disconnected+0x11c>)
   1b718:	462b      	mov	r3, r5
   1b71a:	2124      	movs	r1, #36	; 0x24
   1b71c:	1d38      	adds	r0, r7, #4
   1b71e:	f7fa f95b 	bl	159d8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1b722:	4642      	mov	r2, r8
   1b724:	4631      	mov	r1, r6
   1b726:	1d38      	adds	r0, r7, #4
   1b728:	f7f8 fee0 	bl	144ec <settings_save_one>
	if (err) {
   1b72c:	b170      	cbz	r0, 1b74c <bt_gatt_disconnected+0xbc>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1b72e:	466e      	mov	r6, sp
   1b730:	b088      	sub	sp, #32
   1b732:	aa02      	add	r2, sp, #8
   1b734:	4b1e      	ldr	r3, [pc, #120]	; (1b7b0 <bt_gatt_disconnected+0x120>)
   1b736:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b73a:	2303      	movs	r3, #3
   1b73c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b740:	481c      	ldr	r0, [pc, #112]	; (1b7b4 <bt_gatt_disconnected+0x124>)
   1b742:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b746:	f00e faf2 	bl	29d2e <z_log_msg_static_create.constprop.0>
   1b74a:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b74c:	7a20      	ldrb	r0, [r4, #8]
   1b74e:	4629      	mov	r1, r5
   1b750:	f00d f9dc 	bl	28b0c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b754:	b148      	cbz	r0, 1b76a <bt_gatt_disconnected+0xda>
		struct addr_with_id addr_with_id = {
   1b756:	7a23      	ldrb	r3, [r4, #8]
   1b758:	723b      	strb	r3, [r7, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b75a:	4a17      	ldr	r2, [pc, #92]	; (1b7b8 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1b75c:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b75e:	1d3b      	adds	r3, r7, #4
   1b760:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b764:	2001      	movs	r0, #1
   1b766:	f00e fbc9 	bl	29efc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1b76a:	4620      	mov	r0, r4
   1b76c:	f7fe fc72 	bl	1a054 <find_cf_cfg>
	if (!cfg) {
   1b770:	4606      	mov	r6, r0
   1b772:	b138      	cbz	r0, 1b784 <bt_gatt_disconnected+0xf4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b774:	7a20      	ldrb	r0, [r4, #8]
   1b776:	4629      	mov	r1, r5
   1b778:	f00d f9c8 	bl	28b0c <bt_addr_le_is_bonded>
   1b77c:	b958      	cbnz	r0, 1b796 <bt_gatt_disconnected+0x106>
		clear_cf_cfg(cfg);
   1b77e:	4630      	mov	r0, r6
   1b780:	f00e fad8 	bl	29d34 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1b784:	3728      	adds	r7, #40	; 0x28
   1b786:	46bd      	mov	sp, r7
   1b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1b78c:	4680      	mov	r8, r0
   1b78e:	e7c0      	b.n	1b712 <bt_gatt_disconnected+0x82>
   1b790:	f04f 0801 	mov.w	r8, #1
   1b794:	e7bd      	b.n	1b712 <bt_gatt_disconnected+0x82>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b796:	4629      	mov	r1, r5
   1b798:	1c70      	adds	r0, r6, #1
   1b79a:	f00e fa23 	bl	29be4 <bt_addr_le_copy>
}
   1b79e:	e7f1      	b.n	1b784 <bt_gatt_disconnected+0xf4>
   1b7a0:	0001a7e1 	.word	0x0001a7e1
   1b7a4:	200020f8 	.word	0x200020f8
   1b7a8:	20002100 	.word	0x20002100
   1b7ac:	0002f4bb 	.word	0x0002f4bb
   1b7b0:	0002f48f 	.word	0x0002f48f
   1b7b4:	0002c7ac 	.word	0x0002c7ac
   1b7b8:	0001a459 	.word	0x0001a459

0001b7bc <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1b7bc:	4601      	mov	r1, r0
   1b7be:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1b7c0:	4803      	ldr	r0, [pc, #12]	; (1b7d0 <smp_find+0x14>)
   1b7c2:	f00e fcc6 	bl	2a152 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1b7c6:	2800      	cmp	r0, #0
}
   1b7c8:	4802      	ldr	r0, [pc, #8]	; (1b7d4 <smp_find+0x18>)
   1b7ca:	bf08      	it	eq
   1b7cc:	2000      	moveq	r0, #0
   1b7ce:	bd08      	pop	{r3, pc}
   1b7d0:	2000218c 	.word	0x2000218c
   1b7d4:	20002188 	.word	0x20002188

0001b7d8 <latch_auth_cb>:
{
   1b7d8:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1b7da:	4a0c      	ldr	r2, [pc, #48]	; (1b80c <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b7dc:	6811      	ldr	r1, [r2, #0]
   1b7de:	4a0c      	ldr	r2, [pc, #48]	; (1b810 <latch_auth_cb+0x38>)
   1b7e0:	f3bf 8f5b 	dmb	ish
   1b7e4:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   1b7e8:	e853 4f00 	ldrex	r4, [r3]
   1b7ec:	4294      	cmp	r4, r2
   1b7ee:	d104      	bne.n	1b7fa <latch_auth_cb+0x22>
   1b7f0:	e843 1c00 	strex	ip, r1, [r3]
   1b7f4:	f1bc 0f00 	cmp.w	ip, #0
   1b7f8:	d1f6      	bne.n	1b7e8 <latch_auth_cb+0x10>
   1b7fa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b7fe:	f3bf 8f5b 	dmb	ish
   1b802:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   1b806:	f3bf 8f5b 	dmb	ish
}
   1b80a:	bd10      	pop	{r4, pc}
   1b80c:	20002de4 	.word	0x20002de4
   1b810:	20002188 	.word	0x20002188

0001b814 <get_io_capa>:
{
   1b814:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b816:	f7ff ffdf 	bl	1b7d8 <latch_auth_cb>
	if (!smp_auth_cb) {
   1b81a:	b1b8      	cbz	r0, 1b84c <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1b81c:	6803      	ldr	r3, [r0, #0]
   1b81e:	b143      	cbz	r3, 1b832 <get_io_capa+0x1e>
   1b820:	6842      	ldr	r2, [r0, #4]
   1b822:	b132      	cbz	r2, 1b832 <get_io_capa+0x1e>
   1b824:	6882      	ldr	r2, [r0, #8]
   1b826:	b912      	cbnz	r2, 1b82e <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1b828:	4a0b      	ldr	r2, [pc, #44]	; (1b858 <get_io_capa+0x44>)
   1b82a:	7812      	ldrb	r2, [r2, #0]
   1b82c:	b93a      	cbnz	r2, 1b83e <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1b82e:	2004      	movs	r0, #4
   1b830:	e00b      	b.n	1b84a <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1b832:	4a09      	ldr	r2, [pc, #36]	; (1b858 <get_io_capa+0x44>)
   1b834:	7812      	ldrb	r2, [r2, #0]
   1b836:	b112      	cbz	r2, 1b83e <get_io_capa+0x2a>
   1b838:	b10b      	cbz	r3, 1b83e <get_io_capa+0x2a>
   1b83a:	6882      	ldr	r2, [r0, #8]
   1b83c:	b942      	cbnz	r2, 1b850 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1b83e:	6842      	ldr	r2, [r0, #4]
   1b840:	b942      	cbnz	r2, 1b854 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1b842:	2b00      	cmp	r3, #0
   1b844:	bf0c      	ite	eq
   1b846:	2003      	moveq	r0, #3
   1b848:	2000      	movne	r0, #0
}
   1b84a:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b84c:	2003      	movs	r0, #3
   1b84e:	e7fc      	b.n	1b84a <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1b850:	2001      	movs	r0, #1
   1b852:	e7fa      	b.n	1b84a <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b854:	2002      	movs	r0, #2
   1b856:	e7f8      	b.n	1b84a <get_io_capa+0x36>
   1b858:	20003eac 	.word	0x20003eac

0001b85c <get_auth>:
	if (sc_supported) {
   1b85c:	4b0c      	ldr	r3, [pc, #48]	; (1b890 <get_auth+0x34>)
   1b85e:	781b      	ldrb	r3, [r3, #0]
{
   1b860:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b862:	b17b      	cbz	r3, 1b884 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b864:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b868:	f7ff ffd4 	bl	1b814 <get_io_capa>
	if (bondable) {
   1b86c:	4b09      	ldr	r3, [pc, #36]	; (1b894 <get_auth+0x38>)
   1b86e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b870:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b872:	bf0c      	ite	eq
   1b874:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b878:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b87c:	b12b      	cbz	r3, 1b88a <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b87e:	f044 0001 	orr.w	r0, r4, #1
}
   1b882:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b884:	f001 0407 	and.w	r4, r1, #7
   1b888:	e7ee      	b.n	1b868 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b88a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b88e:	e7f8      	b.n	1b882 <get_auth+0x26>
   1b890:	20003eac 	.word	0x20003eac
   1b894:	20000a2c 	.word	0x20000a2c

0001b898 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1b898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1b89a:	4b06      	ldr	r3, [pc, #24]	; (1b8b4 <bt_smp_pkey_ready.part.0+0x1c>)
   1b89c:	9305      	str	r3, [sp, #20]
   1b89e:	4806      	ldr	r0, [pc, #24]	; (1b8b8 <bt_smp_pkey_ready.part.0+0x20>)
   1b8a0:	2302      	movs	r3, #2
   1b8a2:	aa04      	add	r2, sp, #16
   1b8a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b8a8:	9304      	str	r3, [sp, #16]
   1b8aa:	f00e fd42 	bl	2a332 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1b8ae:	b007      	add	sp, #28
   1b8b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8b4:	0002f4cc 	.word	0x0002f4cc
   1b8b8:	0002c7e4 	.word	0x0002c7e4

0001b8bc <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1b8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1b8c0:	1d17      	adds	r7, r2, #4
{
   1b8c2:	460c      	mov	r4, r1
   1b8c4:	b08f      	sub	sp, #60	; 0x3c
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b8c6:	f851 9002 	ldr.w	r9, [r1, r2]
{
   1b8ca:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1b8cc:	eb01 0802 	add.w	r8, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1b8d0:	4620      	mov	r0, r4
   1b8d2:	4639      	mov	r1, r7
{
   1b8d4:	4615      	mov	r5, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1b8d6:	f00e fc2d 	bl	2a134 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1b8da:	4631      	mov	r1, r6
   1b8dc:	2210      	movs	r2, #16
   1b8de:	4668      	mov	r0, sp
   1b8e0:	f00e fc1e 	bl	2a120 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1b8e4:	ab04      	add	r3, sp, #16
   1b8e6:	463a      	mov	r2, r7
   1b8e8:	4621      	mov	r1, r4
   1b8ea:	4668      	mov	r0, sp
   1b8ec:	f00e fc5b 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   1b8f0:	4606      	mov	r6, r0
   1b8f2:	b168      	cbz	r0, 1b910 <smp_sign_buf+0x54>
		BT_ERR("Data signing failed");
   1b8f4:	4b10      	ldr	r3, [pc, #64]	; (1b938 <smp_sign_buf+0x7c>)
   1b8f6:	930d      	str	r3, [sp, #52]	; 0x34
   1b8f8:	4810      	ldr	r0, [pc, #64]	; (1b93c <smp_sign_buf+0x80>)
   1b8fa:	2302      	movs	r3, #2
   1b8fc:	aa0c      	add	r2, sp, #48	; 0x30
   1b8fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b902:	930c      	str	r3, [sp, #48]	; 0x30
   1b904:	f00e fd15 	bl	2a332 <z_log_msg_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1b908:	4630      	mov	r0, r6
   1b90a:	b00f      	add	sp, #60	; 0x3c
   1b90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1b910:	2110      	movs	r1, #16
   1b912:	eb0d 0001 	add.w	r0, sp, r1
   1b916:	f00e fc0d 	bl	2a134 <sys_mem_swap>
	sys_mem_swap(m, len + sizeof(cnt));
   1b91a:	4639      	mov	r1, r7
   1b91c:	4620      	mov	r0, r4
   1b91e:	f8cd 9014 	str.w	r9, [sp, #20]
   1b922:	f00e fc07 	bl	2a134 <sys_mem_swap>
   1b926:	ab05      	add	r3, sp, #20
   1b928:	cb03      	ldmia	r3!, {r0, r1}
   1b92a:	5160      	str	r0, [r4, r5]
   1b92c:	6818      	ldr	r0, [r3, #0]
   1b92e:	f8c8 1004 	str.w	r1, [r8, #4]
   1b932:	f8c8 0008 	str.w	r0, [r8, #8]
   1b936:	e7e7      	b.n	1b908 <smp_sign_buf+0x4c>
   1b938:	0002f4e5 	.word	0x0002f4e5
   1b93c:	0002c7e4 	.word	0x0002c7e4

0001b940 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1b940:	b580      	push	{r7, lr}
   1b942:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1b944:	b088      	sub	sp, #32
   1b946:	466a      	mov	r2, sp
   1b948:	4b07      	ldr	r3, [pc, #28]	; (1b968 <bt_smp_accept.part.0+0x28>)
   1b94a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b94e:	2303      	movs	r3, #3
   1b950:	f842 3f10 	str.w	r3, [r2, #16]!
   1b954:	4805      	ldr	r0, [pc, #20]	; (1b96c <bt_smp_accept.part.0+0x2c>)
   1b956:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b95a:	f00e fcea 	bl	2a332 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1b95e:	f06f 000b 	mvn.w	r0, #11
   1b962:	46bd      	mov	sp, r7
   1b964:	bd80      	pop	{r7, pc}
   1b966:	bf00      	nop
   1b968:	0002f4f9 	.word	0x0002f4f9
   1b96c:	0002c7e4 	.word	0x0002c7e4

0001b970 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1b970:	4b06      	ldr	r3, [pc, #24]	; (1b98c <bt_smp_accept+0x1c>)
   1b972:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1b976:	b10a      	cbz	r2, 1b97c <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1b978:	f7ff bfe2 	b.w	1b940 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1b97c:	4804      	ldr	r0, [pc, #16]	; (1b990 <bt_smp_accept+0x20>)
   1b97e:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1b982:	33ec      	adds	r3, #236	; 0xec
   1b984:	600b      	str	r3, [r1, #0]
}
   1b986:	4610      	mov	r0, r2
   1b988:	4770      	bx	lr
   1b98a:	bf00      	nop
   1b98c:	20002188 	.word	0x20002188
   1b990:	0002d2a8 	.word	0x0002d2a8

0001b994 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1b994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
   1b996:	4b07      	ldr	r3, [pc, #28]	; (1b9b4 <smp_chan_get.part.0+0x20>)
   1b998:	9305      	str	r3, [sp, #20]
   1b99a:	4807      	ldr	r0, [pc, #28]	; (1b9b8 <smp_chan_get.part.0+0x24>)
   1b99c:	2302      	movs	r3, #2
   1b99e:	aa04      	add	r2, sp, #16
   1b9a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9a4:	9304      	str	r3, [sp, #16]
   1b9a6:	f00e fcc4 	bl	2a332 <z_log_msg_static_create.constprop.0>
}
   1b9aa:	2000      	movs	r0, #0
   1b9ac:	b007      	add	sp, #28
   1b9ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9b2:	bf00      	nop
   1b9b4:	0002f51e 	.word	0x0002f51e
   1b9b8:	0002c7e4 	.word	0x0002c7e4

0001b9bc <smp_init>:
{
   1b9bc:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
   1b9be:	22ec      	movs	r2, #236	; 0xec
   1b9c0:	4605      	mov	r5, r0
   1b9c2:	2100      	movs	r1, #0
   1b9c4:	f010 fb24 	bl	2c010 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b9c8:	2110      	movs	r1, #16
   1b9ca:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1b9ce:	f004 fa87 	bl	1fee0 <bt_rand>
   1b9d2:	4604      	mov	r4, r0
   1b9d4:	b948      	cbnz	r0, 1b9ea <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b9d6:	2105      	movs	r1, #5
   1b9d8:	4628      	mov	r0, r5
   1b9da:	f00e fcb8 	bl	2a34e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b9de:	f7fc fa61 	bl	17ea4 <bt_pub_key_get>
   1b9e2:	4b03      	ldr	r3, [pc, #12]	; (1b9f0 <smp_init+0x34>)
   1b9e4:	6018      	str	r0, [r3, #0]
}
   1b9e6:	4620      	mov	r0, r4
   1b9e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b9ea:	2408      	movs	r4, #8
   1b9ec:	e7fb      	b.n	1b9e6 <smp_init+0x2a>
   1b9ee:	bf00      	nop
   1b9f0:	20002f54 	.word	0x20002f54

0001b9f4 <smp_dhkey_generate>:
{
   1b9f4:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b9f6:	1d05      	adds	r5, r0, #4
{
   1b9f8:	b087      	sub	sp, #28
   1b9fa:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b9fc:	2108      	movs	r1, #8
   1b9fe:	4628      	mov	r0, r5
   1ba00:	f00e fca5 	bl	2a34e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ba04:	490b      	ldr	r1, [pc, #44]	; (1ba34 <smp_dhkey_generate+0x40>)
   1ba06:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ba0a:	f7fc fa5b 	bl	17ec4 <bt_dh_key_gen>
	if (err) {
   1ba0e:	b170      	cbz	r0, 1ba2e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ba10:	2108      	movs	r1, #8
   1ba12:	4628      	mov	r0, r5
   1ba14:	f00e fc09 	bl	2a22a <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1ba18:	4b07      	ldr	r3, [pc, #28]	; (1ba38 <smp_dhkey_generate+0x44>)
   1ba1a:	4808      	ldr	r0, [pc, #32]	; (1ba3c <smp_dhkey_generate+0x48>)
   1ba1c:	9305      	str	r3, [sp, #20]
   1ba1e:	aa04      	add	r2, sp, #16
   1ba20:	2302      	movs	r3, #2
   1ba22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba26:	9304      	str	r3, [sp, #16]
   1ba28:	f00e fc83 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ba2c:	2008      	movs	r0, #8
}
   1ba2e:	b007      	add	sp, #28
   1ba30:	bd30      	pop	{r4, r5, pc}
   1ba32:	bf00      	nop
   1ba34:	0002a81f 	.word	0x0002a81f
   1ba38:	0002f539 	.word	0x0002f539
   1ba3c:	0002c7e4 	.word	0x0002c7e4

0001ba40 <smp_ident_info>:
{
   1ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba42:	4605      	mov	r5, r0
   1ba44:	af00      	add	r7, sp, #0
   1ba46:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ba48:	3004      	adds	r0, #4
   1ba4a:	210d      	movs	r1, #13
   1ba4c:	f00e fb81 	bl	2a152 <atomic_test_bit>
   1ba50:	b360      	cbz	r0, 1baac <smp_ident_info+0x6c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ba52:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ba54:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ba58:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1ba5c:	7a19      	ldrb	r1, [r3, #8]
   1ba5e:	4632      	mov	r2, r6
   1ba60:	2002      	movs	r0, #2
   1ba62:	f00e ff85 	bl	2a970 <bt_keys_get_type>
		if (!keys) {
   1ba66:	b9b0      	cbnz	r0, 1ba96 <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1ba68:	4630      	mov	r0, r6
   1ba6a:	f7f9 fe5d 	bl	15728 <bt_addr_le_str_real>
   1ba6e:	466c      	mov	r4, sp
   1ba70:	b088      	sub	sp, #32
   1ba72:	466a      	mov	r2, sp
   1ba74:	4b10      	ldr	r3, [pc, #64]	; (1bab8 <smp_ident_info+0x78>)
   1ba76:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ba7a:	2302      	movs	r3, #2
   1ba7c:	7713      	strb	r3, [r2, #28]
   1ba7e:	4b0f      	ldr	r3, [pc, #60]	; (1babc <smp_ident_info+0x7c>)
   1ba80:	480f      	ldr	r0, [pc, #60]	; (1bac0 <smp_ident_info+0x80>)
   1ba82:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba86:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ba8a:	f00e fc52 	bl	2a332 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ba8e:	2008      	movs	r0, #8
   1ba90:	46a5      	mov	sp, r4
}
   1ba92:	46bd      	mov	sp, r7
   1ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ba96:	4622      	mov	r2, r4
   1ba98:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1ba9c:	f104 0110 	add.w	r1, r4, #16
   1baa0:	f852 0b04 	ldr.w	r0, [r2], #4
   1baa4:	f843 0b04 	str.w	r0, [r3], #4
   1baa8:	428a      	cmp	r2, r1
   1baaa:	d1f9      	bne.n	1baa0 <smp_ident_info+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1baac:	4628      	mov	r0, r5
   1baae:	2109      	movs	r1, #9
   1bab0:	f00e fc4d 	bl	2a34e <atomic_set_bit>
	return 0;
   1bab4:	2000      	movs	r0, #0
   1bab6:	e7ec      	b.n	1ba92 <smp_ident_info+0x52>
   1bab8:	0002f552 	.word	0x0002f552
   1babc:	01000003 	.word	0x01000003
   1bac0:	0002c7e4 	.word	0x0002c7e4

0001bac4 <smp_encrypt_info>:
{
   1bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bac6:	4605      	mov	r5, r0
   1bac8:	af00      	add	r7, sp, #0
   1baca:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bacc:	3004      	adds	r0, #4
   1bace:	210d      	movs	r1, #13
   1bad0:	f00e fb3f 	bl	2a152 <atomic_test_bit>
   1bad4:	b360      	cbz	r0, 1bb30 <smp_encrypt_info+0x6c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1bad6:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bad8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1badc:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1bae0:	7a19      	ldrb	r1, [r3, #8]
   1bae2:	4632      	mov	r2, r6
   1bae4:	2004      	movs	r0, #4
   1bae6:	f00e ff43 	bl	2a970 <bt_keys_get_type>
		if (!keys) {
   1baea:	b9b0      	cbnz	r0, 1bb1a <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1baec:	4630      	mov	r0, r6
   1baee:	f7f9 fe1b 	bl	15728 <bt_addr_le_str_real>
   1baf2:	466c      	mov	r4, sp
   1baf4:	b088      	sub	sp, #32
   1baf6:	466a      	mov	r2, sp
   1baf8:	4b10      	ldr	r3, [pc, #64]	; (1bb3c <smp_encrypt_info+0x78>)
   1bafa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bafe:	2302      	movs	r3, #2
   1bb00:	7713      	strb	r3, [r2, #28]
   1bb02:	4b0f      	ldr	r3, [pc, #60]	; (1bb40 <smp_encrypt_info+0x7c>)
   1bb04:	480f      	ldr	r0, [pc, #60]	; (1bb44 <smp_encrypt_info+0x80>)
   1bb06:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb0a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bb0e:	f00e fc10 	bl	2a332 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1bb12:	2008      	movs	r0, #8
   1bb14:	46a5      	mov	sp, r4
}
   1bb16:	46bd      	mov	sp, r7
   1bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb1a:	4622      	mov	r2, r4
   1bb1c:	f100 031a 	add.w	r3, r0, #26
   1bb20:	f104 0110 	add.w	r1, r4, #16
   1bb24:	f852 0b04 	ldr.w	r0, [r2], #4
   1bb28:	f843 0b04 	str.w	r0, [r3], #4
   1bb2c:	428a      	cmp	r2, r1
   1bb2e:	d1f9      	bne.n	1bb24 <smp_encrypt_info+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1bb30:	4628      	mov	r0, r5
   1bb32:	2107      	movs	r1, #7
   1bb34:	f00e fc0b 	bl	2a34e <atomic_set_bit>
	return 0;
   1bb38:	2000      	movs	r0, #0
   1bb3a:	e7ec      	b.n	1bb16 <smp_encrypt_info+0x52>
   1bb3c:	0002f552 	.word	0x0002f552
   1bb40:	01000003 	.word	0x01000003
   1bb44:	0002c7e4 	.word	0x0002c7e4

0001bb48 <smp_pairing_req>:
{
   1bb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb4c:	460d      	mov	r5, r1
   1bb4e:	b087      	sub	sp, #28
   1bb50:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1bb52:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1bb56:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bb58:	f7ff fe3e 	bl	1b7d8 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1bb5c:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bb5e:	78eb      	ldrb	r3, [r5, #3]
   1bb60:	3b07      	subs	r3, #7
   1bb62:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bb64:	4681      	mov	r9, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bb66:	d905      	bls.n	1bb74 <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1bb68:	2506      	movs	r5, #6
}
   1bb6a:	4628      	mov	r0, r5
   1bb6c:	371c      	adds	r7, #28
   1bb6e:	46bd      	mov	sp, r7
   1bb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1bb74:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   1bb78:	b15b      	cbz	r3, 1bb92 <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1bb7a:	1d26      	adds	r6, r4, #4
   1bb7c:	210f      	movs	r1, #15
   1bb7e:	4630      	mov	r0, r6
   1bb80:	f00e fae7 	bl	2a152 <atomic_test_bit>
   1bb84:	b988      	cbnz	r0, 1bbaa <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1bb86:	4620      	mov	r0, r4
   1bb88:	f7ff ff18 	bl	1b9bc <smp_init>
		if (ret) {
   1bb8c:	b168      	cbz	r0, 1bbaa <smp_pairing_req+0x62>
			return ret;
   1bb8e:	b2c5      	uxtb	r5, r0
   1bb90:	e7eb      	b.n	1bb6a <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bb92:	f898 0008 	ldrb.w	r0, [r8, #8]
   1bb96:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1bb9a:	f001 fcdf 	bl	1d55c <bt_keys_get_addr>
   1bb9e:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   1bba2:	2800      	cmp	r0, #0
   1bba4:	d1e9      	bne.n	1bb7a <smp_pairing_req+0x32>
	switch (sec) {
   1bba6:	2508      	movs	r5, #8
   1bba8:	e7df      	b.n	1bb6a <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bbaa:	2301      	movs	r3, #1
   1bbac:	7263      	strb	r3, [r4, #9]
   1bbae:	682b      	ldr	r3, [r5, #0]
   1bbb0:	f8c4 300a 	str.w	r3, [r4, #10]
   1bbb4:	88ab      	ldrh	r3, [r5, #4]
   1bbb6:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1bbb8:	2302      	movs	r3, #2
   1bbba:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1bbbc:	78a9      	ldrb	r1, [r5, #2]
   1bbbe:	4620      	mov	r0, r4
   1bbc0:	f7ff fe4c 	bl	1b85c <get_auth>
   1bbc4:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7ff fe24 	bl	1b814 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bbcc:	4ba8      	ldr	r3, [pc, #672]	; (1be70 <smp_pairing_req+0x328>)
	rsp->io_capability = get_io_capa(smp);
   1bbce:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bbd0:	781b      	ldrb	r3, [r3, #0]
   1bbd2:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1bbd4:	2310      	movs	r3, #16
   1bbd6:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1bbd8:	792b      	ldrb	r3, [r5, #4]
   1bbda:	f003 0307 	and.w	r3, r3, #7
   1bbde:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bbe0:	796b      	ldrb	r3, [r5, #5]
   1bbe2:	f003 0307 	and.w	r3, r3, #7
   1bbe6:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bbe8:	7ce3      	ldrb	r3, [r4, #19]
   1bbea:	0718      	lsls	r0, r3, #28
   1bbec:	d50e      	bpl.n	1bc0c <smp_pairing_req+0xc4>
   1bbee:	78ab      	ldrb	r3, [r5, #2]
   1bbf0:	0719      	lsls	r1, r3, #28
   1bbf2:	d50b      	bpl.n	1bc0c <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1bbf4:	2105      	movs	r1, #5
   1bbf6:	4630      	mov	r0, r6
   1bbf8:	f00e fba9 	bl	2a34e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1bbfc:	7d63      	ldrb	r3, [r4, #21]
   1bbfe:	f003 0306 	and.w	r3, r3, #6
   1bc02:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1bc04:	7da3      	ldrb	r3, [r4, #22]
   1bc06:	f003 0306 	and.w	r3, r3, #6
   1bc0a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1bc0c:	7ce3      	ldrb	r3, [r4, #19]
   1bc0e:	069a      	lsls	r2, r3, #26
   1bc10:	d506      	bpl.n	1bc20 <smp_pairing_req+0xd8>
   1bc12:	78ab      	ldrb	r3, [r5, #2]
   1bc14:	069b      	lsls	r3, r3, #26
   1bc16:	d503      	bpl.n	1bc20 <smp_pairing_req+0xd8>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1bc18:	2114      	movs	r1, #20
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	f00e fb97 	bl	2a34e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1bc20:	7da3      	ldrb	r3, [r4, #22]
   1bc22:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1bc26:	7d63      	ldrb	r3, [r4, #21]
   1bc28:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1bc2c:	7ce3      	ldrb	r3, [r4, #19]
   1bc2e:	07d8      	lsls	r0, r3, #31
   1bc30:	d506      	bpl.n	1bc40 <smp_pairing_req+0xf8>
   1bc32:	78ab      	ldrb	r3, [r5, #2]
   1bc34:	07d9      	lsls	r1, r3, #31
   1bc36:	d503      	bpl.n	1bc40 <smp_pairing_req+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1bc38:	210d      	movs	r1, #13
   1bc3a:	4630      	mov	r0, r6
   1bc3c:	f00e fb87 	bl	2a34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1bc40:	2103      	movs	r1, #3
   1bc42:	4630      	mov	r0, r6
   1bc44:	f00e fb83 	bl	2a34e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc48:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1bc4a:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bc4c:	f00e fa81 	bl	2a152 <atomic_test_bit>
   1bc50:	bb30      	cbnz	r0, 1bca0 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bc52:	2d04      	cmp	r5, #4
   1bc54:	d843      	bhi.n	1bcde <smp_pairing_req+0x196>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bc56:	7ca2      	ldrb	r2, [r4, #18]
   1bc58:	7ae3      	ldrb	r3, [r4, #11]
   1bc5a:	4013      	ands	r3, r2
   1bc5c:	07da      	lsls	r2, r3, #31
   1bc5e:	d43c      	bmi.n	1bcda <smp_pairing_req+0x192>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bc60:	7b21      	ldrb	r1, [r4, #12]
   1bc62:	7ce0      	ldrb	r0, [r4, #19]
   1bc64:	4301      	orrs	r1, r0
   1bc66:	f011 0104 	ands.w	r1, r1, #4
   1bc6a:	d010      	beq.n	1bc8e <smp_pairing_req+0x146>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1bc6c:	4620      	mov	r0, r4
   1bc6e:	f7ff fdd1 	bl	1b814 <get_io_capa>
   1bc72:	4b80      	ldr	r3, [pc, #512]	; (1be74 <smp_pairing_req+0x32c>)
   1bc74:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bc78:	441d      	add	r5, r3
   1bc7a:	5c29      	ldrb	r1, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1bc7c:	2904      	cmp	r1, #4
   1bc7e:	d106      	bne.n	1bc8e <smp_pairing_req+0x146>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1bc80:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1bc84:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1bc86:	2b00      	cmp	r3, #0
   1bc88:	bf0c      	ite	eq
   1bc8a:	2102      	moveq	r1, #2
   1bc8c:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1bc8e:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1bc90:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   1bc94:	4620      	mov	r0, r4
   1bc96:	f00e fa65 	bl	2a164 <update_keys_check>
   1bc9a:	bb10      	cbnz	r0, 1bce2 <smp_pairing_req+0x19a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bc9c:	2503      	movs	r5, #3
   1bc9e:	e764      	b.n	1bb6a <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1bca0:	7b20      	ldrb	r0, [r4, #12]
   1bca2:	7ce2      	ldrb	r2, [r4, #19]
   1bca4:	ea00 0302 	and.w	r3, r0, r2
   1bca8:	071b      	lsls	r3, r3, #28
   1bcaa:	d506      	bpl.n	1bcba <smp_pairing_req+0x172>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bcac:	7ae3      	ldrb	r3, [r4, #11]
   1bcae:	f894 c012 	ldrb.w	ip, [r4, #18]
   1bcb2:	ea43 030c 	orr.w	r3, r3, ip
   1bcb6:	07db      	lsls	r3, r3, #31
   1bcb8:	d4e9      	bmi.n	1bc8e <smp_pairing_req+0x146>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bcba:	2d04      	cmp	r5, #4
   1bcbc:	d80f      	bhi.n	1bcde <smp_pairing_req+0x196>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bcbe:	ea40 0102 	orr.w	r1, r0, r2
   1bcc2:	f011 0104 	ands.w	r1, r1, #4
   1bcc6:	d0e2      	beq.n	1bc8e <smp_pairing_req+0x146>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1bcc8:	4620      	mov	r0, r4
   1bcca:	f7ff fda3 	bl	1b814 <get_io_capa>
   1bcce:	4b6a      	ldr	r3, [pc, #424]	; (1be78 <smp_pairing_req+0x330>)
   1bcd0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bcd4:	441d      	add	r5, r3
   1bcd6:	5c29      	ldrb	r1, [r5, r0]
   1bcd8:	e7d9      	b.n	1bc8e <smp_pairing_req+0x146>
		return LEGACY_OOB;
   1bcda:	2106      	movs	r1, #6
   1bcdc:	e7d7      	b.n	1bc8e <smp_pairing_req+0x146>
		return JUST_WORKS;
   1bcde:	2100      	movs	r1, #0
   1bce0:	e7d5      	b.n	1bc8e <smp_pairing_req+0x146>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1bce2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1bce6:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1bce8:	2b03      	cmp	r3, #3
   1bcea:	d03e      	beq.n	1bd6a <smp_pairing_req+0x222>
   1bcec:	d82c      	bhi.n	1bd48 <smp_pairing_req+0x200>
   1bcee:	3b01      	subs	r3, #1
   1bcf0:	2b01      	cmp	r3, #1
   1bcf2:	f63f af58 	bhi.w	1bba6 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bcf6:	2105      	movs	r1, #5
   1bcf8:	4630      	mov	r0, r6
   1bcfa:	f00e fa2a 	bl	2a152 <atomic_test_bit>
   1bcfe:	2800      	cmp	r0, #0
   1bd00:	f040 80c4 	bne.w	1be8c <smp_pairing_req+0x344>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bd04:	4620      	mov	r0, r4
   1bd06:	f7ff fd67 	bl	1b7d8 <latch_auth_cb>
   1bd0a:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bd0c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1bd0e:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bd12:	f7ff fd61 	bl	1b7d8 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1bd16:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bd1a:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1bd1c:	f899 0008 	ldrb.w	r0, [r9, #8]
   1bd20:	f001 fcdc 	bl	1d6dc <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1bd24:	7a23      	ldrb	r3, [r4, #8]
   1bd26:	b320      	cbz	r0, 1bd72 <smp_pairing_req+0x22a>
   1bd28:	7b42      	ldrb	r2, [r0, #13]
   1bd2a:	07d2      	lsls	r2, r2, #31
   1bd2c:	d521      	bpl.n	1bd72 <smp_pairing_req+0x22a>
   1bd2e:	bb03      	cbnz	r3, 1bd72 <smp_pairing_req+0x22a>
		BT_ERR("JustWorks failed, authenticated keys present");
   1bd30:	4b52      	ldr	r3, [pc, #328]	; (1be7c <smp_pairing_req+0x334>)
   1bd32:	617b      	str	r3, [r7, #20]
   1bd34:	4852      	ldr	r0, [pc, #328]	; (1be80 <smp_pairing_req+0x338>)
   1bd36:	2302      	movs	r3, #2
   1bd38:	f107 0210 	add.w	r2, r7, #16
   1bd3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd40:	613b      	str	r3, [r7, #16]
   1bd42:	f00e faf6 	bl	2a332 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1bd46:	e72e      	b.n	1bba6 <smp_pairing_req+0x5e>
	switch (sec) {
   1bd48:	2b04      	cmp	r3, #4
   1bd4a:	f47f af2c 	bne.w	1bba6 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bd4e:	7d23      	ldrb	r3, [r4, #20]
   1bd50:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1bd52:	4293      	cmp	r3, r2
   1bd54:	bf28      	it	cs
   1bd56:	4613      	movcs	r3, r2
   1bd58:	2b10      	cmp	r3, #16
   1bd5a:	f47f af05 	bne.w	1bb68 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bd5e:	2105      	movs	r1, #5
   1bd60:	4630      	mov	r0, r6
   1bd62:	f00e f9f6 	bl	2a152 <atomic_test_bit>
   1bd66:	2800      	cmp	r0, #0
   1bd68:	d098      	beq.n	1bc9c <smp_pairing_req+0x154>
		if (smp->method == JUST_WORKS) {
   1bd6a:	7a23      	ldrb	r3, [r4, #8]
   1bd6c:	2b00      	cmp	r3, #0
   1bd6e:	d1c2      	bne.n	1bcf6 <smp_pairing_req+0x1ae>
   1bd70:	e794      	b.n	1bc9c <smp_pairing_req+0x154>
	switch (smp->method) {
   1bd72:	2b06      	cmp	r3, #6
   1bd74:	d85f      	bhi.n	1be36 <smp_pairing_req+0x2ee>
   1bd76:	e8df f003 	tbb	[pc, r3]
   1bd7a:	5617      	.short	0x5617
   1bd7c:	5e5e5e2f 	.word	0x5e5e5e2f
   1bd80:	04          	.byte	0x04
   1bd81:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1bd82:	2d00      	cmp	r5, #0
   1bd84:	d067      	beq.n	1be56 <smp_pairing_req+0x30e>
   1bd86:	68eb      	ldr	r3, [r5, #12]
   1bd88:	2b00      	cmp	r3, #0
   1bd8a:	d064      	beq.n	1be56 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1bd8c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bd8e:	210a      	movs	r1, #10
   1bd90:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1bd92:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bd94:	f00e fadb 	bl	2a34e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1bd98:	68eb      	ldr	r3, [r5, #12]
   1bd9a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bd9e:	4639      	mov	r1, r7
   1bda0:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bda2:	7a23      	ldrb	r3, [r4, #8]
   1bda4:	2b00      	cmp	r3, #0
   1bda6:	d158      	bne.n	1be5a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bda8:	210f      	movs	r1, #15
   1bdaa:	4630      	mov	r0, r6
   1bdac:	f00e f9d1 	bl	2a152 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bdb0:	4605      	mov	r5, r0
   1bdb2:	2800      	cmp	r0, #0
   1bdb4:	d151      	bne.n	1be5a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bdb6:	f1b8 0f00 	cmp.w	r8, #0
   1bdba:	d04e      	beq.n	1be5a <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1bdbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1bdc0:	2b00      	cmp	r3, #0
   1bdc2:	d04a      	beq.n	1be5a <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bdc4:	4630      	mov	r0, r6
   1bdc6:	210a      	movs	r1, #10
   1bdc8:	f00e fac1 	bl	2a34e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1bdcc:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1bdd0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1bdd4:	4798      	blx	r3
		return 0;
   1bdd6:	e6c8      	b.n	1bb6a <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1bdd8:	2104      	movs	r1, #4
   1bdda:	4638      	mov	r0, r7
   1bddc:	f004 f880 	bl	1fee0 <bt_rand>
   1bde0:	2800      	cmp	r0, #0
   1bde2:	f47f aee0 	bne.w	1bba6 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1bde6:	683b      	ldr	r3, [r7, #0]
   1bde8:	4a26      	ldr	r2, [pc, #152]	; (1be84 <smp_pairing_req+0x33c>)
   1bdea:	fbb3 f1f2 	udiv	r1, r3, r2
   1bdee:	fb02 3311 	mls	r3, r2, r1, r3
   1bdf2:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1bdf4:	b14d      	cbz	r5, 1be0a <smp_pairing_req+0x2c2>
   1bdf6:	682b      	ldr	r3, [r5, #0]
   1bdf8:	b13b      	cbz	r3, 1be0a <smp_pairing_req+0x2c2>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1bdfa:	210b      	movs	r1, #11
   1bdfc:	4630      	mov	r0, r6
   1bdfe:	f00e faa6 	bl	2a34e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1be02:	682b      	ldr	r3, [r5, #0]
   1be04:	6839      	ldr	r1, [r7, #0]
   1be06:	4648      	mov	r0, r9
   1be08:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1be0a:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1be0c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1be10:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1be14:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1be16:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1be1a:	0a1b      	lsrs	r3, r3, #8
   1be1c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1be20:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1be24:	e7bd      	b.n	1bda2 <smp_pairing_req+0x25a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1be26:	4630      	mov	r0, r6
   1be28:	210a      	movs	r1, #10
   1be2a:	f00e fa90 	bl	2a34e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1be2e:	686b      	ldr	r3, [r5, #4]
   1be30:	4648      	mov	r0, r9
   1be32:	4798      	blx	r3
	if (ret) {
   1be34:	e7b5      	b.n	1bda2 <smp_pairing_req+0x25a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1be36:	466c      	mov	r4, sp
   1be38:	b088      	sub	sp, #32
   1be3a:	466a      	mov	r2, sp
   1be3c:	4912      	ldr	r1, [pc, #72]	; (1be88 <smp_pairing_req+0x340>)
   1be3e:	4810      	ldr	r0, [pc, #64]	; (1be80 <smp_pairing_req+0x338>)
	switch (smp->method) {
   1be40:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1be44:	2303      	movs	r3, #3
   1be46:	f842 3f10 	str.w	r3, [r2, #16]!
   1be4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1be4e:	f00e fa70 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1be52:	46a5      	mov	sp, r4
	if (ret) {
   1be54:	e6a7      	b.n	1bba6 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1be56:	2502      	movs	r5, #2
   1be58:	e687      	b.n	1bb6a <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1be5a:	2103      	movs	r1, #3
   1be5c:	4620      	mov	r0, r4
   1be5e:	f00e fa76 	bl	2a34e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1be62:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1be64:	f00e fa73 	bl	2a34e <atomic_set_bit>
	return send_pairing_rsp(smp);
   1be68:	f00e faa4 	bl	2a3b4 <send_pairing_rsp>
   1be6c:	4605      	mov	r5, r0
   1be6e:	e67c      	b.n	1bb6a <smp_pairing_req+0x22>
   1be70:	20003eab 	.word	0x20003eab
   1be74:	0002f8ed 	.word	0x0002f8ed
   1be78:	0002f906 	.word	0x0002f906
   1be7c:	0002f56c 	.word	0x0002f56c
   1be80:	0002c7e4 	.word	0x0002c7e4
   1be84:	000f4240 	.word	0x000f4240
   1be88:	0002f599 	.word	0x0002f599
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1be8c:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1be8e:	b995      	cbnz	r5, 1beb6 <smp_pairing_req+0x36e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1be90:	210f      	movs	r1, #15
   1be92:	4630      	mov	r0, r6
   1be94:	f00e f95d 	bl	2a152 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1be98:	b968      	cbnz	r0, 1beb6 <smp_pairing_req+0x36e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1be9a:	f1b9 0f00 	cmp.w	r9, #0
   1be9e:	d00a      	beq.n	1beb6 <smp_pairing_req+0x36e>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1bea0:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1bea4:	b13b      	cbz	r3, 1beb6 <smp_pairing_req+0x36e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bea6:	4630      	mov	r0, r6
   1bea8:	210a      	movs	r1, #10
   1beaa:	f00e fa50 	bl	2a34e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1beae:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1beb2:	4640      	mov	r0, r8
   1beb4:	e78e      	b.n	1bdd4 <smp_pairing_req+0x28c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1beb6:	210c      	movs	r1, #12
   1beb8:	4620      	mov	r0, r4
   1beba:	e7d3      	b.n	1be64 <smp_pairing_req+0x31c>

0001bebc <compute_and_check_and_send_periph_dhcheck>:
{
   1bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bec0:	b0a3      	sub	sp, #140	; 0x8c
   1bec2:	4604      	mov	r4, r0
   1bec4:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1bec6:	2210      	movs	r2, #16
   1bec8:	2100      	movs	r1, #0
   1beca:	4638      	mov	r0, r7
   1becc:	f010 f8a0 	bl	2c010 <memset>
	switch (smp->method) {
   1bed0:	7a23      	ldrb	r3, [r4, #8]
   1bed2:	2b05      	cmp	r3, #5
   1bed4:	f200 80a6 	bhi.w	1c024 <compute_and_check_and_send_periph_dhcheck+0x168>
   1bed8:	e8df f003 	tbb	[pc, r3]
   1bedc:	06030306 	.word	0x06030306
   1bee0:	93a4      	.short	0x93a4
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1bee2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1bee6:	603b      	str	r3, [r7, #0]
	uint8_t m[53] = { 0x00, /* counter */
   1bee8:	4b86      	ldr	r3, [pc, #536]	; (1c104 <compute_and_check_and_send_periph_dhcheck+0x248>)
		   &smp->chan.chan.conn->le.init_addr,
   1beea:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1beee:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1bef2:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1bef6:	4693      	mov	fp, r2
   1bef8:	6818      	ldr	r0, [r3, #0]
   1befa:	6859      	ldr	r1, [r3, #4]
   1befc:	4615      	mov	r5, r2
   1befe:	c503      	stmia	r5!, {r0, r1}
   1bf00:	3308      	adds	r3, #8
   1bf02:	42b3      	cmp	r3, r6
   1bf04:	462a      	mov	r2, r5
   1bf06:	d1f7      	bne.n	1bef8 <compute_and_check_and_send_periph_dhcheck+0x3c>
   1bf08:	6818      	ldr	r0, [r3, #0]
   1bf0a:	791b      	ldrb	r3, [r3, #4]
   1bf0c:	6028      	str	r0, [r5, #0]
   1bf0e:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1bf10:	f107 0520 	add.w	r5, r7, #32
   1bf14:	2220      	movs	r2, #32
   1bf16:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1bf1a:	4628      	mov	r0, r5
   1bf1c:	f00e f900 	bl	2a120 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1bf20:	4879      	ldr	r0, [pc, #484]	; (1c108 <compute_and_check_and_send_periph_dhcheck+0x24c>)
   1bf22:	f107 0310 	add.w	r3, r7, #16
   1bf26:	2220      	movs	r2, #32
   1bf28:	4629      	mov	r1, r5
   1bf2a:	f00e f93c 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   1bf2e:	2800      	cmp	r0, #0
   1bf30:	f040 80e5 	bne.w	1c0fe <compute_and_check_and_send_periph_dhcheck+0x242>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bf34:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1bf38:	2210      	movs	r2, #16
   1bf3a:	4641      	mov	r1, r8
   1bf3c:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bf40:	f104 0927 	add.w	r9, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1bf44:	f00e f8ec 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1bf48:	2210      	movs	r2, #16
   1bf4a:	4649      	mov	r1, r9
   1bf4c:	f107 0055 	add.w	r0, r7, #85	; 0x55
   1bf50:	f00e f8e6 	bl	2a120 <sys_memcpy_swap>
	m[37] = a1->type;
   1bf54:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
   1bf58:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1bf5c:	2206      	movs	r2, #6
   1bf5e:	f10a 0190 	add.w	r1, sl, #144	; 0x90
   1bf62:	f107 0066 	add.w	r0, r7, #102	; 0x66
   1bf66:	f00e f8db 	bl	2a120 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1bf6a:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1bf6e:	f89a 3096 	ldrb.w	r3, [sl, #150]	; 0x96
   1bf72:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1bf76:	2206      	movs	r2, #6
   1bf78:	f10a 0197 	add.w	r1, sl, #151	; 0x97
   1bf7c:	f107 006d 	add.w	r0, r7, #109	; 0x6d
   1bf80:	f00e f8ce 	bl	2a120 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1bf84:	4633      	mov	r3, r6
   1bf86:	2235      	movs	r2, #53	; 0x35
   1bf88:	4659      	mov	r1, fp
   1bf8a:	f107 0010 	add.w	r0, r7, #16
   1bf8e:	f00e f90a 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   1bf92:	2800      	cmp	r0, #0
   1bf94:	f040 80b3 	bne.w	1c0fe <compute_and_check_and_send_periph_dhcheck+0x242>
	sys_mem_swap(mackey, 16);
   1bf98:	2110      	movs	r1, #16
   1bf9a:	4630      	mov	r0, r6
   1bf9c:	f00e f8ca 	bl	2a134 <sys_mem_swap>
		   smp->tk)) {
   1bfa0:	f104 0a47 	add.w	sl, r4, #71	; 0x47
	m[0] = 0x01;
   1bfa4:	2301      	movs	r3, #1
   1bfa6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1bfaa:	2235      	movs	r2, #53	; 0x35
   1bfac:	4653      	mov	r3, sl
   1bfae:	4659      	mov	r1, fp
   1bfb0:	f107 0010 	add.w	r0, r7, #16
   1bfb4:	f00e f8f7 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   1bfb8:	2800      	cmp	r0, #0
   1bfba:	f040 80a0 	bne.w	1c0fe <compute_and_check_and_send_periph_dhcheck+0x242>
	sys_mem_swap(ltk, 16);
   1bfbe:	2110      	movs	r1, #16
   1bfc0:	4650      	mov	r0, sl
   1bfc2:	f00e f8b7 	bl	2a134 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   1bfc6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bfca:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1bfcc:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1bfd0:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bfd2:	9301      	str	r3, [sp, #4]
   1bfd4:	f104 0311 	add.w	r3, r4, #17
   1bfd8:	9202      	str	r2, [sp, #8]
   1bfda:	9300      	str	r3, [sp, #0]
   1bfdc:	4642      	mov	r2, r8
   1bfde:	463b      	mov	r3, r7
   1bfe0:	4649      	mov	r1, r9
   1bfe2:	4630      	mov	r0, r6
   1bfe4:	f00e f937 	bl	2a256 <smp_f6>
   1bfe8:	b368      	cbz	r0, 1c046 <compute_and_check_and_send_periph_dhcheck+0x18a>
		BT_ERR("Calculate local DHKey check failed");
   1bfea:	4b48      	ldr	r3, [pc, #288]	; (1c10c <compute_and_check_and_send_periph_dhcheck+0x250>)
		BT_ERR("Calculate LTK failed");
   1bfec:	657b      	str	r3, [r7, #84]	; 0x54
   1bfee:	4848      	ldr	r0, [pc, #288]	; (1c110 <compute_and_check_and_send_periph_dhcheck+0x254>)
   1bff0:	2302      	movs	r3, #2
   1bff2:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1bff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bffa:	653b      	str	r3, [r7, #80]	; 0x50
   1bffc:	f00e f999 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1c000:	e01f      	b.n	1c042 <compute_and_check_and_send_periph_dhcheck+0x186>
		if (smp->oobd_remote) {
   1c002:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1c006:	2b00      	cmp	r3, #0
   1c008:	f43f af6e 	beq.w	1bee8 <compute_and_check_and_send_periph_dhcheck+0x2c>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1c00c:	463d      	mov	r5, r7
   1c00e:	f103 0610 	add.w	r6, r3, #16
   1c012:	6818      	ldr	r0, [r3, #0]
   1c014:	6859      	ldr	r1, [r3, #4]
   1c016:	462a      	mov	r2, r5
   1c018:	c203      	stmia	r2!, {r0, r1}
   1c01a:	3308      	adds	r3, #8
   1c01c:	42b3      	cmp	r3, r6
   1c01e:	4615      	mov	r5, r2
   1c020:	d1f7      	bne.n	1c012 <compute_and_check_and_send_periph_dhcheck+0x156>
   1c022:	e761      	b.n	1bee8 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c024:	466c      	mov	r4, sp
   1c026:	b088      	sub	sp, #32
   1c028:	aa04      	add	r2, sp, #16
   1c02a:	493a      	ldr	r1, [pc, #232]	; (1c114 <compute_and_check_and_send_periph_dhcheck+0x258>)
   1c02c:	4838      	ldr	r0, [pc, #224]	; (1c110 <compute_and_check_and_send_periph_dhcheck+0x254>)
	switch (smp->method) {
   1c02e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c032:	2303      	movs	r3, #3
   1c034:	f842 3f10 	str.w	r3, [r2, #16]!
   1c038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c03c:	f00e f979 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1c040:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1c042:	2008      	movs	r0, #8
   1c044:	e055      	b.n	1c0f2 <compute_and_check_and_send_periph_dhcheck+0x236>
	if (smp->method == LE_SC_OOB) {
   1c046:	7a23      	ldrb	r3, [r4, #8]
   1c048:	2b05      	cmp	r3, #5
   1c04a:	d10e      	bne.n	1c06a <compute_and_check_and_send_periph_dhcheck+0x1ae>
		if (smp->oobd_local) {
   1c04c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1c050:	b311      	cbz	r1, 1c098 <compute_and_check_and_send_periph_dhcheck+0x1dc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1c052:	460b      	mov	r3, r1
   1c054:	46bc      	mov	ip, r7
   1c056:	f101 0e10 	add.w	lr, r1, #16
   1c05a:	6818      	ldr	r0, [r3, #0]
   1c05c:	6859      	ldr	r1, [r3, #4]
   1c05e:	4662      	mov	r2, ip
   1c060:	c203      	stmia	r2!, {r0, r1}
   1c062:	3308      	adds	r3, #8
   1c064:	4573      	cmp	r3, lr
   1c066:	4694      	mov	ip, r2
   1c068:	d1f7      	bne.n	1c05a <compute_and_check_and_send_periph_dhcheck+0x19e>
		   &smp->chan.chan.conn->le.init_addr,
   1c06a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1c06e:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1c072:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1c074:	f107 0a10 	add.w	sl, r7, #16
   1c078:	9301      	str	r3, [sp, #4]
   1c07a:	f104 030a 	add.w	r3, r4, #10
   1c07e:	9202      	str	r2, [sp, #8]
   1c080:	9300      	str	r3, [sp, #0]
   1c082:	f8cd a00c 	str.w	sl, [sp, #12]
   1c086:	463b      	mov	r3, r7
   1c088:	464a      	mov	r2, r9
   1c08a:	4641      	mov	r1, r8
   1c08c:	4630      	mov	r0, r6
   1c08e:	f00e f8e2 	bl	2a256 <smp_f6>
   1c092:	b130      	cbz	r0, 1c0a2 <compute_and_check_and_send_periph_dhcheck+0x1e6>
		BT_ERR("Calculate remote DHKey check failed");
   1c094:	4b20      	ldr	r3, [pc, #128]	; (1c118 <compute_and_check_and_send_periph_dhcheck+0x25c>)
   1c096:	e7a9      	b.n	1bfec <compute_and_check_and_send_periph_dhcheck+0x130>
			memset(r, 0, sizeof(r));
   1c098:	2210      	movs	r2, #16
   1c09a:	4638      	mov	r0, r7
   1c09c:	f00f ffb8 	bl	2c010 <memset>
   1c0a0:	e7e3      	b.n	1c06a <compute_and_check_and_send_periph_dhcheck+0x1ae>
	if (memcmp(smp->e, re, 16)) {
   1c0a2:	2210      	movs	r2, #16
   1c0a4:	4651      	mov	r1, sl
   1c0a6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1c0aa:	f00f ff80 	bl	2bfae <memcmp>
   1c0ae:	bb20      	cbnz	r0, 1c0fa <compute_and_check_and_send_periph_dhcheck+0x23e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1c0b0:	210d      	movs	r1, #13
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	f00e f95f 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!buf) {
   1c0b8:	4606      	mov	r6, r0
   1c0ba:	2800      	cmp	r0, #0
   1c0bc:	d0c1      	beq.n	1c042 <compute_and_check_and_send_periph_dhcheck+0x186>
   1c0be:	2110      	movs	r1, #16
   1c0c0:	3008      	adds	r0, #8
   1c0c2:	f00e fd0f 	bl	2aae4 <net_buf_simple_add>
   1c0c6:	f107 0c30 	add.w	ip, r7, #48	; 0x30
   1c0ca:	4603      	mov	r3, r0
   1c0cc:	462a      	mov	r2, r5
   1c0ce:	ca03      	ldmia	r2!, {r0, r1}
   1c0d0:	4562      	cmp	r2, ip
   1c0d2:	6018      	str	r0, [r3, #0]
   1c0d4:	6059      	str	r1, [r3, #4]
   1c0d6:	4615      	mov	r5, r2
   1c0d8:	f103 0308 	add.w	r3, r3, #8
   1c0dc:	d1f6      	bne.n	1c0cc <compute_and_check_and_send_periph_dhcheck+0x210>
	smp_send(smp, buf, NULL, NULL);
   1c0de:	2200      	movs	r2, #0
   1c0e0:	4631      	mov	r1, r6
   1c0e2:	4620      	mov	r0, r4
   1c0e4:	f00e f908 	bl	2a2f8 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c0e8:	1d20      	adds	r0, r4, #4
   1c0ea:	2101      	movs	r1, #1
   1c0ec:	f00e f92f 	bl	2a34e <atomic_set_bit>
	return 0;
   1c0f0:	2000      	movs	r0, #0
}
   1c0f2:	377c      	adds	r7, #124	; 0x7c
   1c0f4:	46bd      	mov	sp, r7
   1c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1c0fa:	200b      	movs	r0, #11
   1c0fc:	e7f9      	b.n	1c0f2 <compute_and_check_and_send_periph_dhcheck+0x236>
		BT_ERR("Calculate LTK failed");
   1c0fe:	4b07      	ldr	r3, [pc, #28]	; (1c11c <compute_and_check_and_send_periph_dhcheck+0x260>)
   1c100:	e774      	b.n	1bfec <compute_and_check_and_send_periph_dhcheck+0x130>
   1c102:	bf00      	nop
   1c104:	0002cb83 	.word	0x0002cb83
   1c108:	0002f91f 	.word	0x0002f91f
   1c10c:	0002f5b5 	.word	0x0002f5b5
   1c110:	0002c7e4 	.word	0x0002c7e4
   1c114:	0002f599 	.word	0x0002f599
   1c118:	0002f5d8 	.word	0x0002f5d8
   1c11c:	0002f5fc 	.word	0x0002f5fc

0001c120 <smp_send_pairing_confirm>:
{
   1c120:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c122:	b083      	sub	sp, #12
	switch (smp->method) {
   1c124:	7a04      	ldrb	r4, [r0, #8]
   1c126:	2c02      	cmp	r4, #2
{
   1c128:	af02      	add	r7, sp, #8
   1c12a:	4605      	mov	r5, r0
	switch (smp->method) {
   1c12c:	d823      	bhi.n	1c176 <smp_send_pairing_confirm+0x56>
   1c12e:	b144      	cbz	r4, 1c142 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c130:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1c134:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1c138:	40dc      	lsrs	r4, r3
   1c13a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1c13e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1c142:	2103      	movs	r1, #3
   1c144:	4628      	mov	r0, r5
   1c146:	f00e f916 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!buf) {
   1c14a:	4606      	mov	r6, r0
   1c14c:	b320      	cbz	r0, 1c198 <smp_send_pairing_confirm+0x78>
   1c14e:	2110      	movs	r1, #16
   1c150:	3008      	adds	r0, #8
   1c152:	f00e fcc7 	bl	2aae4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1c156:	9000      	str	r0, [sp, #0]
   1c158:	4818      	ldr	r0, [pc, #96]	; (1c1bc <smp_send_pairing_confirm+0x9c>)
   1c15a:	4623      	mov	r3, r4
   1c15c:	6800      	ldr	r0, [r0, #0]
   1c15e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1c162:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1c166:	f00e f83a 	bl	2a1de <smp_f4>
   1c16a:	4604      	mov	r4, r0
   1c16c:	b1c0      	cbz	r0, 1c1a0 <smp_send_pairing_confirm+0x80>
		net_buf_unref(buf);
   1c16e:	4630      	mov	r0, r6
   1c170:	f001 fcfa 	bl	1db68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1c174:	e010      	b.n	1c198 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1c176:	2c03      	cmp	r4, #3
   1c178:	d010      	beq.n	1c19c <smp_send_pairing_confirm+0x7c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c17a:	466d      	mov	r5, sp
   1c17c:	b088      	sub	sp, #32
   1c17e:	aa02      	add	r2, sp, #8
   1c180:	4b0f      	ldr	r3, [pc, #60]	; (1c1c0 <smp_send_pairing_confirm+0xa0>)
   1c182:	4810      	ldr	r0, [pc, #64]	; (1c1c4 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1c184:	e9c2 3405 	strd	r3, r4, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c188:	2303      	movs	r3, #3
   1c18a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c18e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c192:	f00e f8ce 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1c196:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1c198:	2008      	movs	r0, #8
   1c19a:	e00b      	b.n	1c1b4 <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   1c19c:	2400      	movs	r4, #0
   1c19e:	e7d0      	b.n	1c142 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1c1a0:	4602      	mov	r2, r0
   1c1a2:	4631      	mov	r1, r6
   1c1a4:	4628      	mov	r0, r5
   1c1a6:	f00e f8a7 	bl	2a2f8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c1aa:	1d28      	adds	r0, r5, #4
   1c1ac:	4621      	mov	r1, r4
   1c1ae:	f00e f83c 	bl	2a22a <atomic_clear_bit>
	return 0;
   1c1b2:	4620      	mov	r0, r4
}
   1c1b4:	3704      	adds	r7, #4
   1c1b6:	46bd      	mov	sp, r7
   1c1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c1ba:	bf00      	nop
   1c1bc:	20002f54 	.word	0x20002f54
   1c1c0:	0002f599 	.word	0x0002f599
   1c1c4:	0002c7e4 	.word	0x0002c7e4

0001c1c8 <smp_public_key_periph>:
{
   1c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1cc:	b086      	sub	sp, #24
   1c1ce:	af00      	add	r7, sp, #0
   1c1d0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c1d2:	f7ff fb01 	bl	1b7d8 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c1d6:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c1d8:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c1da:	210e      	movs	r1, #14
   1c1dc:	4628      	mov	r0, r5
   1c1de:	f00d ffb8 	bl	2a152 <atomic_test_bit>
   1c1e2:	b9a0      	cbnz	r0, 1c20e <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1c1e4:	4b54      	ldr	r3, [pc, #336]	; (1c338 <smp_public_key_periph+0x170>)
   1c1e6:	2220      	movs	r2, #32
   1c1e8:	6819      	ldr	r1, [r3, #0]
   1c1ea:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c1ee:	f00f fede 	bl	2bfae <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c1f2:	b960      	cbnz	r0, 1c20e <smp_public_key_periph+0x46>
		BT_WARN("Remote public key rejected");
   1c1f4:	4b51      	ldr	r3, [pc, #324]	; (1c33c <smp_public_key_periph+0x174>)
   1c1f6:	617b      	str	r3, [r7, #20]
   1c1f8:	4851      	ldr	r0, [pc, #324]	; (1c340 <smp_public_key_periph+0x178>)
   1c1fa:	2302      	movs	r3, #2
   1c1fc:	f107 0210 	add.w	r2, r7, #16
   1c200:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c204:	613b      	str	r3, [r7, #16]
   1c206:	f00e f894 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c20a:	2008      	movs	r0, #8
   1c20c:	e034      	b.n	1c278 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1c20e:	210c      	movs	r1, #12
   1c210:	4620      	mov	r0, r4
   1c212:	f00e f8b0 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1c216:	4680      	mov	r8, r0
   1c218:	2800      	cmp	r0, #0
   1c21a:	d0f6      	beq.n	1c20a <smp_public_key_periph+0x42>
   1c21c:	2140      	movs	r1, #64	; 0x40
   1c21e:	3008      	adds	r0, #8
   1c220:	f00e fc60 	bl	2aae4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1c224:	4b44      	ldr	r3, [pc, #272]	; (1c338 <smp_public_key_periph+0x170>)
   1c226:	681b      	ldr	r3, [r3, #0]
   1c228:	4602      	mov	r2, r0
   1c22a:	4601      	mov	r1, r0
   1c22c:	f103 0020 	add.w	r0, r3, #32
   1c230:	f853 cb04 	ldr.w	ip, [r3], #4
   1c234:	f841 cb04 	str.w	ip, [r1], #4
   1c238:	4283      	cmp	r3, r0
   1c23a:	d1f9      	bne.n	1c230 <smp_public_key_periph+0x68>
   1c23c:	3220      	adds	r2, #32
   1c23e:	f103 0120 	add.w	r1, r3, #32
   1c242:	f853 0b04 	ldr.w	r0, [r3], #4
   1c246:	f842 0b04 	str.w	r0, [r2], #4
   1c24a:	428b      	cmp	r3, r1
   1c24c:	d1f9      	bne.n	1c242 <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   1c24e:	2200      	movs	r2, #0
   1c250:	4641      	mov	r1, r8
   1c252:	4620      	mov	r0, r4
   1c254:	f00e f850 	bl	2a2f8 <smp_send.constprop.0>
	switch (smp->method) {
   1c258:	7a23      	ldrb	r3, [r4, #8]
   1c25a:	2b05      	cmp	r3, #5
   1c25c:	d85a      	bhi.n	1c314 <smp_public_key_periph+0x14c>
   1c25e:	e8df f003 	tbb	[pc, r3]
   1c262:	3b03      	.short	0x3b03
   1c264:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c268:	2104      	movs	r1, #4
   1c26a:	4620      	mov	r0, r4
   1c26c:	f00e f86f 	bl	2a34e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1c270:	f7ff ff56 	bl	1c120 <smp_send_pairing_confirm>
		if (err) {
   1c274:	2800      	cmp	r0, #0
   1c276:	d03e      	beq.n	1c2f6 <smp_public_key_periph+0x12e>
}
   1c278:	3718      	adds	r7, #24
   1c27a:	46bd      	mov	sp, r7
   1c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c280:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1c282:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c286:	f7ff faa7 	bl	1b7d8 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c28a:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c28c:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c28e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1c292:	f003 fe25 	bl	1fee0 <bt_rand>
   1c296:	2800      	cmp	r0, #0
   1c298:	d1b7      	bne.n	1c20a <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1c29a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1c29e:	4a29      	ldr	r2, [pc, #164]	; (1c344 <smp_public_key_periph+0x17c>)
   1c2a0:	fbb3 f1f2 	udiv	r1, r3, r2
   1c2a4:	fb02 3311 	mls	r3, r2, r1, r3
   1c2a8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1c2ac:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1c2b0:	b156      	cbz	r6, 1c2c8 <smp_public_key_periph+0x100>
   1c2b2:	6833      	ldr	r3, [r6, #0]
   1c2b4:	b143      	cbz	r3, 1c2c8 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c2b6:	210b      	movs	r1, #11
   1c2b8:	4628      	mov	r0, r5
   1c2ba:	f00e f848 	bl	2a34e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1c2be:	6833      	ldr	r3, [r6, #0]
   1c2c0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1c2c4:	4640      	mov	r0, r8
   1c2c6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1c2c8:	2103      	movs	r1, #3
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f00e f83f 	bl	2a34e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1c2d0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c2d2:	f00e f83c 	bl	2a34e <atomic_set_bit>
		break;
   1c2d6:	e00e      	b.n	1c2f6 <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1c2d8:	4620      	mov	r0, r4
   1c2da:	2103      	movs	r1, #3
   1c2dc:	f00e f837 	bl	2a34e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1c2e0:	210e      	movs	r1, #14
   1c2e2:	f00e f834 	bl	2a34e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c2e6:	4628      	mov	r0, r5
   1c2e8:	210a      	movs	r1, #10
   1c2ea:	f00e f830 	bl	2a34e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1c2ee:	6873      	ldr	r3, [r6, #4]
   1c2f0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c2f4:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1c2f6:	4628      	mov	r0, r5
   1c2f8:	2107      	movs	r1, #7
   1c2fa:	f00e f828 	bl	2a34e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1c2fe:	2008      	movs	r0, #8
   1c300:	f7ff fa5c 	bl	1b7bc <smp_find>
   1c304:	b9b0      	cbnz	r0, 1c334 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   1c306:	4620      	mov	r0, r4
   1c308:	f7ff fb74 	bl	1b9f4 <smp_dhkey_generate>
   1c30c:	e7b4      	b.n	1c278 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c30e:	2104      	movs	r1, #4
   1c310:	4620      	mov	r0, r4
   1c312:	e7de      	b.n	1c2d2 <smp_public_key_periph+0x10a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c314:	466c      	mov	r4, sp
   1c316:	b088      	sub	sp, #32
   1c318:	466a      	mov	r2, sp
   1c31a:	490b      	ldr	r1, [pc, #44]	; (1c348 <smp_public_key_periph+0x180>)
   1c31c:	4808      	ldr	r0, [pc, #32]	; (1c340 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   1c31e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c322:	2303      	movs	r3, #3
   1c324:	f842 3f10 	str.w	r3, [r2, #16]!
   1c328:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c32c:	f00e f801 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1c330:	46a5      	mov	sp, r4
   1c332:	e76a      	b.n	1c20a <smp_public_key_periph+0x42>
	return 0;
   1c334:	2000      	movs	r0, #0
   1c336:	e79f      	b.n	1c278 <smp_public_key_periph+0xb0>
   1c338:	20002f54 	.word	0x20002f54
   1c33c:	0002f611 	.word	0x0002f611
   1c340:	0002c7e4 	.word	0x0002c7e4
   1c344:	000f4240 	.word	0x000f4240
   1c348:	0002f599 	.word	0x0002f599

0001c34c <smp_public_key>:
{
   1c34c:	b530      	push	{r4, r5, lr}
   1c34e:	460d      	mov	r5, r1
   1c350:	b087      	sub	sp, #28
   1c352:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c354:	f7ff fa40 	bl	1b7d8 <latch_auth_cb>
   1c358:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1c35a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c35e:	4602      	mov	r2, r0
   1c360:	f103 0120 	add.w	r1, r3, #32
   1c364:	f853 5b04 	ldr.w	r5, [r3], #4
   1c368:	f842 5b04 	str.w	r5, [r2], #4
   1c36c:	428b      	cmp	r3, r1
   1c36e:	d1f9      	bne.n	1c364 <smp_public_key+0x18>
   1c370:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1c374:	f103 0120 	add.w	r1, r3, #32
   1c378:	f853 5b04 	ldr.w	r5, [r3], #4
   1c37c:	f842 5b04 	str.w	r5, [r2], #4
   1c380:	428b      	cmp	r3, r1
   1c382:	d1f9      	bne.n	1c378 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1c384:	f7fb fcec 	bl	17d60 <bt_pub_key_is_debug>
   1c388:	b940      	cbnz	r0, 1c39c <smp_public_key+0x50>
	if (!sc_public_key) {
   1c38a:	4b1c      	ldr	r3, [pc, #112]	; (1c3fc <smp_public_key+0xb0>)
   1c38c:	681d      	ldr	r5, [r3, #0]
   1c38e:	bb75      	cbnz	r5, 1c3ee <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1c390:	1d20      	adds	r0, r4, #4
   1c392:	2106      	movs	r1, #6
   1c394:	f00d ffdb 	bl	2a34e <atomic_set_bit>
		return 0;
   1c398:	4628      	mov	r0, r5
   1c39a:	e026      	b.n	1c3ea <smp_public_key+0x9e>
		BT_INFO("Remote is using Debug Public key");
   1c39c:	4b18      	ldr	r3, [pc, #96]	; (1c400 <smp_public_key+0xb4>)
   1c39e:	4819      	ldr	r0, [pc, #100]	; (1c404 <smp_public_key+0xb8>)
   1c3a0:	9305      	str	r3, [sp, #20]
   1c3a2:	aa04      	add	r2, sp, #16
   1c3a4:	2302      	movs	r3, #2
   1c3a6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1c3aa:	9304      	str	r3, [sp, #16]
   1c3ac:	f00d ffc1 	bl	2a332 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1c3b0:	210e      	movs	r1, #14
   1c3b2:	1d20      	adds	r0, r4, #4
   1c3b4:	f00d ffcb 	bl	2a34e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1c3b8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1c3bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c3c0:	b933      	cbnz	r3, 1c3d0 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c3c2:	7a28      	ldrb	r0, [r5, #8]
   1c3c4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1c3c8:	f001 f8c8 	bl	1d55c <bt_keys_get_addr>
   1c3cc:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1c3d0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c3d4:	2b00      	cmp	r3, #0
   1c3d6:	d0d8      	beq.n	1c38a <smp_public_key+0x3e>
   1c3d8:	89da      	ldrh	r2, [r3, #14]
   1c3da:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c3de:	2a00      	cmp	r2, #0
   1c3e0:	d0d3      	beq.n	1c38a <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1c3e2:	7b5b      	ldrb	r3, [r3, #13]
   1c3e4:	079b      	lsls	r3, r3, #30
   1c3e6:	d4d0      	bmi.n	1c38a <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c3e8:	2003      	movs	r0, #3
}
   1c3ea:	b007      	add	sp, #28
   1c3ec:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   1c3ee:	4620      	mov	r0, r4
}
   1c3f0:	b007      	add	sp, #28
   1c3f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1c3f6:	f7ff bee7 	b.w	1c1c8 <smp_public_key_periph>
   1c3fa:	bf00      	nop
   1c3fc:	20002f54 	.word	0x20002f54
   1c400:	0002f62c 	.word	0x0002f62c
   1c404:	0002c7e4 	.word	0x0002c7e4

0001c408 <bt_smp_connected>:
{
   1c408:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1c40a:	490b      	ldr	r1, [pc, #44]	; (1c438 <bt_smp_connected+0x30>)
{
   1c40c:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1c40e:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1c412:	308c      	adds	r0, #140	; 0x8c
   1c414:	f00f fa81 	bl	2b91a <k_work_init_delayable>
	smp_reset(smp);
   1c418:	4628      	mov	r0, r5
   1c41a:	f00e f84b 	bl	2a4b4 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c41e:	f3bf 8f5b 	dmb	ish
   1c422:	4b06      	ldr	r3, [pc, #24]	; (1c43c <bt_smp_connected+0x34>)
   1c424:	34bc      	adds	r4, #188	; 0xbc
   1c426:	e854 2f00 	ldrex	r2, [r4]
   1c42a:	e844 3100 	strex	r1, r3, [r4]
   1c42e:	2900      	cmp	r1, #0
   1c430:	d1f9      	bne.n	1c426 <bt_smp_connected+0x1e>
   1c432:	f3bf 8f5b 	dmb	ish
}
   1c436:	bd38      	pop	{r3, r4, r5, pc}
   1c438:	0001d3d9 	.word	0x0001d3d9
   1c43c:	20002188 	.word	0x20002188

0001c440 <smp_pairing_confirm>:
{
   1c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1c442:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c444:	1d06      	adds	r6, r0, #4
{
   1c446:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c448:	210b      	movs	r1, #11
{
   1c44a:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c44c:	4630      	mov	r0, r6
   1c44e:	f00d feec 	bl	2a22a <atomic_clear_bit>
   1c452:	462b      	mov	r3, r5
   1c454:	f104 0217 	add.w	r2, r4, #23
   1c458:	f105 0110 	add.w	r1, r5, #16
   1c45c:	f853 0b04 	ldr.w	r0, [r3], #4
   1c460:	f842 0b04 	str.w	r0, [r2], #4
   1c464:	428b      	cmp	r3, r1
   1c466:	d1f9      	bne.n	1c45c <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c468:	2105      	movs	r1, #5
   1c46a:	4630      	mov	r0, r6
   1c46c:	f00d fe71 	bl	2a152 <atomic_test_bit>
   1c470:	b920      	cbnz	r0, 1c47c <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1c472:	4620      	mov	r0, r4
   1c474:	f00e f89d 	bl	2a5b2 <legacy_pairing_confirm>
}
   1c478:	46bd      	mov	sp, r7
   1c47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1c47c:	7a23      	ldrb	r3, [r4, #8]
   1c47e:	2b01      	cmp	r3, #1
   1c480:	d008      	beq.n	1c494 <smp_pairing_confirm+0x54>
   1c482:	2b02      	cmp	r3, #2
   1c484:	d112      	bne.n	1c4ac <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c486:	2104      	movs	r1, #4
   1c488:	4620      	mov	r0, r4
   1c48a:	f00d ff60 	bl	2a34e <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1c48e:	f7ff fe47 	bl	1c120 <smp_send_pairing_confirm>
   1c492:	e7f1      	b.n	1c478 <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c494:	210a      	movs	r1, #10
   1c496:	4630      	mov	r0, r6
   1c498:	f00d fe5b 	bl	2a152 <atomic_test_bit>
   1c49c:	2800      	cmp	r0, #0
   1c49e:	d0f2      	beq.n	1c486 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c4a0:	4630      	mov	r0, r6
   1c4a2:	2100      	movs	r1, #0
   1c4a4:	f00d ff53 	bl	2a34e <atomic_set_bit>
			return 0;
   1c4a8:	2000      	movs	r0, #0
   1c4aa:	e7e5      	b.n	1c478 <smp_pairing_confirm+0x38>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c4ac:	466c      	mov	r4, sp
   1c4ae:	b088      	sub	sp, #32
   1c4b0:	466a      	mov	r2, sp
   1c4b2:	4907      	ldr	r1, [pc, #28]	; (1c4d0 <smp_pairing_confirm+0x90>)
   1c4b4:	4807      	ldr	r0, [pc, #28]	; (1c4d4 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   1c4b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c4ba:	2303      	movs	r3, #3
   1c4bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c4c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c4c4:	f00d ff35 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c4c8:	2008      	movs	r0, #8
   1c4ca:	46a5      	mov	sp, r4
   1c4cc:	e7d4      	b.n	1c478 <smp_pairing_confirm+0x38>
   1c4ce:	bf00      	nop
   1c4d0:	0002f599 	.word	0x0002f599
   1c4d4:	0002c7e4 	.word	0x0002c7e4

0001c4d8 <smp_pairing_random>:
{
   1c4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c4dc:	b09d      	sub	sp, #116	; 0x74
   1c4de:	460d      	mov	r5, r1
   1c4e0:	af04      	add	r7, sp, #16
   1c4e2:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c4e4:	f7ff f978 	bl	1b7d8 <latch_auth_cb>
   1c4e8:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c4ea:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c4ee:	4680      	mov	r8, r0
   1c4f0:	464a      	mov	r2, r9
   1c4f2:	f103 0110 	add.w	r1, r3, #16
   1c4f6:	f853 0b04 	ldr.w	r0, [r3], #4
   1c4fa:	f842 0b04 	str.w	r0, [r2], #4
   1c4fe:	428b      	cmp	r3, r1
   1c500:	d1f9      	bne.n	1c4f6 <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c502:	1d26      	adds	r6, r4, #4
   1c504:	2105      	movs	r1, #5
   1c506:	4630      	mov	r0, r6
   1c508:	f00d fe23 	bl	2a152 <atomic_test_bit>
   1c50c:	2800      	cmp	r0, #0
   1c50e:	d14f      	bne.n	1c5b0 <smp_pairing_random+0xd8>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c510:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c514:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c516:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c51a:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c51e:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c520:	9201      	str	r2, [sp, #4]
   1c522:	9300      	str	r3, [sp, #0]
   1c524:	f104 0209 	add.w	r2, r4, #9
   1c528:	f104 0310 	add.w	r3, r4, #16
   1c52c:	4649      	mov	r1, r9
   1c52e:	4628      	mov	r0, r5
   1c530:	f00d ffe3 	bl	2a4fa <smp_c1>
	if (err) {
   1c534:	bb20      	cbnz	r0, 1c580 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1c536:	2210      	movs	r2, #16
   1c538:	4639      	mov	r1, r7
   1c53a:	f104 0017 	add.w	r0, r4, #23
   1c53e:	f00f fd36 	bl	2bfae <memcmp>
   1c542:	2800      	cmp	r0, #0
   1c544:	f040 8092 	bne.w	1c66c <smp_pairing_random+0x194>
	memcpy(out, r2, 8);
   1c548:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1c54c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c550:	463b      	mov	r3, r7
   1c552:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1c554:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1c558:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
	return bt_encrypt_le(k, out, out);
   1c55c:	463a      	mov	r2, r7
	memcpy(out + 8, r1, 8);
   1c55e:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1c560:	4639      	mov	r1, r7
   1c562:	4628      	mov	r0, r5
   1c564:	f00e fda3 	bl	2b0ae <bt_encrypt_le>
		if (err) {
   1c568:	b160      	cbz	r0, 1c584 <smp_pairing_random+0xac>
			BT_ERR("Calculate STK failed");
   1c56a:	4b75      	ldr	r3, [pc, #468]	; (1c740 <smp_pairing_random+0x268>)
		BT_ERR("Calculate confirm failed");
   1c56c:	627b      	str	r3, [r7, #36]	; 0x24
   1c56e:	4875      	ldr	r0, [pc, #468]	; (1c744 <smp_pairing_random+0x26c>)
   1c570:	2302      	movs	r3, #2
   1c572:	f107 0220 	add.w	r2, r7, #32
   1c576:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c57a:	623b      	str	r3, [r7, #32]
   1c57c:	f00d fed9 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c580:	2508      	movs	r5, #8
   1c582:	e074      	b.n	1c66e <smp_pairing_random+0x196>
   1c584:	463b      	mov	r3, r7
   1c586:	462a      	mov	r2, r5
   1c588:	f107 0c10 	add.w	ip, r7, #16
   1c58c:	461d      	mov	r5, r3
   1c58e:	cd03      	ldmia	r5!, {r0, r1}
   1c590:	4565      	cmp	r5, ip
   1c592:	6010      	str	r0, [r2, #0]
   1c594:	6051      	str	r1, [r2, #4]
   1c596:	462b      	mov	r3, r5
   1c598:	f102 0208 	add.w	r2, r2, #8
   1c59c:	d1f6      	bne.n	1c58c <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c59e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c5a0:	4630      	mov	r0, r6
   1c5a2:	f00d fed4 	bl	2a34e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	f00d ff1e 	bl	2a3e8 <smp_send_pairing_random>
   1c5ac:	4605      	mov	r5, r0
   1c5ae:	e05e      	b.n	1c66e <smp_pairing_random+0x196>
	switch (smp->method) {
   1c5b0:	7a23      	ldrb	r3, [r4, #8]
   1c5b2:	2b05      	cmp	r3, #5
   1c5b4:	f200 809f 	bhi.w	1c6f6 <smp_pairing_random+0x21e>
   1c5b8:	e8df f003 	tbb	[pc, r3]
   1c5bc:	033d3d37 	.word	0x033d3d37
   1c5c0:	809d      	.short	0x809d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c5c2:	4b61      	ldr	r3, [pc, #388]	; (1c748 <smp_pairing_random+0x270>)
   1c5c4:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1c5c6:	2220      	movs	r2, #32
   1c5c8:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1c5cc:	f107 0010 	add.w	r0, r7, #16
   1c5d0:	f00d fda6 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c5d4:	2220      	movs	r2, #32
   1c5d6:	4629      	mov	r1, r5
   1c5d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1c5dc:	f00d fda0 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1c5e0:	2210      	movs	r2, #16
   1c5e2:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c5e6:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1c5ea:	f00d fd99 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c5ee:	2210      	movs	r2, #16
   1c5f0:	4649      	mov	r1, r9
   1c5f2:	4638      	mov	r0, r7
   1c5f4:	f00d fd94 	bl	2a120 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c5f8:	463b      	mov	r3, r7
   1c5fa:	2250      	movs	r2, #80	; 0x50
   1c5fc:	f107 0110 	add.w	r1, r7, #16
   1c600:	4638      	mov	r0, r7
   1c602:	f00d fdd0 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   1c606:	2800      	cmp	r0, #0
   1c608:	d1ba      	bne.n	1c580 <smp_pairing_random+0xa8>
	memcpy(passkey, xs + 12, 4);
   1c60a:	68fd      	ldr	r5, [r7, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c60c:	210a      	movs	r1, #10
   1c60e:	4630      	mov	r0, r6
   1c610:	f00d fe9d 	bl	2a34e <atomic_set_bit>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c614:	4b4d      	ldr	r3, [pc, #308]	; (1c74c <smp_pairing_random+0x274>)
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1c616:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1c61a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c61e:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c620:	fbb5 f1f3 	udiv	r1, r5, r3
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1c624:	fb03 5111 	mls	r1, r3, r1, r5
   1c628:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c62a:	210d      	movs	r1, #13
   1c62c:	4620      	mov	r0, r4
   1c62e:	f00d fe8e 	bl	2a34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c632:	2110      	movs	r1, #16
   1c634:	e7b4      	b.n	1c5a0 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c636:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1c63a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c63e:	4942      	ldr	r1, [pc, #264]	; (1c748 <smp_pairing_random+0x270>)
   1c640:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c642:	40d3      	lsrs	r3, r2
   1c644:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c648:	6809      	ldr	r1, [r1, #0]
   1c64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c64e:	464a      	mov	r2, r9
   1c650:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c654:	f00d fdc3 	bl	2a1de <smp_f4>
   1c658:	b108      	cbz	r0, 1c65e <smp_pairing_random+0x186>
		BT_ERR("Calculate confirm failed");
   1c65a:	4b3d      	ldr	r3, [pc, #244]	; (1c750 <smp_pairing_random+0x278>)
   1c65c:	e786      	b.n	1c56c <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c65e:	2210      	movs	r2, #16
   1c660:	4639      	mov	r1, r7
   1c662:	f104 0017 	add.w	r0, r4, #23
   1c666:	f00f fca2 	bl	2bfae <memcmp>
   1c66a:	b128      	cbz	r0, 1c678 <smp_pairing_random+0x1a0>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c66c:	2504      	movs	r5, #4
}
   1c66e:	4628      	mov	r0, r5
   1c670:	3764      	adds	r7, #100	; 0x64
   1c672:	46bd      	mov	sp, r7
   1c674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->allowed_cmds,
   1c678:	2103      	movs	r1, #3
   1c67a:	4620      	mov	r0, r4
   1c67c:	f00d fe67 	bl	2a34e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c680:	f00d feb2 	bl	2a3e8 <smp_send_pairing_random>
		if (err) {
   1c684:	4605      	mov	r5, r0
   1c686:	2800      	cmp	r0, #0
   1c688:	d1f1      	bne.n	1c66e <smp_pairing_random+0x196>
		smp->passkey_round++;
   1c68a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c68e:	3301      	adds	r3, #1
   1c690:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c692:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c694:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c698:	d108      	bne.n	1c6ac <smp_pairing_random+0x1d4>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c69a:	4620      	mov	r0, r4
   1c69c:	210d      	movs	r1, #13
   1c69e:	f00d fe56 	bl	2a34e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c6a2:	2110      	movs	r1, #16
   1c6a4:	4630      	mov	r0, r6
   1c6a6:	f00d fe52 	bl	2a34e <atomic_set_bit>
			return 0;
   1c6aa:	e7e0      	b.n	1c66e <smp_pairing_random+0x196>
		if (bt_rand(smp->prnd, 16)) {
   1c6ac:	2110      	movs	r1, #16
   1c6ae:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c6b2:	f003 fc15 	bl	1fee0 <bt_rand>
   1c6b6:	2800      	cmp	r0, #0
   1c6b8:	d0d9      	beq.n	1c66e <smp_pairing_random+0x196>
   1c6ba:	e761      	b.n	1c580 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1c6bc:	2110      	movs	r1, #16
   1c6be:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c6c2:	f003 fc0d 	bl	1fee0 <bt_rand>
   1c6c6:	2800      	cmp	r0, #0
   1c6c8:	f47f af5a 	bne.w	1c580 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1c6cc:	f1b8 0f00 	cmp.w	r8, #0
   1c6d0:	d021      	beq.n	1c716 <smp_pairing_random+0x23e>
   1c6d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c6d6:	b1f3      	cbz	r3, 1c716 <smp_pairing_random+0x23e>
			struct bt_conn_oob_info info = {
   1c6d8:	4b1e      	ldr	r3, [pc, #120]	; (1c754 <smp_pairing_random+0x27c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c6da:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1c6dc:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1c6e0:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c6e2:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c6e4:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c6e6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c6ea:	d416      	bmi.n	1c71a <smp_pairing_random+0x242>
				     BT_CONN_OOB_BOTH_PEERS :
   1c6ec:	2b00      	cmp	r3, #0
   1c6ee:	bf0c      	ite	eq
   1c6f0:	2003      	moveq	r0, #3
   1c6f2:	2001      	movne	r0, #1
   1c6f4:	e014      	b.n	1c720 <smp_pairing_random+0x248>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c6f6:	466c      	mov	r4, sp
   1c6f8:	b088      	sub	sp, #32
   1c6fa:	aa04      	add	r2, sp, #16
   1c6fc:	4916      	ldr	r1, [pc, #88]	; (1c758 <smp_pairing_random+0x280>)
   1c6fe:	4811      	ldr	r0, [pc, #68]	; (1c744 <smp_pairing_random+0x26c>)
	switch (smp->method) {
   1c700:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c704:	2303      	movs	r3, #3
   1c706:	f842 3f10 	str.w	r3, [r2, #16]!
   1c70a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c70e:	f00d fe10 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1c712:	46a5      	mov	sp, r4
   1c714:	e734      	b.n	1c580 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c716:	2502      	movs	r5, #2
   1c718:	e7a9      	b.n	1c66e <smp_pairing_random+0x196>
				     BT_CONN_OOB_BOTH_PEERS :
   1c71a:	2b00      	cmp	r3, #0
   1c71c:	bf18      	it	ne
   1c71e:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c720:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c722:	7478      	strb	r0, [r7, #17]
			smp->oobd_remote = NULL;
   1c724:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c728:	4630      	mov	r0, r6
   1c72a:	210c      	movs	r1, #12
   1c72c:	f00d fe0f 	bl	2a34e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1c730:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c734:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c738:	f107 0110 	add.w	r1, r7, #16
   1c73c:	4798      	blx	r3
			return 0;
   1c73e:	e796      	b.n	1c66e <smp_pairing_random+0x196>
   1c740:	0002f64d 	.word	0x0002f64d
   1c744:	0002c7e4 	.word	0x0002c7e4
   1c748:	20002f54 	.word	0x20002f54
   1c74c:	000f4240 	.word	0x000f4240
   1c750:	0002f662 	.word	0x0002f662
   1c754:	0002cb83 	.word	0x0002cb83
   1c758:	0002f599 	.word	0x0002f599

0001c75c <bt_smp_sign_verify>:
{
   1c75c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c75e:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1c760:	898b      	ldrh	r3, [r1, #12]
   1c762:	688a      	ldr	r2, [r1, #8]
   1c764:	441a      	add	r2, r3
   1c766:	4605      	mov	r5, r0
   1c768:	af00      	add	r7, sp, #0
   1c76a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
   1c76e:	460c      	mov	r4, r1
   1c770:	f852 1c08 	ldr.w	r1, [r2, #-8]
   1c774:	1d3b      	adds	r3, r7, #4
   1c776:	c303      	stmia	r3!, {r0, r1}
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1c778:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1c77c:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1c780:	7a29      	ldrb	r1, [r5, #8]
   1c782:	6018      	str	r0, [r3, #0]
   1c784:	4632      	mov	r2, r6
   1c786:	2010      	movs	r0, #16
   1c788:	f000 ff58 	bl	1d63c <bt_keys_find>
	if (!keys) {
   1c78c:	4605      	mov	r5, r0
   1c78e:	b9c0      	cbnz	r0, 1c7c2 <bt_smp_sign_verify+0x66>
		BT_ERR("Unable to find Remote CSRK for %s",
   1c790:	4630      	mov	r0, r6
   1c792:	f7f8 ffc9 	bl	15728 <bt_addr_le_str_real>
   1c796:	466c      	mov	r4, sp
   1c798:	b088      	sub	sp, #32
   1c79a:	466a      	mov	r2, sp
   1c79c:	4b2d      	ldr	r3, [pc, #180]	; (1c854 <bt_smp_sign_verify+0xf8>)
   1c79e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c7a2:	2302      	movs	r3, #2
   1c7a4:	7713      	strb	r3, [r2, #28]
   1c7a6:	4b2c      	ldr	r3, [pc, #176]	; (1c858 <bt_smp_sign_verify+0xfc>)
   1c7a8:	482c      	ldr	r0, [pc, #176]	; (1c85c <bt_smp_sign_verify+0x100>)
   1c7aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7ae:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c7b2:	f00d fdbe 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1c7b6:	f06f 0001 	mvn.w	r0, #1
   1c7ba:	46a5      	mov	sp, r4
}
   1c7bc:	3714      	adds	r7, #20
   1c7be:	46bd      	mov	sp, r7
   1c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7c2:	89a1      	ldrh	r1, [r4, #12]
   1c7c4:	68a3      	ldr	r3, [r4, #8]
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1c7c6:	6e42      	ldr	r2, [r0, #100]	; 0x64
   1c7c8:	440b      	add	r3, r1
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1c7ca:	3054      	adds	r0, #84	; 0x54
   1c7cc:	f843 2c0c 	str.w	r2, [r3, #-12]
   1c7d0:	89a2      	ldrh	r2, [r4, #12]
   1c7d2:	68a1      	ldr	r1, [r4, #8]
   1c7d4:	3a0c      	subs	r2, #12
   1c7d6:	b292      	uxth	r2, r2
   1c7d8:	f7ff f870 	bl	1b8bc <smp_sign_buf>
	if (err) {
   1c7dc:	b1b0      	cbz	r0, 1c80c <bt_smp_sign_verify+0xb0>
		BT_ERR("Unable to create signature for %s",
   1c7de:	4630      	mov	r0, r6
   1c7e0:	f7f8 ffa2 	bl	15728 <bt_addr_le_str_real>
   1c7e4:	466c      	mov	r4, sp
   1c7e6:	b088      	sub	sp, #32
   1c7e8:	466a      	mov	r2, sp
   1c7ea:	4b1d      	ldr	r3, [pc, #116]	; (1c860 <bt_smp_sign_verify+0x104>)
   1c7ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c7f0:	2302      	movs	r3, #2
   1c7f2:	7713      	strb	r3, [r2, #28]
   1c7f4:	4b18      	ldr	r3, [pc, #96]	; (1c858 <bt_smp_sign_verify+0xfc>)
   1c7f6:	4819      	ldr	r0, [pc, #100]	; (1c85c <bt_smp_sign_verify+0x100>)
   1c7f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7fc:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c800:	f00d fd97 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1c804:	f06f 0004 	mvn.w	r0, #4
   1c808:	46a5      	mov	sp, r4
   1c80a:	e7d7      	b.n	1c7bc <bt_smp_sign_verify+0x60>
   1c80c:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1c80e:	68a1      	ldr	r1, [r4, #8]
   1c810:	3b0c      	subs	r3, #12
   1c812:	220c      	movs	r2, #12
   1c814:	4419      	add	r1, r3
   1c816:	1d38      	adds	r0, r7, #4
   1c818:	f00f fbc9 	bl	2bfae <memcmp>
   1c81c:	b1b0      	cbz	r0, 1c84c <bt_smp_sign_verify+0xf0>
		BT_ERR("Unable to verify signature for %s",
   1c81e:	4630      	mov	r0, r6
   1c820:	f7f8 ff82 	bl	15728 <bt_addr_le_str_real>
   1c824:	466c      	mov	r4, sp
   1c826:	b088      	sub	sp, #32
   1c828:	466a      	mov	r2, sp
   1c82a:	4b0e      	ldr	r3, [pc, #56]	; (1c864 <bt_smp_sign_verify+0x108>)
   1c82c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c830:	2302      	movs	r3, #2
   1c832:	7713      	strb	r3, [r2, #28]
   1c834:	4b08      	ldr	r3, [pc, #32]	; (1c858 <bt_smp_sign_verify+0xfc>)
   1c836:	4809      	ldr	r0, [pc, #36]	; (1c85c <bt_smp_sign_verify+0x100>)
   1c838:	f842 3f10 	str.w	r3, [r2, #16]!
   1c83c:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c840:	f00d fd77 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1c844:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1c848:	46a5      	mov	sp, r4
   1c84a:	e7b7      	b.n	1c7bc <bt_smp_sign_verify+0x60>
	keys->remote_csrk.cnt++;
   1c84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1c84e:	3301      	adds	r3, #1
   1c850:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1c852:	e7b3      	b.n	1c7bc <bt_smp_sign_verify+0x60>
   1c854:	0002f67b 	.word	0x0002f67b
   1c858:	01000003 	.word	0x01000003
   1c85c:	0002c7e4 	.word	0x0002c7e4
   1c860:	0002f69d 	.word	0x0002f69d
   1c864:	0002f6bf 	.word	0x0002f6bf

0001c868 <bt_smp_sign>:
{
   1c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c86a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1c86e:	af00      	add	r7, sp, #0
   1c870:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1c872:	4632      	mov	r2, r6
   1c874:	7a01      	ldrb	r1, [r0, #8]
   1c876:	2008      	movs	r0, #8
   1c878:	f000 fee0 	bl	1d63c <bt_keys_find>
	if (!keys) {
   1c87c:	4604      	mov	r4, r0
   1c87e:	b9b8      	cbnz	r0, 1c8b0 <bt_smp_sign+0x48>
		BT_ERR("Unable to find local CSRK for %s",
   1c880:	4630      	mov	r0, r6
   1c882:	f7f8 ff51 	bl	15728 <bt_addr_le_str_real>
   1c886:	466c      	mov	r4, sp
   1c888:	b088      	sub	sp, #32
   1c88a:	466a      	mov	r2, sp
   1c88c:	4b20      	ldr	r3, [pc, #128]	; (1c910 <bt_smp_sign+0xa8>)
   1c88e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c892:	2302      	movs	r3, #2
   1c894:	7713      	strb	r3, [r2, #28]
   1c896:	4b1f      	ldr	r3, [pc, #124]	; (1c914 <bt_smp_sign+0xac>)
   1c898:	481f      	ldr	r0, [pc, #124]	; (1c918 <bt_smp_sign+0xb0>)
   1c89a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c89e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c8a2:	f00d fd46 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1c8a6:	f06f 0001 	mvn.w	r0, #1
   1c8aa:	46a5      	mov	sp, r4
}
   1c8ac:	46bd      	mov	sp, r7
   1c8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1c8b0:	210c      	movs	r1, #12
   1c8b2:	f105 0008 	add.w	r0, r5, #8
   1c8b6:	f00e f915 	bl	2aae4 <net_buf_simple_add>
	return buf->data + buf->len;
   1c8ba:	89a9      	ldrh	r1, [r5, #12]
   1c8bc:	68ab      	ldr	r3, [r5, #8]
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1c8be:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1c8c0:	440b      	add	r3, r1
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1c8c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c8c6:	f843 2c0c 	str.w	r2, [r3, #-12]
   1c8ca:	89aa      	ldrh	r2, [r5, #12]
   1c8cc:	68a9      	ldr	r1, [r5, #8]
   1c8ce:	3a0c      	subs	r2, #12
   1c8d0:	b292      	uxth	r2, r2
   1c8d2:	f7fe fff3 	bl	1b8bc <smp_sign_buf>
	if (err) {
   1c8d6:	b1b0      	cbz	r0, 1c906 <bt_smp_sign+0x9e>
		BT_ERR("Unable to create signature for %s",
   1c8d8:	4630      	mov	r0, r6
   1c8da:	f7f8 ff25 	bl	15728 <bt_addr_le_str_real>
   1c8de:	466c      	mov	r4, sp
   1c8e0:	b088      	sub	sp, #32
   1c8e2:	466a      	mov	r2, sp
   1c8e4:	4b0d      	ldr	r3, [pc, #52]	; (1c91c <bt_smp_sign+0xb4>)
   1c8e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c8ea:	2302      	movs	r3, #2
   1c8ec:	7713      	strb	r3, [r2, #28]
   1c8ee:	4b09      	ldr	r3, [pc, #36]	; (1c914 <bt_smp_sign+0xac>)
   1c8f0:	4809      	ldr	r0, [pc, #36]	; (1c918 <bt_smp_sign+0xb0>)
   1c8f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8f6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c8fa:	f00d fd1a 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1c8fe:	f06f 0004 	mvn.w	r0, #4
   1c902:	46a5      	mov	sp, r4
   1c904:	e7d2      	b.n	1c8ac <bt_smp_sign+0x44>
	keys->local_csrk.cnt++;
   1c906:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c908:	3301      	adds	r3, #1
   1c90a:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1c90c:	e7ce      	b.n	1c8ac <bt_smp_sign+0x44>
   1c90e:	bf00      	nop
   1c910:	0002f6e1 	.word	0x0002f6e1
   1c914:	01000003 	.word	0x01000003
   1c918:	0002c7e4 	.word	0x0002c7e4
   1c91c:	0002f69d 	.word	0x0002f69d

0001c920 <bt_smp_start_security>:
{
   1c920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c924:	f890 8003 	ldrb.w	r8, [r0, #3]
   1c928:	f1b8 0f01 	cmp.w	r8, #1
{
   1c92c:	4605      	mov	r5, r0
	switch (conn->role) {
   1c92e:	d005      	beq.n	1c93c <bt_smp_start_security+0x1c>
		return -EINVAL;
   1c930:	f06f 0415 	mvn.w	r4, #21
}
   1c934:	4620      	mov	r0, r4
   1c936:	b003      	add	sp, #12
   1c938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1c93c:	f00d fcfc 	bl	2a338 <smp_chan_get>
	if (!smp) {
   1c940:	4606      	mov	r6, r0
   1c942:	2800      	cmp	r0, #0
   1c944:	f000 80b1 	beq.w	1caaa <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c948:	1d07      	adds	r7, r0, #4
   1c94a:	2104      	movs	r1, #4
   1c94c:	4638      	mov	r0, r7
   1c94e:	f00d fc00 	bl	2a152 <atomic_test_bit>
   1c952:	2800      	cmp	r0, #0
   1c954:	f040 80ac 	bne.w	1cab0 <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c958:	2103      	movs	r1, #3
   1c95a:	4638      	mov	r0, r7
   1c95c:	f00d fbf9 	bl	2a152 <atomic_test_bit>
   1c960:	b110      	cbz	r0, 1c968 <bt_smp_start_security+0x48>
		return -EBUSY;
   1c962:	f06f 040f 	mvn.w	r4, #15
   1c966:	e7e5      	b.n	1c934 <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c968:	4641      	mov	r1, r8
   1c96a:	4638      	mov	r0, r7
   1c96c:	f00d fbf1 	bl	2a152 <atomic_test_bit>
   1c970:	2800      	cmp	r0, #0
   1c972:	d1f6      	bne.n	1c962 <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c974:	4630      	mov	r0, r6
   1c976:	f7fe ff2f 	bl	1b7d8 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c97a:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1c97e:	7a9b      	ldrb	r3, [r3, #10]
   1c980:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c982:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1c984:	d042      	beq.n	1ca0c <bt_smp_start_security+0xec>
   1c986:	d832      	bhi.n	1c9ee <bt_smp_start_security+0xce>
   1c988:	3b01      	subs	r3, #1
   1c98a:	2b01      	cmp	r3, #1
   1c98c:	d94a      	bls.n	1ca24 <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1c98e:	210a      	movs	r1, #10
   1c990:	1d28      	adds	r0, r5, #4
   1c992:	f00d fbde 	bl	2a152 <atomic_test_bit>
   1c996:	2800      	cmp	r0, #0
   1c998:	d1ca      	bne.n	1c930 <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1c99a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c99e:	b983      	cbnz	r3, 1c9c2 <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1c9a0:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1c9a4:	7a29      	ldrb	r1, [r5, #8]
   1c9a6:	4622      	mov	r2, r4
   1c9a8:	2020      	movs	r0, #32
   1c9aa:	f000 fe47 	bl	1d63c <bt_keys_find>
   1c9ae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1c9b2:	b930      	cbnz	r0, 1c9c2 <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1c9b4:	7a29      	ldrb	r1, [r5, #8]
   1c9b6:	4622      	mov	r2, r4
   1c9b8:	2004      	movs	r0, #4
   1c9ba:	f000 fe3f 	bl	1d63c <bt_keys_find>
   1c9be:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1c9c2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1c9c6:	2b00      	cmp	r3, #0
   1c9c8:	d0b2      	beq.n	1c930 <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1c9ca:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1c9cc:	f012 0f24 	tst.w	r2, #36	; 0x24
   1c9d0:	d0ae      	beq.n	1c930 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1c9d2:	7aa9      	ldrb	r1, [r5, #10]
   1c9d4:	2902      	cmp	r1, #2
   1c9d6:	d925      	bls.n	1ca24 <bt_smp_start_security+0x104>
   1c9d8:	7b58      	ldrb	r0, [r3, #13]
   1c9da:	07c0      	lsls	r0, r0, #31
   1c9dc:	d5a8      	bpl.n	1c930 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1c9de:	2903      	cmp	r1, #3
   1c9e0:	d020      	beq.n	1ca24 <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1c9e2:	0692      	lsls	r2, r2, #26
   1c9e4:	d5a4      	bpl.n	1c930 <bt_smp_start_security+0x10>
   1c9e6:	7b1b      	ldrb	r3, [r3, #12]
   1c9e8:	2b10      	cmp	r3, #16
   1c9ea:	d1a1      	bne.n	1c930 <bt_smp_start_security+0x10>
   1c9ec:	e01a      	b.n	1ca24 <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c9ee:	2b04      	cmp	r3, #4
   1c9f0:	d1cd      	bne.n	1c98e <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c9f2:	4630      	mov	r0, r6
   1c9f4:	f7fe ff0e 	bl	1b814 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c9f8:	2803      	cmp	r0, #3
   1c9fa:	d102      	bne.n	1ca02 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c9fc:	b1fc      	cbz	r4, 1ca3e <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c9fe:	68e4      	ldr	r4, [r4, #12]
   1ca00:	b10c      	cbz	r4, 1ca06 <bt_smp_start_security+0xe6>
   1ca02:	4b2d      	ldr	r3, [pc, #180]	; (1cab8 <bt_smp_start_security+0x198>)
   1ca04:	781c      	ldrb	r4, [r3, #0]
   1ca06:	f004 0401 	and.w	r4, r4, #1
   1ca0a:	e009      	b.n	1ca20 <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ca0c:	4630      	mov	r0, r6
   1ca0e:	f7fe ff01 	bl	1b814 <get_io_capa>
   1ca12:	2803      	cmp	r0, #3
   1ca14:	d111      	bne.n	1ca3a <bt_smp_start_security+0x11a>
   1ca16:	b11c      	cbz	r4, 1ca20 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1ca18:	68e4      	ldr	r4, [r4, #12]
   1ca1a:	3c00      	subs	r4, #0
   1ca1c:	bf18      	it	ne
   1ca1e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1ca20:	2c00      	cmp	r4, #0
   1ca22:	d0b4      	beq.n	1c98e <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1ca24:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1ca28:	b15b      	cbz	r3, 1ca42 <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1ca2a:	4630      	mov	r0, r6
   1ca2c:	f7fe ffc6 	bl	1b9bc <smp_init>
   1ca30:	4604      	mov	r4, r0
   1ca32:	b190      	cbz	r0, 1ca5a <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1ca34:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ca38:	e77c      	b.n	1c934 <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ca3a:	4644      	mov	r4, r8
   1ca3c:	e7f0      	b.n	1ca20 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1ca3e:	2400      	movs	r4, #0
   1ca40:	e7e1      	b.n	1ca06 <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ca42:	7a28      	ldrb	r0, [r5, #8]
   1ca44:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ca48:	f000 fd88 	bl	1d55c <bt_keys_get_addr>
   1ca4c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1ca50:	2800      	cmp	r0, #0
   1ca52:	d1ea      	bne.n	1ca2a <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1ca54:	f06f 040b 	mvn.w	r4, #11
   1ca58:	e76c      	b.n	1c934 <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1ca5a:	210b      	movs	r1, #11
   1ca5c:	4630      	mov	r0, r6
   1ca5e:	f00d fc8a 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ca62:	4680      	mov	r8, r0
   1ca64:	2800      	cmp	r0, #0
   1ca66:	d0e5      	beq.n	1ca34 <bt_smp_start_security+0x114>
	return net_buf_simple_add(&buf->b, len);
   1ca68:	2101      	movs	r1, #1
   1ca6a:	3008      	adds	r0, #8
   1ca6c:	f00e f83a 	bl	2aae4 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1ca70:	2109      	movs	r1, #9
   1ca72:	4681      	mov	r9, r0
   1ca74:	4630      	mov	r0, r6
   1ca76:	f7fe fef1 	bl	1b85c <get_auth>
   1ca7a:	4623      	mov	r3, r4
   1ca7c:	f889 0000 	strb.w	r0, [r9]
   1ca80:	4642      	mov	r2, r8
   1ca82:	9400      	str	r4, [sp, #0]
   1ca84:	2106      	movs	r1, #6
   1ca86:	4628      	mov	r0, r5
   1ca88:	f00c fab8 	bl	28ffc <bt_l2cap_send_cb>
	if (err) {
   1ca8c:	4604      	mov	r4, r0
   1ca8e:	b118      	cbz	r0, 1ca98 <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1ca90:	4640      	mov	r0, r8
   1ca92:	f001 f869 	bl	1db68 <net_buf_unref>
		return err;
   1ca96:	e74d      	b.n	1c934 <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1ca98:	4638      	mov	r0, r7
   1ca9a:	210f      	movs	r1, #15
   1ca9c:	f00d fc57 	bl	2a34e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1caa0:	2101      	movs	r1, #1
   1caa2:	4630      	mov	r0, r6
   1caa4:	f00d fc53 	bl	2a34e <atomic_set_bit>
	return 0;
   1caa8:	e744      	b.n	1c934 <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1caaa:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1caae:	e741      	b.n	1c934 <bt_smp_start_security+0x14>
		return -EIO;
   1cab0:	f06f 0404 	mvn.w	r4, #4
   1cab4:	e73e      	b.n	1c934 <bt_smp_start_security+0x14>
   1cab6:	bf00      	nop
   1cab8:	20003eac 	.word	0x20003eac

0001cabc <smp_pairing_complete>:
{
   1cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1cabe:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1cac2:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1cac4:	1d05      	adds	r5, r0, #4
	if (!status) {
   1cac6:	b9f1      	cbnz	r1, 1cb06 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1cac8:	210d      	movs	r1, #13
   1caca:	4628      	mov	r0, r5
   1cacc:	f00d fb41 	bl	2a152 <atomic_test_bit>
		if (bond_flag) {
   1cad0:	4607      	mov	r7, r0
   1cad2:	b118      	cbz	r0, 1cadc <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1cad4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cad8:	f000 ff36 	bl	1d948 <bt_keys_store>
	return list->head;
   1cadc:	4b31      	ldr	r3, [pc, #196]	; (1cba4 <smp_pairing_complete+0xe8>)
   1cade:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1cae0:	2b00      	cmp	r3, #0
   1cae2:	d051      	beq.n	1cb88 <smp_pairing_complete+0xcc>
	return node->next;
   1cae4:	f853 590c 	ldr.w	r5, [r3], #-12
   1cae8:	b105      	cbz	r5, 1caec <smp_pairing_complete+0x30>
   1caea:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1caec:	681b      	ldr	r3, [r3, #0]
   1caee:	b113      	cbz	r3, 1caf6 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1caf0:	4639      	mov	r1, r7
   1caf2:	4620      	mov	r0, r4
   1caf4:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1caf6:	2d00      	cmp	r5, #0
   1caf8:	d046      	beq.n	1cb88 <smp_pairing_complete+0xcc>
   1cafa:	68ea      	ldr	r2, [r5, #12]
   1cafc:	b102      	cbz	r2, 1cb00 <smp_pairing_complete+0x44>
   1cafe:	3a0c      	subs	r2, #12
{
   1cb00:	462b      	mov	r3, r5
   1cb02:	4615      	mov	r5, r2
   1cb04:	e7f2      	b.n	1caec <smp_pairing_complete+0x30>
	switch (smp_err) {
   1cb06:	3901      	subs	r1, #1
   1cb08:	b2c9      	uxtb	r1, r1
   1cb0a:	290e      	cmp	r1, #14
   1cb0c:	bf9c      	itt	ls
   1cb0e:	4b26      	ldrls	r3, [pc, #152]	; (1cba8 <smp_pairing_complete+0xec>)
   1cb10:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1cb12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1cb16:	bf88      	it	hi
   1cb18:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1cb1a:	b143      	cbz	r3, 1cb2e <smp_pairing_complete+0x72>
   1cb1c:	7b1b      	ldrb	r3, [r3, #12]
   1cb1e:	bb63      	cbnz	r3, 1cb7a <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1cb20:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1cb24:	f000 fdea 	bl	1d6fc <bt_keys_clear>
			conn->le.keys = NULL;
   1cb28:	2300      	movs	r3, #0
   1cb2a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1cb2e:	2102      	movs	r1, #2
   1cb30:	4628      	mov	r0, r5
   1cb32:	f00d fb0e 	bl	2a152 <atomic_test_bit>
   1cb36:	b940      	cbnz	r0, 1cb4a <smp_pairing_complete+0x8e>
	switch (err) {
   1cb38:	2f07      	cmp	r7, #7
   1cb3a:	bf96      	itet	ls
   1cb3c:	4b1b      	ldrls	r3, [pc, #108]	; (1cbac <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1cb3e:	211f      	movhi	r1, #31
   1cb40:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1cb42:	463a      	mov	r2, r7
   1cb44:	4620      	mov	r0, r4
   1cb46:	f7fb fddf 	bl	18708 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cb4a:	2103      	movs	r1, #3
   1cb4c:	4628      	mov	r0, r5
   1cb4e:	f00d fb00 	bl	2a152 <atomic_test_bit>
   1cb52:	b1c8      	cbz	r0, 1cb88 <smp_pairing_complete+0xcc>
	return list->head;
   1cb54:	4b13      	ldr	r3, [pc, #76]	; (1cba4 <smp_pairing_complete+0xe8>)
   1cb56:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1cb58:	b1b3      	cbz	r3, 1cb88 <smp_pairing_complete+0xcc>
	return node->next;
   1cb5a:	f853 590c 	ldr.w	r5, [r3], #-12
   1cb5e:	b105      	cbz	r5, 1cb62 <smp_pairing_complete+0xa6>
   1cb60:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1cb62:	685b      	ldr	r3, [r3, #4]
   1cb64:	b113      	cbz	r3, 1cb6c <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1cb66:	4639      	mov	r1, r7
   1cb68:	4620      	mov	r0, r4
   1cb6a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1cb6c:	b165      	cbz	r5, 1cb88 <smp_pairing_complete+0xcc>
   1cb6e:	68ea      	ldr	r2, [r5, #12]
   1cb70:	b102      	cbz	r2, 1cb74 <smp_pairing_complete+0xb8>
   1cb72:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1cb74:	462b      	mov	r3, r5
   1cb76:	4615      	mov	r5, r2
   1cb78:	e7f3      	b.n	1cb62 <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1cb7a:	2102      	movs	r1, #2
   1cb7c:	4628      	mov	r0, r5
   1cb7e:	f00d fae8 	bl	2a152 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1cb82:	2800      	cmp	r0, #0
   1cb84:	d1cc      	bne.n	1cb20 <smp_pairing_complete+0x64>
   1cb86:	e7d2      	b.n	1cb2e <smp_pairing_complete+0x72>
	smp_reset(smp);
   1cb88:	4630      	mov	r0, r6
   1cb8a:	f00d fc93 	bl	2a4b4 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1cb8e:	7a62      	ldrb	r2, [r4, #9]
   1cb90:	7aa3      	ldrb	r3, [r4, #10]
   1cb92:	429a      	cmp	r2, r3
   1cb94:	d004      	beq.n	1cba0 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1cb96:	4620      	mov	r0, r4
}
   1cb98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1cb9c:	f7ff bec0 	b.w	1c920 <bt_smp_start_security>
}
   1cba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cba2:	bf00      	nop
   1cba4:	20002de8 	.word	0x20002de8
   1cba8:	0002f8cd 	.word	0x0002f8cd
   1cbac:	0002f8e5 	.word	0x0002f8e5

0001cbb0 <bt_smp_recv>:
{
   1cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbb4:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1cbb6:	898b      	ldrh	r3, [r1, #12]
{
   1cbb8:	af00      	add	r7, sp, #0
   1cbba:	4680      	mov	r8, r0
   1cbbc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1cbbe:	b97b      	cbnz	r3, 1cbe0 <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
   1cbc0:	4b44      	ldr	r3, [pc, #272]	; (1ccd4 <bt_smp_recv+0x124>)
   1cbc2:	617b      	str	r3, [r7, #20]
   1cbc4:	4844      	ldr	r0, [pc, #272]	; (1ccd8 <bt_smp_recv+0x128>)
   1cbc6:	2302      	movs	r3, #2
   1cbc8:	f107 0210 	add.w	r2, r7, #16
   1cbcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cbd0:	613b      	str	r3, [r7, #16]
   1cbd2:	f00d fbae 	bl	2a332 <z_log_msg_static_create.constprop.0>
}
   1cbd6:	2000      	movs	r0, #0
   1cbd8:	3718      	adds	r7, #24
   1cbda:	46bd      	mov	sp, r7
   1cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1cbe0:	2101      	movs	r1, #1
   1cbe2:	f105 0008 	add.w	r0, r5, #8
   1cbe6:	f00d ffa4 	bl	2ab32 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1cbea:	2104      	movs	r1, #4
   1cbec:	4606      	mov	r6, r0
   1cbee:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   1cbf2:	f00d faae 	bl	2a152 <atomic_test_bit>
   1cbf6:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   1cbfa:	7831      	ldrb	r1, [r6, #0]
   1cbfc:	b178      	cbz	r0, 1cc1e <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1cbfe:	466c      	mov	r4, sp
   1cc00:	b088      	sub	sp, #32
   1cc02:	466a      	mov	r2, sp
   1cc04:	4b35      	ldr	r3, [pc, #212]	; (1ccdc <bt_smp_recv+0x12c>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1cc06:	4834      	ldr	r0, [pc, #208]	; (1ccd8 <bt_smp_recv+0x128>)
   1cc08:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1cc0c:	2303      	movs	r3, #3
   1cc0e:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc12:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cc16:	f00d fb8c 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1cc1a:	46a5      	mov	sp, r4
		return 0;
   1cc1c:	e7db      	b.n	1cbd6 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1cc1e:	290e      	cmp	r1, #14
   1cc20:	d904      	bls.n	1cc2c <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1cc22:	466c      	mov	r4, sp
   1cc24:	b088      	sub	sp, #32
   1cc26:	466a      	mov	r2, sp
   1cc28:	4b2d      	ldr	r3, [pc, #180]	; (1cce0 <bt_smp_recv+0x130>)
   1cc2a:	e7ec      	b.n	1cc06 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   1cc2c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1cce4 <bt_smp_recv+0x134>
   1cc30:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1cc34:	b99b      	cbnz	r3, 1cc5e <bt_smp_recv+0xae>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1cc36:	466d      	mov	r5, sp
   1cc38:	b088      	sub	sp, #32
   1cc3a:	466a      	mov	r2, sp
   1cc3c:	4b2a      	ldr	r3, [pc, #168]	; (1cce8 <bt_smp_recv+0x138>)
   1cc3e:	4826      	ldr	r0, [pc, #152]	; (1ccd8 <bt_smp_recv+0x128>)
   1cc40:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1cc44:	2303      	movs	r3, #3
   1cc46:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cc4a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc4e:	f00d fb70 	bl	2a332 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1cc52:	2107      	movs	r1, #7
   1cc54:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1cc56:	4620      	mov	r0, r4
   1cc58:	f00d fda9 	bl	2a7ae <smp_error>
   1cc5c:	e7bb      	b.n	1cbd6 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1cc5e:	4620      	mov	r0, r4
   1cc60:	f00d fc10 	bl	2a484 <atomic_test_and_clear_bit>
   1cc64:	7833      	ldrb	r3, [r6, #0]
   1cc66:	b998      	cbnz	r0, 1cc90 <bt_smp_recv+0xe0>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1cc68:	466d      	mov	r5, sp
   1cc6a:	b088      	sub	sp, #32
   1cc6c:	466a      	mov	r2, sp
   1cc6e:	491f      	ldr	r1, [pc, #124]	; (1ccec <bt_smp_recv+0x13c>)
   1cc70:	4819      	ldr	r0, [pc, #100]	; (1ccd8 <bt_smp_recv+0x128>)
   1cc72:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cc76:	2303      	movs	r3, #3
   1cc78:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc7c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cc80:	f00d fb57 	bl	2a332 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1cc84:	7833      	ldrb	r3, [r6, #0]
   1cc86:	2b05      	cmp	r3, #5
   1cc88:	46ad      	mov	sp, r5
   1cc8a:	d0a4      	beq.n	1cbd6 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cc8c:	2108      	movs	r1, #8
   1cc8e:	e7e2      	b.n	1cc56 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   1cc90:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1cc94:	89a9      	ldrh	r1, [r5, #12]
   1cc96:	7912      	ldrb	r2, [r2, #4]
   1cc98:	428a      	cmp	r2, r1
   1cc9a:	d011      	beq.n	1ccc0 <bt_smp_recv+0x110>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1cc9c:	466d      	mov	r5, sp
   1cc9e:	b088      	sub	sp, #32
   1cca0:	466a      	mov	r2, sp
   1cca2:	4813      	ldr	r0, [pc, #76]	; (1ccf0 <bt_smp_recv+0x140>)
   1cca4:	61d3      	str	r3, [r2, #28]
   1cca6:	2304      	movs	r3, #4
   1cca8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ccac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ccb0:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccb4:	4808      	ldr	r0, [pc, #32]	; (1ccd8 <bt_smp_recv+0x128>)
   1ccb6:	f00d fb3c 	bl	2a332 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1ccba:	210a      	movs	r1, #10
   1ccbc:	46ad      	mov	sp, r5
   1ccbe:	e7ca      	b.n	1cc56 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   1ccc0:	4629      	mov	r1, r5
   1ccc2:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   1ccc6:	4620      	mov	r0, r4
   1ccc8:	4798      	blx	r3
	if (err) {
   1ccca:	4601      	mov	r1, r0
   1cccc:	2800      	cmp	r0, #0
   1ccce:	d082      	beq.n	1cbd6 <bt_smp_recv+0x26>
   1ccd0:	e7c1      	b.n	1cc56 <bt_smp_recv+0xa6>
   1ccd2:	bf00      	nop
   1ccd4:	0002f702 	.word	0x0002f702
   1ccd8:	0002c7e4 	.word	0x0002c7e4
   1ccdc:	0002f71d 	.word	0x0002f71d
   1cce0:	0002f74e 	.word	0x0002f74e
   1cce4:	0002d230 	.word	0x0002d230
   1cce8:	0002f770 	.word	0x0002f770
   1ccec:	0002f78a 	.word	0x0002f78a
   1ccf0:	0002f0f9 	.word	0x0002f0f9

0001ccf4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1ccf4:	4b0e      	ldr	r3, [pc, #56]	; (1cd30 <bt_smp_pkey_ready+0x3c>)
{
   1ccf6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1ccf8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1ccfa:	b918      	cbnz	r0, 1cd04 <bt_smp_pkey_ready+0x10>
}
   1ccfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd00:	f7fe bdca 	b.w	1b898 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cd04:	4c0b      	ldr	r4, [pc, #44]	; (1cd34 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1cd06:	480c      	ldr	r0, [pc, #48]	; (1cd38 <bt_smp_pkey_ready+0x44>)
   1cd08:	f004 fee8 	bl	21adc <z_impl_k_sem_give>
   1cd0c:	f3bf 8f5b 	dmb	ish
   1cd10:	6863      	ldr	r3, [r4, #4]
   1cd12:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1cd16:	065b      	lsls	r3, r3, #25
   1cd18:	d509      	bpl.n	1cd2e <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   1cd1a:	4620      	mov	r0, r4
   1cd1c:	f7ff fa54 	bl	1c1c8 <smp_public_key_periph>
		if (err) {
   1cd20:	4601      	mov	r1, r0
   1cd22:	b120      	cbz	r0, 1cd2e <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1cd24:	4620      	mov	r0, r4
}
   1cd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1cd2a:	f00d bd40 	b.w	2a7ae <smp_error>
}
   1cd2e:	bd10      	pop	{r4, pc}
   1cd30:	20002f54 	.word	0x20002f54
   1cd34:	20002188 	.word	0x20002188
   1cd38:	20000b8c 	.word	0x20000b8c

0001cd3c <smp_signing_info>:
{
   1cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd40:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1cd42:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1cd46:	af00      	add	r7, sp, #0
   1cd48:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cd4a:	210d      	movs	r1, #13
   1cd4c:	3004      	adds	r0, #4
   1cd4e:	f00d fa00 	bl	2a152 <atomic_test_bit>
   1cd52:	b358      	cbz	r0, 1cdac <smp_signing_info+0x70>
					&conn->le.dst);
   1cd54:	f108 0688 	add.w	r6, r8, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1cd58:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1cd5c:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1cd5e:	4632      	mov	r2, r6
   1cd60:	2010      	movs	r0, #16
   1cd62:	f00d fe05 	bl	2a970 <bt_keys_get_type>
		if (!keys) {
   1cd66:	b9b8      	cbnz	r0, 1cd98 <smp_signing_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   1cd68:	4630      	mov	r0, r6
   1cd6a:	f7f8 fcdd 	bl	15728 <bt_addr_le_str_real>
   1cd6e:	466c      	mov	r4, sp
   1cd70:	b088      	sub	sp, #32
   1cd72:	466a      	mov	r2, sp
   1cd74:	4b15      	ldr	r3, [pc, #84]	; (1cdcc <smp_signing_info+0x90>)
   1cd76:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd7a:	2302      	movs	r3, #2
   1cd7c:	7713      	strb	r3, [r2, #28]
   1cd7e:	4b14      	ldr	r3, [pc, #80]	; (1cdd0 <smp_signing_info+0x94>)
   1cd80:	4814      	ldr	r0, [pc, #80]	; (1cdd4 <smp_signing_info+0x98>)
   1cd82:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd86:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cd8a:	f00d fad2 	bl	2a332 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cd8e:	2008      	movs	r0, #8
   1cd90:	46a5      	mov	sp, r4
}
   1cd92:	46bd      	mov	sp, r7
   1cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd98:	462b      	mov	r3, r5
   1cd9a:	3054      	adds	r0, #84	; 0x54
   1cd9c:	f105 0210 	add.w	r2, r5, #16
   1cda0:	f853 1b04 	ldr.w	r1, [r3], #4
   1cda4:	f840 1b04 	str.w	r1, [r0], #4
   1cda8:	4293      	cmp	r3, r2
   1cdaa:	d1f9      	bne.n	1cda0 <smp_signing_info+0x64>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1cdac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cdb0:	f023 0304 	bic.w	r3, r3, #4
   1cdb4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1cdb8:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cdbc:	b91d      	cbnz	r5, 1cdc6 <smp_signing_info+0x8a>
		smp_pairing_complete(smp, 0);
   1cdbe:	4629      	mov	r1, r5
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	f7ff fe7b 	bl	1cabc <smp_pairing_complete>
	return 0;
   1cdc6:	2000      	movs	r0, #0
   1cdc8:	e7e3      	b.n	1cd92 <smp_signing_info+0x56>
   1cdca:	bf00      	nop
   1cdcc:	0002f552 	.word	0x0002f552
   1cdd0:	01000003 	.word	0x01000003
   1cdd4:	0002c7e4 	.word	0x0002c7e4

0001cdd8 <smp_ident_addr_info>:
{
   1cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1cddc:	f8d1 8008 	ldr.w	r8, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1cde0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1cde4:	f898 3000 	ldrb.w	r3, [r8]
{
   1cde8:	af00      	add	r7, sp, #0
   1cdea:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1cdec:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1cdf0:	b3a3      	cbz	r3, 1ce5c <smp_ident_addr_info+0x84>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1cdf2:	f898 3006 	ldrb.w	r3, [r8, #6]
   1cdf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cdfa:	2bc0      	cmp	r3, #192	; 0xc0
   1cdfc:	d02e      	beq.n	1ce5c <smp_ident_addr_info+0x84>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1cdfe:	4640      	mov	r0, r8
   1ce00:	f7f8 fc92 	bl	15728 <bt_addr_le_str_real>
   1ce04:	466e      	mov	r6, sp
   1ce06:	b088      	sub	sp, #32
   1ce08:	466c      	mov	r4, sp
   1ce0a:	4b50      	ldr	r3, [pc, #320]	; (1cf4c <smp_ident_addr_info+0x174>)
   1ce0c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1cf50 <smp_ident_addr_info+0x178>
   1ce10:	4625      	mov	r5, r4
   1ce12:	f04f 0a02 	mov.w	sl, #2
   1ce16:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1ce1a:	f884 a01c 	strb.w	sl, [r4, #28]
   1ce1e:	f845 8f10 	str.w	r8, [r5, #16]!
   1ce22:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ce26:	462a      	mov	r2, r5
   1ce28:	484a      	ldr	r0, [pc, #296]	; (1cf54 <smp_ident_addr_info+0x17c>)
   1ce2a:	f00d fa82 	bl	2a332 <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ce2e:	4648      	mov	r0, r9
   1ce30:	46b5      	mov	sp, r6
   1ce32:	f7f8 fc79 	bl	15728 <bt_addr_le_str_real>
   1ce36:	46a5      	mov	sp, r4
   1ce38:	4b47      	ldr	r3, [pc, #284]	; (1cf58 <smp_ident_addr_info+0x180>)
   1ce3a:	f884 a01c 	strb.w	sl, [r4, #28]
   1ce3e:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1ce42:	f8c4 8010 	str.w	r8, [r4, #16]
   1ce46:	4843      	ldr	r0, [pc, #268]	; (1cf54 <smp_ident_addr_info+0x17c>)
   1ce48:	462a      	mov	r2, r5
   1ce4a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ce4e:	f00d fa70 	bl	2a332 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1ce52:	200a      	movs	r0, #10
   1ce54:	46b5      	mov	sp, r6
}
   1ce56:	46bd      	mov	sp, r7
   1ce58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1ce5c:	2207      	movs	r2, #7
   1ce5e:	4641      	mov	r1, r8
   1ce60:	4648      	mov	r0, r9
   1ce62:	f00f f8a4 	bl	2bfae <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1ce66:	b168      	cbz	r0, 1ce84 <smp_ident_addr_info+0xac>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1ce68:	7a28      	ldrb	r0, [r5, #8]
   1ce6a:	4641      	mov	r1, r8
   1ce6c:	f000 fc36 	bl	1d6dc <bt_keys_find_addr>
		if (keys) {
   1ce70:	4606      	mov	r6, r0
   1ce72:	b138      	cbz	r0, 1ce84 <smp_ident_addr_info+0xac>
			if (!update_keys_check(smp, keys)) {
   1ce74:	4601      	mov	r1, r0
   1ce76:	4620      	mov	r0, r4
   1ce78:	f00d f974 	bl	2a164 <update_keys_check>
   1ce7c:	b318      	cbz	r0, 1cec6 <smp_ident_addr_info+0xee>
			bt_keys_clear(keys);
   1ce7e:	4630      	mov	r0, r6
   1ce80:	f000 fc3c 	bl	1d6fc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ce84:	210d      	movs	r1, #13
   1ce86:	1d20      	adds	r0, r4, #4
   1ce88:	f00d f963 	bl	2a152 <atomic_test_bit>
   1ce8c:	2800      	cmp	r0, #0
   1ce8e:	d045      	beq.n	1cf1c <smp_ident_addr_info+0x144>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ce90:	7a29      	ldrb	r1, [r5, #8]
   1ce92:	464a      	mov	r2, r9
   1ce94:	2002      	movs	r0, #2
   1ce96:	f00d fd6b 	bl	2a970 <bt_keys_get_type>
		if (!keys) {
   1ce9a:	4606      	mov	r6, r0
   1ce9c:	b9a8      	cbnz	r0, 1ceca <smp_ident_addr_info+0xf2>
			BT_ERR("Unable to get keys for %s",
   1ce9e:	4648      	mov	r0, r9
   1cea0:	f7f8 fc42 	bl	15728 <bt_addr_le_str_real>
   1cea4:	466c      	mov	r4, sp
   1cea6:	b088      	sub	sp, #32
   1cea8:	466a      	mov	r2, sp
   1ceaa:	4b2c      	ldr	r3, [pc, #176]	; (1cf5c <smp_ident_addr_info+0x184>)
   1ceac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ceb0:	2302      	movs	r3, #2
   1ceb2:	7713      	strb	r3, [r2, #28]
   1ceb4:	4b26      	ldr	r3, [pc, #152]	; (1cf50 <smp_ident_addr_info+0x178>)
   1ceb6:	f842 3f10 	str.w	r3, [r2, #16]!
   1ceba:	4826      	ldr	r0, [pc, #152]	; (1cf54 <smp_ident_addr_info+0x17c>)
   1cebc:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cec0:	f00d fa37 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1cec4:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1cec6:	2008      	movs	r0, #8
   1cec8:	e7c5      	b.n	1ce56 <smp_ident_addr_info+0x7e>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ceca:	78eb      	ldrb	r3, [r5, #3]
   1cecc:	bbdb      	cbnz	r3, 1cf46 <smp_ident_addr_info+0x16e>
			dst = &conn->le.resp_addr;
   1cece:	f105 0396 	add.w	r3, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1ced2:	781a      	ldrb	r2, [r3, #0]
   1ced4:	2a01      	cmp	r2, #1
   1ced6:	d11e      	bne.n	1cf16 <smp_ident_addr_info+0x13e>
		if (bt_addr_le_is_rpa(dst)) {
   1ced8:	799a      	ldrb	r2, [r3, #6]
   1ceda:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1cede:	2a40      	cmp	r2, #64	; 0x40
   1cee0:	d119      	bne.n	1cf16 <smp_ident_addr_info+0x13e>
   1cee2:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1cee6:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   1ceea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1ceee:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1cef0:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1cef4:	b17b      	cbz	r3, 1cf16 <smp_ident_addr_info+0x13e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1cef6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1cefa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cefe:	2bc0      	cmp	r3, #192	; 0xc0
   1cf00:	d009      	beq.n	1cf16 <smp_ident_addr_info+0x13e>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1cf02:	4641      	mov	r1, r8
   1cf04:	1c70      	adds	r0, r6, #1
   1cf06:	f00d f99f 	bl	2a248 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1cf0a:	4648      	mov	r0, r9
   1cf0c:	f00d f99c 	bl	2a248 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1cf10:	4628      	mov	r0, r5
   1cf12:	f7fb fbcb 	bl	186ac <bt_conn_identity_resolved>
		bt_id_add(keys);
   1cf16:	4630      	mov	r0, r6
   1cf18:	f7fa fcae 	bl	17878 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1cf1c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cf20:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cf24:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1cf26:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cf2a:	d503      	bpl.n	1cf34 <smp_ident_addr_info+0x15c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cf2c:	210a      	movs	r1, #10
   1cf2e:	4620      	mov	r0, r4
   1cf30:	f00d fa0d 	bl	2a34e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1cf34:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cf38:	b91d      	cbnz	r5, 1cf42 <smp_ident_addr_info+0x16a>
		smp_pairing_complete(smp, 0);
   1cf3a:	4629      	mov	r1, r5
   1cf3c:	4620      	mov	r0, r4
   1cf3e:	f7ff fdbd 	bl	1cabc <smp_pairing_complete>
	return 0;
   1cf42:	2000      	movs	r0, #0
   1cf44:	e787      	b.n	1ce56 <smp_ident_addr_info+0x7e>
			dst = &conn->le.init_addr;
   1cf46:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   1cf4a:	e7c2      	b.n	1ced2 <smp_ident_addr_info+0xfa>
   1cf4c:	0002f7a5 	.word	0x0002f7a5
   1cf50:	01000003 	.word	0x01000003
   1cf54:	0002c7e4 	.word	0x0002c7e4
   1cf58:	0002f695 	.word	0x0002f695
   1cf5c:	0002f552 	.word	0x0002f552

0001cf60 <smp_central_ident>:
{
   1cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf64:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1cf66:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1cf6a:	af00      	add	r7, sp, #0
   1cf6c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf6e:	210d      	movs	r1, #13
   1cf70:	3004      	adds	r0, #4
   1cf72:	f00d f8ee 	bl	2a152 <atomic_test_bit>
   1cf76:	b350      	cbz	r0, 1cfce <smp_central_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cf78:	f108 0688 	add.w	r6, r8, #136	; 0x88
   1cf7c:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1cf80:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cf82:	4632      	mov	r2, r6
   1cf84:	2004      	movs	r0, #4
   1cf86:	f00d fcf3 	bl	2a970 <bt_keys_get_type>
		if (!keys) {
   1cf8a:	b9b8      	cbnz	r0, 1cfbc <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
   1cf8c:	4630      	mov	r0, r6
   1cf8e:	f7f8 fbcb 	bl	15728 <bt_addr_le_str_real>
   1cf92:	466c      	mov	r4, sp
   1cf94:	b088      	sub	sp, #32
   1cf96:	466a      	mov	r2, sp
   1cf98:	4b19      	ldr	r3, [pc, #100]	; (1d000 <smp_central_ident+0xa0>)
   1cf9a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cf9e:	2302      	movs	r3, #2
   1cfa0:	7713      	strb	r3, [r2, #28]
   1cfa2:	4b18      	ldr	r3, [pc, #96]	; (1d004 <smp_central_ident+0xa4>)
   1cfa4:	4818      	ldr	r0, [pc, #96]	; (1d008 <smp_central_ident+0xa8>)
   1cfa6:	f842 3f10 	str.w	r3, [r2, #16]!
   1cfaa:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cfae:	f00d f9c0 	bl	2a332 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cfb2:	2008      	movs	r0, #8
   1cfb4:	46a5      	mov	sp, r4
}
   1cfb6:	46bd      	mov	sp, r7
   1cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfbc:	462a      	mov	r2, r5
   1cfbe:	f832 3b02 	ldrh.w	r3, [r2], #2
   1cfc2:	8303      	strh	r3, [r0, #24]
   1cfc4:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1cfc8:	6103      	str	r3, [r0, #16]
   1cfca:	6853      	ldr	r3, [r2, #4]
   1cfcc:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1cfce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cfd2:	f023 0201 	bic.w	r2, r3, #1
   1cfd6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1cfda:	079a      	lsls	r2, r3, #30
   1cfdc:	d50c      	bpl.n	1cff8 <smp_central_ident+0x98>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1cfde:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cfe0:	4620      	mov	r0, r4
   1cfe2:	f00d f9b4 	bl	2a34e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1cfe6:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cfea:	b91d      	cbnz	r5, 1cff4 <smp_central_ident+0x94>
		smp_pairing_complete(smp, 0);
   1cfec:	4629      	mov	r1, r5
   1cfee:	4620      	mov	r0, r4
   1cff0:	f7ff fd64 	bl	1cabc <smp_pairing_complete>
	return 0;
   1cff4:	2000      	movs	r0, #0
   1cff6:	e7de      	b.n	1cfb6 <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cff8:	075b      	lsls	r3, r3, #29
   1cffa:	d5f4      	bpl.n	1cfe6 <smp_central_ident+0x86>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cffc:	210a      	movs	r1, #10
   1cffe:	e7ef      	b.n	1cfe0 <smp_central_ident+0x80>
   1d000:	0002f552 	.word	0x0002f552
   1d004:	01000003 	.word	0x01000003
   1d008:	0002c7e4 	.word	0x0002c7e4

0001d00c <smp_pairing_failed>:
{
   1d00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d010:	460e      	mov	r6, r1
   1d012:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d014:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1d018:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d01a:	f7fe fbdd 	bl	1b7d8 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1d01e:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1d020:	46e9      	mov	r9, sp
   1d022:	b088      	sub	sp, #32
   1d024:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d026:	4605      	mov	r5, r0
	BT_ERR("reason 0x%x", req->reason);
   1d028:	466a      	mov	r2, sp
   1d02a:	4914      	ldr	r1, [pc, #80]	; (1d07c <smp_pairing_failed+0x70>)
   1d02c:	4814      	ldr	r0, [pc, #80]	; (1d080 <smp_pairing_failed+0x74>)
   1d02e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d032:	2303      	movs	r3, #3
   1d034:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d038:	f842 3f10 	str.w	r3, [r2, #16]!
   1d03c:	f00d f979 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1d040:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d042:	f104 0904 	add.w	r9, r4, #4
   1d046:	210a      	movs	r1, #10
   1d048:	4648      	mov	r0, r9
   1d04a:	f00d fa1b 	bl	2a484 <atomic_test_and_clear_bit>
   1d04e:	b140      	cbz	r0, 1d062 <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d050:	b975      	cbnz	r5, 1d070 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1d052:	4620      	mov	r0, r4
   1d054:	7831      	ldrb	r1, [r6, #0]
   1d056:	f7ff fd31 	bl	1cabc <smp_pairing_complete>
}
   1d05a:	2000      	movs	r0, #0
   1d05c:	46bd      	mov	sp, r7
   1d05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1d062:	210b      	movs	r1, #11
   1d064:	4648      	mov	r0, r9
   1d066:	f00d fa0d 	bl	2a484 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d06a:	2800      	cmp	r0, #0
   1d06c:	d1f0      	bne.n	1d050 <smp_pairing_failed+0x44>
   1d06e:	e7f0      	b.n	1d052 <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d070:	692b      	ldr	r3, [r5, #16]
   1d072:	2b00      	cmp	r3, #0
   1d074:	d0ed      	beq.n	1d052 <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1d076:	4640      	mov	r0, r8
   1d078:	4798      	blx	r3
   1d07a:	e7ea      	b.n	1d052 <smp_pairing_failed+0x46>
   1d07c:	0002f7b9 	.word	0x0002f7b9
   1d080:	0002c7e4 	.word	0x0002c7e4

0001d084 <bt_smp_encrypt_change>:
{
   1d084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1d088:	4604      	mov	r4, r0
{
   1d08a:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d08c:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1d090:	4605      	mov	r5, r0
   1d092:	af00      	add	r7, sp, #0
   1d094:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d096:	4630      	mov	r0, r6
   1d098:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1d09a:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d09e:	f00d f9f1 	bl	2a484 <atomic_test_and_clear_bit>
   1d0a2:	b328      	cbz	r0, 1d0f0 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1d0a4:	f1b8 0f00 	cmp.w	r8, #0
   1d0a8:	d017      	beq.n	1d0da <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d0aa:	2103      	movs	r1, #3
   1d0ac:	4630      	mov	r0, r6
   1d0ae:	f00d f850 	bl	2a152 <atomic_test_bit>
   1d0b2:	b1e8      	cbz	r0, 1d0f0 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1d0b4:	4640      	mov	r0, r8
   1d0b6:	f7f9 fd79 	bl	16bac <bt_security_err_get>
	switch (auth_err) {
   1d0ba:	3801      	subs	r0, #1
   1d0bc:	b2c0      	uxtb	r0, r0
   1d0be:	2808      	cmp	r0, #8
   1d0c0:	bf9a      	itte	ls
   1d0c2:	4bb7      	ldrls	r3, [pc, #732]	; (1d3a0 <bt_smp_encrypt_change+0x31c>)
   1d0c4:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1d0c6:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d0c8:	2102      	movs	r1, #2
   1d0ca:	4630      	mov	r0, r6
   1d0cc:	f00d f93f 	bl	2a34e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1d0d0:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1d0d2:	4620      	mov	r0, r4
   1d0d4:	f7ff fcf2 	bl	1cabc <smp_pairing_complete>
   1d0d8:	e00a      	b.n	1d0f0 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1d0da:	f899 300b 	ldrb.w	r3, [r9, #11]
   1d0de:	b13b      	cbz	r3, 1d0f0 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d0e0:	2103      	movs	r1, #3
   1d0e2:	4630      	mov	r0, r6
   1d0e4:	f00d f835 	bl	2a152 <atomic_test_bit>
   1d0e8:	b930      	cbnz	r0, 1d0f8 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1d0ea:	4620      	mov	r0, r4
   1d0ec:	f00d f9e2 	bl	2a4b4 <smp_reset>
}
   1d0f0:	3744      	adds	r7, #68	; 0x44
   1d0f2:	46bd      	mov	sp, r7
   1d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d0f8:	2105      	movs	r1, #5
   1d0fa:	4630      	mov	r0, r6
   1d0fc:	f00d f829 	bl	2a152 <atomic_test_bit>
   1d100:	b1b8      	cbz	r0, 1d132 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1d102:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1d106:	071b      	lsls	r3, r3, #28
   1d108:	d507      	bpl.n	1d11a <bt_smp_encrypt_change+0x96>
   1d10a:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1d10e:	0718      	lsls	r0, r3, #28
   1d110:	d503      	bpl.n	1d11a <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1d112:	2111      	movs	r1, #17
   1d114:	4630      	mov	r0, r6
   1d116:	f00d f91a 	bl	2a34e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d11a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1d11e:	f023 0308 	bic.w	r3, r3, #8
   1d122:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d126:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1d12a:	f023 0308 	bic.w	r3, r3, #8
   1d12e:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1d132:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1d136:	07d9      	lsls	r1, r3, #31
   1d138:	d524      	bpl.n	1d184 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1d13a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d13c:	4620      	mov	r0, r4
   1d13e:	f00d f906 	bl	2a34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d142:	2102      	movs	r1, #2
   1d144:	4630      	mov	r0, r6
   1d146:	f00d f902 	bl	2a34e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1d14a:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1d14e:	f8db a0b4 	ldr.w	sl, [fp, #180]	; 0xb4
	if (!keys) {
   1d152:	f1ba 0f00 	cmp.w	sl, #0
   1d156:	d11d      	bne.n	1d194 <bt_smp_encrypt_change+0x110>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1d158:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1d15c:	f7f8 fae4 	bl	15728 <bt_addr_le_str_real>
   1d160:	466c      	mov	r4, sp
   1d162:	b088      	sub	sp, #32
   1d164:	466a      	mov	r2, sp
   1d166:	4b8f      	ldr	r3, [pc, #572]	; (1d3a4 <bt_smp_encrypt_change+0x320>)
   1d168:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d16c:	2302      	movs	r3, #2
   1d16e:	7713      	strb	r3, [r2, #28]
   1d170:	4b8d      	ldr	r3, [pc, #564]	; (1d3a8 <bt_smp_encrypt_change+0x324>)
   1d172:	f842 3f10 	str.w	r3, [r2, #16]!
   1d176:	488d      	ldr	r0, [pc, #564]	; (1d3ac <bt_smp_encrypt_change+0x328>)
   1d178:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d17c:	f00d f8d9 	bl	2a332 <z_log_msg_static_create.constprop.0>
   1d180:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d182:	e7b5      	b.n	1d0f0 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d184:	079a      	lsls	r2, r3, #30
   1d186:	d501      	bpl.n	1d18c <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d188:	2108      	movs	r1, #8
   1d18a:	e7d7      	b.n	1d13c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d18c:	0758      	lsls	r0, r3, #29
   1d18e:	d5d8      	bpl.n	1d142 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d190:	210a      	movs	r1, #10
   1d192:	e7d3      	b.n	1d13c <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d194:	2105      	movs	r1, #5
   1d196:	f00c ffdc 	bl	2a152 <atomic_test_bit>
   1d19a:	b9c0      	cbnz	r0, 1d1ce <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1d19c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1d1a0:	07d9      	lsls	r1, r3, #31
   1d1a2:	d514      	bpl.n	1d1ce <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1d1a4:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1d1a6:	211a      	movs	r1, #26
   1d1a8:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   1d1ac:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1d1b0:	f002 fe96 	bl	1fee0 <bt_rand>
   1d1b4:	6078      	str	r0, [r7, #4]
   1d1b6:	b310      	cbz	r0, 1d1fe <bt_smp_encrypt_change+0x17a>
			BT_ERR("Unable to get random bytes");
   1d1b8:	4b7d      	ldr	r3, [pc, #500]	; (1d3b0 <bt_smp_encrypt_change+0x32c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1d1ba:	61fb      	str	r3, [r7, #28]
   1d1bc:	487b      	ldr	r0, [pc, #492]	; (1d3ac <bt_smp_encrypt_change+0x328>)
   1d1be:	2302      	movs	r3, #2
   1d1c0:	f107 0218 	add.w	r2, r7, #24
   1d1c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d1c8:	61bb      	str	r3, [r7, #24]
   1d1ca:	f00d f8b2 	bl	2a332 <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1d1ce:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1d1d2:	079a      	lsls	r2, r3, #30
   1d1d4:	f140 80ab 	bpl.w	1d32e <bt_smp_encrypt_change+0x2aa>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1d1d8:	2108      	movs	r1, #8
   1d1da:	4620      	mov	r0, r4
   1d1dc:	f00d f8cb 	bl	2a376 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d1e0:	4681      	mov	r9, r0
   1d1e2:	2800      	cmp	r0, #0
   1d1e4:	d16e      	bne.n	1d2c4 <bt_smp_encrypt_change+0x240>
			BT_ERR("Unable to allocate Ident Info buffer");
   1d1e6:	4b73      	ldr	r3, [pc, #460]	; (1d3b4 <bt_smp_encrypt_change+0x330>)
			BT_ERR("Unable to allocate Signing Info buffer");
   1d1e8:	637b      	str	r3, [r7, #52]	; 0x34
   1d1ea:	4870      	ldr	r0, [pc, #448]	; (1d3ac <bt_smp_encrypt_change+0x328>)
   1d1ec:	2302      	movs	r3, #2
   1d1ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d1f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d1f6:	633b      	str	r3, [r7, #48]	; 0x30
   1d1f8:	f00d f89b 	bl	2a332 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d1fc:	e778      	b.n	1d0f0 <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1d1fe:	2106      	movs	r1, #6
   1d200:	4620      	mov	r0, r4
   1d202:	f00d f8b8 	bl	2a376 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d206:	4681      	mov	r9, r0
   1d208:	b908      	cbnz	r0, 1d20e <bt_smp_encrypt_change+0x18a>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1d20a:	4b6b      	ldr	r3, [pc, #428]	; (1d3b8 <bt_smp_encrypt_change+0x334>)
   1d20c:	e7d5      	b.n	1d1ba <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1d20e:	2110      	movs	r1, #16
   1d210:	3008      	adds	r0, #8
   1d212:	f00d fc67 	bl	2aae4 <net_buf_simple_add>
   1d216:	f898 200c 	ldrb.w	r2, [r8, #12]
   1d21a:	6038      	str	r0, [r7, #0]
   1d21c:	f107 0120 	add.w	r1, r7, #32
   1d220:	f00e fed5 	bl	2bfce <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1d224:	f898 000c 	ldrb.w	r0, [r8, #12]
   1d228:	280f      	cmp	r0, #15
   1d22a:	d806      	bhi.n	1d23a <bt_smp_encrypt_change+0x1b6>
__ssp_bos_icheck3(memset, void *, int)
   1d22c:	e9d7 3100 	ldrd	r3, r1, [r7]
   1d230:	f1c0 0210 	rsb	r2, r0, #16
   1d234:	4418      	add	r0, r3
   1d236:	f00e feeb 	bl	2c010 <memset>
		smp_send(smp, buf, NULL, NULL);
   1d23a:	4649      	mov	r1, r9
   1d23c:	2200      	movs	r2, #0
   1d23e:	4620      	mov	r0, r4
   1d240:	f00d f85a 	bl	2a2f8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1d244:	2107      	movs	r1, #7
   1d246:	4620      	mov	r0, r4
   1d248:	f00d f895 	bl	2a376 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d24c:	4681      	mov	r9, r0
   1d24e:	b908      	cbnz	r0, 1d254 <bt_smp_encrypt_change+0x1d0>
			BT_ERR("Unable to allocate Central Ident buffer");
   1d250:	4b5a      	ldr	r3, [pc, #360]	; (1d3bc <bt_smp_encrypt_change+0x338>)
   1d252:	e7b2      	b.n	1d1ba <bt_smp_encrypt_change+0x136>
   1d254:	210a      	movs	r1, #10
   1d256:	3008      	adds	r0, #8
   1d258:	f00d fc44 	bl	2aae4 <net_buf_simple_add>
   1d25c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d260:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d262:	ca03      	ldmia	r2!, {r0, r1}
   1d264:	f8c3 0002 	str.w	r0, [r3, #2]
   1d268:	f8c3 1006 	str.w	r1, [r3, #6]
   1d26c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   1d26e:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
   1d270:	4649      	mov	r1, r9
   1d272:	4620      	mov	r0, r4
   1d274:	4a52      	ldr	r2, [pc, #328]	; (1d3c0 <bt_smp_encrypt_change+0x33c>)
   1d276:	f00d f83f 	bl	2a2f8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d27a:	210d      	movs	r1, #13
   1d27c:	4630      	mov	r0, r6
   1d27e:	f00c ff68 	bl	2a152 <atomic_test_bit>
   1d282:	f107 0930 	add.w	r9, r7, #48	; 0x30
   1d286:	2800      	cmp	r0, #0
   1d288:	d0a1      	beq.n	1d1ce <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1d28a:	2101      	movs	r1, #1
   1d28c:	4640      	mov	r0, r8
   1d28e:	f00d fb7f 	bl	2a990 <bt_keys_add_type>
   1d292:	f107 0220 	add.w	r2, r7, #32
   1d296:	f108 0c72 	add.w	ip, r8, #114	; 0x72
   1d29a:	4613      	mov	r3, r2
   1d29c:	cb03      	ldmia	r3!, {r0, r1}
   1d29e:	454b      	cmp	r3, r9
   1d2a0:	f8cc 0000 	str.w	r0, [ip]
   1d2a4:	f8cc 1004 	str.w	r1, [ip, #4]
   1d2a8:	461a      	mov	r2, r3
   1d2aa:	f10c 0c08 	add.w	ip, ip, #8
   1d2ae:	d1f4      	bne.n	1d29a <bt_smp_encrypt_change+0x216>
   1d2b0:	464b      	mov	r3, r9
   1d2b2:	cb03      	ldmia	r3!, {r0, r1}
   1d2b4:	f8c8 0068 	str.w	r0, [r8, #104]	; 0x68
   1d2b8:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
   1d2bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1d2be:	f8a8 3070 	strh.w	r3, [r8, #112]	; 0x70
   1d2c2:	e784      	b.n	1d1ce <bt_smp_encrypt_change+0x14a>
   1d2c4:	2110      	movs	r1, #16
   1d2c6:	3008      	adds	r0, #8
   1d2c8:	f00d fc0c 	bl	2aae4 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1d2cc:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1d2d0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1d3c4 <bt_smp_encrypt_change+0x340>
   1d2d4:	3316      	adds	r3, #22
   1d2d6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
   1d2da:	4602      	mov	r2, r0
   1d2dc:	f103 0e10 	add.w	lr, r3, #16
   1d2e0:	469c      	mov	ip, r3
   1d2e2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
   1d2e6:	45f4      	cmp	ip, lr
   1d2e8:	6010      	str	r0, [r2, #0]
   1d2ea:	6051      	str	r1, [r2, #4]
   1d2ec:	4663      	mov	r3, ip
   1d2ee:	f102 0208 	add.w	r2, r2, #8
   1d2f2:	d1f5      	bne.n	1d2e0 <bt_smp_encrypt_change+0x25c>
		smp_send(smp, buf, NULL, NULL);
   1d2f4:	4649      	mov	r1, r9
   1d2f6:	2200      	movs	r2, #0
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f00c fffd 	bl	2a2f8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1d2fe:	2109      	movs	r1, #9
   1d300:	4620      	mov	r0, r4
   1d302:	f00d f838 	bl	2a376 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d306:	4681      	mov	r9, r0
   1d308:	b908      	cbnz	r0, 1d30e <bt_smp_encrypt_change+0x28a>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1d30a:	4b2f      	ldr	r3, [pc, #188]	; (1d3c8 <bt_smp_encrypt_change+0x344>)
   1d30c:	e76c      	b.n	1d1e8 <bt_smp_encrypt_change+0x164>
   1d30e:	2107      	movs	r1, #7
   1d310:	3008      	adds	r0, #8
   1d312:	f00d fbe7 	bl	2aae4 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1d316:	f89b 1008 	ldrb.w	r1, [fp, #8]
		smp_send(smp, buf, smp_id_sent, NULL);
   1d31a:	4a2c      	ldr	r2, [pc, #176]	; (1d3cc <bt_smp_encrypt_change+0x348>)
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1d31c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1d320:	4441      	add	r1, r8
   1d322:	f00c ff91 	bl	2a248 <bt_addr_le_copy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1d326:	4649      	mov	r1, r9
   1d328:	4620      	mov	r0, r4
   1d32a:	f00c ffe5 	bl	2a2f8 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1d32e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1d332:	075b      	lsls	r3, r3, #29
   1d334:	d52e      	bpl.n	1d394 <bt_smp_encrypt_change+0x310>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1d336:	210a      	movs	r1, #10
   1d338:	4620      	mov	r0, r4
   1d33a:	f00d f81c 	bl	2a376 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d33e:	4681      	mov	r9, r0
   1d340:	b908      	cbnz	r0, 1d346 <bt_smp_encrypt_change+0x2c2>
			BT_ERR("Unable to allocate Signing Info buffer");
   1d342:	4b23      	ldr	r3, [pc, #140]	; (1d3d0 <bt_smp_encrypt_change+0x34c>)
   1d344:	e750      	b.n	1d1e8 <bt_smp_encrypt_change+0x164>
   1d346:	2110      	movs	r1, #16
   1d348:	3008      	adds	r0, #8
   1d34a:	f00d fbcb 	bl	2aae4 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1d34e:	2110      	movs	r1, #16
   1d350:	4680      	mov	r8, r0
   1d352:	f002 fdc5 	bl	1fee0 <bt_rand>
   1d356:	2800      	cmp	r0, #0
   1d358:	f47f aeca 	bne.w	1d0f0 <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d35c:	210d      	movs	r1, #13
   1d35e:	4630      	mov	r0, r6
   1d360:	f00c fef7 	bl	2a152 <atomic_test_bit>
   1d364:	b188      	cbz	r0, 1d38a <bt_smp_encrypt_change+0x306>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1d366:	2108      	movs	r1, #8
   1d368:	4650      	mov	r0, sl
   1d36a:	f00d fb11 	bl	2a990 <bt_keys_add_type>
   1d36e:	4643      	mov	r3, r8
   1d370:	f10a 0240 	add.w	r2, sl, #64	; 0x40
   1d374:	f108 0110 	add.w	r1, r8, #16
   1d378:	f853 0b04 	ldr.w	r0, [r3], #4
   1d37c:	f842 0b04 	str.w	r0, [r2], #4
   1d380:	428b      	cmp	r3, r1
   1d382:	d1f9      	bne.n	1d378 <bt_smp_encrypt_change+0x2f4>
			keys->local_csrk.cnt = 0U;
   1d384:	2300      	movs	r3, #0
   1d386:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1d38a:	4a12      	ldr	r2, [pc, #72]	; (1d3d4 <bt_smp_encrypt_change+0x350>)
   1d38c:	4649      	mov	r1, r9
   1d38e:	4620      	mov	r0, r4
   1d390:	f00c ffb2 	bl	2a2f8 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1d394:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1d398:	2900      	cmp	r1, #0
   1d39a:	f47f aea9 	bne.w	1d0f0 <bt_smp_encrypt_change+0x6c>
   1d39e:	e698      	b.n	1d0d2 <bt_smp_encrypt_change+0x4e>
   1d3a0:	0002f8dc 	.word	0x0002f8dc
   1d3a4:	0002f7c5 	.word	0x0002f7c5
   1d3a8:	01000003 	.word	0x01000003
   1d3ac:	0002c7e4 	.word	0x0002c7e4
   1d3b0:	0002f7da 	.word	0x0002f7da
   1d3b4:	0002f844 	.word	0x0002f844
   1d3b8:	0002f7f5 	.word	0x0002f7f5
   1d3bc:	0002f81c 	.word	0x0002f81c
   1d3c0:	0002a8f1 	.word	0x0002a8f1
   1d3c4:	20000350 	.word	0x20000350
   1d3c8:	0002f869 	.word	0x0002f869
   1d3cc:	0002a8e7 	.word	0x0002a8e7
   1d3d0:	0002f893 	.word	0x0002f893
   1d3d4:	0002a8dd 	.word	0x0002a8dd

0001d3d8 <smp_timeout>:
{
   1d3d8:	b510      	push	{r4, lr}
   1d3da:	4604      	mov	r4, r0
   1d3dc:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
   1d3de:	4b0b      	ldr	r3, [pc, #44]	; (1d40c <smp_timeout+0x34>)
   1d3e0:	9305      	str	r3, [sp, #20]
   1d3e2:	aa04      	add	r2, sp, #16
   1d3e4:	2302      	movs	r3, #2
   1d3e6:	480a      	ldr	r0, [pc, #40]	; (1d410 <smp_timeout+0x38>)
   1d3e8:	9304      	str	r3, [sp, #16]
   1d3ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d3ee:	f00c ffa0 	bl	2a332 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d3f2:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1d3f6:	2108      	movs	r1, #8
   1d3f8:	f7ff fb60 	bl	1cabc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d3fc:	2104      	movs	r1, #4
   1d3fe:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   1d402:	b006      	add	sp, #24
   1d404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d408:	f00c bfa1 	b.w	2a34e <atomic_set_bit>
   1d40c:	0002f8ba 	.word	0x0002f8ba
   1d410:	0002c7e4 	.word	0x0002c7e4

0001d414 <bt_smp_update_keys>:
{
   1d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d418:	af00      	add	r7, sp, #0
   1d41a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d41c:	f00c ff8c 	bl	2a338 <smp_chan_get>
	if (!smp) {
   1d420:	4605      	mov	r5, r0
   1d422:	b358      	cbz	r0, 1d47c <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d424:	1d06      	adds	r6, r0, #4
   1d426:	2103      	movs	r1, #3
   1d428:	4630      	mov	r0, r6
   1d42a:	f00c fe92 	bl	2a152 <atomic_test_bit>
   1d42e:	b328      	cbz	r0, 1d47c <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
   1d430:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d434:	b108      	cbz	r0, 1d43a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1d436:	f000 f961 	bl	1d6fc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d43a:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1d43e:	7a20      	ldrb	r0, [r4, #8]
   1d440:	4641      	mov	r1, r8
   1d442:	f000 f88b 	bl	1d55c <bt_keys_get_addr>
   1d446:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1d44a:	b9d0      	cbnz	r0, 1d482 <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
   1d44c:	4640      	mov	r0, r8
   1d44e:	f7f8 f96b 	bl	15728 <bt_addr_le_str_real>
   1d452:	466c      	mov	r4, sp
   1d454:	b088      	sub	sp, #32
   1d456:	466a      	mov	r2, sp
   1d458:	4b32      	ldr	r3, [pc, #200]	; (1d524 <bt_smp_update_keys+0x110>)
   1d45a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d45e:	2302      	movs	r3, #2
   1d460:	7713      	strb	r3, [r2, #28]
   1d462:	4b31      	ldr	r3, [pc, #196]	; (1d528 <bt_smp_update_keys+0x114>)
   1d464:	4831      	ldr	r0, [pc, #196]	; (1d52c <bt_smp_update_keys+0x118>)
   1d466:	f842 3f10 	str.w	r3, [r2, #16]!
   1d46a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d46e:	f00c ff60 	bl	2a332 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d472:	2108      	movs	r1, #8
   1d474:	46a5      	mov	sp, r4
   1d476:	4628      	mov	r0, r5
   1d478:	f00d f999 	bl	2a7ae <smp_error>
}
   1d47c:	46bd      	mov	sp, r7
   1d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d482:	210e      	movs	r1, #14
   1d484:	4630      	mov	r0, r6
   1d486:	f00c fe64 	bl	2a152 <atomic_test_bit>
   1d48a:	b128      	cbz	r0, 1d498 <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d48c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d490:	7b53      	ldrb	r3, [r2, #13]
   1d492:	f043 0302 	orr.w	r3, r3, #2
   1d496:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d498:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d49a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1d49e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d4a0:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1d4a2:	d834      	bhi.n	1d50e <bt_smp_update_keys+0xfa>
   1d4a4:	b3b2      	cbz	r2, 1d514 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d4a6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d4aa:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1d4ac:	7d2b      	ldrb	r3, [r5, #20]
   1d4ae:	7b6a      	ldrb	r2, [r5, #13]
   1d4b0:	4293      	cmp	r3, r2
   1d4b2:	bf28      	it	cs
   1d4b4:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d4b6:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d4b8:	4630      	mov	r0, r6
   1d4ba:	2105      	movs	r1, #5
   1d4bc:	f00c fe49 	bl	2a152 <atomic_test_bit>
   1d4c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1d4c4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d4c6:	b340      	cbz	r0, 1d51a <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
   1d4c8:	f042 0210 	orr.w	r2, r2, #16
   1d4cc:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d4ce:	210d      	movs	r1, #13
   1d4d0:	4630      	mov	r0, r6
   1d4d2:	f00c fe3e 	bl	2a152 <atomic_test_bit>
   1d4d6:	2800      	cmp	r0, #0
   1d4d8:	d0d0      	beq.n	1d47c <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d4da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d4de:	2120      	movs	r1, #32
   1d4e0:	f00d fa56 	bl	2a990 <bt_keys_add_type>
   1d4e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1d4e8:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1d4ec:	331a      	adds	r3, #26
   1d4ee:	3557      	adds	r5, #87	; 0x57
   1d4f0:	f852 1b04 	ldr.w	r1, [r2], #4
   1d4f4:	f843 1b04 	str.w	r1, [r3], #4
   1d4f8:	42aa      	cmp	r2, r5
   1d4fa:	d1f9      	bne.n	1d4f0 <bt_smp_update_keys+0xdc>
__ssp_bos_icheck3(memset, void *, int)
   1d4fc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d500:	2300      	movs	r3, #0
   1d502:	6113      	str	r3, [r2, #16]
   1d504:	6153      	str	r3, [r2, #20]
   1d506:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d50a:	8313      	strh	r3, [r2, #24]
   1d50c:	e7b6      	b.n	1d47c <bt_smp_update_keys+0x68>
	switch (smp->method) {
   1d50e:	3a05      	subs	r2, #5
   1d510:	2a01      	cmp	r2, #1
   1d512:	d9c8      	bls.n	1d4a6 <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d514:	f023 0301 	bic.w	r3, r3, #1
   1d518:	e7c7      	b.n	1d4aa <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1d51a:	f022 0210 	bic.w	r2, r2, #16
   1d51e:	735a      	strb	r2, [r3, #13]
   1d520:	e7ac      	b.n	1d47c <bt_smp_update_keys+0x68>
   1d522:	bf00      	nop
   1d524:	0002f552 	.word	0x0002f552
   1d528:	01000003 	.word	0x01000003
   1d52c:	0002c7e4 	.word	0x0002c7e4

0001d530 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1d530:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d532:	4b07      	ldr	r3, [pc, #28]	; (1d550 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1d534:	4807      	ldr	r0, [pc, #28]	; (1d554 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d536:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1d53a:	f003 0306 	and.w	r3, r3, #6
   1d53e:	1f9a      	subs	r2, r3, #6
   1d540:	4253      	negs	r3, r2
   1d542:	4153      	adcs	r3, r2
   1d544:	4a04      	ldr	r2, [pc, #16]	; (1d558 <bt_smp_init+0x28>)
   1d546:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1d548:	f7fa fc16 	bl	17d78 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1d54c:	2000      	movs	r0, #0
   1d54e:	bd08      	pop	{r3, pc}
   1d550:	20000350 	.word	0x20000350
   1d554:	20000744 	.word	0x20000744
   1d558:	20003eac 	.word	0x20003eac

0001d55c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1d55c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d55e:	4c1e      	ldr	r4, [pc, #120]	; (1d5d8 <bt_keys_get_addr+0x7c>)
   1d560:	7823      	ldrb	r3, [r4, #0]
   1d562:	4283      	cmp	r3, r0
{
   1d564:	b085      	sub	sp, #20
   1d566:	4606      	mov	r6, r0
   1d568:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d56a:	d01d      	beq.n	1d5a8 <bt_keys_get_addr+0x4c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1d56c:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   1d56e:	481b      	ldr	r0, [pc, #108]	; (1d5dc <bt_keys_get_addr+0x80>)
   1d570:	9502      	str	r5, [sp, #8]
   1d572:	2207      	movs	r2, #7
   1d574:	a902      	add	r1, sp, #8
   1d576:	f8cd 500b 	str.w	r5, [sp, #11]
   1d57a:	f00e fd18 	bl	2bfae <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d57e:	b1d8      	cbz	r0, 1d5b8 <bt_keys_get_addr+0x5c>
			BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
   1d580:	4668      	mov	r0, sp
   1d582:	4916      	ldr	r1, [pc, #88]	; (1d5dc <bt_keys_get_addr+0x80>)
   1d584:	f00d f9ed 	bl	2a962 <bt_addr_le_copy>
		bt_unpair(oldest->id, &oldest_addr);
   1d588:	4601      	mov	r1, r0
   1d58a:	7820      	ldrb	r0, [r4, #0]
   1d58c:	f7f9 fae8 	bl	16b60 <bt_unpair>
   1d590:	4812      	ldr	r0, [pc, #72]	; (1d5dc <bt_keys_get_addr+0x80>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   1d592:	9502      	str	r5, [sp, #8]
   1d594:	2207      	movs	r2, #7
   1d596:	a902      	add	r1, sp, #8
   1d598:	f8cd 500b 	str.w	r5, [sp, #11]
   1d59c:	f00e fd07 	bl	2bfae <memcmp>
   1d5a0:	b150      	cbz	r0, 1d5b8 <bt_keys_get_addr+0x5c>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1d5a2:	4628      	mov	r0, r5
}
   1d5a4:	b005      	add	sp, #20
   1d5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5a8:	2207      	movs	r2, #7
   1d5aa:	1c60      	adds	r0, r4, #1
   1d5ac:	f00e fcff 	bl	2bfae <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d5b0:	2800      	cmp	r0, #0
   1d5b2:	d1db      	bne.n	1d56c <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1d5b4:	4620      	mov	r0, r4
   1d5b6:	e7f5      	b.n	1d5a4 <bt_keys_get_addr+0x48>
		keys->aging_counter = ++aging_counter_val;
   1d5b8:	4a09      	ldr	r2, [pc, #36]	; (1d5e0 <bt_keys_get_addr+0x84>)
		bt_addr_le_copy(&keys->addr, addr);
   1d5ba:	4808      	ldr	r0, [pc, #32]	; (1d5dc <bt_keys_get_addr+0x80>)
		keys->id = id;
   1d5bc:	7026      	strb	r6, [r4, #0]
		bt_addr_le_copy(&keys->addr, addr);
   1d5be:	4639      	mov	r1, r7
   1d5c0:	f00d f9cf 	bl	2a962 <bt_addr_le_copy>
		keys->aging_counter = ++aging_counter_val;
   1d5c4:	6813      	ldr	r3, [r2, #0]
   1d5c6:	3301      	adds	r3, #1
   1d5c8:	6013      	str	r3, [r2, #0]
   1d5ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1d5ce:	4b05      	ldr	r3, [pc, #20]	; (1d5e4 <bt_keys_get_addr+0x88>)
		return keys;
   1d5d0:	3801      	subs	r0, #1
		last_keys_updated = keys;
   1d5d2:	601c      	str	r4, [r3, #0]
		return keys;
   1d5d4:	e7e6      	b.n	1d5a4 <bt_keys_get_addr+0x48>
   1d5d6:	bf00      	nop
   1d5d8:	20002f5c 	.word	0x20002f5c
   1d5dc:	20002f5d 	.word	0x20002f5d
   1d5e0:	20002f58 	.word	0x20002f58
   1d5e4:	20002fe4 	.word	0x20002fe4

0001d5e8 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1d5e8:	b513      	push	{r0, r1, r4, lr}
   1d5ea:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1d5ec:	4906      	ldr	r1, [pc, #24]	; (1d608 <bt_foreach_bond+0x20>)
   1d5ee:	89cb      	ldrh	r3, [r1, #14]
   1d5f0:	b143      	cbz	r3, 1d604 <bt_foreach_bond+0x1c>
   1d5f2:	780b      	ldrb	r3, [r1, #0]
   1d5f4:	4283      	cmp	r3, r0
   1d5f6:	d105      	bne.n	1d604 <bt_foreach_bond+0x1c>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
   1d5f8:	3101      	adds	r1, #1
   1d5fa:	4668      	mov	r0, sp
   1d5fc:	f00d f9b1 	bl	2a962 <bt_addr_le_copy>
			func(&info, user_data);
   1d600:	4611      	mov	r1, r2
   1d602:	47a0      	blx	r4
		}
	}
}
   1d604:	b002      	add	sp, #8
   1d606:	bd10      	pop	{r4, pc}
   1d608:	20002f5c 	.word	0x20002f5c

0001d60c <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1d60c:	460b      	mov	r3, r1
   1d60e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1d610:	4a04      	ldr	r2, [pc, #16]	; (1d624 <bt_keys_foreach+0x18>)
{
   1d612:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1d614:	89d4      	ldrh	r4, [r2, #14]
   1d616:	4204      	tst	r4, r0
   1d618:	d002      	beq.n	1d620 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1d61a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1d61c:	4610      	mov	r0, r2
   1d61e:	4718      	bx	r3
}
   1d620:	bc10      	pop	{r4}
   1d622:	4770      	bx	lr
   1d624:	20002f5c 	.word	0x20002f5c

0001d628 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1d628:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1d62a:	4903      	ldr	r1, [pc, #12]	; (1d638 <keys_commit+0x10>)
   1d62c:	2200      	movs	r2, #0
   1d62e:	2002      	movs	r0, #2
   1d630:	f7ff ffec 	bl	1d60c <bt_keys_foreach>
	}

	return 0;
}
   1d634:	2000      	movs	r0, #0
   1d636:	bd08      	pop	{r3, pc}
   1d638:	0002a95f 	.word	0x0002a95f

0001d63c <bt_keys_find>:
{
   1d63c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d63e:	4c09      	ldr	r4, [pc, #36]	; (1d664 <bt_keys_find+0x28>)
{
   1d640:	460b      	mov	r3, r1
   1d642:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d644:	89e2      	ldrh	r2, [r4, #14]
   1d646:	4202      	tst	r2, r0
   1d648:	d007      	beq.n	1d65a <bt_keys_find+0x1e>
   1d64a:	7822      	ldrb	r2, [r4, #0]
   1d64c:	429a      	cmp	r2, r3
   1d64e:	d104      	bne.n	1d65a <bt_keys_find+0x1e>
   1d650:	2207      	movs	r2, #7
   1d652:	1c60      	adds	r0, r4, #1
   1d654:	f00e fcab 	bl	2bfae <memcmp>
   1d658:	b108      	cbz	r0, 1d65e <bt_keys_find+0x22>
	return NULL;
   1d65a:	2000      	movs	r0, #0
}
   1d65c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d65e:	4620      	mov	r0, r4
   1d660:	e7fc      	b.n	1d65c <bt_keys_find+0x20>
   1d662:	bf00      	nop
   1d664:	20002f5c 	.word	0x20002f5c

0001d668 <bt_keys_find_irk>:
{
   1d668:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d66a:	780b      	ldrb	r3, [r1, #0]
   1d66c:	2b01      	cmp	r3, #1
   1d66e:	4606      	mov	r6, r0
   1d670:	460d      	mov	r5, r1
   1d672:	d001      	beq.n	1d678 <bt_keys_find_irk+0x10>
		return NULL;
   1d674:	2000      	movs	r0, #0
}
   1d676:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1d678:	798b      	ldrb	r3, [r1, #6]
   1d67a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d67e:	2b40      	cmp	r3, #64	; 0x40
   1d680:	d1f8      	bne.n	1d674 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d682:	4c13      	ldr	r4, [pc, #76]	; (1d6d0 <bt_keys_find_irk+0x68>)
   1d684:	89e3      	ldrh	r3, [r4, #14]
   1d686:	079b      	lsls	r3, r3, #30
   1d688:	d5f4      	bpl.n	1d674 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1d68a:	7823      	ldrb	r3, [r4, #0]
   1d68c:	42b3      	cmp	r3, r6
   1d68e:	d10b      	bne.n	1d6a8 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1d690:	2206      	movs	r2, #6
   1d692:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1d696:	1c68      	adds	r0, r5, #1
   1d698:	f00e fc89 	bl	2bfae <memcmp>
   1d69c:	b908      	cbnz	r0, 1d6a2 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1d69e:	4620      	mov	r0, r4
   1d6a0:	e7e9      	b.n	1d676 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d6a2:	89e3      	ldrh	r3, [r4, #14]
   1d6a4:	079a      	lsls	r2, r3, #30
   1d6a6:	d5e5      	bpl.n	1d674 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1d6a8:	7823      	ldrb	r3, [r4, #0]
   1d6aa:	42b3      	cmp	r3, r6
   1d6ac:	d1e2      	bne.n	1d674 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1d6ae:	1c6e      	adds	r6, r5, #1
   1d6b0:	4808      	ldr	r0, [pc, #32]	; (1d6d4 <bt_keys_find_irk+0x6c>)
   1d6b2:	4631      	mov	r1, r6
   1d6b4:	f00b f871 	bl	2879a <bt_rpa_irk_matches>
   1d6b8:	2800      	cmp	r0, #0
   1d6ba:	d0db      	beq.n	1d674 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1d6bc:	f8d5 3001 	ldr.w	r3, [r5, #1]
   1d6c0:	4805      	ldr	r0, [pc, #20]	; (1d6d8 <bt_keys_find_irk+0x70>)
   1d6c2:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
   1d6c6:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1d6ca:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
   1d6cc:	383a      	subs	r0, #58	; 0x3a
}
   1d6ce:	e7d2      	b.n	1d676 <bt_keys_find_irk+0xe>
   1d6d0:	20002f5c 	.word	0x20002f5c
   1d6d4:	20002f86 	.word	0x20002f86
   1d6d8:	20002f96 	.word	0x20002f96

0001d6dc <bt_keys_find_addr>:
{
   1d6dc:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1d6de:	4c06      	ldr	r4, [pc, #24]	; (1d6f8 <bt_keys_find_addr+0x1c>)
   1d6e0:	7823      	ldrb	r3, [r4, #0]
   1d6e2:	4283      	cmp	r3, r0
   1d6e4:	d104      	bne.n	1d6f0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1d6e6:	2207      	movs	r2, #7
   1d6e8:	1c60      	adds	r0, r4, #1
   1d6ea:	f00e fc60 	bl	2bfae <memcmp>
   1d6ee:	b108      	cbz	r0, 1d6f4 <bt_keys_find_addr+0x18>
	return NULL;
   1d6f0:	2000      	movs	r0, #0
}
   1d6f2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d6f4:	4620      	mov	r0, r4
   1d6f6:	e7fc      	b.n	1d6f2 <bt_keys_find_addr+0x16>
   1d6f8:	20002f5c 	.word	0x20002f5c

0001d6fc <bt_keys_clear>:
{
   1d6fc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d6fe:	7a03      	ldrb	r3, [r0, #8]
   1d700:	075b      	lsls	r3, r3, #29
{
   1d702:	b08c      	sub	sp, #48	; 0x30
   1d704:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d706:	d501      	bpl.n	1d70c <bt_keys_clear+0x10>
		bt_id_del(keys);
   1d708:	f7fa f8ce 	bl	178a8 <bt_id_del>
		if (keys->id) {
   1d70c:	4625      	mov	r5, r4
   1d70e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d712:	b1b2      	cbz	r2, 1d742 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1d714:	ae02      	add	r6, sp, #8
   1d716:	2104      	movs	r1, #4
   1d718:	4630      	mov	r0, r6
   1d71a:	f009 ff3a 	bl	27592 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d71e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d720:	4a09      	ldr	r2, [pc, #36]	; (1d748 <bt_keys_clear+0x4c>)
   1d722:	462b      	mov	r3, r5
   1d724:	2124      	movs	r1, #36	; 0x24
   1d726:	a803      	add	r0, sp, #12
   1d728:	f7f8 f956 	bl	159d8 <bt_settings_encode_key>
		settings_delete(key);
   1d72c:	a803      	add	r0, sp, #12
   1d72e:	f00a fd57 	bl	281e0 <settings_delete>
   1d732:	2288      	movs	r2, #136	; 0x88
   1d734:	2100      	movs	r1, #0
   1d736:	4620      	mov	r0, r4
}
   1d738:	b00c      	add	sp, #48	; 0x30
   1d73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d73e:	f00e bc67 	b.w	2c010 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d742:	9200      	str	r2, [sp, #0]
   1d744:	e7ec      	b.n	1d720 <bt_keys_clear+0x24>
   1d746:	bf00      	nop
   1d748:	0002f9f0 	.word	0x0002f9f0

0001d74c <keys_set>:
{
   1d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d750:	b0a4      	sub	sp, #144	; 0x90
   1d752:	4614      	mov	r4, r2
   1d754:	af00      	add	r7, sp, #0
	if (!name) {
   1d756:	4606      	mov	r6, r0
   1d758:	b990      	cbnz	r0, 1d780 <keys_set+0x34>
		BT_ERR("Insufficient number of arguments");
   1d75a:	4b70      	ldr	r3, [pc, #448]	; (1d91c <keys_set+0x1d0>)
   1d75c:	627b      	str	r3, [r7, #36]	; 0x24
   1d75e:	2302      	movs	r3, #2
   1d760:	623b      	str	r3, [r7, #32]
   1d762:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d766:	4603      	mov	r3, r0
   1d768:	f107 0220 	add.w	r2, r7, #32
   1d76c:	486c      	ldr	r0, [pc, #432]	; (1d920 <keys_set+0x1d4>)
   1d76e:	f7f6 fa87 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d772:	f06f 0515 	mvn.w	r5, #21
}
   1d776:	4628      	mov	r0, r5
   1d778:	3790      	adds	r7, #144	; 0x90
   1d77a:	46bd      	mov	sp, r7
   1d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1d780:	227c      	movs	r2, #124	; 0x7c
   1d782:	f107 0110 	add.w	r1, r7, #16
   1d786:	4618      	mov	r0, r3
   1d788:	47a0      	blx	r4
	if (len < 0) {
   1d78a:	1e04      	subs	r4, r0, #0
   1d78c:	da10      	bge.n	1d7b0 <keys_set+0x64>
		BT_ERR("Failed to read value (err %zd)", len);
   1d78e:	466d      	mov	r5, sp
   1d790:	b088      	sub	sp, #32
   1d792:	466a      	mov	r2, sp
   1d794:	4b63      	ldr	r3, [pc, #396]	; (1d924 <keys_set+0x1d8>)
   1d796:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d79a:	2303      	movs	r3, #3
   1d79c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7a0:	485f      	ldr	r0, [pc, #380]	; (1d920 <keys_set+0x1d4>)
   1d7a2:	2300      	movs	r3, #0
   1d7a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d7a8:	f7f6 fa6a 	bl	13c80 <z_impl_z_log_msg_static_create>
   1d7ac:	46ad      	mov	sp, r5
   1d7ae:	e7e0      	b.n	1d772 <keys_set+0x26>
	err = bt_settings_decode_key(name, &addr);
   1d7b0:	f107 0108 	add.w	r1, r7, #8
   1d7b4:	4630      	mov	r0, r6
   1d7b6:	f00b f81d 	bl	287f4 <bt_settings_decode_key>
	if (err) {
   1d7ba:	4605      	mov	r5, r0
   1d7bc:	b190      	cbz	r0, 1d7e4 <keys_set+0x98>
		BT_ERR("Unable to decode address %s", name);
   1d7be:	466c      	mov	r4, sp
   1d7c0:	b088      	sub	sp, #32
   1d7c2:	466a      	mov	r2, sp
   1d7c4:	4b58      	ldr	r3, [pc, #352]	; (1d928 <keys_set+0x1dc>)
   1d7c6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d7ca:	2302      	movs	r3, #2
   1d7cc:	7713      	strb	r3, [r2, #28]
   1d7ce:	4b57      	ldr	r3, [pc, #348]	; (1d92c <keys_set+0x1e0>)
   1d7d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7d4:	2300      	movs	r3, #0
   1d7d6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d7da:	4851      	ldr	r0, [pc, #324]	; (1d920 <keys_set+0x1d4>)
   1d7dc:	f7f6 fa50 	bl	13c80 <z_impl_z_log_msg_static_create>
   1d7e0:	46a5      	mov	sp, r4
			return -EINVAL;
   1d7e2:	e7c6      	b.n	1d772 <keys_set+0x26>
	settings_name_next(name, &next);
   1d7e4:	1d39      	adds	r1, r7, #4
   1d7e6:	4630      	mov	r0, r6
   1d7e8:	f00a fd21 	bl	2822e <settings_name_next>
	if (!next) {
   1d7ec:	6878      	ldr	r0, [r7, #4]
   1d7ee:	b188      	cbz	r0, 1d814 <keys_set+0xc8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1d7f0:	220a      	movs	r2, #10
   1d7f2:	4629      	mov	r1, r5
   1d7f4:	f006 f8e8 	bl	239c8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1d7f8:	b160      	cbz	r0, 1d814 <keys_set+0xc8>
			BT_ERR("Invalid local identity %lu", next_id);
   1d7fa:	466c      	mov	r4, sp
   1d7fc:	b088      	sub	sp, #32
   1d7fe:	466a      	mov	r2, sp
   1d800:	4b4b      	ldr	r3, [pc, #300]	; (1d930 <keys_set+0x1e4>)
   1d802:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d806:	2303      	movs	r3, #3
   1d808:	f842 3f10 	str.w	r3, [r2, #16]!
   1d80c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d810:	462b      	mov	r3, r5
   1d812:	e7e2      	b.n	1d7da <keys_set+0x8e>
	if (!len) {
   1d814:	bb1c      	cbnz	r4, 1d85e <keys_set+0x112>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1d816:	f107 0208 	add.w	r2, r7, #8
   1d81a:	4621      	mov	r1, r4
   1d81c:	203f      	movs	r0, #63	; 0x3f
   1d81e:	f7ff ff0d 	bl	1d63c <bt_keys_find>
		if (keys) {
   1d822:	b128      	cbz	r0, 1d830 <keys_set+0xe4>
   1d824:	2288      	movs	r2, #136	; 0x88
   1d826:	4621      	mov	r1, r4
   1d828:	f00e fbf2 	bl	2c010 <memset>
		return 0;
   1d82c:	4625      	mov	r5, r4
   1d82e:	e7a2      	b.n	1d776 <keys_set+0x2a>
			BT_WARN("Unable to find deleted keys for %s",
   1d830:	f107 0008 	add.w	r0, r7, #8
   1d834:	f7f7 ff78 	bl	15728 <bt_addr_le_str_real>
   1d838:	466d      	mov	r5, sp
   1d83a:	b088      	sub	sp, #32
   1d83c:	466a      	mov	r2, sp
   1d83e:	4b3d      	ldr	r3, [pc, #244]	; (1d934 <keys_set+0x1e8>)
   1d840:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d844:	2302      	movs	r3, #2
   1d846:	7713      	strb	r3, [r2, #28]
   1d848:	4b38      	ldr	r3, [pc, #224]	; (1d92c <keys_set+0x1e0>)
   1d84a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d84e:	4834      	ldr	r0, [pc, #208]	; (1d920 <keys_set+0x1d4>)
   1d850:	4623      	mov	r3, r4
   1d852:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1d856:	f7f6 fa13 	bl	13c80 <z_impl_z_log_msg_static_create>
   1d85a:	46ad      	mov	sp, r5
   1d85c:	e7e6      	b.n	1d82c <keys_set+0xe0>
	keys = bt_keys_get_addr(id, &addr);
   1d85e:	f107 0108 	add.w	r1, r7, #8
   1d862:	2000      	movs	r0, #0
   1d864:	f7ff fe7a 	bl	1d55c <bt_keys_get_addr>
	if (!keys) {
   1d868:	4606      	mov	r6, r0
   1d86a:	b9c0      	cbnz	r0, 1d89e <keys_set+0x152>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1d86c:	f107 0008 	add.w	r0, r7, #8
   1d870:	f7f7 ff5a 	bl	15728 <bt_addr_le_str_real>
   1d874:	466c      	mov	r4, sp
   1d876:	b088      	sub	sp, #32
   1d878:	466a      	mov	r2, sp
   1d87a:	4b2f      	ldr	r3, [pc, #188]	; (1d938 <keys_set+0x1ec>)
   1d87c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d880:	2302      	movs	r3, #2
   1d882:	7713      	strb	r3, [r2, #28]
   1d884:	4b29      	ldr	r3, [pc, #164]	; (1d92c <keys_set+0x1e0>)
   1d886:	f842 3f10 	str.w	r3, [r2, #16]!
   1d88a:	4825      	ldr	r0, [pc, #148]	; (1d920 <keys_set+0x1d4>)
   1d88c:	4633      	mov	r3, r6
   1d88e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d892:	f7f6 f9f5 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1d896:	f06f 050b 	mvn.w	r5, #11
   1d89a:	46a5      	mov	sp, r4
   1d89c:	e76b      	b.n	1d776 <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
   1d89e:	2c7c      	cmp	r4, #124	; 0x7c
   1d8a0:	d017      	beq.n	1d8d2 <keys_set+0x186>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1d8a2:	2c78      	cmp	r4, #120	; 0x78
   1d8a4:	d124      	bne.n	1d8f0 <keys_set+0x1a4>
			BT_WARN("Keys for %s have no aging counter",
   1d8a6:	f107 0008 	add.w	r0, r7, #8
   1d8aa:	f7f7 ff3d 	bl	15728 <bt_addr_le_str_real>
   1d8ae:	46e8      	mov	r8, sp
   1d8b0:	b088      	sub	sp, #32
   1d8b2:	466a      	mov	r2, sp
   1d8b4:	4b21      	ldr	r3, [pc, #132]	; (1d93c <keys_set+0x1f0>)
   1d8b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d8ba:	2302      	movs	r3, #2
   1d8bc:	7713      	strb	r3, [r2, #28]
   1d8be:	4b1b      	ldr	r3, [pc, #108]	; (1d92c <keys_set+0x1e0>)
   1d8c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1d8c4:	4816      	ldr	r0, [pc, #88]	; (1d920 <keys_set+0x1d4>)
   1d8c6:	2300      	movs	r3, #0
   1d8c8:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1d8cc:	f7f6 f9d8 	bl	13c80 <z_impl_z_log_msg_static_create>
   1d8d0:	46c5      	mov	sp, r8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d8d2:	4622      	mov	r2, r4
   1d8d4:	f107 0110 	add.w	r1, r7, #16
   1d8d8:	f106 000c 	add.w	r0, r6, #12
   1d8dc:	f00e fb77 	bl	2bfce <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1d8e0:	4b17      	ldr	r3, [pc, #92]	; (1d940 <keys_set+0x1f4>)
   1d8e2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   1d8e6:	6819      	ldr	r1, [r3, #0]
   1d8e8:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1d8ea:	bf88      	it	hi
   1d8ec:	601a      	strhi	r2, [r3, #0]
   1d8ee:	e742      	b.n	1d776 <keys_set+0x2a>
			BT_ERR("Invalid key length %zd != %zu", len,
   1d8f0:	466d      	mov	r5, sp
   1d8f2:	b088      	sub	sp, #32
   1d8f4:	466a      	mov	r2, sp
   1d8f6:	4b13      	ldr	r3, [pc, #76]	; (1d944 <keys_set+0x1f8>)
   1d8f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d8fc:	237c      	movs	r3, #124	; 0x7c
   1d8fe:	61d3      	str	r3, [r2, #28]
   1d900:	2304      	movs	r3, #4
   1d902:	f842 3f10 	str.w	r3, [r2, #16]!
   1d906:	4806      	ldr	r0, [pc, #24]	; (1d920 <keys_set+0x1d4>)
   1d908:	2300      	movs	r3, #0
   1d90a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d90e:	f7f6 f9b7 	bl	13c80 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1d912:	4630      	mov	r0, r6
   1d914:	46ad      	mov	sp, r5
   1d916:	f7ff fef1 	bl	1d6fc <bt_keys_clear>
			return -EINVAL;
   1d91a:	e72a      	b.n	1d772 <keys_set+0x26>
   1d91c:	0002e094 	.word	0x0002e094
   1d920:	0002c7c4 	.word	0x0002c7c4
   1d924:	0002f92f 	.word	0x0002f92f
   1d928:	0002f263 	.word	0x0002f263
   1d92c:	01000003 	.word	0x01000003
   1d930:	0002f27f 	.word	0x0002f27f
   1d934:	0002f94e 	.word	0x0002f94e
   1d938:	0002f971 	.word	0x0002f971
   1d93c:	0002f990 	.word	0x0002f990
   1d940:	20002f58 	.word	0x20002f58
   1d944:	0002f9b2 	.word	0x0002f9b2

0001d948 <bt_keys_store>:
{
   1d948:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1d94a:	4605      	mov	r5, r0
{
   1d94c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1d94e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1d952:	af02      	add	r7, sp, #8
   1d954:	4604      	mov	r4, r0
	if (keys->id) {
   1d956:	b332      	cbz	r2, 1d9a6 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1d958:	2104      	movs	r1, #4
   1d95a:	4638      	mov	r0, r7
   1d95c:	f009 fe19 	bl	27592 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d960:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d962:	4a12      	ldr	r2, [pc, #72]	; (1d9ac <bt_keys_store+0x64>)
   1d964:	462b      	mov	r3, r5
   1d966:	2124      	movs	r1, #36	; 0x24
   1d968:	1d38      	adds	r0, r7, #4
   1d96a:	f7f8 f835 	bl	159d8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1d96e:	f104 010c 	add.w	r1, r4, #12
   1d972:	227c      	movs	r2, #124	; 0x7c
   1d974:	1d38      	adds	r0, r7, #4
   1d976:	f7f6 fdb9 	bl	144ec <settings_save_one>
	if (err) {
   1d97a:	4604      	mov	r4, r0
   1d97c:	b178      	cbz	r0, 1d99e <bt_keys_store+0x56>
		BT_ERR("Failed to save keys (err %d)", err);
   1d97e:	466d      	mov	r5, sp
   1d980:	b088      	sub	sp, #32
   1d982:	aa02      	add	r2, sp, #8
   1d984:	4b0a      	ldr	r3, [pc, #40]	; (1d9b0 <bt_keys_store+0x68>)
   1d986:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d98a:	2303      	movs	r3, #3
   1d98c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d990:	4808      	ldr	r0, [pc, #32]	; (1d9b4 <bt_keys_store+0x6c>)
   1d992:	2300      	movs	r3, #0
   1d994:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d998:	f7f6 f972 	bl	13c80 <z_impl_z_log_msg_static_create>
   1d99c:	46ad      	mov	sp, r5
}
   1d99e:	4620      	mov	r0, r4
   1d9a0:	3728      	adds	r7, #40	; 0x28
   1d9a2:	46bd      	mov	sp, r7
   1d9a4:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d9a6:	9200      	str	r2, [sp, #0]
   1d9a8:	e7db      	b.n	1d962 <bt_keys_store+0x1a>
   1d9aa:	bf00      	nop
   1d9ac:	0002f9f0 	.word	0x0002f9f0
   1d9b0:	0002f9d0 	.word	0x0002f9d0
   1d9b4:	0002c7c4 	.word	0x0002c7c4

0001d9b8 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1d9b8:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1d9ba:	f7ff fe8f 	bl	1d6dc <bt_keys_find_addr>

	if (!keys) {
   1d9be:	b150      	cbz	r0, 1d9d6 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1d9c0:	4a05      	ldr	r2, [pc, #20]	; (1d9d8 <bt_keys_update_usage+0x20>)
   1d9c2:	6813      	ldr	r3, [r2, #0]
   1d9c4:	4283      	cmp	r3, r0
   1d9c6:	d006      	beq.n	1d9d6 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1d9c8:	4904      	ldr	r1, [pc, #16]	; (1d9dc <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1d9ca:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1d9cc:	680b      	ldr	r3, [r1, #0]
   1d9ce:	3301      	adds	r3, #1
   1d9d0:	600b      	str	r3, [r1, #0]
   1d9d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1d9d6:	bd08      	pop	{r3, pc}
   1d9d8:	20002fe4 	.word	0x20002fe4
   1d9dc:	20002f58 	.word	0x20002f58

0001d9e0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d9e0:	4b02      	ldr	r3, [pc, #8]	; (1d9ec <net_buf_pool_get+0xc>)
   1d9e2:	222c      	movs	r2, #44	; 0x2c
   1d9e4:	fb02 3000 	mla	r0, r2, r0, r3
   1d9e8:	4770      	bx	lr
   1d9ea:	bf00      	nop
   1d9ec:	20000bd4 	.word	0x20000bd4

0001d9f0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d9f0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1d9f2:	4b06      	ldr	r3, [pc, #24]	; (1da0c <net_buf_id+0x1c>)
   1d9f4:	212c      	movs	r1, #44	; 0x2c
   1d9f6:	fb01 3302 	mla	r3, r1, r2, r3
   1d9fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d9fc:	7f1b      	ldrb	r3, [r3, #28]
   1d9fe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1da00:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1da02:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1da06:	fbb0 f0f3 	udiv	r0, r0, r3
   1da0a:	4770      	bx	lr
   1da0c:	20000bd4 	.word	0x20000bd4

0001da10 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1da10:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1da12:	4b0a      	ldr	r3, [pc, #40]	; (1da3c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1da14:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1da16:	242c      	movs	r4, #44	; 0x2c
   1da18:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1da1c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da20:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1da22:	6823      	ldr	r3, [r4, #0]
   1da24:	429a      	cmp	r2, r3
   1da26:	bf94      	ite	ls
   1da28:	600a      	strls	r2, [r1, #0]
   1da2a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1da2c:	f7ff ffe0 	bl	1d9f0 <net_buf_id>
   1da30:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1da34:	fb02 3000 	mla	r0, r2, r0, r3
   1da38:	bd10      	pop	{r4, pc}
   1da3a:	bf00      	nop
   1da3c:	20000bd4 	.word	0x20000bd4

0001da40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1da40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da44:	4605      	mov	r5, r0
   1da46:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1da48:	4610      	mov	r0, r2
   1da4a:	4619      	mov	r1, r3
{
   1da4c:	4691      	mov	r9, r2
   1da4e:	4698      	mov	r8, r3
   1da50:	4617      	mov	r7, r2
   1da52:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1da54:	f00e f90a 	bl	2bc6c <sys_clock_timeout_end_calc>
   1da58:	4682      	mov	sl, r0
   1da5a:	468b      	mov	fp, r1
	__asm__ volatile(
   1da5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da60:	f3ef 8111 	mrs	r1, BASEPRI
   1da64:	f383 8812 	msr	BASEPRI_MAX, r3
   1da68:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1da6c:	8b6b      	ldrh	r3, [r5, #26]
   1da6e:	2b00      	cmp	r3, #0
   1da70:	d05a      	beq.n	1db28 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1da72:	8b2a      	ldrh	r2, [r5, #24]
   1da74:	429a      	cmp	r2, r3
   1da76:	d93e      	bls.n	1daf6 <net_buf_alloc_len+0xb6>
   1da78:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1da7a:	2200      	movs	r2, #0
   1da7c:	2300      	movs	r3, #0
   1da7e:	4628      	mov	r0, r5
   1da80:	f003 fff8 	bl	21a74 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1da84:	9900      	ldr	r1, [sp, #0]
   1da86:	4604      	mov	r4, r0
   1da88:	2800      	cmp	r0, #0
   1da8a:	d034      	beq.n	1daf6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1da8c:	f381 8811 	msr	BASEPRI, r1
   1da90:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1da94:	9b01      	ldr	r3, [sp, #4]
   1da96:	2b00      	cmp	r3, #0
   1da98:	d056      	beq.n	1db48 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1da9a:	ea58 0309 	orrs.w	r3, r8, r9
   1da9e:	d00f      	beq.n	1dac0 <net_buf_alloc_len+0x80>
   1daa0:	f1b8 3fff 	cmp.w	r8, #4294967295
   1daa4:	bf08      	it	eq
   1daa6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1daaa:	d009      	beq.n	1dac0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1daac:	f004 ff04 	bl	228b8 <sys_clock_tick_get>
   1dab0:	ebba 0700 	subs.w	r7, sl, r0
   1dab4:	eb6b 0601 	sbc.w	r6, fp, r1
   1dab8:	2e00      	cmp	r6, #0
   1daba:	bfbc      	itt	lt
   1dabc:	2700      	movlt	r7, #0
   1dabe:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dac0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1dac2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1db60 <net_buf_alloc_len+0x120>
   1dac6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1daca:	fb09 8303 	mla	r3, r9, r3, r8
   1dace:	463a      	mov	r2, r7
   1dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dad2:	681b      	ldr	r3, [r3, #0]
   1dad4:	a901      	add	r1, sp, #4
   1dad6:	681d      	ldr	r5, [r3, #0]
   1dad8:	4620      	mov	r0, r4
   1dada:	4633      	mov	r3, r6
   1dadc:	47a8      	blx	r5
   1dade:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1dae0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1dae2:	2800      	cmp	r0, #0
   1dae4:	d131      	bne.n	1db4a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1dae6:	79a0      	ldrb	r0, [r4, #6]
   1dae8:	4621      	mov	r1, r4
   1daea:	fb00 8009 	mla	r0, r0, r9, r8
   1daee:	f00d fe0a 	bl	2b706 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1daf2:	462c      	mov	r4, r5
}
   1daf4:	e024      	b.n	1db40 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1daf6:	8b68      	ldrh	r0, [r5, #26]
   1daf8:	1e43      	subs	r3, r0, #1
   1dafa:	836b      	strh	r3, [r5, #26]
   1dafc:	f381 8811 	msr	BASEPRI, r1
   1db00:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1db04:	7f2a      	ldrb	r2, [r5, #28]
   1db06:	f102 0417 	add.w	r4, r2, #23
   1db0a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1db0e:	8b2c      	ldrh	r4, [r5, #24]
   1db10:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1db12:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1db14:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1db18:	4811      	ldr	r0, [pc, #68]	; (1db60 <net_buf_alloc_len+0x120>)
   1db1a:	4b12      	ldr	r3, [pc, #72]	; (1db64 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1db1c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1db1e:	1a2d      	subs	r5, r5, r0
   1db20:	10ad      	asrs	r5, r5, #2
   1db22:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1db24:	71a5      	strb	r5, [r4, #6]
		goto success;
   1db26:	e7b5      	b.n	1da94 <net_buf_alloc_len+0x54>
   1db28:	f381 8811 	msr	BASEPRI, r1
   1db2c:	f3bf 8f6f 	isb	sy
   1db30:	464a      	mov	r2, r9
   1db32:	4643      	mov	r3, r8
   1db34:	4628      	mov	r0, r5
   1db36:	f003 ff9d 	bl	21a74 <z_impl_k_queue_get>
	if (!buf) {
   1db3a:	4604      	mov	r4, r0
   1db3c:	2800      	cmp	r0, #0
   1db3e:	d1a9      	bne.n	1da94 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1db40:	4620      	mov	r0, r4
   1db42:	b003      	add	sp, #12
   1db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1db48:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1db4a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1db4c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1db4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1db50:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1db52:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1db54:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1db56:	6923      	ldr	r3, [r4, #16]
   1db58:	81e2      	strh	r2, [r4, #14]
   1db5a:	60a3      	str	r3, [r4, #8]
	return buf;
   1db5c:	e7f0      	b.n	1db40 <net_buf_alloc_len+0x100>
   1db5e:	bf00      	nop
   1db60:	20000bd4 	.word	0x20000bd4
   1db64:	ba2e8ba3 	.word	0xba2e8ba3

0001db68 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1db68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db6c:	4d16      	ldr	r5, [pc, #88]	; (1dbc8 <net_buf_unref+0x60>)
   1db6e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1db70:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1db72:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1db74:	b90c      	cbnz	r4, 1db7a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1db76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1db7a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1db7c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1db80:	3b01      	subs	r3, #1
   1db82:	b2db      	uxtb	r3, r3
   1db84:	7123      	strb	r3, [r4, #4]
   1db86:	2b00      	cmp	r3, #0
   1db88:	d1f5      	bne.n	1db76 <net_buf_unref+0xe>
		if (buf->__buf) {
   1db8a:	6921      	ldr	r1, [r4, #16]
   1db8c:	b159      	cbz	r1, 1dba6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1db8e:	7963      	ldrb	r3, [r4, #5]
   1db90:	079b      	lsls	r3, r3, #30
   1db92:	d407      	bmi.n	1dba4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1db94:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1db96:	fb07 5303 	mla	r3, r7, r3, r5
   1db9a:	4620      	mov	r0, r4
   1db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1db9e:	681b      	ldr	r3, [r3, #0]
   1dba0:	689b      	ldr	r3, [r3, #8]
   1dba2:	4798      	blx	r3
			buf->__buf = NULL;
   1dba4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1dba6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1dba8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1dbaa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1dbae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1dbb0:	6a1b      	ldr	r3, [r3, #32]
   1dbb2:	b11b      	cbz	r3, 1dbbc <net_buf_unref+0x54>
			pool->destroy(buf);
   1dbb4:	4620      	mov	r0, r4
   1dbb6:	4798      	blx	r3
{
   1dbb8:	4644      	mov	r4, r8
   1dbba:	e7db      	b.n	1db74 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1dbbc:	4621      	mov	r1, r4
   1dbbe:	fb00 5007 	mla	r0, r0, r7, r5
   1dbc2:	f00d fda0 	bl	2b706 <k_queue_prepend>
}
   1dbc6:	e7f7      	b.n	1dbb8 <net_buf_unref+0x50>
   1dbc8:	20000bd4 	.word	0x20000bd4

0001dbcc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1dbcc:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1dbce:	4b05      	ldr	r3, [pc, #20]	; (1dbe4 <xoshiro128_initialize+0x18>)
   1dbd0:	4805      	ldr	r0, [pc, #20]	; (1dbe8 <xoshiro128_initialize+0x1c>)
   1dbd2:	6018      	str	r0, [r3, #0]
   1dbd4:	f00d fc35 	bl	2b442 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1dbd8:	2800      	cmp	r0, #0
	}
	return 0;
}
   1dbda:	bf0c      	ite	eq
   1dbdc:	f06f 0012 	mvneq.w	r0, #18
   1dbe0:	2000      	movne	r0, #0
   1dbe2:	bd08      	pop	{r3, pc}
   1dbe4:	20002fe8 	.word	0x20002fe8
   1dbe8:	0002c4bc 	.word	0x0002c4bc

0001dbec <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1dbec:	4b08      	ldr	r3, [pc, #32]	; (1dc10 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1dbee:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1dbf0:	1ac3      	subs	r3, r0, r3
{
   1dbf2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1dbf4:	4907      	ldr	r1, [pc, #28]	; (1dc14 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1dbf6:	109b      	asrs	r3, r3, #2
{
   1dbf8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1dbfa:	4359      	muls	r1, r3
   1dbfc:	4806      	ldr	r0, [pc, #24]	; (1dc18 <onoff_stop+0x2c>)
   1dbfe:	2240      	movs	r2, #64	; 0x40
   1dc00:	f00c ffd7 	bl	2abb2 <stop>
	notify(mgr, res);
   1dc04:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1dc06:	4601      	mov	r1, r0
	notify(mgr, res);
   1dc08:	4620      	mov	r0, r4
}
   1dc0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1dc0e:	4718      	bx	r3
   1dc10:	20002ffc 	.word	0x20002ffc
   1dc14:	b6db6db7 	.word	0xb6db6db7
   1dc18:	0002c444 	.word	0x0002c444

0001dc1c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1dc1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1dc1e:	4c0c      	ldr	r4, [pc, #48]	; (1dc50 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1dc20:	4a0c      	ldr	r2, [pc, #48]	; (1dc54 <onoff_start+0x38>)
   1dc22:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1dc24:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1dc26:	9300      	str	r3, [sp, #0]
{
   1dc28:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1dc2a:	460b      	mov	r3, r1
   1dc2c:	490a      	ldr	r1, [pc, #40]	; (1dc58 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1dc2e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1dc30:	4361      	muls	r1, r4
{
   1dc32:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1dc34:	4809      	ldr	r0, [pc, #36]	; (1dc5c <onoff_start+0x40>)
   1dc36:	f00c ffe9 	bl	2ac0c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1dc3a:	1e01      	subs	r1, r0, #0
   1dc3c:	da05      	bge.n	1dc4a <onoff_start+0x2e>
		notify(mgr, err);
   1dc3e:	4630      	mov	r0, r6
   1dc40:	462b      	mov	r3, r5
	}
}
   1dc42:	b002      	add	sp, #8
   1dc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1dc48:	4718      	bx	r3
}
   1dc4a:	b002      	add	sp, #8
   1dc4c:	bd70      	pop	{r4, r5, r6, pc}
   1dc4e:	bf00      	nop
   1dc50:	20002ffc 	.word	0x20002ffc
   1dc54:	0002ac7b 	.word	0x0002ac7b
   1dc58:	b6db6db7 	.word	0xb6db6db7
   1dc5c:	0002c444 	.word	0x0002c444

0001dc60 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1dc60:	2200      	movs	r2, #0
{
   1dc62:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1dc64:	2101      	movs	r1, #1
{
   1dc66:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1dc68:	4610      	mov	r0, r2
   1dc6a:	f7f6 ff97 	bl	14b9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1dc6e:	480f      	ldr	r0, [pc, #60]	; (1dcac <clk_init+0x4c>)
   1dc70:	f002 fb56 	bl	20320 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1dc74:	4b0e      	ldr	r3, [pc, #56]	; (1dcb0 <clk_init+0x50>)
   1dc76:	4298      	cmp	r0, r3
   1dc78:	d115      	bne.n	1dca6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1dc7a:	f00d fa9f 	bl	2b1bc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1dc7e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1dc80:	490c      	ldr	r1, [pc, #48]	; (1dcb4 <clk_init+0x54>)
   1dc82:	4630      	mov	r0, r6
   1dc84:	f009 fda3 	bl	277ce <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1dc88:	2800      	cmp	r0, #0
   1dc8a:	db0b      	blt.n	1dca4 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1dc8c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1dc8e:	4909      	ldr	r1, [pc, #36]	; (1dcb4 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1dc90:	2501      	movs	r5, #1
   1dc92:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1dc94:	f104 001c 	add.w	r0, r4, #28
   1dc98:	f009 fd99 	bl	277ce <onoff_manager_init>
		if (err < 0) {
   1dc9c:	2800      	cmp	r0, #0
   1dc9e:	db01      	blt.n	1dca4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1dca0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1dca2:	2000      	movs	r0, #0
}
   1dca4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1dca6:	f06f 0004 	mvn.w	r0, #4
   1dcaa:	e7fb      	b.n	1dca4 <clk_init+0x44>
   1dcac:	0001dced 	.word	0x0001dced
   1dcb0:	0bad0000 	.word	0x0bad0000
   1dcb4:	0002d30c 	.word	0x0002d30c

0001dcb8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1dcb8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1dcba:	230c      	movs	r3, #12
   1dcbc:	4809      	ldr	r0, [pc, #36]	; (1dce4 <clkstarted_handle.constprop.0+0x2c>)
   1dcbe:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1dcc0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1dcc2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1dcc4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1dcc8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1dcca:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1dccc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1dcce:	4418      	add	r0, r3
   1dcd0:	f00c ff5c 	bl	2ab8c <set_on_state>
	if (callback) {
   1dcd4:	b12d      	cbz	r5, 1dce2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1dcd6:	4632      	mov	r2, r6
   1dcd8:	462b      	mov	r3, r5
   1dcda:	4803      	ldr	r0, [pc, #12]	; (1dce8 <clkstarted_handle.constprop.0+0x30>)
}
   1dcdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1dce0:	4718      	bx	r3
}
   1dce2:	bd70      	pop	{r4, r5, r6, pc}
   1dce4:	20002ffc 	.word	0x20002ffc
   1dce8:	0002c444 	.word	0x0002c444

0001dcec <clock_event_handler>:
	switch (event) {
   1dcec:	b110      	cbz	r0, 1dcf4 <clock_event_handler+0x8>
   1dcee:	2801      	cmp	r0, #1
   1dcf0:	d004      	beq.n	1dcfc <clock_event_handler+0x10>
   1dcf2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1dcf4:	4b03      	ldr	r3, [pc, #12]	; (1dd04 <clock_event_handler+0x18>)
   1dcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dcf8:	075b      	lsls	r3, r3, #29
   1dcfa:	d101      	bne.n	1dd00 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1dcfc:	f7ff bfdc 	b.w	1dcb8 <clkstarted_handle.constprop.0>
}
   1dd00:	4770      	bx	lr
   1dd02:	bf00      	nop
   1dd04:	20002ffc 	.word	0x20002ffc

0001dd08 <generic_hfclk_start>:
{
   1dd08:	b508      	push	{r3, lr}
	__asm__ volatile(
   1dd0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd0e:	f3ef 8111 	mrs	r1, BASEPRI
   1dd12:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd16:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1dd1a:	4a12      	ldr	r2, [pc, #72]	; (1dd64 <generic_hfclk_start+0x5c>)
   1dd1c:	6813      	ldr	r3, [r2, #0]
   1dd1e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1dd22:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1dd26:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1dd28:	d00c      	beq.n	1dd44 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1dd2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1dd2e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1dd32:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1dd36:	f013 0301 	ands.w	r3, r3, #1
   1dd3a:	d003      	beq.n	1dd44 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1dd3c:	480a      	ldr	r0, [pc, #40]	; (1dd68 <generic_hfclk_start+0x60>)
   1dd3e:	f00c ff25 	bl	2ab8c <set_on_state>
			already_started = true;
   1dd42:	2301      	movs	r3, #1
	__asm__ volatile(
   1dd44:	f381 8811 	msr	BASEPRI, r1
   1dd48:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1dd4c:	b123      	cbz	r3, 1dd58 <generic_hfclk_start+0x50>
}
   1dd4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1dd52:	2000      	movs	r0, #0
   1dd54:	f7ff bfb0 	b.w	1dcb8 <clkstarted_handle.constprop.0>
}
   1dd58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1dd5c:	2001      	movs	r0, #1
   1dd5e:	f002 bacf 	b.w	20300 <nrfx_clock_start>
   1dd62:	bf00      	nop
   1dd64:	2000304c 	.word	0x2000304c
   1dd68:	2000303c 	.word	0x2000303c

0001dd6c <api_blocking_start>:
{
   1dd6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1dd6e:	2200      	movs	r2, #0
   1dd70:	2301      	movs	r3, #1
   1dd72:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1dd76:	ab04      	add	r3, sp, #16
   1dd78:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1dd7c:	4a09      	ldr	r2, [pc, #36]	; (1dda4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1dd7e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1dd82:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1dd84:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1dd88:	f00c ff70 	bl	2ac6c <api_start>
	if (err < 0) {
   1dd8c:	2800      	cmp	r0, #0
   1dd8e:	db05      	blt.n	1dd9c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1dd90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dd94:	2300      	movs	r3, #0
   1dd96:	4668      	mov	r0, sp
   1dd98:	f003 fec6 	bl	21b28 <z_impl_k_sem_take>
}
   1dd9c:	b007      	add	sp, #28
   1dd9e:	f85d fb04 	ldr.w	pc, [sp], #4
   1dda2:	bf00      	nop
   1dda4:	0002ac99 	.word	0x0002ac99

0001dda8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dda8:	4b09      	ldr	r3, [pc, #36]	; (1ddd0 <generic_hfclk_stop+0x28>)
   1ddaa:	f3bf 8f5b 	dmb	ish
   1ddae:	e853 2f00 	ldrex	r2, [r3]
   1ddb2:	f022 0102 	bic.w	r1, r2, #2
   1ddb6:	e843 1000 	strex	r0, r1, [r3]
   1ddba:	2800      	cmp	r0, #0
   1ddbc:	d1f7      	bne.n	1ddae <generic_hfclk_stop+0x6>
   1ddbe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1ddc2:	07d3      	lsls	r3, r2, #31
   1ddc4:	d402      	bmi.n	1ddcc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ddc6:	2001      	movs	r0, #1
   1ddc8:	f00d b9f3 	b.w	2b1b2 <nrfx_clock_stop>
}
   1ddcc:	4770      	bx	lr
   1ddce:	bf00      	nop
   1ddd0:	2000304c 	.word	0x2000304c

0001ddd4 <z_nrf_clock_control_lf_on>:
{
   1ddd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ddd6:	4928      	ldr	r1, [pc, #160]	; (1de78 <z_nrf_clock_control_lf_on+0xa4>)
   1ddd8:	f3bf 8f5b 	dmb	ish
   1dddc:	4606      	mov	r6, r0
   1ddde:	2201      	movs	r2, #1
   1dde0:	e851 3f00 	ldrex	r3, [r1]
   1dde4:	e841 2000 	strex	r0, r2, [r1]
   1dde8:	2800      	cmp	r0, #0
   1ddea:	d1f9      	bne.n	1dde0 <z_nrf_clock_control_lf_on+0xc>
   1ddec:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1ddf0:	b933      	cbnz	r3, 1de00 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ddf2:	4922      	ldr	r1, [pc, #136]	; (1de7c <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   1ddf4:	4822      	ldr	r0, [pc, #136]	; (1de80 <z_nrf_clock_control_lf_on+0xac>)
   1ddf6:	604b      	str	r3, [r1, #4]
   1ddf8:	60cb      	str	r3, [r1, #12]
   1ddfa:	608a      	str	r2, [r1, #8]
   1ddfc:	f009 fcfa 	bl	277f4 <onoff_request>
	switch (start_mode) {
   1de00:	1e73      	subs	r3, r6, #1
   1de02:	2b01      	cmp	r3, #1
   1de04:	d820      	bhi.n	1de48 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1de06:	f00d fbd4 	bl	2b5b2 <k_is_in_isr>
   1de0a:	4604      	mov	r4, r0
   1de0c:	b910      	cbnz	r0, 1de14 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1de0e:	4b1d      	ldr	r3, [pc, #116]	; (1de84 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   1de10:	781b      	ldrb	r3, [r3, #0]
   1de12:	bb53      	cbnz	r3, 1de6a <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   1de14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de18:	f3ef 8511 	mrs	r5, BASEPRI
   1de1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1de20:	f3bf 8f6f 	isb	sy
   1de24:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1de26:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1de2a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1de2e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1de32:	03d2      	lsls	r2, r2, #15
   1de34:	d509      	bpl.n	1de4a <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1de36:	079b      	lsls	r3, r3, #30
   1de38:	d001      	beq.n	1de3e <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1de3a:	2e01      	cmp	r6, #1
   1de3c:	d105      	bne.n	1de4a <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   1de3e:	b174      	cbz	r4, 1de5e <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   1de40:	f385 8811 	msr	BASEPRI, r5
   1de44:	f3bf 8f6f 	isb	sy
}
   1de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1de4a:	b11c      	cbz	r4, 1de54 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1de4c:	4628      	mov	r0, r5
   1de4e:	f7f6 fe03 	bl	14a58 <arch_cpu_atomic_idle>
}
   1de52:	e7ea      	b.n	1de2a <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   1de54:	2100      	movs	r1, #0
   1de56:	2021      	movs	r0, #33	; 0x21
   1de58:	f004 fb48 	bl	224ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1de5c:	e7e5      	b.n	1de2a <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   1de5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de62:	2202      	movs	r2, #2
   1de64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1de68:	e7ee      	b.n	1de48 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   1de6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de6e:	2202      	movs	r2, #2
   1de70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1de74:	4605      	mov	r5, r0
}
   1de76:	e7d6      	b.n	1de26 <z_nrf_clock_control_lf_on+0x52>
   1de78:	20003050 	.word	0x20003050
   1de7c:	20002fec 	.word	0x20002fec
   1de80:	20003018 	.word	0x20003018
   1de84:	20004ac3 	.word	0x20004ac3

0001de88 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1de88:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1de8a:	4c04      	ldr	r4, [pc, #16]	; (1de9c <rtt_console_init+0x14>)
   1de8c:	4620      	mov	r0, r4
   1de8e:	f7f4 ff6d 	bl	12d6c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1de92:	4620      	mov	r0, r4
   1de94:	f7f7 fb9a 	bl	155cc <__stdout_hook_install>

	return 0;
}
   1de98:	2000      	movs	r0, #0
   1de9a:	bd10      	pop	{r4, pc}
   1de9c:	0001dea1 	.word	0x0001dea1

0001dea0 <rtt_console_out>:
{
   1dea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dea2:	4e13      	ldr	r6, [pc, #76]	; (1def0 <rtt_console_out+0x50>)
	char c = (char)character;
   1dea4:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1dea8:	4604      	mov	r4, r0
	char c = (char)character;
   1deaa:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1deac:	f003 fa82 	bl	213b4 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1deb0:	2201      	movs	r2, #1
   1deb2:	f10d 0107 	add.w	r1, sp, #7
   1deb6:	2000      	movs	r0, #0
   1deb8:	f003 fa42 	bl	21340 <SEGGER_RTT_WriteNoLock>
   1debc:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1debe:	f003 fa83 	bl	213c8 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1dec2:	b127      	cbz	r7, 1dece <rtt_console_out+0x2e>
			host_present = true;
   1dec4:	2301      	movs	r3, #1
   1dec6:	7033      	strb	r3, [r6, #0]
}
   1dec8:	4620      	mov	r0, r4
   1deca:	b003      	add	sp, #12
   1decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1dece:	7833      	ldrb	r3, [r6, #0]
   1ded0:	2b00      	cmp	r3, #0
   1ded2:	d0f9      	beq.n	1dec8 <rtt_console_out+0x28>
			if (max_cnt) {
   1ded4:	3d01      	subs	r5, #1
   1ded6:	d008      	beq.n	1deea <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1ded8:	f00d fb6b 	bl	2b5b2 <k_is_in_isr>
   1dedc:	2800      	cmp	r0, #0
   1dede:	d1e5      	bne.n	1deac <rtt_console_out+0xc>
   1dee0:	2100      	movs	r1, #0
   1dee2:	2042      	movs	r0, #66	; 0x42
   1dee4:	f004 fb02 	bl	224ec <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1dee8:	e7e0      	b.n	1deac <rtt_console_out+0xc>
				host_present = false;
   1deea:	7035      	strb	r5, [r6, #0]
   1deec:	e7ec      	b.n	1dec8 <rtt_console_out+0x28>
   1deee:	bf00      	nop
   1def0:	20003ead 	.word	0x20003ead

0001def4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1def4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1def6:	4b08      	ldr	r3, [pc, #32]	; (1df18 <uart_console_init+0x24>)
   1def8:	4808      	ldr	r0, [pc, #32]	; (1df1c <uart_console_init+0x28>)
   1defa:	6018      	str	r0, [r3, #0]
   1defc:	f00d faa1 	bl	2b442 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1df00:	b138      	cbz	r0, 1df12 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1df02:	4807      	ldr	r0, [pc, #28]	; (1df20 <uart_console_init+0x2c>)
   1df04:	f7f7 fb62 	bl	155cc <__stdout_hook_install>
	__printk_hook_install(console_out);
   1df08:	4805      	ldr	r0, [pc, #20]	; (1df20 <uart_console_init+0x2c>)
   1df0a:	f7f4 ff2f 	bl	12d6c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1df0e:	2000      	movs	r0, #0
}
   1df10:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1df12:	f06f 0012 	mvn.w	r0, #18
   1df16:	e7fb      	b.n	1df10 <uart_console_init+0x1c>
   1df18:	20003054 	.word	0x20003054
   1df1c:	0002c4d4 	.word	0x0002c4d4
   1df20:	0001df25 	.word	0x0001df25

0001df24 <console_out>:
	if ('\n' == c) {
   1df24:	280a      	cmp	r0, #10
{
   1df26:	b538      	push	{r3, r4, r5, lr}
   1df28:	4d07      	ldr	r5, [pc, #28]	; (1df48 <console_out+0x24>)
   1df2a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1df2c:	d104      	bne.n	1df38 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1df2e:	6828      	ldr	r0, [r5, #0]
   1df30:	6883      	ldr	r3, [r0, #8]
   1df32:	210d      	movs	r1, #13
   1df34:	685b      	ldr	r3, [r3, #4]
   1df36:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1df38:	6828      	ldr	r0, [r5, #0]
   1df3a:	6883      	ldr	r3, [r0, #8]
   1df3c:	b2e1      	uxtb	r1, r4
   1df3e:	685b      	ldr	r3, [r3, #4]
   1df40:	4798      	blx	r3
}
   1df42:	4620      	mov	r0, r4
   1df44:	bd38      	pop	{r3, r4, r5, pc}
   1df46:	bf00      	nop
   1df48:	20003054 	.word	0x20003054

0001df4c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1df4c:	b530      	push	{r4, r5, lr}
	return port->config;
   1df4e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1df50:	7b04      	ldrb	r4, [r0, #12]
   1df52:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1df56:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1df5a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1df5e:	b085      	sub	sp, #20
   1df60:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1df64:	d105      	bne.n	1df72 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   1df66:	4628      	mov	r0, r5
   1df68:	f002 fe82 	bl	20c70 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1df6c:	2000      	movs	r0, #0
}
   1df6e:	b005      	add	sp, #20
   1df70:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1df72:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1df76:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1df7a:	d134      	bne.n	1dfe6 <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1df7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1df80:	bf0c      	ite	eq
   1df82:	2304      	moveq	r3, #4
   1df84:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1df86:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1df8a:	6883      	ldr	r3, [r0, #8]
   1df8c:	fa23 f101 	lsr.w	r1, r3, r1
   1df90:	07c9      	lsls	r1, r1, #31
   1df92:	d41a      	bmi.n	1dfca <gpio_nrfx_pin_interrupt_configure+0x7e>
   1df94:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1df98:	d117      	bne.n	1dfca <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1df9a:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1df9c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1df9e:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1dfa2:	4a1c      	ldr	r2, [pc, #112]	; (1e014 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dfa4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1dfa8:	bf18      	it	ne
   1dfaa:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1dfb2:	07db      	lsls	r3, r3, #31
   1dfb4:	d409      	bmi.n	1dfca <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dfb6:	f10d 0407 	add.w	r4, sp, #7
   1dfba:	4621      	mov	r1, r4
   1dfbc:	4628      	mov	r0, r5
   1dfbe:	f002 fdbb 	bl	20b38 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1dfc2:	4b15      	ldr	r3, [pc, #84]	; (1e018 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1dfc4:	4298      	cmp	r0, r3
   1dfc6:	d019      	beq.n	1dffc <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1dfc8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dfca:	2300      	movs	r3, #0
   1dfcc:	4619      	mov	r1, r3
   1dfce:	aa02      	add	r2, sp, #8
   1dfd0:	4628      	mov	r0, r5
   1dfd2:	f002 fc8b 	bl	208ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dfd6:	4b11      	ldr	r3, [pc, #68]	; (1e01c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1dfd8:	4298      	cmp	r0, r3
   1dfda:	d118      	bne.n	1e00e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1dfdc:	2101      	movs	r1, #1
   1dfde:	4628      	mov	r0, r5
   1dfe0:	f002 fdfe 	bl	20be0 <nrfx_gpiote_trigger_enable>
   1dfe4:	e7c2      	b.n	1df6c <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1dfe6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1dfea:	d005      	beq.n	1dff8 <gpio_nrfx_pin_interrupt_configure+0xac>
   1dfec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1dff0:	bf0c      	ite	eq
   1dff2:	2302      	moveq	r3, #2
   1dff4:	2301      	movne	r3, #1
   1dff6:	e7c6      	b.n	1df86 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1dff8:	2303      	movs	r3, #3
   1dffa:	e7c4      	b.n	1df86 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   1dffc:	4620      	mov	r0, r4
   1dffe:	f002 fde9 	bl	20bd4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1e002:	4b06      	ldr	r3, [pc, #24]	; (1e01c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1e004:	4298      	cmp	r0, r3
   1e006:	d0df      	beq.n	1dfc8 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
   1e008:	f06f 000b 	mvn.w	r0, #11
   1e00c:	e7af      	b.n	1df6e <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   1e00e:	f06f 0015 	mvn.w	r0, #21
   1e012:	e7ac      	b.n	1df6e <gpio_nrfx_pin_interrupt_configure+0x22>
   1e014:	50000300 	.word	0x50000300
   1e018:	0bad0004 	.word	0x0bad0004
   1e01c:	0bad0000 	.word	0x0bad0000

0001e020 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e020:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1e022:	f002 fdc7 	bl	20bb4 <nrfx_gpiote_is_init>
   1e026:	4604      	mov	r4, r0
   1e028:	b968      	cbnz	r0, 1e046 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1e02a:	f002 fd9b 	bl	20b64 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1e02e:	4b08      	ldr	r3, [pc, #32]	; (1e050 <gpio_nrfx_init+0x30>)
   1e030:	4298      	cmp	r0, r3
   1e032:	d10a      	bne.n	1e04a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1e034:	4807      	ldr	r0, [pc, #28]	; (1e054 <gpio_nrfx_init+0x34>)
   1e036:	4621      	mov	r1, r4
   1e038:	f002 fd78 	bl	20b2c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e03c:	4622      	mov	r2, r4
   1e03e:	2105      	movs	r1, #5
   1e040:	2006      	movs	r0, #6
   1e042:	f7f6 fdab 	bl	14b9c <z_arm_irq_priority_set>
		return 0;
   1e046:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1e048:	bd10      	pop	{r4, pc}
		return -EIO;
   1e04a:	f06f 0004 	mvn.w	r0, #4
   1e04e:	e7fb      	b.n	1e048 <gpio_nrfx_init+0x28>
   1e050:	0bad0000 	.word	0x0bad0000
   1e054:	0001e059 	.word	0x0001e059

0001e058 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e058:	0942      	lsrs	r2, r0, #5
{
   1e05a:	b570      	push	{r4, r5, r6, lr}
   1e05c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e05e:	d002      	beq.n	1e066 <nrfx_gpio_handler+0xe>
   1e060:	2a01      	cmp	r2, #1
   1e062:	d015      	beq.n	1e090 <nrfx_gpio_handler+0x38>
}
   1e064:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e066:	4e0b      	ldr	r6, [pc, #44]	; (1e094 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1e068:	6932      	ldr	r2, [r6, #16]
   1e06a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e06c:	2900      	cmp	r1, #0
   1e06e:	d0f9      	beq.n	1e064 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1e070:	f003 031f 	and.w	r3, r3, #31
   1e074:	2501      	movs	r5, #1
   1e076:	680c      	ldr	r4, [r1, #0]
   1e078:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1e07a:	688a      	ldr	r2, [r1, #8]
   1e07c:	402a      	ands	r2, r5
   1e07e:	d002      	beq.n	1e086 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1e080:	684b      	ldr	r3, [r1, #4]
   1e082:	4630      	mov	r0, r6
   1e084:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e086:	2c00      	cmp	r4, #0
   1e088:	d0ec      	beq.n	1e064 <nrfx_gpio_handler+0xc>
   1e08a:	4621      	mov	r1, r4
   1e08c:	6824      	ldr	r4, [r4, #0]
   1e08e:	e7f4      	b.n	1e07a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e090:	4e01      	ldr	r6, [pc, #4]	; (1e098 <nrfx_gpio_handler+0x40>)
   1e092:	e7e9      	b.n	1e068 <nrfx_gpio_handler+0x10>
   1e094:	0002c45c 	.word	0x0002c45c
   1e098:	0002c474 	.word	0x0002c474

0001e09c <gpio_nrfx_pin_configure>:
{
   1e09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1e0a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e0a4:	f898 300c 	ldrb.w	r3, [r8, #12]
   1e0a8:	f001 061f 	and.w	r6, r1, #31
{
   1e0ac:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e0ae:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1e0b2:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e0b4:	4630      	mov	r0, r6
   1e0b6:	f10d 0103 	add.w	r1, sp, #3
{
   1e0ba:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e0bc:	f002 fd3c 	bl	20b38 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1e0c0:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e0c4:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1e0c6:	d10b      	bne.n	1e0e0 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1e0c8:	4630      	mov	r0, r6
   1e0ca:	f002 fdf9 	bl	20cc0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1e0ce:	4b43      	ldr	r3, [pc, #268]	; (1e1dc <gpio_nrfx_pin_configure+0x140>)
   1e0d0:	4599      	cmp	r9, r3
   1e0d2:	d103      	bne.n	1e0dc <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   1e0d4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1e0d8:	f002 fd76 	bl	20bc8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e0dc:	2000      	movs	r0, #0
   1e0de:	e057      	b.n	1e190 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e0e0:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e0e2:	4619      	mov	r1, r3
   1e0e4:	aa02      	add	r2, sp, #8
   1e0e6:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e0e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e0ec:	f002 fbfe 	bl	208ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e0f0:	4b3a      	ldr	r3, [pc, #232]	; (1e1dc <gpio_nrfx_pin_configure+0x140>)
   1e0f2:	4298      	cmp	r0, r3
   1e0f4:	d002      	beq.n	1e0fc <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1e0f6:	f06f 0015 	mvn.w	r0, #21
   1e0fa:	e049      	b.n	1e190 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
   1e0fc:	4581      	cmp	r9, r0
   1e0fe:	d103      	bne.n	1e108 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   1e100:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1e104:	f002 fd60 	bl	20bc8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1e108:	03a5      	lsls	r5, r4, #14
   1e10a:	d554      	bpl.n	1e1b6 <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1e10c:	f240 3306 	movw	r3, #774	; 0x306
   1e110:	4023      	ands	r3, r4
   1e112:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1e116:	d03e      	beq.n	1e196 <gpio_nrfx_pin_configure+0xfa>
   1e118:	d80c      	bhi.n	1e134 <gpio_nrfx_pin_configure+0x98>
   1e11a:	2b06      	cmp	r3, #6
   1e11c:	d015      	beq.n	1e14a <gpio_nrfx_pin_configure+0xae>
   1e11e:	d804      	bhi.n	1e12a <gpio_nrfx_pin_configure+0x8e>
   1e120:	b19b      	cbz	r3, 1e14a <gpio_nrfx_pin_configure+0xae>
   1e122:	2b02      	cmp	r3, #2
   1e124:	d1e7      	bne.n	1e0f6 <gpio_nrfx_pin_configure+0x5a>
   1e126:	2304      	movs	r3, #4
   1e128:	e00f      	b.n	1e14a <gpio_nrfx_pin_configure+0xae>
   1e12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1e12e:	d1e2      	bne.n	1e0f6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   1e130:	2301      	movs	r3, #1
   1e132:	e00a      	b.n	1e14a <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1e134:	f240 2202 	movw	r2, #514	; 0x202
   1e138:	4293      	cmp	r3, r2
   1e13a:	d02e      	beq.n	1e19a <gpio_nrfx_pin_configure+0xfe>
   1e13c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1e140:	d02d      	beq.n	1e19e <gpio_nrfx_pin_configure+0x102>
   1e142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1e146:	d1d6      	bne.n	1e0f6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   1e148:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1e14a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1e14e:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1e152:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1e156:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1e158:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1e15c:	bf54      	ite	pl
   1e15e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1e162:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e164:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1e166:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e16a:	d51a      	bpl.n	1e1a2 <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1e16c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e170:	2101      	movs	r1, #1
   1e172:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   1e176:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1e17a:	2200      	movs	r2, #0
   1e17c:	a901      	add	r1, sp, #4
   1e17e:	4630      	mov	r0, r6
   1e180:	f002 fc62 	bl	20a48 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e184:	4b15      	ldr	r3, [pc, #84]	; (1e1dc <gpio_nrfx_pin_configure+0x140>)
   1e186:	4298      	cmp	r0, r3
   1e188:	bf14      	ite	ne
   1e18a:	f06f 0015 	mvnne.w	r0, #21
   1e18e:	2000      	moveq	r0, #0
}
   1e190:	b005      	add	sp, #20
   1e192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1e196:	2307      	movs	r3, #7
   1e198:	e7d7      	b.n	1e14a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   1e19a:	2305      	movs	r3, #5
   1e19c:	e7d5      	b.n	1e14a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   1e19e:	2303      	movs	r3, #3
   1e1a0:	e7d3      	b.n	1e14a <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1e1a2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1e1a4:	bf41      	itttt	mi
   1e1a6:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   1e1aa:	2101      	movmi	r1, #1
   1e1ac:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   1e1b0:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
   1e1b4:	e7e1      	b.n	1e17a <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
   1e1b6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e1b8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1e1bc:	bf54      	ite	pl
   1e1be:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1e1c2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e1c4:	461a      	mov	r2, r3
   1e1c6:	a901      	add	r1, sp, #4
   1e1c8:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1e1ca:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e1ce:	f002 fb8d 	bl	208ec <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e1d2:	4b02      	ldr	r3, [pc, #8]	; (1e1dc <gpio_nrfx_pin_configure+0x140>)
   1e1d4:	4298      	cmp	r0, r3
   1e1d6:	d081      	beq.n	1e0dc <gpio_nrfx_pin_configure+0x40>
   1e1d8:	e78d      	b.n	1e0f6 <gpio_nrfx_pin_configure+0x5a>
   1e1da:	bf00      	nop
   1e1dc:	0bad0000 	.word	0x0bad0000

0001e1e0 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
   1e1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e1e4:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1e1e6:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e1e8:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1e1ea:	6a26      	ldr	r6, [r4, #32]
{
   1e1ec:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1e1ee:	1d3a      	adds	r2, r7, #4
   1e1f0:	2100      	movs	r1, #0
   1e1f2:	4630      	mov	r0, r6
   1e1f4:	f00c fe8d 	bl	2af12 <pinctrl_lookup_state>
	if (ret < 0) {
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	db32      	blt.n	1e262 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1e1fc:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e1fe:	6832      	ldr	r2, [r6, #0]
   1e200:	7919      	ldrb	r1, [r3, #4]
   1e202:	6818      	ldr	r0, [r3, #0]
   1e204:	f00c fea2 	bl	2af4c <pinctrl_configure_pins>
	if (err < 0) {
   1e208:	2800      	cmp	r0, #0
   1e20a:	db2a      	blt.n	1e262 <spi_nrfx_init+0x82>
		return err;
	}
#endif

	dev_config->irq_connect();
   1e20c:	69e3      	ldr	r3, [r4, #28]
   1e20e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e210:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e212:	2601      	movs	r6, #1
   1e214:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1e218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e21c:	429c      	cmp	r4, r3
   1e21e:	d304      	bcc.n	1e22a <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1e220:	4628      	mov	r0, r5
   1e222:	f00c fde1 	bl	2ade8 <spi_context_unlock_unconditionally>

	return 0;
   1e226:	2000      	movs	r0, #0
   1e228:	e01b      	b.n	1e262 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1e22a:	6820      	ldr	r0, [r4, #0]
   1e22c:	f00d f909 	bl	2b442 <z_device_is_ready>
   1e230:	b9d8      	cbnz	r0, 1e26a <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1e232:	6823      	ldr	r3, [r4, #0]
   1e234:	6819      	ldr	r1, [r3, #0]
   1e236:	7923      	ldrb	r3, [r4, #4]
   1e238:	466c      	mov	r4, sp
   1e23a:	b08a      	sub	sp, #40	; 0x28
   1e23c:	466a      	mov	r2, sp
   1e23e:	481c      	ldr	r0, [pc, #112]	; (1e2b0 <spi_nrfx_init+0xd0>)
   1e240:	61d3      	str	r3, [r2, #28]
   1e242:	2302      	movs	r3, #2
   1e244:	f882 3020 	strb.w	r3, [r2, #32]
   1e248:	4b1a      	ldr	r3, [pc, #104]	; (1e2b4 <spi_nrfx_init+0xd4>)
   1e24a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1e24e:	481a      	ldr	r0, [pc, #104]	; (1e2b8 <spi_nrfx_init+0xd8>)
   1e250:	f842 3f10 	str.w	r3, [r2, #16]!
   1e254:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1e258:	f00c fd8d 	bl	2ad76 <z_log_msg_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   1e25c:	f06f 0012 	mvn.w	r0, #18
   1e260:	46a5      	mov	sp, r4
}
   1e262:	370c      	adds	r7, #12
   1e264:	46bd      	mov	sp, r7
   1e266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1e26a:	6820      	ldr	r0, [r4, #0]
   1e26c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1e26e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1e270:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   1e274:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e278:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e27c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1e27e:	bf54      	ite	pl
   1e280:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1e284:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1e288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e28c:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e290:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e292:	bf4c      	ite	mi
   1e294:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e298:	ea2c 0308 	bicpl.w	r3, ip, r8
   1e29c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1e2a0:	f8d9 3000 	ldr.w	r3, [r9]
   1e2a4:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1e2a6:	2800      	cmp	r0, #0
   1e2a8:	dbdb      	blt.n	1e262 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1e2aa:	3408      	adds	r4, #8
   1e2ac:	e7b2      	b.n	1e214 <spi_nrfx_init+0x34>
   1e2ae:	bf00      	nop
   1e2b0:	0002fa4a 	.word	0x0002fa4a
   1e2b4:	01000004 	.word	0x01000004
   1e2b8:	0002c884 	.word	0x0002c884

0001e2bc <transfer_next_chunk>:
{
   1e2bc:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1e2be:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1e2c0:	6daa      	ldr	r2, [r5, #88]	; 0x58
		return ctx->rx_len;
   1e2c2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   1e2c4:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1e2c6:	b982      	cbnz	r2, 1e2ea <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1e2c8:	bb73      	cbnz	r3, 1e328 <transfer_next_chunk+0x6c>
	int error = 0;
   1e2ca:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1e2cc:	2200      	movs	r2, #0
   1e2ce:	4611      	mov	r1, r2
   1e2d0:	4628      	mov	r0, r5
   1e2d2:	f00c fd67 	bl	2ada4 <_spi_context_cs_control>
	ctx->sync_status = status;
   1e2d6:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1e2d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1e2dc:	f003 fbfe 	bl	21adc <z_impl_k_sem_give>
	dev_data->busy = false;
   1e2e0:	2300      	movs	r3, #0
   1e2e2:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1e2e6:	b005      	add	sp, #20
   1e2e8:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1e2ea:	4611      	mov	r1, r2
   1e2ec:	b113      	cbz	r3, 1e2f4 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1e2ee:	429a      	cmp	r2, r3
   1e2f0:	bf28      	it	cs
   1e2f2:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1e2f4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = dev->config;
   1e2f6:	6840      	ldr	r0, [r0, #4]
		xfer.p_tx_buffer = ctx->tx_buf;
   1e2f8:	9400      	str	r4, [sp, #0]
		dev_data->chunk_len = chunk_len;
   1e2fa:	66a9      	str	r1, [r5, #104]	; 0x68
	return !!(ctx->tx_buf && ctx->tx_len);
   1e2fc:	b1b4      	cbz	r4, 1e32c <transfer_next_chunk+0x70>
   1e2fe:	2a00      	cmp	r2, #0
   1e300:	bf18      	it	ne
   1e302:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e304:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1e306:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e308:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1e30a:	b18a      	cbz	r2, 1e330 <transfer_next_chunk+0x74>
   1e30c:	2b00      	cmp	r3, #0
   1e30e:	bf18      	it	ne
   1e310:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1e312:	2200      	movs	r2, #0
   1e314:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e316:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1e318:	f002 fef8 	bl	2110c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1e31c:	4b05      	ldr	r3, [pc, #20]	; (1e334 <transfer_next_chunk+0x78>)
   1e31e:	4298      	cmp	r0, r3
   1e320:	d0e1      	beq.n	1e2e6 <transfer_next_chunk+0x2a>
		error = -EIO;
   1e322:	f06f 0404 	mvn.w	r4, #4
   1e326:	e7d1      	b.n	1e2cc <transfer_next_chunk+0x10>
   1e328:	4619      	mov	r1, r3
   1e32a:	e7e3      	b.n	1e2f4 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1e32c:	4622      	mov	r2, r4
   1e32e:	e7e9      	b.n	1e304 <transfer_next_chunk+0x48>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1e330:	4613      	mov	r3, r2
   1e332:	e7ee      	b.n	1e312 <transfer_next_chunk+0x56>
   1e334:	0bad0000 	.word	0x0bad0000

0001e338 <event_handler>:
{
   1e338:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1e33a:	7803      	ldrb	r3, [r0, #0]
{
   1e33c:	b086      	sub	sp, #24
   1e33e:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1e340:	2b00      	cmp	r3, #0
   1e342:	d154      	bne.n	1e3ee <event_handler+0xb6>
	if (!ctx->tx_len) {
   1e344:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1e346:	b163      	cbz	r3, 1e362 <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e348:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1e34a:	429a      	cmp	r2, r3
   1e34c:	d91e      	bls.n	1e38c <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1e34e:	4b29      	ldr	r3, [pc, #164]	; (1e3f4 <event_handler+0xbc>)
   1e350:	9305      	str	r3, [sp, #20]
   1e352:	4829      	ldr	r0, [pc, #164]	; (1e3f8 <event_handler+0xc0>)
   1e354:	2302      	movs	r3, #2
   1e356:	aa04      	add	r2, sp, #16
   1e358:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e35c:	9304      	str	r3, [sp, #16]
   1e35e:	f00c fd0a 	bl	2ad76 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1e362:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e364:	b163      	cbz	r3, 1e380 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e366:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1e368:	429a      	cmp	r2, r3
   1e36a:	d927      	bls.n	1e3bc <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1e36c:	4b21      	ldr	r3, [pc, #132]	; (1e3f4 <event_handler+0xbc>)
   1e36e:	9305      	str	r3, [sp, #20]
   1e370:	4821      	ldr	r0, [pc, #132]	; (1e3f8 <event_handler+0xc0>)
   1e372:	2302      	movs	r3, #2
   1e374:	aa04      	add	r2, sp, #16
   1e376:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e37a:	9304      	str	r3, [sp, #16]
   1e37c:	f00c fcfb 	bl	2ad76 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1e380:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1e382:	b006      	add	sp, #24
   1e384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1e388:	f7ff bf98 	b.w	1e2bc <transfer_next_chunk>
	ctx->tx_len -= len;
   1e38c:	1a9b      	subs	r3, r3, r2
   1e38e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1e390:	b973      	cbnz	r3, 1e3b0 <event_handler+0x78>
		++ctx->current_tx;
   1e392:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1e394:	3308      	adds	r3, #8
   1e396:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1e398:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1e39a:	3b01      	subs	r3, #1
   1e39c:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1e39e:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1e3a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e3a6:	3148      	adds	r1, #72	; 0x48
   1e3a8:	f00c fcd4 	bl	2ad54 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1e3ac:	6560      	str	r0, [r4, #84]	; 0x54
   1e3ae:	e7d8      	b.n	1e362 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1e3b0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1e3b2:	2b00      	cmp	r3, #0
   1e3b4:	d0d5      	beq.n	1e362 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1e3b6:	4413      	add	r3, r2
   1e3b8:	654b      	str	r3, [r1, #84]	; 0x54
   1e3ba:	e7d2      	b.n	1e362 <event_handler+0x2a>
	ctx->rx_len -= len;
   1e3bc:	1a9b      	subs	r3, r3, r2
   1e3be:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1e3c0:	b97b      	cbnz	r3, 1e3e2 <event_handler+0xaa>
		++ctx->current_rx;
   1e3c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e3c4:	3308      	adds	r3, #8
   1e3c6:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1e3c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e3ca:	3b01      	subs	r3, #1
   1e3cc:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1e3ce:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e3d2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e3d6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e3da:	f00c fcbb 	bl	2ad54 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1e3de:	65e0      	str	r0, [r4, #92]	; 0x5c
   1e3e0:	e7ce      	b.n	1e380 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1e3e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e3e4:	2b00      	cmp	r3, #0
   1e3e6:	d0cb      	beq.n	1e380 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1e3e8:	4413      	add	r3, r2
   1e3ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e3ec:	e7c8      	b.n	1e380 <event_handler+0x48>
}
   1e3ee:	b006      	add	sp, #24
   1e3f0:	bd10      	pop	{r4, pc}
   1e3f2:	bf00      	nop
   1e3f4:	0002fa6e 	.word	0x0002fa6e
   1e3f8:	0002c884 	.word	0x0002c884

0001e3fc <spi_nrfx_transceive>:
{
   1e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e400:	b08b      	sub	sp, #44	; 0x2c
   1e402:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e404:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e406:	6904      	ldr	r4, [r0, #16]
{
   1e408:	af00      	add	r7, sp, #0
   1e40a:	049b      	lsls	r3, r3, #18
   1e40c:	4680      	mov	r8, r0
   1e40e:	460e      	mov	r6, r1
   1e410:	60fa      	str	r2, [r7, #12]
   1e412:	d434      	bmi.n	1e47e <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1e414:	f04f 32ff 	mov.w	r2, #4294967295
   1e418:	f04f 33ff 	mov.w	r3, #4294967295
   1e41c:	f104 0010 	add.w	r0, r4, #16
   1e420:	f003 fb82 	bl	21b28 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e424:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1e426:	f8d8 9010 	ldr.w	r9, [r8, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1e42a:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1e42e:	607b      	str	r3, [r7, #4]
   1e430:	b123      	cbz	r3, 1e43c <spi_nrfx_transceive+0x40>
   1e432:	f8d9 3000 	ldr.w	r3, [r9]
   1e436:	429e      	cmp	r6, r3
   1e438:	f000 80cc 	beq.w	1e5d4 <spi_nrfx_transceive+0x1d8>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1e43c:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1e440:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1e444:	d022      	beq.n	1e48c <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1e446:	4b99      	ldr	r3, [pc, #612]	; (1e6ac <spi_nrfx_transceive+0x2b0>)
   1e448:	627b      	str	r3, [r7, #36]	; 0x24
   1e44a:	4899      	ldr	r0, [pc, #612]	; (1e6b0 <spi_nrfx_transceive+0x2b4>)
   1e44c:	2302      	movs	r3, #2
   1e44e:	f107 0220 	add.w	r2, r7, #32
   1e452:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
   1e456:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1e45a:	623b      	str	r3, [r7, #32]
   1e45c:	f00c fc8b 	bl	2ad76 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e460:	6823      	ldr	r3, [r4, #0]
   1e462:	889b      	ldrh	r3, [r3, #4]
   1e464:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1e468:	d104      	bne.n	1e474 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
   1e46a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1e46c:	f104 0010 	add.w	r0, r4, #16
   1e470:	f003 fb34 	bl	21adc <z_impl_k_sem_give>
}
   1e474:	4628      	mov	r0, r5
   1e476:	372c      	adds	r7, #44	; 0x2c
   1e478:	46bd      	mov	sp, r7
   1e47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e47e:	69a3      	ldr	r3, [r4, #24]
   1e480:	2b00      	cmp	r3, #0
   1e482:	d1c7      	bne.n	1e414 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e484:	6863      	ldr	r3, [r4, #4]
   1e486:	4299      	cmp	r1, r3
   1e488:	d1c4      	bne.n	1e414 <spi_nrfx_transceive+0x18>
   1e48a:	e7cc      	b.n	1e426 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1e48c:	f01c 0f01 	tst.w	ip, #1
   1e490:	d015      	beq.n	1e4be <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1e492:	466d      	mov	r5, sp
   1e494:	b088      	sub	sp, #32
   1e496:	f8d8 3000 	ldr.w	r3, [r8]
   1e49a:	466a      	mov	r2, sp
   1e49c:	4985      	ldr	r1, [pc, #532]	; (1e6b4 <spi_nrfx_transceive+0x2b8>)
   1e49e:	4884      	ldr	r0, [pc, #528]	; (1e6b0 <spi_nrfx_transceive+0x2b4>)
   1e4a0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e4a4:	2302      	movs	r3, #2
   1e4a6:	7713      	strb	r3, [r2, #28]
   1e4a8:	4b83      	ldr	r3, [pc, #524]	; (1e6b8 <spi_nrfx_transceive+0x2bc>)
   1e4aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1e4ae:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e4b2:	f00c fc60 	bl	2ad76 <z_log_msg_static_create.constprop.0>
   1e4b6:	46ad      	mov	sp, r5
		return -EINVAL;
   1e4b8:	f06f 0515 	mvn.w	r5, #21
   1e4bc:	e7d0      	b.n	1e460 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e4be:	f01c 0f08 	tst.w	ip, #8
   1e4c2:	d00b      	beq.n	1e4dc <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
   1e4c4:	4b7d      	ldr	r3, [pc, #500]	; (1e6bc <spi_nrfx_transceive+0x2c0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e4c6:	627b      	str	r3, [r7, #36]	; 0x24
   1e4c8:	4879      	ldr	r0, [pc, #484]	; (1e6b0 <spi_nrfx_transceive+0x2b4>)
   1e4ca:	2302      	movs	r3, #2
   1e4cc:	f107 0220 	add.w	r2, r7, #32
   1e4d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e4d4:	623b      	str	r3, [r7, #32]
   1e4d6:	f00c fc4e 	bl	2ad76 <z_log_msg_static_create.constprop.0>
   1e4da:	e7ed      	b.n	1e4b8 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e4dc:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1e4e0:	2b08      	cmp	r3, #8
   1e4e2:	d001      	beq.n	1e4e8 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1e4e4:	4b76      	ldr	r3, [pc, #472]	; (1e6c0 <spi_nrfx_transceive+0x2c4>)
   1e4e6:	e7ee      	b.n	1e4c6 <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
   1e4e8:	6835      	ldr	r5, [r6, #0]
   1e4ea:	4b76      	ldr	r3, [pc, #472]	; (1e6c4 <spi_nrfx_transceive+0x2c8>)
   1e4ec:	429d      	cmp	r5, r3
   1e4ee:	d801      	bhi.n	1e4f4 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e4f0:	4b75      	ldr	r3, [pc, #468]	; (1e6c8 <spi_nrfx_transceive+0x2cc>)
   1e4f2:	e7e8      	b.n	1e4c6 <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
   1e4f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e4f8:	60bb      	str	r3, [r7, #8]
	config = dev_config->def_config;
   1e4fa:	f103 0b08 	add.w	fp, r3, #8
   1e4fe:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1e502:	f107 0e10 	add.w	lr, r7, #16
   1e506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e50a:	f8db 3000 	ldr.w	r3, [fp]
   1e50e:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
   1e512:	4b6e      	ldr	r3, [pc, #440]	; (1e6cc <spi_nrfx_transceive+0x2d0>)
   1e514:	429d      	cmp	r5, r3
   1e516:	d945      	bls.n	1e5a4 <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 500000) {
   1e518:	4b6d      	ldr	r3, [pc, #436]	; (1e6d0 <spi_nrfx_transceive+0x2d4>)
   1e51a:	429d      	cmp	r5, r3
   1e51c:	d945      	bls.n	1e5aa <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 1000000) {
   1e51e:	4b6d      	ldr	r3, [pc, #436]	; (1e6d4 <spi_nrfx_transceive+0x2d8>)
   1e520:	429d      	cmp	r5, r3
   1e522:	d945      	bls.n	1e5b0 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 2000000) {
   1e524:	4b6c      	ldr	r3, [pc, #432]	; (1e6d8 <spi_nrfx_transceive+0x2dc>)
   1e526:	429d      	cmp	r5, r3
   1e528:	d945      	bls.n	1e5b6 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 4000000) {
   1e52a:	4b6c      	ldr	r3, [pc, #432]	; (1e6dc <spi_nrfx_transceive+0x2e0>)
   1e52c:	429d      	cmp	r5, r3
   1e52e:	d945      	bls.n	1e5bc <spi_nrfx_transceive+0x1c0>
		return NRF_SPI_FREQ_8M;
   1e530:	4b6b      	ldr	r3, [pc, #428]	; (1e6e0 <spi_nrfx_transceive+0x2e4>)
   1e532:	429d      	cmp	r5, r3
   1e534:	bf34      	ite	cc
   1e536:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1e53a:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e53e:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1e542:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e544:	f00c 0304 	and.w	r3, ip, #4
   1e548:	d03b      	beq.n	1e5c2 <spi_nrfx_transceive+0x1c6>
			return NRF_SPI_MODE_2;
   1e54a:	2b00      	cmp	r3, #0
   1e54c:	bf14      	ite	ne
   1e54e:	2303      	movne	r3, #3
   1e550:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1e552:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1e554:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1e556:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1e55a:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1e55e:	b12b      	cbz	r3, 1e56c <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
   1e560:	68b8      	ldr	r0, [r7, #8]
   1e562:	f002 fd9b 	bl	2109c <nrfx_spi_uninit>
		dev_data->initialized = false;
   1e566:	2300      	movs	r3, #0
   1e568:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   1e56c:	464b      	mov	r3, r9
   1e56e:	4a5d      	ldr	r2, [pc, #372]	; (1e6e4 <spi_nrfx_transceive+0x2e8>)
   1e570:	68b8      	ldr	r0, [r7, #8]
   1e572:	f107 0110 	add.w	r1, r7, #16
   1e576:	f002 fce5 	bl	20f44 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1e57a:	4b5b      	ldr	r3, [pc, #364]	; (1e6e8 <spi_nrfx_transceive+0x2ec>)
   1e57c:	4298      	cmp	r0, r3
   1e57e:	d024      	beq.n	1e5ca <spi_nrfx_transceive+0x1ce>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e580:	466d      	mov	r5, sp
   1e582:	b088      	sub	sp, #32
   1e584:	466a      	mov	r2, sp
   1e586:	4b59      	ldr	r3, [pc, #356]	; (1e6ec <spi_nrfx_transceive+0x2f0>)
   1e588:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e58c:	2303      	movs	r3, #3
   1e58e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e592:	4847      	ldr	r0, [pc, #284]	; (1e6b0 <spi_nrfx_transceive+0x2b4>)
   1e594:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e598:	f00c fbed 	bl	2ad76 <z_log_msg_static_create.constprop.0>
   1e59c:	46ad      	mov	sp, r5
		return -EIO;
   1e59e:	f06f 0504 	mvn.w	r5, #4
   1e5a2:	e75d      	b.n	1e460 <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
   1e5a4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1e5a8:	e7c9      	b.n	1e53e <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
   1e5aa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1e5ae:	e7c6      	b.n	1e53e <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
   1e5b0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1e5b4:	e7c3      	b.n	1e53e <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
   1e5b6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1e5ba:	e7c0      	b.n	1e53e <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
   1e5bc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1e5c0:	e7bd      	b.n	1e53e <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
   1e5c2:	3b00      	subs	r3, #0
   1e5c4:	bf18      	it	ne
   1e5c6:	2301      	movne	r3, #1
   1e5c8:	e7c3      	b.n	1e552 <spi_nrfx_transceive+0x156>
	dev_data->initialized = true;
   1e5ca:	2301      	movs	r3, #1
   1e5cc:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
   1e5d0:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
   1e5d4:	2301      	movs	r3, #1
   1e5d6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e5da:	68fb      	ldr	r3, [r7, #12]
   1e5dc:	2b00      	cmp	r3, #0
   1e5de:	d154      	bne.n	1e68a <spi_nrfx_transceive+0x28e>
   1e5e0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e5e2:	461a      	mov	r2, r3
   1e5e4:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1e5e6:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1e5ea:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1e5ee:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e5f2:	f00c fbaf 	bl	2ad54 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1e5f6:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e5f8:	f1ba 0f00 	cmp.w	sl, #0
   1e5fc:	d14c      	bne.n	1e698 <spi_nrfx_transceive+0x29c>
   1e5fe:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e602:	4653      	mov	r3, sl
   1e604:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1e606:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e60a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e60e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e612:	f00c fb9f 	bl	2ad54 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1e616:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1e618:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1e61a:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   1e61c:	2101      	movs	r1, #1
   1e61e:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   1e620:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1e622:	f00c fbbf 	bl	2ada4 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e626:	4640      	mov	r0, r8
   1e628:	f7ff fe48 	bl	1e2bc <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e62c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1e630:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e632:	429d      	cmp	r5, r3
   1e634:	bf38      	it	cc
   1e636:	461d      	movcc	r5, r3
   1e638:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1e63c:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1e63e:	f858 3b28 	ldr.w	r3, [r8], #40
   1e642:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e646:	681b      	ldr	r3, [r3, #0]
   1e648:	fbb5 f5f3 	udiv	r5, r5, r3
   1e64c:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e64e:	35c8      	adds	r5, #200	; 0xc8
   1e650:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e658:	2300      	movs	r3, #0
   1e65a:	fbe5 010c 	umlal	r0, r1, r5, ip
   1e65e:	f7e2 f8b9 	bl	7d4 <__aeabi_uldivmod>
   1e662:	4602      	mov	r2, r0
   1e664:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e666:	4640      	mov	r0, r8
   1e668:	f003 fa5e 	bl	21b28 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1e66c:	b1e0      	cbz	r0, 1e6a8 <spi_nrfx_transceive+0x2ac>
		LOG_ERR("Timeout waiting for transfer complete");
   1e66e:	4b20      	ldr	r3, [pc, #128]	; (1e6f0 <spi_nrfx_transceive+0x2f4>)
   1e670:	627b      	str	r3, [r7, #36]	; 0x24
   1e672:	480f      	ldr	r0, [pc, #60]	; (1e6b0 <spi_nrfx_transceive+0x2b4>)
   1e674:	2302      	movs	r3, #2
   1e676:	f107 0220 	add.w	r2, r7, #32
   1e67a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e67e:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
   1e680:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
   1e684:	f00c fb77 	bl	2ad76 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1e688:	e6ea      	b.n	1e460 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e68a:	68fb      	ldr	r3, [r7, #12]
   1e68c:	681a      	ldr	r2, [r3, #0]
   1e68e:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e690:	2a00      	cmp	r2, #0
   1e692:	d0a7      	beq.n	1e5e4 <spi_nrfx_transceive+0x1e8>
   1e694:	685a      	ldr	r2, [r3, #4]
   1e696:	e7a5      	b.n	1e5e4 <spi_nrfx_transceive+0x1e8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e698:	f8da 3000 	ldr.w	r3, [sl]
   1e69c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d0b0      	beq.n	1e604 <spi_nrfx_transceive+0x208>
   1e6a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e6a6:	e7ad      	b.n	1e604 <spi_nrfx_transceive+0x208>
	status = ctx->sync_status;
   1e6a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1e6aa:	e6d9      	b.n	1e460 <spi_nrfx_transceive+0x64>
   1e6ac:	0002fa8c 	.word	0x0002fa8c
   1e6b0:	0002c884 	.word	0x0002c884
   1e6b4:	0002faa6 	.word	0x0002faa6
   1e6b8:	01000003 	.word	0x01000003
   1e6bc:	0002fac8 	.word	0x0002fac8
   1e6c0:	0002fae7 	.word	0x0002fae7
   1e6c4:	0001e847 	.word	0x0001e847
   1e6c8:	0002fb16 	.word	0x0002fb16
   1e6cc:	0003d08f 	.word	0x0003d08f
   1e6d0:	0007a11f 	.word	0x0007a11f
   1e6d4:	000f423f 	.word	0x000f423f
   1e6d8:	001e847f 	.word	0x001e847f
   1e6dc:	003d08ff 	.word	0x003d08ff
   1e6e0:	007a1200 	.word	0x007a1200
   1e6e4:	0001e339 	.word	0x0001e339
   1e6e8:	0bad0000 	.word	0x0bad0000
   1e6ec:	0002fb47 	.word	0x0002fb47
   1e6f0:	0002fb6e 	.word	0x0002fb6e

0001e6f4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e6f4:	4b02      	ldr	r3, [pc, #8]	; (1e700 <flash_nrf_pages_layout+0xc>)
   1e6f6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e6f8:	2301      	movs	r3, #1
   1e6fa:	6013      	str	r3, [r2, #0]
}
   1e6fc:	4770      	bx	lr
   1e6fe:	bf00      	nop
   1e700:	20003070 	.word	0x20003070

0001e704 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e704:	4800      	ldr	r0, [pc, #0]	; (1e708 <flash_nrf_get_parameters+0x4>)
   1e706:	4770      	bx	lr
   1e708:	0002d3c4 	.word	0x0002d3c4

0001e70c <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   1e70c:	b580      	push	{r7, lr}
   1e70e:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e710:	b088      	sub	sp, #32
   1e712:	466a      	mov	r2, sp
   1e714:	4b08      	ldr	r3, [pc, #32]	; (1e738 <flash_nrf_read.part.0+0x2c>)
   1e716:	61d1      	str	r1, [r2, #28]
   1e718:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e71c:	2304      	movs	r3, #4
   1e71e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e722:	4806      	ldr	r0, [pc, #24]	; (1e73c <flash_nrf_read.part.0+0x30>)
   1e724:	2300      	movs	r3, #0
   1e726:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e72a:	f7f5 faa9 	bl	13c80 <z_impl_z_log_msg_static_create>
}
   1e72e:	f06f 0015 	mvn.w	r0, #21
   1e732:	46bd      	mov	sp, r7
   1e734:	bd80      	pop	{r7, pc}
   1e736:	bf00      	nop
   1e738:	0002fbae 	.word	0x0002fbae
   1e73c:	0002c7fc 	.word	0x0002c7fc

0001e740 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1e740:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e742:	2201      	movs	r2, #1
   1e744:	4611      	mov	r1, r2
   1e746:	4807      	ldr	r0, [pc, #28]	; (1e764 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e748:	4c07      	ldr	r4, [pc, #28]	; (1e768 <nrf_flash_init+0x28>)
   1e74a:	f00d f822 	bl	2b792 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e74e:	f001 fe2f 	bl	203b0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e752:	f00c fdc0 	bl	2b2d6 <nrfx_nvmc_flash_page_count_get>
   1e756:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e758:	f00c fdb9 	bl	2b2ce <nrfx_nvmc_flash_page_size_get>
   1e75c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1e75e:	2000      	movs	r0, #0
   1e760:	bd10      	pop	{r4, pc}
   1e762:	bf00      	nop
   1e764:	20003078 	.word	0x20003078
   1e768:	20003070 	.word	0x20003070

0001e76c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1e76c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e770:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1e774:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e778:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e77c:	f023 031f 	bic.w	r3, r3, #31
   1e780:	430b      	orrs	r3, r1
    pofcon |=
   1e782:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1e786:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1e78a:	4b02      	ldr	r3, [pc, #8]	; (1e794 <restore_pofwarn.part.0+0x28>)
   1e78c:	2200      	movs	r2, #0
   1e78e:	701a      	strb	r2, [r3, #0]
	}
}
   1e790:	4770      	bx	lr
   1e792:	bf00      	nop
   1e794:	20003eae 	.word	0x20003eae

0001e798 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e798:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e79c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e7a0:	2b08      	cmp	r3, #8
   1e7a2:	d122      	bne.n	1e7ea <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   1e7a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e7a8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   1e7ac:	f011 0001 	ands.w	r0, r1, #1
   1e7b0:	d01c      	beq.n	1e7ec <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   1e7b2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1e7b6:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e7ba:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   1e7be:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   1e7c0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e7c4:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1e7c8:	b158      	cbz	r0, 1e7e2 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   1e7ca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1e7ce:	f023 031f 	bic.w	r3, r3, #31
   1e7d2:	430b      	orrs	r3, r1
    pofcon |=
   1e7d4:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1e7d8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   1e7dc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e7e0:	4770      	bx	lr
		pofcon_enabled = enabled;
   1e7e2:	4b03      	ldr	r3, [pc, #12]	; (1e7f0 <suspend_pofwarn+0x58>)
   1e7e4:	2201      	movs	r2, #1
   1e7e6:	701a      	strb	r2, [r3, #0]
   1e7e8:	4770      	bx	lr
		return 0;
   1e7ea:	2000      	movs	r0, #0
}
   1e7ec:	4770      	bx	lr
   1e7ee:	bf00      	nop
   1e7f0:	20003eae 	.word	0x20003eae

0001e7f4 <erase_op>:
{
   1e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7f6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e7f8:	f00c fd69 	bl	2b2ce <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1e7fc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e7fe:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1e800:	b10b      	cbz	r3, 1e806 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1e802:	f00c fce0 	bl	2b1c6 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e806:	4f13      	ldr	r7, [pc, #76]	; (1e854 <erase_op+0x60>)
{
   1e808:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1e80a:	f7ff ffc5 	bl	1e798 <suspend_pofwarn>
   1e80e:	b9e8      	cbnz	r0, 1e84c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1e810:	6860      	ldr	r0, [r4, #4]
   1e812:	f002 fb5b 	bl	20ecc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1e816:	68a3      	ldr	r3, [r4, #8]
   1e818:	1b5b      	subs	r3, r3, r5
   1e81a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1e81c:	6863      	ldr	r3, [r4, #4]
   1e81e:	442b      	add	r3, r5
   1e820:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1e822:	783b      	ldrb	r3, [r7, #0]
   1e824:	b10b      	cbz	r3, 1e82a <erase_op+0x36>
   1e826:	f7ff ffa1 	bl	1e76c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1e82a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e82c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1e82e:	b93b      	cbnz	r3, 1e840 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1e830:	68a3      	ldr	r3, [r4, #8]
   1e832:	2b00      	cmp	r3, #0
   1e834:	d1e9      	bne.n	1e80a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1e836:	68a0      	ldr	r0, [r4, #8]
   1e838:	3800      	subs	r0, #0
   1e83a:	bf18      	it	ne
   1e83c:	2001      	movne	r0, #1
}
   1e83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1e840:	4630      	mov	r0, r6
   1e842:	f001 fe59 	bl	204f8 <nrf_flash_sync_check_time_limit>
   1e846:	2800      	cmp	r0, #0
   1e848:	d0f2      	beq.n	1e830 <erase_op+0x3c>
   1e84a:	e7f4      	b.n	1e836 <erase_op+0x42>
			return -ECANCELED;
   1e84c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e850:	e7f5      	b.n	1e83e <erase_op+0x4a>
   1e852:	bf00      	nop
   1e854:	20003eae 	.word	0x20003eae

0001e858 <write_op>:
{
   1e858:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1e85a:	7b03      	ldrb	r3, [r0, #12]
{
   1e85c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e85e:	b10b      	cbz	r3, 1e864 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e860:	f00c fcb1 	bl	2b1c6 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e864:	4e19      	ldr	r6, [pc, #100]	; (1e8cc <write_op+0x74>)
{
   1e866:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e868:	68a3      	ldr	r3, [r4, #8]
   1e86a:	2b03      	cmp	r3, #3
   1e86c:	d806      	bhi.n	1e87c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e86e:	4a18      	ldr	r2, [pc, #96]	; (1e8d0 <write_op+0x78>)
   1e870:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e874:	07db      	lsls	r3, r3, #31
   1e876:	d5fb      	bpl.n	1e870 <write_op+0x18>
	return FLASH_OP_DONE;
   1e878:	2000      	movs	r0, #0
}
   1e87a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1e87c:	f7ff ff8c 	bl	1e798 <suspend_pofwarn>
   1e880:	bb08      	cbnz	r0, 1e8c6 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e882:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e884:	6860      	ldr	r0, [r4, #4]
   1e886:	6819      	ldr	r1, [r3, #0]
   1e888:	f002 fb40 	bl	20f0c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e88c:	7833      	ldrb	r3, [r6, #0]
   1e88e:	b10b      	cbz	r3, 1e894 <write_op+0x3c>
   1e890:	f7ff ff6c 	bl	1e76c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1e894:	6863      	ldr	r3, [r4, #4]
   1e896:	3304      	adds	r3, #4
   1e898:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e89a:	6823      	ldr	r3, [r4, #0]
   1e89c:	3304      	adds	r3, #4
   1e89e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e8a0:	68a3      	ldr	r3, [r4, #8]
   1e8a2:	3b04      	subs	r3, #4
   1e8a4:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e8a6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e8a8:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e8aa:	2b00      	cmp	r3, #0
   1e8ac:	d0dc      	beq.n	1e868 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e8ae:	4628      	mov	r0, r5
   1e8b0:	f001 fe22 	bl	204f8 <nrf_flash_sync_check_time_limit>
   1e8b4:	2800      	cmp	r0, #0
   1e8b6:	d0d7      	beq.n	1e868 <write_op+0x10>
   1e8b8:	4a05      	ldr	r2, [pc, #20]	; (1e8d0 <write_op+0x78>)
   1e8ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e8be:	07d9      	lsls	r1, r3, #31
   1e8c0:	d5fb      	bpl.n	1e8ba <write_op+0x62>
				return FLASH_OP_ONGOING;
   1e8c2:	2001      	movs	r0, #1
   1e8c4:	e7d9      	b.n	1e87a <write_op+0x22>
			return -ECANCELED;
   1e8c6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e8ca:	e7d6      	b.n	1e87a <write_op+0x22>
   1e8cc:	20003eae 	.word	0x20003eae
   1e8d0:	4001e000 	.word	0x4001e000

0001e8d4 <flash_nrf_erase>:
{
   1e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8d8:	b086      	sub	sp, #24
   1e8da:	af00      	add	r7, sp, #0
   1e8dc:	460e      	mov	r6, r1
   1e8de:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e8e0:	f00c fcf5 	bl	2b2ce <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e8e4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e8e6:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   1e8e8:	4630      	mov	r0, r6
   1e8ea:	f00c fa9f 	bl	2ae2c <is_regular_addr_valid>
   1e8ee:	4603      	mov	r3, r0
   1e8f0:	b3c8      	cbz	r0, 1e966 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e8f2:	fbb6 f3f8 	udiv	r3, r6, r8
   1e8f6:	fb08 6313 	mls	r3, r8, r3, r6
   1e8fa:	b923      	cbnz	r3, 1e906 <flash_nrf_erase+0x32>
   1e8fc:	fbb5 f4f8 	udiv	r4, r5, r8
   1e900:	fb08 5414 	mls	r4, r8, r4, r5
   1e904:	b1bc      	cbz	r4, 1e936 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e906:	466c      	mov	r4, sp
   1e908:	b088      	sub	sp, #32
   1e90a:	466a      	mov	r2, sp
   1e90c:	4b27      	ldr	r3, [pc, #156]	; (1e9ac <flash_nrf_erase+0xd8>)
   1e90e:	61d5      	str	r5, [r2, #28]
   1e910:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e914:	2304      	movs	r3, #4
   1e916:	f842 3f10 	str.w	r3, [r2, #16]!
   1e91a:	2300      	movs	r3, #0
   1e91c:	4824      	ldr	r0, [pc, #144]	; (1e9b0 <flash_nrf_erase+0xdc>)
   1e91e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e922:	f7f5 f9ad 	bl	13c80 <z_impl_z_log_msg_static_create>
   1e926:	46a5      	mov	sp, r4
		return -EINVAL;
   1e928:	f06f 0415 	mvn.w	r4, #21
}
   1e92c:	4620      	mov	r0, r4
   1e92e:	3718      	adds	r7, #24
   1e930:	46bd      	mov	sp, r7
   1e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   1e936:	4545      	cmp	r5, r8
   1e938:	d3f8      	bcc.n	1e92c <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   1e93a:	f04f 33ff 	mov.w	r3, #4294967295
   1e93e:	f04f 32ff 	mov.w	r2, #4294967295
   1e942:	481c      	ldr	r0, [pc, #112]	; (1e9b4 <flash_nrf_erase+0xe0>)
   1e944:	f003 f8f0 	bl	21b28 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e948:	f00c fc3b 	bl	2b1c2 <nrf_flash_sync_is_required>
   1e94c:	f107 0308 	add.w	r3, r7, #8
   1e950:	4601      	mov	r1, r0
   1e952:	b998      	cbnz	r0, 1e97c <flash_nrf_erase+0xa8>
	struct flash_context context = {
   1e954:	2210      	movs	r2, #16
   1e956:	4618      	mov	r0, r3
   1e958:	f00d fb5a 	bl	2c010 <memset>
   1e95c:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   1e960:	f7ff ff48 	bl	1e7f4 <erase_op>
   1e964:	e01c      	b.n	1e9a0 <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e966:	466c      	mov	r4, sp
   1e968:	b088      	sub	sp, #32
   1e96a:	466a      	mov	r2, sp
   1e96c:	4912      	ldr	r1, [pc, #72]	; (1e9b8 <flash_nrf_erase+0xe4>)
   1e96e:	61d5      	str	r5, [r2, #28]
   1e970:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1e974:	2104      	movs	r1, #4
   1e976:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1e97a:	e7cf      	b.n	1e91c <flash_nrf_erase+0x48>
	struct flash_context context = {
   1e97c:	2210      	movs	r2, #16
   1e97e:	4621      	mov	r1, r4
   1e980:	4618      	mov	r0, r3
   1e982:	f00d fb45 	bl	2c010 <memset>
   1e986:	2201      	movs	r2, #1
   1e988:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1e98a:	4a0c      	ldr	r2, [pc, #48]	; (1e9bc <flash_nrf_erase+0xe8>)
   1e98c:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e990:	480b      	ldr	r0, [pc, #44]	; (1e9c0 <flash_nrf_erase+0xec>)
	struct flash_context context = {
   1e992:	e9c7 6503 	strd	r6, r5, [r7, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e996:	f001 fd13 	bl	203c0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e99a:	4638      	mov	r0, r7
   1e99c:	f001 fd16 	bl	203cc <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e9a0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e9a2:	4804      	ldr	r0, [pc, #16]	; (1e9b4 <flash_nrf_erase+0xe0>)
   1e9a4:	f003 f89a 	bl	21adc <z_impl_k_sem_give>
}
   1e9a8:	e7c0      	b.n	1e92c <flash_nrf_erase+0x58>
   1e9aa:	bf00      	nop
   1e9ac:	0002fbcb 	.word	0x0002fbcb
   1e9b0:	0002c7fc 	.word	0x0002c7fc
   1e9b4:	20003078 	.word	0x20003078
   1e9b8:	0002fbae 	.word	0x0002fbae
   1e9bc:	0001e7f5 	.word	0x0001e7f5
   1e9c0:	00015e64 	.word	0x00015e64

0001e9c4 <flash_nrf_write>:
{
   1e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9c6:	460d      	mov	r5, r1
   1e9c8:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1e9ca:	4619      	mov	r1, r3
{
   1e9cc:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1e9ce:	4628      	mov	r0, r5
{
   1e9d0:	461c      	mov	r4, r3
   1e9d2:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1e9d4:	f00c fa2a 	bl	2ae2c <is_regular_addr_valid>
   1e9d8:	4603      	mov	r3, r0
   1e9da:	b9a8      	cbnz	r0, 1ea08 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e9dc:	466e      	mov	r6, sp
   1e9de:	b088      	sub	sp, #32
   1e9e0:	466a      	mov	r2, sp
   1e9e2:	4925      	ldr	r1, [pc, #148]	; (1ea78 <flash_nrf_write+0xb4>)
   1e9e4:	61d4      	str	r4, [r2, #28]
   1e9e6:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1e9ea:	2104      	movs	r1, #4
   1e9ec:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1e9f0:	4822      	ldr	r0, [pc, #136]	; (1ea7c <flash_nrf_write+0xb8>)
   1e9f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e9f6:	f7f5 f943 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e9fa:	f06f 0415 	mvn.w	r4, #21
   1e9fe:	46b5      	mov	sp, r6
}
   1ea00:	4620      	mov	r0, r4
   1ea02:	371c      	adds	r7, #28
   1ea04:	46bd      	mov	sp, r7
   1ea06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1ea08:	ea44 0305 	orr.w	r3, r4, r5
   1ea0c:	079b      	lsls	r3, r3, #30
   1ea0e:	d00b      	beq.n	1ea28 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ea10:	466e      	mov	r6, sp
   1ea12:	b088      	sub	sp, #32
   1ea14:	466a      	mov	r2, sp
   1ea16:	4b1a      	ldr	r3, [pc, #104]	; (1ea80 <flash_nrf_write+0xbc>)
   1ea18:	61d4      	str	r4, [r2, #28]
   1ea1a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1ea1e:	2304      	movs	r3, #4
   1ea20:	f842 3f10 	str.w	r3, [r2, #16]!
   1ea24:	2300      	movs	r3, #0
   1ea26:	e7e3      	b.n	1e9f0 <flash_nrf_write+0x2c>
	if (!len) {
   1ea28:	2c00      	cmp	r4, #0
   1ea2a:	d0e9      	beq.n	1ea00 <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1ea2c:	f04f 33ff 	mov.w	r3, #4294967295
   1ea30:	f04f 32ff 	mov.w	r2, #4294967295
   1ea34:	4813      	ldr	r0, [pc, #76]	; (1ea84 <flash_nrf_write+0xc0>)
   1ea36:	f003 f877 	bl	21b28 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1ea3a:	f00c fbc2 	bl	2b1c2 <nrf_flash_sync_is_required>
   1ea3e:	4603      	mov	r3, r0
	struct flash_context context = {
   1ea40:	e9c7 6502 	strd	r6, r5, [r7, #8]
   1ea44:	f107 0008 	add.w	r0, r7, #8
   1ea48:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   1ea4a:	b183      	cbz	r3, 1ea6e <flash_nrf_write+0xaa>
	struct flash_context context = {
   1ea4c:	2301      	movs	r3, #1
   1ea4e:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1ea50:	4b0d      	ldr	r3, [pc, #52]	; (1ea88 <flash_nrf_write+0xc4>)
   1ea52:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1ea56:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1ea5a:	f001 fcb1 	bl	203c0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1ea5e:	4638      	mov	r0, r7
   1ea60:	f001 fcb4 	bl	203cc <nrf_flash_sync_exe>
	return write_op(&context);
   1ea64:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ea66:	4807      	ldr	r0, [pc, #28]	; (1ea84 <flash_nrf_write+0xc0>)
   1ea68:	f003 f838 	bl	21adc <z_impl_k_sem_give>
}
   1ea6c:	e7c8      	b.n	1ea00 <flash_nrf_write+0x3c>
	struct flash_context context = {
   1ea6e:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   1ea70:	f7ff fef2 	bl	1e858 <write_op>
   1ea74:	e7f6      	b.n	1ea64 <flash_nrf_write+0xa0>
   1ea76:	bf00      	nop
   1ea78:	0002fbae 	.word	0x0002fbae
   1ea7c:	0002c7fc 	.word	0x0002c7fc
   1ea80:	0002fbea 	.word	0x0002fbea
   1ea84:	20003078 	.word	0x20003078
   1ea88:	0001e859 	.word	0x0001e859

0001ea8c <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea8c:	4b07      	ldr	r3, [pc, #28]	; (1eaac <uart_nrfx_poll_in+0x20>)
   1ea8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1ea92:	b142      	cbz	r2, 1eaa6 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea94:	2000      	movs	r0, #0
   1ea96:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ea9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1ea9e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1eaa2:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1eaa4:	4770      	bx	lr
		return -1;
   1eaa6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1eaaa:	4770      	bx	lr
   1eaac:	40002000 	.word	0x40002000

0001eab0 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1eab0:	4b02      	ldr	r3, [pc, #8]	; (1eabc <uart_nrfx_err_check+0xc>)
   1eab2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1eab6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1eaba:	4770      	bx	lr
   1eabc:	40002000 	.word	0x40002000

0001eac0 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1eac0:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1eac2:	794b      	ldrb	r3, [r1, #5]
   1eac4:	2b01      	cmp	r3, #1
   1eac6:	d022      	beq.n	1eb0e <uart_nrfx_configure+0x4e>
   1eac8:	2b03      	cmp	r3, #3
   1eaca:	d11d      	bne.n	1eb08 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1eacc:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1eace:	798b      	ldrb	r3, [r1, #6]
   1ead0:	2b03      	cmp	r3, #3
   1ead2:	d119      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1ead4:	79cb      	ldrb	r3, [r1, #7]
   1ead6:	b9bb      	cbnz	r3, 1eb08 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1ead8:	790a      	ldrb	r2, [r1, #4]
   1eada:	b112      	cbz	r2, 1eae2 <uart_nrfx_configure+0x22>
   1eadc:	2a02      	cmp	r2, #2
   1eade:	d113      	bne.n	1eb08 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1eae0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1eae2:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1eae4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1eae8:	d061      	beq.n	1ebae <uart_nrfx_configure+0xee>
   1eaea:	d82d      	bhi.n	1eb48 <uart_nrfx_configure+0x88>
   1eaec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1eaf0:	d05f      	beq.n	1ebb2 <uart_nrfx_configure+0xf2>
   1eaf2:	d816      	bhi.n	1eb22 <uart_nrfx_configure+0x62>
   1eaf4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1eaf8:	d05d      	beq.n	1ebb6 <uart_nrfx_configure+0xf6>
   1eafa:	d80a      	bhi.n	1eb12 <uart_nrfx_configure+0x52>
   1eafc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1eb00:	d05c      	beq.n	1ebbc <uart_nrfx_configure+0xfc>
   1eb02:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1eb06:	d05c      	beq.n	1ebc2 <uart_nrfx_configure+0x102>
   1eb08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1eb0c:	e04e      	b.n	1ebac <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1eb0e:	2500      	movs	r5, #0
   1eb10:	e7dd      	b.n	1eace <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1eb12:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1eb16:	d057      	beq.n	1ebc8 <uart_nrfx_configure+0x108>
   1eb18:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1eb1c:	d1f4      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1eb1e:	4b34      	ldr	r3, [pc, #208]	; (1ebf0 <uart_nrfx_configure+0x130>)
   1eb20:	e039      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb22:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1eb26:	d052      	beq.n	1ebce <uart_nrfx_configure+0x10e>
   1eb28:	d807      	bhi.n	1eb3a <uart_nrfx_configure+0x7a>
   1eb2a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1eb2e:	d050      	beq.n	1ebd2 <uart_nrfx_configure+0x112>
   1eb30:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1eb34:	d1e8      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1eb36:	4b2f      	ldr	r3, [pc, #188]	; (1ebf4 <uart_nrfx_configure+0x134>)
   1eb38:	e02d      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb3a:	f647 2412 	movw	r4, #31250	; 0x7a12
   1eb3e:	42a3      	cmp	r3, r4
   1eb40:	d1e2      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1eb42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1eb46:	e026      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb48:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1eb4c:	d044      	beq.n	1ebd8 <uart_nrfx_configure+0x118>
   1eb4e:	d811      	bhi.n	1eb74 <uart_nrfx_configure+0xb4>
   1eb50:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1eb54:	d042      	beq.n	1ebdc <uart_nrfx_configure+0x11c>
   1eb56:	d808      	bhi.n	1eb6a <uart_nrfx_configure+0xaa>
   1eb58:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1eb5c:	42a3      	cmp	r3, r4
   1eb5e:	d03f      	beq.n	1ebe0 <uart_nrfx_configure+0x120>
   1eb60:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1eb64:	d1d0      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1eb66:	4b24      	ldr	r3, [pc, #144]	; (1ebf8 <uart_nrfx_configure+0x138>)
   1eb68:	e015      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb6a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1eb6e:	d1cb      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1eb70:	4b22      	ldr	r3, [pc, #136]	; (1ebfc <uart_nrfx_configure+0x13c>)
   1eb72:	e010      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb74:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1eb78:	d035      	beq.n	1ebe6 <uart_nrfx_configure+0x126>
   1eb7a:	d807      	bhi.n	1eb8c <uart_nrfx_configure+0xcc>
   1eb7c:	4c20      	ldr	r4, [pc, #128]	; (1ec00 <uart_nrfx_configure+0x140>)
   1eb7e:	42a3      	cmp	r3, r4
   1eb80:	d033      	beq.n	1ebea <uart_nrfx_configure+0x12a>
   1eb82:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1eb86:	d1bf      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1eb88:	4b1e      	ldr	r3, [pc, #120]	; (1ec04 <uart_nrfx_configure+0x144>)
   1eb8a:	e004      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1eb8c:	4c1e      	ldr	r4, [pc, #120]	; (1ec08 <uart_nrfx_configure+0x148>)
   1eb8e:	42a3      	cmp	r3, r4
   1eb90:	d1ba      	bne.n	1eb08 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1eb92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   1eb96:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1eb98:	481c      	ldr	r0, [pc, #112]	; (1ec0c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1eb9a:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   1eb9c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1eba0:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   1eba4:	c903      	ldmia	r1, {r0, r1}
   1eba6:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   1ebaa:	2000      	movs	r0, #0
}
   1ebac:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1ebae:	4b18      	ldr	r3, [pc, #96]	; (1ec10 <uart_nrfx_configure+0x150>)
   1ebb0:	e7f1      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1ebb2:	4b18      	ldr	r3, [pc, #96]	; (1ec14 <uart_nrfx_configure+0x154>)
   1ebb4:	e7ef      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1ebb6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ebba:	e7ec      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1ebbc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ebc0:	e7e9      	b.n	1eb96 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1ebc2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1ebc6:	e7e6      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1ebc8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ebcc:	e7e3      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1ebce:	4b12      	ldr	r3, [pc, #72]	; (1ec18 <uart_nrfx_configure+0x158>)
   1ebd0:	e7e1      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1ebd2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1ebd6:	e7de      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1ebd8:	4b10      	ldr	r3, [pc, #64]	; (1ec1c <uart_nrfx_configure+0x15c>)
   1ebda:	e7dc      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1ebdc:	4b10      	ldr	r3, [pc, #64]	; (1ec20 <uart_nrfx_configure+0x160>)
   1ebde:	e7da      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1ebe0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ebe4:	e7d7      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1ebe6:	4b0f      	ldr	r3, [pc, #60]	; (1ec24 <uart_nrfx_configure+0x164>)
   1ebe8:	e7d5      	b.n	1eb96 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1ebea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ebee:	e7d2      	b.n	1eb96 <uart_nrfx_configure+0xd6>
   1ebf0:	0013b000 	.word	0x0013b000
   1ebf4:	004ea000 	.word	0x004ea000
   1ebf8:	00ebf000 	.word	0x00ebf000
   1ebfc:	01d7e000 	.word	0x01d7e000
   1ec00:	0003d090 	.word	0x0003d090
   1ec04:	075f7000 	.word	0x075f7000
   1ec08:	000f4240 	.word	0x000f4240
   1ec0c:	40002000 	.word	0x40002000
   1ec10:	009d5000 	.word	0x009d5000
   1ec14:	00275000 	.word	0x00275000
   1ec18:	0075f000 	.word	0x0075f000
   1ec1c:	03afb000 	.word	0x03afb000
   1ec20:	013a9000 	.word	0x013a9000
   1ec24:	0ebed000 	.word	0x0ebed000

0001ec28 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1ec28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   1ec2a:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1ec2c:	4c12      	ldr	r4, [pc, #72]	; (1ec78 <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   1ec2e:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
   1ec30:	6907      	ldr	r7, [r0, #16]
   1ec32:	2100      	movs	r1, #0
{
   1ec34:	4605      	mov	r5, r0
   1ec36:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
   1ec3a:	aa01      	add	r2, sp, #4
   1ec3c:	4630      	mov	r0, r6
   1ec3e:	f00c f968 	bl	2af12 <pinctrl_lookup_state>
	if (ret < 0) {
   1ec42:	2800      	cmp	r0, #0
   1ec44:	db15      	blt.n	1ec72 <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
   1ec46:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ec48:	6832      	ldr	r2, [r6, #0]
   1ec4a:	7919      	ldrb	r1, [r3, #4]
   1ec4c:	6818      	ldr	r0, [r3, #0]
   1ec4e:	f00c f97d 	bl	2af4c <pinctrl_configure_pins>
	if (err < 0) {
   1ec52:	2800      	cmp	r0, #0
   1ec54:	db0d      	blt.n	1ec72 <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   1ec56:	4639      	mov	r1, r7
   1ec58:	4628      	mov	r0, r5
   1ec5a:	f7ff ff31 	bl	1eac0 <uart_nrfx_configure>
	if (err) {
   1ec5e:	b940      	cbnz	r0, 1ec72 <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1ec60:	2304      	movs	r3, #4
   1ec62:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec66:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1ec6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec6e:	2301      	movs	r3, #1
   1ec70:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1ec72:	b003      	add	sp, #12
   1ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec76:	bf00      	nop
   1ec78:	40002000 	.word	0x40002000

0001ec7c <uart_nrfx_poll_out>:
{
   1ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec7e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1ec80:	f00c fc97 	bl	2b5b2 <k_is_in_isr>
   1ec84:	4d1a      	ldr	r5, [pc, #104]	; (1ecf0 <uart_nrfx_poll_out+0x74>)
   1ec86:	bb78      	cbnz	r0, 1ece8 <uart_nrfx_poll_out+0x6c>
   1ec88:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ec8a:	2701      	movs	r7, #1
   1ec8c:	f3bf 8f5b 	dmb	ish
   1ec90:	e855 3f00 	ldrex	r3, [r5]
   1ec94:	2b00      	cmp	r3, #0
   1ec96:	d103      	bne.n	1eca0 <uart_nrfx_poll_out+0x24>
   1ec98:	e845 7200 	strex	r2, r7, [r5]
   1ec9c:	2a00      	cmp	r2, #0
   1ec9e:	d1f7      	bne.n	1ec90 <uart_nrfx_poll_out+0x14>
   1eca0:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1eca4:	d007      	beq.n	1ecb6 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1eca6:	2021      	movs	r0, #33	; 0x21
   1eca8:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1ecaa:	3c01      	subs	r4, #1
   1ecac:	f003 fc1e 	bl	224ec <z_impl_k_sleep>
   1ecb0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1ecb4:	d1ea      	bne.n	1ec8c <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecb6:	4c0f      	ldr	r4, [pc, #60]	; (1ecf4 <uart_nrfx_poll_out+0x78>)
   1ecb8:	2300      	movs	r3, #0
   1ecba:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1ecbe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecc2:	2301      	movs	r3, #1
   1ecc4:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1ecc6:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1ecca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ecce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1ecd2:	b923      	cbnz	r3, 1ecde <uart_nrfx_poll_out+0x62>
   1ecd4:	2001      	movs	r0, #1
   1ecd6:	f00c fa9c 	bl	2b212 <nrfx_busy_wait>
   1ecda:	3e01      	subs	r6, #1
   1ecdc:	d1f7      	bne.n	1ecce <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecde:	2301      	movs	r3, #1
   1ece0:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1ece2:	2300      	movs	r3, #0
   1ece4:	602b      	str	r3, [r5, #0]
}
   1ece6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1ece8:	2301      	movs	r3, #1
   1ecea:	602b      	str	r3, [r5, #0]
   1ecec:	e7e3      	b.n	1ecb6 <uart_nrfx_poll_out+0x3a>
   1ecee:	bf00      	nop
   1ecf0:	20003090 	.word	0x20003090
   1ecf4:	40002000 	.word	0x40002000

0001ecf8 <random_byte_get>:
	__asm__ volatile(
   1ecf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecfc:	f3ef 8211 	mrs	r2, BASEPRI
   1ed00:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed04:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ed08:	4b09      	ldr	r3, [pc, #36]	; (1ed30 <random_byte_get+0x38>)
   1ed0a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ed0e:	b161      	cbz	r1, 1ed2a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ed10:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ed12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ed16:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1ed1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ed1e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1ed20:	f382 8811 	msr	BASEPRI, r2
   1ed24:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1ed28:	4770      	bx	lr
	int retval = -EAGAIN;
   1ed2a:	f06f 000a 	mvn.w	r0, #10
   1ed2e:	e7f7      	b.n	1ed20 <random_byte_get+0x28>
   1ed30:	4000d000 	.word	0x4000d000

0001ed34 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1ed34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed36:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1ed38:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1ed3a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1ed3c:	f04f 0040 	mov.w	r0, #64	; 0x40
   1ed40:	f3ef 8e11 	mrs	lr, BASEPRI
   1ed44:	f380 8812 	msr	BASEPRI_MAX, r0
   1ed48:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ed4c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ed4e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1ed52:	1ba4      	subs	r4, r4, r6
   1ed54:	403c      	ands	r4, r7
	if (available < len) {
   1ed56:	42a2      	cmp	r2, r4
		len = available;
   1ed58:	bf88      	it	hi
   1ed5a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ed5c:	18b0      	adds	r0, r6, r2
   1ed5e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1ed60:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ed62:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1ed64:	f38e 8811 	msr	BASEPRI, lr
   1ed68:	f3bf 8f6f 	isb	sy
   1ed6c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1ed6e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1ed70:	4290      	cmp	r0, r2
   1ed72:	d119      	bne.n	1eda8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ed74:	4566      	cmp	r6, ip
   1ed76:	d10d      	bne.n	1ed94 <rng_pool_get+0x60>
	__asm__ volatile(
   1ed78:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ed7c:	f3ef 8011 	mrs	r0, BASEPRI
   1ed80:	f385 8812 	msr	BASEPRI_MAX, r5
   1ed84:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ed88:	781d      	ldrb	r5, [r3, #0]
   1ed8a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ed8c:	f380 8811 	msr	BASEPRI, r0
   1ed90:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ed94:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ed96:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ed98:	b290      	uxth	r0, r2
	available = available - len;
   1ed9a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1ed9c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ed9e:	bf22      	ittt	cs
   1eda0:	4b06      	ldrcs	r3, [pc, #24]	; (1edbc <rng_pool_get+0x88>)
   1eda2:	2201      	movcs	r2, #1
   1eda4:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1eda8:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1edac:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1edae:	f89e e005 	ldrb.w	lr, [lr, #5]
   1edb2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1edb6:	403d      	ands	r5, r7
   1edb8:	e7da      	b.n	1ed70 <rng_pool_get+0x3c>
   1edba:	bf00      	nop
   1edbc:	4000d000 	.word	0x4000d000

0001edc0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1edc0:	43db      	mvns	r3, r3
{
   1edc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1edc6:	f013 0501 	ands.w	r5, r3, #1
{
   1edca:	460e      	mov	r6, r1
   1edcc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1edce:	d004      	beq.n	1edda <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1edd0:	4821      	ldr	r0, [pc, #132]	; (1ee58 <entropy_nrf5_get_entropy_isr+0x98>)
   1edd2:	f7ff ffaf 	bl	1ed34 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1edda:	b3a2      	cbz	r2, 1ee46 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1eddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ede0:	f3ef 8811 	mrs	r8, BASEPRI
   1ede4:	f383 8812 	msr	BASEPRI_MAX, r3
   1ede8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1edec:	200d      	movs	r0, #13
   1edee:	f7f5 fec7 	bl	14b80 <arch_irq_is_enabled>
   1edf2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1edf4:	200d      	movs	r0, #13
   1edf6:	f7f5 feaf 	bl	14b58 <arch_irq_disable>
	__asm__ volatile(
   1edfa:	f388 8811 	msr	BASEPRI, r8
   1edfe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ee02:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ee5c <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ee06:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ee60 <entropy_nrf5_get_entropy_isr+0xa0>
   1ee0a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1ee0e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1ee12:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ee16:	2301      	movs	r3, #1
   1ee18:	f8c8 3000 	str.w	r3, [r8]
   1ee1c:	4625      	mov	r5, r4
   1ee1e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ee22:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ee26:	b183      	cbz	r3, 1ee4a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1ee28:	f7ff ff66 	bl	1ecf8 <random_byte_get>
			if (byte < 0) {
   1ee2c:	1e03      	subs	r3, r0, #0
   1ee2e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ee32:	dbf6      	blt.n	1ee22 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1ee34:	3d01      	subs	r5, #1
   1ee36:	b2ad      	uxth	r5, r5
   1ee38:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ee3a:	2d00      	cmp	r5, #0
   1ee3c:	d1f1      	bne.n	1ee22 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1ee3e:	b117      	cbz	r7, 1ee46 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1ee40:	200d      	movs	r0, #13
   1ee42:	f7f5 fe79 	bl	14b38 <arch_irq_enable>
	return cnt;
   1ee46:	4620      	mov	r0, r4
   1ee48:	e7c5      	b.n	1edd6 <entropy_nrf5_get_entropy_isr+0x16>
   1ee4a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ee4e:	bf20      	wfe
				__SEV();
   1ee50:	bf40      	sev
				__WFE();
   1ee52:	bf20      	wfe
   1ee54:	e7e5      	b.n	1ee22 <entropy_nrf5_get_entropy_isr+0x62>
   1ee56:	bf00      	nop
   1ee58:	200030c4 	.word	0x200030c4
   1ee5c:	4000d000 	.word	0x4000d000
   1ee60:	e000e100 	.word	0xe000e100

0001ee64 <entropy_nrf5_get_entropy>:
{
   1ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ee68:	4f13      	ldr	r7, [pc, #76]	; (1eeb8 <entropy_nrf5_get_entropy+0x54>)
   1ee6a:	460d      	mov	r5, r1
   1ee6c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ee6e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ee72:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ee76:	b914      	cbnz	r4, 1ee7e <entropy_nrf5_get_entropy+0x1a>
}
   1ee78:	4620      	mov	r0, r4
   1ee7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ee7e:	f04f 33ff 	mov.w	r3, #4294967295
   1ee82:	f04f 32ff 	mov.w	r2, #4294967295
   1ee86:	4638      	mov	r0, r7
   1ee88:	f002 fe4e 	bl	21b28 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ee8c:	4622      	mov	r2, r4
   1ee8e:	4629      	mov	r1, r5
   1ee90:	4640      	mov	r0, r8
   1ee92:	f7ff ff4f 	bl	1ed34 <rng_pool_get>
   1ee96:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ee98:	4638      	mov	r0, r7
   1ee9a:	f002 fe1f 	bl	21adc <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ee9e:	b93e      	cbnz	r6, 1eeb0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1eea0:	f04f 32ff 	mov.w	r2, #4294967295
   1eea4:	f04f 33ff 	mov.w	r3, #4294967295
   1eea8:	4648      	mov	r0, r9
   1eeaa:	f002 fe3d 	bl	21b28 <z_impl_k_sem_take>
			continue;
   1eeae:	e7e2      	b.n	1ee76 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1eeb0:	1ba4      	subs	r4, r4, r6
   1eeb2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1eeb4:	4435      	add	r5, r6
   1eeb6:	e7de      	b.n	1ee76 <entropy_nrf5_get_entropy+0x12>
   1eeb8:	20003094 	.word	0x20003094

0001eebc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1eebc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1eebe:	4c19      	ldr	r4, [pc, #100]	; (1ef24 <entropy_nrf5_init+0x68>)
   1eec0:	2201      	movs	r2, #1
   1eec2:	4611      	mov	r1, r2
   1eec4:	4620      	mov	r0, r4
   1eec6:	f00c fc64 	bl	2b792 <z_impl_k_sem_init>
   1eeca:	2201      	movs	r2, #1
   1eecc:	2100      	movs	r1, #0
   1eece:	f104 0018 	add.w	r0, r4, #24
   1eed2:	f00c fc5e 	bl	2b792 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1eed6:	f240 4307 	movw	r3, #1031	; 0x407
   1eeda:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1eede:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1eee2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1eee4:	230c      	movs	r3, #12
   1eee6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1eeea:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1eeec:	4b0e      	ldr	r3, [pc, #56]	; (1ef28 <entropy_nrf5_init+0x6c>)
   1eeee:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1eef2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1eef6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1eefa:	f022 0201 	bic.w	r2, r2, #1
   1eefe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ef02:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ef04:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ef08:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ef0c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ef10:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ef12:	6019      	str	r1, [r3, #0]
   1ef14:	200d      	movs	r0, #13
   1ef16:	f7f5 fe41 	bl	14b9c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ef1a:	200d      	movs	r0, #13
   1ef1c:	f7f5 fe0c 	bl	14b38 <arch_irq_enable>

	return 0;
}
   1ef20:	4628      	mov	r0, r5
   1ef22:	bd38      	pop	{r3, r4, r5, pc}
   1ef24:	20003094 	.word	0x20003094
   1ef28:	4000d000 	.word	0x4000d000

0001ef2c <isr>:
{
   1ef2c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ef2e:	f7ff fee3 	bl	1ecf8 <random_byte_get>
	if (byte < 0) {
   1ef32:	2800      	cmp	r0, #0
   1ef34:	db20      	blt.n	1ef78 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ef36:	4b17      	ldr	r3, [pc, #92]	; (1ef94 <isr+0x68>)
   1ef38:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ef3c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ef40:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ef44:	1a51      	subs	r1, r2, r1
   1ef46:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ef4a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ef4c:	d10d      	bne.n	1ef6a <isr+0x3e>
	uint8_t last  = rngp->last;
   1ef4e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ef52:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ef56:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ef5a:	1a51      	subs	r1, r2, r1
   1ef5c:	ea34 0101 	bics.w	r1, r4, r1
   1ef60:	d10b      	bne.n	1ef7a <isr+0x4e>
   1ef62:	4b0d      	ldr	r3, [pc, #52]	; (1ef98 <isr+0x6c>)
   1ef64:	2201      	movs	r2, #1
   1ef66:	605a      	str	r2, [r3, #4]
}
   1ef68:	e00e      	b.n	1ef88 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ef6a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ef6c:	3201      	adds	r2, #1
   1ef6e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ef70:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ef74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ef78:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ef7a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ef7c:	3201      	adds	r2, #1
   1ef7e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ef80:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ef84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ef88:	4804      	ldr	r0, [pc, #16]	; (1ef9c <isr+0x70>)
}
   1ef8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef8e:	f002 bda5 	b.w	21adc <z_impl_k_sem_give>
   1ef92:	bf00      	nop
   1ef94:	20003094 	.word	0x20003094
   1ef98:	4000d000 	.word	0x4000d000
   1ef9c:	200030ac 	.word	0x200030ac

0001efa0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1efa0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1efa2:	2301      	movs	r3, #1
   1efa4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1efa6:	4a11      	ldr	r2, [pc, #68]	; (1efec <compare_int_lock+0x4c>)
   1efa8:	f3bf 8f5b 	dmb	ish
   1efac:	43dc      	mvns	r4, r3
   1efae:	e852 1f00 	ldrex	r1, [r2]
   1efb2:	ea01 0c04 	and.w	ip, r1, r4
   1efb6:	e842 ce00 	strex	lr, ip, [r2]
   1efba:	f1be 0f00 	cmp.w	lr, #0
   1efbe:	d1f6      	bne.n	1efae <compare_int_lock+0xe>
   1efc0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1efc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1efc8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1efcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1efd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1efd4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1efd8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1efdc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1efe0:	420b      	tst	r3, r1
}
   1efe2:	bf14      	ite	ne
   1efe4:	2001      	movne	r0, #1
   1efe6:	2000      	moveq	r0, #0
   1efe8:	bd10      	pop	{r4, pc}
   1efea:	bf00      	nop
   1efec:	200030ec 	.word	0x200030ec

0001eff0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1eff0:	4919      	ldr	r1, [pc, #100]	; (1f058 <sys_clock_timeout_handler+0x68>)
{
   1eff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eff4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1eff6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1effa:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1effc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1f000:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f004:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1f006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1f00a:	d222      	bcs.n	1f052 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1f00c:	4b13      	ldr	r3, [pc, #76]	; (1f05c <sys_clock_timeout_handler+0x6c>)
   1f00e:	681b      	ldr	r3, [r3, #0]
   1f010:	0a1a      	lsrs	r2, r3, #8
   1f012:	061b      	lsls	r3, r3, #24
   1f014:	195e      	adds	r6, r3, r5
   1f016:	4b12      	ldr	r3, [pc, #72]	; (1f060 <sys_clock_timeout_handler+0x70>)
   1f018:	f142 0700 	adc.w	r7, r2, #0
   1f01c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1f020:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1f022:	f003 fbed 	bl	22800 <sys_clock_announce>
    return p_reg->CC[ch];
   1f026:	00a3      	lsls	r3, r4, #2
   1f028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f02c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1f030:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1f034:	42aa      	cmp	r2, r5
   1f036:	d10b      	bne.n	1f050 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1f038:	b91e      	cbnz	r6, 1f042 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1f03a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f03e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f042:	4b08      	ldr	r3, [pc, #32]	; (1f064 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f044:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1f048:	fa00 f404 	lsl.w	r4, r0, r4
   1f04c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1f050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1f052:	2600      	movs	r6, #0
   1f054:	e7e5      	b.n	1f022 <sys_clock_timeout_handler+0x32>
   1f056:	bf00      	nop
   1f058:	20002350 	.word	0x20002350
   1f05c:	200030f0 	.word	0x200030f0
   1f060:	20002338 	.word	0x20002338
   1f064:	40011000 	.word	0x40011000

0001f068 <compare_int_unlock>:
	if (key) {
   1f068:	b319      	cbz	r1, 1f0b2 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f06a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1f06e:	2301      	movs	r3, #1
   1f070:	4a10      	ldr	r2, [pc, #64]	; (1f0b4 <compare_int_unlock+0x4c>)
   1f072:	4083      	lsls	r3, r0
   1f074:	e852 1f00 	ldrex	r1, [r2]
   1f078:	4319      	orrs	r1, r3
   1f07a:	e842 1c00 	strex	ip, r1, [r2]
   1f07e:	f1bc 0f00 	cmp.w	ip, #0
   1f082:	d1f7      	bne.n	1f074 <compare_int_unlock+0xc>
   1f084:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1f088:	4a0b      	ldr	r2, [pc, #44]	; (1f0b8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f08a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f08e:	4083      	lsls	r3, r0
   1f090:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f094:	4b09      	ldr	r3, [pc, #36]	; (1f0bc <compare_int_unlock+0x54>)
   1f096:	f3bf 8f5b 	dmb	ish
   1f09a:	681b      	ldr	r3, [r3, #0]
   1f09c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1f0a0:	fa23 f000 	lsr.w	r0, r3, r0
   1f0a4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f0a6:	bf42      	ittt	mi
   1f0a8:	4b05      	ldrmi	r3, [pc, #20]	; (1f0c0 <compare_int_unlock+0x58>)
   1f0aa:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1f0ae:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1f0b2:	4770      	bx	lr
   1f0b4:	200030ec 	.word	0x200030ec
   1f0b8:	40011000 	.word	0x40011000
   1f0bc:	200030e8 	.word	0x200030e8
   1f0c0:	e000e100 	.word	0xe000e100

0001f0c4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1f0c4:	4b0d      	ldr	r3, [pc, #52]	; (1f0fc <z_nrf_rtc_timer_read+0x38>)
   1f0c6:	6818      	ldr	r0, [r3, #0]
   1f0c8:	0a01      	lsrs	r1, r0, #8
   1f0ca:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1f0cc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1f0d0:	4b0b      	ldr	r3, [pc, #44]	; (1f100 <z_nrf_rtc_timer_read+0x3c>)
   1f0d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1f0d6:	1818      	adds	r0, r3, r0
   1f0d8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1f0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f0e0:	d20a      	bcs.n	1f0f8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1f0e2:	4b08      	ldr	r3, [pc, #32]	; (1f104 <z_nrf_rtc_timer_read+0x40>)
   1f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f0e8:	4290      	cmp	r0, r2
   1f0ea:	eb71 0303 	sbcs.w	r3, r1, r3
   1f0ee:	d203      	bcs.n	1f0f8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1f0f0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1f0f4:	f141 0100 	adc.w	r1, r1, #0
}
   1f0f8:	4770      	bx	lr
   1f0fa:	bf00      	nop
   1f0fc:	200030f0 	.word	0x200030f0
   1f100:	40011000 	.word	0x40011000
   1f104:	20002338 	.word	0x20002338

0001f108 <compare_set>:
{
   1f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f10c:	b085      	sub	sp, #20
   1f10e:	4616      	mov	r6, r2
   1f110:	4698      	mov	r8, r3
   1f112:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1f114:	f7ff ff44 	bl	1efa0 <compare_int_lock>
   1f118:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1f11a:	f7ff ffd3 	bl	1f0c4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1f11e:	42b0      	cmp	r0, r6
   1f120:	eb71 0308 	sbcs.w	r3, r1, r8
   1f124:	d278      	bcs.n	1f218 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1f126:	4b46      	ldr	r3, [pc, #280]	; (1f240 <compare_set+0x138>)
   1f128:	1a30      	subs	r0, r6, r0
   1f12a:	eb68 0101 	sbc.w	r1, r8, r1
   1f12e:	4298      	cmp	r0, r3
   1f130:	f171 0300 	sbcs.w	r3, r1, #0
   1f134:	f080 8081 	bcs.w	1f23a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1f138:	4b42      	ldr	r3, [pc, #264]	; (1f244 <compare_set+0x13c>)
   1f13a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1f13e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1f142:	45d8      	cmp	r8, fp
   1f144:	bf08      	it	eq
   1f146:	4556      	cmpeq	r6, sl
   1f148:	d051      	beq.n	1f1ee <compare_set+0xe6>
   1f14a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1f14e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f152:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1f156:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1f15a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f15c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1f160:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f164:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1f166:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1f16a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f16e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1f170:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f174:	4b34      	ldr	r3, [pc, #208]	; (1f248 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f176:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1f17a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1f17c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1f180:	1a40      	subs	r0, r0, r1
   1f182:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f186:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1f18a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1f18c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1f190:	d107      	bne.n	1f1a2 <compare_set+0x9a>
   1f192:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1f196:	2013      	movs	r0, #19
   1f198:	f00c fd64 	bl	2bc64 <z_impl_k_busy_wait>
   1f19c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1f1a0:	4b29      	ldr	r3, [pc, #164]	; (1f248 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1f1a2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1f1a6:	eba4 000c 	sub.w	r0, r4, ip
   1f1aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1f1ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f1b2:	bf88      	it	hi
   1f1b4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f1b6:	2000      	movs	r0, #0
   1f1b8:	6038      	str	r0, [r7, #0]
   1f1ba:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1f1bc:	9801      	ldr	r0, [sp, #4]
   1f1be:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f1c2:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f1c6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f1ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1f1ce:	4281      	cmp	r1, r0
   1f1d0:	d006      	beq.n	1f1e0 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1f1d2:	1a20      	subs	r0, r4, r0
   1f1d4:	3802      	subs	r0, #2
   1f1d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1f1da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f1de:	d819      	bhi.n	1f214 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1f1e0:	1aa4      	subs	r4, r4, r2
   1f1e2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1f1e6:	eb14 0a06 	adds.w	sl, r4, r6
   1f1ea:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1f1ee:	4915      	ldr	r1, [pc, #84]	; (1f244 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1f1f0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1f1f2:	012b      	lsls	r3, r5, #4
   1f1f4:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1f1f8:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1f1fc:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1f1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f200:	6053      	str	r3, [r2, #4]
	return ret;
   1f202:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1f204:	4628      	mov	r0, r5
   1f206:	9900      	ldr	r1, [sp, #0]
   1f208:	f7ff ff2e 	bl	1f068 <compare_int_unlock>
}
   1f20c:	4620      	mov	r0, r4
   1f20e:	b005      	add	sp, #20
   1f210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f214:	4620      	mov	r0, r4
   1f216:	e7b1      	b.n	1f17c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1f218:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f21a:	4a0c      	ldr	r2, [pc, #48]	; (1f24c <compare_set+0x144>)
   1f21c:	f3bf 8f5b 	dmb	ish
   1f220:	40ab      	lsls	r3, r5
   1f222:	e852 1f00 	ldrex	r1, [r2]
   1f226:	4319      	orrs	r1, r3
   1f228:	e842 1000 	strex	r0, r1, [r2]
   1f22c:	2800      	cmp	r0, #0
   1f22e:	d1f8      	bne.n	1f222 <compare_set+0x11a>
   1f230:	f3bf 8f5b 	dmb	ish
   1f234:	46b2      	mov	sl, r6
   1f236:	46c3      	mov	fp, r8
   1f238:	e7d9      	b.n	1f1ee <compare_set+0xe6>
			return -EINVAL;
   1f23a:	f06f 0415 	mvn.w	r4, #21
   1f23e:	e7e1      	b.n	1f204 <compare_set+0xfc>
   1f240:	01000001 	.word	0x01000001
   1f244:	20002340 	.word	0x20002340
   1f248:	40011000 	.word	0x40011000
   1f24c:	200030e8 	.word	0x200030e8

0001f250 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1f250:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f252:	4b19      	ldr	r3, [pc, #100]	; (1f2b8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1f254:	4d19      	ldr	r5, [pc, #100]	; (1f2bc <sys_clock_driver_init+0x6c>)
   1f256:	2400      	movs	r4, #0
   1f258:	f04f 30ff 	mov.w	r0, #4294967295
   1f25c:	f04f 31ff 	mov.w	r1, #4294967295
   1f260:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1f264:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1f268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f26c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f270:	4b13      	ldr	r3, [pc, #76]	; (1f2c0 <sys_clock_driver_init+0x70>)
   1f272:	2602      	movs	r6, #2
   1f274:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f278:	2101      	movs	r1, #1
   1f27a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1f27e:	2011      	movs	r0, #17
   1f280:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f284:	4622      	mov	r2, r4
   1f286:	f7f5 fc89 	bl	14b9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f28a:	2011      	movs	r0, #17
   1f28c:	f7f5 fc54 	bl	14b38 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f290:	4a0c      	ldr	r2, [pc, #48]	; (1f2c4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f292:	2301      	movs	r3, #1
   1f294:	60ab      	str	r3, [r5, #8]
   1f296:	602b      	str	r3, [r5, #0]
   1f298:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f29a:	4b0b      	ldr	r3, [pc, #44]	; (1f2c8 <sys_clock_driver_init+0x78>)
   1f29c:	4a0b      	ldr	r2, [pc, #44]	; (1f2cc <sys_clock_driver_init+0x7c>)
   1f29e:	9300      	str	r3, [sp, #0]
   1f2a0:	9401      	str	r4, [sp, #4]
   1f2a2:	2300      	movs	r3, #0
   1f2a4:	4620      	mov	r0, r4
   1f2a6:	f7ff ff2f 	bl	1f108 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f2aa:	4630      	mov	r0, r6
   1f2ac:	f7fe fd92 	bl	1ddd4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f2b0:	4620      	mov	r0, r4
   1f2b2:	b002      	add	sp, #8
   1f2b4:	bd70      	pop	{r4, r5, r6, pc}
   1f2b6:	bf00      	nop
   1f2b8:	20002340 	.word	0x20002340
   1f2bc:	40011000 	.word	0x40011000
   1f2c0:	e000e100 	.word	0xe000e100
   1f2c4:	200030ec 	.word	0x200030ec
   1f2c8:	0001eff1 	.word	0x0001eff1
   1f2cc:	007fffff 	.word	0x007fffff

0001f2d0 <rtc_nrf_isr>:
{
   1f2d0:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1f2d4:	4c2c      	ldr	r4, [pc, #176]	; (1f388 <rtc_nrf_isr+0xb8>)
   1f2d6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f2da:	0799      	lsls	r1, r3, #30
   1f2dc:	d50b      	bpl.n	1f2f6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2de:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f2e2:	b143      	cbz	r3, 1f2f6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1f2e4:	4a29      	ldr	r2, [pc, #164]	; (1f38c <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f2e6:	2300      	movs	r3, #0
   1f2e8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1f2ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f2f0:	6813      	ldr	r3, [r2, #0]
   1f2f2:	3301      	adds	r3, #1
   1f2f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f2f6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f2fa:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1f2fc:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f300:	03d2      	lsls	r2, r2, #15
   1f302:	d52d      	bpl.n	1f360 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f304:	f3bf 8f5b 	dmb	ish
   1f308:	4a21      	ldr	r2, [pc, #132]	; (1f390 <rtc_nrf_isr+0xc0>)
   1f30a:	e852 1f00 	ldrex	r1, [r2]
   1f30e:	f021 0001 	bic.w	r0, r1, #1
   1f312:	e842 0500 	strex	r5, r0, [r2]
   1f316:	2d00      	cmp	r5, #0
   1f318:	d1f7      	bne.n	1f30a <rtc_nrf_isr+0x3a>
   1f31a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f31e:	b911      	cbnz	r1, 1f326 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f320:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1f324:	b1e2      	cbz	r2, 1f360 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f326:	2500      	movs	r5, #0
   1f328:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1f32c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f330:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1f334:	f7ff fec6 	bl	1f0c4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f338:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f33c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1f33e:	4b15      	ldr	r3, [pc, #84]	; (1f394 <rtc_nrf_isr+0xc4>)
   1f340:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1f344:	42b0      	cmp	r0, r6
   1f346:	41b9      	sbcs	r1, r7
   1f348:	d20f      	bcs.n	1f36a <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f34a:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f34c:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1f350:	b141      	cbz	r1, 1f364 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1f352:	f8cd 8000 	str.w	r8, [sp]
   1f356:	4632      	mov	r2, r6
   1f358:	463b      	mov	r3, r7
   1f35a:	2000      	movs	r0, #0
   1f35c:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f35e:	e001      	b.n	1f364 <rtc_nrf_isr+0x94>
   1f360:	f383 8810 	msr	PRIMASK, r3
}
   1f364:	b002      	add	sp, #8
   1f366:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f36a:	f04f 3aff 	mov.w	sl, #4294967295
   1f36e:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1f372:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f376:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1f37a:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f37c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f380:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1f384:	e7e2      	b.n	1f34c <rtc_nrf_isr+0x7c>
   1f386:	bf00      	nop
   1f388:	40011000 	.word	0x40011000
   1f38c:	200030f0 	.word	0x200030f0
   1f390:	200030e8 	.word	0x200030e8
   1f394:	20002340 	.word	0x20002340

0001f398 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f398:	1c43      	adds	r3, r0, #1
{
   1f39a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f39c:	d021      	beq.n	1f3e2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f39e:	2801      	cmp	r0, #1
   1f3a0:	dd21      	ble.n	1f3e6 <sys_clock_set_timeout+0x4e>
   1f3a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f3a6:	da20      	bge.n	1f3ea <sys_clock_set_timeout+0x52>
   1f3a8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1f3aa:	f7ff fe8b 	bl	1f0c4 <z_nrf_rtc_timer_read>
   1f3ae:	4b10      	ldr	r3, [pc, #64]	; (1f3f0 <sys_clock_set_timeout+0x58>)
   1f3b0:	e9d3 1300 	ldrd	r1, r3, [r3]
   1f3b4:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1f3b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f3ba:	bf28      	it	cs
   1f3bc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1f3be:	3001      	adds	r0, #1
   1f3c0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1f3c2:	480c      	ldr	r0, [pc, #48]	; (1f3f4 <sys_clock_set_timeout+0x5c>)
   1f3c4:	4282      	cmp	r2, r0
   1f3c6:	bf28      	it	cs
   1f3c8:	4602      	movcs	r2, r0
   1f3ca:	1852      	adds	r2, r2, r1
   1f3cc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1f3d0:	4909      	ldr	r1, [pc, #36]	; (1f3f8 <sys_clock_set_timeout+0x60>)
   1f3d2:	9001      	str	r0, [sp, #4]
   1f3d4:	9100      	str	r1, [sp, #0]
   1f3d6:	f143 0300 	adc.w	r3, r3, #0
   1f3da:	f7ff fe95 	bl	1f108 <compare_set>
}
   1f3de:	b002      	add	sp, #8
   1f3e0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f3e2:	4804      	ldr	r0, [pc, #16]	; (1f3f4 <sys_clock_set_timeout+0x5c>)
   1f3e4:	e7e0      	b.n	1f3a8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f3e6:	2400      	movs	r4, #0
   1f3e8:	e7df      	b.n	1f3aa <sys_clock_set_timeout+0x12>
   1f3ea:	4c02      	ldr	r4, [pc, #8]	; (1f3f4 <sys_clock_set_timeout+0x5c>)
   1f3ec:	e7dd      	b.n	1f3aa <sys_clock_set_timeout+0x12>
   1f3ee:	bf00      	nop
   1f3f0:	20002350 	.word	0x20002350
   1f3f4:	007fffff 	.word	0x007fffff
   1f3f8:	0001eff1 	.word	0x0001eff1

0001f3fc <sys_clock_elapsed>:
{
   1f3fc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1f3fe:	f7ff fe61 	bl	1f0c4 <z_nrf_rtc_timer_read>
   1f402:	4b02      	ldr	r3, [pc, #8]	; (1f40c <sys_clock_elapsed+0x10>)
   1f404:	681b      	ldr	r3, [r3, #0]
}
   1f406:	1ac0      	subs	r0, r0, r3
   1f408:	bd08      	pop	{r3, pc}
   1f40a:	bf00      	nop
   1f40c:	20002350 	.word	0x20002350

0001f410 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   1f410:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f414:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1f416:	2801      	cmp	r0, #1
   1f418:	4b04      	ldr	r3, [pc, #16]	; (1f42c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f41a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1f41e:	bf18      	it	ne
   1f420:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f424:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1f426:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1f42a:	4770      	bx	lr
   1f42c:	50000300 	.word	0x50000300

0001f430 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   1f430:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   1f432:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f436:	2c00      	cmp	r4, #0
   1f438:	bf08      	it	eq
   1f43a:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1f43c:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   1f440:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f444:	bf1c      	itt	ne
   1f446:	2501      	movne	r5, #1
   1f448:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
   1f44a:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
   1f44e:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f452:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
   1f456:	4806      	ldr	r0, [pc, #24]	; (1f470 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f458:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
   1f45c:	bf08      	it	eq
   1f45e:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1f462:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f466:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1f46a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   1f46e:	bd30      	pop	{r4, r5, pc}
   1f470:	50000300 	.word	0x50000300

0001f474 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1f474:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f478:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1f47a:	2801      	cmp	r0, #1
   1f47c:	4b04      	ldr	r3, [pc, #16]	; (1f490 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f47e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1f482:	bf18      	it	ne
   1f484:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f488:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1f48a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1f48e:	4770      	bx	lr
   1f490:	50000300 	.word	0x50000300

0001f494 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1f494:	4602      	mov	r2, r0
   1f496:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1f498:	4801      	ldr	r0, [pc, #4]	; (1f4a0 <multithreading_lock_acquire+0xc>)
   1f49a:	f002 ba37 	b.w	2190c <z_impl_k_mutex_lock>
   1f49e:	bf00      	nop
   1f4a0:	20000afc 	.word	0x20000afc

0001f4a4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1f4a4:	4801      	ldr	r0, [pc, #4]	; (1f4ac <multithreading_lock_release+0x8>)
   1f4a6:	f002 baa9 	b.w	219fc <z_impl_k_mutex_unlock>
   1f4aa:	bf00      	nop
   1f4ac:	20000afc 	.word	0x20000afc

0001f4b0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f4b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1f4b2:	f7f4 fafd 	bl	13ab0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1f4b6:	4b07      	ldr	r3, [pc, #28]	; (1f4d4 <k_sys_fatal_error_handler+0x24>)
   1f4b8:	9305      	str	r3, [sp, #20]
   1f4ba:	2302      	movs	r3, #2
   1f4bc:	9304      	str	r3, [sp, #16]
   1f4be:	4806      	ldr	r0, [pc, #24]	; (1f4d8 <k_sys_fatal_error_handler+0x28>)
   1f4c0:	2300      	movs	r3, #0
   1f4c2:	aa04      	add	r2, sp, #16
   1f4c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f4c8:	f7f4 fbda 	bl	13c80 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1f4cc:	2000      	movs	r0, #0
   1f4ce:	f7f6 f8e9 	bl	156a4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1f4d2:	bf00      	nop
   1f4d4:	0002fc69 	.word	0x0002fc69
   1f4d8:	0002c7f4 	.word	0x0002c7f4

0001f4dc <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1f4dc:	b598      	push	{r3, r4, r7, lr}
   1f4de:	af00      	add	r7, sp, #0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1f4e0:	466c      	mov	r4, sp
   1f4e2:	b08a      	sub	sp, #40	; 0x28
   1f4e4:	466a      	mov	r2, sp
   1f4e6:	4b0c      	ldr	r3, [pc, #48]	; (1f518 <sdc_assertion_handler+0x3c>)
   1f4e8:	61d1      	str	r1, [r2, #28]
   1f4ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f4ee:	2302      	movs	r3, #2
   1f4f0:	f882 3020 	strb.w	r3, [r2, #32]
   1f4f4:	4b09      	ldr	r3, [pc, #36]	; (1f51c <sdc_assertion_handler+0x40>)
   1f4f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4fa:	4809      	ldr	r0, [pc, #36]	; (1f520 <sdc_assertion_handler+0x44>)
   1f4fc:	2300      	movs	r3, #0
   1f4fe:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1f502:	f7f4 fbbd 	bl	13c80 <z_impl_z_log_msg_static_create>
   1f506:	46a5      	mov	sp, r4
	k_oops();
   1f508:	4040      	eors	r0, r0
   1f50a:	f380 8811 	msr	BASEPRI, r0
   1f50e:	f04f 0003 	mov.w	r0, #3
   1f512:	df02      	svc	2
}
   1f514:	46bd      	mov	sp, r7
   1f516:	bd98      	pop	{r3, r4, r7, pc}
   1f518:	0002fc86 	.word	0x0002fc86
   1f51c:	01000004 	.word	0x01000004
   1f520:	0002c864 	.word	0x0002c864

0001f524 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1f524:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1f526:	4804      	ldr	r0, [pc, #16]	; (1f538 <hci_driver_init+0x14>)
   1f528:	f7f7 fd9a 	bl	17060 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1f52c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1f530:	4802      	ldr	r0, [pc, #8]	; (1f53c <hci_driver_init+0x18>)
   1f532:	f7e5 bb1f 	b.w	4b74 <sdc_init>
   1f536:	bf00      	nop
   1f538:	0002d420 	.word	0x0002d420
   1f53c:	0001f4dd 	.word	0x0001f4dd

0001f540 <rand_prio_low_vector_get>:
{
   1f540:	b538      	push	{r3, r4, r5, lr}
   1f542:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1f544:	4807      	ldr	r0, [pc, #28]	; (1f564 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1f546:	6883      	ldr	r3, [r0, #8]
   1f548:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f54a:	460a      	mov	r2, r1
   1f54c:	b135      	cbz	r5, 1f55c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1f54e:	2300      	movs	r3, #0
   1f550:	4621      	mov	r1, r4
   1f552:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1f554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1f558:	b2c0      	uxtb	r0, r0
   1f55a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f55c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f560:	e7f8      	b.n	1f554 <rand_prio_low_vector_get+0x14>
   1f562:	bf00      	nop
   1f564:	0002c48c 	.word	0x0002c48c

0001f568 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1f568:	4901      	ldr	r1, [pc, #4]	; (1f570 <receive_signal_raise+0x8>)
   1f56a:	4802      	ldr	r0, [pc, #8]	; (1f574 <receive_signal_raise+0xc>)
   1f56c:	f00c b9be 	b.w	2b8ec <k_work_submit_to_queue>
   1f570:	200030f4 	.word	0x200030f4
   1f574:	200023d8 	.word	0x200023d8

0001f578 <rand_prio_low_vector_get_blocking>:
{
   1f578:	b410      	push	{r4}
   1f57a:	4603      	mov	r3, r0
   1f57c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1f57e:	4803      	ldr	r0, [pc, #12]	; (1f58c <rand_prio_low_vector_get_blocking+0x14>)
   1f580:	6881      	ldr	r1, [r0, #8]
   1f582:	680c      	ldr	r4, [r1, #0]
   1f584:	4619      	mov	r1, r3
   1f586:	4623      	mov	r3, r4
}
   1f588:	bc10      	pop	{r4}
   1f58a:	4718      	bx	r3
   1f58c:	0002c48c 	.word	0x0002c48c

0001f590 <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1f590:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1f592:	4e1a      	ldr	r6, [pc, #104]	; (1f5fc <event_packet_process.constprop.0+0x6c>)
   1f594:	7830      	ldrb	r0, [r6, #0]
   1f596:	283e      	cmp	r0, #62	; 0x3e
static void event_packet_process(uint8_t *hci_buf)
   1f598:	b086      	sub	sp, #24
	switch (hdr->evt) {
   1f59a:	d019      	beq.n	1f5d0 <event_packet_process.constprop.0+0x40>
   1f59c:	28ff      	cmp	r0, #255	; 0xff
   1f59e:	d01e      	beq.n	1f5de <event_packet_process.constprop.0+0x4e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5a0:	f04f 32ff 	mov.w	r2, #4294967295
   1f5a4:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1f5a8:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5aa:	4621      	mov	r1, r4
   1f5ac:	f7f6 fb30 	bl	15c10 <bt_buf_get_evt>
	if (!evt_buf) {
   1f5b0:	4605      	mov	r5, r0
   1f5b2:	b9b8      	cbnz	r0, 1f5e4 <event_packet_process.constprop.0+0x54>
		if (discardable) {
   1f5b4:	b954      	cbnz	r4, 1f5cc <event_packet_process.constprop.0+0x3c>
		BT_ERR("No event buffer available");
   1f5b6:	4b12      	ldr	r3, [pc, #72]	; (1f600 <event_packet_process.constprop.0+0x70>)
   1f5b8:	9305      	str	r3, [sp, #20]
   1f5ba:	2302      	movs	r3, #2
   1f5bc:	9304      	str	r3, [sp, #16]
   1f5be:	4811      	ldr	r0, [pc, #68]	; (1f604 <event_packet_process.constprop.0+0x74>)
   1f5c0:	4623      	mov	r3, r4
   1f5c2:	aa04      	add	r2, sp, #16
   1f5c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f5c8:	f7f4 fb5a 	bl	13c80 <z_impl_z_log_msg_static_create>
}
   1f5cc:	b006      	add	sp, #24
   1f5ce:	bd70      	pop	{r4, r5, r6, pc}
		switch (me->subevent) {
   1f5d0:	78b3      	ldrb	r3, [r6, #2]
   1f5d2:	2b02      	cmp	r3, #2
		switch (subevent) {
   1f5d4:	d1e4      	bne.n	1f5a0 <event_packet_process.constprop.0+0x10>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5d6:	2200      	movs	r2, #0
   1f5d8:	2300      	movs	r3, #0
		switch (subevent) {
   1f5da:	2401      	movs	r4, #1
   1f5dc:	e7e5      	b.n	1f5aa <event_packet_process.constprop.0+0x1a>
   1f5de:	78b3      	ldrb	r3, [r6, #2]
   1f5e0:	2b80      	cmp	r3, #128	; 0x80
   1f5e2:	e7f7      	b.n	1f5d4 <event_packet_process.constprop.0+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f5e4:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f5e6:	4905      	ldr	r1, [pc, #20]	; (1f5fc <event_packet_process.constprop.0+0x6c>)
   1f5e8:	3202      	adds	r2, #2
   1f5ea:	3008      	adds	r0, #8
   1f5ec:	f00b fa80 	bl	2aaf0 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f5f0:	4628      	mov	r0, r5
}
   1f5f2:	b006      	add	sp, #24
   1f5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1f5f8:	f7f7 bcfc 	b.w	16ff4 <bt_recv>
   1f5fc:	20003eaf 	.word	0x20003eaf
   1f600:	0002fcab 	.word	0x0002fcab
   1f604:	0002c864 	.word	0x0002c864

0001f608 <hci_driver_open>:
{
   1f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f60c:	b08c      	sub	sp, #48	; 0x30
   1f60e:	af00      	add	r7, sp, #0
		hci_ecdh_init();
   1f610:	f000 fd78 	bl	20104 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1f614:	1d38      	adds	r0, r7, #4
   1f616:	f7e5 fa11 	bl	4a3c <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f61a:	466c      	mov	r4, sp
   1f61c:	b088      	sub	sp, #32
   1f61e:	466a      	mov	r2, sp
   1f620:	4b61      	ldr	r3, [pc, #388]	; (1f7a8 <hci_driver_open+0x1a0>)
   1f622:	6153      	str	r3, [r2, #20]
   1f624:	4b61      	ldr	r3, [pc, #388]	; (1f7ac <hci_driver_open+0x1a4>)
   1f626:	6193      	str	r3, [r2, #24]
   1f628:	f04f 0802 	mov.w	r8, #2
   1f62c:	4b60      	ldr	r3, [pc, #384]	; (1f7b0 <hci_driver_open+0x1a8>)
   1f62e:	f882 801c 	strb.w	r8, [r2, #28]
   1f632:	f842 3f10 	str.w	r3, [r2, #16]!
   1f636:	495f      	ldr	r1, [pc, #380]	; (1f7b4 <hci_driver_open+0x1ac>)
   1f638:	485f      	ldr	r0, [pc, #380]	; (1f7b8 <hci_driver_open+0x1b0>)
   1f63a:	1d3b      	adds	r3, r7, #4
   1f63c:	f7f4 fb20 	bl	13c80 <z_impl_z_log_msg_static_create>
   1f640:	46a5      	mov	sp, r4
			err = sdc_support_adv();
   1f642:	f7e5 fb15 	bl	4c70 <sdc_support_adv>
			if (err) {
   1f646:	b128      	cbz	r0, 1f654 <hci_driver_open+0x4c>
				return -ENOTSUP;
   1f648:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1f64c:	3730      	adds	r7, #48	; 0x30
   1f64e:	46bd      	mov	sp, r7
   1f650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdc_support_peripheral();
   1f654:	f7e5 fb3e 	bl	4cd4 <sdc_support_peripheral>
		if (err) {
   1f658:	2800      	cmp	r0, #0
   1f65a:	d1f5      	bne.n	1f648 <hci_driver_open+0x40>
			err = sdc_support_dle_peripheral();
   1f65c:	f7e5 fb18 	bl	4c90 <sdc_support_dle_peripheral>
			if (err) {
   1f660:	2800      	cmp	r0, #0
   1f662:	d1f1      	bne.n	1f648 <hci_driver_open+0x40>
		err = sdc_support_le_2m_phy();
   1f664:	f7e5 fb24 	bl	4cb0 <sdc_support_le_2m_phy>
		if (err) {
   1f668:	2800      	cmp	r0, #0
   1f66a:	d1ed      	bne.n	1f648 <hci_driver_open+0x40>
			err = sdc_support_phy_update_peripheral();
   1f66c:	f7e5 fb42 	bl	4cf4 <sdc_support_phy_update_peripheral>
			if (err) {
   1f670:	4605      	mov	r5, r0
   1f672:	2800      	cmp	r0, #0
   1f674:	d1e8      	bne.n	1f648 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f676:	f107 0418 	add.w	r4, r7, #24
   1f67a:	4622      	mov	r2, r4
   1f67c:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1f67e:	7638      	strb	r0, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f680:	f7e5 f9ea 	bl	4a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1f684:	2800      	cmp	r0, #0
   1f686:	dbe1      	blt.n	1f64c <hci_driver_open+0x44>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f688:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f68a:	4622      	mov	r2, r4
   1f68c:	4641      	mov	r1, r8
   1f68e:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f690:	763e      	strb	r6, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f692:	f7e5 f9e1 	bl	4a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1f696:	2800      	cmp	r0, #0
   1f698:	dbd8      	blt.n	1f64c <hci_driver_open+0x44>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f69a:	4b48      	ldr	r3, [pc, #288]	; (1f7bc <hci_driver_open+0x1b4>)
   1f69c:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f69e:	4622      	mov	r2, r4
   1f6a0:	2103      	movs	r1, #3
   1f6a2:	4628      	mov	r0, r5
   1f6a4:	f7e5 f9d8 	bl	4a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1f6a8:	2800      	cmp	r0, #0
   1f6aa:	dbcf      	blt.n	1f64c <hci_driver_open+0x44>
	cfg.event_length.event_length_us =
   1f6ac:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6b0:	4622      	mov	r2, r4
   1f6b2:	2104      	movs	r1, #4
   1f6b4:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1f6b6:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6b8:	f7e5 f9ce 	bl	4a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1f6bc:	2800      	cmp	r0, #0
   1f6be:	dbc5      	blt.n	1f64c <hci_driver_open+0x44>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6c0:	4622      	mov	r2, r4
   1f6c2:	2105      	movs	r1, #5
   1f6c4:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f6c6:	763e      	strb	r6, [r7, #24]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6c8:	f7e5 f9c6 	bl	4a58 <sdc_cfg_set>
	if (required_memory < 0) {
   1f6cc:	2800      	cmp	r0, #0
   1f6ce:	dbbd      	blt.n	1f64c <hci_driver_open+0x44>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f6d0:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6d2:	4622      	mov	r2, r4
   1f6d4:	2107      	movs	r1, #7
   1f6d6:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f6d8:	833b      	strh	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f6da:	f7e5 f9bd 	bl	4a58 <sdc_cfg_set>
		if (required_memory < 0) {
   1f6de:	2800      	cmp	r0, #0
   1f6e0:	dbb4      	blt.n	1f64c <hci_driver_open+0x44>
	if (required_memory > sizeof(sdc_mempool)) {
   1f6e2:	f240 7314 	movw	r3, #1812	; 0x714
   1f6e6:	4298      	cmp	r0, r3
   1f6e8:	dd19      	ble.n	1f71e <hci_driver_open+0x116>
		BT_ERR("Allocated memory too low: %u < %u",
   1f6ea:	466c      	mov	r4, sp
   1f6ec:	b088      	sub	sp, #32
   1f6ee:	466a      	mov	r2, sp
   1f6f0:	4933      	ldr	r1, [pc, #204]	; (1f7c0 <hci_driver_open+0x1b8>)
   1f6f2:	61d0      	str	r0, [r2, #28]
   1f6f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f6f8:	2304      	movs	r3, #4
   1f6fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6fe:	482e      	ldr	r0, [pc, #184]	; (1f7b8 <hci_driver_open+0x1b0>)
   1f700:	2300      	movs	r3, #0
   1f702:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f706:	f7f4 fabb 	bl	13c80 <z_impl_z_log_msg_static_create>
   1f70a:	46a5      	mov	sp, r4
		k_panic();
   1f70c:	4040      	eors	r0, r0
   1f70e:	f380 8811 	msr	BASEPRI, r0
   1f712:	f04f 0004 	mov.w	r0, #4
   1f716:	df02      	svc	2
		return -ENOMEM;
   1f718:	f06f 000b 	mvn.w	r0, #11
   1f71c:	e796      	b.n	1f64c <hci_driver_open+0x44>
   1f71e:	4829      	ldr	r0, [pc, #164]	; (1f7c4 <hci_driver_open+0x1bc>)
   1f720:	f00b fe8f 	bl	2b442 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1f724:	4603      	mov	r3, r0
   1f726:	b968      	cbnz	r0, 1f744 <hci_driver_open+0x13c>
		BT_ERR("Entropy source device not ready");
   1f728:	4a27      	ldr	r2, [pc, #156]	; (1f7c8 <hci_driver_open+0x1c0>)
   1f72a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1f72c:	2202      	movs	r2, #2
   1f72e:	62ba      	str	r2, [r7, #40]	; 0x28
   1f730:	4821      	ldr	r0, [pc, #132]	; (1f7b8 <hci_driver_open+0x1b0>)
   1f732:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1f736:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f73a:	f7f4 faa1 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1f73e:	f06f 0012 	mvn.w	r0, #18
   1f742:	e783      	b.n	1f64c <hci_driver_open+0x44>
	sdc_rand_source_t rand_functions = {
   1f744:	4b21      	ldr	r3, [pc, #132]	; (1f7cc <hci_driver_open+0x1c4>)
   1f746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1f74a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f74e:	4620      	mov	r0, r4
   1f750:	f7e5 fb22 	bl	4d98 <sdc_rand_source_register>
	if (err) {
   1f754:	b190      	cbz	r0, 1f77c <hci_driver_open+0x174>
		BT_ERR("Failed to register rand source (%d)", err);
   1f756:	466c      	mov	r4, sp
   1f758:	b088      	sub	sp, #32
   1f75a:	466a      	mov	r2, sp
   1f75c:	4b1c      	ldr	r3, [pc, #112]	; (1f7d0 <hci_driver_open+0x1c8>)
   1f75e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f762:	2303      	movs	r3, #3
   1f764:	f842 3f10 	str.w	r3, [r2, #16]!
   1f768:	4813      	ldr	r0, [pc, #76]	; (1f7b8 <hci_driver_open+0x1b0>)
   1f76a:	2300      	movs	r3, #0
   1f76c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f770:	f7f4 fa86 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f774:	f06f 0015 	mvn.w	r0, #21
   1f778:	46a5      	mov	sp, r4
   1f77a:	e767      	b.n	1f64c <hci_driver_open+0x44>
	k_work_init(&receive_work, receive_work_handler);
   1f77c:	4915      	ldr	r1, [pc, #84]	; (1f7d4 <hci_driver_open+0x1cc>)
   1f77e:	4816      	ldr	r0, [pc, #88]	; (1f7d8 <hci_driver_open+0x1d0>)
   1f780:	f00c f887 	bl	2b892 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f784:	f04f 30ff 	mov.w	r0, #4294967295
   1f788:	f04f 31ff 	mov.w	r1, #4294967295
   1f78c:	f7ff fe82 	bl	1f494 <multithreading_lock_acquire>
	if (!err) {
   1f790:	4604      	mov	r4, r0
   1f792:	b930      	cbnz	r0, 1f7a2 <hci_driver_open+0x19a>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1f794:	4911      	ldr	r1, [pc, #68]	; (1f7dc <hci_driver_open+0x1d4>)
   1f796:	4812      	ldr	r0, [pc, #72]	; (1f7e0 <hci_driver_open+0x1d8>)
   1f798:	f7e5 f9c4 	bl	4b24 <sdc_enable>
   1f79c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f79e:	f7ff fe81 	bl	1f4a4 <multithreading_lock_release>
	if (err < 0) {
   1f7a2:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f7a6:	e751      	b.n	1f64c <hci_driver_open+0x44>
   1f7a8:	0002e786 	.word	0x0002e786
   1f7ac:	0002fcc5 	.word	0x0002fcc5
   1f7b0:	01000003 	.word	0x01000003
   1f7b4:	00a01ac0 	.word	0x00a01ac0
   1f7b8:	0002c864 	.word	0x0002c864
   1f7bc:	02031b1b 	.word	0x02031b1b
   1f7c0:	0002fcec 	.word	0x0002fcec
   1f7c4:	0002c48c 	.word	0x0002c48c
   1f7c8:	0002fd0e 	.word	0x0002fd0e
   1f7cc:	0002cb68 	.word	0x0002cb68
   1f7d0:	0002fd2e 	.word	0x0002fd2e
   1f7d4:	0002b0ab 	.word	0x0002b0ab
   1f7d8:	200030f4 	.word	0x200030f4
   1f7dc:	20003ef8 	.word	0x20003ef8
   1f7e0:	0001f845 	.word	0x0001f845

0001f7e4 <data_packet_process.part.0>:
static void data_packet_process(uint8_t *hci_buf)
   1f7e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("No data buffer available");
   1f7e6:	4b07      	ldr	r3, [pc, #28]	; (1f804 <data_packet_process.part.0+0x20>)
   1f7e8:	9305      	str	r3, [sp, #20]
   1f7ea:	2302      	movs	r3, #2
   1f7ec:	9304      	str	r3, [sp, #16]
   1f7ee:	4806      	ldr	r0, [pc, #24]	; (1f808 <data_packet_process.part.0+0x24>)
   1f7f0:	2300      	movs	r3, #0
   1f7f2:	aa04      	add	r2, sp, #16
   1f7f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f7f8:	f7f4 fa42 	bl	13c80 <z_impl_z_log_msg_static_create>
}
   1f7fc:	b007      	add	sp, #28
   1f7fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1f802:	bf00      	nop
   1f804:	0002fd52 	.word	0x0002fd52
   1f808:	0002c864 	.word	0x0002c864

0001f80c <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1f80c:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f80e:	f04f 32ff 	mov.w	r2, #4294967295
   1f812:	f04f 33ff 	mov.w	r3, #4294967295
   1f816:	2003      	movs	r0, #3
   1f818:	f7f6 f9d0 	bl	15bbc <bt_buf_get_rx>
	if (!data_buf) {
   1f81c:	4604      	mov	r4, r0
   1f81e:	b918      	cbnz	r0, 1f828 <data_packet_process.constprop.0+0x1c>
}
   1f820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f824:	f7ff bfde 	b.w	1f7e4 <data_packet_process.part.0>
	len = sys_le16_to_cpu(hdr->len);
   1f828:	4905      	ldr	r1, [pc, #20]	; (1f840 <data_packet_process.constprop.0+0x34>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1f82a:	884a      	ldrh	r2, [r1, #2]
   1f82c:	3008      	adds	r0, #8
   1f82e:	3204      	adds	r2, #4
   1f830:	f00b f95e 	bl	2aaf0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f834:	4620      	mov	r0, r4
}
   1f836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1f83a:	f7f7 bbdb 	b.w	16ff4 <bt_recv>
   1f83e:	bf00      	nop
   1f840:	20003eaf 	.word	0x20003eaf

0001f844 <hci_driver_receive_process>:
{
   1f844:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f846:	f04f 30ff 	mov.w	r0, #4294967295
   1f84a:	f04f 31ff 	mov.w	r1, #4294967295
   1f84e:	f7ff fe21 	bl	1f494 <multithreading_lock_acquire>
	if (!errcode) {
   1f852:	b1c0      	cbz	r0, 1f886 <hci_driver_receive_process+0x42>
		return false;
   1f854:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f856:	f04f 30ff 	mov.w	r0, #4294967295
   1f85a:	f04f 31ff 	mov.w	r1, #4294967295
   1f85e:	f7ff fe19 	bl	1f494 <multithreading_lock_acquire>
	if (!errcode) {
   1f862:	b1e0      	cbz	r0, 1f89e <hci_driver_receive_process+0x5a>
		return false;
   1f864:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f866:	f04f 30ff 	mov.w	r0, #4294967295
   1f86a:	f04f 31ff 	mov.w	r1, #4294967295
   1f86e:	f7ff fe11 	bl	1f494 <multithreading_lock_acquire>
	if (!errcode) {
   1f872:	b300      	cbz	r0, 1f8b6 <hci_driver_receive_process+0x72>
		return false;
   1f874:	2300      	movs	r3, #0
	if (received_evt || received_data || received_msg) {
   1f876:	b90e      	cbnz	r6, 1f87c <hci_driver_receive_process+0x38>
   1f878:	b905      	cbnz	r5, 1f87c <hci_driver_receive_process+0x38>
   1f87a:	b39b      	cbz	r3, 1f8e4 <hci_driver_receive_process+0xa0>
}
   1f87c:	b002      	add	sp, #8
   1f87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1f882:	f7ff be71 	b.w	1f568 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f886:	4818      	ldr	r0, [pc, #96]	; (1f8e8 <hci_driver_receive_process+0xa4>)
   1f888:	f000 fb02 	bl	1fe90 <hci_internal_evt_get>
   1f88c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f88e:	f7ff fe09 	bl	1f4a4 <multithreading_lock_release>
	if (errcode) {
   1f892:	2c00      	cmp	r4, #0
   1f894:	d1de      	bne.n	1f854 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1f896:	f7ff fe7b 	bl	1f590 <event_packet_process.constprop.0>
	return true;
   1f89a:	2601      	movs	r6, #1
   1f89c:	e7db      	b.n	1f856 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f89e:	4812      	ldr	r0, [pc, #72]	; (1f8e8 <hci_driver_receive_process+0xa4>)
   1f8a0:	f7ed fff7 	bl	d892 <sdc_hci_data_get>
   1f8a4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f8a6:	f7ff fdfd 	bl	1f4a4 <multithreading_lock_release>
	if (errcode) {
   1f8aa:	2c00      	cmp	r4, #0
   1f8ac:	d1da      	bne.n	1f864 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1f8ae:	f7ff ffad 	bl	1f80c <data_packet_process.constprop.0>
	return true;
   1f8b2:	2501      	movs	r5, #1
   1f8b4:	e7d7      	b.n	1f866 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1f8b6:	480c      	ldr	r0, [pc, #48]	; (1f8e8 <hci_driver_receive_process+0xa4>)
   1f8b8:	f10d 0107 	add.w	r1, sp, #7
   1f8bc:	f000 fafa 	bl	1feb4 <hci_internal_msg_get>
   1f8c0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f8c2:	f7ff fdef 	bl	1f4a4 <multithreading_lock_release>
	if (errcode) {
   1f8c6:	2c00      	cmp	r4, #0
   1f8c8:	d1d4      	bne.n	1f874 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1f8ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f8ce:	2b04      	cmp	r3, #4
   1f8d0:	d103      	bne.n	1f8da <hci_driver_receive_process+0x96>
		event_packet_process(p_hci_buffer);
   1f8d2:	f7ff fe5d 	bl	1f590 <event_packet_process.constprop.0>
	return true;
   1f8d6:	2301      	movs	r3, #1
   1f8d8:	e7cd      	b.n	1f876 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1f8da:	2b02      	cmp	r3, #2
   1f8dc:	d1ca      	bne.n	1f874 <hci_driver_receive_process+0x30>
		data_packet_process(p_hci_buffer);
   1f8de:	f7ff ff95 	bl	1f80c <data_packet_process.constprop.0>
   1f8e2:	e7f8      	b.n	1f8d6 <hci_driver_receive_process+0x92>
}
   1f8e4:	b002      	add	sp, #8
   1f8e6:	bd70      	pop	{r4, r5, r6, pc}
   1f8e8:	20003eaf 	.word	0x20003eaf

0001f8ec <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f8ec:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f8ee:	4cd6      	ldr	r4, [pc, #856]	; (1fc48 <hci_internal_cmd_put+0x35c>)
   1f8f0:	7823      	ldrb	r3, [r4, #0]
   1f8f2:	2b00      	cmp	r3, #0
   1f8f4:	f040 82c6 	bne.w	1fe84 <hci_internal_cmd_put+0x598>
	return ((uint16_t)src[1] << 8) | src[0];
   1f8f8:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1f8fa:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f8fe:	b22b      	sxth	r3, r5
   1f900:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1f904:	d209      	bcs.n	1f91a <hci_internal_cmd_put+0x2e>
   1f906:	b15a      	cbz	r2, 1f920 <hci_internal_cmd_put+0x34>
   1f908:	3a01      	subs	r2, #1
   1f90a:	2a07      	cmp	r2, #7
   1f90c:	d808      	bhi.n	1f920 <hci_internal_cmd_put+0x34>
   1f90e:	e8df f002 	tbb	[pc, r2]
   1f912:	0709      	.short	0x0709
   1f914:	07075925 	.word	0x07075925
   1f918:	d107      	.short	0xd107
   1f91a:	2a3f      	cmp	r2, #63	; 0x3f
   1f91c:	f000 822b 	beq.w	1fd76 <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   1f920:	2001      	movs	r0, #1
   1f922:	e00e      	b.n	1f942 <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1f924:	f240 4206 	movw	r2, #1030	; 0x406
   1f928:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f92a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f92e:	d006      	beq.n	1f93e <hci_internal_cmd_put+0x52>
   1f930:	f240 421d 	movw	r2, #1053	; 0x41d
   1f934:	4293      	cmp	r3, r2
   1f936:	d1f3      	bne.n	1f920 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f938:	f7ee f8ec 	bl	db14 <sdc_hci_cmd_lc_read_remote_version_information>
   1f93c:	e001      	b.n	1f942 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f93e:	f7ee f8e7 	bl	db10 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f942:	230f      	movs	r3, #15
   1f944:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f946:	2304      	movs	r3, #4
   1f948:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f94a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f94c:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f94e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f950:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f954:	2301      	movs	r3, #1
   1f956:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f958:	2000      	movs	r0, #0
}
   1f95a:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1f95c:	f640 4263 	movw	r2, #3171	; 0xc63
   1f960:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f962:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f966:	d025      	beq.n	1f9b4 <hci_internal_cmd_put+0xc8>
   1f968:	dc0f      	bgt.n	1f98a <hci_internal_cmd_put+0x9e>
   1f96a:	f640 4203 	movw	r2, #3075	; 0xc03
   1f96e:	4293      	cmp	r3, r2
   1f970:	d018      	beq.n	1f9a4 <hci_internal_cmd_put+0xb8>
   1f972:	f640 422d 	movw	r2, #3117	; 0xc2d
   1f976:	4293      	cmp	r3, r2
   1f978:	d017      	beq.n	1f9aa <hci_internal_cmd_put+0xbe>
   1f97a:	f640 4201 	movw	r2, #3073	; 0xc01
   1f97e:	4293      	cmp	r3, r2
   1f980:	d1ce      	bne.n	1f920 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f982:	f7ed ffb7 	bl	d8f4 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f986:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f988:	e091      	b.n	1faae <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   1f98a:	f640 427b 	movw	r2, #3195	; 0xc7b
   1f98e:	4293      	cmp	r3, r2
   1f990:	d013      	beq.n	1f9ba <hci_internal_cmd_put+0xce>
   1f992:	f640 427c 	movw	r2, #3196	; 0xc7c
   1f996:	4293      	cmp	r3, r2
   1f998:	d1c2      	bne.n	1f920 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f99a:	49ac      	ldr	r1, [pc, #688]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1f99c:	f7ed ffb4 	bl	d908 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f9a0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f9a2:	e084      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_reset();
   1f9a4:	f7e5 fae6 	bl	4f74 <sdc_hci_cmd_cb_reset>
   1f9a8:	e7ed      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f9aa:	49a8      	ldr	r1, [pc, #672]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1f9ac:	f7ed ffa0 	bl	d8f0 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f9b0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f9b2:	e07c      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f9b4:	f7ed ffa3 	bl	d8fe <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f9b8:	e7e5      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f9ba:	49a4      	ldr	r1, [pc, #656]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1f9bc:	f7ed ff96 	bl	d8ec <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f9c0:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f9c2:	e074      	b.n	1faae <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   1f9c4:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1f9c8:	3b01      	subs	r3, #1
   1f9ca:	2b08      	cmp	r3, #8
   1f9cc:	d8a8      	bhi.n	1f920 <hci_internal_cmd_put+0x34>
   1f9ce:	a201      	add	r2, pc, #4	; (adr r2, 1f9d4 <hci_internal_cmd_put+0xe8>)
   1f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f9d4:	0001f9f9 	.word	0x0001f9f9
   1f9d8:	0001fa03 	.word	0x0001fa03
   1f9dc:	0001fa7f 	.word	0x0001fa7f
   1f9e0:	0001f921 	.word	0x0001f921
   1f9e4:	0001f921 	.word	0x0001f921
   1f9e8:	0001f921 	.word	0x0001f921
   1f9ec:	0001f921 	.word	0x0001f921
   1f9f0:	0001f921 	.word	0x0001f921
   1f9f4:	0001faa7 	.word	0x0001faa7
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f9f8:	4894      	ldr	r0, [pc, #592]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1f9fa:	f7ee f83e 	bl	da7a <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f9fe:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1fa00:	e055      	b.n	1faae <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   1fa02:	4892      	ldr	r0, [pc, #584]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1fa04:	222f      	movs	r2, #47	; 0x2f
   1fa06:	2100      	movs	r1, #0
   1fa08:	f00c fb02 	bl	2c010 <memset>
	cmds->hci_disconnect = 1;
   1fa0c:	2320      	movs	r3, #32
   1fa0e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1fa10:	2380      	movs	r3, #128	; 0x80
   1fa12:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1fa14:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1fa18:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1fa1a:	2304      	movs	r3, #4
   1fa1c:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1fa1e:	2328      	movs	r3, #40	; 0x28
   1fa20:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1fa22:	2302      	movs	r3, #2
   1fa24:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1fa26:	2304      	movs	r3, #4
   1fa28:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1fa2a:	f06f 0308 	mvn.w	r3, #8
   1fa2e:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1fa32:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1fa36:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1fa3a:	f06f 030c 	mvn.w	r3, #12
   1fa3e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1fa42:	237e      	movs	r3, #126	; 0x7e
   1fa44:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1fa48:	2330      	movs	r3, #48	; 0x30
   1fa4a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1fa4e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1fa52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1fa56:	237f      	movs	r3, #127	; 0x7f
   1fa58:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1fa5c:	f06f 0301 	mvn.w	r3, #1
   1fa60:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1fa64:	2301      	movs	r3, #1
   1fa66:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1fa6a:	2380      	movs	r3, #128	; 0x80
   1fa6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1fa70:	2304      	movs	r3, #4
   1fa72:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   1fa76:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1fa7a:	2344      	movs	r3, #68	; 0x44
   1fa7c:	e13d      	b.n	1fcfa <hci_internal_cmd_put+0x40e>
	memset(features, 0, sizeof(*features));
   1fa7e:	4b73      	ldr	r3, [pc, #460]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1fa80:	2000      	movs	r0, #0
   1fa82:	f8c4 0007 	str.w	r0, [r4, #7]
   1fa86:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   1fa88:	7ae3      	ldrb	r3, [r4, #11]
   1fa8a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1fa8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1fa92:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1fa94:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1fa96:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1fa98:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1fa9a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1fa9c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1fa9e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1faa0:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1faa2:	71a0      	strb	r0, [r4, #6]
}
   1faa4:	e756      	b.n	1f954 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1faa6:	4869      	ldr	r0, [pc, #420]	; (1fc4c <hci_internal_cmd_put+0x360>)
   1faa8:	f7ed ffe5 	bl	da76 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1faac:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1faae:	2801      	cmp	r0, #1
   1fab0:	d1f1      	bne.n	1fa96 <hci_internal_cmd_put+0x1aa>
   1fab2:	e746      	b.n	1f942 <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1fab4:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1fab8:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1faba:	3003      	adds	r0, #3
	switch (opcode)	{
   1fabc:	2b5d      	cmp	r3, #93	; 0x5d
   1fabe:	f63f af2f 	bhi.w	1f920 <hci_internal_cmd_put+0x34>
   1fac2:	a201      	add	r2, pc, #4	; (adr r2, 1fac8 <hci_internal_cmd_put+0x1dc>)
   1fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fac8:	0001fc41 	.word	0x0001fc41
   1facc:	0001fc51 	.word	0x0001fc51
   1fad0:	0001fc59 	.word	0x0001fc59
   1fad4:	0001f921 	.word	0x0001f921
   1fad8:	0001fc7d 	.word	0x0001fc7d
   1fadc:	0001fc83 	.word	0x0001fc83
   1fae0:	0001fc89 	.word	0x0001fc89
   1fae4:	0001fc93 	.word	0x0001fc93
   1fae8:	0001fc99 	.word	0x0001fc99
   1faec:	0001fc9f 	.word	0x0001fc9f
   1faf0:	0001f921 	.word	0x0001f921
   1faf4:	0001f921 	.word	0x0001f921
   1faf8:	0001f921 	.word	0x0001f921
   1fafc:	0001f921 	.word	0x0001f921
   1fb00:	0001fca5 	.word	0x0001fca5
   1fb04:	0001fcad 	.word	0x0001fcad
   1fb08:	0001fcb3 	.word	0x0001fcb3
   1fb0c:	0001fcb9 	.word	0x0001fcb9
   1fb10:	0001f921 	.word	0x0001f921
   1fb14:	0001f921 	.word	0x0001f921
   1fb18:	0001fcbf 	.word	0x0001fcbf
   1fb1c:	0001fcc9 	.word	0x0001fcc9
   1fb20:	0001fccf 	.word	0x0001fccf
   1fb24:	0001fcd9 	.word	0x0001fcd9
   1fb28:	0001f921 	.word	0x0001f921
   1fb2c:	0001fce1 	.word	0x0001fce1
   1fb30:	0001fce9 	.word	0x0001fce9
   1fb34:	0001fcf1 	.word	0x0001fcf1
   1fb38:	0001f921 	.word	0x0001f921
   1fb3c:	0001f921 	.word	0x0001f921
   1fb40:	0001f921 	.word	0x0001f921
   1fb44:	0001f921 	.word	0x0001f921
   1fb48:	0001f921 	.word	0x0001f921
   1fb4c:	0001fcff 	.word	0x0001fcff
   1fb50:	0001fd07 	.word	0x0001fd07
   1fb54:	0001fd0f 	.word	0x0001fd0f
   1fb58:	0001fd15 	.word	0x0001fd15
   1fb5c:	0001fd1b 	.word	0x0001fd1b
   1fb60:	0001fd27 	.word	0x0001fd27
   1fb64:	0001fd2d 	.word	0x0001fd2d
   1fb68:	0001fd33 	.word	0x0001fd33
   1fb6c:	0001fd39 	.word	0x0001fd39
   1fb70:	0001f921 	.word	0x0001f921
   1fb74:	0001f921 	.word	0x0001f921
   1fb78:	0001fd41 	.word	0x0001fd41
   1fb7c:	0001fd47 	.word	0x0001fd47
   1fb80:	0001fd4d 	.word	0x0001fd4d
   1fb84:	0001fd55 	.word	0x0001fd55
   1fb88:	0001fd5d 	.word	0x0001fd5d
   1fb8c:	0001fd63 	.word	0x0001fd63
   1fb90:	0001f921 	.word	0x0001f921
   1fb94:	0001f921 	.word	0x0001f921
   1fb98:	0001f921 	.word	0x0001f921
   1fb9c:	0001f921 	.word	0x0001f921
   1fba0:	0001f921 	.word	0x0001f921
   1fba4:	0001f921 	.word	0x0001f921
   1fba8:	0001f921 	.word	0x0001f921
   1fbac:	0001f921 	.word	0x0001f921
   1fbb0:	0001f921 	.word	0x0001f921
   1fbb4:	0001f921 	.word	0x0001f921
   1fbb8:	0001f921 	.word	0x0001f921
   1fbbc:	0001f921 	.word	0x0001f921
   1fbc0:	0001f921 	.word	0x0001f921
   1fbc4:	0001f921 	.word	0x0001f921
   1fbc8:	0001f921 	.word	0x0001f921
   1fbcc:	0001f921 	.word	0x0001f921
   1fbd0:	0001f921 	.word	0x0001f921
   1fbd4:	0001f921 	.word	0x0001f921
   1fbd8:	0001f921 	.word	0x0001f921
   1fbdc:	0001f921 	.word	0x0001f921
   1fbe0:	0001f921 	.word	0x0001f921
   1fbe4:	0001f921 	.word	0x0001f921
   1fbe8:	0001f921 	.word	0x0001f921
   1fbec:	0001f921 	.word	0x0001f921
   1fbf0:	0001fd69 	.word	0x0001fd69
   1fbf4:	0001f921 	.word	0x0001f921
   1fbf8:	0001f921 	.word	0x0001f921
   1fbfc:	0001fd71 	.word	0x0001fd71
   1fc00:	0001f921 	.word	0x0001f921
   1fc04:	0001f921 	.word	0x0001f921
   1fc08:	0001f921 	.word	0x0001f921
   1fc0c:	0001f921 	.word	0x0001f921
   1fc10:	0001f921 	.word	0x0001f921
   1fc14:	0001f921 	.word	0x0001f921
   1fc18:	0001f921 	.word	0x0001f921
   1fc1c:	0001f921 	.word	0x0001f921
   1fc20:	0001f921 	.word	0x0001f921
   1fc24:	0001f921 	.word	0x0001f921
   1fc28:	0001f921 	.word	0x0001f921
   1fc2c:	0001f921 	.word	0x0001f921
   1fc30:	0001f921 	.word	0x0001f921
   1fc34:	0001f921 	.word	0x0001f921
   1fc38:	0001f921 	.word	0x0001f921
   1fc3c:	0001fd21 	.word	0x0001fd21
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1fc40:	f7ed ff55 	bl	daee <sdc_hci_cmd_le_set_event_mask>
   1fc44:	e69f      	b.n	1f986 <hci_internal_cmd_put+0x9a>
   1fc46:	bf00      	nop
   1fc48:	2000460c 	.word	0x2000460c
   1fc4c:	20004613 	.word	0x20004613
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1fc50:	488e      	ldr	r0, [pc, #568]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fc52:	f7ed ff2a 	bl	daaa <sdc_hci_cmd_le_read_buffer_size>
   1fc56:	e6ab      	b.n	1f9b0 <hci_internal_cmd_put+0xc4>
	memset(features, 0, sizeof(*features));
   1fc58:	4b8c      	ldr	r3, [pc, #560]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fc5a:	2000      	movs	r0, #0
   1fc5c:	f8c4 0007 	str.w	r0, [r4, #7]
   1fc60:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   1fc62:	79e3      	ldrb	r3, [r4, #7]
   1fc64:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1fc68:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1fc6c:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1fc6e:	7a23      	ldrb	r3, [r4, #8]
   1fc70:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1fc74:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1fc78:	7223      	strb	r3, [r4, #8]
   1fc7a:	e70b      	b.n	1fa94 <hci_internal_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1fc7c:	f7ed ff40 	bl	db00 <sdc_hci_cmd_le_set_random_address>
   1fc80:	e681      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1fc82:	f7ed ff2e 	bl	dae2 <sdc_hci_cmd_le_set_adv_params>
   1fc86:	e67e      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1fc88:	4880      	ldr	r0, [pc, #512]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fc8a:	f7ed ff0c 	bl	daa6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1fc8e:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1fc90:	e70d      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1fc92:	f7ed ff22 	bl	dada <sdc_hci_cmd_le_set_adv_data>
   1fc96:	e676      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1fc98:	f7ed ff36 	bl	db08 <sdc_hci_cmd_le_set_scan_response_data>
   1fc9c:	e673      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1fc9e:	f7ed ff1e 	bl	dade <sdc_hci_cmd_le_set_adv_enable>
   1fca2:	e670      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1fca4:	4879      	ldr	r0, [pc, #484]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fca6:	f7ed ff04 	bl	dab2 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1fcaa:	e7f0      	b.n	1fc8e <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1fcac:	f7ed feeb 	bl	da86 <sdc_hci_cmd_le_clear_filter_accept_list>
   1fcb0:	e669      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1fcb2:	f7ed fee4 	bl	da7e <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1fcb6:	e666      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1fcb8:	f7ed ff09 	bl	dace <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1fcbc:	e663      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fcbe:	4973      	ldr	r1, [pc, #460]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fcc0:	f7ed fef5 	bl	daae <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1fcc4:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fcc6:	e6f2      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1fcc8:	f7ed fef9 	bl	dabe <sdc_hci_cmd_le_read_remote_features>
   1fccc:	e639      	b.n	1f942 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fcce:	496f      	ldr	r1, [pc, #444]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fcd0:	f7ed fedd 	bl	da8e <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1fcd4:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fcd6:	e6ea      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1fcd8:	486c      	ldr	r0, [pc, #432]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fcda:	f7ed fee2 	bl	daa2 <sdc_hci_cmd_le_rand>
   1fcde:	e68e      	b.n	1f9fe <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1fce0:	496a      	ldr	r1, [pc, #424]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fce2:	f7ed feda 	bl	da9a <sdc_hci_cmd_le_long_term_key_request_reply>
   1fce6:	e65b      	b.n	1f9a0 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1fce8:	4968      	ldr	r1, [pc, #416]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fcea:	f7ed fed2 	bl	da92 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1fcee:	e657      	b.n	1f9a0 <hci_internal_cmd_put+0xb4>
	*buf = states1;
   1fcf0:	238f      	movs	r3, #143	; 0x8f
   1fcf2:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1fcf4:	23c0      	movs	r3, #192	; 0xc0
   1fcf6:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1fcf8:	230c      	movs	r3, #12
		return 0;
   1fcfa:	2000      	movs	r0, #0
   1fcfc:	e6cb      	b.n	1fa96 <hci_internal_cmd_put+0x1aa>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1fcfe:	4963      	ldr	r1, [pc, #396]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd00:	f7ed fef1 	bl	dae6 <sdc_hci_cmd_le_set_data_length>
   1fd04:	e64c      	b.n	1f9a0 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1fd06:	4861      	ldr	r0, [pc, #388]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd08:	f7ed fedd 	bl	dac6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1fd0c:	e658      	b.n	1f9c0 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1fd0e:	f7ed fefd 	bl	db0c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1fd12:	e638      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   1fd14:	f000 fa20 	bl	20158 <hci_cmd_le_read_local_p256_public_key>
   1fd18:	e613      	b.n	1f942 <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1fd1a:	f00b fa07 	bl	2b12c <hci_cmd_le_generate_dhkey>
   1fd1e:	e610      	b.n	1f942 <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1fd20:	f00b fa07 	bl	2b132 <hci_cmd_le_generate_dhkey_v2>
   1fd24:	e62f      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1fd26:	f7ed feac 	bl	da82 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1fd2a:	e62c      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1fd2c:	f7ed fed1 	bl	dad2 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1fd30:	e629      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_clear_resolving_list();
   1fd32:	f7ed feaa 	bl	da8a <sdc_hci_cmd_le_clear_resolving_list>
   1fd36:	e626      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1fd38:	4854      	ldr	r0, [pc, #336]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd3a:	f7ed fec2 	bl	dac2 <sdc_hci_cmd_le_read_resolving_list_size>
   1fd3e:	e7a6      	b.n	1fc8e <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1fd40:	f7ed fec9 	bl	dad6 <sdc_hci_cmd_le_set_address_resolution_enable>
   1fd44:	e61f      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1fd46:	f7ed fedd 	bl	db04 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1fd4a:	e61c      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1fd4c:	484f      	ldr	r0, [pc, #316]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd4e:	f7ed feb2 	bl	dab6 <sdc_hci_cmd_le_read_max_data_length>
   1fd52:	e654      	b.n	1f9fe <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1fd54:	494d      	ldr	r1, [pc, #308]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd56:	f7ed feb0 	bl	daba <sdc_hci_cmd_le_read_phy>
   1fd5a:	e631      	b.n	1f9c0 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1fd5c:	f7ed fec5 	bl	daea <sdc_hci_cmd_le_set_default_phy>
   1fd60:	e611      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1fd62:	f7ed fec9 	bl	daf8 <sdc_hci_cmd_le_set_phy>
   1fd66:	e5ec      	b.n	1f942 <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1fd68:	4848      	ldr	r0, [pc, #288]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fd6a:	f7ed feae 	bl	daca <sdc_hci_cmd_le_read_transmit_power>
   1fd6e:	e617      	b.n	1f9a0 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1fd70:	f7ed fec4 	bl	dafc <sdc_hci_cmd_le_set_privacy_mode>
   1fd74:	e607      	b.n	1f986 <hci_internal_cmd_put+0x9a>
	switch (opcode)	{
   1fd76:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1fd7a:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1fd7c:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1fd80:	d820      	bhi.n	1fdc4 <hci_internal_cmd_put+0x4d8>
   1fd82:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1fd86:	f43f adcb 	beq.w	1f920 <hci_internal_cmd_put+0x34>
   1fd8a:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1fd8e:	3b01      	subs	r3, #1
   1fd90:	2b09      	cmp	r3, #9
   1fd92:	f63f adc5 	bhi.w	1f920 <hci_internal_cmd_put+0x34>
   1fd96:	a201      	add	r2, pc, #4	; (adr r2, 1fd9c <hci_internal_cmd_put+0x4b0>)
   1fd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fd9c:	0001fe09 	.word	0x0001fe09
   1fda0:	0001fe13 	.word	0x0001fe13
   1fda4:	0001f921 	.word	0x0001f921
   1fda8:	0001f921 	.word	0x0001f921
   1fdac:	0001f921 	.word	0x0001f921
   1fdb0:	0001fe47 	.word	0x0001fe47
   1fdb4:	0001f921 	.word	0x0001f921
   1fdb8:	0001f921 	.word	0x0001f921
   1fdbc:	0001fe33 	.word	0x0001fe33
   1fdc0:	0001fe3d 	.word	0x0001fe3d
   1fdc4:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1fdc8:	b29b      	uxth	r3, r3
   1fdca:	2b09      	cmp	r3, #9
   1fdcc:	f63f ada8 	bhi.w	1f920 <hci_internal_cmd_put+0x34>
   1fdd0:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1fdd4:	2b09      	cmp	r3, #9
   1fdd6:	f63f ada3 	bhi.w	1f920 <hci_internal_cmd_put+0x34>
   1fdda:	a201      	add	r2, pc, #4	; (adr r2, 1fde0 <hci_internal_cmd_put+0x4f4>)
   1fddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fde0:	0001fe4d 	.word	0x0001fe4d
   1fde4:	0001fe61 	.word	0x0001fe61
   1fde8:	0001fe67 	.word	0x0001fe67
   1fdec:	0001fe6d 	.word	0x0001fe6d
   1fdf0:	0001fe73 	.word	0x0001fe73
   1fdf4:	0001fe79 	.word	0x0001fe79
   1fdf8:	0001f921 	.word	0x0001f921
   1fdfc:	0001f921 	.word	0x0001f921
   1fe00:	0001f921 	.word	0x0001f921
   1fe04:	0001fe7f 	.word	0x0001fe7f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fe08:	4820      	ldr	r0, [pc, #128]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fe0a:	f7e5 f8c7 	bl	4f9c <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1fe0e:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fe10:	e64d      	b.n	1faae <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   1fe12:	2300      	movs	r3, #0
   1fe14:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   1fe18:	79e3      	ldrb	r3, [r4, #7]
   1fe1a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1fe1e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1fe22:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1fe24:	7a23      	ldrb	r3, [r4, #8]
   1fe26:	f023 0307 	bic.w	r3, r3, #7
   1fe2a:	f043 0307 	orr.w	r3, r3, #7
   1fe2e:	7223      	strb	r3, [r4, #8]
}
   1fe30:	e623      	b.n	1fa7a <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fe32:	4816      	ldr	r0, [pc, #88]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fe34:	f7ed fdce 	bl	d9d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1fe38:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fe3a:	e638      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fe3c:	4813      	ldr	r0, [pc, #76]	; (1fe8c <hci_internal_cmd_put+0x5a0>)
   1fe3e:	f7ed fd7c 	bl	d93a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1fe42:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fe44:	e633      	b.n	1faae <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1fe46:	f7ed fe14 	bl	da72 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1fe4a:	e59c      	b.n	1f986 <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   1fe4c:	2300      	movs	r3, #0
   1fe4e:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   1fe52:	79e3      	ldrb	r3, [r4, #7]
   1fe54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1fe58:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1fe5c:	71e3      	strb	r3, [r4, #7]
}
   1fe5e:	e60c      	b.n	1fa7a <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1fe60:	f7ed fd60 	bl	d924 <sdc_hci_cmd_vs_llpm_mode_set>
   1fe64:	e58f      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1fe66:	f7ed fd59 	bl	d91c <sdc_hci_cmd_vs_conn_update>
   1fe6a:	e58c      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1fe6c:	f7ed fd4e 	bl	d90c <sdc_hci_cmd_vs_conn_event_extend>
   1fe70:	e589      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1fe72:	f7ed fd5d 	bl	d930 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1fe76:	e586      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1fe78:	f7ed fd52 	bl	d920 <sdc_hci_cmd_vs_event_length_set>
   1fe7c:	e583      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1fe7e:	f7ed fd53 	bl	d928 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1fe82:	e580      	b.n	1f986 <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   1fe84:	f04f 30ff 	mov.w	r0, #4294967295
   1fe88:	e567      	b.n	1f95a <hci_internal_cmd_put+0x6e>
   1fe8a:	bf00      	nop
   1fe8c:	20004613 	.word	0x20004613

0001fe90 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1fe90:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1fe92:	4c07      	ldr	r4, [pc, #28]	; (1feb0 <hci_internal_evt_get+0x20>)
   1fe94:	7823      	ldrb	r3, [r4, #0]
   1fe96:	b91b      	cbnz	r3, 1fea0 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1fe9c:	f7ed bd11 	b.w	d8c2 <sdc_hci_evt_get>
		memcpy(evt_out,
   1fea0:	78a2      	ldrb	r2, [r4, #2]
   1fea2:	1c61      	adds	r1, r4, #1
   1fea4:	3202      	adds	r2, #2
   1fea6:	f00c f892 	bl	2bfce <memcpy>
		cmd_complete_or_status.occurred = false;
   1feaa:	2000      	movs	r0, #0
   1feac:	7020      	strb	r0, [r4, #0]
}
   1feae:	bd10      	pop	{r4, pc}
   1feb0:	2000460c 	.word	0x2000460c

0001feb4 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1feb4:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1feb6:	4c09      	ldr	r4, [pc, #36]	; (1fedc <hci_internal_msg_get+0x28>)
   1feb8:	7823      	ldrb	r3, [r4, #0]
{
   1feba:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1febc:	b91b      	cbnz	r3, 1fec6 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1febe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1fec2:	f7ed bd0b 	b.w	d8dc <sdc_hci_get>
		memcpy(msg_out,
   1fec6:	78a2      	ldrb	r2, [r4, #2]
   1fec8:	1c61      	adds	r1, r4, #1
   1feca:	3202      	adds	r2, #2
   1fecc:	f00c f87f 	bl	2bfce <memcpy>
		cmd_complete_or_status.occurred = false;
   1fed0:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fed2:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1fed4:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fed6:	702b      	strb	r3, [r5, #0]
}
   1fed8:	bd38      	pop	{r3, r4, r5, pc}
   1feda:	bf00      	nop
   1fedc:	2000460c 	.word	0x2000460c

0001fee0 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1fee0:	b570      	push	{r4, r5, r6, lr}
   1fee2:	4605      	mov	r5, r0
   1fee4:	460e      	mov	r6, r1
   1fee6:	4c08      	ldr	r4, [pc, #32]	; (1ff08 <bt_rand+0x28>)
   1fee8:	4620      	mov	r0, r4
   1feea:	f00b faaa 	bl	2b442 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1feee:	b138      	cbz	r0, 1ff00 <bt_rand+0x20>
   1fef0:	68a3      	ldr	r3, [r4, #8]
   1fef2:	b2b2      	uxth	r2, r6
   1fef4:	4629      	mov	r1, r5
   1fef6:	4620      	mov	r0, r4
   1fef8:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1fefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fefe:	4718      	bx	r3
   1ff00:	f06f 0012 	mvn.w	r0, #18
   1ff04:	bd70      	pop	{r4, r5, r6, pc}
   1ff06:	bf00      	nop
   1ff08:	0002c48c 	.word	0x0002c48c

0001ff0c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ff0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ff0e:	4b24      	ldr	r3, [pc, #144]	; (1ffa0 <ecdh_p256_common_secret+0x94>)
   1ff10:	4924      	ldr	r1, [pc, #144]	; (1ffa4 <ecdh_p256_common_secret+0x98>)
   1ff12:	f103 0220 	add.w	r2, r3, #32
   1ff16:	2800      	cmp	r0, #0
   1ff18:	bf08      	it	eq
   1ff1a:	4619      	moveq	r1, r3
{
   1ff1c:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ff1e:	4610      	mov	r0, r2
   1ff20:	f002 fe64 	bl	22bec <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1ff24:	4604      	mov	r4, r0
   1ff26:	b180      	cbz	r0, 1ff4a <ecdh_p256_common_secret+0x3e>
		BT_ERR("public key is not valid (err %d)", err);
   1ff28:	466d      	mov	r5, sp
   1ff2a:	b088      	sub	sp, #32
   1ff2c:	466a      	mov	r2, sp
   1ff2e:	4b1e      	ldr	r3, [pc, #120]	; (1ffa8 <ecdh_p256_common_secret+0x9c>)
   1ff30:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ff34:	2303      	movs	r3, #3
   1ff36:	f842 3f10 	str.w	r3, [r2, #16]!
   1ff3a:	481c      	ldr	r0, [pc, #112]	; (1ffac <ecdh_p256_common_secret+0xa0>)
   1ff3c:	2300      	movs	r3, #0
   1ff3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ff42:	f7f3 fe9d 	bl	13c80 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1ff46:	2412      	movs	r4, #18
   1ff48:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ff4a:	f04f 32ff 	mov.w	r2, #4294967295
   1ff4e:	f04f 33ff 	mov.w	r3, #4294967295
   1ff52:	2001      	movs	r0, #1
   1ff54:	f7f5 fe32 	bl	15bbc <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1ff58:	f100 0608 	add.w	r6, r0, #8
   1ff5c:	2102      	movs	r1, #2
   1ff5e:	4605      	mov	r5, r0
   1ff60:	4630      	mov	r0, r6
   1ff62:	f00a fdbf 	bl	2aae4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ff66:	233e      	movs	r3, #62	; 0x3e
   1ff68:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ff6a:	2322      	movs	r3, #34	; 0x22
   1ff6c:	7043      	strb	r3, [r0, #1]
   1ff6e:	2101      	movs	r1, #1
   1ff70:	4630      	mov	r0, r6
   1ff72:	f00a fdb7 	bl	2aae4 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1ff76:	2309      	movs	r3, #9
   1ff78:	7003      	strb	r3, [r0, #0]
   1ff7a:	2121      	movs	r1, #33	; 0x21
   1ff7c:	4630      	mov	r0, r6
   1ff7e:	f00a fdb1 	bl	2aae4 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1ff82:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1ff86:	b134      	cbz	r4, 1ff96 <ecdh_p256_common_secret+0x8a>
__ssp_bos_icheck3(memset, void *, int)
   1ff88:	2220      	movs	r2, #32
   1ff8a:	21ff      	movs	r1, #255	; 0xff
   1ff8c:	f00c f840 	bl	2c010 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1ff90:	4628      	mov	r0, r5
   1ff92:	46bd      	mov	sp, r7
   1ff94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1ff96:	4906      	ldr	r1, [pc, #24]	; (1ffb0 <ecdh_p256_common_secret+0xa4>)
   1ff98:	f00b f8be 	bl	2b118 <sys_memcpy_swap.constprop.0>
   1ff9c:	e7f8      	b.n	1ff90 <ecdh_p256_common_secret+0x84>
   1ff9e:	bf00      	nop
   1ffa0:	20004653 	.word	0x20004653
   1ffa4:	0002fdf2 	.word	0x0002fdf2
   1ffa8:	0002fdac 	.word	0x0002fdac
   1ffac:	0002c7a4 	.word	0x0002c7a4
   1ffb0:	20004673 	.word	0x20004673

0001ffb4 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ffb6:	4e3d      	ldr	r6, [pc, #244]	; (200ac <ecdh_cmd_process+0xf8>)
   1ffb8:	f3bf 8f5b 	dmb	ish
   1ffbc:	6833      	ldr	r3, [r6, #0]
   1ffbe:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1ffc2:	2b02      	cmp	r3, #2
{
   1ffc4:	b087      	sub	sp, #28
	switch (atomic_get(&cmd)) {
   1ffc6:	d05a      	beq.n	2007e <ecdh_cmd_process+0xca>
   1ffc8:	2b04      	cmp	r3, #4
   1ffca:	d05d      	beq.n	20088 <ecdh_cmd_process+0xd4>
   1ffcc:	2b01      	cmp	r3, #1
   1ffce:	d15d      	bne.n	2008c <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   1ffd0:	4c37      	ldr	r4, [pc, #220]	; (200b0 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ffd2:	4f38      	ldr	r7, [pc, #224]	; (200b4 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1ffd4:	2120      	movs	r1, #32
   1ffd6:	4620      	mov	r0, r4
   1ffd8:	f7ff ff82 	bl	1fee0 <bt_rand>
		if (err) {
   1ffdc:	2800      	cmp	r0, #0
   1ffde:	d143      	bne.n	20068 <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ffe0:	2220      	movs	r2, #32
   1ffe2:	4639      	mov	r1, r7
   1ffe4:	4620      	mov	r0, r4
   1ffe6:	f00b ffe2 	bl	2bfae <memcmp>
   1ffea:	2800      	cmp	r0, #0
   1ffec:	d0f2      	beq.n	1ffd4 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1ffee:	4832      	ldr	r0, [pc, #200]	; (200b8 <ecdh_cmd_process+0x104>)
   1fff0:	4621      	mov	r1, r4
   1fff2:	f002 fde7 	bl	22bc4 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1fff6:	4605      	mov	r5, r0
   1fff8:	2800      	cmp	r0, #0
   1fffa:	d1eb      	bne.n	1ffd4 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fffc:	f04f 32ff 	mov.w	r2, #4294967295
   20000:	f04f 33ff 	mov.w	r3, #4294967295
   20004:	2001      	movs	r0, #1
   20006:	f7f5 fdd9 	bl	15bbc <bt_buf_get_rx>
   2000a:	f100 0708 	add.w	r7, r0, #8
   2000e:	2102      	movs	r1, #2
   20010:	4604      	mov	r4, r0
   20012:	4638      	mov	r0, r7
   20014:	f00a fd66 	bl	2aae4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   20018:	233e      	movs	r3, #62	; 0x3e
   2001a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2001c:	2342      	movs	r3, #66	; 0x42
   2001e:	7043      	strb	r3, [r0, #1]
   20020:	2101      	movs	r1, #1
   20022:	4638      	mov	r0, r7
   20024:	f00a fd5e 	bl	2aae4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   20028:	2308      	movs	r3, #8
   2002a:	7003      	strb	r3, [r0, #0]
   2002c:	2141      	movs	r1, #65	; 0x41
   2002e:	4638      	mov	r0, r7
   20030:	f00a fd58 	bl	2aae4 <net_buf_simple_add>
   20034:	4607      	mov	r7, r0
	evt->status = status;
   20036:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   2003a:	b1bd      	cbz	r5, 2006c <ecdh_cmd_process+0xb8>
   2003c:	2240      	movs	r2, #64	; 0x40
   2003e:	2100      	movs	r1, #0
   20040:	f00b ffe6 	bl	2c010 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20044:	f3bf 8f5b 	dmb	ish
   20048:	2300      	movs	r3, #0
   2004a:	e856 2f00 	ldrex	r2, [r6]
   2004e:	e846 3100 	strex	r1, r3, [r6]
   20052:	2900      	cmp	r1, #0
   20054:	d1f9      	bne.n	2004a <ecdh_cmd_process+0x96>
   20056:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   2005a:	b324      	cbz	r4, 200a6 <ecdh_cmd_process+0xf2>
		bt_recv(buf);
   2005c:	4620      	mov	r0, r4
	}
}
   2005e:	b007      	add	sp, #28
   20060:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   20064:	f7f6 bfc6 	b.w	16ff4 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   20068:	251f      	movs	r5, #31
   2006a:	e7c7      	b.n	1fffc <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   2006c:	4912      	ldr	r1, [pc, #72]	; (200b8 <ecdh_cmd_process+0x104>)
   2006e:	f00b f853 	bl	2b118 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   20072:	3120      	adds	r1, #32
   20074:	f107 0021 	add.w	r0, r7, #33	; 0x21
   20078:	f00b f84e 	bl	2b118 <sys_memcpy_swap.constprop.0>
		break;
   2007c:	e7e2      	b.n	20044 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   2007e:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   20080:	f7ff ff44 	bl	1ff0c <ecdh_p256_common_secret>
   20084:	4604      	mov	r4, r0
		break;
   20086:	e7dd      	b.n	20044 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   20088:	2001      	movs	r0, #1
   2008a:	e7f9      	b.n	20080 <ecdh_cmd_process+0xcc>
		BT_WARN("Unknown command");
   2008c:	4b0b      	ldr	r3, [pc, #44]	; (200bc <ecdh_cmd_process+0x108>)
   2008e:	9305      	str	r3, [sp, #20]
   20090:	2302      	movs	r3, #2
   20092:	9304      	str	r3, [sp, #16]
   20094:	480a      	ldr	r0, [pc, #40]	; (200c0 <ecdh_cmd_process+0x10c>)
   20096:	2300      	movs	r3, #0
   20098:	aa04      	add	r2, sp, #16
   2009a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2009e:	f7f3 fdef 	bl	13c80 <z_impl_z_log_msg_static_create>
		buf = NULL;
   200a2:	2400      	movs	r4, #0
		break;
   200a4:	e7ce      	b.n	20044 <ecdh_cmd_process+0x90>
}
   200a6:	b007      	add	sp, #28
   200a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   200aa:	bf00      	nop
   200ac:	20003104 	.word	0x20003104
   200b0:	20004653 	.word	0x20004653
   200b4:	0002fdf2 	.word	0x0002fdf2
   200b8:	20004673 	.word	0x20004673
   200bc:	0002fdcd 	.word	0x0002fdcd
   200c0:	0002c7a4 	.word	0x0002c7a4

000200c4 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   200c4:	b510      	push	{r4, lr}
   200c6:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   200c8:	2210      	movs	r2, #16
   200ca:	2100      	movs	r1, #0
   200cc:	a801      	add	r0, sp, #4
   200ce:	f00b ff9f 	bl	2c010 <memset>
   200d2:	4c0b      	ldr	r4, [pc, #44]	; (20100 <ecdh_thread+0x3c>)
   200d4:	9405      	str	r4, [sp, #20]
   200d6:	2301      	movs	r3, #1
   200d8:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   200dc:	f04f 32ff 	mov.w	r2, #4294967295
   200e0:	f04f 33ff 	mov.w	r3, #4294967295
   200e4:	2101      	movs	r1, #1
   200e6:	a801      	add	r0, sp, #4
   200e8:	f002 fcbc 	bl	22a64 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   200ec:	4620      	mov	r0, r4
   200ee:	f00b ff53 	bl	2bf98 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   200f2:	9b04      	ldr	r3, [sp, #16]
   200f4:	f36f 3352 	bfc	r3, #13, #6
   200f8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   200fa:	f7ff ff5b 	bl	1ffb4 <ecdh_cmd_process>
	while (true) {
   200fe:	e7ed      	b.n	200dc <ecdh_thread+0x18>
   20100:	20003108 	.word	0x20003108

00020104 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   20104:	b510      	push	{r4, lr}
   20106:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   20108:	480e      	ldr	r0, [pc, #56]	; (20144 <hci_ecdh_init+0x40>)
   2010a:	f00b ff40 	bl	2bf8e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2010e:	4c0e      	ldr	r4, [pc, #56]	; (20148 <hci_ecdh_init+0x44>)
   20110:	490e      	ldr	r1, [pc, #56]	; (2014c <hci_ecdh_init+0x48>)
   20112:	2200      	movs	r2, #0
   20114:	2300      	movs	r3, #0
   20116:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2011a:	2300      	movs	r3, #0
   2011c:	220a      	movs	r2, #10
   2011e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   20122:	e9cd 3301 	strd	r3, r3, [sp, #4]
   20126:	9300      	str	r3, [sp, #0]
   20128:	f44f 7262 	mov.w	r2, #904	; 0x388
   2012c:	4b08      	ldr	r3, [pc, #32]	; (20150 <hci_ecdh_init+0x4c>)
   2012e:	4620      	mov	r0, r4
   20130:	f001 fb48 	bl	217c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20134:	4907      	ldr	r1, [pc, #28]	; (20154 <hci_ecdh_init+0x50>)
   20136:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   20138:	b008      	add	sp, #32
   2013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2013e:	f00b ba3e 	b.w	2b5be <z_impl_k_thread_name_set>
   20142:	bf00      	nop
   20144:	20003108 	.word	0x20003108
   20148:	20002358 	.word	0x20002358
   2014c:	200053c8 	.word	0x200053c8
   20150:	000200c5 	.word	0x000200c5
   20154:	0002fddd 	.word	0x0002fddd

00020158 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   20158:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2015a:	4b0b      	ldr	r3, [pc, #44]	; (20188 <hci_cmd_le_read_local_p256_public_key+0x30>)
   2015c:	f3bf 8f5b 	dmb	ish
   20160:	2201      	movs	r2, #1
   20162:	e853 1f00 	ldrex	r1, [r3]
   20166:	2900      	cmp	r1, #0
   20168:	d103      	bne.n	20172 <hci_cmd_le_read_local_p256_public_key+0x1a>
   2016a:	e843 2000 	strex	r0, r2, [r3]
   2016e:	2800      	cmp	r0, #0
   20170:	d1f7      	bne.n	20162 <hci_cmd_le_read_local_p256_public_key+0xa>
   20172:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   20176:	d105      	bne.n	20184 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   20178:	4804      	ldr	r0, [pc, #16]	; (2018c <hci_cmd_le_read_local_p256_public_key+0x34>)
   2017a:	2100      	movs	r1, #0
   2017c:	f002 fcce 	bl	22b1c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   20180:	2000      	movs	r0, #0
}
   20182:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   20184:	200c      	movs	r0, #12
   20186:	e7fc      	b.n	20182 <hci_cmd_le_read_local_p256_public_key+0x2a>
   20188:	20003104 	.word	0x20003104
   2018c:	20003108 	.word	0x20003108

00020190 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   20190:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   20192:	2900      	cmp	r1, #0
   20194:	4b11      	ldr	r3, [pc, #68]	; (201dc <cmd_le_generate_dhkey+0x4c>)
   20196:	f3bf 8f5b 	dmb	ish
{
   2019a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2019c:	bf14      	ite	ne
   2019e:	2204      	movne	r2, #4
   201a0:	2202      	moveq	r2, #2
   201a2:	e853 1f00 	ldrex	r1, [r3]
   201a6:	2900      	cmp	r1, #0
   201a8:	d103      	bne.n	201b2 <cmd_le_generate_dhkey+0x22>
   201aa:	e843 2000 	strex	r0, r2, [r3]
   201ae:	2800      	cmp	r0, #0
   201b0:	d1f7      	bne.n	201a2 <cmd_le_generate_dhkey+0x12>
   201b2:	f3bf 8f5b 	dmb	ish
   201b6:	d10e      	bne.n	201d6 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   201b8:	4621      	mov	r1, r4
   201ba:	4809      	ldr	r0, [pc, #36]	; (201e0 <cmd_le_generate_dhkey+0x50>)
   201bc:	f00a ffac 	bl	2b118 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   201c0:	4808      	ldr	r0, [pc, #32]	; (201e4 <cmd_le_generate_dhkey+0x54>)
   201c2:	f104 0120 	add.w	r1, r4, #32
   201c6:	f00a ffa7 	bl	2b118 <sys_memcpy_swap.constprop.0>
   201ca:	4807      	ldr	r0, [pc, #28]	; (201e8 <cmd_le_generate_dhkey+0x58>)
   201cc:	2100      	movs	r1, #0
   201ce:	f002 fca5 	bl	22b1c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   201d2:	2000      	movs	r0, #0
}
   201d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   201d6:	200c      	movs	r0, #12
   201d8:	e7fc      	b.n	201d4 <cmd_le_generate_dhkey+0x44>
   201da:	bf00      	nop
   201dc:	20003104 	.word	0x20003104
   201e0:	20004673 	.word	0x20004673
   201e4:	20004693 	.word	0x20004693
   201e8:	20003108 	.word	0x20003108

000201ec <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   201ec:	4901      	ldr	r1, [pc, #4]	; (201f4 <mpsl_low_prio_irq_handler+0x8>)
   201ee:	4802      	ldr	r0, [pc, #8]	; (201f8 <mpsl_low_prio_irq_handler+0xc>)
   201f0:	f00b bb7c 	b.w	2b8ec <k_work_submit_to_queue>
   201f4:	20003118 	.word	0x20003118
   201f8:	200023d8 	.word	0x200023d8

000201fc <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   201fc:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   201fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   20202:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   20206:	2300      	movs	r3, #0
   20208:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   2020c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   20210:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20214:	4a10      	ldr	r2, [pc, #64]	; (20258 <mpsl_lib_init+0x5c>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   20216:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20218:	2119      	movs	r1, #25
   2021a:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   2021c:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20220:	f7e4 fa46 	bl	46b0 <mpsl_init>
	if (err) {
   20224:	4604      	mov	r4, r0
   20226:	b9a0      	cbnz	r0, 20252 <mpsl_lib_init+0x56>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   20228:	480c      	ldr	r0, [pc, #48]	; (2025c <mpsl_lib_init+0x60>)
   2022a:	2101      	movs	r1, #1
   2022c:	f7ec fdba 	bl	cda4 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   20230:	4604      	mov	r4, r0
   20232:	b970      	cbnz	r0, 20252 <mpsl_lib_init+0x56>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20234:	4601      	mov	r1, r0
   20236:	2201      	movs	r2, #1
   20238:	2008      	movs	r0, #8
   2023a:	f7f4 fcaf 	bl	14b9c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2023e:	2201      	movs	r2, #1
   20240:	4621      	mov	r1, r4
   20242:	200b      	movs	r0, #11
   20244:	f7f4 fcaa 	bl	14b9c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20248:	2201      	movs	r2, #1
   2024a:	4621      	mov	r1, r4
   2024c:	4610      	mov	r0, r2
   2024e:	f7f4 fca5 	bl	14b9c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   20252:	4620      	mov	r0, r4
   20254:	b002      	add	sp, #8
   20256:	bd10      	pop	{r4, pc}
   20258:	00020261 	.word	0x00020261
   2025c:	20003128 	.word	0x20003128

00020260 <m_assert_handler>:
{
   20260:	b598      	push	{r3, r4, r7, lr}
   20262:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   20264:	466c      	mov	r4, sp
   20266:	b08a      	sub	sp, #40	; 0x28
   20268:	466a      	mov	r2, sp
   2026a:	4b0c      	ldr	r3, [pc, #48]	; (2029c <m_assert_handler+0x3c>)
   2026c:	61d1      	str	r1, [r2, #28]
   2026e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20272:	2302      	movs	r3, #2
   20274:	f882 3020 	strb.w	r3, [r2, #32]
   20278:	4b09      	ldr	r3, [pc, #36]	; (202a0 <m_assert_handler+0x40>)
   2027a:	f842 3f10 	str.w	r3, [r2, #16]!
   2027e:	4809      	ldr	r0, [pc, #36]	; (202a4 <m_assert_handler+0x44>)
   20280:	2300      	movs	r3, #0
   20282:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   20286:	f7f3 fcfb 	bl	13c80 <z_impl_z_log_msg_static_create>
   2028a:	46a5      	mov	sp, r4
	k_oops();
   2028c:	4040      	eors	r0, r0
   2028e:	f380 8811 	msr	BASEPRI, r0
   20292:	f04f 0003 	mov.w	r0, #3
   20296:	df02      	svc	2
}
   20298:	46bd      	mov	sp, r7
   2029a:	bd98      	pop	{r3, r4, r7, pc}
   2029c:	0002fe12 	.word	0x0002fe12
   202a0:	01000004 	.word	0x01000004
   202a4:	0002c834 	.word	0x0002c834

000202a8 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   202a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   202aa:	4d0d      	ldr	r5, [pc, #52]	; (202e0 <mpsl_low_prio_init+0x38>)
   202ac:	490d      	ldr	r1, [pc, #52]	; (202e4 <mpsl_low_prio_init+0x3c>)
   202ae:	2400      	movs	r4, #0
   202b0:	9400      	str	r4, [sp, #0]
   202b2:	f06f 0309 	mvn.w	r3, #9
   202b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   202ba:	4628      	mov	r0, r5
   202bc:	f001 fda2 	bl	21e04 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   202c0:	4909      	ldr	r1, [pc, #36]	; (202e8 <mpsl_low_prio_init+0x40>)
   202c2:	4628      	mov	r0, r5
   202c4:	f00b f97b 	bl	2b5be <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   202c8:	4908      	ldr	r1, [pc, #32]	; (202ec <mpsl_low_prio_init+0x44>)
   202ca:	4809      	ldr	r0, [pc, #36]	; (202f0 <mpsl_low_prio_init+0x48>)
   202cc:	f00b fae1 	bl	2b892 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   202d0:	4622      	mov	r2, r4
   202d2:	2104      	movs	r1, #4
   202d4:	2019      	movs	r0, #25
   202d6:	f7f4 fc61 	bl	14b9c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   202da:	4620      	mov	r0, r4
   202dc:	b003      	add	sp, #12
   202de:	bd30      	pop	{r4, r5, pc}
   202e0:	200023d8 	.word	0x200023d8
   202e4:	20005750 	.word	0x20005750
   202e8:	0002fe26 	.word	0x0002fe26
   202ec:	0002b161 	.word	0x0002b161
   202f0:	20003118 	.word	0x20003118

000202f4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   202f4:	4b01      	ldr	r3, [pc, #4]	; (202fc <mpsl_hfclk_callback+0x8>)
   202f6:	2000      	movs	r0, #0
   202f8:	681b      	ldr	r3, [r3, #0]
   202fa:	4718      	bx	r3
   202fc:	20003158 	.word	0x20003158

00020300 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   20300:	b120      	cbz	r0, 2030c <nrfx_clock_start+0xc>
   20302:	2801      	cmp	r0, #1
   20304:	d106      	bne.n	20314 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20306:	4804      	ldr	r0, [pc, #16]	; (20318 <nrfx_clock_start+0x18>)
   20308:	f7e4 b848 	b.w	439c <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2030c:	4b03      	ldr	r3, [pc, #12]	; (2031c <nrfx_clock_start+0x1c>)
   2030e:	2001      	movs	r0, #1
   20310:	681b      	ldr	r3, [r3, #0]
   20312:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20314:	4770      	bx	lr
   20316:	bf00      	nop
   20318:	000202f5 	.word	0x000202f5
   2031c:	20003158 	.word	0x20003158

00020320 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   20320:	4b01      	ldr	r3, [pc, #4]	; (20328 <nrfx_clock_init+0x8>)
   20322:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   20324:	4801      	ldr	r0, [pc, #4]	; (2032c <nrfx_clock_init+0xc>)
   20326:	4770      	bx	lr
   20328:	20003158 	.word	0x20003158
   2032c:	0bad0000 	.word	0x0bad0000

00020330 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20330:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20332:	4d1d      	ldr	r5, [pc, #116]	; (203a8 <timeslot_callback+0x78>)
   20334:	f3bf 8f5b 	dmb	ish
   20338:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   2033a:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   2033e:	bb84      	cbnz	r4, 203a2 <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   20340:	2906      	cmp	r1, #6
   20342:	d804      	bhi.n	2034e <timeslot_callback+0x1e>
   20344:	2904      	cmp	r1, #4
   20346:	d822      	bhi.n	2038e <timeslot_callback+0x5e>
   20348:	b139      	cbz	r1, 2035a <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   2034a:	4620      	mov	r0, r4
   2034c:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   2034e:	2907      	cmp	r1, #7
   20350:	d1fb      	bne.n	2034a <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   20352:	4628      	mov	r0, r5
   20354:	f001 fbc2 	bl	21adc <z_impl_k_sem_give>
}
   20358:	e7f7      	b.n	2034a <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   2035a:	6a2b      	ldr	r3, [r5, #32]
   2035c:	e9d3 2000 	ldrd	r2, r0, [r3]
   20360:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   20362:	2801      	cmp	r0, #1
   20364:	d005      	beq.n	20372 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   20366:	462c      	mov	r4, r5
   20368:	2302      	movs	r3, #2
   2036a:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   2036e:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   20370:	e7eb      	b.n	2034a <timeslot_callback+0x1a>
			_context.timeslot_request.params.earliest.timeout_us =
   20372:	f247 5330 	movw	r3, #30000	; 0x7530
   20376:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   20378:	2303      	movs	r3, #3
   2037a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   2037e:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   20382:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   20386:	63ab      	str	r3, [r5, #56]	; 0x38
   20388:	f105 0434 	add.w	r4, r5, #52	; 0x34
   2038c:	e7dd      	b.n	2034a <timeslot_callback+0x1a>
	_context.timeslot_request.params.earliest.timeout_us =
   2038e:	4b07      	ldr	r3, [pc, #28]	; (203ac <timeslot_callback+0x7c>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20390:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   20392:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20396:	f105 0124 	add.w	r1, r5, #36	; 0x24
	_context.timeslot_request.params.earliest.timeout_us =
   2039a:	632b      	str	r3, [r5, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2039c:	f7ec fca6 	bl	ccec <mpsl_timeslot_request>
}
   203a0:	e7d3      	b.n	2034a <timeslot_callback+0x1a>
		return NULL;
   203a2:	2400      	movs	r4, #0
   203a4:	e7d1      	b.n	2034a <timeslot_callback+0x1a>
   203a6:	bf00      	nop
   203a8:	2000315c 	.word	0x2000315c
   203ac:	0f423fff 	.word	0x0f423fff

000203b0 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   203b0:	4802      	ldr	r0, [pc, #8]	; (203bc <nrf_flash_sync_init+0xc>)
   203b2:	2201      	movs	r2, #1
   203b4:	2100      	movs	r1, #0
   203b6:	f00b b9ec 	b.w	2b792 <z_impl_k_sem_init>
   203ba:	bf00      	nop
   203bc:	2000315c 	.word	0x2000315c

000203c0 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   203c0:	4b01      	ldr	r3, [pc, #4]	; (203c8 <nrf_flash_sync_set_context+0x8>)
   203c2:	61d8      	str	r0, [r3, #28]
}
   203c4:	4770      	bx	lr
   203c6:	bf00      	nop
   203c8:	2000315c 	.word	0x2000315c

000203cc <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   203cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   203d0:	4c43      	ldr	r4, [pc, #268]	; (204e0 <nrf_flash_sync_exe+0x114>)
{
   203d2:	b086      	sub	sp, #24
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   203d4:	f04f 31ff 	mov.w	r1, #4294967295
{
   203d8:	af00      	add	r7, sp, #0
   203da:	4680      	mov	r8, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   203dc:	f04f 30ff 	mov.w	r0, #4294967295
   203e0:	f7ff f858 	bl	1f494 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   203e4:	f104 0118 	add.w	r1, r4, #24
   203e8:	483e      	ldr	r0, [pc, #248]	; (204e4 <nrf_flash_sync_exe+0x118>)
   203ea:	f7e0 fdf1 	bl	fd0 <mpsl_timeslot_session_open>
   203ee:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   203f0:	f7ff f858 	bl	1f4a4 <multithreading_lock_release>

	if (ret < 0) {
   203f4:	2d00      	cmp	r5, #0
   203f6:	da15      	bge.n	20424 <nrf_flash_sync_exe+0x58>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   203f8:	466c      	mov	r4, sp
   203fa:	b088      	sub	sp, #32
   203fc:	466a      	mov	r2, sp
   203fe:	4b3a      	ldr	r3, [pc, #232]	; (204e8 <nrf_flash_sync_exe+0x11c>)
   20400:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20404:	2303      	movs	r3, #3
   20406:	f842 3f10 	str.w	r3, [r2, #16]!
   2040a:	4838      	ldr	r0, [pc, #224]	; (204ec <nrf_flash_sync_exe+0x120>)
   2040c:	2300      	movs	r3, #0
   2040e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20412:	f7f3 fc35 	bl	13c80 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   20416:	f06f 000b 	mvn.w	r0, #11
   2041a:	46a5      	mov	sp, r4
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   2041c:	3718      	adds	r7, #24
   2041e:	46bd      	mov	sp, r7
   20420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   20424:	f240 1301 	movw	r3, #257	; 0x101
   20428:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2042a:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   2042c:	f8c4 8020 	str.w	r8, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20430:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   20432:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   20434:	f247 5330 	movw	r3, #30000	; 0x7530
   20438:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2043a:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   2043c:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20440:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   20444:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20446:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2044a:	f3bf 8f5b 	dmb	ish
   2044e:	e855 3f00 	ldrex	r3, [r5]
   20452:	e845 6200 	strex	r2, r6, [r5]
   20456:	2a00      	cmp	r2, #0
   20458:	d1f9      	bne.n	2044e <nrf_flash_sync_exe+0x82>
   2045a:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2045e:	f04f 31ff 	mov.w	r1, #4294967295
   20462:	f04f 30ff 	mov.w	r0, #4294967295
   20466:	f7ff f815 	bl	1f494 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   2046a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   2046e:	7e20      	ldrb	r0, [r4, #24]
   20470:	f7ec fc3c 	bl	ccec <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   20474:	f7ff f816 	bl	1f4a4 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   20478:	4a1d      	ldr	r2, [pc, #116]	; (204f0 <nrf_flash_sync_exe+0x124>)
   2047a:	2300      	movs	r3, #0
   2047c:	4620      	mov	r0, r4
   2047e:	f001 fb53 	bl	21b28 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20482:	42b0      	cmp	r0, r6
   20484:	da16      	bge.n	204b4 <nrf_flash_sync_exe+0xe8>
		LOG_ERR("timeout");
   20486:	4b1b      	ldr	r3, [pc, #108]	; (204f4 <nrf_flash_sync_exe+0x128>)
   20488:	617b      	str	r3, [r7, #20]
   2048a:	2302      	movs	r3, #2
   2048c:	613b      	str	r3, [r7, #16]
   2048e:	4817      	ldr	r0, [pc, #92]	; (204ec <nrf_flash_sync_exe+0x120>)
   20490:	4633      	mov	r3, r6
   20492:	f107 0210 	add.w	r2, r7, #16
   20496:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2049a:	f7f3 fbf1 	bl	13c80 <z_impl_z_log_msg_static_create>
   2049e:	f3bf 8f5b 	dmb	ish
   204a2:	2301      	movs	r3, #1
   204a4:	e855 2f00 	ldrex	r2, [r5]
   204a8:	e845 3100 	strex	r1, r3, [r5]
   204ac:	2900      	cmp	r1, #0
   204ae:	d1f9      	bne.n	204a4 <nrf_flash_sync_exe+0xd8>
   204b0:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   204b4:	f04f 31ff 	mov.w	r1, #4294967295
   204b8:	f04f 30ff 	mov.w	r0, #4294967295
   204bc:	f7fe ffea 	bl	1f494 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   204c0:	7e20      	ldrb	r0, [r4, #24]
   204c2:	f7ec fc4e 	bl	cd62 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   204c6:	f7fe ffed 	bl	1f4a4 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   204ca:	f3bf 8f5b 	dmb	ish
   204ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   204d0:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   204d4:	b113      	cbz	r3, 204dc <nrf_flash_sync_exe+0x110>
	z_impl_k_sem_reset(sem);
   204d6:	4802      	ldr	r0, [pc, #8]	; (204e0 <nrf_flash_sync_exe+0x114>)
   204d8:	f001 fb4e 	bl	21b78 <z_impl_k_sem_reset>
	return _context.status;
   204dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   204de:	e79d      	b.n	2041c <nrf_flash_sync_exe+0x50>
   204e0:	2000315c 	.word	0x2000315c
   204e4:	00020331 	.word	0x00020331
   204e8:	0002fe3a 	.word	0x0002fe3a
   204ec:	0002c804 	.word	0x0002c804
   204f0:	000b7b44 	.word	0x000b7b44
   204f4:	0002ec79 	.word	0x0002ec79

000204f8 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   204f8:	4b07      	ldr	r3, [pc, #28]	; (20518 <nrf_flash_sync_check_time_limit+0x20>)
   204fa:	2201      	movs	r2, #1
   204fc:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   204fe:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   20502:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   20506:	4418      	add	r0, r3
   20508:	4b04      	ldr	r3, [pc, #16]	; (2051c <nrf_flash_sync_check_time_limit+0x24>)
   2050a:	69db      	ldr	r3, [r3, #28]
}
   2050c:	4298      	cmp	r0, r3
   2050e:	bf34      	ite	cc
   20510:	2000      	movcc	r0, #0
   20512:	2001      	movcs	r0, #1
   20514:	4770      	bx	lr
   20516:	bf00      	nop
   20518:	40008000 	.word	0x40008000
   2051c:	2000315c 	.word	0x2000315c

00020520 <temp_nrf5_mpsl_channel_get>:
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   20520:	290c      	cmp	r1, #12
{
   20522:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   20524:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   20526:	d113      	bne.n	20550 <temp_nrf5_mpsl_channel_get+0x30>
		return -ENOTSUP;
	}

	uval = data->sample;
   20528:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2052a:	4c0b      	ldr	r4, [pc, #44]	; (20558 <temp_nrf5_mpsl_channel_get+0x38>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   2052c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   20530:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   20534:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   20536:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   2053a:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2053c:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   20540:	bfbd      	ittte	lt
   20542:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   20544:	425b      	neglt	r3, r3
		val->val1 = -(int32_t)val1_abs;
   20546:	6011      	strlt	r1, [r2, #0]
	} else {
		val->val1 = (int32_t)val1_abs;
   20548:	6011      	strge	r1, [r2, #0]
		val->val2 = (int32_t)val2_abs;
   2054a:	6053      	str	r3, [r2, #4]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   2054c:	2000      	movs	r0, #0
}
   2054e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   20550:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20554:	e7fb      	b.n	2054e <temp_nrf5_mpsl_channel_get+0x2e>
   20556:	bf00      	nop
   20558:	0003d090 	.word	0x0003d090

0002055c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2055c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   20560:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20564:	2a08      	cmp	r2, #8
   20566:	d106      	bne.n	20576 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20568:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2056c:	2b05      	cmp	r3, #5
   2056e:	d802      	bhi.n	20576 <nrf52_errata_103+0x1a>
   20570:	4a02      	ldr	r2, [pc, #8]	; (2057c <nrf52_errata_103+0x20>)
   20572:	5cd0      	ldrb	r0, [r2, r3]
   20574:	4770      	bx	lr
        return false;
   20576:	2000      	movs	r0, #0
}
   20578:	4770      	bx	lr
   2057a:	bf00      	nop
   2057c:	0002fe93 	.word	0x0002fe93

00020580 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20580:	4a02      	ldr	r2, [pc, #8]	; (2058c <nvmc_wait+0xc>)
   20582:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20586:	2b00      	cmp	r3, #0
   20588:	d0fb      	beq.n	20582 <nvmc_wait+0x2>
}
   2058a:	4770      	bx	lr
   2058c:	4001e000 	.word	0x4001e000

00020590 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20590:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20592:	f00a fe34 	bl	2b1fe <nrf52_errata_136>
   20596:	b140      	cbz	r0, 205aa <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2059c:	2200      	movs	r2, #0
   2059e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   205a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   205a6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   205aa:	f00a fe28 	bl	2b1fe <nrf52_errata_136>
   205ae:	2800      	cmp	r0, #0
   205b0:	d046      	beq.n	20640 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   205b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   205b6:	4b60      	ldr	r3, [pc, #384]	; (20738 <SystemInit+0x1a8>)
   205b8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   205bc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   205c0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   205c4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   205c8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   205cc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   205d0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   205d4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   205d8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   205dc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   205e0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   205e4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   205e8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   205ec:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   205f0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   205f4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   205f8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   205fc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20600:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20604:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20608:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2060c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20610:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20614:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20618:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2061c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20620:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20624:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20628:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2062c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20630:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20634:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20638:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2063c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   20640:	f7ff ff8c 	bl	2055c <nrf52_errata_103>
   20644:	b118      	cbz	r0, 2064e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   20646:	4b3d      	ldr	r3, [pc, #244]	; (2073c <SystemInit+0x1ac>)
   20648:	4a3d      	ldr	r2, [pc, #244]	; (20740 <SystemInit+0x1b0>)
   2064a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2064e:	f7ff ff85 	bl	2055c <nrf52_errata_103>
   20652:	b118      	cbz	r0, 2065c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   20654:	4b3b      	ldr	r3, [pc, #236]	; (20744 <SystemInit+0x1b4>)
   20656:	22fb      	movs	r2, #251	; 0xfb
   20658:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2065c:	f7ff ff7e 	bl	2055c <nrf52_errata_103>
   20660:	b170      	cbz	r0, 20680 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   20666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2066a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2066e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   20672:	f022 020f 	bic.w	r2, r2, #15
   20676:	f003 030f 	and.w	r3, r3, #15
   2067a:	4313      	orrs	r3, r2
   2067c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   20680:	f7ff ff6c 	bl	2055c <nrf52_errata_103>
   20684:	b120      	cbz	r0, 20690 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   20686:	4b30      	ldr	r3, [pc, #192]	; (20748 <SystemInit+0x1b8>)
   20688:	f44f 7200 	mov.w	r2, #512	; 0x200
   2068c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20690:	f00a fdb5 	bl	2b1fe <nrf52_errata_136>
   20694:	b148      	cbz	r0, 206aa <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2069a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2069e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   206a0:	bf44      	itt	mi
   206a2:	f06f 0201 	mvnmi.w	r2, #1
   206a6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   206aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   206ae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   206b2:	2a08      	cmp	r2, #8
   206b4:	d10e      	bne.n	206d4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   206b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   206ba:	2b05      	cmp	r3, #5
   206bc:	d802      	bhi.n	206c4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   206be:	4a23      	ldr	r2, [pc, #140]	; (2074c <SystemInit+0x1bc>)
   206c0:	5cd3      	ldrb	r3, [r2, r3]
   206c2:	b13b      	cbz	r3, 206d4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   206c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   206c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   206cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   206d0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   206d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   206d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   206dc:	2a00      	cmp	r2, #0
   206de:	db03      	blt.n	206e8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   206e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   206e4:	2b00      	cmp	r3, #0
   206e6:	da22      	bge.n	2072e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   206e8:	4919      	ldr	r1, [pc, #100]	; (20750 <SystemInit+0x1c0>)
   206ea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   206ec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   206f0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   206f4:	2412      	movs	r4, #18
    nvmc_wait();
   206f6:	f7ff ff43 	bl	20580 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   206fa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   206fe:	f7ff ff3f 	bl	20580 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20702:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20706:	f7ff ff3b 	bl	20580 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2070a:	2300      	movs	r3, #0
   2070c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20710:	f7ff ff36 	bl	20580 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   20714:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20718:	490e      	ldr	r1, [pc, #56]	; (20754 <SystemInit+0x1c4>)
   2071a:	4b0f      	ldr	r3, [pc, #60]	; (20758 <SystemInit+0x1c8>)
   2071c:	68ca      	ldr	r2, [r1, #12]
   2071e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20722:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20724:	60cb      	str	r3, [r1, #12]
   20726:	f3bf 8f4f 	dsb	sy
    __NOP();
   2072a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2072c:	e7fd      	b.n	2072a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2072e:	4b0b      	ldr	r3, [pc, #44]	; (2075c <SystemInit+0x1cc>)
   20730:	4a0b      	ldr	r2, [pc, #44]	; (20760 <SystemInit+0x1d0>)
   20732:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20734:	bd10      	pop	{r4, pc}
   20736:	bf00      	nop
   20738:	4000c000 	.word	0x4000c000
   2073c:	40005000 	.word	0x40005000
   20740:	00038148 	.word	0x00038148
   20744:	4000f000 	.word	0x4000f000
   20748:	40029000 	.word	0x40029000
   2074c:	0002fe8d 	.word	0x0002fe8d
   20750:	4001e000 	.word	0x4001e000
   20754:	e000ed00 	.word	0xe000ed00
   20758:	05fa0004 	.word	0x05fa0004
   2075c:	200007c4 	.word	0x200007c4
   20760:	03d09000 	.word	0x03d09000

00020764 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20764:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20766:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   20768:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2076a:	fab2 f382 	clz	r3, r2
   2076e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   20772:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   20774:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   20776:	d014      	beq.n	207a2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20778:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2077c:	fa05 f303 	lsl.w	r3, r5, r3
   20780:	ea22 0303 	bic.w	r3, r2, r3
   20784:	e850 6f00 	ldrex	r6, [r0]
   20788:	4296      	cmp	r6, r2
   2078a:	d104      	bne.n	20796 <nrfx_flag32_alloc+0x32>
   2078c:	e840 3c00 	strex	ip, r3, [r0]
   20790:	f1bc 0f00 	cmp.w	ip, #0
   20794:	d1f6      	bne.n	20784 <nrfx_flag32_alloc+0x20>
   20796:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2079a:	d1e5      	bne.n	20768 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2079c:	4802      	ldr	r0, [pc, #8]	; (207a8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   2079e:	700c      	strb	r4, [r1, #0]
}
   207a0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   207a2:	4802      	ldr	r0, [pc, #8]	; (207ac <nrfx_flag32_alloc+0x48>)
   207a4:	e7fc      	b.n	207a0 <nrfx_flag32_alloc+0x3c>
   207a6:	bf00      	nop
   207a8:	0bad0000 	.word	0x0bad0000
   207ac:	0bad0002 	.word	0x0bad0002

000207b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   207b0:	6803      	ldr	r3, [r0, #0]
   207b2:	40cb      	lsrs	r3, r1
   207b4:	07db      	lsls	r3, r3, #31
{
   207b6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   207b8:	d415      	bmi.n	207e6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   207ba:	2301      	movs	r3, #1
   207bc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   207c0:	6803      	ldr	r3, [r0, #0]
   207c2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   207c6:	ea41 0203 	orr.w	r2, r1, r3
   207ca:	e850 4f00 	ldrex	r4, [r0]
   207ce:	429c      	cmp	r4, r3
   207d0:	d104      	bne.n	207dc <nrfx_flag32_free+0x2c>
   207d2:	e840 2c00 	strex	ip, r2, [r0]
   207d6:	f1bc 0f00 	cmp.w	ip, #0
   207da:	d1f6      	bne.n	207ca <nrfx_flag32_free+0x1a>
   207dc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   207e0:	d1ee      	bne.n	207c0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   207e2:	4802      	ldr	r0, [pc, #8]	; (207ec <nrfx_flag32_free+0x3c>)
}
   207e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   207e6:	4802      	ldr	r0, [pc, #8]	; (207f0 <nrfx_flag32_free+0x40>)
   207e8:	e7fc      	b.n	207e4 <nrfx_flag32_free+0x34>
   207ea:	bf00      	nop
   207ec:	0bad0000 	.word	0x0bad0000
   207f0:	0bad0004 	.word	0x0bad0004

000207f4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   207f4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   207f6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   207fa:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   207fc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   207fe:	6002      	str	r2, [r0, #0]
}
   20800:	4802      	ldr	r0, [pc, #8]	; (2080c <nrf_gpio_pin_port_decode+0x18>)
   20802:	bf18      	it	ne
   20804:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   20808:	4770      	bx	lr
   2080a:	bf00      	nop
   2080c:	50000300 	.word	0x50000300

00020810 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20810:	4b03      	ldr	r3, [pc, #12]	; (20820 <pin_in_use_by_te+0x10>)
   20812:	3008      	adds	r0, #8
   20814:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20818:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2081c:	4770      	bx	lr
   2081e:	bf00      	nop
   20820:	200007c8 	.word	0x200007c8

00020824 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20824:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20826:	f100 0308 	add.w	r3, r0, #8
   2082a:	4c0c      	ldr	r4, [pc, #48]	; (2085c <call_handler+0x38>)
   2082c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   20830:	05da      	lsls	r2, r3, #23
{
   20832:	4605      	mov	r5, r0
   20834:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20836:	d507      	bpl.n	20848 <call_handler+0x24>
   20838:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2083c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20840:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   20844:	6852      	ldr	r2, [r2, #4]
   20846:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   20848:	68a3      	ldr	r3, [r4, #8]
   2084a:	b12b      	cbz	r3, 20858 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2084c:	68e2      	ldr	r2, [r4, #12]
   2084e:	4631      	mov	r1, r6
   20850:	4628      	mov	r0, r5
    }
}
   20852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20856:	4718      	bx	r3
}
   20858:	bd70      	pop	{r4, r5, r6, pc}
   2085a:	bf00      	nop
   2085c:	200007c8 	.word	0x200007c8

00020860 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20860:	4a12      	ldr	r2, [pc, #72]	; (208ac <release_handler+0x4c>)
   20862:	3008      	adds	r0, #8
{
   20864:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20866:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2086a:	05d9      	lsls	r1, r3, #23
   2086c:	d51b      	bpl.n	208a6 <release_handler+0x46>
   2086e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20872:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20876:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2087a:	f102 0410 	add.w	r4, r2, #16
   2087e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20880:	f834 3b02 	ldrh.w	r3, [r4], #2
   20884:	f413 7f80 	tst.w	r3, #256	; 0x100
   20888:	d003      	beq.n	20892 <release_handler+0x32>
   2088a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2088e:	4299      	cmp	r1, r3
   20890:	d009      	beq.n	208a6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20892:	3001      	adds	r0, #1
   20894:	2830      	cmp	r0, #48	; 0x30
   20896:	d1f3      	bne.n	20880 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   20898:	2300      	movs	r3, #0
   2089a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2089e:	4804      	ldr	r0, [pc, #16]	; (208b0 <release_handler+0x50>)
}
   208a0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   208a2:	f7ff bf85 	b.w	207b0 <nrfx_flag32_free>
}
   208a6:	bc10      	pop	{r4}
   208a8:	4770      	bx	lr
   208aa:	bf00      	nop
   208ac:	200007c8 	.word	0x200007c8
   208b0:	2000083c 	.word	0x2000083c

000208b4 <pin_handler_trigger_uninit>:
{
   208b4:	b538      	push	{r3, r4, r5, lr}
   208b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   208b8:	f7ff ffaa 	bl	20810 <pin_in_use_by_te>
   208bc:	4c09      	ldr	r4, [pc, #36]	; (208e4 <pin_handler_trigger_uninit+0x30>)
   208be:	f102 0508 	add.w	r5, r2, #8
   208c2:	b140      	cbz	r0, 208d6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   208c4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   208c8:	4907      	ldr	r1, [pc, #28]	; (208e8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   208ca:	0b5b      	lsrs	r3, r3, #13
   208cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   208d0:	2000      	movs	r0, #0
   208d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   208d6:	4610      	mov	r0, r2
   208d8:	f7ff ffc2 	bl	20860 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   208dc:	2300      	movs	r3, #0
   208de:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   208e2:	bd38      	pop	{r3, r4, r5, pc}
   208e4:	200007c8 	.word	0x200007c8
   208e8:	40006000 	.word	0x40006000

000208ec <nrfx_gpiote_input_configure>:
{
   208ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   208f0:	4604      	mov	r4, r0
   208f2:	4617      	mov	r7, r2
   208f4:	461d      	mov	r5, r3
    if (p_input_config)
   208f6:	b321      	cbz	r1, 20942 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   208f8:	4e4e      	ldr	r6, [pc, #312]	; (20a34 <nrfx_gpiote_input_configure+0x148>)
   208fa:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   208fe:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   20902:	079b      	lsls	r3, r3, #30
   20904:	d506      	bpl.n	20914 <nrfx_gpiote_input_configure+0x28>
   20906:	f7ff ff83 	bl	20810 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2090a:	b118      	cbz	r0, 20914 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   2090c:	484a      	ldr	r0, [pc, #296]	; (20a38 <nrfx_gpiote_input_configure+0x14c>)
}
   2090e:	b004      	add	sp, #16
   20910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   20914:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   20916:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2091a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2091e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   20922:	f10d 020f 	add.w	r2, sp, #15
   20926:	460b      	mov	r3, r1
   20928:	4620      	mov	r0, r4
   2092a:	f10d 010e 	add.w	r1, sp, #14
   2092e:	f00a fc72 	bl	2b216 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20932:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   20936:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2093a:	f043 0301 	orr.w	r3, r3, #1
   2093e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   20942:	b197      	cbz	r7, 2096a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20944:	4b3b      	ldr	r3, [pc, #236]	; (20a34 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20946:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20948:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2094a:	f104 0008 	add.w	r0, r4, #8
   2094e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   20952:	078f      	lsls	r7, r1, #30
   20954:	d50c      	bpl.n	20970 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   20956:	2a00      	cmp	r2, #0
   20958:	d1d8      	bne.n	2090c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2095a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2095e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20962:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   20966:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   2096a:	bbcd      	cbnz	r5, 209e0 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   2096c:	4833      	ldr	r0, [pc, #204]	; (20a3c <nrfx_gpiote_input_configure+0x150>)
   2096e:	e7ce      	b.n	2090e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   20970:	f021 0120 	bic.w	r1, r1, #32
   20974:	04c9      	lsls	r1, r1, #19
   20976:	0cc9      	lsrs	r1, r1, #19
   20978:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   2097c:	2a00      	cmp	r2, #0
   2097e:	d0ec      	beq.n	2095a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   20980:	2e03      	cmp	r6, #3
   20982:	d8c3      	bhi.n	2090c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   20984:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   20986:	b92e      	cbnz	r6, 20994 <nrfx_gpiote_input_configure+0xa8>
   20988:	4a2d      	ldr	r2, [pc, #180]	; (20a40 <nrfx_gpiote_input_configure+0x154>)
   2098a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   2098e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   20992:	e7e2      	b.n	2095a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20994:	00ba      	lsls	r2, r7, #2
   20996:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2099a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2099e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   209a2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   209a6:	f02c 0c03 	bic.w	ip, ip, #3
   209aa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   209ae:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   209b2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   209b6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   209ba:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   209be:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   209c2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   209c6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   209ca:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   209ce:	ea4c 0c0e 	orr.w	ip, ip, lr
   209d2:	f041 0120 	orr.w	r1, r1, #32
   209d6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   209da:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   209de:	e7bc      	b.n	2095a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   209e0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   209e4:	4620      	mov	r0, r4
   209e6:	f7ff ff3b 	bl	20860 <release_handler>
    if (!handler)
   209ea:	2e00      	cmp	r6, #0
   209ec:	d0be      	beq.n	2096c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   209ee:	4d11      	ldr	r5, [pc, #68]	; (20a34 <nrfx_gpiote_input_configure+0x148>)
   209f0:	682b      	ldr	r3, [r5, #0]
   209f2:	429e      	cmp	r6, r3
   209f4:	d104      	bne.n	20a00 <nrfx_gpiote_input_configure+0x114>
   209f6:	686b      	ldr	r3, [r5, #4]
   209f8:	429f      	cmp	r7, r3
   209fa:	d101      	bne.n	20a00 <nrfx_gpiote_input_configure+0x114>
   209fc:	2200      	movs	r2, #0
   209fe:	e00a      	b.n	20a16 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20a00:	4810      	ldr	r0, [pc, #64]	; (20a44 <nrfx_gpiote_input_configure+0x158>)
   20a02:	f10d 010f 	add.w	r1, sp, #15
   20a06:	f7ff fead 	bl	20764 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20a0a:	4b0c      	ldr	r3, [pc, #48]	; (20a3c <nrfx_gpiote_input_configure+0x150>)
   20a0c:	4298      	cmp	r0, r3
   20a0e:	f47f af7e 	bne.w	2090e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   20a12:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   20a16:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   20a1a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20a1e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20a20:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20a22:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   20a26:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   20a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20a2e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   20a32:	e79b      	b.n	2096c <nrfx_gpiote_input_configure+0x80>
   20a34:	200007c8 	.word	0x200007c8
   20a38:	0bad0004 	.word	0x0bad0004
   20a3c:	0bad0000 	.word	0x0bad0000
   20a40:	40006000 	.word	0x40006000
   20a44:	2000083c 	.word	0x2000083c

00020a48 <nrfx_gpiote_output_configure>:
{
   20a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a4a:	4604      	mov	r4, r0
   20a4c:	b085      	sub	sp, #20
   20a4e:	4615      	mov	r5, r2
    if (p_config)
   20a50:	b319      	cbz	r1, 20a9a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20a52:	4e33      	ldr	r6, [pc, #204]	; (20b20 <nrfx_gpiote_output_configure+0xd8>)
   20a54:	f100 0708 	add.w	r7, r0, #8
   20a58:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20a5c:	0793      	lsls	r3, r2, #30
   20a5e:	d403      	bmi.n	20a68 <nrfx_gpiote_output_configure+0x20>
   20a60:	f7ff fed6 	bl	20810 <pin_in_use_by_te>
   20a64:	2800      	cmp	r0, #0
   20a66:	d158      	bne.n	20b1a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20a68:	f012 0f1c 	tst.w	r2, #28
   20a6c:	d002      	beq.n	20a74 <nrfx_gpiote_output_configure+0x2c>
   20a6e:	784b      	ldrb	r3, [r1, #1]
   20a70:	2b01      	cmp	r3, #1
   20a72:	d052      	beq.n	20b1a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   20a74:	2301      	movs	r3, #1
   20a76:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   20a7a:	2300      	movs	r3, #0
   20a7c:	e9cd 1300 	strd	r1, r3, [sp]
   20a80:	1c4a      	adds	r2, r1, #1
   20a82:	1c8b      	adds	r3, r1, #2
   20a84:	4620      	mov	r0, r4
   20a86:	f10d 010f 	add.w	r1, sp, #15
   20a8a:	f00a fbc4 	bl	2b216 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20a8e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   20a92:	f043 0303 	orr.w	r3, r3, #3
   20a96:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   20a9a:	b915      	cbnz	r5, 20aa2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   20a9c:	4821      	ldr	r0, [pc, #132]	; (20b24 <nrfx_gpiote_output_configure+0xdc>)
}
   20a9e:	b005      	add	sp, #20
   20aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20aa2:	4e1f      	ldr	r6, [pc, #124]	; (20b20 <nrfx_gpiote_output_configure+0xd8>)
   20aa4:	f104 0708 	add.w	r7, r4, #8
   20aa8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   20aac:	0783      	lsls	r3, r0, #30
   20aae:	d534      	bpl.n	20b1a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   20ab0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   20ab4:	4661      	mov	r1, ip
   20ab6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20ab8:	f020 0020 	bic.w	r0, r0, #32
   20abc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20ac0:	04c0      	lsls	r0, r0, #19
   20ac2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   20ac6:	0cc0      	lsrs	r0, r0, #19
   20ac8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20acc:	2300      	movs	r3, #0
   20ace:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20ad2:	786a      	ldrb	r2, [r5, #1]
   20ad4:	2a00      	cmp	r2, #0
   20ad6:	d0e1      	beq.n	20a9c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20ad8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20adc:	78ad      	ldrb	r5, [r5, #2]
   20ade:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   20ae2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20ae6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20aea:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20aee:	0223      	lsls	r3, r4, #8
   20af0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20af4:	0412      	lsls	r2, r2, #16
   20af6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20afa:	ea43 030e 	orr.w	r3, r3, lr
   20afe:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20b00:	052a      	lsls	r2, r5, #20
   20b02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20b06:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20b0a:	4313      	orrs	r3, r2
   20b0c:	f040 0020 	orr.w	r0, r0, #32
   20b10:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20b14:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20b18:	e7c0      	b.n	20a9c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   20b1a:	4803      	ldr	r0, [pc, #12]	; (20b28 <nrfx_gpiote_output_configure+0xe0>)
   20b1c:	e7bf      	b.n	20a9e <nrfx_gpiote_output_configure+0x56>
   20b1e:	bf00      	nop
   20b20:	200007c8 	.word	0x200007c8
   20b24:	0bad0000 	.word	0x0bad0000
   20b28:	0bad0004 	.word	0x0bad0004

00020b2c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20b2c:	4b01      	ldr	r3, [pc, #4]	; (20b34 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20b2e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20b32:	4770      	bx	lr
   20b34:	200007c8 	.word	0x200007c8

00020b38 <nrfx_gpiote_channel_get>:
{
   20b38:	b508      	push	{r3, lr}
   20b3a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20b3c:	f7ff fe68 	bl	20810 <pin_in_use_by_te>
   20b40:	b138      	cbz	r0, 20b52 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20b42:	4b05      	ldr	r3, [pc, #20]	; (20b58 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   20b44:	4805      	ldr	r0, [pc, #20]	; (20b5c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20b46:	3208      	adds	r2, #8
   20b48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   20b4c:	0b5b      	lsrs	r3, r3, #13
   20b4e:	700b      	strb	r3, [r1, #0]
}
   20b50:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20b52:	4803      	ldr	r0, [pc, #12]	; (20b60 <nrfx_gpiote_channel_get+0x28>)
   20b54:	e7fc      	b.n	20b50 <nrfx_gpiote_channel_get+0x18>
   20b56:	bf00      	nop
   20b58:	200007c8 	.word	0x200007c8
   20b5c:	0bad0000 	.word	0x0bad0000
   20b60:	0bad0004 	.word	0x0bad0004

00020b64 <nrfx_gpiote_init>:
{
   20b64:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20b66:	4c0f      	ldr	r4, [pc, #60]	; (20ba4 <nrfx_gpiote_init+0x40>)
   20b68:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   20b6c:	b9bd      	cbnz	r5, 20b9e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20b6e:	2260      	movs	r2, #96	; 0x60
   20b70:	4629      	mov	r1, r5
   20b72:	f104 0010 	add.w	r0, r4, #16
   20b76:	f00b fa4b 	bl	2c010 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20b7a:	2006      	movs	r0, #6
   20b7c:	f7f3 ffdc 	bl	14b38 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20b80:	4b09      	ldr	r3, [pc, #36]	; (20ba8 <nrfx_gpiote_init+0x44>)
    return err_code;
   20b82:	480a      	ldr	r0, [pc, #40]	; (20bac <nrfx_gpiote_init+0x48>)
   20b84:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20b88:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20b94:	2301      	movs	r3, #1
   20b96:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20b9a:	6763      	str	r3, [r4, #116]	; 0x74
}
   20b9c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20b9e:	4804      	ldr	r0, [pc, #16]	; (20bb0 <nrfx_gpiote_init+0x4c>)
   20ba0:	e7fc      	b.n	20b9c <nrfx_gpiote_init+0x38>
   20ba2:	bf00      	nop
   20ba4:	200007c8 	.word	0x200007c8
   20ba8:	40006000 	.word	0x40006000
   20bac:	0bad0000 	.word	0x0bad0000
   20bb0:	0bad0005 	.word	0x0bad0005

00020bb4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20bb4:	4b03      	ldr	r3, [pc, #12]	; (20bc4 <nrfx_gpiote_is_init+0x10>)
   20bb6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   20bba:	3800      	subs	r0, #0
   20bbc:	bf18      	it	ne
   20bbe:	2001      	movne	r0, #1
   20bc0:	4770      	bx	lr
   20bc2:	bf00      	nop
   20bc4:	200007c8 	.word	0x200007c8

00020bc8 <nrfx_gpiote_channel_free>:
{
   20bc8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20bca:	4801      	ldr	r0, [pc, #4]	; (20bd0 <nrfx_gpiote_channel_free+0x8>)
   20bcc:	f7ff bdf0 	b.w	207b0 <nrfx_flag32_free>
   20bd0:	20000838 	.word	0x20000838

00020bd4 <nrfx_gpiote_channel_alloc>:
{
   20bd4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20bd6:	4801      	ldr	r0, [pc, #4]	; (20bdc <nrfx_gpiote_channel_alloc+0x8>)
   20bd8:	f7ff bdc4 	b.w	20764 <nrfx_flag32_alloc>
   20bdc:	20000838 	.word	0x20000838

00020be0 <nrfx_gpiote_trigger_enable>:
{
   20be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20be2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20be4:	f7ff fe14 	bl	20810 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20be8:	f104 0208 	add.w	r2, r4, #8
   20bec:	4b1e      	ldr	r3, [pc, #120]	; (20c68 <nrfx_gpiote_trigger_enable+0x88>)
   20bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20bf2:	b1e8      	cbz	r0, 20c30 <nrfx_gpiote_trigger_enable+0x50>
   20bf4:	f013 0502 	ands.w	r5, r3, #2
   20bf8:	d11a      	bne.n	20c30 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20bfa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20bfc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   20bfe:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   20c02:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   20c06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20c0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20c0e:	6005      	str	r5, [r0, #0]
   20c10:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20c12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   20c16:	f040 0001 	orr.w	r0, r0, #1
   20c1a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20c1e:	b129      	cbz	r1, 20c2c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20c20:	2201      	movs	r2, #1
   20c22:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   20c26:	4a11      	ldr	r2, [pc, #68]	; (20c6c <nrfx_gpiote_trigger_enable+0x8c>)
   20c28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20c2c:	b003      	add	sp, #12
   20c2e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20c30:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20c34:	2b04      	cmp	r3, #4
   20c36:	d012      	beq.n	20c5e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20c38:	2b05      	cmp	r3, #5
   20c3a:	d012      	beq.n	20c62 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20c3c:	a801      	add	r0, sp, #4
   20c3e:	9401      	str	r4, [sp, #4]
   20c40:	f7ff fdd8 	bl	207f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20c44:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   20c46:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20c4a:	40d9      	lsrs	r1, r3
   20c4c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20c50:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20c52:	4620      	mov	r0, r4
}
   20c54:	b003      	add	sp, #12
   20c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20c5a:	f00a bb23 	b.w	2b2a4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20c5e:	2103      	movs	r1, #3
   20c60:	e7f7      	b.n	20c52 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20c62:	2102      	movs	r1, #2
   20c64:	e7f5      	b.n	20c52 <nrfx_gpiote_trigger_enable+0x72>
   20c66:	bf00      	nop
   20c68:	200007c8 	.word	0x200007c8
   20c6c:	40006000 	.word	0x40006000

00020c70 <nrfx_gpiote_trigger_disable>:
{
   20c70:	b508      	push	{r3, lr}
   20c72:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20c74:	f7ff fdcc 	bl	20810 <pin_in_use_by_te>
   20c78:	b1c0      	cbz	r0, 20cac <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20c7a:	f102 0108 	add.w	r1, r2, #8
   20c7e:	4b0e      	ldr	r3, [pc, #56]	; (20cb8 <nrfx_gpiote_trigger_disable+0x48>)
   20c80:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20c84:	0799      	lsls	r1, r3, #30
   20c86:	d411      	bmi.n	20cac <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c88:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20c8a:	2201      	movs	r2, #1
   20c8c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   20c8e:	009b      	lsls	r3, r3, #2
   20c90:	490a      	ldr	r1, [pc, #40]	; (20cbc <nrfx_gpiote_trigger_disable+0x4c>)
   20c92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20c96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20c9a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20c9e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20ca2:	f022 0203 	bic.w	r2, r2, #3
   20ca6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   20caa:	bd08      	pop	{r3, pc}
   20cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20cb0:	2100      	movs	r1, #0
   20cb2:	4610      	mov	r0, r2
   20cb4:	f00a baf6 	b.w	2b2a4 <nrf_gpio_cfg_sense_set>
   20cb8:	200007c8 	.word	0x200007c8
   20cbc:	40006000 	.word	0x40006000

00020cc0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20cc0:	4b0e      	ldr	r3, [pc, #56]	; (20cfc <nrfx_gpiote_pin_uninit+0x3c>)
   20cc2:	f100 0208 	add.w	r2, r0, #8
{
   20cc6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20cc8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   20ccc:	07db      	lsls	r3, r3, #31
{
   20cce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20cd0:	d511      	bpl.n	20cf6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   20cd2:	f7ff ffcd 	bl	20c70 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   20cd6:	4620      	mov	r0, r4
   20cd8:	f7ff fdec 	bl	208b4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20cdc:	a801      	add	r0, sp, #4
   20cde:	9401      	str	r4, [sp, #4]
   20ce0:	f7ff fd88 	bl	207f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20ce4:	9b01      	ldr	r3, [sp, #4]
   20ce6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20cea:	2202      	movs	r2, #2
   20cec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   20cf0:	4803      	ldr	r0, [pc, #12]	; (20d00 <nrfx_gpiote_pin_uninit+0x40>)
}
   20cf2:	b002      	add	sp, #8
   20cf4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20cf6:	4803      	ldr	r0, [pc, #12]	; (20d04 <nrfx_gpiote_pin_uninit+0x44>)
   20cf8:	e7fb      	b.n	20cf2 <nrfx_gpiote_pin_uninit+0x32>
   20cfa:	bf00      	nop
   20cfc:	200007c8 	.word	0x200007c8
   20d00:	0bad0000 	.word	0x0bad0000
   20d04:	0bad0004 	.word	0x0bad0004

00020d08 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   20d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d0c:	4b64      	ldr	r3, [pc, #400]	; (20ea0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   20d0e:	4865      	ldr	r0, [pc, #404]	; (20ea4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20d10:	4965      	ldr	r1, [pc, #404]	; (20ea8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   20d12:	2600      	movs	r6, #0
{
   20d14:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20d16:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20d18:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20d1a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20d1c:	b135      	cbz	r5, 20d2c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   20d1e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   20d22:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20d24:	bf1e      	ittt	ne
   20d26:	601c      	strne	r4, [r3, #0]
   20d28:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   20d2a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20d2c:	3304      	adds	r3, #4
   20d2e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   20d30:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20d34:	d1f1      	bne.n	20d1a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20d36:	f8df 816c 	ldr.w	r8, [pc, #364]	; 20ea4 <nrfx_gpiote_irq_handler+0x19c>
   20d3a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20d3e:	2b00      	cmp	r3, #0
   20d40:	f000 8091 	beq.w	20e66 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   20d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20d48:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20d4c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20d4e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20d52:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   20d56:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20d58:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20d5c:	2700      	movs	r7, #0
            while (latch[i])
   20d5e:	f10d 0910 	add.w	r9, sp, #16
   20d62:	017b      	lsls	r3, r7, #5
   20d64:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   20d66:	f04f 0a01 	mov.w	sl, #1
   20d6a:	e049      	b.n	20e00 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   20d6c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20d6e:	4a4f      	ldr	r2, [pc, #316]	; (20eac <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   20d70:	fa94 f4a4 	rbit	r4, r4
   20d74:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   20d78:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20d7a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   20d7e:	08e0      	lsrs	r0, r4, #3
   20d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   20d84:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   20d86:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20d8a:	fa0a fc02 	lsl.w	ip, sl, r2
   20d8e:	f819 2000 	ldrb.w	r2, [r9, r0]
   20d92:	ea22 020c 	bic.w	r2, r2, ip
   20d96:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20d9a:	a803      	add	r0, sp, #12
   20d9c:	f3c3 0582 	ubfx	r5, r3, #2, #3
   20da0:	0899      	lsrs	r1, r3, #2
   20da2:	f7ff fd27 	bl	207f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20da6:	9a03      	ldr	r2, [sp, #12]
   20da8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   20dac:	074b      	lsls	r3, r1, #29
   20dae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20db2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   20db4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   20db8:	d529      	bpl.n	20e0e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   20dba:	4620      	mov	r0, r4
   20dbc:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20dbe:	b2d5      	uxtb	r5, r2
   20dc0:	f7ff fd30 	bl	20824 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20dc4:	a803      	add	r0, sp, #12
   20dc6:	9403      	str	r4, [sp, #12]
   20dc8:	f7ff fd14 	bl	207f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20dcc:	9b03      	ldr	r3, [sp, #12]
   20dce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   20dd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   20dda:	429d      	cmp	r5, r3
   20ddc:	d107      	bne.n	20dee <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20dde:	2100      	movs	r1, #0
   20de0:	4620      	mov	r0, r4
   20de2:	f00a fa5f 	bl	2b2a4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   20de6:	4629      	mov	r1, r5
   20de8:	4620      	mov	r0, r4
   20dea:	f00a fa5b 	bl	2b2a4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20dee:	a803      	add	r0, sp, #12
   20df0:	9403      	str	r4, [sp, #12]
   20df2:	f7ff fcff 	bl	207f4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   20df6:	9b03      	ldr	r3, [sp, #12]
   20df8:	fa0a f303 	lsl.w	r3, sl, r3
   20dfc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   20e00:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   20e04:	2c00      	cmp	r4, #0
   20e06:	d1b1      	bne.n	20d6c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20e08:	b9cf      	cbnz	r7, 20e3e <nrfx_gpiote_irq_handler+0x136>
   20e0a:	2701      	movs	r7, #1
   20e0c:	e7a9      	b.n	20d62 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20e0e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20e10:	bf0c      	ite	eq
   20e12:	2103      	moveq	r1, #3
   20e14:	2102      	movne	r1, #2
   20e16:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20e18:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20e1a:	f00a fa43 	bl	2b2a4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20e1e:	2d03      	cmp	r5, #3
   20e20:	d004      	beq.n	20e2c <nrfx_gpiote_irq_handler+0x124>
   20e22:	9a01      	ldr	r2, [sp, #4]
   20e24:	2a02      	cmp	r2, #2
   20e26:	d106      	bne.n	20e36 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20e28:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20e2a:	d1e0      	bne.n	20dee <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   20e2c:	4659      	mov	r1, fp
   20e2e:	4620      	mov	r0, r4
   20e30:	f7ff fcf8 	bl	20824 <call_handler>
   20e34:	e7db      	b.n	20dee <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20e36:	2a03      	cmp	r2, #3
   20e38:	d1d9      	bne.n	20dee <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20e3a:	2d02      	cmp	r5, #2
   20e3c:	e7f5      	b.n	20e2a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20e3e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   20e42:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   20e46:	491a      	ldr	r1, [pc, #104]	; (20eb0 <nrfx_gpiote_irq_handler+0x1a8>)
   20e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20e4c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20e50:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20e52:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20e56:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   20e5a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20e5c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   20e60:	4313      	orrs	r3, r2
   20e62:	f47f af7b 	bne.w	20d5c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   20e66:	2401      	movs	r4, #1
    while (mask)
   20e68:	b916      	cbnz	r6, 20e70 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   20e6a:	b007      	add	sp, #28
   20e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   20e70:	fa96 f3a6 	rbit	r3, r6
   20e74:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20e78:	fa04 f203 	lsl.w	r2, r4, r3
   20e7c:	009b      	lsls	r3, r3, #2
   20e7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20e82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20e86:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20e8a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   20e8e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20e92:	f3c0 2005 	ubfx	r0, r0, #8, #6
   20e96:	f3c1 4101 	ubfx	r1, r1, #16, #2
   20e9a:	f7ff fcc3 	bl	20824 <call_handler>
   20e9e:	e7e3      	b.n	20e68 <nrfx_gpiote_irq_handler+0x160>
   20ea0:	40006100 	.word	0x40006100
   20ea4:	40006000 	.word	0x40006000
   20ea8:	40006120 	.word	0x40006120
   20eac:	200007c8 	.word	0x200007c8
   20eb0:	50000300 	.word	0x50000300

00020eb4 <nvmc_word_write>:
   20eb4:	4a04      	ldr	r2, [pc, #16]	; (20ec8 <nvmc_word_write+0x14>)
   20eb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20eba:	07db      	lsls	r3, r3, #31
   20ebc:	d5fb      	bpl.n	20eb6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   20ebe:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20ec0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   20ec4:	4770      	bx	lr
   20ec6:	bf00      	nop
   20ec8:	4001e000 	.word	0x4001e000

00020ecc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   20ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20ed0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   20ed2:	fbb0 f3f2 	udiv	r3, r0, r2
   20ed6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   20eda:	b973      	cbnz	r3, 20efa <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20edc:	4b08      	ldr	r3, [pc, #32]	; (20f00 <nrfx_nvmc_page_erase+0x34>)
   20ede:	2202      	movs	r2, #2
   20ee0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20ee4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20ee8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20eec:	07d2      	lsls	r2, r2, #31
   20eee:	d5fb      	bpl.n	20ee8 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   20ef0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   20ef2:	4804      	ldr	r0, [pc, #16]	; (20f04 <nrfx_nvmc_page_erase+0x38>)
   20ef4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   20ef8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   20efa:	4803      	ldr	r0, [pc, #12]	; (20f08 <nrfx_nvmc_page_erase+0x3c>)
}
   20efc:	4770      	bx	lr
   20efe:	bf00      	nop
   20f00:	4001e000 	.word	0x4001e000
   20f04:	0bad0000 	.word	0x0bad0000
   20f08:	0bad000a 	.word	0x0bad000a

00020f0c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20f0c:	b510      	push	{r4, lr}
   20f0e:	4c05      	ldr	r4, [pc, #20]	; (20f24 <nrfx_nvmc_word_write+0x18>)
   20f10:	2301      	movs	r3, #1
   20f12:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   20f16:	f7ff ffcd 	bl	20eb4 <nvmc_word_write>
   20f1a:	2300      	movs	r3, #0
   20f1c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   20f20:	bd10      	pop	{r4, pc}
   20f22:	bf00      	nop
   20f24:	4001e000 	.word	0x4001e000

00020f28 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20f28:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   20f2a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   20f2e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20f30:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20f32:	6002      	str	r2, [r0, #0]
}
   20f34:	4802      	ldr	r0, [pc, #8]	; (20f40 <nrf_gpio_pin_port_decode+0x18>)
   20f36:	bf18      	it	ne
   20f38:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   20f3c:	4770      	bx	lr
   20f3e:	bf00      	nop
   20f40:	50000300 	.word	0x50000300

00020f44 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   20f44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20f48:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   20f4a:	4c51      	ldr	r4, [pc, #324]	; (21090 <nrfx_spi_init+0x14c>)
   20f4c:	f04f 0c28 	mov.w	ip, #40	; 0x28
   20f50:	fb0c fc07 	mul.w	ip, ip, r7
{
   20f54:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   20f56:	eb04 000c 	add.w	r0, r4, ip
   20f5a:	7f05      	ldrb	r5, [r0, #28]
   20f5c:	2d00      	cmp	r5, #0
   20f5e:	f040 8095 	bne.w	2108c <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   20f62:	6835      	ldr	r5, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   20f64:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   20f66:	f844 200c 	str.w	r2, [r4, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   20f6a:	7bcb      	ldrb	r3, [r1, #15]
   20f6c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   20f70:	78ca      	ldrb	r2, [r1, #3]
   20f72:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   20f74:	794a      	ldrb	r2, [r1, #5]
   20f76:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   20f78:	2b00      	cmp	r3, #0
   20f7a:	d140      	bne.n	20ffe <nrfx_spi_init+0xba>
    if (value == 0)
   20f7c:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   20f7e:	7808      	ldrb	r0, [r1, #0]
   20f80:	2b01      	cmp	r3, #1
   20f82:	d87a      	bhi.n	2107a <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   20f84:	f00a f9c6 	bl	2b314 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   20f88:	780b      	ldrb	r3, [r1, #0]
   20f8a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20f8c:	a801      	add	r0, sp, #4
   20f8e:	f7ff ffcb 	bl	20f28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20f92:	9b01      	ldr	r3, [sp, #4]
   20f94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20f98:	2201      	movs	r2, #1
   20f9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   20f9e:	7848      	ldrb	r0, [r1, #1]
   20fa0:	28ff      	cmp	r0, #255	; 0xff
   20fa2:	d00c      	beq.n	20fbe <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   20fa4:	f00a f9b6 	bl	2b314 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   20fa8:	784b      	ldrb	r3, [r1, #1]
   20faa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20fac:	a801      	add	r0, sp, #4
   20fae:	f7ff ffbb 	bl	20f28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20fb2:	9b01      	ldr	r3, [sp, #4]
   20fb4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20fb8:	2203      	movs	r2, #3
   20fba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   20fbe:	788b      	ldrb	r3, [r1, #2]
   20fc0:	2bff      	cmp	r3, #255	; 0xff
   20fc2:	d00c      	beq.n	20fde <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20fc4:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   20fc6:	f891 800e 	ldrb.w	r8, [r1, #14]
   20fca:	9301      	str	r3, [sp, #4]
   20fcc:	f7ff ffac 	bl	20f28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20fd0:	9b01      	ldr	r3, [sp, #4]
   20fd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20fd6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   20fda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20fde:	78c8      	ldrb	r0, [r1, #3]
   20fe0:	28ff      	cmp	r0, #255	; 0xff
   20fe2:	d00c      	beq.n	20ffe <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   20fe4:	f00a f989 	bl	2b2fa <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   20fe8:	78cb      	ldrb	r3, [r1, #3]
   20fea:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20fec:	a801      	add	r0, sp, #4
   20fee:	f7ff ff9b 	bl	20f28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20ff2:	9b01      	ldr	r3, [sp, #4]
   20ff4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20ff8:	2203      	movs	r2, #3
   20ffa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20ffe:	7c0b      	ldrb	r3, [r1, #16]
   21000:	b993      	cbnz	r3, 21028 <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   21002:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   21004:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21006:	2bff      	cmp	r3, #255	; 0xff
   21008:	bf18      	it	ne
   2100a:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   2100c:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   2100e:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21012:	bf08      	it	eq
   21014:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   21018:	2bff      	cmp	r3, #255	; 0xff
   2101a:	bf08      	it	eq
   2101c:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   21020:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   21024:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   21028:	688b      	ldr	r3, [r1, #8]
   2102a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   2102e:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   21030:	7b0a      	ldrb	r2, [r1, #12]
   21032:	3b00      	subs	r3, #0
   21034:	bf18      	it	ne
   21036:	2301      	movne	r3, #1
    switch (spi_mode)
   21038:	2a02      	cmp	r2, #2
   2103a:	d021      	beq.n	21080 <nrfx_spi_init+0x13c>
   2103c:	2a03      	cmp	r2, #3
   2103e:	d022      	beq.n	21086 <nrfx_spi_init+0x142>
   21040:	2a01      	cmp	r2, #1
   21042:	d101      	bne.n	21048 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   21044:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   21048:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   2104c:	2301      	movs	r3, #1
   2104e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   21052:	2328      	movs	r3, #40	; 0x28
   21054:	437b      	muls	r3, r7
   21056:	58e3      	ldr	r3, [r4, r3]
   21058:	b123      	cbz	r3, 21064 <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2105a:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2105c:	f340 3007 	sbfx	r0, r0, #12, #8
   21060:	f7f3 fd6a 	bl	14b38 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   21064:	2328      	movs	r3, #40	; 0x28
   21066:	fb03 4407 	mla	r4, r3, r7, r4
   2106a:	2300      	movs	r3, #0
   2106c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2106e:	4809      	ldr	r0, [pc, #36]	; (21094 <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21070:	2301      	movs	r3, #1
   21072:	7723      	strb	r3, [r4, #28]
}
   21074:	b002      	add	sp, #8
   21076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   2107a:	f00a f93e 	bl	2b2fa <nrf_gpio_pin_set>
   2107e:	e783      	b.n	20f88 <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   21080:	f043 0304 	orr.w	r3, r3, #4
        break;
   21084:	e7e0      	b.n	21048 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   21086:	f043 0306 	orr.w	r3, r3, #6
        break;
   2108a:	e7dd      	b.n	21048 <nrfx_spi_init+0x104>
        return err_code;
   2108c:	4802      	ldr	r0, [pc, #8]	; (21098 <nrfx_spi_init+0x154>)
   2108e:	e7f1      	b.n	21074 <nrfx_spi_init+0x130>
   21090:	200031a4 	.word	0x200031a4
   21094:	0bad0000 	.word	0x0bad0000
   21098:	0bad0005 	.word	0x0bad0005

0002109c <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   2109c:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2109e:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   210a0:	4c19      	ldr	r4, [pc, #100]	; (21108 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   210a2:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   210a4:	2328      	movs	r3, #40	; 0x28
   210a6:	4373      	muls	r3, r6
   210a8:	58e3      	ldr	r3, [r4, r3]
   210aa:	b133      	cbz	r3, 210ba <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   210ac:	f345 3007 	sbfx	r0, r5, #12, #8
   210b0:	f7f3 fd52 	bl	14b58 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   210b4:	2304      	movs	r3, #4
   210b6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   210ba:	2300      	movs	r3, #0
   210bc:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   210c0:	2328      	movs	r3, #40	; 0x28
   210c2:	fb03 4306 	mla	r3, r3, r6, r4
   210c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   210ca:	b9bb      	cbnz	r3, 210fc <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   210cc:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   210d0:	f00a f905 	bl	2b2de <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   210d4:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   210d8:	1c42      	adds	r2, r0, #1
   210da:	d001      	beq.n	210e0 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   210dc:	f00a f8ff 	bl	2b2de <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   210e0:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   210e4:	1c43      	adds	r3, r0, #1
   210e6:	d001      	beq.n	210ec <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   210e8:	f00a f8f9 	bl	2b2de <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   210ec:	2328      	movs	r3, #40	; 0x28
   210ee:	fb03 4306 	mla	r3, r3, r6, r4
   210f2:	7f98      	ldrb	r0, [r3, #30]
   210f4:	28ff      	cmp	r0, #255	; 0xff
   210f6:	d001      	beq.n	210fc <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   210f8:	f00a f8f1 	bl	2b2de <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   210fc:	2328      	movs	r3, #40	; 0x28
   210fe:	fb03 4406 	mla	r4, r3, r6, r4
   21102:	2300      	movs	r3, #0
   21104:	7723      	strb	r3, [r4, #28]
}
   21106:	bd70      	pop	{r4, r5, r6, pc}
   21108:	200031a4 	.word	0x200031a4

0002110c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   2110c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21110:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   21112:	4c39      	ldr	r4, [pc, #228]	; (211f8 <nrfx_spi_xfer+0xec>)
   21114:	2328      	movs	r3, #40	; 0x28
   21116:	437b      	muls	r3, r7
{
   21118:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   2111a:	18e2      	adds	r2, r4, r3
{
   2111c:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   2111e:	7f51      	ldrb	r1, [r2, #29]
{
   21120:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   21122:	2900      	cmp	r1, #0
   21124:	d165      	bne.n	211f2 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   21126:	58e3      	ldr	r3, [r4, r3]
   21128:	b10b      	cbz	r3, 2112e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   2112a:	2301      	movs	r3, #1
   2112c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2112e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   21132:	2528      	movs	r5, #40	; 0x28
   21134:	fb05 4507 	mla	r5, r5, r7, r4
   21138:	f105 0c0c 	add.w	ip, r5, #12
   2113c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21140:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   21142:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21144:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   21146:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2114a:	d001      	beq.n	21150 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   2114c:	f00a f8e2 	bl	2b314 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   21150:	2328      	movs	r3, #40	; 0x28
   21152:	f1b8 0f00 	cmp.w	r8, #0
   21156:	d006      	beq.n	21166 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   21158:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   2115c:	4827      	ldr	r0, [pc, #156]	; (211fc <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   2115e:	2300      	movs	r3, #0
   21160:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   21166:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   2116a:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   2116e:	2204      	movs	r2, #4
   21170:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   21174:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21178:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   2117c:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   21180:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   21182:	b192      	cbz	r2, 211aa <nrfx_spi_xfer+0x9e>
   21184:	6833      	ldr	r3, [r6, #0]
   21186:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   21188:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   2118c:	2a01      	cmp	r2, #1
   2118e:	d90e      	bls.n	211ae <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   21190:	6833      	ldr	r3, [r6, #0]
   21192:	785b      	ldrb	r3, [r3, #1]
   21194:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   21198:	2328      	movs	r3, #40	; 0x28
   2119a:	437b      	muls	r3, r7
   2119c:	58e6      	ldr	r6, [r4, r3]
   2119e:	b176      	cbz	r6, 211be <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   211a0:	2304      	movs	r3, #4
   211a2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   211a6:	4816      	ldr	r0, [pc, #88]	; (21200 <nrfx_spi_xfer+0xf4>)
   211a8:	e7db      	b.n	21162 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   211aa:	7fdb      	ldrb	r3, [r3, #31]
   211ac:	e7ec      	b.n	21188 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   211ae:	68f3      	ldr	r3, [r6, #12]
   211b0:	2b01      	cmp	r3, #1
   211b2:	d9f1      	bls.n	21198 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   211b4:	2328      	movs	r3, #40	; 0x28
   211b6:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   211ba:	7fdb      	ldrb	r3, [r3, #31]
   211bc:	e7ea      	b.n	21194 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   211be:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   211c2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   211c6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   211ca:	2b00      	cmp	r3, #0
   211cc:	d0fb      	beq.n	211c6 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   211ce:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   211d2:	4628      	mov	r0, r5
   211d4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   211d8:	f00a f8a9 	bl	2b32e <transfer_byte>
   211dc:	2800      	cmp	r0, #0
   211de:	d1f2      	bne.n	211c6 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   211e0:	2328      	movs	r3, #40	; 0x28
   211e2:	fb03 4407 	mla	r4, r3, r7, r4
   211e6:	7fa0      	ldrb	r0, [r4, #30]
   211e8:	28ff      	cmp	r0, #255	; 0xff
   211ea:	d0dc      	beq.n	211a6 <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   211ec:	f00a f885 	bl	2b2fa <nrf_gpio_pin_set>
   211f0:	e7d9      	b.n	211a6 <nrfx_spi_xfer+0x9a>
        return err_code;
   211f2:	4804      	ldr	r0, [pc, #16]	; (21204 <nrfx_spi_xfer+0xf8>)
   211f4:	e7b5      	b.n	21162 <nrfx_spi_xfer+0x56>
   211f6:	bf00      	nop
   211f8:	200031a4 	.word	0x200031a4
   211fc:	0bad0003 	.word	0x0bad0003
   21200:	0bad0000 	.word	0x0bad0000
   21204:	0bad000b 	.word	0x0bad000b

00021208 <nrfx_spi_1_irq_handler>:
   21208:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   2120c:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   2120e:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   21210:	490b      	ldr	r1, [pc, #44]	; (21240 <nrfx_spi_1_irq_handler+0x38>)
   21212:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   21216:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   2121a:	f00a f888 	bl	2b32e <transfer_byte>
   2121e:	b968      	cbnz	r0, 2123c <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   21220:	7f88      	ldrb	r0, [r1, #30]
   21222:	28ff      	cmp	r0, #255	; 0xff
   21224:	d001      	beq.n	2122a <nrfx_spi_1_irq_handler+0x22>
   21226:	f00a f868 	bl	2b2fa <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   2122a:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   2122c:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   2122e:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   21230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   21234:	e9d1 3100 	ldrd	r3, r1, [r1]
   21238:	4802      	ldr	r0, [pc, #8]	; (21244 <nrfx_spi_1_irq_handler+0x3c>)
   2123a:	4718      	bx	r3
}
   2123c:	bd10      	pop	{r4, pc}
   2123e:	bf00      	nop
   21240:	200031a4 	.word	0x200031a4
   21244:	200031ac 	.word	0x200031ac

00021248 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   21248:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2124a:	4c11      	ldr	r4, [pc, #68]	; (21290 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2124c:	4a11      	ldr	r2, [pc, #68]	; (21294 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2124e:	4912      	ldr	r1, [pc, #72]	; (21298 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21250:	2303      	movs	r3, #3
   21252:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21254:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21256:	4b11      	ldr	r3, [pc, #68]	; (2129c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   21258:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2125a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21260:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21262:	2300      	movs	r3, #0
   21264:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21266:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21268:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2126a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2126c:	4a0c      	ldr	r2, [pc, #48]	; (212a0 <_DoInit+0x58>)
   2126e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   21270:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21272:	2210      	movs	r2, #16
   21274:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   21276:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   21278:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2127a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   2127c:	f00a ff64 	bl	2c148 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   21280:	4908      	ldr	r1, [pc, #32]	; (212a4 <_DoInit+0x5c>)
   21282:	4620      	mov	r0, r4
   21284:	f00a ff60 	bl	2c148 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   21288:	2320      	movs	r3, #32
   2128a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2128c:	bd10      	pop	{r4, pc}
   2128e:	bf00      	nop
   21290:	200031cc 	.word	0x200031cc
   21294:	0002fe99 	.word	0x0002fe99
   21298:	0002fea2 	.word	0x0002fea2
   2129c:	200046c3 	.word	0x200046c3
   212a0:	200046b3 	.word	0x200046b3
   212a4:	0002fea6 	.word	0x0002fea6

000212a8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   212a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   212ac:	4f23      	ldr	r7, [pc, #140]	; (2133c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   212ae:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   212b2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   212b4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   212b8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   212ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   212bc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   212be:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   212c0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   212c2:	d834      	bhi.n	2132e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   212c4:	f8d2 a020 	ldr.w	sl, [r2, #32]
   212c8:	ebaa 0905 	sub.w	r9, sl, r5
   212cc:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   212d0:	4294      	cmp	r4, r2
   212d2:	d811      	bhi.n	212f8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   212d4:	f04f 0918 	mov.w	r9, #24
   212d8:	fb06 9309 	mla	r3, r6, r9, r9
   212dc:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   212de:	4622      	mov	r2, r4
   212e0:	6858      	ldr	r0, [r3, #4]
   212e2:	4641      	mov	r1, r8
   212e4:	4428      	add	r0, r5
   212e6:	f00a fe72 	bl	2bfce <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   212ea:	fb09 7606 	mla	r6, r9, r6, r7
   212ee:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   212f0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   212f2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   212f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   212f8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   212fa:	429c      	cmp	r4, r3
   212fc:	d81b      	bhi.n	21336 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   212fe:	fb00 bb0b 	mla	fp, r0, fp, fp
   21302:	44bb      	add	fp, r7
   21304:	464a      	mov	r2, r9
   21306:	f8db 0004 	ldr.w	r0, [fp, #4]
   2130a:	442c      	add	r4, r5
   2130c:	4428      	add	r0, r5
   2130e:	f00a fe5e 	bl	2bfce <memcpy>
      if (NumBytes) {
   21312:	ebb4 040a 	subs.w	r4, r4, sl
   21316:	d006      	beq.n	21326 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   21318:	f8db 0004 	ldr.w	r0, [fp, #4]
   2131c:	4622      	mov	r2, r4
   2131e:	eb08 0109 	add.w	r1, r8, r9
   21322:	f00a fe54 	bl	2bfce <memcpy>
      pRing->WrOff = NumBytes;
   21326:	2018      	movs	r0, #24
   21328:	fb00 7606 	mla	r6, r0, r6, r7
   2132c:	e7e0      	b.n	212f0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   2132e:	3b01      	subs	r3, #1
   21330:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   21332:	42a3      	cmp	r3, r4
   21334:	d2ce      	bcs.n	212d4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   21336:	2000      	movs	r0, #0
   21338:	e7dc      	b.n	212f4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   2133a:	bf00      	nop
   2133c:	200031cc 	.word	0x200031cc

00021340 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21340:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   21342:	4b16      	ldr	r3, [pc, #88]	; (2139c <SEGGER_RTT_WriteNoLock+0x5c>)
   21344:	2418      	movs	r4, #24
   21346:	fb00 4504 	mla	r5, r0, r4, r4
   2134a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   2134c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21350:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   21352:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   21354:	2c01      	cmp	r4, #1
   21356:	d00e      	beq.n	21376 <SEGGER_RTT_WriteNoLock+0x36>
   21358:	2c02      	cmp	r4, #2
   2135a:	d018      	beq.n	2138e <SEGGER_RTT_WriteNoLock+0x4e>
   2135c:	b9e4      	cbnz	r4, 21398 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   2135e:	4628      	mov	r0, r5
   21360:	f00a f818 	bl	2b394 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   21364:	4286      	cmp	r6, r0
   21366:	d804      	bhi.n	21372 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   21368:	4632      	mov	r2, r6
   2136a:	4628      	mov	r0, r5
   2136c:	f00a f81b 	bl	2b3a6 <_WriteNoCheck>
   21370:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   21372:	4620      	mov	r0, r4
   21374:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   21376:	4628      	mov	r0, r5
   21378:	f00a f80c 	bl	2b394 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   2137c:	4286      	cmp	r6, r0
   2137e:	4634      	mov	r4, r6
   21380:	bf28      	it	cs
   21382:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   21384:	4622      	mov	r2, r4
   21386:	4628      	mov	r0, r5
   21388:	f00a f80d 	bl	2b3a6 <_WriteNoCheck>
    break;
   2138c:	e7f1      	b.n	21372 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2138e:	4628      	mov	r0, r5
}
   21390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   21394:	f00a b824 	b.w	2b3e0 <_WriteBlocking>
  switch (pRing->Flags) {
   21398:	2400      	movs	r4, #0
  return Status;
   2139a:	e7ea      	b.n	21372 <SEGGER_RTT_WriteNoLock+0x32>
   2139c:	200031cc 	.word	0x200031cc

000213a0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   213a0:	4b03      	ldr	r3, [pc, #12]	; (213b0 <SEGGER_RTT_HasDataUp+0x10>)
   213a2:	2218      	movs	r2, #24
   213a4:	fb02 3300 	mla	r3, r2, r0, r3
   213a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   213aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   213ac:	1a80      	subs	r0, r0, r2
   213ae:	4770      	bx	lr
   213b0:	200031cc 	.word	0x200031cc

000213b4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   213b4:	4803      	ldr	r0, [pc, #12]	; (213c4 <zephyr_rtt_mutex_lock+0x10>)
   213b6:	f04f 32ff 	mov.w	r2, #4294967295
   213ba:	f04f 33ff 	mov.w	r3, #4294967295
   213be:	f000 baa5 	b.w	2190c <z_impl_k_mutex_lock>
   213c2:	bf00      	nop
   213c4:	20000b38 	.word	0x20000b38

000213c8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   213c8:	4801      	ldr	r0, [pc, #4]	; (213d0 <zephyr_rtt_mutex_unlock+0x8>)
   213ca:	f000 bb17 	b.w	219fc <z_impl_k_mutex_unlock>
   213ce:	bf00      	nop
   213d0:	20000b38 	.word	0x20000b38

000213d4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   213d4:	4b0e      	ldr	r3, [pc, #56]	; (21410 <z_sys_init_run_level+0x3c>)
{
   213d6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   213d8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   213dc:	3001      	adds	r0, #1
   213de:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   213e2:	42a6      	cmp	r6, r4
   213e4:	d800      	bhi.n	213e8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   213e6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   213e8:	e9d4 3500 	ldrd	r3, r5, [r4]
   213ec:	4628      	mov	r0, r5
   213ee:	4798      	blx	r3
		if (dev != NULL) {
   213f0:	b165      	cbz	r5, 2140c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   213f2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   213f4:	b130      	cbz	r0, 21404 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   213f6:	2800      	cmp	r0, #0
   213f8:	bfb8      	it	lt
   213fa:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   213fc:	28ff      	cmp	r0, #255	; 0xff
   213fe:	bfa8      	it	ge
   21400:	20ff      	movge	r0, #255	; 0xff
   21402:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   21404:	785a      	ldrb	r2, [r3, #1]
   21406:	f042 0201 	orr.w	r2, r2, #1
   2140a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2140c:	3408      	adds	r4, #8
   2140e:	e7e8      	b.n	213e2 <z_sys_init_run_level+0xe>
   21410:	0002d44c 	.word	0x0002d44c

00021414 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21418:	b086      	sub	sp, #24
   2141a:	4605      	mov	r5, r0
   2141c:	af00      	add	r7, sp, #0
   2141e:	460e      	mov	r6, r1
	__asm__ volatile(
   21420:	f04f 0340 	mov.w	r3, #64	; 0x40
   21424:	f3ef 8811 	mrs	r8, BASEPRI
   21428:	f383 8812 	msr	BASEPRI_MAX, r3
   2142c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21430:	f001 f890 	bl	22554 <z_impl_z_current_get>
   21434:	2d04      	cmp	r5, #4
   21436:	bf96      	itet	ls
   21438:	4b2c      	ldrls	r3, [pc, #176]	; (214ec <z_fatal_error+0xd8>)
   2143a:	4b2d      	ldrhi	r3, [pc, #180]	; (214f0 <z_fatal_error+0xdc>)
   2143c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21440:	46e9      	mov	r9, sp
   21442:	b08a      	sub	sp, #40	; 0x28
   21444:	4604      	mov	r4, r0
   21446:	466a      	mov	r2, sp
   21448:	492a      	ldr	r1, [pc, #168]	; (214f4 <z_fatal_error+0xe0>)
   2144a:	61d3      	str	r3, [r2, #28]
   2144c:	2303      	movs	r3, #3
   2144e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   21452:	f04f 0a00 	mov.w	sl, #0
   21456:	4b28      	ldr	r3, [pc, #160]	; (214f8 <z_fatal_error+0xe4>)
   21458:	f8c2 a020 	str.w	sl, [r2, #32]
   2145c:	e9c2 1505 	strd	r1, r5, [r2, #20]
   21460:	f842 3f10 	str.w	r3, [r2, #16]!
   21464:	4825      	ldr	r0, [pc, #148]	; (214fc <z_fatal_error+0xe8>)
   21466:	4653      	mov	r3, sl
   21468:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
   2146c:	f7f2 fc08 	bl	13c80 <z_impl_z_log_msg_static_create>
   21470:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21472:	b17e      	cbz	r6, 21494 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21474:	69f3      	ldr	r3, [r6, #28]
   21476:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2147a:	b15b      	cbz	r3, 21494 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   2147c:	4b20      	ldr	r3, [pc, #128]	; (21500 <z_fatal_error+0xec>)
   2147e:	617b      	str	r3, [r7, #20]
   21480:	2302      	movs	r3, #2
   21482:	613b      	str	r3, [r7, #16]
   21484:	481d      	ldr	r0, [pc, #116]	; (214fc <z_fatal_error+0xe8>)
   21486:	4653      	mov	r3, sl
   21488:	f107 0210 	add.w	r2, r7, #16
   2148c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21490:	f7f2 fbf6 	bl	13c80 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21494:	b12c      	cbz	r4, 214a2 <z_fatal_error+0x8e>
   21496:	4620      	mov	r0, r4
   21498:	f00a f894 	bl	2b5c4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2149c:	b108      	cbz	r0, 214a2 <z_fatal_error+0x8e>
   2149e:	7803      	ldrb	r3, [r0, #0]
   214a0:	b903      	cbnz	r3, 214a4 <z_fatal_error+0x90>
		thread_name = "unknown";
   214a2:	4818      	ldr	r0, [pc, #96]	; (21504 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   214a4:	46e9      	mov	r9, sp
   214a6:	b08a      	sub	sp, #40	; 0x28
   214a8:	466a      	mov	r2, sp
   214aa:	4b17      	ldr	r3, [pc, #92]	; (21508 <z_fatal_error+0xf4>)
   214ac:	61d0      	str	r0, [r2, #28]
   214ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   214b2:	2303      	movs	r3, #3
   214b4:	f882 3020 	strb.w	r3, [r2, #32]
   214b8:	4b14      	ldr	r3, [pc, #80]	; (2150c <z_fatal_error+0xf8>)
   214ba:	f842 3f10 	str.w	r3, [r2, #16]!
   214be:	2300      	movs	r3, #0
   214c0:	480e      	ldr	r0, [pc, #56]	; (214fc <z_fatal_error+0xe8>)
   214c2:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   214c6:	f7f2 fbdb 	bl	13c80 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   214ca:	4631      	mov	r1, r6
   214cc:	46cd      	mov	sp, r9
   214ce:	4628      	mov	r0, r5
   214d0:	f7fd ffee 	bl	1f4b0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   214d4:	f388 8811 	msr	BASEPRI, r8
   214d8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   214dc:	4620      	mov	r0, r4
   214de:	f7f3 ff9f 	bl	15420 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   214e2:	3718      	adds	r7, #24
   214e4:	46bd      	mov	sp, r7
   214e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   214ea:	bf00      	nop
   214ec:	0002d464 	.word	0x0002d464
   214f0:	0002fead 	.word	0x0002fead
   214f4:	0002febb 	.word	0x0002febb
   214f8:	01000005 	.word	0x01000005
   214fc:	0002c84c 	.word	0x0002c84c
   21500:	0002fee3 	.word	0x0002fee3
   21504:	0002e2f9 	.word	0x0002e2f9
   21508:	0002ff04 	.word	0x0002ff04
   2150c:	01000004 	.word	0x01000004

00021510 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21510:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   21512:	4b0a      	ldr	r3, [pc, #40]	; (2153c <bg_thread_main+0x2c>)
   21514:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21516:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21518:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2151a:	f7ff ff5b 	bl	213d4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2151e:	f001 fb45 	bl	22bac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21522:	2003      	movs	r0, #3
   21524:	f7ff ff56 	bl	213d4 <z_sys_init_run_level>

	z_init_static_threads();
   21528:	f000 f978 	bl	2181c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   2152c:	f7f0 f8e2 	bl	116f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21530:	4a03      	ldr	r2, [pc, #12]	; (21540 <bg_thread_main+0x30>)
   21532:	7b13      	ldrb	r3, [r2, #12]
   21534:	f023 0301 	bic.w	r3, r3, #1
   21538:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2153a:	bd08      	pop	{r3, pc}
   2153c:	20004ac3 	.word	0x20004ac3
   21540:	200024f8 	.word	0x200024f8

00021544 <z_bss_zero>:
{
   21544:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   21546:	4803      	ldr	r0, [pc, #12]	; (21554 <z_bss_zero+0x10>)
   21548:	4a03      	ldr	r2, [pc, #12]	; (21558 <z_bss_zero+0x14>)
   2154a:	2100      	movs	r1, #0
   2154c:	1a12      	subs	r2, r2, r0
   2154e:	f009 ff82 	bl	2b456 <z_early_memset>
}
   21552:	bd08      	pop	{r3, pc}
   21554:	20000d08 	.word	0x20000d08
   21558:	20004ac4 	.word	0x20004ac4

0002155c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2155c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2155e:	2300      	movs	r3, #0
{
   21560:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   21562:	2201      	movs	r2, #1
   21564:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   21568:	4e11      	ldr	r6, [pc, #68]	; (215b0 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2156a:	4d12      	ldr	r5, [pc, #72]	; (215b4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   2156c:	9301      	str	r3, [sp, #4]
   2156e:	220f      	movs	r2, #15
   21570:	e9cd 3202 	strd	r3, r2, [sp, #8]
   21574:	4910      	ldr	r1, [pc, #64]	; (215b8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21576:	2318      	movs	r3, #24
   21578:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   2157c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   21580:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   21584:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   21586:	fb02 1100 	mla	r1, r2, r0, r1
   2158a:	4b0c      	ldr	r3, [pc, #48]	; (215bc <z_init_cpu+0x60>)
   2158c:	9500      	str	r5, [sp, #0]
   2158e:	4630      	mov	r0, r6
   21590:	f000 f8e8 	bl	21764 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21594:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   21596:	480a      	ldr	r0, [pc, #40]	; (215c0 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   21598:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2159a:	3401      	adds	r4, #1
   2159c:	f023 0304 	bic.w	r3, r3, #4
   215a0:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   215a4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   215a6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   215a8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   215aa:	b006      	add	sp, #24
   215ac:	bd70      	pop	{r4, r5, r6, pc}
   215ae:	bf00      	nop
   215b0:	20002478 	.word	0x20002478
   215b4:	20003274 	.word	0x20003274
   215b8:	20006350 	.word	0x20006350
   215bc:	000218d5 	.word	0x000218d5
   215c0:	20006490 	.word	0x20006490

000215c4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   215c4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   215c6:	4b2f      	ldr	r3, [pc, #188]	; (21684 <z_cstart+0xc0>)
   215c8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   215ca:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   215ce:	4d2e      	ldr	r5, [pc, #184]	; (21688 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   215d0:	4e2e      	ldr	r6, [pc, #184]	; (2168c <z_cstart+0xc8>)
   215d2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   215d4:	4f2e      	ldr	r7, [pc, #184]	; (21690 <z_cstart+0xcc>)
   215d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   215da:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   215dc:	23e0      	movs	r3, #224	; 0xe0
   215de:	2400      	movs	r4, #0
   215e0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   215e4:	2320      	movs	r3, #32
   215e6:	77eb      	strb	r3, [r5, #31]
   215e8:	762c      	strb	r4, [r5, #24]
   215ea:	766c      	strb	r4, [r5, #25]
   215ec:	76ac      	strb	r4, [r5, #26]
   215ee:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   215f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   215f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   215f8:	626b      	str	r3, [r5, #36]	; 0x24
   215fa:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   215fe:	f7f3 fe83 	bl	15308 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21602:	f7f3 fa15 	bl	14a30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21606:	f04f 33ff 	mov.w	r3, #4294967295
   2160a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2160c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2160e:	f7f3 ffad 	bl	1556c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21612:	f7f3 ff1b 	bl	1544c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   21616:	f7f2 f9d9 	bl	139cc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2161a:	f240 1301 	movw	r3, #257	; 0x101
   2161e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21622:	ab06      	add	r3, sp, #24
   21624:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21626:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   2162a:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2162c:	f009 ff08 	bl	2b440 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21630:	4620      	mov	r0, r4
   21632:	f7ff fecf 	bl	213d4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21636:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21638:	4d16      	ldr	r5, [pc, #88]	; (21694 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2163a:	f7ff fecb 	bl	213d4 <z_sys_init_run_level>
	z_sched_init();
   2163e:	f000 fec1 	bl	223c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21642:	4b15      	ldr	r3, [pc, #84]	; (21698 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   21644:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21646:	9305      	str	r3, [sp, #20]
   21648:	2301      	movs	r3, #1
   2164a:	4914      	ldr	r1, [pc, #80]	; (2169c <z_cstart+0xd8>)
   2164c:	9400      	str	r4, [sp, #0]
   2164e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   21652:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21656:	463b      	mov	r3, r7
   21658:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2165c:	4628      	mov	r0, r5
   2165e:	f000 f881 	bl	21764 <z_setup_new_thread>
   21662:	7b6a      	ldrb	r2, [r5, #13]
   21664:	4606      	mov	r6, r0
   21666:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2166a:	4628      	mov	r0, r5
   2166c:	736a      	strb	r2, [r5, #13]
   2166e:	f00a f9fd 	bl	2ba6c <z_ready_thread>
	z_init_cpu(0);
   21672:	4620      	mov	r0, r4
   21674:	f7ff ff72 	bl	2155c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21678:	463a      	mov	r2, r7
   2167a:	4631      	mov	r1, r6
   2167c:	4628      	mov	r0, r5
   2167e:	f7f3 fb3f 	bl	14d00 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21682:	bf00      	nop
   21684:	20006c90 	.word	0x20006c90
   21688:	e000ed00 	.word	0xe000ed00
   2168c:	20003274 	.word	0x20003274
   21690:	00021511 	.word	0x00021511
   21694:	200024f8 	.word	0x200024f8
   21698:	0002ff66 	.word	0x0002ff66
   2169c:	20005b50 	.word	0x20005b50

000216a0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   216a0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   216a2:	4c06      	ldr	r4, [pc, #24]	; (216bc <statics_init+0x1c>)
   216a4:	4d06      	ldr	r5, [pc, #24]	; (216c0 <statics_init+0x20>)
   216a6:	42ac      	cmp	r4, r5
   216a8:	d301      	bcc.n	216ae <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   216aa:	2000      	movs	r0, #0
   216ac:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   216ae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   216b2:	4620      	mov	r0, r4
   216b4:	f009 fed3 	bl	2b45e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   216b8:	3414      	adds	r4, #20
   216ba:	e7f4      	b.n	216a6 <statics_init+0x6>
   216bc:	20000aac 	.word	0x20000aac
   216c0:	20000aac 	.word	0x20000aac

000216c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   216c4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   216c6:	4b0e      	ldr	r3, [pc, #56]	; (21700 <init_mem_slab_module+0x3c>)
   216c8:	4c0e      	ldr	r4, [pc, #56]	; (21704 <init_mem_slab_module+0x40>)
   216ca:	42a3      	cmp	r3, r4
   216cc:	d301      	bcc.n	216d2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   216ce:	2000      	movs	r0, #0
	return rc;
}
   216d0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   216d2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   216d6:	ea41 0200 	orr.w	r2, r1, r0
   216da:	f012 0203 	ands.w	r2, r2, #3
   216de:	d10b      	bne.n	216f8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   216e0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   216e2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   216e4:	42aa      	cmp	r2, r5
   216e6:	d101      	bne.n	216ec <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   216e8:	331c      	adds	r3, #28
   216ea:	e7ee      	b.n	216ca <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   216ec:	695e      	ldr	r6, [r3, #20]
   216ee:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   216f0:	3201      	adds	r2, #1
		slab->free_list = p;
   216f2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   216f4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   216f6:	e7f5      	b.n	216e4 <init_mem_slab_module+0x20>
	return rc;
   216f8:	f06f 0015 	mvn.w	r0, #21
   216fc:	e7e8      	b.n	216d0 <init_mem_slab_module+0xc>
   216fe:	bf00      	nop
   21700:	20000a58 	.word	0x20000a58
   21704:	20000aac 	.word	0x20000aac

00021708 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21708:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2170a:	460c      	mov	r4, r1
	__asm__ volatile(
   2170c:	f04f 0540 	mov.w	r5, #64	; 0x40
   21710:	f3ef 8111 	mrs	r1, BASEPRI
   21714:	f385 8812 	msr	BASEPRI_MAX, r5
   21718:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2171c:	6945      	ldr	r5, [r0, #20]
   2171e:	b15d      	cbz	r5, 21738 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   21720:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21722:	682b      	ldr	r3, [r5, #0]
   21724:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21726:	6983      	ldr	r3, [r0, #24]
   21728:	3301      	adds	r3, #1
   2172a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2172c:	2000      	movs	r0, #0
	__asm__ volatile(
   2172e:	f381 8811 	msr	BASEPRI, r1
   21732:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21736:	e011      	b.n	2175c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21738:	ea52 0c03 	orrs.w	ip, r2, r3
   2173c:	d103      	bne.n	21746 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2173e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   21740:	f06f 000b 	mvn.w	r0, #11
   21744:	e7f3      	b.n	2172e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21746:	e9cd 2300 	strd	r2, r3, [sp]
   2174a:	4602      	mov	r2, r0
   2174c:	3008      	adds	r0, #8
   2174e:	f000 fd8f 	bl	22270 <z_pend_curr>
		if (result == 0) {
   21752:	b918      	cbnz	r0, 2175c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   21754:	4b02      	ldr	r3, [pc, #8]	; (21760 <k_mem_slab_alloc+0x58>)
   21756:	689b      	ldr	r3, [r3, #8]
   21758:	695b      	ldr	r3, [r3, #20]
   2175a:	6023      	str	r3, [r4, #0]
}
   2175c:	b003      	add	sp, #12
   2175e:	bd30      	pop	{r4, r5, pc}
   21760:	20003274 	.word	0x20003274

00021764 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21764:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   21768:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2176a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2176c:	2604      	movs	r6, #4
   2176e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   21770:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   21772:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21774:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21778:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2177a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2177e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   21780:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21782:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21786:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2178a:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   2178e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   21790:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   21792:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21794:	9202      	str	r2, [sp, #8]
   21796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21798:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2179a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2179e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   217a0:	9200      	str	r2, [sp, #0]
   217a2:	4642      	mov	r2, r8
{
   217a4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   217a6:	f7f3 fa8f 	bl	14cc8 <arch_new_thread>
	if (!_current) {
   217aa:	4b05      	ldr	r3, [pc, #20]	; (217c0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   217ac:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   217ae:	689b      	ldr	r3, [r3, #8]
   217b0:	b103      	cbz	r3, 217b4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   217b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   217b4:	6763      	str	r3, [r4, #116]	; 0x74
}
   217b6:	4640      	mov	r0, r8
   217b8:	b004      	add	sp, #16
   217ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   217be:	bf00      	nop
   217c0:	20003274 	.word	0x20003274

000217c4 <z_impl_k_thread_create>:
{
   217c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   217c6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   217c8:	2700      	movs	r7, #0
   217ca:	9705      	str	r7, [sp, #20]
   217cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
   217ce:	9704      	str	r7, [sp, #16]
   217d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   217d2:	9703      	str	r7, [sp, #12]
   217d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   217d6:	9702      	str	r7, [sp, #8]
{
   217d8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   217dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   217de:	9701      	str	r7, [sp, #4]
   217e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   217e2:	9700      	str	r7, [sp, #0]
{
   217e4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   217e6:	f7ff ffbd 	bl	21764 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   217ea:	f1b5 3fff 	cmp.w	r5, #4294967295
   217ee:	bf08      	it	eq
   217f0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   217f4:	d005      	beq.n	21802 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   217f6:	ea55 0306 	orrs.w	r3, r5, r6
   217fa:	d105      	bne.n	21808 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   217fc:	4620      	mov	r0, r4
   217fe:	f000 fcdb 	bl	221b8 <z_sched_start>
}
   21802:	4620      	mov	r0, r4
   21804:	b007      	add	sp, #28
   21806:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21808:	4903      	ldr	r1, [pc, #12]	; (21818 <z_impl_k_thread_create+0x54>)
   2180a:	4632      	mov	r2, r6
   2180c:	462b      	mov	r3, r5
   2180e:	f104 0018 	add.w	r0, r4, #24
   21812:	f000 ff7b 	bl	2270c <z_add_timeout>
   21816:	e7f4      	b.n	21802 <z_impl_k_thread_create+0x3e>
   21818:	0002ba8d 	.word	0x0002ba8d

0002181c <z_init_static_threads>:
{
   2181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21820:	4c29      	ldr	r4, [pc, #164]	; (218c8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   21822:	4d2a      	ldr	r5, [pc, #168]	; (218cc <z_init_static_threads+0xb0>)
{
   21824:	b087      	sub	sp, #28
   21826:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   21828:	42ae      	cmp	r6, r5
   2182a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2182e:	d30f      	bcc.n	21850 <z_init_static_threads+0x34>
	k_sched_lock();
   21830:	f000 fbdc 	bl	21fec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21834:	4c24      	ldr	r4, [pc, #144]	; (218c8 <z_init_static_threads+0xac>)
   21836:	f8df 9098 	ldr.w	r9, [pc, #152]	; 218d0 <z_init_static_threads+0xb4>
   2183a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2183e:	f240 37e7 	movw	r7, #999	; 0x3e7
   21842:	42ac      	cmp	r4, r5
   21844:	d320      	bcc.n	21888 <z_init_static_threads+0x6c>
}
   21846:	b007      	add	sp, #28
   21848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2184c:	f000 bd9e 	b.w	2238c <k_sched_unlock>
		z_setup_new_thread(
   21850:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21854:	9305      	str	r3, [sp, #20]
   21856:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2185a:	9304      	str	r3, [sp, #16]
   2185c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21860:	9303      	str	r3, [sp, #12]
   21862:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21866:	9302      	str	r3, [sp, #8]
   21868:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2186c:	9301      	str	r3, [sp, #4]
   2186e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21872:	9300      	str	r3, [sp, #0]
   21874:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21878:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2187c:	f7ff ff72 	bl	21764 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21880:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21884:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   21886:	e7ce      	b.n	21826 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21888:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2188a:	1c5a      	adds	r2, r3, #1
   2188c:	d00d      	beq.n	218aa <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2188e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   21892:	2100      	movs	r1, #0
   21894:	4638      	mov	r0, r7
   21896:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2189a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2189e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   218a2:	d104      	bne.n	218ae <z_init_static_threads+0x92>
	z_sched_start(thread);
   218a4:	4640      	mov	r0, r8
   218a6:	f000 fc87 	bl	221b8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   218aa:	3430      	adds	r4, #48	; 0x30
   218ac:	e7c9      	b.n	21842 <z_init_static_threads+0x26>
   218ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   218b2:	2300      	movs	r3, #0
   218b4:	f7de ff8e 	bl	7d4 <__aeabi_uldivmod>
   218b8:	4602      	mov	r2, r0
   218ba:	460b      	mov	r3, r1
   218bc:	f108 0018 	add.w	r0, r8, #24
   218c0:	4649      	mov	r1, r9
   218c2:	f000 ff23 	bl	2270c <z_add_timeout>
   218c6:	e7f0      	b.n	218aa <z_init_static_threads+0x8e>
   218c8:	20000a58 	.word	0x20000a58
   218cc:	20000a58 	.word	0x20000a58
   218d0:	0002ba8d 	.word	0x0002ba8d

000218d4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   218d4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   218d6:	4c0b      	ldr	r4, [pc, #44]	; (21904 <idle+0x30>)
	return !z_sys_post_kernel;
   218d8:	4d0b      	ldr	r5, [pc, #44]	; (21908 <idle+0x34>)
	__asm__ volatile(
   218da:	f04f 0240 	mov.w	r2, #64	; 0x40
   218de:	f3ef 8311 	mrs	r3, BASEPRI
   218e2:	f382 8812 	msr	BASEPRI_MAX, r2
   218e6:	f3bf 8f6f 	isb	sy
   218ea:	f00a f98b 	bl	2bc04 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   218ee:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   218f0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   218f2:	b913      	cbnz	r3, 218fa <idle+0x26>
	arch_cpu_idle();
   218f4:	f7f3 f8a2 	bl	14a3c <arch_cpu_idle>
}
   218f8:	e7ef      	b.n	218da <idle+0x6>
   218fa:	f7f2 fea9 	bl	14650 <pm_system_suspend>
   218fe:	2800      	cmp	r0, #0
   21900:	d1eb      	bne.n	218da <idle+0x6>
   21902:	e7f7      	b.n	218f4 <idle+0x20>
   21904:	20003274 	.word	0x20003274
   21908:	20004ac3 	.word	0x20004ac3

0002190c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2190c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21910:	4604      	mov	r4, r0
   21912:	4617      	mov	r7, r2
   21914:	461e      	mov	r6, r3
   21916:	f04f 0340 	mov.w	r3, #64	; 0x40
   2191a:	f3ef 8811 	mrs	r8, BASEPRI
   2191e:	f383 8812 	msr	BASEPRI_MAX, r3
   21922:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21926:	68c3      	ldr	r3, [r0, #12]
   21928:	4a32      	ldr	r2, [pc, #200]	; (219f4 <z_impl_k_mutex_lock+0xe8>)
   2192a:	b16b      	cbz	r3, 21948 <z_impl_k_mutex_lock+0x3c>
   2192c:	6880      	ldr	r0, [r0, #8]
   2192e:	6891      	ldr	r1, [r2, #8]
   21930:	4288      	cmp	r0, r1
   21932:	d019      	beq.n	21968 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21934:	ea57 0306 	orrs.w	r3, r7, r6
   21938:	d118      	bne.n	2196c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2193a:	f388 8811 	msr	BASEPRI, r8
   2193e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21942:	f06f 000f 	mvn.w	r0, #15
   21946:	e00c      	b.n	21962 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   21948:	6891      	ldr	r1, [r2, #8]
   2194a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2194e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21950:	3301      	adds	r3, #1
   21952:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21954:	6893      	ldr	r3, [r2, #8]
   21956:	60a3      	str	r3, [r4, #8]
   21958:	f388 8811 	msr	BASEPRI, r8
   2195c:	f3bf 8f6f 	isb	sy
		return 0;
   21960:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21962:	b002      	add	sp, #8
   21964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   21968:	6921      	ldr	r1, [r4, #16]
   2196a:	e7f0      	b.n	2194e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2196c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   21970:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   21974:	4299      	cmp	r1, r3
   21976:	bfa8      	it	ge
   21978:	4619      	movge	r1, r3
   2197a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2197e:	4291      	cmp	r1, r2
   21980:	bfb8      	it	lt
   21982:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   21984:	428b      	cmp	r3, r1
   21986:	dd2e      	ble.n	219e6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   21988:	f009 fe27 	bl	2b5da <adjust_owner_prio.isra.0>
   2198c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2198e:	e9cd 7600 	strd	r7, r6, [sp]
   21992:	4819      	ldr	r0, [pc, #100]	; (219f8 <z_impl_k_mutex_lock+0xec>)
   21994:	4622      	mov	r2, r4
   21996:	4641      	mov	r1, r8
   21998:	f000 fc6a 	bl	22270 <z_pend_curr>
	if (got_mutex == 0) {
   2199c:	2800      	cmp	r0, #0
   2199e:	d0e0      	beq.n	21962 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   219a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   219a4:	f3ef 8611 	mrs	r6, BASEPRI
   219a8:	f383 8812 	msr	BASEPRI_MAX, r3
   219ac:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   219b0:	6823      	ldr	r3, [r4, #0]
   219b2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   219b4:	429c      	cmp	r4, r3
   219b6:	d00a      	beq.n	219ce <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   219b8:	b14b      	cbz	r3, 219ce <z_impl_k_mutex_lock+0xc2>
   219ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
   219be:	4299      	cmp	r1, r3
   219c0:	bfa8      	it	ge
   219c2:	4619      	movge	r1, r3
   219c4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   219c8:	4299      	cmp	r1, r3
   219ca:	bfb8      	it	lt
   219cc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   219ce:	68a0      	ldr	r0, [r4, #8]
   219d0:	f009 fe03 	bl	2b5da <adjust_owner_prio.isra.0>
   219d4:	b900      	cbnz	r0, 219d8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   219d6:	b145      	cbz	r5, 219ea <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   219d8:	4807      	ldr	r0, [pc, #28]	; (219f8 <z_impl_k_mutex_lock+0xec>)
   219da:	4631      	mov	r1, r6
   219dc:	f000 faf4 	bl	21fc8 <z_reschedule>
	return -EAGAIN;
   219e0:	f06f 000a 	mvn.w	r0, #10
   219e4:	e7bd      	b.n	21962 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   219e6:	2500      	movs	r5, #0
   219e8:	e7d1      	b.n	2198e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   219ea:	f386 8811 	msr	BASEPRI, r6
   219ee:	f3bf 8f6f 	isb	sy
   219f2:	e7f5      	b.n	219e0 <z_impl_k_mutex_lock+0xd4>
   219f4:	20003274 	.word	0x20003274
   219f8:	20004ac4 	.word	0x20004ac4

000219fc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   219fc:	6883      	ldr	r3, [r0, #8]
{
   219fe:	b570      	push	{r4, r5, r6, lr}
   21a00:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   21a02:	b36b      	cbz	r3, 21a60 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21a04:	4a19      	ldr	r2, [pc, #100]	; (21a6c <z_impl_k_mutex_unlock+0x70>)
   21a06:	6892      	ldr	r2, [r2, #8]
   21a08:	4293      	cmp	r3, r2
   21a0a:	d12c      	bne.n	21a66 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21a0c:	68c3      	ldr	r3, [r0, #12]
   21a0e:	2b01      	cmp	r3, #1
   21a10:	d903      	bls.n	21a1a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   21a12:	3b01      	subs	r3, #1
   21a14:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   21a16:	2000      	movs	r0, #0
}
   21a18:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   21a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a1e:	f3ef 8511 	mrs	r5, BASEPRI
   21a22:	f383 8812 	msr	BASEPRI_MAX, r3
   21a26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21a2a:	6901      	ldr	r1, [r0, #16]
   21a2c:	6880      	ldr	r0, [r0, #8]
   21a2e:	f009 fdd4 	bl	2b5da <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21a32:	4620      	mov	r0, r4
   21a34:	f00a f88b 	bl	2bb4e <z_unpend_first_thread>
	mutex->owner = new_owner;
   21a38:	2600      	movs	r6, #0
   21a3a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21a3c:	b150      	cbz	r0, 21a54 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   21a3e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21a42:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21a44:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21a46:	f00a f811 	bl	2ba6c <z_ready_thread>
		z_reschedule(&lock, key);
   21a4a:	4809      	ldr	r0, [pc, #36]	; (21a70 <z_impl_k_mutex_unlock+0x74>)
   21a4c:	4629      	mov	r1, r5
   21a4e:	f000 fabb 	bl	21fc8 <z_reschedule>
   21a52:	e7e0      	b.n	21a16 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   21a54:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   21a56:	f385 8811 	msr	BASEPRI, r5
   21a5a:	f3bf 8f6f 	isb	sy
   21a5e:	e7da      	b.n	21a16 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   21a60:	f06f 0015 	mvn.w	r0, #21
   21a64:	e7d8      	b.n	21a18 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   21a66:	f04f 30ff 	mov.w	r0, #4294967295
   21a6a:	e7d5      	b.n	21a18 <z_impl_k_mutex_unlock+0x1c>
   21a6c:	20003274 	.word	0x20003274
   21a70:	20004ac4 	.word	0x20004ac4

00021a74 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21a76:	4611      	mov	r1, r2
	__asm__ volatile(
   21a78:	f04f 0240 	mov.w	r2, #64	; 0x40
   21a7c:	f3ef 8511 	mrs	r5, BASEPRI
   21a80:	f382 8812 	msr	BASEPRI_MAX, r2
   21a84:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   21a88:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21a8a:	b19c      	cbz	r4, 21ab4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21a8c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21a8e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21a90:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21a94:	4294      	cmp	r4, r2
	list->head = node;
   21a96:	6003      	str	r3, [r0, #0]
	list->tail = node;
   21a98:	bf08      	it	eq
   21a9a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21a9c:	2101      	movs	r1, #1
   21a9e:	4620      	mov	r0, r4
   21aa0:	f009 fe0e 	bl	2b6c0 <z_queue_node_peek>
   21aa4:	4604      	mov	r4, r0
	__asm__ volatile(
   21aa6:	f385 8811 	msr	BASEPRI, r5
   21aaa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   21aae:	4620      	mov	r0, r4
   21ab0:	b003      	add	sp, #12
   21ab2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21ab4:	ea51 0203 	orrs.w	r2, r1, r3
   21ab8:	d0f5      	beq.n	21aa6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21aba:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21abe:	e9cd 1300 	strd	r1, r3, [sp]
   21ac2:	4610      	mov	r0, r2
   21ac4:	4629      	mov	r1, r5
   21ac6:	f000 fbd3 	bl	22270 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21aca:	2800      	cmp	r0, #0
   21acc:	d1ef      	bne.n	21aae <z_impl_k_queue_get+0x3a>
   21ace:	4b02      	ldr	r3, [pc, #8]	; (21ad8 <z_impl_k_queue_get+0x64>)
   21ad0:	689b      	ldr	r3, [r3, #8]
   21ad2:	695c      	ldr	r4, [r3, #20]
   21ad4:	e7eb      	b.n	21aae <z_impl_k_queue_get+0x3a>
   21ad6:	bf00      	nop
   21ad8:	20003274 	.word	0x20003274

00021adc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21adc:	b538      	push	{r3, r4, r5, lr}
   21ade:	4604      	mov	r4, r0
	__asm__ volatile(
   21ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ae4:	f3ef 8511 	mrs	r5, BASEPRI
   21ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   21aec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21af0:	f00a f82d 	bl	2bb4e <z_unpend_first_thread>

	if (thread != NULL) {
   21af4:	b148      	cbz	r0, 21b0a <z_impl_k_sem_give+0x2e>
   21af6:	2200      	movs	r2, #0
   21af8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21afa:	f009 ffb7 	bl	2ba6c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21afe:	4629      	mov	r1, r5
   21b00:	4808      	ldr	r0, [pc, #32]	; (21b24 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21b06:	f000 ba5f 	b.w	21fc8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21b0a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21b0e:	429a      	cmp	r2, r3
   21b10:	bf18      	it	ne
   21b12:	3301      	addne	r3, #1
   21b14:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21b16:	2102      	movs	r1, #2
   21b18:	f104 0010 	add.w	r0, r4, #16
   21b1c:	f00a fa29 	bl	2bf72 <z_handle_obj_poll_events>
}
   21b20:	e7ed      	b.n	21afe <z_impl_k_sem_give+0x22>
   21b22:	bf00      	nop
   21b24:	20004ac4 	.word	0x20004ac4

00021b28 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21b28:	b513      	push	{r0, r1, r4, lr}
   21b2a:	f04f 0440 	mov.w	r4, #64	; 0x40
   21b2e:	f3ef 8111 	mrs	r1, BASEPRI
   21b32:	f384 8812 	msr	BASEPRI_MAX, r4
   21b36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21b3a:	6884      	ldr	r4, [r0, #8]
   21b3c:	b144      	cbz	r4, 21b50 <z_impl_k_sem_take+0x28>
		sem->count--;
   21b3e:	3c01      	subs	r4, #1
   21b40:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   21b42:	f381 8811 	msr	BASEPRI, r1
   21b46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21b4a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21b4c:	b002      	add	sp, #8
   21b4e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21b50:	ea52 0403 	orrs.w	r4, r2, r3
   21b54:	d106      	bne.n	21b64 <z_impl_k_sem_take+0x3c>
   21b56:	f381 8811 	msr	BASEPRI, r1
   21b5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21b5e:	f06f 000f 	mvn.w	r0, #15
   21b62:	e7f3      	b.n	21b4c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21b64:	e9cd 2300 	strd	r2, r3, [sp]
   21b68:	4602      	mov	r2, r0
   21b6a:	4802      	ldr	r0, [pc, #8]	; (21b74 <z_impl_k_sem_take+0x4c>)
   21b6c:	f000 fb80 	bl	22270 <z_pend_curr>
	return ret;
   21b70:	e7ec      	b.n	21b4c <z_impl_k_sem_take+0x24>
   21b72:	bf00      	nop
   21b74:	20004ac4 	.word	0x20004ac4

00021b78 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   21b78:	b570      	push	{r4, r5, r6, lr}
   21b7a:	4604      	mov	r4, r0
	__asm__ volatile(
   21b7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b80:	f3ef 8511 	mrs	r5, BASEPRI
   21b84:	f383 8812 	msr	BASEPRI_MAX, r3
   21b88:	f3bf 8f6f 	isb	sy
   21b8c:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   21b90:	4620      	mov	r0, r4
   21b92:	f009 ffdc 	bl	2bb4e <z_unpend_first_thread>
		if (thread == NULL) {
   21b96:	b118      	cbz	r0, 21ba0 <z_impl_k_sem_reset+0x28>
   21b98:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   21b9a:	f009 ff67 	bl	2ba6c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   21b9e:	e7f7      	b.n	21b90 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   21ba0:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21ba2:	2102      	movs	r1, #2
   21ba4:	f104 0010 	add.w	r0, r4, #16
   21ba8:	f00a f9e3 	bl	2bf72 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   21bac:	4629      	mov	r1, r5
   21bae:	4802      	ldr	r0, [pc, #8]	; (21bb8 <z_impl_k_sem_reset+0x40>)
}
   21bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   21bb4:	f000 ba08 	b.w	21fc8 <z_reschedule>
   21bb8:	20004ac4 	.word	0x20004ac4

00021bbc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21bbe:	4b09      	ldr	r3, [pc, #36]	; (21be4 <k_sys_work_q_init+0x28>)
   21bc0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21bc2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21bc4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21bc6:	9300      	str	r3, [sp, #0]
   21bc8:	4907      	ldr	r1, [pc, #28]	; (21be8 <k_sys_work_q_init+0x2c>)
   21bca:	4808      	ldr	r0, [pc, #32]	; (21bec <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21bcc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21bd0:	f04f 33ff 	mov.w	r3, #4294967295
   21bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21bd8:	f000 f914 	bl	21e04 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21bdc:	4620      	mov	r0, r4
   21bde:	b004      	add	sp, #16
   21be0:	bd10      	pop	{r4, pc}
   21be2:	bf00      	nop
   21be4:	0002ff6e 	.word	0x0002ff6e
   21be8:	20006c90 	.word	0x20006c90
   21bec:	20002578 	.word	0x20002578

00021bf0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   21bf4:	4e47      	ldr	r6, [pc, #284]	; (21d14 <work_queue_main+0x124>)
   21bf6:	b085      	sub	sp, #20
   21bf8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   21bfa:	f04f 38ff 	mov.w	r8, #4294967295
   21bfe:	f04f 39ff 	mov.w	r9, #4294967295
   21c02:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c06:	f3ef 8711 	mrs	r7, BASEPRI
   21c0a:	f383 8812 	msr	BASEPRI_MAX, r3
   21c0e:	f3bf 8f6f 	isb	sy
   21c12:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   21c16:	b98d      	cbnz	r5, 21c3c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   21c18:	2102      	movs	r1, #2
   21c1a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   21c1e:	f009 fdc8 	bl	2b7b2 <flag_test_and_clear>
   21c22:	2800      	cmp	r0, #0
   21c24:	d135      	bne.n	21c92 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21c26:	2300      	movs	r3, #0
   21c28:	e9cd 8900 	strd	r8, r9, [sp]
   21c2c:	9302      	str	r3, [sp, #8]
   21c2e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   21c32:	4639      	mov	r1, r7
   21c34:	4838      	ldr	r0, [pc, #224]	; (21d18 <work_queue_main+0x128>)
   21c36:	f000 fcf3 	bl	22620 <z_sched_wait>
			continue;
   21c3a:	e7e2      	b.n	21c02 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c3c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   21c40:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   21c42:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c46:	4295      	cmp	r5, r2
   21c48:	d101      	bne.n	21c4e <work_queue_main+0x5e>
	list->tail = node;
   21c4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   21c4e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21c52:	f043 0302 	orr.w	r3, r3, #2
   21c56:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   21c5a:	68eb      	ldr	r3, [r5, #12]
   21c5c:	f023 0304 	bic.w	r3, r3, #4
   21c60:	f043 0301 	orr.w	r3, r3, #1
   21c64:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   21c66:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   21c68:	f387 8811 	msr	BASEPRI, r7
   21c6c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   21c70:	4628      	mov	r0, r5
   21c72:	4798      	blx	r3
	__asm__ volatile(
   21c74:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c78:	f3ef 8b11 	mrs	fp, BASEPRI
   21c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c80:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   21c84:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21c86:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21c88:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21c8c:	d40b      	bmi.n	21ca6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   21c8e:	60ea      	str	r2, [r5, #12]
   21c90:	e00e      	b.n	21cb0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21c92:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21c96:	2200      	movs	r2, #0
   21c98:	2101      	movs	r1, #1
   21c9a:	4628      	mov	r0, r5
   21c9c:	f009 ff7f 	bl	2bb9e <z_sched_wake>
   21ca0:	2800      	cmp	r0, #0
   21ca2:	d1f8      	bne.n	21c96 <work_queue_main+0xa6>
   21ca4:	e7bf      	b.n	21c26 <work_queue_main+0x36>
	return list->head;
   21ca6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   21ca8:	f023 0303 	bic.w	r3, r3, #3
   21cac:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21cae:	b970      	cbnz	r0, 21cce <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   21cb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21cb4:	f023 0302 	bic.w	r3, r3, #2
   21cb8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   21cbc:	f38b 8811 	msr	BASEPRI, fp
   21cc0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21cc4:	05d8      	lsls	r0, r3, #23
   21cc6:	d49c      	bmi.n	21c02 <work_queue_main+0x12>
	z_impl_k_yield();
   21cc8:	f000 fb88 	bl	223dc <z_impl_k_yield>
}
   21ccc:	e799      	b.n	21c02 <work_queue_main+0x12>
	return node->next;
   21cce:	2700      	movs	r7, #0
   21cd0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   21cd4:	463b      	mov	r3, r7
		if (wc->work == work) {
   21cd6:	6842      	ldr	r2, [r0, #4]
   21cd8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21cda:	4601      	mov	r1, r0
		if (wc->work == work) {
   21cdc:	d10c      	bne.n	21cf8 <work_queue_main+0x108>
	return node->next;
   21cde:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21ce0:	b997      	cbnz	r7, 21d08 <work_queue_main+0x118>
   21ce2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   21ce4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   21ce6:	4282      	cmp	r2, r0
   21ce8:	d100      	bne.n	21cec <work_queue_main+0xfc>
	list->tail = node;
   21cea:	6071      	str	r1, [r6, #4]
	parent->next = child;
   21cec:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   21cf0:	f7ff fef4 	bl	21adc <z_impl_k_sem_give>
}
   21cf4:	4639      	mov	r1, r7
   21cf6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21cf8:	f1ba 0f00 	cmp.w	sl, #0
   21cfc:	d0d8      	beq.n	21cb0 <work_queue_main+0xc0>
	return node->next;
   21cfe:	4650      	mov	r0, sl
   21d00:	460f      	mov	r7, r1
   21d02:	f8da a000 	ldr.w	sl, [sl]
   21d06:	e7e6      	b.n	21cd6 <work_queue_main+0xe6>
	return list->tail;
   21d08:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   21d0a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21d0c:	4290      	cmp	r0, r2
	list->tail = node;
   21d0e:	bf08      	it	eq
   21d10:	6077      	streq	r7, [r6, #4]
}
   21d12:	e7eb      	b.n	21cec <work_queue_main+0xfc>
   21d14:	2000329c 	.word	0x2000329c
   21d18:	20004ac4 	.word	0x20004ac4

00021d1c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21d1c:	68c3      	ldr	r3, [r0, #12]
{
   21d1e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21d20:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21d24:	079b      	lsls	r3, r3, #30
{
   21d26:	4605      	mov	r5, r0
   21d28:	460c      	mov	r4, r1
	if (ret) {
   21d2a:	d50d      	bpl.n	21d48 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21d2c:	2201      	movs	r2, #1
   21d2e:	2100      	movs	r1, #0
   21d30:	f104 0008 	add.w	r0, r4, #8
   21d34:	f009 fd2d 	bl	2b792 <z_impl_k_sem_init>
	parent->next = child;
   21d38:	2300      	movs	r3, #0
   21d3a:	6023      	str	r3, [r4, #0]
	return list->tail;
   21d3c:	4b05      	ldr	r3, [pc, #20]	; (21d54 <cancel_sync_locked+0x38>)
	canceler->work = work;
   21d3e:	6065      	str	r5, [r4, #4]
   21d40:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21d42:	b91a      	cbnz	r2, 21d4c <cancel_sync_locked+0x30>
	list->head = node;
   21d44:	e9c3 4400 	strd	r4, r4, [r3]
}
   21d48:	4630      	mov	r0, r6
   21d4a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21d4c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21d4e:	605c      	str	r4, [r3, #4]
}
   21d50:	e7fa      	b.n	21d48 <cancel_sync_locked+0x2c>
   21d52:	bf00      	nop
   21d54:	2000329c 	.word	0x2000329c

00021d58 <submit_to_queue_locked>:
{
   21d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   21d5a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21d5c:	079a      	lsls	r2, r3, #30
{
   21d5e:	4604      	mov	r4, r0
   21d60:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21d62:	f3c3 0540 	ubfx	r5, r3, #1, #1
   21d66:	d41f      	bmi.n	21da8 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21d68:	075f      	lsls	r7, r3, #29
   21d6a:	d41f      	bmi.n	21dac <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   21d6c:	680a      	ldr	r2, [r1, #0]
   21d6e:	b90a      	cbnz	r2, 21d74 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21d70:	6882      	ldr	r2, [r0, #8]
   21d72:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   21d74:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   21d76:	bf44      	itt	mi
   21d78:	68a3      	ldrmi	r3, [r4, #8]
   21d7a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   21d7c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   21d7e:	bf4c      	ite	mi
   21d80:	2502      	movmi	r5, #2
		ret = 1;
   21d82:	2501      	movpl	r5, #1
	if (queue == NULL) {
   21d84:	b37f      	cbz	r7, 21de6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21d86:	4b1b      	ldr	r3, [pc, #108]	; (21df4 <submit_to_queue_locked+0x9c>)
   21d88:	689b      	ldr	r3, [r3, #8]
   21d8a:	42bb      	cmp	r3, r7
   21d8c:	d111      	bne.n	21db2 <submit_to_queue_locked+0x5a>
   21d8e:	f009 fc10 	bl	2b5b2 <k_is_in_isr>
   21d92:	f080 0001 	eor.w	r0, r0, #1
   21d96:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   21d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21d9c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21d9e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21da2:	d523      	bpl.n	21dec <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   21da4:	b13a      	cbz	r2, 21db6 <submit_to_queue_locked+0x5e>
   21da6:	b940      	cbnz	r0, 21dba <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   21da8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   21dac:	2300      	movs	r3, #0
   21dae:	6033      	str	r3, [r6, #0]
	return ret;
   21db0:	e013      	b.n	21dda <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21db2:	2000      	movs	r0, #0
   21db4:	e7f0      	b.n	21d98 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   21db6:	071b      	lsls	r3, r3, #28
   21db8:	d4f6      	bmi.n	21da8 <submit_to_queue_locked+0x50>
	parent->next = child;
   21dba:	2300      	movs	r3, #0
   21dbc:	6023      	str	r3, [r4, #0]
	return list->tail;
   21dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   21dc2:	b963      	cbnz	r3, 21dde <submit_to_queue_locked+0x86>
	list->head = node;
   21dc4:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   21dc8:	4638      	mov	r0, r7
   21dca:	f009 fd0b 	bl	2b7e4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21dce:	68e3      	ldr	r3, [r4, #12]
   21dd0:	f043 0304 	orr.w	r3, r3, #4
   21dd4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21dd6:	6833      	ldr	r3, [r6, #0]
   21dd8:	60a3      	str	r3, [r4, #8]
}
   21dda:	4628      	mov	r0, r5
   21ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21dde:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21de0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21de4:	e7f0      	b.n	21dc8 <submit_to_queue_locked+0x70>
		return -EINVAL;
   21de6:	f06f 0515 	mvn.w	r5, #21
   21dea:	e7df      	b.n	21dac <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   21dec:	f06f 0512 	mvn.w	r5, #18
   21df0:	e7dc      	b.n	21dac <submit_to_queue_locked+0x54>
   21df2:	bf00      	nop
   21df4:	20003274 	.word	0x20003274

00021df8 <k_work_submit>:
{
   21df8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21dfa:	4801      	ldr	r0, [pc, #4]	; (21e00 <k_work_submit+0x8>)
   21dfc:	f009 bd76 	b.w	2b8ec <k_work_submit_to_queue>
   21e00:	20002578 	.word	0x20002578

00021e04 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   21e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e06:	b089      	sub	sp, #36	; 0x24
   21e08:	4604      	mov	r4, r0
	list->head = NULL;
   21e0a:	2000      	movs	r0, #0
	list->tail = NULL;
   21e0c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   21e10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21e12:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   21e16:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   21e1a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   21e1e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   21e22:	b31d      	cbz	r5, 21e6c <k_work_queue_start+0x68>
   21e24:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   21e26:	2800      	cmp	r0, #0
   21e28:	f240 1001 	movw	r0, #257	; 0x101
   21e2c:	bf08      	it	eq
   21e2e:	2001      	moveq	r0, #1
	*flagp = flags;
   21e30:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21e34:	2000      	movs	r0, #0
   21e36:	f04f 36ff 	mov.w	r6, #4294967295
   21e3a:	f04f 37ff 	mov.w	r7, #4294967295
   21e3e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21e42:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21e46:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21e4a:	4b09      	ldr	r3, [pc, #36]	; (21e70 <k_work_queue_start+0x6c>)
   21e4c:	9400      	str	r4, [sp, #0]
   21e4e:	4620      	mov	r0, r4
   21e50:	f7ff fcb8 	bl	217c4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   21e54:	b125      	cbz	r5, 21e60 <k_work_queue_start+0x5c>
   21e56:	6829      	ldr	r1, [r5, #0]
   21e58:	b111      	cbz	r1, 21e60 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   21e5a:	4620      	mov	r0, r4
   21e5c:	f009 fbaf 	bl	2b5be <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   21e60:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   21e62:	b009      	add	sp, #36	; 0x24
   21e64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21e68:	f009 bbae 	b.w	2b5c8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21e6c:	2001      	movs	r0, #1
   21e6e:	e7df      	b.n	21e30 <k_work_queue_start+0x2c>
   21e70:	00021bf1 	.word	0x00021bf1

00021e74 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21e74:	b513      	push	{r0, r1, r4, lr}
   21e76:	9001      	str	r0, [sp, #4]
   21e78:	4608      	mov	r0, r1
	__asm__ volatile(
   21e7a:	f04f 0140 	mov.w	r1, #64	; 0x40
   21e7e:	f3ef 8411 	mrs	r4, BASEPRI
   21e82:	f381 8812 	msr	BASEPRI_MAX, r1
   21e86:	f3bf 8f6f 	isb	sy
	return *flagp;
   21e8a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21e8c:	f011 0f0e 	tst.w	r1, #14
   21e90:	d116      	bne.n	21ec0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21e92:	ea53 0c02 	orrs.w	ip, r3, r2
   21e96:	d108      	bne.n	21eaa <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   21e98:	a901      	add	r1, sp, #4
   21e9a:	f7ff ff5d 	bl	21d58 <submit_to_queue_locked>
	__asm__ volatile(
   21e9e:	f384 8811 	msr	BASEPRI, r4
   21ea2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21ea6:	b002      	add	sp, #8
   21ea8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   21eaa:	f041 0108 	orr.w	r1, r1, #8
   21eae:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   21eb0:	9901      	ldr	r1, [sp, #4]
   21eb2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21eb4:	3010      	adds	r0, #16
   21eb6:	4903      	ldr	r1, [pc, #12]	; (21ec4 <k_work_schedule_for_queue+0x50>)
   21eb8:	f000 fc28 	bl	2270c <z_add_timeout>
	return ret;
   21ebc:	2001      	movs	r0, #1
   21ebe:	e7ee      	b.n	21e9e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   21ec0:	2000      	movs	r0, #0
   21ec2:	e7ec      	b.n	21e9e <k_work_schedule_for_queue+0x2a>
   21ec4:	0002b855 	.word	0x0002b855

00021ec8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21ec8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   21eca:	4801      	ldr	r0, [pc, #4]	; (21ed0 <k_work_schedule+0x8>)
   21ecc:	f7ff bfd2 	b.w	21e74 <k_work_schedule_for_queue>
   21ed0:	20002578 	.word	0x20002578

00021ed4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21ed6:	460c      	mov	r4, r1
   21ed8:	9001      	str	r0, [sp, #4]
   21eda:	4616      	mov	r6, r2
   21edc:	461d      	mov	r5, r3
	__asm__ volatile(
   21ede:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ee2:	f3ef 8711 	mrs	r7, BASEPRI
   21ee6:	f383 8812 	msr	BASEPRI_MAX, r3
   21eea:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21eee:	4608      	mov	r0, r1
   21ef0:	f009 fc6a 	bl	2b7c8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21ef4:	ea55 0306 	orrs.w	r3, r5, r6
   21ef8:	d109      	bne.n	21f0e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   21efa:	a901      	add	r1, sp, #4
   21efc:	4620      	mov	r0, r4
   21efe:	f7ff ff2b 	bl	21d58 <submit_to_queue_locked>
	__asm__ volatile(
   21f02:	f387 8811 	msr	BASEPRI, r7
   21f06:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21f0a:	b003      	add	sp, #12
   21f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21f0e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21f10:	4906      	ldr	r1, [pc, #24]	; (21f2c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   21f12:	f043 0308 	orr.w	r3, r3, #8
   21f16:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21f18:	9b01      	ldr	r3, [sp, #4]
   21f1a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21f1c:	f104 0010 	add.w	r0, r4, #16
   21f20:	4632      	mov	r2, r6
   21f22:	462b      	mov	r3, r5
   21f24:	f000 fbf2 	bl	2270c <z_add_timeout>
	return ret;
   21f28:	2001      	movs	r0, #1
   21f2a:	e7ea      	b.n	21f02 <k_work_reschedule_for_queue+0x2e>
   21f2c:	0002b855 	.word	0x0002b855

00021f30 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21f30:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21f32:	4801      	ldr	r0, [pc, #4]	; (21f38 <k_work_reschedule+0x8>)
   21f34:	f7ff bfce 	b.w	21ed4 <k_work_reschedule_for_queue>
   21f38:	20002578 	.word	0x20002578

00021f3c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21f3c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21f3e:	4d07      	ldr	r5, [pc, #28]	; (21f5c <z_reset_time_slice+0x20>)
   21f40:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21f42:	b154      	cbz	r4, 21f5a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21f44:	f7fd fa5a 	bl	1f3fc <sys_clock_elapsed>
   21f48:	4b05      	ldr	r3, [pc, #20]	; (21f60 <z_reset_time_slice+0x24>)
   21f4a:	4404      	add	r4, r0
   21f4c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21f4e:	6828      	ldr	r0, [r5, #0]
   21f50:	2100      	movs	r1, #0
	}
}
   21f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21f56:	f009 be65 	b.w	2bc24 <z_set_timeout_expiry>
}
   21f5a:	bd38      	pop	{r3, r4, r5, pc}
   21f5c:	200032ac 	.word	0x200032ac
   21f60:	20003274 	.word	0x20003274

00021f64 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f66:	4604      	mov	r4, r0
   21f68:	460d      	mov	r5, r1
	__asm__ volatile(
   21f6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f6e:	f3ef 8711 	mrs	r7, BASEPRI
   21f72:	f383 8812 	msr	BASEPRI_MAX, r3
   21f76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   21f7a:	4e10      	ldr	r6, [pc, #64]	; (21fbc <k_sched_time_slice_set+0x58>)
   21f7c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   21f7e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21f82:	f240 30e7 	movw	r0, #999	; 0x3e7
   21f86:	6131      	str	r1, [r6, #16]
   21f88:	2300      	movs	r3, #0
   21f8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21f8e:	fbe4 010c 	umlal	r0, r1, r4, ip
   21f92:	f7de fc1f 	bl	7d4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21f96:	2c00      	cmp	r4, #0
   21f98:	4b09      	ldr	r3, [pc, #36]	; (21fc0 <k_sched_time_slice_set+0x5c>)
   21f9a:	dc0a      	bgt.n	21fb2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   21f9c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   21f9e:	4b09      	ldr	r3, [pc, #36]	; (21fc4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   21fa0:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   21fa2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   21fa4:	f7ff ffca 	bl	21f3c <z_reset_time_slice>
	__asm__ volatile(
   21fa8:	f387 8811 	msr	BASEPRI, r7
   21fac:	f3bf 8f6f 	isb	sy
	}
}
   21fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   21fb2:	2802      	cmp	r0, #2
   21fb4:	bfb8      	it	lt
   21fb6:	2002      	movlt	r0, #2
   21fb8:	e7f0      	b.n	21f9c <k_sched_time_slice_set+0x38>
   21fba:	bf00      	nop
   21fbc:	20003274 	.word	0x20003274
   21fc0:	200032ac 	.word	0x200032ac
   21fc4:	200032a8 	.word	0x200032a8

00021fc8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21fc8:	b949      	cbnz	r1, 21fde <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21fca:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   21fce:	b930      	cbnz	r0, 21fde <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   21fd0:	4b05      	ldr	r3, [pc, #20]	; (21fe8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   21fd2:	69da      	ldr	r2, [r3, #28]
   21fd4:	689b      	ldr	r3, [r3, #8]
   21fd6:	429a      	cmp	r2, r3
   21fd8:	d001      	beq.n	21fde <z_reschedule+0x16>
	ret = arch_swap(key);
   21fda:	f7f2 be27 	b.w	14c2c <arch_swap>
   21fde:	f381 8811 	msr	BASEPRI, r1
   21fe2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21fe6:	4770      	bx	lr
   21fe8:	20003274 	.word	0x20003274

00021fec <k_sched_lock>:
	__asm__ volatile(
   21fec:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ff0:	f3ef 8111 	mrs	r1, BASEPRI
   21ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ff8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   21ffc:	4b04      	ldr	r3, [pc, #16]	; (22010 <k_sched_lock+0x24>)
   21ffe:	689a      	ldr	r2, [r3, #8]
   22000:	7bd3      	ldrb	r3, [r2, #15]
   22002:	3b01      	subs	r3, #1
   22004:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   22006:	f381 8811 	msr	BASEPRI, r1
   2200a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2200e:	4770      	bx	lr
   22010:	20003274 	.word	0x20003274

00022014 <update_cache>:
{
   22014:	b538      	push	{r3, r4, r5, lr}
   22016:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   22018:	480c      	ldr	r0, [pc, #48]	; (2204c <update_cache+0x38>)
   2201a:	4d0d      	ldr	r5, [pc, #52]	; (22050 <update_cache+0x3c>)
   2201c:	f009 fd20 	bl	2ba60 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22020:	4604      	mov	r4, r0
   22022:	b900      	cbnz	r0, 22026 <update_cache+0x12>
   22024:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   22026:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   22028:	b94a      	cbnz	r2, 2203e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2202a:	7b5a      	ldrb	r2, [r3, #13]
   2202c:	06d2      	lsls	r2, r2, #27
   2202e:	d106      	bne.n	2203e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22030:	69a2      	ldr	r2, [r4, #24]
   22032:	b922      	cbnz	r2, 2203e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   22034:	89da      	ldrh	r2, [r3, #14]
   22036:	2a7f      	cmp	r2, #127	; 0x7f
   22038:	d901      	bls.n	2203e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2203a:	61eb      	str	r3, [r5, #28]
}
   2203c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2203e:	429c      	cmp	r4, r3
   22040:	d002      	beq.n	22048 <update_cache+0x34>
			z_reset_time_slice(thread);
   22042:	4620      	mov	r0, r4
   22044:	f7ff ff7a 	bl	21f3c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   22048:	61ec      	str	r4, [r5, #28]
}
   2204a:	e7f7      	b.n	2203c <update_cache+0x28>
   2204c:	20003294 	.word	0x20003294
   22050:	20003274 	.word	0x20003274

00022054 <move_thread_to_end_of_prio_q>:
{
   22054:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22056:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2205a:	7b43      	ldrb	r3, [r0, #13]
   2205c:	2a00      	cmp	r2, #0
{
   2205e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   22060:	da04      	bge.n	2206c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22066:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   22068:	f009 fca5 	bl	2b9b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2206c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2206e:	4a15      	ldr	r2, [pc, #84]	; (220c4 <move_thread_to_end_of_prio_q+0x70>)
   22070:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22074:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   22076:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2207a:	f102 0520 	add.w	r5, r2, #32
   2207e:	42ab      	cmp	r3, r5
   22080:	d01b      	beq.n	220ba <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22082:	b1d3      	cbz	r3, 220ba <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   22084:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   22088:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2208c:	4286      	cmp	r6, r0
   2208e:	d00f      	beq.n	220b0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   22090:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22092:	2800      	cmp	r0, #0
   22094:	dd0c      	ble.n	220b0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   22096:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   22098:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2209c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2209e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   220a0:	6890      	ldr	r0, [r2, #8]
   220a2:	1a43      	subs	r3, r0, r1
   220a4:	4258      	negs	r0, r3
}
   220a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   220aa:	4158      	adcs	r0, r3
   220ac:	f7ff bfb2 	b.w	22014 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   220b0:	42a3      	cmp	r3, r4
   220b2:	d002      	beq.n	220ba <move_thread_to_end_of_prio_q+0x66>
   220b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   220b6:	2b00      	cmp	r3, #0
   220b8:	d1e6      	bne.n	22088 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   220ba:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   220be:	6021      	str	r1, [r4, #0]
	list->tail = node;
   220c0:	6251      	str	r1, [r2, #36]	; 0x24
}
   220c2:	e7ed      	b.n	220a0 <move_thread_to_end_of_prio_q+0x4c>
   220c4:	20003274 	.word	0x20003274

000220c8 <z_time_slice>:
{
   220c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   220ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   220ce:	f3ef 8511 	mrs	r5, BASEPRI
   220d2:	f383 8812 	msr	BASEPRI_MAX, r3
   220d6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   220da:	4b17      	ldr	r3, [pc, #92]	; (22138 <z_time_slice+0x70>)
   220dc:	4a17      	ldr	r2, [pc, #92]	; (2213c <z_time_slice+0x74>)
   220de:	689c      	ldr	r4, [r3, #8]
   220e0:	6811      	ldr	r1, [r2, #0]
   220e2:	428c      	cmp	r4, r1
   220e4:	d107      	bne.n	220f6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   220e6:	4620      	mov	r0, r4
   220e8:	f7ff ff28 	bl	21f3c <z_reset_time_slice>
	__asm__ volatile(
   220ec:	f385 8811 	msr	BASEPRI, r5
   220f0:	f3bf 8f6f 	isb	sy
}
   220f4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   220f6:	2100      	movs	r1, #0
   220f8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   220fa:	4a11      	ldr	r2, [pc, #68]	; (22140 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   220fc:	6812      	ldr	r2, [r2, #0]
   220fe:	b1c2      	cbz	r2, 22132 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   22100:	89e2      	ldrh	r2, [r4, #14]
   22102:	2a7f      	cmp	r2, #127	; 0x7f
   22104:	d815      	bhi.n	22132 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   22106:	7b62      	ldrb	r2, [r4, #13]
   22108:	06d2      	lsls	r2, r2, #27
   2210a:	d112      	bne.n	22132 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2210c:	4a0d      	ldr	r2, [pc, #52]	; (22144 <z_time_slice+0x7c>)
   2210e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22112:	6812      	ldr	r2, [r2, #0]
   22114:	4291      	cmp	r1, r2
   22116:	db0c      	blt.n	22132 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   22118:	4a0b      	ldr	r2, [pc, #44]	; (22148 <z_time_slice+0x80>)
   2211a:	4294      	cmp	r4, r2
   2211c:	d009      	beq.n	22132 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2211e:	691a      	ldr	r2, [r3, #16]
   22120:	4282      	cmp	r2, r0
   22122:	dc03      	bgt.n	2212c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   22124:	4620      	mov	r0, r4
   22126:	f7ff ff95 	bl	22054 <move_thread_to_end_of_prio_q>
   2212a:	e7dc      	b.n	220e6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   2212c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   2212e:	611a      	str	r2, [r3, #16]
   22130:	e7dc      	b.n	220ec <z_time_slice+0x24>
   22132:	2200      	movs	r2, #0
   22134:	e7fb      	b.n	2212e <z_time_slice+0x66>
   22136:	bf00      	nop
   22138:	20003274 	.word	0x20003274
   2213c:	200032a4 	.word	0x200032a4
   22140:	200032ac 	.word	0x200032ac
   22144:	200032a8 	.word	0x200032a8
   22148:	20002478 	.word	0x20002478

0002214c <ready_thread>:
{
   2214c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2214e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22152:	7b43      	ldrb	r3, [r0, #13]
   22154:	2a00      	cmp	r2, #0
   22156:	db2a      	blt.n	221ae <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22158:	06da      	lsls	r2, r3, #27
   2215a:	d128      	bne.n	221ae <ready_thread+0x62>
   2215c:	6982      	ldr	r2, [r0, #24]
   2215e:	bb32      	cbnz	r2, 221ae <ready_thread+0x62>
	return list->head == list;
   22160:	4a14      	ldr	r2, [pc, #80]	; (221b4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   22162:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22166:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   22168:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2216c:	f102 0520 	add.w	r5, r2, #32
   22170:	42ab      	cmp	r3, r5
   22172:	d017      	beq.n	221a4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22174:	b1b3      	cbz	r3, 221a4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   22176:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2217a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2217e:	428e      	cmp	r6, r1
   22180:	d00b      	beq.n	2219a <ready_thread+0x4e>
		return b2 - b1;
   22182:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22184:	2900      	cmp	r1, #0
   22186:	dd08      	ble.n	2219a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   22188:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2218a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2218e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   22190:	6058      	str	r0, [r3, #4]
}
   22192:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   22194:	2000      	movs	r0, #0
   22196:	f7ff bf3d 	b.w	22014 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2219a:	42a3      	cmp	r3, r4
   2219c:	d002      	beq.n	221a4 <ready_thread+0x58>
   2219e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   221a0:	2b00      	cmp	r3, #0
   221a2:	d1ea      	bne.n	2217a <ready_thread+0x2e>
	node->prev = tail;
   221a4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   221a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   221aa:	6250      	str	r0, [r2, #36]	; 0x24
}
   221ac:	e7f1      	b.n	22192 <ready_thread+0x46>
}
   221ae:	bc70      	pop	{r4, r5, r6}
   221b0:	4770      	bx	lr
   221b2:	bf00      	nop
   221b4:	20003274 	.word	0x20003274

000221b8 <z_sched_start>:
{
   221b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   221ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   221be:	f3ef 8411 	mrs	r4, BASEPRI
   221c2:	f382 8812 	msr	BASEPRI_MAX, r2
   221c6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   221ca:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   221cc:	0751      	lsls	r1, r2, #29
   221ce:	d404      	bmi.n	221da <z_sched_start+0x22>
	__asm__ volatile(
   221d0:	f384 8811 	msr	BASEPRI, r4
   221d4:	f3bf 8f6f 	isb	sy
}
   221d8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   221da:	f022 0204 	bic.w	r2, r2, #4
   221de:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   221e0:	f7ff ffb4 	bl	2214c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   221e4:	4621      	mov	r1, r4
   221e6:	4802      	ldr	r0, [pc, #8]	; (221f0 <z_sched_start+0x38>)
}
   221e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   221ec:	f7ff beec 	b.w	21fc8 <z_reschedule>
   221f0:	20004ac4 	.word	0x20004ac4

000221f4 <unready_thread>:
{
   221f4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   221f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   221fa:	7b43      	ldrb	r3, [r0, #13]
   221fc:	2a00      	cmp	r2, #0
{
   221fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   22200:	da04      	bge.n	2220c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22206:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22208:	f009 fbd5 	bl	2b9b6 <sys_dlist_remove>
	update_cache(thread == _current);
   2220c:	4b04      	ldr	r3, [pc, #16]	; (22220 <unready_thread+0x2c>)
   2220e:	6898      	ldr	r0, [r3, #8]
   22210:	1a43      	subs	r3, r0, r1
   22212:	4258      	negs	r0, r3
   22214:	4158      	adcs	r0, r3
}
   22216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2221a:	f7ff befb 	b.w	22014 <update_cache>
   2221e:	bf00      	nop
   22220:	20003274 	.word	0x20003274

00022224 <pend>:
{
   22224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22228:	4606      	mov	r6, r0
   2222a:	4615      	mov	r5, r2
   2222c:	461c      	mov	r4, r3
	__asm__ volatile(
   2222e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22232:	f3ef 8711 	mrs	r7, BASEPRI
   22236:	f383 8812 	msr	BASEPRI_MAX, r3
   2223a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2223e:	f009 fc47 	bl	2bad0 <add_to_waitq_locked>
	__asm__ volatile(
   22242:	f387 8811 	msr	BASEPRI, r7
   22246:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2224a:	f1b4 3fff 	cmp.w	r4, #4294967295
   2224e:	bf08      	it	eq
   22250:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   22254:	d008      	beq.n	22268 <pend+0x44>
   22256:	462a      	mov	r2, r5
   22258:	4623      	mov	r3, r4
   2225a:	f106 0018 	add.w	r0, r6, #24
   2225e:	4903      	ldr	r1, [pc, #12]	; (2226c <pend+0x48>)
}
   22260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22264:	f000 ba52 	b.w	2270c <z_add_timeout>
   22268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2226c:	0002ba8d 	.word	0x0002ba8d

00022270 <z_pend_curr>:
{
   22270:	b510      	push	{r4, lr}
	pending_current = _current;
   22272:	4b07      	ldr	r3, [pc, #28]	; (22290 <z_pend_curr+0x20>)
   22274:	6898      	ldr	r0, [r3, #8]
   22276:	4b07      	ldr	r3, [pc, #28]	; (22294 <z_pend_curr+0x24>)
{
   22278:	460c      	mov	r4, r1
	pending_current = _current;
   2227a:	6018      	str	r0, [r3, #0]
{
   2227c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2227e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22282:	f7ff ffcf 	bl	22224 <pend>
   22286:	4620      	mov	r0, r4
}
   22288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2228c:	f7f2 bcce 	b.w	14c2c <arch_swap>
   22290:	20003274 	.word	0x20003274
   22294:	200032a4 	.word	0x200032a4

00022298 <z_set_prio>:
{
   22298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2229a:	4604      	mov	r4, r0
	__asm__ volatile(
   2229c:	f04f 0340 	mov.w	r3, #64	; 0x40
   222a0:	f3ef 8611 	mrs	r6, BASEPRI
   222a4:	f383 8812 	msr	BASEPRI_MAX, r3
   222a8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   222ac:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   222ae:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   222b0:	b249      	sxtb	r1, r1
   222b2:	d133      	bne.n	2231c <z_set_prio+0x84>
		if (need_sched) {
   222b4:	6982      	ldr	r2, [r0, #24]
   222b6:	bb8a      	cbnz	r2, 2231c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   222b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   222bc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   222be:	f009 fb7a 	bl	2b9b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   222c2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   222c4:	4a17      	ldr	r2, [pc, #92]	; (22324 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   222c6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   222c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   222cc:	7343      	strb	r3, [r0, #13]
   222ce:	4610      	mov	r0, r2
   222d0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222d4:	4283      	cmp	r3, r0
   222d6:	d01b      	beq.n	22310 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222d8:	b1d3      	cbz	r3, 22310 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   222da:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   222dc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   222e0:	42a9      	cmp	r1, r5
   222e2:	d010      	beq.n	22306 <z_set_prio+0x6e>
		return b2 - b1;
   222e4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   222e6:	2d00      	cmp	r5, #0
   222e8:	dd0d      	ble.n	22306 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   222ea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   222ec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   222f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   222f2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   222f4:	2001      	movs	r0, #1
   222f6:	f7ff fe8d 	bl	22014 <update_cache>
   222fa:	2001      	movs	r0, #1
	__asm__ volatile(
   222fc:	f386 8811 	msr	BASEPRI, r6
   22300:	f3bf 8f6f 	isb	sy
}
   22304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   22306:	42bb      	cmp	r3, r7
   22308:	d002      	beq.n	22310 <z_set_prio+0x78>
   2230a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2230c:	2b00      	cmp	r3, #0
   2230e:	d1e5      	bne.n	222dc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   22310:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   22312:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   22316:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22318:	6254      	str	r4, [r2, #36]	; 0x24
}
   2231a:	e7eb      	b.n	222f4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   2231c:	73a1      	strb	r1, [r4, #14]
   2231e:	2000      	movs	r0, #0
   22320:	e7ec      	b.n	222fc <z_set_prio+0x64>
   22322:	bf00      	nop
   22324:	20003274 	.word	0x20003274

00022328 <z_impl_k_thread_suspend>:
{
   22328:	b570      	push	{r4, r5, r6, lr}
   2232a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2232c:	3018      	adds	r0, #24
   2232e:	f009 fc53 	bl	2bbd8 <z_abort_timeout>
	__asm__ volatile(
   22332:	f04f 0340 	mov.w	r3, #64	; 0x40
   22336:	f3ef 8611 	mrs	r6, BASEPRI
   2233a:	f383 8812 	msr	BASEPRI_MAX, r3
   2233e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   22342:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22346:	7b63      	ldrb	r3, [r4, #13]
   22348:	2a00      	cmp	r2, #0
   2234a:	da05      	bge.n	22358 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2234c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22350:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22352:	4620      	mov	r0, r4
   22354:	f009 fb2f 	bl	2b9b6 <sys_dlist_remove>
		update_cache(thread == _current);
   22358:	4d0b      	ldr	r5, [pc, #44]	; (22388 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2235a:	7b63      	ldrb	r3, [r4, #13]
   2235c:	68a8      	ldr	r0, [r5, #8]
   2235e:	f043 0310 	orr.w	r3, r3, #16
   22362:	7363      	strb	r3, [r4, #13]
   22364:	1b03      	subs	r3, r0, r4
   22366:	4258      	negs	r0, r3
   22368:	4158      	adcs	r0, r3
   2236a:	f7ff fe53 	bl	22014 <update_cache>
	__asm__ volatile(
   2236e:	f386 8811 	msr	BASEPRI, r6
   22372:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   22376:	68ab      	ldr	r3, [r5, #8]
   22378:	42a3      	cmp	r3, r4
   2237a:	d103      	bne.n	22384 <z_impl_k_thread_suspend+0x5c>
}
   2237c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   22380:	f009 bb64 	b.w	2ba4c <z_reschedule_unlocked>
}
   22384:	bd70      	pop	{r4, r5, r6, pc}
   22386:	bf00      	nop
   22388:	20003274 	.word	0x20003274

0002238c <k_sched_unlock>:
{
   2238c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2238e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22392:	f3ef 8411 	mrs	r4, BASEPRI
   22396:	f383 8812 	msr	BASEPRI_MAX, r3
   2239a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2239e:	4b08      	ldr	r3, [pc, #32]	; (223c0 <k_sched_unlock+0x34>)
   223a0:	689a      	ldr	r2, [r3, #8]
   223a2:	7bd3      	ldrb	r3, [r2, #15]
   223a4:	3301      	adds	r3, #1
   223a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   223a8:	2000      	movs	r0, #0
   223aa:	f7ff fe33 	bl	22014 <update_cache>
	__asm__ volatile(
   223ae:	f384 8811 	msr	BASEPRI, r4
   223b2:	f3bf 8f6f 	isb	sy
}
   223b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   223ba:	f009 bb47 	b.w	2ba4c <z_reschedule_unlocked>
   223be:	bf00      	nop
   223c0:	20003274 	.word	0x20003274

000223c4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   223c4:	4b04      	ldr	r3, [pc, #16]	; (223d8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   223c6:	2100      	movs	r1, #0
   223c8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   223cc:	e9c3 2208 	strd	r2, r2, [r3, #32]
   223d0:	4608      	mov	r0, r1
   223d2:	f7ff bdc7 	b.w	21f64 <k_sched_time_slice_set>
   223d6:	bf00      	nop
   223d8:	20003274 	.word	0x20003274

000223dc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   223dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   223de:	f04f 0340 	mov.w	r3, #64	; 0x40
   223e2:	f3ef 8511 	mrs	r5, BASEPRI
   223e6:	f383 8812 	msr	BASEPRI_MAX, r3
   223ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   223ee:	491a      	ldr	r1, [pc, #104]	; (22458 <z_impl_k_yield+0x7c>)
   223f0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   223f2:	7b43      	ldrb	r3, [r0, #13]
   223f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   223f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   223fa:	f009 fadc 	bl	2b9b6 <sys_dlist_remove>
	}
	queue_thread(_current);
   223fe:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22400:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   22402:	4608      	mov	r0, r1
   22404:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22408:	735a      	strb	r2, [r3, #13]
   2240a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2240e:	4282      	cmp	r2, r0
   22410:	d01c      	beq.n	2244c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22412:	b1da      	cbz	r2, 2244c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   22414:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   22416:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2241a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   2241e:	42a6      	cmp	r6, r4
   22420:	d00f      	beq.n	22442 <z_impl_k_yield+0x66>
		return b2 - b1;
   22422:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22424:	2c00      	cmp	r4, #0
   22426:	dd0c      	ble.n	22442 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   22428:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2242a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2242e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   22430:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22432:	2001      	movs	r0, #1
   22434:	f7ff fdee 	bl	22014 <update_cache>
   22438:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2243a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2243e:	f7f2 bbf5 	b.w	14c2c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   22442:	42ba      	cmp	r2, r7
   22444:	d002      	beq.n	2244c <z_impl_k_yield+0x70>
   22446:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22448:	2a00      	cmp	r2, #0
   2244a:	d1e6      	bne.n	2241a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   2244c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   2244e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   22452:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22454:	624b      	str	r3, [r1, #36]	; 0x24
}
   22456:	e7ec      	b.n	22432 <z_impl_k_yield+0x56>
   22458:	20003274 	.word	0x20003274

0002245c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2245c:	ea50 0301 	orrs.w	r3, r0, r1
{
   22460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22464:	4605      	mov	r5, r0
   22466:	460e      	mov	r6, r1
	if (ticks == 0) {
   22468:	d103      	bne.n	22472 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2246a:	f7ff ffb7 	bl	223dc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   2246e:	2000      	movs	r0, #0
   22470:	e033      	b.n	224da <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   22472:	f06f 0401 	mvn.w	r4, #1
   22476:	1a24      	subs	r4, r4, r0
   22478:	f04f 33ff 	mov.w	r3, #4294967295
   2247c:	eb63 0301 	sbc.w	r3, r3, r1
   22480:	2c01      	cmp	r4, #1
   22482:	f173 0300 	sbcs.w	r3, r3, #0
   22486:	da02      	bge.n	2248e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22488:	f009 fbe6 	bl	2bc58 <sys_clock_tick_get_32>
   2248c:	1944      	adds	r4, r0, r5
   2248e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22492:	f3ef 8811 	mrs	r8, BASEPRI
   22496:	f383 8812 	msr	BASEPRI_MAX, r3
   2249a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2249e:	4f10      	ldr	r7, [pc, #64]	; (224e0 <z_tick_sleep+0x84>)
   224a0:	4b10      	ldr	r3, [pc, #64]	; (224e4 <z_tick_sleep+0x88>)
   224a2:	68b8      	ldr	r0, [r7, #8]
   224a4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   224a6:	f7ff fea5 	bl	221f4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   224aa:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   224ac:	490e      	ldr	r1, [pc, #56]	; (224e8 <z_tick_sleep+0x8c>)
   224ae:	462a      	mov	r2, r5
   224b0:	4633      	mov	r3, r6
   224b2:	3018      	adds	r0, #24
   224b4:	f000 f92a 	bl	2270c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   224b8:	68ba      	ldr	r2, [r7, #8]
   224ba:	7b53      	ldrb	r3, [r2, #13]
   224bc:	f043 0310 	orr.w	r3, r3, #16
   224c0:	7353      	strb	r3, [r2, #13]
   224c2:	4640      	mov	r0, r8
   224c4:	f7f2 fbb2 	bl	14c2c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   224c8:	f009 fbc6 	bl	2bc58 <sys_clock_tick_get_32>
   224cc:	1a20      	subs	r0, r4, r0
   224ce:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   224d2:	2801      	cmp	r0, #1
   224d4:	f173 0300 	sbcs.w	r3, r3, #0
   224d8:	dbc9      	blt.n	2246e <z_tick_sleep+0x12>
}
   224da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224de:	bf00      	nop
   224e0:	20003274 	.word	0x20003274
   224e4:	200032a4 	.word	0x200032a4
   224e8:	0002ba8d 	.word	0x0002ba8d

000224ec <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   224ec:	f1b1 3fff 	cmp.w	r1, #4294967295
   224f0:	bf08      	it	eq
   224f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   224f6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   224f8:	d106      	bne.n	22508 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   224fa:	4b08      	ldr	r3, [pc, #32]	; (2251c <z_impl_k_sleep+0x30>)
   224fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   224fe:	f7ff ff13 	bl	22328 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22502:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22506:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22508:	f7ff ffa8 	bl	2245c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22510:	fb80 0303 	smull	r0, r3, r0, r3
   22514:	0bc0      	lsrs	r0, r0, #15
   22516:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2251a:	e7f4      	b.n	22506 <z_impl_k_sleep+0x1a>
   2251c:	20003274 	.word	0x20003274

00022520 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   22520:	b538      	push	{r3, r4, r5, lr}
   22522:	4604      	mov	r4, r0
   22524:	4809      	ldr	r0, [pc, #36]	; (2254c <z_impl_k_usleep+0x2c>)
   22526:	4a0a      	ldr	r2, [pc, #40]	; (22550 <z_impl_k_usleep+0x30>)
   22528:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2252c:	2100      	movs	r1, #0
   2252e:	2300      	movs	r3, #0
   22530:	fbc4 0105 	smlal	r0, r1, r4, r5
   22534:	f7de f94e 	bl	7d4 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   22538:	17c1      	asrs	r1, r0, #31
   2253a:	f7ff ff8f 	bl	2245c <z_tick_sleep>
   2253e:	4b04      	ldr	r3, [pc, #16]	; (22550 <z_impl_k_usleep+0x30>)
   22540:	fb80 3003 	smull	r3, r0, r0, r3
   22544:	0bdb      	lsrs	r3, r3, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   22546:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   2254a:	bd38      	pop	{r3, r4, r5, pc}
   2254c:	000f423f 	.word	0x000f423f
   22550:	000f4240 	.word	0x000f4240

00022554 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22554:	4b01      	ldr	r3, [pc, #4]	; (2255c <z_impl_z_current_get+0x8>)
   22556:	6898      	ldr	r0, [r3, #8]
   22558:	4770      	bx	lr
   2255a:	bf00      	nop
   2255c:	20003274 	.word	0x20003274

00022560 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22564:	4604      	mov	r4, r0
   22566:	f04f 0340 	mov.w	r3, #64	; 0x40
   2256a:	f3ef 8611 	mrs	r6, BASEPRI
   2256e:	f383 8812 	msr	BASEPRI_MAX, r3
   22572:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22576:	7b03      	ldrb	r3, [r0, #12]
   22578:	07d9      	lsls	r1, r3, #31
   2257a:	d50b      	bpl.n	22594 <z_thread_abort+0x34>
	__asm__ volatile(
   2257c:	f386 8811 	msr	BASEPRI, r6
   22580:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   22584:	4040      	eors	r0, r0
   22586:	f380 8811 	msr	BASEPRI, r0
   2258a:	f04f 0004 	mov.w	r0, #4
   2258e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22594:	7b43      	ldrb	r3, [r0, #13]
   22596:	071a      	lsls	r2, r3, #28
   22598:	d504      	bpl.n	225a4 <z_thread_abort+0x44>
   2259a:	f386 8811 	msr	BASEPRI, r6
   2259e:	f3bf 8f6f 	isb	sy
   225a2:	e7f5      	b.n	22590 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   225a4:	f023 0220 	bic.w	r2, r3, #32
   225a8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   225ac:	09d2      	lsrs	r2, r2, #7
   225ae:	d120      	bne.n	225f2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   225b0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   225b2:	68a3      	ldr	r3, [r4, #8]
   225b4:	b113      	cbz	r3, 225bc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   225b6:	4620      	mov	r0, r4
   225b8:	f009 fa05 	bl	2b9c6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   225bc:	f104 0018 	add.w	r0, r4, #24
   225c0:	f009 fb0a 	bl	2bbd8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   225c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   225c8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   225cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225ce:	42bd      	cmp	r5, r7
   225d0:	d000      	beq.n	225d4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   225d2:	b9b5      	cbnz	r5, 22602 <z_thread_abort+0xa2>
		update_cache(1);
   225d4:	2001      	movs	r0, #1
   225d6:	f7ff fd1d 	bl	22014 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   225da:	4b10      	ldr	r3, [pc, #64]	; (2261c <z_thread_abort+0xbc>)
   225dc:	689b      	ldr	r3, [r3, #8]
   225de:	42a3      	cmp	r3, r4
   225e0:	d1db      	bne.n	2259a <z_thread_abort+0x3a>
   225e2:	f3ef 8305 	mrs	r3, IPSR
   225e6:	2b00      	cmp	r3, #0
   225e8:	d1d7      	bne.n	2259a <z_thread_abort+0x3a>
   225ea:	4630      	mov	r0, r6
   225ec:	f7f2 fb1e 	bl	14c2c <arch_swap>
	return ret;
   225f0:	e7d3      	b.n	2259a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   225f2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   225f6:	f043 0308 	orr.w	r3, r3, #8
   225fa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   225fc:	f009 f9db 	bl	2b9b6 <sys_dlist_remove>
}
   22600:	e7d7      	b.n	225b2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   22602:	4628      	mov	r0, r5
   22604:	f009 f9df 	bl	2b9c6 <unpend_thread_no_timeout>
   22608:	f105 0018 	add.w	r0, r5, #24
   2260c:	f009 fae4 	bl	2bbd8 <z_abort_timeout>
   22610:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22614:	4628      	mov	r0, r5
   22616:	f7ff fd99 	bl	2214c <ready_thread>
   2261a:	e7d7      	b.n	225cc <z_thread_abort+0x6c>
   2261c:	20003274 	.word	0x20003274

00022620 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22620:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22622:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22626:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22628:	e9cd 6700 	strd	r6, r7, [sp]
   2262c:	f7ff fe20 	bl	22270 <z_pend_curr>

	if (data != NULL) {
   22630:	b11c      	cbz	r4, 2263a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22632:	4b03      	ldr	r3, [pc, #12]	; (22640 <z_sched_wait+0x20>)
   22634:	689b      	ldr	r3, [r3, #8]
   22636:	695b      	ldr	r3, [r3, #20]
   22638:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2263a:	b002      	add	sp, #8
   2263c:	bdd0      	pop	{r4, r6, r7, pc}
   2263e:	bf00      	nop
   22640:	20003274 	.word	0x20003274

00022644 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22644:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22646:	4806      	ldr	r0, [pc, #24]	; (22660 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22648:	4a06      	ldr	r2, [pc, #24]	; (22664 <z_data_copy+0x20>)
   2264a:	4907      	ldr	r1, [pc, #28]	; (22668 <z_data_copy+0x24>)
   2264c:	1a12      	subs	r2, r2, r0
   2264e:	f008 ff04 	bl	2b45a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22656:	4a05      	ldr	r2, [pc, #20]	; (2266c <z_data_copy+0x28>)
   22658:	4905      	ldr	r1, [pc, #20]	; (22670 <z_data_copy+0x2c>)
   2265a:	4806      	ldr	r0, [pc, #24]	; (22674 <z_data_copy+0x30>)
   2265c:	f008 befd 	b.w	2b45a <z_early_memcpy>
   22660:	20000000 	.word	0x20000000
   22664:	20000d08 	.word	0x20000d08
   22668:	000300e4 	.word	0x000300e4
   2266c:	00000000 	.word	0x00000000
   22670:	000300e4 	.word	0x000300e4
   22674:	20000000 	.word	0x20000000

00022678 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22678:	4b03      	ldr	r3, [pc, #12]	; (22688 <elapsed+0x10>)
   2267a:	681b      	ldr	r3, [r3, #0]
   2267c:	b90b      	cbnz	r3, 22682 <elapsed+0xa>
   2267e:	f7fc bebd 	b.w	1f3fc <sys_clock_elapsed>
}
   22682:	2000      	movs	r0, #0
   22684:	4770      	bx	lr
   22686:	bf00      	nop
   22688:	200032b0 	.word	0x200032b0

0002268c <next_timeout>:
	return list->head == list;
   2268c:	4b10      	ldr	r3, [pc, #64]	; (226d0 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   2268e:	b510      	push	{r4, lr}
   22690:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22692:	429c      	cmp	r4, r3
   22694:	bf08      	it	eq
   22696:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22698:	f7ff ffee 	bl	22678 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2269c:	b1a4      	cbz	r4, 226c8 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2269e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   226a2:	1a1b      	subs	r3, r3, r0
   226a4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   226a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   226ac:	f170 0200 	sbcs.w	r2, r0, #0
   226b0:	da0a      	bge.n	226c8 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   226b2:	2800      	cmp	r0, #0
   226b4:	bfac      	ite	ge
   226b6:	4618      	movge	r0, r3
   226b8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   226ba:	4b06      	ldr	r3, [pc, #24]	; (226d4 <next_timeout+0x48>)
   226bc:	691b      	ldr	r3, [r3, #16]
   226be:	b113      	cbz	r3, 226c6 <next_timeout+0x3a>
   226c0:	4298      	cmp	r0, r3
   226c2:	bfa8      	it	ge
   226c4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   226c6:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   226c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   226cc:	e7f5      	b.n	226ba <next_timeout+0x2e>
   226ce:	bf00      	nop
   226d0:	20000844 	.word	0x20000844
   226d4:	20003274 	.word	0x20003274

000226d8 <remove_timeout>:
{
   226d8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   226da:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   226dc:	b168      	cbz	r0, 226fa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   226de:	4a0a      	ldr	r2, [pc, #40]	; (22708 <remove_timeout+0x30>)
   226e0:	6852      	ldr	r2, [r2, #4]
   226e2:	4290      	cmp	r0, r2
   226e4:	d009      	beq.n	226fa <remove_timeout+0x22>
	if (next(t) != NULL) {
   226e6:	b143      	cbz	r3, 226fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   226e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   226ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   226f0:	1912      	adds	r2, r2, r4
   226f2:	eb41 0105 	adc.w	r1, r1, r5
   226f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   226fa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   226fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   226fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22700:	2300      	movs	r3, #0
	node->prev = NULL;
   22702:	e9c0 3300 	strd	r3, r3, [r0]
}
   22706:	bd30      	pop	{r4, r5, pc}
   22708:	20000844 	.word	0x20000844

0002270c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2270c:	f1b3 3fff 	cmp.w	r3, #4294967295
   22710:	bf08      	it	eq
   22712:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22718:	4604      	mov	r4, r0
   2271a:	461f      	mov	r7, r3
   2271c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2271e:	d067      	beq.n	227f0 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22720:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22722:	f04f 0340 	mov.w	r3, #64	; 0x40
   22726:	f3ef 8611 	mrs	r6, BASEPRI
   2272a:	f383 8812 	msr	BASEPRI_MAX, r3
   2272e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22732:	f06f 0201 	mvn.w	r2, #1
   22736:	1b53      	subs	r3, r2, r5
   22738:	f04f 3cff 	mov.w	ip, #4294967295
   2273c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22740:	2b00      	cmp	r3, #0
   22742:	db1b      	blt.n	2277c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22744:	4b2b      	ldr	r3, [pc, #172]	; (227f4 <z_add_timeout+0xe8>)
   22746:	e9d3 1300 	ldrd	r1, r3, [r3]
   2274a:	1a52      	subs	r2, r2, r1
   2274c:	eb6c 0303 	sbc.w	r3, ip, r3
   22750:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   22752:	eb63 0307 	sbc.w	r3, r3, r7
   22756:	2d01      	cmp	r5, #1
   22758:	f173 0200 	sbcs.w	r2, r3, #0
   2275c:	bfbc      	itt	lt
   2275e:	2501      	movlt	r5, #1
   22760:	2300      	movlt	r3, #0
   22762:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   22766:	4824      	ldr	r0, [pc, #144]	; (227f8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   22768:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2276c:	4283      	cmp	r3, r0
   2276e:	d118      	bne.n	227a2 <z_add_timeout+0x96>
	node->prev = tail;
   22770:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   22774:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22778:	6044      	str	r4, [r0, #4]
}
   2277a:	e026      	b.n	227ca <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2277c:	f7ff ff7c 	bl	22678 <elapsed>
   22780:	3501      	adds	r5, #1
   22782:	f147 0700 	adc.w	r7, r7, #0
   22786:	182d      	adds	r5, r5, r0
   22788:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   2278c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   22790:	e7e9      	b.n	22766 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   22792:	1a52      	subs	r2, r2, r1
   22794:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   22798:	459c      	cmp	ip, r3
   2279a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2279e:	d0e7      	beq.n	22770 <z_add_timeout+0x64>
   227a0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   227a2:	2b00      	cmp	r3, #0
   227a4:	d0e4      	beq.n	22770 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   227a6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   227aa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   227ae:	428a      	cmp	r2, r1
   227b0:	eb75 0e07 	sbcs.w	lr, r5, r7
   227b4:	daed      	bge.n	22792 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   227b6:	1a8a      	subs	r2, r1, r2
   227b8:	eb67 0505 	sbc.w	r5, r7, r5
   227bc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   227c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   227c2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   227c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   227c8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   227ca:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227cc:	4283      	cmp	r3, r0
   227ce:	d00b      	beq.n	227e8 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   227d0:	429c      	cmp	r4, r3
   227d2:	d109      	bne.n	227e8 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   227d4:	f7ff ff5a 	bl	2268c <next_timeout>

			if (next_time == 0 ||
   227d8:	b118      	cbz	r0, 227e2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   227da:	4b08      	ldr	r3, [pc, #32]	; (227fc <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   227dc:	691b      	ldr	r3, [r3, #16]
   227de:	4283      	cmp	r3, r0
   227e0:	d002      	beq.n	227e8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   227e2:	2100      	movs	r1, #0
   227e4:	f7fc fdd8 	bl	1f398 <sys_clock_set_timeout>
	__asm__ volatile(
   227e8:	f386 8811 	msr	BASEPRI, r6
   227ec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   227f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227f2:	bf00      	nop
   227f4:	20002618 	.word	0x20002618
   227f8:	20000844 	.word	0x20000844
   227fc:	20003274 	.word	0x20003274

00022800 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22804:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22806:	f7ff fc5f 	bl	220c8 <z_time_slice>
	__asm__ volatile(
   2280a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2280e:	f3ef 8511 	mrs	r5, BASEPRI
   22812:	f383 8812 	msr	BASEPRI_MAX, r3
   22816:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2281a:	4f24      	ldr	r7, [pc, #144]	; (228ac <sys_clock_announce+0xac>)
	return list->head == list;
   2281c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 228b0 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22820:	4e24      	ldr	r6, [pc, #144]	; (228b4 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   22822:	603c      	str	r4, [r7, #0]
   22824:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22828:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2282a:	4540      	cmp	r0, r8
		curr_tick += dt;
   2282c:	e9d6 2e00 	ldrd	r2, lr, [r6]
   22830:	ea4f 71e3 	mov.w	r1, r3, asr #31
   22834:	d00b      	beq.n	2284e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22836:	b150      	cbz	r0, 2284e <sys_clock_announce+0x4e>
   22838:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   2283c:	42a3      	cmp	r3, r4
   2283e:	eb71 090c 	sbcs.w	r9, r1, ip
   22842:	da16      	bge.n	22872 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22844:	1ae4      	subs	r4, r4, r3
   22846:	eb6c 0c01 	sbc.w	ip, ip, r1
   2284a:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2284e:	189b      	adds	r3, r3, r2
   22850:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   22854:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22856:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   2285a:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2285c:	f7ff ff16 	bl	2268c <next_timeout>
   22860:	4621      	mov	r1, r4
   22862:	f7fc fd99 	bl	1f398 <sys_clock_set_timeout>
	__asm__ volatile(
   22866:	f385 8811 	msr	BASEPRI, r5
   2286a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2286e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22872:	18a2      	adds	r2, r4, r2
   22874:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
   22878:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   2287c:	2300      	movs	r3, #0
   2287e:	2200      	movs	r2, #0
   22880:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   22884:	f7ff ff28 	bl	226d8 <remove_timeout>
   22888:	f385 8811 	msr	BASEPRI, r5
   2288c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22890:	6883      	ldr	r3, [r0, #8]
   22892:	4798      	blx	r3
	__asm__ volatile(
   22894:	f04f 0340 	mov.w	r3, #64	; 0x40
   22898:	f3ef 8511 	mrs	r5, BASEPRI
   2289c:	f383 8812 	msr	BASEPRI_MAX, r3
   228a0:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   228a4:	683b      	ldr	r3, [r7, #0]
   228a6:	1b1b      	subs	r3, r3, r4
   228a8:	603b      	str	r3, [r7, #0]
   228aa:	e7bb      	b.n	22824 <sys_clock_announce+0x24>
   228ac:	200032b0 	.word	0x200032b0
   228b0:	20000844 	.word	0x20000844
   228b4:	20002618 	.word	0x20002618

000228b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   228b8:	b510      	push	{r4, lr}
   228ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   228be:	f3ef 8411 	mrs	r4, BASEPRI
   228c2:	f383 8812 	msr	BASEPRI_MAX, r3
   228c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   228ca:	f7ff fed5 	bl	22678 <elapsed>
   228ce:	4b06      	ldr	r3, [pc, #24]	; (228e8 <sys_clock_tick_get+0x30>)
   228d0:	4601      	mov	r1, r0
   228d2:	e9d3 0300 	ldrd	r0, r3, [r3]
   228d6:	1808      	adds	r0, r1, r0
   228d8:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   228dc:	f384 8811 	msr	BASEPRI, r4
   228e0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   228e4:	bd10      	pop	{r4, pc}
   228e6:	bf00      	nop
   228e8:	20002618 	.word	0x20002618

000228ec <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   228ec:	b570      	push	{r4, r5, r6, lr}
   228ee:	4604      	mov	r4, r0
	__asm__ volatile(
   228f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   228f4:	f3ef 8511 	mrs	r5, BASEPRI
   228f8:	f383 8812 	msr	BASEPRI_MAX, r3
   228fc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22900:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   22904:	3301      	adds	r3, #1
   22906:	f142 0200 	adc.w	r2, r2, #0
   2290a:	2b02      	cmp	r3, #2
   2290c:	f172 0300 	sbcs.w	r3, r2, #0
   22910:	d322      	bcc.n	22958 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   22912:	f009 f9a5 	bl	2bc60 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22916:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2291a:	3001      	adds	r0, #1
   2291c:	f141 0100 	adc.w	r1, r1, #0
   22920:	18c0      	adds	r0, r0, r3
   22922:	eb41 0102 	adc.w	r1, r1, r2
   22926:	2801      	cmp	r0, #1
   22928:	f171 0300 	sbcs.w	r3, r1, #0
   2292c:	db32      	blt.n	22994 <z_timer_expiration_handler+0xa8>
   2292e:	f009 f997 	bl	2bc60 <z_impl_k_uptime_ticks>
   22932:	3001      	adds	r0, #1
   22934:	f141 0300 	adc.w	r3, r1, #0
   22938:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2293c:	1880      	adds	r0, r0, r2
   2293e:	f06f 0201 	mvn.w	r2, #1
   22942:	eb43 0301 	adc.w	r3, r3, r1
   22946:	1a12      	subs	r2, r2, r0
   22948:	f04f 31ff 	mov.w	r1, #4294967295
   2294c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22950:	491a      	ldr	r1, [pc, #104]	; (229bc <z_timer_expiration_handler+0xd0>)
   22952:	4620      	mov	r0, r4
   22954:	f7ff feda 	bl	2270c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   22958:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2295a:	3301      	adds	r3, #1
   2295c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2295e:	6a23      	ldr	r3, [r4, #32]
   22960:	b173      	cbz	r3, 22980 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   22962:	f385 8811 	msr	BASEPRI, r5
   22966:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2296a:	6a23      	ldr	r3, [r4, #32]
   2296c:	4620      	mov	r0, r4
   2296e:	4798      	blx	r3
	__asm__ volatile(
   22970:	f04f 0340 	mov.w	r3, #64	; 0x40
   22974:	f3ef 8511 	mrs	r5, BASEPRI
   22978:	f383 8812 	msr	BASEPRI_MAX, r3
   2297c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   22980:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22984:	42a6      	cmp	r6, r4
   22986:	d000      	beq.n	2298a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22988:	b94e      	cbnz	r6, 2299e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   2298a:	f385 8811 	msr	BASEPRI, r5
   2298e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   22992:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22994:	f06f 0201 	mvn.w	r2, #1
   22998:	f04f 33ff 	mov.w	r3, #4294967295
   2299c:	e7d8      	b.n	22950 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   2299e:	4630      	mov	r0, r6
   229a0:	f009 f824 	bl	2b9ec <z_unpend_thread_no_timeout>
   229a4:	2300      	movs	r3, #0
   229a6:	67f3      	str	r3, [r6, #124]	; 0x7c
   229a8:	f385 8811 	msr	BASEPRI, r5
   229ac:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   229b0:	4630      	mov	r0, r6
}
   229b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   229b6:	f009 b859 	b.w	2ba6c <z_ready_thread>
   229ba:	bf00      	nop
   229bc:	000228ed 	.word	0x000228ed

000229c0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   229c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   229c4:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   229c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   229ca:	bf08      	it	eq
   229cc:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   229d0:	4606      	mov	r6, r0
   229d2:	461c      	mov	r4, r3
   229d4:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   229d8:	4689      	mov	r9, r1
   229da:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   229dc:	d03e      	beq.n	22a5c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   229de:	f1b0 3fff 	cmp.w	r0, #4294967295
   229e2:	bf08      	it	eq
   229e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   229e8:	4615      	mov	r5, r2
   229ea:	4607      	mov	r7, r0
   229ec:	d014      	beq.n	22a18 <z_impl_k_timer_start+0x58>
   229ee:	ea50 0302 	orrs.w	r3, r0, r2
   229f2:	d011      	beq.n	22a18 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   229f4:	f06f 0301 	mvn.w	r3, #1
   229f8:	1a9b      	subs	r3, r3, r2
   229fa:	f04f 33ff 	mov.w	r3, #4294967295
   229fe:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22a02:	2b00      	cmp	r3, #0
   22a04:	da08      	bge.n	22a18 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   22a06:	2a02      	cmp	r2, #2
   22a08:	f170 0300 	sbcs.w	r3, r0, #0
   22a0c:	bfbc      	itt	lt
   22a0e:	2502      	movlt	r5, #2
   22a10:	2700      	movlt	r7, #0
   22a12:	3d01      	subs	r5, #1
   22a14:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22a18:	f06f 0301 	mvn.w	r3, #1
   22a1c:	1a5b      	subs	r3, r3, r1
   22a1e:	f04f 33ff 	mov.w	r3, #4294967295
   22a22:	eb63 0304 	sbc.w	r3, r3, r4
   22a26:	2b00      	cmp	r3, #0
   22a28:	da09      	bge.n	22a3e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22a2a:	2901      	cmp	r1, #1
   22a2c:	f174 0300 	sbcs.w	r3, r4, #0
   22a30:	bfbc      	itt	lt
   22a32:	2101      	movlt	r1, #1
   22a34:	2400      	movlt	r4, #0
   22a36:	f111 39ff 	adds.w	r9, r1, #4294967295
   22a3a:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   22a3e:	4630      	mov	r0, r6
   22a40:	f009 f8ca 	bl	2bbd8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   22a44:	2300      	movs	r3, #0
   22a46:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   22a48:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22a4c:	464a      	mov	r2, r9
   22a4e:	4643      	mov	r3, r8
   22a50:	4630      	mov	r0, r6
   22a52:	4903      	ldr	r1, [pc, #12]	; (22a60 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   22a54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22a58:	f7ff be58 	b.w	2270c <z_add_timeout>
}
   22a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22a60:	000228ed 	.word	0x000228ed

00022a64 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22a64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22a68:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22a6a:	4b29      	ldr	r3, [pc, #164]	; (22b10 <z_impl_k_poll+0xac>)
   22a6c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   22a6e:	2301      	movs	r3, #1
   22a70:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   22a74:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22a78:	ea52 0305 	orrs.w	r3, r2, r5
{
   22a7c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   22a7e:	bf0c      	ite	eq
   22a80:	2301      	moveq	r3, #1
   22a82:	2300      	movne	r3, #0
   22a84:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   22a88:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   22a8a:	f009 f972 	bl	2bd72 <register_events>
   22a8e:	4681      	mov	r9, r0
	__asm__ volatile(
   22a90:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a94:	f3ef 8a11 	mrs	sl, BASEPRI
   22a98:	f383 8812 	msr	BASEPRI_MAX, r3
   22a9c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22aa0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   22aa4:	b964      	cbnz	r4, 22ac0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   22aa6:	4601      	mov	r1, r0
   22aa8:	4652      	mov	r2, sl
   22aaa:	4640      	mov	r0, r8
   22aac:	f009 fa32 	bl	2bf14 <clear_event_registrations>
	__asm__ volatile(
   22ab0:	f38a 8811 	msr	BASEPRI, sl
   22ab4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22ab8:	4620      	mov	r0, r4
   22aba:	b002      	add	sp, #8
   22abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   22ac0:	2300      	movs	r3, #0
   22ac2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22ac6:	ea56 0305 	orrs.w	r3, r6, r5
   22aca:	d106      	bne.n	22ada <z_impl_k_poll+0x76>
   22acc:	f38a 8811 	msr	BASEPRI, sl
   22ad0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22ad4:	f06f 040a 	mvn.w	r4, #10
   22ad8:	e7ee      	b.n	22ab8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22ada:	e9cd 6500 	strd	r6, r5, [sp]
   22ade:	4a0d      	ldr	r2, [pc, #52]	; (22b14 <z_impl_k_poll+0xb0>)
   22ae0:	480d      	ldr	r0, [pc, #52]	; (22b18 <z_impl_k_poll+0xb4>)
   22ae2:	4651      	mov	r1, sl
   22ae4:	f7ff fbc4 	bl	22270 <z_pend_curr>
   22ae8:	4604      	mov	r4, r0
	__asm__ volatile(
   22aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   22aee:	f3ef 8511 	mrs	r5, BASEPRI
   22af2:	f383 8812 	msr	BASEPRI_MAX, r3
   22af6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   22afa:	462a      	mov	r2, r5
   22afc:	4649      	mov	r1, r9
   22afe:	4640      	mov	r0, r8
   22b00:	f009 fa08 	bl	2bf14 <clear_event_registrations>
	__asm__ volatile(
   22b04:	f385 8811 	msr	BASEPRI, r5
   22b08:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22b0c:	e7d4      	b.n	22ab8 <z_impl_k_poll+0x54>
   22b0e:	bf00      	nop
   22b10:	20003274 	.word	0x20003274
   22b14:	2000084c 	.word	0x2000084c
   22b18:	20004ac4 	.word	0x20004ac4

00022b1c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22b1c:	b538      	push	{r3, r4, r5, lr}
   22b1e:	4603      	mov	r3, r0
	__asm__ volatile(
   22b20:	f04f 0240 	mov.w	r2, #64	; 0x40
   22b24:	f3ef 8511 	mrs	r5, BASEPRI
   22b28:	f382 8812 	msr	BASEPRI_MAX, r2
   22b2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22b30:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   22b32:	2101      	movs	r1, #1
   22b34:	6081      	str	r1, [r0, #8]
	return list->head == list;
   22b36:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22b38:	4283      	cmp	r3, r0
   22b3a:	d106      	bne.n	22b4a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   22b3c:	f385 8811 	msr	BASEPRI, r5
   22b40:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   22b44:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   22b46:	4620      	mov	r0, r4
   22b48:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   22b4a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22b4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22b50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22b52:	2300      	movs	r3, #0
	node->prev = NULL;
   22b54:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22b58:	f009 f982 	bl	2be60 <signal_poll_event>
	z_reschedule(&lock, key);
   22b5c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22b5e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22b60:	4801      	ldr	r0, [pc, #4]	; (22b68 <z_impl_k_poll_signal_raise+0x4c>)
   22b62:	f7ff fa31 	bl	21fc8 <z_reschedule>
	return rc;
   22b66:	e7ee      	b.n	22b46 <z_impl_k_poll_signal_raise+0x2a>
   22b68:	20004ac4 	.word	0x20004ac4

00022b6c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22b6e:	4606      	mov	r6, r0
   22b70:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22b72:	f008 fd1e 	bl	2b5b2 <k_is_in_isr>
   22b76:	b978      	cbnz	r0, 22b98 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22b78:	4b0b      	ldr	r3, [pc, #44]	; (22ba8 <z_thread_aligned_alloc+0x3c>)
   22b7a:	689b      	ldr	r3, [r3, #8]
   22b7c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22b7e:	b17c      	cbz	r4, 22ba0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22b80:	1d2a      	adds	r2, r5, #4
   22b82:	d209      	bcs.n	22b98 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22b84:	2000      	movs	r0, #0
   22b86:	2100      	movs	r1, #0
   22b88:	e9cd 0100 	strd	r0, r1, [sp]
   22b8c:	f046 0104 	orr.w	r1, r6, #4
   22b90:	4620      	mov	r0, r4
   22b92:	f008 fc6c 	bl	2b46e <k_heap_aligned_alloc>
	if (mem == NULL) {
   22b96:	b908      	cbnz	r0, 22b9c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22b98:	2400      	movs	r4, #0
	}

	return ret;
   22b9a:	e001      	b.n	22ba0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   22b9c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   22b9e:	1d04      	adds	r4, r0, #4
}
   22ba0:	4620      	mov	r0, r4
   22ba2:	b002      	add	sp, #8
   22ba4:	bd70      	pop	{r4, r5, r6, pc}
   22ba6:	bf00      	nop
   22ba8:	20003274 	.word	0x20003274

00022bac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   22bac:	4a02      	ldr	r2, [pc, #8]	; (22bb8 <boot_banner+0xc>)
   22bae:	4903      	ldr	r1, [pc, #12]	; (22bbc <boot_banner+0x10>)
   22bb0:	4803      	ldr	r0, [pc, #12]	; (22bc0 <boot_banner+0x14>)
   22bb2:	f004 bda3 	b.w	276fc <printk>
   22bb6:	bf00      	nop
   22bb8:	0002d81a 	.word	0x0002d81a
   22bbc:	0002ff77 	.word	0x0002ff77
   22bc0:	0002ff86 	.word	0x0002ff86

00022bc4 <ocrypto_ecdh_p256_public_key>:
   22bc4:	b530      	push	{r4, r5, lr}
   22bc6:	b099      	sub	sp, #100	; 0x64
   22bc8:	4605      	mov	r5, r0
   22bca:	4668      	mov	r0, sp
   22bcc:	f000 f828 	bl	22c20 <ocrypto_sc_p256_from32bytes>
   22bd0:	4669      	mov	r1, sp
   22bd2:	4604      	mov	r4, r0
   22bd4:	a808      	add	r0, sp, #32
   22bd6:	f000 fa53 	bl	23080 <ocrypto_curve_p256_scalarmult_base>
   22bda:	a908      	add	r1, sp, #32
   22bdc:	4304      	orrs	r4, r0
   22bde:	4628      	mov	r0, r5
   22be0:	f000 f98a 	bl	22ef8 <ocrypto_curve_p256_to64bytes>
   22be4:	4620      	mov	r0, r4
   22be6:	b019      	add	sp, #100	; 0x64
   22be8:	bd30      	pop	{r4, r5, pc}
   22bea:	bf00      	nop

00022bec <ocrypto_ecdh_p256_common_secret>:
   22bec:	b570      	push	{r4, r5, r6, lr}
   22bee:	b098      	sub	sp, #96	; 0x60
   22bf0:	4605      	mov	r5, r0
   22bf2:	4668      	mov	r0, sp
   22bf4:	4616      	mov	r6, r2
   22bf6:	f000 f813 	bl	22c20 <ocrypto_sc_p256_from32bytes>
   22bfa:	4631      	mov	r1, r6
   22bfc:	4604      	mov	r4, r0
   22bfe:	a808      	add	r0, sp, #32
   22c00:	f000 f946 	bl	22e90 <ocrypto_curve_p256_from64bytes>
   22c04:	a908      	add	r1, sp, #32
   22c06:	466a      	mov	r2, sp
   22c08:	4304      	orrs	r4, r0
   22c0a:	4608      	mov	r0, r1
   22c0c:	f000 f982 	bl	22f14 <ocrypto_curve_p256_scalarmult>
   22c10:	a908      	add	r1, sp, #32
   22c12:	4304      	orrs	r4, r0
   22c14:	4628      	mov	r0, r5
   22c16:	f000 f96d 	bl	22ef4 <ocrypto_curve_p256_to32bytes>
   22c1a:	4620      	mov	r0, r4
   22c1c:	b018      	add	sp, #96	; 0x60
   22c1e:	bd70      	pop	{r4, r5, r6, pc}

00022c20 <ocrypto_sc_p256_from32bytes>:
   22c20:	b570      	push	{r4, r5, r6, lr}
   22c22:	680b      	ldr	r3, [r1, #0]
   22c24:	4e12      	ldr	r6, [pc, #72]	; (22c70 <ocrypto_sc_p256_from32bytes+0x50>)
   22c26:	ba1b      	rev	r3, r3
   22c28:	61c3      	str	r3, [r0, #28]
   22c2a:	684b      	ldr	r3, [r1, #4]
   22c2c:	ba1b      	rev	r3, r3
   22c2e:	6183      	str	r3, [r0, #24]
   22c30:	688b      	ldr	r3, [r1, #8]
   22c32:	ba1b      	rev	r3, r3
   22c34:	6143      	str	r3, [r0, #20]
   22c36:	68cb      	ldr	r3, [r1, #12]
   22c38:	ba1b      	rev	r3, r3
   22c3a:	6103      	str	r3, [r0, #16]
   22c3c:	690b      	ldr	r3, [r1, #16]
   22c3e:	ba1b      	rev	r3, r3
   22c40:	60c3      	str	r3, [r0, #12]
   22c42:	694b      	ldr	r3, [r1, #20]
   22c44:	ba1b      	rev	r3, r3
   22c46:	6083      	str	r3, [r0, #8]
   22c48:	698b      	ldr	r3, [r1, #24]
   22c4a:	ba1b      	rev	r3, r3
   22c4c:	6043      	str	r3, [r0, #4]
   22c4e:	69cb      	ldr	r3, [r1, #28]
   22c50:	ba1b      	rev	r3, r3
   22c52:	4632      	mov	r2, r6
   22c54:	6003      	str	r3, [r0, #0]
   22c56:	4601      	mov	r1, r0
   22c58:	4604      	mov	r4, r0
   22c5a:	f7dd fdf5 	bl	848 <ocrypto_bigint_sub256>
   22c5e:	4631      	mov	r1, r6
   22c60:	4605      	mov	r5, r0
   22c62:	4602      	mov	r2, r0
   22c64:	4620      	mov	r0, r4
   22c66:	f7dd fe0f 	bl	888 <ocrypto_bigint_cadd256>
   22c6a:	1e68      	subs	r0, r5, #1
   22c6c:	bd70      	pop	{r4, r5, r6, pc}
   22c6e:	bf00      	nop
   22c70:	0002d478 	.word	0x0002d478

00022c74 <p256_zdblu>:
   22c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c78:	b088      	sub	sp, #32
   22c7a:	460c      	mov	r4, r1
   22c7c:	4606      	mov	r6, r0
   22c7e:	f102 0120 	add.w	r1, r2, #32
   22c82:	4668      	mov	r0, sp
   22c84:	f106 0720 	add.w	r7, r6, #32
   22c88:	4690      	mov	r8, r2
   22c8a:	f7de f8e7 	bl	e5c <ocrypto_mod_p256_sqr>
   22c8e:	466a      	mov	r2, sp
   22c90:	4669      	mov	r1, sp
   22c92:	4668      	mov	r0, sp
   22c94:	f7dd fff4 	bl	c80 <ocrypto_mod_p256_add>
   22c98:	4669      	mov	r1, sp
   22c9a:	4638      	mov	r0, r7
   22c9c:	f7de f8de 	bl	e5c <ocrypto_mod_p256_sqr>
   22ca0:	463a      	mov	r2, r7
   22ca2:	4639      	mov	r1, r7
   22ca4:	4638      	mov	r0, r7
   22ca6:	f104 0520 	add.w	r5, r4, #32
   22caa:	f7dd ffe9 	bl	c80 <ocrypto_mod_p256_add>
   22cae:	466a      	mov	r2, sp
   22cb0:	4669      	mov	r1, sp
   22cb2:	4668      	mov	r0, sp
   22cb4:	f7dd ffe4 	bl	c80 <ocrypto_mod_p256_add>
   22cb8:	4641      	mov	r1, r8
   22cba:	4628      	mov	r0, r5
   22cbc:	f7de f8ce 	bl	e5c <ocrypto_mod_p256_sqr>
   22cc0:	466a      	mov	r2, sp
   22cc2:	4641      	mov	r1, r8
   22cc4:	4630      	mov	r0, r6
   22cc6:	f7de f8b1 	bl	e2c <ocrypto_mod_p256_mul>
   22cca:	462a      	mov	r2, r5
   22ccc:	4629      	mov	r1, r5
   22cce:	4668      	mov	r0, sp
   22cd0:	f7dd ffd6 	bl	c80 <ocrypto_mod_p256_add>
   22cd4:	462a      	mov	r2, r5
   22cd6:	4669      	mov	r1, sp
   22cd8:	4668      	mov	r0, sp
   22cda:	f7dd ffd1 	bl	c80 <ocrypto_mod_p256_add>
   22cde:	4a12      	ldr	r2, [pc, #72]	; (22d28 <p256_zdblu+0xb4>)
   22ce0:	4669      	mov	r1, sp
   22ce2:	4668      	mov	r0, sp
   22ce4:	f7dd ffcc 	bl	c80 <ocrypto_mod_p256_add>
   22ce8:	4669      	mov	r1, sp
   22cea:	4620      	mov	r0, r4
   22cec:	f7de f8b6 	bl	e5c <ocrypto_mod_p256_sqr>
   22cf0:	4632      	mov	r2, r6
   22cf2:	4621      	mov	r1, r4
   22cf4:	4620      	mov	r0, r4
   22cf6:	f7de f801 	bl	cfc <ocrypto_mod_p256_sub>
   22cfa:	4632      	mov	r2, r6
   22cfc:	4621      	mov	r1, r4
   22cfe:	4620      	mov	r0, r4
   22d00:	f7dd fffc 	bl	cfc <ocrypto_mod_p256_sub>
   22d04:	4622      	mov	r2, r4
   22d06:	4631      	mov	r1, r6
   22d08:	4628      	mov	r0, r5
   22d0a:	f7dd fff7 	bl	cfc <ocrypto_mod_p256_sub>
   22d0e:	466a      	mov	r2, sp
   22d10:	4629      	mov	r1, r5
   22d12:	4628      	mov	r0, r5
   22d14:	f7de f88a 	bl	e2c <ocrypto_mod_p256_mul>
   22d18:	463a      	mov	r2, r7
   22d1a:	4629      	mov	r1, r5
   22d1c:	4628      	mov	r0, r5
   22d1e:	f7dd ffed 	bl	cfc <ocrypto_mod_p256_sub>
   22d22:	b008      	add	sp, #32
   22d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d28:	0002d518 	.word	0x0002d518

00022d2c <p256_zaddc>:
   22d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d2e:	b099      	sub	sp, #100	; 0x64
   22d30:	4604      	mov	r4, r0
   22d32:	460d      	mov	r5, r1
   22d34:	460a      	mov	r2, r1
   22d36:	4601      	mov	r1, r0
   22d38:	4668      	mov	r0, sp
   22d3a:	f7dd ffdf 	bl	cfc <ocrypto_mod_p256_sub>
   22d3e:	4669      	mov	r1, sp
   22d40:	4668      	mov	r0, sp
   22d42:	f7de f88b 	bl	e5c <ocrypto_mod_p256_sqr>
   22d46:	466a      	mov	r2, sp
   22d48:	4621      	mov	r1, r4
   22d4a:	a808      	add	r0, sp, #32
   22d4c:	f105 0620 	add.w	r6, r5, #32
   22d50:	f104 0720 	add.w	r7, r4, #32
   22d54:	f7de f86a 	bl	e2c <ocrypto_mod_p256_mul>
   22d58:	466a      	mov	r2, sp
   22d5a:	4629      	mov	r1, r5
   22d5c:	4668      	mov	r0, sp
   22d5e:	f7de f865 	bl	e2c <ocrypto_mod_p256_mul>
   22d62:	4632      	mov	r2, r6
   22d64:	4639      	mov	r1, r7
   22d66:	a810      	add	r0, sp, #64	; 0x40
   22d68:	f7dd ff8a 	bl	c80 <ocrypto_mod_p256_add>
   22d6c:	4632      	mov	r2, r6
   22d6e:	4639      	mov	r1, r7
   22d70:	4630      	mov	r0, r6
   22d72:	f7dd ffc3 	bl	cfc <ocrypto_mod_p256_sub>
   22d76:	4631      	mov	r1, r6
   22d78:	4628      	mov	r0, r5
   22d7a:	f7de f86f 	bl	e5c <ocrypto_mod_p256_sqr>
   22d7e:	466a      	mov	r2, sp
   22d80:	a908      	add	r1, sp, #32
   22d82:	4620      	mov	r0, r4
   22d84:	f7dd ff7c 	bl	c80 <ocrypto_mod_p256_add>
   22d88:	4622      	mov	r2, r4
   22d8a:	4629      	mov	r1, r5
   22d8c:	4628      	mov	r0, r5
   22d8e:	f7dd ffb5 	bl	cfc <ocrypto_mod_p256_sub>
   22d92:	466a      	mov	r2, sp
   22d94:	a908      	add	r1, sp, #32
   22d96:	4668      	mov	r0, sp
   22d98:	f7dd ffb0 	bl	cfc <ocrypto_mod_p256_sub>
   22d9c:	466a      	mov	r2, sp
   22d9e:	4639      	mov	r1, r7
   22da0:	4638      	mov	r0, r7
   22da2:	f7de f843 	bl	e2c <ocrypto_mod_p256_mul>
   22da6:	462a      	mov	r2, r5
   22da8:	a908      	add	r1, sp, #32
   22daa:	4668      	mov	r0, sp
   22dac:	f7dd ffa6 	bl	cfc <ocrypto_mod_p256_sub>
   22db0:	466a      	mov	r2, sp
   22db2:	4631      	mov	r1, r6
   22db4:	4630      	mov	r0, r6
   22db6:	f7de f839 	bl	e2c <ocrypto_mod_p256_mul>
   22dba:	463a      	mov	r2, r7
   22dbc:	4631      	mov	r1, r6
   22dbe:	4630      	mov	r0, r6
   22dc0:	f7dd ff9c 	bl	cfc <ocrypto_mod_p256_sub>
   22dc4:	a910      	add	r1, sp, #64	; 0x40
   22dc6:	4668      	mov	r0, sp
   22dc8:	f7de f848 	bl	e5c <ocrypto_mod_p256_sqr>
   22dcc:	4622      	mov	r2, r4
   22dce:	4669      	mov	r1, sp
   22dd0:	4620      	mov	r0, r4
   22dd2:	f7dd ff93 	bl	cfc <ocrypto_mod_p256_sub>
   22dd6:	a908      	add	r1, sp, #32
   22dd8:	4622      	mov	r2, r4
   22dda:	4608      	mov	r0, r1
   22ddc:	f7dd ff8e 	bl	cfc <ocrypto_mod_p256_sub>
   22de0:	a910      	add	r1, sp, #64	; 0x40
   22de2:	aa08      	add	r2, sp, #32
   22de4:	4608      	mov	r0, r1
   22de6:	f7de f821 	bl	e2c <ocrypto_mod_p256_mul>
   22dea:	463a      	mov	r2, r7
   22dec:	a910      	add	r1, sp, #64	; 0x40
   22dee:	4638      	mov	r0, r7
   22df0:	f7dd ff84 	bl	cfc <ocrypto_mod_p256_sub>
   22df4:	b019      	add	sp, #100	; 0x64
   22df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022df8 <p256_zaddu>:
   22df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22dfc:	b088      	sub	sp, #32
   22dfe:	460c      	mov	r4, r1
   22e00:	4605      	mov	r5, r0
   22e02:	4690      	mov	r8, r2
   22e04:	460a      	mov	r2, r1
   22e06:	4601      	mov	r1, r0
   22e08:	4668      	mov	r0, sp
   22e0a:	f7dd ff77 	bl	cfc <ocrypto_mod_p256_sub>
   22e0e:	4669      	mov	r1, sp
   22e10:	4668      	mov	r0, sp
   22e12:	f7de f823 	bl	e5c <ocrypto_mod_p256_sqr>
   22e16:	466a      	mov	r2, sp
   22e18:	4629      	mov	r1, r5
   22e1a:	4628      	mov	r0, r5
   22e1c:	f104 0620 	add.w	r6, r4, #32
   22e20:	f7de f804 	bl	e2c <ocrypto_mod_p256_mul>
   22e24:	f105 0720 	add.w	r7, r5, #32
   22e28:	466a      	mov	r2, sp
   22e2a:	4621      	mov	r1, r4
   22e2c:	4668      	mov	r0, sp
   22e2e:	f7dd fffd 	bl	e2c <ocrypto_mod_p256_mul>
   22e32:	4632      	mov	r2, r6
   22e34:	4639      	mov	r1, r7
   22e36:	4630      	mov	r0, r6
   22e38:	f7dd ff60 	bl	cfc <ocrypto_mod_p256_sub>
   22e3c:	4631      	mov	r1, r6
   22e3e:	4620      	mov	r0, r4
   22e40:	f7de f80c 	bl	e5c <ocrypto_mod_p256_sqr>
   22e44:	462a      	mov	r2, r5
   22e46:	4621      	mov	r1, r4
   22e48:	4620      	mov	r0, r4
   22e4a:	f7dd ff57 	bl	cfc <ocrypto_mod_p256_sub>
   22e4e:	466a      	mov	r2, sp
   22e50:	4621      	mov	r1, r4
   22e52:	4620      	mov	r0, r4
   22e54:	f7dd ff52 	bl	cfc <ocrypto_mod_p256_sub>
   22e58:	466a      	mov	r2, sp
   22e5a:	4629      	mov	r1, r5
   22e5c:	4640      	mov	r0, r8
   22e5e:	f7dd ff4d 	bl	cfc <ocrypto_mod_p256_sub>
   22e62:	4642      	mov	r2, r8
   22e64:	4639      	mov	r1, r7
   22e66:	4638      	mov	r0, r7
   22e68:	f7dd ffe0 	bl	e2c <ocrypto_mod_p256_mul>
   22e6c:	4622      	mov	r2, r4
   22e6e:	4629      	mov	r1, r5
   22e70:	4668      	mov	r0, sp
   22e72:	f7dd ff43 	bl	cfc <ocrypto_mod_p256_sub>
   22e76:	466a      	mov	r2, sp
   22e78:	4631      	mov	r1, r6
   22e7a:	4630      	mov	r0, r6
   22e7c:	f7dd ffd6 	bl	e2c <ocrypto_mod_p256_mul>
   22e80:	463a      	mov	r2, r7
   22e82:	4631      	mov	r1, r6
   22e84:	4630      	mov	r0, r6
   22e86:	f7dd ff39 	bl	cfc <ocrypto_mod_p256_sub>
   22e8a:	b008      	add	sp, #32
   22e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022e90 <ocrypto_curve_p256_from64bytes>:
   22e90:	b570      	push	{r4, r5, r6, lr}
   22e92:	f100 0620 	add.w	r6, r0, #32
   22e96:	b090      	sub	sp, #64	; 0x40
   22e98:	460d      	mov	r5, r1
   22e9a:	4604      	mov	r4, r0
   22e9c:	f000 f914 	bl	230c8 <ocrypto_mod_p256_from_bytes>
   22ea0:	f105 0120 	add.w	r1, r5, #32
   22ea4:	4630      	mov	r0, r6
   22ea6:	f000 f90f 	bl	230c8 <ocrypto_mod_p256_from_bytes>
   22eaa:	4621      	mov	r1, r4
   22eac:	a808      	add	r0, sp, #32
   22eae:	f7dd ffd5 	bl	e5c <ocrypto_mod_p256_sqr>
   22eb2:	a908      	add	r1, sp, #32
   22eb4:	4608      	mov	r0, r1
   22eb6:	4a0d      	ldr	r2, [pc, #52]	; (22eec <ocrypto_curve_p256_from64bytes+0x5c>)
   22eb8:	f7dd fee2 	bl	c80 <ocrypto_mod_p256_add>
   22ebc:	a908      	add	r1, sp, #32
   22ebe:	4622      	mov	r2, r4
   22ec0:	4608      	mov	r0, r1
   22ec2:	f7dd ffb3 	bl	e2c <ocrypto_mod_p256_mul>
   22ec6:	a908      	add	r1, sp, #32
   22ec8:	4a09      	ldr	r2, [pc, #36]	; (22ef0 <ocrypto_curve_p256_from64bytes+0x60>)
   22eca:	4608      	mov	r0, r1
   22ecc:	f7dd fed8 	bl	c80 <ocrypto_mod_p256_add>
   22ed0:	4631      	mov	r1, r6
   22ed2:	4668      	mov	r0, sp
   22ed4:	f7dd ffc2 	bl	e5c <ocrypto_mod_p256_sqr>
   22ed8:	2220      	movs	r2, #32
   22eda:	4669      	mov	r1, sp
   22edc:	eb0d 0002 	add.w	r0, sp, r2
   22ee0:	f7dd fea0 	bl	c24 <ocrypto_constant_time_equal>
   22ee4:	3801      	subs	r0, #1
   22ee6:	b010      	add	sp, #64	; 0x40
   22ee8:	bd70      	pop	{r4, r5, r6, pc}
   22eea:	bf00      	nop
   22eec:	0002d518 	.word	0x0002d518
   22ef0:	0002d538 	.word	0x0002d538

00022ef4 <ocrypto_curve_p256_to32bytes>:
   22ef4:	f000 b902 	b.w	230fc <ocrypto_mod_p256_to_bytes>

00022ef8 <ocrypto_curve_p256_to64bytes>:
   22ef8:	b538      	push	{r3, r4, r5, lr}
   22efa:	4604      	mov	r4, r0
   22efc:	460d      	mov	r5, r1
   22efe:	f000 f8fd 	bl	230fc <ocrypto_mod_p256_to_bytes>
   22f02:	f105 0120 	add.w	r1, r5, #32
   22f06:	f104 0020 	add.w	r0, r4, #32
   22f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22f0e:	f000 b8f5 	b.w	230fc <ocrypto_mod_p256_to_bytes>
   22f12:	bf00      	nop

00022f14 <ocrypto_curve_p256_scalarmult>:
   22f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f18:	4613      	mov	r3, r2
   22f1a:	b0b8      	sub	sp, #224	; 0xe0
   22f1c:	4a54      	ldr	r2, [pc, #336]	; (23070 <ocrypto_curve_p256_scalarmult+0x15c>)
   22f1e:	4689      	mov	r9, r1
   22f20:	4680      	mov	r8, r0
   22f22:	4619      	mov	r1, r3
   22f24:	a810      	add	r0, sp, #64	; 0x40
   22f26:	f7dd fc8f 	bl	848 <ocrypto_bigint_sub256>
   22f2a:	4952      	ldr	r1, [pc, #328]	; (23074 <ocrypto_curve_p256_scalarmult+0x160>)
   22f2c:	4602      	mov	r2, r0
   22f2e:	a810      	add	r0, sp, #64	; 0x40
   22f30:	f7dd fcaa 	bl	888 <ocrypto_bigint_cadd256>
   22f34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   22f36:	494e      	ldr	r1, [pc, #312]	; (23070 <ocrypto_curve_p256_scalarmult+0x15c>)
   22f38:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   22f3c:	4607      	mov	r7, r0
   22f3e:	f1c6 0201 	rsb	r2, r6, #1
   22f42:	a810      	add	r0, sp, #64	; 0x40
   22f44:	f7dd fca0 	bl	888 <ocrypto_bigint_cadd256>
   22f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22f4a:	464a      	mov	r2, r9
   22f4c:	ea6f 0a03 	mvn.w	sl, r3
   22f50:	a928      	add	r1, sp, #160	; 0xa0
   22f52:	a818      	add	r0, sp, #96	; 0x60
   22f54:	f7ff fe8e 	bl	22c74 <p256_zdblu>
   22f58:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   22f5c:	a920      	add	r1, sp, #128	; 0x80
   22f5e:	f1ca 0201 	rsb	r2, sl, #1
   22f62:	4608      	mov	r0, r1
   22f64:	f000 f892 	bl	2308c <ocrypto_mod_p256_cneg>
   22f68:	f1c7 0701 	rsb	r7, r7, #1
   22f6c:	24fe      	movs	r4, #254	; 0xfe
   22f6e:	466a      	mov	r2, sp
   22f70:	a918      	add	r1, sp, #96	; 0x60
   22f72:	a828      	add	r0, sp, #160	; 0xa0
   22f74:	f7ff ff40 	bl	22df8 <p256_zaddu>
   22f78:	1162      	asrs	r2, r4, #5
   22f7a:	ab38      	add	r3, sp, #224	; 0xe0
   22f7c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22f80:	f004 011f 	and.w	r1, r4, #31
   22f84:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   22f88:	40cb      	lsrs	r3, r1
   22f8a:	4655      	mov	r5, sl
   22f8c:	f003 0a01 	and.w	sl, r3, #1
   22f90:	ea8a 0505 	eor.w	r5, sl, r5
   22f94:	462a      	mov	r2, r5
   22f96:	a928      	add	r1, sp, #160	; 0xa0
   22f98:	a818      	add	r0, sp, #96	; 0x60
   22f9a:	f7dd fcd1 	bl	940 <ocrypto_bigint_cswap256>
   22f9e:	462a      	mov	r2, r5
   22fa0:	a930      	add	r1, sp, #192	; 0xc0
   22fa2:	a820      	add	r0, sp, #128	; 0x80
   22fa4:	f7dd fccc 	bl	940 <ocrypto_bigint_cswap256>
   22fa8:	3c01      	subs	r4, #1
   22faa:	a928      	add	r1, sp, #160	; 0xa0
   22fac:	a818      	add	r0, sp, #96	; 0x60
   22fae:	f7ff febd 	bl	22d2c <p256_zaddc>
   22fb2:	1c63      	adds	r3, r4, #1
   22fb4:	d1db      	bne.n	22f6e <ocrypto_curve_p256_scalarmult+0x5a>
   22fb6:	f1ca 0201 	rsb	r2, sl, #1
   22fba:	a920      	add	r1, sp, #128	; 0x80
   22fbc:	a808      	add	r0, sp, #32
   22fbe:	f000 f865 	bl	2308c <ocrypto_mod_p256_cneg>
   22fc2:	ea86 060a 	eor.w	r6, r6, sl
   22fc6:	466a      	mov	r2, sp
   22fc8:	a918      	add	r1, sp, #96	; 0x60
   22fca:	a828      	add	r0, sp, #160	; 0xa0
   22fcc:	f7ff ff14 	bl	22df8 <p256_zaddu>
   22fd0:	a928      	add	r1, sp, #160	; 0xa0
   22fd2:	4632      	mov	r2, r6
   22fd4:	a818      	add	r0, sp, #96	; 0x60
   22fd6:	f7dd fcb3 	bl	940 <ocrypto_bigint_cswap256>
   22fda:	4632      	mov	r2, r6
   22fdc:	a930      	add	r1, sp, #192	; 0xc0
   22fde:	a820      	add	r0, sp, #128	; 0x80
   22fe0:	f7dd fcae 	bl	940 <ocrypto_bigint_cswap256>
   22fe4:	a908      	add	r1, sp, #32
   22fe6:	466a      	mov	r2, sp
   22fe8:	4608      	mov	r0, r1
   22fea:	f7dd ff1f 	bl	e2c <ocrypto_mod_p256_mul>
   22fee:	a908      	add	r1, sp, #32
   22ff0:	4608      	mov	r0, r1
   22ff2:	f000 f89d 	bl	23130 <ocrypto_mod_p256_inv>
   22ff6:	a908      	add	r1, sp, #32
   22ff8:	f108 0420 	add.w	r4, r8, #32
   22ffc:	f109 0220 	add.w	r2, r9, #32
   23000:	4608      	mov	r0, r1
   23002:	f7dd ff13 	bl	e2c <ocrypto_mod_p256_mul>
   23006:	a920      	add	r1, sp, #128	; 0x80
   23008:	aa08      	add	r2, sp, #32
   2300a:	4620      	mov	r0, r4
   2300c:	f7dd ff0e 	bl	e2c <ocrypto_mod_p256_mul>
   23010:	aa08      	add	r2, sp, #32
   23012:	a918      	add	r1, sp, #96	; 0x60
   23014:	4668      	mov	r0, sp
   23016:	f7dd ff09 	bl	e2c <ocrypto_mod_p256_mul>
   2301a:	4669      	mov	r1, sp
   2301c:	4668      	mov	r0, sp
   2301e:	f7dd ff1d 	bl	e5c <ocrypto_mod_p256_sqr>
   23022:	aa18      	add	r2, sp, #96	; 0x60
   23024:	4669      	mov	r1, sp
   23026:	a808      	add	r0, sp, #32
   23028:	f7dd ff00 	bl	e2c <ocrypto_mod_p256_mul>
   2302c:	4621      	mov	r1, r4
   2302e:	4668      	mov	r0, sp
   23030:	f7dd ff14 	bl	e5c <ocrypto_mod_p256_sqr>
   23034:	aa08      	add	r2, sp, #32
   23036:	4669      	mov	r1, sp
   23038:	4610      	mov	r0, r2
   2303a:	f7dd fe5f 	bl	cfc <ocrypto_mod_p256_sub>
   2303e:	4a0e      	ldr	r2, [pc, #56]	; (23078 <ocrypto_curve_p256_scalarmult+0x164>)
   23040:	a908      	add	r1, sp, #32
   23042:	4668      	mov	r0, sp
   23044:	f7dd fe5a 	bl	cfc <ocrypto_mod_p256_sub>
   23048:	4620      	mov	r0, r4
   2304a:	2120      	movs	r1, #32
   2304c:	f7dd fdfe 	bl	c4c <ocrypto_constant_time_is_zero>
   23050:	a908      	add	r1, sp, #32
   23052:	4243      	negs	r3, r0
   23054:	4602      	mov	r2, r0
   23056:	4668      	mov	r0, sp
   23058:	431f      	orrs	r7, r3
   2305a:	f7dd fc71 	bl	940 <ocrypto_bigint_cswap256>
   2305e:	4640      	mov	r0, r8
   23060:	4a06      	ldr	r2, [pc, #24]	; (2307c <ocrypto_curve_p256_scalarmult+0x168>)
   23062:	4669      	mov	r1, sp
   23064:	f7dd fee2 	bl	e2c <ocrypto_mod_p256_mul>
   23068:	4638      	mov	r0, r7
   2306a:	b038      	add	sp, #224	; 0xe0
   2306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23070:	0002d558 	.word	0x0002d558
   23074:	0002d4d8 	.word	0x0002d4d8
   23078:	0002d538 	.word	0x0002d538
   2307c:	0002d4f8 	.word	0x0002d4f8

00023080 <ocrypto_curve_p256_scalarmult_base>:
   23080:	460a      	mov	r2, r1
   23082:	4901      	ldr	r1, [pc, #4]	; (23088 <ocrypto_curve_p256_scalarmult_base+0x8>)
   23084:	f7ff bf46 	b.w	22f14 <ocrypto_curve_p256_scalarmult>
   23088:	0002d498 	.word	0x0002d498

0002308c <ocrypto_mod_p256_cneg>:
   2308c:	b570      	push	{r4, r5, r6, lr}
   2308e:	b088      	sub	sp, #32
   23090:	4604      	mov	r4, r0
   23092:	460d      	mov	r5, r1
   23094:	4616      	mov	r6, r2
   23096:	2100      	movs	r1, #0
   23098:	2220      	movs	r2, #32
   2309a:	4668      	mov	r0, sp
   2309c:	f008 ffb8 	bl	2c010 <memset>
   230a0:	2300      	movs	r3, #0
   230a2:	4629      	mov	r1, r5
   230a4:	2220      	movs	r2, #32
   230a6:	4620      	mov	r0, r4
   230a8:	9300      	str	r3, [sp, #0]
   230aa:	f008 ff90 	bl	2bfce <memcpy>
   230ae:	462a      	mov	r2, r5
   230b0:	4669      	mov	r1, sp
   230b2:	4668      	mov	r0, sp
   230b4:	f7dd fe22 	bl	cfc <ocrypto_mod_p256_sub>
   230b8:	4632      	mov	r2, r6
   230ba:	4669      	mov	r1, sp
   230bc:	4620      	mov	r0, r4
   230be:	f7dd fc3f 	bl	940 <ocrypto_bigint_cswap256>
   230c2:	b008      	add	sp, #32
   230c4:	bd70      	pop	{r4, r5, r6, pc}
   230c6:	bf00      	nop

000230c8 <ocrypto_mod_p256_from_bytes>:
   230c8:	680b      	ldr	r3, [r1, #0]
   230ca:	ba1b      	rev	r3, r3
   230cc:	61c3      	str	r3, [r0, #28]
   230ce:	684b      	ldr	r3, [r1, #4]
   230d0:	ba1b      	rev	r3, r3
   230d2:	6183      	str	r3, [r0, #24]
   230d4:	688b      	ldr	r3, [r1, #8]
   230d6:	ba1b      	rev	r3, r3
   230d8:	6143      	str	r3, [r0, #20]
   230da:	68cb      	ldr	r3, [r1, #12]
   230dc:	ba1b      	rev	r3, r3
   230de:	6103      	str	r3, [r0, #16]
   230e0:	690b      	ldr	r3, [r1, #16]
   230e2:	ba1b      	rev	r3, r3
   230e4:	60c3      	str	r3, [r0, #12]
   230e6:	694b      	ldr	r3, [r1, #20]
   230e8:	ba1b      	rev	r3, r3
   230ea:	6083      	str	r3, [r0, #8]
   230ec:	698b      	ldr	r3, [r1, #24]
   230ee:	ba1b      	rev	r3, r3
   230f0:	6043      	str	r3, [r0, #4]
   230f2:	69cb      	ldr	r3, [r1, #28]
   230f4:	ba1b      	rev	r3, r3
   230f6:	6003      	str	r3, [r0, #0]
   230f8:	4770      	bx	lr
   230fa:	bf00      	nop

000230fc <ocrypto_mod_p256_to_bytes>:
   230fc:	69cb      	ldr	r3, [r1, #28]
   230fe:	ba1b      	rev	r3, r3
   23100:	6003      	str	r3, [r0, #0]
   23102:	698b      	ldr	r3, [r1, #24]
   23104:	ba1b      	rev	r3, r3
   23106:	6043      	str	r3, [r0, #4]
   23108:	694b      	ldr	r3, [r1, #20]
   2310a:	ba1b      	rev	r3, r3
   2310c:	6083      	str	r3, [r0, #8]
   2310e:	690b      	ldr	r3, [r1, #16]
   23110:	ba1b      	rev	r3, r3
   23112:	60c3      	str	r3, [r0, #12]
   23114:	68cb      	ldr	r3, [r1, #12]
   23116:	ba1b      	rev	r3, r3
   23118:	6103      	str	r3, [r0, #16]
   2311a:	688b      	ldr	r3, [r1, #8]
   2311c:	ba1b      	rev	r3, r3
   2311e:	6143      	str	r3, [r0, #20]
   23120:	684b      	ldr	r3, [r1, #4]
   23122:	ba1b      	rev	r3, r3
   23124:	6183      	str	r3, [r0, #24]
   23126:	680b      	ldr	r3, [r1, #0]
   23128:	ba1b      	rev	r3, r3
   2312a:	61c3      	str	r3, [r0, #28]
   2312c:	4770      	bx	lr
   2312e:	bf00      	nop

00023130 <ocrypto_mod_p256_inv>:
   23130:	b570      	push	{r4, r5, r6, lr}
   23132:	b098      	sub	sp, #96	; 0x60
   23134:	460d      	mov	r5, r1
   23136:	4606      	mov	r6, r0
   23138:	a810      	add	r0, sp, #64	; 0x40
   2313a:	f7dd fe8f 	bl	e5c <ocrypto_mod_p256_sqr>
   2313e:	462a      	mov	r2, r5
   23140:	a910      	add	r1, sp, #64	; 0x40
   23142:	4668      	mov	r0, sp
   23144:	f7dd fe72 	bl	e2c <ocrypto_mod_p256_mul>
   23148:	4669      	mov	r1, sp
   2314a:	a810      	add	r0, sp, #64	; 0x40
   2314c:	f7dd fe86 	bl	e5c <ocrypto_mod_p256_sqr>
   23150:	a910      	add	r1, sp, #64	; 0x40
   23152:	4608      	mov	r0, r1
   23154:	f7dd fe82 	bl	e5c <ocrypto_mod_p256_sqr>
   23158:	466a      	mov	r2, sp
   2315a:	a910      	add	r1, sp, #64	; 0x40
   2315c:	a808      	add	r0, sp, #32
   2315e:	f7dd fe65 	bl	e2c <ocrypto_mod_p256_mul>
   23162:	a908      	add	r1, sp, #32
   23164:	a810      	add	r0, sp, #64	; 0x40
   23166:	f7dd fe79 	bl	e5c <ocrypto_mod_p256_sqr>
   2316a:	a910      	add	r1, sp, #64	; 0x40
   2316c:	4608      	mov	r0, r1
   2316e:	f7dd fe75 	bl	e5c <ocrypto_mod_p256_sqr>
   23172:	a910      	add	r1, sp, #64	; 0x40
   23174:	4608      	mov	r0, r1
   23176:	f7dd fe71 	bl	e5c <ocrypto_mod_p256_sqr>
   2317a:	a910      	add	r1, sp, #64	; 0x40
   2317c:	4608      	mov	r0, r1
   2317e:	f7dd fe6d 	bl	e5c <ocrypto_mod_p256_sqr>
   23182:	a910      	add	r1, sp, #64	; 0x40
   23184:	aa08      	add	r2, sp, #32
   23186:	4608      	mov	r0, r1
   23188:	f7dd fe50 	bl	e2c <ocrypto_mod_p256_mul>
   2318c:	a910      	add	r1, sp, #64	; 0x40
   2318e:	4608      	mov	r0, r1
   23190:	f7dd fe64 	bl	e5c <ocrypto_mod_p256_sqr>
   23194:	a910      	add	r1, sp, #64	; 0x40
   23196:	4608      	mov	r0, r1
   23198:	f7dd fe60 	bl	e5c <ocrypto_mod_p256_sqr>
   2319c:	a910      	add	r1, sp, #64	; 0x40
   2319e:	466a      	mov	r2, sp
   231a0:	a808      	add	r0, sp, #32
   231a2:	f7dd fe43 	bl	e2c <ocrypto_mod_p256_mul>
   231a6:	2405      	movs	r4, #5
   231a8:	a908      	add	r1, sp, #32
   231aa:	a810      	add	r0, sp, #64	; 0x40
   231ac:	f7dd fe56 	bl	e5c <ocrypto_mod_p256_sqr>
   231b0:	a910      	add	r1, sp, #64	; 0x40
   231b2:	4608      	mov	r0, r1
   231b4:	f7dd fe52 	bl	e5c <ocrypto_mod_p256_sqr>
   231b8:	3c01      	subs	r4, #1
   231ba:	a910      	add	r1, sp, #64	; 0x40
   231bc:	d1f5      	bne.n	231aa <ocrypto_mod_p256_inv+0x7a>
   231be:	aa08      	add	r2, sp, #32
   231c0:	4608      	mov	r0, r1
   231c2:	f7dd fe33 	bl	e2c <ocrypto_mod_p256_mul>
   231c6:	2405      	movs	r4, #5
   231c8:	a910      	add	r1, sp, #64	; 0x40
   231ca:	4608      	mov	r0, r1
   231cc:	f7dd fe46 	bl	e5c <ocrypto_mod_p256_sqr>
   231d0:	a910      	add	r1, sp, #64	; 0x40
   231d2:	4608      	mov	r0, r1
   231d4:	f7dd fe42 	bl	e5c <ocrypto_mod_p256_sqr>
   231d8:	3c01      	subs	r4, #1
   231da:	d1f5      	bne.n	231c8 <ocrypto_mod_p256_inv+0x98>
   231dc:	a910      	add	r1, sp, #64	; 0x40
   231de:	aa08      	add	r2, sp, #32
   231e0:	4608      	mov	r0, r1
   231e2:	f7dd fe23 	bl	e2c <ocrypto_mod_p256_mul>
   231e6:	a910      	add	r1, sp, #64	; 0x40
   231e8:	a808      	add	r0, sp, #32
   231ea:	f7dd fe37 	bl	e5c <ocrypto_mod_p256_sqr>
   231ee:	a908      	add	r1, sp, #32
   231f0:	4608      	mov	r0, r1
   231f2:	f7dd fe33 	bl	e5c <ocrypto_mod_p256_sqr>
   231f6:	a908      	add	r1, sp, #32
   231f8:	466a      	mov	r2, sp
   231fa:	4668      	mov	r0, sp
   231fc:	f7dd fe16 	bl	e2c <ocrypto_mod_p256_mul>
   23200:	2410      	movs	r4, #16
   23202:	4669      	mov	r1, sp
   23204:	a810      	add	r0, sp, #64	; 0x40
   23206:	f7dd fe29 	bl	e5c <ocrypto_mod_p256_sqr>
   2320a:	a910      	add	r1, sp, #64	; 0x40
   2320c:	4608      	mov	r0, r1
   2320e:	f7dd fe25 	bl	e5c <ocrypto_mod_p256_sqr>
   23212:	3c01      	subs	r4, #1
   23214:	a910      	add	r1, sp, #64	; 0x40
   23216:	d1f5      	bne.n	23204 <ocrypto_mod_p256_inv+0xd4>
   23218:	462a      	mov	r2, r5
   2321a:	4608      	mov	r0, r1
   2321c:	f7dd fe06 	bl	e2c <ocrypto_mod_p256_mul>
   23220:	2440      	movs	r4, #64	; 0x40
   23222:	a910      	add	r1, sp, #64	; 0x40
   23224:	4608      	mov	r0, r1
   23226:	f7dd fe19 	bl	e5c <ocrypto_mod_p256_sqr>
   2322a:	a910      	add	r1, sp, #64	; 0x40
   2322c:	4608      	mov	r0, r1
   2322e:	f7dd fe15 	bl	e5c <ocrypto_mod_p256_sqr>
   23232:	3c01      	subs	r4, #1
   23234:	d1f5      	bne.n	23222 <ocrypto_mod_p256_inv+0xf2>
   23236:	a910      	add	r1, sp, #64	; 0x40
   23238:	466a      	mov	r2, sp
   2323a:	4608      	mov	r0, r1
   2323c:	f7dd fdf6 	bl	e2c <ocrypto_mod_p256_mul>
   23240:	2410      	movs	r4, #16
   23242:	a910      	add	r1, sp, #64	; 0x40
   23244:	4608      	mov	r0, r1
   23246:	f7dd fe09 	bl	e5c <ocrypto_mod_p256_sqr>
   2324a:	a910      	add	r1, sp, #64	; 0x40
   2324c:	4608      	mov	r0, r1
   2324e:	f7dd fe05 	bl	e5c <ocrypto_mod_p256_sqr>
   23252:	3c01      	subs	r4, #1
   23254:	d1f5      	bne.n	23242 <ocrypto_mod_p256_inv+0x112>
   23256:	a910      	add	r1, sp, #64	; 0x40
   23258:	466a      	mov	r2, sp
   2325a:	4608      	mov	r0, r1
   2325c:	f7dd fde6 	bl	e2c <ocrypto_mod_p256_mul>
   23260:	2410      	movs	r4, #16
   23262:	a910      	add	r1, sp, #64	; 0x40
   23264:	4608      	mov	r0, r1
   23266:	f7dd fdf9 	bl	e5c <ocrypto_mod_p256_sqr>
   2326a:	a910      	add	r1, sp, #64	; 0x40
   2326c:	4608      	mov	r0, r1
   2326e:	f7dd fdf5 	bl	e5c <ocrypto_mod_p256_sqr>
   23272:	3c01      	subs	r4, #1
   23274:	d1f5      	bne.n	23262 <ocrypto_mod_p256_inv+0x132>
   23276:	a910      	add	r1, sp, #64	; 0x40
   23278:	aa08      	add	r2, sp, #32
   2327a:	4608      	mov	r0, r1
   2327c:	f7dd fdd6 	bl	e2c <ocrypto_mod_p256_mul>
   23280:	462a      	mov	r2, r5
   23282:	a910      	add	r1, sp, #64	; 0x40
   23284:	4630      	mov	r0, r6
   23286:	f7dd fdd1 	bl	e2c <ocrypto_mod_p256_mul>
   2328a:	b018      	add	sp, #96	; 0x60
   2328c:	bd70      	pop	{r4, r5, r6, pc}
   2328e:	bf00      	nop

00023290 <malloc>:
   23290:	4b02      	ldr	r3, [pc, #8]	; (2329c <malloc+0xc>)
   23292:	4601      	mov	r1, r0
   23294:	6818      	ldr	r0, [r3, #0]
   23296:	f000 b84d 	b.w	23334 <_malloc_r>
   2329a:	bf00      	nop
   2329c:	20000854 	.word	0x20000854

000232a0 <_free_r>:
   232a0:	b538      	push	{r3, r4, r5, lr}
   232a2:	4605      	mov	r5, r0
   232a4:	2900      	cmp	r1, #0
   232a6:	d041      	beq.n	2332c <_free_r+0x8c>
   232a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   232ac:	1f0c      	subs	r4, r1, #4
   232ae:	2b00      	cmp	r3, #0
   232b0:	bfb8      	it	lt
   232b2:	18e4      	addlt	r4, r4, r3
   232b4:	f000 fe10 	bl	23ed8 <__malloc_lock>
   232b8:	4a1d      	ldr	r2, [pc, #116]	; (23330 <_free_r+0x90>)
   232ba:	6813      	ldr	r3, [r2, #0]
   232bc:	b933      	cbnz	r3, 232cc <_free_r+0x2c>
   232be:	6063      	str	r3, [r4, #4]
   232c0:	6014      	str	r4, [r2, #0]
   232c2:	4628      	mov	r0, r5
   232c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   232c8:	f000 be0c 	b.w	23ee4 <__malloc_unlock>
   232cc:	42a3      	cmp	r3, r4
   232ce:	d908      	bls.n	232e2 <_free_r+0x42>
   232d0:	6820      	ldr	r0, [r4, #0]
   232d2:	1821      	adds	r1, r4, r0
   232d4:	428b      	cmp	r3, r1
   232d6:	bf01      	itttt	eq
   232d8:	6819      	ldreq	r1, [r3, #0]
   232da:	685b      	ldreq	r3, [r3, #4]
   232dc:	1809      	addeq	r1, r1, r0
   232de:	6021      	streq	r1, [r4, #0]
   232e0:	e7ed      	b.n	232be <_free_r+0x1e>
   232e2:	461a      	mov	r2, r3
   232e4:	685b      	ldr	r3, [r3, #4]
   232e6:	b10b      	cbz	r3, 232ec <_free_r+0x4c>
   232e8:	42a3      	cmp	r3, r4
   232ea:	d9fa      	bls.n	232e2 <_free_r+0x42>
   232ec:	6811      	ldr	r1, [r2, #0]
   232ee:	1850      	adds	r0, r2, r1
   232f0:	42a0      	cmp	r0, r4
   232f2:	d10b      	bne.n	2330c <_free_r+0x6c>
   232f4:	6820      	ldr	r0, [r4, #0]
   232f6:	4401      	add	r1, r0
   232f8:	1850      	adds	r0, r2, r1
   232fa:	4283      	cmp	r3, r0
   232fc:	6011      	str	r1, [r2, #0]
   232fe:	d1e0      	bne.n	232c2 <_free_r+0x22>
   23300:	6818      	ldr	r0, [r3, #0]
   23302:	685b      	ldr	r3, [r3, #4]
   23304:	6053      	str	r3, [r2, #4]
   23306:	4401      	add	r1, r0
   23308:	6011      	str	r1, [r2, #0]
   2330a:	e7da      	b.n	232c2 <_free_r+0x22>
   2330c:	d902      	bls.n	23314 <_free_r+0x74>
   2330e:	230c      	movs	r3, #12
   23310:	602b      	str	r3, [r5, #0]
   23312:	e7d6      	b.n	232c2 <_free_r+0x22>
   23314:	6820      	ldr	r0, [r4, #0]
   23316:	1821      	adds	r1, r4, r0
   23318:	428b      	cmp	r3, r1
   2331a:	bf04      	itt	eq
   2331c:	6819      	ldreq	r1, [r3, #0]
   2331e:	685b      	ldreq	r3, [r3, #4]
   23320:	6063      	str	r3, [r4, #4]
   23322:	bf04      	itt	eq
   23324:	1809      	addeq	r1, r1, r0
   23326:	6021      	streq	r1, [r4, #0]
   23328:	6054      	str	r4, [r2, #4]
   2332a:	e7ca      	b.n	232c2 <_free_r+0x22>
   2332c:	bd38      	pop	{r3, r4, r5, pc}
   2332e:	bf00      	nop
   23330:	200032b4 	.word	0x200032b4

00023334 <_malloc_r>:
   23334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23336:	1ccd      	adds	r5, r1, #3
   23338:	f025 0503 	bic.w	r5, r5, #3
   2333c:	3508      	adds	r5, #8
   2333e:	2d0c      	cmp	r5, #12
   23340:	bf38      	it	cc
   23342:	250c      	movcc	r5, #12
   23344:	2d00      	cmp	r5, #0
   23346:	4606      	mov	r6, r0
   23348:	db01      	blt.n	2334e <_malloc_r+0x1a>
   2334a:	42a9      	cmp	r1, r5
   2334c:	d903      	bls.n	23356 <_malloc_r+0x22>
   2334e:	230c      	movs	r3, #12
   23350:	6033      	str	r3, [r6, #0]
   23352:	2000      	movs	r0, #0
   23354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23356:	f000 fdbf 	bl	23ed8 <__malloc_lock>
   2335a:	4921      	ldr	r1, [pc, #132]	; (233e0 <_malloc_r+0xac>)
   2335c:	680a      	ldr	r2, [r1, #0]
   2335e:	4614      	mov	r4, r2
   23360:	b99c      	cbnz	r4, 2338a <_malloc_r+0x56>
   23362:	4f20      	ldr	r7, [pc, #128]	; (233e4 <_malloc_r+0xb0>)
   23364:	683b      	ldr	r3, [r7, #0]
   23366:	b923      	cbnz	r3, 23372 <_malloc_r+0x3e>
   23368:	4621      	mov	r1, r4
   2336a:	4630      	mov	r0, r6
   2336c:	f000 faaa 	bl	238c4 <_sbrk_r>
   23370:	6038      	str	r0, [r7, #0]
   23372:	4629      	mov	r1, r5
   23374:	4630      	mov	r0, r6
   23376:	f000 faa5 	bl	238c4 <_sbrk_r>
   2337a:	1c43      	adds	r3, r0, #1
   2337c:	d123      	bne.n	233c6 <_malloc_r+0x92>
   2337e:	230c      	movs	r3, #12
   23380:	6033      	str	r3, [r6, #0]
   23382:	4630      	mov	r0, r6
   23384:	f000 fdae 	bl	23ee4 <__malloc_unlock>
   23388:	e7e3      	b.n	23352 <_malloc_r+0x1e>
   2338a:	6823      	ldr	r3, [r4, #0]
   2338c:	1b5b      	subs	r3, r3, r5
   2338e:	d417      	bmi.n	233c0 <_malloc_r+0x8c>
   23390:	2b0b      	cmp	r3, #11
   23392:	d903      	bls.n	2339c <_malloc_r+0x68>
   23394:	6023      	str	r3, [r4, #0]
   23396:	441c      	add	r4, r3
   23398:	6025      	str	r5, [r4, #0]
   2339a:	e004      	b.n	233a6 <_malloc_r+0x72>
   2339c:	6863      	ldr	r3, [r4, #4]
   2339e:	42a2      	cmp	r2, r4
   233a0:	bf0c      	ite	eq
   233a2:	600b      	streq	r3, [r1, #0]
   233a4:	6053      	strne	r3, [r2, #4]
   233a6:	4630      	mov	r0, r6
   233a8:	f000 fd9c 	bl	23ee4 <__malloc_unlock>
   233ac:	f104 000b 	add.w	r0, r4, #11
   233b0:	1d23      	adds	r3, r4, #4
   233b2:	f020 0007 	bic.w	r0, r0, #7
   233b6:	1ac2      	subs	r2, r0, r3
   233b8:	d0cc      	beq.n	23354 <_malloc_r+0x20>
   233ba:	1a1b      	subs	r3, r3, r0
   233bc:	50a3      	str	r3, [r4, r2]
   233be:	e7c9      	b.n	23354 <_malloc_r+0x20>
   233c0:	4622      	mov	r2, r4
   233c2:	6864      	ldr	r4, [r4, #4]
   233c4:	e7cc      	b.n	23360 <_malloc_r+0x2c>
   233c6:	1cc4      	adds	r4, r0, #3
   233c8:	f024 0403 	bic.w	r4, r4, #3
   233cc:	42a0      	cmp	r0, r4
   233ce:	d0e3      	beq.n	23398 <_malloc_r+0x64>
   233d0:	1a21      	subs	r1, r4, r0
   233d2:	4630      	mov	r0, r6
   233d4:	f000 fa76 	bl	238c4 <_sbrk_r>
   233d8:	3001      	adds	r0, #1
   233da:	d1dd      	bne.n	23398 <_malloc_r+0x64>
   233dc:	e7cf      	b.n	2337e <_malloc_r+0x4a>
   233de:	bf00      	nop
   233e0:	200032b4 	.word	0x200032b4
   233e4:	200032b8 	.word	0x200032b8

000233e8 <_vfiprintf_r>:
   233e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233ec:	460d      	mov	r5, r1
   233ee:	b09d      	sub	sp, #116	; 0x74
   233f0:	4614      	mov	r4, r2
   233f2:	4698      	mov	r8, r3
   233f4:	4606      	mov	r6, r0
   233f6:	b118      	cbz	r0, 23400 <_vfiprintf_r+0x18>
   233f8:	6983      	ldr	r3, [r0, #24]
   233fa:	b90b      	cbnz	r3, 23400 <_vfiprintf_r+0x18>
   233fc:	f000 fcae 	bl	23d5c <__sinit>
   23400:	4b89      	ldr	r3, [pc, #548]	; (23628 <_vfiprintf_r+0x240>)
   23402:	429d      	cmp	r5, r3
   23404:	d11b      	bne.n	2343e <_vfiprintf_r+0x56>
   23406:	6875      	ldr	r5, [r6, #4]
   23408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2340a:	07d9      	lsls	r1, r3, #31
   2340c:	d405      	bmi.n	2341a <_vfiprintf_r+0x32>
   2340e:	89ab      	ldrh	r3, [r5, #12]
   23410:	059a      	lsls	r2, r3, #22
   23412:	d402      	bmi.n	2341a <_vfiprintf_r+0x32>
   23414:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23416:	f005 f988 	bl	2872a <__retarget_lock_acquire_recursive>
   2341a:	89ab      	ldrh	r3, [r5, #12]
   2341c:	071b      	lsls	r3, r3, #28
   2341e:	d501      	bpl.n	23424 <_vfiprintf_r+0x3c>
   23420:	692b      	ldr	r3, [r5, #16]
   23422:	b9eb      	cbnz	r3, 23460 <_vfiprintf_r+0x78>
   23424:	4629      	mov	r1, r5
   23426:	4630      	mov	r0, r6
   23428:	f000 fb2a 	bl	23a80 <__swsetup_r>
   2342c:	b1c0      	cbz	r0, 23460 <_vfiprintf_r+0x78>
   2342e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23430:	07dc      	lsls	r4, r3, #31
   23432:	d50e      	bpl.n	23452 <_vfiprintf_r+0x6a>
   23434:	f04f 30ff 	mov.w	r0, #4294967295
   23438:	b01d      	add	sp, #116	; 0x74
   2343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2343e:	4b7b      	ldr	r3, [pc, #492]	; (2362c <_vfiprintf_r+0x244>)
   23440:	429d      	cmp	r5, r3
   23442:	d101      	bne.n	23448 <_vfiprintf_r+0x60>
   23444:	68b5      	ldr	r5, [r6, #8]
   23446:	e7df      	b.n	23408 <_vfiprintf_r+0x20>
   23448:	4b79      	ldr	r3, [pc, #484]	; (23630 <_vfiprintf_r+0x248>)
   2344a:	429d      	cmp	r5, r3
   2344c:	bf08      	it	eq
   2344e:	68f5      	ldreq	r5, [r6, #12]
   23450:	e7da      	b.n	23408 <_vfiprintf_r+0x20>
   23452:	89ab      	ldrh	r3, [r5, #12]
   23454:	0598      	lsls	r0, r3, #22
   23456:	d4ed      	bmi.n	23434 <_vfiprintf_r+0x4c>
   23458:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2345a:	f005 f96c 	bl	28736 <__retarget_lock_release_recursive>
   2345e:	e7e9      	b.n	23434 <_vfiprintf_r+0x4c>
   23460:	2300      	movs	r3, #0
   23462:	9309      	str	r3, [sp, #36]	; 0x24
   23464:	2320      	movs	r3, #32
   23466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2346a:	f8cd 800c 	str.w	r8, [sp, #12]
   2346e:	2330      	movs	r3, #48	; 0x30
   23470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 23634 <_vfiprintf_r+0x24c>
   23474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   23478:	f04f 0901 	mov.w	r9, #1
   2347c:	4623      	mov	r3, r4
   2347e:	469a      	mov	sl, r3
   23480:	f813 2b01 	ldrb.w	r2, [r3], #1
   23484:	b10a      	cbz	r2, 2348a <_vfiprintf_r+0xa2>
   23486:	2a25      	cmp	r2, #37	; 0x25
   23488:	d1f9      	bne.n	2347e <_vfiprintf_r+0x96>
   2348a:	ebba 0b04 	subs.w	fp, sl, r4
   2348e:	d00b      	beq.n	234a8 <_vfiprintf_r+0xc0>
   23490:	465b      	mov	r3, fp
   23492:	4622      	mov	r2, r4
   23494:	4629      	mov	r1, r5
   23496:	4630      	mov	r0, r6
   23498:	f008 fdd7 	bl	2c04a <__sfputs_r>
   2349c:	3001      	adds	r0, #1
   2349e:	f000 80aa 	beq.w	235f6 <_vfiprintf_r+0x20e>
   234a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   234a4:	445a      	add	r2, fp
   234a6:	9209      	str	r2, [sp, #36]	; 0x24
   234a8:	f89a 3000 	ldrb.w	r3, [sl]
   234ac:	2b00      	cmp	r3, #0
   234ae:	f000 80a2 	beq.w	235f6 <_vfiprintf_r+0x20e>
   234b2:	2300      	movs	r3, #0
   234b4:	f04f 32ff 	mov.w	r2, #4294967295
   234b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   234bc:	f10a 0a01 	add.w	sl, sl, #1
   234c0:	9304      	str	r3, [sp, #16]
   234c2:	9307      	str	r3, [sp, #28]
   234c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   234c8:	931a      	str	r3, [sp, #104]	; 0x68
   234ca:	4654      	mov	r4, sl
   234cc:	2205      	movs	r2, #5
   234ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   234d2:	4858      	ldr	r0, [pc, #352]	; (23634 <_vfiprintf_r+0x24c>)
   234d4:	f7dc fe14 	bl	100 <memchr>
   234d8:	9a04      	ldr	r2, [sp, #16]
   234da:	b9d8      	cbnz	r0, 23514 <_vfiprintf_r+0x12c>
   234dc:	06d1      	lsls	r1, r2, #27
   234de:	bf44      	itt	mi
   234e0:	2320      	movmi	r3, #32
   234e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   234e6:	0713      	lsls	r3, r2, #28
   234e8:	bf44      	itt	mi
   234ea:	232b      	movmi	r3, #43	; 0x2b
   234ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   234f0:	f89a 3000 	ldrb.w	r3, [sl]
   234f4:	2b2a      	cmp	r3, #42	; 0x2a
   234f6:	d015      	beq.n	23524 <_vfiprintf_r+0x13c>
   234f8:	9a07      	ldr	r2, [sp, #28]
   234fa:	4654      	mov	r4, sl
   234fc:	2000      	movs	r0, #0
   234fe:	f04f 0c0a 	mov.w	ip, #10
   23502:	4621      	mov	r1, r4
   23504:	f811 3b01 	ldrb.w	r3, [r1], #1
   23508:	3b30      	subs	r3, #48	; 0x30
   2350a:	2b09      	cmp	r3, #9
   2350c:	d94e      	bls.n	235ac <_vfiprintf_r+0x1c4>
   2350e:	b1b0      	cbz	r0, 2353e <_vfiprintf_r+0x156>
   23510:	9207      	str	r2, [sp, #28]
   23512:	e014      	b.n	2353e <_vfiprintf_r+0x156>
   23514:	eba0 0308 	sub.w	r3, r0, r8
   23518:	fa09 f303 	lsl.w	r3, r9, r3
   2351c:	4313      	orrs	r3, r2
   2351e:	9304      	str	r3, [sp, #16]
   23520:	46a2      	mov	sl, r4
   23522:	e7d2      	b.n	234ca <_vfiprintf_r+0xe2>
   23524:	9b03      	ldr	r3, [sp, #12]
   23526:	1d19      	adds	r1, r3, #4
   23528:	681b      	ldr	r3, [r3, #0]
   2352a:	9103      	str	r1, [sp, #12]
   2352c:	2b00      	cmp	r3, #0
   2352e:	bfbb      	ittet	lt
   23530:	425b      	neglt	r3, r3
   23532:	f042 0202 	orrlt.w	r2, r2, #2
   23536:	9307      	strge	r3, [sp, #28]
   23538:	9307      	strlt	r3, [sp, #28]
   2353a:	bfb8      	it	lt
   2353c:	9204      	strlt	r2, [sp, #16]
   2353e:	7823      	ldrb	r3, [r4, #0]
   23540:	2b2e      	cmp	r3, #46	; 0x2e
   23542:	d10c      	bne.n	2355e <_vfiprintf_r+0x176>
   23544:	7863      	ldrb	r3, [r4, #1]
   23546:	2b2a      	cmp	r3, #42	; 0x2a
   23548:	d135      	bne.n	235b6 <_vfiprintf_r+0x1ce>
   2354a:	9b03      	ldr	r3, [sp, #12]
   2354c:	1d1a      	adds	r2, r3, #4
   2354e:	681b      	ldr	r3, [r3, #0]
   23550:	9203      	str	r2, [sp, #12]
   23552:	2b00      	cmp	r3, #0
   23554:	bfb8      	it	lt
   23556:	f04f 33ff 	movlt.w	r3, #4294967295
   2355a:	3402      	adds	r4, #2
   2355c:	9305      	str	r3, [sp, #20]
   2355e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 23638 <_vfiprintf_r+0x250>
   23562:	7821      	ldrb	r1, [r4, #0]
   23564:	2203      	movs	r2, #3
   23566:	4650      	mov	r0, sl
   23568:	f7dc fdca 	bl	100 <memchr>
   2356c:	b140      	cbz	r0, 23580 <_vfiprintf_r+0x198>
   2356e:	2340      	movs	r3, #64	; 0x40
   23570:	eba0 000a 	sub.w	r0, r0, sl
   23574:	fa03 f000 	lsl.w	r0, r3, r0
   23578:	9b04      	ldr	r3, [sp, #16]
   2357a:	4303      	orrs	r3, r0
   2357c:	3401      	adds	r4, #1
   2357e:	9304      	str	r3, [sp, #16]
   23580:	f814 1b01 	ldrb.w	r1, [r4], #1
   23584:	482d      	ldr	r0, [pc, #180]	; (2363c <_vfiprintf_r+0x254>)
   23586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2358a:	2206      	movs	r2, #6
   2358c:	f7dc fdb8 	bl	100 <memchr>
   23590:	2800      	cmp	r0, #0
   23592:	d03f      	beq.n	23614 <_vfiprintf_r+0x22c>
   23594:	4b2a      	ldr	r3, [pc, #168]	; (23640 <_vfiprintf_r+0x258>)
   23596:	bb1b      	cbnz	r3, 235e0 <_vfiprintf_r+0x1f8>
   23598:	9b03      	ldr	r3, [sp, #12]
   2359a:	3307      	adds	r3, #7
   2359c:	f023 0307 	bic.w	r3, r3, #7
   235a0:	3308      	adds	r3, #8
   235a2:	9303      	str	r3, [sp, #12]
   235a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   235a6:	443b      	add	r3, r7
   235a8:	9309      	str	r3, [sp, #36]	; 0x24
   235aa:	e767      	b.n	2347c <_vfiprintf_r+0x94>
   235ac:	fb0c 3202 	mla	r2, ip, r2, r3
   235b0:	460c      	mov	r4, r1
   235b2:	2001      	movs	r0, #1
   235b4:	e7a5      	b.n	23502 <_vfiprintf_r+0x11a>
   235b6:	2300      	movs	r3, #0
   235b8:	3401      	adds	r4, #1
   235ba:	9305      	str	r3, [sp, #20]
   235bc:	4619      	mov	r1, r3
   235be:	f04f 0c0a 	mov.w	ip, #10
   235c2:	4620      	mov	r0, r4
   235c4:	f810 2b01 	ldrb.w	r2, [r0], #1
   235c8:	3a30      	subs	r2, #48	; 0x30
   235ca:	2a09      	cmp	r2, #9
   235cc:	d903      	bls.n	235d6 <_vfiprintf_r+0x1ee>
   235ce:	2b00      	cmp	r3, #0
   235d0:	d0c5      	beq.n	2355e <_vfiprintf_r+0x176>
   235d2:	9105      	str	r1, [sp, #20]
   235d4:	e7c3      	b.n	2355e <_vfiprintf_r+0x176>
   235d6:	fb0c 2101 	mla	r1, ip, r1, r2
   235da:	4604      	mov	r4, r0
   235dc:	2301      	movs	r3, #1
   235de:	e7f0      	b.n	235c2 <_vfiprintf_r+0x1da>
   235e0:	ab03      	add	r3, sp, #12
   235e2:	9300      	str	r3, [sp, #0]
   235e4:	462a      	mov	r2, r5
   235e6:	4b17      	ldr	r3, [pc, #92]	; (23644 <_vfiprintf_r+0x25c>)
   235e8:	a904      	add	r1, sp, #16
   235ea:	4630      	mov	r0, r6
   235ec:	f3af 8000 	nop.w
   235f0:	4607      	mov	r7, r0
   235f2:	1c78      	adds	r0, r7, #1
   235f4:	d1d6      	bne.n	235a4 <_vfiprintf_r+0x1bc>
   235f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   235f8:	07d9      	lsls	r1, r3, #31
   235fa:	d405      	bmi.n	23608 <_vfiprintf_r+0x220>
   235fc:	89ab      	ldrh	r3, [r5, #12]
   235fe:	059a      	lsls	r2, r3, #22
   23600:	d402      	bmi.n	23608 <_vfiprintf_r+0x220>
   23602:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23604:	f005 f897 	bl	28736 <__retarget_lock_release_recursive>
   23608:	89ab      	ldrh	r3, [r5, #12]
   2360a:	065b      	lsls	r3, r3, #25
   2360c:	f53f af12 	bmi.w	23434 <_vfiprintf_r+0x4c>
   23610:	9809      	ldr	r0, [sp, #36]	; 0x24
   23612:	e711      	b.n	23438 <_vfiprintf_r+0x50>
   23614:	ab03      	add	r3, sp, #12
   23616:	9300      	str	r3, [sp, #0]
   23618:	462a      	mov	r2, r5
   2361a:	4b0a      	ldr	r3, [pc, #40]	; (23644 <_vfiprintf_r+0x25c>)
   2361c:	a904      	add	r1, sp, #16
   2361e:	4630      	mov	r0, r6
   23620:	f000 f812 	bl	23648 <_printf_i>
   23624:	e7e4      	b.n	235f0 <_vfiprintf_r+0x208>
   23626:	bf00      	nop
   23628:	0002d59c 	.word	0x0002d59c
   2362c:	0002d5bc 	.word	0x0002d5bc
   23630:	0002d57c 	.word	0x0002d57c
   23634:	000300ae 	.word	0x000300ae
   23638:	000300b4 	.word	0x000300b4
   2363c:	000300b8 	.word	0x000300b8
   23640:	00000000 	.word	0x00000000
   23644:	0002c04b 	.word	0x0002c04b

00023648 <_printf_i>:
   23648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2364c:	7e0f      	ldrb	r7, [r1, #24]
   2364e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23650:	2f78      	cmp	r7, #120	; 0x78
   23652:	4691      	mov	r9, r2
   23654:	4680      	mov	r8, r0
   23656:	460c      	mov	r4, r1
   23658:	469a      	mov	sl, r3
   2365a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2365e:	d807      	bhi.n	23670 <_printf_i+0x28>
   23660:	2f62      	cmp	r7, #98	; 0x62
   23662:	d80a      	bhi.n	2367a <_printf_i+0x32>
   23664:	2f00      	cmp	r7, #0
   23666:	f000 80d8 	beq.w	2381a <_printf_i+0x1d2>
   2366a:	2f58      	cmp	r7, #88	; 0x58
   2366c:	f000 80a3 	beq.w	237b6 <_printf_i+0x16e>
   23670:	f104 0542 	add.w	r5, r4, #66	; 0x42
   23674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   23678:	e03a      	b.n	236f0 <_printf_i+0xa8>
   2367a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2367e:	2b15      	cmp	r3, #21
   23680:	d8f6      	bhi.n	23670 <_printf_i+0x28>
   23682:	a101      	add	r1, pc, #4	; (adr r1, 23688 <_printf_i+0x40>)
   23684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23688:	000236e1 	.word	0x000236e1
   2368c:	000236f5 	.word	0x000236f5
   23690:	00023671 	.word	0x00023671
   23694:	00023671 	.word	0x00023671
   23698:	00023671 	.word	0x00023671
   2369c:	00023671 	.word	0x00023671
   236a0:	000236f5 	.word	0x000236f5
   236a4:	00023671 	.word	0x00023671
   236a8:	00023671 	.word	0x00023671
   236ac:	00023671 	.word	0x00023671
   236b0:	00023671 	.word	0x00023671
   236b4:	00023801 	.word	0x00023801
   236b8:	00023725 	.word	0x00023725
   236bc:	000237e3 	.word	0x000237e3
   236c0:	00023671 	.word	0x00023671
   236c4:	00023671 	.word	0x00023671
   236c8:	00023823 	.word	0x00023823
   236cc:	00023671 	.word	0x00023671
   236d0:	00023725 	.word	0x00023725
   236d4:	00023671 	.word	0x00023671
   236d8:	00023671 	.word	0x00023671
   236dc:	000237eb 	.word	0x000237eb
   236e0:	682b      	ldr	r3, [r5, #0]
   236e2:	1d1a      	adds	r2, r3, #4
   236e4:	681b      	ldr	r3, [r3, #0]
   236e6:	602a      	str	r2, [r5, #0]
   236e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   236ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   236f0:	2301      	movs	r3, #1
   236f2:	e0a3      	b.n	2383c <_printf_i+0x1f4>
   236f4:	6820      	ldr	r0, [r4, #0]
   236f6:	6829      	ldr	r1, [r5, #0]
   236f8:	0606      	lsls	r6, r0, #24
   236fa:	f101 0304 	add.w	r3, r1, #4
   236fe:	d50a      	bpl.n	23716 <_printf_i+0xce>
   23700:	680e      	ldr	r6, [r1, #0]
   23702:	602b      	str	r3, [r5, #0]
   23704:	2e00      	cmp	r6, #0
   23706:	da03      	bge.n	23710 <_printf_i+0xc8>
   23708:	232d      	movs	r3, #45	; 0x2d
   2370a:	4276      	negs	r6, r6
   2370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23710:	485e      	ldr	r0, [pc, #376]	; (2388c <_printf_i+0x244>)
   23712:	230a      	movs	r3, #10
   23714:	e019      	b.n	2374a <_printf_i+0x102>
   23716:	680e      	ldr	r6, [r1, #0]
   23718:	602b      	str	r3, [r5, #0]
   2371a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2371e:	bf18      	it	ne
   23720:	b236      	sxthne	r6, r6
   23722:	e7ef      	b.n	23704 <_printf_i+0xbc>
   23724:	682b      	ldr	r3, [r5, #0]
   23726:	6820      	ldr	r0, [r4, #0]
   23728:	1d19      	adds	r1, r3, #4
   2372a:	6029      	str	r1, [r5, #0]
   2372c:	0601      	lsls	r1, r0, #24
   2372e:	d501      	bpl.n	23734 <_printf_i+0xec>
   23730:	681e      	ldr	r6, [r3, #0]
   23732:	e002      	b.n	2373a <_printf_i+0xf2>
   23734:	0646      	lsls	r6, r0, #25
   23736:	d5fb      	bpl.n	23730 <_printf_i+0xe8>
   23738:	881e      	ldrh	r6, [r3, #0]
   2373a:	4854      	ldr	r0, [pc, #336]	; (2388c <_printf_i+0x244>)
   2373c:	2f6f      	cmp	r7, #111	; 0x6f
   2373e:	bf0c      	ite	eq
   23740:	2308      	moveq	r3, #8
   23742:	230a      	movne	r3, #10
   23744:	2100      	movs	r1, #0
   23746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2374a:	6865      	ldr	r5, [r4, #4]
   2374c:	60a5      	str	r5, [r4, #8]
   2374e:	2d00      	cmp	r5, #0
   23750:	bfa2      	ittt	ge
   23752:	6821      	ldrge	r1, [r4, #0]
   23754:	f021 0104 	bicge.w	r1, r1, #4
   23758:	6021      	strge	r1, [r4, #0]
   2375a:	b90e      	cbnz	r6, 23760 <_printf_i+0x118>
   2375c:	2d00      	cmp	r5, #0
   2375e:	d04d      	beq.n	237fc <_printf_i+0x1b4>
   23760:	4615      	mov	r5, r2
   23762:	fbb6 f1f3 	udiv	r1, r6, r3
   23766:	fb03 6711 	mls	r7, r3, r1, r6
   2376a:	5dc7      	ldrb	r7, [r0, r7]
   2376c:	f805 7d01 	strb.w	r7, [r5, #-1]!
   23770:	4637      	mov	r7, r6
   23772:	42bb      	cmp	r3, r7
   23774:	460e      	mov	r6, r1
   23776:	d9f4      	bls.n	23762 <_printf_i+0x11a>
   23778:	2b08      	cmp	r3, #8
   2377a:	d10b      	bne.n	23794 <_printf_i+0x14c>
   2377c:	6823      	ldr	r3, [r4, #0]
   2377e:	07de      	lsls	r6, r3, #31
   23780:	d508      	bpl.n	23794 <_printf_i+0x14c>
   23782:	6923      	ldr	r3, [r4, #16]
   23784:	6861      	ldr	r1, [r4, #4]
   23786:	4299      	cmp	r1, r3
   23788:	bfde      	ittt	le
   2378a:	2330      	movle	r3, #48	; 0x30
   2378c:	f805 3c01 	strble.w	r3, [r5, #-1]
   23790:	f105 35ff 	addle.w	r5, r5, #4294967295
   23794:	1b52      	subs	r2, r2, r5
   23796:	6122      	str	r2, [r4, #16]
   23798:	f8cd a000 	str.w	sl, [sp]
   2379c:	464b      	mov	r3, r9
   2379e:	aa03      	add	r2, sp, #12
   237a0:	4621      	mov	r1, r4
   237a2:	4640      	mov	r0, r8
   237a4:	f008 fc63 	bl	2c06e <_printf_common>
   237a8:	3001      	adds	r0, #1
   237aa:	d14c      	bne.n	23846 <_printf_i+0x1fe>
   237ac:	f04f 30ff 	mov.w	r0, #4294967295
   237b0:	b004      	add	sp, #16
   237b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237b6:	4835      	ldr	r0, [pc, #212]	; (2388c <_printf_i+0x244>)
   237b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   237bc:	6829      	ldr	r1, [r5, #0]
   237be:	6823      	ldr	r3, [r4, #0]
   237c0:	f851 6b04 	ldr.w	r6, [r1], #4
   237c4:	6029      	str	r1, [r5, #0]
   237c6:	061d      	lsls	r5, r3, #24
   237c8:	d514      	bpl.n	237f4 <_printf_i+0x1ac>
   237ca:	07df      	lsls	r7, r3, #31
   237cc:	bf44      	itt	mi
   237ce:	f043 0320 	orrmi.w	r3, r3, #32
   237d2:	6023      	strmi	r3, [r4, #0]
   237d4:	b91e      	cbnz	r6, 237de <_printf_i+0x196>
   237d6:	6823      	ldr	r3, [r4, #0]
   237d8:	f023 0320 	bic.w	r3, r3, #32
   237dc:	6023      	str	r3, [r4, #0]
   237de:	2310      	movs	r3, #16
   237e0:	e7b0      	b.n	23744 <_printf_i+0xfc>
   237e2:	6823      	ldr	r3, [r4, #0]
   237e4:	f043 0320 	orr.w	r3, r3, #32
   237e8:	6023      	str	r3, [r4, #0]
   237ea:	2378      	movs	r3, #120	; 0x78
   237ec:	4828      	ldr	r0, [pc, #160]	; (23890 <_printf_i+0x248>)
   237ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   237f2:	e7e3      	b.n	237bc <_printf_i+0x174>
   237f4:	0659      	lsls	r1, r3, #25
   237f6:	bf48      	it	mi
   237f8:	b2b6      	uxthmi	r6, r6
   237fa:	e7e6      	b.n	237ca <_printf_i+0x182>
   237fc:	4615      	mov	r5, r2
   237fe:	e7bb      	b.n	23778 <_printf_i+0x130>
   23800:	682b      	ldr	r3, [r5, #0]
   23802:	6826      	ldr	r6, [r4, #0]
   23804:	6961      	ldr	r1, [r4, #20]
   23806:	1d18      	adds	r0, r3, #4
   23808:	6028      	str	r0, [r5, #0]
   2380a:	0635      	lsls	r5, r6, #24
   2380c:	681b      	ldr	r3, [r3, #0]
   2380e:	d501      	bpl.n	23814 <_printf_i+0x1cc>
   23810:	6019      	str	r1, [r3, #0]
   23812:	e002      	b.n	2381a <_printf_i+0x1d2>
   23814:	0670      	lsls	r0, r6, #25
   23816:	d5fb      	bpl.n	23810 <_printf_i+0x1c8>
   23818:	8019      	strh	r1, [r3, #0]
   2381a:	2300      	movs	r3, #0
   2381c:	6123      	str	r3, [r4, #16]
   2381e:	4615      	mov	r5, r2
   23820:	e7ba      	b.n	23798 <_printf_i+0x150>
   23822:	682b      	ldr	r3, [r5, #0]
   23824:	1d1a      	adds	r2, r3, #4
   23826:	602a      	str	r2, [r5, #0]
   23828:	681d      	ldr	r5, [r3, #0]
   2382a:	6862      	ldr	r2, [r4, #4]
   2382c:	2100      	movs	r1, #0
   2382e:	4628      	mov	r0, r5
   23830:	f7dc fc66 	bl	100 <memchr>
   23834:	b108      	cbz	r0, 2383a <_printf_i+0x1f2>
   23836:	1b40      	subs	r0, r0, r5
   23838:	6060      	str	r0, [r4, #4]
   2383a:	6863      	ldr	r3, [r4, #4]
   2383c:	6123      	str	r3, [r4, #16]
   2383e:	2300      	movs	r3, #0
   23840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23844:	e7a8      	b.n	23798 <_printf_i+0x150>
   23846:	6923      	ldr	r3, [r4, #16]
   23848:	462a      	mov	r2, r5
   2384a:	4649      	mov	r1, r9
   2384c:	4640      	mov	r0, r8
   2384e:	47d0      	blx	sl
   23850:	3001      	adds	r0, #1
   23852:	d0ab      	beq.n	237ac <_printf_i+0x164>
   23854:	6823      	ldr	r3, [r4, #0]
   23856:	079b      	lsls	r3, r3, #30
   23858:	d413      	bmi.n	23882 <_printf_i+0x23a>
   2385a:	68e0      	ldr	r0, [r4, #12]
   2385c:	9b03      	ldr	r3, [sp, #12]
   2385e:	4298      	cmp	r0, r3
   23860:	bfb8      	it	lt
   23862:	4618      	movlt	r0, r3
   23864:	e7a4      	b.n	237b0 <_printf_i+0x168>
   23866:	2301      	movs	r3, #1
   23868:	4632      	mov	r2, r6
   2386a:	4649      	mov	r1, r9
   2386c:	4640      	mov	r0, r8
   2386e:	47d0      	blx	sl
   23870:	3001      	adds	r0, #1
   23872:	d09b      	beq.n	237ac <_printf_i+0x164>
   23874:	3501      	adds	r5, #1
   23876:	68e3      	ldr	r3, [r4, #12]
   23878:	9903      	ldr	r1, [sp, #12]
   2387a:	1a5b      	subs	r3, r3, r1
   2387c:	42ab      	cmp	r3, r5
   2387e:	dcf2      	bgt.n	23866 <_printf_i+0x21e>
   23880:	e7eb      	b.n	2385a <_printf_i+0x212>
   23882:	2500      	movs	r5, #0
   23884:	f104 0619 	add.w	r6, r4, #25
   23888:	e7f5      	b.n	23876 <_printf_i+0x22e>
   2388a:	bf00      	nop
   2388c:	000300bf 	.word	0x000300bf
   23890:	000300d0 	.word	0x000300d0

00023894 <iprintf>:
   23894:	b40f      	push	{r0, r1, r2, r3}
   23896:	4b0a      	ldr	r3, [pc, #40]	; (238c0 <iprintf+0x2c>)
   23898:	b513      	push	{r0, r1, r4, lr}
   2389a:	681c      	ldr	r4, [r3, #0]
   2389c:	b124      	cbz	r4, 238a8 <iprintf+0x14>
   2389e:	69a3      	ldr	r3, [r4, #24]
   238a0:	b913      	cbnz	r3, 238a8 <iprintf+0x14>
   238a2:	4620      	mov	r0, r4
   238a4:	f000 fa5a 	bl	23d5c <__sinit>
   238a8:	ab05      	add	r3, sp, #20
   238aa:	9a04      	ldr	r2, [sp, #16]
   238ac:	68a1      	ldr	r1, [r4, #8]
   238ae:	9301      	str	r3, [sp, #4]
   238b0:	4620      	mov	r0, r4
   238b2:	f7ff fd99 	bl	233e8 <_vfiprintf_r>
   238b6:	b002      	add	sp, #8
   238b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   238bc:	b004      	add	sp, #16
   238be:	4770      	bx	lr
   238c0:	20000854 	.word	0x20000854

000238c4 <_sbrk_r>:
   238c4:	b538      	push	{r3, r4, r5, lr}
   238c6:	4d06      	ldr	r5, [pc, #24]	; (238e0 <_sbrk_r+0x1c>)
   238c8:	2300      	movs	r3, #0
   238ca:	4604      	mov	r4, r0
   238cc:	4608      	mov	r0, r1
   238ce:	602b      	str	r3, [r5, #0]
   238d0:	f7f1 feae 	bl	15630 <_sbrk>
   238d4:	1c43      	adds	r3, r0, #1
   238d6:	d102      	bne.n	238de <_sbrk_r+0x1a>
   238d8:	682b      	ldr	r3, [r5, #0]
   238da:	b103      	cbz	r3, 238de <_sbrk_r+0x1a>
   238dc:	6023      	str	r3, [r4, #0]
   238de:	bd38      	pop	{r3, r4, r5, pc}
   238e0:	200032bc 	.word	0x200032bc

000238e4 <_strtoul_l.constprop.0>:
   238e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238e8:	4f36      	ldr	r7, [pc, #216]	; (239c4 <_strtoul_l.constprop.0+0xe0>)
   238ea:	4686      	mov	lr, r0
   238ec:	460d      	mov	r5, r1
   238ee:	4628      	mov	r0, r5
   238f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   238f4:	5de6      	ldrb	r6, [r4, r7]
   238f6:	f016 0608 	ands.w	r6, r6, #8
   238fa:	d1f8      	bne.n	238ee <_strtoul_l.constprop.0+0xa>
   238fc:	2c2d      	cmp	r4, #45	; 0x2d
   238fe:	d12f      	bne.n	23960 <_strtoul_l.constprop.0+0x7c>
   23900:	782c      	ldrb	r4, [r5, #0]
   23902:	2601      	movs	r6, #1
   23904:	1c85      	adds	r5, r0, #2
   23906:	2b00      	cmp	r3, #0
   23908:	d057      	beq.n	239ba <_strtoul_l.constprop.0+0xd6>
   2390a:	2b10      	cmp	r3, #16
   2390c:	d109      	bne.n	23922 <_strtoul_l.constprop.0+0x3e>
   2390e:	2c30      	cmp	r4, #48	; 0x30
   23910:	d107      	bne.n	23922 <_strtoul_l.constprop.0+0x3e>
   23912:	7828      	ldrb	r0, [r5, #0]
   23914:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   23918:	2858      	cmp	r0, #88	; 0x58
   2391a:	d149      	bne.n	239b0 <_strtoul_l.constprop.0+0xcc>
   2391c:	786c      	ldrb	r4, [r5, #1]
   2391e:	2310      	movs	r3, #16
   23920:	3502      	adds	r5, #2
   23922:	f04f 38ff 	mov.w	r8, #4294967295
   23926:	2700      	movs	r7, #0
   23928:	fbb8 f8f3 	udiv	r8, r8, r3
   2392c:	fb03 f908 	mul.w	r9, r3, r8
   23930:	ea6f 0909 	mvn.w	r9, r9
   23934:	4638      	mov	r0, r7
   23936:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2393a:	f1bc 0f09 	cmp.w	ip, #9
   2393e:	d814      	bhi.n	2396a <_strtoul_l.constprop.0+0x86>
   23940:	4664      	mov	r4, ip
   23942:	42a3      	cmp	r3, r4
   23944:	dd22      	ble.n	2398c <_strtoul_l.constprop.0+0xa8>
   23946:	2f00      	cmp	r7, #0
   23948:	db1d      	blt.n	23986 <_strtoul_l.constprop.0+0xa2>
   2394a:	4580      	cmp	r8, r0
   2394c:	d31b      	bcc.n	23986 <_strtoul_l.constprop.0+0xa2>
   2394e:	d101      	bne.n	23954 <_strtoul_l.constprop.0+0x70>
   23950:	45a1      	cmp	r9, r4
   23952:	db18      	blt.n	23986 <_strtoul_l.constprop.0+0xa2>
   23954:	fb00 4003 	mla	r0, r0, r3, r4
   23958:	2701      	movs	r7, #1
   2395a:	f815 4b01 	ldrb.w	r4, [r5], #1
   2395e:	e7ea      	b.n	23936 <_strtoul_l.constprop.0+0x52>
   23960:	2c2b      	cmp	r4, #43	; 0x2b
   23962:	bf04      	itt	eq
   23964:	782c      	ldrbeq	r4, [r5, #0]
   23966:	1c85      	addeq	r5, r0, #2
   23968:	e7cd      	b.n	23906 <_strtoul_l.constprop.0+0x22>
   2396a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2396e:	f1bc 0f19 	cmp.w	ip, #25
   23972:	d801      	bhi.n	23978 <_strtoul_l.constprop.0+0x94>
   23974:	3c37      	subs	r4, #55	; 0x37
   23976:	e7e4      	b.n	23942 <_strtoul_l.constprop.0+0x5e>
   23978:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2397c:	f1bc 0f19 	cmp.w	ip, #25
   23980:	d804      	bhi.n	2398c <_strtoul_l.constprop.0+0xa8>
   23982:	3c57      	subs	r4, #87	; 0x57
   23984:	e7dd      	b.n	23942 <_strtoul_l.constprop.0+0x5e>
   23986:	f04f 37ff 	mov.w	r7, #4294967295
   2398a:	e7e6      	b.n	2395a <_strtoul_l.constprop.0+0x76>
   2398c:	2f00      	cmp	r7, #0
   2398e:	da07      	bge.n	239a0 <_strtoul_l.constprop.0+0xbc>
   23990:	2322      	movs	r3, #34	; 0x22
   23992:	f8ce 3000 	str.w	r3, [lr]
   23996:	f04f 30ff 	mov.w	r0, #4294967295
   2399a:	b932      	cbnz	r2, 239aa <_strtoul_l.constprop.0+0xc6>
   2399c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   239a0:	b106      	cbz	r6, 239a4 <_strtoul_l.constprop.0+0xc0>
   239a2:	4240      	negs	r0, r0
   239a4:	2a00      	cmp	r2, #0
   239a6:	d0f9      	beq.n	2399c <_strtoul_l.constprop.0+0xb8>
   239a8:	b107      	cbz	r7, 239ac <_strtoul_l.constprop.0+0xc8>
   239aa:	1e69      	subs	r1, r5, #1
   239ac:	6011      	str	r1, [r2, #0]
   239ae:	e7f5      	b.n	2399c <_strtoul_l.constprop.0+0xb8>
   239b0:	2430      	movs	r4, #48	; 0x30
   239b2:	2b00      	cmp	r3, #0
   239b4:	d1b5      	bne.n	23922 <_strtoul_l.constprop.0+0x3e>
   239b6:	2308      	movs	r3, #8
   239b8:	e7b3      	b.n	23922 <_strtoul_l.constprop.0+0x3e>
   239ba:	2c30      	cmp	r4, #48	; 0x30
   239bc:	d0a9      	beq.n	23912 <_strtoul_l.constprop.0+0x2e>
   239be:	230a      	movs	r3, #10
   239c0:	e7af      	b.n	23922 <_strtoul_l.constprop.0+0x3e>
   239c2:	bf00      	nop
   239c4:	0002ffae 	.word	0x0002ffae

000239c8 <strtoul>:
   239c8:	4613      	mov	r3, r2
   239ca:	460a      	mov	r2, r1
   239cc:	4601      	mov	r1, r0
   239ce:	4802      	ldr	r0, [pc, #8]	; (239d8 <strtoul+0x10>)
   239d0:	6800      	ldr	r0, [r0, #0]
   239d2:	f7ff bf87 	b.w	238e4 <_strtoul_l.constprop.0>
   239d6:	bf00      	nop
   239d8:	20000854 	.word	0x20000854

000239dc <__swbuf_r>:
   239dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   239de:	460e      	mov	r6, r1
   239e0:	4614      	mov	r4, r2
   239e2:	4605      	mov	r5, r0
   239e4:	b118      	cbz	r0, 239ee <__swbuf_r+0x12>
   239e6:	6983      	ldr	r3, [r0, #24]
   239e8:	b90b      	cbnz	r3, 239ee <__swbuf_r+0x12>
   239ea:	f000 f9b7 	bl	23d5c <__sinit>
   239ee:	4b21      	ldr	r3, [pc, #132]	; (23a74 <__swbuf_r+0x98>)
   239f0:	429c      	cmp	r4, r3
   239f2:	d12b      	bne.n	23a4c <__swbuf_r+0x70>
   239f4:	686c      	ldr	r4, [r5, #4]
   239f6:	69a3      	ldr	r3, [r4, #24]
   239f8:	60a3      	str	r3, [r4, #8]
   239fa:	89a3      	ldrh	r3, [r4, #12]
   239fc:	071a      	lsls	r2, r3, #28
   239fe:	d52f      	bpl.n	23a60 <__swbuf_r+0x84>
   23a00:	6923      	ldr	r3, [r4, #16]
   23a02:	b36b      	cbz	r3, 23a60 <__swbuf_r+0x84>
   23a04:	6923      	ldr	r3, [r4, #16]
   23a06:	6820      	ldr	r0, [r4, #0]
   23a08:	1ac0      	subs	r0, r0, r3
   23a0a:	6963      	ldr	r3, [r4, #20]
   23a0c:	b2f6      	uxtb	r6, r6
   23a0e:	4283      	cmp	r3, r0
   23a10:	4637      	mov	r7, r6
   23a12:	dc04      	bgt.n	23a1e <__swbuf_r+0x42>
   23a14:	4621      	mov	r1, r4
   23a16:	4628      	mov	r0, r5
   23a18:	f000 f922 	bl	23c60 <_fflush_r>
   23a1c:	bb30      	cbnz	r0, 23a6c <__swbuf_r+0x90>
   23a1e:	68a3      	ldr	r3, [r4, #8]
   23a20:	3b01      	subs	r3, #1
   23a22:	60a3      	str	r3, [r4, #8]
   23a24:	6823      	ldr	r3, [r4, #0]
   23a26:	1c5a      	adds	r2, r3, #1
   23a28:	6022      	str	r2, [r4, #0]
   23a2a:	701e      	strb	r6, [r3, #0]
   23a2c:	6963      	ldr	r3, [r4, #20]
   23a2e:	3001      	adds	r0, #1
   23a30:	4283      	cmp	r3, r0
   23a32:	d004      	beq.n	23a3e <__swbuf_r+0x62>
   23a34:	89a3      	ldrh	r3, [r4, #12]
   23a36:	07db      	lsls	r3, r3, #31
   23a38:	d506      	bpl.n	23a48 <__swbuf_r+0x6c>
   23a3a:	2e0a      	cmp	r6, #10
   23a3c:	d104      	bne.n	23a48 <__swbuf_r+0x6c>
   23a3e:	4621      	mov	r1, r4
   23a40:	4628      	mov	r0, r5
   23a42:	f000 f90d 	bl	23c60 <_fflush_r>
   23a46:	b988      	cbnz	r0, 23a6c <__swbuf_r+0x90>
   23a48:	4638      	mov	r0, r7
   23a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a4c:	4b0a      	ldr	r3, [pc, #40]	; (23a78 <__swbuf_r+0x9c>)
   23a4e:	429c      	cmp	r4, r3
   23a50:	d101      	bne.n	23a56 <__swbuf_r+0x7a>
   23a52:	68ac      	ldr	r4, [r5, #8]
   23a54:	e7cf      	b.n	239f6 <__swbuf_r+0x1a>
   23a56:	4b09      	ldr	r3, [pc, #36]	; (23a7c <__swbuf_r+0xa0>)
   23a58:	429c      	cmp	r4, r3
   23a5a:	bf08      	it	eq
   23a5c:	68ec      	ldreq	r4, [r5, #12]
   23a5e:	e7ca      	b.n	239f6 <__swbuf_r+0x1a>
   23a60:	4621      	mov	r1, r4
   23a62:	4628      	mov	r0, r5
   23a64:	f000 f80c 	bl	23a80 <__swsetup_r>
   23a68:	2800      	cmp	r0, #0
   23a6a:	d0cb      	beq.n	23a04 <__swbuf_r+0x28>
   23a6c:	f04f 37ff 	mov.w	r7, #4294967295
   23a70:	e7ea      	b.n	23a48 <__swbuf_r+0x6c>
   23a72:	bf00      	nop
   23a74:	0002d59c 	.word	0x0002d59c
   23a78:	0002d5bc 	.word	0x0002d5bc
   23a7c:	0002d57c 	.word	0x0002d57c

00023a80 <__swsetup_r>:
   23a80:	4b32      	ldr	r3, [pc, #200]	; (23b4c <__swsetup_r+0xcc>)
   23a82:	b570      	push	{r4, r5, r6, lr}
   23a84:	681d      	ldr	r5, [r3, #0]
   23a86:	4606      	mov	r6, r0
   23a88:	460c      	mov	r4, r1
   23a8a:	b125      	cbz	r5, 23a96 <__swsetup_r+0x16>
   23a8c:	69ab      	ldr	r3, [r5, #24]
   23a8e:	b913      	cbnz	r3, 23a96 <__swsetup_r+0x16>
   23a90:	4628      	mov	r0, r5
   23a92:	f000 f963 	bl	23d5c <__sinit>
   23a96:	4b2e      	ldr	r3, [pc, #184]	; (23b50 <__swsetup_r+0xd0>)
   23a98:	429c      	cmp	r4, r3
   23a9a:	d10f      	bne.n	23abc <__swsetup_r+0x3c>
   23a9c:	686c      	ldr	r4, [r5, #4]
   23a9e:	89a3      	ldrh	r3, [r4, #12]
   23aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   23aa4:	0719      	lsls	r1, r3, #28
   23aa6:	d42c      	bmi.n	23b02 <__swsetup_r+0x82>
   23aa8:	06dd      	lsls	r5, r3, #27
   23aaa:	d411      	bmi.n	23ad0 <__swsetup_r+0x50>
   23aac:	2309      	movs	r3, #9
   23aae:	6033      	str	r3, [r6, #0]
   23ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   23ab4:	81a3      	strh	r3, [r4, #12]
   23ab6:	f04f 30ff 	mov.w	r0, #4294967295
   23aba:	e03e      	b.n	23b3a <__swsetup_r+0xba>
   23abc:	4b25      	ldr	r3, [pc, #148]	; (23b54 <__swsetup_r+0xd4>)
   23abe:	429c      	cmp	r4, r3
   23ac0:	d101      	bne.n	23ac6 <__swsetup_r+0x46>
   23ac2:	68ac      	ldr	r4, [r5, #8]
   23ac4:	e7eb      	b.n	23a9e <__swsetup_r+0x1e>
   23ac6:	4b24      	ldr	r3, [pc, #144]	; (23b58 <__swsetup_r+0xd8>)
   23ac8:	429c      	cmp	r4, r3
   23aca:	bf08      	it	eq
   23acc:	68ec      	ldreq	r4, [r5, #12]
   23ace:	e7e6      	b.n	23a9e <__swsetup_r+0x1e>
   23ad0:	0758      	lsls	r0, r3, #29
   23ad2:	d512      	bpl.n	23afa <__swsetup_r+0x7a>
   23ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23ad6:	b141      	cbz	r1, 23aea <__swsetup_r+0x6a>
   23ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23adc:	4299      	cmp	r1, r3
   23ade:	d002      	beq.n	23ae6 <__swsetup_r+0x66>
   23ae0:	4630      	mov	r0, r6
   23ae2:	f7ff fbdd 	bl	232a0 <_free_r>
   23ae6:	2300      	movs	r3, #0
   23ae8:	6363      	str	r3, [r4, #52]	; 0x34
   23aea:	89a3      	ldrh	r3, [r4, #12]
   23aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   23af0:	81a3      	strh	r3, [r4, #12]
   23af2:	2300      	movs	r3, #0
   23af4:	6063      	str	r3, [r4, #4]
   23af6:	6923      	ldr	r3, [r4, #16]
   23af8:	6023      	str	r3, [r4, #0]
   23afa:	89a3      	ldrh	r3, [r4, #12]
   23afc:	f043 0308 	orr.w	r3, r3, #8
   23b00:	81a3      	strh	r3, [r4, #12]
   23b02:	6923      	ldr	r3, [r4, #16]
   23b04:	b94b      	cbnz	r3, 23b1a <__swsetup_r+0x9a>
   23b06:	89a3      	ldrh	r3, [r4, #12]
   23b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
   23b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   23b10:	d003      	beq.n	23b1a <__swsetup_r+0x9a>
   23b12:	4621      	mov	r1, r4
   23b14:	4630      	mov	r0, r6
   23b16:	f000 f99f 	bl	23e58 <__smakebuf_r>
   23b1a:	89a0      	ldrh	r0, [r4, #12]
   23b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   23b20:	f010 0301 	ands.w	r3, r0, #1
   23b24:	d00a      	beq.n	23b3c <__swsetup_r+0xbc>
   23b26:	2300      	movs	r3, #0
   23b28:	60a3      	str	r3, [r4, #8]
   23b2a:	6963      	ldr	r3, [r4, #20]
   23b2c:	425b      	negs	r3, r3
   23b2e:	61a3      	str	r3, [r4, #24]
   23b30:	6923      	ldr	r3, [r4, #16]
   23b32:	b943      	cbnz	r3, 23b46 <__swsetup_r+0xc6>
   23b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   23b38:	d1ba      	bne.n	23ab0 <__swsetup_r+0x30>
   23b3a:	bd70      	pop	{r4, r5, r6, pc}
   23b3c:	0781      	lsls	r1, r0, #30
   23b3e:	bf58      	it	pl
   23b40:	6963      	ldrpl	r3, [r4, #20]
   23b42:	60a3      	str	r3, [r4, #8]
   23b44:	e7f4      	b.n	23b30 <__swsetup_r+0xb0>
   23b46:	2000      	movs	r0, #0
   23b48:	e7f7      	b.n	23b3a <__swsetup_r+0xba>
   23b4a:	bf00      	nop
   23b4c:	20000854 	.word	0x20000854
   23b50:	0002d59c 	.word	0x0002d59c
   23b54:	0002d5bc 	.word	0x0002d5bc
   23b58:	0002d57c 	.word	0x0002d57c

00023b5c <__sflush_r>:
   23b5c:	898a      	ldrh	r2, [r1, #12]
   23b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b60:	4605      	mov	r5, r0
   23b62:	0710      	lsls	r0, r2, #28
   23b64:	460c      	mov	r4, r1
   23b66:	d457      	bmi.n	23c18 <__sflush_r+0xbc>
   23b68:	684b      	ldr	r3, [r1, #4]
   23b6a:	2b00      	cmp	r3, #0
   23b6c:	dc04      	bgt.n	23b78 <__sflush_r+0x1c>
   23b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   23b70:	2b00      	cmp	r3, #0
   23b72:	dc01      	bgt.n	23b78 <__sflush_r+0x1c>
   23b74:	2000      	movs	r0, #0
   23b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   23b7a:	2e00      	cmp	r6, #0
   23b7c:	d0fa      	beq.n	23b74 <__sflush_r+0x18>
   23b7e:	2300      	movs	r3, #0
   23b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   23b84:	682f      	ldr	r7, [r5, #0]
   23b86:	602b      	str	r3, [r5, #0]
   23b88:	d032      	beq.n	23bf0 <__sflush_r+0x94>
   23b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   23b8c:	89a3      	ldrh	r3, [r4, #12]
   23b8e:	075a      	lsls	r2, r3, #29
   23b90:	d505      	bpl.n	23b9e <__sflush_r+0x42>
   23b92:	6863      	ldr	r3, [r4, #4]
   23b94:	1ac0      	subs	r0, r0, r3
   23b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23b98:	b10b      	cbz	r3, 23b9e <__sflush_r+0x42>
   23b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23b9c:	1ac0      	subs	r0, r0, r3
   23b9e:	2300      	movs	r3, #0
   23ba0:	4602      	mov	r2, r0
   23ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   23ba4:	6a21      	ldr	r1, [r4, #32]
   23ba6:	4628      	mov	r0, r5
   23ba8:	47b0      	blx	r6
   23baa:	1c43      	adds	r3, r0, #1
   23bac:	89a3      	ldrh	r3, [r4, #12]
   23bae:	d106      	bne.n	23bbe <__sflush_r+0x62>
   23bb0:	6829      	ldr	r1, [r5, #0]
   23bb2:	291d      	cmp	r1, #29
   23bb4:	d82c      	bhi.n	23c10 <__sflush_r+0xb4>
   23bb6:	4a29      	ldr	r2, [pc, #164]	; (23c5c <__sflush_r+0x100>)
   23bb8:	40ca      	lsrs	r2, r1
   23bba:	07d6      	lsls	r6, r2, #31
   23bbc:	d528      	bpl.n	23c10 <__sflush_r+0xb4>
   23bbe:	2200      	movs	r2, #0
   23bc0:	6062      	str	r2, [r4, #4]
   23bc2:	04d9      	lsls	r1, r3, #19
   23bc4:	6922      	ldr	r2, [r4, #16]
   23bc6:	6022      	str	r2, [r4, #0]
   23bc8:	d504      	bpl.n	23bd4 <__sflush_r+0x78>
   23bca:	1c42      	adds	r2, r0, #1
   23bcc:	d101      	bne.n	23bd2 <__sflush_r+0x76>
   23bce:	682b      	ldr	r3, [r5, #0]
   23bd0:	b903      	cbnz	r3, 23bd4 <__sflush_r+0x78>
   23bd2:	6560      	str	r0, [r4, #84]	; 0x54
   23bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23bd6:	602f      	str	r7, [r5, #0]
   23bd8:	2900      	cmp	r1, #0
   23bda:	d0cb      	beq.n	23b74 <__sflush_r+0x18>
   23bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23be0:	4299      	cmp	r1, r3
   23be2:	d002      	beq.n	23bea <__sflush_r+0x8e>
   23be4:	4628      	mov	r0, r5
   23be6:	f7ff fb5b 	bl	232a0 <_free_r>
   23bea:	2000      	movs	r0, #0
   23bec:	6360      	str	r0, [r4, #52]	; 0x34
   23bee:	e7c2      	b.n	23b76 <__sflush_r+0x1a>
   23bf0:	6a21      	ldr	r1, [r4, #32]
   23bf2:	2301      	movs	r3, #1
   23bf4:	4628      	mov	r0, r5
   23bf6:	47b0      	blx	r6
   23bf8:	1c41      	adds	r1, r0, #1
   23bfa:	d1c7      	bne.n	23b8c <__sflush_r+0x30>
   23bfc:	682b      	ldr	r3, [r5, #0]
   23bfe:	2b00      	cmp	r3, #0
   23c00:	d0c4      	beq.n	23b8c <__sflush_r+0x30>
   23c02:	2b1d      	cmp	r3, #29
   23c04:	d001      	beq.n	23c0a <__sflush_r+0xae>
   23c06:	2b16      	cmp	r3, #22
   23c08:	d101      	bne.n	23c0e <__sflush_r+0xb2>
   23c0a:	602f      	str	r7, [r5, #0]
   23c0c:	e7b2      	b.n	23b74 <__sflush_r+0x18>
   23c0e:	89a3      	ldrh	r3, [r4, #12]
   23c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23c14:	81a3      	strh	r3, [r4, #12]
   23c16:	e7ae      	b.n	23b76 <__sflush_r+0x1a>
   23c18:	690f      	ldr	r7, [r1, #16]
   23c1a:	2f00      	cmp	r7, #0
   23c1c:	d0aa      	beq.n	23b74 <__sflush_r+0x18>
   23c1e:	0793      	lsls	r3, r2, #30
   23c20:	680e      	ldr	r6, [r1, #0]
   23c22:	bf08      	it	eq
   23c24:	694b      	ldreq	r3, [r1, #20]
   23c26:	600f      	str	r7, [r1, #0]
   23c28:	bf18      	it	ne
   23c2a:	2300      	movne	r3, #0
   23c2c:	1bf6      	subs	r6, r6, r7
   23c2e:	608b      	str	r3, [r1, #8]
   23c30:	2e00      	cmp	r6, #0
   23c32:	dd9f      	ble.n	23b74 <__sflush_r+0x18>
   23c34:	6a21      	ldr	r1, [r4, #32]
   23c36:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   23c3a:	4633      	mov	r3, r6
   23c3c:	463a      	mov	r2, r7
   23c3e:	4628      	mov	r0, r5
   23c40:	47e0      	blx	ip
   23c42:	2800      	cmp	r0, #0
   23c44:	dc06      	bgt.n	23c54 <__sflush_r+0xf8>
   23c46:	89a3      	ldrh	r3, [r4, #12]
   23c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23c4c:	81a3      	strh	r3, [r4, #12]
   23c4e:	f04f 30ff 	mov.w	r0, #4294967295
   23c52:	e790      	b.n	23b76 <__sflush_r+0x1a>
   23c54:	4407      	add	r7, r0
   23c56:	1a36      	subs	r6, r6, r0
   23c58:	e7ea      	b.n	23c30 <__sflush_r+0xd4>
   23c5a:	bf00      	nop
   23c5c:	20400001 	.word	0x20400001

00023c60 <_fflush_r>:
   23c60:	b538      	push	{r3, r4, r5, lr}
   23c62:	690b      	ldr	r3, [r1, #16]
   23c64:	4605      	mov	r5, r0
   23c66:	460c      	mov	r4, r1
   23c68:	b913      	cbnz	r3, 23c70 <_fflush_r+0x10>
   23c6a:	2500      	movs	r5, #0
   23c6c:	4628      	mov	r0, r5
   23c6e:	bd38      	pop	{r3, r4, r5, pc}
   23c70:	b118      	cbz	r0, 23c7a <_fflush_r+0x1a>
   23c72:	6983      	ldr	r3, [r0, #24]
   23c74:	b90b      	cbnz	r3, 23c7a <_fflush_r+0x1a>
   23c76:	f000 f871 	bl	23d5c <__sinit>
   23c7a:	4b14      	ldr	r3, [pc, #80]	; (23ccc <_fflush_r+0x6c>)
   23c7c:	429c      	cmp	r4, r3
   23c7e:	d11b      	bne.n	23cb8 <_fflush_r+0x58>
   23c80:	686c      	ldr	r4, [r5, #4]
   23c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23c86:	2b00      	cmp	r3, #0
   23c88:	d0ef      	beq.n	23c6a <_fflush_r+0xa>
   23c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23c8c:	07d0      	lsls	r0, r2, #31
   23c8e:	d404      	bmi.n	23c9a <_fflush_r+0x3a>
   23c90:	0599      	lsls	r1, r3, #22
   23c92:	d402      	bmi.n	23c9a <_fflush_r+0x3a>
   23c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23c96:	f004 fd48 	bl	2872a <__retarget_lock_acquire_recursive>
   23c9a:	4628      	mov	r0, r5
   23c9c:	4621      	mov	r1, r4
   23c9e:	f7ff ff5d 	bl	23b5c <__sflush_r>
   23ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23ca4:	07da      	lsls	r2, r3, #31
   23ca6:	4605      	mov	r5, r0
   23ca8:	d4e0      	bmi.n	23c6c <_fflush_r+0xc>
   23caa:	89a3      	ldrh	r3, [r4, #12]
   23cac:	059b      	lsls	r3, r3, #22
   23cae:	d4dd      	bmi.n	23c6c <_fflush_r+0xc>
   23cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23cb2:	f004 fd40 	bl	28736 <__retarget_lock_release_recursive>
   23cb6:	e7d9      	b.n	23c6c <_fflush_r+0xc>
   23cb8:	4b05      	ldr	r3, [pc, #20]	; (23cd0 <_fflush_r+0x70>)
   23cba:	429c      	cmp	r4, r3
   23cbc:	d101      	bne.n	23cc2 <_fflush_r+0x62>
   23cbe:	68ac      	ldr	r4, [r5, #8]
   23cc0:	e7df      	b.n	23c82 <_fflush_r+0x22>
   23cc2:	4b04      	ldr	r3, [pc, #16]	; (23cd4 <_fflush_r+0x74>)
   23cc4:	429c      	cmp	r4, r3
   23cc6:	bf08      	it	eq
   23cc8:	68ec      	ldreq	r4, [r5, #12]
   23cca:	e7da      	b.n	23c82 <_fflush_r+0x22>
   23ccc:	0002d59c 	.word	0x0002d59c
   23cd0:	0002d5bc 	.word	0x0002d5bc
   23cd4:	0002d57c 	.word	0x0002d57c

00023cd8 <std>:
   23cd8:	2300      	movs	r3, #0
   23cda:	b510      	push	{r4, lr}
   23cdc:	4604      	mov	r4, r0
   23cde:	e9c0 3300 	strd	r3, r3, [r0]
   23ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   23ce6:	6083      	str	r3, [r0, #8]
   23ce8:	8181      	strh	r1, [r0, #12]
   23cea:	6643      	str	r3, [r0, #100]	; 0x64
   23cec:	81c2      	strh	r2, [r0, #14]
   23cee:	6183      	str	r3, [r0, #24]
   23cf0:	4619      	mov	r1, r3
   23cf2:	2208      	movs	r2, #8
   23cf4:	305c      	adds	r0, #92	; 0x5c
   23cf6:	f008 f98b 	bl	2c010 <memset>
   23cfa:	4b05      	ldr	r3, [pc, #20]	; (23d10 <std+0x38>)
   23cfc:	6263      	str	r3, [r4, #36]	; 0x24
   23cfe:	4b05      	ldr	r3, [pc, #20]	; (23d14 <std+0x3c>)
   23d00:	62a3      	str	r3, [r4, #40]	; 0x28
   23d02:	4b05      	ldr	r3, [pc, #20]	; (23d18 <std+0x40>)
   23d04:	62e3      	str	r3, [r4, #44]	; 0x2c
   23d06:	4b05      	ldr	r3, [pc, #20]	; (23d1c <std+0x44>)
   23d08:	6224      	str	r4, [r4, #32]
   23d0a:	6323      	str	r3, [r4, #48]	; 0x30
   23d0c:	bd10      	pop	{r4, pc}
   23d0e:	bf00      	nop
   23d10:	0002c2a7 	.word	0x0002c2a7
   23d14:	0002c2c9 	.word	0x0002c2c9
   23d18:	0002c301 	.word	0x0002c301
   23d1c:	0002c325 	.word	0x0002c325

00023d20 <_cleanup_r>:
   23d20:	4901      	ldr	r1, [pc, #4]	; (23d28 <_cleanup_r+0x8>)
   23d22:	f008 ba62 	b.w	2c1ea <_fwalk_reent>
   23d26:	bf00      	nop
   23d28:	00023c61 	.word	0x00023c61

00023d2c <__sfp_lock_acquire>:
   23d2c:	4801      	ldr	r0, [pc, #4]	; (23d34 <__sfp_lock_acquire+0x8>)
   23d2e:	f004 bcfc 	b.w	2872a <__retarget_lock_acquire_recursive>
   23d32:	bf00      	nop
   23d34:	20000ac0 	.word	0x20000ac0

00023d38 <__sfp_lock_release>:
   23d38:	4801      	ldr	r0, [pc, #4]	; (23d40 <__sfp_lock_release+0x8>)
   23d3a:	f004 bcfc 	b.w	28736 <__retarget_lock_release_recursive>
   23d3e:	bf00      	nop
   23d40:	20000ac0 	.word	0x20000ac0

00023d44 <__sinit_lock_acquire>:
   23d44:	4801      	ldr	r0, [pc, #4]	; (23d4c <__sinit_lock_acquire+0x8>)
   23d46:	f004 bcf0 	b.w	2872a <__retarget_lock_acquire_recursive>
   23d4a:	bf00      	nop
   23d4c:	20000ad4 	.word	0x20000ad4

00023d50 <__sinit_lock_release>:
   23d50:	4801      	ldr	r0, [pc, #4]	; (23d58 <__sinit_lock_release+0x8>)
   23d52:	f004 bcf0 	b.w	28736 <__retarget_lock_release_recursive>
   23d56:	bf00      	nop
   23d58:	20000ad4 	.word	0x20000ad4

00023d5c <__sinit>:
   23d5c:	b510      	push	{r4, lr}
   23d5e:	4604      	mov	r4, r0
   23d60:	f7ff fff0 	bl	23d44 <__sinit_lock_acquire>
   23d64:	69a3      	ldr	r3, [r4, #24]
   23d66:	b11b      	cbz	r3, 23d70 <__sinit+0x14>
   23d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23d6c:	f7ff bff0 	b.w	23d50 <__sinit_lock_release>
   23d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   23d74:	6523      	str	r3, [r4, #80]	; 0x50
   23d76:	4b13      	ldr	r3, [pc, #76]	; (23dc4 <__sinit+0x68>)
   23d78:	4a13      	ldr	r2, [pc, #76]	; (23dc8 <__sinit+0x6c>)
   23d7a:	681b      	ldr	r3, [r3, #0]
   23d7c:	62a2      	str	r2, [r4, #40]	; 0x28
   23d7e:	42a3      	cmp	r3, r4
   23d80:	bf04      	itt	eq
   23d82:	2301      	moveq	r3, #1
   23d84:	61a3      	streq	r3, [r4, #24]
   23d86:	4620      	mov	r0, r4
   23d88:	f000 f820 	bl	23dcc <__sfp>
   23d8c:	6060      	str	r0, [r4, #4]
   23d8e:	4620      	mov	r0, r4
   23d90:	f000 f81c 	bl	23dcc <__sfp>
   23d94:	60a0      	str	r0, [r4, #8]
   23d96:	4620      	mov	r0, r4
   23d98:	f000 f818 	bl	23dcc <__sfp>
   23d9c:	2200      	movs	r2, #0
   23d9e:	60e0      	str	r0, [r4, #12]
   23da0:	2104      	movs	r1, #4
   23da2:	6860      	ldr	r0, [r4, #4]
   23da4:	f7ff ff98 	bl	23cd8 <std>
   23da8:	68a0      	ldr	r0, [r4, #8]
   23daa:	2201      	movs	r2, #1
   23dac:	2109      	movs	r1, #9
   23dae:	f7ff ff93 	bl	23cd8 <std>
   23db2:	68e0      	ldr	r0, [r4, #12]
   23db4:	2202      	movs	r2, #2
   23db6:	2112      	movs	r1, #18
   23db8:	f7ff ff8e 	bl	23cd8 <std>
   23dbc:	2301      	movs	r3, #1
   23dbe:	61a3      	str	r3, [r4, #24]
   23dc0:	e7d2      	b.n	23d68 <__sinit+0xc>
   23dc2:	bf00      	nop
   23dc4:	0002d578 	.word	0x0002d578
   23dc8:	00023d21 	.word	0x00023d21

00023dcc <__sfp>:
   23dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23dce:	4607      	mov	r7, r0
   23dd0:	f7ff ffac 	bl	23d2c <__sfp_lock_acquire>
   23dd4:	4b1e      	ldr	r3, [pc, #120]	; (23e50 <__sfp+0x84>)
   23dd6:	681e      	ldr	r6, [r3, #0]
   23dd8:	69b3      	ldr	r3, [r6, #24]
   23dda:	b913      	cbnz	r3, 23de2 <__sfp+0x16>
   23ddc:	4630      	mov	r0, r6
   23dde:	f7ff ffbd 	bl	23d5c <__sinit>
   23de2:	3648      	adds	r6, #72	; 0x48
   23de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   23de8:	3b01      	subs	r3, #1
   23dea:	d503      	bpl.n	23df4 <__sfp+0x28>
   23dec:	6833      	ldr	r3, [r6, #0]
   23dee:	b30b      	cbz	r3, 23e34 <__sfp+0x68>
   23df0:	6836      	ldr	r6, [r6, #0]
   23df2:	e7f7      	b.n	23de4 <__sfp+0x18>
   23df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   23df8:	b9d5      	cbnz	r5, 23e30 <__sfp+0x64>
   23dfa:	4b16      	ldr	r3, [pc, #88]	; (23e54 <__sfp+0x88>)
   23dfc:	60e3      	str	r3, [r4, #12]
   23dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23e02:	6665      	str	r5, [r4, #100]	; 0x64
   23e04:	f004 fc87 	bl	28716 <__retarget_lock_init_recursive>
   23e08:	f7ff ff96 	bl	23d38 <__sfp_lock_release>
   23e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   23e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
   23e14:	6025      	str	r5, [r4, #0]
   23e16:	61a5      	str	r5, [r4, #24]
   23e18:	2208      	movs	r2, #8
   23e1a:	4629      	mov	r1, r5
   23e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   23e20:	f008 f8f6 	bl	2c010 <memset>
   23e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   23e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   23e2c:	4620      	mov	r0, r4
   23e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23e30:	3468      	adds	r4, #104	; 0x68
   23e32:	e7d9      	b.n	23de8 <__sfp+0x1c>
   23e34:	2104      	movs	r1, #4
   23e36:	4638      	mov	r0, r7
   23e38:	f008 f9c1 	bl	2c1be <__sfmoreglue>
   23e3c:	4604      	mov	r4, r0
   23e3e:	6030      	str	r0, [r6, #0]
   23e40:	2800      	cmp	r0, #0
   23e42:	d1d5      	bne.n	23df0 <__sfp+0x24>
   23e44:	f7ff ff78 	bl	23d38 <__sfp_lock_release>
   23e48:	230c      	movs	r3, #12
   23e4a:	603b      	str	r3, [r7, #0]
   23e4c:	e7ee      	b.n	23e2c <__sfp+0x60>
   23e4e:	bf00      	nop
   23e50:	0002d578 	.word	0x0002d578
   23e54:	ffff0001 	.word	0xffff0001

00023e58 <__smakebuf_r>:
   23e58:	898b      	ldrh	r3, [r1, #12]
   23e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23e5c:	079d      	lsls	r5, r3, #30
   23e5e:	4606      	mov	r6, r0
   23e60:	460c      	mov	r4, r1
   23e62:	d507      	bpl.n	23e74 <__smakebuf_r+0x1c>
   23e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
   23e68:	6023      	str	r3, [r4, #0]
   23e6a:	6123      	str	r3, [r4, #16]
   23e6c:	2301      	movs	r3, #1
   23e6e:	6163      	str	r3, [r4, #20]
   23e70:	b002      	add	sp, #8
   23e72:	bd70      	pop	{r4, r5, r6, pc}
   23e74:	ab01      	add	r3, sp, #4
   23e76:	466a      	mov	r2, sp
   23e78:	f008 f9d6 	bl	2c228 <__swhatbuf_r>
   23e7c:	9900      	ldr	r1, [sp, #0]
   23e7e:	4605      	mov	r5, r0
   23e80:	4630      	mov	r0, r6
   23e82:	f7ff fa57 	bl	23334 <_malloc_r>
   23e86:	b948      	cbnz	r0, 23e9c <__smakebuf_r+0x44>
   23e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23e8c:	059a      	lsls	r2, r3, #22
   23e8e:	d4ef      	bmi.n	23e70 <__smakebuf_r+0x18>
   23e90:	f023 0303 	bic.w	r3, r3, #3
   23e94:	f043 0302 	orr.w	r3, r3, #2
   23e98:	81a3      	strh	r3, [r4, #12]
   23e9a:	e7e3      	b.n	23e64 <__smakebuf_r+0xc>
   23e9c:	4b0d      	ldr	r3, [pc, #52]	; (23ed4 <__smakebuf_r+0x7c>)
   23e9e:	62b3      	str	r3, [r6, #40]	; 0x28
   23ea0:	89a3      	ldrh	r3, [r4, #12]
   23ea2:	6020      	str	r0, [r4, #0]
   23ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23ea8:	81a3      	strh	r3, [r4, #12]
   23eaa:	9b00      	ldr	r3, [sp, #0]
   23eac:	6163      	str	r3, [r4, #20]
   23eae:	9b01      	ldr	r3, [sp, #4]
   23eb0:	6120      	str	r0, [r4, #16]
   23eb2:	b15b      	cbz	r3, 23ecc <__smakebuf_r+0x74>
   23eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23eb8:	4630      	mov	r0, r6
   23eba:	f000 f84d 	bl	23f58 <_isatty_r>
   23ebe:	b128      	cbz	r0, 23ecc <__smakebuf_r+0x74>
   23ec0:	89a3      	ldrh	r3, [r4, #12]
   23ec2:	f023 0303 	bic.w	r3, r3, #3
   23ec6:	f043 0301 	orr.w	r3, r3, #1
   23eca:	81a3      	strh	r3, [r4, #12]
   23ecc:	89a0      	ldrh	r0, [r4, #12]
   23ece:	4305      	orrs	r5, r0
   23ed0:	81a5      	strh	r5, [r4, #12]
   23ed2:	e7cd      	b.n	23e70 <__smakebuf_r+0x18>
   23ed4:	00023d21 	.word	0x00023d21

00023ed8 <__malloc_lock>:
   23ed8:	4801      	ldr	r0, [pc, #4]	; (23ee0 <__malloc_lock+0x8>)
   23eda:	f004 bc26 	b.w	2872a <__retarget_lock_acquire_recursive>
   23ede:	bf00      	nop
   23ee0:	20000aac 	.word	0x20000aac

00023ee4 <__malloc_unlock>:
   23ee4:	4801      	ldr	r0, [pc, #4]	; (23eec <__malloc_unlock+0x8>)
   23ee6:	f004 bc26 	b.w	28736 <__retarget_lock_release_recursive>
   23eea:	bf00      	nop
   23eec:	20000aac 	.word	0x20000aac

00023ef0 <_write_r>:
   23ef0:	b538      	push	{r3, r4, r5, lr}
   23ef2:	4d07      	ldr	r5, [pc, #28]	; (23f10 <_write_r+0x20>)
   23ef4:	4604      	mov	r4, r0
   23ef6:	4608      	mov	r0, r1
   23ef8:	4611      	mov	r1, r2
   23efa:	2200      	movs	r2, #0
   23efc:	602a      	str	r2, [r5, #0]
   23efe:	461a      	mov	r2, r3
   23f00:	f004 fbf6 	bl	286f0 <_write>
   23f04:	1c43      	adds	r3, r0, #1
   23f06:	d102      	bne.n	23f0e <_write_r+0x1e>
   23f08:	682b      	ldr	r3, [r5, #0]
   23f0a:	b103      	cbz	r3, 23f0e <_write_r+0x1e>
   23f0c:	6023      	str	r3, [r4, #0]
   23f0e:	bd38      	pop	{r3, r4, r5, pc}
   23f10:	200032bc 	.word	0x200032bc

00023f14 <_close_r>:
   23f14:	b538      	push	{r3, r4, r5, lr}
   23f16:	4d06      	ldr	r5, [pc, #24]	; (23f30 <_close_r+0x1c>)
   23f18:	2300      	movs	r3, #0
   23f1a:	4604      	mov	r4, r0
   23f1c:	4608      	mov	r0, r1
   23f1e:	602b      	str	r3, [r5, #0]
   23f20:	f004 fbea 	bl	286f8 <_close>
   23f24:	1c43      	adds	r3, r0, #1
   23f26:	d102      	bne.n	23f2e <_close_r+0x1a>
   23f28:	682b      	ldr	r3, [r5, #0]
   23f2a:	b103      	cbz	r3, 23f2e <_close_r+0x1a>
   23f2c:	6023      	str	r3, [r4, #0]
   23f2e:	bd38      	pop	{r3, r4, r5, pc}
   23f30:	200032bc 	.word	0x200032bc

00023f34 <_fstat_r>:
   23f34:	b538      	push	{r3, r4, r5, lr}
   23f36:	4d07      	ldr	r5, [pc, #28]	; (23f54 <_fstat_r+0x20>)
   23f38:	2300      	movs	r3, #0
   23f3a:	4604      	mov	r4, r0
   23f3c:	4608      	mov	r0, r1
   23f3e:	4611      	mov	r1, r2
   23f40:	602b      	str	r3, [r5, #0]
   23f42:	f004 fbe3 	bl	2870c <_fstat>
   23f46:	1c43      	adds	r3, r0, #1
   23f48:	d102      	bne.n	23f50 <_fstat_r+0x1c>
   23f4a:	682b      	ldr	r3, [r5, #0]
   23f4c:	b103      	cbz	r3, 23f50 <_fstat_r+0x1c>
   23f4e:	6023      	str	r3, [r4, #0]
   23f50:	bd38      	pop	{r3, r4, r5, pc}
   23f52:	bf00      	nop
   23f54:	200032bc 	.word	0x200032bc

00023f58 <_isatty_r>:
   23f58:	b538      	push	{r3, r4, r5, lr}
   23f5a:	4d06      	ldr	r5, [pc, #24]	; (23f74 <_isatty_r+0x1c>)
   23f5c:	2300      	movs	r3, #0
   23f5e:	4604      	mov	r4, r0
   23f60:	4608      	mov	r0, r1
   23f62:	602b      	str	r3, [r5, #0]
   23f64:	f004 fbcd 	bl	28702 <_isatty>
   23f68:	1c43      	adds	r3, r0, #1
   23f6a:	d102      	bne.n	23f72 <_isatty_r+0x1a>
   23f6c:	682b      	ldr	r3, [r5, #0]
   23f6e:	b103      	cbz	r3, 23f72 <_isatty_r+0x1a>
   23f70:	6023      	str	r3, [r4, #0]
   23f72:	bd38      	pop	{r3, r4, r5, pc}
   23f74:	200032bc 	.word	0x200032bc

00023f78 <_lseek_r>:
   23f78:	b538      	push	{r3, r4, r5, lr}
   23f7a:	4d07      	ldr	r5, [pc, #28]	; (23f98 <_lseek_r+0x20>)
   23f7c:	4604      	mov	r4, r0
   23f7e:	4608      	mov	r0, r1
   23f80:	4611      	mov	r1, r2
   23f82:	2200      	movs	r2, #0
   23f84:	602a      	str	r2, [r5, #0]
   23f86:	461a      	mov	r2, r3
   23f88:	f004 fbb9 	bl	286fe <_lseek>
   23f8c:	1c43      	adds	r3, r0, #1
   23f8e:	d102      	bne.n	23f96 <_lseek_r+0x1e>
   23f90:	682b      	ldr	r3, [r5, #0]
   23f92:	b103      	cbz	r3, 23f96 <_lseek_r+0x1e>
   23f94:	6023      	str	r3, [r4, #0]
   23f96:	bd38      	pop	{r3, r4, r5, pc}
   23f98:	200032bc 	.word	0x200032bc

00023f9c <_read_r>:
   23f9c:	b538      	push	{r3, r4, r5, lr}
   23f9e:	4d07      	ldr	r5, [pc, #28]	; (23fbc <_read_r+0x20>)
   23fa0:	4604      	mov	r4, r0
   23fa2:	4608      	mov	r0, r1
   23fa4:	4611      	mov	r1, r2
   23fa6:	2200      	movs	r2, #0
   23fa8:	602a      	str	r2, [r5, #0]
   23faa:	461a      	mov	r2, r3
   23fac:	f004 fb9c 	bl	286e8 <_read>
   23fb0:	1c43      	adds	r3, r0, #1
   23fb2:	d102      	bne.n	23fba <_read_r+0x1e>
   23fb4:	682b      	ldr	r3, [r5, #0]
   23fb6:	b103      	cbz	r3, 23fba <_read_r+0x1e>
   23fb8:	6023      	str	r3, [r4, #0]
   23fba:	bd38      	pop	{r3, r4, r5, pc}
   23fbc:	200032bc 	.word	0x200032bc

00023fc0 <nrf_cc3xx_platform_init>:
   23fc0:	b510      	push	{r4, lr}
   23fc2:	4c0c      	ldr	r4, [pc, #48]	; (23ff4 <nrf_cc3xx_platform_init+0x34>)
   23fc4:	6823      	ldr	r3, [r4, #0]
   23fc6:	b113      	cbz	r3, 23fce <nrf_cc3xx_platform_init+0xe>
   23fc8:	4b0b      	ldr	r3, [pc, #44]	; (23ff8 <nrf_cc3xx_platform_init+0x38>)
   23fca:	681b      	ldr	r3, [r3, #0]
   23fcc:	b92b      	cbnz	r3, 23fda <nrf_cc3xx_platform_init+0x1a>
   23fce:	f000 fe7d 	bl	24ccc <CC_LibInit>
   23fd2:	b930      	cbnz	r0, 23fe2 <nrf_cc3xx_platform_init+0x22>
   23fd4:	4b08      	ldr	r3, [pc, #32]	; (23ff8 <nrf_cc3xx_platform_init+0x38>)
   23fd6:	2201      	movs	r2, #1
   23fd8:	601a      	str	r2, [r3, #0]
   23fda:	2301      	movs	r3, #1
   23fdc:	6023      	str	r3, [r4, #0]
   23fde:	2000      	movs	r0, #0
   23fe0:	bd10      	pop	{r4, pc}
   23fe2:	3801      	subs	r0, #1
   23fe4:	2806      	cmp	r0, #6
   23fe6:	d901      	bls.n	23fec <nrf_cc3xx_platform_init+0x2c>
   23fe8:	4804      	ldr	r0, [pc, #16]	; (23ffc <nrf_cc3xx_platform_init+0x3c>)
   23fea:	bd10      	pop	{r4, pc}
   23fec:	4b04      	ldr	r3, [pc, #16]	; (24000 <nrf_cc3xx_platform_init+0x40>)
   23fee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   23ff2:	bd10      	pop	{r4, pc}
   23ff4:	200032c0 	.word	0x200032c0
   23ff8:	200032c4 	.word	0x200032c4
   23ffc:	ffff8ffe 	.word	0xffff8ffe
   24000:	0002d5dc 	.word	0x0002d5dc

00024004 <nrf_cc3xx_platform_abort>:
   24004:	f3bf 8f4f 	dsb	sy
   24008:	4905      	ldr	r1, [pc, #20]	; (24020 <nrf_cc3xx_platform_abort+0x1c>)
   2400a:	4b06      	ldr	r3, [pc, #24]	; (24024 <nrf_cc3xx_platform_abort+0x20>)
   2400c:	68ca      	ldr	r2, [r1, #12]
   2400e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24012:	4313      	orrs	r3, r2
   24014:	60cb      	str	r3, [r1, #12]
   24016:	f3bf 8f4f 	dsb	sy
   2401a:	bf00      	nop
   2401c:	e7fd      	b.n	2401a <nrf_cc3xx_platform_abort+0x16>
   2401e:	bf00      	nop
   24020:	e000ed00 	.word	0xe000ed00
   24024:	05fa0004 	.word	0x05fa0004

00024028 <CC_PalAbort>:
   24028:	b410      	push	{r4}
   2402a:	4b09      	ldr	r3, [pc, #36]	; (24050 <CC_PalAbort+0x28>)
   2402c:	4909      	ldr	r1, [pc, #36]	; (24054 <CC_PalAbort+0x2c>)
   2402e:	4c0a      	ldr	r4, [pc, #40]	; (24058 <CC_PalAbort+0x30>)
   24030:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   24034:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24038:	6849      	ldr	r1, [r1, #4]
   2403a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2403e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24042:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24046:	2300      	movs	r3, #0
   24048:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   2404c:	bc10      	pop	{r4}
   2404e:	4708      	bx	r1
   24050:	5002b000 	.word	0x5002b000
   24054:	200008b8 	.word	0x200008b8
   24058:	5002a000 	.word	0x5002a000

0002405c <nrf_cc3xx_platform_set_abort>:
   2405c:	e9d0 1200 	ldrd	r1, r2, [r0]
   24060:	4b01      	ldr	r3, [pc, #4]	; (24068 <nrf_cc3xx_platform_set_abort+0xc>)
   24062:	e9c3 1200 	strd	r1, r2, [r3]
   24066:	4770      	bx	lr
   24068:	200008b8 	.word	0x200008b8

0002406c <nrf_cc3xx_platform_ctr_drbg_init>:
   2406c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24070:	4c14      	ldr	r4, [pc, #80]	; (240c4 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   24072:	4e15      	ldr	r6, [pc, #84]	; (240c8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   24074:	2800      	cmp	r0, #0
   24076:	bf18      	it	ne
   24078:	4604      	movne	r4, r0
   2407a:	b083      	sub	sp, #12
   2407c:	6823      	ldr	r3, [r4, #0]
   2407e:	42b3      	cmp	r3, r6
   24080:	d01c      	beq.n	240bc <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   24082:	460d      	mov	r5, r1
   24084:	4620      	mov	r0, r4
   24086:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   2408a:	f104 0904 	add.w	r9, r4, #4
   2408e:	4617      	mov	r7, r2
   24090:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   24094:	f000 f8d0 	bl	24238 <mbedtls_platform_zeroize>
   24098:	4648      	mov	r0, r9
   2409a:	f000 fd05 	bl	24aa8 <cc_mbedtls_entropy_init>
   2409e:	4640      	mov	r0, r8
   240a0:	f000 fb32 	bl	24708 <cc_mbedtls_ctr_drbg_init>
   240a4:	4909      	ldr	r1, [pc, #36]	; (240cc <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   240a6:	9700      	str	r7, [sp, #0]
   240a8:	462b      	mov	r3, r5
   240aa:	464a      	mov	r2, r9
   240ac:	4640      	mov	r0, r8
   240ae:	f000 fb41 	bl	24734 <cc_mbedtls_ctr_drbg_seed>
   240b2:	b900      	cbnz	r0, 240b6 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   240b4:	6026      	str	r6, [r4, #0]
   240b6:	b003      	add	sp, #12
   240b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   240bc:	2000      	movs	r0, #0
   240be:	b003      	add	sp, #12
   240c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   240c4:	200032c8 	.word	0x200032c8
   240c8:	5ac9bca5 	.word	0x5ac9bca5
   240cc:	00024b29 	.word	0x00024b29

000240d0 <nrf_cc3xx_platform_ctr_drbg_get>:
   240d0:	b570      	push	{r4, r5, r6, lr}
   240d2:	4d0d      	ldr	r5, [pc, #52]	; (24108 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   240d4:	2800      	cmp	r0, #0
   240d6:	bf18      	it	ne
   240d8:	4605      	movne	r5, r0
   240da:	461e      	mov	r6, r3
   240dc:	6828      	ldr	r0, [r5, #0]
   240de:	4b0b      	ldr	r3, [pc, #44]	; (2410c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   240e0:	4298      	cmp	r0, r3
   240e2:	b082      	sub	sp, #8
   240e4:	d10d      	bne.n	24102 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   240e6:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   240ea:	2500      	movs	r5, #0
   240ec:	9500      	str	r5, [sp, #0]
   240ee:	462b      	mov	r3, r5
   240f0:	4614      	mov	r4, r2
   240f2:	f000 fb6d 	bl	247d0 <cc_mbedtls_ctr_drbg_random_with_add>
   240f6:	2800      	cmp	r0, #0
   240f8:	bf18      	it	ne
   240fa:	462c      	movne	r4, r5
   240fc:	6034      	str	r4, [r6, #0]
   240fe:	b002      	add	sp, #8
   24100:	bd70      	pop	{r4, r5, r6, pc}
   24102:	4803      	ldr	r0, [pc, #12]	; (24110 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   24104:	e7fb      	b.n	240fe <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   24106:	bf00      	nop
   24108:	200032c8 	.word	0x200032c8
   2410c:	5ac9bca5 	.word	0x5ac9bca5
   24110:	ffff8fe8 	.word	0xffff8fe8

00024114 <mutex_free>:
   24114:	b510      	push	{r4, lr}
   24116:	4604      	mov	r4, r0
   24118:	b130      	cbz	r0, 24128 <mutex_free+0x14>
   2411a:	6863      	ldr	r3, [r4, #4]
   2411c:	06db      	lsls	r3, r3, #27
   2411e:	d502      	bpl.n	24126 <mutex_free+0x12>
   24120:	2300      	movs	r3, #0
   24122:	6023      	str	r3, [r4, #0]
   24124:	6063      	str	r3, [r4, #4]
   24126:	bd10      	pop	{r4, pc}
   24128:	4b02      	ldr	r3, [pc, #8]	; (24134 <mutex_free+0x20>)
   2412a:	4803      	ldr	r0, [pc, #12]	; (24138 <mutex_free+0x24>)
   2412c:	685b      	ldr	r3, [r3, #4]
   2412e:	4798      	blx	r3
   24130:	e7f3      	b.n	2411a <mutex_free+0x6>
   24132:	bf00      	nop
   24134:	200008b8 	.word	0x200008b8
   24138:	0002d5f8 	.word	0x0002d5f8

0002413c <mutex_lock>:
   2413c:	b1b0      	cbz	r0, 2416c <mutex_lock+0x30>
   2413e:	6843      	ldr	r3, [r0, #4]
   24140:	b193      	cbz	r3, 24168 <mutex_lock+0x2c>
   24142:	06db      	lsls	r3, r3, #27
   24144:	d50e      	bpl.n	24164 <mutex_lock+0x28>
   24146:	2301      	movs	r3, #1
   24148:	e850 2f00 	ldrex	r2, [r0]
   2414c:	4619      	mov	r1, r3
   2414e:	e840 1c00 	strex	ip, r1, [r0]
   24152:	f09c 0f00 	teq	ip, #0
   24156:	d1f7      	bne.n	24148 <mutex_lock+0xc>
   24158:	2a01      	cmp	r2, #1
   2415a:	d0f5      	beq.n	24148 <mutex_lock+0xc>
   2415c:	f3bf 8f5f 	dmb	sy
   24160:	2000      	movs	r0, #0
   24162:	4770      	bx	lr
   24164:	4803      	ldr	r0, [pc, #12]	; (24174 <mutex_lock+0x38>)
   24166:	4770      	bx	lr
   24168:	4803      	ldr	r0, [pc, #12]	; (24178 <mutex_lock+0x3c>)
   2416a:	4770      	bx	lr
   2416c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24170:	4770      	bx	lr
   24172:	bf00      	nop
   24174:	ffff8fe9 	.word	0xffff8fe9
   24178:	ffff8fea 	.word	0xffff8fea

0002417c <mutex_unlock>:
   2417c:	b168      	cbz	r0, 2419a <mutex_unlock+0x1e>
   2417e:	6843      	ldr	r3, [r0, #4]
   24180:	b13b      	cbz	r3, 24192 <mutex_unlock+0x16>
   24182:	06db      	lsls	r3, r3, #27
   24184:	d507      	bpl.n	24196 <mutex_unlock+0x1a>
   24186:	f3bf 8f5f 	dmb	sy
   2418a:	2300      	movs	r3, #0
   2418c:	6003      	str	r3, [r0, #0]
   2418e:	4618      	mov	r0, r3
   24190:	4770      	bx	lr
   24192:	4803      	ldr	r0, [pc, #12]	; (241a0 <mutex_unlock+0x24>)
   24194:	4770      	bx	lr
   24196:	4803      	ldr	r0, [pc, #12]	; (241a4 <mutex_unlock+0x28>)
   24198:	4770      	bx	lr
   2419a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2419e:	4770      	bx	lr
   241a0:	ffff8fea 	.word	0xffff8fea
   241a4:	ffff8fe9 	.word	0xffff8fe9

000241a8 <mutex_init>:
   241a8:	b510      	push	{r4, lr}
   241aa:	4604      	mov	r4, r0
   241ac:	b120      	cbz	r0, 241b8 <mutex_init+0x10>
   241ae:	2200      	movs	r2, #0
   241b0:	2311      	movs	r3, #17
   241b2:	6022      	str	r2, [r4, #0]
   241b4:	6063      	str	r3, [r4, #4]
   241b6:	bd10      	pop	{r4, pc}
   241b8:	4801      	ldr	r0, [pc, #4]	; (241c0 <mutex_init+0x18>)
   241ba:	f7ff ff35 	bl	24028 <CC_PalAbort>
   241be:	e7f6      	b.n	241ae <mutex_init+0x6>
   241c0:	0002d620 	.word	0x0002d620

000241c4 <nrf_cc3xx_platform_set_mutexes>:
   241c4:	b570      	push	{r4, r5, r6, lr}
   241c6:	e9d0 2300 	ldrd	r2, r3, [r0]
   241ca:	4c13      	ldr	r4, [pc, #76]	; (24218 <nrf_cc3xx_platform_set_mutexes+0x54>)
   241cc:	4d13      	ldr	r5, [pc, #76]	; (2421c <nrf_cc3xx_platform_set_mutexes+0x58>)
   241ce:	6063      	str	r3, [r4, #4]
   241d0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   241d4:	e9c4 3002 	strd	r3, r0, [r4, #8]
   241d8:	6022      	str	r2, [r4, #0]
   241da:	4b11      	ldr	r3, [pc, #68]	; (24220 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   241dc:	6808      	ldr	r0, [r1, #0]
   241de:	6018      	str	r0, [r3, #0]
   241e0:	6848      	ldr	r0, [r1, #4]
   241e2:	6058      	str	r0, [r3, #4]
   241e4:	6888      	ldr	r0, [r1, #8]
   241e6:	6098      	str	r0, [r3, #8]
   241e8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   241ec:	60d8      	str	r0, [r3, #12]
   241ee:	6119      	str	r1, [r3, #16]
   241f0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   241f4:	06db      	lsls	r3, r3, #27
   241f6:	d50d      	bpl.n	24214 <nrf_cc3xx_platform_set_mutexes+0x50>
   241f8:	2300      	movs	r3, #0
   241fa:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   241fe:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   24202:	f505 708a 	add.w	r0, r5, #276	; 0x114
   24206:	4790      	blx	r2
   24208:	6823      	ldr	r3, [r4, #0]
   2420a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   2420e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24212:	4718      	bx	r3
   24214:	bd70      	pop	{r4, r5, r6, pc}
   24216:	bf00      	nop
   24218:	200008c8 	.word	0x200008c8
   2421c:	200032c8 	.word	0x200032c8
   24220:	200008d8 	.word	0x200008d8

00024224 <mbedtls_zeroize_internal>:
   24224:	b138      	cbz	r0, 24236 <mbedtls_zeroize_internal+0x12>
   24226:	b131      	cbz	r1, 24236 <mbedtls_zeroize_internal+0x12>
   24228:	4401      	add	r1, r0
   2422a:	2200      	movs	r2, #0
   2422c:	4603      	mov	r3, r0
   2422e:	3001      	adds	r0, #1
   24230:	4281      	cmp	r1, r0
   24232:	701a      	strb	r2, [r3, #0]
   24234:	d1fa      	bne.n	2422c <mbedtls_zeroize_internal+0x8>
   24236:	4770      	bx	lr

00024238 <mbedtls_platform_zeroize>:
   24238:	b138      	cbz	r0, 2424a <mbedtls_platform_zeroize+0x12>
   2423a:	b131      	cbz	r1, 2424a <mbedtls_platform_zeroize+0x12>
   2423c:	4401      	add	r1, r0
   2423e:	2200      	movs	r2, #0
   24240:	4603      	mov	r3, r0
   24242:	3001      	adds	r0, #1
   24244:	4288      	cmp	r0, r1
   24246:	701a      	strb	r2, [r3, #0]
   24248:	d1fa      	bne.n	24240 <mbedtls_platform_zeroize+0x8>
   2424a:	4770      	bx	lr

0002424c <block_cipher_df>:
   2424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24250:	b0b7      	sub	sp, #220	; 0xdc
   24252:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   24256:	9005      	str	r0, [sp, #20]
   24258:	f200 8147 	bhi.w	244ea <block_cipher_df+0x29e>
   2425c:	4614      	mov	r4, r2
   2425e:	460d      	mov	r5, r1
   24260:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   24264:	2100      	movs	r1, #0
   24266:	48a2      	ldr	r0, [pc, #648]	; (244f0 <block_cipher_df+0x2a4>)
   24268:	f007 fed2 	bl	2c010 <memset>
   2426c:	a819      	add	r0, sp, #100	; 0x64
   2426e:	f001 f9cb 	bl	25608 <cc_mbedtls_aes_init>
   24272:	489f      	ldr	r0, [pc, #636]	; (244f0 <block_cipher_df+0x2a4>)
   24274:	2300      	movs	r3, #0
   24276:	8203      	strh	r3, [r0, #16]
   24278:	ba63      	rev16	r3, r4
   2427a:	8243      	strh	r3, [r0, #18]
   2427c:	2320      	movs	r3, #32
   2427e:	4629      	mov	r1, r5
   24280:	75c3      	strb	r3, [r0, #23]
   24282:	4605      	mov	r5, r0
   24284:	4622      	mov	r2, r4
   24286:	3018      	adds	r0, #24
   24288:	f007 fea1 	bl	2bfce <memcpy>
   2428c:	462b      	mov	r3, r5
   2428e:	4423      	add	r3, r4
   24290:	2280      	movs	r2, #128	; 0x80
   24292:	761a      	strb	r2, [r3, #24]
   24294:	4b97      	ldr	r3, [pc, #604]	; (244f4 <block_cipher_df+0x2a8>)
   24296:	930d      	str	r3, [sp, #52]	; 0x34
   24298:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2429c:	930e      	str	r3, [sp, #56]	; 0x38
   2429e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   242a2:	930f      	str	r3, [sp, #60]	; 0x3c
   242a4:	a90d      	add	r1, sp, #52	; 0x34
   242a6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   242aa:	a819      	add	r0, sp, #100	; 0x64
   242ac:	9310      	str	r3, [sp, #64]	; 0x40
   242ae:	f001 f9c1 	bl	25634 <cc_mbedtls_aes_setkey_enc>
   242b2:	4605      	mov	r5, r0
   242b4:	2800      	cmp	r0, #0
   242b6:	f040 80f4 	bne.w	244a2 <block_cipher_df+0x256>
   242ba:	f104 0319 	add.w	r3, r4, #25
   242be:	9306      	str	r3, [sp, #24]
   242c0:	f10d 0820 	add.w	r8, sp, #32
   242c4:	ab11      	add	r3, sp, #68	; 0x44
   242c6:	9304      	str	r3, [sp, #16]
   242c8:	9307      	str	r3, [sp, #28]
   242ca:	46c1      	mov	r9, r8
   242cc:	2210      	movs	r2, #16
   242ce:	2100      	movs	r1, #0
   242d0:	4648      	mov	r0, r9
   242d2:	f007 fe9d 	bl	2c010 <memset>
   242d6:	f8df a220 	ldr.w	sl, [pc, #544]	; 244f8 <block_cipher_df+0x2ac>
   242da:	9b06      	ldr	r3, [sp, #24]
   242dc:	9300      	str	r3, [sp, #0]
   242de:	f8cd 900c 	str.w	r9, [sp, #12]
   242e2:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   242e6:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   242ea:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   242ee:	f89d 5020 	ldrb.w	r5, [sp, #32]
   242f2:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   242f6:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   242fa:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   242fe:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   24302:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   24306:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   2430a:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   2430e:	406a      	eors	r2, r5
   24310:	ea8e 0e00 	eor.w	lr, lr, r0
   24314:	9d00      	ldr	r5, [sp, #0]
   24316:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   2431a:	9202      	str	r2, [sp, #8]
   2431c:	ea8c 0c03 	eor.w	ip, ip, r3
   24320:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   24324:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   24328:	2d10      	cmp	r5, #16
   2432a:	ea80 0003 	eor.w	r0, r0, r3
   2432e:	462b      	mov	r3, r5
   24330:	bf8c      	ite	hi
   24332:	3b10      	subhi	r3, #16
   24334:	1b6b      	subls	r3, r5, r5
   24336:	9300      	str	r3, [sp, #0]
   24338:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   2433c:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   24340:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   24344:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   24348:	4061      	eors	r1, r4
   2434a:	405f      	eors	r7, r3
   2434c:	2400      	movs	r4, #0
   2434e:	406a      	eors	r2, r5
   24350:	ea8b 0b06 	eor.w	fp, fp, r6
   24354:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   24358:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   2435c:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   24360:	9601      	str	r6, [sp, #4]
   24362:	4626      	mov	r6, r4
   24364:	406b      	eors	r3, r5
   24366:	f36b 0607 	bfi	r6, fp, #0, #8
   2436a:	4625      	mov	r5, r4
   2436c:	f367 260f 	bfi	r6, r7, #8, #8
   24370:	462f      	mov	r7, r5
   24372:	f361 0707 	bfi	r7, r1, #0, #8
   24376:	9902      	ldr	r1, [sp, #8]
   24378:	f361 0507 	bfi	r5, r1, #0, #8
   2437c:	f362 250f 	bfi	r5, r2, #8, #8
   24380:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   24384:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   24388:	f363 270f 	bfi	r7, r3, #8, #8
   2438c:	ea82 0909 	eor.w	r9, r2, r9
   24390:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   24394:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   24398:	ea83 0808 	eor.w	r8, r3, r8
   2439c:	404a      	eors	r2, r1
   2439e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   243a2:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   243a6:	f36e 0407 	bfi	r4, lr, #0, #8
   243aa:	404b      	eors	r3, r1
   243ac:	f368 4717 	bfi	r7, r8, #16, #8
   243b0:	f36c 240f 	bfi	r4, ip, #8, #8
   243b4:	f363 671f 	bfi	r7, r3, #24, #8
   243b8:	9b03      	ldr	r3, [sp, #12]
   243ba:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   243be:	f8dd e004 	ldr.w	lr, [sp, #4]
   243c2:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   243c6:	ea8c 0c0e 	eor.w	ip, ip, lr
   243ca:	f36c 4617 	bfi	r6, ip, #16, #8
   243ce:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   243d2:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   243d6:	ea8c 0c08 	eor.w	ip, ip, r8
   243da:	f36c 661f 	bfi	r6, ip, #24, #8
   243de:	f369 4517 	bfi	r5, r9, #16, #8
   243e2:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   243e6:	960b      	str	r6, [sp, #44]	; 0x2c
   243e8:	f362 651f 	bfi	r5, r2, #24, #8
   243ec:	f360 4417 	bfi	r4, r0, #16, #8
   243f0:	9508      	str	r5, [sp, #32]
   243f2:	ea8c 050e 	eor.w	r5, ip, lr
   243f6:	f365 641f 	bfi	r4, r5, #24, #8
   243fa:	461a      	mov	r2, r3
   243fc:	2101      	movs	r1, #1
   243fe:	a819      	add	r0, sp, #100	; 0x64
   24400:	f10a 0a10 	add.w	sl, sl, #16
   24404:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   24408:	f001 f92e 	bl	25668 <cc_mbedtls_aes_crypt_ecb>
   2440c:	2800      	cmp	r0, #0
   2440e:	d168      	bne.n	244e2 <block_cipher_df+0x296>
   24410:	9b00      	ldr	r3, [sp, #0]
   24412:	2b00      	cmp	r3, #0
   24414:	f47f af65 	bne.w	242e2 <block_cipher_df+0x96>
   24418:	9c07      	ldr	r4, [sp, #28]
   2441a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2441e:	4620      	mov	r0, r4
   24420:	2210      	movs	r2, #16
   24422:	3410      	adds	r4, #16
   24424:	4649      	mov	r1, r9
   24426:	9407      	str	r4, [sp, #28]
   24428:	f007 fdd1 	bl	2bfce <memcpy>
   2442c:	4a30      	ldr	r2, [pc, #192]	; (244f0 <block_cipher_df+0x2a4>)
   2442e:	78d3      	ldrb	r3, [r2, #3]
   24430:	3301      	adds	r3, #1
   24432:	70d3      	strb	r3, [r2, #3]
   24434:	ab19      	add	r3, sp, #100	; 0x64
   24436:	429c      	cmp	r4, r3
   24438:	f47f af48 	bne.w	242cc <block_cipher_df+0x80>
   2443c:	9904      	ldr	r1, [sp, #16]
   2443e:	2280      	movs	r2, #128	; 0x80
   24440:	4618      	mov	r0, r3
   24442:	f001 f8f7 	bl	25634 <cc_mbedtls_aes_setkey_enc>
   24446:	46c8      	mov	r8, r9
   24448:	4605      	mov	r5, r0
   2444a:	bb70      	cbnz	r0, 244aa <block_cipher_df+0x25e>
   2444c:	9c05      	ldr	r4, [sp, #20]
   2444e:	f104 0620 	add.w	r6, r4, #32
   24452:	ab15      	add	r3, sp, #84	; 0x54
   24454:	461a      	mov	r2, r3
   24456:	2101      	movs	r1, #1
   24458:	a819      	add	r0, sp, #100	; 0x64
   2445a:	f001 f905 	bl	25668 <cc_mbedtls_aes_crypt_ecb>
   2445e:	2210      	movs	r2, #16
   24460:	4605      	mov	r5, r0
   24462:	bb10      	cbnz	r0, 244aa <block_cipher_df+0x25e>
   24464:	4620      	mov	r0, r4
   24466:	a915      	add	r1, sp, #84	; 0x54
   24468:	3410      	adds	r4, #16
   2446a:	f007 fdb0 	bl	2bfce <memcpy>
   2446e:	42b4      	cmp	r4, r6
   24470:	d1ef      	bne.n	24452 <block_cipher_df+0x206>
   24472:	a819      	add	r0, sp, #100	; 0x64
   24474:	f001 f8d8 	bl	25628 <cc_mbedtls_aes_free>
   24478:	481d      	ldr	r0, [pc, #116]	; (244f0 <block_cipher_df+0x2a4>)
   2447a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2447e:	f7ff fedb 	bl	24238 <mbedtls_platform_zeroize>
   24482:	9804      	ldr	r0, [sp, #16]
   24484:	2120      	movs	r1, #32
   24486:	f7ff fed7 	bl	24238 <mbedtls_platform_zeroize>
   2448a:	a80d      	add	r0, sp, #52	; 0x34
   2448c:	2110      	movs	r1, #16
   2448e:	f7ff fed3 	bl	24238 <mbedtls_platform_zeroize>
   24492:	4640      	mov	r0, r8
   24494:	2110      	movs	r1, #16
   24496:	f7ff fecf 	bl	24238 <mbedtls_platform_zeroize>
   2449a:	4628      	mov	r0, r5
   2449c:	b037      	add	sp, #220	; 0xdc
   2449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244a2:	ab11      	add	r3, sp, #68	; 0x44
   244a4:	9304      	str	r3, [sp, #16]
   244a6:	f10d 0820 	add.w	r8, sp, #32
   244aa:	a819      	add	r0, sp, #100	; 0x64
   244ac:	f001 f8bc 	bl	25628 <cc_mbedtls_aes_free>
   244b0:	480f      	ldr	r0, [pc, #60]	; (244f0 <block_cipher_df+0x2a4>)
   244b2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   244b6:	f7ff febf 	bl	24238 <mbedtls_platform_zeroize>
   244ba:	9804      	ldr	r0, [sp, #16]
   244bc:	2120      	movs	r1, #32
   244be:	f7ff febb 	bl	24238 <mbedtls_platform_zeroize>
   244c2:	a80d      	add	r0, sp, #52	; 0x34
   244c4:	2110      	movs	r1, #16
   244c6:	f7ff feb7 	bl	24238 <mbedtls_platform_zeroize>
   244ca:	4640      	mov	r0, r8
   244cc:	2110      	movs	r1, #16
   244ce:	f7ff feb3 	bl	24238 <mbedtls_platform_zeroize>
   244d2:	9805      	ldr	r0, [sp, #20]
   244d4:	2120      	movs	r1, #32
   244d6:	f7ff feaf 	bl	24238 <mbedtls_platform_zeroize>
   244da:	4628      	mov	r0, r5
   244dc:	b037      	add	sp, #220	; 0xdc
   244de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
   244e6:	4605      	mov	r5, r0
   244e8:	e7df      	b.n	244aa <block_cipher_df+0x25e>
   244ea:	f06f 0537 	mvn.w	r5, #55	; 0x37
   244ee:	e7f4      	b.n	244da <block_cipher_df+0x28e>
   244f0:	20003498 	.word	0x20003498
   244f4:	03020100 	.word	0x03020100
   244f8:	200034a8 	.word	0x200034a8

000244fc <ctr_drbg_update_internal>:
   244fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24500:	b088      	sub	sp, #32
   24502:	4604      	mov	r4, r0
   24504:	460d      	mov	r5, r1
   24506:	2220      	movs	r2, #32
   24508:	2100      	movs	r1, #0
   2450a:	4668      	mov	r0, sp
   2450c:	f007 fd80 	bl	2c010 <memset>
   24510:	f104 0620 	add.w	r6, r4, #32
   24514:	466f      	mov	r7, sp
   24516:	7be2      	ldrb	r2, [r4, #15]
   24518:	3201      	adds	r2, #1
   2451a:	b2d2      	uxtb	r2, r2
   2451c:	73e2      	strb	r2, [r4, #15]
   2451e:	2a00      	cmp	r2, #0
   24520:	d14d      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   24522:	7ba2      	ldrb	r2, [r4, #14]
   24524:	3201      	adds	r2, #1
   24526:	b2d2      	uxtb	r2, r2
   24528:	73a2      	strb	r2, [r4, #14]
   2452a:	2a00      	cmp	r2, #0
   2452c:	d147      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   2452e:	7b63      	ldrb	r3, [r4, #13]
   24530:	3301      	adds	r3, #1
   24532:	b2db      	uxtb	r3, r3
   24534:	7363      	strb	r3, [r4, #13]
   24536:	2b00      	cmp	r3, #0
   24538:	d141      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   2453a:	7b23      	ldrb	r3, [r4, #12]
   2453c:	3301      	adds	r3, #1
   2453e:	b2db      	uxtb	r3, r3
   24540:	7323      	strb	r3, [r4, #12]
   24542:	2b00      	cmp	r3, #0
   24544:	d13b      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   24546:	7ae3      	ldrb	r3, [r4, #11]
   24548:	3301      	adds	r3, #1
   2454a:	b2db      	uxtb	r3, r3
   2454c:	72e3      	strb	r3, [r4, #11]
   2454e:	2b00      	cmp	r3, #0
   24550:	d135      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   24552:	7aa3      	ldrb	r3, [r4, #10]
   24554:	3301      	adds	r3, #1
   24556:	b2db      	uxtb	r3, r3
   24558:	72a3      	strb	r3, [r4, #10]
   2455a:	2b00      	cmp	r3, #0
   2455c:	d12f      	bne.n	245be <ctr_drbg_update_internal+0xc2>
   2455e:	7a63      	ldrb	r3, [r4, #9]
   24560:	3301      	adds	r3, #1
   24562:	b2db      	uxtb	r3, r3
   24564:	7263      	strb	r3, [r4, #9]
   24566:	bb53      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   24568:	7a23      	ldrb	r3, [r4, #8]
   2456a:	3301      	adds	r3, #1
   2456c:	b2db      	uxtb	r3, r3
   2456e:	7223      	strb	r3, [r4, #8]
   24570:	bb2b      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   24572:	79e3      	ldrb	r3, [r4, #7]
   24574:	3301      	adds	r3, #1
   24576:	b2db      	uxtb	r3, r3
   24578:	71e3      	strb	r3, [r4, #7]
   2457a:	bb03      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   2457c:	79a3      	ldrb	r3, [r4, #6]
   2457e:	3301      	adds	r3, #1
   24580:	b2db      	uxtb	r3, r3
   24582:	71a3      	strb	r3, [r4, #6]
   24584:	b9db      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   24586:	7963      	ldrb	r3, [r4, #5]
   24588:	3301      	adds	r3, #1
   2458a:	b2db      	uxtb	r3, r3
   2458c:	7163      	strb	r3, [r4, #5]
   2458e:	b9b3      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   24590:	7923      	ldrb	r3, [r4, #4]
   24592:	3301      	adds	r3, #1
   24594:	b2db      	uxtb	r3, r3
   24596:	7123      	strb	r3, [r4, #4]
   24598:	b98b      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   2459a:	78e3      	ldrb	r3, [r4, #3]
   2459c:	3301      	adds	r3, #1
   2459e:	b2db      	uxtb	r3, r3
   245a0:	70e3      	strb	r3, [r4, #3]
   245a2:	b963      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   245a4:	78a3      	ldrb	r3, [r4, #2]
   245a6:	3301      	adds	r3, #1
   245a8:	b2db      	uxtb	r3, r3
   245aa:	70a3      	strb	r3, [r4, #2]
   245ac:	b93b      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   245ae:	7863      	ldrb	r3, [r4, #1]
   245b0:	3301      	adds	r3, #1
   245b2:	b2db      	uxtb	r3, r3
   245b4:	7063      	strb	r3, [r4, #1]
   245b6:	b913      	cbnz	r3, 245be <ctr_drbg_update_internal+0xc2>
   245b8:	7823      	ldrb	r3, [r4, #0]
   245ba:	3301      	adds	r3, #1
   245bc:	7023      	strb	r3, [r4, #0]
   245be:	463b      	mov	r3, r7
   245c0:	4622      	mov	r2, r4
   245c2:	2101      	movs	r1, #1
   245c4:	4630      	mov	r0, r6
   245c6:	f001 f84f 	bl	25668 <cc_mbedtls_aes_crypt_ecb>
   245ca:	4680      	mov	r8, r0
   245cc:	bb50      	cbnz	r0, 24624 <ctr_drbg_update_internal+0x128>
   245ce:	3710      	adds	r7, #16
   245d0:	ab08      	add	r3, sp, #32
   245d2:	429f      	cmp	r7, r3
   245d4:	d19f      	bne.n	24516 <ctr_drbg_update_internal+0x1a>
   245d6:	9a00      	ldr	r2, [sp, #0]
   245d8:	682b      	ldr	r3, [r5, #0]
   245da:	9906      	ldr	r1, [sp, #24]
   245dc:	4053      	eors	r3, r2
   245de:	9300      	str	r3, [sp, #0]
   245e0:	9a01      	ldr	r2, [sp, #4]
   245e2:	686b      	ldr	r3, [r5, #4]
   245e4:	4053      	eors	r3, r2
   245e6:	9301      	str	r3, [sp, #4]
   245e8:	9a02      	ldr	r2, [sp, #8]
   245ea:	68ab      	ldr	r3, [r5, #8]
   245ec:	4053      	eors	r3, r2
   245ee:	9302      	str	r3, [sp, #8]
   245f0:	9a03      	ldr	r2, [sp, #12]
   245f2:	68eb      	ldr	r3, [r5, #12]
   245f4:	4053      	eors	r3, r2
   245f6:	9303      	str	r3, [sp, #12]
   245f8:	9a04      	ldr	r2, [sp, #16]
   245fa:	692b      	ldr	r3, [r5, #16]
   245fc:	4053      	eors	r3, r2
   245fe:	9304      	str	r3, [sp, #16]
   24600:	9a05      	ldr	r2, [sp, #20]
   24602:	696b      	ldr	r3, [r5, #20]
   24604:	4053      	eors	r3, r2
   24606:	69aa      	ldr	r2, [r5, #24]
   24608:	9305      	str	r3, [sp, #20]
   2460a:	404a      	eors	r2, r1
   2460c:	69eb      	ldr	r3, [r5, #28]
   2460e:	9206      	str	r2, [sp, #24]
   24610:	9a07      	ldr	r2, [sp, #28]
   24612:	4630      	mov	r0, r6
   24614:	4053      	eors	r3, r2
   24616:	4669      	mov	r1, sp
   24618:	2280      	movs	r2, #128	; 0x80
   2461a:	9307      	str	r3, [sp, #28]
   2461c:	f001 f80a 	bl	25634 <cc_mbedtls_aes_setkey_enc>
   24620:	4680      	mov	r8, r0
   24622:	b138      	cbz	r0, 24634 <ctr_drbg_update_internal+0x138>
   24624:	4668      	mov	r0, sp
   24626:	2120      	movs	r1, #32
   24628:	f7ff fe06 	bl	24238 <mbedtls_platform_zeroize>
   2462c:	4640      	mov	r0, r8
   2462e:	b008      	add	sp, #32
   24630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24634:	2210      	movs	r2, #16
   24636:	eb0d 0102 	add.w	r1, sp, r2
   2463a:	4620      	mov	r0, r4
   2463c:	f007 fcc7 	bl	2bfce <memcpy>
   24640:	e7f0      	b.n	24624 <ctr_drbg_update_internal+0x128>
   24642:	bf00      	nop

00024644 <mbedtls_ctr_drbg_reseed_internal>:
   24644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24648:	4604      	mov	r4, r0
   2464a:	6980      	ldr	r0, [r0, #24]
   2464c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   24650:	d852      	bhi.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   24652:	461d      	mov	r5, r3
   24654:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   24658:	42ab      	cmp	r3, r5
   2465a:	d34d      	bcc.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2465c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   24660:	1a18      	subs	r0, r3, r0
   24662:	4290      	cmp	r0, r2
   24664:	4616      	mov	r6, r2
   24666:	d347      	bcc.n	246f8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   24668:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24704 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   2466c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   24670:	460f      	mov	r7, r1
   24672:	4648      	mov	r0, r9
   24674:	2100      	movs	r1, #0
   24676:	f007 fccb 	bl	2c010 <memset>
   2467a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2467e:	69a2      	ldr	r2, [r4, #24]
   24680:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   24684:	4649      	mov	r1, r9
   24686:	4798      	blx	r3
   24688:	2800      	cmp	r0, #0
   2468a:	d138      	bne.n	246fe <mbedtls_ctr_drbg_reseed_internal+0xba>
   2468c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   24690:	b13d      	cbz	r5, 246a2 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   24692:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   24696:	462a      	mov	r2, r5
   24698:	eb09 0108 	add.w	r1, r9, r8
   2469c:	4798      	blx	r3
   2469e:	bb70      	cbnz	r0, 246fe <mbedtls_ctr_drbg_reseed_internal+0xba>
   246a0:	44a8      	add	r8, r5
   246a2:	b107      	cbz	r7, 246a6 <mbedtls_ctr_drbg_reseed_internal+0x62>
   246a4:	b9c6      	cbnz	r6, 246d8 <mbedtls_ctr_drbg_reseed_internal+0x94>
   246a6:	4917      	ldr	r1, [pc, #92]	; (24704 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246a8:	4642      	mov	r2, r8
   246aa:	4608      	mov	r0, r1
   246ac:	f7ff fdce 	bl	2424c <block_cipher_df>
   246b0:	4605      	mov	r5, r0
   246b2:	b138      	cbz	r0, 246c4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   246b4:	4813      	ldr	r0, [pc, #76]	; (24704 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246b6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   246ba:	f7ff fdbd 	bl	24238 <mbedtls_platform_zeroize>
   246be:	4628      	mov	r0, r5
   246c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   246c4:	490f      	ldr	r1, [pc, #60]	; (24704 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246c6:	4620      	mov	r0, r4
   246c8:	f7ff ff18 	bl	244fc <ctr_drbg_update_internal>
   246cc:	4605      	mov	r5, r0
   246ce:	2800      	cmp	r0, #0
   246d0:	d1f0      	bne.n	246b4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   246d2:	2301      	movs	r3, #1
   246d4:	6123      	str	r3, [r4, #16]
   246d6:	e7ed      	b.n	246b4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   246d8:	eb09 0008 	add.w	r0, r9, r8
   246dc:	4639      	mov	r1, r7
   246de:	4632      	mov	r2, r6
   246e0:	f007 fc75 	bl	2bfce <memcpy>
   246e4:	4907      	ldr	r1, [pc, #28]	; (24704 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   246e6:	44b0      	add	r8, r6
   246e8:	4642      	mov	r2, r8
   246ea:	4608      	mov	r0, r1
   246ec:	f7ff fdae 	bl	2424c <block_cipher_df>
   246f0:	4605      	mov	r5, r0
   246f2:	2800      	cmp	r0, #0
   246f4:	d1de      	bne.n	246b4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   246f6:	e7e5      	b.n	246c4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   246f8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   246fc:	e7df      	b.n	246be <mbedtls_ctr_drbg_reseed_internal+0x7a>
   246fe:	f06f 0533 	mvn.w	r5, #51	; 0x33
   24702:	e7dc      	b.n	246be <mbedtls_ctr_drbg_reseed_internal+0x7a>
   24704:	20003638 	.word	0x20003638

00024708 <cc_mbedtls_ctr_drbg_init>:
   24708:	b510      	push	{r4, lr}
   2470a:	22a4      	movs	r2, #164	; 0xa4
   2470c:	4604      	mov	r4, r0
   2470e:	2100      	movs	r1, #0
   24710:	f007 fc7e 	bl	2c010 <memset>
   24714:	4b06      	ldr	r3, [pc, #24]	; (24730 <cc_mbedtls_ctr_drbg_init+0x28>)
   24716:	f04f 31ff 	mov.w	r1, #4294967295
   2471a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2471e:	6121      	str	r1, [r4, #16]
   24720:	61e2      	str	r2, [r4, #28]
   24722:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   24726:	681b      	ldr	r3, [r3, #0]
   24728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2472c:	4718      	bx	r3
   2472e:	bf00      	nop
   24730:	2000091c 	.word	0x2000091c

00024734 <cc_mbedtls_ctr_drbg_seed>:
   24734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24738:	b085      	sub	sp, #20
   2473a:	4605      	mov	r5, r0
   2473c:	460f      	mov	r7, r1
   2473e:	4616      	mov	r6, r2
   24740:	2100      	movs	r1, #0
   24742:	2210      	movs	r2, #16
   24744:	4668      	mov	r0, sp
   24746:	4699      	mov	r9, r3
   24748:	f007 fc62 	bl	2c010 <memset>
   2474c:	4b1e      	ldr	r3, [pc, #120]	; (247c8 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2474e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   24752:	681b      	ldr	r3, [r3, #0]
   24754:	4640      	mov	r0, r8
   24756:	4798      	blx	r3
   24758:	b120      	cbz	r0, 24764 <cc_mbedtls_ctr_drbg_seed+0x30>
   2475a:	4604      	mov	r4, r0
   2475c:	4620      	mov	r0, r4
   2475e:	b005      	add	sp, #20
   24760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24764:	f105 0420 	add.w	r4, r5, #32
   24768:	4620      	mov	r0, r4
   2476a:	f000 ff4d 	bl	25608 <cc_mbedtls_aes_init>
   2476e:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   24772:	69ae      	ldr	r6, [r5, #24]
   24774:	692b      	ldr	r3, [r5, #16]
   24776:	b9ee      	cbnz	r6, 247b4 <cc_mbedtls_ctr_drbg_seed+0x80>
   24778:	2220      	movs	r2, #32
   2477a:	2b00      	cmp	r3, #0
   2477c:	61aa      	str	r2, [r5, #24]
   2477e:	db20      	blt.n	247c2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   24780:	461e      	mov	r6, r3
   24782:	4620      	mov	r0, r4
   24784:	4669      	mov	r1, sp
   24786:	2280      	movs	r2, #128	; 0x80
   24788:	f000 ff54 	bl	25634 <cc_mbedtls_aes_setkey_enc>
   2478c:	4604      	mov	r4, r0
   2478e:	b930      	cbnz	r0, 2479e <cc_mbedtls_ctr_drbg_seed+0x6a>
   24790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24792:	4633      	mov	r3, r6
   24794:	4649      	mov	r1, r9
   24796:	4628      	mov	r0, r5
   24798:	f7ff ff54 	bl	24644 <mbedtls_ctr_drbg_reseed_internal>
   2479c:	4604      	mov	r4, r0
   2479e:	4b0b      	ldr	r3, [pc, #44]	; (247cc <cc_mbedtls_ctr_drbg_seed+0x98>)
   247a0:	4640      	mov	r0, r8
   247a2:	681b      	ldr	r3, [r3, #0]
   247a4:	4798      	blx	r3
   247a6:	2800      	cmp	r0, #0
   247a8:	bf18      	it	ne
   247aa:	4604      	movne	r4, r0
   247ac:	4620      	mov	r0, r4
   247ae:	b005      	add	sp, #20
   247b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247b4:	2b00      	cmp	r3, #0
   247b6:	dae3      	bge.n	24780 <cc_mbedtls_ctr_drbg_seed+0x4c>
   247b8:	2e17      	cmp	r6, #23
   247ba:	d802      	bhi.n	247c2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   247bc:	3601      	adds	r6, #1
   247be:	0876      	lsrs	r6, r6, #1
   247c0:	e7df      	b.n	24782 <cc_mbedtls_ctr_drbg_seed+0x4e>
   247c2:	2600      	movs	r6, #0
   247c4:	e7dd      	b.n	24782 <cc_mbedtls_ctr_drbg_seed+0x4e>
   247c6:	bf00      	nop
   247c8:	20000920 	.word	0x20000920
   247cc:	20000924 	.word	0x20000924

000247d0 <cc_mbedtls_ctr_drbg_random_with_add>:
   247d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247d4:	b08d      	sub	sp, #52	; 0x34
   247d6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   247da:	9f16      	ldr	r7, [sp, #88]	; 0x58
   247dc:	f200 80e3 	bhi.w	249a6 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   247e0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   247e4:	f200 80dc 	bhi.w	249a0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   247e8:	4604      	mov	r4, r0
   247ea:	4615      	mov	r5, r2
   247ec:	460e      	mov	r6, r1
   247ee:	2220      	movs	r2, #32
   247f0:	2100      	movs	r1, #0
   247f2:	a804      	add	r0, sp, #16
   247f4:	4698      	mov	r8, r3
   247f6:	f007 fc0b 	bl	2c010 <memset>
   247fa:	4b6c      	ldr	r3, [pc, #432]	; (249ac <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   247fc:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   24800:	681b      	ldr	r3, [r3, #0]
   24802:	4648      	mov	r0, r9
   24804:	4798      	blx	r3
   24806:	4683      	mov	fp, r0
   24808:	2800      	cmp	r0, #0
   2480a:	f040 8092 	bne.w	24932 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2480e:	6922      	ldr	r2, [r4, #16]
   24810:	69e3      	ldr	r3, [r4, #28]
   24812:	429a      	cmp	r2, r3
   24814:	f300 8091 	bgt.w	2493a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   24818:	6963      	ldr	r3, [r4, #20]
   2481a:	2b00      	cmp	r3, #0
   2481c:	f040 808d 	bne.w	2493a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   24820:	2f00      	cmp	r7, #0
   24822:	f040 80a9 	bne.w	24978 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   24826:	f8df a188 	ldr.w	sl, [pc, #392]	; 249b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2482a:	466f      	mov	r7, sp
   2482c:	2d00      	cmp	r5, #0
   2482e:	f000 8098 	beq.w	24962 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   24832:	f104 0820 	add.w	r8, r4, #32
   24836:	466f      	mov	r7, sp
   24838:	e00e      	b.n	24858 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2483a:	2d10      	cmp	r5, #16
   2483c:	46ab      	mov	fp, r5
   2483e:	bf28      	it	cs
   24840:	f04f 0b10 	movcs.w	fp, #16
   24844:	4630      	mov	r0, r6
   24846:	465a      	mov	r2, fp
   24848:	4639      	mov	r1, r7
   2484a:	f007 fbc0 	bl	2bfce <memcpy>
   2484e:	ebb5 050b 	subs.w	r5, r5, fp
   24852:	445e      	add	r6, fp
   24854:	f000 8085 	beq.w	24962 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   24858:	7be3      	ldrb	r3, [r4, #15]
   2485a:	3301      	adds	r3, #1
   2485c:	b2db      	uxtb	r3, r3
   2485e:	73e3      	strb	r3, [r4, #15]
   24860:	2b00      	cmp	r3, #0
   24862:	d14d      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24864:	7ba3      	ldrb	r3, [r4, #14]
   24866:	3301      	adds	r3, #1
   24868:	b2db      	uxtb	r3, r3
   2486a:	73a3      	strb	r3, [r4, #14]
   2486c:	2b00      	cmp	r3, #0
   2486e:	d147      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24870:	7b63      	ldrb	r3, [r4, #13]
   24872:	3301      	adds	r3, #1
   24874:	b2db      	uxtb	r3, r3
   24876:	7363      	strb	r3, [r4, #13]
   24878:	2b00      	cmp	r3, #0
   2487a:	d141      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2487c:	7b23      	ldrb	r3, [r4, #12]
   2487e:	3301      	adds	r3, #1
   24880:	b2db      	uxtb	r3, r3
   24882:	7323      	strb	r3, [r4, #12]
   24884:	2b00      	cmp	r3, #0
   24886:	d13b      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24888:	7ae3      	ldrb	r3, [r4, #11]
   2488a:	3301      	adds	r3, #1
   2488c:	b2db      	uxtb	r3, r3
   2488e:	72e3      	strb	r3, [r4, #11]
   24890:	2b00      	cmp	r3, #0
   24892:	d135      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24894:	7aa3      	ldrb	r3, [r4, #10]
   24896:	3301      	adds	r3, #1
   24898:	b2db      	uxtb	r3, r3
   2489a:	72a3      	strb	r3, [r4, #10]
   2489c:	2b00      	cmp	r3, #0
   2489e:	d12f      	bne.n	24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248a0:	7a63      	ldrb	r3, [r4, #9]
   248a2:	3301      	adds	r3, #1
   248a4:	b2db      	uxtb	r3, r3
   248a6:	7263      	strb	r3, [r4, #9]
   248a8:	bb53      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248aa:	7a23      	ldrb	r3, [r4, #8]
   248ac:	3301      	adds	r3, #1
   248ae:	b2db      	uxtb	r3, r3
   248b0:	7223      	strb	r3, [r4, #8]
   248b2:	bb2b      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248b4:	79e3      	ldrb	r3, [r4, #7]
   248b6:	3301      	adds	r3, #1
   248b8:	b2db      	uxtb	r3, r3
   248ba:	71e3      	strb	r3, [r4, #7]
   248bc:	bb03      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248be:	79a3      	ldrb	r3, [r4, #6]
   248c0:	3301      	adds	r3, #1
   248c2:	b2db      	uxtb	r3, r3
   248c4:	71a3      	strb	r3, [r4, #6]
   248c6:	b9db      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248c8:	7963      	ldrb	r3, [r4, #5]
   248ca:	3301      	adds	r3, #1
   248cc:	b2db      	uxtb	r3, r3
   248ce:	7163      	strb	r3, [r4, #5]
   248d0:	b9b3      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248d2:	7923      	ldrb	r3, [r4, #4]
   248d4:	3301      	adds	r3, #1
   248d6:	b2db      	uxtb	r3, r3
   248d8:	7123      	strb	r3, [r4, #4]
   248da:	b98b      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248dc:	78e3      	ldrb	r3, [r4, #3]
   248de:	3301      	adds	r3, #1
   248e0:	b2db      	uxtb	r3, r3
   248e2:	70e3      	strb	r3, [r4, #3]
   248e4:	b963      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248e6:	78a3      	ldrb	r3, [r4, #2]
   248e8:	3301      	adds	r3, #1
   248ea:	b2db      	uxtb	r3, r3
   248ec:	70a3      	strb	r3, [r4, #2]
   248ee:	b93b      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248f0:	7863      	ldrb	r3, [r4, #1]
   248f2:	3301      	adds	r3, #1
   248f4:	b2db      	uxtb	r3, r3
   248f6:	7063      	strb	r3, [r4, #1]
   248f8:	b913      	cbnz	r3, 24900 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   248fa:	7823      	ldrb	r3, [r4, #0]
   248fc:	3301      	adds	r3, #1
   248fe:	7023      	strb	r3, [r4, #0]
   24900:	463b      	mov	r3, r7
   24902:	4622      	mov	r2, r4
   24904:	2101      	movs	r1, #1
   24906:	4640      	mov	r0, r8
   24908:	f000 feae 	bl	25668 <cc_mbedtls_aes_crypt_ecb>
   2490c:	4683      	mov	fp, r0
   2490e:	2800      	cmp	r0, #0
   24910:	d093      	beq.n	2483a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   24912:	f8da 3000 	ldr.w	r3, [sl]
   24916:	4648      	mov	r0, r9
   24918:	4798      	blx	r3
   2491a:	2120      	movs	r1, #32
   2491c:	4603      	mov	r3, r0
   2491e:	a804      	add	r0, sp, #16
   24920:	2b00      	cmp	r3, #0
   24922:	bf18      	it	ne
   24924:	469b      	movne	fp, r3
   24926:	f7ff fc87 	bl	24238 <mbedtls_platform_zeroize>
   2492a:	2110      	movs	r1, #16
   2492c:	4638      	mov	r0, r7
   2492e:	f7ff fc83 	bl	24238 <mbedtls_platform_zeroize>
   24932:	4658      	mov	r0, fp
   24934:	b00d      	add	sp, #52	; 0x34
   24936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2493a:	463a      	mov	r2, r7
   2493c:	4641      	mov	r1, r8
   2493e:	2300      	movs	r3, #0
   24940:	4620      	mov	r0, r4
   24942:	f7ff fe7f 	bl	24644 <mbedtls_ctr_drbg_reseed_internal>
   24946:	f8df a068 	ldr.w	sl, [pc, #104]	; 249b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2494a:	2800      	cmp	r0, #0
   2494c:	f43f af6d 	beq.w	2482a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24950:	f8da 3000 	ldr.w	r3, [sl]
   24954:	4648      	mov	r0, r9
   24956:	4798      	blx	r3
   24958:	4683      	mov	fp, r0
   2495a:	2800      	cmp	r0, #0
   2495c:	f43f af65 	beq.w	2482a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24960:	e7e7      	b.n	24932 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24962:	a904      	add	r1, sp, #16
   24964:	4620      	mov	r0, r4
   24966:	f7ff fdc9 	bl	244fc <ctr_drbg_update_internal>
   2496a:	4683      	mov	fp, r0
   2496c:	2800      	cmp	r0, #0
   2496e:	d1d0      	bne.n	24912 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24970:	6923      	ldr	r3, [r4, #16]
   24972:	3301      	adds	r3, #1
   24974:	6123      	str	r3, [r4, #16]
   24976:	e7cc      	b.n	24912 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24978:	463a      	mov	r2, r7
   2497a:	4641      	mov	r1, r8
   2497c:	a804      	add	r0, sp, #16
   2497e:	f7ff fc65 	bl	2424c <block_cipher_df>
   24982:	4683      	mov	fp, r0
   24984:	b118      	cbz	r0, 2498e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   24986:	f8df a028 	ldr.w	sl, [pc, #40]	; 249b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2498a:	466f      	mov	r7, sp
   2498c:	e7c1      	b.n	24912 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2498e:	a904      	add	r1, sp, #16
   24990:	4620      	mov	r0, r4
   24992:	f7ff fdb3 	bl	244fc <ctr_drbg_update_internal>
   24996:	4683      	mov	fp, r0
   24998:	2800      	cmp	r0, #0
   2499a:	f43f af44 	beq.w	24826 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   2499e:	e7f2      	b.n	24986 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   249a0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   249a4:	e7c5      	b.n	24932 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   249a6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   249aa:	e7c2      	b.n	24932 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   249ac:	20000920 	.word	0x20000920
   249b0:	20000924 	.word	0x20000924

000249b4 <entropy_update>:
   249b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   249b8:	2b20      	cmp	r3, #32
   249ba:	b08b      	sub	sp, #44	; 0x2c
   249bc:	461d      	mov	r5, r3
   249be:	4606      	mov	r6, r0
   249c0:	4688      	mov	r8, r1
   249c2:	4691      	mov	r9, r2
   249c4:	d826      	bhi.n	24a14 <entropy_update+0x60>
   249c6:	b2db      	uxtb	r3, r3
   249c8:	af02      	add	r7, sp, #8
   249ca:	f88d 8004 	strb.w	r8, [sp, #4]
   249ce:	46b0      	mov	r8, r6
   249d0:	f88d 3005 	strb.w	r3, [sp, #5]
   249d4:	f858 1b04 	ldr.w	r1, [r8], #4
   249d8:	b921      	cbnz	r1, 249e4 <entropy_update+0x30>
   249da:	4640      	mov	r0, r8
   249dc:	f000 fe88 	bl	256f0 <cc_mbedtls_sha256_starts>
   249e0:	4604      	mov	r4, r0
   249e2:	b940      	cbnz	r0, 249f6 <entropy_update+0x42>
   249e4:	2301      	movs	r3, #1
   249e6:	6033      	str	r3, [r6, #0]
   249e8:	2202      	movs	r2, #2
   249ea:	a901      	add	r1, sp, #4
   249ec:	4640      	mov	r0, r8
   249ee:	f000 fe93 	bl	25718 <cc_mbedtls_sha256_update>
   249f2:	4604      	mov	r4, r0
   249f4:	b138      	cbz	r0, 24a06 <entropy_update+0x52>
   249f6:	4638      	mov	r0, r7
   249f8:	2120      	movs	r1, #32
   249fa:	f7ff fc1d 	bl	24238 <mbedtls_platform_zeroize>
   249fe:	4620      	mov	r0, r4
   24a00:	b00b      	add	sp, #44	; 0x2c
   24a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24a06:	462a      	mov	r2, r5
   24a08:	4649      	mov	r1, r9
   24a0a:	4640      	mov	r0, r8
   24a0c:	f000 fe84 	bl	25718 <cc_mbedtls_sha256_update>
   24a10:	4604      	mov	r4, r0
   24a12:	e7f0      	b.n	249f6 <entropy_update+0x42>
   24a14:	af02      	add	r7, sp, #8
   24a16:	4619      	mov	r1, r3
   24a18:	4610      	mov	r0, r2
   24a1a:	2300      	movs	r3, #0
   24a1c:	463a      	mov	r2, r7
   24a1e:	f001 f803 	bl	25a28 <cc_mbedtls_sha256>
   24a22:	4604      	mov	r4, r0
   24a24:	2800      	cmp	r0, #0
   24a26:	d1e6      	bne.n	249f6 <entropy_update+0x42>
   24a28:	2320      	movs	r3, #32
   24a2a:	46b9      	mov	r9, r7
   24a2c:	461d      	mov	r5, r3
   24a2e:	e7cc      	b.n	249ca <entropy_update+0x16>

00024a30 <entropy_gather_internal.part.0>:
   24a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a32:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   24a36:	b0a7      	sub	sp, #156	; 0x9c
   24a38:	2b00      	cmp	r3, #0
   24a3a:	bfd8      	it	le
   24a3c:	ae02      	addle	r6, sp, #8
   24a3e:	dd2c      	ble.n	24a9a <entropy_gather_internal.part.0+0x6a>
   24a40:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   24a44:	4605      	mov	r5, r0
   24a46:	2300      	movs	r3, #0
   24a48:	ae02      	add	r6, sp, #8
   24a4a:	9301      	str	r3, [sp, #4]
   24a4c:	f1a4 0701 	sub.w	r7, r4, #1
   24a50:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   24a54:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   24a58:	ab01      	add	r3, sp, #4
   24a5a:	2290      	movs	r2, #144	; 0x90
   24a5c:	4631      	mov	r1, r6
   24a5e:	47a0      	blx	r4
   24a60:	fab7 f787 	clz	r7, r7
   24a64:	097f      	lsrs	r7, r7, #5
   24a66:	4604      	mov	r4, r0
   24a68:	b910      	cbnz	r0, 24a70 <entropy_gather_internal.part.0+0x40>
   24a6a:	9b01      	ldr	r3, [sp, #4]
   24a6c:	b93b      	cbnz	r3, 24a7e <entropy_gather_internal.part.0+0x4e>
   24a6e:	b1a7      	cbz	r7, 24a9a <entropy_gather_internal.part.0+0x6a>
   24a70:	4630      	mov	r0, r6
   24a72:	2190      	movs	r1, #144	; 0x90
   24a74:	f7ff fbe0 	bl	24238 <mbedtls_platform_zeroize>
   24a78:	4620      	mov	r0, r4
   24a7a:	b027      	add	sp, #156	; 0x9c
   24a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24a7e:	4601      	mov	r1, r0
   24a80:	4632      	mov	r2, r6
   24a82:	4628      	mov	r0, r5
   24a84:	f7ff ff96 	bl	249b4 <entropy_update>
   24a88:	b950      	cbnz	r0, 24aa0 <entropy_gather_internal.part.0+0x70>
   24a8a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24a8e:	9a01      	ldr	r2, [sp, #4]
   24a90:	4413      	add	r3, r2
   24a92:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   24a96:	2f00      	cmp	r7, #0
   24a98:	d1ea      	bne.n	24a70 <entropy_gather_internal.part.0+0x40>
   24a9a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   24a9e:	e7e7      	b.n	24a70 <entropy_gather_internal.part.0+0x40>
   24aa0:	4604      	mov	r4, r0
   24aa2:	4620      	mov	r0, r4
   24aa4:	b027      	add	sp, #156	; 0x9c
   24aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024aa8 <cc_mbedtls_entropy_init>:
   24aa8:	b570      	push	{r4, r5, r6, lr}
   24aaa:	2500      	movs	r5, #0
   24aac:	4604      	mov	r4, r0
   24aae:	2214      	movs	r2, #20
   24ab0:	4629      	mov	r1, r5
   24ab2:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   24ab6:	30fc      	adds	r0, #252	; 0xfc
   24ab8:	f007 faaa 	bl	2c010 <memset>
   24abc:	4b16      	ldr	r3, [pc, #88]	; (24b18 <cc_mbedtls_entropy_init+0x70>)
   24abe:	f504 7688 	add.w	r6, r4, #272	; 0x110
   24ac2:	681b      	ldr	r3, [r3, #0]
   24ac4:	4630      	mov	r0, r6
   24ac6:	4798      	blx	r3
   24ac8:	4620      	mov	r0, r4
   24aca:	f840 5b04 	str.w	r5, [r0], #4
   24ace:	f000 fdf5 	bl	256bc <cc_mbedtls_sha256_init>
   24ad2:	4b12      	ldr	r3, [pc, #72]	; (24b1c <cc_mbedtls_entropy_init+0x74>)
   24ad4:	4630      	mov	r0, r6
   24ad6:	681b      	ldr	r3, [r3, #0]
   24ad8:	4798      	blx	r3
   24ada:	b9d8      	cbnz	r0, 24b14 <cc_mbedtls_entropy_init+0x6c>
   24adc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24ae0:	42ab      	cmp	r3, r5
   24ae2:	dc11      	bgt.n	24b08 <cc_mbedtls_entropy_init+0x60>
   24ae4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24ae8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   24aec:	2120      	movs	r1, #32
   24aee:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   24af2:	2101      	movs	r1, #1
   24af4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   24af8:	3301      	adds	r3, #1
   24afa:	4909      	ldr	r1, [pc, #36]	; (24b20 <cc_mbedtls_entropy_init+0x78>)
   24afc:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   24b00:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   24b04:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   24b08:	4b06      	ldr	r3, [pc, #24]	; (24b24 <cc_mbedtls_entropy_init+0x7c>)
   24b0a:	4630      	mov	r0, r6
   24b0c:	681b      	ldr	r3, [r3, #0]
   24b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24b12:	4718      	bx	r3
   24b14:	bd70      	pop	{r4, r5, r6, pc}
   24b16:	bf00      	nop
   24b18:	2000091c 	.word	0x2000091c
   24b1c:	20000920 	.word	0x20000920
   24b20:	0002550d 	.word	0x0002550d
   24b24:	20000924 	.word	0x20000924

00024b28 <cc_mbedtls_entropy_func>:
   24b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b2c:	2a20      	cmp	r2, #32
   24b2e:	b088      	sub	sp, #32
   24b30:	d876      	bhi.n	24c20 <cc_mbedtls_entropy_func+0xf8>
   24b32:	4b3d      	ldr	r3, [pc, #244]	; (24c28 <cc_mbedtls_entropy_func+0x100>)
   24b34:	f500 7988 	add.w	r9, r0, #272	; 0x110
   24b38:	681b      	ldr	r3, [r3, #0]
   24b3a:	4604      	mov	r4, r0
   24b3c:	4648      	mov	r0, r9
   24b3e:	4617      	mov	r7, r2
   24b40:	4688      	mov	r8, r1
   24b42:	4798      	blx	r3
   24b44:	4605      	mov	r5, r0
   24b46:	bba0      	cbnz	r0, 24bb2 <cc_mbedtls_entropy_func+0x8a>
   24b48:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24b4c:	f240 1601 	movw	r6, #257	; 0x101
   24b50:	e001      	b.n	24b56 <cc_mbedtls_entropy_func+0x2e>
   24b52:	3e01      	subs	r6, #1
   24b54:	d060      	beq.n	24c18 <cc_mbedtls_entropy_func+0xf0>
   24b56:	4620      	mov	r0, r4
   24b58:	b37b      	cbz	r3, 24bba <cc_mbedtls_entropy_func+0x92>
   24b5a:	f7ff ff69 	bl	24a30 <entropy_gather_internal.part.0>
   24b5e:	4605      	mov	r5, r0
   24b60:	bb68      	cbnz	r0, 24bbe <cc_mbedtls_entropy_func+0x96>
   24b62:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24b66:	2b00      	cmp	r3, #0
   24b68:	ddf3      	ble.n	24b52 <cc_mbedtls_entropy_func+0x2a>
   24b6a:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   24b6e:	4290      	cmp	r0, r2
   24b70:	d3ef      	bcc.n	24b52 <cc_mbedtls_entropy_func+0x2a>
   24b72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   24b76:	2a01      	cmp	r2, #1
   24b78:	d1eb      	bne.n	24b52 <cc_mbedtls_entropy_func+0x2a>
   24b7a:	281f      	cmp	r0, #31
   24b7c:	d9e9      	bls.n	24b52 <cc_mbedtls_entropy_func+0x2a>
   24b7e:	466e      	mov	r6, sp
   24b80:	4629      	mov	r1, r5
   24b82:	2220      	movs	r2, #32
   24b84:	4630      	mov	r0, r6
   24b86:	f104 0a04 	add.w	sl, r4, #4
   24b8a:	f007 fa41 	bl	2c010 <memset>
   24b8e:	4631      	mov	r1, r6
   24b90:	4650      	mov	r0, sl
   24b92:	f000 fdeb 	bl	2576c <cc_mbedtls_sha256_finish>
   24b96:	4605      	mov	r5, r0
   24b98:	b198      	cbz	r0, 24bc2 <cc_mbedtls_entropy_func+0x9a>
   24b9a:	2120      	movs	r1, #32
   24b9c:	4630      	mov	r0, r6
   24b9e:	f7ff fb4b 	bl	24238 <mbedtls_platform_zeroize>
   24ba2:	4b22      	ldr	r3, [pc, #136]	; (24c2c <cc_mbedtls_entropy_func+0x104>)
   24ba4:	4648      	mov	r0, r9
   24ba6:	681b      	ldr	r3, [r3, #0]
   24ba8:	4798      	blx	r3
   24baa:	2800      	cmp	r0, #0
   24bac:	bf18      	it	ne
   24bae:	f06f 051d 	mvnne.w	r5, #29
   24bb2:	4628      	mov	r0, r5
   24bb4:	b008      	add	sp, #32
   24bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24bba:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   24bbe:	466e      	mov	r6, sp
   24bc0:	e7eb      	b.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24bc2:	4650      	mov	r0, sl
   24bc4:	f000 fd8e 	bl	256e4 <cc_mbedtls_sha256_free>
   24bc8:	4650      	mov	r0, sl
   24bca:	f000 fd77 	bl	256bc <cc_mbedtls_sha256_init>
   24bce:	4629      	mov	r1, r5
   24bd0:	4650      	mov	r0, sl
   24bd2:	f000 fd8d 	bl	256f0 <cc_mbedtls_sha256_starts>
   24bd6:	4605      	mov	r5, r0
   24bd8:	2800      	cmp	r0, #0
   24bda:	d1de      	bne.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24bdc:	4650      	mov	r0, sl
   24bde:	2220      	movs	r2, #32
   24be0:	4631      	mov	r1, r6
   24be2:	f000 fd99 	bl	25718 <cc_mbedtls_sha256_update>
   24be6:	4605      	mov	r5, r0
   24be8:	2800      	cmp	r0, #0
   24bea:	d1d6      	bne.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24bec:	4603      	mov	r3, r0
   24bee:	4632      	mov	r2, r6
   24bf0:	2120      	movs	r1, #32
   24bf2:	4630      	mov	r0, r6
   24bf4:	f000 ff18 	bl	25a28 <cc_mbedtls_sha256>
   24bf8:	4605      	mov	r5, r0
   24bfa:	2800      	cmp	r0, #0
   24bfc:	d1cd      	bne.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24bfe:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24c02:	2b00      	cmp	r3, #0
   24c04:	bfc4      	itt	gt
   24c06:	2300      	movgt	r3, #0
   24c08:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   24c0c:	463a      	mov	r2, r7
   24c0e:	4640      	mov	r0, r8
   24c10:	4631      	mov	r1, r6
   24c12:	f007 f9dc 	bl	2bfce <memcpy>
   24c16:	e7c0      	b.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24c18:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24c1c:	466e      	mov	r6, sp
   24c1e:	e7bc      	b.n	24b9a <cc_mbedtls_entropy_func+0x72>
   24c20:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24c24:	e7c5      	b.n	24bb2 <cc_mbedtls_entropy_func+0x8a>
   24c26:	bf00      	nop
   24c28:	20000920 	.word	0x20000920
   24c2c:	20000924 	.word	0x20000924

00024c30 <RndStartupTest.constprop.0>:
   24c30:	b530      	push	{r4, r5, lr}
   24c32:	b08d      	sub	sp, #52	; 0x34
   24c34:	2100      	movs	r1, #0
   24c36:	2228      	movs	r2, #40	; 0x28
   24c38:	a802      	add	r0, sp, #8
   24c3a:	9101      	str	r1, [sp, #4]
   24c3c:	f007 f9e8 	bl	2c010 <memset>
   24c40:	a802      	add	r0, sp, #8
   24c42:	f000 ff19 	bl	25a78 <RNG_PLAT_SetUserRngParameters>
   24c46:	4604      	mov	r4, r0
   24c48:	b110      	cbz	r0, 24c50 <RndStartupTest.constprop.0+0x20>
   24c4a:	4620      	mov	r0, r4
   24c4c:	b00d      	add	sp, #52	; 0x34
   24c4e:	bd30      	pop	{r4, r5, pc}
   24c50:	4d18      	ldr	r5, [pc, #96]	; (24cb4 <RndStartupTest.constprop.0+0x84>)
   24c52:	f04f 31ff 	mov.w	r1, #4294967295
   24c56:	6828      	ldr	r0, [r5, #0]
   24c58:	f000 f946 	bl	24ee8 <CC_PalMutexLock>
   24c5c:	4604      	mov	r4, r0
   24c5e:	b9c0      	cbnz	r0, 24c92 <RndStartupTest.constprop.0+0x62>
   24c60:	2000      	movs	r0, #0
   24c62:	f000 f971 	bl	24f48 <CC_PalPowerSaveModeSelect>
   24c66:	bb00      	cbnz	r0, 24caa <RndStartupTest.constprop.0+0x7a>
   24c68:	4a13      	ldr	r2, [pc, #76]	; (24cb8 <RndStartupTest.constprop.0+0x88>)
   24c6a:	a902      	add	r1, sp, #8
   24c6c:	a801      	add	r0, sp, #4
   24c6e:	f000 fc3f 	bl	254f0 <LLF_RND_RunTrngStartupTest>
   24c72:	4604      	mov	r4, r0
   24c74:	2001      	movs	r0, #1
   24c76:	f000 f967 	bl	24f48 <CC_PalPowerSaveModeSelect>
   24c7a:	b990      	cbnz	r0, 24ca2 <RndStartupTest.constprop.0+0x72>
   24c7c:	6828      	ldr	r0, [r5, #0]
   24c7e:	f000 f93b 	bl	24ef8 <CC_PalMutexUnlock>
   24c82:	2800      	cmp	r0, #0
   24c84:	d0e1      	beq.n	24c4a <RndStartupTest.constprop.0+0x1a>
   24c86:	480d      	ldr	r0, [pc, #52]	; (24cbc <RndStartupTest.constprop.0+0x8c>)
   24c88:	f7ff f9ce 	bl	24028 <CC_PalAbort>
   24c8c:	4620      	mov	r0, r4
   24c8e:	b00d      	add	sp, #52	; 0x34
   24c90:	bd30      	pop	{r4, r5, pc}
   24c92:	480b      	ldr	r0, [pc, #44]	; (24cc0 <RndStartupTest.constprop.0+0x90>)
   24c94:	f7ff f9c8 	bl	24028 <CC_PalAbort>
   24c98:	2c01      	cmp	r4, #1
   24c9a:	bf08      	it	eq
   24c9c:	2405      	moveq	r4, #5
   24c9e:	d0ed      	beq.n	24c7c <RndStartupTest.constprop.0+0x4c>
   24ca0:	e7de      	b.n	24c60 <RndStartupTest.constprop.0+0x30>
   24ca2:	4808      	ldr	r0, [pc, #32]	; (24cc4 <RndStartupTest.constprop.0+0x94>)
   24ca4:	f7ff f9c0 	bl	24028 <CC_PalAbort>
   24ca8:	e7e8      	b.n	24c7c <RndStartupTest.constprop.0+0x4c>
   24caa:	4807      	ldr	r0, [pc, #28]	; (24cc8 <RndStartupTest.constprop.0+0x98>)
   24cac:	f7ff f9bc 	bl	24028 <CC_PalAbort>
   24cb0:	e7da      	b.n	24c68 <RndStartupTest.constprop.0+0x38>
   24cb2:	bf00      	nop
   24cb4:	20000918 	.word	0x20000918
   24cb8:	20003824 	.word	0x20003824
   24cbc:	0002d69c 	.word	0x0002d69c
   24cc0:	0002d644 	.word	0x0002d644
   24cc4:	0002d67c 	.word	0x0002d67c
   24cc8:	0002d65c 	.word	0x0002d65c

00024ccc <CC_LibInit>:
   24ccc:	b530      	push	{r4, r5, lr}
   24cce:	b083      	sub	sp, #12
   24cd0:	f000 f85c 	bl	24d8c <CC_HalInit>
   24cd4:	b128      	cbz	r0, 24ce2 <CC_LibInit+0x16>
   24cd6:	f000 f8ab 	bl	24e30 <CC_PalTerminate>
   24cda:	2403      	movs	r4, #3
   24cdc:	4620      	mov	r0, r4
   24cde:	b003      	add	sp, #12
   24ce0:	bd30      	pop	{r4, r5, pc}
   24ce2:	f000 f877 	bl	24dd4 <CC_PalInit>
   24ce6:	b9d8      	cbnz	r0, 24d20 <CC_LibInit+0x54>
   24ce8:	f000 f92e 	bl	24f48 <CC_PalPowerSaveModeSelect>
   24cec:	b9e0      	cbnz	r0, 24d28 <CC_LibInit+0x5c>
   24cee:	4c22      	ldr	r4, [pc, #136]	; (24d78 <CC_LibInit+0xac>)
   24cf0:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   24cf4:	0e1b      	lsrs	r3, r3, #24
   24cf6:	2bf0      	cmp	r3, #240	; 0xf0
   24cf8:	d10a      	bne.n	24d10 <CC_LibInit+0x44>
   24cfa:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   24cfe:	4b1f      	ldr	r3, [pc, #124]	; (24d7c <CC_LibInit+0xb0>)
   24d00:	429a      	cmp	r2, r3
   24d02:	d031      	beq.n	24d68 <CC_LibInit+0x9c>
   24d04:	f000 f844 	bl	24d90 <CC_HalTerminate>
   24d08:	2407      	movs	r4, #7
   24d0a:	f000 f891 	bl	24e30 <CC_PalTerminate>
   24d0e:	e7e5      	b.n	24cdc <CC_LibInit+0x10>
   24d10:	f000 f83e 	bl	24d90 <CC_HalTerminate>
   24d14:	f000 f88c 	bl	24e30 <CC_PalTerminate>
   24d18:	2406      	movs	r4, #6
   24d1a:	4620      	mov	r0, r4
   24d1c:	b003      	add	sp, #12
   24d1e:	bd30      	pop	{r4, r5, pc}
   24d20:	2404      	movs	r4, #4
   24d22:	4620      	mov	r0, r4
   24d24:	b003      	add	sp, #12
   24d26:	bd30      	pop	{r4, r5, pc}
   24d28:	f000 f832 	bl	24d90 <CC_HalTerminate>
   24d2c:	f000 f880 	bl	24e30 <CC_PalTerminate>
   24d30:	f7ff ff7e 	bl	24c30 <RndStartupTest.constprop.0>
   24d34:	4604      	mov	r4, r0
   24d36:	b998      	cbnz	r0, 24d60 <CC_LibInit+0x94>
   24d38:	4d11      	ldr	r5, [pc, #68]	; (24d80 <CC_LibInit+0xb4>)
   24d3a:	682b      	ldr	r3, [r5, #0]
   24d3c:	2b00      	cmp	r3, #0
   24d3e:	d1cd      	bne.n	24cdc <CC_LibInit+0x10>
   24d40:	4602      	mov	r2, r0
   24d42:	4601      	mov	r1, r0
   24d44:	f7ff f992 	bl	2406c <nrf_cc3xx_platform_ctr_drbg_init>
   24d48:	b950      	cbnz	r0, 24d60 <CC_LibInit+0x94>
   24d4a:	490e      	ldr	r1, [pc, #56]	; (24d84 <CC_LibInit+0xb8>)
   24d4c:	ab01      	add	r3, sp, #4
   24d4e:	2268      	movs	r2, #104	; 0x68
   24d50:	f7ff f9be 	bl	240d0 <nrf_cc3xx_platform_ctr_drbg_get>
   24d54:	b920      	cbnz	r0, 24d60 <CC_LibInit+0x94>
   24d56:	4b0c      	ldr	r3, [pc, #48]	; (24d88 <CC_LibInit+0xbc>)
   24d58:	602b      	str	r3, [r5, #0]
   24d5a:	4620      	mov	r0, r4
   24d5c:	b003      	add	sp, #12
   24d5e:	bd30      	pop	{r4, r5, pc}
   24d60:	2405      	movs	r4, #5
   24d62:	4620      	mov	r0, r4
   24d64:	b003      	add	sp, #12
   24d66:	bd30      	pop	{r4, r5, pc}
   24d68:	2001      	movs	r0, #1
   24d6a:	f000 f8ed 	bl	24f48 <CC_PalPowerSaveModeSelect>
   24d6e:	2800      	cmp	r0, #0
   24d70:	d1da      	bne.n	24d28 <CC_LibInit+0x5c>
   24d72:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   24d76:	e7db      	b.n	24d30 <CC_LibInit+0x64>
   24d78:	5002b000 	.word	0x5002b000
   24d7c:	20e00000 	.word	0x20e00000
   24d80:	20003820 	.word	0x20003820
   24d84:	200037b8 	.word	0x200037b8
   24d88:	5a5aea5a 	.word	0x5a5aea5a

00024d8c <CC_HalInit>:
   24d8c:	2000      	movs	r0, #0
   24d8e:	4770      	bx	lr

00024d90 <CC_HalTerminate>:
   24d90:	2000      	movs	r0, #0
   24d92:	4770      	bx	lr

00024d94 <CC_HalClearInterruptBit>:
   24d94:	0543      	lsls	r3, r0, #21
   24d96:	d504      	bpl.n	24da2 <CC_HalClearInterruptBit+0xe>
   24d98:	4b04      	ldr	r3, [pc, #16]	; (24dac <CC_HalClearInterruptBit+0x18>)
   24d9a:	f04f 32ff 	mov.w	r2, #4294967295
   24d9e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   24da2:	4b02      	ldr	r3, [pc, #8]	; (24dac <CC_HalClearInterruptBit+0x18>)
   24da4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   24da8:	4770      	bx	lr
   24daa:	bf00      	nop
   24dac:	5002b000 	.word	0x5002b000

00024db0 <CC_HalMaskInterrupt>:
   24db0:	4b01      	ldr	r3, [pc, #4]	; (24db8 <CC_HalMaskInterrupt+0x8>)
   24db2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   24db6:	4770      	bx	lr
   24db8:	5002b000 	.word	0x5002b000

00024dbc <CC_HalWaitInterrupt>:
   24dbc:	b108      	cbz	r0, 24dc2 <CC_HalWaitInterrupt+0x6>
   24dbe:	f000 b86b 	b.w	24e98 <CC_PalWaitInterrupt>
   24dc2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   24dc6:	4770      	bx	lr

00024dc8 <CC_HalWaitInterruptRND>:
   24dc8:	b108      	cbz	r0, 24dce <CC_HalWaitInterruptRND+0x6>
   24dca:	f000 b84f 	b.w	24e6c <CC_PalWaitInterruptRND>
   24dce:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   24dd2:	4770      	bx	lr

00024dd4 <CC_PalInit>:
   24dd4:	b510      	push	{r4, lr}
   24dd6:	4811      	ldr	r0, [pc, #68]	; (24e1c <CC_PalInit+0x48>)
   24dd8:	f000 f872 	bl	24ec0 <CC_PalMutexCreate>
   24ddc:	b100      	cbz	r0, 24de0 <CC_PalInit+0xc>
   24dde:	bd10      	pop	{r4, pc}
   24de0:	480f      	ldr	r0, [pc, #60]	; (24e20 <CC_PalInit+0x4c>)
   24de2:	f000 f86d 	bl	24ec0 <CC_PalMutexCreate>
   24de6:	2800      	cmp	r0, #0
   24de8:	d1f9      	bne.n	24dde <CC_PalInit+0xa>
   24dea:	4c0e      	ldr	r4, [pc, #56]	; (24e24 <CC_PalInit+0x50>)
   24dec:	4620      	mov	r0, r4
   24dee:	f000 f867 	bl	24ec0 <CC_PalMutexCreate>
   24df2:	2800      	cmp	r0, #0
   24df4:	d1f3      	bne.n	24dde <CC_PalInit+0xa>
   24df6:	4b0c      	ldr	r3, [pc, #48]	; (24e28 <CC_PalInit+0x54>)
   24df8:	480c      	ldr	r0, [pc, #48]	; (24e2c <CC_PalInit+0x58>)
   24dfa:	601c      	str	r4, [r3, #0]
   24dfc:	f000 f860 	bl	24ec0 <CC_PalMutexCreate>
   24e00:	4601      	mov	r1, r0
   24e02:	2800      	cmp	r0, #0
   24e04:	d1eb      	bne.n	24dde <CC_PalInit+0xa>
   24e06:	f000 f82d 	bl	24e64 <CC_PalDmaInit>
   24e0a:	4604      	mov	r4, r0
   24e0c:	b108      	cbz	r0, 24e12 <CC_PalInit+0x3e>
   24e0e:	4620      	mov	r0, r4
   24e10:	bd10      	pop	{r4, pc}
   24e12:	f000 f87b 	bl	24f0c <CC_PalPowerSaveModeInit>
   24e16:	4620      	mov	r0, r4
   24e18:	e7fa      	b.n	24e10 <CC_PalInit+0x3c>
   24e1a:	bf00      	nop
   24e1c:	20000914 	.word	0x20000914
   24e20:	20000908 	.word	0x20000908
   24e24:	20000910 	.word	0x20000910
   24e28:	20000918 	.word	0x20000918
   24e2c:	2000090c 	.word	0x2000090c

00024e30 <CC_PalTerminate>:
   24e30:	b508      	push	{r3, lr}
   24e32:	4808      	ldr	r0, [pc, #32]	; (24e54 <CC_PalTerminate+0x24>)
   24e34:	f000 f84e 	bl	24ed4 <CC_PalMutexDestroy>
   24e38:	4807      	ldr	r0, [pc, #28]	; (24e58 <CC_PalTerminate+0x28>)
   24e3a:	f000 f84b 	bl	24ed4 <CC_PalMutexDestroy>
   24e3e:	4807      	ldr	r0, [pc, #28]	; (24e5c <CC_PalTerminate+0x2c>)
   24e40:	f000 f848 	bl	24ed4 <CC_PalMutexDestroy>
   24e44:	4806      	ldr	r0, [pc, #24]	; (24e60 <CC_PalTerminate+0x30>)
   24e46:	f000 f845 	bl	24ed4 <CC_PalMutexDestroy>
   24e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24e4e:	f000 b80b 	b.w	24e68 <CC_PalDmaTerminate>
   24e52:	bf00      	nop
   24e54:	20000914 	.word	0x20000914
   24e58:	20000908 	.word	0x20000908
   24e5c:	20000910 	.word	0x20000910
   24e60:	2000090c 	.word	0x2000090c

00024e64 <CC_PalDmaInit>:
   24e64:	2000      	movs	r0, #0
   24e66:	4770      	bx	lr

00024e68 <CC_PalDmaTerminate>:
   24e68:	4770      	bx	lr
   24e6a:	bf00      	nop

00024e6c <CC_PalWaitInterruptRND>:
   24e6c:	b410      	push	{r4}
   24e6e:	4c09      	ldr	r4, [pc, #36]	; (24e94 <CC_PalWaitInterruptRND+0x28>)
   24e70:	4602      	mov	r2, r0
   24e72:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   24e76:	4213      	tst	r3, r2
   24e78:	d0fb      	beq.n	24e72 <CC_PalWaitInterruptRND+0x6>
   24e7a:	b121      	cbz	r1, 24e86 <CC_PalWaitInterruptRND+0x1a>
   24e7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   24e80:	600b      	str	r3, [r1, #0]
   24e82:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   24e86:	4b03      	ldr	r3, [pc, #12]	; (24e94 <CC_PalWaitInterruptRND+0x28>)
   24e88:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   24e8c:	2000      	movs	r0, #0
   24e8e:	bc10      	pop	{r4}
   24e90:	4770      	bx	lr
   24e92:	bf00      	nop
   24e94:	5002b000 	.word	0x5002b000

00024e98 <CC_PalWaitInterrupt>:
   24e98:	4a04      	ldr	r2, [pc, #16]	; (24eac <CC_PalWaitInterrupt+0x14>)
   24e9a:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   24e9e:	4218      	tst	r0, r3
   24ea0:	d0fb      	beq.n	24e9a <CC_PalWaitInterrupt+0x2>
   24ea2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   24ea6:	2000      	movs	r0, #0
   24ea8:	4770      	bx	lr
   24eaa:	bf00      	nop
   24eac:	5002b000 	.word	0x5002b000

00024eb0 <CC_PalMemCopyPlat>:
   24eb0:	f007 b9df 	b.w	2c272 <memmove>

00024eb4 <CC_PalMemSetPlat>:
   24eb4:	f007 b8ac 	b.w	2c010 <memset>

00024eb8 <CC_PalMemSetZeroPlat>:
   24eb8:	460a      	mov	r2, r1
   24eba:	2100      	movs	r1, #0
   24ebc:	f007 b8a8 	b.w	2c010 <memset>

00024ec0 <CC_PalMutexCreate>:
   24ec0:	b508      	push	{r3, lr}
   24ec2:	4b03      	ldr	r3, [pc, #12]	; (24ed0 <CC_PalMutexCreate+0x10>)
   24ec4:	6802      	ldr	r2, [r0, #0]
   24ec6:	681b      	ldr	r3, [r3, #0]
   24ec8:	6810      	ldr	r0, [r2, #0]
   24eca:	4798      	blx	r3
   24ecc:	2000      	movs	r0, #0
   24ece:	bd08      	pop	{r3, pc}
   24ed0:	200008c8 	.word	0x200008c8

00024ed4 <CC_PalMutexDestroy>:
   24ed4:	b508      	push	{r3, lr}
   24ed6:	4b03      	ldr	r3, [pc, #12]	; (24ee4 <CC_PalMutexDestroy+0x10>)
   24ed8:	6802      	ldr	r2, [r0, #0]
   24eda:	685b      	ldr	r3, [r3, #4]
   24edc:	6810      	ldr	r0, [r2, #0]
   24ede:	4798      	blx	r3
   24ee0:	2000      	movs	r0, #0
   24ee2:	bd08      	pop	{r3, pc}
   24ee4:	200008c8 	.word	0x200008c8

00024ee8 <CC_PalMutexLock>:
   24ee8:	4b02      	ldr	r3, [pc, #8]	; (24ef4 <CC_PalMutexLock+0xc>)
   24eea:	6802      	ldr	r2, [r0, #0]
   24eec:	689b      	ldr	r3, [r3, #8]
   24eee:	6810      	ldr	r0, [r2, #0]
   24ef0:	4718      	bx	r3
   24ef2:	bf00      	nop
   24ef4:	200008c8 	.word	0x200008c8

00024ef8 <CC_PalMutexUnlock>:
   24ef8:	b508      	push	{r3, lr}
   24efa:	4b03      	ldr	r3, [pc, #12]	; (24f08 <CC_PalMutexUnlock+0x10>)
   24efc:	6802      	ldr	r2, [r0, #0]
   24efe:	68db      	ldr	r3, [r3, #12]
   24f00:	6810      	ldr	r0, [r2, #0]
   24f02:	4798      	blx	r3
   24f04:	2000      	movs	r0, #0
   24f06:	bd08      	pop	{r3, pc}
   24f08:	200008c8 	.word	0x200008c8

00024f0c <CC_PalPowerSaveModeInit>:
   24f0c:	b570      	push	{r4, r5, r6, lr}
   24f0e:	4c09      	ldr	r4, [pc, #36]	; (24f34 <CC_PalPowerSaveModeInit+0x28>)
   24f10:	4d09      	ldr	r5, [pc, #36]	; (24f38 <CC_PalPowerSaveModeInit+0x2c>)
   24f12:	6920      	ldr	r0, [r4, #16]
   24f14:	68ab      	ldr	r3, [r5, #8]
   24f16:	4798      	blx	r3
   24f18:	b118      	cbz	r0, 24f22 <CC_PalPowerSaveModeInit+0x16>
   24f1a:	4b08      	ldr	r3, [pc, #32]	; (24f3c <CC_PalPowerSaveModeInit+0x30>)
   24f1c:	4808      	ldr	r0, [pc, #32]	; (24f40 <CC_PalPowerSaveModeInit+0x34>)
   24f1e:	685b      	ldr	r3, [r3, #4]
   24f20:	4798      	blx	r3
   24f22:	4a08      	ldr	r2, [pc, #32]	; (24f44 <CC_PalPowerSaveModeInit+0x38>)
   24f24:	68eb      	ldr	r3, [r5, #12]
   24f26:	6920      	ldr	r0, [r4, #16]
   24f28:	2100      	movs	r1, #0
   24f2a:	6011      	str	r1, [r2, #0]
   24f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24f30:	4718      	bx	r3
   24f32:	bf00      	nop
   24f34:	200008d8 	.word	0x200008d8
   24f38:	200008c8 	.word	0x200008c8
   24f3c:	200008b8 	.word	0x200008b8
   24f40:	0002d6b4 	.word	0x0002d6b4
   24f44:	20003a44 	.word	0x20003a44

00024f48 <CC_PalPowerSaveModeSelect>:
   24f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f4a:	4d1a      	ldr	r5, [pc, #104]	; (24fb4 <CC_PalPowerSaveModeSelect+0x6c>)
   24f4c:	4e1a      	ldr	r6, [pc, #104]	; (24fb8 <CC_PalPowerSaveModeSelect+0x70>)
   24f4e:	4604      	mov	r4, r0
   24f50:	68b2      	ldr	r2, [r6, #8]
   24f52:	6928      	ldr	r0, [r5, #16]
   24f54:	4790      	blx	r2
   24f56:	b9e8      	cbnz	r0, 24f94 <CC_PalPowerSaveModeSelect+0x4c>
   24f58:	4f18      	ldr	r7, [pc, #96]	; (24fbc <CC_PalPowerSaveModeSelect+0x74>)
   24f5a:	683b      	ldr	r3, [r7, #0]
   24f5c:	b14c      	cbz	r4, 24f72 <CC_PalPowerSaveModeSelect+0x2a>
   24f5e:	b1a3      	cbz	r3, 24f8a <CC_PalPowerSaveModeSelect+0x42>
   24f60:	2b01      	cmp	r3, #1
   24f62:	d019      	beq.n	24f98 <CC_PalPowerSaveModeSelect+0x50>
   24f64:	3b01      	subs	r3, #1
   24f66:	603b      	str	r3, [r7, #0]
   24f68:	6928      	ldr	r0, [r5, #16]
   24f6a:	68f3      	ldr	r3, [r6, #12]
   24f6c:	4798      	blx	r3
   24f6e:	2000      	movs	r0, #0
   24f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f72:	b943      	cbnz	r3, 24f86 <CC_PalPowerSaveModeSelect+0x3e>
   24f74:	4a12      	ldr	r2, [pc, #72]	; (24fc0 <CC_PalPowerSaveModeSelect+0x78>)
   24f76:	2101      	movs	r1, #1
   24f78:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   24f7c:	4911      	ldr	r1, [pc, #68]	; (24fc4 <CC_PalPowerSaveModeSelect+0x7c>)
   24f7e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   24f82:	2a00      	cmp	r2, #0
   24f84:	d1fb      	bne.n	24f7e <CC_PalPowerSaveModeSelect+0x36>
   24f86:	3301      	adds	r3, #1
   24f88:	603b      	str	r3, [r7, #0]
   24f8a:	68f3      	ldr	r3, [r6, #12]
   24f8c:	6928      	ldr	r0, [r5, #16]
   24f8e:	4798      	blx	r3
   24f90:	2000      	movs	r0, #0
   24f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f94:	480c      	ldr	r0, [pc, #48]	; (24fc8 <CC_PalPowerSaveModeSelect+0x80>)
   24f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f98:	4a0a      	ldr	r2, [pc, #40]	; (24fc4 <CC_PalPowerSaveModeSelect+0x7c>)
   24f9a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24f9e:	2b00      	cmp	r3, #0
   24fa0:	d1fb      	bne.n	24f9a <CC_PalPowerSaveModeSelect+0x52>
   24fa2:	4a07      	ldr	r2, [pc, #28]	; (24fc0 <CC_PalPowerSaveModeSelect+0x78>)
   24fa4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   24fa8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   24fac:	f7ff ff00 	bl	24db0 <CC_HalMaskInterrupt>
   24fb0:	683b      	ldr	r3, [r7, #0]
   24fb2:	e7d7      	b.n	24f64 <CC_PalPowerSaveModeSelect+0x1c>
   24fb4:	200008d8 	.word	0x200008d8
   24fb8:	200008c8 	.word	0x200008c8
   24fbc:	20003a44 	.word	0x20003a44
   24fc0:	5002a000 	.word	0x5002a000
   24fc4:	5002b000 	.word	0x5002b000
   24fc8:	ffff8fe9 	.word	0xffff8fe9

00024fcc <mutex_init>:
   24fcc:	4b01      	ldr	r3, [pc, #4]	; (24fd4 <mutex_init+0x8>)
   24fce:	681b      	ldr	r3, [r3, #0]
   24fd0:	4718      	bx	r3
   24fd2:	bf00      	nop
   24fd4:	200008c8 	.word	0x200008c8

00024fd8 <mutex_lock>:
   24fd8:	4b01      	ldr	r3, [pc, #4]	; (24fe0 <mutex_lock+0x8>)
   24fda:	689b      	ldr	r3, [r3, #8]
   24fdc:	4718      	bx	r3
   24fde:	bf00      	nop
   24fe0:	200008c8 	.word	0x200008c8

00024fe4 <mutex_unlock>:
   24fe4:	4b01      	ldr	r3, [pc, #4]	; (24fec <mutex_unlock+0x8>)
   24fe6:	68db      	ldr	r3, [r3, #12]
   24fe8:	4718      	bx	r3
   24fea:	bf00      	nop
   24fec:	200008c8 	.word	0x200008c8

00024ff0 <startTrngHW>:
   24ff0:	2800      	cmp	r0, #0
   24ff2:	f000 8084 	beq.w	250fe <startTrngHW+0x10e>
   24ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24ffa:	460c      	mov	r4, r1
   24ffc:	b083      	sub	sp, #12
   24ffe:	2900      	cmp	r1, #0
   25000:	d078      	beq.n	250f4 <startTrngHW+0x104>
   25002:	461d      	mov	r5, r3
   25004:	2b00      	cmp	r3, #0
   25006:	d075      	beq.n	250f4 <startTrngHW+0x104>
   25008:	4607      	mov	r7, r0
   2500a:	b11a      	cbz	r2, 25014 <startTrngHW+0x24>
   2500c:	2201      	movs	r2, #1
   2500e:	2300      	movs	r3, #0
   25010:	602a      	str	r2, [r5, #0]
   25012:	6003      	str	r3, [r0, #0]
   25014:	682b      	ldr	r3, [r5, #0]
   25016:	2b00      	cmp	r3, #0
   25018:	d067      	beq.n	250ea <startTrngHW+0xfa>
   2501a:	4629      	mov	r1, r5
   2501c:	4620      	mov	r0, r4
   2501e:	f000 fde9 	bl	25bf4 <LLF_RND_GetFastestRosc>
   25022:	4603      	mov	r3, r0
   25024:	2800      	cmp	r0, #0
   25026:	d161      	bne.n	250ec <startTrngHW+0xfc>
   25028:	6828      	ldr	r0, [r5, #0]
   2502a:	4621      	mov	r1, r4
   2502c:	f000 fdc4 	bl	25bb8 <LLF_RND_GetRoscSampleCnt>
   25030:	4603      	mov	r3, r0
   25032:	2800      	cmp	r0, #0
   25034:	d15a      	bne.n	250ec <startTrngHW+0xfc>
   25036:	682a      	ldr	r2, [r5, #0]
   25038:	2a08      	cmp	r2, #8
   2503a:	d072      	beq.n	25122 <startTrngHW+0x132>
   2503c:	2a04      	cmp	r2, #4
   2503e:	d073      	beq.n	25128 <startTrngHW+0x138>
   25040:	f1a2 0802 	sub.w	r8, r2, #2
   25044:	fab8 f888 	clz	r8, r8
   25048:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2504c:	4e38      	ldr	r6, [pc, #224]	; (25130 <startTrngHW+0x140>)
   2504e:	2001      	movs	r0, #1
   25050:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   25054:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   25058:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   2505c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2505e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   25062:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   25066:	428a      	cmp	r2, r1
   25068:	d1f6      	bne.n	25058 <startTrngHW+0x68>
   2506a:	f04f 0900 	mov.w	r9, #0
   2506e:	9301      	str	r3, [sp, #4]
   25070:	f04f 30ff 	mov.w	r0, #4294967295
   25074:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   25078:	f7ff fe8c 	bl	24d94 <CC_HalClearInterruptBit>
   2507c:	f06f 021b 	mvn.w	r2, #27
   25080:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   25084:	4648      	mov	r0, r9
   25086:	f7ff fe93 	bl	24db0 <CC_HalMaskInterrupt>
   2508a:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   2508e:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   25092:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   25096:	f7ff fe8b 	bl	24db0 <CC_HalMaskInterrupt>
   2509a:	220a      	movs	r2, #10
   2509c:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   250a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   250a2:	2b01      	cmp	r3, #1
   250a4:	9b01      	ldr	r3, [sp, #4]
   250a6:	d02d      	beq.n	25104 <startTrngHW+0x114>
   250a8:	6922      	ldr	r2, [r4, #16]
   250aa:	4922      	ldr	r1, [pc, #136]	; (25134 <startTrngHW+0x144>)
   250ac:	fba1 1202 	umull	r1, r2, r1, r2
   250b0:	0912      	lsrs	r2, r2, #4
   250b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   250b4:	fb01 f202 	mul.w	r2, r1, r2
   250b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   250bc:	491c      	ldr	r1, [pc, #112]	; (25130 <startTrngHW+0x140>)
   250be:	03d2      	lsls	r2, r2, #15
   250c0:	0992      	lsrs	r2, r2, #6
   250c2:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   250c6:	2201      	movs	r2, #1
   250c8:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   250cc:	683a      	ldr	r2, [r7, #0]
   250ce:	6829      	ldr	r1, [r5, #0]
   250d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   250d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   250d8:	603a      	str	r2, [r7, #0]
   250da:	6829      	ldr	r1, [r5, #0]
   250dc:	4618      	mov	r0, r3
   250de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   250e2:	603a      	str	r2, [r7, #0]
   250e4:	b003      	add	sp, #12
   250e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   250ea:	4b13      	ldr	r3, [pc, #76]	; (25138 <startTrngHW+0x148>)
   250ec:	4618      	mov	r0, r3
   250ee:	b003      	add	sp, #12
   250f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   250f4:	4b11      	ldr	r3, [pc, #68]	; (2513c <startTrngHW+0x14c>)
   250f6:	4618      	mov	r0, r3
   250f8:	b003      	add	sp, #12
   250fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   250fe:	4b0f      	ldr	r3, [pc, #60]	; (2513c <startTrngHW+0x14c>)
   25100:	4618      	mov	r0, r3
   25102:	4770      	bx	lr
   25104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25108:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   2510c:	3101      	adds	r1, #1
   2510e:	d006      	beq.n	2511e <startTrngHW+0x12e>
   25110:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   25114:	4907      	ldr	r1, [pc, #28]	; (25134 <startTrngHW+0x144>)
   25116:	fba1 1202 	umull	r1, r2, r1, r2
   2511a:	0912      	lsrs	r2, r2, #4
   2511c:	e7c9      	b.n	250b2 <startTrngHW+0xc2>
   2511e:	2216      	movs	r2, #22
   25120:	e7c7      	b.n	250b2 <startTrngHW+0xc2>
   25122:	f04f 0803 	mov.w	r8, #3
   25126:	e791      	b.n	2504c <startTrngHW+0x5c>
   25128:	f04f 0802 	mov.w	r8, #2
   2512c:	e78e      	b.n	2504c <startTrngHW+0x5c>
   2512e:	bf00      	nop
   25130:	5002b000 	.word	0x5002b000
   25134:	aaaaaaab 	.word	0xaaaaaaab
   25138:	00f10c31 	.word	0x00f10c31
   2513c:	00f10c35 	.word	0x00f10c35

00025140 <LLF_RND_RepetitionCounterTest.part.0>:
   25140:	b570      	push	{r4, r5, r6, lr}
   25142:	00c9      	lsls	r1, r1, #3
   25144:	2400      	movs	r4, #0
   25146:	1e4e      	subs	r6, r1, #1
   25148:	f04f 0c01 	mov.w	ip, #1
   2514c:	4625      	mov	r5, r4
   2514e:	46a6      	mov	lr, r4
   25150:	e008      	b.n	25164 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   25152:	459e      	cmp	lr, r3
   25154:	d015      	beq.n	25182 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   25156:	2501      	movs	r5, #1
   25158:	45b4      	cmp	ip, r6
   2515a:	d817      	bhi.n	2518c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   2515c:	3401      	adds	r4, #1
   2515e:	f10c 0c01 	add.w	ip, ip, #1
   25162:	469e      	mov	lr, r3
   25164:	0963      	lsrs	r3, r4, #5
   25166:	f004 011f 	and.w	r1, r4, #31
   2516a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2516e:	291f      	cmp	r1, #31
   25170:	fa23 f301 	lsr.w	r3, r3, r1
   25174:	bf18      	it	ne
   25176:	f003 0301 	andne.w	r3, r3, #1
   2517a:	2c00      	cmp	r4, #0
   2517c:	d1e9      	bne.n	25152 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   2517e:	2501      	movs	r5, #1
   25180:	e7ec      	b.n	2515c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   25182:	3501      	adds	r5, #1
   25184:	4295      	cmp	r5, r2
   25186:	d1e7      	bne.n	25158 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   25188:	4801      	ldr	r0, [pc, #4]	; (25190 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   2518a:	bd70      	pop	{r4, r5, r6, pc}
   2518c:	2000      	movs	r0, #0
   2518e:	bd70      	pop	{r4, r5, r6, pc}
   25190:	00f10c36 	.word	0x00f10c36

00025194 <LLF_RND_AdaptiveProportionTest>:
   25194:	2800      	cmp	r0, #0
   25196:	d03f      	beq.n	25218 <LLF_RND_AdaptiveProportionTest+0x84>
   25198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2519c:	1e4c      	subs	r4, r1, #1
   2519e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   251a2:	d228      	bcs.n	251f6 <LLF_RND_AdaptiveProportionTest+0x62>
   251a4:	b33b      	cbz	r3, 251f6 <LLF_RND_AdaptiveProportionTest+0x62>
   251a6:	b332      	cbz	r2, 251f6 <LLF_RND_AdaptiveProportionTest+0x62>
   251a8:	f04f 0e00 	mov.w	lr, #0
   251ac:	00cf      	lsls	r7, r1, #3
   251ae:	4676      	mov	r6, lr
   251b0:	4675      	mov	r5, lr
   251b2:	4674      	mov	r4, lr
   251b4:	f103 38ff 	add.w	r8, r3, #4294967295
   251b8:	0961      	lsrs	r1, r4, #5
   251ba:	f004 0c1f 	and.w	ip, r4, #31
   251be:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   251c2:	f1bc 0f1f 	cmp.w	ip, #31
   251c6:	fa21 f10c 	lsr.w	r1, r1, ip
   251ca:	bf18      	it	ne
   251cc:	f001 0101 	andne.w	r1, r1, #1
   251d0:	b1a4      	cbz	r4, 251fc <LLF_RND_AdaptiveProportionTest+0x68>
   251d2:	42ab      	cmp	r3, r5
   251d4:	d018      	beq.n	25208 <LLF_RND_AdaptiveProportionTest+0x74>
   251d6:	428e      	cmp	r6, r1
   251d8:	bf08      	it	eq
   251da:	f10e 0e01 	addeq.w	lr, lr, #1
   251de:	45a8      	cmp	r8, r5
   251e0:	d015      	beq.n	2520e <LLF_RND_AdaptiveProportionTest+0x7a>
   251e2:	3501      	adds	r5, #1
   251e4:	4631      	mov	r1, r6
   251e6:	3401      	adds	r4, #1
   251e8:	42bc      	cmp	r4, r7
   251ea:	d001      	beq.n	251f0 <LLF_RND_AdaptiveProportionTest+0x5c>
   251ec:	460e      	mov	r6, r1
   251ee:	e7e3      	b.n	251b8 <LLF_RND_AdaptiveProportionTest+0x24>
   251f0:	2000      	movs	r0, #0
   251f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   251f6:	4809      	ldr	r0, [pc, #36]	; (2521c <LLF_RND_AdaptiveProportionTest+0x88>)
   251f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   251fc:	f04f 0e01 	mov.w	lr, #1
   25200:	4674      	mov	r4, lr
   25202:	4675      	mov	r5, lr
   25204:	460e      	mov	r6, r1
   25206:	e7d7      	b.n	251b8 <LLF_RND_AdaptiveProportionTest+0x24>
   25208:	2501      	movs	r5, #1
   2520a:	46ae      	mov	lr, r5
   2520c:	e7eb      	b.n	251e6 <LLF_RND_AdaptiveProportionTest+0x52>
   2520e:	4572      	cmp	r2, lr
   25210:	d3f1      	bcc.n	251f6 <LLF_RND_AdaptiveProportionTest+0x62>
   25212:	4631      	mov	r1, r6
   25214:	461d      	mov	r5, r3
   25216:	e7e6      	b.n	251e6 <LLF_RND_AdaptiveProportionTest+0x52>
   25218:	4800      	ldr	r0, [pc, #0]	; (2521c <LLF_RND_AdaptiveProportionTest+0x88>)
   2521a:	4770      	bx	lr
   2521c:	00f10c37 	.word	0x00f10c37

00025220 <getTrngSource>:
   25220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25224:	b091      	sub	sp, #68	; 0x44
   25226:	460d      	mov	r5, r1
   25228:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   2522c:	4681      	mov	r9, r0
   2522e:	2900      	cmp	r1, #0
   25230:	d14c      	bne.n	252cc <getTrngSource+0xac>
   25232:	6928      	ldr	r0, [r5, #16]
   25234:	9006      	str	r0, [sp, #24]
   25236:	981a      	ldr	r0, [sp, #104]	; 0x68
   25238:	601c      	str	r4, [r3, #0]
   2523a:	2300      	movs	r3, #0
   2523c:	6003      	str	r3, [r0, #0]
   2523e:	2a00      	cmp	r2, #0
   25240:	f000 8124 	beq.w	2548c <getTrngSource+0x26c>
   25244:	4b9d      	ldr	r3, [pc, #628]	; (254bc <getTrngSource+0x29c>)
   25246:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   25248:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   2524c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25250:	429a      	cmp	r2, r3
   25252:	d147      	bne.n	252e4 <getTrngSource+0xc4>
   25254:	290a      	cmp	r1, #10
   25256:	d145      	bne.n	252e4 <getTrngSource+0xc4>
   25258:	f899 3003 	ldrb.w	r3, [r9, #3]
   2525c:	9308      	str	r3, [sp, #32]
   2525e:	f104 0308 	add.w	r3, r4, #8
   25262:	9a06      	ldr	r2, [sp, #24]
   25264:	9307      	str	r3, [sp, #28]
   25266:	4b96      	ldr	r3, [pc, #600]	; (254c0 <getTrngSource+0x2a0>)
   25268:	4c94      	ldr	r4, [pc, #592]	; (254bc <getTrngSource+0x29c>)
   2526a:	fba3 1302 	umull	r1, r3, r3, r2
   2526e:	089b      	lsrs	r3, r3, #2
   25270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25274:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   25278:	9303      	str	r3, [sp, #12]
   2527a:	2304      	movs	r3, #4
   2527c:	9305      	str	r3, [sp, #20]
   2527e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   25280:	9e06      	ldr	r6, [sp, #24]
   25282:	601e      	str	r6, [r3, #0]
   25284:	2e00      	cmp	r6, #0
   25286:	d033      	beq.n	252f0 <getTrngSource+0xd0>
   25288:	f8dd 801c 	ldr.w	r8, [sp, #28]
   2528c:	2700      	movs	r7, #0
   2528e:	f04f 0a01 	mov.w	sl, #1
   25292:	f000 fcbf 	bl	25c14 <LLF_RND_TurnOffTrng>
   25296:	2300      	movs	r3, #0
   25298:	9309      	str	r3, [sp, #36]	; 0x24
   2529a:	f1b9 0f00 	cmp.w	r9, #0
   2529e:	f000 80df 	beq.w	25460 <getTrngSource+0x240>
   252a2:	2d00      	cmp	r5, #0
   252a4:	f000 80dc 	beq.w	25460 <getTrngSource+0x240>
   252a8:	9b08      	ldr	r3, [sp, #32]
   252aa:	b1eb      	cbz	r3, 252e8 <getTrngSource+0xc8>
   252ac:	a908      	add	r1, sp, #32
   252ae:	4628      	mov	r0, r5
   252b0:	f000 fca0 	bl	25bf4 <LLF_RND_GetFastestRosc>
   252b4:	2800      	cmp	r0, #0
   252b6:	d03e      	beq.n	25336 <getTrngSource+0x116>
   252b8:	4b82      	ldr	r3, [pc, #520]	; (254c4 <getTrngSource+0x2a4>)
   252ba:	4298      	cmp	r0, r3
   252bc:	d118      	bne.n	252f0 <getTrngSource+0xd0>
   252be:	9003      	str	r0, [sp, #12]
   252c0:	f000 fca8 	bl	25c14 <LLF_RND_TurnOffTrng>
   252c4:	9803      	ldr	r0, [sp, #12]
   252c6:	b011      	add	sp, #68	; 0x44
   252c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   252d0:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   252d4:	3601      	adds	r6, #1
   252d6:	bf14      	ite	ne
   252d8:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   252dc:	f44f 7004 	moveq.w	r0, #528	; 0x210
   252e0:	9006      	str	r0, [sp, #24]
   252e2:	e7a8      	b.n	25236 <getTrngSource+0x16>
   252e4:	4878      	ldr	r0, [pc, #480]	; (254c8 <getTrngSource+0x2a8>)
   252e6:	e7ea      	b.n	252be <getTrngSource+0x9e>
   252e8:	4878      	ldr	r0, [pc, #480]	; (254cc <getTrngSource+0x2ac>)
   252ea:	4b76      	ldr	r3, [pc, #472]	; (254c4 <getTrngSource+0x2a4>)
   252ec:	4298      	cmp	r0, r3
   252ee:	d0e6      	beq.n	252be <getTrngSource+0x9e>
   252f0:	9b08      	ldr	r3, [sp, #32]
   252f2:	2b08      	cmp	r3, #8
   252f4:	f000 80c8 	beq.w	25488 <getTrngSource+0x268>
   252f8:	005b      	lsls	r3, r3, #1
   252fa:	2200      	movs	r2, #0
   252fc:	9308      	str	r3, [sp, #32]
   252fe:	9200      	str	r2, [sp, #0]
   25300:	ab08      	add	r3, sp, #32
   25302:	4629      	mov	r1, r5
   25304:	4648      	mov	r0, r9
   25306:	f7ff fe73 	bl	24ff0 <startTrngHW>
   2530a:	4b70      	ldr	r3, [pc, #448]	; (254cc <getTrngSource+0x2ac>)
   2530c:	4298      	cmp	r0, r3
   2530e:	f000 80b7 	beq.w	25480 <getTrngSource+0x260>
   25312:	2800      	cmp	r0, #0
   25314:	d1d3      	bne.n	252be <getTrngSource+0x9e>
   25316:	f8d9 2000 	ldr.w	r2, [r9]
   2531a:	0a13      	lsrs	r3, r2, #8
   2531c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   25320:	4313      	orrs	r3, r2
   25322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25326:	f8c9 3000 	str.w	r3, [r9]
   2532a:	9b05      	ldr	r3, [sp, #20]
   2532c:	3b01      	subs	r3, #1
   2532e:	9305      	str	r3, [sp, #20]
   25330:	d1a5      	bne.n	2527e <getTrngSource+0x5e>
   25332:	2000      	movs	r0, #0
   25334:	e7c3      	b.n	252be <getTrngSource+0x9e>
   25336:	9808      	ldr	r0, [sp, #32]
   25338:	4629      	mov	r1, r5
   2533a:	f000 fc3d 	bl	25bb8 <LLF_RND_GetRoscSampleCnt>
   2533e:	2800      	cmp	r0, #0
   25340:	d1ba      	bne.n	252b8 <getTrngSource+0x98>
   25342:	9b08      	ldr	r3, [sp, #32]
   25344:	2b08      	cmp	r3, #8
   25346:	f000 8095 	beq.w	25474 <getTrngSource+0x254>
   2534a:	2b04      	cmp	r3, #4
   2534c:	f000 8095 	beq.w	2547a <getTrngSource+0x25a>
   25350:	f1a3 0302 	sub.w	r3, r3, #2
   25354:	fab3 f383 	clz	r3, r3
   25358:	095b      	lsrs	r3, r3, #5
   2535a:	9304      	str	r3, [sp, #16]
   2535c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   25360:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   25364:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   25368:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2536a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   2536e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   25372:	4293      	cmp	r3, r2
   25374:	d1f6      	bne.n	25364 <getTrngSource+0x144>
   25376:	f04f 0b00 	mov.w	fp, #0
   2537a:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   2537e:	f04f 30ff 	mov.w	r0, #4294967295
   25382:	f7ff fd07 	bl	24d94 <CC_HalClearInterruptBit>
   25386:	f06f 031b 	mvn.w	r3, #27
   2538a:	4658      	mov	r0, fp
   2538c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   25390:	f7ff fd0e 	bl	24db0 <CC_HalMaskInterrupt>
   25394:	9b04      	ldr	r3, [sp, #16]
   25396:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   2539a:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   2539e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   253a2:	f7ff fd05 	bl	24db0 <CC_HalMaskInterrupt>
   253a6:	230a      	movs	r3, #10
   253a8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   253ac:	692b      	ldr	r3, [r5, #16]
   253ae:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   253b2:	fbab 2303 	umull	r2, r3, fp, r3
   253b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   253b8:	091b      	lsrs	r3, r3, #4
   253ba:	fb02 f303 	mul.w	r3, r2, r3
   253be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   253c2:	03db      	lsls	r3, r3, #15
   253c4:	099b      	lsrs	r3, r3, #6
   253c6:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   253ca:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   253ce:	9908      	ldr	r1, [sp, #32]
   253d0:	f8d9 2000 	ldr.w	r2, [r9]
   253d4:	020b      	lsls	r3, r1, #8
   253d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   253da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   253de:	4313      	orrs	r3, r2
   253e0:	f8c9 3000 	str.w	r3, [r9]
   253e4:	a809      	add	r0, sp, #36	; 0x24
   253e6:	f000 fbd7 	bl	25b98 <LLF_RND_WaitRngInterrupt>
   253ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   253ec:	f003 031a 	and.w	r3, r3, #26
   253f0:	4303      	orrs	r3, r0
   253f2:	f47f af7d 	bne.w	252f0 <getTrngSource+0xd0>
   253f6:	fbab 3b06 	umull	r3, fp, fp, r6
   253fa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   253fe:	930a      	str	r3, [sp, #40]	; 0x28
   25400:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   25404:	930b      	str	r3, [sp, #44]	; 0x2c
   25406:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2540a:	930c      	str	r3, [sp, #48]	; 0x30
   2540c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   25410:	930d      	str	r3, [sp, #52]	; 0x34
   25412:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   25416:	930e      	str	r3, [sp, #56]	; 0x38
   25418:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2541c:	930f      	str	r3, [sp, #60]	; 0x3c
   2541e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   25422:	d101      	bne.n	25428 <getTrngSource+0x208>
   25424:	9b03      	ldr	r3, [sp, #12]
   25426:	b9eb      	cbnz	r3, 25464 <getTrngSource+0x244>
   25428:	4640      	mov	r0, r8
   2542a:	2218      	movs	r2, #24
   2542c:	a90a      	add	r1, sp, #40	; 0x28
   2542e:	3e18      	subs	r6, #24
   25430:	f108 0818 	add.w	r8, r8, #24
   25434:	f7ff fd3c 	bl	24eb0 <CC_PalMemCopyPlat>
   25438:	3701      	adds	r7, #1
   2543a:	2e00      	cmp	r6, #0
   2543c:	f47f af29 	bne.w	25292 <getTrngSource+0x72>
   25440:	9b06      	ldr	r3, [sp, #24]
   25442:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   25446:	d836      	bhi.n	254b6 <getTrngSource+0x296>
   25448:	9e07      	ldr	r6, [sp, #28]
   2544a:	696a      	ldr	r2, [r5, #20]
   2544c:	4619      	mov	r1, r3
   2544e:	4630      	mov	r0, r6
   25450:	461f      	mov	r7, r3
   25452:	f7ff fe75 	bl	25140 <LLF_RND_RepetitionCounterTest.part.0>
   25456:	b320      	cbz	r0, 254a2 <getTrngSource+0x282>
   25458:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2545a:	2300      	movs	r3, #0
   2545c:	6013      	str	r3, [r2, #0]
   2545e:	e72b      	b.n	252b8 <getTrngSource+0x98>
   25460:	481b      	ldr	r0, [pc, #108]	; (254d0 <getTrngSource+0x2b0>)
   25462:	e729      	b.n	252b8 <getTrngSource+0x98>
   25464:	4640      	mov	r0, r8
   25466:	461a      	mov	r2, r3
   25468:	a90a      	add	r1, sp, #40	; 0x28
   2546a:	1af6      	subs	r6, r6, r3
   2546c:	4498      	add	r8, r3
   2546e:	f7ff fd1f 	bl	24eb0 <CC_PalMemCopyPlat>
   25472:	e7e1      	b.n	25438 <getTrngSource+0x218>
   25474:	2303      	movs	r3, #3
   25476:	9304      	str	r3, [sp, #16]
   25478:	e770      	b.n	2535c <getTrngSource+0x13c>
   2547a:	2302      	movs	r3, #2
   2547c:	9304      	str	r3, [sp, #16]
   2547e:	e76d      	b.n	2535c <getTrngSource+0x13c>
   25480:	6a2b      	ldr	r3, [r5, #32]
   25482:	2b00      	cmp	r3, #0
   25484:	f43f af1b 	beq.w	252be <getTrngSource+0x9e>
   25488:	4812      	ldr	r0, [pc, #72]	; (254d4 <getTrngSource+0x2b4>)
   2548a:	e718      	b.n	252be <getTrngSource+0x9e>
   2548c:	9100      	str	r1, [sp, #0]
   2548e:	ab08      	add	r3, sp, #32
   25490:	2201      	movs	r2, #1
   25492:	4629      	mov	r1, r5
   25494:	4648      	mov	r0, r9
   25496:	f7ff fdab 	bl	24ff0 <startTrngHW>
   2549a:	2800      	cmp	r0, #0
   2549c:	f43f aedf 	beq.w	2525e <getTrngSource+0x3e>
   254a0:	e70d      	b.n	252be <getTrngSource+0x9e>
   254a2:	69aa      	ldr	r2, [r5, #24]
   254a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   254a8:	4639      	mov	r1, r7
   254aa:	4630      	mov	r0, r6
   254ac:	f7ff fe72 	bl	25194 <LLF_RND_AdaptiveProportionTest>
   254b0:	2800      	cmp	r0, #0
   254b2:	d1d1      	bne.n	25458 <getTrngSource+0x238>
   254b4:	e73d      	b.n	25332 <getTrngSource+0x112>
   254b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   254b8:	601e      	str	r6, [r3, #0]
   254ba:	e719      	b.n	252f0 <getTrngSource+0xd0>
   254bc:	5002b000 	.word	0x5002b000
   254c0:	aaaaaaab 	.word	0xaaaaaaab
   254c4:	00f10c02 	.word	0x00f10c02
   254c8:	00f10c30 	.word	0x00f10c30
   254cc:	00f10c31 	.word	0x00f10c31
   254d0:	00f10c35 	.word	0x00f10c35
   254d4:	00f10c32 	.word	0x00f10c32

000254d8 <LLF_RND_GetTrngSource>:
   254d8:	b410      	push	{r4}
   254da:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   254de:	9401      	str	r4, [sp, #4]
   254e0:	9c03      	ldr	r4, [sp, #12]
   254e2:	9402      	str	r4, [sp, #8]
   254e4:	2400      	movs	r4, #0
   254e6:	9403      	str	r4, [sp, #12]
   254e8:	bc10      	pop	{r4}
   254ea:	f7ff be99 	b.w	25220 <getTrngSource>
   254ee:	bf00      	nop

000254f0 <LLF_RND_RunTrngStartupTest>:
   254f0:	b510      	push	{r4, lr}
   254f2:	b086      	sub	sp, #24
   254f4:	ab05      	add	r3, sp, #20
   254f6:	2401      	movs	r4, #1
   254f8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   254fc:	9300      	str	r3, [sp, #0]
   254fe:	2200      	movs	r2, #0
   25500:	ab04      	add	r3, sp, #16
   25502:	f7ff fe8d 	bl	25220 <getTrngSource>
   25506:	b006      	add	sp, #24
   25508:	bd10      	pop	{r4, pc}
   2550a:	bf00      	nop

0002550c <mbedtls_hardware_poll>:
   2550c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2550e:	b089      	sub	sp, #36	; 0x24
   25510:	9205      	str	r2, [sp, #20]
   25512:	2900      	cmp	r1, #0
   25514:	d064      	beq.n	255e0 <mbedtls_hardware_poll+0xd4>
   25516:	461c      	mov	r4, r3
   25518:	2b00      	cmp	r3, #0
   2551a:	d061      	beq.n	255e0 <mbedtls_hardware_poll+0xd4>
   2551c:	4615      	mov	r5, r2
   2551e:	2a00      	cmp	r2, #0
   25520:	d05e      	beq.n	255e0 <mbedtls_hardware_poll+0xd4>
   25522:	4f31      	ldr	r7, [pc, #196]	; (255e8 <mbedtls_hardware_poll+0xdc>)
   25524:	460e      	mov	r6, r1
   25526:	6838      	ldr	r0, [r7, #0]
   25528:	f04f 31ff 	mov.w	r1, #4294967295
   2552c:	f7ff fcdc 	bl	24ee8 <CC_PalMutexLock>
   25530:	2800      	cmp	r0, #0
   25532:	d14b      	bne.n	255cc <mbedtls_hardware_poll+0xc0>
   25534:	2000      	movs	r0, #0
   25536:	f7ff fd07 	bl	24f48 <CC_PalPowerSaveModeSelect>
   2553a:	2800      	cmp	r0, #0
   2553c:	d142      	bne.n	255c4 <mbedtls_hardware_poll+0xb8>
   2553e:	482b      	ldr	r0, [pc, #172]	; (255ec <mbedtls_hardware_poll+0xe0>)
   25540:	f000 fa9a 	bl	25a78 <RNG_PLAT_SetUserRngParameters>
   25544:	b1d8      	cbz	r0, 2557e <mbedtls_hardware_poll+0x72>
   25546:	2001      	movs	r0, #1
   25548:	f04f 36ff 	mov.w	r6, #4294967295
   2554c:	f7ff fcfc 	bl	24f48 <CC_PalPowerSaveModeSelect>
   25550:	2800      	cmp	r0, #0
   25552:	d133      	bne.n	255bc <mbedtls_hardware_poll+0xb0>
   25554:	4826      	ldr	r0, [pc, #152]	; (255f0 <mbedtls_hardware_poll+0xe4>)
   25556:	f44f 7108 	mov.w	r1, #544	; 0x220
   2555a:	f7fe fe63 	bl	24224 <mbedtls_zeroize_internal>
   2555e:	4825      	ldr	r0, [pc, #148]	; (255f4 <mbedtls_hardware_poll+0xe8>)
   25560:	2104      	movs	r1, #4
   25562:	f7fe fe5f 	bl	24224 <mbedtls_zeroize_internal>
   25566:	4821      	ldr	r0, [pc, #132]	; (255ec <mbedtls_hardware_poll+0xe0>)
   25568:	2128      	movs	r1, #40	; 0x28
   2556a:	f7fe fe5b 	bl	24224 <mbedtls_zeroize_internal>
   2556e:	6838      	ldr	r0, [r7, #0]
   25570:	f7ff fcc2 	bl	24ef8 <CC_PalMutexUnlock>
   25574:	2800      	cmp	r0, #0
   25576:	d12d      	bne.n	255d4 <mbedtls_hardware_poll+0xc8>
   25578:	4630      	mov	r0, r6
   2557a:	b009      	add	sp, #36	; 0x24
   2557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2557e:	4b1c      	ldr	r3, [pc, #112]	; (255f0 <mbedtls_hardware_poll+0xe4>)
   25580:	9302      	str	r3, [sp, #8]
   25582:	ab07      	add	r3, sp, #28
   25584:	9003      	str	r0, [sp, #12]
   25586:	4602      	mov	r2, r0
   25588:	9300      	str	r3, [sp, #0]
   2558a:	4918      	ldr	r1, [pc, #96]	; (255ec <mbedtls_hardware_poll+0xe0>)
   2558c:	4819      	ldr	r0, [pc, #100]	; (255f4 <mbedtls_hardware_poll+0xe8>)
   2558e:	9401      	str	r4, [sp, #4]
   25590:	ab05      	add	r3, sp, #20
   25592:	f7ff ffa1 	bl	254d8 <LLF_RND_GetTrngSource>
   25596:	4603      	mov	r3, r0
   25598:	2800      	cmp	r0, #0
   2559a:	d1d4      	bne.n	25546 <mbedtls_hardware_poll+0x3a>
   2559c:	6822      	ldr	r2, [r4, #0]
   2559e:	42aa      	cmp	r2, r5
   255a0:	d3d1      	bcc.n	25546 <mbedtls_hardware_poll+0x3a>
   255a2:	9907      	ldr	r1, [sp, #28]
   255a4:	4630      	mov	r0, r6
   255a6:	3108      	adds	r1, #8
   255a8:	462a      	mov	r2, r5
   255aa:	461e      	mov	r6, r3
   255ac:	f7ff fc80 	bl	24eb0 <CC_PalMemCopyPlat>
   255b0:	6025      	str	r5, [r4, #0]
   255b2:	2001      	movs	r0, #1
   255b4:	f7ff fcc8 	bl	24f48 <CC_PalPowerSaveModeSelect>
   255b8:	2800      	cmp	r0, #0
   255ba:	d0cb      	beq.n	25554 <mbedtls_hardware_poll+0x48>
   255bc:	480e      	ldr	r0, [pc, #56]	; (255f8 <mbedtls_hardware_poll+0xec>)
   255be:	f7fe fd33 	bl	24028 <CC_PalAbort>
   255c2:	e7c7      	b.n	25554 <mbedtls_hardware_poll+0x48>
   255c4:	480d      	ldr	r0, [pc, #52]	; (255fc <mbedtls_hardware_poll+0xf0>)
   255c6:	f7fe fd2f 	bl	24028 <CC_PalAbort>
   255ca:	e7b8      	b.n	2553e <mbedtls_hardware_poll+0x32>
   255cc:	480c      	ldr	r0, [pc, #48]	; (25600 <mbedtls_hardware_poll+0xf4>)
   255ce:	f7fe fd2b 	bl	24028 <CC_PalAbort>
   255d2:	e7af      	b.n	25534 <mbedtls_hardware_poll+0x28>
   255d4:	480b      	ldr	r0, [pc, #44]	; (25604 <mbedtls_hardware_poll+0xf8>)
   255d6:	f7fe fd27 	bl	24028 <CC_PalAbort>
   255da:	4630      	mov	r0, r6
   255dc:	b009      	add	sp, #36	; 0x24
   255de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   255e0:	f04f 36ff 	mov.w	r6, #4294967295
   255e4:	e7c8      	b.n	25578 <mbedtls_hardware_poll+0x6c>
   255e6:	bf00      	nop
   255e8:	20000918 	.word	0x20000918
   255ec:	20003c6c 	.word	0x20003c6c
   255f0:	20003a4c 	.word	0x20003a4c
   255f4:	20003a48 	.word	0x20003a48
   255f8:	0002d67c 	.word	0x0002d67c
   255fc:	0002d65c 	.word	0x0002d65c
   25600:	0002d644 	.word	0x0002d644
   25604:	0002d6d4 	.word	0x0002d6d4

00025608 <cc_mbedtls_aes_init>:
   25608:	b510      	push	{r4, lr}
   2560a:	4604      	mov	r4, r0
   2560c:	b130      	cbz	r0, 2561c <cc_mbedtls_aes_init+0x14>
   2560e:	2200      	movs	r2, #0
   25610:	2301      	movs	r3, #1
   25612:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   25616:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2561a:	bd10      	pop	{r4, pc}
   2561c:	4801      	ldr	r0, [pc, #4]	; (25624 <cc_mbedtls_aes_init+0x1c>)
   2561e:	f7fe fd03 	bl	24028 <CC_PalAbort>
   25622:	e7f4      	b.n	2560e <cc_mbedtls_aes_init+0x6>
   25624:	0002d6ec 	.word	0x0002d6ec

00025628 <cc_mbedtls_aes_free>:
   25628:	b118      	cbz	r0, 25632 <cc_mbedtls_aes_free+0xa>
   2562a:	2274      	movs	r2, #116	; 0x74
   2562c:	2100      	movs	r1, #0
   2562e:	f7ff bc41 	b.w	24eb4 <CC_PalMemSetPlat>
   25632:	4770      	bx	lr

00025634 <cc_mbedtls_aes_setkey_enc>:
   25634:	b190      	cbz	r0, 2565c <cc_mbedtls_aes_setkey_enc+0x28>
   25636:	b1a1      	cbz	r1, 25662 <cc_mbedtls_aes_setkey_enc+0x2e>
   25638:	b510      	push	{r4, lr}
   2563a:	2a80      	cmp	r2, #128	; 0x80
   2563c:	f04f 0400 	mov.w	r4, #0
   25640:	6384      	str	r4, [r0, #56]	; 0x38
   25642:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   25646:	d106      	bne.n	25656 <cc_mbedtls_aes_setkey_enc+0x22>
   25648:	2210      	movs	r2, #16
   2564a:	6304      	str	r4, [r0, #48]	; 0x30
   2564c:	4410      	add	r0, r2
   2564e:	f7ff fc2f 	bl	24eb0 <CC_PalMemCopyPlat>
   25652:	4620      	mov	r0, r4
   25654:	bd10      	pop	{r4, pc}
   25656:	f06f 001f 	mvn.w	r0, #31
   2565a:	bd10      	pop	{r4, pc}
   2565c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   25660:	4770      	bx	lr
   25662:	f06f 001f 	mvn.w	r0, #31
   25666:	4770      	bx	lr

00025668 <cc_mbedtls_aes_crypt_ecb>:
   25668:	b328      	cbz	r0, 256b6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2566a:	b322      	cbz	r2, 256b6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2566c:	b31b      	cbz	r3, 256b6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2566e:	2901      	cmp	r1, #1
   25670:	d821      	bhi.n	256b6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   25672:	b570      	push	{r4, r5, r6, lr}
   25674:	4604      	mov	r4, r0
   25676:	6b81      	ldr	r1, [r0, #56]	; 0x38
   25678:	b086      	sub	sp, #24
   2567a:	d017      	beq.n	256ac <cc_mbedtls_aes_crypt_ecb+0x44>
   2567c:	2901      	cmp	r1, #1
   2567e:	d117      	bne.n	256b0 <cc_mbedtls_aes_crypt_ecb+0x48>
   25680:	2510      	movs	r5, #16
   25682:	2100      	movs	r1, #0
   25684:	eb0d 0605 	add.w	r6, sp, r5
   25688:	6361      	str	r1, [r4, #52]	; 0x34
   2568a:	4610      	mov	r0, r2
   2568c:	9500      	str	r5, [sp, #0]
   2568e:	9601      	str	r6, [sp, #4]
   25690:	aa02      	add	r2, sp, #8
   25692:	4629      	mov	r1, r5
   25694:	f000 faca 	bl	25c2c <SetDataBuffersInfo>
   25698:	b950      	cbnz	r0, 256b0 <cc_mbedtls_aes_crypt_ecb+0x48>
   2569a:	462b      	mov	r3, r5
   2569c:	4632      	mov	r2, r6
   2569e:	a902      	add	r1, sp, #8
   256a0:	4620      	mov	r0, r4
   256a2:	f000 fd4b 	bl	2613c <ProcessAesDrv>
   256a6:	b918      	cbnz	r0, 256b0 <cc_mbedtls_aes_crypt_ecb+0x48>
   256a8:	b006      	add	sp, #24
   256aa:	bd70      	pop	{r4, r5, r6, pc}
   256ac:	2900      	cmp	r1, #0
   256ae:	d0e7      	beq.n	25680 <cc_mbedtls_aes_crypt_ecb+0x18>
   256b0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   256b4:	e7f8      	b.n	256a8 <cc_mbedtls_aes_crypt_ecb+0x40>
   256b6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   256ba:	4770      	bx	lr

000256bc <cc_mbedtls_sha256_init>:
   256bc:	b510      	push	{r4, lr}
   256be:	4604      	mov	r4, r0
   256c0:	b128      	cbz	r0, 256ce <cc_mbedtls_sha256_init+0x12>
   256c2:	4620      	mov	r0, r4
   256c4:	21f4      	movs	r1, #244	; 0xf4
   256c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   256ca:	f7ff bbf5 	b.w	24eb8 <CC_PalMemSetZeroPlat>
   256ce:	4804      	ldr	r0, [pc, #16]	; (256e0 <cc_mbedtls_sha256_init+0x24>)
   256d0:	f7fe fcaa 	bl	24028 <CC_PalAbort>
   256d4:	4620      	mov	r0, r4
   256d6:	21f4      	movs	r1, #244	; 0xf4
   256d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   256dc:	f7ff bbec 	b.w	24eb8 <CC_PalMemSetZeroPlat>
   256e0:	0002d700 	.word	0x0002d700

000256e4 <cc_mbedtls_sha256_free>:
   256e4:	b110      	cbz	r0, 256ec <cc_mbedtls_sha256_free+0x8>
   256e6:	21f4      	movs	r1, #244	; 0xf4
   256e8:	f7fe bd9c 	b.w	24224 <mbedtls_zeroize_internal>
   256ec:	4770      	bx	lr
   256ee:	bf00      	nop

000256f0 <cc_mbedtls_sha256_starts>:
   256f0:	b508      	push	{r3, lr}
   256f2:	b161      	cbz	r1, 2570e <cc_mbedtls_sha256_starts+0x1e>
   256f4:	2901      	cmp	r1, #1
   256f6:	d107      	bne.n	25708 <cc_mbedtls_sha256_starts+0x18>
   256f8:	2102      	movs	r1, #2
   256fa:	f000 f85b 	bl	257b4 <mbedtls_sha_starts_internal>
   256fe:	2800      	cmp	r0, #0
   25700:	bf18      	it	ne
   25702:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   25706:	bd08      	pop	{r3, pc}
   25708:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2570c:	bd08      	pop	{r3, pc}
   2570e:	2101      	movs	r1, #1
   25710:	f000 f850 	bl	257b4 <mbedtls_sha_starts_internal>
   25714:	e7f3      	b.n	256fe <cc_mbedtls_sha256_starts+0xe>
   25716:	bf00      	nop

00025718 <cc_mbedtls_sha256_update>:
   25718:	b530      	push	{r4, r5, lr}
   2571a:	4605      	mov	r5, r0
   2571c:	1888      	adds	r0, r1, r2
   2571e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   25722:	b0a1      	sub	sp, #132	; 0x84
   25724:	460b      	mov	r3, r1
   25726:	4614      	mov	r4, r2
   25728:	d801      	bhi.n	2572e <cc_mbedtls_sha256_update+0x16>
   2572a:	2a80      	cmp	r2, #128	; 0x80
   2572c:	d90c      	bls.n	25748 <cc_mbedtls_sha256_update+0x30>
   2572e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25732:	d917      	bls.n	25764 <cc_mbedtls_sha256_update+0x4c>
   25734:	4622      	mov	r2, r4
   25736:	4619      	mov	r1, r3
   25738:	4628      	mov	r0, r5
   2573a:	f000 f87d 	bl	25838 <mbedtls_sha_update_internal>
   2573e:	4604      	mov	r4, r0
   25740:	b984      	cbnz	r4, 25764 <cc_mbedtls_sha256_update+0x4c>
   25742:	4620      	mov	r0, r4
   25744:	b021      	add	sp, #132	; 0x84
   25746:	bd30      	pop	{r4, r5, pc}
   25748:	4668      	mov	r0, sp
   2574a:	f7ff fbb1 	bl	24eb0 <CC_PalMemCopyPlat>
   2574e:	4622      	mov	r2, r4
   25750:	4669      	mov	r1, sp
   25752:	4628      	mov	r0, r5
   25754:	f000 f870 	bl	25838 <mbedtls_sha_update_internal>
   25758:	2180      	movs	r1, #128	; 0x80
   2575a:	4604      	mov	r4, r0
   2575c:	4668      	mov	r0, sp
   2575e:	f7ff fbab 	bl	24eb8 <CC_PalMemSetZeroPlat>
   25762:	e7ed      	b.n	25740 <cc_mbedtls_sha256_update+0x28>
   25764:	f06f 0436 	mvn.w	r4, #54	; 0x36
   25768:	e7eb      	b.n	25742 <cc_mbedtls_sha256_update+0x2a>
   2576a:	bf00      	nop

0002576c <cc_mbedtls_sha256_finish>:
   2576c:	b570      	push	{r4, r5, r6, lr}
   2576e:	b1e8      	cbz	r0, 257ac <cc_mbedtls_sha256_finish+0x40>
   25770:	460e      	mov	r6, r1
   25772:	b1d9      	cbz	r1, 257ac <cc_mbedtls_sha256_finish+0x40>
   25774:	4604      	mov	r4, r0
   25776:	f000 f831 	bl	257dc <mbedtls_sha_finish_internal>
   2577a:	4605      	mov	r5, r0
   2577c:	b9b0      	cbnz	r0, 257ac <cc_mbedtls_sha256_finish+0x40>
   2577e:	6823      	ldr	r3, [r4, #0]
   25780:	2b01      	cmp	r3, #1
   25782:	d00b      	beq.n	2579c <cc_mbedtls_sha256_finish+0x30>
   25784:	2b02      	cmp	r3, #2
   25786:	d001      	beq.n	2578c <cc_mbedtls_sha256_finish+0x20>
   25788:	4628      	mov	r0, r5
   2578a:	bd70      	pop	{r4, r5, r6, pc}
   2578c:	221c      	movs	r2, #28
   2578e:	f104 0108 	add.w	r1, r4, #8
   25792:	4630      	mov	r0, r6
   25794:	f7ff fb8c 	bl	24eb0 <CC_PalMemCopyPlat>
   25798:	4628      	mov	r0, r5
   2579a:	bd70      	pop	{r4, r5, r6, pc}
   2579c:	2220      	movs	r2, #32
   2579e:	f104 0108 	add.w	r1, r4, #8
   257a2:	4630      	mov	r0, r6
   257a4:	f7ff fb84 	bl	24eb0 <CC_PalMemCopyPlat>
   257a8:	4628      	mov	r0, r5
   257aa:	bd70      	pop	{r4, r5, r6, pc}
   257ac:	f06f 0536 	mvn.w	r5, #54	; 0x36
   257b0:	e7ea      	b.n	25788 <cc_mbedtls_sha256_finish+0x1c>
   257b2:	bf00      	nop

000257b4 <mbedtls_sha_starts_internal>:
   257b4:	b178      	cbz	r0, 257d6 <mbedtls_sha_starts_internal+0x22>
   257b6:	b538      	push	{r3, r4, r5, lr}
   257b8:	4604      	mov	r4, r0
   257ba:	460d      	mov	r5, r1
   257bc:	21f0      	movs	r1, #240	; 0xf0
   257be:	f7ff fb7b 	bl	24eb8 <CC_PalMemSetZeroPlat>
   257c2:	2340      	movs	r3, #64	; 0x40
   257c4:	6025      	str	r5, [r4, #0]
   257c6:	65e3      	str	r3, [r4, #92]	; 0x5c
   257c8:	4620      	mov	r0, r4
   257ca:	f000 fa63 	bl	25c94 <InitHashDrv>
   257ce:	3800      	subs	r0, #0
   257d0:	bf18      	it	ne
   257d2:	2001      	movne	r0, #1
   257d4:	bd38      	pop	{r3, r4, r5, pc}
   257d6:	2001      	movs	r0, #1
   257d8:	4770      	bx	lr
   257da:	bf00      	nop

000257dc <mbedtls_sha_finish_internal>:
   257dc:	b570      	push	{r4, r5, r6, lr}
   257de:	6e05      	ldr	r5, [r0, #96]	; 0x60
   257e0:	b0a4      	sub	sp, #144	; 0x90
   257e2:	4604      	mov	r4, r0
   257e4:	ae04      	add	r6, sp, #16
   257e6:	b9e5      	cbnz	r5, 25822 <mbedtls_sha_finish_internal+0x46>
   257e8:	2201      	movs	r2, #1
   257ea:	2300      	movs	r3, #0
   257ec:	6062      	str	r2, [r4, #4]
   257ee:	4630      	mov	r0, r6
   257f0:	e9cd 3300 	strd	r3, r3, [sp]
   257f4:	aa02      	add	r2, sp, #8
   257f6:	4629      	mov	r1, r5
   257f8:	f000 fa18 	bl	25c2c <SetDataBuffersInfo>
   257fc:	b110      	cbz	r0, 25804 <mbedtls_sha_finish_internal+0x28>
   257fe:	2001      	movs	r0, #1
   25800:	b024      	add	sp, #144	; 0x90
   25802:	bd70      	pop	{r4, r5, r6, pc}
   25804:	462a      	mov	r2, r5
   25806:	a902      	add	r1, sp, #8
   25808:	4620      	mov	r0, r4
   2580a:	f000 fa6d 	bl	25ce8 <ProcessHashDrv>
   2580e:	2800      	cmp	r0, #0
   25810:	d1f5      	bne.n	257fe <mbedtls_sha_finish_internal+0x22>
   25812:	4620      	mov	r0, r4
   25814:	f000 fb7e 	bl	25f14 <FinishHashDrv>
   25818:	2800      	cmp	r0, #0
   2581a:	d1f0      	bne.n	257fe <mbedtls_sha_finish_internal+0x22>
   2581c:	6620      	str	r0, [r4, #96]	; 0x60
   2581e:	b024      	add	sp, #144	; 0x90
   25820:	bd70      	pop	{r4, r5, r6, pc}
   25822:	2d80      	cmp	r5, #128	; 0x80
   25824:	462a      	mov	r2, r5
   25826:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2582a:	bf28      	it	cs
   2582c:	2280      	movcs	r2, #128	; 0x80
   2582e:	4630      	mov	r0, r6
   25830:	f7ff fb3e 	bl	24eb0 <CC_PalMemCopyPlat>
   25834:	6e25      	ldr	r5, [r4, #96]	; 0x60
   25836:	e7d7      	b.n	257e8 <mbedtls_sha_finish_internal+0xc>

00025838 <mbedtls_sha_update_internal>:
   25838:	2800      	cmp	r0, #0
   2583a:	f000 80cd 	beq.w	259d8 <mbedtls_sha_update_internal+0x1a0>
   2583e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25842:	4615      	mov	r5, r2
   25844:	b0a5      	sub	sp, #148	; 0x94
   25846:	2a00      	cmp	r2, #0
   25848:	f000 80b4 	beq.w	259b4 <mbedtls_sha_update_internal+0x17c>
   2584c:	460f      	mov	r7, r1
   2584e:	2900      	cmp	r1, #0
   25850:	f000 80ac 	beq.w	259ac <mbedtls_sha_update_internal+0x174>
   25854:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   25858:	4606      	mov	r6, r0
   2585a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2585c:	d37d      	bcc.n	2595a <mbedtls_sha_update_internal+0x122>
   2585e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   25862:	f106 0964 	add.w	r9, r6, #100	; 0x64
   25866:	e014      	b.n	25892 <mbedtls_sha_update_internal+0x5a>
   25868:	4283      	cmp	r3, r0
   2586a:	46ba      	mov	sl, r7
   2586c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   25870:	d029      	beq.n	258c6 <mbedtls_sha_update_internal+0x8e>
   25872:	fbb4 fbf3 	udiv	fp, r4, r3
   25876:	fb03 fb0b 	mul.w	fp, r3, fp
   2587a:	f1bb 0f00 	cmp.w	fp, #0
   2587e:	d144      	bne.n	2590a <mbedtls_sha_update_internal+0xd2>
   25880:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   25884:	4447      	add	r7, r8
   25886:	3dff      	subs	r5, #255	; 0xff
   25888:	2c00      	cmp	r4, #0
   2588a:	d159      	bne.n	25940 <mbedtls_sha_update_internal+0x108>
   2588c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25890:	d363      	bcc.n	2595a <mbedtls_sha_update_internal+0x122>
   25892:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   25894:	1a1c      	subs	r4, r3, r0
   25896:	fbb4 f2f3 	udiv	r2, r4, r3
   2589a:	fb03 4412 	mls	r4, r3, r2, r4
   2589e:	2c00      	cmp	r4, #0
   258a0:	d0e2      	beq.n	25868 <mbedtls_sha_update_internal+0x30>
   258a2:	4544      	cmp	r4, r8
   258a4:	bf28      	it	cs
   258a6:	4644      	movcs	r4, r8
   258a8:	4622      	mov	r2, r4
   258aa:	4448      	add	r0, r9
   258ac:	4639      	mov	r1, r7
   258ae:	f7ff faff 	bl	24eb0 <CC_PalMemCopyPlat>
   258b2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   258b4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   258b6:	4420      	add	r0, r4
   258b8:	4283      	cmp	r3, r0
   258ba:	eb07 0a04 	add.w	sl, r7, r4
   258be:	6630      	str	r0, [r6, #96]	; 0x60
   258c0:	eba8 0404 	sub.w	r4, r8, r4
   258c4:	d1d5      	bne.n	25872 <mbedtls_sha_update_internal+0x3a>
   258c6:	2b80      	cmp	r3, #128	; 0x80
   258c8:	bf28      	it	cs
   258ca:	2380      	movcs	r3, #128	; 0x80
   258cc:	461a      	mov	r2, r3
   258ce:	4649      	mov	r1, r9
   258d0:	a804      	add	r0, sp, #16
   258d2:	f7ff faed 	bl	24eb0 <CC_PalMemCopyPlat>
   258d6:	2300      	movs	r3, #0
   258d8:	e9cd 3300 	strd	r3, r3, [sp]
   258dc:	aa02      	add	r2, sp, #8
   258de:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   258e0:	a804      	add	r0, sp, #16
   258e2:	f000 f9a3 	bl	25c2c <SetDataBuffersInfo>
   258e6:	2800      	cmp	r0, #0
   258e8:	d160      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   258ea:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   258ec:	a902      	add	r1, sp, #8
   258ee:	4630      	mov	r0, r6
   258f0:	f000 f9fa 	bl	25ce8 <ProcessHashDrv>
   258f4:	2800      	cmp	r0, #0
   258f6:	d159      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   258f8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   258fa:	fbb4 fbf3 	udiv	fp, r4, r3
   258fe:	fb03 fb0b 	mul.w	fp, r3, fp
   25902:	6630      	str	r0, [r6, #96]	; 0x60
   25904:	f1bb 0f00 	cmp.w	fp, #0
   25908:	d0ba      	beq.n	25880 <mbedtls_sha_update_internal+0x48>
   2590a:	2300      	movs	r3, #0
   2590c:	e9cd 3300 	strd	r3, r3, [sp]
   25910:	aa02      	add	r2, sp, #8
   25912:	4659      	mov	r1, fp
   25914:	4650      	mov	r0, sl
   25916:	f000 f989 	bl	25c2c <SetDataBuffersInfo>
   2591a:	2800      	cmp	r0, #0
   2591c:	d146      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   2591e:	a902      	add	r1, sp, #8
   25920:	465a      	mov	r2, fp
   25922:	4630      	mov	r0, r6
   25924:	f000 f9e0 	bl	25ce8 <ProcessHashDrv>
   25928:	2800      	cmp	r0, #0
   2592a:	d13f      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   2592c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   25930:	eba4 040b 	sub.w	r4, r4, fp
   25934:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25936:	44da      	add	sl, fp
   25938:	4447      	add	r7, r8
   2593a:	3dff      	subs	r5, #255	; 0xff
   2593c:	2c00      	cmp	r4, #0
   2593e:	d0a5      	beq.n	2588c <mbedtls_sha_update_internal+0x54>
   25940:	3019      	adds	r0, #25
   25942:	4651      	mov	r1, sl
   25944:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   25948:	4622      	mov	r2, r4
   2594a:	f7ff fab1 	bl	24eb0 <CC_PalMemCopyPlat>
   2594e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25950:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25954:	4420      	add	r0, r4
   25956:	6630      	str	r0, [r6, #96]	; 0x60
   25958:	d29b      	bcs.n	25892 <mbedtls_sha_update_internal+0x5a>
   2595a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2595c:	1a14      	subs	r4, r2, r0
   2595e:	fbb4 f3f2 	udiv	r3, r4, r2
   25962:	fb02 4413 	mls	r4, r2, r3, r4
   25966:	42ac      	cmp	r4, r5
   25968:	bf28      	it	cs
   2596a:	462c      	movcs	r4, r5
   2596c:	bb34      	cbnz	r4, 259bc <mbedtls_sha_update_internal+0x184>
   2596e:	4290      	cmp	r0, r2
   25970:	d034      	beq.n	259dc <mbedtls_sha_update_internal+0x1a4>
   25972:	fbb5 f4f2 	udiv	r4, r5, r2
   25976:	fb02 f404 	mul.w	r4, r2, r4
   2597a:	b96c      	cbnz	r4, 25998 <mbedtls_sha_update_internal+0x160>
   2597c:	b1d5      	cbz	r5, 259b4 <mbedtls_sha_update_internal+0x17c>
   2597e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   25980:	3319      	adds	r3, #25
   25982:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   25986:	462a      	mov	r2, r5
   25988:	4639      	mov	r1, r7
   2598a:	f7ff fa91 	bl	24eb0 <CC_PalMemCopyPlat>
   2598e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   25990:	442b      	add	r3, r5
   25992:	2000      	movs	r0, #0
   25994:	6633      	str	r3, [r6, #96]	; 0x60
   25996:	e00a      	b.n	259ae <mbedtls_sha_update_internal+0x176>
   25998:	2300      	movs	r3, #0
   2599a:	e9cd 3300 	strd	r3, r3, [sp]
   2599e:	aa02      	add	r2, sp, #8
   259a0:	4621      	mov	r1, r4
   259a2:	4638      	mov	r0, r7
   259a4:	f000 f942 	bl	25c2c <SetDataBuffersInfo>
   259a8:	2800      	cmp	r0, #0
   259aa:	d033      	beq.n	25a14 <mbedtls_sha_update_internal+0x1dc>
   259ac:	2001      	movs	r0, #1
   259ae:	b025      	add	sp, #148	; 0x94
   259b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259b4:	4628      	mov	r0, r5
   259b6:	b025      	add	sp, #148	; 0x94
   259b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259bc:	f106 0364 	add.w	r3, r6, #100	; 0x64
   259c0:	4639      	mov	r1, r7
   259c2:	4622      	mov	r2, r4
   259c4:	4418      	add	r0, r3
   259c6:	f7ff fa73 	bl	24eb0 <CC_PalMemCopyPlat>
   259ca:	6e30      	ldr	r0, [r6, #96]	; 0x60
   259cc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   259ce:	4420      	add	r0, r4
   259d0:	1b2d      	subs	r5, r5, r4
   259d2:	4427      	add	r7, r4
   259d4:	6630      	str	r0, [r6, #96]	; 0x60
   259d6:	e7ca      	b.n	2596e <mbedtls_sha_update_internal+0x136>
   259d8:	2001      	movs	r0, #1
   259da:	4770      	bx	lr
   259dc:	2a80      	cmp	r2, #128	; 0x80
   259de:	bf28      	it	cs
   259e0:	2280      	movcs	r2, #128	; 0x80
   259e2:	f106 0164 	add.w	r1, r6, #100	; 0x64
   259e6:	a804      	add	r0, sp, #16
   259e8:	f7ff fa62 	bl	24eb0 <CC_PalMemCopyPlat>
   259ec:	2300      	movs	r3, #0
   259ee:	e9cd 3300 	strd	r3, r3, [sp]
   259f2:	a804      	add	r0, sp, #16
   259f4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   259f6:	aa02      	add	r2, sp, #8
   259f8:	f000 f918 	bl	25c2c <SetDataBuffersInfo>
   259fc:	2800      	cmp	r0, #0
   259fe:	d1d5      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   25a00:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25a02:	a902      	add	r1, sp, #8
   25a04:	4630      	mov	r0, r6
   25a06:	f000 f96f 	bl	25ce8 <ProcessHashDrv>
   25a0a:	2800      	cmp	r0, #0
   25a0c:	d1ce      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   25a0e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25a10:	6630      	str	r0, [r6, #96]	; 0x60
   25a12:	e7ae      	b.n	25972 <mbedtls_sha_update_internal+0x13a>
   25a14:	a902      	add	r1, sp, #8
   25a16:	4622      	mov	r2, r4
   25a18:	4630      	mov	r0, r6
   25a1a:	f000 f965 	bl	25ce8 <ProcessHashDrv>
   25a1e:	2800      	cmp	r0, #0
   25a20:	d1c4      	bne.n	259ac <mbedtls_sha_update_internal+0x174>
   25a22:	4427      	add	r7, r4
   25a24:	1b2d      	subs	r5, r5, r4
   25a26:	e7a9      	b.n	2597c <mbedtls_sha_update_internal+0x144>

00025a28 <cc_mbedtls_sha256>:
   25a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a2a:	461c      	mov	r4, r3
   25a2c:	4605      	mov	r5, r0
   25a2e:	4811      	ldr	r0, [pc, #68]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a30:	460e      	mov	r6, r1
   25a32:	4617      	mov	r7, r2
   25a34:	f7ff fe42 	bl	256bc <cc_mbedtls_sha256_init>
   25a38:	4621      	mov	r1, r4
   25a3a:	480e      	ldr	r0, [pc, #56]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a3c:	f7ff fe58 	bl	256f0 <cc_mbedtls_sha256_starts>
   25a40:	4604      	mov	r4, r0
   25a42:	b120      	cbz	r0, 25a4e <cc_mbedtls_sha256+0x26>
   25a44:	480b      	ldr	r0, [pc, #44]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a46:	f7ff fe4d 	bl	256e4 <cc_mbedtls_sha256_free>
   25a4a:	4620      	mov	r0, r4
   25a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a4e:	4809      	ldr	r0, [pc, #36]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a50:	4632      	mov	r2, r6
   25a52:	4629      	mov	r1, r5
   25a54:	f7ff fe60 	bl	25718 <cc_mbedtls_sha256_update>
   25a58:	4604      	mov	r4, r0
   25a5a:	2800      	cmp	r0, #0
   25a5c:	d1f2      	bne.n	25a44 <cc_mbedtls_sha256+0x1c>
   25a5e:	4639      	mov	r1, r7
   25a60:	4804      	ldr	r0, [pc, #16]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a62:	f7ff fe83 	bl	2576c <cc_mbedtls_sha256_finish>
   25a66:	4604      	mov	r4, r0
   25a68:	4802      	ldr	r0, [pc, #8]	; (25a74 <cc_mbedtls_sha256+0x4c>)
   25a6a:	f7ff fe3b 	bl	256e4 <cc_mbedtls_sha256_free>
   25a6e:	4620      	mov	r0, r4
   25a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a72:	bf00      	nop
   25a74:	20003c94 	.word	0x20003c94

00025a78 <RNG_PLAT_SetUserRngParameters>:
   25a78:	b530      	push	{r4, r5, lr}
   25a7a:	b083      	sub	sp, #12
   25a7c:	231c      	movs	r3, #28
   25a7e:	a901      	add	r1, sp, #4
   25a80:	4604      	mov	r4, r0
   25a82:	9301      	str	r3, [sp, #4]
   25a84:	f000 f834 	bl	25af0 <CC_PalTrngParamGet>
   25a88:	4605      	mov	r5, r0
   25a8a:	b938      	cbnz	r0, 25a9c <RNG_PLAT_SetUserRngParameters+0x24>
   25a8c:	9b01      	ldr	r3, [sp, #4]
   25a8e:	2b1c      	cmp	r3, #28
   25a90:	d007      	beq.n	25aa2 <RNG_PLAT_SetUserRngParameters+0x2a>
   25a92:	4d15      	ldr	r5, [pc, #84]	; (25ae8 <RNG_PLAT_SetUserRngParameters+0x70>)
   25a94:	211c      	movs	r1, #28
   25a96:	4620      	mov	r0, r4
   25a98:	f7ff fa0e 	bl	24eb8 <CC_PalMemSetZeroPlat>
   25a9c:	4628      	mov	r0, r5
   25a9e:	b003      	add	sp, #12
   25aa0:	bd30      	pop	{r4, r5, pc}
   25aa2:	e9d4 3200 	ldrd	r3, r2, [r4]
   25aa6:	2101      	movs	r1, #1
   25aa8:	3b00      	subs	r3, #0
   25aaa:	61e1      	str	r1, [r4, #28]
   25aac:	bf18      	it	ne
   25aae:	2301      	movne	r3, #1
   25ab0:	b10a      	cbz	r2, 25ab6 <RNG_PLAT_SetUserRngParameters+0x3e>
   25ab2:	f043 0302 	orr.w	r3, r3, #2
   25ab6:	68a2      	ldr	r2, [r4, #8]
   25ab8:	b932      	cbnz	r2, 25ac8 <RNG_PLAT_SetUserRngParameters+0x50>
   25aba:	68e2      	ldr	r2, [r4, #12]
   25abc:	b942      	cbnz	r2, 25ad0 <RNG_PLAT_SetUserRngParameters+0x58>
   25abe:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25ac2:	b97b      	cbnz	r3, 25ae4 <RNG_PLAT_SetUserRngParameters+0x6c>
   25ac4:	4d09      	ldr	r5, [pc, #36]	; (25aec <RNG_PLAT_SetUserRngParameters+0x74>)
   25ac6:	e7e5      	b.n	25a94 <RNG_PLAT_SetUserRngParameters+0x1c>
   25ac8:	68e2      	ldr	r2, [r4, #12]
   25aca:	f043 0304 	orr.w	r3, r3, #4
   25ace:	b13a      	cbz	r2, 25ae0 <RNG_PLAT_SetUserRngParameters+0x68>
   25ad0:	f043 0308 	orr.w	r3, r3, #8
   25ad4:	2200      	movs	r2, #0
   25ad6:	4628      	mov	r0, r5
   25ad8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25adc:	b003      	add	sp, #12
   25ade:	bd30      	pop	{r4, r5, pc}
   25ae0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25ae4:	4615      	mov	r5, r2
   25ae6:	e7d9      	b.n	25a9c <RNG_PLAT_SetUserRngParameters+0x24>
   25ae8:	00f00c37 	.word	0x00f00c37
   25aec:	00f00c0e 	.word	0x00f00c0e

00025af0 <CC_PalTrngParamGet>:
   25af0:	b118      	cbz	r0, 25afa <CC_PalTrngParamGet+0xa>
   25af2:	b111      	cbz	r1, 25afa <CC_PalTrngParamGet+0xa>
   25af4:	680b      	ldr	r3, [r1, #0]
   25af6:	2b1c      	cmp	r3, #28
   25af8:	d001      	beq.n	25afe <CC_PalTrngParamGet+0xe>
   25afa:	2001      	movs	r0, #1
   25afc:	4770      	bx	lr
   25afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b02:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   25b06:	3201      	adds	r2, #1
   25b08:	bf14      	ite	ne
   25b0a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   25b0e:	f241 225c 	movweq	r2, #4700	; 0x125c
   25b12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b16:	6002      	str	r2, [r0, #0]
   25b18:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   25b1c:	3201      	adds	r2, #1
   25b1e:	bf14      	ite	ne
   25b20:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   25b24:	f641 1264 	movweq	r2, #6500	; 0x1964
   25b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b2c:	6042      	str	r2, [r0, #4]
   25b2e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   25b32:	3201      	adds	r2, #1
   25b34:	bf14      	ite	ne
   25b36:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   25b3a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   25b3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b42:	6082      	str	r2, [r0, #8]
   25b44:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   25b48:	3201      	adds	r2, #1
   25b4a:	bf14      	ite	ne
   25b4c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   25b50:	f241 3288 	movweq	r2, #5000	; 0x1388
   25b54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b58:	60c2      	str	r2, [r0, #12]
   25b5a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   25b5e:	3201      	adds	r2, #1
   25b60:	bf14      	ite	ne
   25b62:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   25b66:	2290      	moveq	r2, #144	; 0x90
   25b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b6c:	6102      	str	r2, [r0, #16]
   25b6e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   25b72:	3201      	adds	r2, #1
   25b74:	bf14      	ite	ne
   25b76:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   25b7a:	2251      	moveq	r2, #81	; 0x51
   25b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b80:	6142      	str	r2, [r0, #20]
   25b82:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   25b86:	3201      	adds	r2, #1
   25b88:	bf14      	ite	ne
   25b8a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   25b8e:	f240 3337 	movweq	r3, #823	; 0x337
   25b92:	6183      	str	r3, [r0, #24]
   25b94:	2000      	movs	r0, #0
   25b96:	4770      	bx	lr

00025b98 <LLF_RND_WaitRngInterrupt>:
   25b98:	b508      	push	{r3, lr}
   25b9a:	4601      	mov	r1, r0
   25b9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25ba0:	f7ff f912 	bl	24dc8 <CC_HalWaitInterruptRND>
   25ba4:	4b03      	ldr	r3, [pc, #12]	; (25bb4 <LLF_RND_WaitRngInterrupt+0x1c>)
   25ba6:	2200      	movs	r2, #0
   25ba8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   25bac:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25bb0:	bd08      	pop	{r3, pc}
   25bb2:	bf00      	nop
   25bb4:	5002b000 	.word	0x5002b000

00025bb8 <LLF_RND_GetRoscSampleCnt>:
   25bb8:	3801      	subs	r0, #1
   25bba:	2807      	cmp	r0, #7
   25bbc:	d805      	bhi.n	25bca <LLF_RND_GetRoscSampleCnt+0x12>
   25bbe:	e8df f000 	tbb	[pc, r0]
   25bc2:	0e12      	.short	0x0e12
   25bc4:	04040a04 	.word	0x04040a04
   25bc8:	0604      	.short	0x0604
   25bca:	4809      	ldr	r0, [pc, #36]	; (25bf0 <LLF_RND_GetRoscSampleCnt+0x38>)
   25bcc:	4770      	bx	lr
   25bce:	68cb      	ldr	r3, [r1, #12]
   25bd0:	624b      	str	r3, [r1, #36]	; 0x24
   25bd2:	2000      	movs	r0, #0
   25bd4:	4770      	bx	lr
   25bd6:	688b      	ldr	r3, [r1, #8]
   25bd8:	624b      	str	r3, [r1, #36]	; 0x24
   25bda:	2000      	movs	r0, #0
   25bdc:	4770      	bx	lr
   25bde:	684b      	ldr	r3, [r1, #4]
   25be0:	624b      	str	r3, [r1, #36]	; 0x24
   25be2:	2000      	movs	r0, #0
   25be4:	4770      	bx	lr
   25be6:	680b      	ldr	r3, [r1, #0]
   25be8:	624b      	str	r3, [r1, #36]	; 0x24
   25bea:	2000      	movs	r0, #0
   25bec:	4770      	bx	lr
   25bee:	bf00      	nop
   25bf0:	00f10c31 	.word	0x00f10c31

00025bf4 <LLF_RND_GetFastestRosc>:
   25bf4:	680b      	ldr	r3, [r1, #0]
   25bf6:	e002      	b.n	25bfe <LLF_RND_GetFastestRosc+0xa>
   25bf8:	2b08      	cmp	r3, #8
   25bfa:	600b      	str	r3, [r1, #0]
   25bfc:	d806      	bhi.n	25c0c <LLF_RND_GetFastestRosc+0x18>
   25bfe:	6a02      	ldr	r2, [r0, #32]
   25c00:	4213      	tst	r3, r2
   25c02:	ea4f 0343 	mov.w	r3, r3, lsl #1
   25c06:	d0f7      	beq.n	25bf8 <LLF_RND_GetFastestRosc+0x4>
   25c08:	2000      	movs	r0, #0
   25c0a:	4770      	bx	lr
   25c0c:	4800      	ldr	r0, [pc, #0]	; (25c10 <LLF_RND_GetFastestRosc+0x1c>)
   25c0e:	4770      	bx	lr
   25c10:	00f10c31 	.word	0x00f10c31

00025c14 <LLF_RND_TurnOffTrng>:
   25c14:	4b04      	ldr	r3, [pc, #16]	; (25c28 <LLF_RND_TurnOffTrng+0x14>)
   25c16:	2200      	movs	r2, #0
   25c18:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25c1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25c20:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   25c24:	f7ff b8b6 	b.w	24d94 <CC_HalClearInterruptBit>
   25c28:	5002b000 	.word	0x5002b000

00025c2c <SetDataBuffersInfo>:
   25c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c2e:	b083      	sub	sp, #12
   25c30:	461d      	mov	r5, r3
   25c32:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   25c36:	f04f 0300 	mov.w	r3, #0
   25c3a:	f88d 3007 	strb.w	r3, [sp, #7]
   25c3e:	d324      	bcc.n	25c8a <SetDataBuffersInfo+0x5e>
   25c40:	468c      	mov	ip, r1
   25c42:	4484      	add	ip, r0
   25c44:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   25c48:	4604      	mov	r4, r0
   25c4a:	d81e      	bhi.n	25c8a <SetDataBuffersInfo+0x5e>
   25c4c:	4617      	mov	r7, r2
   25c4e:	f10d 0307 	add.w	r3, sp, #7
   25c52:	2201      	movs	r2, #1
   25c54:	f000 fe68 	bl	26928 <CC_PalDataBufferAttrGet>
   25c58:	4606      	mov	r6, r0
   25c5a:	b9b0      	cbnz	r0, 25c8a <SetDataBuffersInfo+0x5e>
   25c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25c62:	603c      	str	r4, [r7, #0]
   25c64:	713b      	strb	r3, [r7, #4]
   25c66:	b192      	cbz	r2, 25c8e <SetDataBuffersInfo+0x62>
   25c68:	b14d      	cbz	r5, 25c7e <SetDataBuffersInfo+0x52>
   25c6a:	4602      	mov	r2, r0
   25c6c:	9908      	ldr	r1, [sp, #32]
   25c6e:	f10d 0307 	add.w	r3, sp, #7
   25c72:	4628      	mov	r0, r5
   25c74:	f000 fe58 	bl	26928 <CC_PalDataBufferAttrGet>
   25c78:	b938      	cbnz	r0, 25c8a <SetDataBuffersInfo+0x5e>
   25c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25c80:	4630      	mov	r0, r6
   25c82:	6015      	str	r5, [r2, #0]
   25c84:	7113      	strb	r3, [r2, #4]
   25c86:	b003      	add	sp, #12
   25c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25c8a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   25c8e:	4630      	mov	r0, r6
   25c90:	b003      	add	sp, #12
   25c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025c94 <InitHashDrv>:
   25c94:	b1e8      	cbz	r0, 25cd2 <InitHashDrv+0x3e>
   25c96:	b510      	push	{r4, lr}
   25c98:	6804      	ldr	r4, [r0, #0]
   25c9a:	2c01      	cmp	r4, #1
   25c9c:	d004      	beq.n	25ca8 <InitHashDrv+0x14>
   25c9e:	2c02      	cmp	r4, #2
   25ca0:	d010      	beq.n	25cc4 <InitHashDrv+0x30>
   25ca2:	b144      	cbz	r4, 25cb6 <InitHashDrv+0x22>
   25ca4:	480c      	ldr	r0, [pc, #48]	; (25cd8 <InitHashDrv+0x44>)
   25ca6:	bd10      	pop	{r4, pc}
   25ca8:	490c      	ldr	r1, [pc, #48]	; (25cdc <InitHashDrv+0x48>)
   25caa:	2220      	movs	r2, #32
   25cac:	3008      	adds	r0, #8
   25cae:	f7ff f8ff 	bl	24eb0 <CC_PalMemCopyPlat>
   25cb2:	2000      	movs	r0, #0
   25cb4:	bd10      	pop	{r4, pc}
   25cb6:	490a      	ldr	r1, [pc, #40]	; (25ce0 <InitHashDrv+0x4c>)
   25cb8:	2214      	movs	r2, #20
   25cba:	3008      	adds	r0, #8
   25cbc:	f7ff f8f8 	bl	24eb0 <CC_PalMemCopyPlat>
   25cc0:	4620      	mov	r0, r4
   25cc2:	bd10      	pop	{r4, pc}
   25cc4:	4907      	ldr	r1, [pc, #28]	; (25ce4 <InitHashDrv+0x50>)
   25cc6:	2220      	movs	r2, #32
   25cc8:	3008      	adds	r0, #8
   25cca:	f7ff f8f1 	bl	24eb0 <CC_PalMemCopyPlat>
   25cce:	2000      	movs	r0, #0
   25cd0:	bd10      	pop	{r4, pc}
   25cd2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25cd6:	4770      	bx	lr
   25cd8:	00f30001 	.word	0x00f30001
   25cdc:	0002d744 	.word	0x0002d744
   25ce0:	0002d710 	.word	0x0002d710
   25ce4:	0002d724 	.word	0x0002d724

00025ce8 <ProcessHashDrv>:
   25ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25cec:	2900      	cmp	r1, #0
   25cee:	f000 80f9 	beq.w	25ee4 <ProcessHashDrv+0x1fc>
   25cf2:	4604      	mov	r4, r0
   25cf4:	2800      	cmp	r0, #0
   25cf6:	f000 80f9 	beq.w	25eec <ProcessHashDrv+0x204>
   25cfa:	6803      	ldr	r3, [r0, #0]
   25cfc:	4690      	mov	r8, r2
   25cfe:	460f      	mov	r7, r1
   25d00:	2b00      	cmp	r3, #0
   25d02:	f000 80c3 	beq.w	25e8c <ProcessHashDrv+0x1a4>
   25d06:	3b01      	subs	r3, #1
   25d08:	2b01      	cmp	r3, #1
   25d0a:	f200 80d7 	bhi.w	25ebc <ProcessHashDrv+0x1d4>
   25d0e:	4879      	ldr	r0, [pc, #484]	; (25ef4 <ProcessHashDrv+0x20c>)
   25d10:	f04f 31ff 	mov.w	r1, #4294967295
   25d14:	f04f 0902 	mov.w	r9, #2
   25d18:	f7ff f8e6 	bl	24ee8 <CC_PalMutexLock>
   25d1c:	2800      	cmp	r0, #0
   25d1e:	f040 80bf 	bne.w	25ea0 <ProcessHashDrv+0x1b8>
   25d22:	2000      	movs	r0, #0
   25d24:	f7ff f910 	bl	24f48 <CC_PalPowerSaveModeSelect>
   25d28:	4606      	mov	r6, r0
   25d2a:	2800      	cmp	r0, #0
   25d2c:	f040 80c2 	bne.w	25eb4 <ProcessHashDrv+0x1cc>
   25d30:	4a71      	ldr	r2, [pc, #452]	; (25ef8 <ProcessHashDrv+0x210>)
   25d32:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   25d36:	2b00      	cmp	r3, #0
   25d38:	d1fb      	bne.n	25d32 <ProcessHashDrv+0x4a>
   25d3a:	4d6f      	ldr	r5, [pc, #444]	; (25ef8 <ProcessHashDrv+0x210>)
   25d3c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   25d40:	2b00      	cmp	r3, #0
   25d42:	d1fb      	bne.n	25d3c <ProcessHashDrv+0x54>
   25d44:	f04f 30ff 	mov.w	r0, #4294967295
   25d48:	f7ff f824 	bl	24d94 <CC_HalClearInterruptBit>
   25d4c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   25d50:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   25d54:	f7ff f82c 	bl	24db0 <CC_HalMaskInterrupt>
   25d58:	2301      	movs	r3, #1
   25d5a:	2207      	movs	r2, #7
   25d5c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   25d60:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   25d64:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   25d68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25d6a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   25d6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   25d70:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   25d74:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   25d78:	6823      	ldr	r3, [r4, #0]
   25d7a:	b15b      	cbz	r3, 25d94 <ProcessHashDrv+0xac>
   25d7c:	3b01      	subs	r3, #1
   25d7e:	2b01      	cmp	r3, #1
   25d80:	d818      	bhi.n	25db4 <ProcessHashDrv+0xcc>
   25d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25d84:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   25d88:	6a23      	ldr	r3, [r4, #32]
   25d8a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   25d8e:	69e3      	ldr	r3, [r4, #28]
   25d90:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   25d94:	4b58      	ldr	r3, [pc, #352]	; (25ef8 <ProcessHashDrv+0x210>)
   25d96:	69a2      	ldr	r2, [r4, #24]
   25d98:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   25d9c:	6962      	ldr	r2, [r4, #20]
   25d9e:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   25da2:	6922      	ldr	r2, [r4, #16]
   25da4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   25da8:	68e2      	ldr	r2, [r4, #12]
   25daa:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   25dae:	68a2      	ldr	r2, [r4, #8]
   25db0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   25db4:	4a50      	ldr	r2, [pc, #320]	; (25ef8 <ProcessHashDrv+0x210>)
   25db6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25dba:	2b00      	cmp	r3, #0
   25dbc:	d1fb      	bne.n	25db6 <ProcessHashDrv+0xce>
   25dbe:	f1b8 0f00 	cmp.w	r8, #0
   25dc2:	d05f      	beq.n	25e84 <ProcessHashDrv+0x19c>
   25dc4:	6863      	ldr	r3, [r4, #4]
   25dc6:	2b01      	cmp	r3, #1
   25dc8:	bf08      	it	eq
   25dca:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   25dce:	4b4a      	ldr	r3, [pc, #296]	; (25ef8 <ProcessHashDrv+0x210>)
   25dd0:	683a      	ldr	r2, [r7, #0]
   25dd2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   25dd6:	2040      	movs	r0, #64	; 0x40
   25dd8:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   25ddc:	f7fe ffee 	bl	24dbc <CC_HalWaitInterrupt>
   25de0:	4606      	mov	r6, r0
   25de2:	4a45      	ldr	r2, [pc, #276]	; (25ef8 <ProcessHashDrv+0x210>)
   25de4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25de8:	2b00      	cmp	r3, #0
   25dea:	d1fb      	bne.n	25de4 <ProcessHashDrv+0xfc>
   25dec:	4a42      	ldr	r2, [pc, #264]	; (25ef8 <ProcessHashDrv+0x210>)
   25dee:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   25df2:	2b00      	cmp	r3, #0
   25df4:	d1fb      	bne.n	25dee <ProcessHashDrv+0x106>
   25df6:	6823      	ldr	r3, [r4, #0]
   25df8:	b15b      	cbz	r3, 25e12 <ProcessHashDrv+0x12a>
   25dfa:	3b01      	subs	r3, #1
   25dfc:	2b01      	cmp	r3, #1
   25dfe:	d818      	bhi.n	25e32 <ProcessHashDrv+0x14a>
   25e00:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   25e04:	6263      	str	r3, [r4, #36]	; 0x24
   25e06:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   25e0a:	6223      	str	r3, [r4, #32]
   25e0c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   25e10:	61e3      	str	r3, [r4, #28]
   25e12:	4b39      	ldr	r3, [pc, #228]	; (25ef8 <ProcessHashDrv+0x210>)
   25e14:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   25e18:	61a2      	str	r2, [r4, #24]
   25e1a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   25e1e:	6162      	str	r2, [r4, #20]
   25e20:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   25e24:	6122      	str	r2, [r4, #16]
   25e26:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   25e2a:	60e2      	str	r2, [r4, #12]
   25e2c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   25e30:	60a3      	str	r3, [r4, #8]
   25e32:	4a31      	ldr	r2, [pc, #196]	; (25ef8 <ProcessHashDrv+0x210>)
   25e34:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   25e38:	64a1      	str	r1, [r4, #72]	; 0x48
   25e3a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   25e3e:	64e1      	str	r1, [r4, #76]	; 0x4c
   25e40:	2300      	movs	r3, #0
   25e42:	2101      	movs	r1, #1
   25e44:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   25e48:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   25e4c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25e50:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25e54:	2b00      	cmp	r3, #0
   25e56:	d1fb      	bne.n	25e50 <ProcessHashDrv+0x168>
   25e58:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   25e5c:	2e00      	cmp	r6, #0
   25e5e:	d13b      	bne.n	25ed8 <ProcessHashDrv+0x1f0>
   25e60:	4b25      	ldr	r3, [pc, #148]	; (25ef8 <ProcessHashDrv+0x210>)
   25e62:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   25e66:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   25e6a:	f7fe ffa1 	bl	24db0 <CC_HalMaskInterrupt>
   25e6e:	2001      	movs	r0, #1
   25e70:	f7ff f86a 	bl	24f48 <CC_PalPowerSaveModeSelect>
   25e74:	bb60      	cbnz	r0, 25ed0 <ProcessHashDrv+0x1e8>
   25e76:	481f      	ldr	r0, [pc, #124]	; (25ef4 <ProcessHashDrv+0x20c>)
   25e78:	f7ff f83e 	bl	24ef8 <CC_PalMutexUnlock>
   25e7c:	bb10      	cbnz	r0, 25ec4 <ProcessHashDrv+0x1dc>
   25e7e:	4630      	mov	r0, r6
   25e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25e84:	2304      	movs	r3, #4
   25e86:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25e8a:	e7aa      	b.n	25de2 <ProcessHashDrv+0xfa>
   25e8c:	4819      	ldr	r0, [pc, #100]	; (25ef4 <ProcessHashDrv+0x20c>)
   25e8e:	f04f 31ff 	mov.w	r1, #4294967295
   25e92:	f04f 0901 	mov.w	r9, #1
   25e96:	f7ff f827 	bl	24ee8 <CC_PalMutexLock>
   25e9a:	2800      	cmp	r0, #0
   25e9c:	f43f af41 	beq.w	25d22 <ProcessHashDrv+0x3a>
   25ea0:	4816      	ldr	r0, [pc, #88]	; (25efc <ProcessHashDrv+0x214>)
   25ea2:	f7fe f8c1 	bl	24028 <CC_PalAbort>
   25ea6:	2000      	movs	r0, #0
   25ea8:	f7ff f84e 	bl	24f48 <CC_PalPowerSaveModeSelect>
   25eac:	4606      	mov	r6, r0
   25eae:	2800      	cmp	r0, #0
   25eb0:	f43f af3e 	beq.w	25d30 <ProcessHashDrv+0x48>
   25eb4:	4812      	ldr	r0, [pc, #72]	; (25f00 <ProcessHashDrv+0x218>)
   25eb6:	f7fe f8b7 	bl	24028 <CC_PalAbort>
   25eba:	e739      	b.n	25d30 <ProcessHashDrv+0x48>
   25ebc:	4e11      	ldr	r6, [pc, #68]	; (25f04 <ProcessHashDrv+0x21c>)
   25ebe:	4630      	mov	r0, r6
   25ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25ec4:	4810      	ldr	r0, [pc, #64]	; (25f08 <ProcessHashDrv+0x220>)
   25ec6:	f7fe f8af 	bl	24028 <CC_PalAbort>
   25eca:	4630      	mov	r0, r6
   25ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25ed0:	480e      	ldr	r0, [pc, #56]	; (25f0c <ProcessHashDrv+0x224>)
   25ed2:	f7fe f8a9 	bl	24028 <CC_PalAbort>
   25ed6:	e7ce      	b.n	25e76 <ProcessHashDrv+0x18e>
   25ed8:	2110      	movs	r1, #16
   25eda:	f104 0008 	add.w	r0, r4, #8
   25ede:	f7fe ffeb 	bl	24eb8 <CC_PalMemSetZeroPlat>
   25ee2:	e7bd      	b.n	25e60 <ProcessHashDrv+0x178>
   25ee4:	4e0a      	ldr	r6, [pc, #40]	; (25f10 <ProcessHashDrv+0x228>)
   25ee6:	4630      	mov	r0, r6
   25ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25eec:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   25ef0:	e7c5      	b.n	25e7e <ProcessHashDrv+0x196>
   25ef2:	bf00      	nop
   25ef4:	20000914 	.word	0x20000914
   25ef8:	5002b000 	.word	0x5002b000
   25efc:	0002d644 	.word	0x0002d644
   25f00:	0002d65c 	.word	0x0002d65c
   25f04:	00f30001 	.word	0x00f30001
   25f08:	0002d69c 	.word	0x0002d69c
   25f0c:	0002d67c 	.word	0x0002d67c
   25f10:	00f30003 	.word	0x00f30003

00025f14 <FinishHashDrv>:
   25f14:	b398      	cbz	r0, 25f7e <FinishHashDrv+0x6a>
   25f16:	b470      	push	{r4, r5, r6}
   25f18:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   25f1c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   25f20:	ba26      	rev	r6, r4
   25f22:	ba0d      	rev	r5, r1
   25f24:	ba14      	rev	r4, r2
   25f26:	ba19      	rev	r1, r3
   25f28:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   25f2c:	ba12      	rev	r2, r2
   25f2e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   25f32:	6182      	str	r2, [r0, #24]
   25f34:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   25f38:	e9c0 6502 	strd	r6, r5, [r0, #8]
   25f3c:	ba1b      	rev	r3, r3
   25f3e:	ba25      	rev	r5, r4
   25f40:	e9c0 3507 	strd	r3, r5, [r0, #28]
   25f44:	ba14      	rev	r4, r2
   25f46:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   25f4a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   25f4c:	ba12      	rev	r2, r2
   25f4e:	ba09      	rev	r1, r1
   25f50:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   25f54:	62c2      	str	r2, [r0, #44]	; 0x2c
   25f56:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   25f5a:	ba1b      	rev	r3, r3
   25f5c:	ba25      	rev	r5, r4
   25f5e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   25f62:	ba14      	rev	r4, r2
   25f64:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   25f68:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   25f6a:	ba12      	rev	r2, r2
   25f6c:	ba09      	rev	r1, r1
   25f6e:	ba1b      	rev	r3, r3
   25f70:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   25f74:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   25f78:	2000      	movs	r0, #0
   25f7a:	bc70      	pop	{r4, r5, r6}
   25f7c:	4770      	bx	lr
   25f7e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25f82:	4770      	bx	lr

00025f84 <LoadAesKey>:
   25f84:	2800      	cmp	r0, #0
   25f86:	d046      	beq.n	26016 <LoadAesKey+0x92>
   25f88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   25f8c:	2b00      	cmp	r3, #0
   25f8e:	d033      	beq.n	25ff8 <LoadAesKey+0x74>
   25f90:	2b03      	cmp	r3, #3
   25f92:	b510      	push	{r4, lr}
   25f94:	d013      	beq.n	25fbe <LoadAesKey+0x3a>
   25f96:	4821      	ldr	r0, [pc, #132]	; (2601c <LoadAesKey+0x98>)
   25f98:	4c21      	ldr	r4, [pc, #132]	; (26020 <LoadAesKey+0x9c>)
   25f9a:	6822      	ldr	r2, [r4, #0]
   25f9c:	4b21      	ldr	r3, [pc, #132]	; (26024 <LoadAesKey+0xa0>)
   25f9e:	6812      	ldr	r2, [r2, #0]
   25fa0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25fa4:	6822      	ldr	r2, [r4, #0]
   25fa6:	6852      	ldr	r2, [r2, #4]
   25fa8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25fac:	6822      	ldr	r2, [r4, #0]
   25fae:	6892      	ldr	r2, [r2, #8]
   25fb0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   25fb4:	6822      	ldr	r2, [r4, #0]
   25fb6:	68d2      	ldr	r2, [r2, #12]
   25fb8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25fbc:	bd10      	pop	{r4, pc}
   25fbe:	6b01      	ldr	r1, [r0, #48]	; 0x30
   25fc0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   25fc2:	4c17      	ldr	r4, [pc, #92]	; (26020 <LoadAesKey+0x9c>)
   25fc4:	f000 fbac 	bl	26720 <kmu_validate_kdr_slot_and_size>
   25fc8:	2800      	cmp	r0, #0
   25fca:	d1e6      	bne.n	25f9a <LoadAesKey+0x16>
   25fcc:	6822      	ldr	r2, [r4, #0]
   25fce:	4b15      	ldr	r3, [pc, #84]	; (26024 <LoadAesKey+0xa0>)
   25fd0:	6812      	ldr	r2, [r2, #0]
   25fd2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25fd6:	6822      	ldr	r2, [r4, #0]
   25fd8:	6852      	ldr	r2, [r2, #4]
   25fda:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25fde:	6822      	ldr	r2, [r4, #0]
   25fe0:	6892      	ldr	r2, [r2, #8]
   25fe2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   25fe6:	6822      	ldr	r2, [r4, #0]
   25fe8:	68d2      	ldr	r2, [r2, #12]
   25fea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25fee:	f000 fba3 	bl	26738 <kmu_use_kdr_key>
   25ff2:	2800      	cmp	r0, #0
   25ff4:	d1d1      	bne.n	25f9a <LoadAesKey+0x16>
   25ff6:	bd10      	pop	{r4, pc}
   25ff8:	4a0a      	ldr	r2, [pc, #40]	; (26024 <LoadAesKey+0xa0>)
   25ffa:	6901      	ldr	r1, [r0, #16]
   25ffc:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   26000:	6941      	ldr	r1, [r0, #20]
   26002:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   26006:	6981      	ldr	r1, [r0, #24]
   26008:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   2600c:	69c1      	ldr	r1, [r0, #28]
   2600e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   26012:	4618      	mov	r0, r3
   26014:	4770      	bx	lr
   26016:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2601a:	4770      	bx	lr
   2601c:	00f10009 	.word	0x00f10009
   26020:	20000904 	.word	0x20000904
   26024:	5002b000 	.word	0x5002b000

00026028 <InitAes.part.0>:
   26028:	4a37      	ldr	r2, [pc, #220]	; (26108 <InitAes.part.0+0xe0>)
   2602a:	b538      	push	{r3, r4, r5, lr}
   2602c:	4604      	mov	r4, r0
   2602e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26032:	2b00      	cmp	r3, #0
   26034:	d1fb      	bne.n	2602e <InitAes.part.0+0x6>
   26036:	4a34      	ldr	r2, [pc, #208]	; (26108 <InitAes.part.0+0xe0>)
   26038:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2603c:	2b00      	cmp	r3, #0
   2603e:	d1fb      	bne.n	26038 <InitAes.part.0+0x10>
   26040:	4a31      	ldr	r2, [pc, #196]	; (26108 <InitAes.part.0+0xe0>)
   26042:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   26046:	2b00      	cmp	r3, #0
   26048:	d1fb      	bne.n	26042 <InitAes.part.0+0x1a>
   2604a:	4a2f      	ldr	r2, [pc, #188]	; (26108 <InitAes.part.0+0xe0>)
   2604c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   26050:	2b00      	cmp	r3, #0
   26052:	d1fb      	bne.n	2604c <InitAes.part.0+0x24>
   26054:	4a2c      	ldr	r2, [pc, #176]	; (26108 <InitAes.part.0+0xe0>)
   26056:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   2605a:	2b00      	cmp	r3, #0
   2605c:	d1fb      	bne.n	26056 <InitAes.part.0+0x2e>
   2605e:	4d2a      	ldr	r5, [pc, #168]	; (26108 <InitAes.part.0+0xe0>)
   26060:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   26064:	2b00      	cmp	r3, #0
   26066:	d1fb      	bne.n	26060 <InitAes.part.0+0x38>
   26068:	f04f 30ff 	mov.w	r0, #4294967295
   2606c:	f7fe fe92 	bl	24d94 <CC_HalClearInterruptBit>
   26070:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26072:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   26076:	f023 0304 	bic.w	r3, r3, #4
   2607a:	2b03      	cmp	r3, #3
   2607c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2607e:	d039      	beq.n	260f4 <InitAes.part.0+0xcc>
   26080:	2b01      	cmp	r3, #1
   26082:	bf0c      	ite	eq
   26084:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   26088:	f020 0020 	bicne.w	r0, r0, #32
   2608c:	f7fe fe90 	bl	24db0 <CC_HalMaskInterrupt>
   26090:	4a1d      	ldr	r2, [pc, #116]	; (26108 <InitAes.part.0+0xe0>)
   26092:	2301      	movs	r3, #1
   26094:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   26098:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2609c:	2b00      	cmp	r3, #0
   2609e:	d1fb      	bne.n	26098 <InitAes.part.0+0x70>
   260a0:	4a19      	ldr	r2, [pc, #100]	; (26108 <InitAes.part.0+0xe0>)
   260a2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   260a6:	2b00      	cmp	r3, #0
   260a8:	d1fb      	bne.n	260a2 <InitAes.part.0+0x7a>
   260aa:	4917      	ldr	r1, [pc, #92]	; (26108 <InitAes.part.0+0xe0>)
   260ac:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   260b0:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   260b4:	2b00      	cmp	r3, #0
   260b6:	d1fb      	bne.n	260b0 <InitAes.part.0+0x88>
   260b8:	4a13      	ldr	r2, [pc, #76]	; (26108 <InitAes.part.0+0xe0>)
   260ba:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   260be:	2b00      	cmp	r3, #0
   260c0:	d1fb      	bne.n	260ba <InitAes.part.0+0x92>
   260c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   260c4:	f022 0104 	bic.w	r1, r2, #4
   260c8:	2903      	cmp	r1, #3
   260ca:	bf18      	it	ne
   260cc:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   260ce:	490e      	ldr	r1, [pc, #56]	; (26108 <InitAes.part.0+0xe0>)
   260d0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   260d4:	bf18      	it	ne
   260d6:	f003 0301 	andne.w	r3, r3, #1
   260da:	f002 021c 	and.w	r2, r2, #28
   260de:	4313      	orrs	r3, r2
   260e0:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   260e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   260e6:	2b07      	cmp	r3, #7
   260e8:	bf04      	itt	eq
   260ea:	2301      	moveq	r3, #1
   260ec:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   260f0:	2000      	movs	r0, #0
   260f2:	bd38      	pop	{r3, r4, r5, pc}
   260f4:	2b01      	cmp	r3, #1
   260f6:	bf0c      	ite	eq
   260f8:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   260fc:	f020 0010 	bicne.w	r0, r0, #16
   26100:	f7fe fe56 	bl	24db0 <CC_HalMaskInterrupt>
   26104:	e7c4      	b.n	26090 <InitAes.part.0+0x68>
   26106:	bf00      	nop
   26108:	5002b000 	.word	0x5002b000

0002610c <write_invalid_key>:
   2610c:	4a09      	ldr	r2, [pc, #36]	; (26134 <write_invalid_key+0x28>)
   2610e:	4b0a      	ldr	r3, [pc, #40]	; (26138 <write_invalid_key+0x2c>)
   26110:	6811      	ldr	r1, [r2, #0]
   26112:	6809      	ldr	r1, [r1, #0]
   26114:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   26118:	6811      	ldr	r1, [r2, #0]
   2611a:	6849      	ldr	r1, [r1, #4]
   2611c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   26120:	6811      	ldr	r1, [r2, #0]
   26122:	6889      	ldr	r1, [r1, #8]
   26124:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   26128:	6812      	ldr	r2, [r2, #0]
   2612a:	68d2      	ldr	r2, [r2, #12]
   2612c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26130:	4770      	bx	lr
   26132:	bf00      	nop
   26134:	20000904 	.word	0x20000904
   26138:	5002b000 	.word	0x5002b000

0002613c <ProcessAesDrv>:
   2613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26140:	b085      	sub	sp, #20
   26142:	2900      	cmp	r1, #0
   26144:	f000 80a3 	beq.w	2628e <ProcessAesDrv+0x152>
   26148:	4690      	mov	r8, r2
   2614a:	2a00      	cmp	r2, #0
   2614c:	f000 809f 	beq.w	2628e <ProcessAesDrv+0x152>
   26150:	4605      	mov	r5, r0
   26152:	2800      	cmp	r0, #0
   26154:	f000 813c 	beq.w	263d0 <ProcessAesDrv+0x294>
   26158:	4699      	mov	r9, r3
   2615a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2615c:	460e      	mov	r6, r1
   2615e:	2b00      	cmp	r3, #0
   26160:	d151      	bne.n	26206 <ProcessAesDrv+0xca>
   26162:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   26166:	d253      	bcs.n	26210 <ProcessAesDrv+0xd4>
   26168:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   2616c:	2b04      	cmp	r3, #4
   2616e:	f000 8112 	beq.w	26396 <ProcessAesDrv+0x25a>
   26172:	2700      	movs	r7, #0
   26174:	48a6      	ldr	r0, [pc, #664]	; (26410 <ProcessAesDrv+0x2d4>)
   26176:	f04f 31ff 	mov.w	r1, #4294967295
   2617a:	f7fe feb5 	bl	24ee8 <CC_PalMutexLock>
   2617e:	2800      	cmp	r0, #0
   26180:	f040 80e8 	bne.w	26354 <ProcessAesDrv+0x218>
   26184:	2000      	movs	r0, #0
   26186:	f7fe fedf 	bl	24f48 <CC_PalPowerSaveModeSelect>
   2618a:	2800      	cmp	r0, #0
   2618c:	f040 80eb 	bne.w	26366 <ProcessAesDrv+0x22a>
   26190:	48a0      	ldr	r0, [pc, #640]	; (26414 <ProcessAesDrv+0x2d8>)
   26192:	2301      	movs	r3, #1
   26194:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   26198:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   2619c:	2c00      	cmp	r4, #0
   2619e:	d1fb      	bne.n	26198 <ProcessAesDrv+0x5c>
   261a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   261a2:	2b03      	cmp	r3, #3
   261a4:	dc39      	bgt.n	2621a <ProcessAesDrv+0xde>
   261a6:	2b00      	cmp	r3, #0
   261a8:	da3a      	bge.n	26220 <ProcessAesDrv+0xe4>
   261aa:	4c9b      	ldr	r4, [pc, #620]	; (26418 <ProcessAesDrv+0x2dc>)
   261ac:	4a99      	ldr	r2, [pc, #612]	; (26414 <ProcessAesDrv+0x2d8>)
   261ae:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   261b2:	2b00      	cmp	r3, #0
   261b4:	d1fb      	bne.n	261ae <ProcessAesDrv+0x72>
   261b6:	2f00      	cmp	r7, #0
   261b8:	f040 80e4 	bne.w	26384 <ProcessAesDrv+0x248>
   261bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   261be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   261c0:	f023 0304 	bic.w	r3, r3, #4
   261c4:	2b03      	cmp	r3, #3
   261c6:	4b93      	ldr	r3, [pc, #588]	; (26414 <ProcessAesDrv+0x2d8>)
   261c8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   261cc:	d056      	beq.n	2627c <ProcessAesDrv+0x140>
   261ce:	2a01      	cmp	r2, #1
   261d0:	bf0c      	ite	eq
   261d2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   261d6:	f040 0020 	orrne.w	r0, r0, #32
   261da:	f7fe fde9 	bl	24db0 <CC_HalMaskInterrupt>
   261de:	4b8d      	ldr	r3, [pc, #564]	; (26414 <ProcessAesDrv+0x2d8>)
   261e0:	2200      	movs	r2, #0
   261e2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   261e6:	2001      	movs	r0, #1
   261e8:	f7fe feae 	bl	24f48 <CC_PalPowerSaveModeSelect>
   261ec:	2800      	cmp	r0, #0
   261ee:	f040 80c5 	bne.w	2637c <ProcessAesDrv+0x240>
   261f2:	4887      	ldr	r0, [pc, #540]	; (26410 <ProcessAesDrv+0x2d4>)
   261f4:	f7fe fe80 	bl	24ef8 <CC_PalMutexUnlock>
   261f8:	2800      	cmp	r0, #0
   261fa:	f040 80b8 	bne.w	2636e <ProcessAesDrv+0x232>
   261fe:	4620      	mov	r0, r4
   26200:	b005      	add	sp, #20
   26202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26206:	2b01      	cmp	r3, #1
   26208:	d1ae      	bne.n	26168 <ProcessAesDrv+0x2c>
   2620a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2620e:	d3ab      	bcc.n	26168 <ProcessAesDrv+0x2c>
   26210:	4c82      	ldr	r4, [pc, #520]	; (2641c <ProcessAesDrv+0x2e0>)
   26212:	4620      	mov	r0, r4
   26214:	b005      	add	sp, #20
   26216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2621a:	3b06      	subs	r3, #6
   2621c:	2b01      	cmp	r3, #1
   2621e:	d8c4      	bhi.n	261aa <ProcessAesDrv+0x6e>
   26220:	6bab      	ldr	r3, [r5, #56]	; 0x38
   26222:	2b01      	cmp	r3, #1
   26224:	f200 80d2 	bhi.w	263cc <ProcessAesDrv+0x290>
   26228:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2622a:	2b01      	cmp	r3, #1
   2622c:	d834      	bhi.n	26298 <ProcessAesDrv+0x15c>
   2622e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26230:	2b01      	cmp	r3, #1
   26232:	f200 8122 	bhi.w	2647a <ProcessAesDrv+0x33e>
   26236:	4628      	mov	r0, r5
   26238:	f7ff fef6 	bl	26028 <InitAes.part.0>
   2623c:	4604      	mov	r4, r0
   2623e:	2800      	cmp	r0, #0
   26240:	d1b4      	bne.n	261ac <ProcessAesDrv+0x70>
   26242:	4628      	mov	r0, r5
   26244:	f7ff fe9e 	bl	25f84 <LoadAesKey>
   26248:	4604      	mov	r4, r0
   2624a:	2800      	cmp	r0, #0
   2624c:	d1ae      	bne.n	261ac <ProcessAesDrv+0x70>
   2624e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26250:	2b07      	cmp	r3, #7
   26252:	d8aa      	bhi.n	261aa <ProcessAesDrv+0x6e>
   26254:	a201      	add	r2, pc, #4	; (adr r2, 2625c <ProcessAesDrv+0x120>)
   26256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2625a:	bf00      	nop
   2625c:	000262b9 	.word	0x000262b9
   26260:	0002629d 	.word	0x0002629d
   26264:	00026441 	.word	0x00026441
   26268:	0002629d 	.word	0x0002629d
   2626c:	000261ab 	.word	0x000261ab
   26270:	000261ab 	.word	0x000261ab
   26274:	00026441 	.word	0x00026441
   26278:	0002629d 	.word	0x0002629d
   2627c:	2a01      	cmp	r2, #1
   2627e:	bf0c      	ite	eq
   26280:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   26284:	f040 0010 	orrne.w	r0, r0, #16
   26288:	f7fe fd92 	bl	24db0 <CC_HalMaskInterrupt>
   2628c:	e7a7      	b.n	261de <ProcessAesDrv+0xa2>
   2628e:	4c64      	ldr	r4, [pc, #400]	; (26420 <ProcessAesDrv+0x2e4>)
   26290:	4620      	mov	r0, r4
   26292:	b005      	add	sp, #20
   26294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26298:	4c62      	ldr	r4, [pc, #392]	; (26424 <ProcessAesDrv+0x2e8>)
   2629a:	e787      	b.n	261ac <ProcessAesDrv+0x70>
   2629c:	4b5d      	ldr	r3, [pc, #372]	; (26414 <ProcessAesDrv+0x2d8>)
   2629e:	682a      	ldr	r2, [r5, #0]
   262a0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   262a4:	686a      	ldr	r2, [r5, #4]
   262a6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   262aa:	68aa      	ldr	r2, [r5, #8]
   262ac:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   262b0:	68ea      	ldr	r2, [r5, #12]
   262b2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   262b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   262b8:	6832      	ldr	r2, [r6, #0]
   262ba:	f023 0304 	bic.w	r3, r3, #4
   262be:	2b03      	cmp	r3, #3
   262c0:	d00d      	beq.n	262de <ProcessAesDrv+0x1a2>
   262c2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   262c4:	f8d8 1000 	ldr.w	r1, [r8]
   262c8:	2b01      	cmp	r3, #1
   262ca:	4b52      	ldr	r3, [pc, #328]	; (26414 <ProcessAesDrv+0x2d8>)
   262cc:	bf0b      	itete	eq
   262ce:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   262d2:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   262d6:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   262da:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   262de:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   262e0:	2b01      	cmp	r3, #1
   262e2:	4b4c      	ldr	r3, [pc, #304]	; (26414 <ProcessAesDrv+0x2d8>)
   262e4:	bf0b      	itete	eq
   262e6:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   262ea:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   262ee:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   262f2:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   262f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   262f8:	f023 0304 	bic.w	r3, r3, #4
   262fc:	2b03      	cmp	r3, #3
   262fe:	d06a      	beq.n	263d6 <ProcessAesDrv+0x29a>
   26300:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26302:	2b01      	cmp	r3, #1
   26304:	bf0c      	ite	eq
   26306:	2080      	moveq	r0, #128	; 0x80
   26308:	2020      	movne	r0, #32
   2630a:	f7fe fd57 	bl	24dbc <CC_HalWaitInterrupt>
   2630e:	4604      	mov	r4, r0
   26310:	2800      	cmp	r0, #0
   26312:	f47f af4b 	bne.w	261ac <ProcessAesDrv+0x70>
   26316:	4b3f      	ldr	r3, [pc, #252]	; (26414 <ProcessAesDrv+0x2d8>)
   26318:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   2631c:	2c00      	cmp	r4, #0
   2631e:	d1fb      	bne.n	26318 <ProcessAesDrv+0x1dc>
   26320:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26322:	3b01      	subs	r3, #1
   26324:	2b06      	cmp	r3, #6
   26326:	d812      	bhi.n	2634e <ProcessAesDrv+0x212>
   26328:	e8df f003 	tbb	[pc, r3]
   2632c:	11049904 	.word	0x11049904
   26330:	9911      	.short	0x9911
   26332:	04          	.byte	0x04
   26333:	00          	.byte	0x00
   26334:	4b37      	ldr	r3, [pc, #220]	; (26414 <ProcessAesDrv+0x2d8>)
   26336:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2633a:	602a      	str	r2, [r5, #0]
   2633c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   26340:	606a      	str	r2, [r5, #4]
   26342:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   26346:	60aa      	str	r2, [r5, #8]
   26348:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2634c:	60eb      	str	r3, [r5, #12]
   2634e:	2301      	movs	r3, #1
   26350:	65ab      	str	r3, [r5, #88]	; 0x58
   26352:	e72b      	b.n	261ac <ProcessAesDrv+0x70>
   26354:	4834      	ldr	r0, [pc, #208]	; (26428 <ProcessAesDrv+0x2ec>)
   26356:	f7fd fe67 	bl	24028 <CC_PalAbort>
   2635a:	2000      	movs	r0, #0
   2635c:	f7fe fdf4 	bl	24f48 <CC_PalPowerSaveModeSelect>
   26360:	2800      	cmp	r0, #0
   26362:	f43f af15 	beq.w	26190 <ProcessAesDrv+0x54>
   26366:	4831      	ldr	r0, [pc, #196]	; (2642c <ProcessAesDrv+0x2f0>)
   26368:	f7fd fe5e 	bl	24028 <CC_PalAbort>
   2636c:	e710      	b.n	26190 <ProcessAesDrv+0x54>
   2636e:	4830      	ldr	r0, [pc, #192]	; (26430 <ProcessAesDrv+0x2f4>)
   26370:	f7fd fe5a 	bl	24028 <CC_PalAbort>
   26374:	4620      	mov	r0, r4
   26376:	b005      	add	sp, #20
   26378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2637c:	482d      	ldr	r0, [pc, #180]	; (26434 <ProcessAesDrv+0x2f8>)
   2637e:	f7fd fe53 	bl	24028 <CC_PalAbort>
   26382:	e736      	b.n	261f2 <ProcessAesDrv+0xb6>
   26384:	2304      	movs	r3, #4
   26386:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2638a:	2120      	movs	r1, #32
   2638c:	f105 0010 	add.w	r0, r5, #16
   26390:	f7fe fd92 	bl	24eb8 <CC_PalMemSetZeroPlat>
   26394:	e712      	b.n	261bc <ProcessAesDrv+0x80>
   26396:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26398:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2639a:	f000 f9b5 	bl	26708 <kmu_validate_slot_and_size>
   2639e:	b998      	cbnz	r0, 263c8 <ProcessAesDrv+0x28c>
   263a0:	4f25      	ldr	r7, [pc, #148]	; (26438 <ProcessAesDrv+0x2fc>)
   263a2:	4c1c      	ldr	r4, [pc, #112]	; (26414 <ProcessAesDrv+0x2d8>)
   263a4:	683b      	ldr	r3, [r7, #0]
   263a6:	681b      	ldr	r3, [r3, #0]
   263a8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   263ac:	683b      	ldr	r3, [r7, #0]
   263ae:	685b      	ldr	r3, [r3, #4]
   263b0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   263b4:	683b      	ldr	r3, [r7, #0]
   263b6:	689b      	ldr	r3, [r3, #8]
   263b8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   263bc:	683b      	ldr	r3, [r7, #0]
   263be:	68db      	ldr	r3, [r3, #12]
   263c0:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   263c4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   263c6:	b161      	cbz	r1, 263e2 <ProcessAesDrv+0x2a6>
   263c8:	2701      	movs	r7, #1
   263ca:	e6d3      	b.n	26174 <ProcessAesDrv+0x38>
   263cc:	4c1b      	ldr	r4, [pc, #108]	; (2643c <ProcessAesDrv+0x300>)
   263ce:	e6ed      	b.n	261ac <ProcessAesDrv+0x70>
   263d0:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   263d4:	e713      	b.n	261fe <ProcessAesDrv+0xc2>
   263d6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   263d8:	2b01      	cmp	r3, #1
   263da:	bf0c      	ite	eq
   263dc:	2040      	moveq	r0, #64	; 0x40
   263de:	2010      	movne	r0, #16
   263e0:	e793      	b.n	2630a <ProcessAesDrv+0x1ce>
   263e2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   263e4:	9301      	str	r3, [sp, #4]
   263e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   263e8:	9300      	str	r3, [sp, #0]
   263ea:	f105 0a10 	add.w	sl, r5, #16
   263ee:	f04f 0b10 	mov.w	fp, #16
   263f2:	f8cd a008 	str.w	sl, [sp, #8]
   263f6:	f8cd b00c 	str.w	fp, [sp, #12]
   263fa:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   263fe:	6c28      	ldr	r0, [r5, #64]	; 0x40
   26400:	f000 f9a4 	bl	2674c <kmu_derive_cmac>
   26404:	2800      	cmp	r0, #0
   26406:	d13a      	bne.n	2647e <ProcessAesDrv+0x342>
   26408:	2300      	movs	r3, #0
   2640a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2640e:	e7db      	b.n	263c8 <ProcessAesDrv+0x28c>
   26410:	20000914 	.word	0x20000914
   26414:	5002b000 	.word	0x5002b000
   26418:	00f10001 	.word	0x00f10001
   2641c:	00f10005 	.word	0x00f10005
   26420:	00f1000b 	.word	0x00f1000b
   26424:	00f10003 	.word	0x00f10003
   26428:	0002d644 	.word	0x0002d644
   2642c:	0002d65c 	.word	0x0002d65c
   26430:	0002d69c 	.word	0x0002d69c
   26434:	0002d67c 	.word	0x0002d67c
   26438:	20000904 	.word	0x20000904
   2643c:	00f10002 	.word	0x00f10002
   26440:	4b19      	ldr	r3, [pc, #100]	; (264a8 <ProcessAesDrv+0x36c>)
   26442:	682a      	ldr	r2, [r5, #0]
   26444:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   26448:	686a      	ldr	r2, [r5, #4]
   2644a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2644e:	68aa      	ldr	r2, [r5, #8]
   26450:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   26454:	68ea      	ldr	r2, [r5, #12]
   26456:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2645a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2645c:	e72c      	b.n	262b8 <ProcessAesDrv+0x17c>
   2645e:	4b12      	ldr	r3, [pc, #72]	; (264a8 <ProcessAesDrv+0x36c>)
   26460:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   26464:	602a      	str	r2, [r5, #0]
   26466:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2646a:	606a      	str	r2, [r5, #4]
   2646c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   26470:	60aa      	str	r2, [r5, #8]
   26472:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   26476:	60eb      	str	r3, [r5, #12]
   26478:	e769      	b.n	2634e <ProcessAesDrv+0x212>
   2647a:	4c0c      	ldr	r4, [pc, #48]	; (264ac <ProcessAesDrv+0x370>)
   2647c:	e696      	b.n	261ac <ProcessAesDrv+0x70>
   2647e:	683b      	ldr	r3, [r7, #0]
   26480:	681b      	ldr	r3, [r3, #0]
   26482:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   26486:	683b      	ldr	r3, [r7, #0]
   26488:	685b      	ldr	r3, [r3, #4]
   2648a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2648e:	683b      	ldr	r3, [r7, #0]
   26490:	689b      	ldr	r3, [r3, #8]
   26492:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   26496:	683b      	ldr	r3, [r7, #0]
   26498:	68db      	ldr	r3, [r3, #12]
   2649a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2649e:	4659      	mov	r1, fp
   264a0:	4650      	mov	r0, sl
   264a2:	f7fe fd09 	bl	24eb8 <CC_PalMemSetZeroPlat>
   264a6:	e7af      	b.n	26408 <ProcessAesDrv+0x2cc>
   264a8:	5002b000 	.word	0x5002b000
   264ac:	00f10004 	.word	0x00f10004

000264b0 <FinishAesDrv>:
   264b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264b4:	b301      	cbz	r1, 264f8 <FinishAesDrv+0x48>
   264b6:	b1fa      	cbz	r2, 264f8 <FinishAesDrv+0x48>
   264b8:	4604      	mov	r4, r0
   264ba:	2800      	cmp	r0, #0
   264bc:	d07c      	beq.n	265b8 <FinishAesDrv+0x108>
   264be:	461d      	mov	r5, r3
   264c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   264c2:	2b07      	cmp	r3, #7
   264c4:	460e      	mov	r6, r1
   264c6:	d01b      	beq.n	26500 <FinishAesDrv+0x50>
   264c8:	b95d      	cbnz	r5, 264e2 <FinishAesDrv+0x32>
   264ca:	2b03      	cmp	r3, #3
   264cc:	d110      	bne.n	264f0 <FinishAesDrv+0x40>
   264ce:	6d83      	ldr	r3, [r0, #88]	; 0x58
   264d0:	b973      	cbnz	r3, 264f0 <FinishAesDrv+0x40>
   264d2:	f100 0364 	add.w	r3, r0, #100	; 0x64
   264d6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   264da:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   264de:	600b      	str	r3, [r1, #0]
   264e0:	2510      	movs	r5, #16
   264e2:	462b      	mov	r3, r5
   264e4:	4631      	mov	r1, r6
   264e6:	4620      	mov	r0, r4
   264e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   264ec:	f7ff be26 	b.w	2613c <ProcessAesDrv>
   264f0:	462f      	mov	r7, r5
   264f2:	4638      	mov	r0, r7
   264f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   264f8:	4f77      	ldr	r7, [pc, #476]	; (266d8 <FinishAesDrv+0x228>)
   264fa:	4638      	mov	r0, r7
   264fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26500:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26502:	2b00      	cmp	r3, #0
   26504:	d15b      	bne.n	265be <FinishAesDrv+0x10e>
   26506:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2650a:	d25d      	bcs.n	265c8 <FinishAesDrv+0x118>
   2650c:	b915      	cbnz	r5, 26514 <FinishAesDrv+0x64>
   2650e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26510:	2b00      	cmp	r3, #0
   26512:	d159      	bne.n	265c8 <FinishAesDrv+0x118>
   26514:	4871      	ldr	r0, [pc, #452]	; (266dc <FinishAesDrv+0x22c>)
   26516:	f04f 31ff 	mov.w	r1, #4294967295
   2651a:	f7fe fce5 	bl	24ee8 <CC_PalMutexLock>
   2651e:	2800      	cmp	r0, #0
   26520:	f040 80b8 	bne.w	26694 <FinishAesDrv+0x1e4>
   26524:	2000      	movs	r0, #0
   26526:	f7fe fd0f 	bl	24f48 <CC_PalPowerSaveModeSelect>
   2652a:	2800      	cmp	r0, #0
   2652c:	f040 80ae 	bne.w	2668c <FinishAesDrv+0x1dc>
   26530:	4a6b      	ldr	r2, [pc, #428]	; (266e0 <FinishAesDrv+0x230>)
   26532:	2301      	movs	r3, #1
   26534:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   26538:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2653c:	2b00      	cmp	r3, #0
   2653e:	d1fb      	bne.n	26538 <FinishAesDrv+0x88>
   26540:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26542:	2b03      	cmp	r3, #3
   26544:	dd20      	ble.n	26588 <FinishAesDrv+0xd8>
   26546:	3b06      	subs	r3, #6
   26548:	2b01      	cmp	r3, #1
   2654a:	d81f      	bhi.n	2658c <FinishAesDrv+0xdc>
   2654c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2654e:	2b01      	cmp	r3, #1
   26550:	d83c      	bhi.n	265cc <FinishAesDrv+0x11c>
   26552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26554:	2b01      	cmp	r3, #1
   26556:	f200 80a5 	bhi.w	266a4 <FinishAesDrv+0x1f4>
   2655a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2655c:	2b01      	cmp	r3, #1
   2655e:	f200 80a3 	bhi.w	266a8 <FinishAesDrv+0x1f8>
   26562:	4620      	mov	r0, r4
   26564:	f7ff fd60 	bl	26028 <InitAes.part.0>
   26568:	4607      	mov	r7, r0
   2656a:	b980      	cbnz	r0, 2658e <FinishAesDrv+0xde>
   2656c:	4620      	mov	r0, r4
   2656e:	f7ff fd09 	bl	25f84 <LoadAesKey>
   26572:	4607      	mov	r7, r0
   26574:	b958      	cbnz	r0, 2658e <FinishAesDrv+0xde>
   26576:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26578:	2b07      	cmp	r3, #7
   2657a:	d807      	bhi.n	2658c <FinishAesDrv+0xdc>
   2657c:	e8df f003 	tbb	[pc, r3]
   26580:	285c2835 	.word	0x285c2835
   26584:	285c0606 	.word	0x285c0606
   26588:	2b00      	cmp	r3, #0
   2658a:	dadf      	bge.n	2654c <FinishAesDrv+0x9c>
   2658c:	4f55      	ldr	r7, [pc, #340]	; (266e4 <FinishAesDrv+0x234>)
   2658e:	4a54      	ldr	r2, [pc, #336]	; (266e0 <FinishAesDrv+0x230>)
   26590:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26594:	2b00      	cmp	r3, #0
   26596:	d1fb      	bne.n	26590 <FinishAesDrv+0xe0>
   26598:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2659c:	2001      	movs	r0, #1
   2659e:	f7fe fcd3 	bl	24f48 <CC_PalPowerSaveModeSelect>
   265a2:	2800      	cmp	r0, #0
   265a4:	d17a      	bne.n	2669c <FinishAesDrv+0x1ec>
   265a6:	484d      	ldr	r0, [pc, #308]	; (266dc <FinishAesDrv+0x22c>)
   265a8:	f7fe fca6 	bl	24ef8 <CC_PalMutexUnlock>
   265ac:	2800      	cmp	r0, #0
   265ae:	d0a0      	beq.n	264f2 <FinishAesDrv+0x42>
   265b0:	484d      	ldr	r0, [pc, #308]	; (266e8 <FinishAesDrv+0x238>)
   265b2:	f7fd fd39 	bl	24028 <CC_PalAbort>
   265b6:	e79c      	b.n	264f2 <FinishAesDrv+0x42>
   265b8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   265bc:	e799      	b.n	264f2 <FinishAesDrv+0x42>
   265be:	2b01      	cmp	r3, #1
   265c0:	d1a4      	bne.n	2650c <FinishAesDrv+0x5c>
   265c2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   265c6:	d3a1      	bcc.n	2650c <FinishAesDrv+0x5c>
   265c8:	4f48      	ldr	r7, [pc, #288]	; (266ec <FinishAesDrv+0x23c>)
   265ca:	e792      	b.n	264f2 <FinishAesDrv+0x42>
   265cc:	4f48      	ldr	r7, [pc, #288]	; (266f0 <FinishAesDrv+0x240>)
   265ce:	e7de      	b.n	2658e <FinishAesDrv+0xde>
   265d0:	4b43      	ldr	r3, [pc, #268]	; (266e0 <FinishAesDrv+0x230>)
   265d2:	6822      	ldr	r2, [r4, #0]
   265d4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   265d8:	6862      	ldr	r2, [r4, #4]
   265da:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   265de:	68a2      	ldr	r2, [r4, #8]
   265e0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   265e4:	68e2      	ldr	r2, [r4, #12]
   265e6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   265ea:	4b3d      	ldr	r3, [pc, #244]	; (266e0 <FinishAesDrv+0x230>)
   265ec:	2201      	movs	r2, #1
   265ee:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   265f2:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   265f6:	2d00      	cmp	r5, #0
   265f8:	d158      	bne.n	266ac <FinishAesDrv+0x1fc>
   265fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
   265fc:	b909      	cbnz	r1, 26602 <FinishAesDrv+0x152>
   265fe:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   26602:	4b37      	ldr	r3, [pc, #220]	; (266e0 <FinishAesDrv+0x230>)
   26604:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   26608:	2f00      	cmp	r7, #0
   2660a:	d1fb      	bne.n	26604 <FinishAesDrv+0x154>
   2660c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2660e:	3b01      	subs	r3, #1
   26610:	2b06      	cmp	r3, #6
   26612:	d8bc      	bhi.n	2658e <FinishAesDrv+0xde>
   26614:	a201      	add	r2, pc, #4	; (adr r2, 2661c <FinishAesDrv+0x16c>)
   26616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2661a:	bf00      	nop
   2661c:	00026655 	.word	0x00026655
   26620:	00026671 	.word	0x00026671
   26624:	00026655 	.word	0x00026655
   26628:	0002658f 	.word	0x0002658f
   2662c:	0002658f 	.word	0x0002658f
   26630:	00026671 	.word	0x00026671
   26634:	00026655 	.word	0x00026655
   26638:	4b29      	ldr	r3, [pc, #164]	; (266e0 <FinishAesDrv+0x230>)
   2663a:	6822      	ldr	r2, [r4, #0]
   2663c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   26640:	6862      	ldr	r2, [r4, #4]
   26642:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   26646:	68a2      	ldr	r2, [r4, #8]
   26648:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2664c:	68e2      	ldr	r2, [r4, #12]
   2664e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   26652:	e7ca      	b.n	265ea <FinishAesDrv+0x13a>
   26654:	4b22      	ldr	r3, [pc, #136]	; (266e0 <FinishAesDrv+0x230>)
   26656:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2665a:	6022      	str	r2, [r4, #0]
   2665c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   26660:	6062      	str	r2, [r4, #4]
   26662:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   26666:	60a2      	str	r2, [r4, #8]
   26668:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2666c:	60e3      	str	r3, [r4, #12]
   2666e:	e78e      	b.n	2658e <FinishAesDrv+0xde>
   26670:	4b1b      	ldr	r3, [pc, #108]	; (266e0 <FinishAesDrv+0x230>)
   26672:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   26676:	6022      	str	r2, [r4, #0]
   26678:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2667c:	6062      	str	r2, [r4, #4]
   2667e:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   26682:	60a2      	str	r2, [r4, #8]
   26684:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   26688:	60e3      	str	r3, [r4, #12]
   2668a:	e780      	b.n	2658e <FinishAesDrv+0xde>
   2668c:	4819      	ldr	r0, [pc, #100]	; (266f4 <FinishAesDrv+0x244>)
   2668e:	f7fd fccb 	bl	24028 <CC_PalAbort>
   26692:	e74d      	b.n	26530 <FinishAesDrv+0x80>
   26694:	4818      	ldr	r0, [pc, #96]	; (266f8 <FinishAesDrv+0x248>)
   26696:	f7fd fcc7 	bl	24028 <CC_PalAbort>
   2669a:	e743      	b.n	26524 <FinishAesDrv+0x74>
   2669c:	4817      	ldr	r0, [pc, #92]	; (266fc <FinishAesDrv+0x24c>)
   2669e:	f7fd fcc3 	bl	24028 <CC_PalAbort>
   266a2:	e780      	b.n	265a6 <FinishAesDrv+0xf6>
   266a4:	4f16      	ldr	r7, [pc, #88]	; (26700 <FinishAesDrv+0x250>)
   266a6:	e772      	b.n	2658e <FinishAesDrv+0xde>
   266a8:	4f16      	ldr	r7, [pc, #88]	; (26704 <FinishAesDrv+0x254>)
   266aa:	e770      	b.n	2658e <FinishAesDrv+0xde>
   266ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   266ae:	6832      	ldr	r2, [r6, #0]
   266b0:	2901      	cmp	r1, #1
   266b2:	d00a      	beq.n	266ca <FinishAesDrv+0x21a>
   266b4:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   266b8:	2010      	movs	r0, #16
   266ba:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   266be:	f7fe fb7d 	bl	24dbc <CC_HalWaitInterrupt>
   266c2:	4607      	mov	r7, r0
   266c4:	2800      	cmp	r0, #0
   266c6:	d09c      	beq.n	26602 <FinishAesDrv+0x152>
   266c8:	e761      	b.n	2658e <FinishAesDrv+0xde>
   266ca:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   266ce:	2040      	movs	r0, #64	; 0x40
   266d0:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   266d4:	e7f3      	b.n	266be <FinishAesDrv+0x20e>
   266d6:	bf00      	nop
   266d8:	00f1000b 	.word	0x00f1000b
   266dc:	20000914 	.word	0x20000914
   266e0:	5002b000 	.word	0x5002b000
   266e4:	00f10001 	.word	0x00f10001
   266e8:	0002d69c 	.word	0x0002d69c
   266ec:	00f10005 	.word	0x00f10005
   266f0:	00f10002 	.word	0x00f10002
   266f4:	0002d65c 	.word	0x0002d65c
   266f8:	0002d644 	.word	0x0002d644
   266fc:	0002d67c 	.word	0x0002d67c
   26700:	00f10003 	.word	0x00f10003
   26704:	00f10004 	.word	0x00f10004

00026708 <kmu_validate_slot_and_size>:
   26708:	b921      	cbnz	r1, 26714 <kmu_validate_slot_and_size+0xc>
   2670a:	4b03      	ldr	r3, [pc, #12]	; (26718 <kmu_validate_slot_and_size+0x10>)
   2670c:	2800      	cmp	r0, #0
   2670e:	bf18      	it	ne
   26710:	4618      	movne	r0, r3
   26712:	4770      	bx	lr
   26714:	4801      	ldr	r0, [pc, #4]	; (2671c <kmu_validate_slot_and_size+0x14>)
   26716:	4770      	bx	lr
   26718:	00f70001 	.word	0x00f70001
   2671c:	00f70003 	.word	0x00f70003

00026720 <kmu_validate_kdr_slot_and_size>:
   26720:	b921      	cbnz	r1, 2672c <kmu_validate_kdr_slot_and_size+0xc>
   26722:	4b03      	ldr	r3, [pc, #12]	; (26730 <kmu_validate_kdr_slot_and_size+0x10>)
   26724:	2800      	cmp	r0, #0
   26726:	bf18      	it	ne
   26728:	4618      	movne	r0, r3
   2672a:	4770      	bx	lr
   2672c:	4801      	ldr	r0, [pc, #4]	; (26734 <kmu_validate_kdr_slot_and_size+0x14>)
   2672e:	4770      	bx	lr
   26730:	00f70001 	.word	0x00f70001
   26734:	00f70003 	.word	0x00f70003

00026738 <kmu_use_kdr_key>:
   26738:	4b03      	ldr	r3, [pc, #12]	; (26748 <kmu_use_kdr_key+0x10>)
   2673a:	2000      	movs	r0, #0
   2673c:	2201      	movs	r2, #1
   2673e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   26742:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   26746:	4770      	bx	lr
   26748:	5002b000 	.word	0x5002b000

0002674c <kmu_derive_cmac>:
   2674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26750:	b0cc      	sub	sp, #304	; 0x130
   26752:	2400      	movs	r4, #0
   26754:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   26756:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2675a:	4682      	mov	sl, r0
   2675c:	4689      	mov	r9, r1
   2675e:	4616      	mov	r6, r2
   26760:	4621      	mov	r1, r4
   26762:	2274      	movs	r2, #116	; 0x74
   26764:	a80e      	add	r0, sp, #56	; 0x38
   26766:	461f      	mov	r7, r3
   26768:	f005 fc52 	bl	2c010 <memset>
   2676c:	2280      	movs	r2, #128	; 0x80
   2676e:	4621      	mov	r1, r4
   26770:	a82c      	add	r0, sp, #176	; 0xb0
   26772:	942b      	str	r4, [sp, #172]	; 0xac
   26774:	f005 fc4c 	bl	2c010 <memset>
   26778:	2384      	movs	r3, #132	; 0x84
   2677a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2677e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   26782:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   26786:	9305      	str	r3, [sp, #20]
   26788:	d863      	bhi.n	26852 <kmu_derive_cmac+0x106>
   2678a:	f7ff fcbf 	bl	2610c <write_invalid_key>
   2678e:	ab05      	add	r3, sp, #20
   26790:	4630      	mov	r0, r6
   26792:	ae2b      	add	r6, sp, #172	; 0xac
   26794:	9301      	str	r3, [sp, #4]
   26796:	9502      	str	r5, [sp, #8]
   26798:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   2679c:	4639      	mov	r1, r7
   2679e:	9600      	str	r6, [sp, #0]
   267a0:	f000 f862 	bl	26868 <UtilCmacBuildDataForDerivation>
   267a4:	2800      	cmp	r0, #0
   267a6:	d14f      	bne.n	26848 <kmu_derive_cmac+0xfc>
   267a8:	2303      	movs	r3, #3
   267aa:	f88d 3013 	strb.w	r3, [sp, #19]
   267ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
   267b2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   267b6:	2307      	movs	r3, #7
   267b8:	2200      	movs	r2, #0
   267ba:	901c      	str	r0, [sp, #112]	; 0x70
   267bc:	2110      	movs	r1, #16
   267be:	a80e      	add	r0, sp, #56	; 0x38
   267c0:	931b      	str	r3, [sp, #108]	; 0x6c
   267c2:	2401      	movs	r4, #1
   267c4:	2301      	movs	r3, #1
   267c6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   267ca:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   267ce:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   267d2:	9426      	str	r4, [sp, #152]	; 0x98
   267d4:	f10d 0920 	add.w	r9, sp, #32
   267d8:	f7fe fb6e 	bl	24eb8 <CC_PalMemSetZeroPlat>
   267dc:	2210      	movs	r2, #16
   267de:	9200      	str	r2, [sp, #0]
   267e0:	9905      	ldr	r1, [sp, #20]
   267e2:	f8cd 9004 	str.w	r9, [sp, #4]
   267e6:	ab0a      	add	r3, sp, #40	; 0x28
   267e8:	4630      	mov	r0, r6
   267ea:	aa06      	add	r2, sp, #24
   267ec:	f7ff fa1e 	bl	25c2c <SetDataBuffersInfo>
   267f0:	4607      	mov	r7, r0
   267f2:	b170      	cbz	r0, 26812 <kmu_derive_cmac+0xc6>
   267f4:	e01d      	b.n	26832 <kmu_derive_cmac+0xe6>
   267f6:	a90e      	add	r1, sp, #56	; 0x38
   267f8:	eb08 0007 	add.w	r0, r8, r7
   267fc:	f7fe fb58 	bl	24eb0 <CC_PalMemCopyPlat>
   26800:	2110      	movs	r1, #16
   26802:	a80e      	add	r0, sp, #56	; 0x38
   26804:	f7fe fb58 	bl	24eb8 <CC_PalMemSetZeroPlat>
   26808:	3401      	adds	r4, #1
   2680a:	1bad      	subs	r5, r5, r6
   2680c:	4437      	add	r7, r6
   2680e:	b2e4      	uxtb	r4, r4
   26810:	d024      	beq.n	2685c <kmu_derive_cmac+0x110>
   26812:	2d10      	cmp	r5, #16
   26814:	464a      	mov	r2, r9
   26816:	9b05      	ldr	r3, [sp, #20]
   26818:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2681c:	a906      	add	r1, sp, #24
   2681e:	a80e      	add	r0, sp, #56	; 0x38
   26820:	462e      	mov	r6, r5
   26822:	bf28      	it	cs
   26824:	2610      	movcs	r6, #16
   26826:	f7ff fe43 	bl	264b0 <FinishAesDrv>
   2682a:	4632      	mov	r2, r6
   2682c:	2800      	cmp	r0, #0
   2682e:	d0e2      	beq.n	267f6 <kmu_derive_cmac+0xaa>
   26830:	4607      	mov	r7, r0
   26832:	a80e      	add	r0, sp, #56	; 0x38
   26834:	2274      	movs	r2, #116	; 0x74
   26836:	2100      	movs	r1, #0
   26838:	f7fe fb3c 	bl	24eb4 <CC_PalMemSetPlat>
   2683c:	f7ff fc66 	bl	2610c <write_invalid_key>
   26840:	4638      	mov	r0, r7
   26842:	b04c      	add	sp, #304	; 0x130
   26844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26848:	4f05      	ldr	r7, [pc, #20]	; (26860 <kmu_derive_cmac+0x114>)
   2684a:	4638      	mov	r0, r7
   2684c:	b04c      	add	sp, #304	; 0x130
   2684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26852:	4f04      	ldr	r7, [pc, #16]	; (26864 <kmu_derive_cmac+0x118>)
   26854:	4638      	mov	r0, r7
   26856:	b04c      	add	sp, #304	; 0x130
   26858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2685c:	462f      	mov	r7, r5
   2685e:	e7e8      	b.n	26832 <kmu_derive_cmac+0xe6>
   26860:	00f1000e 	.word	0x00f1000e
   26864:	00f1000f 	.word	0x00f1000f

00026868 <UtilCmacBuildDataForDerivation>:
   26868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2686c:	b082      	sub	sp, #8
   2686e:	461e      	mov	r6, r3
   26870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   26872:	2300      	movs	r3, #0
   26874:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   26878:	9301      	str	r3, [sp, #4]
   2687a:	d83e      	bhi.n	268fa <UtilCmacBuildDataForDerivation+0x92>
   2687c:	00e4      	lsls	r4, r4, #3
   2687e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   26882:	4617      	mov	r7, r2
   26884:	f101 32ff 	add.w	r2, r1, #4294967295
   26888:	bf34      	ite	cc
   2688a:	2303      	movcc	r3, #3
   2688c:	2304      	movcs	r3, #4
   2688e:	2a3f      	cmp	r2, #63	; 0x3f
   26890:	460d      	mov	r5, r1
   26892:	9300      	str	r3, [sp, #0]
   26894:	d831      	bhi.n	268fa <UtilCmacBuildDataForDerivation+0x92>
   26896:	b380      	cbz	r0, 268fa <UtilCmacBuildDataForDerivation+0x92>
   26898:	b116      	cbz	r6, 268a0 <UtilCmacBuildDataForDerivation+0x38>
   2689a:	b377      	cbz	r7, 268fa <UtilCmacBuildDataForDerivation+0x92>
   2689c:	2e40      	cmp	r6, #64	; 0x40
   2689e:	d82c      	bhi.n	268fa <UtilCmacBuildDataForDerivation+0x92>
   268a0:	9a08      	ldr	r2, [sp, #32]
   268a2:	b352      	cbz	r2, 268fa <UtilCmacBuildDataForDerivation+0x92>
   268a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   268a6:	6811      	ldr	r1, [r2, #0]
   268a8:	b339      	cbz	r1, 268fa <UtilCmacBuildDataForDerivation+0x92>
   268aa:	19aa      	adds	r2, r5, r6
   268ac:	4413      	add	r3, r2
   268ae:	4299      	cmp	r1, r3
   268b0:	d323      	bcc.n	268fa <UtilCmacBuildDataForDerivation+0x92>
   268b2:	9b08      	ldr	r3, [sp, #32]
   268b4:	4601      	mov	r1, r0
   268b6:	462a      	mov	r2, r5
   268b8:	1c58      	adds	r0, r3, #1
   268ba:	f7fe faf9 	bl	24eb0 <CC_PalMemCopyPlat>
   268be:	9b08      	ldr	r3, [sp, #32]
   268c0:	f105 0802 	add.w	r8, r5, #2
   268c4:	441d      	add	r5, r3
   268c6:	2300      	movs	r3, #0
   268c8:	706b      	strb	r3, [r5, #1]
   268ca:	bb0e      	cbnz	r6, 26910 <UtilCmacBuildDataForDerivation+0xa8>
   268cc:	9b08      	ldr	r3, [sp, #32]
   268ce:	9400      	str	r4, [sp, #0]
   268d0:	2cff      	cmp	r4, #255	; 0xff
   268d2:	eb03 0008 	add.w	r0, r3, r8
   268d6:	d914      	bls.n	26902 <UtilCmacBuildDataForDerivation+0x9a>
   268d8:	0223      	lsls	r3, r4, #8
   268da:	b29b      	uxth	r3, r3
   268dc:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   268e0:	2202      	movs	r2, #2
   268e2:	a901      	add	r1, sp, #4
   268e4:	9401      	str	r4, [sp, #4]
   268e6:	f7fe fae3 	bl	24eb0 <CC_PalMemCopyPlat>
   268ea:	f108 0302 	add.w	r3, r8, #2
   268ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   268f0:	2000      	movs	r0, #0
   268f2:	6013      	str	r3, [r2, #0]
   268f4:	b002      	add	sp, #8
   268f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   268fa:	480a      	ldr	r0, [pc, #40]	; (26924 <UtilCmacBuildDataForDerivation+0xbc>)
   268fc:	b002      	add	sp, #8
   268fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26902:	2201      	movs	r2, #1
   26904:	4669      	mov	r1, sp
   26906:	f7fe fad3 	bl	24eb0 <CC_PalMemCopyPlat>
   2690a:	f108 0301 	add.w	r3, r8, #1
   2690e:	e7ee      	b.n	268ee <UtilCmacBuildDataForDerivation+0x86>
   26910:	9b08      	ldr	r3, [sp, #32]
   26912:	4632      	mov	r2, r6
   26914:	eb03 0008 	add.w	r0, r3, r8
   26918:	4639      	mov	r1, r7
   2691a:	f7fe fac9 	bl	24eb0 <CC_PalMemCopyPlat>
   2691e:	44b0      	add	r8, r6
   26920:	e7d4      	b.n	268cc <UtilCmacBuildDataForDerivation+0x64>
   26922:	bf00      	nop
   26924:	80000006 	.word	0x80000006

00026928 <CC_PalDataBufferAttrGet>:
   26928:	2000      	movs	r0, #0
   2692a:	7018      	strb	r0, [r3, #0]
   2692c:	4770      	bx	lr
   2692e:	bf00      	nop

00026930 <_is_value_in_table>:
{
   26930:	b530      	push	{r4, r5, lr}
  for(int i=0; i<len; i++)
   26932:	2400      	movs	r4, #0
    if(value == table[i])
   26934:	5d0d      	ldrb	r5, [r1, r4]
   26936:	4285      	cmp	r5, r0
   26938:	d102      	bne.n	26940 <_is_value_in_table+0x10>
      *index = i;
   2693a:	701c      	strb	r4, [r3, #0]
      return bTRUE;
   2693c:	2001      	movs	r0, #1
}
   2693e:	bd30      	pop	{r4, r5, pc}
  for(int i=0; i<len; i++)
   26940:	3401      	adds	r4, #1
   26942:	42a2      	cmp	r2, r4
   26944:	dcf6      	bgt.n	26934 <_is_value_in_table+0x4>
  return bFALSE;
   26946:	2000      	movs	r0, #0
   26948:	e7f9      	b.n	2693e <_is_value_in_table+0xe>

0002694a <AD5940_ReadWrite16B>:
{
   2694a:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = data>>8;
   2694c:	0a03      	lsrs	r3, r0, #8
   SendBuffer[1] = data&0xff;
   2694e:	f88d 0001 	strb.w	r0, [sp, #1]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   26952:	2202      	movs	r2, #2
   26954:	4668      	mov	r0, sp
   26956:	a901      	add	r1, sp, #4
   SendBuffer[0] = data>>8;
   26958:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   2695c:	f7eb fb9a 	bl	12094 <AD5940_ReadWriteNBytes>
   return (((uint16_t)RecvBuffer[0])<<8)|RecvBuffer[1];
   26960:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   26964:	ba40      	rev16	r0, r0
}
   26966:	b280      	uxth	r0, r0
   26968:	b003      	add	sp, #12
   2696a:	f85d fb04 	ldr.w	pc, [sp], #4

0002696e <AD5940_ReadWrite32B>:
{
   2696e:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = (data>>24)&0xff;
   26970:	0e03      	lsrs	r3, r0, #24
   26972:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   26976:	2204      	movs	r2, #4
   SendBuffer[1] = (data>>16)&0xff;
   26978:	0c03      	lsrs	r3, r0, #16
   2697a:	f88d 3001 	strb.w	r3, [sp, #1]
   SendBuffer[3] = (data    )&0xff;
   2697e:	f88d 0003 	strb.w	r0, [sp, #3]
   SendBuffer[2] = (data>> 8)&0xff;
   26982:	0a03      	lsrs	r3, r0, #8
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   26984:	eb0d 0102 	add.w	r1, sp, r2
   26988:	4668      	mov	r0, sp
   SendBuffer[2] = (data>> 8)&0xff;
   2698a:	f88d 3002 	strb.w	r3, [sp, #2]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   2698e:	f7eb fb81 	bl	12094 <AD5940_ReadWriteNBytes>
}
   26992:	9801      	ldr	r0, [sp, #4]
   26994:	ba00      	rev	r0, r0
   26996:	b003      	add	sp, #12
   26998:	f85d fb04 	ldr.w	pc, [sp], #4

0002699c <AD5940_ReadWrite8B.isra.0>:
static unsigned char AD5940_ReadWrite8B(unsigned char data)
   2699c:	b507      	push	{r0, r1, r2, lr}
   AD5940_ReadWriteNBytes(tx,rx,1);
   2699e:	2201      	movs	r2, #1
   tx[0] = data;
   269a0:	f88d 0000 	strb.w	r0, [sp]
   AD5940_ReadWriteNBytes(tx,rx,1);
   269a4:	a901      	add	r1, sp, #4
   269a6:	4668      	mov	r0, sp
   269a8:	f7eb fb74 	bl	12094 <AD5940_ReadWriteNBytes>
}
   269ac:	b003      	add	sp, #12
   269ae:	f85d fb04 	ldr.w	pc, [sp], #4

000269b2 <AD5940_SPIReadReg>:
{  
   269b2:	b510      	push	{r4, lr}
   269b4:	4604      	mov	r4, r0
  AD5940_CsClr();
   269b6:	f000 fda2 	bl	274fe <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   269ba:	2020      	movs	r0, #32
   269bc:	f7ff ffee 	bl	2699c <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   269c0:	4620      	mov	r0, r4
   269c2:	f7ff ffc2 	bl	2694a <AD5940_ReadWrite16B>
  AD5940_CsSet();
   269c6:	f000 fd9e 	bl	27506 <AD5940_CsSet>
  AD5940_CsClr();
   269ca:	f000 fd98 	bl	274fe <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_READREG);
   269ce:	206d      	movs	r0, #109	; 0x6d
   269d0:	f7ff ffe4 	bl	2699c <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   269d4:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_ReadWrite8B(0);  //Dummy read
   269d8:	2000      	movs	r0, #0
   269da:	f7ff ffdf 	bl	2699c <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   269de:	b2a4      	uxth	r4, r4
   269e0:	f242 0314 	movw	r3, #8212	; 0x2014
   269e4:	429c      	cmp	r4, r3
    Data = AD5940_ReadWrite32B(0);
   269e6:	f04f 0000 	mov.w	r0, #0
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   269ea:	d806      	bhi.n	269fa <AD5940_SPIReadReg+0x48>
    Data = AD5940_ReadWrite32B(0);
   269ec:	f7ff ffbf 	bl	2696e <AD5940_ReadWrite32B>
    Data = AD5940_ReadWrite16B(0);
   269f0:	4604      	mov	r4, r0
  AD5940_CsSet();
   269f2:	f000 fd88 	bl	27506 <AD5940_CsSet>
}
   269f6:	4620      	mov	r0, r4
   269f8:	bd10      	pop	{r4, pc}
    Data = AD5940_ReadWrite16B(0);
   269fa:	f7ff ffa6 	bl	2694a <AD5940_ReadWrite16B>
   269fe:	e7f7      	b.n	269f0 <AD5940_SPIReadReg+0x3e>

00026a00 <AD5940_FIFORd>:
   if(uiReadCount < 3)
   26a00:	2902      	cmp	r1, #2
{
   26a02:	b570      	push	{r4, r5, r6, lr}
   26a04:	4604      	mov	r4, r0
   26a06:	460d      	mov	r5, r1
   if(uiReadCount < 3)
   26a08:	d81f      	bhi.n	26a4a <AD5940_FIFORd+0x4a>
      AD5940_CsClr();
   26a0a:	f000 fd78 	bl	274fe <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_SETADDR);
   26a0e:	2020      	movs	r0, #32
   26a10:	f7ff ffc4 	bl	2699c <AD5940_ReadWrite8B.isra.0>
      AD5940_ReadWrite16B(REG_AFE_DATAFIFORD);
   26a14:	f242 006c 	movw	r0, #8300	; 0x206c
   26a18:	f7ff ff97 	bl	2694a <AD5940_ReadWrite16B>
      AD5940_CsSet();
   26a1c:	f000 fd73 	bl	27506 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   26a20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   26a24:	42ac      	cmp	r4, r5
   26a26:	d100      	bne.n	26a2a <AD5940_FIFORd+0x2a>
}
   26a28:	bd70      	pop	{r4, r5, r6, pc}
         AD5940_CsClr();
   26a2a:	f000 fd68 	bl	274fe <AD5940_CsClr>
         AD5940_ReadWrite8B(SPICMD_READREG);
   26a2e:	206d      	movs	r0, #109	; 0x6d
   26a30:	f7ff ffb4 	bl	2699c <AD5940_ReadWrite8B.isra.0>
         AD5940_ReadWrite8B(0);//Write Host status/Don't care
   26a34:	2000      	movs	r0, #0
   26a36:	f7ff ffb1 	bl	2699c <AD5940_ReadWrite8B.isra.0>
         pBuffer[i] = AD5940_ReadWrite32B(0);
   26a3a:	2000      	movs	r0, #0
   26a3c:	f7ff ff97 	bl	2696e <AD5940_ReadWrite32B>
   26a40:	f844 0b04 	str.w	r0, [r4], #4
         AD5940_CsSet();
   26a44:	f000 fd5f 	bl	27506 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   26a48:	e7ec      	b.n	26a24 <AD5940_FIFORd+0x24>
      AD5940_CsClr();
   26a4a:	f000 fd58 	bl	274fe <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_READFIFO);
   26a4e:	205f      	movs	r0, #95	; 0x5f
   26a50:	f7ff ffa4 	bl	2699c <AD5940_ReadWrite8B.isra.0>
   26a54:	2606      	movs	r6, #6
         AD5940_ReadWrite8B(0);
   26a56:	2000      	movs	r0, #0
   26a58:	f7ff ffa0 	bl	2699c <AD5940_ReadWrite8B.isra.0>
      for(i=0;i<6;i++)
   26a5c:	3e01      	subs	r6, #1
   26a5e:	d1fa      	bne.n	26a56 <AD5940_FIFORd+0x56>
      for(i=0;i<uiReadCount-2;i++)
   26a60:	3d02      	subs	r5, #2
         pBuffer[i] = AD5940_ReadWrite32B(0); /*Offset is 0, so we always read DATAFIFORD register */
   26a62:	2000      	movs	r0, #0
   26a64:	f7ff ff83 	bl	2696e <AD5940_ReadWrite32B>
   26a68:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      for(i=0;i<uiReadCount-2;i++)
   26a6c:	3601      	adds	r6, #1
   26a6e:	42b5      	cmp	r5, r6
   26a70:	d8f7      	bhi.n	26a62 <AD5940_FIFORd+0x62>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   26a72:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   26a76:	f7ff ff7a 	bl	2696e <AD5940_ReadWrite32B>
   26a7a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   26a7e:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   26a82:	f7ff ff74 	bl	2696e <AD5940_ReadWrite32B>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   26a86:	00ae      	lsls	r6, r5, #2
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   26a88:	3604      	adds	r6, #4
   26a8a:	51a0      	str	r0, [r4, r6]
}
   26a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      AD5940_CsSet();
   26a90:	f000 bd39 	b.w	27506 <AD5940_CsSet>

00026a94 <AD5940_AFECtrlS>:
{
   26a94:	b538      	push	{r3, r4, r5, lr}
   26a96:	4604      	mov	r4, r0
   26a98:	460d      	mov	r5, r1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   26a9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   26a9e:	f7eb f92d 	bl	11cfc <AD5940_ReadReg>
  if (State == bTRUE) {
   26aa2:	2d01      	cmp	r5, #1
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   26aa4:	f004 0320 	and.w	r3, r4, #32
  if (State == bTRUE) {
   26aa8:	d112      	bne.n	26ad0 <AD5940_AFECtrlS+0x3c>
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   26aaa:	b11b      	cbz	r3, 26ab4 <AD5940_AFECtrlS+0x20>
        tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   26aac:	f020 0020 	bic.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   26ab0:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   26ab4:	0322      	lsls	r2, r4, #12
      tempreg &= ~BITM_AFE_AFECON_ALDOILIMITEN;
   26ab6:	bf44      	itt	mi
   26ab8:	f420 2000 	bicmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   26abc:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg |= AfeCtrlSet;
   26ac0:	ea44 0100 	orr.w	r1, r4, r0
}
   26ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   26ac8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   26acc:	f7eb b8c6 	b.w	11c5c <AD5940_WriteReg>
    if(AfeCtrlSet & AFECTRL_HPREFPWR)
   26ad0:	b11b      	cbz	r3, 26ada <AD5940_AFECtrlS+0x46>
        tempreg |= BITM_AFE_AFECON_HPREFDIS;
   26ad2:	f040 0020 	orr.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   26ad6:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   26ada:	0323      	lsls	r3, r4, #12
      tempreg |= BITM_AFE_AFECON_ALDOILIMITEN;
   26adc:	bf44      	itt	mi
   26ade:	f440 2000 	orrmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   26ae2:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg &= ~AfeCtrlSet;
   26ae6:	ea20 0104 	bic.w	r1, r0, r4
   26aea:	e7eb      	b.n	26ac4 <AD5940_AFECtrlS+0x30>

00026aec <AD5940_AFEPwrBW>:
  AD5940_WriteReg(REG_AFE_PMBW, tempreg);
   26aec:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   26af0:	f242 20f0 	movw	r0, #8944	; 0x22f0
   26af4:	f7eb b8b2 	b.w	11c5c <AD5940_WriteReg>

00026af8 <AD5940_REFCfgS>:
{
   26af8:	b510      	push	{r4, lr}
   26afa:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   26afc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   26b00:	f7eb f8fc 	bl	11cfc <AD5940_ReadReg>
  if(pBufCfg->HpBandgapEn == bFALSE)
   26b04:	7823      	ldrb	r3, [r4, #0]
  tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   26b06:	f020 0120 	bic.w	r1, r0, #32
  if(pBufCfg->HpBandgapEn == bFALSE)
   26b0a:	b90b      	cbnz	r3, 26b10 <AD5940_REFCfgS+0x18>
    tempreg |= BITM_AFE_AFECON_HPREFDIS;
   26b0c:	f041 0120 	orr.w	r1, r1, #32
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   26b10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   26b14:	f7eb f8a2 	bl	11c5c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   26b18:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   26b1c:	f7eb f8ee 	bl	11cfc <AD5940_ReadReg>
  if(pBufCfg->Hp1V8BuffEn == bTRUE)
   26b20:	7863      	ldrb	r3, [r4, #1]
   26b22:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   26b24:	78a3      	ldrb	r3, [r4, #2]
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   26b26:	4601      	mov	r1, r0
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCEN;
   26b28:	bf08      	it	eq
   26b2a:	f040 0101 	orreq.w	r1, r0, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   26b2e:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   26b30:	78e3      	ldrb	r3, [r4, #3]
    tempreg |= BITM_AFE_BUFSENCON_V1P1HPADCEN;
   26b32:	bf08      	it	eq
   26b34:	f041 0110 	orreq.w	r1, r1, #16
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   26b38:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   26b3a:	7923      	ldrb	r3, [r4, #4]
    tempreg |= BITM_AFE_BUFSENCON_V1P8LPADCEN;
   26b3c:	bf08      	it	eq
   26b3e:	f041 0104 	orreq.w	r1, r1, #4
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   26b42:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   26b44:	7a63      	ldrb	r3, [r4, #9]
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCEN;
   26b46:	bf08      	it	eq
   26b48:	f041 0120 	orreq.w	r1, r1, #32
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   26b4c:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   26b4e:	7aa3      	ldrb	r3, [r4, #10]
    tempreg |= BITM_AFE_BUFSENCON_V1P8THERMSTEN;
   26b50:	bf08      	it	eq
   26b52:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   26b56:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V8Cap == bTRUE)
   26b58:	7ae3      	ldrb	r3, [r4, #11]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCILIMITEN;
   26b5a:	bf08      	it	eq
   26b5c:	f041 0102 	orreq.w	r1, r1, #2
  if(pBufCfg->Disc1V8Cap == bTRUE)
   26b60:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V1Cap == bTRUE)
   26b62:	7b23      	ldrb	r3, [r4, #12]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCCHGDIS;
   26b64:	bf08      	it	eq
   26b66:	f041 0108 	orreq.w	r1, r1, #8
  if(pBufCfg->Disc1V1Cap == bTRUE)
   26b6a:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCCHGDIS;
   26b6c:	bf08      	it	eq
   26b6e:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
  AD5940_WriteReg(REG_AFE_BUFSENCON, tempreg);
   26b72:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   26b76:	f7eb f871 	bl	11c5c <AD5940_WriteReg>
  if(pBufCfg->LpRefBufEn == bFALSE)
   26b7a:	79a3      	ldrb	r3, [r4, #6]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   26b7c:	2b00      	cmp	r3, #0
  if(pBufCfg->LpBandgapEn == bFALSE)
   26b7e:	7963      	ldrb	r3, [r4, #5]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   26b80:	bf14      	ite	ne
   26b82:	2100      	movne	r1, #0
   26b84:	2102      	moveq	r1, #2
  if(pBufCfg->LpBandgapEn == bFALSE)
   26b86:	b90b      	cbnz	r3, 26b8c <AD5940_REFCfgS+0x94>
    tempreg |= BITM_AFE_LPREFBUFCON_LPREFDIS;
   26b88:	f041 0101 	orr.w	r1, r1, #1
  if(pBufCfg->LpRefBoostEn == bTRUE)
   26b8c:	79e3      	ldrb	r3, [r4, #7]
   26b8e:	2b01      	cmp	r3, #1
}
   26b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_LPREFBUFCON_BOOSTCURRENT;
   26b94:	bf08      	it	eq
   26b96:	f041 0104 	orreq.w	r1, r1, #4
  AD5940_WriteReg(REG_AFE_LPREFBUFCON, tempreg);
   26b9a:	f242 0050 	movw	r0, #8272	; 0x2050
   26b9e:	f7eb b85d 	b.w	11c5c <AD5940_WriteReg>

00026ba2 <AD5940_SWMatrixCfgS>:
{
   26ba2:	b510      	push	{r4, lr}
   26ba4:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_DSWFULLCON, pSwMatrix->Dswitch);
   26ba6:	6801      	ldr	r1, [r0, #0]
   26ba8:	f242 1050 	movw	r0, #8528	; 0x2150
   26bac:	f7eb f856 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_PSWFULLCON, pSwMatrix->Pswitch);
   26bb0:	6861      	ldr	r1, [r4, #4]
   26bb2:	f242 1058 	movw	r0, #8536	; 0x2158
   26bb6:	f7eb f851 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_NSWFULLCON, pSwMatrix->Nswitch);
   26bba:	68a1      	ldr	r1, [r4, #8]
   26bbc:	f242 1054 	movw	r0, #8532	; 0x2154
   26bc0:	f7eb f84c 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_TSWFULLCON, pSwMatrix->Tswitch);
   26bc4:	68e1      	ldr	r1, [r4, #12]
   26bc6:	f242 105c 	movw	r0, #8540	; 0x215c
   26bca:	f7eb f847 	bl	11c5c <AD5940_WriteReg>
}
   26bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_SWCON, BITM_AFE_SWCON_SWSOURCESEL); /* Update switch configuration */
   26bd2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   26bd6:	f242 000c 	movw	r0, #8204	; 0x200c
   26bda:	f7eb b83f 	b.w	11c5c <AD5940_WriteReg>

00026bde <AD5940_LPDAC0WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT0, ((uint32_t)Data6Bit<<12)|Data12Bit);
   26bde:	f3c0 000b 	ubfx	r0, r0, #0, #12
   26be2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   26be6:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   26bea:	f242 1020 	movw	r0, #8480	; 0x2120
   26bee:	f7eb b835 	b.w	11c5c <AD5940_WriteReg>

00026bf2 <AD5940_LPDAC1WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT1, ((uint32_t)Data6Bit<<12)|Data12Bit);
   26bf2:	f3c0 000b 	ubfx	r0, r0, #0, #12
   26bf6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   26bfa:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   26bfe:	f242 102c 	movw	r0, #8492	; 0x212c
   26c02:	f7eb b82b 	b.w	11c5c <AD5940_WriteReg>

00026c06 <AD5940_LPDACCfgS>:
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   26c06:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
{
   26c0a:	b510      	push	{r4, lr}
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   26c0c:	0119      	lsls	r1, r3, #4
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   26c0e:	68c3      	ldr	r3, [r0, #12]
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   26c10:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   26c14:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
  tempreg |= (pLpDacCfg->LpDacRef)<<BITP_AFE_LPDACCON0_REFSEL;
   26c18:	6943      	ldr	r3, [r0, #20]
   26c1a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
  if(pLpDacCfg->DataRst == bFALSE)
   26c1e:	7e03      	ldrb	r3, [r0, #24]
{
   26c20:	4604      	mov	r4, r0
  if(pLpDacCfg->DataRst == bFALSE)
   26c22:	b90b      	cbnz	r3, 26c28 <AD5940_LPDACCfgS+0x22>
    tempreg |= BITM_AFE_LPDACCON0_RSTEN;
   26c24:	f041 0101 	orr.w	r1, r1, #1
  if(pLpDacCfg->PowerEn == bFALSE)
   26c28:	7e63      	ldrb	r3, [r4, #25]
   26c2a:	b90b      	cbnz	r3, 26c30 <AD5940_LPDACCfgS+0x2a>
    tempreg |= BITM_AFE_LPDACCON0_PWDEN;
   26c2c:	f041 0102 	orr.w	r1, r1, #2
  if(pLpDacCfg->LpdacSel == LPDAC0)
   26c30:	6823      	ldr	r3, [r4, #0]
   26c32:	b983      	cbnz	r3, 26c56 <AD5940_LPDACCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPDACCON0, tempreg);
   26c34:	f242 1028 	movw	r0, #8488	; 0x2128
   26c38:	f7eb f810 	bl	11c5c <AD5940_WriteReg>
    AD5940_LPDAC0WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   26c3c:	7f21      	ldrb	r1, [r4, #28]
   26c3e:	8b60      	ldrh	r0, [r4, #26]
   26c40:	f7ff ffcd 	bl	26bde <AD5940_LPDAC0WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW0, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   26c44:	6921      	ldr	r1, [r4, #16]
   26c46:	f242 1024 	movw	r0, #8484	; 0x2124
   26c4a:	f041 0120 	orr.w	r1, r1, #32
}
   26c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   26c52:	f7eb b803 	b.w	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPDACCON1, tempreg);
   26c56:	f242 1034 	movw	r0, #8500	; 0x2134
   26c5a:	f7ea ffff 	bl	11c5c <AD5940_WriteReg>
    AD5940_LPDAC1WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   26c5e:	7f21      	ldrb	r1, [r4, #28]
   26c60:	8b60      	ldrh	r0, [r4, #26]
   26c62:	f7ff ffc6 	bl	26bf2 <AD5940_LPDAC1WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   26c66:	6921      	ldr	r1, [r4, #16]
   26c68:	f242 1030 	movw	r0, #8496	; 0x2130
   26c6c:	f041 0120 	orr.w	r1, r1, #32
   26c70:	e7ed      	b.n	26c4e <AD5940_LPDACCfgS+0x48>

00026c72 <AD5940_LPAMPCfgS>:
{
   26c72:	b510      	push	{r4, lr}
  if(pLpAmpCfg->LpPaPwrEn == bFALSE)
   26c74:	7e03      	ldrb	r3, [r0, #24]
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   26c76:	2b00      	cmp	r3, #0
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   26c78:	7e43      	ldrb	r3, [r0, #25]
{
   26c7a:	4604      	mov	r4, r0
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   26c7c:	bf14      	ite	ne
   26c7e:	2100      	movne	r1, #0
   26c80:	2102      	moveq	r1, #2
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   26c82:	b90b      	cbnz	r3, 26c88 <AD5940_LPAMPCfgS+0x16>
    tempreg |= BITM_AFE_LPTIACON0_TIAPDEN;
   26c84:	f041 0101 	orr.w	r1, r1, #1
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   26c88:	6922      	ldr	r2, [r4, #16]
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   26c8a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   26c8e:	2a04      	cmp	r2, #4
    tempreg |= BITM_AFE_LPTIACON0_HALFPWR;
   26c90:	bf0c      	ite	eq
   26c92:	f041 0204 	orreq.w	r2, r1, #4
    tempreg |= pLpAmpCfg->LpAmpPwrMod<<BITP_AFE_LPTIACON0_IBOOST;
   26c96:	ea41 02c2 	orrne.w	r2, r1, r2, lsl #3
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   26c9a:	0299      	lsls	r1, r3, #10
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   26c9c:	6863      	ldr	r3, [r4, #4]
   26c9e:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
   26ca2:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   26ca6:	6823      	ldr	r3, [r4, #0]
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   26ca8:	4311      	orrs	r1, r2
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   26caa:	b953      	cbnz	r3, 26cc2 <AD5940_LPAMPCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPTIACON0, tempreg);
   26cac:	f242 00ec 	movw	r0, #8428	; 0x20ec
   26cb0:	f7ea ffd4 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW0, pLpAmpCfg->LpTiaSW);
   26cb4:	6961      	ldr	r1, [r4, #20]
   26cb6:	f242 00e4 	movw	r0, #8420	; 0x20e4
}
   26cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   26cbe:	f7ea bfcd 	b.w	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIACON1, tempreg);
   26cc2:	f242 00e8 	movw	r0, #8424	; 0x20e8
   26cc6:	f7ea ffc9 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   26cca:	6961      	ldr	r1, [r4, #20]
   26ccc:	f242 00e0 	movw	r0, #8416	; 0x20e0
   26cd0:	e7f3      	b.n	26cba <AD5940_LPAMPCfgS+0x48>

00026cd2 <AD5940_LPLoopCfgS>:
{
   26cd2:	b510      	push	{r4, lr}
   26cd4:	4604      	mov	r4, r0
  AD5940_LPDACCfgS(&pLpLoopCfg->LpDacCfg);
   26cd6:	f7ff ff96 	bl	26c06 <AD5940_LPDACCfgS>
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   26cda:	f104 0020 	add.w	r0, r4, #32
}
   26cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   26ce2:	f7ff bfc6 	b.w	26c72 <AD5940_LPAMPCfgS>

00026ce6 <AD5940_ADCBaseCfgS>:
  tempreg |= (uint32_t)(pADCInit->ADCMuxN)<<BITP_AFE_ADCCON_MUXSELN;
   26ce6:	e9d0 1200 	ldrd	r1, r2, [r0]
  tempreg |= (uint32_t)(pADCInit->ADCPga)<<BITP_AFE_ADCCON_GNPGA;
   26cea:	6883      	ldr	r3, [r0, #8]
   26cec:	041b      	lsls	r3, r3, #16
   26cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
   26cf2:	4319      	orrs	r1, r3
   26cf4:	f242 10a8 	movw	r0, #8616	; 0x21a8
   26cf8:	f7ea bfb0 	b.w	11c5c <AD5940_WriteReg>

00026cfc <AD5940_ADCFilterCfgS>:
{
   26cfc:	b510      	push	{r4, lr}
   26cfe:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   26d00:	f242 0044 	movw	r0, #8260	; 0x2044
   26d04:	f7ea fffa 	bl	11cfc <AD5940_ReadReg>
  if(pFiltCfg->BpNotch == bTRUE)
   26d08:	7c23      	ldrb	r3, [r4, #16]
  tempreg |= pFiltCfg->ADCRate;
   26d0a:	68e1      	ldr	r1, [r4, #12]
  if(pFiltCfg->BpNotch == bTRUE)
   26d0c:	2b01      	cmp	r3, #1
  tempreg &= BITM_AFE_ADCFILTERCON_AVRGEN; /* Keep this bit setting. */
   26d0e:	f000 0080 	and.w	r0, r0, #128	; 0x80
  if(pFiltCfg->BpSinc3 == bTRUE)
   26d12:	7c63      	ldrb	r3, [r4, #17]
  tempreg |= pFiltCfg->ADCRate;
   26d14:	ea40 0001 	orr.w	r0, r0, r1
    tempreg |= BITM_AFE_ADCFILTERCON_LPFBYPEN;
   26d18:	bf08      	it	eq
   26d1a:	f040 0010 	orreq.w	r0, r0, #16
  if(pFiltCfg->BpSinc3 == bTRUE)
   26d1e:	2b01      	cmp	r3, #1
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc3Osr)<<BITP_AFE_ADCFILTERCON_SINC3OSR;
   26d20:	e9d4 1300 	ldrd	r1, r3, [r4]
   26d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   26d28:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   26d2c:	68a3      	ldr	r3, [r4, #8]
    tempreg |= BITM_AFE_ADCFILTERCON_SINC3BYP;
   26d2e:	bf08      	it	eq
   26d30:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   26d34:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
  AD5940_WriteReg(REG_AFE_ADCFILTERCON, tempreg);
   26d38:	4301      	orrs	r1, r0
   26d3a:	f242 0044 	movw	r0, #8260	; 0x2044
   26d3e:	f7ea ff8d 	bl	11c5c <AD5940_WriteReg>
  if(pFiltCfg->Sinc2NotchEnable)
   26d42:	7ca3      	ldrb	r3, [r4, #18]
   26d44:	b133      	cbz	r3, 26d54 <AD5940_ADCFilterCfgS+0x58>
}
   26d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_AFECtrlS(AFECTRL_SINC2NOTCH,bTRUE);
   26d4a:	2101      	movs	r1, #1
   26d4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   26d50:	f7ff bea0 	b.w	26a94 <AD5940_AFECtrlS>
}
   26d54:	bd10      	pop	{r4, pc}

00026d56 <AD5940_ADCDigCompCfgS>:
{
   26d56:	b510      	push	{r4, lr}
   26d58:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_ADCMIN, pCompCfg->ADCMin);
   26d5a:	8801      	ldrh	r1, [r0, #0]
   26d5c:	f242 00a8 	movw	r0, #8360	; 0x20a8
   26d60:	f7ea ff7c 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMINSM, pCompCfg->ADCMinHys);
   26d64:	8861      	ldrh	r1, [r4, #2]
   26d66:	f242 00ac 	movw	r0, #8364	; 0x20ac
   26d6a:	f7ea ff77 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAX, pCompCfg->ADCMax);
   26d6e:	88a1      	ldrh	r1, [r4, #4]
   26d70:	f242 00b0 	movw	r0, #8368	; 0x20b0
   26d74:	f7ea ff72 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   26d78:	88e1      	ldrh	r1, [r4, #6]
   26d7a:	f242 00b4 	movw	r0, #8372	; 0x20b4
}
   26d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   26d82:	f7ea bf6b 	b.w	11c5c <AD5940_WriteReg>

00026d86 <AD5940_StatisticCfgS>:
  tempreg |= (pStatCfg->StatDev) << BITP_AFE_STATSCON_STDDEV;
   26d86:	e9d0 3100 	ldrd	r3, r1, [r0]
   26d8a:	01db      	lsls	r3, r3, #7
   26d8c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  if(pStatCfg->StatEnable == bTRUE)
   26d90:	7a03      	ldrb	r3, [r0, #8]
  AD5940_WriteReg(REG_AFE_STATSCON, tempreg);
   26d92:	f242 10c4 	movw	r0, #8644	; 0x21c4
   26d96:	2b01      	cmp	r3, #1
   26d98:	bf08      	it	eq
   26d9a:	f041 0101 	orreq.w	r1, r1, #1
   26d9e:	f7ea bf5d 	b.w	11c5c <AD5940_WriteReg>

00026da2 <AD5940_DFTCfgS>:
{
   26da2:	b510      	push	{r4, lr}
   26da4:	4604      	mov	r4, r0
  reg_adcfilter = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   26da6:	f242 0044 	movw	r0, #8260	; 0x2044
   26daa:	f7ea ffa7 	bl	11cfc <AD5940_ReadReg>
  if(pDftCfg->DftSrc == DFTSRC_AVG)
   26dae:	6863      	ldr	r3, [r4, #4]
   26db0:	2b03      	cmp	r3, #3
   26db2:	d114      	bne.n	26dde <AD5940_DFTCfgS+0x3c>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   26db4:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   26db8:	f242 0044 	movw	r0, #8260	; 0x2044
   26dbc:	f7ea ff4e 	bl	11c5c <AD5940_WriteReg>
  reg_dftcon = 0;
   26dc0:	2100      	movs	r1, #0
  reg_dftcon |= (pDftCfg->DftNum) << BITP_AFE_DFTCON_DFTNUM;
   26dc2:	6823      	ldr	r3, [r4, #0]
   26dc4:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
  if(pDftCfg->HanWinEn == bTRUE)
   26dc8:	7a23      	ldrb	r3, [r4, #8]
   26dca:	2b01      	cmp	r3, #1
}
   26dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reg_dftcon |= BITM_AFE_DFTCON_HANNINGEN;
   26dd0:	bf08      	it	eq
   26dd2:	f041 0101 	orreq.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_DFTCON, reg_dftcon);
   26dd6:	f242 00d0 	movw	r0, #8400	; 0x20d0
   26dda:	f7ea bf3f 	b.w	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   26dde:	f020 0180 	bic.w	r1, r0, #128	; 0x80
   26de2:	f242 0044 	movw	r0, #8260	; 0x2044
   26de6:	f7ea ff39 	bl	11c5c <AD5940_WriteReg>
    reg_dftcon |= (pDftCfg->DftSrc) << BITP_AFE_DFTCON_DFTINSEL;
   26dea:	6861      	ldr	r1, [r4, #4]
   26dec:	0509      	lsls	r1, r1, #20
   26dee:	e7e8      	b.n	26dc2 <AD5940_DFTCfgS+0x20>

00026df0 <AD5940_DSPCfgS>:
{
   26df0:	b510      	push	{r4, lr}
   26df2:	4604      	mov	r4, r0
  AD5940_ADCBaseCfgS(&pDSPCfg->ADCBaseCfg);
   26df4:	f7ff ff77 	bl	26ce6 <AD5940_ADCBaseCfgS>
  AD5940_ADCFilterCfgS(&pDSPCfg->ADCFilterCfg);
   26df8:	f104 000c 	add.w	r0, r4, #12
   26dfc:	f7ff ff7e 	bl	26cfc <AD5940_ADCFilterCfgS>
  AD5940_ADCDigCompCfgS(&pDSPCfg->ADCDigCompCfg);
   26e00:	f104 0020 	add.w	r0, r4, #32
   26e04:	f7ff ffa7 	bl	26d56 <AD5940_ADCDigCompCfgS>
  AD5940_DFTCfgS(&pDSPCfg->DftCfg);
   26e08:	f104 0028 	add.w	r0, r4, #40	; 0x28
   26e0c:	f7ff ffc9 	bl	26da2 <AD5940_DFTCfgS>
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   26e10:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
   26e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   26e18:	f7ff bfb5 	b.w	26d86 <AD5940_StatisticCfgS>

00026e1c <AD5940_FIFOCfg>:
{
   26e1c:	b510      	push	{r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   26e1e:	2100      	movs	r1, #0
{
   26e20:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   26e22:	f242 0008 	movw	r0, #8200	; 0x2008
   26e26:	f7ea ff19 	bl	11c5c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   26e2a:	f242 10d8 	movw	r0, #8664	; 0x21d8
   26e2e:	f7ea ff65 	bl	11cfc <AD5940_ReadReg>
  tempreg |= pFifoCfg->FIFOSize << BITP_AFE_CMDDATACON_DATA_MEM_SEL;  		  /* Data FIFO memory size */
   26e32:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   26e36:	019b      	lsls	r3, r3, #6
   26e38:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
  tempreg &= BITM_AFE_CMDDATACON_CMD_MEM_SEL|BITM_AFE_CMDDATACON_CMDMEMMDE; /* Keep sequencer memory settings */
   26e3c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   26e40:	4319      	orrs	r1, r3
   26e42:	f242 10d8 	movw	r0, #8664	; 0x21d8
   26e46:	f7ea ff09 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_DATAFIFOTHRES, pFifoCfg->FIFOThresh << BITP_AFE_DATAFIFOTHRES_HIGHTHRES);
   26e4a:	6921      	ldr	r1, [r4, #16]
   26e4c:	f242 10e0 	movw	r0, #8672	; 0x21e0
   26e50:	0409      	lsls	r1, r1, #16
   26e52:	f7ea ff03 	bl	11c5c <AD5940_WriteReg>
  if(pFifoCfg->FIFOEn == bTRUE)
   26e56:	7823      	ldrb	r3, [r4, #0]
  tempreg |= pFifoCfg->FIFOSrc << BITP_AFE_FIFOCON_DATAFIFOSRCSEL;
   26e58:	68e1      	ldr	r1, [r4, #12]
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;																/* Enable FIFO after everything set. */
   26e5a:	2b01      	cmp	r3, #1
   26e5c:	bf14      	ite	ne
   26e5e:	2300      	movne	r3, #0
   26e60:	f44f 6300 	moveq.w	r3, #2048	; 0x800
}
   26e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   26e68:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
   26e6c:	f242 0008 	movw	r0, #8200	; 0x2008
   26e70:	f7ea bef4 	b.w	11c5c <AD5940_WriteReg>

00026e74 <AD5940_FIFOCtrlS>:
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;
   26e74:	2901      	cmp	r1, #1
   26e76:	bf14      	ite	ne
   26e78:	2100      	movne	r1, #0
   26e7a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   26e7e:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
   26e82:	f242 0008 	movw	r0, #8200	; 0x2008
   26e86:	f7ea bee9 	b.w	11c5c <AD5940_WriteReg>

00026e8a <AD5940_FIFOGetCnt>:
{
   26e8a:	b508      	push	{r3, lr}
  return AD5940_ReadReg(REG_AFE_FIFOCNTSTA) >> BITP_AFE_FIFOCNTSTA_DATAFIFOCNTSTA;
   26e8c:	f44f 5008 	mov.w	r0, #8704	; 0x2200
   26e90:	f7ea ff34 	bl	11cfc <AD5940_ReadReg>
}
   26e94:	0c00      	lsrs	r0, r0, #16
   26e96:	bd08      	pop	{r3, pc}

00026e98 <AD5940_SEQCfg>:
{
   26e98:	b538      	push	{r3, r4, r5, lr}
   26e9a:	4604      	mov	r4, r0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   26e9c:	f242 0008 	movw	r0, #8200	; 0x2008
   26ea0:	f7ea ff2c 	bl	11cfc <AD5940_ReadReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   26ea4:	2100      	movs	r1, #0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   26ea6:	4605      	mov	r5, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   26ea8:	f242 0008 	movw	r0, #8200	; 0x2008
   26eac:	f7ea fed6 	bl	11c5c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   26eb0:	f242 10d8 	movw	r0, #8664	; 0x21d8
   26eb4:	f7ea ff22 	bl	11cfc <AD5940_ReadReg>
  tempreg &= ~(BITM_AFE_CMDDATACON_CMDMEMMDE|BITM_AFE_CMDDATACON_CMD_MEM_SEL);  /* Clear settings for sequencer memory */
   26eb8:	f020 013f 	bic.w	r1, r0, #63	; 0x3f
   26ebc:	6820      	ldr	r0, [r4, #0]
   26ebe:	4301      	orrs	r1, r0
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   26ec0:	f041 0108 	orr.w	r1, r1, #8
   26ec4:	f242 10d8 	movw	r0, #8664	; 0x21d8
   26ec8:	f7ea fec8 	bl	11c5c <AD5940_WriteReg>
  if(pSeqCfg->SeqCntCRCClr)
   26ecc:	79e3      	ldrb	r3, [r4, #7]
   26ece:	b14b      	cbz	r3, 26ee4 <AD5940_SEQCfg+0x4c>
    AD5940_WriteReg(REG_AFE_SEQCON, 0);  /* Disable sequencer firstly */
   26ed0:	2100      	movs	r1, #0
   26ed2:	f242 0004 	movw	r0, #8196	; 0x2004
   26ed6:	f7ea fec1 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_SEQCNT, 0);  /* When sequencer is disabled, any write to SEQCNT will clear CNT and CRC register */  
   26eda:	2100      	movs	r1, #0
   26edc:	f242 0064 	movw	r0, #8292	; 0x2064
   26ee0:	f7ea febc 	bl	11c5c <AD5940_WriteReg>
  if(pSeqCfg->SeqEnable == bTRUE)
   26ee4:	7923      	ldrb	r3, [r4, #4]
  tempreg |= (pSeqCfg->SeqWrTimer) << BITP_AFE_SEQCON_SEQWRTMR;
   26ee6:	68a1      	ldr	r1, [r4, #8]
  if(pSeqCfg->SeqEnable == bTRUE)
   26ee8:	1e5a      	subs	r2, r3, #1
   26eea:	4253      	negs	r3, r2
   26eec:	4153      	adcs	r3, r2
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   26eee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   26ef2:	f242 0004 	movw	r0, #8196	; 0x2004
   26ef6:	f7ea feb1 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   26efa:	4629      	mov	r1, r5
   26efc:	f242 0008 	movw	r0, #8200	; 0x2008
}
   26f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   26f04:	f7ea beaa 	b.w	11c5c <AD5940_WriteReg>

00026f08 <AD5940_SEQGetCfg>:
{
   26f08:	b538      	push	{r3, r4, r5, lr}
  if(pSeqCfg == NULL)
   26f0a:	4604      	mov	r4, r0
   26f0c:	b1a0      	cbz	r0, 26f38 <AD5940_SEQGetCfg+0x30>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   26f0e:	f242 10d8 	movw	r0, #8664	; 0x21d8
   26f12:	f7ea fef3 	bl	11cfc <AD5940_ReadReg>
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   26f16:	2500      	movs	r5, #0
  pSeqCfg->SeqMemSize = (tempreg&BITM_AFE_CMDDATACON_CMD_MEM_SEL) >> BITP_AFE_CMDDATACON_CMD_MEM_SEL;
   26f18:	f000 0007 	and.w	r0, r0, #7
   26f1c:	6020      	str	r0, [r4, #0]
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   26f1e:	71e5      	strb	r5, [r4, #7]
  tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   26f20:	f242 0004 	movw	r0, #8196	; 0x2004
   26f24:	f7ea feea 	bl	11cfc <AD5940_ReadReg>
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   26f28:	f000 0301 	and.w	r3, r0, #1
  pSeqCfg->SeqWrTimer = (tempreg&BITM_AFE_SEQCON_SEQWRTMR) >> BITP_AFE_SEQCON_SEQWRTMR;
   26f2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   26f30:	60a0      	str	r0, [r4, #8]
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   26f32:	7123      	strb	r3, [r4, #4]
  return AD5940ERR_OK;
   26f34:	4628      	mov	r0, r5
}
   26f36:	bd38      	pop	{r3, r4, r5, pc}
    return AD5940ERR_NULLP;
   26f38:	f06f 0002 	mvn.w	r0, #2
   26f3c:	e7fb      	b.n	26f36 <AD5940_SEQGetCfg+0x2e>

00026f3e <AD5940_SEQCtrlS>:
{
   26f3e:	b510      	push	{r4, lr}
   26f40:	4604      	mov	r4, r0
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   26f42:	f242 0004 	movw	r0, #8196	; 0x2004
   26f46:	f7ea fed9 	bl	11cfc <AD5940_ReadReg>
  if(SeqEn == bTRUE)
   26f4a:	2c01      	cmp	r4, #1
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   26f4c:	4601      	mov	r1, r0
}
   26f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_SEQCON_SEQEN;
   26f52:	bf0c      	ite	eq
   26f54:	f040 0101 	orreq.w	r1, r0, #1
    tempreg &= ~BITM_AFE_SEQCON_SEQEN;
   26f58:	f021 0101 	bicne.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   26f5c:	f242 0004 	movw	r0, #8196	; 0x2004
   26f60:	f7ea be7c 	b.w	11c5c <AD5940_WriteReg>

00026f64 <AD5940_SEQMmrTrig>:
  if(SeqId > SEQID_3)
   26f64:	2803      	cmp	r0, #3
   26f66:	d805      	bhi.n	26f74 <AD5940_SEQMmrTrig+0x10>
  AD5940_WriteReg(REG_AFECON_TRIGSEQ, 1L<<SeqId);
   26f68:	2101      	movs	r1, #1
   26f6a:	4081      	lsls	r1, r0
   26f6c:	f44f 6086 	mov.w	r0, #1072	; 0x430
   26f70:	f7ea be74 	b.w	11c5c <AD5940_WriteReg>
}
   26f74:	4770      	bx	lr

00026f76 <AD5940_SEQCmdWrite>:
{
   26f76:	b570      	push	{r4, r5, r6, lr}
   26f78:	460c      	mov	r4, r1
  while(CmdCnt--)
   26f7a:	1885      	adds	r5, r0, r2
   26f7c:	42a8      	cmp	r0, r5
   26f7e:	d100      	bne.n	26f82 <AD5940_SEQCmdWrite+0xc>
}
   26f80:	bd70      	pop	{r4, r5, r6, pc}
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   26f82:	4601      	mov	r1, r0
   26f84:	1c46      	adds	r6, r0, #1
   26f86:	f242 10d4 	movw	r0, #8660	; 0x21d4
   26f8a:	f7ea fe67 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWRITE, *pCommand++);
   26f8e:	f242 0070 	movw	r0, #8304	; 0x2070
   26f92:	f854 1b04 	ldr.w	r1, [r4], #4
   26f96:	f7ea fe61 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   26f9a:	4630      	mov	r0, r6
   26f9c:	e7ee      	b.n	26f7c <AD5940_SEQCmdWrite+0x6>

00026f9e <AD5940_SEQInfoCfg>:
  switch(pSeq->SeqId)
   26f9e:	6803      	ldr	r3, [r0, #0]
{
   26fa0:	b510      	push	{r4, lr}
   26fa2:	4604      	mov	r4, r0
  switch(pSeq->SeqId)
   26fa4:	2b03      	cmp	r3, #3
   26fa6:	d80b      	bhi.n	26fc0 <AD5940_SEQInfoCfg+0x22>
   26fa8:	e8df f003 	tbb	[pc, r3]
   26fac:	221b1402 	.word	0x221b1402
    AD5940_WriteReg(REG_AFE_SEQ0INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   26fb0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   26fb4:	f242 10cc 	movw	r0, #8652	; 0x21cc
   26fb8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   26fbc:	f7ea fe4e 	bl	11c5c <AD5940_WriteReg>
  if(pSeq->WriteSRAM == bTRUE)
   26fc0:	7b23      	ldrb	r3, [r4, #12]
   26fc2:	2b01      	cmp	r3, #1
   26fc4:	d11b      	bne.n	26ffe <AD5940_SEQInfoCfg+0x60>
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   26fc6:	68a2      	ldr	r2, [r4, #8]
   26fc8:	6921      	ldr	r1, [r4, #16]
   26fca:	6860      	ldr	r0, [r4, #4]
}
   26fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   26fd0:	f7ff bfd1 	b.w	26f76 <AD5940_SEQCmdWrite>
    AD5940_WriteReg(REG_AFE_SEQ1INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   26fd4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   26fd8:	f242 10e8 	movw	r0, #8680	; 0x21e8
   26fdc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   26fe0:	e7ec      	b.n	26fbc <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ2INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   26fe2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   26fe6:	f242 10d0 	movw	r0, #8656	; 0x21d0
   26fea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   26fee:	e7e5      	b.n	26fbc <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   26ff0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   26ff4:	f242 10e4 	movw	r0, #8676	; 0x21e4
   26ff8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   26ffc:	e7de      	b.n	26fbc <AD5940_SEQInfoCfg+0x1e>
}
   26ffe:	bd10      	pop	{r4, pc}

00027000 <AD5940_SEQGpioCtrlS>:
{
   27000:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SYNCEXTDEVICE, Gpio);
   27002:	f242 0054 	movw	r0, #8276	; 0x2054
   27006:	f7ea be29 	b.w	11c5c <AD5940_WriteReg>

0002700a <AD5940_SEQTimeOutRd>:
  return AD5940_ReadReg(REG_AFE_SEQTIMEOUT);
   2700a:	f242 0068 	movw	r0, #8296	; 0x2068
   2700e:	f7ea be75 	b.w	11cfc <AD5940_ReadReg>

00027012 <AD5940_WUPTCfg>:
{
   27012:	b510      	push	{r4, lr}
   27014:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (pWuptCfg->SeqxWakeupTime[0] & 0xFFFF));    
   27016:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   27018:	f640 0008 	movw	r0, #2056	; 0x808
   2701c:	f7ea fe1e 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (pWuptCfg->SeqxWakeupTime[0] & 0xF0000)>>16);
   27020:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   27022:	f640 000c 	movw	r0, #2060	; 0x80c
   27026:	f001 010f 	and.w	r1, r1, #15
   2702a:	f7ea fe17 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (pWuptCfg->SeqxSleepTime[0] & 0xFFFF));    
   2702e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   27030:	f44f 6001 	mov.w	r0, #2064	; 0x810
   27034:	f7ea fe12 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (pWuptCfg->SeqxSleepTime[0] & 0xF0000)>>16);
   27038:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   2703a:	f640 0014 	movw	r0, #2068	; 0x814
   2703e:	f001 010f 	and.w	r1, r1, #15
   27042:	f7ea fe0b 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (pWuptCfg->SeqxWakeupTime[1] & 0xFFFF));    
   27046:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   27048:	f640 0018 	movw	r0, #2072	; 0x818
   2704c:	f7ea fe06 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (pWuptCfg->SeqxWakeupTime[1] & 0xF0000)>>16);
   27050:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   27052:	f640 001c 	movw	r0, #2076	; 0x81c
   27056:	f001 010f 	and.w	r1, r1, #15
   2705a:	f7ea fdff 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (pWuptCfg->SeqxSleepTime[1] & 0xFFFF));    
   2705e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   27060:	f44f 6002 	mov.w	r0, #2080	; 0x820
   27064:	f7ea fdfa 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (pWuptCfg->SeqxSleepTime[1] & 0xF0000)>>16);
   27068:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   2706a:	f640 0024 	movw	r0, #2084	; 0x824
   2706e:	f001 010f 	and.w	r1, r1, #15
   27072:	f7ea fdf3 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (pWuptCfg->SeqxWakeupTime[2] & 0xFFFF));    
   27076:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
   27078:	f640 0028 	movw	r0, #2088	; 0x828
   2707c:	f7ea fdee 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (pWuptCfg->SeqxWakeupTime[2] & 0xF0000)>>16);
   27080:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   27082:	f640 002c 	movw	r0, #2092	; 0x82c
   27086:	f001 010f 	and.w	r1, r1, #15
   2708a:	f7ea fde7 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (pWuptCfg->SeqxSleepTime[2] & 0xFFFF));    
   2708e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   27090:	f44f 6003 	mov.w	r0, #2096	; 0x830
   27094:	f7ea fde2 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (pWuptCfg->SeqxSleepTime[2] & 0xF0000)>>16);
   27098:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   2709a:	f640 0034 	movw	r0, #2100	; 0x834
   2709e:	f001 010f 	and.w	r1, r1, #15
   270a2:	f7ea fddb 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (pWuptCfg->SeqxWakeupTime[3] & 0xFFFF));    
   270a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   270aa:	f640 0038 	movw	r0, #2104	; 0x838
   270ae:	f7ea fdd5 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (pWuptCfg->SeqxWakeupTime[3] & 0xF0000)>>16);
   270b2:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   270b6:	f640 003c 	movw	r0, #2108	; 0x83c
   270ba:	f001 010f 	and.w	r1, r1, #15
   270be:	f7ea fdcd 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (pWuptCfg->SeqxSleepTime[3] & 0xFFFF));    
   270c2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   270c4:	f44f 6004 	mov.w	r0, #2112	; 0x840
   270c8:	f7ea fdc8 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (pWuptCfg->SeqxSleepTime[3] & 0xF0000)>>16);
   270cc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   270ce:	f640 0044 	movw	r0, #2116	; 0x844
   270d2:	f001 010f 	and.w	r1, r1, #15
   270d6:	f7ea fdc1 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_TMRCON, BITM_ALLON_TMRCON_TMRINTEN);
   270da:	2101      	movs	r1, #1
   270dc:	f640 201c 	movw	r0, #2588	; 0xa1c
   270e0:	f7ea fdbc 	bl	11c5c <AD5940_WriteReg>
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   270e4:	68a3      	ldr	r3, [r4, #8]
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   270e6:	68e2      	ldr	r2, [r4, #12]
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   270e8:	6960      	ldr	r0, [r4, #20]
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   270ea:	009b      	lsls	r3, r3, #2
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   270ec:	0112      	lsls	r2, r2, #4
   270ee:	f002 0230 	and.w	r2, r2, #48	; 0x30
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   270f2:	f003 030c 	and.w	r3, r3, #12
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   270f6:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[0]&0x03) << BITP_WUPTMR_SEQORDER_SEQA; /* position A */
   270f8:	6862      	ldr	r2, [r4, #4]
   270fa:	f002 0203 	and.w	r2, r2, #3
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   270fe:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   27100:	6922      	ldr	r2, [r4, #16]
   27102:	0192      	lsls	r2, r2, #6
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   27104:	0200      	lsls	r0, r0, #8
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   27106:	b2d2      	uxtb	r2, r2
   27108:	431a      	orrs	r2, r3
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   2710a:	f400 7140 	and.w	r1, r0, #768	; 0x300
   2710e:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[5]&0x03) << BITP_WUPTMR_SEQORDER_SEQF; /* position F */
   27110:	69a1      	ldr	r1, [r4, #24]
   27112:	0289      	lsls	r1, r1, #10
   27114:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
   27118:	4311      	orrs	r1, r2
  tempreg |= (pWuptCfg->WuptOrder[6]&0x03) << BITP_WUPTMR_SEQORDER_SEQG; /* position G */
   2711a:	69e2      	ldr	r2, [r4, #28]
   2711c:	0312      	lsls	r2, r2, #12
   2711e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
   27122:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[7]&0x03) << BITP_WUPTMR_SEQORDER_SEQH; /* position H */
   27124:	6a21      	ldr	r1, [r4, #32]
   27126:	0389      	lsls	r1, r1, #14
   27128:	b289      	uxth	r1, r1
  AD5940_WriteReg(REG_WUPTMR_SEQORDER, tempreg);
   2712a:	4311      	orrs	r1, r2
   2712c:	f640 0004 	movw	r0, #2052	; 0x804
   27130:	f7ea fd94 	bl	11c5c <AD5940_WriteReg>
  if(pWuptCfg->WuptEn == bTRUE)
   27134:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  tempreg |= pWuptCfg->WuptEndSeq << BITP_WUPTMR_CON_ENDSEQ;
   27138:	6821      	ldr	r1, [r4, #0]
  if(pWuptCfg->WuptEn == bTRUE)
   2713a:	1e5a      	subs	r2, r3, #1
   2713c:	4253      	negs	r3, r2
   2713e:	4153      	adcs	r3, r2
}
   27140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   27144:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
   27148:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2714c:	f7ea bd86 	b.w	11c5c <AD5940_WriteReg>

00027150 <AD5940_WUPTCtrl>:
{
   27150:	b510      	push	{r4, lr}
   27152:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_WUPTMR_CON);
   27154:	f44f 6000 	mov.w	r0, #2048	; 0x800
   27158:	f7ea fdd0 	bl	11cfc <AD5940_ReadReg>
  tempreg &= ~BITM_WUPTMR_CON_EN;
   2715c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   27160:	4001      	ands	r1, r0
  if(Enable == bTRUE)
   27162:	2c01      	cmp	r4, #1
    tempreg |= BITM_WUPTMR_CON_EN;
   27164:	bf08      	it	eq
   27166:	f041 0101 	orreq.w	r1, r1, #1
}
   2716a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   2716e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   27172:	f7ea bd73 	b.w	11c5c <AD5940_WriteReg>

00027176 <AD5940_WUPTTime>:
{
   27176:	b538      	push	{r3, r4, r5, lr}
   27178:	460c      	mov	r4, r1
   2717a:	4615      	mov	r5, r2
  switch (SeqId)
   2717c:	2803      	cmp	r0, #3
   2717e:	d85a      	bhi.n	27236 <AD5940_WUPTTime+0xc0>
   27180:	e8df f000 	tbb	[pc, r0]
   27184:	442f1a02 	.word	0x442f1a02
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (WakeupTime & 0xFFFF));    
   27188:	b291      	uxth	r1, r2
   2718a:	f640 0008 	movw	r0, #2056	; 0x808
   2718e:	f7ea fd65 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (WakeupTime & 0xF0000)>>16);
   27192:	f3c5 4103 	ubfx	r1, r5, #16, #4
   27196:	f640 000c 	movw	r0, #2060	; 0x80c
   2719a:	f7ea fd5f 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (SleepTime & 0xFFFF));    
   2719e:	b2a1      	uxth	r1, r4
   271a0:	f44f 6001 	mov.w	r0, #2064	; 0x810
   271a4:	f7ea fd5a 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (SleepTime & 0xF0000)>>16);
   271a8:	f3c4 4103 	ubfx	r1, r4, #16, #4
   271ac:	f640 0014 	movw	r0, #2068	; 0x814
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   271b0:	f7ea fd54 	bl	11c5c <AD5940_WriteReg>
  return AD5940ERR_OK;
   271b4:	2000      	movs	r0, #0
}
   271b6:	bd38      	pop	{r3, r4, r5, pc}
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (WakeupTime & 0xFFFF));    
   271b8:	b291      	uxth	r1, r2
   271ba:	f640 0018 	movw	r0, #2072	; 0x818
   271be:	f7ea fd4d 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (WakeupTime & 0xF0000)>>16);
   271c2:	f3c5 4103 	ubfx	r1, r5, #16, #4
   271c6:	f640 001c 	movw	r0, #2076	; 0x81c
   271ca:	f7ea fd47 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (SleepTime & 0xFFFF));    
   271ce:	b2a1      	uxth	r1, r4
   271d0:	f44f 6002 	mov.w	r0, #2080	; 0x820
   271d4:	f7ea fd42 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (SleepTime & 0xF0000)>>16);
   271d8:	f3c4 4103 	ubfx	r1, r4, #16, #4
   271dc:	f640 0024 	movw	r0, #2084	; 0x824
   271e0:	e7e6      	b.n	271b0 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (WakeupTime & 0xFFFF));    
   271e2:	b291      	uxth	r1, r2
   271e4:	f640 0028 	movw	r0, #2088	; 0x828
   271e8:	f7ea fd38 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (WakeupTime & 0xF0000)>>16);
   271ec:	f3c5 4103 	ubfx	r1, r5, #16, #4
   271f0:	f640 002c 	movw	r0, #2092	; 0x82c
   271f4:	f7ea fd32 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (SleepTime & 0xFFFF));    
   271f8:	b2a1      	uxth	r1, r4
   271fa:	f44f 6003 	mov.w	r0, #2096	; 0x830
   271fe:	f7ea fd2d 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (SleepTime & 0xF0000)>>16);
   27202:	f3c4 4103 	ubfx	r1, r4, #16, #4
   27206:	f640 0034 	movw	r0, #2100	; 0x834
   2720a:	e7d1      	b.n	271b0 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (WakeupTime & 0xFFFF));    
   2720c:	b291      	uxth	r1, r2
   2720e:	f640 0038 	movw	r0, #2104	; 0x838
   27212:	f7ea fd23 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (WakeupTime & 0xF0000)>>16);
   27216:	f3c5 4103 	ubfx	r1, r5, #16, #4
   2721a:	f640 003c 	movw	r0, #2108	; 0x83c
   2721e:	f7ea fd1d 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (SleepTime & 0xFFFF));    
   27222:	b2a1      	uxth	r1, r4
   27224:	f44f 6004 	mov.w	r0, #2112	; 0x840
   27228:	f7ea fd18 	bl	11c5c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   2722c:	f3c4 4103 	ubfx	r1, r4, #16, #4
   27230:	f640 0044 	movw	r0, #2116	; 0x844
   27234:	e7bc      	b.n	271b0 <AD5940_WUPTTime+0x3a>
  switch (SeqId)
   27236:	f06f 0001 	mvn.w	r0, #1
   2723a:	e7bc      	b.n	271b6 <AD5940_WUPTTime+0x40>

0002723c <AD5940_HFOSC32MHzCtrl>:
{
   2723c:	b538      	push	{r3, r4, r5, lr}
   2723e:	4605      	mov	r5, r0
  RdCLKEN1 = AD5940_ReadReg(REG_AFECON_CLKEN1);
   27240:	f44f 6082 	mov.w	r0, #1040	; 0x410
   27244:	f7ea fd5a 	bl	11cfc <AD5940_ReadReg>
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   27248:	0844      	lsrs	r4, r0, #1
   2724a:	0041      	lsls	r1, r0, #1
   2724c:	f401 7100 	and.w	r1, r1, #512	; 0x200
   27250:	f404 7480 	and.w	r4, r4, #256	; 0x100
  RdCLKEN1 = RdCLKEN1&0xff;
   27254:	b2c3      	uxtb	r3, r0
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   27256:	430c      	orrs	r4, r1
   27258:	431c      	orrs	r4, r3
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1|BITM_AFECON_CLKEN1_ACLKDIS); /* Disable ACLK during clock changing */
   2725a:	f044 0120 	orr.w	r1, r4, #32
   2725e:	f44f 6082 	mov.w	r0, #1040	; 0x410
   27262:	f7ea fcfb 	bl	11c5c <AD5940_WriteReg>
  RdHPOSCCON = AD5940_ReadReg(REG_AFE_HPOSCCON); 
   27266:	f242 00bc 	movw	r0, #8380	; 0x20bc
   2726a:	f7ea fd47 	bl	11cfc <AD5940_ReadReg>
  if(Mode32MHz == bTRUE)
   2726e:	2d01      	cmp	r5, #1
   27270:	d113      	bne.n	2729a <AD5940_HFOSC32MHzCtrl+0x5e>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON&(~BITM_AFE_HPOSCCON_CLK32MHZEN)); /* Enable 32MHz output(bit definition-0: 32MHz, 1: 16MHz) */  
   27272:	f020 0104 	bic.w	r1, r0, #4
   27276:	f242 00bc 	movw	r0, #8380	; 0x20bc
   2727a:	f7ea fcef 	bl	11c5c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   2727e:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   27282:	f7ea fd3b 	bl	11cfc <AD5940_ReadReg>
   27286:	0582      	lsls	r2, r0, #22
   27288:	d5f9      	bpl.n	2727e <AD5940_HFOSC32MHzCtrl+0x42>
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   2728a:	f024 0120 	bic.w	r1, r4, #32
   2728e:	f44f 6082 	mov.w	r0, #1040	; 0x410
}
   27292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   27296:	f7ea bce1 	b.w	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON|BITM_AFE_HPOSCCON_CLK32MHZEN); /* Enable 16MHz output(bit definition-0: 32MHz, 1: 16MHz) */       
   2729a:	f040 0104 	orr.w	r1, r0, #4
   2729e:	f242 00bc 	movw	r0, #8380	; 0x20bc
   272a2:	f7ea fcdb 	bl	11c5c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   272a6:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   272aa:	f7ea fd27 	bl	11cfc <AD5940_ReadReg>
   272ae:	0583      	lsls	r3, r0, #22
   272b0:	d5f9      	bpl.n	272a6 <AD5940_HFOSC32MHzCtrl+0x6a>
   272b2:	e7ea      	b.n	2728a <AD5940_HFOSC32MHzCtrl+0x4e>

000272b4 <AD5940_CLKCfg>:
{
   272b4:	b538      	push	{r3, r4, r5, lr}
   272b6:	4605      	mov	r5, r0
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   272b8:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   272bc:	f7ea fd1e 	bl	11cfc <AD5940_ReadReg>
  if(pClkCfg->HFXTALEn == bTRUE)
   272c0:	7ceb      	ldrb	r3, [r5, #19]
   272c2:	2b01      	cmp	r3, #1
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   272c4:	4604      	mov	r4, r0
  if(pClkCfg->HFXTALEn == bTRUE)
   272c6:	d112      	bne.n	272ee <AD5940_CLKCfg+0x3a>
    reg_osccon |= BITM_ALLON_OSCCON_HFXTALEN;
   272c8:	f040 0404 	orr.w	r4, r0, #4
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   272cc:	f64c 3114 	movw	r1, #51988	; 0xcb14
   272d0:	f640 200c 	movw	r0, #2572	; 0xa0c
   272d4:	f7ea fcc2 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFXTAL */
   272d8:	4621      	mov	r1, r4
   272da:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   272de:	f7ea fcbd 	bl	11c5c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFXTALOK) == 0); /* Wait for clock ready */
   272e2:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   272e6:	f7ea fd09 	bl	11cfc <AD5940_ReadReg>
   272ea:	0541      	lsls	r1, r0, #21
   272ec:	d5f9      	bpl.n	272e2 <AD5940_CLKCfg+0x2e>
  if(pClkCfg->HFOSCEn == bTRUE)
   272ee:	7c2b      	ldrb	r3, [r5, #16]
   272f0:	2b01      	cmp	r3, #1
   272f2:	d118      	bne.n	27326 <AD5940_CLKCfg+0x72>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   272f4:	f64c 3114 	movw	r1, #51988	; 0xcb14
   272f8:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_HFOSCEN;
   272fc:	f044 0402 	orr.w	r4, r4, #2
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   27300:	f7ea fcac 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFOSC */
   27304:	4621      	mov	r1, r4
   27306:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2730a:	f7ea fca7 	bl	11c5c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   2730e:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   27312:	f7ea fcf3 	bl	11cfc <AD5940_ReadReg>
   27316:	0582      	lsls	r2, r0, #22
   27318:	d5f9      	bpl.n	2730e <AD5940_CLKCfg+0x5a>
    if(pClkCfg->HfOSC32MHzMode  == bTRUE)
   2731a:	7c68      	ldrb	r0, [r5, #17]
   2731c:	2801      	cmp	r0, #1
      AD5940_HFOSC32MHzCtrl(bFALSE);
   2731e:	bf18      	it	ne
   27320:	2000      	movne	r0, #0
   27322:	f7ff ff8b 	bl	2723c <AD5940_HFOSC32MHzCtrl>
  if(pClkCfg->LFOSCEn == bTRUE)
   27326:	7cab      	ldrb	r3, [r5, #18]
   27328:	2b01      	cmp	r3, #1
   2732a:	d112      	bne.n	27352 <AD5940_CLKCfg+0x9e>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   2732c:	f64c 3114 	movw	r1, #51988	; 0xcb14
   27330:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_LFOSCEN;  
   27334:	f044 0401 	orr.w	r4, r4, #1
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   27338:	f7ea fc90 	bl	11c5c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable LFOSC */
   2733c:	4621      	mov	r1, r4
   2733e:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   27342:	f7ea fc8b 	bl	11c5c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_LFOSCOK) == 0); /* Wait for clock ready */
   27346:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2734a:	f7ea fcd7 	bl	11cfc <AD5940_ReadReg>
   2734e:	05c3      	lsls	r3, r0, #23
   27350:	d5f9      	bpl.n	27346 <AD5940_CLKCfg+0x92>
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   27352:	68eb      	ldr	r3, [r5, #12]
  tempreg = pClkCfg->SysClkDiv&0x3f;
   27354:	68a9      	ldr	r1, [r5, #8]
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   27356:	019b      	lsls	r3, r3, #6
   27358:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
  tempreg = pClkCfg->SysClkDiv&0x3f;
   2735c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  AD5940_WriteReg(REG_AFECON_CLKCON0, tempreg);
   27360:	4319      	orrs	r1, r3
   27362:	f44f 6081 	mov.w	r0, #1032	; 0x408
   27366:	f7ea fc79 	bl	11c5c <AD5940_WriteReg>
  AD5940_Delay10us(10);
   2736a:	200a      	movs	r0, #10
   2736c:	f000 f8c0 	bl	274f0 <AD5940_Delay10us>
  tempreg |= pClkCfg->ADCCLkSrc << BITP_AFECON_CLKSEL_ADCCLKSEL;
   27370:	e9d5 3100 	ldrd	r3, r1, [r5]
  AD5940_WriteReg(REG_AFECON_CLKSEL, tempreg);
   27374:	f240 4014 	movw	r0, #1044	; 0x414
   27378:	ea43 0181 	orr.w	r1, r3, r1, lsl #2
   2737c:	f7ea fc6e 	bl	11c5c <AD5940_WriteReg>
  if(pClkCfg->HFXTALEn == bFALSE)
   27380:	7ceb      	ldrb	r3, [r5, #19]
   27382:	b90b      	cbnz	r3, 27388 <AD5940_CLKCfg+0xd4>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFXTALEN;
   27384:	f024 0404 	bic.w	r4, r4, #4
  if(pClkCfg->HFOSCEn == bFALSE)
   27388:	7c2b      	ldrb	r3, [r5, #16]
   2738a:	b90b      	cbnz	r3, 27390 <AD5940_CLKCfg+0xdc>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFOSCEN;
   2738c:	f024 0402 	bic.w	r4, r4, #2
  if(pClkCfg->LFOSCEn == bFALSE)
   27390:	7cab      	ldrb	r3, [r5, #18]
   27392:	b90b      	cbnz	r3, 27398 <AD5940_CLKCfg+0xe4>
    reg_osccon &= ~BITM_ALLON_OSCCON_LFOSCEN;
   27394:	f024 0401 	bic.w	r4, r4, #1
  AD5940_WriteReg(REG_ALLON_OSCKEY, KEY_OSCCON); /* Write Key */
   27398:	f64c 3114 	movw	r1, #51988	; 0xcb14
   2739c:	f640 200c 	movw	r0, #2572	; 0xa0c
   273a0:	f7ea fc5c 	bl	11c5c <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   273a4:	4621      	mov	r1, r4
   273a6:	f44f 6021 	mov.w	r0, #2576	; 0xa10
}
   273aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   273ae:	f7ea bc55 	b.w	11c5c <AD5940_WriteReg>

000273b2 <AD5940_INTCCfg>:
{
   273b2:	b570      	push	{r4, r5, r6, lr}
  tempreg = AD5940_ReadReg(regaddr);
   273b4:	f243 030c 	movw	r3, #12300	; 0x300c
   273b8:	f243 0408 	movw	r4, #12296	; 0x3008
   273bc:	2801      	cmp	r0, #1
   273be:	bf08      	it	eq
   273c0:	461c      	moveq	r4, r3
   273c2:	4620      	mov	r0, r4
{
   273c4:	460d      	mov	r5, r1
   273c6:	4616      	mov	r6, r2
  tempreg = AD5940_ReadReg(regaddr);
   273c8:	f7ea fc98 	bl	11cfc <AD5940_ReadReg>
  if(State == bTRUE)
   273cc:	2e01      	cmp	r6, #1
    tempreg |= AFEIntSrc;    /* Enable this interrupt */
   273ce:	bf0c      	ite	eq
   273d0:	ea40 0105 	orreq.w	r1, r0, r5
    tempreg &= ~(AFEIntSrc); /* Disable this interrupt  */
   273d4:	ea20 0105 	bicne.w	r1, r0, r5
  AD5940_WriteReg(regaddr,tempreg);
   273d8:	4620      	mov	r0, r4
}
   273da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  AD5940_WriteReg(regaddr,tempreg);
   273de:	f7ea bc3d 	b.w	11c5c <AD5940_WriteReg>

000273e2 <AD5940_INTCClrFlag>:
{
   273e2:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_INTC_INTCCLR,AfeIntSrcSel);
   273e4:	f243 0004 	movw	r0, #12292	; 0x3004
   273e8:	f7ea bc38 	b.w	11c5c <AD5940_WriteReg>

000273ec <AD5940_INTCTestFlag>:
  tempreg = AD5940_ReadReg(regaddr);
   273ec:	f243 0210 	movw	r2, #12304	; 0x3010
   273f0:	f243 0314 	movw	r3, #12308	; 0x3014
{
   273f4:	b510      	push	{r4, lr}
  tempreg = AD5940_ReadReg(regaddr);
   273f6:	2800      	cmp	r0, #0
   273f8:	bf0c      	ite	eq
   273fa:	4610      	moveq	r0, r2
   273fc:	4618      	movne	r0, r3
{
   273fe:	460c      	mov	r4, r1
  tempreg = AD5940_ReadReg(regaddr);
   27400:	f7ea fc7c 	bl	11cfc <AD5940_ReadReg>
  if(tempreg & AfeIntSrcSel)
   27404:	4220      	tst	r0, r4
}
   27406:	bf14      	ite	ne
   27408:	2001      	movne	r0, #1
   2740a:	2000      	moveq	r0, #0
   2740c:	bd10      	pop	{r4, pc}

0002740e <AD5940_AGPIOFuncCfg>:
{
   2740e:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0CON,uiCfgSet);
   27410:	2000      	movs	r0, #0
   27412:	f7ea bc23 	b.w	11c5c <AD5940_WriteReg>

00027416 <AD5940_AGPIOOen>:
{
   27416:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0OEN,uiPinSet);
   27418:	2004      	movs	r0, #4
   2741a:	f7ea bc1f 	b.w	11c5c <AD5940_WriteReg>

0002741e <AD5940_AGPIOIen>:
{
   2741e:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0IEN,uiPinSet);
   27420:	200c      	movs	r0, #12
   27422:	f7ea bc1b 	b.w	11c5c <AD5940_WriteReg>

00027426 <AD5940_AGPIOPen>:
{
   27426:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0PE,uiPinSet);
   27428:	2008      	movs	r0, #8
   2742a:	f7ea bc17 	b.w	11c5c <AD5940_WriteReg>

0002742e <AD5940_AGPIOCfg>:
{
   2742e:	b510      	push	{r4, lr}
   27430:	4604      	mov	r4, r0
  AD5940_AGPIOFuncCfg(pAgpioCfg->FuncSet);
   27432:	6800      	ldr	r0, [r0, #0]
   27434:	f7ff ffeb 	bl	2740e <AD5940_AGPIOFuncCfg>
  AD5940_AGPIOOen(pAgpioCfg->OutputEnSet);
   27438:	6860      	ldr	r0, [r4, #4]
   2743a:	f7ff ffec 	bl	27416 <AD5940_AGPIOOen>
  AD5940_AGPIOIen(pAgpioCfg->InputEnSet);
   2743e:	68a0      	ldr	r0, [r4, #8]
   27440:	f7ff ffed 	bl	2741e <AD5940_AGPIOIen>
  AD5940_AGPIOPen(pAgpioCfg->PullEnSet);
   27444:	68e0      	ldr	r0, [r4, #12]
   27446:	f7ff ffee 	bl	27426 <AD5940_AGPIOPen>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   2744a:	6921      	ldr	r1, [r4, #16]
   2744c:	2014      	movs	r0, #20
}
   2744e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   27452:	f7ea bc03 	b.w	11c5c <AD5940_WriteReg>

00027456 <AD5940_SleepKeyCtrlS>:
{
   27456:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SEQSLPLOCK, SlpKey);
   27458:	f242 1018 	movw	r0, #8472	; 0x2118
   2745c:	f7ea bbfe 	b.w	11c5c <AD5940_WriteReg>

00027460 <AD5940_EnterSleepS>:
{
   27460:	b508      	push	{r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 0);
   27462:	2100      	movs	r1, #0
   27464:	f242 101c 	movw	r0, #8476	; 0x211c
   27468:	f7ea fbf8 	bl	11c5c <AD5940_WriteReg>
}
   2746c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 1);
   27470:	2101      	movs	r1, #1
   27472:	f242 101c 	movw	r0, #8476	; 0x211c
   27476:	f7ea bbf1 	b.w	11c5c <AD5940_WriteReg>

0002747a <AD5940_WakeUp>:
{
   2747a:	b570      	push	{r4, r5, r6, lr}
   2747c:	4605      	mov	r5, r0
  uint32_t count = 0;
   2747e:	2400      	movs	r4, #0
    if(AD5940_ReadReg(REG_AFECON_ADIID) == AD5940_ADIID)
   27480:	f244 1644 	movw	r6, #16708	; 0x4144
   27484:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27488:	f7ea fc38 	bl	11cfc <AD5940_ReadReg>
   2748c:	42b0      	cmp	r0, r6
    count++;
   2748e:	f104 0401 	add.w	r4, r4, #1
    if(AD5940_ReadReg(REG_AFECON_ADIID) == AD5940_ADIID)
   27492:	d003      	beq.n	2749c <AD5940_WakeUp+0x22>
    if(TryCount<=0) 
   27494:	2d00      	cmp	r5, #0
   27496:	ddf5      	ble.n	27484 <AD5940_WakeUp+0xa>
    if(count > TryCount)
   27498:	42a5      	cmp	r5, r4
   2749a:	d2f3      	bcs.n	27484 <AD5940_WakeUp+0xa>
}
   2749c:	4620      	mov	r0, r4
   2749e:	bd70      	pop	{r4, r5, r6, pc}

000274a0 <AD5940_HWReset>:
{
   274a0:	b508      	push	{r3, lr}
  AD5940_RstClr();
   274a2:	f000 f834 	bl	2750e <AD5940_RstClr>
  AD5940_Delay10us(200); /* Delay some time */
   274a6:	20c8      	movs	r0, #200	; 0xc8
   274a8:	f000 f822 	bl	274f0 <AD5940_Delay10us>
  AD5940_RstSet();
   274ac:	f000 f833 	bl	27516 <AD5940_RstSet>
}
   274b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_Delay10us(500); /* AD5940 need some time to exit reset status. 200us looks good. */
   274b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   274b8:	f000 b81a 	b.w	274f0 <AD5940_Delay10us>

000274bc <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
   274bc:	b4f0      	push	{r4, r5, r6, r7}
   274be:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   274c0:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
   274c2:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   274c4:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   274c6:	d506      	bpl.n	274d6 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   274c8:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   274cc:	d003      	beq.n	274d6 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   274ce:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   274d0:	bf48      	it	mi
   274d2:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   274d6:	6834      	ldr	r4, [r6, #0]
   274d8:	2501      	movs	r5, #1
   274da:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   274dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   274e0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   274e2:	bf4c      	ite	mi
   274e4:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   274e6:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   274e8:	683b      	ldr	r3, [r7, #0]
   274ea:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   274ec:	bcf0      	pop	{r4, r5, r6, r7}
   274ee:	4718      	bx	r3

000274f0 <AD5940_Delay10us>:
    uint32_t time_total_us = time * 10 ;
   274f0:	2801      	cmp	r0, #1
   274f2:	bf38      	it	cc
   274f4:	2001      	movcc	r0, #1
	return z_impl_k_usleep(us);
   274f6:	230a      	movs	r3, #10
   274f8:	4358      	muls	r0, r3
   274fa:	f7fb b811 	b.w	22520 <z_impl_k_usleep>

000274fe <AD5940_CsClr>:
    gpio_pin_set(gpio_dev, CS_PIN, 0);
   274fe:	2100      	movs	r1, #0
   27500:	201f      	movs	r0, #31
   27502:	f7ea bd37 	b.w	11f74 <gpio_pin_set.constprop.0.isra.0>

00027506 <AD5940_CsSet>:
    gpio_pin_set(gpio_dev, CS_PIN, 1);
   27506:	2101      	movs	r1, #1
   27508:	201f      	movs	r0, #31
   2750a:	f7ea bd33 	b.w	11f74 <gpio_pin_set.constprop.0.isra.0>

0002750e <AD5940_RstClr>:
    gpio_pin_set(gpio_dev, RESET_PIN, 0);
   2750e:	2100      	movs	r1, #0
   27510:	201e      	movs	r0, #30
   27512:	f7ea bd2f 	b.w	11f74 <gpio_pin_set.constprop.0.isra.0>

00027516 <AD5940_RstSet>:
    gpio_pin_set(gpio_dev, RESET_PIN, 1);
   27516:	2101      	movs	r1, #1
   27518:	201e      	movs	r0, #30
   2751a:	f7ea bd2b 	b.w	11f74 <gpio_pin_set.constprop.0.isra.0>

0002751e <ct_ccc_cfg_changed>:
}
   2751e:	4770      	bx	lr

00027520 <read_ct>:
{
   27520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   27522:	240a      	movs	r4, #10
   27524:	9402      	str	r4, [sp, #8]
   27526:	68cc      	ldr	r4, [r1, #12]
   27528:	9401      	str	r4, [sp, #4]
   2752a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2752e:	9400      	str	r4, [sp, #0]
   27530:	f002 fc86 	bl	29e40 <bt_gatt_attr_read>
}
   27534:	b004      	add	sp, #16
   27536:	bd10      	pop	{r4, pc}

00027538 <cbpprintf_external>:
{
   27538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2753c:	4607      	mov	r7, r0
   2753e:	460e      	mov	r6, r1
   27540:	4690      	mov	r8, r2
	if (buf == NULL) {
   27542:	461d      	mov	r5, r3
   27544:	b30b      	cbz	r3, 2758a <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   27546:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   27548:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2754a:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2754e:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   27550:	441c      	add	r4, r3
   27552:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   27556:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   27558:	f04f 0900 	mov.w	r9, #0
   2755c:	45d1      	cmp	r9, sl
   2755e:	d308      	bcc.n	27572 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   27560:	686a      	ldr	r2, [r5, #4]
   27562:	f105 0308 	add.w	r3, r5, #8
   27566:	4641      	mov	r1, r8
   27568:	4638      	mov	r0, r7
   2756a:	46b4      	mov	ip, r6
}
   2756c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   27570:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   27572:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   27576:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   2757a:	4620      	mov	r0, r4
   2757c:	f7e5 f9cb 	bl	c916 <strlen>
   27580:	3001      	adds	r0, #1
   27582:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   27584:	f109 0901 	add.w	r9, r9, #1
   27588:	e7e8      	b.n	2755c <cbpprintf_external+0x24>
}
   2758a:	f06f 0015 	mvn.w	r0, #21
   2758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027592 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   27592:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   27594:	2364      	movs	r3, #100	; 0x64
{
   27596:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   27598:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   2759a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2759c:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   275a0:	b111      	cbz	r1, 275a8 <u8_to_dec+0x16>
   275a2:	3d01      	subs	r5, #1
   275a4:	d101      	bne.n	275aa <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   275a6:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   275a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   275aa:	429a      	cmp	r2, r3
		digit = value / divisor;
   275ac:	fbb2 f7f3 	udiv	r7, r2, r3
   275b0:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   275b2:	d202      	bcs.n	275ba <u8_to_dec+0x28>
   275b4:	2b01      	cmp	r3, #1
   275b6:	d000      	beq.n	275ba <u8_to_dec+0x28>
   275b8:	b130      	cbz	r0, 275c8 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   275ba:	3630      	adds	r6, #48	; 0x30
			buflen--;
   275bc:	3901      	subs	r1, #1
			num_digits++;
   275be:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   275c0:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   275c4:	b2c9      	uxtb	r1, r1
			num_digits++;
   275c6:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   275c8:	fb03 2217 	mls	r2, r3, r7, r2
   275cc:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   275ce:	fbb3 f3fc 	udiv	r3, r3, ip
   275d2:	e7e5      	b.n	275a0 <u8_to_dec+0xe>

000275d4 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   275d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   275d8:	b2db      	uxtb	r3, r3
   275da:	2b09      	cmp	r3, #9
   275dc:	d802      	bhi.n	275e4 <char2hex+0x10>
		*x = c - '0';
   275de:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   275e0:	2000      	movs	r0, #0
   275e2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   275e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   275e8:	2b05      	cmp	r3, #5
   275ea:	d802      	bhi.n	275f2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   275ec:	3857      	subs	r0, #87	; 0x57
   275ee:	7008      	strb	r0, [r1, #0]
   275f0:	e7f6      	b.n	275e0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   275f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   275f6:	2b05      	cmp	r3, #5
   275f8:	d801      	bhi.n	275fe <char2hex+0x2a>
		*x = c - 'A' + 10;
   275fa:	3837      	subs	r0, #55	; 0x37
   275fc:	e7f7      	b.n	275ee <char2hex+0x1a>
		return -EINVAL;
   275fe:	f06f 0015 	mvn.w	r0, #21
}
   27602:	4770      	bx	lr

00027604 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   27604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27606:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   27608:	f001 0001 	and.w	r0, r1, #1
   2760c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   27610:	429d      	cmp	r5, r3
   27612:	ea4f 0651 	mov.w	r6, r1, lsr #1
   27616:	d903      	bls.n	27620 <hex2bin+0x1c>
		return 0;
   27618:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2761a:	4628      	mov	r0, r5
   2761c:	b003      	add	sp, #12
   2761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   27620:	b158      	cbz	r0, 2763a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   27622:	7820      	ldrb	r0, [r4, #0]
   27624:	f10d 0107 	add.w	r1, sp, #7
   27628:	f7ff ffd4 	bl	275d4 <char2hex>
   2762c:	2800      	cmp	r0, #0
   2762e:	dbf3      	blt.n	27618 <hex2bin+0x14>
		buf[0] = dec;
   27630:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27634:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   27638:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2763a:	3401      	adds	r4, #1
   2763c:	4416      	add	r6, r2
   2763e:	42b2      	cmp	r2, r6
   27640:	d0eb      	beq.n	2761a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   27642:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   27646:	f10d 0107 	add.w	r1, sp, #7
   2764a:	f7ff ffc3 	bl	275d4 <char2hex>
   2764e:	2800      	cmp	r0, #0
   27650:	dbe2      	blt.n	27618 <hex2bin+0x14>
		buf[i] = dec << 4;
   27652:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27656:	011b      	lsls	r3, r3, #4
   27658:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2765a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2765e:	f7ff ffb9 	bl	275d4 <char2hex>
   27662:	2800      	cmp	r0, #0
   27664:	dbd8      	blt.n	27618 <hex2bin+0x14>
		buf[i] += dec;
   27666:	7813      	ldrb	r3, [r2, #0]
   27668:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2766c:	440b      	add	r3, r1
   2766e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   27672:	e7e4      	b.n	2763e <hex2bin+0x3a>

00027674 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27674:	4603      	mov	r3, r0
   27676:	b140      	cbz	r0, 2768a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27678:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2767a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2767e:	2a02      	cmp	r2, #2
   27680:	d006      	beq.n	27690 <sys_notify_validate+0x1c>
   27682:	2a03      	cmp	r2, #3
   27684:	d004      	beq.n	27690 <sys_notify_validate+0x1c>
   27686:	2a01      	cmp	r2, #1
   27688:	d005      	beq.n	27696 <sys_notify_validate+0x22>
		return -EINVAL;
   2768a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2768e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   27690:	681a      	ldr	r2, [r3, #0]
   27692:	2a00      	cmp	r2, #0
   27694:	d0f9      	beq.n	2768a <sys_notify_validate+0x16>
		notify->result = 0;
   27696:	2000      	movs	r0, #0
   27698:	6098      	str	r0, [r3, #8]
   2769a:	4770      	bx	lr

0002769c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2769c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2769e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   276a2:	2a02      	cmp	r2, #2
{
   276a4:	b510      	push	{r4, lr}
   276a6:	4603      	mov	r3, r0
	notify->result = res;
   276a8:	6081      	str	r1, [r0, #8]
	switch (method) {
   276aa:	d00a      	beq.n	276c2 <sys_notify_finalize+0x26>
   276ac:	2a03      	cmp	r2, #3
   276ae:	d10b      	bne.n	276c8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   276b0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   276b2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   276b4:	2200      	movs	r2, #0
   276b6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   276b8:	b108      	cbz	r0, 276be <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   276ba:	f7fb fa2f 	bl	22b1c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   276be:	4620      	mov	r0, r4
   276c0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   276c2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   276c4:	2400      	movs	r4, #0
		break;
   276c6:	e7f5      	b.n	276b4 <sys_notify_finalize+0x18>
	switch (method) {
   276c8:	2400      	movs	r4, #0
   276ca:	4620      	mov	r0, r4
   276cc:	e7f2      	b.n	276b4 <sys_notify_finalize+0x18>

000276ce <arch_printk_char_out>:
}
   276ce:	2000      	movs	r0, #0
   276d0:	4770      	bx	lr

000276d2 <str_out>:
{
   276d2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   276d4:	688a      	ldr	r2, [r1, #8]
   276d6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   276d8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   276da:	b114      	cbz	r4, 276e2 <str_out+0x10>
   276dc:	684b      	ldr	r3, [r1, #4]
   276de:	4293      	cmp	r3, r2
   276e0:	dc01      	bgt.n	276e6 <str_out+0x14>
		ctx->count++;
   276e2:	608d      	str	r5, [r1, #8]
}
   276e4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   276e6:	3b01      	subs	r3, #1
   276e8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   276ea:	bf08      	it	eq
   276ec:	2200      	moveq	r2, #0
   276ee:	608d      	str	r5, [r1, #8]
   276f0:	bf0c      	ite	eq
   276f2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   276f4:	54a0      	strbne	r0, [r4, r2]
   276f6:	e7f5      	b.n	276e4 <str_out+0x12>

000276f8 <vprintk>:
		z_log_vprintk(fmt, ap);
   276f8:	f000 bcc8 	b.w	2808c <z_log_vprintk>

000276fc <printk>:
{
   276fc:	b40f      	push	{r0, r1, r2, r3}
   276fe:	b507      	push	{r0, r1, r2, lr}
   27700:	a904      	add	r1, sp, #16
   27702:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27706:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   27708:	f000 fcc0 	bl	2808c <z_log_vprintk>
}
   2770c:	b003      	add	sp, #12
   2770e:	f85d eb04 	ldr.w	lr, [sp], #4
   27712:	b004      	add	sp, #16
   27714:	4770      	bx	lr

00027716 <snprintk>:
{
   27716:	b40c      	push	{r2, r3}
   27718:	b507      	push	{r0, r1, r2, lr}
   2771a:	ab04      	add	r3, sp, #16
   2771c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27720:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27722:	f7eb fb29 	bl	12d78 <vsnprintk>
}
   27726:	b003      	add	sp, #12
   27728:	f85d eb04 	ldr.w	lr, [sp], #4
   2772c:	b002      	add	sp, #8
   2772e:	4770      	bx	lr

00027730 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27730:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   27732:	f013 0307 	ands.w	r3, r3, #7
   27736:	d105      	bne.n	27744 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27738:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2773a:	2b00      	cmp	r3, #0
   2773c:	bf0c      	ite	eq
   2773e:	2000      	moveq	r0, #0
   27740:	2003      	movne	r0, #3
   27742:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   27744:	2b02      	cmp	r3, #2
   27746:	d105      	bne.n	27754 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27748:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   2774a:	2b00      	cmp	r3, #0
   2774c:	bf14      	ite	ne
   2774e:	2000      	movne	r0, #0
   27750:	2004      	moveq	r0, #4
   27752:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27754:	2b01      	cmp	r3, #1
   27756:	d105      	bne.n	27764 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   27758:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2775a:	2b00      	cmp	r3, #0
   2775c:	bf0c      	ite	eq
   2775e:	2000      	moveq	r0, #0
   27760:	2005      	movne	r0, #5
   27762:	4770      	bx	lr
	int evt = EVT_NOP;
   27764:	2000      	movs	r0, #0
}
   27766:	4770      	bx	lr

00027768 <notify_one>:
{
   27768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2776c:	460d      	mov	r5, r1
   2776e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27770:	4619      	mov	r1, r3
   27772:	1d28      	adds	r0, r5, #4
{
   27774:	4690      	mov	r8, r2
   27776:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27778:	f7ff ff90 	bl	2769c <sys_notify_finalize>
	if (cb) {
   2777c:	4604      	mov	r4, r0
   2777e:	b138      	cbz	r0, 27790 <notify_one+0x28>
		cb(mgr, cli, state, res);
   27780:	4633      	mov	r3, r6
   27782:	4642      	mov	r2, r8
   27784:	4629      	mov	r1, r5
   27786:	4638      	mov	r0, r7
   27788:	46a4      	mov	ip, r4
}
   2778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2778e:	4760      	bx	ip
}
   27790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027794 <transition_complete>:
{
   27794:	b410      	push	{r4}
	__asm__ volatile(
   27796:	f04f 0440 	mov.w	r4, #64	; 0x40
   2779a:	f3ef 8211 	mrs	r2, BASEPRI
   2779e:	f384 8812 	msr	BASEPRI_MAX, r4
   277a2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   277a6:	6141      	str	r1, [r0, #20]
}
   277a8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   277aa:	2101      	movs	r1, #1
   277ac:	f7eb bafa 	b.w	12da4 <process_event>

000277b0 <validate_args>:
{
   277b0:	b510      	push	{r4, lr}
   277b2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   277b4:	b140      	cbz	r0, 277c8 <validate_args+0x18>
   277b6:	b139      	cbz	r1, 277c8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   277b8:	1d08      	adds	r0, r1, #4
   277ba:	f7ff ff5b 	bl	27674 <sys_notify_validate>
	if ((rv == 0)
   277be:	b928      	cbnz	r0, 277cc <validate_args+0x1c>
	    && ((cli->notify.flags
   277c0:	68a3      	ldr	r3, [r4, #8]
   277c2:	f033 0303 	bics.w	r3, r3, #3
   277c6:	d001      	beq.n	277cc <validate_args+0x1c>
		rv = -EINVAL;
   277c8:	f06f 0015 	mvn.w	r0, #21
}
   277cc:	bd10      	pop	{r4, pc}

000277ce <onoff_manager_init>:
{
   277ce:	b538      	push	{r3, r4, r5, lr}
   277d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   277d2:	4605      	mov	r5, r0
   277d4:	b158      	cbz	r0, 277ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
   277d6:	b151      	cbz	r1, 277ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   277d8:	680b      	ldr	r3, [r1, #0]
   277da:	b143      	cbz	r3, 277ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   277dc:	684b      	ldr	r3, [r1, #4]
   277de:	b133      	cbz	r3, 277ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   277e0:	221c      	movs	r2, #28
   277e2:	2100      	movs	r1, #0
   277e4:	f004 fc14 	bl	2c010 <memset>
   277e8:	612c      	str	r4, [r5, #16]
	return 0;
   277ea:	2000      	movs	r0, #0
}
   277ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   277ee:	f06f 0015 	mvn.w	r0, #21
   277f2:	e7fb      	b.n	277ec <onoff_manager_init+0x1e>

000277f4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   277f4:	b570      	push	{r4, r5, r6, lr}
   277f6:	4604      	mov	r4, r0
   277f8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   277fa:	f7ff ffd9 	bl	277b0 <validate_args>

	if (rv < 0) {
   277fe:	1e05      	subs	r5, r0, #0
   27800:	db31      	blt.n	27866 <onoff_request+0x72>
   27802:	f04f 0340 	mov.w	r3, #64	; 0x40
   27806:	f3ef 8111 	mrs	r1, BASEPRI
   2780a:	f383 8812 	msr	BASEPRI_MAX, r3
   2780e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   27812:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27814:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   27816:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2781a:	42ab      	cmp	r3, r5
   2781c:	f000 0207 	and.w	r2, r0, #7
   27820:	d02e      	beq.n	27880 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   27822:	2a02      	cmp	r2, #2
   27824:	d10e      	bne.n	27844 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   27826:	3301      	adds	r3, #1
   27828:	8363      	strh	r3, [r4, #26]
	rv = state;
   2782a:	4615      	mov	r5, r2
		notify = true;
   2782c:	2301      	movs	r3, #1
	__asm__ volatile(
   2782e:	f381 8811 	msr	BASEPRI, r1
   27832:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   27836:	b1b3      	cbz	r3, 27866 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   27838:	2300      	movs	r3, #0
   2783a:	4631      	mov	r1, r6
   2783c:	4620      	mov	r0, r4
   2783e:	f7ff ff93 	bl	27768 <notify_one>
   27842:	e010      	b.n	27866 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   27844:	0783      	lsls	r3, r0, #30
   27846:	d001      	beq.n	2784c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   27848:	2a06      	cmp	r2, #6
   2784a:	d10e      	bne.n	2786a <onoff_request+0x76>
	parent->next = child;
   2784c:	2300      	movs	r3, #0
   2784e:	6033      	str	r3, [r6, #0]
	return list->tail;
   27850:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   27852:	b993      	cbnz	r3, 2787a <onoff_request+0x86>
	list->head = node;
   27854:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   27858:	4615      	mov	r5, r2
   2785a:	b962      	cbnz	r2, 27876 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2785c:	460a      	mov	r2, r1
   2785e:	4620      	mov	r0, r4
   27860:	2102      	movs	r1, #2
   27862:	f7eb fa9f 	bl	12da4 <process_event>
		}
	}

	return rv;
}
   27866:	4628      	mov	r0, r5
   27868:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2786a:	2a05      	cmp	r2, #5
   2786c:	bf0c      	ite	eq
   2786e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   27872:	f06f 0504 	mvnne.w	r5, #4
   27876:	2300      	movs	r3, #0
   27878:	e7d9      	b.n	2782e <onoff_request+0x3a>
	parent->next = child;
   2787a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2787c:	6066      	str	r6, [r4, #4]
}
   2787e:	e7eb      	b.n	27858 <onoff_request+0x64>
		rv = -EAGAIN;
   27880:	f06f 050a 	mvn.w	r5, #10
   27884:	e7f7      	b.n	27876 <onoff_request+0x82>

00027886 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   27886:	4604      	mov	r4, r0
   27888:	b508      	push	{r3, lr}
   2788a:	4608      	mov	r0, r1
   2788c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2788e:	461a      	mov	r2, r3
   27890:	47a0      	blx	r4
	return z_impl_z_current_get();
   27892:	f7fa fe5f 	bl	22554 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   27896:	f7ed fdc3 	bl	15420 <z_impl_k_thread_abort>

0002789a <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2789a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2789e:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   278a0:	0840      	lsrs	r0, r0, #1
   278a2:	4770      	bx	lr

000278a4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   278a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278a6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   278a8:	f7ff fff7 	bl	2789a <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   278ac:	fab0 f080 	clz	r0, r0
   278b0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   278b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   278b8:	00ca      	lsls	r2, r1, #3
   278ba:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   278be:	1d17      	adds	r7, r2, #4
{
   278c0:	460c      	mov	r4, r1
   278c2:	3206      	adds	r2, #6
   278c4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   278c6:	b956      	cbnz	r6, 278de <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   278c8:	2101      	movs	r1, #1
   278ca:	fa01 f000 	lsl.w	r0, r1, r0
   278ce:	68d9      	ldr	r1, [r3, #12]
   278d0:	4301      	orrs	r1, r0
   278d2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   278d4:	f8cc 4010 	str.w	r4, [ip, #16]
   278d8:	53dd      	strh	r5, [r3, r7]
   278da:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   278dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   278de:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   278e0:	3104      	adds	r1, #4
   278e2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   278e4:	53d8      	strh	r0, [r3, r7]
   278e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   278ea:	529e      	strh	r6, [r3, r2]
   278ec:	80c5      	strh	r5, [r0, #6]
   278ee:	525d      	strh	r5, [r3, r1]
   278f0:	e7f4      	b.n	278dc <free_list_add+0x38>

000278f2 <free_list_remove_bidx>:
{
   278f2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   278f4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   278f8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   278fa:	4299      	cmp	r1, r3
   278fc:	f102 0104 	add.w	r1, r2, #4
   27900:	d10a      	bne.n	27918 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   27902:	2301      	movs	r3, #1
   27904:	fa03 f202 	lsl.w	r2, r3, r2
   27908:	68c3      	ldr	r3, [r0, #12]
   2790a:	ea23 0302 	bic.w	r3, r3, r2
   2790e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   27910:	2300      	movs	r3, #0
   27912:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   27916:	bd10      	pop	{r4, pc}
   27918:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2791a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2791e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   27922:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   27926:	80cb      	strh	r3, [r1, #6]
   27928:	8082      	strh	r2, [r0, #4]
}
   2792a:	e7f4      	b.n	27916 <free_list_remove_bidx+0x24>

0002792c <free_list_remove>:
{
   2792c:	b508      	push	{r3, lr}
   2792e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   27930:	f7ff ffb3 	bl	2789a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   27934:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27938:	f1c2 021f 	rsb	r2, r2, #31
   2793c:	4618      	mov	r0, r3
}
   2793e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   27942:	f7ff bfd6 	b.w	278f2 <free_list_remove_bidx>

00027946 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   27946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2794a:	fab1 f581 	clz	r5, r1
   2794e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   27952:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   27956:	4603      	mov	r3, r0
	if (b->next) {
   27958:	693a      	ldr	r2, [r7, #16]
{
   2795a:	460e      	mov	r6, r1
	if (b->next) {
   2795c:	b1c2      	cbz	r2, 27990 <alloc_chunk+0x4a>
   2795e:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   27962:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   27964:	4618      	mov	r0, r3
   27966:	4621      	mov	r1, r4
   27968:	f7ff ff97 	bl	2789a <chunk_size>
   2796c:	42b0      	cmp	r0, r6
   2796e:	d306      	bcc.n	2797e <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   27970:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   27972:	4618      	mov	r0, r3
   27974:	f7ff ffbd 	bl	278f2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   27978:	4620      	mov	r0, r4
   2797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2797e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   27982:	f1b8 0801 	subs.w	r8, r8, #1
   27986:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   27988:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2798a:	d001      	beq.n	27990 <alloc_chunk+0x4a>
   2798c:	4282      	cmp	r2, r0
   2798e:	d1e8      	bne.n	27962 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   27990:	f1c5 0220 	rsb	r2, r5, #32
   27994:	f04f 34ff 	mov.w	r4, #4294967295
   27998:	4094      	lsls	r4, r2
   2799a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2799c:	4014      	ands	r4, r2
   2799e:	d0eb      	beq.n	27978 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   279a0:	fa94 f2a4 	rbit	r2, r4
   279a4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   279a8:	1d11      	adds	r1, r2, #4
   279aa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   279ae:	4621      	mov	r1, r4
   279b0:	e7df      	b.n	27972 <alloc_chunk+0x2c>

000279b2 <merge_chunks>:
{
   279b2:	b538      	push	{r3, r4, r5, lr}
   279b4:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   279b6:	f7ff ff70 	bl	2789a <chunk_size>
{
   279ba:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   279bc:	4604      	mov	r4, r0
   279be:	4611      	mov	r1, r2
   279c0:	4618      	mov	r0, r3
   279c2:	f7ff ff6a 	bl	2789a <chunk_size>
		((uint16_t *)cmem)[f] = val;
   279c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   279ca:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   279cc:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   279ce:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   279d0:	4618      	mov	r0, r3
   279d2:	f7ff ff62 	bl	2789a <chunk_size>
	void *cmem = &buf[c];
   279d6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   279d8:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   279dc:	bd38      	pop	{r3, r4, r5, pc}

000279de <split_chunks>:
{
   279de:	b538      	push	{r3, r4, r5, lr}
   279e0:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   279e2:	f7ff ff5a 	bl	2789a <chunk_size>
{
   279e6:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   279e8:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   279ea:	1a51      	subs	r1, r2, r1
   279ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   279f0:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   279f2:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   279f4:	8060      	strh	r0, [r4, #2]
   279f6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   279fa:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   279fc:	8044      	strh	r4, [r0, #2]
   279fe:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   27a02:	4618      	mov	r0, r3
   27a04:	4611      	mov	r1, r2
   27a06:	f7ff ff48 	bl	2789a <chunk_size>
	void *cmem = &buf[c];
   27a0a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27a0c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   27a10:	bd38      	pop	{r3, r4, r5, pc}

00027a12 <free_chunk>:
{
   27a12:	b538      	push	{r3, r4, r5, lr}
   27a14:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27a16:	f7ff ff40 	bl	2789a <chunk_size>
   27a1a:	460c      	mov	r4, r1
   27a1c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   27a1e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27a22:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   27a24:	07da      	lsls	r2, r3, #31
   27a26:	d40a      	bmi.n	27a3e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   27a28:	4628      	mov	r0, r5
   27a2a:	f7ff ff7f 	bl	2792c <free_list_remove>
	return c + chunk_size(h, c);
   27a2e:	4621      	mov	r1, r4
   27a30:	4628      	mov	r0, r5
   27a32:	f7ff ff32 	bl	2789a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27a36:	1822      	adds	r2, r4, r0
   27a38:	4628      	mov	r0, r5
   27a3a:	f7ff ffba 	bl	279b2 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   27a3e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   27a42:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   27a44:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27a48:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   27a4a:	07db      	lsls	r3, r3, #31
   27a4c:	d40c      	bmi.n	27a68 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   27a4e:	4628      	mov	r0, r5
   27a50:	f7ff ff6c 	bl	2792c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   27a54:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   27a58:	4622      	mov	r2, r4
   27a5a:	1a61      	subs	r1, r4, r1
   27a5c:	4628      	mov	r0, r5
   27a5e:	f7ff ffa8 	bl	279b2 <merge_chunks>
   27a62:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   27a66:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   27a68:	4621      	mov	r1, r4
   27a6a:	4628      	mov	r0, r5
}
   27a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   27a70:	f7ff bf18 	b.w	278a4 <free_list_add>

00027a74 <sys_heap_free>:
	if (mem == NULL) {
   27a74:	b161      	cbz	r1, 27a90 <sys_heap_free+0x1c>
   27a76:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   27a78:	3904      	subs	r1, #4
   27a7a:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   27a7c:	f021 0307 	bic.w	r3, r1, #7
   27a80:	4403      	add	r3, r0
	free_chunk(h, c);
   27a82:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27a84:	885a      	ldrh	r2, [r3, #2]
   27a86:	f022 0201 	bic.w	r2, r2, #1
   27a8a:	805a      	strh	r2, [r3, #2]
   27a8c:	f7ff bfc1 	b.w	27a12 <free_chunk>
}
   27a90:	4770      	bx	lr

00027a92 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   27a92:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   27a94:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   27a96:	b909      	cbnz	r1, 27a9c <sys_heap_alloc+0xa>
		return NULL;
   27a98:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   27a9a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   27a9c:	68ab      	ldr	r3, [r5, #8]
   27a9e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   27aa2:	d9f9      	bls.n	27a98 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27aa4:	310b      	adds	r1, #11
   27aa6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27aa8:	4621      	mov	r1, r4
   27aaa:	4628      	mov	r0, r5
   27aac:	f7ff ff4b 	bl	27946 <alloc_chunk>
	if (c == 0U) {
   27ab0:	4606      	mov	r6, r0
   27ab2:	2800      	cmp	r0, #0
   27ab4:	d0f0      	beq.n	27a98 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27ab6:	4601      	mov	r1, r0
   27ab8:	4628      	mov	r0, r5
   27aba:	f7ff feee 	bl	2789a <chunk_size>
   27abe:	42a0      	cmp	r0, r4
   27ac0:	d907      	bls.n	27ad2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   27ac2:	1932      	adds	r2, r6, r4
   27ac4:	4628      	mov	r0, r5
   27ac6:	f7ff ff8a 	bl	279de <split_chunks>
		free_list_add(h, c + chunk_sz);
   27aca:	4611      	mov	r1, r2
   27acc:	4628      	mov	r0, r5
   27ace:	f7ff fee9 	bl	278a4 <free_list_add>
	void *cmem = &buf[c];
   27ad2:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27ad6:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27ad8:	8853      	ldrh	r3, [r2, #2]
   27ada:	f043 0301 	orr.w	r3, r3, #1
   27ade:	8053      	strh	r3, [r2, #2]
   27ae0:	3004      	adds	r0, #4
	return mem;
   27ae2:	e7da      	b.n	27a9a <sys_heap_alloc+0x8>

00027ae4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   27ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27ae8:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   27aea:	424a      	negs	r2, r1
   27aec:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   27af0:	ea31 0202 	bics.w	r2, r1, r2
{
   27af4:	4603      	mov	r3, r0
	if (align != rew) {
   27af6:	d00a      	beq.n	27b0e <sys_heap_aligned_alloc+0x2a>
		return false;
   27af8:	2f04      	cmp	r7, #4
   27afa:	463a      	mov	r2, r7
   27afc:	46b9      	mov	r9, r7
   27afe:	bf28      	it	cs
   27b00:	2204      	movcs	r2, #4
		align -= rew;
   27b02:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   27b04:	b974      	cbnz	r4, 27b24 <sys_heap_aligned_alloc+0x40>
		return NULL;
   27b06:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   27b08:	4628      	mov	r0, r5
   27b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   27b0e:	2904      	cmp	r1, #4
   27b10:	d804      	bhi.n	27b1c <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   27b12:	4621      	mov	r1, r4
}
   27b14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   27b18:	f7ff bfbb 	b.w	27a92 <sys_heap_alloc>
		rew = 0;
   27b1c:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   27b20:	2204      	movs	r2, #4
   27b22:	e7ef      	b.n	27b04 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   27b24:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   27b26:	68b3      	ldr	r3, [r6, #8]
   27b28:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   27b2c:	d9eb      	bls.n	27b06 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27b2e:	f104 010b 	add.w	r1, r4, #11
   27b32:	4439      	add	r1, r7
   27b34:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   27b36:	08c9      	lsrs	r1, r1, #3
   27b38:	4630      	mov	r0, r6
   27b3a:	f7ff ff04 	bl	27946 <alloc_chunk>
	if (c0 == 0) {
   27b3e:	4680      	mov	r8, r0
   27b40:	2800      	cmp	r0, #0
   27b42:	d0e0      	beq.n	27b06 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   27b44:	f109 0504 	add.w	r5, r9, #4
   27b48:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   27b4c:	1e7b      	subs	r3, r7, #1
   27b4e:	4435      	add	r5, r6
   27b50:	441d      	add	r5, r3
   27b52:	427f      	negs	r7, r7
   27b54:	403d      	ands	r5, r7
   27b56:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   27b5a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   27b5c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   27b5e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   27b60:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   27b62:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   27b66:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   27b68:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   27b6c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   27b70:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   27b74:	d208      	bcs.n	27b88 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   27b76:	4601      	mov	r1, r0
   27b78:	463a      	mov	r2, r7
   27b7a:	4630      	mov	r0, r6
   27b7c:	f7ff ff2f 	bl	279de <split_chunks>
		free_list_add(h, c0);
   27b80:	4641      	mov	r1, r8
   27b82:	4630      	mov	r0, r6
   27b84:	f7ff fe8e 	bl	278a4 <free_list_add>
	return c + chunk_size(h, c);
   27b88:	4639      	mov	r1, r7
   27b8a:	4630      	mov	r0, r6
   27b8c:	f7ff fe85 	bl	2789a <chunk_size>
   27b90:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   27b92:	4284      	cmp	r4, r0
   27b94:	d207      	bcs.n	27ba6 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   27b96:	4630      	mov	r0, r6
   27b98:	4622      	mov	r2, r4
   27b9a:	f7ff ff20 	bl	279de <split_chunks>
		free_list_add(h, c_end);
   27b9e:	4621      	mov	r1, r4
   27ba0:	4630      	mov	r0, r6
   27ba2:	f7ff fe7f 	bl	278a4 <free_list_add>
	void *cmem = &buf[c];
   27ba6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27baa:	8873      	ldrh	r3, [r6, #2]
   27bac:	f043 0301 	orr.w	r3, r3, #1
   27bb0:	8073      	strh	r3, [r6, #2]
   27bb2:	e7a9      	b.n	27b08 <sys_heap_aligned_alloc+0x24>

00027bb4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   27bb4:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27bb6:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27bb8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27bba:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27bbe:	f021 0107 	bic.w	r1, r1, #7
{
   27bc2:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   27bc4:	1acd      	subs	r5, r1, r3
   27bc6:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   27bc8:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   27bca:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   27bce:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   27bd2:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27bd4:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   27bd6:	2600      	movs	r6, #0
   27bd8:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   27bda:	f1c0 0020 	rsb	r0, r0, #32
   27bde:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   27be2:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   27be4:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   27be6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   27bea:	4284      	cmp	r4, r0
   27bec:	d118      	bne.n	27c20 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27bee:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27bf0:	f040 0001 	orr.w	r0, r0, #1
   27bf4:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   27bf6:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27bfa:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27bfc:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   27bfe:	801e      	strh	r6, [r3, #0]
   27c00:	8067      	strh	r7, [r4, #2]
   27c02:	195c      	adds	r4, r3, r5
   27c04:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   27c08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   27c0c:	8066      	strh	r6, [r4, #2]
   27c0e:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27c10:	8850      	ldrh	r0, [r2, #2]
   27c12:	f040 0001 	orr.w	r0, r0, #1
   27c16:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   27c18:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   27c1a:	4618      	mov	r0, r3
   27c1c:	f7ff be42 	b.w	278a4 <free_list_add>
		h->buckets[i].next = 0;
   27c20:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   27c24:	e7e1      	b.n	27bea <sys_heap_init+0x36>

00027c26 <outs>:
{
   27c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c2a:	4607      	mov	r7, r0
   27c2c:	4688      	mov	r8, r1
   27c2e:	4615      	mov	r5, r2
   27c30:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27c32:	4614      	mov	r4, r2
   27c34:	42b4      	cmp	r4, r6
   27c36:	eba4 0005 	sub.w	r0, r4, r5
   27c3a:	d302      	bcc.n	27c42 <outs+0x1c>
   27c3c:	b93e      	cbnz	r6, 27c4e <outs+0x28>
   27c3e:	7823      	ldrb	r3, [r4, #0]
   27c40:	b12b      	cbz	r3, 27c4e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27c42:	f814 0b01 	ldrb.w	r0, [r4], #1
   27c46:	4641      	mov	r1, r8
   27c48:	47b8      	blx	r7
		if (rc < 0) {
   27c4a:	2800      	cmp	r0, #0
   27c4c:	daf2      	bge.n	27c34 <outs+0xe>
}
   27c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027c52 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   27c52:	b40f      	push	{r0, r1, r2, r3}
   27c54:	b507      	push	{r0, r1, r2, lr}
   27c56:	a904      	add	r1, sp, #16
   27c58:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   27c5c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   27c5e:	f7ff fd4b 	bl	276f8 <vprintk>

	va_end(ap);
}
   27c62:	b003      	add	sp, #12
   27c64:	f85d eb04 	ldr.w	lr, [sp], #4
   27c68:	b004      	add	sp, #16
   27c6a:	4770      	bx	lr

00027c6c <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   27c6c:	4602      	mov	r2, r0
   27c6e:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   27c70:	68c0      	ldr	r0, [r0, #12]
   27c72:	6814      	ldr	r4, [r2, #0]
   27c74:	42a0      	cmp	r0, r4
   27c76:	d904      	bls.n	27c82 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   27c78:	3801      	subs	r0, #1
   27c7a:	1b00      	subs	r0, r0, r4
   27c7c:	6008      	str	r0, [r1, #0]

		return false;
   27c7e:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   27c80:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27c82:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   27c84:	b918      	cbnz	r0, 27c8e <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   27c86:	3b01      	subs	r3, #1
   27c88:	1b1b      	subs	r3, r3, r4
   27c8a:	600b      	str	r3, [r1, #0]
		return false;
   27c8c:	e7f8      	b.n	27c80 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   27c8e:	1b1b      	subs	r3, r3, r4
   27c90:	600b      	str	r3, [r1, #0]
	return true;
   27c92:	2001      	movs	r0, #1
   27c94:	e7f4      	b.n	27c80 <free_space+0x14>

00027c96 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   27c96:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   27c98:	a901      	add	r1, sp, #4
{
   27c9a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   27c9c:	f7ff ffe6 	bl	27c6c <free_space>
   27ca0:	b120      	cbz	r0, 27cac <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   27ca2:	9b01      	ldr	r3, [sp, #4]
   27ca4:	68e2      	ldr	r2, [r4, #12]
   27ca6:	3b01      	subs	r3, #1
   27ca8:	4413      	add	r3, r2
   27caa:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   27cac:	9801      	ldr	r0, [sp, #4]
   27cae:	6a23      	ldr	r3, [r4, #32]
   27cb0:	43c0      	mvns	r0, r0
}
   27cb2:	4418      	add	r0, r3
   27cb4:	b002      	add	sp, #8
   27cb6:	bd10      	pop	{r4, pc}

00027cb8 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   27cb8:	b510      	push	{r4, lr}
   27cba:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   27cbc:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27cbe:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   27cc0:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27cc2:	07d2      	lsls	r2, r2, #31
   27cc4:	d502      	bpl.n	27ccc <idx_inc+0x14>
		return i & (buffer->size - 1);
   27cc6:	3b01      	subs	r3, #1
   27cc8:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   27cca:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   27ccc:	4298      	cmp	r0, r3
   27cce:	bf28      	it	cs
   27cd0:	1ac0      	subcs	r0, r0, r3
   27cd2:	e7fa      	b.n	27cca <idx_inc+0x12>

00027cd4 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   27cd4:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27cd6:	69c2      	ldr	r2, [r0, #28]
{
   27cd8:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   27cda:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27cdc:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   27cde:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27ce2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27ce6:	462a      	mov	r2, r5
   27ce8:	6801      	ldr	r1, [r0, #0]
{
   27cea:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27cec:	f7ff ffe4 	bl	27cb8 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27cf0:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27cf2:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27cf4:	462a      	mov	r2, r5
   27cf6:	4620      	mov	r0, r4
   27cf8:	f7ff ffde 	bl	27cb8 <idx_inc>
   27cfc:	6060      	str	r0, [r4, #4]
}
   27cfe:	bd38      	pop	{r3, r4, r5, pc}

00027d00 <max_utilization_update>:
{
   27d00:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27d02:	6903      	ldr	r3, [r0, #16]
   27d04:	075b      	lsls	r3, r3, #29
{
   27d06:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27d08:	d506      	bpl.n	27d18 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   27d0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27d0c:	f7ff ffc3 	bl	27c96 <get_usage>
   27d10:	4285      	cmp	r5, r0
   27d12:	d902      	bls.n	27d1a <max_utilization_update+0x1a>
   27d14:	6a60      	ldr	r0, [r4, #36]	; 0x24
   27d16:	6260      	str	r0, [r4, #36]	; 0x24
}
   27d18:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   27d1a:	4620      	mov	r0, r4
   27d1c:	f7ff ffbb 	bl	27c96 <get_usage>
   27d20:	e7f9      	b.n	27d16 <max_utilization_update+0x16>

00027d22 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   27d22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27d26:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   27d2a:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   27d2e:	461f      	mov	r7, r3
	*user_packet = false;
   27d30:	2300      	movs	r3, #0
   27d32:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   27d34:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   27d38:	f003 0303 	and.w	r3, r3, #3
   27d3c:	2b02      	cmp	r3, #2
{
   27d3e:	4604      	mov	r4, r0
   27d40:	468b      	mov	fp, r1
   27d42:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27d44:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27d48:	d103      	bne.n	27d52 <drop_item_locked+0x30>
		return item->skip.len;
   27d4a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   27d4e:	08ad      	lsrs	r5, r5, #2
   27d50:	d12e      	bne.n	27db0 <drop_item_locked+0x8e>
   27d52:	69a3      	ldr	r3, [r4, #24]
   27d54:	4630      	mov	r0, r6
   27d56:	4798      	blx	r3
   27d58:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   27d5a:	f1b8 0f00 	cmp.w	r8, #0
   27d5e:	d036      	beq.n	27dce <drop_item_locked+0xac>
		if (item->hdr.busy) {
   27d60:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   27d64:	079b      	lsls	r3, r3, #30
   27d66:	d52f      	bpl.n	27dc8 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   27d68:	f10b 0101 	add.w	r1, fp, #1
   27d6c:	4620      	mov	r0, r4
   27d6e:	f7ff ffb1 	bl	27cd4 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27d72:	6861      	ldr	r1, [r4, #4]
   27d74:	462a      	mov	r2, r5
   27d76:	4620      	mov	r0, r4
   27d78:	f7ff ff9e 	bl	27cb8 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27d7c:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27d7e:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27d80:	462a      	mov	r2, r5
   27d82:	4620      	mov	r0, r4
   27d84:	f7ff ff98 	bl	27cb8 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27d88:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   27d8a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27d8c:	68e1      	ldr	r1, [r4, #12]
   27d8e:	4620      	mov	r0, r4
   27d90:	f7ff ff92 	bl	27cb8 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27d94:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   27d96:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   27d9a:	f002 0203 	and.w	r2, r2, #3
   27d9e:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   27da0:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27da4:	d10c      	bne.n	27dc0 <drop_item_locked+0x9e>
		return item->skip.len;
   27da6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   27daa:	089b      	lsrs	r3, r3, #2
   27dac:	d008      	beq.n	27dc0 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   27dae:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   27db0:	68e1      	ldr	r1, [r4, #12]
   27db2:	462a      	mov	r2, r5
   27db4:	4620      	mov	r0, r4
   27db6:	f7ff ff7f 	bl	27cb8 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   27dba:	e9c4 0002 	strd	r0, r0, [r4, #8]
   27dbe:	e007      	b.n	27dd0 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   27dc0:	69a3      	ldr	r3, [r4, #24]
   27dc2:	4630      	mov	r0, r6
   27dc4:	4798      	blx	r3
   27dc6:	4405      	add	r5, r0
			*user_packet = true;
   27dc8:	2301      	movs	r3, #1
   27dca:	703b      	strb	r3, [r7, #0]
   27dcc:	e7f0      	b.n	27db0 <drop_item_locked+0x8e>
		item = NULL;
   27dce:	4646      	mov	r6, r8
	}

	return item;
}
   27dd0:	4630      	mov	r0, r6
   27dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027dd6 <mpsc_pbuf_init>:
{
   27dd6:	b538      	push	{r3, r4, r5, lr}
   27dd8:	460d      	mov	r5, r1
   27dda:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   27ddc:	221c      	movs	r2, #28
   27dde:	2100      	movs	r1, #0
   27de0:	f004 f916 	bl	2c010 <memset>
	buffer->get_wlen = cfg->get_wlen;
   27de4:	68eb      	ldr	r3, [r5, #12]
   27de6:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   27de8:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
   27dea:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
   27dec:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   27dee:	682b      	ldr	r3, [r5, #0]
   27df0:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   27df2:	2300      	movs	r3, #0
   27df4:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   27df6:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   27df8:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   27dfa:	b122      	cbz	r2, 27e06 <mpsc_pbuf_init+0x30>
   27dfc:	1e51      	subs	r1, r2, #1
   27dfe:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   27e00:	bf08      	it	eq
   27e02:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   27e06:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   27e08:	2201      	movs	r2, #1
   27e0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27e0e:	2100      	movs	r1, #0
}
   27e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27e14:	f003 bcbd 	b.w	2b792 <z_impl_k_sem_init>

00027e18 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   27e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e1c:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   27e1e:	6a03      	ldr	r3, [r0, #32]
   27e20:	3b01      	subs	r3, #1
   27e22:	428b      	cmp	r3, r1
{
   27e24:	b085      	sub	sp, #20
   27e26:	4604      	mov	r4, r0
   27e28:	460f      	mov	r7, r1
   27e2a:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   27e2c:	d367      	bcc.n	27efe <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
   27e2e:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   27e30:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   27e32:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   27e36:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e3a:	f3ef 8611 	mrs	r6, BASEPRI
   27e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   27e42:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   27e46:	a903      	add	r1, sp, #12
   27e48:	4620      	mov	r0, r4
   27e4a:	f7ff ff0f 	bl	27c6c <free_space>
		if (free_wlen >= wlen) {
   27e4e:	9903      	ldr	r1, [sp, #12]
   27e50:	42b9      	cmp	r1, r7
   27e52:	d324      	bcc.n	27e9e <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   27e54:	6821      	ldr	r1, [r4, #0]
			item =
   27e56:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   27e58:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   27e5c:	f022 0203 	bic.w	r2, r2, #3
   27e60:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   27e64:	4620      	mov	r0, r4
   27e66:	463a      	mov	r2, r7
			item =
   27e68:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   27e6c:	f7ff ff24 	bl	27cb8 <idx_inc>
		cont = false;
   27e70:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   27e72:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   27e74:	f386 8811 	msr	BASEPRI, r6
   27e78:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   27e7c:	2b00      	cmp	r3, #0
   27e7e:	d040      	beq.n	27f02 <mpsc_pbuf_alloc+0xea>
   27e80:	2d00      	cmp	r5, #0
   27e82:	d0d8      	beq.n	27e36 <mpsc_pbuf_alloc+0x1e>
   27e84:	f89d 300b 	ldrb.w	r3, [sp, #11]
   27e88:	2b00      	cmp	r3, #0
   27e8a:	d0d4      	beq.n	27e36 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   27e8c:	6963      	ldr	r3, [r4, #20]
   27e8e:	b123      	cbz	r3, 27e9a <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
   27e90:	4629      	mov	r1, r5
   27e92:	4620      	mov	r0, r4
   27e94:	4798      	blx	r3
			}
			dropped_item = NULL;
   27e96:	2500      	movs	r5, #0
   27e98:	e7cd      	b.n	27e36 <mpsc_pbuf_alloc+0x1e>
   27e9a:	461d      	mov	r5, r3
   27e9c:	e7cb      	b.n	27e36 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   27e9e:	b128      	cbz	r0, 27eac <mpsc_pbuf_alloc+0x94>
   27ea0:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   27ea2:	4620      	mov	r0, r4
   27ea4:	f7ff ff16 	bl	27cd4 <add_skip_item>
			cont = true;
   27ea8:	9b01      	ldr	r3, [sp, #4]
   27eaa:	e7e3      	b.n	27e74 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27eac:	ea58 0309 	orrs.w	r3, r8, r9
   27eb0:	d017      	beq.n	27ee2 <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
   27eb2:	f003 fb7e 	bl	2b5b2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   27eb6:	b9a0      	cbnz	r0, 27ee2 <mpsc_pbuf_alloc+0xca>
   27eb8:	f386 8811 	msr	BASEPRI, r6
   27ebc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   27ec0:	4642      	mov	r2, r8
   27ec2:	464b      	mov	r3, r9
   27ec4:	4658      	mov	r0, fp
   27ec6:	f7f9 fe2f 	bl	21b28 <z_impl_k_sem_take>
	__asm__ volatile(
   27eca:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ece:	f3ef 8611 	mrs	r6, BASEPRI
   27ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   27ed6:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   27eda:	fab0 f380 	clz	r3, r0
   27ede:	095b      	lsrs	r3, r3, #5
   27ee0:	e7c8      	b.n	27e74 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   27ee2:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   27ee4:	9903      	ldr	r1, [sp, #12]
   27ee6:	f10d 030b 	add.w	r3, sp, #11
   27eea:	f3c2 0240 	ubfx	r2, r2, #1, #1
   27eee:	4620      	mov	r0, r4
   27ef0:	f7ff ff17 	bl	27d22 <drop_item_locked>
			cont = dropped_item != NULL;
   27ef4:	1e03      	subs	r3, r0, #0
   27ef6:	4605      	mov	r5, r0
   27ef8:	bf18      	it	ne
   27efa:	2301      	movne	r3, #1
   27efc:	e7ba      	b.n	27e74 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   27efe:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   27f02:	4650      	mov	r0, sl
   27f04:	b005      	add	sp, #20
   27f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027f0a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   27f0a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   27f0c:	6983      	ldr	r3, [r0, #24]
{
   27f0e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27f10:	4608      	mov	r0, r1
{
   27f12:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27f14:	4798      	blx	r3
   27f16:	4602      	mov	r2, r0
   27f18:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f1c:	f3ef 8611 	mrs	r6, BASEPRI
   27f20:	f383 8812 	msr	BASEPRI_MAX, r3
   27f24:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   27f28:	782b      	ldrb	r3, [r5, #0]
   27f2a:	f043 0301 	orr.w	r3, r3, #1
   27f2e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27f30:	6861      	ldr	r1, [r4, #4]
   27f32:	4620      	mov	r0, r4
   27f34:	f7ff fec0 	bl	27cb8 <idx_inc>
   27f38:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   27f3a:	4620      	mov	r0, r4
   27f3c:	f7ff fee0 	bl	27d00 <max_utilization_update>
	__asm__ volatile(
   27f40:	f386 8811 	msr	BASEPRI, r6
   27f44:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   27f48:	bd70      	pop	{r4, r5, r6, pc}

00027f4a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   27f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f4e:	4604      	mov	r4, r0
	__asm__ volatile(
   27f50:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f54:	f3ef 8611 	mrs	r6, BASEPRI
   27f58:	f383 8812 	msr	BASEPRI_MAX, r3
   27f5c:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   27f60:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   27f64:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   27f66:	bf88      	it	hi
   27f68:	6a23      	ldrhi	r3, [r4, #32]
   27f6a:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   27f6c:	b1f3      	cbz	r3, 27fac <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   27f6e:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   27f70:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   27f74:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   27f78:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   27f7c:	d016      	beq.n	27fac <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   27f7e:	2b02      	cmp	r3, #2
   27f80:	d103      	bne.n	27f8a <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   27f82:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   27f86:	08ad      	lsrs	r5, r5, #2
   27f88:	d115      	bne.n	27fb6 <mpsc_pbuf_claim+0x6c>
   27f8a:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   27f8c:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   27f8e:	d50f      	bpl.n	27fb0 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   27f90:	f042 0202 	orr.w	r2, r2, #2
   27f94:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   27f98:	4640      	mov	r0, r8
   27f9a:	4798      	blx	r3
   27f9c:	4639      	mov	r1, r7
   27f9e:	4602      	mov	r2, r0
   27fa0:	4620      	mov	r0, r4
   27fa2:	f7ff fe89 	bl	27cb8 <idx_inc>
		cont = false;
   27fa6:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   27fa8:	60a0      	str	r0, [r4, #8]
   27faa:	e011      	b.n	27fd0 <mpsc_pbuf_claim+0x86>
			item = NULL;
   27fac:	4698      	mov	r8, r3
   27fae:	e00f      	b.n	27fd0 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   27fb0:	4640      	mov	r0, r8
   27fb2:	4798      	blx	r3
   27fb4:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   27fb6:	68a1      	ldr	r1, [r4, #8]
   27fb8:	462a      	mov	r2, r5
   27fba:	4620      	mov	r0, r4
   27fbc:	f7ff fe7c 	bl	27cb8 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   27fc0:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   27fc2:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   27fc4:	462a      	mov	r2, r5
   27fc6:	4620      	mov	r0, r4
   27fc8:	f7ff fe76 	bl	27cb8 <idx_inc>
				cont = true;
   27fcc:	2301      	movs	r3, #1
				buffer->rd_idx =
   27fce:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   27fd0:	f386 8811 	msr	BASEPRI, r6
   27fd4:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   27fd8:	2b00      	cmp	r3, #0
   27fda:	d1b9      	bne.n	27f50 <mpsc_pbuf_claim+0x6>

	return item;
}
   27fdc:	4640      	mov	r0, r8
   27fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027fe2 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   27fe2:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   27fe4:	6983      	ldr	r3, [r0, #24]
{
   27fe6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27fe8:	4608      	mov	r0, r1
{
   27fea:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27fec:	4798      	blx	r3
   27fee:	4602      	mov	r2, r0
	__asm__ volatile(
   27ff0:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ff4:	f3ef 8611 	mrs	r6, BASEPRI
   27ff8:	f383 8812 	msr	BASEPRI_MAX, r3
   27ffc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   28000:	782b      	ldrb	r3, [r5, #0]
   28002:	f36f 0300 	bfc	r3, #0, #1
   28006:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28008:	6923      	ldr	r3, [r4, #16]
   2800a:	079b      	lsls	r3, r3, #30
   2800c:	d505      	bpl.n	2801a <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2800e:	68e1      	ldr	r1, [r4, #12]
   28010:	69e3      	ldr	r3, [r4, #28]
   28012:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28016:	429d      	cmp	r5, r3
   28018:	d112      	bne.n	28040 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2801a:	782b      	ldrb	r3, [r5, #0]
   2801c:	f36f 0341 	bfc	r3, #1, #1
   28020:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   28022:	68e1      	ldr	r1, [r4, #12]
   28024:	4620      	mov	r0, r4
   28026:	f7ff fe47 	bl	27cb8 <idx_inc>
   2802a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2802c:	f386 8811 	msr	BASEPRI, r6
   28030:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   28034:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   28038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2803c:	f7f9 bd4e 	b.w	21adc <z_impl_k_sem_give>
		witem->skip.len = wlen;
   28040:	682b      	ldr	r3, [r5, #0]
   28042:	f360 039f 	bfi	r3, r0, #2, #30
   28046:	602b      	str	r3, [r5, #0]
   28048:	e7f0      	b.n	2802c <mpsc_pbuf_free+0x4a>

0002804a <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2804a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2804e:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   28050:	bf8a      	itet	hi
   28052:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   28054:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   28056:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   28058:	1e18      	subs	r0, r3, #0
   2805a:	bf18      	it	ne
   2805c:	2001      	movne	r0, #1
   2805e:	4770      	bx	lr

00028060 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   28060:	4770      	bx	lr

00028062 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   28062:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   28064:	075b      	lsls	r3, r3, #29
   28066:	d40b      	bmi.n	28080 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28068:	6803      	ldr	r3, [r0, #0]
   2806a:	8840      	ldrh	r0, [r0, #2]
   2806c:	f3c3 2349 	ubfx	r3, r3, #9, #10
   28070:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   28074:	4418      	add	r0, r3
   28076:	3017      	adds	r0, #23
   28078:	f020 0007 	bic.w	r0, r0, #7
   2807c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2807e:	4770      	bx	lr
	return 0;
   28080:	2000      	movs	r0, #0
}
   28082:	4770      	bx	lr

00028084 <dummy_timestamp>:
}
   28084:	2000      	movs	r0, #0
   28086:	4770      	bx	lr

00028088 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   28088:	f002 bf3f 	b.w	2af0a <sys_clock_cycle_get_32>

0002808c <z_log_vprintk>:
{
   2808c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2808e:	2300      	movs	r3, #0
   28090:	e9cd 0102 	strd	r0, r1, [sp, #8]
   28094:	e9cd 3300 	strd	r3, r3, [sp]
   28098:	461a      	mov	r2, r3
   2809a:	4619      	mov	r1, r3
   2809c:	4618      	mov	r0, r3
   2809e:	f7eb fe43 	bl	13d28 <z_impl_z_log_msg_runtime_vcreate>
}
   280a2:	b005      	add	sp, #20
   280a4:	f85d fb04 	ldr.w	pc, [sp], #4

000280a8 <notify_drop>:
	z_log_dropped(true);
   280a8:	2001      	movs	r0, #1
   280aa:	f7eb bc3d 	b.w	13928 <z_log_dropped>

000280ae <z_log_get_tag>:
}
   280ae:	2000      	movs	r0, #0
   280b0:	4770      	bx	lr

000280b2 <z_cbprintf_cpy>:
{
   280b2:	b570      	push	{r4, r5, r6, lr}
   280b4:	4603      	mov	r3, r0
   280b6:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   280b8:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
   280bc:	1a12      	subs	r2, r2, r0
   280be:	428a      	cmp	r2, r1
{
   280c0:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
   280c2:	d30a      	bcc.n	280da <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   280c4:	682e      	ldr	r6, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   280c6:	460a      	mov	r2, r1
   280c8:	4430      	add	r0, r6
   280ca:	4619      	mov	r1, r3
   280cc:	f003 ff7f 	bl	2bfce <memcpy>
	desc->off += len;
   280d0:	68ab      	ldr	r3, [r5, #8]
   280d2:	4423      	add	r3, r4
   280d4:	60ab      	str	r3, [r5, #8]
	return len;
   280d6:	4620      	mov	r0, r4
}
   280d8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   280da:	f06f 001b 	mvn.w	r0, #27
   280de:	e7fb      	b.n	280d8 <z_cbprintf_cpy+0x26>

000280e0 <z_log_msg_finalize>:
{
   280e0:	b570      	push	{r4, r5, r6, lr}
   280e2:	460e      	mov	r6, r1
   280e4:	4615      	mov	r5, r2
   280e6:	4619      	mov	r1, r3
	if (!msg) {
   280e8:	4604      	mov	r4, r0
   280ea:	b918      	cbnz	r0, 280f4 <z_log_msg_finalize+0x14>
}
   280ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   280f0:	f7eb bc1a 	b.w	13928 <z_log_dropped>
	if (data) {
   280f4:	b143      	cbz	r3, 28108 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   280f6:	f100 0310 	add.w	r3, r0, #16
   280fa:	f3c2 2049 	ubfx	r0, r2, #9, #10
   280fe:	4418      	add	r0, r3
   28100:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   28104:	f003 ff63 	bl	2bfce <memcpy>
	msg->hdr.source = source;
   28108:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2810c:	4620      	mov	r0, r4
}
   2810e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   28112:	f7eb bd47 	b.w	13ba4 <z_log_msg_commit>

00028116 <buffer_write>:
{
   28116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28118:	4606      	mov	r6, r0
   2811a:	460d      	mov	r5, r1
   2811c:	4614      	mov	r4, r2
   2811e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28120:	4621      	mov	r1, r4
   28122:	4628      	mov	r0, r5
   28124:	463a      	mov	r2, r7
   28126:	47b0      	blx	r6
	} while (len != 0);
   28128:	1a24      	subs	r4, r4, r0
		buf += processed;
   2812a:	4405      	add	r5, r0
	} while (len != 0);
   2812c:	d1f8      	bne.n	28120 <buffer_write+0xa>
}
   2812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028130 <cbvprintf>:
{
   28130:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   28132:	2400      	movs	r4, #0
   28134:	9400      	str	r4, [sp, #0]
   28136:	f7ea ff75 	bl	13024 <z_cbvprintf_impl>
}
   2813a:	b002      	add	sp, #8
   2813c:	bd10      	pop	{r4, pc}

0002813e <log_output_flush>:
		     output->control_block->offset,
   2813e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   28140:	6881      	ldr	r1, [r0, #8]
{
   28142:	b510      	push	{r4, lr}
   28144:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28146:	e9d2 2300 	ldrd	r2, r3, [r2]
   2814a:	6800      	ldr	r0, [r0, #0]
   2814c:	f7ff ffe3 	bl	28116 <buffer_write>
	output->control_block->offset = 0;
   28150:	6863      	ldr	r3, [r4, #4]
   28152:	2200      	movs	r2, #0
   28154:	601a      	str	r2, [r3, #0]
}
   28156:	bd10      	pop	{r4, pc}

00028158 <out_func>:
{
   28158:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2815a:	684b      	ldr	r3, [r1, #4]
   2815c:	681a      	ldr	r2, [r3, #0]
   2815e:	68cb      	ldr	r3, [r1, #12]
   28160:	429a      	cmp	r2, r3
{
   28162:	4605      	mov	r5, r0
   28164:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   28166:	d102      	bne.n	2816e <out_func+0x16>
		log_output_flush(out_ctx);
   28168:	4608      	mov	r0, r1
   2816a:	f7ff ffe8 	bl	2813e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2816e:	6863      	ldr	r3, [r4, #4]
   28170:	f3bf 8f5b 	dmb	ish
   28174:	e853 2f00 	ldrex	r2, [r3]
   28178:	1c51      	adds	r1, r2, #1
   2817a:	e843 1000 	strex	r0, r1, [r3]
   2817e:	2800      	cmp	r0, #0
   28180:	d1f8      	bne.n	28174 <out_func+0x1c>
   28182:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   28186:	68a3      	ldr	r3, [r4, #8]
   28188:	549d      	strb	r5, [r3, r2]
}
   2818a:	2000      	movs	r0, #0
   2818c:	bd38      	pop	{r3, r4, r5, pc}

0002818e <cr_out_func>:
{
   2818e:	b538      	push	{r3, r4, r5, lr}
   28190:	4605      	mov	r5, r0
   28192:	460c      	mov	r4, r1
	out_func(c, ctx);
   28194:	f7ff ffe0 	bl	28158 <out_func>
	if (c == '\n') {
   28198:	2d0a      	cmp	r5, #10
   2819a:	d103      	bne.n	281a4 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   2819c:	4621      	mov	r1, r4
   2819e:	200d      	movs	r0, #13
   281a0:	f7ff ffda 	bl	28158 <out_func>
}
   281a4:	2000      	movs	r0, #0
   281a6:	bd38      	pop	{r3, r4, r5, pc}

000281a8 <read_str>:
{
   281a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   281ac:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   281b0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   281b2:	4640      	mov	r0, r8
{
   281b4:	461f      	mov	r7, r3
   281b6:	460c      	mov	r4, r1
   281b8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   281ba:	f7e4 fbac 	bl	c916 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   281be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   281c2:	9300      	str	r3, [sp, #0]
   281c4:	b280      	uxth	r0, r0
   281c6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   281ca:	463b      	mov	r3, r7
   281cc:	4632      	mov	r2, r6
   281ce:	4621      	mov	r1, r4
   281d0:	4628      	mov	r0, r5
   281d2:	f001 fe35 	bl	29e40 <bt_gatt_attr_read>
}
   281d6:	b004      	add	sp, #16
   281d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000281dc <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   281dc:	2000      	movs	r0, #0
   281de:	4770      	bx	lr

000281e0 <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   281e0:	2200      	movs	r2, #0
   281e2:	4611      	mov	r1, r2
   281e4:	f7ec b982 	b.w	144ec <settings_save_one>

000281e8 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   281e8:	4603      	mov	r3, r0
   281ea:	b530      	push	{r4, r5, lr}
   281ec:	4608      	mov	r0, r1
	if (next) {
   281ee:	b10a      	cbz	r2, 281f4 <settings_name_steq+0xc>
		*next = NULL;
   281f0:	2100      	movs	r1, #0
   281f2:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   281f4:	b163      	cbz	r3, 28210 <settings_name_steq+0x28>
   281f6:	b190      	cbz	r0, 2821e <settings_name_steq+0x36>
   281f8:	1e41      	subs	r1, r0, #1
   281fa:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   281fc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   28200:	4604      	mov	r4, r0
   28202:	f810 3b01 	ldrb.w	r3, [r0], #1
   28206:	b15d      	cbz	r5, 28220 <settings_name_steq+0x38>
   28208:	429d      	cmp	r5, r3
   2820a:	d101      	bne.n	28210 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2820c:	2d3d      	cmp	r5, #61	; 0x3d
   2820e:	d1f5      	bne.n	281fc <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   28210:	2000      	movs	r0, #0
   28212:	e004      	b.n	2821e <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   28214:	2b3d      	cmp	r3, #61	; 0x3d
   28216:	d008      	beq.n	2822a <settings_name_steq+0x42>
   28218:	fab3 f083 	clz	r0, r3
   2821c:	0940      	lsrs	r0, r0, #5
}
   2821e:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   28220:	2b2f      	cmp	r3, #47	; 0x2f
   28222:	d1f7      	bne.n	28214 <settings_name_steq+0x2c>
		if (next) {
   28224:	b10a      	cbz	r2, 2822a <settings_name_steq+0x42>
			*next = name + 1;
   28226:	3401      	adds	r4, #1
   28228:	6014      	str	r4, [r2, #0]
		return 1;
   2822a:	2001      	movs	r0, #1
   2822c:	e7f7      	b.n	2821e <settings_name_steq+0x36>

0002822e <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   2822e:	b530      	push	{r4, r5, lr}
   28230:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   28232:	b109      	cbz	r1, 28238 <settings_name_next+0xa>
		*next = NULL;
   28234:	2200      	movs	r2, #0
   28236:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   28238:	b16b      	cbz	r3, 28256 <settings_name_next+0x28>
   2823a:	461a      	mov	r2, r3
   2823c:	4614      	mov	r4, r2
   2823e:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   28240:	f812 5b01 	ldrb.w	r5, [r2], #1
   28244:	b135      	cbz	r5, 28254 <settings_name_next+0x26>
   28246:	2d3d      	cmp	r5, #61	; 0x3d
   28248:	d004      	beq.n	28254 <settings_name_next+0x26>
   2824a:	2d2f      	cmp	r5, #47	; 0x2f
   2824c:	d1f6      	bne.n	2823c <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   2824e:	b109      	cbz	r1, 28254 <settings_name_next+0x26>
			*next = name + 1;
   28250:	3401      	adds	r4, #1
   28252:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   28254:	bd30      	pop	{r4, r5, pc}
		return 0;
   28256:	4618      	mov	r0, r3
   28258:	e7fc      	b.n	28254 <settings_name_next+0x26>

0002825a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2825a:	b538      	push	{r3, r4, r5, lr}
   2825c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2825e:	42ab      	cmp	r3, r5
{
   28260:	4611      	mov	r1, r2
   28262:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28264:	d804      	bhi.n	28270 <_copy+0x16>
   28266:	461a      	mov	r2, r3
   28268:	f003 feb1 	bl	2bfce <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2826c:	4620      	mov	r0, r4
   2826e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   28270:	2400      	movs	r4, #0
   28272:	e7fb      	b.n	2826c <_copy+0x12>

00028274 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   28274:	f003 becc 	b.w	2c010 <memset>

00028278 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28278:	09c3      	lsrs	r3, r0, #7
   2827a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2827e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28282:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28286:	b2c0      	uxtb	r0, r0
   28288:	4770      	bx	lr

0002828a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2828a:	78cb      	ldrb	r3, [r1, #3]
   2828c:	7802      	ldrb	r2, [r0, #0]
   2828e:	4053      	eors	r3, r2
   28290:	7003      	strb	r3, [r0, #0]
   28292:	884b      	ldrh	r3, [r1, #2]
   28294:	7842      	ldrb	r2, [r0, #1]
   28296:	4053      	eors	r3, r2
   28298:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2829a:	680a      	ldr	r2, [r1, #0]
   2829c:	7883      	ldrb	r3, [r0, #2]
   2829e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   282a2:	7083      	strb	r3, [r0, #2]
   282a4:	680a      	ldr	r2, [r1, #0]
   282a6:	78c3      	ldrb	r3, [r0, #3]
   282a8:	4053      	eors	r3, r2
   282aa:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   282ac:	79cb      	ldrb	r3, [r1, #7]
   282ae:	7902      	ldrb	r2, [r0, #4]
   282b0:	4053      	eors	r3, r2
   282b2:	7103      	strb	r3, [r0, #4]
   282b4:	88cb      	ldrh	r3, [r1, #6]
   282b6:	7942      	ldrb	r2, [r0, #5]
   282b8:	4053      	eors	r3, r2
   282ba:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   282bc:	684a      	ldr	r2, [r1, #4]
   282be:	7983      	ldrb	r3, [r0, #6]
   282c0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   282c4:	7183      	strb	r3, [r0, #6]
   282c6:	684a      	ldr	r2, [r1, #4]
   282c8:	79c3      	ldrb	r3, [r0, #7]
   282ca:	4053      	eors	r3, r2
   282cc:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   282ce:	7acb      	ldrb	r3, [r1, #11]
   282d0:	7a02      	ldrb	r2, [r0, #8]
   282d2:	4053      	eors	r3, r2
   282d4:	7203      	strb	r3, [r0, #8]
   282d6:	7a42      	ldrb	r2, [r0, #9]
   282d8:	894b      	ldrh	r3, [r1, #10]
   282da:	4053      	eors	r3, r2
   282dc:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   282de:	688a      	ldr	r2, [r1, #8]
   282e0:	7a83      	ldrb	r3, [r0, #10]
   282e2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   282e6:	7283      	strb	r3, [r0, #10]
   282e8:	688a      	ldr	r2, [r1, #8]
   282ea:	7ac3      	ldrb	r3, [r0, #11]
   282ec:	4053      	eors	r3, r2
   282ee:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   282f0:	7bcb      	ldrb	r3, [r1, #15]
   282f2:	7b02      	ldrb	r2, [r0, #12]
   282f4:	4053      	eors	r3, r2
   282f6:	7303      	strb	r3, [r0, #12]
   282f8:	89cb      	ldrh	r3, [r1, #14]
   282fa:	7b42      	ldrb	r2, [r0, #13]
   282fc:	4053      	eors	r3, r2
   282fe:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   28300:	68ca      	ldr	r2, [r1, #12]
   28302:	7b83      	ldrb	r3, [r0, #14]
   28304:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28308:	7383      	strb	r3, [r0, #14]
   2830a:	68ca      	ldr	r2, [r1, #12]
   2830c:	7bc3      	ldrb	r3, [r0, #15]
   2830e:	4053      	eors	r3, r2
   28310:	73c3      	strb	r3, [r0, #15]
}
   28312:	4770      	bx	lr

00028314 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   28314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28316:	7802      	ldrb	r2, [r0, #0]
   28318:	f88d 2000 	strb.w	r2, [sp]
   2831c:	7942      	ldrb	r2, [r0, #5]
   2831e:	f88d 2001 	strb.w	r2, [sp, #1]
   28322:	7a82      	ldrb	r2, [r0, #10]
   28324:	f88d 2002 	strb.w	r2, [sp, #2]
   28328:	7bc2      	ldrb	r2, [r0, #15]
   2832a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2832e:	7902      	ldrb	r2, [r0, #4]
   28330:	f88d 2004 	strb.w	r2, [sp, #4]
   28334:	7a42      	ldrb	r2, [r0, #9]
   28336:	f88d 2005 	strb.w	r2, [sp, #5]
   2833a:	7b82      	ldrb	r2, [r0, #14]
   2833c:	f88d 2006 	strb.w	r2, [sp, #6]
   28340:	78c2      	ldrb	r2, [r0, #3]
   28342:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   28346:	7a02      	ldrb	r2, [r0, #8]
   28348:	f88d 2008 	strb.w	r2, [sp, #8]
   2834c:	7b42      	ldrb	r2, [r0, #13]
   2834e:	f88d 2009 	strb.w	r2, [sp, #9]
   28352:	7882      	ldrb	r2, [r0, #2]
   28354:	f88d 200a 	strb.w	r2, [sp, #10]
   28358:	79c2      	ldrb	r2, [r0, #7]
   2835a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2835e:	7b02      	ldrb	r2, [r0, #12]
   28360:	f88d 200c 	strb.w	r2, [sp, #12]
   28364:	7842      	ldrb	r2, [r0, #1]
   28366:	7ac3      	ldrb	r3, [r0, #11]
   28368:	f88d 200d 	strb.w	r2, [sp, #13]
   2836c:	7982      	ldrb	r2, [r0, #6]
   2836e:	f88d 200e 	strb.w	r2, [sp, #14]
   28372:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28376:	2310      	movs	r3, #16
   28378:	466a      	mov	r2, sp
   2837a:	4619      	mov	r1, r3
   2837c:	f7ff ff6d 	bl	2825a <_copy>
}
   28380:	b005      	add	sp, #20
   28382:	f85d fb04 	ldr.w	pc, [sp], #4

00028386 <mult_row_column>:
{
   28386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28388:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2838a:	7808      	ldrb	r0, [r1, #0]
{
   2838c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2838e:	f7ff ff73 	bl	28278 <_double_byte>
   28392:	4605      	mov	r5, r0
   28394:	7860      	ldrb	r0, [r4, #1]
   28396:	f7ff ff6f 	bl	28278 <_double_byte>
   2839a:	78a2      	ldrb	r2, [r4, #2]
   2839c:	7863      	ldrb	r3, [r4, #1]
   2839e:	4053      	eors	r3, r2
   283a0:	78e2      	ldrb	r2, [r4, #3]
   283a2:	4053      	eors	r3, r2
   283a4:	405d      	eors	r5, r3
   283a6:	4045      	eors	r5, r0
   283a8:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   283aa:	7860      	ldrb	r0, [r4, #1]
   283ac:	7827      	ldrb	r7, [r4, #0]
   283ae:	f7ff ff63 	bl	28278 <_double_byte>
   283b2:	4605      	mov	r5, r0
   283b4:	78a0      	ldrb	r0, [r4, #2]
   283b6:	f7ff ff5f 	bl	28278 <_double_byte>
   283ba:	78a3      	ldrb	r3, [r4, #2]
   283bc:	405f      	eors	r7, r3
   283be:	78e3      	ldrb	r3, [r4, #3]
   283c0:	405f      	eors	r7, r3
   283c2:	407d      	eors	r5, r7
   283c4:	4045      	eors	r5, r0
   283c6:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   283c8:	78a0      	ldrb	r0, [r4, #2]
   283ca:	7865      	ldrb	r5, [r4, #1]
   283cc:	7827      	ldrb	r7, [r4, #0]
   283ce:	f7ff ff53 	bl	28278 <_double_byte>
   283d2:	406f      	eors	r7, r5
   283d4:	4605      	mov	r5, r0
   283d6:	78e0      	ldrb	r0, [r4, #3]
   283d8:	f7ff ff4e 	bl	28278 <_double_byte>
   283dc:	78e3      	ldrb	r3, [r4, #3]
   283de:	405f      	eors	r7, r3
   283e0:	407d      	eors	r5, r7
   283e2:	4045      	eors	r5, r0
   283e4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   283e6:	7820      	ldrb	r0, [r4, #0]
   283e8:	f7ff ff46 	bl	28278 <_double_byte>
   283ec:	7863      	ldrb	r3, [r4, #1]
   283ee:	7825      	ldrb	r5, [r4, #0]
   283f0:	405d      	eors	r5, r3
   283f2:	78a3      	ldrb	r3, [r4, #2]
   283f4:	405d      	eors	r5, r3
   283f6:	4045      	eors	r5, r0
   283f8:	78e0      	ldrb	r0, [r4, #3]
   283fa:	f7ff ff3d 	bl	28278 <_double_byte>
   283fe:	b2ed      	uxtb	r5, r5
   28400:	4045      	eors	r5, r0
   28402:	70f5      	strb	r5, [r6, #3]
}
   28404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028406 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   28406:	b570      	push	{r4, r5, r6, lr}
   28408:	4614      	mov	r4, r2
   2840a:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2840c:	4605      	mov	r5, r0
   2840e:	2800      	cmp	r0, #0
   28410:	d049      	beq.n	284a6 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   28412:	2900      	cmp	r1, #0
   28414:	d049      	beq.n	284aa <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   28416:	2a00      	cmp	r2, #0
   28418:	d049      	beq.n	284ae <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2841a:	2310      	movs	r3, #16
   2841c:	460a      	mov	r2, r1
   2841e:	4668      	mov	r0, sp
   28420:	4619      	mov	r1, r3
   28422:	f7ff ff1a 	bl	2825a <_copy>
	add_round_key(state, s->words);
   28426:	4621      	mov	r1, r4
   28428:	4668      	mov	r0, sp
   2842a:	f7ff ff2e 	bl	2828a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2842e:	3410      	adds	r4, #16
   28430:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   28434:	4668      	mov	r0, sp
   28436:	f7ec f9d3 	bl	147e0 <sub_bytes>
		shift_rows(state);
   2843a:	4668      	mov	r0, sp
   2843c:	f7ff ff6a 	bl	28314 <shift_rows>
	mult_row_column(t, s);
   28440:	4669      	mov	r1, sp
   28442:	a804      	add	r0, sp, #16
   28444:	f7ff ff9f 	bl	28386 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   28448:	a901      	add	r1, sp, #4
   2844a:	a805      	add	r0, sp, #20
   2844c:	f7ff ff9b 	bl	28386 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   28450:	a902      	add	r1, sp, #8
   28452:	a806      	add	r0, sp, #24
   28454:	f7ff ff97 	bl	28386 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28458:	a903      	add	r1, sp, #12
   2845a:	a807      	add	r0, sp, #28
   2845c:	f7ff ff93 	bl	28386 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28460:	2310      	movs	r3, #16
   28462:	4619      	mov	r1, r3
   28464:	eb0d 0203 	add.w	r2, sp, r3
   28468:	4668      	mov	r0, sp
   2846a:	f7ff fef6 	bl	2825a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2846e:	4621      	mov	r1, r4
   28470:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   28472:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   28474:	f7ff ff09 	bl	2828a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   28478:	42a6      	cmp	r6, r4
   2847a:	d1db      	bne.n	28434 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2847c:	f7ec f9b0 	bl	147e0 <sub_bytes>
	shift_rows(state);
   28480:	4668      	mov	r0, sp
   28482:	f7ff ff47 	bl	28314 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   28486:	4631      	mov	r1, r6
   28488:	4668      	mov	r0, sp
   2848a:	f7ff fefe 	bl	2828a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2848e:	2310      	movs	r3, #16
   28490:	4619      	mov	r1, r3
   28492:	466a      	mov	r2, sp
   28494:	4628      	mov	r0, r5
   28496:	f7ff fee0 	bl	2825a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2849a:	4668      	mov	r0, sp
   2849c:	2210      	movs	r2, #16
   2849e:	2100      	movs	r1, #0
   284a0:	f7ff fee8 	bl	28274 <_set>

	return TC_CRYPTO_SUCCESS;
   284a4:	2001      	movs	r0, #1
}
   284a6:	b008      	add	sp, #32
   284a8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   284aa:	4608      	mov	r0, r1
   284ac:	e7fb      	b.n	284a6 <tc_aes_encrypt+0xa0>
   284ae:	4610      	mov	r0, r2
   284b0:	e7f9      	b.n	284a6 <tc_aes_encrypt+0xa0>

000284b2 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   284b2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   284b4:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   284b6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   284b8:	f912 3b10 	ldrsb.w	r3, [r2], #16
   284bc:	2b00      	cmp	r3, #0
   284be:	bfb4      	ite	lt
   284c0:	2387      	movlt	r3, #135	; 0x87
   284c2:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   284c4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   284c8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   284cc:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   284ce:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   284d2:	d002      	beq.n	284da <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   284d4:	7813      	ldrb	r3, [r2, #0]
   284d6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   284d8:	e7f4      	b.n	284c4 <gf_double+0x12>
	}
}
   284da:	bd10      	pop	{r4, pc}

000284dc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   284dc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   284de:	b120      	cbz	r0, 284ea <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   284e0:	2258      	movs	r2, #88	; 0x58
   284e2:	2100      	movs	r1, #0
   284e4:	f7ff fec6 	bl	28274 <_set>
   284e8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   284ea:	bd08      	pop	{r3, pc}

000284ec <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   284ec:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   284ee:	4604      	mov	r4, r0
   284f0:	b188      	cbz	r0, 28516 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   284f2:	2210      	movs	r2, #16
   284f4:	2100      	movs	r1, #0
   284f6:	f7ff febd 	bl	28274 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   284fa:	2210      	movs	r2, #16
   284fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28500:	2100      	movs	r1, #0
   28502:	f7ff feb7 	bl	28274 <_set>
	s->leftover_offset = 0;
   28506:	2300      	movs	r3, #0
   28508:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2850a:	2200      	movs	r2, #0
   2850c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28510:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   28514:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28516:	bd10      	pop	{r4, pc}

00028518 <tc_cmac_setup>:
{
   28518:	b570      	push	{r4, r5, r6, lr}
   2851a:	460d      	mov	r5, r1
   2851c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2851e:	4604      	mov	r4, r0
   28520:	b310      	cbz	r0, 28568 <tc_cmac_setup+0x50>
   28522:	b311      	cbz	r1, 2856a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   28524:	2258      	movs	r2, #88	; 0x58
   28526:	2100      	movs	r1, #0
   28528:	f7ff fea4 	bl	28274 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2852c:	4629      	mov	r1, r5
	s->sched = sched;
   2852e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   28530:	4630      	mov	r0, r6
   28532:	f7ec f961 	bl	147f8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28536:	2210      	movs	r2, #16
   28538:	2100      	movs	r1, #0
   2853a:	4620      	mov	r0, r4
   2853c:	f7ff fe9a 	bl	28274 <_set>
	gf_double (s->K1, s->iv);
   28540:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   28544:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28546:	4621      	mov	r1, r4
   28548:	4620      	mov	r0, r4
   2854a:	f7ff ff5c 	bl	28406 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2854e:	4621      	mov	r1, r4
   28550:	4628      	mov	r0, r5
   28552:	f7ff ffae 	bl	284b2 <gf_double>
	gf_double (s->K2, s->K1);
   28556:	4629      	mov	r1, r5
   28558:	f104 0020 	add.w	r0, r4, #32
   2855c:	f7ff ffa9 	bl	284b2 <gf_double>
	tc_cmac_init(s);
   28560:	4620      	mov	r0, r4
   28562:	f7ff ffc3 	bl	284ec <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   28566:	2001      	movs	r0, #1
}
   28568:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2856a:	4608      	mov	r0, r1
   2856c:	e7fc      	b.n	28568 <tc_cmac_setup+0x50>

0002856e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28572:	460d      	mov	r5, r1
   28574:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28576:	4604      	mov	r4, r0
   28578:	2800      	cmp	r0, #0
   2857a:	d061      	beq.n	28640 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2857c:	b912      	cbnz	r2, 28584 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2857e:	2001      	movs	r0, #1
}
   28580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   28584:	2900      	cmp	r1, #0
   28586:	d05b      	beq.n	28640 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   28588:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2858c:	ea53 0102 	orrs.w	r1, r3, r2
   28590:	d056      	beq.n	28640 <tc_cmac_update+0xd2>
	s->countdown--;
   28592:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   28594:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   28598:	f142 32ff 	adc.w	r2, r2, #4294967295
   2859c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   285a0:	f1b8 0f00 	cmp.w	r8, #0
   285a4:	d02a      	beq.n	285fc <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   285a6:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   285aa:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   285ae:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   285b0:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   285b2:	d208      	bcs.n	285c6 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   285b4:	462a      	mov	r2, r5
   285b6:	4633      	mov	r3, r6
   285b8:	4631      	mov	r1, r6
   285ba:	f7ff fe4e 	bl	2825a <_copy>
			s->leftover_offset += data_length;
   285be:	6c62      	ldr	r2, [r4, #68]	; 0x44
   285c0:	4432      	add	r2, r6
   285c2:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   285c4:	e7db      	b.n	2857e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   285c6:	463b      	mov	r3, r7
   285c8:	462a      	mov	r2, r5
   285ca:	4639      	mov	r1, r7
   285cc:	f7ff fe45 	bl	2825a <_copy>
		data_length -= remaining_space;
   285d0:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   285d2:	2300      	movs	r3, #0
   285d4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   285d6:	4446      	add	r6, r8
		data += remaining_space;
   285d8:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   285da:	1e63      	subs	r3, r4, #1
   285dc:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   285e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   285e4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   285e8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   285ea:	ea82 0200 	eor.w	r2, r2, r0
   285ee:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   285f0:	d1f6      	bne.n	285e0 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   285f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   285f4:	4621      	mov	r1, r4
   285f6:	4620      	mov	r0, r4
   285f8:	f7ff ff05 	bl	28406 <tc_aes_encrypt>
   285fc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   28600:	2e10      	cmp	r6, #16
   28602:	d80a      	bhi.n	2861a <tc_cmac_update+0xac>
	if (data_length > 0) {
   28604:	2e00      	cmp	r6, #0
   28606:	d0ba      	beq.n	2857e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   28608:	4633      	mov	r3, r6
   2860a:	462a      	mov	r2, r5
   2860c:	4631      	mov	r1, r6
   2860e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28612:	f7ff fe22 	bl	2825a <_copy>
		s->leftover_offset = data_length;
   28616:	6466      	str	r6, [r4, #68]	; 0x44
   28618:	e7b1      	b.n	2857e <tc_cmac_update+0x10>
   2861a:	1e63      	subs	r3, r4, #1
   2861c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2861e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28622:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28626:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   28628:	ea82 0200 	eor.w	r2, r2, r0
   2862c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2862e:	d1f6      	bne.n	2861e <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28630:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28632:	4621      	mov	r1, r4
   28634:	4620      	mov	r0, r4
   28636:	f7ff fee6 	bl	28406 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2863a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2863c:	3e10      	subs	r6, #16
   2863e:	e7df      	b.n	28600 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   28640:	2000      	movs	r0, #0
   28642:	e79d      	b.n	28580 <tc_cmac_update+0x12>

00028644 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   28644:	b570      	push	{r4, r5, r6, lr}
   28646:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   28648:	4605      	mov	r5, r0
   2864a:	b1e8      	cbz	r0, 28688 <tc_cmac_final+0x44>
   2864c:	b369      	cbz	r1, 286aa <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2864e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   28650:	2a10      	cmp	r2, #16
   28652:	d11a      	bne.n	2868a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   28654:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28656:	1e63      	subs	r3, r4, #1
   28658:	3901      	subs	r1, #1
   2865a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2865e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28662:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   28666:	4072      	eors	r2, r6
   28668:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2866c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2866e:	ea82 0206 	eor.w	r2, r2, r6
   28672:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28674:	d1f3      	bne.n	2865e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   28676:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28678:	4621      	mov	r1, r4
   2867a:	4628      	mov	r0, r5
   2867c:	f7ff fec3 	bl	28406 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   28680:	4620      	mov	r0, r4
   28682:	f7ff ff2b 	bl	284dc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28686:	2001      	movs	r0, #1
}
   28688:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2868a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2868e:	2100      	movs	r1, #0
   28690:	f1c2 0210 	rsb	r2, r2, #16
   28694:	4420      	add	r0, r4
   28696:	f7ff fded 	bl	28274 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2869a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2869c:	4423      	add	r3, r4
   2869e:	2280      	movs	r2, #128	; 0x80
   286a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   286a4:	f104 0120 	add.w	r1, r4, #32
   286a8:	e7d5      	b.n	28656 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   286aa:	4608      	mov	r0, r1
   286ac:	e7ec      	b.n	28688 <tc_cmac_final+0x44>

000286ae <abort_function>:
{
   286ae:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   286b0:	2000      	movs	r0, #0
   286b2:	f7eb f855 	bl	13760 <sys_reboot>

000286b6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   286b6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   286b8:	6800      	ldr	r0, [r0, #0]
   286ba:	f7ec b9d7 	b.w	14a6c <z_arm_fatal_error>

000286be <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   286be:	2100      	movs	r1, #0
   286c0:	2001      	movs	r0, #1
   286c2:	f7ec b9d3 	b.w	14a6c <z_arm_fatal_error>

000286c6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   286c6:	b508      	push	{r3, lr}
	handler();
   286c8:	f7ec fa90 	bl	14bec <z_SysNmiOnReset>
	z_arm_int_exit();
}
   286cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   286d0:	f7ec bb48 	b.w	14d64 <z_arm_exc_exit>

000286d4 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   286d4:	2300      	movs	r3, #0
   286d6:	f7eb bad3 	b.w	13c80 <z_impl_z_log_msg_static_create>

000286da <malloc_prepare>:
}
   286da:	2000      	movs	r0, #0
   286dc:	4770      	bx	lr

000286de <_stdout_hook_default>:
}
   286de:	f04f 30ff 	mov.w	r0, #4294967295
   286e2:	4770      	bx	lr

000286e4 <_stdin_hook_default>:
}
   286e4:	2000      	movs	r0, #0
   286e6:	4770      	bx	lr

000286e8 <_read>:
{
   286e8:	4608      	mov	r0, r1
   286ea:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   286ec:	f7ec bf74 	b.w	155d8 <z_impl_zephyr_read_stdin>

000286f0 <_write>:
{
   286f0:	4608      	mov	r0, r1
   286f2:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   286f4:	f7ec bf84 	b.w	15600 <z_impl_zephyr_write_stdout>

000286f8 <_close>:
   286f8:	f04f 30ff 	mov.w	r0, #4294967295
   286fc:	4770      	bx	lr

000286fe <_lseek>:
}
   286fe:	2000      	movs	r0, #0
   28700:	4770      	bx	lr

00028702 <_isatty>:
}
   28702:	2802      	cmp	r0, #2
   28704:	bfcc      	ite	gt
   28706:	2000      	movgt	r0, #0
   28708:	2001      	movle	r0, #1
   2870a:	4770      	bx	lr

0002870c <_fstat>:
	st->st_mode = S_IFCHR;
   2870c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   28710:	604b      	str	r3, [r1, #4]
}
   28712:	2000      	movs	r0, #0
   28714:	4770      	bx	lr

00028716 <__retarget_lock_init_recursive>:
{
   28716:	b510      	push	{r4, lr}
   28718:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2871a:	2014      	movs	r0, #20
   2871c:	f7fa fdb8 	bl	23290 <malloc>
   28720:	6020      	str	r0, [r4, #0]
}
   28722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   28726:	f002 bf60 	b.w	2b5ea <z_impl_k_mutex_init>

0002872a <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2872a:	f04f 32ff 	mov.w	r2, #4294967295
   2872e:	f04f 33ff 	mov.w	r3, #4294967295
   28732:	f7f9 b8eb 	b.w	2190c <z_impl_k_mutex_lock>

00028736 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   28736:	f7f9 b961 	b.w	219fc <z_impl_k_mutex_unlock>

0002873a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2873a:	2806      	cmp	r0, #6
   2873c:	d108      	bne.n	28750 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2873e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28742:	2201      	movs	r2, #1
   28744:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28748:	f3bf 8f4f 	dsb	sy
        __WFE();
   2874c:	bf20      	wfe
    while (true)
   2874e:	e7fd      	b.n	2874c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   28750:	4770      	bx	lr

00028752 <pm_state_exit_post_ops>:
   28752:	2300      	movs	r3, #0
   28754:	f383 8811 	msr	BASEPRI, r3
   28758:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2875c:	4770      	bx	lr

0002875e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2875e:	b530      	push	{r4, r5, lr}
   28760:	b085      	sub	sp, #20
   28762:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   28764:	880a      	ldrh	r2, [r1, #0]
   28766:	788b      	ldrb	r3, [r1, #2]
   28768:	f8ad 2000 	strh.w	r2, [sp]
{
   2876c:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   2876e:	220d      	movs	r2, #13
   28770:	2100      	movs	r1, #0
   28772:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   28776:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   2877a:	f003 fc49 	bl	2c010 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2877e:	466a      	mov	r2, sp
   28780:	4669      	mov	r1, sp
   28782:	4628      	mov	r0, r5
   28784:	f002 fc93 	bl	2b0ae <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   28788:	b928      	cbnz	r0, 28796 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2878a:	f8bd 2000 	ldrh.w	r2, [sp]
   2878e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   28792:	8022      	strh	r2, [r4, #0]
   28794:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   28796:	b005      	add	sp, #20
   28798:	bd30      	pop	{r4, r5, pc}

0002879a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2879a:	b513      	push	{r0, r1, r4, lr}
   2879c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2879e:	aa01      	add	r2, sp, #4
   287a0:	3103      	adds	r1, #3
   287a2:	f7ff ffdc 	bl	2875e <ah>
	if (err) {
   287a6:	b948      	cbnz	r0, 287bc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   287a8:	2203      	movs	r2, #3
   287aa:	a901      	add	r1, sp, #4
   287ac:	4620      	mov	r0, r4
   287ae:	f003 fbfe 	bl	2bfae <memcmp>
   287b2:	fab0 f080 	clz	r0, r0
   287b6:	0940      	lsrs	r0, r0, #5
}
   287b8:	b002      	add	sp, #8
   287ba:	bd10      	pop	{r4, pc}
		return false;
   287bc:	2000      	movs	r0, #0
   287be:	e7fb      	b.n	287b8 <bt_rpa_irk_matches+0x1e>

000287c0 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   287c0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   287c2:	1cce      	adds	r6, r1, #3
{
   287c4:	4605      	mov	r5, r0
   287c6:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   287c8:	4630      	mov	r0, r6
   287ca:	2103      	movs	r1, #3
   287cc:	f7f7 fb88 	bl	1fee0 <bt_rand>
	if (err) {
   287d0:	b960      	cbnz	r0, 287ec <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   287d2:	7963      	ldrb	r3, [r4, #5]
   287d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   287d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   287dc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   287de:	4622      	mov	r2, r4
   287e0:	4631      	mov	r1, r6
   287e2:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   287e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   287e8:	f7ff bfb9 	b.w	2875e <ah>
}
   287ec:	bd70      	pop	{r4, r5, r6, pc}

000287ee <z_log_msg_static_create.constprop.0>:
   287ee:	2300      	movs	r3, #0
   287f0:	f7eb ba46 	b.w	13c80 <z_impl_z_log_msg_static_create>

000287f4 <bt_settings_decode_key>:
{
   287f4:	b570      	push	{r4, r5, r6, lr}
   287f6:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   287f8:	2100      	movs	r1, #0
{
   287fa:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   287fc:	f7ff fd17 	bl	2822e <settings_name_next>
   28800:	280d      	cmp	r0, #13
   28802:	d118      	bne.n	28836 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   28804:	7b23      	ldrb	r3, [r4, #12]
   28806:	2b30      	cmp	r3, #48	; 0x30
   28808:	d111      	bne.n	2882e <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2880a:	2300      	movs	r3, #0
   2880c:	702b      	strb	r3, [r5, #0]
   2880e:	f104 060c 	add.w	r6, r4, #12
   28812:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   28814:	462a      	mov	r2, r5
   28816:	4620      	mov	r0, r4
   28818:	2301      	movs	r3, #1
   2881a:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2881c:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2881e:	f7fe fef1 	bl	27604 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   28822:	42b4      	cmp	r4, r6
   28824:	f105 35ff 	add.w	r5, r5, #4294967295
   28828:	d1f4      	bne.n	28814 <bt_settings_decode_key+0x20>
	return 0;
   2882a:	2000      	movs	r0, #0
}
   2882c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2882e:	2b31      	cmp	r3, #49	; 0x31
   28830:	d101      	bne.n	28836 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   28832:	2301      	movs	r3, #1
   28834:	e7ea      	b.n	2880c <bt_settings_decode_key+0x18>
		return -EINVAL;
   28836:	f06f 0015 	mvn.w	r0, #21
   2883a:	e7f7      	b.n	2882c <bt_settings_decode_key+0x38>

0002883c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2883c:	b510      	push	{r4, lr}
   2883e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   28840:	7801      	ldrb	r1, [r0, #0]
   28842:	7822      	ldrb	r2, [r4, #0]
   28844:	428a      	cmp	r2, r1
{
   28846:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   28848:	d00f      	beq.n	2886a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2884a:	4669      	mov	r1, sp
   2884c:	f7ed f97a 	bl	15b44 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   28850:	a905      	add	r1, sp, #20
   28852:	4620      	mov	r0, r4
   28854:	f7ed f976 	bl	15b44 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   28858:	2210      	movs	r2, #16
   2885a:	f10d 0115 	add.w	r1, sp, #21
   2885e:	f10d 0001 	add.w	r0, sp, #1
   28862:	f003 fba4 	bl	2bfae <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   28866:	b00a      	add	sp, #40	; 0x28
   28868:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2886a:	2a01      	cmp	r2, #1
   2886c:	d006      	beq.n	2887c <bt_uuid_cmp+0x40>
   2886e:	2a02      	cmp	r2, #2
   28870:	d007      	beq.n	28882 <bt_uuid_cmp+0x46>
   28872:	b972      	cbnz	r2, 28892 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   28874:	8840      	ldrh	r0, [r0, #2]
   28876:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28878:	1ac0      	subs	r0, r0, r3
   2887a:	e7f4      	b.n	28866 <bt_uuid_cmp+0x2a>
   2887c:	6840      	ldr	r0, [r0, #4]
   2887e:	6863      	ldr	r3, [r4, #4]
   28880:	e7fa      	b.n	28878 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28882:	2210      	movs	r2, #16
   28884:	1c61      	adds	r1, r4, #1
   28886:	3001      	adds	r0, #1
}
   28888:	b00a      	add	sp, #40	; 0x28
   2888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2888e:	f003 bb8e 	b.w	2bfae <memcmp>
	switch (u1->type) {
   28892:	f06f 0015 	mvn.w	r0, #21
   28896:	e7e6      	b.n	28866 <bt_uuid_cmp+0x2a>

00028898 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   28898:	2a04      	cmp	r2, #4
   2889a:	d00a      	beq.n	288b2 <bt_uuid_create+0x1a>
   2889c:	2a10      	cmp	r2, #16
   2889e:	d00d      	beq.n	288bc <bt_uuid_create+0x24>
   288a0:	2a02      	cmp	r2, #2
   288a2:	f04f 0300 	mov.w	r3, #0
   288a6:	d115      	bne.n	288d4 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   288a8:	7003      	strb	r3, [r0, #0]
   288aa:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   288ac:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   288ae:	2001      	movs	r0, #1
		break;
   288b0:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   288b2:	2301      	movs	r3, #1
   288b4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   288b6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   288b8:	6042      	str	r2, [r0, #4]
		break;
   288ba:	e7f8      	b.n	288ae <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   288bc:	2302      	movs	r3, #2
   288be:	f800 3b01 	strb.w	r3, [r0], #1
   288c2:	f101 0310 	add.w	r3, r1, #16
   288c6:	f851 2b04 	ldr.w	r2, [r1], #4
   288ca:	f840 2b04 	str.w	r2, [r0], #4
   288ce:	4299      	cmp	r1, r3
   288d0:	d1f9      	bne.n	288c6 <bt_uuid_create+0x2e>
   288d2:	e7ec      	b.n	288ae <bt_uuid_create+0x16>
	switch (data_len) {
   288d4:	4618      	mov	r0, r3
}
   288d6:	4770      	bx	lr

000288d8 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   288d8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   288da:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   288dc:	2106      	movs	r1, #6
{
   288de:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   288e0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   288e4:	f7f7 fafc 	bl	1fee0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   288e8:	b918      	cbnz	r0, 288f2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   288ea:	79a3      	ldrb	r3, [r4, #6]
   288ec:	f063 033f 	orn	r3, r3, #63	; 0x3f
   288f0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   288f2:	bd10      	pop	{r4, pc}

000288f4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   288f4:	280f      	cmp	r0, #15
   288f6:	d806      	bhi.n	28906 <bt_hci_evt_get_flags+0x12>
   288f8:	280d      	cmp	r0, #13
   288fa:	d80b      	bhi.n	28914 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   288fc:	2805      	cmp	r0, #5
   288fe:	bf14      	ite	ne
   28900:	2002      	movne	r0, #2
   28902:	2003      	moveq	r0, #3
   28904:	4770      	bx	lr
	switch (evt) {
   28906:	2813      	cmp	r0, #19
   28908:	d004      	beq.n	28914 <bt_hci_evt_get_flags+0x20>
   2890a:	281a      	cmp	r0, #26
   2890c:	bf14      	ite	ne
   2890e:	2002      	movne	r0, #2
   28910:	2001      	moveq	r0, #1
   28912:	4770      	bx	lr
   28914:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   28916:	4770      	bx	lr

00028918 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   28918:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2891c:	b193      	cbz	r3, 28944 <update_sec_level+0x2c>
   2891e:	7b5a      	ldrb	r2, [r3, #13]
   28920:	07d1      	lsls	r1, r2, #31
   28922:	d50f      	bpl.n	28944 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   28924:	06d2      	lsls	r2, r2, #27
   28926:	d50b      	bpl.n	28940 <update_sec_level+0x28>
   28928:	7b1b      	ldrb	r3, [r3, #12]
   2892a:	2b10      	cmp	r3, #16
   2892c:	d108      	bne.n	28940 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2892e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   28930:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   28932:	7a82      	ldrb	r2, [r0, #10]
   28934:	7a40      	ldrb	r0, [r0, #9]
}
   28936:	4282      	cmp	r2, r0
   28938:	bf8c      	ite	hi
   2893a:	2000      	movhi	r0, #0
   2893c:	2001      	movls	r0, #1
   2893e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   28940:	2303      	movs	r3, #3
   28942:	e7f5      	b.n	28930 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   28944:	2302      	movs	r3, #2
   28946:	e7f3      	b.n	28930 <update_sec_level+0x18>

00028948 <hci_vendor_event>:
}
   28948:	4770      	bx	lr

0002894a <atomic_or>:
{
   2894a:	4603      	mov	r3, r0
}
   2894c:	f3bf 8f5b 	dmb	ish
   28950:	e853 0f00 	ldrex	r0, [r3]
   28954:	ea40 0201 	orr.w	r2, r0, r1
   28958:	e843 2c00 	strex	ip, r2, [r3]
   2895c:	f1bc 0f00 	cmp.w	ip, #0
   28960:	d1f6      	bne.n	28950 <atomic_or+0x6>
   28962:	f3bf 8f5b 	dmb	ish
   28966:	4770      	bx	lr

00028968 <unpair_remote>:
{
   28968:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2896a:	4601      	mov	r1, r0
   2896c:	7818      	ldrb	r0, [r3, #0]
   2896e:	f7ed b995 	b.w	15c9c <unpair>

00028972 <bt_addr_copy>:
   28972:	680b      	ldr	r3, [r1, #0]
   28974:	6003      	str	r3, [r0, #0]
   28976:	888b      	ldrh	r3, [r1, #4]
   28978:	8083      	strh	r3, [r0, #4]
}
   2897a:	4770      	bx	lr

0002897c <bt_addr_le_copy>:
   2897c:	680b      	ldr	r3, [r1, #0]
   2897e:	6003      	str	r3, [r0, #0]
   28980:	888b      	ldrh	r3, [r1, #4]
   28982:	8083      	strh	r3, [r0, #4]
   28984:	798b      	ldrb	r3, [r1, #6]
   28986:	7183      	strb	r3, [r0, #6]
}
   28988:	4770      	bx	lr

0002898a <z_log_msg_static_create.constprop.0>:
   2898a:	2300      	movs	r3, #0
   2898c:	f7eb b978 	b.w	13c80 <z_impl_z_log_msg_static_create>

00028990 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28990:	f3bf 8f5b 	dmb	ish
   28994:	e850 3f00 	ldrex	r3, [r0]
   28998:	400b      	ands	r3, r1
   2899a:	e840 3200 	strex	r2, r3, [r0]
   2899e:	2a00      	cmp	r2, #0
   289a0:	d1f8      	bne.n	28994 <atomic_and.isra.0+0x4>
   289a2:	f3bf 8f5b 	dmb	ish
}
   289a6:	4770      	bx	lr

000289a8 <sys_put_le64>:
	dst[1] = val >> 8;
   289a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   289ac:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   289ae:	0e00      	lsrs	r0, r0, #24
   289b0:	7053      	strb	r3, [r2, #1]
   289b2:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   289b4:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   289b6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   289ba:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   289bc:	7093      	strb	r3, [r2, #2]
   289be:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   289c0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   289c2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   289c4:	71d1      	strb	r1, [r2, #7]
}
   289c6:	4770      	bx	lr

000289c8 <bt_hci_disconnect>:
{
   289c8:	b570      	push	{r4, r5, r6, lr}
   289ca:	4606      	mov	r6, r0
   289cc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   289ce:	f240 4006 	movw	r0, #1030	; 0x406
   289d2:	2103      	movs	r1, #3
   289d4:	f7ed fde2 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   289d8:	4604      	mov	r4, r0
   289da:	b168      	cbz	r0, 289f8 <bt_hci_disconnect+0x30>
   289dc:	2103      	movs	r1, #3
   289de:	3008      	adds	r0, #8
   289e0:	f002 f880 	bl	2aae4 <net_buf_simple_add>
	disconn->reason = reason;
   289e4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   289e6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   289e8:	4621      	mov	r1, r4
   289ea:	2200      	movs	r2, #0
}
   289ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   289f0:	f240 4006 	movw	r0, #1030	; 0x406
   289f4:	f7ed be0c 	b.w	16610 <bt_hci_cmd_send_sync>
}
   289f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289fc:	bd70      	pop	{r4, r5, r6, pc}

000289fe <bt_le_set_data_len>:
{
   289fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a00:	4607      	mov	r7, r0
   28a02:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28a04:	f242 0022 	movw	r0, #8226	; 0x2022
   28a08:	2106      	movs	r1, #6
{
   28a0a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28a0c:	f7ed fdc6 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28a10:	4604      	mov	r4, r0
   28a12:	b178      	cbz	r0, 28a34 <bt_le_set_data_len+0x36>
   28a14:	2106      	movs	r1, #6
   28a16:	3008      	adds	r0, #8
   28a18:	f002 f864 	bl	2aae4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a1c:	883b      	ldrh	r3, [r7, #0]
   28a1e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   28a20:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28a22:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   28a24:	4621      	mov	r1, r4
   28a26:	2200      	movs	r2, #0
}
   28a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   28a2c:	f242 0022 	movw	r0, #8226	; 0x2022
   28a30:	f7ed bdee 	b.w	16610 <bt_hci_cmd_send_sync>
}
   28a34:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a3a <bt_le_set_phy>:
{
   28a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a3e:	4680      	mov	r8, r0
   28a40:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28a42:	f242 0032 	movw	r0, #8242	; 0x2032
   28a46:	2107      	movs	r1, #7
{
   28a48:	f89d 9020 	ldrb.w	r9, [sp, #32]
   28a4c:	4616      	mov	r6, r2
   28a4e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28a50:	f7ed fda4 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28a54:	4604      	mov	r4, r0
   28a56:	b198      	cbz	r0, 28a80 <bt_le_set_phy+0x46>
   28a58:	2107      	movs	r1, #7
   28a5a:	3008      	adds	r0, #8
   28a5c:	f002 f842 	bl	2aae4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a60:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   28a64:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   28a66:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28a68:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28a6a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   28a6c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28a70:	4621      	mov	r1, r4
   28a72:	2200      	movs	r2, #0
}
   28a74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28a78:	f242 0032 	movw	r0, #8242	; 0x2032
   28a7c:	f7ed bdc8 	b.w	16610 <bt_hci_cmd_send_sync>
}
   28a80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028a88 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   28a88:	6880      	ldr	r0, [r0, #8]
   28a8a:	f7ed be91 	b.w	167b0 <bt_hci_le_enh_conn_complete>

00028a8e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28a8e:	8803      	ldrh	r3, [r0, #0]
   28a90:	8842      	ldrh	r2, [r0, #2]
   28a92:	4293      	cmp	r3, r2
{
   28a94:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28a96:	d819      	bhi.n	28acc <bt_le_conn_params_valid+0x3e>
   28a98:	2b05      	cmp	r3, #5
   28a9a:	d917      	bls.n	28acc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28a9c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28aa0:	d814      	bhi.n	28acc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28aa2:	8883      	ldrh	r3, [r0, #4]
   28aa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   28aa8:	d210      	bcs.n	28acc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28aaa:	88c0      	ldrh	r0, [r0, #6]
   28aac:	f1a0 010a 	sub.w	r1, r0, #10
   28ab0:	b289      	uxth	r1, r1
   28ab2:	f640 4476 	movw	r4, #3190	; 0xc76
   28ab6:	42a1      	cmp	r1, r4
   28ab8:	d808      	bhi.n	28acc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   28aba:	3301      	adds	r3, #1
   28abc:	b29b      	uxth	r3, r3
   28abe:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   28ac0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28ac4:	bf34      	ite	cc
   28ac6:	2001      	movcc	r0, #1
   28ac8:	2000      	movcs	r0, #0
}
   28aca:	bd10      	pop	{r4, pc}
		return false;
   28acc:	2000      	movs	r0, #0
   28ace:	e7fc      	b.n	28aca <bt_le_conn_params_valid+0x3c>

00028ad0 <le_conn_param_neg_reply>:
{
   28ad0:	b570      	push	{r4, r5, r6, lr}
   28ad2:	4606      	mov	r6, r0
   28ad4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   28ad6:	f242 0021 	movw	r0, #8225	; 0x2021
   28ada:	2103      	movs	r1, #3
   28adc:	f7ed fd5e 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28ae0:	4604      	mov	r4, r0
   28ae2:	b918      	cbnz	r0, 28aec <le_conn_param_neg_reply+0x1c>
}
   28ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28ae8:	f7ed b982 	b.w	15df0 <le_conn_param_neg_reply.part.0>
   28aec:	2103      	movs	r1, #3
   28aee:	3008      	adds	r0, #8
   28af0:	f001 fff8 	bl	2aae4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   28af4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   28af6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   28af8:	4621      	mov	r1, r4
   28afa:	f242 0021 	movw	r0, #8225	; 0x2021
}
   28afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   28b02:	f7ee b915 	b.w	16d30 <bt_hci_cmd_send>

00028b06 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   28b06:	f240 3041 	movw	r0, #833	; 0x341
   28b0a:	4770      	bx	lr

00028b0c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   28b0c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   28b0e:	f7f4 fde5 	bl	1d6dc <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   28b12:	b118      	cbz	r0, 28b1c <bt_addr_le_is_bonded+0x10>
   28b14:	89c0      	ldrh	r0, [r0, #14]
   28b16:	3800      	subs	r0, #0
   28b18:	bf18      	it	ne
   28b1a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   28b1c:	bd08      	pop	{r3, pc}

00028b1e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b1e:	f3bf 8f5b 	dmb	ish
   28b22:	6800      	ldr	r0, [r0, #0]
   28b24:	f3bf 8f5b 	dmb	ish
}
   28b28:	4770      	bx	lr

00028b2a <atomic_test_bit>:
{
   28b2a:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28b2c:	f7ff fff7 	bl	28b1e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28b30:	4108      	asrs	r0, r1
}
   28b32:	f000 0001 	and.w	r0, r0, #1
   28b36:	bd08      	pop	{r3, pc}

00028b38 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   28b38:	f100 0210 	add.w	r2, r0, #16
{
   28b3c:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   28b3e:	4610      	mov	r0, r2
{
   28b40:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   28b42:	2106      	movs	r1, #6
   28b44:	f7ff fff1 	bl	28b2a <atomic_test_bit>
   28b48:	b130      	cbz	r0, 28b58 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   28b4a:	210c      	movs	r1, #12
   28b4c:	4610      	mov	r0, r2
   28b4e:	f7ff ffec 	bl	28b2a <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   28b52:	b908      	cbnz	r0, 28b58 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   28b54:	2301      	movs	r3, #1
   28b56:	7023      	strb	r3, [r4, #0]
}
   28b58:	bd10      	pop	{r4, pc}

00028b5a <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28b5a:	f100 0310 	add.w	r3, r0, #16
   28b5e:	f3bf 8f5b 	dmb	ish
   28b62:	e853 2f00 	ldrex	r2, [r3]
   28b66:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   28b6a:	e843 1c00 	strex	ip, r1, [r3]
   28b6e:	f1bc 0f00 	cmp.w	ip, #0
   28b72:	d1f6      	bne.n	28b62 <adv_unpause_enabled+0x8>
   28b74:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   28b78:	0453      	lsls	r3, r2, #17
   28b7a:	d502      	bpl.n	28b82 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   28b7c:	2101      	movs	r1, #1
   28b7e:	f000 b8be 	b.w	28cfe <bt_le_adv_set_enable>
}
   28b82:	4770      	bx	lr

00028b84 <bt_addr_copy>:
   28b84:	680b      	ldr	r3, [r1, #0]
   28b86:	6003      	str	r3, [r0, #0]
   28b88:	888b      	ldrh	r3, [r1, #4]
   28b8a:	8083      	strh	r3, [r0, #4]
}
   28b8c:	4770      	bx	lr

00028b8e <bt_addr_le_copy>:
   28b8e:	680b      	ldr	r3, [r1, #0]
   28b90:	6003      	str	r3, [r0, #0]
   28b92:	888b      	ldrh	r3, [r1, #4]
   28b94:	8083      	strh	r3, [r0, #4]
   28b96:	798b      	ldrb	r3, [r1, #6]
   28b98:	7183      	strb	r3, [r0, #6]
}
   28b9a:	4770      	bx	lr

00028b9c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   28b9c:	7a03      	ldrb	r3, [r0, #8]
   28b9e:	075b      	lsls	r3, r3, #29
{
   28ba0:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   28ba2:	d505      	bpl.n	28bb0 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   28ba4:	4601      	mov	r1, r0
   28ba6:	322a      	adds	r2, #42	; 0x2a
   28ba8:	f811 0b01 	ldrb.w	r0, [r1], #1
   28bac:	f7ee bb78 	b.w	172a0 <hci_id_add>
}
   28bb0:	4770      	bx	lr

00028bb2 <z_log_msg_static_create.constprop.0>:
   28bb2:	2300      	movs	r3, #0
   28bb4:	f7eb b864 	b.w	13c80 <z_impl_z_log_msg_static_create>

00028bb8 <addr_res_enable>:
{
   28bb8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28bba:	2101      	movs	r1, #1
{
   28bbc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28bbe:	f242 002d 	movw	r0, #8237	; 0x202d
   28bc2:	f7ed fceb 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28bc6:	4604      	mov	r4, r0
   28bc8:	b158      	cbz	r0, 28be2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   28bca:	4629      	mov	r1, r5
   28bcc:	3008      	adds	r0, #8
   28bce:	f001 ff98 	bl	2ab02 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28bd2:	4621      	mov	r1, r4
   28bd4:	2200      	movs	r2, #0
}
   28bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28bda:	f242 002d 	movw	r0, #8237	; 0x202d
   28bde:	f7ed bd17 	b.w	16610 <bt_hci_cmd_send_sync>
}
   28be2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28be6:	bd38      	pop	{r3, r4, r5, pc}

00028be8 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28be8:	f3bf 8f5b 	dmb	ish
   28bec:	e850 3f00 	ldrex	r3, [r0]
   28bf0:	430b      	orrs	r3, r1
   28bf2:	e840 3200 	strex	r2, r3, [r0]
   28bf6:	2a00      	cmp	r2, #0
   28bf8:	d1f8      	bne.n	28bec <atomic_or.isra.0+0x4>
   28bfa:	f3bf 8f5b 	dmb	ish
}
   28bfe:	4770      	bx	lr

00028c00 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28c00:	f100 0210 	add.w	r2, r0, #16
{
   28c04:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28c06:	2106      	movs	r1, #6
{
   28c08:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28c0a:	4610      	mov	r0, r2
   28c0c:	f7ff ff8d 	bl	28b2a <atomic_test_bit>
   28c10:	b150      	cbz	r0, 28c28 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   28c16:	4610      	mov	r0, r2
   28c18:	f7ff ffe6 	bl	28be8 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   28c1c:	4620      	mov	r0, r4
   28c1e:	2100      	movs	r1, #0
}
   28c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   28c24:	f000 b86b 	b.w	28cfe <bt_le_adv_set_enable>
}
   28c28:	bd10      	pop	{r4, pc}

00028c2a <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   28c2a:	f100 0210 	add.w	r2, r0, #16
{
   28c2e:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   28c30:	2105      	movs	r1, #5
   28c32:	4610      	mov	r0, r2
   28c34:	f7ff ff79 	bl	28b2a <atomic_test_bit>
   28c38:	b958      	cbnz	r0, 28c52 <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28c3a:	f3bf 8f5b 	dmb	ish
   28c3e:	e852 3f00 	ldrex	r3, [r2]
   28c42:	f023 0310 	bic.w	r3, r3, #16
   28c46:	e842 3100 	strex	r1, r3, [r2]
   28c4a:	2900      	cmp	r1, #0
   28c4c:	d1f7      	bne.n	28c3e <adv_rpa_invalidate+0x14>
   28c4e:	f3bf 8f5b 	dmb	ish
}
   28c52:	bd08      	pop	{r3, pc}

00028c54 <bt_lookup_id_addr>:
{
   28c54:	b510      	push	{r4, lr}
   28c56:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   28c58:	f7f4 fd06 	bl	1d668 <bt_keys_find_irk>
		if (keys) {
   28c5c:	b100      	cbz	r0, 28c60 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   28c5e:	1c44      	adds	r4, r0, #1
}
   28c60:	4620      	mov	r0, r4
   28c62:	bd10      	pop	{r4, pc}

00028c64 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   28c64:	7800      	ldrb	r0, [r0, #0]
   28c66:	f7ee bd45 	b.w	176f4 <bt_id_set_private_addr>

00028c6a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   28c6a:	7a03      	ldrb	r3, [r0, #8]
   28c6c:	07d9      	lsls	r1, r3, #31
   28c6e:	d504      	bpl.n	28c7a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   28c70:	f023 0301 	bic.w	r3, r3, #1
   28c74:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   28c76:	f7ee bdff 	b.w	17878 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   28c7a:	0799      	lsls	r1, r3, #30
   28c7c:	d504      	bpl.n	28c88 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   28c7e:	f023 0302 	bic.w	r3, r3, #2
   28c82:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   28c84:	f7ee be10 	b.w	178a8 <bt_id_del>
}
   28c88:	4770      	bx	lr

00028c8a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28c8a:	f3bf 8f5b 	dmb	ish
   28c8e:	6800      	ldr	r0, [r0, #0]
   28c90:	f3bf 8f5b 	dmb	ish
}
   28c94:	4770      	bx	lr

00028c96 <atomic_and>:
{
   28c96:	4603      	mov	r3, r0
}
   28c98:	f3bf 8f5b 	dmb	ish
   28c9c:	e853 0f00 	ldrex	r0, [r3]
   28ca0:	ea00 0201 	and.w	r2, r0, r1
   28ca4:	e843 2c00 	strex	ip, r2, [r3]
   28ca8:	f1bc 0f00 	cmp.w	ip, #0
   28cac:	d1f6      	bne.n	28c9c <atomic_and+0x6>
   28cae:	f3bf 8f5b 	dmb	ish
   28cb2:	4770      	bx	lr

00028cb4 <bt_le_adv_set_enable_legacy>:
{
   28cb4:	b570      	push	{r4, r5, r6, lr}
   28cb6:	4606      	mov	r6, r0
   28cb8:	b086      	sub	sp, #24
   28cba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28cbc:	f242 000a 	movw	r0, #8202	; 0x200a
   28cc0:	2101      	movs	r1, #1
   28cc2:	f7ed fc6b 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28cc6:	4604      	mov	r4, r0
   28cc8:	b1b0      	cbz	r0, 28cf8 <bt_le_adv_set_enable_legacy+0x44>
   28cca:	3008      	adds	r0, #8
	if (enable) {
   28ccc:	b195      	cbz	r5, 28cf4 <bt_le_adv_set_enable_legacy+0x40>
   28cce:	2101      	movs	r1, #1
   28cd0:	f001 ff17 	bl	2ab02 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   28cd4:	f106 0210 	add.w	r2, r6, #16
   28cd8:	a903      	add	r1, sp, #12
   28cda:	4620      	mov	r0, r4
   28cdc:	9500      	str	r5, [sp, #0]
   28cde:	2306      	movs	r3, #6
   28ce0:	f7ed fc4a 	bl	16578 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   28ce4:	2200      	movs	r2, #0
   28ce6:	4621      	mov	r1, r4
   28ce8:	f242 000a 	movw	r0, #8202	; 0x200a
   28cec:	f7ed fc90 	bl	16610 <bt_hci_cmd_send_sync>
}
   28cf0:	b006      	add	sp, #24
   28cf2:	bd70      	pop	{r4, r5, r6, pc}
   28cf4:	4629      	mov	r1, r5
   28cf6:	e7eb      	b.n	28cd0 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   28cf8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28cfc:	e7f8      	b.n	28cf0 <bt_le_adv_set_enable_legacy+0x3c>

00028cfe <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   28cfe:	f7ff bfd9 	b.w	28cb4 <bt_le_adv_set_enable_legacy>

00028d02 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   28d02:	3018      	adds	r0, #24
   28d04:	f002 be17 	b.w	2b936 <k_work_cancel_delayable>

00028d08 <atomic_and>:
{
   28d08:	4603      	mov	r3, r0
}
   28d0a:	f3bf 8f5b 	dmb	ish
   28d0e:	e853 0f00 	ldrex	r0, [r3]
   28d12:	ea00 0201 	and.w	r2, r0, r1
   28d16:	e843 2c00 	strex	ip, r2, [r3]
   28d1a:	f1bc 0f00 	cmp.w	ip, #0
   28d1e:	d1f6      	bne.n	28d0e <atomic_and+0x6>
   28d20:	f3bf 8f5b 	dmb	ish
   28d24:	4770      	bx	lr

00028d26 <z_log_msg_static_create.constprop.0>:
   28d26:	2300      	movs	r3, #0
   28d28:	f7ea bfaa 	b.w	13c80 <z_impl_z_log_msg_static_create>

00028d2c <tx_complete_work>:
	tx_notify(conn);
   28d2c:	3828      	subs	r0, #40	; 0x28
   28d2e:	f7ef b9a9 	b.w	18084 <tx_notify>

00028d32 <bt_conn_reset_rx_state>:
{
   28d32:	b510      	push	{r4, lr}
   28d34:	4604      	mov	r4, r0
	if (!conn->rx) {
   28d36:	6900      	ldr	r0, [r0, #16]
   28d38:	b118      	cbz	r0, 28d42 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28d3a:	f7f4 ff15 	bl	1db68 <net_buf_unref>
	conn->rx = NULL;
   28d3e:	2300      	movs	r3, #0
   28d40:	6123      	str	r3, [r4, #16]
}
   28d42:	bd10      	pop	{r4, pc}

00028d44 <bt_conn_ref>:
{
   28d44:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   28d46:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d4a:	f3bf 8f5b 	dmb	ish
   28d4e:	6813      	ldr	r3, [r2, #0]
   28d50:	f3bf 8f5b 	dmb	ish
		if (!old) {
   28d54:	b17b      	cbz	r3, 28d76 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28d56:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28d5a:	1c59      	adds	r1, r3, #1
   28d5c:	e852 4f00 	ldrex	r4, [r2]
   28d60:	429c      	cmp	r4, r3
   28d62:	d104      	bne.n	28d6e <bt_conn_ref+0x2a>
   28d64:	e842 1c00 	strex	ip, r1, [r2]
   28d68:	f1bc 0f00 	cmp.w	ip, #0
   28d6c:	d1f6      	bne.n	28d5c <bt_conn_ref+0x18>
   28d6e:	f3bf 8f5b 	dmb	ish
   28d72:	d1ea      	bne.n	28d4a <bt_conn_ref+0x6>
}
   28d74:	bd10      	pop	{r4, pc}
			return NULL;
   28d76:	4618      	mov	r0, r3
   28d78:	e7fc      	b.n	28d74 <bt_conn_ref+0x30>

00028d7a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   28d7a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28d7e:	f3bf 8f5b 	dmb	ish
   28d82:	e853 2f00 	ldrex	r2, [r3]
   28d86:	3a01      	subs	r2, #1
   28d88:	e843 2100 	strex	r1, r2, [r3]
   28d8c:	2900      	cmp	r1, #0
   28d8e:	d1f8      	bne.n	28d82 <bt_conn_unref+0x8>
   28d90:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   28d94:	7883      	ldrb	r3, [r0, #2]
   28d96:	2b01      	cmp	r3, #1
   28d98:	d108      	bne.n	28dac <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d9a:	f3bf 8f5b 	dmb	ish
   28d9e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28da2:	f3bf 8f5b 	dmb	ish
   28da6:	b90b      	cbnz	r3, 28dac <bt_conn_unref+0x32>
		bt_le_adv_resume();
   28da8:	f7ee bf90 	b.w	17ccc <bt_le_adv_resume>
}
   28dac:	4770      	bx	lr

00028dae <conn_lookup_handle>:
{
   28dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28db2:	4607      	mov	r7, r0
   28db4:	460e      	mov	r6, r1
   28db6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   28db8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28dba:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   28dbe:	42b4      	cmp	r4, r6
   28dc0:	d103      	bne.n	28dca <conn_lookup_handle+0x1c>
	return NULL;
   28dc2:	2300      	movs	r3, #0
}
   28dc4:	4618      	mov	r0, r3
   28dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28dca:	fb09 7004 	mla	r0, r9, r4, r7
   28dce:	f7ff ffb9 	bl	28d44 <bt_conn_ref>
   28dd2:	4603      	mov	r3, r0
		if (!conn) {
   28dd4:	b158      	cbz	r0, 28dee <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   28dd6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28dd8:	2d01      	cmp	r5, #1
   28dda:	d002      	beq.n	28de2 <conn_lookup_handle+0x34>
   28ddc:	3d07      	subs	r5, #7
   28dde:	2d01      	cmp	r5, #1
   28de0:	d803      	bhi.n	28dea <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   28de2:	881a      	ldrh	r2, [r3, #0]
   28de4:	4542      	cmp	r2, r8
   28de6:	d0ed      	beq.n	28dc4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   28de8:	4618      	mov	r0, r3
   28dea:	f7ff ffc6 	bl	28d7a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28dee:	3401      	adds	r4, #1
   28df0:	e7e5      	b.n	28dbe <conn_lookup_handle+0x10>

00028df2 <bt_conn_connected>:
{
   28df2:	b510      	push	{r4, lr}
   28df4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28df6:	f7ef fe3d 	bl	18a74 <bt_l2cap_connected>
	notify_connected(conn);
   28dfa:	4620      	mov	r0, r4
}
   28dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28e00:	f7ef b90e 	b.w	18020 <notify_connected>

00028e04 <bt_conn_disconnect>:
{
   28e04:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   28e06:	7b43      	ldrb	r3, [r0, #13]
   28e08:	3b02      	subs	r3, #2
{
   28e0a:	4604      	mov	r4, r0
	switch (conn->state) {
   28e0c:	2b06      	cmp	r3, #6
   28e0e:	d805      	bhi.n	28e1c <bt_conn_disconnect+0x18>
   28e10:	e8df f003 	tbb	[pc, r3]
   28e14:	04040408 	.word	0x04040408
   28e18:	0e0c      	.short	0x0e0c
   28e1a:	0c          	.byte	0x0c
   28e1b:	00          	.byte	0x00
   28e1c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   28e20:	4628      	mov	r0, r5
   28e22:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   28e24:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28e26:	2100      	movs	r1, #0
   28e28:	f7ef fab2 	bl	18390 <bt_conn_set_state>
		return 0;
   28e2c:	2500      	movs	r5, #0
   28e2e:	e7f7      	b.n	28e20 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   28e30:	8800      	ldrh	r0, [r0, #0]
   28e32:	f7ff fdc9 	bl	289c8 <bt_hci_disconnect>
	if (err) {
   28e36:	4605      	mov	r5, r0
   28e38:	2800      	cmp	r0, #0
   28e3a:	d1f1      	bne.n	28e20 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   28e3c:	7b63      	ldrb	r3, [r4, #13]
   28e3e:	2b07      	cmp	r3, #7
   28e40:	d1ee      	bne.n	28e20 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28e42:	2108      	movs	r1, #8
   28e44:	4620      	mov	r0, r4
   28e46:	f7ef faa3 	bl	18390 <bt_conn_set_state>
   28e4a:	e7e9      	b.n	28e20 <bt_conn_disconnect+0x1c>

00028e4c <bt_conn_set_security>:
{
   28e4c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28e4e:	7b43      	ldrb	r3, [r0, #13]
   28e50:	2b07      	cmp	r3, #7
{
   28e52:	4604      	mov	r4, r0
   28e54:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28e56:	d124      	bne.n	28ea2 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   28e58:	7a43      	ldrb	r3, [r0, #9]
   28e5a:	428b      	cmp	r3, r1
   28e5c:	d224      	bcs.n	28ea8 <bt_conn_set_security+0x5c>
   28e5e:	7a83      	ldrb	r3, [r0, #10]
   28e60:	428b      	cmp	r3, r1
   28e62:	d221      	bcs.n	28ea8 <bt_conn_set_security+0x5c>
	if (val) {
   28e64:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   28e66:	f100 0004 	add.w	r0, r0, #4
   28e6a:	d515      	bpl.n	28e98 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28e6c:	f3bf 8f5b 	dmb	ish
   28e70:	e850 3f00 	ldrex	r3, [r0]
   28e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   28e78:	e840 3200 	strex	r2, r3, [r0]
   28e7c:	2a00      	cmp	r2, #0
   28e7e:	d1f7      	bne.n	28e70 <bt_conn_set_security+0x24>
   28e80:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28e84:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   28e88:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   28e8a:	4620      	mov	r0, r4
   28e8c:	f7f3 fd48 	bl	1c920 <bt_smp_start_security>
	if (err) {
   28e90:	b108      	cbz	r0, 28e96 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   28e92:	7a63      	ldrb	r3, [r4, #9]
   28e94:	72a3      	strb	r3, [r4, #10]
}
   28e96:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28e98:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   28e9c:	f7ff ff34 	bl	28d08 <atomic_and>
   28ea0:	e7f0      	b.n	28e84 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   28ea2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28ea6:	e7f6      	b.n	28e96 <bt_conn_set_security+0x4a>
		return 0;
   28ea8:	2000      	movs	r0, #0
   28eaa:	e7f4      	b.n	28e96 <bt_conn_set_security+0x4a>

00028eac <bt_conn_get_security>:
}
   28eac:	7a40      	ldrb	r0, [r0, #9]
   28eae:	4770      	bx	lr

00028eb0 <bt_conn_is_peer_addr_le>:
{
   28eb0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28eb2:	7a03      	ldrb	r3, [r0, #8]
   28eb4:	428b      	cmp	r3, r1
{
   28eb6:	4604      	mov	r4, r0
   28eb8:	4615      	mov	r5, r2
	if (id != conn->id) {
   28eba:	d115      	bne.n	28ee8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   28ebc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28ec0:	2207      	movs	r2, #7
   28ec2:	4628      	mov	r0, r5
   28ec4:	f003 f873 	bl	2bfae <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   28ec8:	b180      	cbz	r0, 28eec <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28eca:	78e3      	ldrb	r3, [r4, #3]
   28ecc:	2207      	movs	r2, #7
   28ece:	b943      	cbnz	r3, 28ee2 <bt_conn_is_peer_addr_le+0x32>
   28ed0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   28ed4:	4628      	mov	r0, r5
   28ed6:	f003 f86a 	bl	2bfae <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   28eda:	fab0 f080 	clz	r0, r0
   28ede:	0940      	lsrs	r0, r0, #5
}
   28ee0:	bd38      	pop	{r3, r4, r5, pc}
   28ee2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   28ee6:	e7f5      	b.n	28ed4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   28ee8:	2000      	movs	r0, #0
   28eea:	e7f9      	b.n	28ee0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   28eec:	2001      	movs	r0, #1
   28eee:	e7f7      	b.n	28ee0 <bt_conn_is_peer_addr_le+0x30>

00028ef0 <bt_conn_le_conn_update>:
{
   28ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ef2:	4607      	mov	r7, r0
   28ef4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   28ef6:	f242 0013 	movw	r0, #8211	; 0x2013
   28efa:	210e      	movs	r1, #14
   28efc:	f7ed fb4e 	bl	1659c <bt_hci_cmd_create>
	if (!buf) {
   28f00:	4606      	mov	r6, r0
   28f02:	b1d0      	cbz	r0, 28f3a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   28f04:	210e      	movs	r1, #14
   28f06:	3008      	adds	r0, #8
   28f08:	f001 fdec 	bl	2aae4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   28f0c:	220e      	movs	r2, #14
   28f0e:	4604      	mov	r4, r0
   28f10:	2100      	movs	r1, #0
   28f12:	f003 f87d 	bl	2c010 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28f16:	883b      	ldrh	r3, [r7, #0]
   28f18:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28f1a:	882b      	ldrh	r3, [r5, #0]
   28f1c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28f1e:	886b      	ldrh	r3, [r5, #2]
   28f20:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28f22:	88ab      	ldrh	r3, [r5, #4]
   28f24:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   28f26:	88eb      	ldrh	r3, [r5, #6]
   28f28:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28f2a:	4631      	mov	r1, r6
   28f2c:	2200      	movs	r2, #0
}
   28f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28f32:	f242 0013 	movw	r0, #8211	; 0x2013
   28f36:	f7ed bb6b 	b.w	16610 <bt_hci_cmd_send_sync>
}
   28f3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028f40 <l2cap_connected>:
}
   28f40:	4770      	bx	lr

00028f42 <z_log_msg_static_create.constprop.0>:
   28f42:	2300      	movs	r3, #0
   28f44:	f7ea be9c 	b.w	13c80 <z_impl_z_log_msg_static_create>

00028f48 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   28f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f4a:	4605      	mov	r5, r0
   28f4c:	460f      	mov	r7, r1
   28f4e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   28f50:	2300      	movs	r3, #0
   28f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28f56:	2104      	movs	r1, #4
   28f58:	2000      	movs	r0, #0
   28f5a:	f7ef fb13 	bl	18584 <bt_conn_create_pdu_timeout>
	if (!buf) {
   28f5e:	4604      	mov	r4, r0
   28f60:	b920      	cbnz	r0, 28f6c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   28f62:	4628      	mov	r0, r5
}
   28f64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28f68:	f7ef bd48 	b.w	189fc <l2cap_create_le_sig_pdu.part.0>
   28f6c:	2104      	movs	r1, #4
   28f6e:	3008      	adds	r0, #8
   28f70:	f001 fdb8 	bl	2aae4 <net_buf_simple_add>
	hdr->code = code;
   28f74:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   28f76:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   28f78:	8046      	strh	r6, [r0, #2]
}
   28f7a:	4620      	mov	r0, r4
   28f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028f7e <l2cap_disconnected>:
   28f7e:	4770      	bx	lr

00028f80 <bt_l2cap_chan_del>:
{
   28f80:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   28f82:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   28f86:	4604      	mov	r4, r0
	if (!chan->conn) {
   28f88:	b123      	cbz	r3, 28f94 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28f8a:	686b      	ldr	r3, [r5, #4]
   28f8c:	b103      	cbz	r3, 28f90 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28f8e:	4798      	blx	r3
	chan->conn = NULL;
   28f90:	2300      	movs	r3, #0
   28f92:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   28f94:	68e3      	ldr	r3, [r4, #12]
   28f96:	b10b      	cbz	r3, 28f9c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   28f98:	4620      	mov	r0, r4
   28f9a:	4798      	blx	r3
	if (ops->released) {
   28f9c:	69eb      	ldr	r3, [r5, #28]
   28f9e:	b11b      	cbz	r3, 28fa8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   28fa0:	4620      	mov	r0, r4
}
   28fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   28fa6:	4718      	bx	r3
}
   28fa8:	bd70      	pop	{r4, r5, r6, pc}

00028faa <bt_l2cap_disconnected>:
	return list->head;
   28faa:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   28fac:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28fae:	b160      	cbz	r0, 28fca <bt_l2cap_disconnected+0x20>
	return node->next;
   28fb0:	f850 4908 	ldr.w	r4, [r0], #-8
   28fb4:	b104      	cbz	r4, 28fb8 <bt_l2cap_disconnected+0xe>
   28fb6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   28fb8:	f7ff ffe2 	bl	28f80 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28fbc:	b12c      	cbz	r4, 28fca <bt_l2cap_disconnected+0x20>
   28fbe:	68a3      	ldr	r3, [r4, #8]
   28fc0:	b103      	cbz	r3, 28fc4 <bt_l2cap_disconnected+0x1a>
   28fc2:	3b08      	subs	r3, #8
{
   28fc4:	4620      	mov	r0, r4
   28fc6:	461c      	mov	r4, r3
   28fc8:	e7f6      	b.n	28fb8 <bt_l2cap_disconnected+0xe>
}
   28fca:	bd10      	pop	{r4, pc}

00028fcc <bt_l2cap_security_changed>:
	return list->head;
   28fcc:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   28fce:	b538      	push	{r3, r4, r5, lr}
   28fd0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28fd2:	b178      	cbz	r0, 28ff4 <bt_l2cap_security_changed+0x28>
	return node->next;
   28fd4:	f850 4908 	ldr.w	r4, [r0], #-8
   28fd8:	b104      	cbz	r4, 28fdc <bt_l2cap_security_changed+0x10>
   28fda:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28fdc:	6843      	ldr	r3, [r0, #4]
   28fde:	689b      	ldr	r3, [r3, #8]
   28fe0:	b10b      	cbz	r3, 28fe6 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   28fe2:	4629      	mov	r1, r5
   28fe4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28fe6:	b12c      	cbz	r4, 28ff4 <bt_l2cap_security_changed+0x28>
   28fe8:	68a3      	ldr	r3, [r4, #8]
   28fea:	b103      	cbz	r3, 28fee <bt_l2cap_security_changed+0x22>
   28fec:	3b08      	subs	r3, #8
{
   28fee:	4620      	mov	r0, r4
   28ff0:	461c      	mov	r4, r3
   28ff2:	e7f3      	b.n	28fdc <bt_l2cap_security_changed+0x10>
}
   28ff4:	bd38      	pop	{r3, r4, r5, pc}

00028ff6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   28ff6:	3104      	adds	r1, #4
   28ff8:	f7ef bac4 	b.w	18584 <bt_conn_create_pdu_timeout>

00028ffc <bt_l2cap_send_cb>:
{
   28ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29000:	4614      	mov	r4, r2
   29002:	4605      	mov	r5, r0
   29004:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   29006:	f102 0008 	add.w	r0, r2, #8
   2900a:	2104      	movs	r1, #4
   2900c:	461e      	mov	r6, r3
   2900e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   29012:	f001 fd7e 	bl	2ab12 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29016:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   29018:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2901a:	3a04      	subs	r2, #4
   2901c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2901e:	4643      	mov	r3, r8
   29020:	4632      	mov	r2, r6
   29022:	4621      	mov	r1, r4
   29024:	4628      	mov	r0, r5
}
   29026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2902a:	f7ef b941 	b.w	182b0 <bt_conn_send_cb>

0002902e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2902e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29030:	b130      	cbz	r0, 29040 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29032:	8b83      	ldrh	r3, [r0, #28]
   29034:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29036:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2903a:	d001      	beq.n	29040 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2903c:	6880      	ldr	r0, [r0, #8]
   2903e:	e7f7      	b.n	29030 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   29040:	4770      	bx	lr

00029042 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29042:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29044:	b130      	cbz	r0, 29054 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29046:	8983      	ldrh	r3, [r0, #12]
   29048:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2904a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2904e:	d001      	beq.n	29054 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   29050:	6880      	ldr	r0, [r0, #8]
   29052:	e7f7      	b.n	29044 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   29054:	4770      	bx	lr

00029056 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   29056:	4770      	bx	lr

00029058 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   29058:	4603      	mov	r3, r0
	return list->head;
   2905a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2905c:	b128      	cbz	r0, 2906a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2905e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29060:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29062:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29064:	4288      	cmp	r0, r1
	list->tail = node;
   29066:	bf08      	it	eq
   29068:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2906a:	4770      	bx	lr

0002906c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2906c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2906e:	2000      	movs	r0, #0

	while (buf) {
   29070:	b903      	cbnz	r3, 29074 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29072:	4770      	bx	lr
		bytes += buf->len;
   29074:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   29076:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   29078:	4410      	add	r0, r2
		buf = buf->frags;
   2907a:	e7f9      	b.n	29070 <net_buf_frags_len+0x4>

0002907c <attr_read_type_cb>:
{
   2907c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2907e:	68d4      	ldr	r4, [r2, #12]
   29080:	7823      	ldrb	r3, [r4, #0]
   29082:	3102      	adds	r1, #2
   29084:	b913      	cbnz	r3, 2908c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   29086:	7021      	strb	r1, [r4, #0]
	return true;
   29088:	2001      	movs	r0, #1
   2908a:	e006      	b.n	2909a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2908c:	428b      	cmp	r3, r1
   2908e:	d0fb      	beq.n	29088 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   29090:	8983      	ldrh	r3, [r0, #12]
   29092:	3b02      	subs	r3, #2
   29094:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   29096:	2000      	movs	r0, #0
   29098:	6110      	str	r0, [r2, #16]
}
   2909a:	bd10      	pop	{r4, pc}

0002909c <att_op_get_type>:
	switch (op) {
   2909c:	2852      	cmp	r0, #82	; 0x52
   2909e:	d830      	bhi.n	29102 <att_op_get_type+0x66>
   290a0:	b388      	cbz	r0, 29106 <att_op_get_type+0x6a>
   290a2:	1e43      	subs	r3, r0, #1
   290a4:	2b51      	cmp	r3, #81	; 0x51
   290a6:	d82e      	bhi.n	29106 <att_op_get_type+0x6a>
   290a8:	e8df f003 	tbb	[pc, r3]
   290ac:	39333933 	.word	0x39333933
   290b0:	39333933 	.word	0x39333933
   290b4:	39333933 	.word	0x39333933
   290b8:	39333933 	.word	0x39333933
   290bc:	2d333933 	.word	0x2d333933
   290c0:	3933392d 	.word	0x3933392d
   290c4:	2d352d33 	.word	0x2d352d33
   290c8:	392d2937 	.word	0x392d2937
   290cc:	2d352d33 	.word	0x2d352d33
   290d0:	2d2d2d2d 	.word	0x2d2d2d2d
   290d4:	2d2d2d2d 	.word	0x2d2d2d2d
   290d8:	2d2d2d2d 	.word	0x2d2d2d2d
   290dc:	2d2d2d2d 	.word	0x2d2d2d2d
   290e0:	2d2d2d2d 	.word	0x2d2d2d2d
   290e4:	2d2d2d2d 	.word	0x2d2d2d2d
   290e8:	2d2d2d2d 	.word	0x2d2d2d2d
   290ec:	2d2d2d2d 	.word	0x2d2d2d2d
   290f0:	2d2d2d2d 	.word	0x2d2d2d2d
   290f4:	2d2d2d2d 	.word	0x2d2d2d2d
   290f8:	2d2d2d2d 	.word	0x2d2d2d2d
   290fc:	3b2d      	.short	0x3b2d
   290fe:	2004      	movs	r0, #4
   29100:	4770      	bx	lr
   29102:	28d2      	cmp	r0, #210	; 0xd2
   29104:	d00d      	beq.n	29122 <att_op_get_type+0x86>
		return ATT_COMMAND;
   29106:	f010 0f40 	tst.w	r0, #64	; 0x40
   2910a:	bf0c      	ite	eq
   2910c:	2006      	moveq	r0, #6
   2910e:	2000      	movne	r0, #0
   29110:	4770      	bx	lr
		return ATT_RESPONSE;
   29112:	2002      	movs	r0, #2
   29114:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29116:	2003      	movs	r0, #3
   29118:	4770      	bx	lr
		return ATT_INDICATION;
   2911a:	2005      	movs	r0, #5
   2911c:	4770      	bx	lr
		return ATT_REQUEST;
   2911e:	2001      	movs	r0, #1
   29120:	4770      	bx	lr
		return ATT_COMMAND;
   29122:	2000      	movs	r0, #0
}
   29124:	4770      	bx	lr

00029126 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29126:	f3bf 8f5b 	dmb	ish
   2912a:	6800      	ldr	r0, [r0, #0]
   2912c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29130:	4108      	asrs	r0, r1
}
   29132:	f000 0001 	and.w	r0, r0, #1
   29136:	4770      	bx	lr

00029138 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   29138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2913a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2913e:	2300      	movs	r3, #0
   29140:	9300      	str	r3, [sp, #0]
   29142:	461a      	mov	r2, r3
   29144:	f7f1 fcf0 	bl	1ab28 <bt_gatt_foreach_attr_type>
				  user_data);
}
   29148:	b005      	add	sp, #20
   2914a:	f85d fb04 	ldr.w	pc, [sp], #4

0002914e <att_chan_mtu_updated>:
{
   2914e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   29150:	6806      	ldr	r6, [r0, #0]
	return list->head;
   29152:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29154:	b1c3      	cbz	r3, 29188 <att_chan_mtu_updated+0x3a>
   29156:	461a      	mov	r2, r3
	return node->next;
   29158:	f852 49e0 	ldr.w	r4, [r2], #-224
   2915c:	b104      	cbz	r4, 29160 <att_chan_mtu_updated+0x12>
   2915e:	3ce0      	subs	r4, #224	; 0xe0
{
   29160:	2300      	movs	r3, #0
   29162:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   29164:	4290      	cmp	r0, r2
   29166:	d007      	beq.n	29178 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29168:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2916a:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2916c:	42a9      	cmp	r1, r5
   2916e:	bf38      	it	cc
   29170:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29172:	4293      	cmp	r3, r2
   29174:	bf38      	it	cc
   29176:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29178:	b13c      	cbz	r4, 2918a <att_chan_mtu_updated+0x3c>
   2917a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2917e:	b105      	cbz	r5, 29182 <att_chan_mtu_updated+0x34>
   29180:	3de0      	subs	r5, #224	; 0xe0
{
   29182:	4622      	mov	r2, r4
   29184:	462c      	mov	r4, r5
   29186:	e7ed      	b.n	29164 <att_chan_mtu_updated+0x16>
   29188:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2918a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2918c:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2918e:	428c      	cmp	r4, r1
   29190:	d801      	bhi.n	29196 <att_chan_mtu_updated+0x48>
   29192:	429a      	cmp	r2, r3
   29194:	d909      	bls.n	291aa <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   29196:	429a      	cmp	r2, r3
   29198:	bf38      	it	cc
   2919a:	461a      	movcc	r2, r3
   2919c:	42a1      	cmp	r1, r4
   2919e:	6830      	ldr	r0, [r6, #0]
   291a0:	bf38      	it	cc
   291a2:	4621      	movcc	r1, r4
}
   291a4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   291a6:	f7f2 b9b3 	b.w	1b510 <bt_gatt_att_max_mtu_changed>
}
   291aa:	bc70      	pop	{r4, r5, r6}
   291ac:	4770      	bx	lr

000291ae <attr_read_group_cb>:
	if (!data->rsp->len) {
   291ae:	68d0      	ldr	r0, [r2, #12]
   291b0:	7803      	ldrb	r3, [r0, #0]
   291b2:	3104      	adds	r1, #4
   291b4:	b913      	cbnz	r3, 291bc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   291b6:	7001      	strb	r1, [r0, #0]
	return true;
   291b8:	2001      	movs	r0, #1
}
   291ba:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   291bc:	428b      	cmp	r3, r1
   291be:	d0fb      	beq.n	291b8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   291c0:	6891      	ldr	r1, [r2, #8]
   291c2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   291c4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   291c6:	3b04      	subs	r3, #4
   291c8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   291ca:	6110      	str	r0, [r2, #16]
		return false;
   291cc:	4770      	bx	lr

000291ce <write_cb>:
{
   291ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   291d0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   291d2:	4601      	mov	r1, r0
{
   291d4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   291d6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   291da:	6820      	ldr	r0, [r4, #0]
   291dc:	f000 fe99 	bl	29f12 <bt_gatt_check_perm>
   291e0:	4605      	mov	r5, r0
   291e2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   291e4:	bb20      	cbnz	r0, 29230 <write_cb+0x62>
	if (!data->req) {
   291e6:	7a23      	ldrb	r3, [r4, #8]
   291e8:	b1ab      	cbz	r3, 29216 <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   291ea:	2b18      	cmp	r3, #24
   291ec:	bf14      	ite	ne
   291ee:	2300      	movne	r3, #0
   291f0:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   291f2:	9301      	str	r3, [sp, #4]
   291f4:	8a63      	ldrh	r3, [r4, #18]
   291f6:	9300      	str	r3, [sp, #0]
   291f8:	68b7      	ldr	r7, [r6, #8]
   291fa:	8a23      	ldrh	r3, [r4, #16]
   291fc:	68e2      	ldr	r2, [r4, #12]
   291fe:	6820      	ldr	r0, [r4, #0]
   29200:	4631      	mov	r1, r6
   29202:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   29204:	1e03      	subs	r3, r0, #0
   29206:	db08      	blt.n	2921a <write_cb+0x4c>
   29208:	8a22      	ldrh	r2, [r4, #16]
   2920a:	4293      	cmp	r3, r2
   2920c:	d10e      	bne.n	2922c <write_cb+0x5e>
	data->err = 0U;
   2920e:	2300      	movs	r3, #0
   29210:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   29212:	2501      	movs	r5, #1
   29214:	e007      	b.n	29226 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29216:	2302      	movs	r3, #2
   29218:	e7eb      	b.n	291f2 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2921a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2921e:	d305      	bcc.n	2922c <write_cb+0x5e>
		return -err;
   29220:	425b      	negs	r3, r3
   29222:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   29224:	7523      	strb	r3, [r4, #20]
}
   29226:	4628      	mov	r0, r5
   29228:	b003      	add	sp, #12
   2922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2922c:	230e      	movs	r3, #14
   2922e:	e7f9      	b.n	29224 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   29230:	2500      	movs	r5, #0
   29232:	e7f8      	b.n	29226 <write_cb+0x58>

00029234 <find_info_cb>:
{
   29234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29236:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29238:	6816      	ldr	r6, [r2, #0]
{
   2923a:	4605      	mov	r5, r0
   2923c:	460f      	mov	r7, r1
   2923e:	4614      	mov	r4, r2
	if (!data->rsp) {
   29240:	b963      	cbnz	r3, 2925c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   29242:	6850      	ldr	r0, [r2, #4]
   29244:	2101      	movs	r1, #1
   29246:	3008      	adds	r0, #8
   29248:	f001 fc4c 	bl	2aae4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2924c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2924e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29250:	781b      	ldrb	r3, [r3, #0]
   29252:	2b00      	cmp	r3, #0
   29254:	bf0c      	ite	eq
   29256:	2301      	moveq	r3, #1
   29258:	2302      	movne	r3, #2
   2925a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2925c:	68a3      	ldr	r3, [r4, #8]
   2925e:	781b      	ldrb	r3, [r3, #0]
   29260:	2b01      	cmp	r3, #1
   29262:	d003      	beq.n	2926c <find_info_cb+0x38>
   29264:	2b02      	cmp	r3, #2
   29266:	d018      	beq.n	2929a <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   29268:	2000      	movs	r0, #0
   2926a:	e015      	b.n	29298 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2926c:	682b      	ldr	r3, [r5, #0]
   2926e:	781b      	ldrb	r3, [r3, #0]
   29270:	2b00      	cmp	r3, #0
   29272:	d1f9      	bne.n	29268 <find_info_cb+0x34>
   29274:	6860      	ldr	r0, [r4, #4]
   29276:	2104      	movs	r1, #4
   29278:	3008      	adds	r0, #8
   2927a:	f001 fc33 	bl	2aae4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2927e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29280:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29282:	885b      	ldrh	r3, [r3, #2]
   29284:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29286:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   29288:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2928a:	899b      	ldrh	r3, [r3, #12]
   2928c:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2928e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   29290:	2804      	cmp	r0, #4
   29292:	bf94      	ite	ls
   29294:	2000      	movls	r0, #0
   29296:	2001      	movhi	r0, #1
}
   29298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2929a:	682b      	ldr	r3, [r5, #0]
   2929c:	781b      	ldrb	r3, [r3, #0]
   2929e:	2b02      	cmp	r3, #2
   292a0:	d1e2      	bne.n	29268 <find_info_cb+0x34>
   292a2:	6860      	ldr	r0, [r4, #4]
   292a4:	2112      	movs	r1, #18
   292a6:	3008      	adds	r0, #8
   292a8:	f001 fc1c 	bl	2aae4 <net_buf_simple_add>
   292ac:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   292ae:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   292b0:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   292b2:	f823 7b02 	strh.w	r7, [r3], #2
   292b6:	1c51      	adds	r1, r2, #1
   292b8:	3211      	adds	r2, #17
   292ba:	f851 0b04 	ldr.w	r0, [r1], #4
   292be:	f843 0b04 	str.w	r0, [r3], #4
   292c2:	4291      	cmp	r1, r2
   292c4:	d1f9      	bne.n	292ba <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   292c6:	6863      	ldr	r3, [r4, #4]
   292c8:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   292ca:	899b      	ldrh	r3, [r3, #12]
   292cc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   292ce:	2812      	cmp	r0, #18
   292d0:	e7df      	b.n	29292 <find_info_cb+0x5e>

000292d2 <z_log_msg_static_create.constprop.0>:
   292d2:	2300      	movs	r3, #0
   292d4:	f7ea bcd4 	b.w	13c80 <z_impl_z_log_msg_static_create>

000292d8 <chan_req_send>:
{
   292d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   292da:	688e      	ldr	r6, [r1, #8]
{
   292dc:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   292de:	4630      	mov	r0, r6
   292e0:	f7ff fec4 	bl	2906c <net_buf_frags_len>
   292e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   292e6:	4283      	cmp	r3, r0
{
   292e8:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   292ea:	d30c      	bcc.n	29306 <chan_req_send+0x2e>
	req->buf = NULL;
   292ec:	2700      	movs	r7, #0
	chan->req = req;
   292ee:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	return chan_send(chan, buf);
   292f2:	4620      	mov	r0, r4
	req->buf = NULL;
   292f4:	608f      	str	r7, [r1, #8]
	return chan_send(chan, buf);
   292f6:	4631      	mov	r1, r6
   292f8:	f7ef fe1e 	bl	18f38 <chan_send>
	if (err) {
   292fc:	b110      	cbz	r0, 29304 <chan_req_send+0x2c>
		req->buf = buf;
   292fe:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   29300:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
}
   29304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   29306:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2930a:	e7fb      	b.n	29304 <chan_req_send+0x2c>

0002930c <process_queue>:
{
   2930c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2930e:	2200      	movs	r2, #0
{
   29310:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   29312:	2300      	movs	r3, #0
   29314:	4608      	mov	r0, r1
{
   29316:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   29318:	f001 fb44 	bl	2a9a4 <net_buf_get>
	if (buf) {
   2931c:	4605      	mov	r5, r0
   2931e:	b158      	cbz	r0, 29338 <process_queue+0x2c>
	return chan_send(chan, buf);
   29320:	4601      	mov	r1, r0
   29322:	4620      	mov	r0, r4
   29324:	f7ef fe08 	bl	18f38 <chan_send>
		if (err) {
   29328:	4604      	mov	r4, r0
   2932a:	b118      	cbz	r0, 29334 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2932c:	4629      	mov	r1, r5
   2932e:	4630      	mov	r0, r6
   29330:	f002 f9e9 	bl	2b706 <k_queue_prepend>
}
   29334:	4620      	mov	r0, r4
   29336:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   29338:	f06f 0401 	mvn.w	r4, #1
   2933c:	e7fa      	b.n	29334 <process_queue+0x28>

0002933e <bt_att_chan_send_rsp>:
{
   2933e:	b538      	push	{r3, r4, r5, lr}
   29340:	4604      	mov	r4, r0
   29342:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   29344:	f7ef fdf8 	bl	18f38 <chan_send>
	if (err) {
   29348:	b130      	cbz	r0, 29358 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2934a:	4629      	mov	r1, r5
   2934c:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   29350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   29354:	f001 bb93 	b.w	2aa7e <net_buf_put>
}
   29358:	bd38      	pop	{r3, r4, r5, pc}

0002935a <sys_slist_find_and_remove.isra.0>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2935a:	b510      	push	{r4, lr}
	return list->head;
   2935c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2935e:	2200      	movs	r2, #0
   29360:	b153      	cbz	r3, 29378 <sys_slist_find_and_remove.isra.0+0x1e>
   29362:	428b      	cmp	r3, r1
   29364:	d10e      	bne.n	29384 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   29366:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   29368:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2936a:	b932      	cbnz	r2, 2937a <sys_slist_find_and_remove.isra.0+0x20>
   2936c:	42a1      	cmp	r1, r4
	list->head = node;
   2936e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29370:	d100      	bne.n	29374 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   29372:	6043      	str	r3, [r0, #4]
	parent->next = child;
   29374:	2300      	movs	r3, #0
   29376:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29378:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2937a:	42a1      	cmp	r1, r4
	parent->next = child;
   2937c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2937e:	bf08      	it	eq
   29380:	6042      	streq	r2, [r0, #4]
}
   29382:	e7f7      	b.n	29374 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   29384:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29386:	681b      	ldr	r3, [r3, #0]
   29388:	e7ea      	b.n	29360 <sys_slist_find_and_remove.isra.0+0x6>

0002938a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2938a:	2301      	movs	r3, #1
   2938c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29390:	f3bf 8f5b 	dmb	ish
   29394:	e850 3f00 	ldrex	r3, [r0]
   29398:	ea43 0201 	orr.w	r2, r3, r1
   2939c:	e840 2c00 	strex	ip, r2, [r0]
   293a0:	f1bc 0f00 	cmp.w	ip, #0
   293a4:	d1f6      	bne.n	29394 <atomic_test_and_set_bit+0xa>
   293a6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   293aa:	4219      	tst	r1, r3
}
   293ac:	bf14      	ite	ne
   293ae:	2001      	movne	r0, #1
   293b0:	2000      	moveq	r0, #0
   293b2:	4770      	bx	lr

000293b4 <att_chan_read>:
{
   293b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293b8:	4680      	mov	r8, r0
   293ba:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293bc:	4610      	mov	r0, r2
{
   293be:	4699      	mov	r9, r3
   293c0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293c2:	f7ff fe53 	bl	2906c <net_buf_frags_len>
   293c6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   293ca:	4283      	cmp	r3, r0
{
   293cc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   293ce:	d97a      	bls.n	294c6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   293d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   293d4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   293d6:	4630      	mov	r0, r6
   293d8:	f001 fb62 	bl	2aaa0 <net_buf_frag_last>
	size_t len, total = 0;
   293dc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   293e0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   293e2:	4630      	mov	r0, r6
   293e4:	f7ff fe42 	bl	2906c <net_buf_frags_len>
   293e8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   293ec:	f105 0708 	add.w	r7, r5, #8
   293f0:	1a24      	subs	r4, r4, r0
   293f2:	4638      	mov	r0, r7
   293f4:	f001 fbb9 	bl	2ab6a <net_buf_simple_tailroom>
   293f8:	4284      	cmp	r4, r0
   293fa:	d211      	bcs.n	29420 <att_chan_read+0x6c>
   293fc:	4630      	mov	r0, r6
   293fe:	f7ff fe35 	bl	2906c <net_buf_frags_len>
   29402:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29406:	1a24      	subs	r4, r4, r0
		if (!len) {
   29408:	bb34      	cbnz	r4, 29458 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2940a:	79b0      	ldrb	r0, [r6, #6]
   2940c:	f7f4 fae8 	bl	1d9e0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29410:	2200      	movs	r2, #0
   29412:	2300      	movs	r3, #0
   29414:	f001 fac1 	bl	2a99a <net_buf_alloc_fixed>
			if (!frag) {
   29418:	4605      	mov	r5, r0
   2941a:	b930      	cbnz	r0, 2942a <att_chan_read+0x76>
	return total;
   2941c:	4657      	mov	r7, sl
   2941e:	e02c      	b.n	2947a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   29420:	4638      	mov	r0, r7
   29422:	f001 fba2 	bl	2ab6a <net_buf_simple_tailroom>
   29426:	4604      	mov	r4, r0
   29428:	e7ee      	b.n	29408 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2942a:	4601      	mov	r1, r0
   2942c:	4630      	mov	r0, r6
   2942e:	f001 fb48 	bl	2aac2 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29432:	4630      	mov	r0, r6
   29434:	f7ff fe1a 	bl	2906c <net_buf_frags_len>
   29438:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2943c:	f105 0708 	add.w	r7, r5, #8
   29440:	1a24      	subs	r4, r4, r0
   29442:	4638      	mov	r0, r7
   29444:	f001 fb91 	bl	2ab6a <net_buf_simple_tailroom>
   29448:	4284      	cmp	r4, r0
   2944a:	d21a      	bcs.n	29482 <att_chan_read+0xce>
   2944c:	4630      	mov	r0, r6
   2944e:	f7ff fe0d 	bl	2906c <net_buf_frags_len>
   29452:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29456:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29458:	68a9      	ldr	r1, [r5, #8]
   2945a:	89aa      	ldrh	r2, [r5, #12]
   2945c:	f8db 7004 	ldr.w	r7, [fp, #4]
   29460:	9803      	ldr	r0, [sp, #12]
   29462:	f8cd 9000 	str.w	r9, [sp]
   29466:	440a      	add	r2, r1
   29468:	b2a3      	uxth	r3, r4
   2946a:	4659      	mov	r1, fp
   2946c:	47b8      	blx	r7
		if (read < 0) {
   2946e:	1e07      	subs	r7, r0, #0
   29470:	da0c      	bge.n	2948c <att_chan_read+0xd8>
				return total;
   29472:	f1ba 0f00 	cmp.w	sl, #0
   29476:	bf18      	it	ne
   29478:	4657      	movne	r7, sl
}
   2947a:	4638      	mov	r0, r7
   2947c:	b005      	add	sp, #20
   2947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29482:	4638      	mov	r0, r7
   29484:	f001 fb71 	bl	2ab6a <net_buf_simple_tailroom>
   29488:	4604      	mov	r4, r0
   2948a:	e7e5      	b.n	29458 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2948c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2948e:	b993      	cbnz	r3, 294b6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29490:	4639      	mov	r1, r7
   29492:	f105 0008 	add.w	r0, r5, #8
   29496:	f001 fb25 	bl	2aae4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2949a:	4630      	mov	r0, r6
   2949c:	f7ff fde6 	bl	2906c <net_buf_frags_len>
   294a0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   294a4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   294a6:	4283      	cmp	r3, r0
		total += read;
   294a8:	44ba      	add	sl, r7
		offset += read;
   294aa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   294ae:	d9b5      	bls.n	2941c <att_chan_read+0x68>
   294b0:	42a7      	cmp	r7, r4
   294b2:	d096      	beq.n	293e2 <att_chan_read+0x2e>
   294b4:	e7b2      	b.n	2941c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   294b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   294b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   294ba:	4639      	mov	r1, r7
   294bc:	4628      	mov	r0, r5
   294be:	4798      	blx	r3
   294c0:	2800      	cmp	r0, #0
   294c2:	d1e5      	bne.n	29490 <att_chan_read+0xdc>
   294c4:	e7aa      	b.n	2941c <att_chan_read+0x68>
		return 0;
   294c6:	2700      	movs	r7, #0
   294c8:	e7d7      	b.n	2947a <att_chan_read+0xc6>

000294ca <read_cb>:
{
   294ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   294ce:	f8d2 8000 	ldr.w	r8, [r2]
{
   294d2:	4606      	mov	r6, r0
	data->err = 0x00;
   294d4:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   294d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   294da:	7317      	strb	r7, [r2, #12]
{
   294dc:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   294de:	4631      	mov	r1, r6
   294e0:	2295      	movs	r2, #149	; 0x95
   294e2:	f000 fd16 	bl	29f12 <bt_gatt_check_perm>
   294e6:	4604      	mov	r4, r0
   294e8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   294ea:	b9a0      	cbnz	r0, 29516 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   294ec:	e9cd 0000 	strd	r0, r0, [sp]
   294f0:	88ab      	ldrh	r3, [r5, #4]
   294f2:	68aa      	ldr	r2, [r5, #8]
   294f4:	4631      	mov	r1, r6
   294f6:	4640      	mov	r0, r8
   294f8:	f7ff ff5c 	bl	293b4 <att_chan_read>
	if (ret < 0) {
   294fc:	1e03      	subs	r3, r0, #0
   294fe:	da0c      	bge.n	2951a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   29500:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   29504:	bf26      	itte	cs
   29506:	425b      	negcs	r3, r3
   29508:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2950a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2950c:	732b      	strb	r3, [r5, #12]
}
   2950e:	4620      	mov	r0, r4
   29510:	b002      	add	sp, #8
   29512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   29516:	463c      	mov	r4, r7
   29518:	e7f9      	b.n	2950e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2951a:	2401      	movs	r4, #1
   2951c:	e7f7      	b.n	2950e <read_cb+0x44>

0002951e <read_vl_cb>:
{
   2951e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   29522:	f8d2 8000 	ldr.w	r8, [r2]
{
   29526:	4606      	mov	r6, r0
	data->err = 0x00;
   29528:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2952a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2952e:	7317      	strb	r7, [r2, #12]
{
   29530:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29532:	4631      	mov	r1, r6
   29534:	2295      	movs	r2, #149	; 0x95
   29536:	f000 fcec 	bl	29f12 <bt_gatt_check_perm>
   2953a:	4604      	mov	r4, r0
   2953c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2953e:	bb18      	cbnz	r0, 29588 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   29540:	68a8      	ldr	r0, [r5, #8]
   29542:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   29546:	8982      	ldrh	r2, [r0, #12]
   29548:	1a9b      	subs	r3, r3, r2
   2954a:	2b01      	cmp	r3, #1
   2954c:	dd15      	ble.n	2957a <read_vl_cb+0x5c>
   2954e:	2102      	movs	r1, #2
   29550:	3008      	adds	r0, #8
   29552:	f001 fac7 	bl	2aae4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29556:	88ab      	ldrh	r3, [r5, #4]
   29558:	68aa      	ldr	r2, [r5, #8]
   2955a:	e9cd 4400 	strd	r4, r4, [sp]
   2955e:	4607      	mov	r7, r0
   29560:	4631      	mov	r1, r6
   29562:	4640      	mov	r0, r8
   29564:	f7ff ff26 	bl	293b4 <att_chan_read>
	if (read < 0) {
   29568:	1e03      	subs	r3, r0, #0
   2956a:	da0a      	bge.n	29582 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2956c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   29570:	bf26      	itte	cs
   29572:	425b      	negcs	r3, r3
   29574:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   29576:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   29578:	732b      	strb	r3, [r5, #12]
}
   2957a:	4620      	mov	r0, r4
   2957c:	b002      	add	sp, #8
   2957e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   29582:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   29584:	2401      	movs	r4, #1
   29586:	e7f8      	b.n	2957a <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   29588:	463c      	mov	r4, r7
   2958a:	e7f6      	b.n	2957a <read_vl_cb+0x5c>

0002958c <bt_att_sent>:
{
   2958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2958e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29590:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29592:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   29596:	f850 4c04 	ldr.w	r4, [r0, #-4]
   2959a:	f3bf 8f5b 	dmb	ish
   2959e:	e853 2f00 	ldrex	r2, [r3]
   295a2:	f022 0210 	bic.w	r2, r2, #16
   295a6:	e843 2100 	strex	r1, r2, [r3]
   295aa:	2900      	cmp	r1, #0
   295ac:	d1f7      	bne.n	2959e <bt_att_sent+0x12>
   295ae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   295b2:	b30c      	cbz	r4, 295f8 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   295b4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   295b8:	b98b      	cbnz	r3, 295de <bt_att_sent+0x52>
   295ba:	6863      	ldr	r3, [r4, #4]
   295bc:	b17b      	cbz	r3, 295de <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   295be:	1d20      	adds	r0, r4, #4
   295c0:	f7ff fd4a 	bl	29058 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   295c4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   295c6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   295c8:	4638      	mov	r0, r7
   295ca:	f7ff fe85 	bl	292d8 <chan_req_send>
   295ce:	2800      	cmp	r0, #0
   295d0:	da12      	bge.n	295f8 <bt_att_sent+0x6c>
	parent->next = child;
   295d2:	6863      	ldr	r3, [r4, #4]
   295d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   295d6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   295d8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   295da:	b903      	cbnz	r3, 295de <bt_att_sent+0x52>
	list->tail = node;
   295dc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   295de:	f105 0194 	add.w	r1, r5, #148	; 0x94
   295e2:	4638      	mov	r0, r7
   295e4:	f7ff fe92 	bl	2930c <process_queue>
	if (!err) {
   295e8:	b130      	cbz	r0, 295f8 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   295ea:	f104 010c 	add.w	r1, r4, #12
   295ee:	4638      	mov	r0, r7
}
   295f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   295f4:	f7ff be8a 	b.w	2930c <process_queue>
}
   295f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000295fa <att_req_send_process>:
{
   295fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   295fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   29600:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29602:	2c00      	cmp	r4, #0
   29604:	d03b      	beq.n	2967e <att_req_send_process+0x84>
	return node->next;
   29606:	f854 59e0 	ldr.w	r5, [r4], #-224
   2960a:	b105      	cbz	r5, 2960e <att_req_send_process+0x14>
   2960c:	3de0      	subs	r5, #224	; 0xe0
{
   2960e:	2300      	movs	r3, #0
   29610:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   29612:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   29616:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2961a:	b9e2      	cbnz	r2, 29656 <att_req_send_process+0x5c>
		if (!req && prev &&
   2961c:	b16e      	cbz	r6, 2963a <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   2961e:	4638      	mov	r0, r7
   29620:	f7ff fd1a 	bl	29058 <sys_slist_get>
	if (node) {
   29624:	4606      	mov	r6, r0
   29626:	b9c0      	cbnz	r0, 2965a <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29628:	b34d      	cbz	r5, 2967e <att_req_send_process+0x84>
   2962a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
   2962e:	b102      	cbz	r2, 29632 <att_req_send_process+0x38>
   29630:	3ae0      	subs	r2, #224	; 0xe0
{
   29632:	4623      	mov	r3, r4
   29634:	462c      	mov	r4, r5
   29636:	4615      	mov	r5, r2
   29638:	e7ed      	b.n	29616 <att_req_send_process+0x1c>
		if (!req && prev &&
   2963a:	2b00      	cmp	r3, #0
   2963c:	d0ef      	beq.n	2961e <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2963e:	2103      	movs	r1, #3
   29640:	f104 0090 	add.w	r0, r4, #144	; 0x90
   29644:	f7ff fd6f 	bl	29126 <atomic_test_bit>
   29648:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2964a:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2964e:	f7ff fd6a 	bl	29126 <atomic_test_bit>
		if (!req && prev &&
   29652:	4282      	cmp	r2, r0
   29654:	d1e3      	bne.n	2961e <att_req_send_process+0x24>
   29656:	461c      	mov	r4, r3
   29658:	e7e6      	b.n	29628 <att_req_send_process+0x2e>
	return chan_req_send(chan, req);
   2965a:	4601      	mov	r1, r0
   2965c:	4620      	mov	r0, r4
   2965e:	f7ff fe3b 	bl	292d8 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   29662:	2800      	cmp	r0, #0
   29664:	da0b      	bge.n	2967e <att_req_send_process+0x84>
	parent->next = child;
   29666:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2966a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2966c:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   29670:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   29674:	2b00      	cmp	r3, #0
   29676:	d1d7      	bne.n	29628 <att_req_send_process+0x2e>
	list->tail = node;
   29678:	f8c8 6008 	str.w	r6, [r8, #8]
}
   2967c:	e7d4      	b.n	29628 <att_req_send_process+0x2e>
}
   2967e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029682 <bt_att_status>:
{
   29682:	b538      	push	{r3, r4, r5, lr}
   29684:	4605      	mov	r5, r0
   29686:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   29688:	2100      	movs	r1, #0
   2968a:	f7ff fd4c 	bl	29126 <atomic_test_bit>
   2968e:	b1c0      	cbz	r0, 296c2 <bt_att_status+0x40>
	if (!chan->att) {
   29690:	f855 0c04 	ldr.w	r0, [r5, #-4]
   29694:	b1a8      	cbz	r0, 296c2 <bt_att_status+0x40>
	if (chan->req) {
   29696:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2969a:	b993      	cbnz	r3, 296c2 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2969c:	3004      	adds	r0, #4
   2969e:	f7ff fcdb 	bl	29058 <sys_slist_get>
	if (!node) {
   296a2:	4604      	mov	r4, r0
   296a4:	b168      	cbz	r0, 296c2 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   296a6:	4601      	mov	r1, r0
   296a8:	1f28      	subs	r0, r5, #4
   296aa:	f7ff fe15 	bl	292d8 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   296ae:	2800      	cmp	r0, #0
   296b0:	da07      	bge.n	296c2 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   296b2:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   296b6:	685a      	ldr	r2, [r3, #4]
   296b8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   296ba:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   296bc:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   296be:	b902      	cbnz	r2, 296c2 <bt_att_status+0x40>
	list->tail = node;
   296c0:	609c      	str	r4, [r3, #8]
}
   296c2:	bd38      	pop	{r3, r4, r5, pc}

000296c4 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   296c4:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   296c6:	6883      	ldr	r3, [r0, #8]
   296c8:	695b      	ldr	r3, [r3, #20]
   296ca:	b10b      	cbz	r3, 296d0 <att_sent+0xc>
		chan->ops->sent(chan);
   296cc:	3004      	adds	r0, #4
   296ce:	4718      	bx	r3
}
   296d0:	4770      	bx	lr

000296d2 <att_unknown>:
{
   296d2:	b510      	push	{r4, lr}
   296d4:	460c      	mov	r4, r1
	if (!err) {
   296d6:	b90a      	cbnz	r2, 296dc <att_unknown+0xa>
		att_sent(conn, user_data);
   296d8:	f7ff fff4 	bl	296c4 <att_sent>
	tx_meta_data_free(user_data);
   296dc:	4620      	mov	r0, r4
}
   296de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   296e2:	f7ef bb07 	b.w	18cf4 <tx_meta_data_free>

000296e6 <att_tx_complete>:
{
   296e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   296ea:	4606      	mov	r6, r0
   296ec:	460d      	mov	r5, r1
	if (!err) {
   296ee:	4614      	mov	r4, r2
   296f0:	b90a      	cbnz	r2, 296f6 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   296f2:	f7ff ffe7 	bl	296c4 <att_sent>
	tx_meta_data_free(data);
   296f6:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   296f8:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   296fa:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   296fe:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   29702:	f7ef faf7 	bl	18cf4 <tx_meta_data_free>
	if (!err && func) {
   29706:	b904      	cbnz	r4, 2970a <att_tx_complete+0x24>
   29708:	b92f      	cbnz	r7, 29716 <att_tx_complete+0x30>
}
   2970a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2970e:	4649      	mov	r1, r9
   29710:	4630      	mov	r0, r6
   29712:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   29714:	3401      	adds	r4, #1
   29716:	b2a3      	uxth	r3, r4
   29718:	4598      	cmp	r8, r3
   2971a:	d8f8      	bhi.n	2970e <att_tx_complete+0x28>
   2971c:	e7f5      	b.n	2970a <att_tx_complete+0x24>

0002971e <att_req_sent>:
{
   2971e:	b510      	push	{r4, lr}
   29720:	460c      	mov	r4, r1
	if (!err) {
   29722:	b90a      	cbnz	r2, 29728 <att_req_sent+0xa>
		att_sent(conn, user_data);
   29724:	f7ff ffce 	bl	296c4 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   29728:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2972a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2972e:	b12b      	cbz	r3, 2973c <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   29730:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29734:	2300      	movs	r3, #0
   29736:	30b0      	adds	r0, #176	; 0xb0
   29738:	f7f8 fbfa 	bl	21f30 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2973c:	4620      	mov	r0, r4
}
   2973e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   29742:	f7ef bad7 	b.w	18cf4 <tx_meta_data_free>

00029746 <att_cfm_sent>:
{
   29746:	b510      	push	{r4, lr}
   29748:	460c      	mov	r4, r1
	if (!err) {
   2974a:	b90a      	cbnz	r2, 29750 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2974c:	f7ff ffba 	bl	296c4 <att_sent>
   29750:	6823      	ldr	r3, [r4, #0]
   29752:	f3bf 8f5b 	dmb	ish
   29756:	3390      	adds	r3, #144	; 0x90
   29758:	e853 2f00 	ldrex	r2, [r3]
   2975c:	f022 0202 	bic.w	r2, r2, #2
   29760:	e843 2100 	strex	r1, r2, [r3]
   29764:	2900      	cmp	r1, #0
   29766:	d1f7      	bne.n	29758 <att_cfm_sent+0x12>
   29768:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2976c:	4620      	mov	r0, r4
}
   2976e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   29772:	f7ef babf 	b.w	18cf4 <tx_meta_data_free>

00029776 <att_rsp_sent>:
{
   29776:	b510      	push	{r4, lr}
   29778:	460c      	mov	r4, r1
	if (!err) {
   2977a:	b90a      	cbnz	r2, 29780 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2977c:	f7ff ffa2 	bl	296c4 <att_sent>
   29780:	6823      	ldr	r3, [r4, #0]
   29782:	f3bf 8f5b 	dmb	ish
   29786:	3390      	adds	r3, #144	; 0x90
   29788:	e853 2f00 	ldrex	r2, [r3]
   2978c:	f022 0201 	bic.w	r2, r2, #1
   29790:	e843 2100 	strex	r1, r2, [r3]
   29794:	2900      	cmp	r1, #0
   29796:	d1f7      	bne.n	29788 <att_rsp_sent+0x12>
   29798:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2979c:	4620      	mov	r0, r4
}
   2979e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   297a2:	f7ef baa7 	b.w	18cf4 <tx_meta_data_free>

000297a6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   297a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297aa:	4688      	mov	r8, r1
   297ac:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   297ae:	2101      	movs	r1, #1
   297b0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   297b2:	4605      	mov	r5, r0
   297b4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   297b6:	f7ef fd91 	bl	192dc <bt_att_chan_create_pdu>
	if (!buf) {
   297ba:	4604      	mov	r4, r0
   297bc:	b170      	cbz	r0, 297dc <send_err_rsp.part.0+0x36>
   297be:	2104      	movs	r1, #4
   297c0:	3008      	adds	r0, #8
   297c2:	f001 f98f 	bl	2aae4 <net_buf_simple_add>
	rsp->request = req;
   297c6:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   297ca:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   297cc:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   297d0:	4621      	mov	r1, r4
   297d2:	4628      	mov	r0, r5
}
   297d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   297d8:	f7ff bdb1 	b.w	2933e <bt_att_chan_send_rsp>
}
   297dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000297e0 <att_write_cmd>:
{
   297e0:	b530      	push	{r4, r5, lr}
   297e2:	460c      	mov	r4, r1
   297e4:	b085      	sub	sp, #20
   297e6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   297e8:	f101 0008 	add.w	r0, r1, #8
   297ec:	f001 f9b1 	bl	2ab52 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   297f0:	89a2      	ldrh	r2, [r4, #12]
   297f2:	9202      	str	r2, [sp, #8]
   297f4:	68a2      	ldr	r2, [r4, #8]
   297f6:	9201      	str	r2, [sp, #4]
   297f8:	2200      	movs	r2, #0
   297fa:	4603      	mov	r3, r0
   297fc:	9200      	str	r2, [sp, #0]
   297fe:	4611      	mov	r1, r2
   29800:	4628      	mov	r0, r5
   29802:	f7ef fe7d 	bl	19500 <att_write_rsp>
}
   29806:	b005      	add	sp, #20
   29808:	bd30      	pop	{r4, r5, pc}

0002980a <att_write_req>:
{
   2980a:	b530      	push	{r4, r5, lr}
   2980c:	460c      	mov	r4, r1
   2980e:	b085      	sub	sp, #20
   29810:	4605      	mov	r5, r0
   29812:	f101 0008 	add.w	r0, r1, #8
   29816:	f001 f99c 	bl	2ab52 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2981a:	89a2      	ldrh	r2, [r4, #12]
   2981c:	9202      	str	r2, [sp, #8]
   2981e:	68a2      	ldr	r2, [r4, #8]
   29820:	9201      	str	r2, [sp, #4]
   29822:	2200      	movs	r2, #0
   29824:	4603      	mov	r3, r0
   29826:	9200      	str	r2, [sp, #0]
   29828:	2112      	movs	r1, #18
   2982a:	2213      	movs	r2, #19
   2982c:	4628      	mov	r0, r5
   2982e:	f7ef fe67 	bl	19500 <att_write_rsp>
}
   29832:	b005      	add	sp, #20
   29834:	bd30      	pop	{r4, r5, pc}

00029836 <att_read_blob_req>:
{
   29836:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   29838:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2983a:	8813      	ldrh	r3, [r2, #0]
   2983c:	8852      	ldrh	r2, [r2, #2]
   2983e:	9200      	str	r2, [sp, #0]
   29840:	210c      	movs	r1, #12
   29842:	220d      	movs	r2, #13
   29844:	f7f0 f986 	bl	19b54 <att_read_rsp>
}
   29848:	b003      	add	sp, #12
   2984a:	f85d fb04 	ldr.w	pc, [sp], #4

0002984e <att_read_req>:
{
   2984e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   29850:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29852:	2200      	movs	r2, #0
   29854:	881b      	ldrh	r3, [r3, #0]
   29856:	9200      	str	r2, [sp, #0]
   29858:	210a      	movs	r1, #10
   2985a:	220b      	movs	r2, #11
   2985c:	f7f0 f97a 	bl	19b54 <att_read_rsp>
}
   29860:	b003      	add	sp, #12
   29862:	f85d fb04 	ldr.w	pc, [sp], #4

00029866 <att_mtu_req>:
{
   29866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29868:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2986a:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2986e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29870:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   29872:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29874:	f7ff fc57 	bl	29126 <atomic_test_bit>
   29878:	4604      	mov	r4, r0
   2987a:	b9f0      	cbnz	r0, 298ba <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2987c:	689b      	ldr	r3, [r3, #8]
   2987e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29880:	2e16      	cmp	r6, #22
   29882:	d91c      	bls.n	298be <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29884:	4638      	mov	r0, r7
   29886:	2202      	movs	r2, #2
   29888:	f7ef feec 	bl	19664 <bt_att_create_pdu>
	if (!pdu) {
   2988c:	4607      	mov	r7, r0
   2988e:	b1c0      	cbz	r0, 298c2 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   29890:	2102      	movs	r1, #2
   29892:	3008      	adds	r0, #8
   29894:	f001 f926 	bl	2aae4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29898:	2341      	movs	r3, #65	; 0x41
   2989a:	7003      	strb	r3, [r0, #0]
   2989c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2989e:	4639      	mov	r1, r7
   298a0:	4628      	mov	r0, r5
   298a2:	f7ff fd4c 	bl	2933e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   298a6:	2e41      	cmp	r6, #65	; 0x41
   298a8:	bf28      	it	cs
   298aa:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   298ac:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   298ae:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   298b0:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   298b2:	f7ff fc4c 	bl	2914e <att_chan_mtu_updated>
	return 0;
   298b6:	4620      	mov	r0, r4
}
   298b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   298ba:	2006      	movs	r0, #6
   298bc:	e7fc      	b.n	298b8 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   298be:	2004      	movs	r0, #4
   298c0:	e7fa      	b.n	298b8 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   298c2:	200e      	movs	r0, #14
   298c4:	e7f8      	b.n	298b8 <att_mtu_req+0x52>

000298c6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   298c6:	898a      	ldrh	r2, [r1, #12]
   298c8:	6889      	ldr	r1, [r1, #8]
   298ca:	2300      	movs	r3, #0
   298cc:	f7f0 baf8 	b.w	19ec0 <att_handle_rsp>

000298d0 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   298d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   298d4:	b570      	push	{r4, r5, r6, lr}
   298d6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   298d8:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   298da:	2b00      	cmp	r3, #0
   298dc:	d039      	beq.n	29952 <bt_att_encrypt_change+0x82>
	if (hci_status) {
   298de:	b171      	cbz	r1, 298fe <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   298e0:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   298e4:	2b00      	cmp	r3, #0
   298e6:	d034      	beq.n	29952 <bt_att_encrypt_change+0x82>
   298e8:	7c1b      	ldrb	r3, [r3, #16]
   298ea:	07da      	lsls	r2, r3, #31
   298ec:	d531      	bpl.n	29952 <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   298ee:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   298f0:	2200      	movs	r2, #0
   298f2:	4630      	mov	r0, r6
   298f4:	4611      	mov	r1, r2
}
   298f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   298fa:	f7f0 bae1 	b.w	19ec0 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   298fe:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   29900:	4628      	mov	r0, r5
   29902:	f7f1 fe19 	bl	1b538 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   29906:	7a6b      	ldrb	r3, [r5, #9]
   29908:	2b01      	cmp	r3, #1
   2990a:	d022      	beq.n	29952 <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2990c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   29910:	b1fd      	cbz	r5, 29952 <bt_att_encrypt_change+0x82>
   29912:	7c2b      	ldrb	r3, [r5, #16]
   29914:	07db      	lsls	r3, r3, #31
   29916:	d51c      	bpl.n	29952 <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   29918:	68eb      	ldr	r3, [r5, #12]
   2991a:	2b00      	cmp	r3, #0
   2991c:	d0e7      	beq.n	298ee <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2991e:	696a      	ldr	r2, [r5, #20]
   29920:	7c69      	ldrb	r1, [r5, #17]
   29922:	4630      	mov	r0, r6
   29924:	f7ef fcda 	bl	192dc <bt_att_chan_create_pdu>
	if (!buf) {
   29928:	4604      	mov	r4, r0
   2992a:	b150      	cbz	r0, 29942 <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   2992c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   29930:	68eb      	ldr	r3, [r5, #12]
   29932:	4798      	blx	r3
   29934:	b138      	cbz	r0, 29946 <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   29936:	6960      	ldr	r0, [r4, #20]
   29938:	f7ef f9dc 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(buf);
   2993c:	4620      	mov	r0, r4
   2993e:	f7f4 f913 	bl	1db68 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   29942:	230e      	movs	r3, #14
   29944:	e7d4      	b.n	298f0 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   29946:	4621      	mov	r1, r4
   29948:	4630      	mov	r0, r6
   2994a:	f7ef faf5 	bl	18f38 <chan_send>
   2994e:	2800      	cmp	r0, #0
   29950:	d1f1      	bne.n	29936 <bt_att_encrypt_change+0x66>
}
   29952:	bd70      	pop	{r4, r5, r6, pc}

00029954 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   29954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29956:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   29958:	f7ef fa9c 	bl	18e94 <att_get>
	if (!att) {
   2995c:	4604      	mov	r4, r0
   2995e:	b940      	cbnz	r0, 29972 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   29960:	6968      	ldr	r0, [r5, #20]
   29962:	f7ef f9c7 	bl	18cf4 <tx_meta_data_free>
		net_buf_unref(buf);
   29966:	4628      	mov	r0, r5
   29968:	f7f4 f8fe 	bl	1db68 <net_buf_unref>
		return -ENOTCONN;
   2996c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   29970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   29972:	f100 060c 	add.w	r6, r0, #12
   29976:	4629      	mov	r1, r5
   29978:	4630      	mov	r0, r6
   2997a:	f001 f880 	bl	2aa7e <net_buf_put>
	return list->head;
   2997e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29980:	4625      	mov	r5, r4
   29982:	b11c      	cbz	r4, 2998c <bt_att_send+0x38>
	return node->next;
   29984:	f855 49e0 	ldr.w	r4, [r5], #-224
   29988:	b104      	cbz	r4, 2998c <bt_att_send+0x38>
   2998a:	3ce0      	subs	r4, #224	; 0xe0
   2998c:	2300      	movs	r3, #0
   2998e:	461f      	mov	r7, r3
   29990:	b13d      	cbz	r5, 299a2 <bt_att_send+0x4e>
		if (err == -ENOENT && prev &&
   29992:	1c9a      	adds	r2, r3, #2
   29994:	d007      	beq.n	299a6 <bt_att_send+0x52>
		err = process_queue(chan, &att->tx_queue);
   29996:	4631      	mov	r1, r6
   29998:	4628      	mov	r0, r5
   2999a:	f7ff fcb7 	bl	2930c <process_queue>
		if (!err) {
   2999e:	4603      	mov	r3, r0
   299a0:	b980      	cbnz	r0, 299c4 <bt_att_send+0x70>
	return 0;
   299a2:	2000      	movs	r0, #0
   299a4:	e7e4      	b.n	29970 <bt_att_send+0x1c>
		if (err == -ENOENT && prev &&
   299a6:	2f00      	cmp	r7, #0
   299a8:	d0f5      	beq.n	29996 <bt_att_send+0x42>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   299aa:	2103      	movs	r1, #3
   299ac:	f105 0090 	add.w	r0, r5, #144	; 0x90
   299b0:	f7ff fbb9 	bl	29126 <atomic_test_bit>
   299b4:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   299b6:	f107 0090 	add.w	r0, r7, #144	; 0x90
   299ba:	f7ff fbb4 	bl	29126 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   299be:	4282      	cmp	r2, r0
   299c0:	d1e9      	bne.n	29996 <bt_att_send+0x42>
   299c2:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   299c4:	b13c      	cbz	r4, 299d6 <bt_att_send+0x82>
   299c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   299ca:	b102      	cbz	r2, 299ce <bt_att_send+0x7a>
   299cc:	3ae0      	subs	r2, #224	; 0xe0
   299ce:	462f      	mov	r7, r5
   299d0:	4625      	mov	r5, r4
   299d2:	4614      	mov	r4, r2
   299d4:	e7dc      	b.n	29990 <bt_att_send+0x3c>
   299d6:	4622      	mov	r2, r4
   299d8:	e7f9      	b.n	299ce <bt_att_send+0x7a>

000299da <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   299da:	b510      	push	{r4, lr}
   299dc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   299de:	f7ef fa59 	bl	18e94 <att_get>
	if (!att) {
   299e2:	b160      	cbz	r0, 299fe <bt_att_req_send+0x24>
	parent->next = child;
   299e4:	2300      	movs	r3, #0
   299e6:	6023      	str	r3, [r4, #0]
	return list->tail;
   299e8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   299ea:	b92b      	cbnz	r3, 299f8 <bt_att_req_send+0x1e>
	list->head = node;
   299ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   299f0:	f7ff fe03 	bl	295fa <att_req_send_process>

	return 0;
   299f4:	2000      	movs	r0, #0
}
   299f6:	bd10      	pop	{r4, pc}
	parent->next = child;
   299f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   299fa:	6084      	str	r4, [r0, #8]
}
   299fc:	e7f8      	b.n	299f0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   299fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29a02:	e7f8      	b.n	299f6 <bt_att_req_send+0x1c>

00029a04 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   29a04:	2001      	movs	r0, #1
   29a06:	4770      	bx	lr

00029a08 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   29a08:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   29a0a:	f7ef fa43 	bl	18e94 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   29a0e:	b198      	cbz	r0, 29a38 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   29a10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   29a12:	b18b      	cbz	r3, 29a38 <bt_att_clear_out_of_sync_sent+0x30>
   29a14:	f3bf 8f5b 	dmb	ish
   29a18:	3be0      	subs	r3, #224	; 0xe0
   29a1a:	f103 0290 	add.w	r2, r3, #144	; 0x90
   29a1e:	e852 1f00 	ldrex	r1, [r2]
   29a22:	f021 0120 	bic.w	r1, r1, #32
   29a26:	e842 1000 	strex	r0, r1, [r2]
   29a2a:	2800      	cmp	r0, #0
   29a2c:	d1f7      	bne.n	29a1e <bt_att_clear_out_of_sync_sent+0x16>
   29a2e:	f3bf 8f5b 	dmb	ish
	return node->next;
   29a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   29a36:	e7ec      	b.n	29a12 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   29a38:	bd08      	pop	{r3, pc}

00029a3a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   29a3a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   29a3c:	2104      	movs	r1, #4
   29a3e:	f7ff fb00 	bl	29042 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   29a42:	b128      	cbz	r0, 29a50 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   29a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   29a48:	2105      	movs	r1, #5
   29a4a:	308c      	adds	r0, #140	; 0x8c
   29a4c:	f7ff bb6b 	b.w	29126 <atomic_test_bit>
}
   29a50:	bd08      	pop	{r3, pc}

00029a52 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   29a52:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   29a54:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   29a58:	2201      	movs	r2, #1
   29a5a:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   29a5c:	7403      	strb	r3, [r0, #16]
}
   29a5e:	4770      	bx	lr

00029a60 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   29a60:	6010      	str	r0, [r2, #0]
}
   29a62:	2000      	movs	r0, #0
   29a64:	4770      	bx	lr

00029a66 <gatt_ccc_changed>:
{
   29a66:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   29a68:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   29a6a:	895a      	ldrh	r2, [r3, #10]
   29a6c:	428a      	cmp	r2, r1
   29a6e:	d003      	beq.n	29a78 <gatt_ccc_changed+0x12>
		ccc->value = value;
   29a70:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   29a72:	68db      	ldr	r3, [r3, #12]
   29a74:	b103      	cbz	r3, 29a78 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   29a76:	4718      	bx	r3
}
   29a78:	4770      	bx	lr

00029a7a <gatt_indicate_rsp>:
{
   29a7a:	b510      	push	{r4, lr}
   29a7c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   29a7e:	68a3      	ldr	r3, [r4, #8]
{
   29a80:	460a      	mov	r2, r1
	if (params->func) {
   29a82:	b10b      	cbz	r3, 29a88 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29a84:	4621      	mov	r1, r4
   29a86:	4798      	blx	r3
	params->_ref--;
   29a88:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29a8a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   29a8c:	3b01      	subs	r3, #1
   29a8e:	b2db      	uxtb	r3, r3
   29a90:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29a92:	b122      	cbz	r2, 29a9e <gatt_indicate_rsp+0x24>
   29a94:	b91b      	cbnz	r3, 29a9e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29a96:	4620      	mov	r0, r4
}
   29a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   29a9c:	4710      	bx	r2
}
   29a9e:	bd10      	pop	{r4, pc}

00029aa0 <match_uuid>:
	data->attr = attr;
   29aa0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29aa2:	8091      	strh	r1, [r2, #4]
}
   29aa4:	2000      	movs	r0, #0
   29aa6:	4770      	bx	lr

00029aa8 <ccc_set_cb>:
}
   29aa8:	2000      	movs	r0, #0
   29aaa:	4770      	bx	lr

00029aac <write_name>:
{
   29aac:	b570      	push	{r4, r5, r6, lr}
   29aae:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   29ab0:	2100      	movs	r1, #0
{
   29ab2:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   29ab6:	9101      	str	r1, [sp, #4]
{
   29ab8:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   29aba:	a802      	add	r0, sp, #8
   29abc:	223d      	movs	r2, #61	; 0x3d
{
   29abe:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   29ac0:	f002 faa6 	bl	2c010 <memset>
	if (offset >= sizeof(value)) {
   29ac4:	2d40      	cmp	r5, #64	; 0x40
   29ac6:	d80e      	bhi.n	29ae6 <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   29ac8:	4425      	add	r5, r4
   29aca:	2d40      	cmp	r5, #64	; 0x40
   29acc:	dc0e      	bgt.n	29aec <write_name+0x40>
	memcpy(value, buf, len);
   29ace:	2341      	movs	r3, #65	; 0x41
   29ad0:	4622      	mov	r2, r4
   29ad2:	4631      	mov	r1, r6
   29ad4:	a801      	add	r0, sp, #4
   29ad6:	f002 fa88 	bl	2bfea <__memcpy_chk>
	bt_set_name(value);
   29ada:	a801      	add	r0, sp, #4
   29adc:	f7ed fb86 	bl	171ec <bt_set_name>
}
   29ae0:	4620      	mov	r0, r4
   29ae2:	b012      	add	sp, #72	; 0x48
   29ae4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29ae6:	f06f 0406 	mvn.w	r4, #6
   29aea:	e7f9      	b.n	29ae0 <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   29aec:	f06f 040c 	mvn.w	r4, #12
   29af0:	e7f6      	b.n	29ae0 <write_name+0x34>

00029af2 <gen_hash_m>:
{
   29af2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29af4:	6807      	ldr	r7, [r0, #0]
   29af6:	783d      	ldrb	r5, [r7, #0]
{
   29af8:	b089      	sub	sp, #36	; 0x24
   29afa:	4606      	mov	r6, r0
   29afc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29afe:	b10d      	cbz	r5, 29b04 <gen_hash_m+0x12>
	switch (u16->val) {
   29b00:	2501      	movs	r5, #1
   29b02:	e014      	b.n	29b2e <gen_hash_m+0x3c>
   29b04:	887b      	ldrh	r3, [r7, #2]
   29b06:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29b0a:	d004      	beq.n	29b16 <gen_hash_m+0x24>
   29b0c:	d812      	bhi.n	29b34 <gen_hash_m+0x42>
   29b0e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   29b12:	2b03      	cmp	r3, #3
   29b14:	d8f4      	bhi.n	29b00 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29b16:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b1a:	2202      	movs	r2, #2
   29b1c:	f10d 010a 	add.w	r1, sp, #10
   29b20:	4620      	mov	r0, r4
   29b22:	f7fe fd24 	bl	2856e <tc_cmac_update>
   29b26:	b9e0      	cbnz	r0, 29b62 <gen_hash_m+0x70>
			state->err = -EINVAL;
   29b28:	f06f 0315 	mvn.w	r3, #21
   29b2c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   29b2e:	4628      	mov	r0, r5
   29b30:	b009      	add	sp, #36	; 0x24
   29b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   29b34:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   29b38:	33ff      	adds	r3, #255	; 0xff
   29b3a:	b29b      	uxth	r3, r3
   29b3c:	2b04      	cmp	r3, #4
   29b3e:	d8df      	bhi.n	29b00 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29b40:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b44:	2202      	movs	r2, #2
   29b46:	f10d 010a 	add.w	r1, sp, #10
   29b4a:	4620      	mov	r0, r4
   29b4c:	f7fe fd0f 	bl	2856e <tc_cmac_update>
   29b50:	2800      	cmp	r0, #0
   29b52:	d0e9      	beq.n	29b28 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   29b54:	887b      	ldrh	r3, [r7, #2]
   29b56:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b5a:	2202      	movs	r2, #2
   29b5c:	f10d 010a 	add.w	r1, sp, #10
   29b60:	e016      	b.n	29b90 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   29b62:	887b      	ldrh	r3, [r7, #2]
   29b64:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b68:	2202      	movs	r2, #2
   29b6a:	f10d 010a 	add.w	r1, sp, #10
   29b6e:	4620      	mov	r0, r4
   29b70:	f7fe fcfd 	bl	2856e <tc_cmac_update>
   29b74:	2800      	cmp	r0, #0
   29b76:	d0d7      	beq.n	29b28 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29b78:	2000      	movs	r0, #0
   29b7a:	aa03      	add	r2, sp, #12
   29b7c:	6877      	ldr	r7, [r6, #4]
   29b7e:	9000      	str	r0, [sp, #0]
   29b80:	2313      	movs	r3, #19
   29b82:	4631      	mov	r1, r6
   29b84:	47b8      	blx	r7
		if (len < 0) {
   29b86:	1e02      	subs	r2, r0, #0
   29b88:	da01      	bge.n	29b8e <gen_hash_m+0x9c>
			state->err = len;
   29b8a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29b8c:	e7cf      	b.n	29b2e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   29b8e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b90:	4620      	mov	r0, r4
   29b92:	f7fe fcec 	bl	2856e <tc_cmac_update>
   29b96:	2800      	cmp	r0, #0
   29b98:	d1b2      	bne.n	29b00 <gen_hash_m+0xe>
   29b9a:	e7c5      	b.n	29b28 <gen_hash_m+0x36>

00029b9c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29b9c:	f3bf 8f5b 	dmb	ish
   29ba0:	6800      	ldr	r0, [r0, #0]
   29ba2:	f3bf 8f5b 	dmb	ish
}
   29ba6:	4770      	bx	lr

00029ba8 <atomic_or>:
{
   29ba8:	4603      	mov	r3, r0
}
   29baa:	f3bf 8f5b 	dmb	ish
   29bae:	e853 0f00 	ldrex	r0, [r3]
   29bb2:	ea40 0201 	orr.w	r2, r0, r1
   29bb6:	e843 2c00 	strex	ip, r2, [r3]
   29bba:	f1bc 0f00 	cmp.w	ip, #0
   29bbe:	d1f6      	bne.n	29bae <atomic_or+0x6>
   29bc0:	f3bf 8f5b 	dmb	ish
   29bc4:	4770      	bx	lr

00029bc6 <atomic_and>:
{
   29bc6:	4603      	mov	r3, r0
}
   29bc8:	f3bf 8f5b 	dmb	ish
   29bcc:	e853 0f00 	ldrex	r0, [r3]
   29bd0:	ea00 0201 	and.w	r2, r0, r1
   29bd4:	e843 2c00 	strex	ip, r2, [r3]
   29bd8:	f1bc 0f00 	cmp.w	ip, #0
   29bdc:	d1f6      	bne.n	29bcc <atomic_and+0x6>
   29bde:	f3bf 8f5b 	dmb	ish
   29be2:	4770      	bx	lr

00029be4 <bt_addr_le_copy>:
   29be4:	680b      	ldr	r3, [r1, #0]
   29be6:	6003      	str	r3, [r0, #0]
   29be8:	888b      	ldrh	r3, [r1, #4]
   29bea:	8083      	strh	r3, [r0, #4]
   29bec:	798b      	ldrb	r3, [r1, #6]
   29bee:	7183      	strb	r3, [r0, #6]
}
   29bf0:	4770      	bx	lr

00029bf2 <clear_ccc_cfg>:
{
   29bf2:	b513      	push	{r0, r1, r4, lr}
   29bf4:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29bf6:	2400      	movs	r4, #0
   29bf8:	4669      	mov	r1, sp
   29bfa:	3001      	adds	r0, #1
   29bfc:	9400      	str	r4, [sp, #0]
   29bfe:	f8cd 4003 	str.w	r4, [sp, #3]
   29c02:	f7ff ffef 	bl	29be4 <bt_addr_le_copy>
	cfg->id = 0U;
   29c06:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   29c08:	8114      	strh	r4, [r2, #8]
}
   29c0a:	b002      	add	sp, #8
   29c0c:	bd10      	pop	{r4, pc}

00029c0e <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   29c0e:	2300      	movs	r3, #0
   29c10:	6003      	str	r3, [r0, #0]
   29c12:	6043      	str	r3, [r0, #4]
   29c14:	6083      	str	r3, [r0, #8]
}
   29c16:	4770      	bx	lr

00029c18 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   29c18:	b538      	push	{r3, r4, r5, lr}
   29c1a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   29c1e:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   29c20:	460c      	mov	r4, r1
   29c22:	4611      	mov	r1, r2
	if (offset > value_len) {
   29c24:	d30a      	bcc.n	29c3c <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   29c26:	1aad      	subs	r5, r5, r2
   29c28:	42a5      	cmp	r5, r4
   29c2a:	bfa8      	it	ge
   29c2c:	4625      	movge	r5, r4
   29c2e:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29c30:	462a      	mov	r2, r5
   29c32:	4419      	add	r1, r3
   29c34:	f002 f9cb 	bl	2bfce <memcpy>
}
   29c38:	4628      	mov	r0, r5
   29c3a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29c3c:	f06f 0506 	mvn.w	r5, #6
   29c40:	e7fa      	b.n	29c38 <bt_gatt_attr_read.constprop.0+0x20>

00029c42 <bt_gatt_attr_read_service>:
{
   29c42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29c44:	460c      	mov	r4, r1
   29c46:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   29c48:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   29c4a:	781c      	ldrb	r4, [r3, #0]
{
   29c4c:	4610      	mov	r0, r2
   29c4e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29c52:	b13c      	cbz	r4, 29c64 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29c54:	2410      	movs	r4, #16
   29c56:	3301      	adds	r3, #1
   29c58:	9406      	str	r4, [sp, #24]
}
   29c5a:	b004      	add	sp, #16
   29c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29c60:	f7ff bfda 	b.w	29c18 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29c64:	885b      	ldrh	r3, [r3, #2]
   29c66:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29c6a:	2302      	movs	r3, #2
   29c6c:	9300      	str	r3, [sp, #0]
   29c6e:	f10d 030e 	add.w	r3, sp, #14
   29c72:	f7ff ffd1 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29c76:	b004      	add	sp, #16
   29c78:	bd10      	pop	{r4, pc}

00029c7a <cf_read>:
{
   29c7a:	b530      	push	{r4, r5, lr}
   29c7c:	b085      	sub	sp, #20
   29c7e:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   29c80:	2300      	movs	r3, #0
{
   29c82:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   29c84:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   29c88:	f7f0 f9e4 	bl	1a054 <find_cf_cfg>
	if (cfg) {
   29c8c:	b110      	cbz	r0, 29c94 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   29c8e:	7a03      	ldrb	r3, [r0, #8]
   29c90:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29c94:	2301      	movs	r3, #1
   29c96:	9300      	str	r3, [sp, #0]
   29c98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29c9c:	ab03      	add	r3, sp, #12
   29c9e:	4629      	mov	r1, r5
   29ca0:	4620      	mov	r0, r4
   29ca2:	f7ff ffb9 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29ca6:	b005      	add	sp, #20
   29ca8:	bd30      	pop	{r4, r5, pc}

00029caa <read_name>:
{
   29caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29cae:	4614      	mov	r4, r2
   29cb0:	461d      	mov	r5, r3
   29cb2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   29cb6:	f7ed fad5 	bl	17264 <bt_get_name>
   29cba:	4606      	mov	r6, r0
				 strlen(name));
   29cbc:	f7e2 fe2b 	bl	c916 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29cc0:	b280      	uxth	r0, r0
   29cc2:	9006      	str	r0, [sp, #24]
   29cc4:	4633      	mov	r3, r6
   29cc6:	463a      	mov	r2, r7
   29cc8:	4629      	mov	r1, r5
   29cca:	4620      	mov	r0, r4
}
   29ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29cd0:	f7ff bfa2 	b.w	29c18 <bt_gatt_attr_read.constprop.0>

00029cd4 <read_appearance>:
{
   29cd4:	b530      	push	{r4, r5, lr}
   29cd6:	b085      	sub	sp, #20
   29cd8:	4614      	mov	r4, r2
   29cda:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   29cdc:	f7fe ff13 	bl	28b06 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29ce0:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   29ce2:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29ce6:	9300      	str	r3, [sp, #0]
   29ce8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29cec:	f10d 030e 	add.w	r3, sp, #14
   29cf0:	4629      	mov	r1, r5
   29cf2:	4620      	mov	r0, r4
   29cf4:	f7ff ff90 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29cf8:	b005      	add	sp, #20
   29cfa:	bd30      	pop	{r4, r5, pc}

00029cfc <read_ppcp>:
{
   29cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29cfe:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   29d00:	2318      	movs	r3, #24
   29d02:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   29d06:	2328      	movs	r3, #40	; 0x28
   29d08:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   29d0c:	2300      	movs	r3, #0
   29d0e:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   29d12:	232a      	movs	r3, #42	; 0x2a
   29d14:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   29d18:	2308      	movs	r3, #8
   29d1a:	9300      	str	r3, [sp, #0]
{
   29d1c:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   29d1e:	446b      	add	r3, sp
   29d20:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   29d24:	f7ff ff78 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29d28:	b005      	add	sp, #20
   29d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00029d2e <z_log_msg_static_create.constprop.0>:
   29d2e:	2300      	movs	r3, #0
   29d30:	f7e9 bfa6 	b.w	13c80 <z_impl_z_log_msg_static_create>

00029d34 <clear_cf_cfg>:
{
   29d34:	b513      	push	{r0, r1, r4, lr}
   29d36:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29d38:	2400      	movs	r4, #0
   29d3a:	4669      	mov	r1, sp
   29d3c:	3001      	adds	r0, #1
   29d3e:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29d40:	320c      	adds	r2, #12
   29d42:	f8cd 4003 	str.w	r4, [sp, #3]
   29d46:	f7ff ff4d 	bl	29be4 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   29d4a:	f802 4c04 	strb.w	r4, [r2, #-4]
   29d4e:	f3bf 8f5b 	dmb	ish
   29d52:	e852 3f00 	ldrex	r3, [r2]
   29d56:	e842 4100 	strex	r1, r4, [r2]
   29d5a:	2900      	cmp	r1, #0
   29d5c:	d1f9      	bne.n	29d52 <clear_cf_cfg+0x1e>
   29d5e:	f3bf 8f5b 	dmb	ish
}
   29d62:	b002      	add	sp, #8
   29d64:	bd10      	pop	{r4, pc}

00029d66 <ccc_find_cfg>:
{
   29d66:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   29d68:	7803      	ldrb	r3, [r0, #0]
   29d6a:	4293      	cmp	r3, r2
{
   29d6c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   29d6e:	d001      	beq.n	29d74 <ccc_find_cfg+0xe>
	return NULL;
   29d70:	2000      	movs	r0, #0
}
   29d72:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   29d74:	2207      	movs	r2, #7
   29d76:	3001      	adds	r0, #1
   29d78:	f002 f919 	bl	2bfae <memcmp>
		if (id == ccc->cfg[i].id &&
   29d7c:	2800      	cmp	r0, #0
   29d7e:	d1f7      	bne.n	29d70 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   29d80:	4620      	mov	r0, r4
   29d82:	e7f6      	b.n	29d72 <ccc_find_cfg+0xc>

00029d84 <find_ccc_cfg>:
{
   29d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29d86:	460c      	mov	r4, r1
						    &cfg->peer)) {
   29d88:	1c4d      	adds	r5, r1, #1
		if (conn) {
   29d8a:	b148      	cbz	r0, 29da0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   29d8c:	7809      	ldrb	r1, [r1, #0]
   29d8e:	462a      	mov	r2, r5
   29d90:	f7ff f88e 	bl	28eb0 <bt_conn_is_peer_addr_le>
	return NULL;
   29d94:	2800      	cmp	r0, #0
   29d96:	bf08      	it	eq
   29d98:	2400      	moveq	r4, #0
}
   29d9a:	4620      	mov	r0, r4
   29d9c:	b003      	add	sp, #12
   29d9e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   29da0:	9000      	str	r0, [sp, #0]
   29da2:	2207      	movs	r2, #7
   29da4:	f8cd 0003 	str.w	r0, [sp, #3]
   29da8:	4669      	mov	r1, sp
   29daa:	4628      	mov	r0, r5
   29dac:	f002 f8ff 	bl	2bfae <memcmp>
	return NULL;
   29db0:	2800      	cmp	r0, #0
   29db2:	bf18      	it	ne
   29db4:	2400      	movne	r4, #0
   29db6:	e7f0      	b.n	29d9a <find_ccc_cfg+0x16>

00029db8 <bt_gatt_attr_read_ccc>:
{
   29db8:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   29dba:	68c9      	ldr	r1, [r1, #12]
{
   29dbc:	b085      	sub	sp, #20
   29dbe:	4614      	mov	r4, r2
   29dc0:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   29dc2:	f7ff ffdf 	bl	29d84 <find_ccc_cfg>
	if (cfg) {
   29dc6:	b100      	cbz	r0, 29dca <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   29dc8:	8900      	ldrh	r0, [r0, #8]
   29dca:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29dce:	2302      	movs	r3, #2
   29dd0:	9300      	str	r3, [sp, #0]
   29dd2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29dd6:	f10d 030e 	add.w	r3, sp, #14
   29dda:	4629      	mov	r1, r5
   29ddc:	4620      	mov	r0, r4
   29dde:	f7ff ff1b 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29de2:	b005      	add	sp, #20
   29de4:	bd30      	pop	{r4, r5, pc}

00029de6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29de6:	2a02      	cmp	r2, #2
{
   29de8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29dea:	d108      	bne.n	29dfe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29dec:	2300      	movs	r3, #0
   29dee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29df2:	461a      	mov	r2, r3
   29df4:	7a00      	ldrb	r0, [r0, #8]
   29df6:	f7f0 fc49 	bl	1a68c <sc_save>
}
   29dfa:	2002      	movs	r0, #2
   29dfc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29dfe:	f7f0 fcc3 	bl	1a788 <sc_clear>
   29e02:	e7fa      	b.n	29dfa <sc_ccc_cfg_write+0x14>

00029e04 <sc_restore_rsp>:
{
   29e04:	b538      	push	{r3, r4, r5, lr}
   29e06:	4604      	mov	r4, r0
   29e08:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   29e0a:	f7ff fdfb 	bl	29a04 <bt_att_fixed_chan_only>
   29e0e:	b150      	cbz	r0, 29e26 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   29e10:	4620      	mov	r0, r4
   29e12:	f7f0 f91f 	bl	1a054 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   29e16:	b130      	cbz	r0, 29e26 <sc_restore_rsp+0x22>
   29e18:	7a03      	ldrb	r3, [r0, #8]
   29e1a:	07db      	lsls	r3, r3, #31
   29e1c:	d503      	bpl.n	29e26 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29e1e:	2101      	movs	r1, #1
   29e20:	300c      	adds	r0, #12
   29e22:	f7ff fec1 	bl	29ba8 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29e26:	b955      	cbnz	r5, 29e3e <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29e28:	7a20      	ldrb	r0, [r4, #8]
   29e2a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   29e2e:	f7f0 fc0b 	bl	1a648 <find_sc_cfg>
		if (sc_cfg) {
   29e32:	b120      	cbz	r0, 29e3e <sc_restore_rsp+0x3a>
   29e34:	6085      	str	r5, [r0, #8]
}
   29e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   29e3a:	f7f0 b96b 	b.w	1a114 <sc_store>
}
   29e3e:	bd38      	pop	{r3, r4, r5, pc}

00029e40 <bt_gatt_attr_read>:
{
   29e40:	b538      	push	{r3, r4, r5, lr}
   29e42:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29e46:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   29e4a:	428d      	cmp	r5, r1
{
   29e4c:	4610      	mov	r0, r2
	if (offset > value_len) {
   29e4e:	d30b      	bcc.n	29e68 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   29e50:	1a6d      	subs	r5, r5, r1
   29e52:	429d      	cmp	r5, r3
   29e54:	bfa8      	it	ge
   29e56:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29e58:	9b05      	ldr	r3, [sp, #20]
   29e5a:	b2ad      	uxth	r5, r5
   29e5c:	462a      	mov	r2, r5
   29e5e:	4419      	add	r1, r3
   29e60:	f002 f8b5 	bl	2bfce <memcpy>
}
   29e64:	4628      	mov	r0, r5
   29e66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29e68:	f06f 0506 	mvn.w	r5, #6
   29e6c:	e7fa      	b.n	29e64 <bt_gatt_attr_read+0x24>

00029e6e <bt_gatt_attr_value_handle>:
{
   29e6e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29e70:	4604      	mov	r4, r0
   29e72:	b910      	cbnz	r0, 29e7a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29e74:	2000      	movs	r0, #0
}
   29e76:	b002      	add	sp, #8
   29e78:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29e7a:	2300      	movs	r3, #0
   29e7c:	f88d 3004 	strb.w	r3, [sp, #4]
   29e80:	6800      	ldr	r0, [r0, #0]
   29e82:	f642 0303 	movw	r3, #10243	; 0x2803
   29e86:	a901      	add	r1, sp, #4
   29e88:	f8ad 3006 	strh.w	r3, [sp, #6]
   29e8c:	f7fe fcd6 	bl	2883c <bt_uuid_cmp>
   29e90:	2800      	cmp	r0, #0
   29e92:	d1ef      	bne.n	29e74 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29e94:	68e3      	ldr	r3, [r4, #12]
   29e96:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29e98:	2800      	cmp	r0, #0
   29e9a:	d1ec      	bne.n	29e76 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29e9c:	4620      	mov	r0, r4
   29e9e:	f7f0 fe13 	bl	1aac8 <bt_gatt_attr_get_handle>
   29ea2:	3001      	adds	r0, #1
   29ea4:	b280      	uxth	r0, r0
	return handle;
   29ea6:	e7e6      	b.n	29e76 <bt_gatt_attr_value_handle+0x8>

00029ea8 <bt_gatt_attr_read_chrc>:
{
   29ea8:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29eaa:	68cc      	ldr	r4, [r1, #12]
{
   29eac:	b088      	sub	sp, #32
   29eae:	4608      	mov	r0, r1
   29eb0:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   29eb2:	79a3      	ldrb	r3, [r4, #6]
   29eb4:	f88d 300c 	strb.w	r3, [sp, #12]
{
   29eb8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29eba:	f7ff ffd8 	bl	29e6e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29ebe:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29ec0:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29ec4:	7823      	ldrb	r3, [r4, #0]
   29ec6:	b96b      	cbnz	r3, 29ee4 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29ec8:	8863      	ldrh	r3, [r4, #2]
   29eca:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   29ece:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29ed0:	9300      	str	r3, [sp, #0]
   29ed2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   29ed6:	ab03      	add	r3, sp, #12
   29ed8:	4631      	mov	r1, r6
   29eda:	4628      	mov	r0, r5
   29edc:	f7ff fe9c 	bl	29c18 <bt_gatt_attr_read.constprop.0>
}
   29ee0:	b008      	add	sp, #32
   29ee2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29ee4:	1c63      	adds	r3, r4, #1
   29ee6:	f10d 020f 	add.w	r2, sp, #15
   29eea:	3411      	adds	r4, #17
   29eec:	f853 1b04 	ldr.w	r1, [r3], #4
   29ef0:	f842 1b04 	str.w	r1, [r2], #4
   29ef4:	42a3      	cmp	r3, r4
   29ef6:	d1f9      	bne.n	29eec <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   29ef8:	2313      	movs	r3, #19
   29efa:	e7e9      	b.n	29ed0 <bt_gatt_attr_read_chrc+0x28>

00029efc <bt_gatt_foreach_attr>:
{
   29efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29efe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29f02:	2300      	movs	r3, #0
   29f04:	9300      	str	r3, [sp, #0]
   29f06:	461a      	mov	r2, r3
   29f08:	f7f0 fe0e 	bl	1ab28 <bt_gatt_foreach_attr_type>
}
   29f0c:	b005      	add	sp, #20
   29f0e:	f85d fb04 	ldr.w	pc, [sp], #4

00029f12 <bt_gatt_check_perm>:
{
   29f12:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29f14:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29f16:	8a4c      	ldrh	r4, [r1, #18]
{
   29f18:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   29f1a:	d504      	bpl.n	29f26 <bt_gatt_check_perm+0x14>
   29f1c:	f014 0f95 	tst.w	r4, #149	; 0x95
   29f20:	d026      	beq.n	29f70 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29f22:	684b      	ldr	r3, [r1, #4]
   29f24:	b323      	cbz	r3, 29f70 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29f26:	0790      	lsls	r0, r2, #30
   29f28:	d504      	bpl.n	29f34 <bt_gatt_check_perm+0x22>
   29f2a:	f414 7f95 	tst.w	r4, #298	; 0x12a
   29f2e:	d021      	beq.n	29f74 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29f30:	688b      	ldr	r3, [r1, #8]
   29f32:	b1fb      	cbz	r3, 29f74 <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   29f34:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   29f36:	f414 7fc0 	tst.w	r4, #384	; 0x180
   29f3a:	d007      	beq.n	29f4c <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29f3c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   29f40:	b90b      	cbnz	r3, 29f46 <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   29f42:	2005      	movs	r0, #5
}
   29f44:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29f46:	7b5b      	ldrb	r3, [r3, #13]
   29f48:	06db      	lsls	r3, r3, #27
   29f4a:	d5fa      	bpl.n	29f42 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29f4c:	f014 0f30 	tst.w	r4, #48	; 0x30
   29f50:	d108      	bne.n	29f64 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29f52:	f014 000c 	ands.w	r0, r4, #12
   29f56:	d0f5      	beq.n	29f44 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   29f58:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29f5a:	2b00      	cmp	r3, #0
   29f5c:	bf14      	ite	ne
   29f5e:	2000      	movne	r0, #0
   29f60:	200f      	moveq	r0, #15
   29f62:	e7ef      	b.n	29f44 <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29f64:	4628      	mov	r0, r5
   29f66:	f7fe ffa1 	bl	28eac <bt_conn_get_security>
   29f6a:	2802      	cmp	r0, #2
   29f6c:	d8f1      	bhi.n	29f52 <bt_gatt_check_perm+0x40>
   29f6e:	e7e8      	b.n	29f42 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29f70:	2002      	movs	r0, #2
   29f72:	e7e7      	b.n	29f44 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29f74:	2003      	movs	r0, #3
   29f76:	e7e5      	b.n	29f44 <bt_gatt_check_perm+0x32>

00029f78 <bt_gatt_is_subscribed>:
{
   29f78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29f7c:	7b43      	ldrb	r3, [r0, #13]
   29f7e:	2b07      	cmp	r3, #7
{
   29f80:	4606      	mov	r6, r0
   29f82:	460c      	mov	r4, r1
   29f84:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   29f86:	d003      	beq.n	29f90 <bt_gatt_is_subscribed+0x18>
		return false;
   29f88:	2000      	movs	r0, #0
}
   29f8a:	b004      	add	sp, #16
   29f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   29f90:	2300      	movs	r3, #0
   29f92:	f88d 300c 	strb.w	r3, [sp, #12]
   29f96:	6820      	ldr	r0, [r4, #0]
   29f98:	f642 0303 	movw	r3, #10243	; 0x2803
   29f9c:	a903      	add	r1, sp, #12
   29f9e:	f8ad 300e 	strh.w	r3, [sp, #14]
   29fa2:	f7fe fc4b 	bl	2883c <bt_uuid_cmp>
   29fa6:	b940      	cbnz	r0, 29fba <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   29fa8:	68e3      	ldr	r3, [r4, #12]
   29faa:	7999      	ldrb	r1, [r3, #6]
   29fac:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   29fb0:	d0eb      	beq.n	29f8a <bt_gatt_is_subscribed+0x12>
		attr = bt_gatt_attr_next(attr);
   29fb2:	4620      	mov	r0, r4
   29fb4:	f7f0 ff86 	bl	1aec4 <bt_gatt_attr_next>
   29fb8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   29fba:	2300      	movs	r3, #0
   29fbc:	6820      	ldr	r0, [r4, #0]
   29fbe:	f88d 300c 	strb.w	r3, [sp, #12]
   29fc2:	a903      	add	r1, sp, #12
   29fc4:	f642 1302 	movw	r3, #10498	; 0x2902
   29fc8:	f8ad 300e 	strh.w	r3, [sp, #14]
   29fcc:	f7fe fc36 	bl	2883c <bt_uuid_cmp>
   29fd0:	b118      	cbz	r0, 29fda <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   29fd2:	4620      	mov	r0, r4
   29fd4:	f7f0 ff76 	bl	1aec4 <bt_gatt_attr_next>
   29fd8:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   29fda:	2500      	movs	r5, #0
   29fdc:	f642 1802 	movw	r8, #10498	; 0x2902
   29fe0:	6820      	ldr	r0, [r4, #0]
   29fe2:	f88d 5000 	strb.w	r5, [sp]
   29fe6:	4669      	mov	r1, sp
   29fe8:	f8ad 8002 	strh.w	r8, [sp, #2]
   29fec:	f7fe fc26 	bl	2883c <bt_uuid_cmp>
   29ff0:	b9d8      	cbnz	r0, 2a02a <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   29ff2:	6820      	ldr	r0, [r4, #0]
   29ff4:	2500      	movs	r5, #0
   29ff6:	f642 1302 	movw	r3, #10498	; 0x2902
   29ffa:	a903      	add	r1, sp, #12
   29ffc:	f88d 500c 	strb.w	r5, [sp, #12]
   2a000:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a004:	f7fe fc1a 	bl	2883c <bt_uuid_cmp>
   2a008:	2800      	cmp	r0, #0
   2a00a:	d1bd      	bne.n	29f88 <bt_gatt_is_subscribed+0x10>
	ccc = attr->user_data;
   2a00c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2a00e:	4622      	mov	r2, r4
   2a010:	4630      	mov	r0, r6
   2a012:	f812 1b01 	ldrb.w	r1, [r2], #1
   2a016:	f7fe ff4b 	bl	28eb0 <bt_conn_is_peer_addr_le>
   2a01a:	2800      	cmp	r0, #0
   2a01c:	d0b4      	beq.n	29f88 <bt_gatt_is_subscribed+0x10>
   2a01e:	8923      	ldrh	r3, [r4, #8]
   2a020:	421f      	tst	r7, r3
   2a022:	bf14      	ite	ne
   2a024:	2001      	movne	r0, #1
   2a026:	2000      	moveq	r0, #0
   2a028:	e7af      	b.n	29f8a <bt_gatt_is_subscribed+0x12>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2a02a:	6820      	ldr	r0, [r4, #0]
   2a02c:	f88d 5004 	strb.w	r5, [sp, #4]
   2a030:	f642 0303 	movw	r3, #10243	; 0x2803
   2a034:	a901      	add	r1, sp, #4
   2a036:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a03a:	f7fe fbff 	bl	2883c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2a03e:	2800      	cmp	r0, #0
   2a040:	d0d7      	beq.n	29ff2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a042:	6820      	ldr	r0, [r4, #0]
   2a044:	f88d 5008 	strb.w	r5, [sp, #8]
   2a048:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a04c:	a902      	add	r1, sp, #8
   2a04e:	f8ad 300a 	strh.w	r3, [sp, #10]
   2a052:	f7fe fbf3 	bl	2883c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2a056:	2800      	cmp	r0, #0
   2a058:	d0cb      	beq.n	29ff2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2a05a:	6820      	ldr	r0, [r4, #0]
   2a05c:	f88d 500c 	strb.w	r5, [sp, #12]
   2a060:	f642 0301 	movw	r3, #10241	; 0x2801
   2a064:	a903      	add	r1, sp, #12
   2a066:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a06a:	f7fe fbe7 	bl	2883c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a06e:	2800      	cmp	r0, #0
   2a070:	d0bf      	beq.n	29ff2 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2a072:	4620      	mov	r0, r4
   2a074:	f7f0 ff26 	bl	1aec4 <bt_gatt_attr_next>
		if (!attr) {
   2a078:	4604      	mov	r4, r0
   2a07a:	2800      	cmp	r0, #0
   2a07c:	d1b0      	bne.n	29fe0 <bt_gatt_is_subscribed+0x68>
   2a07e:	e783      	b.n	29f88 <bt_gatt_is_subscribed+0x10>

0002a080 <bt_gatt_change_aware>:
{
   2a080:	b570      	push	{r4, r5, r6, lr}
   2a082:	4606      	mov	r6, r0
   2a084:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2a086:	f7ef ffe5 	bl	1a054 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a08a:	b910      	cbnz	r0, 2a092 <bt_gatt_change_aware+0x12>
		return true;
   2a08c:	2401      	movs	r4, #1
}
   2a08e:	4620      	mov	r0, r4
   2a090:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a092:	7a03      	ldrb	r3, [r0, #8]
   2a094:	07da      	lsls	r2, r3, #31
   2a096:	d5f9      	bpl.n	2a08c <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2a098:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a09c:	4628      	mov	r0, r5
   2a09e:	f7ff fd7d 	bl	29b9c <atomic_get>
   2a0a2:	07c3      	lsls	r3, r0, #31
   2a0a4:	d4f2      	bmi.n	2a08c <bt_gatt_change_aware+0xc>
	if (!req) {
   2a0a6:	b90c      	cbnz	r4, 2a0ac <bt_gatt_change_aware+0x2c>
		return false;
   2a0a8:	2400      	movs	r4, #0
   2a0aa:	e7f0      	b.n	2a08e <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a0ac:	f06f 0102 	mvn.w	r1, #2
   2a0b0:	4628      	mov	r0, r5
   2a0b2:	f7ff fd88 	bl	29bc6 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2a0b6:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2a0ba:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2a0bc:	d006      	beq.n	2a0cc <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2a0be:	f7ff fca3 	bl	29a08 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a0c2:	2101      	movs	r1, #1
   2a0c4:	4628      	mov	r0, r5
   2a0c6:	f7ff fd6f 	bl	29ba8 <atomic_or>
}
   2a0ca:	e7e0      	b.n	2a08e <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2a0cc:	f7ff fc9a 	bl	29a04 <bt_att_fixed_chan_only>
   2a0d0:	2800      	cmp	r0, #0
   2a0d2:	d0e9      	beq.n	2a0a8 <bt_gatt_change_aware+0x28>
   2a0d4:	4630      	mov	r0, r6
   2a0d6:	f7ff fcb0 	bl	29a3a <bt_att_out_of_sync_sent_on_fixed>
   2a0da:	4604      	mov	r4, r0
   2a0dc:	2800      	cmp	r0, #0
   2a0de:	d0e3      	beq.n	2a0a8 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a0e0:	f06f 0102 	mvn.w	r1, #2
   2a0e4:	4628      	mov	r0, r5
   2a0e6:	f7ff fd6e 	bl	29bc6 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2a0ea:	4630      	mov	r0, r6
   2a0ec:	e7e7      	b.n	2a0be <bt_gatt_change_aware+0x3e>

0002a0ee <ccc_delayed_store>:
{
   2a0ee:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2a0f0:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2a0f4:	4605      	mov	r5, r0
		if (!conn) {
   2a0f6:	b194      	cbz	r4, 2a11e <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2a0f8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2a0fc:	7a20      	ldrb	r0, [r4, #8]
   2a0fe:	4631      	mov	r1, r6
   2a100:	f7fe fd04 	bl	28b0c <bt_addr_le_is_bonded>
   2a104:	b158      	cbz	r0, 2a11e <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2a106:	2300      	movs	r3, #0
   2a108:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2a10c:	7a20      	ldrb	r0, [r4, #8]
   2a10e:	4631      	mov	r1, r6
   2a110:	f7f1 fa22 	bl	1b558 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2a114:	4620      	mov	r0, r4
}
   2a116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2a11a:	f7fe be2e 	b.w	28d7a <bt_conn_unref>
}
   2a11e:	bd70      	pop	{r4, r5, r6, pc}

0002a120 <sys_memcpy_swap>:
	psrc += length - 1;
   2a120:	1e53      	subs	r3, r2, #1
   2a122:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2a124:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2a126:	f811 3901 	ldrb.w	r3, [r1], #-1
   2a12a:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2a12e:	4290      	cmp	r0, r2
   2a130:	d1f9      	bne.n	2a126 <sys_memcpy_swap+0x6>
}
   2a132:	4770      	bx	lr

0002a134 <sys_mem_swap>:
{
   2a134:	b510      	push	{r4, lr}
   2a136:	1843      	adds	r3, r0, r1
   2a138:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a13c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a140:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a142:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2a146:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a148:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2a14a:	d1f7      	bne.n	2a13c <sys_mem_swap+0x8>
	}
}
   2a14c:	bd10      	pop	{r4, pc}

0002a14e <smp_pairing_rsp>:
}
   2a14e:	2007      	movs	r0, #7
   2a150:	4770      	bx	lr

0002a152 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a152:	f3bf 8f5b 	dmb	ish
   2a156:	6800      	ldr	r0, [r0, #0]
   2a158:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a15c:	4108      	asrs	r0, r1
}
   2a15e:	f000 0001 	and.w	r0, r0, #1
   2a162:	4770      	bx	lr

0002a164 <update_keys_check>:
{
   2a164:	b510      	push	{r4, lr}
   2a166:	4603      	mov	r3, r0
	if (!keys ||
   2a168:	b1d9      	cbz	r1, 2a1a2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2a16a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2a16c:	f010 0f24 	tst.w	r0, #36	; 0x24
   2a170:	d017      	beq.n	2a1a2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a172:	7d1a      	ldrb	r2, [r3, #20]
   2a174:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2a176:	7b09      	ldrb	r1, [r1, #12]
   2a178:	42a2      	cmp	r2, r4
   2a17a:	bf28      	it	cs
   2a17c:	4622      	movcs	r2, r4
   2a17e:	4291      	cmp	r1, r2
   2a180:	d901      	bls.n	2a186 <update_keys_check+0x22>
		return false;
   2a182:	2000      	movs	r0, #0
}
   2a184:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2a186:	0682      	lsls	r2, r0, #26
   2a188:	d404      	bmi.n	2a194 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2a18a:	7a18      	ldrb	r0, [r3, #8]
   2a18c:	3800      	subs	r0, #0
   2a18e:	bf18      	it	ne
   2a190:	2001      	movne	r0, #1
   2a192:	e7f7      	b.n	2a184 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2a194:	2105      	movs	r1, #5
   2a196:	1d18      	adds	r0, r3, #4
   2a198:	f7ff ffdb 	bl	2a152 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2a19c:	2800      	cmp	r0, #0
   2a19e:	d1f4      	bne.n	2a18a <update_keys_check+0x26>
   2a1a0:	e7ef      	b.n	2a182 <update_keys_check+0x1e>
		return true;
   2a1a2:	2001      	movs	r0, #1
   2a1a4:	e7ee      	b.n	2a184 <update_keys_check+0x20>

0002a1a6 <bt_smp_aes_cmac>:
{
   2a1a6:	b570      	push	{r4, r5, r6, lr}
   2a1a8:	b0c2      	sub	sp, #264	; 0x108
   2a1aa:	460d      	mov	r5, r1
   2a1ac:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a1ae:	4601      	mov	r1, r0
   2a1b0:	aa16      	add	r2, sp, #88	; 0x58
   2a1b2:	4668      	mov	r0, sp
{
   2a1b4:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a1b6:	f7fe f9af 	bl	28518 <tc_cmac_setup>
   2a1ba:	b150      	cbz	r0, 2a1d2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2a1bc:	4632      	mov	r2, r6
   2a1be:	4629      	mov	r1, r5
   2a1c0:	4668      	mov	r0, sp
   2a1c2:	f7fe f9d4 	bl	2856e <tc_cmac_update>
   2a1c6:	b120      	cbz	r0, 2a1d2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2a1c8:	4669      	mov	r1, sp
   2a1ca:	4620      	mov	r0, r4
   2a1cc:	f7fe fa3a 	bl	28644 <tc_cmac_final>
   2a1d0:	b918      	cbnz	r0, 2a1da <bt_smp_aes_cmac+0x34>
		return -EIO;
   2a1d2:	f06f 0004 	mvn.w	r0, #4
}
   2a1d6:	b042      	add	sp, #264	; 0x108
   2a1d8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2a1da:	2000      	movs	r0, #0
   2a1dc:	e7fb      	b.n	2a1d6 <bt_smp_aes_cmac+0x30>

0002a1de <smp_f4>:
{
   2a1de:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1e0:	b097      	sub	sp, #92	; 0x5c
   2a1e2:	4614      	mov	r4, r2
   2a1e4:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2a1e6:	2220      	movs	r2, #32
   2a1e8:	4601      	mov	r1, r0
   2a1ea:	a805      	add	r0, sp, #20
{
   2a1ec:	461d      	mov	r5, r3
   2a1ee:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2a1f0:	f7ff ff96 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2a1f4:	2220      	movs	r2, #32
   2a1f6:	4631      	mov	r1, r6
   2a1f8:	a80d      	add	r0, sp, #52	; 0x34
   2a1fa:	f7ff ff91 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2a1fe:	4621      	mov	r1, r4
   2a200:	2210      	movs	r2, #16
   2a202:	a801      	add	r0, sp, #4
	m[64] = z;
   2a204:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2a208:	f7ff ff8a 	bl	2a120 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2a20c:	463b      	mov	r3, r7
   2a20e:	2241      	movs	r2, #65	; 0x41
   2a210:	a905      	add	r1, sp, #20
   2a212:	a801      	add	r0, sp, #4
   2a214:	f7ff ffc7 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   2a218:	4604      	mov	r4, r0
   2a21a:	b918      	cbnz	r0, 2a224 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2a21c:	2110      	movs	r1, #16
   2a21e:	4638      	mov	r0, r7
   2a220:	f7ff ff88 	bl	2a134 <sys_mem_swap>
}
   2a224:	4620      	mov	r0, r4
   2a226:	b017      	add	sp, #92	; 0x5c
   2a228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a22a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a22a:	2301      	movs	r3, #1
   2a22c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a22e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a230:	f3bf 8f5b 	dmb	ish
   2a234:	e850 2f00 	ldrex	r2, [r0]
   2a238:	401a      	ands	r2, r3
   2a23a:	e840 2100 	strex	r1, r2, [r0]
   2a23e:	2900      	cmp	r1, #0
   2a240:	d1f8      	bne.n	2a234 <atomic_clear_bit+0xa>
   2a242:	f3bf 8f5b 	dmb	ish
}
   2a246:	4770      	bx	lr

0002a248 <bt_addr_le_copy>:
   2a248:	680b      	ldr	r3, [r1, #0]
   2a24a:	6003      	str	r3, [r0, #0]
   2a24c:	888b      	ldrh	r3, [r1, #4]
   2a24e:	8083      	strh	r3, [r0, #4]
   2a250:	798b      	ldrb	r3, [r1, #6]
   2a252:	7183      	strb	r3, [r0, #6]
}
   2a254:	4770      	bx	lr

0002a256 <smp_f6>:
{
   2a256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a25a:	b097      	sub	sp, #92	; 0x5c
   2a25c:	4604      	mov	r4, r0
   2a25e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2a260:	a805      	add	r0, sp, #20
   2a262:	2210      	movs	r2, #16
{
   2a264:	461d      	mov	r5, r3
   2a266:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   2a26a:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2a26c:	f7ff ff58 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2a270:	2210      	movs	r2, #16
   2a272:	4631      	mov	r1, r6
   2a274:	a809      	add	r0, sp, #36	; 0x24
   2a276:	f7ff ff53 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2a27a:	2210      	movs	r2, #16
   2a27c:	4629      	mov	r1, r5
   2a27e:	a80d      	add	r0, sp, #52	; 0x34
   2a280:	f7ff ff4e 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2a284:	991e      	ldr	r1, [sp, #120]	; 0x78
   2a286:	2203      	movs	r2, #3
   2a288:	a811      	add	r0, sp, #68	; 0x44
   2a28a:	f7ff ff49 	bl	2a120 <sys_memcpy_swap>
	m[51] = a1->type;
   2a28e:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   2a290:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2a294:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a298:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2a29c:	9012      	str	r0, [sp, #72]	; 0x48
   2a29e:	888b      	ldrh	r3, [r1, #4]
   2a2a0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a2a4:	2206      	movs	r2, #6
   2a2a6:	a812      	add	r0, sp, #72	; 0x48
   2a2a8:	f7ff ff3a 	bl	2a120 <sys_memcpy_swap>
	m[58] = a2->type;
   2a2ac:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a2ae:	2206      	movs	r2, #6
	m[58] = a2->type;
   2a2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a2b4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2a2b8:	f8d8 3001 	ldr.w	r3, [r8, #1]
   2a2bc:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a2c0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2a2c4:	888b      	ldrh	r3, [r1, #4]
   2a2c6:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a2ca:	f7ff ff29 	bl	2a120 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2a2ce:	4621      	mov	r1, r4
   2a2d0:	2210      	movs	r2, #16
   2a2d2:	a801      	add	r0, sp, #4
   2a2d4:	f7ff ff24 	bl	2a120 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2a2d8:	463b      	mov	r3, r7
   2a2da:	2241      	movs	r2, #65	; 0x41
   2a2dc:	a905      	add	r1, sp, #20
   2a2de:	a801      	add	r0, sp, #4
   2a2e0:	f7ff ff61 	bl	2a1a6 <bt_smp_aes_cmac>
	if (err) {
   2a2e4:	4604      	mov	r4, r0
   2a2e6:	b918      	cbnz	r0, 2a2f0 <smp_f6+0x9a>
	sys_mem_swap(check, 16);
   2a2e8:	2110      	movs	r1, #16
   2a2ea:	4638      	mov	r0, r7
   2a2ec:	f7ff ff22 	bl	2a134 <sys_mem_swap>
}
   2a2f0:	4620      	mov	r0, r4
   2a2f2:	b017      	add	sp, #92	; 0x5c
   2a2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002a2f8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2a2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a2fa:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2a2fc:	2200      	movs	r2, #0
   2a2fe:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2a300:	4604      	mov	r4, r0
   2a302:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2a304:	460a      	mov	r2, r1
   2a306:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a30a:	2106      	movs	r1, #6
   2a30c:	f7fe fe76 	bl	28ffc <bt_l2cap_send_cb>
   2a310:	b128      	cbz	r0, 2a31e <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2a312:	4628      	mov	r0, r5
}
   2a314:	b003      	add	sp, #12
   2a316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2a31a:	f7f3 bc25 	b.w	1db68 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2a31e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a322:	2300      	movs	r3, #0
   2a324:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2a328:	b003      	add	sp, #12
   2a32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2a32e:	f7f7 bdff 	b.w	21f30 <k_work_reschedule>

0002a332 <z_log_msg_static_create.constprop.0>:
   2a332:	2300      	movs	r3, #0
   2a334:	f7e9 bca4 	b.w	13c80 <z_impl_z_log_msg_static_create>

0002a338 <smp_chan_get>:
{
   2a338:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2a33a:	2106      	movs	r1, #6
   2a33c:	f7fe fe81 	bl	29042 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2a340:	b918      	cbnz	r0, 2a34a <smp_chan_get+0x12>
}
   2a342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a346:	f7f1 bb25 	b.w	1b994 <smp_chan_get.part.0>
   2a34a:	38ec      	subs	r0, #236	; 0xec
   2a34c:	bd08      	pop	{r3, pc}

0002a34e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a34e:	2301      	movs	r3, #1
   2a350:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a352:	f3bf 8f5b 	dmb	ish
   2a356:	e850 2f00 	ldrex	r2, [r0]
   2a35a:	431a      	orrs	r2, r3
   2a35c:	e840 2100 	strex	r1, r2, [r0]
   2a360:	2900      	cmp	r1, #0
   2a362:	d1f8      	bne.n	2a356 <atomic_set_bit+0x8>
   2a364:	f3bf 8f5b 	dmb	ish
}
   2a368:	4770      	bx	lr

0002a36a <smp_keypress_notif>:
{
   2a36a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2a36c:	210e      	movs	r1, #14
   2a36e:	f7ff ffee 	bl	2a34e <atomic_set_bit>
}
   2a372:	2000      	movs	r0, #0
   2a374:	bd08      	pop	{r3, pc}

0002a376 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a376:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a378:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a37a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a37c:	4628      	mov	r0, r5
   2a37e:	2104      	movs	r1, #4
   2a380:	f7ff fee7 	bl	2a152 <atomic_test_bit>
   2a384:	b970      	cbnz	r0, 2a3a4 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2a386:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a38a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2a38c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a38e:	4608      	mov	r0, r1
   2a390:	f7fe fe31 	bl	28ff6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2a394:	4604      	mov	r4, r0
   2a396:	b938      	cbnz	r0, 2a3a8 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2a398:	2104      	movs	r1, #4
   2a39a:	4628      	mov	r0, r5
   2a39c:	f7ff ffd7 	bl	2a34e <atomic_set_bit>
}
   2a3a0:	4620      	mov	r0, r4
   2a3a2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2a3a4:	2200      	movs	r2, #0
   2a3a6:	e7f0      	b.n	2a38a <smp_create_pdu.constprop.0+0x14>
   2a3a8:	2101      	movs	r1, #1
   2a3aa:	3008      	adds	r0, #8
   2a3ac:	f000 fb9a 	bl	2aae4 <net_buf_simple_add>
	hdr->code = op;
   2a3b0:	7006      	strb	r6, [r0, #0]
	return buf;
   2a3b2:	e7f5      	b.n	2a3a0 <smp_create_pdu.constprop.0+0x2a>

0002a3b4 <send_pairing_rsp>:
{
   2a3b4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2a3b6:	2102      	movs	r1, #2
{
   2a3b8:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2a3ba:	f7ff ffdc 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2a3be:	4605      	mov	r5, r0
   2a3c0:	b180      	cbz	r0, 2a3e4 <send_pairing_rsp+0x30>
   2a3c2:	2106      	movs	r1, #6
   2a3c4:	3008      	adds	r0, #8
   2a3c6:	f000 fb8d 	bl	2aae4 <net_buf_simple_add>
   2a3ca:	f8d4 3011 	ldr.w	r3, [r4, #17]
   2a3ce:	6003      	str	r3, [r0, #0]
   2a3d0:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2a3d4:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   2a3d6:	2200      	movs	r2, #0
   2a3d8:	4620      	mov	r0, r4
   2a3da:	4629      	mov	r1, r5
   2a3dc:	f7ff ff8c 	bl	2a2f8 <smp_send.constprop.0>
	return 0;
   2a3e0:	2000      	movs	r0, #0
}
   2a3e2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a3e4:	2008      	movs	r0, #8
   2a3e6:	e7fc      	b.n	2a3e2 <send_pairing_rsp+0x2e>

0002a3e8 <smp_send_pairing_random>:
{
   2a3e8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a3ea:	2104      	movs	r1, #4
{
   2a3ec:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a3ee:	f7ff ffc2 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2a3f2:	4605      	mov	r5, r0
   2a3f4:	b1a0      	cbz	r0, 2a420 <smp_send_pairing_random+0x38>
   2a3f6:	2110      	movs	r1, #16
   2a3f8:	3008      	adds	r0, #8
   2a3fa:	f000 fb73 	bl	2aae4 <net_buf_simple_add>
   2a3fe:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2a402:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2a406:	f853 1b04 	ldr.w	r1, [r3], #4
   2a40a:	f840 1b04 	str.w	r1, [r0], #4
   2a40e:	4293      	cmp	r3, r2
   2a410:	d1f9      	bne.n	2a406 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2a412:	4620      	mov	r0, r4
   2a414:	2200      	movs	r2, #0
   2a416:	4629      	mov	r1, r5
   2a418:	f7ff ff6e 	bl	2a2f8 <smp_send.constprop.0>
	return 0;
   2a41c:	2000      	movs	r0, #0
}
   2a41e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a420:	2008      	movs	r0, #8
   2a422:	e7fc      	b.n	2a41e <smp_send_pairing_random+0x36>

0002a424 <smp_dhkey_check>:
{
   2a424:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2a426:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2a42a:	78db      	ldrb	r3, [r3, #3]
   2a42c:	2b01      	cmp	r3, #1
{
   2a42e:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2a430:	d119      	bne.n	2a466 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2a432:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2a434:	1d06      	adds	r6, r0, #4
   2a436:	2110      	movs	r1, #16
   2a438:	4630      	mov	r0, r6
   2a43a:	f7ff fef6 	bl	2a22a <atomic_clear_bit>
   2a43e:	462b      	mov	r3, r5
   2a440:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2a444:	f105 0110 	add.w	r1, r5, #16
   2a448:	f853 0b04 	ldr.w	r0, [r3], #4
   2a44c:	f842 0b04 	str.w	r0, [r2], #4
   2a450:	428b      	cmp	r3, r1
   2a452:	d1f9      	bne.n	2a448 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2a454:	2107      	movs	r1, #7
   2a456:	4630      	mov	r0, r6
   2a458:	f7ff fe7b 	bl	2a152 <atomic_test_bit>
   2a45c:	b128      	cbz	r0, 2a46a <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a45e:	2109      	movs	r1, #9
   2a460:	4630      	mov	r0, r6
   2a462:	f7ff ff74 	bl	2a34e <atomic_set_bit>
}
   2a466:	2000      	movs	r0, #0
   2a468:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a46a:	210a      	movs	r1, #10
   2a46c:	4630      	mov	r0, r6
   2a46e:	f7ff fe70 	bl	2a152 <atomic_test_bit>
   2a472:	2800      	cmp	r0, #0
   2a474:	d1f3      	bne.n	2a45e <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2a476:	4620      	mov	r0, r4
}
   2a478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2a47c:	f7f1 bd1e 	b.w	1bebc <compute_and_check_and_send_periph_dhcheck>

0002a480 <smp_security_request>:
   2a480:	2007      	movs	r0, #7
   2a482:	4770      	bx	lr

0002a484 <atomic_test_and_clear_bit>:
{
   2a484:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a486:	2301      	movs	r3, #1
   2a488:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a48c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a48e:	f3bf 8f5b 	dmb	ish
   2a492:	e850 3f00 	ldrex	r3, [r0]
   2a496:	ea03 0c02 	and.w	ip, r3, r2
   2a49a:	e840 ce00 	strex	lr, ip, [r0]
   2a49e:	f1be 0f00 	cmp.w	lr, #0
   2a4a2:	d1f6      	bne.n	2a492 <atomic_test_and_clear_bit+0xe>
   2a4a4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a4a8:	420b      	tst	r3, r1
}
   2a4aa:	bf14      	ite	ne
   2a4ac:	2001      	movne	r0, #1
   2a4ae:	2000      	moveq	r0, #0
   2a4b0:	f85d fb04 	ldr.w	pc, [sp], #4

0002a4b4 <smp_reset>:
{
   2a4b4:	b538      	push	{r3, r4, r5, lr}
   2a4b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a4b8:	1d03      	adds	r3, r0, #4
   2a4ba:	2500      	movs	r5, #0
   2a4bc:	f3bf 8f5b 	dmb	ish
   2a4c0:	e853 2f00 	ldrex	r2, [r3]
   2a4c4:	e843 5100 	strex	r1, r5, [r3]
   2a4c8:	2900      	cmp	r1, #0
   2a4ca:	d1f9      	bne.n	2a4c0 <smp_reset+0xc>
   2a4cc:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2a4d0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   2a4d4:	f001 fa2f 	bl	2b936 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2a4d8:	7225      	strb	r5, [r4, #8]
   2a4da:	f3bf 8f5b 	dmb	ish
   2a4de:	e854 3f00 	ldrex	r3, [r4]
   2a4e2:	e844 5200 	strex	r2, r5, [r4]
   2a4e6:	2a00      	cmp	r2, #0
   2a4e8:	d1f9      	bne.n	2a4de <smp_reset+0x2a>
   2a4ea:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2a4ee:	4620      	mov	r0, r4
   2a4f0:	2101      	movs	r1, #1
}
   2a4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2a4f6:	f7ff bf2a 	b.w	2a34e <atomic_set_bit>

0002a4fa <smp_c1>:
{
   2a4fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a4fc:	b089      	sub	sp, #36	; 0x24
   2a4fe:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2a502:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2a504:	7830      	ldrb	r0, [r6, #0]
   2a506:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2a50a:	7838      	ldrb	r0, [r7, #0]
   2a50c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2a510:	6810      	ldr	r0, [r2, #0]
   2a512:	f8cd 0002 	str.w	r0, [sp, #2]
   2a516:	8890      	ldrh	r0, [r2, #4]
   2a518:	7992      	ldrb	r2, [r2, #6]
{
   2a51a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   2a51c:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2a520:	681a      	ldr	r2, [r3, #0]
   2a522:	f8cd 2009 	str.w	r2, [sp, #9]
   2a526:	889a      	ldrh	r2, [r3, #4]
   2a528:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   2a52a:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   2a52e:	f8ad 200d 	strh.w	r2, [sp, #13]
   2a532:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   2a536:	f101 0c10 	add.w	ip, r1, #16
   2a53a:	4620      	mov	r0, r4
   2a53c:	466a      	mov	r2, sp
   2a53e:	458c      	cmp	ip, r1
   2a540:	d124      	bne.n	2a58c <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2a542:	4622      	mov	r2, r4
   2a544:	4621      	mov	r1, r4
   2a546:	4628      	mov	r0, r5
   2a548:	f000 fdb1 	bl	2b0ae <bt_encrypt_le>
	if (err) {
   2a54c:	4603      	mov	r3, r0
   2a54e:	bb70      	cbnz	r0, 2a5ae <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2a550:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2a554:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2a558:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2a55c:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   2a560:	f8cd 2016 	str.w	r2, [sp, #22]
   2a564:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   2a568:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   2a56a:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   2a56c:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   2a570:	f104 0010 	add.w	r0, r4, #16
   2a574:	4623      	mov	r3, r4
   2a576:	a904      	add	r1, sp, #16
   2a578:	4283      	cmp	r3, r0
   2a57a:	d110      	bne.n	2a59e <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2a57c:	4622      	mov	r2, r4
   2a57e:	4621      	mov	r1, r4
   2a580:	4628      	mov	r0, r5
}
   2a582:	b009      	add	sp, #36	; 0x24
   2a584:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2a588:	f000 bd91 	b.w	2b0ae <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2a58c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a590:	f812 eb01 	ldrb.w	lr, [r2], #1
   2a594:	ea83 030e 	eor.w	r3, r3, lr
   2a598:	f800 3b01 	strb.w	r3, [r0], #1
   2a59c:	e7cf      	b.n	2a53e <smp_c1+0x44>
   2a59e:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a5a2:	f811 6b01 	ldrb.w	r6, [r1], #1
   2a5a6:	4072      	eors	r2, r6
   2a5a8:	f803 2c01 	strb.w	r2, [r3, #-1]
   2a5ac:	e7e4      	b.n	2a578 <smp_c1+0x7e>
}
   2a5ae:	b009      	add	sp, #36	; 0x24
   2a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a5b2 <legacy_pairing_confirm>:
{
   2a5b2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a5b4:	1d07      	adds	r7, r0, #4
{
   2a5b6:	b085      	sub	sp, #20
   2a5b8:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a5ba:	210a      	movs	r1, #10
   2a5bc:	4638      	mov	r0, r7
   2a5be:	f7ff fdc8 	bl	2a152 <atomic_test_bit>
   2a5c2:	bb88      	cbnz	r0, 2a628 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2a5c4:	2104      	movs	r1, #4
   2a5c6:	4628      	mov	r0, r5
   2a5c8:	f7ff fec1 	bl	2a34e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a5cc:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2a5ce:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a5d2:	f7ff fed0 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!buf) {
   2a5d6:	4606      	mov	r6, r0
   2a5d8:	b1c0      	cbz	r0, 2a60c <legacy_pairing_confirm+0x5a>
   2a5da:	2110      	movs	r1, #16
   2a5dc:	3008      	adds	r0, #8
   2a5de:	f000 fa81 	bl	2aae4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2a5e2:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2a5e6:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2a5e8:	9002      	str	r0, [sp, #8]
   2a5ea:	9301      	str	r3, [sp, #4]
   2a5ec:	9400      	str	r4, [sp, #0]
   2a5ee:	f105 0310 	add.w	r3, r5, #16
   2a5f2:	f105 0209 	add.w	r2, r5, #9
   2a5f6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2a5fa:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2a5fe:	f7ff ff7c 	bl	2a4fa <smp_c1>
   2a602:	4604      	mov	r4, r0
   2a604:	b120      	cbz	r0, 2a610 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2a606:	4630      	mov	r0, r6
   2a608:	f7f3 faae 	bl	1db68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2a60c:	2008      	movs	r0, #8
   2a60e:	e009      	b.n	2a624 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2a610:	4602      	mov	r2, r0
   2a612:	4631      	mov	r1, r6
   2a614:	4628      	mov	r0, r5
   2a616:	f7ff fe6f 	bl	2a2f8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a61a:	4621      	mov	r1, r4
   2a61c:	4638      	mov	r0, r7
   2a61e:	f7ff fe04 	bl	2a22a <atomic_clear_bit>
	return 0;
   2a622:	2000      	movs	r0, #0
}
   2a624:	b005      	add	sp, #20
   2a626:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a628:	2100      	movs	r1, #0
   2a62a:	4638      	mov	r0, r7
   2a62c:	f7ff fe8f 	bl	2a34e <atomic_set_bit>
   2a630:	e7f7      	b.n	2a622 <legacy_pairing_confirm+0x70>

0002a632 <bt_smp_request_ltk>:
{
   2a632:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a636:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2a63a:	e9cd 2300 	strd	r2, r3, [sp]
   2a63e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2a640:	f7ff fe7a 	bl	2a338 <smp_chan_get>
	if (!smp) {
   2a644:	4605      	mov	r5, r0
   2a646:	2800      	cmp	r0, #0
   2a648:	f000 8090 	beq.w	2a76c <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2a64c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a650:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2a652:	f1b9 0f00 	cmp.w	r9, #0
   2a656:	d12a      	bne.n	2a6ae <bt_smp_request_ltk+0x7c>
   2a658:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a65c:	4313      	orrs	r3, r2
   2a65e:	d126      	bne.n	2a6ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a660:	2103      	movs	r1, #3
   2a662:	4638      	mov	r0, r7
   2a664:	f7ff fd75 	bl	2a152 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2a668:	b308      	cbz	r0, 2a6ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a66a:	2101      	movs	r1, #1
   2a66c:	4638      	mov	r0, r7
   2a66e:	f7ff fd70 	bl	2a152 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a672:	4606      	mov	r6, r0
   2a674:	b1d8      	cbz	r0, 2a6ae <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a676:	7d2c      	ldrb	r4, [r5, #20]
   2a678:	7b6b      	ldrb	r3, [r5, #13]
   2a67a:	429c      	cmp	r4, r3
   2a67c:	bf28      	it	cs
   2a67e:	461c      	movcs	r4, r3
   2a680:	4622      	mov	r2, r4
   2a682:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2a686:	4640      	mov	r0, r8
   2a688:	f001 fca1 	bl	2bfce <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a68c:	2c0f      	cmp	r4, #15
   2a68e:	d806      	bhi.n	2a69e <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   2a690:	f1c4 0210 	rsb	r2, r4, #16
   2a694:	4649      	mov	r1, r9
   2a696:	eb08 0004 	add.w	r0, r8, r4
   2a69a:	f001 fcb9 	bl	2c010 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a69e:	2101      	movs	r1, #1
   2a6a0:	4638      	mov	r0, r7
   2a6a2:	f7ff fe54 	bl	2a34e <atomic_set_bit>
}
   2a6a6:	4630      	mov	r0, r6
   2a6a8:	b003      	add	sp, #12
   2a6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2a6ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2a6b2:	b983      	cbnz	r3, 2a6d6 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2a6b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2a6b8:	7a21      	ldrb	r1, [r4, #8]
   2a6ba:	4632      	mov	r2, r6
   2a6bc:	2020      	movs	r0, #32
   2a6be:	f7f2 ffbd 	bl	1d63c <bt_keys_find>
   2a6c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2a6c6:	b930      	cbnz	r0, 2a6d6 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2a6c8:	7a21      	ldrb	r1, [r4, #8]
   2a6ca:	4632      	mov	r2, r6
   2a6cc:	2001      	movs	r0, #1
   2a6ce:	f7f2 ffb5 	bl	1d63c <bt_keys_find>
   2a6d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2a6d6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a6da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2a6de:	b9ee      	cbnz	r6, 2a71c <bt_smp_request_ltk+0xea>
   2a6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a6e4:	4313      	orrs	r3, r2
   2a6e6:	d119      	bne.n	2a71c <bt_smp_request_ltk+0xea>
   2a6e8:	b388      	cbz	r0, 2a74e <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a6ea:	89c3      	ldrh	r3, [r0, #14]
   2a6ec:	069a      	lsls	r2, r3, #26
   2a6ee:	d516      	bpl.n	2a71e <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2a6f0:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a6f2:	f100 011a 	add.w	r1, r0, #26
   2a6f6:	4622      	mov	r2, r4
   2a6f8:	4640      	mov	r0, r8
   2a6fa:	f001 fc68 	bl	2bfce <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a6fe:	2c0f      	cmp	r4, #15
   2a700:	d806      	bhi.n	2a710 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   2a702:	f1c4 0210 	rsb	r2, r4, #16
   2a706:	4631      	mov	r1, r6
   2a708:	eb08 0004 	add.w	r0, r8, r4
   2a70c:	f001 fc80 	bl	2c010 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a710:	2101      	movs	r1, #1
   2a712:	4638      	mov	r0, r7
   2a714:	f7ff fe1b 	bl	2a34e <atomic_set_bit>
		return true;
   2a718:	2601      	movs	r6, #1
   2a71a:	e7c4      	b.n	2a6a6 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a71c:	b1b8      	cbz	r0, 2a74e <bt_smp_request_ltk+0x11c>
   2a71e:	89c3      	ldrh	r3, [r0, #14]
   2a720:	07db      	lsls	r3, r3, #31
   2a722:	d514      	bpl.n	2a74e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a724:	2208      	movs	r2, #8
   2a726:	4669      	mov	r1, sp
   2a728:	3068      	adds	r0, #104	; 0x68
   2a72a:	f001 fc40 	bl	2bfae <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a72e:	b970      	cbnz	r0, 2a74e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2a730:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2a734:	2202      	movs	r2, #2
   2a736:	a90a      	add	r1, sp, #40	; 0x28
   2a738:	3070      	adds	r0, #112	; 0x70
   2a73a:	f001 fc38 	bl	2bfae <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a73e:	4606      	mov	r6, r0
   2a740:	b928      	cbnz	r0, 2a74e <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2a742:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2a746:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a748:	3172      	adds	r1, #114	; 0x72
   2a74a:	4622      	mov	r2, r4
   2a74c:	e7d4      	b.n	2a6f8 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a74e:	210f      	movs	r1, #15
   2a750:	4638      	mov	r0, r7
   2a752:	f7ff fcfe 	bl	2a152 <atomic_test_bit>
   2a756:	b120      	cbz	r0, 2a762 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2a758:	2202      	movs	r2, #2
   2a75a:	2106      	movs	r1, #6
   2a75c:	4620      	mov	r0, r4
   2a75e:	f7ed ffd3 	bl	18708 <bt_conn_security_changed>
	smp_reset(smp);
   2a762:	4628      	mov	r0, r5
   2a764:	f7ff fea6 	bl	2a4b4 <smp_reset>
	return false;
   2a768:	2600      	movs	r6, #0
   2a76a:	e79c      	b.n	2a6a6 <bt_smp_request_ltk+0x74>
		return false;
   2a76c:	4606      	mov	r6, r0
   2a76e:	e79a      	b.n	2a6a6 <bt_smp_request_ltk+0x74>

0002a770 <bt_smp_irk_get>:
{
   2a770:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2a772:	2500      	movs	r5, #0
{
   2a774:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2a776:	2210      	movs	r2, #16
   2a778:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2a77a:	e9cd 5500 	strd	r5, r5, [sp]
   2a77e:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2a782:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2a784:	f001 fc13 	bl	2bfae <memcmp>
   2a788:	b170      	cbz	r0, 2a7a8 <bt_smp_irk_get+0x38>
	dst[0] = val;
   2a78a:	2301      	movs	r3, #1
   2a78c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2a78e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2a790:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2a792:	70e5      	strb	r5, [r4, #3]
__ssp_bos_icheck3(memset, void *, int)
   2a794:	6065      	str	r5, [r4, #4]
   2a796:	60a5      	str	r5, [r4, #8]
   2a798:	60e5      	str	r5, [r4, #12]
	err = bt_encrypt_le(key, res, res);
   2a79a:	4622      	mov	r2, r4
   2a79c:	4621      	mov	r1, r4
   2a79e:	4630      	mov	r0, r6
   2a7a0:	f000 fc85 	bl	2b0ae <bt_encrypt_le>
}
   2a7a4:	b004      	add	sp, #16
   2a7a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a7a8:	f06f 0015 	mvn.w	r0, #21
   2a7ac:	e7fa      	b.n	2a7a4 <bt_smp_irk_get+0x34>

0002a7ae <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a7ae:	1d03      	adds	r3, r0, #4
{
   2a7b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a7b2:	4605      	mov	r5, r0
   2a7b4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a7b6:	4618      	mov	r0, r3
   2a7b8:	2103      	movs	r1, #3
   2a7ba:	f7ff fcca 	bl	2a152 <atomic_test_bit>
   2a7be:	b1f0      	cbz	r0, 2a7fe <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2a7c0:	4631      	mov	r1, r6
   2a7c2:	4628      	mov	r0, r5
   2a7c4:	f7f2 f97a 	bl	1cabc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2a7c8:	2105      	movs	r1, #5
   2a7ca:	4628      	mov	r0, r5
   2a7cc:	f7ff fdd3 	bl	2a376 <smp_create_pdu.constprop.0>
	if (!buf) {
   2a7d0:	4604      	mov	r4, r0
   2a7d2:	b308      	cbz	r0, 2a818 <smp_error+0x6a>
   2a7d4:	2101      	movs	r1, #1
   2a7d6:	3008      	adds	r0, #8
   2a7d8:	f000 f984 	bl	2aae4 <net_buf_simple_add>
	rsp->reason = reason;
   2a7dc:	7006      	strb	r6, [r0, #0]
   2a7de:	2600      	movs	r6, #0
   2a7e0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   2a7e4:	9600      	str	r6, [sp, #0]
   2a7e6:	4633      	mov	r3, r6
   2a7e8:	4622      	mov	r2, r4
   2a7ea:	2106      	movs	r1, #6
   2a7ec:	f7fe fc06 	bl	28ffc <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2a7f0:	b118      	cbz	r0, 2a7fa <smp_error+0x4c>
		net_buf_unref(buf);
   2a7f2:	4620      	mov	r0, r4
   2a7f4:	f7f3 f9b8 	bl	1db68 <net_buf_unref>
	return 0;
   2a7f8:	4630      	mov	r0, r6
}
   2a7fa:	b002      	add	sp, #8
   2a7fc:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a7fe:	2101      	movs	r1, #1
   2a800:	4618      	mov	r0, r3
   2a802:	f7ff fca6 	bl	2a152 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a806:	2800      	cmp	r0, #0
   2a808:	d1da      	bne.n	2a7c0 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a80a:	210f      	movs	r1, #15
   2a80c:	4618      	mov	r0, r3
   2a80e:	f7ff fca0 	bl	2a152 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a812:	2800      	cmp	r0, #0
   2a814:	d1d4      	bne.n	2a7c0 <smp_error+0x12>
   2a816:	e7d7      	b.n	2a7c8 <smp_error+0x1a>
		return -ENOBUFS;
   2a818:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a81c:	e7ed      	b.n	2a7fa <smp_error+0x4c>

0002a81e <bt_smp_dhkey_ready>:
{
   2a81e:	b570      	push	{r4, r5, r6, lr}
   2a820:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2a822:	2008      	movs	r0, #8
   2a824:	f7f0 ffca 	bl	1b7bc <smp_find>
	if (smp) {
   2a828:	4605      	mov	r5, r0
   2a82a:	b1e0      	cbz	r0, 2a866 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2a82c:	1d06      	adds	r6, r0, #4
   2a82e:	2108      	movs	r1, #8
   2a830:	4630      	mov	r0, r6
   2a832:	f7ff fcfa 	bl	2a22a <atomic_clear_bit>
	if (!dhkey) {
   2a836:	b3bc      	cbz	r4, 2a8a8 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2a838:	2107      	movs	r1, #7
   2a83a:	f7ff fcf6 	bl	2a22a <atomic_clear_bit>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a83e:	4623      	mov	r3, r4
   2a840:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2a844:	f104 0120 	add.w	r1, r4, #32
   2a848:	f853 0b04 	ldr.w	r0, [r3], #4
   2a84c:	f842 0b04 	str.w	r0, [r2], #4
   2a850:	428b      	cmp	r3, r1
   2a852:	d1f9      	bne.n	2a848 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a854:	210a      	movs	r1, #10
   2a856:	4630      	mov	r0, r6
   2a858:	f7ff fc7b 	bl	2a152 <atomic_test_bit>
   2a85c:	b170      	cbz	r0, 2a87c <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a85e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a860:	4630      	mov	r0, r6
   2a862:	f7ff fd74 	bl	2a34e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2a866:	2007      	movs	r0, #7
   2a868:	f7f0 ffa8 	bl	1b7bc <smp_find>
		if (smp) {
   2a86c:	4604      	mov	r4, r0
   2a86e:	b1e8      	cbz	r0, 2a8ac <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2a870:	f7f1 f8c0 	bl	1b9f4 <smp_dhkey_generate>
			if (err) {
   2a874:	4601      	mov	r1, r0
   2a876:	b1c8      	cbz	r0, 2a8ac <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2a878:	4620      	mov	r0, r4
   2a87a:	e012      	b.n	2a8a2 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a87c:	2110      	movs	r1, #16
   2a87e:	4630      	mov	r0, r6
   2a880:	f7ff fc67 	bl	2a152 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a884:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a886:	2800      	cmp	r0, #0
   2a888:	d1ea      	bne.n	2a860 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2a88a:	4630      	mov	r0, r6
   2a88c:	f7ff fc61 	bl	2a152 <atomic_test_bit>
   2a890:	2800      	cmp	r0, #0
   2a892:	d0e8      	beq.n	2a866 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2a894:	4628      	mov	r0, r5
   2a896:	f7f1 fb11 	bl	1bebc <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2a89a:	4601      	mov	r1, r0
   2a89c:	2800      	cmp	r0, #0
   2a89e:	d0e2      	beq.n	2a866 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2a8a0:	4628      	mov	r0, r5
   2a8a2:	f7ff ff84 	bl	2a7ae <smp_error>
   2a8a6:	e7de      	b.n	2a866 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2a8a8:	210b      	movs	r1, #11
   2a8aa:	e7f9      	b.n	2a8a0 <bt_smp_dhkey_ready+0x82>
}
   2a8ac:	bd70      	pop	{r4, r5, r6, pc}

0002a8ae <smp_check_complete>:
{
   2a8ae:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2a8b0:	7883      	ldrb	r3, [r0, #2]
   2a8b2:	2b01      	cmp	r3, #1
{
   2a8b4:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   2a8b6:	d110      	bne.n	2a8da <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2a8b8:	2106      	movs	r1, #6
   2a8ba:	f7fe fbb8 	bl	2902e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2a8be:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2a8c2:	ea23 0104 	bic.w	r1, r3, r4
   2a8c6:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2a8ca:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2a8ce:	b921      	cbnz	r1, 2a8da <smp_check_complete+0x2c>
}
   2a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2a8d4:	38ec      	subs	r0, #236	; 0xec
   2a8d6:	f7f2 b8f1 	b.w	1cabc <smp_pairing_complete>
}
   2a8da:	bd10      	pop	{r4, pc}

0002a8dc <smp_sign_info_sent>:
	if (!err) {
   2a8dc:	b912      	cbnz	r2, 2a8e4 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   2a8de:	2104      	movs	r1, #4
   2a8e0:	f7ff bfe5 	b.w	2a8ae <smp_check_complete>
}
   2a8e4:	4770      	bx	lr

0002a8e6 <smp_id_sent>:
	if (!err) {
   2a8e6:	b912      	cbnz	r2, 2a8ee <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2a8e8:	2102      	movs	r1, #2
   2a8ea:	f7ff bfe0 	b.w	2a8ae <smp_check_complete>
}
   2a8ee:	4770      	bx	lr

0002a8f0 <smp_ident_sent>:
	if (!err) {
   2a8f0:	b912      	cbnz	r2, 2a8f8 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2a8f2:	2101      	movs	r1, #1
   2a8f4:	f7ff bfdb 	b.w	2a8ae <smp_check_complete>
}
   2a8f8:	4770      	bx	lr

0002a8fa <bt_smp_disconnected>:
{
   2a8fa:	b570      	push	{r4, r5, r6, lr}
   2a8fc:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2a8fe:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2a902:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a906:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2a908:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2a90c:	f001 f813 	bl	2b936 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a910:	2103      	movs	r1, #3
   2a912:	4620      	mov	r0, r4
   2a914:	f7ff fc1d 	bl	2a152 <atomic_test_bit>
   2a918:	b1a0      	cbz	r0, 2a944 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2a91a:	2108      	movs	r1, #8
   2a91c:	4630      	mov	r0, r6
   2a91e:	f7f2 f8cd 	bl	1cabc <smp_pairing_complete>
	if (keys) {
   2a922:	b13d      	cbz	r5, 2a934 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2a924:	89eb      	ldrh	r3, [r5, #14]
   2a926:	b113      	cbz	r3, 2a92e <bt_smp_disconnected+0x34>
   2a928:	7b6b      	ldrb	r3, [r5, #13]
   2a92a:	079b      	lsls	r3, r3, #30
   2a92c:	d502      	bpl.n	2a934 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2a92e:	4628      	mov	r0, r5
   2a930:	f7f2 fee4 	bl	1d6fc <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2a934:	4630      	mov	r0, r6
   2a936:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   2a93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a93e:	2100      	movs	r1, #0
   2a940:	f001 bb66 	b.w	2c010 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a944:	2101      	movs	r1, #1
   2a946:	4620      	mov	r0, r4
   2a948:	f7ff fc03 	bl	2a152 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a94c:	2800      	cmp	r0, #0
   2a94e:	d1e4      	bne.n	2a91a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a950:	210f      	movs	r1, #15
   2a952:	4620      	mov	r0, r4
   2a954:	f7ff fbfd 	bl	2a152 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a958:	2800      	cmp	r0, #0
   2a95a:	d1de      	bne.n	2a91a <bt_smp_disconnected+0x20>
   2a95c:	e7e1      	b.n	2a922 <bt_smp_disconnected+0x28>

0002a95e <id_add>:
	bt_id_add(keys);
   2a95e:	f7ec bf8b 	b.w	17878 <bt_id_add>

0002a962 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a962:	680b      	ldr	r3, [r1, #0]
   2a964:	6003      	str	r3, [r0, #0]
   2a966:	888b      	ldrh	r3, [r1, #4]
   2a968:	8083      	strh	r3, [r0, #4]
   2a96a:	798b      	ldrb	r3, [r1, #6]
   2a96c:	7183      	strb	r3, [r0, #6]
   2a96e:	4770      	bx	lr

0002a970 <bt_keys_get_type>:
{
   2a970:	b570      	push	{r4, r5, r6, lr}
   2a972:	4604      	mov	r4, r0
   2a974:	460d      	mov	r5, r1
   2a976:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2a978:	f7f2 fe60 	bl	1d63c <bt_keys_find>
	if (keys) {
   2a97c:	b938      	cbnz	r0, 2a98e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2a97e:	4631      	mov	r1, r6
   2a980:	4628      	mov	r0, r5
   2a982:	f7f2 fdeb 	bl	1d55c <bt_keys_get_addr>
	if (!keys) {
   2a986:	b110      	cbz	r0, 2a98e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2a988:	89c3      	ldrh	r3, [r0, #14]
   2a98a:	431c      	orrs	r4, r3
   2a98c:	81c4      	strh	r4, [r0, #14]
}
   2a98e:	bd70      	pop	{r4, r5, r6, pc}

0002a990 <bt_keys_add_type>:
	keys->keys |= type;
   2a990:	89c3      	ldrh	r3, [r0, #14]
   2a992:	4319      	orrs	r1, r3
   2a994:	81c1      	strh	r1, [r0, #14]
}
   2a996:	4770      	bx	lr

0002a998 <fixed_data_unref>:
}
   2a998:	4770      	bx	lr

0002a99a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a99a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a99c:	6849      	ldr	r1, [r1, #4]
   2a99e:	6809      	ldr	r1, [r1, #0]
   2a9a0:	f7f3 b84e 	b.w	1da40 <net_buf_alloc_len>

0002a9a4 <net_buf_get>:
{
   2a9a4:	b570      	push	{r4, r5, r6, lr}
   2a9a6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2a9a8:	f7f7 f864 	bl	21a74 <z_impl_k_queue_get>
	if (!buf) {
   2a9ac:	4605      	mov	r5, r0
   2a9ae:	b128      	cbz	r0, 2a9bc <net_buf_get+0x18>
   2a9b0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a9b2:	7963      	ldrb	r3, [r4, #5]
   2a9b4:	f013 0301 	ands.w	r3, r3, #1
   2a9b8:	d102      	bne.n	2a9c0 <net_buf_get+0x1c>
	frag->frags = NULL;
   2a9ba:	6023      	str	r3, [r4, #0]
}
   2a9bc:	4628      	mov	r0, r5
   2a9be:	bd70      	pop	{r4, r5, r6, pc}
   2a9c0:	2300      	movs	r3, #0
   2a9c2:	2200      	movs	r2, #0
   2a9c4:	4630      	mov	r0, r6
   2a9c6:	f7f7 f855 	bl	21a74 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2a9ca:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2a9cc:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2a9ce:	f023 0301 	bic.w	r3, r3, #1
   2a9d2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a9d4:	4604      	mov	r4, r0
   2a9d6:	e7ec      	b.n	2a9b2 <net_buf_get+0xe>

0002a9d8 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2a9d8:	b292      	uxth	r2, r2
	buf->__buf = data;
   2a9da:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2a9dc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2a9de:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2a9e0:	8082      	strh	r2, [r0, #4]
}
   2a9e2:	4770      	bx	lr

0002a9e4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2a9e4:	6883      	ldr	r3, [r0, #8]
   2a9e6:	440b      	add	r3, r1
   2a9e8:	6003      	str	r3, [r0, #0]
}
   2a9ea:	4770      	bx	lr

0002a9ec <net_buf_slist_put>:
{
   2a9ec:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2a9ee:	460b      	mov	r3, r1
   2a9f0:	681c      	ldr	r4, [r3, #0]
   2a9f2:	b98c      	cbnz	r4, 2aa18 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   2a9f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a9f8:	f3ef 8411 	mrs	r4, BASEPRI
   2a9fc:	f382 8812 	msr	BASEPRI_MAX, r2
   2aa00:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   2aa04:	b119      	cbz	r1, 2aa0e <net_buf_slist_put+0x22>
	return list->tail;
   2aa06:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   2aa08:	b962      	cbnz	r2, 2aa24 <net_buf_slist_put+0x38>
	list->head = node;
   2aa0a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2aa0c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2aa0e:	f384 8811 	msr	BASEPRI, r4
   2aa12:	f3bf 8f6f 	isb	sy
}
   2aa16:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   2aa18:	795a      	ldrb	r2, [r3, #5]
   2aa1a:	f042 0201 	orr.w	r2, r2, #1
   2aa1e:	715a      	strb	r2, [r3, #5]
   2aa20:	4623      	mov	r3, r4
   2aa22:	e7e5      	b.n	2a9f0 <net_buf_slist_put+0x4>
	parent->next = child;
   2aa24:	6011      	str	r1, [r2, #0]
}
   2aa26:	e7f1      	b.n	2aa0c <net_buf_slist_put+0x20>

0002aa28 <net_buf_slist_get>:
{
   2aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa2a:	4603      	mov	r3, r0
	__asm__ volatile(
   2aa2c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2aa30:	f3ef 8611 	mrs	r6, BASEPRI
   2aa34:	f382 8812 	msr	BASEPRI_MAX, r2
   2aa38:	f3bf 8f6f 	isb	sy
	return list->head;
   2aa3c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2aa3e:	b158      	cbz	r0, 2aa58 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aa40:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2aa42:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2aa44:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aa46:	4288      	cmp	r0, r1
	list->tail = node;
   2aa48:	bf08      	it	eq
   2aa4a:	605a      	streq	r2, [r3, #4]
   2aa4c:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2aa4e:	7951      	ldrb	r1, [r2, #5]
   2aa50:	f011 0401 	ands.w	r4, r1, #1
   2aa54:	d105      	bne.n	2aa62 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   2aa56:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   2aa58:	f386 8811 	msr	BASEPRI, r6
   2aa5c:	f3bf 8f6f 	isb	sy
}
   2aa60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   2aa62:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   2aa64:	b12c      	cbz	r4, 2aa72 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aa66:	685f      	ldr	r7, [r3, #4]
	return node->next;
   2aa68:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   2aa6a:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2aa6c:	42bc      	cmp	r4, r7
	list->tail = node;
   2aa6e:	bf08      	it	eq
   2aa70:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   2aa72:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   2aa76:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   2aa78:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2aa7a:	4622      	mov	r2, r4
   2aa7c:	e7e7      	b.n	2aa4e <net_buf_slist_get+0x26>

0002aa7e <net_buf_put>:
{
   2aa7e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2aa80:	460a      	mov	r2, r1
   2aa82:	6814      	ldr	r4, [r2, #0]
   2aa84:	b914      	cbnz	r4, 2aa8c <net_buf_put+0xe>
}
   2aa86:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2aa88:	f000 be47 	b.w	2b71a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2aa8c:	7953      	ldrb	r3, [r2, #5]
   2aa8e:	f043 0301 	orr.w	r3, r3, #1
   2aa92:	7153      	strb	r3, [r2, #5]
   2aa94:	4622      	mov	r2, r4
   2aa96:	e7f4      	b.n	2aa82 <net_buf_put+0x4>

0002aa98 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2aa98:	7902      	ldrb	r2, [r0, #4]
   2aa9a:	3201      	adds	r2, #1
   2aa9c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2aa9e:	4770      	bx	lr

0002aaa0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2aaa0:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2aaa2:	4618      	mov	r0, r3
   2aaa4:	681b      	ldr	r3, [r3, #0]
   2aaa6:	2b00      	cmp	r3, #0
   2aaa8:	d1fb      	bne.n	2aaa2 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2aaaa:	4770      	bx	lr

0002aaac <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2aaac:	6802      	ldr	r2, [r0, #0]
{
   2aaae:	b510      	push	{r4, lr}
	if (parent->frags) {
   2aab0:	b12a      	cbz	r2, 2aabe <net_buf_frag_insert+0x12>
   2aab2:	460b      	mov	r3, r1
	while (buf->frags) {
   2aab4:	461c      	mov	r4, r3
   2aab6:	681b      	ldr	r3, [r3, #0]
   2aab8:	2b00      	cmp	r3, #0
   2aaba:	d1fb      	bne.n	2aab4 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2aabc:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2aabe:	6001      	str	r1, [r0, #0]
}
   2aac0:	bd10      	pop	{r4, pc}

0002aac2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2aac2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2aac4:	4604      	mov	r4, r0
   2aac6:	b920      	cbnz	r0, 2aad2 <net_buf_frag_add+0x10>
	buf->ref++;
   2aac8:	790b      	ldrb	r3, [r1, #4]
   2aaca:	3301      	adds	r3, #1
   2aacc:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2aace:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2aad0:	bd10      	pop	{r4, pc}
   2aad2:	4603      	mov	r3, r0
	while (buf->frags) {
   2aad4:	4618      	mov	r0, r3
   2aad6:	681b      	ldr	r3, [r3, #0]
   2aad8:	2b00      	cmp	r3, #0
   2aada:	d1fb      	bne.n	2aad4 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2aadc:	f7ff ffe6 	bl	2aaac <net_buf_frag_insert>
   2aae0:	4620      	mov	r0, r4
   2aae2:	e7f5      	b.n	2aad0 <net_buf_frag_add+0xe>

0002aae4 <net_buf_simple_add>:
	return buf->data + buf->len;
   2aae4:	8883      	ldrh	r3, [r0, #4]
   2aae6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2aae8:	4419      	add	r1, r3
   2aaea:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2aaec:	18d0      	adds	r0, r2, r3
   2aaee:	4770      	bx	lr

0002aaf0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2aaf0:	b430      	push	{r4, r5}
   2aaf2:	8884      	ldrh	r4, [r0, #4]
   2aaf4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2aaf6:	18a3      	adds	r3, r4, r2
   2aaf8:	8083      	strh	r3, [r0, #4]
   2aafa:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2aafc:	bc30      	pop	{r4, r5}
   2aafe:	f001 ba66 	b.w	2bfce <memcpy>

0002ab02 <net_buf_simple_add_u8>:
   2ab02:	8883      	ldrh	r3, [r0, #4]
   2ab04:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2ab06:	b510      	push	{r4, lr}
	buf->len += len;
   2ab08:	1c5c      	adds	r4, r3, #1
   2ab0a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2ab0c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2ab0e:	18d0      	adds	r0, r2, r3
   2ab10:	bd10      	pop	{r4, pc}

0002ab12 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2ab12:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2ab14:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2ab16:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2ab18:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2ab1a:	4411      	add	r1, r2
	buf->data -= len;
   2ab1c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2ab1e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2ab20:	4770      	bx	lr

0002ab22 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2ab22:	8882      	ldrh	r2, [r0, #4]
   2ab24:	1a52      	subs	r2, r2, r1
{
   2ab26:	4603      	mov	r3, r0
	buf->len -= len;
   2ab28:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2ab2a:	6800      	ldr	r0, [r0, #0]
   2ab2c:	4408      	add	r0, r1
   2ab2e:	6018      	str	r0, [r3, #0]
}
   2ab30:	4770      	bx	lr

0002ab32 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2ab32:	4603      	mov	r3, r0
	void *data = buf->data;
   2ab34:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2ab36:	889a      	ldrh	r2, [r3, #4]
   2ab38:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2ab3a:	4401      	add	r1, r0
	buf->len -= len;
   2ab3c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2ab3e:	6019      	str	r1, [r3, #0]

	return data;
}
   2ab40:	4770      	bx	lr

0002ab42 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2ab42:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2ab44:	6803      	ldr	r3, [r0, #0]
   2ab46:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2ab48:	2101      	movs	r1, #1
   2ab4a:	f7ff ffea 	bl	2ab22 <net_buf_simple_pull>

	return val;
}
   2ab4e:	4620      	mov	r0, r4
   2ab50:	bd10      	pop	{r4, pc}

0002ab52 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2ab52:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2ab54:	6803      	ldr	r3, [r0, #0]
   2ab56:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2ab58:	2102      	movs	r1, #2
   2ab5a:	f7ff ffe2 	bl	2ab22 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2ab5e:	4620      	mov	r0, r4
   2ab60:	bd10      	pop	{r4, pc}

0002ab62 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2ab62:	6802      	ldr	r2, [r0, #0]
   2ab64:	6880      	ldr	r0, [r0, #8]
}
   2ab66:	1a10      	subs	r0, r2, r0
   2ab68:	4770      	bx	lr

0002ab6a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2ab6a:	8883      	ldrh	r3, [r0, #4]
   2ab6c:	88c2      	ldrh	r2, [r0, #6]
   2ab6e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2ab70:	6803      	ldr	r3, [r0, #0]
   2ab72:	6880      	ldr	r0, [r0, #8]
   2ab74:	1a18      	subs	r0, r3, r0
}
   2ab76:	1a10      	subs	r0, r2, r0
   2ab78:	4770      	bx	lr

0002ab7a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2ab7a:	6903      	ldr	r3, [r0, #16]
   2ab7c:	b2c9      	uxtb	r1, r1
   2ab7e:	220c      	movs	r2, #12
   2ab80:	fb01 3302 	mla	r3, r1, r2, r3
   2ab84:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2ab86:	f000 0007 	and.w	r0, r0, #7
   2ab8a:	4770      	bx	lr

0002ab8c <set_on_state>:
	__asm__ volatile(
   2ab8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ab90:	f3ef 8211 	mrs	r2, BASEPRI
   2ab94:	f383 8812 	msr	BASEPRI_MAX, r3
   2ab98:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2ab9c:	6803      	ldr	r3, [r0, #0]
   2ab9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2aba2:	f043 0302 	orr.w	r3, r3, #2
   2aba6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2aba8:	f382 8811 	msr	BASEPRI, r2
   2abac:	f3bf 8f6f 	isb	sy
}
   2abb0:	4770      	bx	lr

0002abb2 <stop>:
{
   2abb2:	4603      	mov	r3, r0
   2abb4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2abb6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2abb8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2abba:	f04f 0440 	mov.w	r4, #64	; 0x40
   2abbe:	f3ef 8611 	mrs	r6, BASEPRI
   2abc2:	f384 8812 	msr	BASEPRI_MAX, r4
   2abc6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2abca:	250c      	movs	r5, #12
   2abcc:	fb05 0401 	mla	r4, r5, r1, r0
   2abd0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2abd2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2abd6:	d001      	beq.n	2abdc <stop+0x2a>
   2abd8:	42a2      	cmp	r2, r4
   2abda:	d111      	bne.n	2ac00 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2abdc:	fb05 0001 	mla	r0, r5, r1, r0
   2abe0:	2201      	movs	r2, #1
   2abe2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2abe4:	2000      	movs	r0, #0
	__asm__ volatile(
   2abe6:	f386 8811 	msr	BASEPRI, r6
   2abea:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2abee:	b930      	cbnz	r0, 2abfe <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2abf0:	685b      	ldr	r3, [r3, #4]
   2abf2:	220c      	movs	r2, #12
   2abf4:	fb02 3101 	mla	r1, r2, r1, r3
   2abf8:	684b      	ldr	r3, [r1, #4]
   2abfa:	4798      	blx	r3
	return 0;
   2abfc:	2000      	movs	r0, #0
}
   2abfe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2ac00:	f04f 30ff 	mov.w	r0, #4294967295
   2ac04:	e7ef      	b.n	2abe6 <stop+0x34>

0002ac06 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2ac06:	2280      	movs	r2, #128	; 0x80
   2ac08:	f7ff bfd3 	b.w	2abb2 <stop>

0002ac0c <async_start>:
{
   2ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ac0e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2ac10:	6904      	ldr	r4, [r0, #16]
{
   2ac12:	4605      	mov	r5, r0
   2ac14:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2ac16:	f04f 0040 	mov.w	r0, #64	; 0x40
   2ac1a:	f3ef 8c11 	mrs	ip, BASEPRI
   2ac1e:	f380 8812 	msr	BASEPRI_MAX, r0
   2ac22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ac26:	260c      	movs	r6, #12
   2ac28:	fb06 4601 	mla	r6, r6, r1, r4
   2ac2c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2ac2e:	f000 0e07 	and.w	lr, r0, #7
   2ac32:	f1be 0f01 	cmp.w	lr, #1
   2ac36:	d110      	bne.n	2ac5a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2ac38:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2ac3a:	2600      	movs	r6, #0
	__asm__ volatile(
   2ac3c:	f38c 8811 	msr	BASEPRI, ip
   2ac40:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2ac44:	b93e      	cbnz	r6, 2ac56 <async_start+0x4a>
	subdata->cb = cb;
   2ac46:	200c      	movs	r0, #12
   2ac48:	4341      	muls	r1, r0
   2ac4a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2ac4c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2ac50:	686b      	ldr	r3, [r5, #4]
   2ac52:	585b      	ldr	r3, [r3, r1]
   2ac54:	4798      	blx	r3
}
   2ac56:	4630      	mov	r0, r6
   2ac58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2ac5a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2ac5e:	4287      	cmp	r7, r0
   2ac60:	bf14      	ite	ne
   2ac62:	f04f 36ff 	movne.w	r6, #4294967295
   2ac66:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2ac6a:	e7e7      	b.n	2ac3c <async_start+0x30>

0002ac6c <api_start>:
{
   2ac6c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2ac6e:	2480      	movs	r4, #128	; 0x80
   2ac70:	9400      	str	r4, [sp, #0]
   2ac72:	f7ff ffcb 	bl	2ac0c <async_start>
}
   2ac76:	b002      	add	sp, #8
   2ac78:	bd10      	pop	{r4, pc}

0002ac7a <onoff_started_callback>:
	return &data->mgr[type];
   2ac7a:	6900      	ldr	r0, [r0, #16]
{
   2ac7c:	b410      	push	{r4}
	return &data->mgr[type];
   2ac7e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2ac80:	241c      	movs	r4, #28
   2ac82:	fb03 0004 	mla	r0, r3, r4, r0
   2ac86:	2100      	movs	r1, #0
}
   2ac88:	bc10      	pop	{r4}
	notify(mgr, 0);
   2ac8a:	4710      	bx	r2

0002ac8c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2ac8c:	2000      	movs	r0, #0
   2ac8e:	f7f5 bb37 	b.w	20300 <nrfx_clock_start>

0002ac92 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2ac92:	2000      	movs	r0, #0
   2ac94:	f000 ba8d 	b.w	2b1b2 <nrfx_clock_stop>

0002ac98 <blocking_start_callback>:
{
   2ac98:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2ac9a:	f7f6 bf1f 	b.w	21adc <z_impl_k_sem_give>

0002ac9e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ac9e:	6843      	ldr	r3, [r0, #4]
   2aca0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2aca2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2aca6:	600b      	str	r3, [r1, #0]
}
   2aca8:	2000      	movs	r0, #0
   2acaa:	4770      	bx	lr

0002acac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2acac:	6843      	ldr	r3, [r0, #4]
   2acae:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2acb0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2acb4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2acb8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2acbc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2acc0:	2000      	movs	r0, #0
   2acc2:	4770      	bx	lr

0002acc4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2acc4:	6843      	ldr	r3, [r0, #4]
   2acc6:	685b      	ldr	r3, [r3, #4]
}
   2acc8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2acca:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2acce:	4770      	bx	lr

0002acd0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2acd0:	6843      	ldr	r3, [r0, #4]
   2acd2:	685b      	ldr	r3, [r3, #4]
}
   2acd4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2acd6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2acda:	4770      	bx	lr

0002acdc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2acdc:	6843      	ldr	r3, [r0, #4]
   2acde:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2ace0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2ace4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2ace8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2acea:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2acee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2acf2:	2000      	movs	r0, #0
   2acf4:	4770      	bx	lr

0002acf6 <gpio_nrfx_manage_callback>:
	return port->data;
   2acf6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2acf8:	6858      	ldr	r0, [r3, #4]
{
   2acfa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2acfc:	b158      	cbz	r0, 2ad16 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2acfe:	2400      	movs	r4, #0
   2ad00:	4281      	cmp	r1, r0
   2ad02:	d112      	bne.n	2ad2a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2ad04:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2ad06:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2ad08:	b954      	cbnz	r4, 2ad20 <gpio_nrfx_manage_callback+0x2a>
   2ad0a:	428d      	cmp	r5, r1
	list->head = node;
   2ad0c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ad0e:	d100      	bne.n	2ad12 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2ad10:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2ad12:	2000      	movs	r0, #0
   2ad14:	6008      	str	r0, [r1, #0]
	if (set) {
   2ad16:	b96a      	cbnz	r2, 2ad34 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2ad18:	2000      	movs	r0, #0
}
   2ad1a:	bd30      	pop	{r4, r5, pc}
   2ad1c:	4628      	mov	r0, r5
   2ad1e:	e7ef      	b.n	2ad00 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2ad20:	428d      	cmp	r5, r1
	parent->next = child;
   2ad22:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ad24:	bf08      	it	eq
   2ad26:	609c      	streq	r4, [r3, #8]
}
   2ad28:	e7f3      	b.n	2ad12 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2ad2a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ad2c:	4604      	mov	r4, r0
   2ad2e:	2d00      	cmp	r5, #0
   2ad30:	d1f4      	bne.n	2ad1c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2ad32:	b13a      	cbz	r2, 2ad44 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2ad34:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2ad36:	685a      	ldr	r2, [r3, #4]
   2ad38:	600a      	str	r2, [r1, #0]
	list->head = node;
   2ad3a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ad3c:	2800      	cmp	r0, #0
   2ad3e:	d1eb      	bne.n	2ad18 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2ad40:	6099      	str	r1, [r3, #8]
}
   2ad42:	e7ea      	b.n	2ad1a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2ad44:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2ad48:	e7e7      	b.n	2ad1a <gpio_nrfx_manage_callback+0x24>

0002ad4a <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   2ad4a:	2200      	movs	r2, #0
   2ad4c:	2101      	movs	r1, #1
   2ad4e:	2004      	movs	r0, #4
   2ad50:	f7e9 bf24 	b.w	14b9c <z_arm_irq_priority_set>

0002ad54 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2ad54:	b530      	push	{r4, r5, lr}
   2ad56:	4604      	mov	r4, r0
	while (*count) {
   2ad58:	6808      	ldr	r0, [r1, #0]
   2ad5a:	b908      	cbnz	r0, 2ad60 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   2ad5c:	6010      	str	r0, [r2, #0]
	return NULL;
   2ad5e:	e004      	b.n	2ad6a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   2ad60:	6823      	ldr	r3, [r4, #0]
   2ad62:	685d      	ldr	r5, [r3, #4]
   2ad64:	b115      	cbz	r5, 2ad6c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   2ad66:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   2ad68:	6015      	str	r5, [r2, #0]
}
   2ad6a:	bd30      	pop	{r4, r5, pc}
		++(*current);
   2ad6c:	3308      	adds	r3, #8
		--(*count);
   2ad6e:	3801      	subs	r0, #1
		++(*current);
   2ad70:	6023      	str	r3, [r4, #0]
		--(*count);
   2ad72:	6008      	str	r0, [r1, #0]
   2ad74:	e7f0      	b.n	2ad58 <spi_context_get_next_buf.constprop.0+0x4>

0002ad76 <z_log_msg_static_create.constprop.0>:
   2ad76:	2300      	movs	r3, #0
   2ad78:	f7e8 bf82 	b.w	13c80 <z_impl_z_log_msg_static_create>

0002ad7c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2ad7c:	4603      	mov	r3, r0
   2ad7e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   2ad80:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2ad82:	7919      	ldrb	r1, [r3, #4]
   2ad84:	2301      	movs	r3, #1
   2ad86:	fa03 f101 	lsl.w	r1, r3, r1
   2ad8a:	6903      	ldr	r3, [r0, #16]
   2ad8c:	681b      	ldr	r3, [r3, #0]
   2ad8e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2ad90:	bf18      	it	ne
   2ad92:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2ad96:	b112      	cbz	r2, 2ad9e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2ad98:	6883      	ldr	r3, [r0, #8]
   2ad9a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2ad9c:	4718      	bx	r3
   2ad9e:	6883      	ldr	r3, [r0, #8]
   2ada0:	691b      	ldr	r3, [r3, #16]
   2ada2:	e7fb      	b.n	2ad9c <gpio_pin_set_dt.isra.0+0x20>

0002ada4 <_spi_context_cs_control>:
{
   2ada4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2ada6:	6803      	ldr	r3, [r0, #0]
{
   2ada8:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2adaa:	b1e3      	cbz	r3, 2ade6 <_spi_context_cs_control+0x42>
   2adac:	6898      	ldr	r0, [r3, #8]
   2adae:	b1d0      	cbz	r0, 2ade6 <_spi_context_cs_control+0x42>
   2adb0:	6805      	ldr	r5, [r0, #0]
   2adb2:	b1c5      	cbz	r5, 2ade6 <_spi_context_cs_control+0x42>
		if (on) {
   2adb4:	b149      	cbz	r1, 2adca <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2adb6:	2101      	movs	r1, #1
   2adb8:	f7ff ffe0 	bl	2ad7c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2adbc:	6823      	ldr	r3, [r4, #0]
   2adbe:	689b      	ldr	r3, [r3, #8]
   2adc0:	6898      	ldr	r0, [r3, #8]
}
   2adc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2adc6:	f000 bf4d 	b.w	2bc64 <z_impl_k_busy_wait>
			if (!force_off &&
   2adca:	b912      	cbnz	r2, 2add2 <_spi_context_cs_control+0x2e>
   2adcc:	889b      	ldrh	r3, [r3, #4]
   2adce:	04db      	lsls	r3, r3, #19
   2add0:	d409      	bmi.n	2ade6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2add2:	6880      	ldr	r0, [r0, #8]
   2add4:	f000 ff46 	bl	2bc64 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2add8:	6823      	ldr	r3, [r4, #0]
   2adda:	2100      	movs	r1, #0
   2addc:	6898      	ldr	r0, [r3, #8]
}
   2adde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2ade2:	f7ff bfcb 	b.w	2ad7c <gpio_pin_set_dt.isra.0>
}
   2ade6:	bd38      	pop	{r3, r4, r5, pc}

0002ade8 <spi_context_unlock_unconditionally>:
{
   2ade8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2adea:	2201      	movs	r2, #1
   2adec:	2100      	movs	r1, #0
{
   2adee:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2adf0:	f7ff ffd8 	bl	2ada4 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2adf4:	69a3      	ldr	r3, [r4, #24]
   2adf6:	b933      	cbnz	r3, 2ae06 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2adf8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2adfa:	f104 0010 	add.w	r0, r4, #16
}
   2adfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ae02:	f7f6 be6b 	b.w	21adc <z_impl_k_sem_give>
   2ae06:	bd10      	pop	{r4, pc}

0002ae08 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
   2ae08:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2ae0a:	6803      	ldr	r3, [r0, #0]
   2ae0c:	428b      	cmp	r3, r1
{
   2ae0e:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2ae10:	d106      	bne.n	2ae20 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2ae12:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2ae16:	b934      	cbnz	r4, 2ae26 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2ae18:	f7ff ffe6 	bl	2ade8 <spi_context_unlock_unconditionally>
	return 0;
   2ae1c:	4620      	mov	r0, r4
}
   2ae1e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2ae20:	f06f 0015 	mvn.w	r0, #21
   2ae24:	e7fb      	b.n	2ae1e <spi_nrfx_release+0x16>
		return -EBUSY;
   2ae26:	f06f 000f 	mvn.w	r0, #15
   2ae2a:	e7f8      	b.n	2ae1e <spi_nrfx_release+0x16>

0002ae2c <is_regular_addr_valid>:
{
   2ae2c:	b538      	push	{r3, r4, r5, lr}
   2ae2e:	4605      	mov	r5, r0
   2ae30:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2ae32:	f000 fa46 	bl	2b2c2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2ae36:	2d00      	cmp	r5, #0
   2ae38:	db07      	blt.n	2ae4a <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2ae3a:	42a8      	cmp	r0, r5
   2ae3c:	d905      	bls.n	2ae4a <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2ae3e:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2ae40:	4284      	cmp	r4, r0
   2ae42:	bf8c      	ite	hi
   2ae44:	2000      	movhi	r0, #0
   2ae46:	2001      	movls	r0, #1
}
   2ae48:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2ae4a:	2000      	movs	r0, #0
   2ae4c:	e7fc      	b.n	2ae48 <is_regular_addr_valid+0x1c>

0002ae4e <flash_nrf_read>:
{
   2ae4e:	b570      	push	{r4, r5, r6, lr}
   2ae50:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2ae52:	4628      	mov	r0, r5
   2ae54:	4619      	mov	r1, r3
{
   2ae56:	4616      	mov	r6, r2
   2ae58:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2ae5a:	f7ff ffe7 	bl	2ae2c <is_regular_addr_valid>
   2ae5e:	b928      	cbnz	r0, 2ae6c <flash_nrf_read+0x1e>
   2ae60:	4621      	mov	r1, r4
   2ae62:	4628      	mov	r0, r5
}
   2ae64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ae68:	f7f3 bc50 	b.w	1e70c <flash_nrf_read.part.0>
	if (!len) {
   2ae6c:	b124      	cbz	r4, 2ae78 <flash_nrf_read+0x2a>
   2ae6e:	4622      	mov	r2, r4
   2ae70:	4629      	mov	r1, r5
   2ae72:	4630      	mov	r0, r6
   2ae74:	f001 f8ab 	bl	2bfce <memcpy>
}
   2ae78:	2000      	movs	r0, #0
   2ae7a:	bd70      	pop	{r4, r5, r6, pc}

0002ae7c <uart_nrfx_config_get>:
	*cfg = data->uart_config;
   2ae7c:	6902      	ldr	r2, [r0, #16]
{
   2ae7e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2ae80:	e892 0003 	ldmia.w	r2, {r0, r1}
   2ae84:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2ae88:	2000      	movs	r0, #0
   2ae8a:	4770      	bx	lr

0002ae8c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2ae8c:	2000      	movs	r0, #0
   2ae8e:	4770      	bx	lr

0002ae90 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2ae90:	b538      	push	{r3, r4, r5, lr}
   2ae92:	460c      	mov	r4, r1
   2ae94:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2ae96:	f7ec f99d 	bl	171d4 <bt_is_ready>
   2ae9a:	b128      	cbz	r0, 2aea8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2ae9c:	4629      	mov	r1, r5
   2ae9e:	4620      	mov	r0, r4
}
   2aea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2aea4:	f7eb bc58 	b.w	16758 <bt_hci_le_rand>
}
   2aea8:	f06f 000a 	mvn.w	r0, #10
   2aeac:	bd38      	pop	{r3, r4, r5, pc}

0002aeae <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2aeae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aeb0:	460f      	mov	r7, r1
   2aeb2:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2aeb4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2aeb8:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2aeba:	42a6      	cmp	r6, r4
   2aebc:	d803      	bhi.n	2aec6 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   2aebe:	d116      	bne.n	2aeee <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   2aec0:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   2aec2:	b003      	add	sp, #12
   2aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2aec6:	1b33      	subs	r3, r6, r4
   2aec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2aecc:	bf38      	it	cc
   2aece:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2aed0:	462a      	mov	r2, r5
   2aed2:	ab01      	add	r3, sp, #4
   2aed4:	1939      	adds	r1, r7, r4
   2aed6:	2000      	movs	r0, #0
   2aed8:	f7f9 f8fa 	bl	240d0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   2aedc:	b920      	cbnz	r0, 2aee8 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   2aede:	9b01      	ldr	r3, [sp, #4]
   2aee0:	42ab      	cmp	r3, r5
   2aee2:	d101      	bne.n	2aee8 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2aee4:	442c      	add	r4, r5
   2aee6:	e7e8      	b.n	2aeba <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2aee8:	f06f 0015 	mvn.w	r0, #21
   2aeec:	e7e9      	b.n	2aec2 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   2aeee:	2016      	movs	r0, #22
   2aef0:	e7e7      	b.n	2aec2 <entropy_cc3xx_rng_get_entropy+0x14>

0002aef2 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2aef2:	2200      	movs	r2, #0
{
   2aef4:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2aef6:	4611      	mov	r1, r2
   2aef8:	4610      	mov	r0, r2
   2aefa:	f7f9 f8b7 	bl	2406c <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2aefe:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   2af00:	bf18      	it	ne
   2af02:	f06f 0015 	mvnne.w	r0, #21
   2af06:	bd08      	pop	{r3, pc}

0002af08 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2af08:	4770      	bx	lr

0002af0a <sys_clock_cycle_get_32>:
{
   2af0a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2af0c:	f7f4 f8da 	bl	1f0c4 <z_nrf_rtc_timer_read>
}
   2af10:	bd08      	pop	{r3, pc}

0002af12 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2af12:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2af14:	6843      	ldr	r3, [r0, #4]
   2af16:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2af18:	7a03      	ldrb	r3, [r0, #8]
   2af1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2af1e:	3b01      	subs	r3, #1
   2af20:	00db      	lsls	r3, r3, #3
   2af22:	6845      	ldr	r5, [r0, #4]
   2af24:	6814      	ldr	r4, [r2, #0]
   2af26:	441d      	add	r5, r3
   2af28:	42ac      	cmp	r4, r5
   2af2a:	d902      	bls.n	2af32 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2af2c:	f06f 0001 	mvn.w	r0, #1
}
   2af30:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2af32:	7965      	ldrb	r5, [r4, #5]
   2af34:	428d      	cmp	r5, r1
   2af36:	d002      	beq.n	2af3e <pinctrl_lookup_state+0x2c>
		(*state)++;
   2af38:	3408      	adds	r4, #8
   2af3a:	6014      	str	r4, [r2, #0]
   2af3c:	e7f1      	b.n	2af22 <pinctrl_lookup_state+0x10>
			return 0;
   2af3e:	2000      	movs	r0, #0
   2af40:	e7f6      	b.n	2af30 <pinctrl_lookup_state+0x1e>

0002af42 <nrf_gpio_pin_write>:
    if (value == 0)
   2af42:	b909      	cbnz	r1, 2af48 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2af44:	f7f4 ba64 	b.w	1f410 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2af48:	f7f4 ba94 	b.w	1f474 <nrf_gpio_pin_set>

0002af4c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af50:	4616      	mov	r6, r2
   2af52:	4605      	mov	r5, r0
   2af54:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2af58:	42af      	cmp	r7, r5
   2af5a:	d102      	bne.n	2af62 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2af5c:	2000      	movs	r0, #0
}
   2af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2af62:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   2af64:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2af66:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2af6a:	2b19      	cmp	r3, #25
   2af6c:	d862      	bhi.n	2b034 <pinctrl_configure_pins+0xe8>
   2af6e:	e8df f003 	tbb	[pc, r3]
   2af72:	190d      	.short	0x190d
   2af74:	37264121 	.word	0x37264121
   2af78:	61616141 	.word	0x61616141
   2af7c:	61616161 	.word	0x61616161
   2af80:	61616161 	.word	0x61616161
   2af84:	61616161 	.word	0x61616161
   2af88:	5c575246 	.word	0x5c575246
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2af8c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2af90:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2af94:	6828      	ldr	r0, [r5, #0]
   2af96:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2af9a:	f7f4 fa6b 	bl	1f474 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2af9e:	4643      	mov	r3, r8
   2afa0:	2201      	movs	r2, #1
   2afa2:	e005      	b.n	2afb0 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2afa4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2afa8:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2afac:	4643      	mov	r3, r8
   2afae:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2afb0:	4611      	mov	r1, r2
   2afb2:	e010      	b.n	2afd6 <pinctrl_configure_pins+0x8a>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2afb4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2afb8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2afbc:	e7ea      	b.n	2af94 <pinctrl_configure_pins+0x48>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2afbe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2afc2:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2afc6:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   2afc8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2afcc:	f7f4 fa20 	bl	1f410 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2afd0:	4643      	mov	r3, r8
   2afd2:	2200      	movs	r2, #0
   2afd4:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2afd6:	6828      	ldr	r0, [r5, #0]
   2afd8:	f7f4 fa2a 	bl	1f430 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2afdc:	3504      	adds	r5, #4
   2afde:	e7bb      	b.n	2af58 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2afe0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2afe4:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2afe8:	6828      	ldr	r0, [r5, #0]
   2afea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2afee:	f7f4 fa0f 	bl	1f410 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2aff2:	e7d4      	b.n	2af9e <pinctrl_configure_pins+0x52>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   2aff4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2aff8:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   2affc:	e7d6      	b.n	2afac <pinctrl_configure_pins+0x60>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2affe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b002:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b006:	6828      	ldr	r0, [r5, #0]
   2b008:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2b00c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2b010:	f7ff ff97 	bl	2af42 <nrf_gpio_pin_write>
   2b014:	e7c3      	b.n	2af9e <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2b016:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b01a:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b01e:	e7f2      	b.n	2b006 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2b020:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b024:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b028:	e7ed      	b.n	2b006 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2b02a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b02e:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   2b032:	e7e8      	b.n	2b006 <pinctrl_configure_pins+0xba>
		switch (NRF_GET_FUN(pins[i])) {
   2b034:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b038:	e791      	b.n	2af5e <pinctrl_configure_pins+0x12>

0002b03a <rand_prio_high_vector_get>:
   2b03a:	f7f4 ba81 	b.w	1f540 <rand_prio_low_vector_get>

0002b03e <hci_driver_send>:
{
   2b03e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2b040:	8983      	ldrh	r3, [r0, #12]
{
   2b042:	4605      	mov	r5, r0
	if (!buf->len) {
   2b044:	b373      	cbz	r3, 2b0a4 <hci_driver_send+0x66>
   2b046:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2b048:	b1a3      	cbz	r3, 2b074 <hci_driver_send+0x36>
   2b04a:	2b02      	cmp	r3, #2
   2b04c:	d12a      	bne.n	2b0a4 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b04e:	f04f 30ff 	mov.w	r0, #4294967295
   2b052:	f04f 31ff 	mov.w	r1, #4294967295
   2b056:	f7f4 fa1d 	bl	1f494 <multithreading_lock_acquire>
	if (!errcode) {
   2b05a:	4604      	mov	r4, r0
   2b05c:	b940      	cbnz	r0, 2b070 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2b05e:	68a8      	ldr	r0, [r5, #8]
   2b060:	f7e2 fc24 	bl	d8ac <sdc_hci_data_put>
   2b064:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b066:	f7f4 fa1d 	bl	1f4a4 <multithreading_lock_release>
		if (errcode) {
   2b06a:	b1b4      	cbz	r4, 2b09a <hci_driver_send+0x5c>
			receive_signal_raise();
   2b06c:	f7f4 fa7c 	bl	1f568 <receive_signal_raise>
}
   2b070:	4620      	mov	r0, r4
   2b072:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b074:	f04f 30ff 	mov.w	r0, #4294967295
   2b078:	f04f 31ff 	mov.w	r1, #4294967295
   2b07c:	f7f4 fa0a 	bl	1f494 <multithreading_lock_acquire>
	if (!errcode) {
   2b080:	4604      	mov	r4, r0
   2b082:	2800      	cmp	r0, #0
   2b084:	d1f4      	bne.n	2b070 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2b086:	68a8      	ldr	r0, [r5, #8]
   2b088:	f7f4 fc30 	bl	1f8ec <hci_internal_cmd_put>
   2b08c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b08e:	f7f4 fa09 	bl	1f4a4 <multithreading_lock_release>
	if (errcode) {
   2b092:	2c00      	cmp	r4, #0
   2b094:	d1ec      	bne.n	2b070 <hci_driver_send+0x32>
	receive_signal_raise();
   2b096:	f7f4 fa67 	bl	1f568 <receive_signal_raise>
		net_buf_unref(buf);
   2b09a:	4628      	mov	r0, r5
   2b09c:	f7f2 fd64 	bl	1db68 <net_buf_unref>
   2b0a0:	2400      	movs	r4, #0
   2b0a2:	e7e5      	b.n	2b070 <hci_driver_send+0x32>
	switch (type) {
   2b0a4:	f06f 0415 	mvn.w	r4, #21
   2b0a8:	e7e2      	b.n	2b070 <hci_driver_send+0x32>

0002b0aa <receive_work_handler>:
	hci_driver_receive_process();
   2b0aa:	f7f4 bbcb 	b.w	1f844 <hci_driver_receive_process>

0002b0ae <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2b0ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b0b0:	b08d      	sub	sp, #52	; 0x34
   2b0b2:	4615      	mov	r5, r2
   2b0b4:	466a      	mov	r2, sp
   2b0b6:	f100 0310 	add.w	r3, r0, #16
   2b0ba:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2b0bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b0c0:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2b0c4:	4298      	cmp	r0, r3
   2b0c6:	d1f9      	bne.n	2b0bc <bt_encrypt_le+0xe>
   2b0c8:	aa04      	add	r2, sp, #16
   2b0ca:	f101 0310 	add.w	r3, r1, #16
   2b0ce:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2b0d0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b0d4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2b0d8:	428b      	cmp	r3, r1
   2b0da:	d1f9      	bne.n	2b0d0 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b0dc:	f04f 30ff 	mov.w	r0, #4294967295
   2b0e0:	f04f 31ff 	mov.w	r1, #4294967295
   2b0e4:	f7f4 f9d6 	bl	1f494 <multithreading_lock_acquire>

	if (!errcode) {
   2b0e8:	4604      	mov	r4, r0
   2b0ea:	b990      	cbnz	r0, 2b112 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2b0ec:	aa08      	add	r2, sp, #32
   2b0ee:	4639      	mov	r1, r7
   2b0f0:	4630      	mov	r0, r6
   2b0f2:	f7e2 f94f 	bl	d394 <sdc_soc_ecb_block_encrypt>
   2b0f6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b0f8:	f7f4 f9d4 	bl	1f4a4 <multithreading_lock_release>
	}

	if (!errcode) {
   2b0fc:	b94c      	cbnz	r4, 2b112 <bt_encrypt_le+0x64>
   2b0fe:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2b100:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2b104:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2b106:	f812 1901 	ldrb.w	r1, [r2], #-1
   2b10a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2b10e:	429d      	cmp	r5, r3
   2b110:	d1f9      	bne.n	2b106 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2b112:	4620      	mov	r0, r4
   2b114:	b00d      	add	sp, #52	; 0x34
   2b116:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b118 <sys_memcpy_swap.constprop.0>:
   2b118:	f101 0320 	add.w	r3, r1, #32
   2b11c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2b11e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2b122:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2b126:	428b      	cmp	r3, r1
   2b128:	d1f9      	bne.n	2b11e <sys_memcpy_swap.constprop.0+0x6>
}
   2b12a:	4770      	bx	lr

0002b12c <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2b12c:	2100      	movs	r1, #0
   2b12e:	f7f5 b82f 	b.w	20190 <cmd_le_generate_dhkey>

0002b132 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2b132:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2b136:	2901      	cmp	r1, #1
   2b138:	d801      	bhi.n	2b13e <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2b13a:	f7f5 b829 	b.w	20190 <cmd_le_generate_dhkey>
}
   2b13e:	2012      	movs	r0, #18
   2b140:	4770      	bx	lr

0002b142 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b142:	4668      	mov	r0, sp
   2b144:	f020 0107 	bic.w	r1, r0, #7
   2b148:	468d      	mov	sp, r1
   2b14a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2b14c:	f7d8 fabc 	bl	36c8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2b150:	f7e9 fd3e 	bl	14bd0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2b154:	f7e9 fe06 	bl	14d64 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b158:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b15c:	4685      	mov	sp, r0
   2b15e:	4770      	bx	lr

0002b160 <mpsl_low_prio_work_handler>:
{
   2b160:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b162:	f04f 31ff 	mov.w	r1, #4294967295
   2b166:	f04f 30ff 	mov.w	r0, #4294967295
   2b16a:	f7f4 f993 	bl	1f494 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2b16e:	f7e1 ff36 	bl	cfde <mpsl_low_priority_process>
}
   2b172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2b176:	f7f4 b995 	b.w	1f4a4 <multithreading_lock_release>

0002b17a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b17a:	4668      	mov	r0, sp
   2b17c:	f020 0107 	bic.w	r1, r0, #7
   2b180:	468d      	mov	sp, r1
   2b182:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2b184:	f7d8 fa16 	bl	35b4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2b188:	f7e9 fd22 	bl	14bd0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b18c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b190:	4685      	mov	sp, r0
   2b192:	4770      	bx	lr

0002b194 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b194:	4668      	mov	r0, sp
   2b196:	f020 0107 	bic.w	r1, r0, #7
   2b19a:	468d      	mov	sp, r1
   2b19c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2b19e:	f7d5 ff79 	bl	1094 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2b1a2:	f7e9 fd15 	bl	14bd0 <_arch_isr_direct_pm>
   2b1a6:	f7e9 fddd 	bl	14d64 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b1aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b1ae:	4685      	mov	sp, r0
   2b1b0:	4770      	bx	lr

0002b1b2 <nrfx_clock_stop>:
	switch (domain) {
   2b1b2:	2801      	cmp	r0, #1
   2b1b4:	d101      	bne.n	2b1ba <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2b1b6:	f7d9 b8e3 	b.w	4380 <mpsl_clock_hfclk_release>
}
   2b1ba:	4770      	bx	lr

0002b1bc <nrfx_clock_enable>:
}
   2b1bc:	4770      	bx	lr

0002b1be <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2b1be:	f7d8 bef3 	b.w	3fa8 <MPSL_IRQ_CLOCK_Handler>

0002b1c2 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2b1c2:	f7d9 baad 	b.w	4720 <mpsl_is_initialized>

0002b1c6 <nrf_flash_sync_get_timestamp_begin>:
}
   2b1c6:	4770      	bx	lr

0002b1c8 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   2b1c8:	2000      	movs	r0, #0
   2b1ca:	4770      	bx	lr

0002b1cc <temp_nrf5_mpsl_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2b1cc:	2939      	cmp	r1, #57	; 0x39
{
   2b1ce:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   2b1d0:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2b1d2:	d001      	beq.n	2b1d8 <temp_nrf5_mpsl_sample_fetch+0xc>
   2b1d4:	290c      	cmp	r1, #12
   2b1d6:	d104      	bne.n	2b1e2 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   2b1d8:	f7d9 faba 	bl	4750 <mpsl_temperature_get>
   2b1dc:	6020      	str	r0, [r4, #0]
	return 0;
   2b1de:	2000      	movs	r0, #0
}
   2b1e0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2b1e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b1e6:	e7fb      	b.n	2b1e0 <temp_nrf5_mpsl_sample_fetch+0x14>

0002b1e8 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2b1e8:	f7f8 beea 	b.w	23fc0 <nrf_cc3xx_platform_init>

0002b1ec <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2b1ec:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2b1ee:	f7e9 fb55 	bl	1489c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2b1f2:	f7e9 fc07 	bl	14a04 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2b1f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2b1fa:	f7f8 bee1 	b.w	23fc0 <nrf_cc3xx_platform_init>

0002b1fe <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b1fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b202:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2b206:	f1a0 0308 	sub.w	r3, r0, #8
   2b20a:	4258      	negs	r0, r3
   2b20c:	4158      	adcs	r0, r3
   2b20e:	4770      	bx	lr

0002b210 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2b210:	4700      	bx	r0

0002b212 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b212:	f000 bd27 	b.w	2bc64 <z_impl_k_busy_wait>

0002b216 <nrf_gpio_reconfigure>:
{
   2b216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b218:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b21a:	a801      	add	r0, sp, #4
{
   2b21c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2b220:	4617      	mov	r7, r2
   2b222:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b224:	f7f5 fae6 	bl	207f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b228:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b22a:	2f00      	cmp	r7, #0
   2b22c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b230:	bf14      	ite	ne
   2b232:	2302      	movne	r3, #2
   2b234:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b236:	2900      	cmp	r1, #0
   2b238:	bf18      	it	ne
   2b23a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b23e:	2d00      	cmp	r5, #0
   2b240:	bf14      	ite	ne
   2b242:	f04f 0c0c 	movne.w	ip, #12
   2b246:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b24a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b24c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b250:	bf14      	ite	ne
   2b252:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2b256:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b25a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b25c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b260:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b264:	bf14      	ite	ne
   2b266:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2b26a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b26e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2b272:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b276:	b101      	cbz	r1, 2b27a <nrf_gpio_reconfigure+0x64>
   2b278:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2b27a:	b10f      	cbz	r7, 2b280 <nrf_gpio_reconfigure+0x6a>
   2b27c:	783f      	ldrb	r7, [r7, #0]
   2b27e:	007f      	lsls	r7, r7, #1
   2b280:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2b282:	b10d      	cbz	r5, 2b288 <nrf_gpio_reconfigure+0x72>
   2b284:	782d      	ldrb	r5, [r5, #0]
   2b286:	00ad      	lsls	r5, r5, #2
   2b288:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2b28a:	b10c      	cbz	r4, 2b290 <nrf_gpio_reconfigure+0x7a>
   2b28c:	7822      	ldrb	r2, [r4, #0]
   2b28e:	0214      	lsls	r4, r2, #8
   2b290:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2b292:	b10e      	cbz	r6, 2b298 <nrf_gpio_reconfigure+0x82>
   2b294:	7836      	ldrb	r6, [r6, #0]
   2b296:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b298:	432c      	orrs	r4, r5
   2b29a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2b29c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2b2a0:	b003      	add	sp, #12
   2b2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b2a4 <nrf_gpio_cfg_sense_set>:
{
   2b2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b2a6:	f10d 030f 	add.w	r3, sp, #15
   2b2aa:	9301      	str	r3, [sp, #4]
   2b2ac:	2300      	movs	r3, #0
{
   2b2ae:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b2b2:	9300      	str	r3, [sp, #0]
   2b2b4:	461a      	mov	r2, r3
   2b2b6:	4619      	mov	r1, r3
   2b2b8:	f7ff ffad 	bl	2b216 <nrf_gpio_reconfigure>
}
   2b2bc:	b005      	add	sp, #20
   2b2be:	f85d fb04 	ldr.w	pc, [sp], #4

0002b2c2 <nrfx_nvmc_flash_size_get>:
   2b2c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b2c6:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2b2c8:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2b2ca:	4350      	muls	r0, r2
   2b2cc:	4770      	bx	lr

0002b2ce <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2b2ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b2d2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2b2d4:	4770      	bx	lr

0002b2d6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2b2d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b2da:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2b2dc:	4770      	bx	lr

0002b2de <nrf_gpio_cfg_default>:
{
   2b2de:	b507      	push	{r0, r1, r2, lr}
   2b2e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b2e2:	a801      	add	r0, sp, #4
   2b2e4:	f7f5 fe20 	bl	20f28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b2e8:	9b01      	ldr	r3, [sp, #4]
   2b2ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2b2ee:	2202      	movs	r2, #2
   2b2f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2b2f4:	b003      	add	sp, #12
   2b2f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b2fa <nrf_gpio_pin_set>:
{
   2b2fa:	b507      	push	{r0, r1, r2, lr}
   2b2fc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b2fe:	a801      	add	r0, sp, #4
   2b300:	f7f5 fe12 	bl	20f28 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b304:	9a01      	ldr	r2, [sp, #4]
   2b306:	2301      	movs	r3, #1
   2b308:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b30a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2b30e:	b003      	add	sp, #12
   2b310:	f85d fb04 	ldr.w	pc, [sp], #4

0002b314 <nrf_gpio_pin_clear>:
{
   2b314:	b507      	push	{r0, r1, r2, lr}
   2b316:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b318:	a801      	add	r0, sp, #4
   2b31a:	f7f5 fe05 	bl	20f28 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2b31e:	9a01      	ldr	r2, [sp, #4]
   2b320:	2301      	movs	r3, #1
   2b322:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2b324:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2b328:	b003      	add	sp, #12
   2b32a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b32e <transfer_byte>:
{
   2b32e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2b330:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2b334:	698a      	ldr	r2, [r1, #24]
   2b336:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2b338:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2b33c:	6a0b      	ldr	r3, [r1, #32]
   2b33e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2b340:	bf3e      	ittt	cc
   2b342:	694a      	ldrcc	r2, [r1, #20]
   2b344:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2b348:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2b34a:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2b34c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2b350:	1c53      	adds	r3, r2, #1
   2b352:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2b354:	3202      	adds	r2, #2
    if (p_cb->abort)
   2b356:	b13c      	cbz	r4, 2b368 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2b358:	690c      	ldr	r4, [r1, #16]
   2b35a:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2b35c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2b35e:	bf38      	it	cc
   2b360:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2b362:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2b364:	bf88      	it	hi
   2b366:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2b368:	690d      	ldr	r5, [r1, #16]
   2b36a:	4295      	cmp	r5, r2
   2b36c:	d905      	bls.n	2b37a <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2b36e:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2b370:	5c9b      	ldrb	r3, [r3, r2]
   2b372:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2b376:	2001      	movs	r0, #1
   2b378:	e00a      	b.n	2b390 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2b37a:	698c      	ldr	r4, [r1, #24]
   2b37c:	4294      	cmp	r4, r2
   2b37e:	d901      	bls.n	2b384 <transfer_byte+0x56>
   2b380:	7fcb      	ldrb	r3, [r1, #31]
   2b382:	e7f6      	b.n	2b372 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2b384:	42ab      	cmp	r3, r5
   2b386:	d3f6      	bcc.n	2b376 <transfer_byte+0x48>
   2b388:	42a3      	cmp	r3, r4
   2b38a:	bf2c      	ite	cs
   2b38c:	2000      	movcs	r0, #0
   2b38e:	2001      	movcc	r0, #1
}
   2b390:	b003      	add	sp, #12
   2b392:	bd30      	pop	{r4, r5, pc}

0002b394 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2b394:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2b396:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2b398:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2b39a:	bf9c      	itt	ls
   2b39c:	6880      	ldrls	r0, [r0, #8]
   2b39e:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2b3a0:	3b01      	subs	r3, #1
   2b3a2:	1a98      	subs	r0, r3, r2
}
   2b3a4:	4770      	bx	lr

0002b3a6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2b3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3aa:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2b3ac:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2b3b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   2b3b4:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   2b3b8:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   2b3ba:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2b3be:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2b3c0:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   2b3c2:	d904      	bls.n	2b3ce <_WriteNoCheck+0x28>
   2b3c4:	f000 fe03 	bl	2bfce <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2b3c8:	60e5      	str	r5, [r4, #12]
}
   2b3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b3ce:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2b3d0:	eba5 0508 	sub.w	r5, r5, r8
   2b3d4:	f000 fdfb 	bl	2bfce <memcpy>
   2b3d8:	6860      	ldr	r0, [r4, #4]
   2b3da:	462a      	mov	r2, r5
   2b3dc:	19b9      	adds	r1, r7, r6
   2b3de:	e7f1      	b.n	2b3c4 <_WriteNoCheck+0x1e>

0002b3e0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2b3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2b3e4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2b3e6:	4606      	mov	r6, r0
   2b3e8:	4689      	mov	r9, r1
   2b3ea:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2b3ec:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2b3f0:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2b3f2:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2b3f4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2b3f6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2b3f8:	bf28      	it	cs
   2b3fa:	18e4      	addcs	r4, r4, r3
   2b3fc:	3c01      	subs	r4, #1
   2b3fe:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2b400:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2b402:	42bc      	cmp	r4, r7
   2b404:	bf28      	it	cs
   2b406:	463c      	movcs	r4, r7
   2b408:	4294      	cmp	r4, r2
   2b40a:	bf28      	it	cs
   2b40c:	4614      	movcs	r4, r2
   2b40e:	4649      	mov	r1, r9
   2b410:	4428      	add	r0, r5
   2b412:	4622      	mov	r2, r4
   2b414:	f000 fddb 	bl	2bfce <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2b418:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2b41a:	4425      	add	r5, r4
      WrOff = 0u;
   2b41c:	42ab      	cmp	r3, r5
   2b41e:	bf08      	it	eq
   2b420:	2500      	moveq	r5, #0
  } while (NumBytes);
   2b422:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2b424:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2b426:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2b428:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2b42a:	d1e1      	bne.n	2b3f0 <_WriteBlocking+0x10>
}
   2b42c:	4640      	mov	r0, r8
   2b42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b432 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2b432:	f7f5 bf09 	b.w	21248 <_DoInit>

0002b436 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2b436:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2b438:	f7ff fffb 	bl	2b432 <SEGGER_RTT_Init>

	return 0;
}
   2b43c:	2000      	movs	r0, #0
   2b43e:	bd08      	pop	{r3, pc}

0002b440 <z_device_state_init>:
}
   2b440:	4770      	bx	lr

0002b442 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2b442:	b138      	cbz	r0, 2b454 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2b444:	68c3      	ldr	r3, [r0, #12]
   2b446:	8818      	ldrh	r0, [r3, #0]
   2b448:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2b44c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2b450:	4258      	negs	r0, r3
   2b452:	4158      	adcs	r0, r3
}
   2b454:	4770      	bx	lr

0002b456 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2b456:	f000 bddb 	b.w	2c010 <memset>

0002b45a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b45a:	f000 bdb8 	b.w	2bfce <memcpy>

0002b45e <k_heap_init>:
{
   2b45e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2b460:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2b464:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2b468:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2b46a:	f7fc bba3 	b.w	27bb4 <sys_heap_init>

0002b46e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2b46e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b472:	b085      	sub	sp, #20
   2b474:	4606      	mov	r6, r0
   2b476:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b478:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2b47c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b47e:	f000 fbf5 	bl	2bc6c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2b482:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b486:	4605      	mov	r5, r0
   2b488:	460f      	mov	r7, r1
	__asm__ volatile(
   2b48a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b48e:	f3ef 8411 	mrs	r4, BASEPRI
   2b492:	f383 8812 	msr	BASEPRI_MAX, r3
   2b496:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2b49a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2b49e:	464a      	mov	r2, r9
   2b4a0:	4641      	mov	r1, r8
   2b4a2:	4630      	mov	r0, r6
   2b4a4:	f7fc fb1e 	bl	27ae4 <sys_heap_aligned_alloc>
   2b4a8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2b4aa:	f7f7 fa05 	bl	228b8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2b4ae:	9b03      	ldr	r3, [sp, #12]
   2b4b0:	b13b      	cbz	r3, 2b4c2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2b4b2:	f384 8811 	msr	BASEPRI, r4
   2b4b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2b4ba:	4618      	mov	r0, r3
   2b4bc:	b005      	add	sp, #20
   2b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2b4c2:	1a28      	subs	r0, r5, r0
   2b4c4:	eb67 0101 	sbc.w	r1, r7, r1
   2b4c8:	2801      	cmp	r0, #1
   2b4ca:	f171 0200 	sbcs.w	r2, r1, #0
   2b4ce:	dbf0      	blt.n	2b4b2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2b4d0:	e9cd 0100 	strd	r0, r1, [sp]
   2b4d4:	465a      	mov	r2, fp
   2b4d6:	4621      	mov	r1, r4
   2b4d8:	4650      	mov	r0, sl
   2b4da:	f7f6 fec9 	bl	22270 <z_pend_curr>
	__asm__ volatile(
   2b4de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b4e2:	f3ef 8411 	mrs	r4, BASEPRI
   2b4e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b4ea:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2b4ee:	e7d6      	b.n	2b49e <k_heap_aligned_alloc+0x30>

0002b4f0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2b4f0:	b538      	push	{r3, r4, r5, lr}
   2b4f2:	4604      	mov	r4, r0
   2b4f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b4f8:	f3ef 8511 	mrs	r5, BASEPRI
   2b4fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b500:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2b504:	f7fc fab6 	bl	27a74 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2b508:	f104 000c 	add.w	r0, r4, #12
   2b50c:	f000 fb37 	bl	2bb7e <z_unpend_all>
   2b510:	b130      	cbz	r0, 2b520 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2b512:	4629      	mov	r1, r5
   2b514:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2b518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2b51c:	f7f6 bd54 	b.w	21fc8 <z_reschedule>
	__asm__ volatile(
   2b520:	f385 8811 	msr	BASEPRI, r5
   2b524:	f3bf 8f6f 	isb	sy
}
   2b528:	bd38      	pop	{r3, r4, r5, pc}

0002b52a <k_mem_slab_init>:
{
   2b52a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2b52c:	2400      	movs	r4, #0
   2b52e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b530:	ea41 0402 	orr.w	r4, r1, r2
   2b534:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2b538:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2b53c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b53e:	d10c      	bne.n	2b55a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2b540:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b542:	42a3      	cmp	r3, r4
   2b544:	d103      	bne.n	2b54e <k_mem_slab_init+0x24>
   2b546:	e9c0 0000 	strd	r0, r0, [r0]
}
   2b54a:	2000      	movs	r0, #0
}
   2b54c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2b54e:	6945      	ldr	r5, [r0, #20]
   2b550:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b552:	3401      	adds	r4, #1
		slab->free_list = p;
   2b554:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2b556:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2b558:	e7f3      	b.n	2b542 <k_mem_slab_init+0x18>
		return -EINVAL;
   2b55a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2b55e:	e7f5      	b.n	2b54c <k_mem_slab_init+0x22>

0002b560 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b562:	4604      	mov	r4, r0
   2b564:	460d      	mov	r5, r1
	__asm__ volatile(
   2b566:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b56a:	f3ef 8611 	mrs	r6, BASEPRI
   2b56e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b572:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2b576:	6947      	ldr	r7, [r0, #20]
   2b578:	b977      	cbnz	r7, 2b598 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2b57a:	f000 fae8 	bl	2bb4e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2b57e:	b158      	cbz	r0, 2b598 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2b580:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2b582:	6142      	str	r2, [r0, #20]
   2b584:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2b586:	f000 fa71 	bl	2ba6c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2b58a:	4631      	mov	r1, r6
   2b58c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2b590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2b594:	f7f6 bd18 	b.w	21fc8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2b598:	682b      	ldr	r3, [r5, #0]
   2b59a:	6962      	ldr	r2, [r4, #20]
   2b59c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2b59e:	682b      	ldr	r3, [r5, #0]
   2b5a0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2b5a2:	69a3      	ldr	r3, [r4, #24]
   2b5a4:	3b01      	subs	r3, #1
   2b5a6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2b5a8:	f386 8811 	msr	BASEPRI, r6
   2b5ac:	f3bf 8f6f 	isb	sy
}
   2b5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b5b2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b5b2:	f3ef 8005 	mrs	r0, IPSR
}
   2b5b6:	3800      	subs	r0, #0
   2b5b8:	bf18      	it	ne
   2b5ba:	2001      	movne	r0, #1
   2b5bc:	4770      	bx	lr

0002b5be <z_impl_k_thread_name_set>:
}
   2b5be:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b5c2:	4770      	bx	lr

0002b5c4 <k_thread_name_get>:
}
   2b5c4:	2000      	movs	r0, #0
   2b5c6:	4770      	bx	lr

0002b5c8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2b5c8:	f7f6 bdf6 	b.w	221b8 <z_sched_start>

0002b5cc <z_pm_save_idle_exit>:
{
   2b5cc:	b508      	push	{r3, lr}
	pm_system_resume();
   2b5ce:	f7e9 f801 	bl	145d4 <pm_system_resume>
}
   2b5d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2b5d6:	f7ff bc97 	b.w	2af08 <sys_clock_idle_exit>

0002b5da <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2b5da:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2b5de:	428b      	cmp	r3, r1
   2b5e0:	d001      	beq.n	2b5e6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2b5e2:	f7f6 be59 	b.w	22298 <z_set_prio>
}
   2b5e6:	2000      	movs	r0, #0
   2b5e8:	4770      	bx	lr

0002b5ea <z_impl_k_mutex_init>:
{
   2b5ea:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b5ec:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2b5ee:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2b5f2:	e9c3 3300 	strd	r3, r3, [r3]
}
   2b5f6:	4770      	bx	lr

0002b5f8 <queue_insert>:
{
   2b5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b5fc:	4699      	mov	r9, r3
   2b5fe:	4604      	mov	r4, r0
   2b600:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2b604:	460d      	mov	r5, r1
   2b606:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b608:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2b60c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b610:	f3ef 8711 	mrs	r7, BASEPRI
   2b614:	f382 8812 	msr	BASEPRI_MAX, r2
   2b618:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2b61c:	b103      	cbz	r3, 2b620 <queue_insert+0x28>
	return list->tail;
   2b61e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2b620:	4630      	mov	r0, r6
   2b622:	f000 fa94 	bl	2bb4e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2b626:	b158      	cbz	r0, 2b640 <queue_insert+0x48>
   2b628:	2400      	movs	r4, #0
   2b62a:	67c4      	str	r4, [r0, #124]	; 0x7c
   2b62c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2b630:	f000 fa1c 	bl	2ba6c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2b634:	4630      	mov	r0, r6
   2b636:	4639      	mov	r1, r7
   2b638:	f7f6 fcc6 	bl	21fc8 <z_reschedule>
	return 0;
   2b63c:	2000      	movs	r0, #0
   2b63e:	e00c      	b.n	2b65a <queue_insert+0x62>
	if (alloc) {
   2b640:	f1b9 0f00 	cmp.w	r9, #0
   2b644:	d01b      	beq.n	2b67e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2b646:	2108      	movs	r1, #8
   2b648:	f7f7 fa90 	bl	22b6c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2b64c:	b938      	cbnz	r0, 2b65e <queue_insert+0x66>
	__asm__ volatile(
   2b64e:	f387 8811 	msr	BASEPRI, r7
   2b652:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2b656:	f06f 000b 	mvn.w	r0, #11
}
   2b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2b65e:	2301      	movs	r3, #1
		anode->data = data;
   2b660:	f8c0 8004 	str.w	r8, [r0, #4]
   2b664:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b666:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b668:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2b66c:	b95d      	cbnz	r5, 2b686 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b66e:	6823      	ldr	r3, [r4, #0]
   2b670:	4313      	orrs	r3, r2
   2b672:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b674:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2b676:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b678:	b973      	cbnz	r3, 2b698 <queue_insert+0xa0>
	list->tail = node;
   2b67a:	6060      	str	r0, [r4, #4]
}
   2b67c:	e00c      	b.n	2b698 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2b67e:	f8c8 9000 	str.w	r9, [r8]
}
   2b682:	4640      	mov	r0, r8
   2b684:	e7ef      	b.n	2b666 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b686:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2b688:	f033 0303 	bics.w	r3, r3, #3
   2b68c:	d110      	bne.n	2b6b0 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b68e:	6002      	str	r2, [r0, #0]
	return list->tail;
   2b690:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2b692:	b93a      	cbnz	r2, 2b6a4 <queue_insert+0xac>
	list->head = node;
   2b694:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b698:	2104      	movs	r1, #4
   2b69a:	f104 0010 	add.w	r0, r4, #16
   2b69e:	f000 fc68 	bl	2bf72 <z_handle_obj_poll_events>
   2b6a2:	e7c7      	b.n	2b634 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b6a4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b6a6:	f003 0303 	and.w	r3, r3, #3
   2b6aa:	4303      	orrs	r3, r0
   2b6ac:	6013      	str	r3, [r2, #0]
   2b6ae:	e7e4      	b.n	2b67a <queue_insert+0x82>
   2b6b0:	4313      	orrs	r3, r2
   2b6b2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b6b4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b6b6:	f003 0303 	and.w	r3, r3, #3
   2b6ba:	4303      	orrs	r3, r0
   2b6bc:	602b      	str	r3, [r5, #0]
}
   2b6be:	e7eb      	b.n	2b698 <queue_insert+0xa0>

0002b6c0 <z_queue_node_peek>:
{
   2b6c0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b6c2:	4604      	mov	r4, r0
   2b6c4:	b130      	cbz	r0, 2b6d4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b6c6:	6802      	ldr	r2, [r0, #0]
   2b6c8:	0793      	lsls	r3, r2, #30
   2b6ca:	d003      	beq.n	2b6d4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2b6cc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b6ce:	b109      	cbz	r1, 2b6d4 <z_queue_node_peek+0x14>
			k_free(anode);
   2b6d0:	f000 fc65 	bl	2bf9e <k_free>
}
   2b6d4:	4620      	mov	r0, r4
   2b6d6:	bd10      	pop	{r4, pc}

0002b6d8 <z_impl_k_queue_init>:
	list->head = NULL;
   2b6d8:	2300      	movs	r3, #0
	list->tail = NULL;
   2b6da:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2b6de:	f100 0308 	add.w	r3, r0, #8
   2b6e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2b6e6:	f100 0310 	add.w	r3, r0, #16
   2b6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2b6ee:	4770      	bx	lr

0002b6f0 <k_queue_append>:
{
   2b6f0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2b6f2:	2301      	movs	r3, #1
   2b6f4:	9300      	str	r3, [sp, #0]
   2b6f6:	2300      	movs	r3, #0
{
   2b6f8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2b6fa:	4619      	mov	r1, r3
   2b6fc:	f7ff ff7c 	bl	2b5f8 <queue_insert>
}
   2b700:	b003      	add	sp, #12
   2b702:	f85d fb04 	ldr.w	pc, [sp], #4

0002b706 <k_queue_prepend>:
{
   2b706:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2b708:	2300      	movs	r3, #0
{
   2b70a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2b70c:	9300      	str	r3, [sp, #0]
   2b70e:	4619      	mov	r1, r3
   2b710:	f7ff ff72 	bl	2b5f8 <queue_insert>
}
   2b714:	b003      	add	sp, #12
   2b716:	f85d fb04 	ldr.w	pc, [sp], #4

0002b71a <k_queue_append_list>:
{
   2b71a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b71e:	4605      	mov	r5, r0
   2b720:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2b722:	460c      	mov	r4, r1
   2b724:	b391      	cbz	r1, 2b78c <k_queue_append_list+0x72>
   2b726:	b38a      	cbz	r2, 2b78c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b728:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2b72c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b730:	f3ef 8811 	mrs	r8, BASEPRI
   2b734:	f383 8812 	msr	BASEPRI_MAX, r3
   2b738:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2b73c:	4638      	mov	r0, r7
   2b73e:	f000 fa06 	bl	2bb4e <z_unpend_first_thread>
   2b742:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2b746:	b920      	cbnz	r0, 2b752 <k_queue_append_list+0x38>
	return list->tail;
   2b748:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b74a:	b9ca      	cbnz	r2, 2b780 <k_queue_append_list+0x66>
	list->head = node;
   2b74c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2b74e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b750:	e00a      	b.n	2b768 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2b752:	6144      	str	r4, [r0, #20]
   2b754:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2b758:	f000 f988 	bl	2ba6c <z_ready_thread>
		head = *(void **)head;
   2b75c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2b75e:	4638      	mov	r0, r7
   2b760:	f000 f9f5 	bl	2bb4e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2b764:	2c00      	cmp	r4, #0
   2b766:	d1ee      	bne.n	2b746 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b768:	2104      	movs	r1, #4
   2b76a:	f105 0010 	add.w	r0, r5, #16
   2b76e:	f000 fc00 	bl	2bf72 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2b772:	4638      	mov	r0, r7
   2b774:	4641      	mov	r1, r8
   2b776:	f7f6 fc27 	bl	21fc8 <z_reschedule>
	return 0;
   2b77a:	2000      	movs	r0, #0
}
   2b77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b780:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b782:	f003 0303 	and.w	r3, r3, #3
   2b786:	431c      	orrs	r4, r3
   2b788:	6014      	str	r4, [r2, #0]
}
   2b78a:	e7e0      	b.n	2b74e <k_queue_append_list+0x34>
		return -EINVAL;
   2b78c:	f06f 0015 	mvn.w	r0, #21
   2b790:	e7f4      	b.n	2b77c <k_queue_append_list+0x62>

0002b792 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2b792:	b15a      	cbz	r2, 2b7ac <z_impl_k_sem_init+0x1a>
   2b794:	428a      	cmp	r2, r1
   2b796:	d309      	bcc.n	2b7ac <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b798:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b79c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2b7a0:	e9c0 0000 	strd	r0, r0, [r0]
   2b7a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b7a8:	2000      	movs	r0, #0
   2b7aa:	4770      	bx	lr
		return -EINVAL;
   2b7ac:	f06f 0015 	mvn.w	r0, #21
}
   2b7b0:	4770      	bx	lr

0002b7b2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2b7b2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2b7b4:	2301      	movs	r3, #1
   2b7b6:	408b      	lsls	r3, r1
   2b7b8:	ea22 0303 	bic.w	r3, r2, r3
   2b7bc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2b7be:	fa22 f001 	lsr.w	r0, r2, r1
}
   2b7c2:	f000 0001 	and.w	r0, r0, #1
   2b7c6:	4770      	bx	lr

0002b7c8 <unschedule_locked>:
{
   2b7c8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b7ca:	2103      	movs	r1, #3
{
   2b7cc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b7ce:	300c      	adds	r0, #12
   2b7d0:	f7ff ffef 	bl	2b7b2 <flag_test_and_clear>
   2b7d4:	4604      	mov	r4, r0
   2b7d6:	b118      	cbz	r0, 2b7e0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2b7d8:	f105 0010 	add.w	r0, r5, #16
   2b7dc:	f000 f9fc 	bl	2bbd8 <z_abort_timeout>
}
   2b7e0:	4620      	mov	r0, r4
   2b7e2:	bd38      	pop	{r3, r4, r5, pc}

0002b7e4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2b7e4:	b120      	cbz	r0, 2b7f0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2b7e6:	2200      	movs	r2, #0
   2b7e8:	4611      	mov	r1, r2
   2b7ea:	3088      	adds	r0, #136	; 0x88
   2b7ec:	f000 b9d7 	b.w	2bb9e <z_sched_wake>
}
   2b7f0:	4770      	bx	lr

0002b7f2 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2b7f2:	68c3      	ldr	r3, [r0, #12]
{
   2b7f4:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b7f6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2b7fa:	079b      	lsls	r3, r3, #30
{
   2b7fc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b7fe:	d416      	bmi.n	2b82e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2b800:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2b802:	2102      	movs	r1, #2
   2b804:	300c      	adds	r0, #12
   2b806:	f7ff ffd4 	bl	2b7b2 <flag_test_and_clear>
   2b80a:	b180      	cbz	r0, 2b82e <cancel_async_locked+0x3c>
	return list->head;
   2b80c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b810:	b16a      	cbz	r2, 2b82e <cancel_async_locked+0x3c>
   2b812:	4294      	cmp	r4, r2
   2b814:	d11b      	bne.n	2b84e <cancel_async_locked+0x5c>
	return node->next;
   2b816:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2b818:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2b81c:	b98d      	cbnz	r5, 2b842 <cancel_async_locked+0x50>
   2b81e:	428c      	cmp	r4, r1
	list->head = node;
   2b820:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2b824:	d101      	bne.n	2b82a <cancel_async_locked+0x38>
	list->tail = node;
   2b826:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2b82a:	2300      	movs	r3, #0
   2b82c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2b82e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2b830:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2b834:	bf1e      	ittt	ne
   2b836:	f043 0302 	orrne.w	r3, r3, #2
   2b83a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2b83c:	f003 000f 	andne.w	r0, r3, #15
}
   2b840:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2b842:	428c      	cmp	r4, r1
	parent->next = child;
   2b844:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2b846:	bf08      	it	eq
   2b848:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2b84c:	e7ed      	b.n	2b82a <cancel_async_locked+0x38>
	return node->next;
   2b84e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b850:	6812      	ldr	r2, [r2, #0]
   2b852:	e7dd      	b.n	2b810 <cancel_async_locked+0x1e>

0002b854 <work_timeout>:
{
   2b854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b856:	4604      	mov	r4, r0
   2b858:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b85c:	f3ef 8511 	mrs	r5, BASEPRI
   2b860:	f383 8812 	msr	BASEPRI_MAX, r3
   2b864:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2b868:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b86a:	f1a0 0610 	sub.w	r6, r0, #16
   2b86e:	2103      	movs	r1, #3
   2b870:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2b872:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2b874:	f7ff ff9d 	bl	2b7b2 <flag_test_and_clear>
   2b878:	b128      	cbz	r0, 2b886 <work_timeout+0x32>
		queue = dw->queue;
   2b87a:	69a3      	ldr	r3, [r4, #24]
   2b87c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2b87e:	a901      	add	r1, sp, #4
   2b880:	4630      	mov	r0, r6
   2b882:	f7f6 fa69 	bl	21d58 <submit_to_queue_locked>
	__asm__ volatile(
   2b886:	f385 8811 	msr	BASEPRI, r5
   2b88a:	f3bf 8f6f 	isb	sy
}
   2b88e:	b002      	add	sp, #8
   2b890:	bd70      	pop	{r4, r5, r6, pc}

0002b892 <k_work_init>:
{
   2b892:	b538      	push	{r3, r4, r5, lr}
   2b894:	4604      	mov	r4, r0
   2b896:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b898:	2210      	movs	r2, #16
   2b89a:	2100      	movs	r1, #0
   2b89c:	f000 fbb8 	bl	2c010 <memset>
   2b8a0:	6065      	str	r5, [r4, #4]
}
   2b8a2:	bd38      	pop	{r3, r4, r5, pc}

0002b8a4 <k_work_busy_get>:
	__asm__ volatile(
   2b8a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b8a8:	f3ef 8311 	mrs	r3, BASEPRI
   2b8ac:	f382 8812 	msr	BASEPRI_MAX, r2
   2b8b0:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2b8b4:	68c0      	ldr	r0, [r0, #12]
   2b8b6:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2b8ba:	f383 8811 	msr	BASEPRI, r3
   2b8be:	f3bf 8f6f 	isb	sy
}
   2b8c2:	4770      	bx	lr

0002b8c4 <z_work_submit_to_queue>:
{
   2b8c4:	b513      	push	{r0, r1, r4, lr}
   2b8c6:	9001      	str	r0, [sp, #4]
   2b8c8:	4608      	mov	r0, r1
	__asm__ volatile(
   2b8ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b8ce:	f3ef 8411 	mrs	r4, BASEPRI
   2b8d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b8d6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2b8da:	a901      	add	r1, sp, #4
   2b8dc:	f7f6 fa3c 	bl	21d58 <submit_to_queue_locked>
	__asm__ volatile(
   2b8e0:	f384 8811 	msr	BASEPRI, r4
   2b8e4:	f3bf 8f6f 	isb	sy
}
   2b8e8:	b002      	add	sp, #8
   2b8ea:	bd10      	pop	{r4, pc}

0002b8ec <k_work_submit_to_queue>:
{
   2b8ec:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2b8ee:	f7ff ffe9 	bl	2b8c4 <z_work_submit_to_queue>
	if (ret > 0) {
   2b8f2:	1e04      	subs	r4, r0, #0
   2b8f4:	dd09      	ble.n	2b90a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2b8f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b8fa:	f3ef 8011 	mrs	r0, BASEPRI
   2b8fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2b902:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b906:	f000 f895 	bl	2ba34 <z_reschedule_irqlock>
}
   2b90a:	4620      	mov	r0, r4
   2b90c:	bd10      	pop	{r4, pc}

0002b90e <k_work_queue_init>:
{
   2b90e:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2b910:	22a0      	movs	r2, #160	; 0xa0
   2b912:	2100      	movs	r1, #0
   2b914:	f000 fb7c 	bl	2c010 <memset>
}
   2b918:	bd08      	pop	{r3, pc}

0002b91a <k_work_init_delayable>:
{
   2b91a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2b91c:	2230      	movs	r2, #48	; 0x30
{
   2b91e:	4604      	mov	r4, r0
   2b920:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2b922:	2100      	movs	r1, #0
   2b924:	f000 fb74 	bl	2c010 <memset>
   2b928:	f44f 7380 	mov.w	r3, #256	; 0x100
   2b92c:	6065      	str	r5, [r4, #4]
   2b92e:	60e3      	str	r3, [r4, #12]
}
   2b930:	bd38      	pop	{r3, r4, r5, pc}

0002b932 <k_work_delayable_busy_get>:
   2b932:	f7ff bfb7 	b.w	2b8a4 <k_work_busy_get>

0002b936 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2b936:	b538      	push	{r3, r4, r5, lr}
   2b938:	4604      	mov	r4, r0
   2b93a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b93e:	f3ef 8511 	mrs	r5, BASEPRI
   2b942:	f383 8812 	msr	BASEPRI_MAX, r3
   2b946:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2b94a:	f7ff ff3d 	bl	2b7c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2b94e:	4620      	mov	r0, r4
   2b950:	f7ff ff4f 	bl	2b7f2 <cancel_async_locked>
	__asm__ volatile(
   2b954:	f385 8811 	msr	BASEPRI, r5
   2b958:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2b95c:	bd38      	pop	{r3, r4, r5, pc}

0002b95e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2b95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b960:	4604      	mov	r4, r0
   2b962:	460d      	mov	r5, r1
	__asm__ volatile(
   2b964:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b968:	f3ef 8711 	mrs	r7, BASEPRI
   2b96c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b970:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2b974:	68c3      	ldr	r3, [r0, #12]
   2b976:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2b97a:	2b00      	cmp	r3, #0
   2b97c:	bf14      	ite	ne
   2b97e:	2601      	movne	r6, #1
   2b980:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2b982:	d009      	beq.n	2b998 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2b984:	f7ff ff20 	bl	2b7c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2b988:	4620      	mov	r0, r4
   2b98a:	f7ff ff32 	bl	2b7f2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2b98e:	4629      	mov	r1, r5
   2b990:	4620      	mov	r0, r4
   2b992:	f7f6 f9c3 	bl	21d1c <cancel_sync_locked>
   2b996:	4603      	mov	r3, r0
	__asm__ volatile(
   2b998:	f387 8811 	msr	BASEPRI, r7
   2b99c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2b9a0:	b13b      	cbz	r3, 2b9b2 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2b9a2:	f04f 32ff 	mov.w	r2, #4294967295
   2b9a6:	f04f 33ff 	mov.w	r3, #4294967295
   2b9aa:	f105 0008 	add.w	r0, r5, #8
   2b9ae:	f7f6 f8bb 	bl	21b28 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2b9b2:	4630      	mov	r0, r6
   2b9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b9b6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2b9b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b9ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b9bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b9be:	2300      	movs	r3, #0
	node->prev = NULL;
   2b9c0:	e9c0 3300 	strd	r3, r3, [r0]
}
   2b9c4:	4770      	bx	lr

0002b9c6 <unpend_thread_no_timeout>:
{
   2b9c6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2b9c8:	f7ff fff5 	bl	2b9b6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b9cc:	7b43      	ldrb	r3, [r0, #13]
   2b9ce:	f023 0302 	bic.w	r3, r3, #2
   2b9d2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2b9d4:	2300      	movs	r3, #0
   2b9d6:	6083      	str	r3, [r0, #8]
}
   2b9d8:	bd08      	pop	{r3, pc}

0002b9da <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2b9da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2b9de:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2b9e2:	4283      	cmp	r3, r0
		return b2 - b1;
   2b9e4:	bf14      	ite	ne
   2b9e6:	1ac0      	subne	r0, r0, r3
	return 0;
   2b9e8:	2000      	moveq	r0, #0
}
   2b9ea:	4770      	bx	lr

0002b9ec <z_unpend_thread_no_timeout>:
{
   2b9ec:	b508      	push	{r3, lr}
	__asm__ volatile(
   2b9ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b9f2:	f3ef 8111 	mrs	r1, BASEPRI
   2b9f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b9fa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b9fe:	f7ff ffe2 	bl	2b9c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2ba02:	f381 8811 	msr	BASEPRI, r1
   2ba06:	f3bf 8f6f 	isb	sy
}
   2ba0a:	bd08      	pop	{r3, pc}

0002ba0c <z_unpend_thread>:
{
   2ba0c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ba0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ba12:	f3ef 8411 	mrs	r4, BASEPRI
   2ba16:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba1a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2ba1e:	f7ff ffd2 	bl	2b9c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2ba22:	f384 8811 	msr	BASEPRI, r4
   2ba26:	f3bf 8f6f 	isb	sy
}
   2ba2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ba2e:	3018      	adds	r0, #24
   2ba30:	f000 b8d2 	b.w	2bbd8 <z_abort_timeout>

0002ba34 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ba34:	4603      	mov	r3, r0
   2ba36:	b920      	cbnz	r0, 2ba42 <z_reschedule_irqlock+0xe>
   2ba38:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2ba3c:	b90a      	cbnz	r2, 2ba42 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2ba3e:	f7e9 b8f5 	b.w	14c2c <arch_swap>
   2ba42:	f383 8811 	msr	BASEPRI, r3
   2ba46:	f3bf 8f6f 	isb	sy
}
   2ba4a:	4770      	bx	lr

0002ba4c <z_reschedule_unlocked>:
	__asm__ volatile(
   2ba4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ba50:	f3ef 8011 	mrs	r0, BASEPRI
   2ba54:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba58:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ba5c:	f7ff bfea 	b.w	2ba34 <z_reschedule_irqlock>

0002ba60 <z_priq_dumb_best>:
{
   2ba60:	4603      	mov	r3, r0
	return list->head == list;
   2ba62:	6800      	ldr	r0, [r0, #0]
}
   2ba64:	4283      	cmp	r3, r0
   2ba66:	bf08      	it	eq
   2ba68:	2000      	moveq	r0, #0
   2ba6a:	4770      	bx	lr

0002ba6c <z_ready_thread>:
{
   2ba6c:	b510      	push	{r4, lr}
   2ba6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ba72:	f3ef 8411 	mrs	r4, BASEPRI
   2ba76:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba7a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2ba7e:	f7f6 fb65 	bl	2214c <ready_thread>
	__asm__ volatile(
   2ba82:	f384 8811 	msr	BASEPRI, r4
   2ba86:	f3bf 8f6f 	isb	sy
}
   2ba8a:	bd10      	pop	{r4, pc}

0002ba8c <z_thread_timeout>:
{
   2ba8c:	b510      	push	{r4, lr}
   2ba8e:	4601      	mov	r1, r0
	__asm__ volatile(
   2ba90:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ba94:	f3ef 8411 	mrs	r4, BASEPRI
   2ba98:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba9c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2baa0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2baa4:	f013 0f28 	tst.w	r3, #40	; 0x28
   2baa8:	d10d      	bne.n	2bac6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2baaa:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2baae:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2bab0:	b10b      	cbz	r3, 2bab6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2bab2:	f7ff ff88 	bl	2b9c6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2bab6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2baba:	f023 0314 	bic.w	r3, r3, #20
   2babe:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2bac2:	f7f6 fb43 	bl	2214c <ready_thread>
	__asm__ volatile(
   2bac6:	f384 8811 	msr	BASEPRI, r4
   2baca:	f3bf 8f6f 	isb	sy
}
   2bace:	bd10      	pop	{r4, pc}

0002bad0 <add_to_waitq_locked>:
{
   2bad0:	b538      	push	{r3, r4, r5, lr}
   2bad2:	4604      	mov	r4, r0
   2bad4:	460d      	mov	r5, r1
	unready_thread(thread);
   2bad6:	f7f6 fb8d 	bl	221f4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2bada:	7b63      	ldrb	r3, [r4, #13]
   2badc:	f043 0302 	orr.w	r3, r3, #2
   2bae0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2bae2:	b195      	cbz	r5, 2bb0a <add_to_waitq_locked+0x3a>
   2bae4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2bae6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bae8:	429d      	cmp	r5, r3
   2baea:	d015      	beq.n	2bb18 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2baec:	b1a3      	cbz	r3, 2bb18 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2baee:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2baf2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2baf6:	4291      	cmp	r1, r2
   2baf8:	d008      	beq.n	2bb0c <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2bafa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2bafc:	2a00      	cmp	r2, #0
   2bafe:	dd05      	ble.n	2bb0c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2bb00:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2bb02:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2bb06:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2bb08:	605c      	str	r4, [r3, #4]
}
   2bb0a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2bb0c:	686a      	ldr	r2, [r5, #4]
   2bb0e:	4293      	cmp	r3, r2
   2bb10:	d002      	beq.n	2bb18 <add_to_waitq_locked+0x48>
   2bb12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bb14:	2b00      	cmp	r3, #0
   2bb16:	d1ec      	bne.n	2baf2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2bb18:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2bb1a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2bb1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2bb20:	606c      	str	r4, [r5, #4]
}
   2bb22:	e7f2      	b.n	2bb0a <add_to_waitq_locked+0x3a>

0002bb24 <z_unpend1_no_timeout>:
{
   2bb24:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bb26:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bb2a:	f3ef 8411 	mrs	r4, BASEPRI
   2bb2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb32:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2bb36:	f7ff ff93 	bl	2ba60 <z_priq_dumb_best>
		if (thread != NULL) {
   2bb3a:	4601      	mov	r1, r0
   2bb3c:	b108      	cbz	r0, 2bb42 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2bb3e:	f7ff ff42 	bl	2b9c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2bb42:	f384 8811 	msr	BASEPRI, r4
   2bb46:	f3bf 8f6f 	isb	sy
}
   2bb4a:	4608      	mov	r0, r1
   2bb4c:	bd10      	pop	{r4, pc}

0002bb4e <z_unpend_first_thread>:
{
   2bb4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2bb50:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bb54:	f3ef 8511 	mrs	r5, BASEPRI
   2bb58:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb5c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2bb60:	f7ff ff7e 	bl	2ba60 <z_priq_dumb_best>
		if (thread != NULL) {
   2bb64:	4604      	mov	r4, r0
   2bb66:	b120      	cbz	r0, 2bb72 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2bb68:	f7ff ff2d 	bl	2b9c6 <unpend_thread_no_timeout>
   2bb6c:	3018      	adds	r0, #24
   2bb6e:	f000 f833 	bl	2bbd8 <z_abort_timeout>
	__asm__ volatile(
   2bb72:	f385 8811 	msr	BASEPRI, r5
   2bb76:	f3bf 8f6f 	isb	sy
}
   2bb7a:	4620      	mov	r0, r4
   2bb7c:	bd38      	pop	{r3, r4, r5, pc}

0002bb7e <z_unpend_all>:
{
   2bb7e:	b538      	push	{r3, r4, r5, lr}
   2bb80:	4605      	mov	r5, r0
	int need_sched = 0;
   2bb82:	2000      	movs	r0, #0
	return list->head == list;
   2bb84:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bb86:	42a5      	cmp	r5, r4
   2bb88:	d000      	beq.n	2bb8c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2bb8a:	b904      	cbnz	r4, 2bb8e <z_unpend_all+0x10>
}
   2bb8c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2bb8e:	4620      	mov	r0, r4
   2bb90:	f7ff ff3c 	bl	2ba0c <z_unpend_thread>
		z_ready_thread(thread);
   2bb94:	4620      	mov	r0, r4
   2bb96:	f7ff ff69 	bl	2ba6c <z_ready_thread>
		need_sched = 1;
   2bb9a:	2001      	movs	r0, #1
   2bb9c:	e7f2      	b.n	2bb84 <z_unpend_all+0x6>

0002bb9e <z_sched_wake>:
{
   2bb9e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2bba0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bba4:	f3ef 8511 	mrs	r5, BASEPRI
   2bba8:	f383 8812 	msr	BASEPRI_MAX, r3
   2bbac:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2bbb0:	f7ff ff56 	bl	2ba60 <z_priq_dumb_best>
		if (thread != NULL) {
   2bbb4:	4604      	mov	r4, r0
   2bbb6:	b150      	cbz	r0, 2bbce <z_sched_wake+0x30>
   2bbb8:	67c1      	str	r1, [r0, #124]	; 0x7c
   2bbba:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2bbbc:	f7ff ff03 	bl	2b9c6 <unpend_thread_no_timeout>
   2bbc0:	3018      	adds	r0, #24
   2bbc2:	f000 f809 	bl	2bbd8 <z_abort_timeout>
			ready_thread(thread);
   2bbc6:	4620      	mov	r0, r4
   2bbc8:	f7f6 fac0 	bl	2214c <ready_thread>
			ret = true;
   2bbcc:	2001      	movs	r0, #1
	__asm__ volatile(
   2bbce:	f385 8811 	msr	BASEPRI, r5
   2bbd2:	f3bf 8f6f 	isb	sy
}
   2bbd6:	bd38      	pop	{r3, r4, r5, pc}

0002bbd8 <z_abort_timeout>:
{
   2bbd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bbda:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bbde:	f3ef 8411 	mrs	r4, BASEPRI
   2bbe2:	f382 8812 	msr	BASEPRI_MAX, r2
   2bbe6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2bbea:	6803      	ldr	r3, [r0, #0]
   2bbec:	b13b      	cbz	r3, 2bbfe <z_abort_timeout+0x26>
			remove_timeout(to);
   2bbee:	f7f6 fd73 	bl	226d8 <remove_timeout>
			ret = 0;
   2bbf2:	2000      	movs	r0, #0
	__asm__ volatile(
   2bbf4:	f384 8811 	msr	BASEPRI, r4
   2bbf8:	f3bf 8f6f 	isb	sy
}
   2bbfc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2bbfe:	f06f 0015 	mvn.w	r0, #21
   2bc02:	e7f7      	b.n	2bbf4 <z_abort_timeout+0x1c>

0002bc04 <z_get_next_timeout_expiry>:
{
   2bc04:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bc06:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bc0a:	f3ef 8411 	mrs	r4, BASEPRI
   2bc0e:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc12:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2bc16:	f7f6 fd39 	bl	2268c <next_timeout>
	__asm__ volatile(
   2bc1a:	f384 8811 	msr	BASEPRI, r4
   2bc1e:	f3bf 8f6f 	isb	sy
}
   2bc22:	bd10      	pop	{r4, pc}

0002bc24 <z_set_timeout_expiry>:
{
   2bc24:	b570      	push	{r4, r5, r6, lr}
   2bc26:	4604      	mov	r4, r0
   2bc28:	460d      	mov	r5, r1
	__asm__ volatile(
   2bc2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bc2e:	f3ef 8611 	mrs	r6, BASEPRI
   2bc32:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc36:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2bc3a:	f7f6 fd27 	bl	2268c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2bc3e:	2801      	cmp	r0, #1
   2bc40:	dd05      	ble.n	2bc4e <z_set_timeout_expiry+0x2a>
   2bc42:	42a0      	cmp	r0, r4
   2bc44:	db03      	blt.n	2bc4e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2bc46:	4629      	mov	r1, r5
   2bc48:	4620      	mov	r0, r4
   2bc4a:	f7f3 fba5 	bl	1f398 <sys_clock_set_timeout>
	__asm__ volatile(
   2bc4e:	f386 8811 	msr	BASEPRI, r6
   2bc52:	f3bf 8f6f 	isb	sy
}
   2bc56:	bd70      	pop	{r4, r5, r6, pc}

0002bc58 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bc58:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bc5a:	f7f6 fe2d 	bl	228b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bc5e:	bd08      	pop	{r3, pc}

0002bc60 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bc60:	f7f6 be2a 	b.w	228b8 <sys_clock_tick_get>

0002bc64 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2bc64:	b108      	cbz	r0, 2bc6a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2bc66:	f7e9 bd33 	b.w	156d0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2bc6a:	4770      	bx	lr

0002bc6c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bc6c:	f1b1 3fff 	cmp.w	r1, #4294967295
   2bc70:	bf08      	it	eq
   2bc72:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2bc76:	b538      	push	{r3, r4, r5, lr}
   2bc78:	4605      	mov	r5, r0
   2bc7a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bc7c:	d01d      	beq.n	2bcba <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bc7e:	ea51 0300 	orrs.w	r3, r1, r0
   2bc82:	d103      	bne.n	2bc8c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2bc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bc88:	f7f6 be16 	b.w	228b8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bc8c:	f06f 0301 	mvn.w	r3, #1
   2bc90:	1a18      	subs	r0, r3, r0
   2bc92:	f04f 33ff 	mov.w	r3, #4294967295
   2bc96:	eb63 0101 	sbc.w	r1, r3, r1
   2bc9a:	2900      	cmp	r1, #0
   2bc9c:	da0c      	bge.n	2bcb8 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2bc9e:	f7f6 fe0b 	bl	228b8 <sys_clock_tick_get>
   2bca2:	2d01      	cmp	r5, #1
   2bca4:	4622      	mov	r2, r4
   2bca6:	f174 0400 	sbcs.w	r4, r4, #0
   2bcaa:	462b      	mov	r3, r5
   2bcac:	bfbc      	itt	lt
   2bcae:	2301      	movlt	r3, #1
   2bcb0:	2200      	movlt	r2, #0
   2bcb2:	1818      	adds	r0, r3, r0
   2bcb4:	eb41 0102 	adc.w	r1, r1, r2
}
   2bcb8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2bcba:	f04f 30ff 	mov.w	r0, #4294967295
   2bcbe:	4601      	mov	r1, r0
   2bcc0:	e7fa      	b.n	2bcb8 <sys_clock_timeout_end_calc+0x4c>

0002bcc2 <k_timer_init>:
	timer->status = 0U;
   2bcc2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2bcc4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2bcc8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2bccc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2bcd0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2bcd4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2bcd6:	6343      	str	r3, [r0, #52]	; 0x34
}
   2bcd8:	4770      	bx	lr

0002bcda <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bcda:	b510      	push	{r4, lr}
   2bcdc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2bcde:	f7ff ff7b 	bl	2bbd8 <z_abort_timeout>

	if (inactive) {
   2bce2:	b9b0      	cbnz	r0, 2bd12 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bce6:	b10b      	cbz	r3, 2bcec <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bce8:	4620      	mov	r0, r4
   2bcea:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bcec:	f104 0018 	add.w	r0, r4, #24
   2bcf0:	f7ff ff18 	bl	2bb24 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bcf4:	b168      	cbz	r0, 2bd12 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bcf6:	f7ff feb9 	bl	2ba6c <z_ready_thread>
	__asm__ volatile(
   2bcfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bcfe:	f3ef 8011 	mrs	r0, BASEPRI
   2bd02:	f383 8812 	msr	BASEPRI_MAX, r3
   2bd06:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bd0e:	f7ff be91 	b.w	2ba34 <z_reschedule_irqlock>
   2bd12:	bd10      	pop	{r4, pc}

0002bd14 <add_event>:
{
   2bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd16:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bd18:	e9d0 1300 	ldrd	r1, r3, [r0]
   2bd1c:	4288      	cmp	r0, r1
   2bd1e:	4604      	mov	r4, r0
   2bd20:	d00d      	beq.n	2bd3e <add_event+0x2a>
	if ((pending == NULL) ||
   2bd22:	b163      	cbz	r3, 2bd3e <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bd24:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bd26:	b100      	cbz	r0, 2bd2a <add_event+0x16>
   2bd28:	3860      	subs	r0, #96	; 0x60
   2bd2a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bd2e:	4639      	mov	r1, r7
   2bd30:	f7ff fe53 	bl	2b9da <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2bd34:	2800      	cmp	r0, #0
   2bd36:	dc02      	bgt.n	2bd3e <add_event+0x2a>
	return list->head == list;
   2bd38:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bd3a:	42b4      	cmp	r4, r6
   2bd3c:	d109      	bne.n	2bd52 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2bd3e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2bd40:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2bd44:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bd46:	6065      	str	r5, [r4, #4]
}
   2bd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2bd4a:	6863      	ldr	r3, [r4, #4]
   2bd4c:	42b3      	cmp	r3, r6
   2bd4e:	d0f6      	beq.n	2bd3e <add_event+0x2a>
   2bd50:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2bd52:	2e00      	cmp	r6, #0
   2bd54:	d0f3      	beq.n	2bd3e <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2bd56:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bd58:	b101      	cbz	r1, 2bd5c <add_event+0x48>
   2bd5a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2bd5c:	4638      	mov	r0, r7
   2bd5e:	f7ff fe3c 	bl	2b9da <z_sched_prio_cmp>
   2bd62:	2800      	cmp	r0, #0
   2bd64:	ddf1      	ble.n	2bd4a <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2bd66:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2bd68:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2bd6c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2bd6e:	6075      	str	r5, [r6, #4]
			return;
   2bd70:	e7ea      	b.n	2bd48 <add_event+0x34>

0002bd72 <register_events>:
{
   2bd72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2bd76:	2500      	movs	r5, #0
{
   2bd78:	468b      	mov	fp, r1
   2bd7a:	4614      	mov	r4, r2
   2bd7c:	461f      	mov	r7, r3
   2bd7e:	4682      	mov	sl, r0
	int events_registered = 0;
   2bd80:	462e      	mov	r6, r5
	event->poller = NULL;
   2bd82:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2bd84:	455d      	cmp	r5, fp
   2bd86:	db02      	blt.n	2bd8e <register_events+0x1c>
}
   2bd88:	4630      	mov	r0, r6
   2bd8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bd92:	f3ef 8911 	mrs	r9, BASEPRI
   2bd96:	f383 8812 	msr	BASEPRI_MAX, r3
   2bd9a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2bd9e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2bda2:	f003 031f 	and.w	r3, r3, #31
   2bda6:	3b01      	subs	r3, #1
   2bda8:	2b07      	cmp	r3, #7
   2bdaa:	d80f      	bhi.n	2bdcc <register_events+0x5a>
   2bdac:	e8df f003 	tbb	[pc, r3]
   2bdb0:	0a0e041e 	.word	0x0a0e041e
   2bdb4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2bdb8:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bdbc:	689b      	ldr	r3, [r3, #8]
   2bdbe:	b12b      	cbz	r3, 2bdcc <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2bdc0:	2302      	movs	r3, #2
   2bdc2:	e020      	b.n	2be06 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2bdc4:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bdc8:	681b      	ldr	r3, [r3, #0]
   2bdca:	bb8b      	cbnz	r3, 2be30 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2bdcc:	bb47      	cbnz	r7, 2be20 <register_events+0xae>
   2bdce:	7823      	ldrb	r3, [r4, #0]
   2bdd0:	b333      	cbz	r3, 2be20 <register_events+0xae>
	switch (event->type) {
   2bdd2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2bdd6:	f003 031f 	and.w	r3, r3, #31
   2bdda:	3b01      	subs	r3, #1
   2bddc:	2b07      	cmp	r3, #7
   2bdde:	d830      	bhi.n	2be42 <register_events+0xd0>
   2bde0:	e8df f003 	tbb	[pc, r3]
   2bde4:	282f2833 	.word	0x282f2833
   2bde8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2bdec:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bdf0:	689b      	ldr	r3, [r3, #8]
   2bdf2:	2b00      	cmp	r3, #0
   2bdf4:	d0ea      	beq.n	2bdcc <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2bdf6:	2301      	movs	r3, #1
   2bdf8:	e005      	b.n	2be06 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2bdfa:	f8da 3010 	ldr.w	r3, [sl, #16]
   2bdfe:	6a1b      	ldr	r3, [r3, #32]
   2be00:	2b00      	cmp	r3, #0
   2be02:	d0e3      	beq.n	2bdcc <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2be04:	2310      	movs	r3, #16
	event->state |= state;
   2be06:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2be0a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2be0e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2be12:	430b      	orrs	r3, r1
   2be14:	f363 3252 	bfi	r2, r3, #13, #6
   2be18:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2be1c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2be20:	f389 8811 	msr	BASEPRI, r9
   2be24:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2be28:	3501      	adds	r5, #1
   2be2a:	f10a 0a14 	add.w	sl, sl, #20
   2be2e:	e7a9      	b.n	2bd84 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2be30:	2304      	movs	r3, #4
   2be32:	e7e8      	b.n	2be06 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2be34:	f8da 0010 	ldr.w	r0, [sl, #16]
   2be38:	4622      	mov	r2, r4
   2be3a:	4651      	mov	r1, sl
   2be3c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2be3e:	f7ff ff69 	bl	2bd14 <add_event>
	event->poller = poller;
   2be42:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2be46:	3601      	adds	r6, #1
   2be48:	e7ea      	b.n	2be20 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2be4a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2be4e:	4622      	mov	r2, r4
   2be50:	4651      	mov	r1, sl
   2be52:	e7f4      	b.n	2be3e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2be54:	f8da 0010 	ldr.w	r0, [sl, #16]
   2be58:	4622      	mov	r2, r4
   2be5a:	4651      	mov	r1, sl
   2be5c:	3024      	adds	r0, #36	; 0x24
   2be5e:	e7ee      	b.n	2be3e <register_events+0xcc>

0002be60 <signal_poll_event>:
{
   2be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2be64:	6884      	ldr	r4, [r0, #8]
{
   2be66:	4605      	mov	r5, r0
   2be68:	460e      	mov	r6, r1
	if (poller != NULL) {
   2be6a:	b144      	cbz	r4, 2be7e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2be6c:	7863      	ldrb	r3, [r4, #1]
   2be6e:	2b01      	cmp	r3, #1
   2be70:	d136      	bne.n	2bee0 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2be72:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2be76:	f013 0302 	ands.w	r3, r3, #2
   2be7a:	d10a      	bne.n	2be92 <signal_poll_event+0x32>
		poller->is_polling = false;
   2be7c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2be7e:	68eb      	ldr	r3, [r5, #12]
   2be80:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2be84:	430e      	orrs	r6, r1
	event->poller = NULL;
   2be86:	2000      	movs	r0, #0
	event->state |= state;
   2be88:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2be8c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2be8e:	60eb      	str	r3, [r5, #12]
	return retcode;
   2be90:	e00b      	b.n	2beaa <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2be92:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2be96:	f1b3 3fff 	cmp.w	r3, #4294967295
   2be9a:	bf08      	it	eq
   2be9c:	f112 0f02 	cmneq.w	r2, #2
   2bea0:	d105      	bne.n	2beae <signal_poll_event+0x4e>
		poller->is_polling = false;
   2bea2:	2300      	movs	r3, #0
   2bea4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2bea6:	f06f 000a 	mvn.w	r0, #10
}
   2beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2beae:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2beb2:	4640      	mov	r0, r8
   2beb4:	f7ff fdaa 	bl	2ba0c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2beb8:	2e08      	cmp	r6, #8
   2beba:	bf0c      	ite	eq
   2bebc:	f06f 0303 	mvneq.w	r3, #3
   2bec0:	2300      	movne	r3, #0
   2bec2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2bec4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bec8:	06db      	lsls	r3, r3, #27
   2beca:	d102      	bne.n	2bed2 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2becc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2bed0:	b10f      	cbz	r7, 2bed6 <signal_poll_event+0x76>
		poller->is_polling = false;
   2bed2:	2300      	movs	r3, #0
   2bed4:	e7d2      	b.n	2be7c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2bed6:	4640      	mov	r0, r8
   2bed8:	f7ff fdc8 	bl	2ba6c <z_ready_thread>
		poller->is_polling = false;
   2bedc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2bede:	e7ce      	b.n	2be7e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2bee0:	2b02      	cmp	r3, #2
   2bee2:	d1f6      	bne.n	2bed2 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2bee4:	7823      	ldrb	r3, [r4, #0]
   2bee6:	2b00      	cmp	r3, #0
   2bee8:	d0c9      	beq.n	2be7e <signal_poll_event+0x1e>
   2beea:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2beee:	2f00      	cmp	r7, #0
   2bef0:	d0f4      	beq.n	2bedc <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2bef2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2bef6:	f1a4 0914 	sub.w	r9, r4, #20
   2befa:	f104 0014 	add.w	r0, r4, #20
   2befe:	f7ff fe6b 	bl	2bbd8 <z_abort_timeout>
		twork->poll_result = 0;
   2bf02:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2bf06:	4649      	mov	r1, r9
   2bf08:	4638      	mov	r0, r7
   2bf0a:	f7ff fcdb 	bl	2b8c4 <z_work_submit_to_queue>
		poller->is_polling = false;
   2bf0e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2bf12:	e7b4      	b.n	2be7e <signal_poll_event+0x1e>

0002bf14 <clear_event_registrations>:
	while (num_events--) {
   2bf14:	2314      	movs	r3, #20
{
   2bf16:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bf18:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2bf1c:	2400      	movs	r4, #0
   2bf1e:	2601      	movs	r6, #1
	while (num_events--) {
   2bf20:	b901      	cbnz	r1, 2bf24 <clear_event_registrations+0x10>
}
   2bf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2bf24:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2bf28:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2bf2c:	f003 031f 	and.w	r3, r3, #31
   2bf30:	2b08      	cmp	r3, #8
   2bf32:	f1a0 0714 	sub.w	r7, r0, #20
   2bf36:	d80d      	bhi.n	2bf54 <clear_event_registrations+0x40>
   2bf38:	fa06 f303 	lsl.w	r3, r6, r3
   2bf3c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2bf40:	d008      	beq.n	2bf54 <clear_event_registrations+0x40>
	return node->next != NULL;
   2bf42:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2bf46:	b12b      	cbz	r3, 2bf54 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2bf48:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2bf4c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2bf4e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2bf50:	e940 4405 	strd	r4, r4, [r0, #-20]
   2bf54:	f382 8811 	msr	BASEPRI, r2
   2bf58:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2bf5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bf60:	f3ef 8211 	mrs	r2, BASEPRI
   2bf64:	f383 8812 	msr	BASEPRI_MAX, r3
   2bf68:	f3bf 8f6f 	isb	sy
   2bf6c:	3901      	subs	r1, #1
   2bf6e:	4638      	mov	r0, r7
   2bf70:	e7d6      	b.n	2bf20 <clear_event_registrations+0xc>

0002bf72 <z_handle_obj_poll_events>:
{
   2bf72:	4603      	mov	r3, r0
	return list->head == list;
   2bf74:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2bf76:	4283      	cmp	r3, r0
   2bf78:	d008      	beq.n	2bf8c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2bf7a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2bf7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bf80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bf82:	2300      	movs	r3, #0
	node->prev = NULL;
   2bf84:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2bf88:	f7ff bf6a 	b.w	2be60 <signal_poll_event>
}
   2bf8c:	4770      	bx	lr

0002bf8e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2bf8e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2bf90:	e9c0 0000 	strd	r0, r0, [r0]
   2bf94:	6083      	str	r3, [r0, #8]
}
   2bf96:	4770      	bx	lr

0002bf98 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2bf98:	2300      	movs	r3, #0
   2bf9a:	6083      	str	r3, [r0, #8]
}
   2bf9c:	4770      	bx	lr

0002bf9e <k_free>:
	if (ptr != NULL) {
   2bf9e:	b120      	cbz	r0, 2bfaa <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2bfa0:	1f01      	subs	r1, r0, #4
   2bfa2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2bfa6:	f7ff baa3 	b.w	2b4f0 <k_heap_free>
}
   2bfaa:	4770      	bx	lr

0002bfac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2bfac:	4770      	bx	lr

0002bfae <memcmp>:
   2bfae:	b510      	push	{r4, lr}
   2bfb0:	3901      	subs	r1, #1
   2bfb2:	4402      	add	r2, r0
   2bfb4:	4290      	cmp	r0, r2
   2bfb6:	d101      	bne.n	2bfbc <memcmp+0xe>
   2bfb8:	2000      	movs	r0, #0
   2bfba:	e005      	b.n	2bfc8 <memcmp+0x1a>
   2bfbc:	7803      	ldrb	r3, [r0, #0]
   2bfbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bfc2:	42a3      	cmp	r3, r4
   2bfc4:	d001      	beq.n	2bfca <memcmp+0x1c>
   2bfc6:	1b18      	subs	r0, r3, r4
   2bfc8:	bd10      	pop	{r4, pc}
   2bfca:	3001      	adds	r0, #1
   2bfcc:	e7f2      	b.n	2bfb4 <memcmp+0x6>

0002bfce <memcpy>:
   2bfce:	440a      	add	r2, r1
   2bfd0:	4291      	cmp	r1, r2
   2bfd2:	f100 33ff 	add.w	r3, r0, #4294967295
   2bfd6:	d100      	bne.n	2bfda <memcpy+0xc>
   2bfd8:	4770      	bx	lr
   2bfda:	b510      	push	{r4, lr}
   2bfdc:	f811 4b01 	ldrb.w	r4, [r1], #1
   2bfe0:	f803 4f01 	strb.w	r4, [r3, #1]!
   2bfe4:	4291      	cmp	r1, r2
   2bfe6:	d1f9      	bne.n	2bfdc <memcpy+0xe>
   2bfe8:	bd10      	pop	{r4, pc}

0002bfea <__memcpy_chk>:
   2bfea:	429a      	cmp	r2, r3
   2bfec:	b508      	push	{r3, lr}
   2bfee:	d901      	bls.n	2bff4 <__memcpy_chk+0xa>
   2bff0:	f7e9 fb32 	bl	15658 <__chk_fail>
   2bff4:	4281      	cmp	r1, r0
   2bff6:	d804      	bhi.n	2c002 <__memcpy_chk+0x18>
   2bff8:	188b      	adds	r3, r1, r2
   2bffa:	4298      	cmp	r0, r3
   2bffc:	d3f8      	bcc.n	2bff0 <__memcpy_chk+0x6>
   2bffe:	4281      	cmp	r1, r0
   2c000:	d102      	bne.n	2c008 <__memcpy_chk+0x1e>
   2c002:	1883      	adds	r3, r0, r2
   2c004:	4299      	cmp	r1, r3
   2c006:	d3f3      	bcc.n	2bff0 <__memcpy_chk+0x6>
   2c008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c00c:	f7ff bfdf 	b.w	2bfce <memcpy>

0002c010 <memset>:
   2c010:	4402      	add	r2, r0
   2c012:	4603      	mov	r3, r0
   2c014:	4293      	cmp	r3, r2
   2c016:	d100      	bne.n	2c01a <memset+0xa>
   2c018:	4770      	bx	lr
   2c01a:	f803 1b01 	strb.w	r1, [r3], #1
   2c01e:	e7f9      	b.n	2c014 <memset+0x4>

0002c020 <__sfputc_r>:
   2c020:	6893      	ldr	r3, [r2, #8]
   2c022:	3b01      	subs	r3, #1
   2c024:	2b00      	cmp	r3, #0
   2c026:	b410      	push	{r4}
   2c028:	6093      	str	r3, [r2, #8]
   2c02a:	da07      	bge.n	2c03c <__sfputc_r+0x1c>
   2c02c:	6994      	ldr	r4, [r2, #24]
   2c02e:	42a3      	cmp	r3, r4
   2c030:	db01      	blt.n	2c036 <__sfputc_r+0x16>
   2c032:	290a      	cmp	r1, #10
   2c034:	d102      	bne.n	2c03c <__sfputc_r+0x1c>
   2c036:	bc10      	pop	{r4}
   2c038:	f7f7 bcd0 	b.w	239dc <__swbuf_r>
   2c03c:	6813      	ldr	r3, [r2, #0]
   2c03e:	1c58      	adds	r0, r3, #1
   2c040:	6010      	str	r0, [r2, #0]
   2c042:	7019      	strb	r1, [r3, #0]
   2c044:	4608      	mov	r0, r1
   2c046:	bc10      	pop	{r4}
   2c048:	4770      	bx	lr

0002c04a <__sfputs_r>:
   2c04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c04c:	4606      	mov	r6, r0
   2c04e:	460f      	mov	r7, r1
   2c050:	4614      	mov	r4, r2
   2c052:	18d5      	adds	r5, r2, r3
   2c054:	42ac      	cmp	r4, r5
   2c056:	d101      	bne.n	2c05c <__sfputs_r+0x12>
   2c058:	2000      	movs	r0, #0
   2c05a:	e007      	b.n	2c06c <__sfputs_r+0x22>
   2c05c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2c060:	463a      	mov	r2, r7
   2c062:	4630      	mov	r0, r6
   2c064:	f7ff ffdc 	bl	2c020 <__sfputc_r>
   2c068:	1c43      	adds	r3, r0, #1
   2c06a:	d1f3      	bne.n	2c054 <__sfputs_r+0xa>
   2c06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c06e <_printf_common>:
   2c06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c072:	4616      	mov	r6, r2
   2c074:	4699      	mov	r9, r3
   2c076:	688a      	ldr	r2, [r1, #8]
   2c078:	690b      	ldr	r3, [r1, #16]
   2c07a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2c07e:	4293      	cmp	r3, r2
   2c080:	bfb8      	it	lt
   2c082:	4613      	movlt	r3, r2
   2c084:	6033      	str	r3, [r6, #0]
   2c086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2c08a:	4607      	mov	r7, r0
   2c08c:	460c      	mov	r4, r1
   2c08e:	b10a      	cbz	r2, 2c094 <_printf_common+0x26>
   2c090:	3301      	adds	r3, #1
   2c092:	6033      	str	r3, [r6, #0]
   2c094:	6823      	ldr	r3, [r4, #0]
   2c096:	0699      	lsls	r1, r3, #26
   2c098:	bf42      	ittt	mi
   2c09a:	6833      	ldrmi	r3, [r6, #0]
   2c09c:	3302      	addmi	r3, #2
   2c09e:	6033      	strmi	r3, [r6, #0]
   2c0a0:	6825      	ldr	r5, [r4, #0]
   2c0a2:	f015 0506 	ands.w	r5, r5, #6
   2c0a6:	d106      	bne.n	2c0b6 <_printf_common+0x48>
   2c0a8:	f104 0a19 	add.w	sl, r4, #25
   2c0ac:	68e3      	ldr	r3, [r4, #12]
   2c0ae:	6832      	ldr	r2, [r6, #0]
   2c0b0:	1a9b      	subs	r3, r3, r2
   2c0b2:	42ab      	cmp	r3, r5
   2c0b4:	dc26      	bgt.n	2c104 <_printf_common+0x96>
   2c0b6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2c0ba:	1e13      	subs	r3, r2, #0
   2c0bc:	6822      	ldr	r2, [r4, #0]
   2c0be:	bf18      	it	ne
   2c0c0:	2301      	movne	r3, #1
   2c0c2:	0692      	lsls	r2, r2, #26
   2c0c4:	d42b      	bmi.n	2c11e <_printf_common+0xb0>
   2c0c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2c0ca:	4649      	mov	r1, r9
   2c0cc:	4638      	mov	r0, r7
   2c0ce:	47c0      	blx	r8
   2c0d0:	3001      	adds	r0, #1
   2c0d2:	d01e      	beq.n	2c112 <_printf_common+0xa4>
   2c0d4:	6823      	ldr	r3, [r4, #0]
   2c0d6:	68e5      	ldr	r5, [r4, #12]
   2c0d8:	6832      	ldr	r2, [r6, #0]
   2c0da:	f003 0306 	and.w	r3, r3, #6
   2c0de:	2b04      	cmp	r3, #4
   2c0e0:	bf08      	it	eq
   2c0e2:	1aad      	subeq	r5, r5, r2
   2c0e4:	68a3      	ldr	r3, [r4, #8]
   2c0e6:	6922      	ldr	r2, [r4, #16]
   2c0e8:	bf0c      	ite	eq
   2c0ea:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2c0ee:	2500      	movne	r5, #0
   2c0f0:	4293      	cmp	r3, r2
   2c0f2:	bfc4      	itt	gt
   2c0f4:	1a9b      	subgt	r3, r3, r2
   2c0f6:	18ed      	addgt	r5, r5, r3
   2c0f8:	2600      	movs	r6, #0
   2c0fa:	341a      	adds	r4, #26
   2c0fc:	42b5      	cmp	r5, r6
   2c0fe:	d11a      	bne.n	2c136 <_printf_common+0xc8>
   2c100:	2000      	movs	r0, #0
   2c102:	e008      	b.n	2c116 <_printf_common+0xa8>
   2c104:	2301      	movs	r3, #1
   2c106:	4652      	mov	r2, sl
   2c108:	4649      	mov	r1, r9
   2c10a:	4638      	mov	r0, r7
   2c10c:	47c0      	blx	r8
   2c10e:	3001      	adds	r0, #1
   2c110:	d103      	bne.n	2c11a <_printf_common+0xac>
   2c112:	f04f 30ff 	mov.w	r0, #4294967295
   2c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c11a:	3501      	adds	r5, #1
   2c11c:	e7c6      	b.n	2c0ac <_printf_common+0x3e>
   2c11e:	18e1      	adds	r1, r4, r3
   2c120:	1c5a      	adds	r2, r3, #1
   2c122:	2030      	movs	r0, #48	; 0x30
   2c124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2c128:	4422      	add	r2, r4
   2c12a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2c12e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2c132:	3302      	adds	r3, #2
   2c134:	e7c7      	b.n	2c0c6 <_printf_common+0x58>
   2c136:	2301      	movs	r3, #1
   2c138:	4622      	mov	r2, r4
   2c13a:	4649      	mov	r1, r9
   2c13c:	4638      	mov	r0, r7
   2c13e:	47c0      	blx	r8
   2c140:	3001      	adds	r0, #1
   2c142:	d0e6      	beq.n	2c112 <_printf_common+0xa4>
   2c144:	3601      	adds	r6, #1
   2c146:	e7d9      	b.n	2c0fc <_printf_common+0x8e>

0002c148 <strcpy>:
   2c148:	4603      	mov	r3, r0
   2c14a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c14e:	f803 2b01 	strb.w	r2, [r3], #1
   2c152:	2a00      	cmp	r2, #0
   2c154:	d1f9      	bne.n	2c14a <strcpy+0x2>
   2c156:	4770      	bx	lr

0002c158 <strncmp>:
   2c158:	b510      	push	{r4, lr}
   2c15a:	4603      	mov	r3, r0
   2c15c:	b172      	cbz	r2, 2c17c <strncmp+0x24>
   2c15e:	3901      	subs	r1, #1
   2c160:	1884      	adds	r4, r0, r2
   2c162:	f813 0b01 	ldrb.w	r0, [r3], #1
   2c166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2c16a:	4290      	cmp	r0, r2
   2c16c:	d101      	bne.n	2c172 <strncmp+0x1a>
   2c16e:	42a3      	cmp	r3, r4
   2c170:	d101      	bne.n	2c176 <strncmp+0x1e>
   2c172:	1a80      	subs	r0, r0, r2
   2c174:	bd10      	pop	{r4, pc}
   2c176:	2800      	cmp	r0, #0
   2c178:	d1f3      	bne.n	2c162 <strncmp+0xa>
   2c17a:	e7fa      	b.n	2c172 <strncmp+0x1a>
   2c17c:	4610      	mov	r0, r2
   2c17e:	e7f9      	b.n	2c174 <strncmp+0x1c>

0002c180 <__strncpy_chk>:
   2c180:	429a      	cmp	r2, r3
   2c182:	b508      	push	{r3, lr}
   2c184:	d901      	bls.n	2c18a <__strncpy_chk+0xa>
   2c186:	f7e9 fa67 	bl	15658 <__chk_fail>
   2c18a:	4281      	cmp	r1, r0
   2c18c:	d804      	bhi.n	2c198 <__strncpy_chk+0x18>
   2c18e:	188b      	adds	r3, r1, r2
   2c190:	4298      	cmp	r0, r3
   2c192:	d3f8      	bcc.n	2c186 <__strncpy_chk+0x6>
   2c194:	4281      	cmp	r1, r0
   2c196:	d102      	bne.n	2c19e <__strncpy_chk+0x1e>
   2c198:	1883      	adds	r3, r0, r2
   2c19a:	4299      	cmp	r1, r3
   2c19c:	d3f3      	bcc.n	2c186 <__strncpy_chk+0x6>
   2c19e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c1a2:	f000 b8c3 	b.w	2c32c <strncpy>

0002c1a6 <strnlen>:
   2c1a6:	b510      	push	{r4, lr}
   2c1a8:	4602      	mov	r2, r0
   2c1aa:	4401      	add	r1, r0
   2c1ac:	428a      	cmp	r2, r1
   2c1ae:	4613      	mov	r3, r2
   2c1b0:	d003      	beq.n	2c1ba <strnlen+0x14>
   2c1b2:	781c      	ldrb	r4, [r3, #0]
   2c1b4:	3201      	adds	r2, #1
   2c1b6:	2c00      	cmp	r4, #0
   2c1b8:	d1f8      	bne.n	2c1ac <strnlen+0x6>
   2c1ba:	1a18      	subs	r0, r3, r0
   2c1bc:	bd10      	pop	{r4, pc}

0002c1be <__sfmoreglue>:
   2c1be:	b570      	push	{r4, r5, r6, lr}
   2c1c0:	2268      	movs	r2, #104	; 0x68
   2c1c2:	1e4d      	subs	r5, r1, #1
   2c1c4:	4355      	muls	r5, r2
   2c1c6:	460e      	mov	r6, r1
   2c1c8:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2c1cc:	f7f7 f8b2 	bl	23334 <_malloc_r>
   2c1d0:	4604      	mov	r4, r0
   2c1d2:	b140      	cbz	r0, 2c1e6 <__sfmoreglue+0x28>
   2c1d4:	2100      	movs	r1, #0
   2c1d6:	e9c0 1600 	strd	r1, r6, [r0]
   2c1da:	300c      	adds	r0, #12
   2c1dc:	60a0      	str	r0, [r4, #8]
   2c1de:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2c1e2:	f7ff ff15 	bl	2c010 <memset>
   2c1e6:	4620      	mov	r0, r4
   2c1e8:	bd70      	pop	{r4, r5, r6, pc}

0002c1ea <_fwalk_reent>:
   2c1ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c1ee:	4606      	mov	r6, r0
   2c1f0:	4688      	mov	r8, r1
   2c1f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2c1f6:	2700      	movs	r7, #0
   2c1f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2c1fc:	f1b9 0901 	subs.w	r9, r9, #1
   2c200:	d505      	bpl.n	2c20e <_fwalk_reent+0x24>
   2c202:	6824      	ldr	r4, [r4, #0]
   2c204:	2c00      	cmp	r4, #0
   2c206:	d1f7      	bne.n	2c1f8 <_fwalk_reent+0xe>
   2c208:	4638      	mov	r0, r7
   2c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c20e:	89ab      	ldrh	r3, [r5, #12]
   2c210:	2b01      	cmp	r3, #1
   2c212:	d907      	bls.n	2c224 <_fwalk_reent+0x3a>
   2c214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2c218:	3301      	adds	r3, #1
   2c21a:	d003      	beq.n	2c224 <_fwalk_reent+0x3a>
   2c21c:	4629      	mov	r1, r5
   2c21e:	4630      	mov	r0, r6
   2c220:	47c0      	blx	r8
   2c222:	4307      	orrs	r7, r0
   2c224:	3568      	adds	r5, #104	; 0x68
   2c226:	e7e9      	b.n	2c1fc <_fwalk_reent+0x12>

0002c228 <__swhatbuf_r>:
   2c228:	b570      	push	{r4, r5, r6, lr}
   2c22a:	460e      	mov	r6, r1
   2c22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c230:	2900      	cmp	r1, #0
   2c232:	b096      	sub	sp, #88	; 0x58
   2c234:	4614      	mov	r4, r2
   2c236:	461d      	mov	r5, r3
   2c238:	da08      	bge.n	2c24c <__swhatbuf_r+0x24>
   2c23a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   2c23e:	2200      	movs	r2, #0
   2c240:	602a      	str	r2, [r5, #0]
   2c242:	061a      	lsls	r2, r3, #24
   2c244:	d410      	bmi.n	2c268 <__swhatbuf_r+0x40>
   2c246:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2c24a:	e00e      	b.n	2c26a <__swhatbuf_r+0x42>
   2c24c:	466a      	mov	r2, sp
   2c24e:	f7f7 fe71 	bl	23f34 <_fstat_r>
   2c252:	2800      	cmp	r0, #0
   2c254:	dbf1      	blt.n	2c23a <__swhatbuf_r+0x12>
   2c256:	9a01      	ldr	r2, [sp, #4]
   2c258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2c25c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2c260:	425a      	negs	r2, r3
   2c262:	415a      	adcs	r2, r3
   2c264:	602a      	str	r2, [r5, #0]
   2c266:	e7ee      	b.n	2c246 <__swhatbuf_r+0x1e>
   2c268:	2340      	movs	r3, #64	; 0x40
   2c26a:	2000      	movs	r0, #0
   2c26c:	6023      	str	r3, [r4, #0]
   2c26e:	b016      	add	sp, #88	; 0x58
   2c270:	bd70      	pop	{r4, r5, r6, pc}

0002c272 <memmove>:
   2c272:	4288      	cmp	r0, r1
   2c274:	b510      	push	{r4, lr}
   2c276:	eb01 0402 	add.w	r4, r1, r2
   2c27a:	d902      	bls.n	2c282 <memmove+0x10>
   2c27c:	4284      	cmp	r4, r0
   2c27e:	4623      	mov	r3, r4
   2c280:	d807      	bhi.n	2c292 <memmove+0x20>
   2c282:	1e43      	subs	r3, r0, #1
   2c284:	42a1      	cmp	r1, r4
   2c286:	d008      	beq.n	2c29a <memmove+0x28>
   2c288:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c28c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2c290:	e7f8      	b.n	2c284 <memmove+0x12>
   2c292:	4402      	add	r2, r0
   2c294:	4601      	mov	r1, r0
   2c296:	428a      	cmp	r2, r1
   2c298:	d100      	bne.n	2c29c <memmove+0x2a>
   2c29a:	bd10      	pop	{r4, pc}
   2c29c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2c2a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2c2a4:	e7f7      	b.n	2c296 <memmove+0x24>

0002c2a6 <__sread>:
   2c2a6:	b510      	push	{r4, lr}
   2c2a8:	460c      	mov	r4, r1
   2c2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c2ae:	f7f7 fe75 	bl	23f9c <_read_r>
   2c2b2:	2800      	cmp	r0, #0
   2c2b4:	bfab      	itete	ge
   2c2b6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2c2b8:	89a3      	ldrhlt	r3, [r4, #12]
   2c2ba:	181b      	addge	r3, r3, r0
   2c2bc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2c2c0:	bfac      	ite	ge
   2c2c2:	6563      	strge	r3, [r4, #84]	; 0x54
   2c2c4:	81a3      	strhlt	r3, [r4, #12]
   2c2c6:	bd10      	pop	{r4, pc}

0002c2c8 <__swrite>:
   2c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2cc:	461f      	mov	r7, r3
   2c2ce:	898b      	ldrh	r3, [r1, #12]
   2c2d0:	05db      	lsls	r3, r3, #23
   2c2d2:	4605      	mov	r5, r0
   2c2d4:	460c      	mov	r4, r1
   2c2d6:	4616      	mov	r6, r2
   2c2d8:	d505      	bpl.n	2c2e6 <__swrite+0x1e>
   2c2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c2de:	2302      	movs	r3, #2
   2c2e0:	2200      	movs	r2, #0
   2c2e2:	f7f7 fe49 	bl	23f78 <_lseek_r>
   2c2e6:	89a3      	ldrh	r3, [r4, #12]
   2c2e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2c2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2c2f0:	81a3      	strh	r3, [r4, #12]
   2c2f2:	4632      	mov	r2, r6
   2c2f4:	463b      	mov	r3, r7
   2c2f6:	4628      	mov	r0, r5
   2c2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c2fc:	f7f7 bdf8 	b.w	23ef0 <_write_r>

0002c300 <__sseek>:
   2c300:	b510      	push	{r4, lr}
   2c302:	460c      	mov	r4, r1
   2c304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c308:	f7f7 fe36 	bl	23f78 <_lseek_r>
   2c30c:	1c43      	adds	r3, r0, #1
   2c30e:	89a3      	ldrh	r3, [r4, #12]
   2c310:	bf15      	itete	ne
   2c312:	6560      	strne	r0, [r4, #84]	; 0x54
   2c314:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2c318:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2c31c:	81a3      	strheq	r3, [r4, #12]
   2c31e:	bf18      	it	ne
   2c320:	81a3      	strhne	r3, [r4, #12]
   2c322:	bd10      	pop	{r4, pc}

0002c324 <__sclose>:
   2c324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c328:	f7f7 bdf4 	b.w	23f14 <_close_r>

0002c32c <strncpy>:
   2c32c:	b510      	push	{r4, lr}
   2c32e:	3901      	subs	r1, #1
   2c330:	4603      	mov	r3, r0
   2c332:	b132      	cbz	r2, 2c342 <strncpy+0x16>
   2c334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c338:	f803 4b01 	strb.w	r4, [r3], #1
   2c33c:	3a01      	subs	r2, #1
   2c33e:	2c00      	cmp	r4, #0
   2c340:	d1f7      	bne.n	2c332 <strncpy+0x6>
   2c342:	441a      	add	r2, r3
   2c344:	2100      	movs	r1, #0
   2c346:	4293      	cmp	r3, r2
   2c348:	d100      	bne.n	2c34c <strncpy+0x20>
   2c34a:	bd10      	pop	{r4, pc}
   2c34c:	f803 1b01 	strb.w	r1, [r3], #1
   2c350:	e7f9      	b.n	2c346 <strncpy+0x1a>
